{"version":3,"file":"sariska-media-transport.min.js","mappings":"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AAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,IAAI,KAAK,EAAE,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,OAAO,OAAO,KAAK,GAAG,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,OAAO,EAAE,KAAK,IAAI,KAAK,IAAI,KAAK,EAAE,KAAK,IAAI,KAAK,EAAE,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,OAAO,EAAE,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,EAAE,OAAO,KAAK,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,OAAO,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,OAAO,WAAW,KAAK,GAAG,KAAK,EAAE,OAAO,MAAM,KAAK,GAAG,KAAK,GAAG,OAAO,GAAG,KAAK,GAAG,KAAK,GAAG,OAAO,KAAK,KAAK,EAAE,OAAO,QAAQ,KAAK,EAAE,OAAO,MAAM,KAAK,GAAG,OAAO,MAAM,KAAK,GAAG,OAAO,MAA2B,KAAK,GAAG,OAAO,IAAI,KAAK,GAAG,OAAO,IAAI,KAAK,GAAG,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","sources":["webpack://SariskaMediaTransport/webpack/universalModuleDefinition","webpack://SariskaMediaTransport/./JitsiConferenceErrors.ts","webpack://SariskaMediaTransport/./JitsiConferenceEvents.ts","webpack://SariskaMediaTransport/./modules/statistics/constants.js","webpack://SariskaMediaTransport/./JitsiTrackErrors.ts","webpack://SariskaMediaTransport/./JitsiTrackError.js","webpack://SariskaMediaTransport/./JitsiTrackEvents.ts","webpack://SariskaMediaTransport/./service/statistics/AnalyticsEvents.ts","webpack://SariskaMediaTransport/./service/statistics/Events.ts","webpack://SariskaMediaTransport/./node_modules/@jitsi/js-utils/build/browser-detection/browsers.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/js-utils/build/browser-detection/BrowserDetection.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/js-utils/build/jitsi-local-storage/index.js","webpack://SariskaMediaTransport/./modules/browser/BrowserCapabilities.js","webpack://SariskaMediaTransport/./modules/browser/index.js","webpack://SariskaMediaTransport/./modules/statistics/AnalyticsAdapter.js","webpack://SariskaMediaTransport/./modules/statistics/CallStats.js","webpack://SariskaMediaTransport/./modules/statistics/LocalStatsCollector.js","webpack://SariskaMediaTransport/./modules/util/MathUtil.js","webpack://SariskaMediaTransport/./modules/statistics/PerformanceObserverStats.js","webpack://SariskaMediaTransport/./service/RTC/MediaType.ts","webpack://SariskaMediaTransport/./modules/flags/FeatureFlags.js","webpack://SariskaMediaTransport/./modules/statistics/RTPStatsCollector.js","webpack://SariskaMediaTransport/./modules/statistics/statistics.js","webpack://SariskaMediaTransport/./JitsiConferenceEventManager.js","webpack://SariskaMediaTransport/./modules/connectivity/ParticipantConnectionStatus.js","webpack://SariskaMediaTransport/./JitsiParticipant.js","webpack://SariskaMediaTransport/./JitsiConnectionEvents.ts","webpack://SariskaMediaTransport/./JitsiConnectionErrors.ts","webpack://SariskaMediaTransport/./modules/util/Deferred.js","webpack://SariskaMediaTransport/./modules/util/Listenable.js","webpack://SariskaMediaTransport/./modules/e2ee/E2EEContext.js","webpack://SariskaMediaTransport/./modules/e2ee/KeyHandler.js","webpack://SariskaMediaTransport/./modules/e2ee/ExternallyManagedKeyHandler.js","webpack://SariskaMediaTransport/./node_modules/uuid/wrapper.mjs","webpack://SariskaMediaTransport/./modules/e2ee/OlmAdapter.js","webpack://SariskaMediaTransport/./modules/e2ee/ManagedKeyHandler.js","webpack://SariskaMediaTransport/./modules/e2ee/crypto-utils.js","webpack://SariskaMediaTransport/./modules/e2ee/E2EEncryption.js","webpack://SariskaMediaTransport/./modules/xmpp/Caps.js","webpack://SariskaMediaTransport/./modules/connectivity/NetworkInfo.js","webpack://SariskaMediaTransport/./modules/xmpp/ResumeTask.js","webpack://SariskaMediaTransport/./modules/util/Retry.js","webpack://SariskaMediaTransport/./modules/xmpp/StropheLastSuccess.js","webpack://SariskaMediaTransport/./modules/xmpp/ConnectionPlugin.js","webpack://SariskaMediaTransport/./modules/xmpp/strophe.ping.js","webpack://SariskaMediaTransport/./modules/xmpp/XmppConnection.js","webpack://SariskaMediaTransport/./JitsiTranscriptionStatus.ts","webpack://SariskaMediaTransport/./modules/xmpp/AVModeration.js","webpack://SariskaMediaTransport/./modules/xmpp/BreakoutRooms.js","webpack://SariskaMediaTransport/./modules/xmpp/Lobby.js","webpack://SariskaMediaTransport/./modules/settings/Settings.js","webpack://SariskaMediaTransport/./modules/xmpp/moderator.js","webpack://SariskaMediaTransport/./modules/xmpp/ChatRoom.js","webpack://SariskaMediaTransport/./modules/xmpp/strophe.emuc.js","webpack://SariskaMediaTransport/./modules/xmpp/JingleHelperFunctions.js","webpack://SariskaMediaTransport/./service/RTC/MediaDirection.ts","webpack://SariskaMediaTransport/./modules/RTC/ScreenObtainer.js","webpack://SariskaMediaTransport/./modules/sdp/SDPUtil.js","webpack://SariskaMediaTransport/./modules/sdp/SDP.js","webpack://SariskaMediaTransport/./modules/sdp/SDPDiffer.js","webpack://SariskaMediaTransport/./node_modules/async/dist/async.mjs","webpack://SariskaMediaTransport/./modules/util/AsyncQueue.js","webpack://SariskaMediaTransport/./modules/xmpp/JingleSessionState.ts","webpack://SariskaMediaTransport/./modules/xmpp/JingleSession.js","webpack://SariskaMediaTransport/./modules/xmpp/MediaSessionEvents.ts","webpack://SariskaMediaTransport/./modules/xmpp/JingleSessionPC.js","webpack://SariskaMediaTransport/./modules/xmpp/strophe.jingle.js","webpack://SariskaMediaTransport/./modules/xmpp/strophe.logger.js","webpack://SariskaMediaTransport/./modules/xmpp/strophe.rayo.js","webpack://SariskaMediaTransport/./modules/xmpp/strophe.util.js","webpack://SariskaMediaTransport/./modules/xmpp/xmpp.js","webpack://SariskaMediaTransport/./authenticateAndUpgradeRole.js","webpack://SariskaMediaTransport/./modules/RTC/CodecSelection.js","webpack://SariskaMediaTransport/./modules/RTC/BridgeChannel.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/utils.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/chrome/getusermedia.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/chrome/getdisplaymedia.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/chrome/chrome_shim.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/firefox/getusermedia.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/firefox/getdisplaymedia.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/firefox/firefox_shim.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/safari/safari_shim.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/common_shim.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/adapter_factory.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/adapter_core.js","webpack://SariskaMediaTransport/./modules/RTC/RTCUtils.js","webpack://SariskaMediaTransport/./modules/RTC/JitsiTrack.js","webpack://SariskaMediaTransport/./modules/RTC/JitsiLocalTrack.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/sdp-interop/lib/transform.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/sdp-interop/lib/interop.js","webpack://SariskaMediaTransport/./service/RTC/SignalingEvents.ts","webpack://SariskaMediaTransport/./service/RTC/SignalingLayer.js","webpack://SariskaMediaTransport/./modules/sdp/SdpTransformUtil.js","webpack://SariskaMediaTransport/./modules/sdp/LocalSdpMunger.js","webpack://SariskaMediaTransport/./modules/sdp/RtxModifier.js","webpack://SariskaMediaTransport/./modules/sdp/SdpConsistency.js","webpack://SariskaMediaTransport/./modules/sdp/SdpSimulcast.ts","webpack://SariskaMediaTransport/./modules/connectivity/TrackStreamingStatus.ts","webpack://SariskaMediaTransport/./modules/RTC/JitsiRemoteTrack.js","webpack://SariskaMediaTransport/./modules/RTC/TPCUtils.js","webpack://SariskaMediaTransport/./modules/RTC/TraceablePeerConnection.js","webpack://SariskaMediaTransport/./modules/RTC/RTC.js","webpack://SariskaMediaTransport/./service/connectivity/ConnectionQualityEvents.ts","webpack://SariskaMediaTransport/./modules/connectivity/ConnectionQuality.js","webpack://SariskaMediaTransport/./modules/connectivity/IceFailedHandling.js","webpack://SariskaMediaTransport/./modules/detection/DetectionEvents.ts","webpack://SariskaMediaTransport/./modules/detection/NoAudioSignalDetection.js","webpack://SariskaMediaTransport/./modules/detection/P2PDominantSpeakerDetection.js","webpack://SariskaMediaTransport/./modules/webaudio/WebAudioUtils.js","webpack://SariskaMediaTransport/./modules/detection/TrackVADEmitter.js","webpack://SariskaMediaTransport/./modules/detection/VADAudioAnalyser.js","webpack://SariskaMediaTransport/./modules/detection/VADNoiseDetection.js","webpack://SariskaMediaTransport/./modules/detection/VADTalkMutedDetection.js","webpack://SariskaMediaTransport/./service/e2eping/E2ePingEvents.ts","webpack://SariskaMediaTransport/./modules/e2eping/e2eping.js","webpack://SariskaMediaTransport/./modules/event/Jvb121EventGenerator.js","webpack://SariskaMediaTransport/./modules/local-recording/recording/RecordingAdapter.js","webpack://SariskaMediaTransport/./modules/local-recording/recording/OggAdapter.js","webpack://SariskaMediaTransport/./modules/local-recording/recording/AbstractAudioContextAdapter.js","webpack://SariskaMediaTransport/./modules/local-recording/recording/WavAdapter.js","webpack://SariskaMediaTransport/./modules/local-recording/recording/flac/FlacAdapter.js","webpack://SariskaMediaTransport/./modules/local-recording/recording/flac/messageTypes.js","webpack://SariskaMediaTransport/./modules/local-recording/session/SessionManager.js","webpack://SariskaMediaTransport/./modules/local-recording/controller/RecordingController.js","webpack://SariskaMediaTransport/./modules/local-recording/recording/Utils.js","webpack://SariskaMediaTransport/./modules/qualitycontrol/ReceiveVideoController.js","webpack://SariskaMediaTransport/./modules/qualitycontrol/SendVideoController.js","webpack://SariskaMediaTransport/./modules/recording/recordingXMLUtils.js","webpack://SariskaMediaTransport/./modules/recording/JibriSession.js","webpack://SariskaMediaTransport/./modules/recording/RecordingManager.js","webpack://SariskaMediaTransport/./modules/statistics/AudioOutputProblemDetector.js","webpack://SariskaMediaTransport/./modules/statistics/AvgRTPStatsReporter.js","webpack://SariskaMediaTransport/./modules/statistics/SpeakerStatsCollector.js","webpack://SariskaMediaTransport/./modules/transcription/recordingResult.js","webpack://SariskaMediaTransport/./modules/transcription/trackRecorder.js","webpack://SariskaMediaTransport/./modules/transcription/audioRecorder.js","webpack://SariskaMediaTransport/./modules/transcription/word.js","webpack://SariskaMediaTransport/./modules/transcription/transcriptionServices/SphinxTranscriptionService.js","webpack://SariskaMediaTransport/./modules/transcription/transcriptionServices/AbstractTranscriptionService.js","webpack://SariskaMediaTransport/./modules/transcription/transcriber.js","webpack://SariskaMediaTransport/./modules/version/ComponentsVersions.js","webpack://SariskaMediaTransport/./modules/videosipgw/VideoSIPGWConstants.ts","webpack://SariskaMediaTransport/./modules/videosipgw/JitsiVideoSIPGWSession.js","webpack://SariskaMediaTransport/./modules/videosipgw/VideoSIPGW.js","webpack://SariskaMediaTransport/./modules/xmpp/SignalingLayerImpl.js","webpack://SariskaMediaTransport/./modules/statistics/LocalTracksDuration.js","webpack://SariskaMediaTransport/./JitsiConference.js","webpack://SariskaMediaTransport/./modules/util/parseURLParams.js","webpack://SariskaMediaTransport/./config/index.js","webpack://SariskaMediaTransport/./JitsiConnection.js","webpack://SariskaMediaTransport/./JitsiMediaDevicesEvents.ts","webpack://SariskaMediaTransport/./JitsiMediaDevices.js","webpack://SariskaMediaTransport/./modules/detection/ActiveDeviceDetector.js","webpack://SariskaMediaTransport/./modules/proxyconnection/constants.ts","webpack://SariskaMediaTransport/./modules/proxyconnection/ProxyConnectionPC.js","webpack://SariskaMediaTransport/./modules/proxyconnection/ProxyConnectionService.js","webpack://SariskaMediaTransport/./modules/statistics/PrecallTest.js","webpack://SariskaMediaTransport/./modules/webaudio/AudioMixer.js","webpack://SariskaMediaTransport/./modules/stream-effects/presenter/TimeWorker.js","webpack://SariskaMediaTransport/./modules/stream-effects/presenter/JitsiStreamPresenterEffect.js","webpack://SariskaMediaTransport/./node_modules/rnnoise-wasm/dist/index.js","webpack://SariskaMediaTransport/./modules/stream-effects/rnnoise/RnnoiseProcessor.js","webpack://SariskaMediaTransport/./modules/stream-effects/rnnoise/index.js","webpack://SariskaMediaTransport/./modules/stream-effects/screenshot-capture/constants.js","webpack://SariskaMediaTransport/./modules/stream-effects/screenshot-capture/worker.js","webpack://SariskaMediaTransport/./modules/stream-effects/screenshot-capture/ScreenshotCaptureEffect.js","webpack://SariskaMediaTransport/./modules/stream-effects/virtual-background/constants.js","webpack://SariskaMediaTransport/./modules/stream-effects/virtual-background/TimerWorker.js","webpack://SariskaMediaTransport/./modules/stream-effects/virtual-background/JitsiStreamBackgroundEffect.js","webpack://SariskaMediaTransport/./modules/stream-effects/virtual-background/index.js","webpack://SariskaMediaTransport/./SariskaMediaTransport.js","webpack://SariskaMediaTransport/./modules/stream-effects/presenter/index.js","webpack://SariskaMediaTransport/./modules/stream-effects/screenshot-capture/index.js","webpack://SariskaMediaTransport/./modules/recording/recordingConstants.js","webpack://SariskaMediaTransport/./modules/util/createAnalyticsEvent.js","webpack://SariskaMediaTransport/./index.js","webpack://SariskaMediaTransport/./modules/statistics/SpeakerStats.js","webpack://SariskaMediaTransport/./modules/stream-effects/virtual-background/tflite-simd.js","webpack://SariskaMediaTransport/./modules/stream-effects/virtual-background/tflite.js","webpack://SariskaMediaTransport/./modules/util/AuthUtil.js","webpack://SariskaMediaTransport/./modules/util/EventEmitterForwarder.js","webpack://SariskaMediaTransport/./modules/util/GlobalOnErrorHandler.js","webpack://SariskaMediaTransport/./modules/util/RandomUtil.js","webpack://SariskaMediaTransport/./modules/util/ScriptUtil.js","webpack://SariskaMediaTransport/./modules/util/StringUtils.js","webpack://SariskaMediaTransport/./modules/util/UsernameGenerator.js","webpack://SariskaMediaTransport/./node_modules/@hapi/bourne/lib/index.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/logger/lib/LogCollector.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/logger/lib/Logger.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/logger/lib/index.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/sdp-interop/node_modules/sdp-transform/lib/grammar.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/sdp-interop/node_modules/sdp-transform/lib/index.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/sdp-interop/node_modules/sdp-transform/lib/parser.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/sdp-interop/node_modules/sdp-transform/lib/writer.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/sdp-simulcast/lib/index.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/sdp-simulcast/lib/transform-utils.js","webpack://SariskaMediaTransport/./node_modules/base64-js/index.js","webpack://SariskaMediaTransport/./node_modules/bowser/es5.js","webpack://SariskaMediaTransport/./node_modules/current-executing-script/dist/currentExecutingScript.js","webpack://SariskaMediaTransport/./node_modules/events/events.js","webpack://SariskaMediaTransport/./node_modules/js-md5/src/md5.js","webpack://SariskaMediaTransport/./node_modules/lodash.clonedeep/index.js","webpack://SariskaMediaTransport/./node_modules/lodash.debounce/index.js","webpack://SariskaMediaTransport/./node_modules/lodash.isequal/index.js","webpack://SariskaMediaTransport/./node_modules/pixelmatch/index.js","webpack://SariskaMediaTransport/./node_modules/sdp-transform/lib/grammar.js","webpack://SariskaMediaTransport/./node_modules/sdp-transform/lib/index.js","webpack://SariskaMediaTransport/./node_modules/sdp-transform/lib/parser.js","webpack://SariskaMediaTransport/./node_modules/sdp-transform/lib/writer.js","webpack://SariskaMediaTransport/./node_modules/sdp/sdp.js","webpack://SariskaMediaTransport/./node_modules/strophe.js/dist/strophe.umd.js","webpack://SariskaMediaTransport/../src/strophe.disco.js","webpack://SariskaMediaTransport/../src/strophe.stream-management.js","webpack://SariskaMediaTransport/./node_modules/uuid/dist/bytesToUuid.js","webpack://SariskaMediaTransport/./node_modules/uuid/dist/index.js","webpack://SariskaMediaTransport/./node_modules/uuid/dist/md5-browser.js","webpack://SariskaMediaTransport/./node_modules/uuid/dist/rng-browser.js","webpack://SariskaMediaTransport/./node_modules/uuid/dist/sha1-browser.js","webpack://SariskaMediaTransport/./node_modules/uuid/dist/v1.js","webpack://SariskaMediaTransport/./node_modules/uuid/dist/v3.js","webpack://SariskaMediaTransport/./node_modules/uuid/dist/v35.js","webpack://SariskaMediaTransport/./node_modules/uuid/dist/v4.js","webpack://SariskaMediaTransport/./node_modules/uuid/dist/v5.js","webpack://SariskaMediaTransport/./node_modules/wasm-check/dist/wasm-check.min.js","webpack://SariskaMediaTransport/./service/RTC/BridgeVideoType.js","webpack://SariskaMediaTransport/./service/RTC/CameraFacingMode.js","webpack://SariskaMediaTransport/./service/RTC/CodecMimeType.js","webpack://SariskaMediaTransport/./service/RTC/RTCEvents.ts","webpack://SariskaMediaTransport/./service/RTC/Resolutions.js","webpack://SariskaMediaTransport/./service/RTC/VideoType.ts","webpack://SariskaMediaTransport/./service/authentication/AuthenticationEvents.js","webpack://SariskaMediaTransport/./service/statistics/constants.ts","webpack://SariskaMediaTransport/./service/xmpp/XMPPEvents.ts","webpack://SariskaMediaTransport/webpack/bootstrap","webpack://SariskaMediaTransport/webpack/runtime/amd options","webpack://SariskaMediaTransport/webpack/runtime/compat get default export","webpack://SariskaMediaTransport/webpack/runtime/define property getters","webpack://SariskaMediaTransport/webpack/runtime/global","webpack://SariskaMediaTransport/webpack/runtime/hasOwnProperty shorthand","webpack://SariskaMediaTransport/webpack/runtime/make namespace object","webpack://SariskaMediaTransport/webpack/runtime/node module decorator","webpack://SariskaMediaTransport/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SariskaMediaTransport\"] = factory();\n\telse\n\t\troot[\"SariskaMediaTransport\"] = factory();\n})(self, function() {\nreturn ","/**\n * The errors for the conference.\n */\n\nexport enum JitsiConferenceErrors {\n    /**\n     * Indicates that client must be authenticated to create the conference.\n     */\n    AUTHENTICATION_REQUIRED = 'conference.authenticationRequired',\n\n    /**\n     * Indicates that chat error occurred.\n     */\n    CHAT_ERROR = 'conference.chatError',\n\n    /**\n     * Indicates that a settings error occurred.\n     */\n    SETTINGS_ERROR = 'conference.settingsError',\n\n    /**\n     * Indicates that conference has been destroyed.\n     */\n    CONFERENCE_DESTROYED = 'conference.destroyed',\n\n    /**\n     * Indicates that max users limit has been reached.\n     */\n    CONFERENCE_MAX_USERS = 'conference.max_users',\n\n    /**\n     * Indicates that a connection error occurred when trying to join a conference.\n     */\n    CONNECTION_ERROR = 'conference.connectionError',\n\n    /**\n     * Indicates that the client has been forced to restart by jicofo when the\n     * conference was migrated from one bridge to another.\n     */\n    CONFERENCE_RESTARTED = 'conference.restarted',\n\n    /**\n     * Indicates that a connection error is due to not allowed,\n     * occurred when trying to join a conference.\n     */\n    NOT_ALLOWED_ERROR = 'conference.connectionError.notAllowed',\n\n    /**\n     * Indicates that a connection error is due to not allowed,\n     * occurred when trying to join a conference, only approved members are allowed to join.\n     */\n    MEMBERS_ONLY_ERROR = 'conference.connectionError.membersOnly',\n\n    /**\n     * Indicates that a connection error is due to denied access to the room,\n     * occurred after joining a lobby room and access is denied by the room moderators.\n     */\n    CONFERENCE_ACCESS_DENIED = 'conference.connectionError.accessDenied',\n\n    /**\n     * Indicates that focus error happened.\n     */\n    FOCUS_DISCONNECTED = 'conference.focusDisconnected',\n\n    /**\n     * Indicates that focus left the conference.\n     */\n    FOCUS_LEFT = 'conference.focusLeft',\n\n    /**\n     * Indicates that graceful shutdown happened.\n     */\n    GRACEFUL_SHUTDOWN = 'conference.gracefulShutdown',\n\n    /**\n     * Indicates that the media connection has failed.\n     */\n    ICE_FAILED = 'conference.iceFailed',\n\n    /**\n     * Indicates that the versions of the server side components are incompatible\n     * with the client side.\n     */\n    INCOMPATIBLE_SERVER_VERSIONS = 'conference.incompatible_server_versions',\n\n    /**\n     * Indicates that offer/answer had failed.\n     */\n    OFFER_ANSWER_FAILED = 'conference.offerAnswerFailed',\n\n    /**\n     * Indicates that password cannot be set for this conference.\n     */\n    PASSWORD_NOT_SUPPORTED = 'conference.passwordNotSupported',\n\n    /**\n     * Indicates that a password is required in order to join the conference.\n     */\n    PASSWORD_REQUIRED = 'conference.passwordRequired',\n\n    /**\n     * Indicates that reservation system returned error.\n     */\n    RESERVATION_ERROR = 'conference.reservationError',\n\n    /**\n     * Indicates that there is no available videobridge.\n     */\n    VIDEOBRIDGE_NOT_AVAILABLE = 'conference.videobridgeNotAvailable'\n};\n\n// exported for backward compatibility\nexport const AUTHENTICATION_REQUIRED = JitsiConferenceErrors.AUTHENTICATION_REQUIRED;\nexport const CHAT_ERROR = JitsiConferenceErrors.CHAT_ERROR;\nexport const SETTINGS_ERROR = JitsiConferenceErrors.SETTINGS_ERROR;\nexport const CONFERENCE_DESTROYED = JitsiConferenceErrors.CONFERENCE_DESTROYED;\nexport const CONFERENCE_MAX_USERS = JitsiConferenceErrors.CONFERENCE_MAX_USERS;\nexport const CONNECTION_ERROR = JitsiConferenceErrors.CONNECTION_ERROR;\nexport const CONFERENCE_RESTARTED = JitsiConferenceErrors.CONFERENCE_RESTARTED;\nexport const NOT_ALLOWED_ERROR = JitsiConferenceErrors.NOT_ALLOWED_ERROR;\nexport const MEMBERS_ONLY_ERROR = JitsiConferenceErrors.MEMBERS_ONLY_ERROR;\nexport const CONFERENCE_ACCESS_DENIED = JitsiConferenceErrors.CONFERENCE_ACCESS_DENIED;\nexport const FOCUS_DISCONNECTED = JitsiConferenceErrors.FOCUS_DISCONNECTED;\nexport const FOCUS_LEFT = JitsiConferenceErrors.FOCUS_LEFT;\nexport const GRACEFUL_SHUTDOWN = JitsiConferenceErrors.GRACEFUL_SHUTDOWN;\nexport const ICE_FAILED = JitsiConferenceErrors.ICE_FAILED;\nexport const INCOMPATIBLE_SERVER_VERSIONS = JitsiConferenceErrors.INCOMPATIBLE_SERVER_VERSIONS;\nexport const OFFER_ANSWER_FAILED = JitsiConferenceErrors.OFFER_ANSWER_FAILED;\nexport const PASSWORD_NOT_SUPPORTED = JitsiConferenceErrors.PASSWORD_NOT_SUPPORTED;\nexport const PASSWORD_REQUIRED = JitsiConferenceErrors.PASSWORD_REQUIRED;\nexport const RESERVATION_ERROR = JitsiConferenceErrors.RESERVATION_ERROR;\nexport const VIDEOBRIDGE_NOT_AVAILABLE = JitsiConferenceErrors.VIDEOBRIDGE_NOT_AVAILABLE;\n","/**\n * The events for the conference.\n */\n\nexport enum JitsiConferenceEvents {\n    /**\n     * Event indicates that the current conference audio input switched between audio\n     * input states,i.e. with or without audio input.\n     */\n    AUDIO_INPUT_STATE_CHANGE = 'conference.audio_input_state_changed',\n\n    /**\n     * Event indicates that the permission for unmuting audio has changed based on the number of audio senders in the call\n     * and the audio sender limit configured in Jicofo.\n     */\n    AUDIO_UNMUTE_PERMISSIONS_CHANGED = 'conference.audio_unmute_permissions_changed',\n\n    /**\n     * Indicates that authentication status changed.\n     */\n    AUTH_STATUS_CHANGED = 'conference.auth_status_changed',\n\n    /**\n     * Fired just before the statistics module is disposed and it's the last chance\n     * to submit some logs to the statistics service (ex. CallStats if enabled),\n     * before it's disconnected.\n     */\n    BEFORE_STATISTICS_DISPOSED = 'conference.beforeStatisticsDisposed',\n\n    /**\n     * Indicates that an error occurred.\n     */\n    CONFERENCE_ERROR = 'conference.error',\n\n    /**\n     * Indicates that conference failed.\n     */\n    CONFERENCE_FAILED = 'conference.failed',\n\n    /**\n     * Indicates that conference is in progress of joining.\n     */\n    CONFERENCE_JOIN_IN_PROGRESS = 'conference.join_in_progress',\n\n    /**\n     * Indicates that conference has been joined. The event does NOT provide any\n     * parameters to its listeners.\n     */\n    CONFERENCE_JOINED = 'conference.joined',\n\n    /**\n     * Indicates that conference has been left.\n     */\n    CONFERENCE_LEFT = 'conference.left',\n\n    /**\n     * Indicates that the conference unique identifier has been set.\n     */\n    CONFERENCE_UNIQUE_ID_SET = 'conference.unique_id_set',\n\n    /**\n     * Indicates that the connection to the conference has been established\n     * XXX This is currently fired when the *ICE* connection enters 'connected'\n     * state for the first time.\n     */\n    CONNECTION_ESTABLISHED = 'conference.connectionEstablished',\n\n    /**\n     * Indicates that the connection to the conference has been interrupted for some\n     * reason.\n     * XXX This is currently fired when the *ICE* connection is interrupted.\n     */\n    CONNECTION_INTERRUPTED = 'conference.connectionInterrupted',\n\n    /**\n     * Indicates that the connection to the conference has been restored.\n     * XXX This is currently fired when the *ICE* connection is restored.\n     */\n    CONNECTION_RESTORED = 'conference.connectionRestored',\n\n    /**\n     * A connection to the video bridge's data channel has been established.\n     */\n    DATA_CHANNEL_OPENED = 'conference.dataChannelOpened',\n\n    /**\n     * A user has changed it display name\n     */\n    DISPLAY_NAME_CHANGED = 'conference.displayNameChanged',\n\n    /**\n     * The dominant speaker was changed.\n     */\n    DOMINANT_SPEAKER_CHANGED = 'conference.dominantSpeaker',\n\n    /**\n     * UTC conference timestamp when first participant joined.\n     */\n    CONFERENCE_CREATED_TIMESTAMP = 'conference.createdTimestamp',\n\n    /**\n     * Indicates that DTMF support changed.\n     */\n    DTMF_SUPPORT_CHANGED = 'conference.dtmfSupportChanged',\n\n    /**\n     * Indicates that a message from another participant is received on data\n     * channel.\n     */\n    ENDPOINT_MESSAGE_RECEIVED = 'conference.endpoint_message_received',\n\n    /**\n     * Indicates that a message for the remote endpoint statistics has been received on the bridge channel.\n     */\n    ENDPOINT_STATS_RECEIVED = 'conference.endpoint_stats_received',\n\n    /**\n     * NOTE This is lib-jitsi-meet internal event and can be removed at any time !\n     *\n     * Event emitted when conference transits, between one to one and multiparty JVB\n     * conference. If the conference switches to P2P it's neither one to one nor\n     * a multiparty JVB conference, but P2P (the status argument of this event will\n     * be <tt>false</tt>).\n     *\n     * The first argument is a boolean which carries the previous value and\n     * the seconds argument is a boolean with the new status. The event is emitted\n     * only if the previous and the new values are different.\n     *\n     * @type {string}\n     */\n    JVB121_STATUS = 'conference.jvb121Status',\n\n    /**\n     * You are kicked from the conference.\n     * @param {JitsiParticipant} the participant that initiated the kick.\n     */\n    KICKED = 'conference.kicked',\n\n    /**\n     * Participant was kicked from the conference.\n     * @param {JitsiParticipant} the participant that initiated the kick.\n     * @param {JitsiParticipant} the participant that was kicked.\n     */\n    PARTICIPANT_KICKED = 'conference.participant_kicked',\n\n    /**\n     * The Last N set is changed.\n     *\n     * @param {Array<string>|null} leavingEndpointIds the ids of all the endpoints\n     * which are leaving Last N\n     * @param {Array<string>|null} enteringEndpointIds the ids of all the endpoints\n     * which are entering Last N\n     */\n    LAST_N_ENDPOINTS_CHANGED = 'conference.lastNEndpointsChanged',\n\n    /**\n     * The forwarded sources set is changed.\n     *\n     * @param {Array<string>} leavingForwardedSources the sourceNames of all the tracks which are leaving forwarded\n     * sources\n     * @param {Array<string>} enteringForwardedSources the sourceNames of all the tracks which are entering forwarded\n     * sources\n     */\n    FORWARDED_SOURCES_CHANGED = 'conference.forwardedSourcesChanged',\n\n    /**\n     * Indicates that the room has been locked or unlocked.\n     */\n    LOCK_STATE_CHANGED = 'conference.lock_state_changed',\n\n    /**\n     * Indicates that the region of the media server (jitsi-videobridge) that we\n     * are connected to changed (or was initially set).\n     * @type {string} the region.\n     */\n    SERVER_REGION_CHANGED = 'conference.server_region_changed',\n\n    /**\n     * An event(library-private) fired when a new media session is added to the conference.\n     * @type {string}\n     * @private\n     */\n    _MEDIA_SESSION_STARTED = 'conference.media_session.started',\n\n    /**\n     * An event(library-private) fired when the conference switches the currently active media session.\n     * @type {string}\n     * @private\n     */\n    _MEDIA_SESSION_ACTIVE_CHANGED = 'conference.media_session.active_changed',\n\n    /**\n     * Indicates that the conference had changed to members only enabled/disabled.\n     * The first argument of this event is a <tt>boolean</tt> which when set to\n     * <tt>true</tt> means that the conference is running in members only mode.\n     * You may need to use Lobby if supported to ask for permissions to enter the conference.\n     */\n    MEMBERS_ONLY_CHANGED = 'conference.membersOnlyChanged',\n\n    /**\n     * New text message was received.\n     */\n    MESSAGE_RECEIVED = 'conference.messageReceived',\n\n    /**\n     * Event indicates that the current selected input device has no signal\n     */\n    NO_AUDIO_INPUT = 'conference.no_audio_input',\n\n    /**\n     * Event indicates that the current microphone used by the conference is noisy.\n     */\n    NOISY_MIC = 'conference.noisy_mic',\n\n    /**\n     * Indicates that a message from the local user or from the Prosody backend\n     * was received on the data channel.\n     */\n    NON_PARTICIPANT_MESSAGE_RECEIVED = 'conference.non_participant_message_received',\n\n    /**\n     * New private text message was received.\n     */\n    PRIVATE_MESSAGE_RECEIVED = 'conference.privateMessageReceived',\n\n    /**\n     * Event fired when JVB sends notification about interrupted/restored user's\n     * ICE connection status or we detect local problem with the video track.\n     * First argument is the ID of the participant and\n     * the seconds is a string indicating if the connection is currently\n     * - active - the connection is active\n     * - inactive - the connection is inactive, was intentionally interrupted by\n     * the bridge\n     * - interrupted - a network problem occurred\n     * - restoring - the connection was inactive and is restoring now\n     *\n     * The current status value can be obtained by calling\n     * JitsiParticipant.getConnectionStatus().\n     */\n    PARTICIPANT_CONN_STATUS_CHANGED = 'conference.participant_conn_status_changed',\n\n    /**\n     * Indicates that the features of the participant has been changed.\n     * TODO: there is a spelling mistake in this event name and associated constants\n     */\n    PARTCIPANT_FEATURES_CHANGED = 'conference.partcipant_features_changed',\n\n    /**\n     * Indicates that a the value of a specific property of a specific participant\n     * has changed.\n     */\n    PARTICIPANT_PROPERTY_CHANGED = 'conference.participant_property_changed',\n\n    /**\n     * Indicates that the conference has switched between JVB and P2P connections.\n     * The first argument of this event is a <tt>boolean</tt> which when set to\n     * <tt>true</tt> means that the conference is running on the P2P connection.\n     */\n    P2P_STATUS = 'conference.p2pStatus',\n\n    /**\n     * Indicates that phone number changed.\n     */\n    PHONE_NUMBER_CHANGED = 'conference.phoneNumberChanged',\n\n    /**\n     * The conference properties changed.\n     * @type {string}\n     */\n    PROPERTIES_CHANGED = 'conference.propertiesChanged',\n\n    /**\n     * Indicates that recording state changed.\n     */\n    RECORDER_STATE_CHANGED = 'conference.recorderStateChanged',\n\n    /**\n     * Indicates that video SIP GW state changed.\n     * @param {VideoSIPGWConstants} status.\n     */\n    VIDEO_SIP_GW_AVAILABILITY_CHANGED = 'conference.videoSIPGWAvailabilityChanged',\n\n    /**\n     * Indicates that video SIP GW Session state changed.\n     * @param {options} event - {\n     *     {string} address,\n     *     {VideoSIPGWConstants} oldState,\n     *     {VideoSIPGWConstants} newState,\n     *     {string} displayName}\n     * }.\n     */\n    VIDEO_SIP_GW_SESSION_STATE_CHANGED = 'conference.videoSIPGWSessionStateChanged',\n\n    /**\n     * Indicates that start muted settings changed.\n     */\n    START_MUTED_POLICY_CHANGED = 'conference.start_muted_policy_changed',\n\n    /**\n     * Indicates that the local user has started muted.\n     */\n    STARTED_MUTED = 'conference.started_muted',\n\n    /**\n     * Indicates that subject of the conference has changed.\n     */\n    SUBJECT_CHANGED = 'conference.subjectChanged',\n\n    /**\n     * Indicates that DTMF support changed.\n     */\n    SUSPEND_DETECTED = 'conference.suspendDetected',\n\n    /**\n     * Event indicates that local user is talking while he muted himself\n     */\n    TALK_WHILE_MUTED = 'conference.talk_while_muted',\n\n    /**\n     * A new media track was added to the conference. The event provides the\n     * following parameters to its listeners:\n     *\n     * @param {JitsiTrack} track the added JitsiTrack\n     */\n    TRACK_ADDED = 'conference.trackAdded',\n\n    /**\n     * Audio levels of a media track ( attached to the conference) was changed.\n     */\n    TRACK_AUDIO_LEVEL_CHANGED = 'conference.audioLevelsChanged',\n\n    /**\n     * A media track ( attached to the conference) mute status was changed.\n     * @param {JitsiParticipant|null} the participant that initiated the mute\n     * if it is a remote mute.\n     */\n    TRACK_MUTE_CHANGED = 'conference.trackMuteChanged',\n\n    /**\n     * The media track was removed from the conference. The event provides the\n     * following parameters to its listeners:\n     *\n     * @param {JitsiTrack} track the removed JitsiTrack\n     */\n    TRACK_REMOVED = 'conference.trackRemoved',\n\n    /**\n     * The source-add for unmuting of a media track was rejected by Jicofo.\n     *\n     */\n    TRACK_UNMUTE_REJECTED = 'conference.trackUnmuteRejected',\n\n    /**\n     * Notifies for transcription status changes. The event provides the\n     * following parameters to its listeners:\n     *\n     * @param {String} status - The new status.\n     */\n    TRANSCRIPTION_STATUS_CHANGED = 'conference.transcriptionStatusChanged',\n\n    /**\n     * A new user joined the conference.\n     */\n    USER_JOINED = 'conference.userJoined',\n\n    /**\n     * A user has left the conference.\n     */\n    USER_LEFT = 'conference.userLeft',\n\n    /**\n     * User role changed.\n     */\n    USER_ROLE_CHANGED = 'conference.roleChanged',\n\n    /**\n     * User status changed.\n     */\n    USER_STATUS_CHANGED = 'conference.statusChanged',\n\n    /**\n     * Event indicates that the permission for unmuting video has changed based on the number of video senders in the call\n     * and the video sender limit configured in Jicofo.\n     */\n    VIDEO_UNMUTE_PERMISSIONS_CHANGED = 'conference.video_unmute_permissions_changed',\n\n    /**\n     * Event indicates that the bot participant type changed.\n     */\n    BOT_TYPE_CHANGED = 'conference.bot_type_changed',\n\n    /**\n     * A new user joined the lobby room.\n     */\n    LOBBY_USER_JOINED = 'conference.lobby.userJoined',\n\n    /**\n     * A user from the lobby room has been update.\n     */\n    LOBBY_USER_UPDATED = 'conference.lobby.userUpdated',\n\n    /**\n     * A user left the lobby room.\n     */\n    LOBBY_USER_LEFT = 'conference.lobby.userLeft',\n\n    /**\n     * The local participant was approved to be able to unmute.\n     * @param {options} event - {\n     *     {MediaType} mediaType\n     * }.\n     */\n    AV_MODERATION_APPROVED = 'conference.av_moderation.approved',\n\n    /**\n     * The local participant was blocked to be able to unmute.\n     * @param {options} event - {\n     *     {MediaType} mediaType\n     * }.\n     */\n    AV_MODERATION_REJECTED = 'conference.av_moderation.rejected',\n\n    /**\n     * AV Moderation was enabled/disabled. The actor is the participant that is currently in the meeting,\n     * or undefined if that participant has left the meeting.\n     *\n     * @param {options} event - {\n     *     {boolean} enabled,\n     *     {MediaType} mediaType,\n     *     {JitsiParticipant} actor\n     * }.\n     */\n    AV_MODERATION_CHANGED = 'conference.av_moderation.changed',\n\n    /**\n     * AV Moderation, report for user being approved to unmute.\n     * @param {options} event - {\n     *     {JitsiParticipant} participant,\n     *     {MediaType} mediaType\n     * }.\n     */\n    AV_MODERATION_PARTICIPANT_APPROVED = 'conference.av_moderation.participant.approved',\n\n    /**\n     * AV Moderation, report for user being blocked to unmute.\n     * @param {options} event - {\n     *     {JitsiParticipant} participant,\n     *     {MediaType} mediaType\n     * }.\n     */\n    AV_MODERATION_PARTICIPANT_REJECTED = 'conference.av_moderation.participant.rejected',\n\n    /**\n     * A new face landmark object is added for a participant\n     */\n    FACE_LANDMARK_ADDED = 'conference.face_landmark.added',\n\n    /**\n     * Event fired when a participant is requested to join a given (breakout) room.\n     */\n    BREAKOUT_ROOMS_MOVE_TO_ROOM = 'conference.breakout-rooms.move-to-room',\n\n    /**\n     * Event fired when the breakout rooms data was updated.\n     */\n    BREAKOUT_ROOMS_UPDATED = 'conference.breakout-rooms.updated',\n\n    SUBTITLES_RECEIVED = 'conference.subtitles.received',\n\n    ANALYTICS_EVENT_RECEIVED = 'analytics.event.received',\n\n    TRACK_UPDATED = 'conference.track.updated'\n\n};\n\n// exported for backward compatibility\nexport const AUDIO_INPUT_STATE_CHANGE = JitsiConferenceEvents.AUDIO_INPUT_STATE_CHANGE;\nexport const AUDIO_UNMUTE_PERMISSIONS_CHANGED = JitsiConferenceEvents.AUDIO_UNMUTE_PERMISSIONS_CHANGED;\nexport const AUTH_STATUS_CHANGED = JitsiConferenceEvents.AUTH_STATUS_CHANGED;\nexport const BEFORE_STATISTICS_DISPOSED = JitsiConferenceEvents.BEFORE_STATISTICS_DISPOSED;\nexport const CONFERENCE_ERROR = JitsiConferenceEvents.CONFERENCE_ERROR;\nexport const CONFERENCE_FAILED = JitsiConferenceEvents.CONFERENCE_FAILED;\nexport const CONFERENCE_JOIN_IN_PROGRESS = JitsiConferenceEvents.CONFERENCE_JOIN_IN_PROGRESS;\nexport const CONFERENCE_JOINED = JitsiConferenceEvents.CONFERENCE_JOINED;\nexport const CONFERENCE_LEFT = JitsiConferenceEvents.CONFERENCE_LEFT;\nexport const CONFERENCE_UNIQUE_ID_SET = JitsiConferenceEvents.CONFERENCE_UNIQUE_ID_SET;\nexport const CONNECTION_ESTABLISHED = JitsiConferenceEvents.CONNECTION_ESTABLISHED;\nexport const CONNECTION_INTERRUPTED = JitsiConferenceEvents.CONNECTION_INTERRUPTED;\nexport const CONNECTION_RESTORED = JitsiConferenceEvents.CONNECTION_RESTORED;\nexport const DATA_CHANNEL_OPENED = JitsiConferenceEvents.DATA_CHANNEL_OPENED;\nexport const DISPLAY_NAME_CHANGED = JitsiConferenceEvents.DISPLAY_NAME_CHANGED;\nexport const DOMINANT_SPEAKER_CHANGED = JitsiConferenceEvents.DOMINANT_SPEAKER_CHANGED;\nexport const CONFERENCE_CREATED_TIMESTAMP = JitsiConferenceEvents.CONFERENCE_CREATED_TIMESTAMP;\nexport const DTMF_SUPPORT_CHANGED = JitsiConferenceEvents.DTMF_SUPPORT_CHANGED;\nexport const ENDPOINT_MESSAGE_RECEIVED = JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED;\nexport const ENDPOINT_STATS_RECEIVED = JitsiConferenceEvents.ENDPOINT_STATS_RECEIVED;\nexport const JVB121_STATUS = JitsiConferenceEvents.JVB121_STATUS;\nexport const KICKED = JitsiConferenceEvents.KICKED;\nexport const PARTICIPANT_KICKED = JitsiConferenceEvents.PARTICIPANT_KICKED;\nexport const LAST_N_ENDPOINTS_CHANGED = JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED;\nexport const FORWARDED_SOURCES_CHANGED = JitsiConferenceEvents.FORWARDED_SOURCES_CHANGED;\nexport const LOCK_STATE_CHANGED = JitsiConferenceEvents.LOCK_STATE_CHANGED;\nexport const SERVER_REGION_CHANGED = JitsiConferenceEvents.SERVER_REGION_CHANGED;\nexport const _MEDIA_SESSION_STARTED = JitsiConferenceEvents._MEDIA_SESSION_STARTED;\nexport const _MEDIA_SESSION_ACTIVE_CHANGED = JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED;\nexport const MEMBERS_ONLY_CHANGED = JitsiConferenceEvents.MEMBERS_ONLY_CHANGED;\nexport const MESSAGE_RECEIVED = JitsiConferenceEvents.MESSAGE_RECEIVED;\nexport const NO_AUDIO_INPUT = JitsiConferenceEvents.NO_AUDIO_INPUT;\nexport const NOISY_MIC = JitsiConferenceEvents.NOISY_MIC;\nexport const NON_PARTICIPANT_MESSAGE_RECEIVED = JitsiConferenceEvents.NON_PARTICIPANT_MESSAGE_RECEIVED;\nexport const PRIVATE_MESSAGE_RECEIVED = JitsiConferenceEvents.PRIVATE_MESSAGE_RECEIVED;\nexport const PARTICIPANT_CONN_STATUS_CHANGED = JitsiConferenceEvents.PARTICIPANT_CONN_STATUS_CHANGED;\nexport const PARTCIPANT_FEATURES_CHANGED = JitsiConferenceEvents.PARTCIPANT_FEATURES_CHANGED;\nexport const PARTICIPANT_PROPERTY_CHANGED = JitsiConferenceEvents.PARTICIPANT_PROPERTY_CHANGED;\nexport const P2P_STATUS = JitsiConferenceEvents.P2P_STATUS;\nexport const PHONE_NUMBER_CHANGED = JitsiConferenceEvents.PHONE_NUMBER_CHANGED;\nexport const PROPERTIES_CHANGED = JitsiConferenceEvents.PROPERTIES_CHANGED;\nexport const RECORDER_STATE_CHANGED = JitsiConferenceEvents.RECORDER_STATE_CHANGED;\nexport const VIDEO_SIP_GW_AVAILABILITY_CHANGED = JitsiConferenceEvents.VIDEO_SIP_GW_AVAILABILITY_CHANGED;\nexport const VIDEO_SIP_GW_SESSION_STATE_CHANGED = JitsiConferenceEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED;\nexport const START_MUTED_POLICY_CHANGED = JitsiConferenceEvents.START_MUTED_POLICY_CHANGED;\nexport const STARTED_MUTED = JitsiConferenceEvents.STARTED_MUTED;\nexport const SUBJECT_CHANGED = JitsiConferenceEvents.SUBJECT_CHANGED;\nexport const SUSPEND_DETECTED = JitsiConferenceEvents.SUSPEND_DETECTED;\nexport const TALK_WHILE_MUTED = JitsiConferenceEvents.TALK_WHILE_MUTED;\nexport const TRACK_ADDED = JitsiConferenceEvents.TRACK_ADDED;\nexport const TRACK_AUDIO_LEVEL_CHANGED = JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED;\nexport const TRACK_MUTE_CHANGED = JitsiConferenceEvents.TRACK_MUTE_CHANGED;\nexport const TRACK_REMOVED = JitsiConferenceEvents.TRACK_REMOVED;\nexport const TRACK_UNMUTE_REJECTED = JitsiConferenceEvents.TRACK_UNMUTE_REJECTED;\nexport const TRANSCRIPTION_STATUS_CHANGED = JitsiConferenceEvents.TRANSCRIPTION_STATUS_CHANGED;\nexport const USER_JOINED = JitsiConferenceEvents.USER_JOINED;\nexport const USER_LEFT = JitsiConferenceEvents.USER_LEFT;\nexport const USER_ROLE_CHANGED = JitsiConferenceEvents.USER_ROLE_CHANGED;\nexport const USER_STATUS_CHANGED = JitsiConferenceEvents.USER_STATUS_CHANGED;\nexport const VIDEO_UNMUTE_PERMISSIONS_CHANGED = JitsiConferenceEvents.VIDEO_UNMUTE_PERMISSIONS_CHANGED;\nexport const BOT_TYPE_CHANGED = JitsiConferenceEvents.BOT_TYPE_CHANGED;\nexport const LOBBY_USER_JOINED = JitsiConferenceEvents.LOBBY_USER_JOINED;\nexport const LOBBY_USER_UPDATED = JitsiConferenceEvents.LOBBY_USER_UPDATED;\nexport const LOBBY_USER_LEFT = JitsiConferenceEvents.LOBBY_USER_LEFT;\nexport const AV_MODERATION_APPROVED = JitsiConferenceEvents.AV_MODERATION_APPROVED;\nexport const AV_MODERATION_REJECTED = JitsiConferenceEvents.AV_MODERATION_REJECTED;\nexport const AV_MODERATION_CHANGED = JitsiConferenceEvents.AV_MODERATION_CHANGED;\nexport const AV_MODERATION_PARTICIPANT_APPROVED = JitsiConferenceEvents.AV_MODERATION_PARTICIPANT_APPROVED;\nexport const AV_MODERATION_PARTICIPANT_REJECTED = JitsiConferenceEvents.AV_MODERATION_PARTICIPANT_REJECTED;\nexport const FACE_LANDMARK_ADDED = JitsiConferenceEvents.FACE_LANDMARK_ADDED;\nexport const BREAKOUT_ROOMS_MOVE_TO_ROOM = JitsiConferenceEvents.BREAKOUT_ROOMS_MOVE_TO_ROOM;\nexport const BREAKOUT_ROOMS_UPDATED = JitsiConferenceEvents.BREAKOUT_ROOMS_UPDATED;\nexport const SUBTITLES_RECEIVED = JitsiConferenceEvents.SUBTITLES_RECEIVED;\nexport const ANALYTICS_EVENT_RECEIVED = JitsiConferenceEvents.ANALYTICS_EVENT_RECEIVED;\nexport const TRACK_UPDATED = JitsiConferenceEvents.TRACK_UPDATED;","export const CALLSTATS_SCRIPT_URL = 'https://api.callstats.io/static/callstats-ws.min.js';\n\n/**\n * The number of remote speakers for which the audio levels will be calculated using\n * RTCRtpReceiver#getSynchronizationSources. Limit the number of endpoints to save cpu on the client as this API call\n * is known to take longer to execute when there are many audio receivers.\n */\nexport const SPEAKERS_AUDIO_LEVELS = 5;\n","/**\n * The errors for the JitsiTrack objects.\n */\n\nexport enum JitsiTrackErrors {\n    /**\n     * An error which indicates that some of requested constraints in\n     * getUserMedia call were not satisfied.\n     */\n    CONSTRAINT_FAILED = 'gum.constraint_failed',\n\n    /**\n     * A generic error which indicates an error occurred while selecting\n     * a DesktopCapturerSource from the electron app.\n     */\n    ELECTRON_DESKTOP_PICKER_ERROR = 'gum.electron_desktop_picker_error',\n\n    /**\n     * An error which indicates a custom desktop picker could not be detected\n     * for the electron app.\n     */\n    ELECTRON_DESKTOP_PICKER_NOT_FOUND = 'gum.electron_desktop_picker_not_found',\n\n    /**\n     * Generic getUserMedia error.\n     */\n    GENERAL = 'gum.general',\n\n    /**\n     * An error which indicates that requested device was not found.\n     */\n    NOT_FOUND = 'gum.not_found',\n\n    /**\n     * An error which indicates that user denied permission to share requested\n     * device.\n     */\n    PERMISSION_DENIED = 'gum.permission_denied',\n\n    /**\n     * Generic error for screensharing failure.\n     */\n    SCREENSHARING_GENERIC_ERROR = 'gum.screensharing_generic_error',\n\n    /**\n     * An error which indicates that user canceled screen sharing window\n     * selection dialog.\n     */\n    SCREENSHARING_USER_CANCELED = 'gum.screensharing_user_canceled',\n\n    /**\n     * Indicates that the timeout passed to the obtainAudioAndVideoPermissions has expired without GUM resolving.\n     */\n    TIMEOUT = 'gum.timeout',\n\n    /**\n     * An error which indicates that track has been already disposed and cannot\n     * be longer used.\n     */\n    TRACK_IS_DISPOSED = 'track.track_is_disposed',\n\n    /**\n     * An error which indicates that track has no MediaStream associated.\n     */\n    TRACK_NO_STREAM_FOUND = 'track.no_stream_found',\n\n    /**\n     * An error which indicates that requested video resolution is not supported\n     * by a webcam.\n     */\n    UNSUPPORTED_RESOLUTION = 'gum.unsupported_resolution'\n}\n\n// exported for backward compatibility\nexport const CONSTRAINT_FAILED = JitsiTrackErrors.CONSTRAINT_FAILED;\nexport const ELECTRON_DESKTOP_PICKER_ERROR = JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_ERROR;\nexport const ELECTRON_DESKTOP_PICKER_NOT_FOUND = JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_NOT_FOUND;\nexport const GENERAL = JitsiTrackErrors.GENERAL;\nexport const NOT_FOUND = JitsiTrackErrors.NOT_FOUND;\nexport const PERMISSION_DENIED = JitsiTrackErrors.PERMISSION_DENIED;\nexport const SCREENSHARING_GENERIC_ERROR = JitsiTrackErrors.SCREENSHARING_GENERIC_ERROR;\nexport const SCREENSHARING_USER_CANCELED = JitsiTrackErrors.SCREENSHARING_USER_CANCELED;\nexport const TIMEOUT = JitsiTrackErrors.TIMEOUT;\nexport const TRACK_IS_DISPOSED = JitsiTrackErrors.TRACK_IS_DISPOSED;\nexport const TRACK_NO_STREAM_FOUND = JitsiTrackErrors.TRACK_NO_STREAM_FOUND;\nexport const UNSUPPORTED_RESOLUTION = JitsiTrackErrors.UNSUPPORTED_RESOLUTION;\n","import * as JitsiTrackErrors from './JitsiTrackErrors';\n\nconst TRACK_ERROR_TO_MESSAGE_MAP = {};\n\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.UNSUPPORTED_RESOLUTION]\n    = 'Video resolution is not supported: ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.SCREENSHARING_USER_CANCELED]\n    = 'User canceled screen sharing prompt';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.SCREENSHARING_GENERIC_ERROR]\n    = 'Unknown error from screensharing';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_ERROR]\n    = 'Unkown error from desktop picker';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_NOT_FOUND]\n    = 'Failed to detect desktop picker';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.GENERAL]\n    = 'Generic getUserMedia error';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.PERMISSION_DENIED]\n    = 'User denied permission to use device(s): ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.NOT_FOUND]\n    = 'Requested device(s) was/were not found: ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.CONSTRAINT_FAILED]\n    = 'Constraint could not be satisfied: ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.TIMEOUT]\n    = 'Could not start media source. Timeout occured!';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.TRACK_IS_DISPOSED]\n    = 'Track has been already disposed';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.TRACK_NO_STREAM_FOUND]\n    = 'Track does not have an associated Media Stream';\n\n// FIXME: Using prototype inheritance because otherwise instanceof is not\n// working properly (see https://github.com/babel/babel/issues/3083)\n\n/**\n *\n * Represents an error that occurred to a JitsiTrack. Can represent various\n * types of errors. For error descriptions (@see JitsiTrackErrors).\n *\n * @extends Error\n *\n *\n * @constructor\n * @param {Object|string} error - error object or error name\n * @param {Object|string} (options) - getUserMedia constraints object or\n * error message\n * @param {('audio'|'video'|'desktop'|'screen'|'audiooutput')[]} (devices) -\n * list of getUserMedia requested devices\n */\nfunction JitsiTrackError(error, options, devices) {\n    if (typeof error === 'object' && typeof error.name !== 'undefined') {\n        /**\n         * Additional information about original getUserMedia error\n         * and constraints.\n         * @type {{\n         *     error: Object,\n         *     constraints: Object,\n         *     devices: Array.<'audio'|'video'|'desktop'|'screen'>\n         * }}\n         */\n        this.gum = {\n            error,\n            constraints: options,\n            devices: devices && Array.isArray(devices)\n                ? devices.slice(0)\n                : undefined\n        };\n\n        switch (error.name) {\n        case 'NotAllowedError':\n        case 'PermissionDeniedError':\n        case 'SecurityError':\n            this.name = JitsiTrackErrors.PERMISSION_DENIED;\n            this.message\n                = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                    + (this.gum.devices || []).join(', ');\n            break;\n        case 'DevicesNotFoundError':\n        case 'NotFoundError':\n            this.name = JitsiTrackErrors.NOT_FOUND;\n            this.message\n                = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                    + (this.gum.devices || []).join(', ');\n            break;\n        case 'ConstraintNotSatisfiedError':\n        case 'OverconstrainedError': {\n            const constraintName = error.constraintName || error.constraint;\n\n            // we treat deviceId as unsupported resolution, as we want to\n            // retry and finally if everything fails to remove deviceId from\n            // mandatory constraints\n            if (options\n                    && options.video\n                    && (!devices || devices.indexOf('video') > -1)\n                    && (constraintName === 'minWidth'\n                        || constraintName === 'maxWidth'\n                        || constraintName === 'minHeight'\n                        || constraintName === 'maxHeight'\n                        || constraintName === 'width'\n                        || constraintName === 'height'\n                        || constraintName === 'deviceId')) {\n                this.name = JitsiTrackErrors.UNSUPPORTED_RESOLUTION;\n                this.message\n                    = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                        + getResolutionFromFailedConstraint(\n                            constraintName,\n                            options);\n            } else {\n                this.name = JitsiTrackErrors.CONSTRAINT_FAILED;\n                this.message\n                    = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                        + error.constraintName;\n            }\n            break;\n        }\n\n        default:\n            this.name = JitsiTrackErrors.GENERAL;\n            this.message\n                = error.message || TRACK_ERROR_TO_MESSAGE_MAP[this.name];\n            break;\n        }\n    } else if (typeof error === 'string') {\n        if (TRACK_ERROR_TO_MESSAGE_MAP[error]) {\n            this.name = error;\n            this.message = options || TRACK_ERROR_TO_MESSAGE_MAP[error];\n        } else {\n            // this is some generic error that do not fit any of our\n            // pre-defined errors, so don't give it any specific name, just\n            // store message\n            this.message = error;\n        }\n    } else {\n        throw new Error('Invalid arguments');\n    }\n\n    this.stack = error.stack || new Error().stack;\n}\n\nJitsiTrackError.prototype = Object.create(Error.prototype);\nJitsiTrackError.prototype.constructor = JitsiTrackError;\n\n/**\n * Gets failed resolution constraint from corresponding object.\n * @param {string} failedConstraintName\n * @param {Object} constraints\n * @returns {string|number}\n */\nfunction getResolutionFromFailedConstraint(failedConstraintName, constraints) {\n    if (constraints && constraints.video && constraints.video.mandatory) {\n        switch (failedConstraintName) {\n        case 'width':\n            return constraints.video.mandatory.minWidth;\n        case 'height':\n            return constraints.video.mandatory.minHeight;\n        default:\n            return constraints.video.mandatory[failedConstraintName] || '';\n        }\n    }\n\n    return '';\n}\n\nexport default JitsiTrackError;\n","export enum JitsiTrackEvents {\n    /**\n     * The media track was removed to the conference.\n     */\n    LOCAL_TRACK_STOPPED = 'track.stopped',\n\n    /**\n     * Audio levels of a this track was changed.\n     * The first argument is a number with audio level value in range [0, 1].\n     * The second argument is a <tt>TraceablePeerConnection</tt> which is the peer\n     * connection which measured the audio level (one audio track can be added\n     * to multiple peer connection at the same time). This argument is optional for\n     * local tracks for which we can measure audio level without the peer\n     * connection (the value will be <tt>undefined</tt>).\n     *\n     * NOTE The second argument should be treated as library internal and can be\n     * removed at any time.\n     */\n    TRACK_AUDIO_LEVEL_CHANGED = 'track.audioLevelsChanged',\n\n    /**\n     * The audio output of the track was changed.\n     */\n    TRACK_AUDIO_OUTPUT_CHANGED = 'track.audioOutputChanged',\n\n    /**\n     * A media track mute status was changed.\n     */\n    TRACK_MUTE_CHANGED = 'track.trackMuteChanged',\n\n    /**\n     * The video type(\"camera\" or \"desktop\") of the track was changed.\n     */\n    TRACK_VIDEOTYPE_CHANGED = 'track.videoTypeChanged',\n\n    /**\n     * Indicates that the track is not receiving any data even though we expect it\n     * to receive data (i.e. the stream is not stopped).\n     */\n    NO_DATA_FROM_SOURCE = 'track.no_data_from_source',\n\n    /**\n     * Indicates that the local audio track is not receiving any audio input from\n     * the microphone that is currently selected.\n     */\n    NO_AUDIO_INPUT = 'track.no_audio_input',\n\n    /**\n     * Event fired whenever video track's streaming changes.\n     * First argument is the sourceName of the track and the second is a string indicating if the connection is currently\n     * - active - the connection is active.\n     * - inactive - the connection is inactive, was intentionally interrupted by the bridge because of low BWE or because\n     *   of the endpoint falling out of last N.\n     * - interrupted - a network problem occurred.\n     * - restoring - the connection was inactive and is restoring now.\n     *\n     * The current status value can be obtained by calling JitsiRemoteTrack.getTrackStreamingStatus().\n     */\n    TRACK_STREAMING_STATUS_CHANGED = 'track.streaming_status_changed'\n};\n\n// exported for backward compatibility\nexport const LOCAL_TRACK_STOPPED = JitsiTrackEvents.LOCAL_TRACK_STOPPED;\nexport const TRACK_AUDIO_LEVEL_CHANGED = JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED;\nexport const TRACK_AUDIO_OUTPUT_CHANGED = JitsiTrackEvents.TRACK_AUDIO_OUTPUT_CHANGED;\nexport const TRACK_MUTE_CHANGED = JitsiTrackEvents.TRACK_MUTE_CHANGED;\nexport const TRACK_VIDEOTYPE_CHANGED = JitsiTrackEvents.TRACK_VIDEOTYPE_CHANGED;\nexport const NO_DATA_FROM_SOURCE = JitsiTrackEvents.NO_DATA_FROM_SOURCE;\nexport const NO_AUDIO_INPUT = JitsiTrackEvents.NO_AUDIO_INPUT;\nexport const TRACK_STREAMING_STATUS_CHANGED = JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED;\n","/**\n * This class exports constants and factory methods related to the analytics\n * API provided by AnalyticsAdapter. In order for entries in a database to be\n * somewhat easily traceable back to the code which produced them, events sent\n * through analytics should be defined here.\n *\n * Since the AnalyticsAdapter API can be used in different ways, for some events\n * it is more convenient to just define the event name as a constant. For other\n * events a factory function is easier.\n *\n * A general approach for adding a new event:\n * 1. Determine the event type: track, UI, page, or operational. If in doubt use\n * operational.\n * 2. Determine whether the event is related to other existing events, and\n * which fields are desired to be set: name, action, actionSubject, source.\n * 3. If the name is sufficient (the other fields are not important), use a\n * constant. Otherwise use a factory function.\n *\n * Note that the AnalyticsAdapter uses the events passed to its functions for\n * its own purposes, and might modify them. Because of this, factory functions\n * should create new objects.\n *\n */\n\nexport enum AnalyticsEvents {\n    /**\n     * The constant which identifies an event of type \"operational\".\n     */\n    TYPE_OPERATIONAL = 'operational',\n\n    /**\n     * The constant which identifies an event of type \"page\".\n     */\n    TYPE_PAGE = 'page',\n\n    /**\n     * The constant which identifies an event of type \"track\".\n     */\n    TYPE_TRACK = 'track',\n\n    /**\n     * The constant which identifies an event of type \"ui\".\n     */\n    TYPE_UI = 'ui',\n\n    /**\n     * The \"action\" value for Jingle events which indicates that the Jingle session\n     * was restarted (TODO: verify/fix the documentation)\n     */\n    ACTION_JINGLE_RESTART = 'restart',\n\n    /**\n     * The \"action\" value for Jingle events which indicates that a session-accept\n     * timed out (TODO: verify/fix the documentation)\n     */\n    ACTION_JINGLE_SA_TIMEOUT = 'session-accept.timeout',\n\n    /**\n     * The \"action\" value for Jingle events which indicates that a session-initiate\n     * was received.\n     */\n    ACTION_JINGLE_SI_RECEIVED = 'session-initiate.received',\n\n    /**\n     * The \"action\" value for Jingle events which indicates that a session-initiate\n     * not arrived within a timeout (the value is specified in\n     * the {@link JingleSessionPC}.\n     */\n    ACTION_JINGLE_SI_TIMEOUT = 'session-initiate.timeout',\n\n    /**\n     * A constant for the \"terminate\" action for Jingle events. TODO: verify/fix\n     * the documentation)\n     */\n    ACTION_JINGLE_TERMINATE = 'terminate',\n\n    /**\n     * The \"action\" value for Jingle events which indicates that a transport-replace\n     * was received.\n     */\n    ACTION_JINGLE_TR_RECEIVED = 'transport-replace.received',\n\n    /**\n     * The \"action\" value for Jingle events which indicates that a transport-replace\n     * succeeded (TODO: verify/fix the documentation)\n     */\n    ACTION_JINGLE_TR_SUCCESS = 'transport-replace.success',\n\n    /**\n     * The \"action\" value for P2P events which indicates that P2P session initiate message has been rejected by the client\n     * because the mandatory requirements were not met.\n     */\n    ACTION_P2P_DECLINED = 'decline',\n\n    /**\n     * The \"action\" value for P2P events which indicates that a connection was\n     * established (TODO: verify/fix the documentation)\n     */\n    ACTION_P2P_ESTABLISHED = 'established',\n\n    /**\n     * The \"action\" value for P2P events which indicates that something failed.\n     */\n    ACTION_P2P_FAILED = 'failed',\n\n    /**\n     * The \"action\" value for P2P events which indicates that a switch to\n     * jitsi-videobridge happened.\n     */\n    ACTION_P2P_SWITCH_TO_JVB = 'switch.to.jvb',\n\n    /**\n     * The name of an event which indicates an available device. We send one such\n     * event per available device once when the available devices are first known,\n     * and every time that they change\n     *\n     * Properties:\n     *      audio_input_device_count: the number of audio input devices available at\n     *          the time the event was sent.\n     *      audio_output_device_count: the number of audio output devices available\n     *          at the time the event was sent.\n     *      video_input_device_count: the number of video input devices available at\n     *          the time the event was sent.\n     *      video_output_device_count: the number of video output devices available\n     *          at the time the event was sent.\n     *      device_id: an identifier of the device described in this event.\n     *      device_group_id:\n     *      device_kind: one of 'audioinput', 'audiooutput', 'videoinput' or\n     *          'videooutput'.\n     *      device_label: a string which describes the device.\n     */\n    AVAILABLE_DEVICE = 'available.device',\n\n    /**\n     * This appears to be fired only in certain cases when the XMPP connection\n     * disconnects (and it was intentional?). It is currently never observed to\n     * fire in production.\n     *\n     * TODO: document\n     *\n     * Properties:\n     *      message: an error message\n     */\n    CONNECTION_DISCONNECTED = 'connection.disconnected',\n\n    /**\n     * Indicates that the user of the application provided feedback in terms of a\n     * rating (an integer from 1 to 5) and an optional comment.\n     * Properties:\n     *      value: the user's rating (an integer from 1 to 5)\n     *      comment: the user's comment\n     */\n    FEEDBACK = 'feedback',\n\n    /**\n     * Indicates the duration of a particular phase of the ICE connectivity\n     * establishment.\n     *\n     * Properties:\n     *      phase: the ICE phase (e.g. 'gathering', 'checking', 'establishment')\n     *      value: the duration in milliseconds.\n     *      p2p: whether the associated ICE connection is p2p or towards a\n     *          jitsi-videobridge\n     *      initiator: whether the local Jingle peer is the initiator or responder\n     *          in the Jingle session. XXX we probably actually care about the ICE\n     *          role (controlling vs controlled), and we assume that this correlates\n     *          with the Jingle initiator.\n     */\n    ICE_DURATION = 'ice.duration',\n\n    /**\n     * Indicates the difference in milliseconds between the ICE establishment time\n     * for the P2P and JVB connections (e.g. a value of 10 would indicate that the\n     * P2P connection took 10ms more than JVB connection to establish).\n     *\n     * Properties:\n     *      value: the difference in establishment durations in milliseconds.\n     *\n     */\n    ICE_ESTABLISHMENT_DURATION_DIFF = 'ice.establishment.duration.diff',\n\n    /**\n     * Indicates that the ICE state has changed.\n     *\n     * Properties:\n     *      state: the ICE state which was entered (e.g. 'checking', 'connected',\n     *          'completed', etc).\n     *      value: the time in milliseconds (as reported by\n     *          window.performance.now()) that the state change occurred.\n     *      p2p: whether the associated ICE connection is p2p or towards a\n     *          jitsi-videobridge\n     *      signalingState: The signaling state of the associated PeerConnection\n     *      reconnect: whether the associated Jingle session is in the process of\n     *          reconnecting (or is it ICE? TODO: verify/fix the documentation)\n     */\n    ICE_STATE_CHANGED = 'ice.state.changed',\n\n    /**\n     * Indicates that no bytes have been sent for the track.\n     *\n     * Properties:\n     *      mediaType: the media type of the local track ('audio' or 'video').\n     */\n    NO_BYTES_SENT = 'track.no-bytes-sent',\n\n    /**\n     * Indicates that a track was unmuted (?).\n     *\n     * Properties:\n     *      mediaType: the media type of the local track ('audio' or 'video').\n     *      trackType: the type of the track ('local' or 'remote').\n     *      value: TODO: document\n     */\n    TRACK_UNMUTED = 'track.unmuted'\n}\n\n// exported for backward compatibility\nexport const TYPE_OPERATIONAL = AnalyticsEvents.TYPE_OPERATIONAL;\nexport const TYPE_PAGE = AnalyticsEvents.TYPE_PAGE;\nexport const TYPE_TRACK = AnalyticsEvents.TYPE_TRACK;\nexport const TYPE_UI = AnalyticsEvents.TYPE_UI;\nexport const ACTION_JINGLE_RESTART = AnalyticsEvents.ACTION_JINGLE_RESTART;\nexport const ACTION_JINGLE_SA_TIMEOUT = AnalyticsEvents.ACTION_JINGLE_SA_TIMEOUT;\nexport const ACTION_JINGLE_SI_RECEIVED = AnalyticsEvents.ACTION_JINGLE_SI_RECEIVED;\nexport const ACTION_JINGLE_SI_TIMEOUT = AnalyticsEvents.ACTION_JINGLE_SI_TIMEOUT;\nexport const ACTION_JINGLE_TERMINATE = AnalyticsEvents.ACTION_JINGLE_TERMINATE;\nexport const ACTION_JINGLE_TR_RECEIVED = AnalyticsEvents.ACTION_JINGLE_TR_RECEIVED;\nexport const ACTION_JINGLE_TR_SUCCESS = AnalyticsEvents.ACTION_JINGLE_TR_SUCCESS;\nexport const ACTION_P2P_DECLINED = AnalyticsEvents.ACTION_P2P_DECLINED;\nexport const ACTION_P2P_ESTABLISHED = AnalyticsEvents.ACTION_P2P_ESTABLISHED;\nexport const ACTION_P2P_FAILED = AnalyticsEvents.ACTION_P2P_FAILED;\nexport const ACTION_P2P_SWITCH_TO_JVB = AnalyticsEvents.ACTION_P2P_SWITCH_TO_JVB;\nexport const AVAILABLE_DEVICE = AnalyticsEvents.AVAILABLE_DEVICE;\nexport const CONNECTION_DISCONNECTED = AnalyticsEvents.CONNECTION_DISCONNECTED;\nexport const FEEDBACK = AnalyticsEvents.FEEDBACK;\nexport const ICE_DURATION = AnalyticsEvents.ICE_DURATION;\nexport const ICE_ESTABLISHMENT_DURATION_DIFF = AnalyticsEvents.ICE_ESTABLISHMENT_DURATION_DIFF;\nexport const ICE_STATE_CHANGED = AnalyticsEvents.ICE_STATE_CHANGED;\nexport const NO_BYTES_SENT = AnalyticsEvents.NO_BYTES_SENT;\nexport const TRACK_UNMUTED = AnalyticsEvents.TRACK_UNMUTED;\n\n/**\n * Creates an operational event which indicates that we have received a\n * \"bridge down\" event from jicofo.\n */\nexport const createBridgeDownEvent = () => ( {\n    action: 'bridge.down',\n    actionSubject: 'bridge.down',\n    type: TYPE_OPERATIONAL\n} );\n\n/**\n * Creates an event which indicates that the XMPP connection failed\n * @param errorType TODO\n * @param errorMessage TODO\n * @param detail connection failed details.\n */\nexport const createConnectionFailedEvent = ( errorType: unknown, errorMessage: unknown, details: object ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    action: 'connection.failed',\n    attributes: {\n        'error_type': errorType,\n        'error_message': errorMessage,\n        ...details\n    }\n} );\n\n/**\n * Creates a conference event.\n *\n * @param action - The action of the event.\n * @param attributes - The attributes to be added to the event.\n */\nexport const createConferenceEvent = ( action: string, attributes: object ) => ( {\n    action,\n    attributes,\n    source: 'conference',\n    type: AnalyticsEvents.TYPE_OPERATIONAL\n} );\n\n/**\n * Creates an operational event which indicates that a particular connection\n * stage was reached (i.e. the XMPP connection transitioned to the \"connected\"\n * state).\n *\n * @param stage the stage which was reached\n * @param attributes additional attributes for the event. This should be an\n * object with a \"value\" property indicating a timestamp in milliseconds\n * relative to the beginning of the document's lifetime.\n *\n */\nexport const createConnectionStageReachedEvent = ( stage: unknown, attributes: object ) => ( {\n    action: 'connection.stage.reached',\n    actionSubject: stage,\n    attributes,\n    source: 'connection.stage.reached',\n    type: AnalyticsEvents.TYPE_OPERATIONAL\n} );\n\n/**\n * Creates an operational event for the end-to-end round trip time to a\n * specific remote participant.\n * @param participantId the ID of the remote participant.\n * @param region the region of the remote participant\n * @param rtt the rtt\n */\nexport const createE2eRttEvent = ( participantId: unknown, region: unknown, rtt: unknown ) => ( {\n    attributes: {\n        'participant_id': participantId,\n        region,\n        rtt\n    },\n    name: 'e2e_rtt',\n    type: AnalyticsEvents.TYPE_OPERATIONAL\n} );\n\n/**\n * Creates an event which indicates that the focus has left the MUC.\n */\nexport const createFocusLeftEvent = () => ( {\n    action: 'focus.left',\n    actionSubject: 'focus.left',\n    type: AnalyticsEvents.TYPE_OPERATIONAL\n} );\n\n/**\n * Creates an event related to a getUserMedia call.\n *\n * @param action the type of the result that the event represents: 'error',\n * 'success', 'warning', etc.\n * @param attributes the attributes to attach to the event.\n */\nexport const createGetUserMediaEvent = ( action: 'error' | 'success' | 'warning' | string, attributes: object = {} ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    source: 'get.user.media',\n    action,\n    attributes\n} );\n\n/**\n * Creates an event related to remote participant connection status changes.\n *\n * @param attributes the attributes to attach to the event.\n */\nexport const createParticipantConnectionStatusEvent = ( attributes: object = {} ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    source: 'peer.conn.status',\n    action: 'duration',\n    attributes\n} );\n\n/**\n * Creates an event related to remote track streaming status changes.\n *\n * @param attributes the attributes to attach to the event.\n */\nexport const createTrackStreamingStatusEvent = ( attributes: object = {} ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    source: 'track.streaming.status',\n    action: 'duration',\n    attributes\n} );\n\n/**\n * Creates an event for a Jingle-related event.\n * @param action the action of the event\n * @param attributes attributes to add to the event.\n */\nexport const createJingleEvent = ( action: unknown, attributes: object = {} ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    action,\n    source: 'jingle',\n    attributes\n} );\n\n/**\n * Creates an event which indicates that a local track was not able to read\n * data from its source (a camera or a microphone).\n *\n * @param mediaType the media type of the local track ('audio' or\n * 'video').\n */\nexport const createNoDataFromSourceEvent = ( mediaType: 'audio' | 'video' | string, value: unknown ) => ( {\n    attributes: {\n        'media_type': mediaType,\n        value\n    },\n    action: 'track.no.data.from.source',\n    type: AnalyticsEvents.TYPE_OPERATIONAL\n} );\n\n/**\n * Creates an event for a p2p-related event.\n * @param action the action of the event\n * @param attributes attributes to add to the event.\n */\nexport const createP2PEvent = ( action: unknown, attributes: object = {} ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    action,\n    source: 'p2p',\n    attributes\n} )\n\n/**\n * Indicates that we received a remote command to mute.\n */\nexport const createRemotelyMutedEvent = ( mediaType: unknown ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    action: 'remotely.muted',\n    mediaType\n} );\n\n/**\n * Creates an event which contains RTP statistics such as RTT and packet loss.\n *\n * All average RTP stats are currently reported under 1 event name, but with\n * different properties that allows to distinguish between a P2P call, a\n * call relayed through TURN or the JVB, and multiparty vs 1:1.\n *\n * The structure of the event is:\n *\n * {\n *      p2p: true,\n *      conferenceSize: 2,\n *      localCandidateType: \"relay\",\n *      remoteCandidateType: \"relay\",\n *      transportType: \"udp\",\n *\n *      // Average RTT of 200ms\n *      \"rtt.avg\": 200,\n *      \"rtt.samples\": \"[100, 200, 300]\",\n *\n *      // Average packet loss of 10%\n *      \"packet.loss.avg\": 10,\n *      \"packet.loss.samples\": '[5, 10, 15]'\n *\n *      // Difference in milliseconds in the end-to-end RTT between p2p and jvb.\n *      // The e2e RTT through jvb is 15ms shorter:\n *      \"rtt.diff\": 15,\n *\n *      // End-to-end RTT through JVB is ms.\n *      \"end2end.rtt.avg\" = 100\n * }\n *\n * Note that the value of the \"samples\" properties are (JSON encoded) strings,\n * and not JSON arrays, as events' attributes can not be nested. The samples are\n * currently included for debug purposes only and can be removed anytime soon\n * from the structure.\n *\n * Also note that not all of values are present in each event, as values are\n * obtained and calculated as part of different process/event pipe. For example\n * {@link ConnectionAvgStats} instances are doing the reports for each\n * {@link TraceablePeerConnection} and work independently from the main stats\n * pipe.\n */\nexport const createRtpStatsEvent = ( attributes: object ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    action: 'rtp.stats',\n    attributes\n} );\n\n/**\n * Creates an event which contains the round trip time (RTT) to a set of\n * regions.\n *\n * @param attributes\n */\nexport const createRttByRegionEvent = ( attributes: object ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    action: 'rtt.by.region',\n    attributes\n} );\n\n/**\n * Creates an event which contains the local and remote ICE candidate types\n * for the transport that is currently selected.\n *\n * @param attributes\n */\nexport const createTransportStatsEvent = ( attributes: object ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    action: 'transport.stats',\n    attributes\n} );\n\n/**\n * Creates an event which contains information about the audio output problem (the user id of the affected participant,\n * the local audio levels and the remote audio levels that triggered the event).\n *\n * @param userID - The user id of the affected participant.\n * @param localAudioLevels - The local audio levels.\n * @param remoteAudioLevels - The audio levels received from the participant.\n */\nexport const createAudioOutputProblemEvent = ( userID: string, localAudioLevels: unknown, remoteAudioLevels: unknown ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    action: 'audio.output.problem',\n    attributes: {\n        userID,\n        localAudioLevels,\n        remoteAudioLevels\n    }\n} );\n\n/**\n * Creates an event which contains an information related to the bridge channel close event.\n *\n * @param code - A code from {@link https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent}\n * @param reason - A string which describes the reason for closing the bridge channel.\n */\nexport const createBridgeChannelClosedEvent = ( code: string, reason: string ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    action: 'bridge-channel.error',\n    attributes: {\n        code,\n        reason\n    }\n} );\n\n/**\n * Creates an event which indicates the Time To First Media (TTFM).\n * It is measured in milliseconds relative to the beginning of the document's\n * lifetime (i.e. the origin used by window.performance.now()), and it excludes\n * the following:\n * 1. The delay due to getUserMedia()\n * 2. The period between the MUC being joined and the reception of the Jingle\n * session-initiate from jicofo. This is because jicofo will not start a Jingle\n * session until there are at least 2 participants in the room.\n *\n * @param attributes the attributes to add to the event. Currently used fields:\n *      mediaType: the media type of the local track ('audio' or 'video').\n *      muted: whether the track has ever been muted (?)\n *      value: the TTMF in milliseconds.\n */\nexport const createTtfmEvent = ( attributes: object ) => createConnectionStageReachedEvent( 'ttfm', attributes );\n","export enum Events {\n    /**\n     * Notifies about audio level in RTP statistics by SSRC.\n     *\n     * @param ssrc - The synchronization source identifier (SSRC) of the\n     * endpoint/participant whose audio level is being reported.\n     * @param {number} audioLevel - The audio level of <tt>ssrc</tt> according to\n     * RTP statistics.\n     * @param {boolean} isLocal - <tt>true</tt> if <tt>ssrc</tt> identifies the\n     * local endpoint/participant; otherwise, <tt>false</tt>.\n     */\n    AUDIO_LEVEL = 'statistics.audioLevel',\n\n    /**\n     * An event fired just before the statistics module gets disposes and it's\n     * the last chance to submit some logs that will end up in stats services like\n     * CallStats (if enabled).\n     */\n    BEFORE_DISPOSED = 'statistics.before_disposed',\n\n    /**\n     * An event carrying all statistics by ssrc.\n     */\n    BYTE_SENT_STATS = 'statistics.byte_sent_stats',\n\n    /**\n     * An event carrying connection statistics.\n     *\n     * @param {object} connectionStats - The connection statistics carried by the\n     * event such as <tt>bandwidth</tt>, <tt>bitrate</tt>, <tt>packetLoss</tt>,\n     * <tt>resolution</tt>, and <tt>transport</tt>.\n     */\n    CONNECTION_STATS = 'statistics.connectionstats',\n\n    /**\n     * An event carrying performance stats.\n     */\n    LONG_TASKS_STATS = 'statistics.long_tasks_stats'\n};\n\n// exported for backward compatibility\nexport const AUDIO_LEVEL = Events.AUDIO_LEVEL;\nexport const BEFORE_DISPOSED = Events.BEFORE_DISPOSED;\nexport const BYTE_SENT_STATS = Events.BYTE_SENT_STATS;\nexport const CONNECTION_STATS = Events.CONNECTION_STATS;\nexport const LONG_TASKS_STATS = Events.LONG_TASKS_STATS;\n","// TODO: Maybe fix the values to 'Chrome', 'Internet Explorer', etc. Currently\n// this values needs to be as they are becuse they are going to analytics,\n// callstats, etc.\nexport const CHROME = 'chrome';\nexport const OPERA = 'opera';\nexport const FIREFOX = 'firefox';\nexport const INTERNET_EXPLORER = 'iexplorer';\nexport const SAFARI = 'safari';\nexport const NWJS = 'nwjs';\nexport const ELECTRON = 'electron';\nexport const REACT_NATIVE = 'react-native';\nexport const UNKNOWN = 'unknown';","import Bowser from 'bowser';\nimport { CHROME, OPERA, FIREFOX, INTERNET_EXPLORER, SAFARI, NWJS, ELECTRON, REACT_NATIVE, UNKNOWN } from './browsers';\n/**\n * Maps the names of the browsers from bowser to the internal names defined in\n * ./browsers.js\n */\n\nconst bowserNameToJitsiName = {\n  'Chrome': CHROME,\n  'Chromium': CHROME,\n  'Opera': OPERA,\n  'Firefox': FIREFOX,\n  'Internet Explorer': INTERNET_EXPLORER,\n  'Safari': SAFARI\n};\n/**\n * Detects a Chromium based environent.\n *\n * NOTE: Here we cannot check solely for \"Chrome\" in the UA, because Edge has\n * it too. We need to check explicitly for chromium based Edge first and then\n * detect other chromium based browsers.\n *\n * @returns {Object|undefined} - The name (CHROME) and version.\n */\n\nfunction _detectChromiumBased() {\n  const userAgent = navigator.userAgent;\n  const browserInfo = {\n    name: UNKNOWN,\n    version: undefined\n  };\n\n  if (userAgent.match(/Chrome/) && !userAgent.match(/Edge/)) {\n    // Edge is currenly supported only on desktop and android.\n    if (userAgent.match(/Edg(A?)/)) {\n      // Compare the underlying chromium version.\n      const version = userAgent.match(/Chrome\\/([\\d.]+)/)[1];\n\n      if (Number.parseInt(version, 10) > 72) {\n        browserInfo.name = CHROME;\n        browserInfo.version = version;\n      }\n    } else {\n      browserInfo.name = CHROME;\n      browserInfo.version = userAgent.match(/Chrome\\/([\\d.]+)/)[1];\n    }\n  }\n\n  return browserInfo;\n}\n/**\n * Detects Electron environment.\n *\n * @returns {Object|undefined} - The name (ELECTRON) and version.\n */\n\n\nfunction _detectElectron() {\n  const userAgent = navigator.userAgent;\n\n  if (userAgent.match(/Electron/)) {\n    const version = userAgent.match(/Electron(?:\\s|\\/)([\\d.]+)/)[1];\n    return {\n      name: ELECTRON,\n      version\n    };\n  }\n}\n/**\n * Detects NWJS environment.\n *\n * @returns {Object|undefined} - The name (NWJS) and version.\n */\n\n\nfunction _detectNWJS() {\n  const userAgent = navigator.userAgent;\n\n  if (userAgent.match(/JitsiMeetNW/)) {\n    const version = userAgent.match(/JitsiMeetNW\\/([\\d.]+)/)[1];\n    return {\n      name: NWJS,\n      version\n    };\n  }\n}\n/**\n * Detects React Native environment.\n * @returns {Object|undefined} - The name (REACT_NATIVE) and version.\n */\n\n\nfunction _detectReactNative() {\n  const match = navigator.userAgent.match(/\\b(react[ \\t_-]*native)(?:\\/(\\S+))?/i);\n  let version; // If we're remote debugging a React Native app, it may be treated as\n  // Chrome. Check navigator.product as well and always return some version\n  // even if we can't get the real one.\n\n  if (match || navigator.product === 'ReactNative') {\n    let name;\n\n    if (match && match.length > 2) {\n      name = match[1];\n      version = match[2];\n    }\n\n    name || (name = 'react-native');\n    version || (version = 'unknown');\n    return {\n      name: REACT_NATIVE,\n      version\n    };\n  }\n}\n/**\n * Returns information about the current browser.\n * @param {Object} - The bowser instance.\n * @returns {Object} - The name and version of the browser.\n */\n\n\nfunction _detect(bowser) {\n  let browserInfo;\n  const detectors = [_detectReactNative, _detectElectron, _detectNWJS]; // Try all browser detectors\n\n  for (let i = 0; i < detectors.length; i++) {\n    browserInfo = detectors[i]();\n\n    if (browserInfo) {\n      return browserInfo;\n    }\n  }\n\n  const name = bowser.getBrowserName();\n\n  if (name in bowserNameToJitsiName) {\n    return {\n      name: bowserNameToJitsiName[name],\n      version: bowser.getBrowserVersion()\n    };\n  } // Detect other browsers with the Chrome engine, such as Vivaldi and Brave.\n\n\n  browserInfo = _detectChromiumBased();\n\n  if (browserInfo) {\n    return browserInfo;\n  }\n\n  return {\n    name: UNKNOWN,\n    version: undefined\n  };\n}\n/**\n * Implements browser detection.\n */\n\n\nexport default class BrowserDetection {\n  /**\n   * Creates new BrowserDetection instance.\n   *\n   * @param {Object} [browserInfo] - Information about the browser.\n   * @param {string} browserInfo.name - The name of the browser.\n   * @param {string} browserInfo.version - The version of the browser.\n   */\n  constructor(browserInfo) {\n    let name, version;\n    this._bowser = Bowser.getParser(navigator.userAgent);\n\n    if (typeof browserInfo === 'undefined') {\n      const detectedBrowserInfo = _detect(this._bowser);\n\n      name = detectedBrowserInfo.name;\n      version = detectedBrowserInfo.version;\n    } else if (browserInfo.name in bowserNameToJitsiName) {\n      name = bowserNameToJitsiName[browserInfo.name];\n      version = browserInfo.version;\n    } else {\n      name = UNKNOWN;\n      version = undefined;\n    }\n\n    this._name = name;\n    this._version = version;\n  }\n  /**\n   * Gets current browser name.\n   * @returns {string}\n   */\n\n\n  getName() {\n    return this._name;\n  }\n  /**\n   * Checks if current browser is Chrome.\n   * @returns {boolean}\n   */\n\n\n  isChrome() {\n    return this._name === CHROME;\n  }\n  /**\n   * Checks if current browser is Opera.\n   * @returns {boolean}\n   */\n\n\n  isOpera() {\n    return this._name === OPERA;\n  }\n  /**\n   * Checks if current browser is Firefox.\n   * @returns {boolean}\n   */\n\n\n  isFirefox() {\n    return this._name === FIREFOX;\n  }\n  /**\n   * Checks if current browser is Internet Explorer.\n   * @returns {boolean}\n   */\n\n\n  isIExplorer() {\n    return this._name === INTERNET_EXPLORER;\n  }\n  /**\n   * Checks if current browser is Safari.\n   * @returns {boolean}\n   */\n\n\n  isSafari() {\n    return this._name === SAFARI;\n  }\n  /**\n   * Checks if current environment is NWJS.\n   * @returns {boolean}\n   */\n\n\n  isNWJS() {\n    return this._name === NWJS;\n  }\n  /**\n   * Checks if current environment is Electron.\n   * @returns {boolean}\n   */\n\n\n  isElectron() {\n    return this._name === ELECTRON;\n  }\n  /**\n   * Checks if current environment is React Native.\n   * @returns {boolean}\n   */\n\n\n  isReactNative() {\n    return this._name === REACT_NATIVE;\n  }\n  /**\n   * Returns the version of the current browser.\n   * @returns {string}\n   */\n\n\n  getVersion() {\n    return this._version;\n  }\n  /**\n   * Check if the parsed browser matches the passed condition.\n   *\n   * @param {Object} checkTree - It's one or two layered object, which can include a\n   * platform or an OS on the first layer and should have browsers specs on the\n   * bottom layer.\n   * Eg. { chrome: '>71.1.0' }\n   *     { windows: { chrome: '<70.2' } }\n   * @returns {boolean | undefined} - Returns true if the browser satisfies the set\n   * conditions, false if not and undefined when the browser is not defined in the\n   * checktree object or when the current browser's version is unknown.\n   * @private\n   */\n\n\n  _checkCondition(checkTree) {\n    if (this._version) {\n      return this._bowser.satisfies(checkTree);\n    }\n  }\n  /**\n   * Compares the passed version with the current browser version.\n   *\n   * @param {*} version - The version to compare with. Anything different\n   * than string will be converted to string.\n   * @returns {boolean|undefined} - Returns true if the current version is\n   * greater than the passed version and false otherwise. Returns undefined if\n   * the current browser version is unknown.\n   */\n\n\n  isVersionGreaterThan(version) {\n    return this._checkCondition({\n      [this._name]: `>${version}`\n    });\n  }\n  /**\n   * Compares the passed version with the current browser version.\n   *\n   * @param {*} version - The version to compare with. Anything different\n   * than string will be converted to string.\n   * @returns {boolean|undefined} - Returns true if the current version is\n   * lower than the passed version and false otherwise. Returns undefined if\n   * the current browser version is unknown.\n   */\n\n\n  isVersionLessThan(version) {\n    return this._checkCondition({\n      [this._name]: `<${version}`\n    });\n  }\n  /**\n   * Compares the passed version with the current browser version.\n   *\n   * @param {*} version - The version to compare with. Anything different\n   * than string will be converted to string.\n   * @returns {boolean|undefined} - Returns true if the current version is\n   * equal to the passed version and false otherwise. Returns undefined if\n   * the current browser version is unknown.\n   * A loose-equality operator is used here so that it matches the sub-versions as well.\n   */\n\n\n  isVersionEqualTo(version) {\n    return this._checkCondition({\n      [this._name]: `~${version}`\n    });\n  }\n\n}","function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport EventEmitter from 'events';\n/**\n * Dummy implementation of Storage interface.\n */\n\nclass DummyLocalStorage extends EventEmitter {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"_storage\", {});\n  }\n\n  /**\n   * Empties all keys out of the storage.\n   *\n   * @returns {void}\n   */\n  clear() {\n    this._storage = {};\n  }\n  /**\n   * Returns the number of data items stored in the Storage object.\n   *\n   * @returns {number} - The number of data items stored in the Storage object.\n   */\n\n\n  get length() {\n    return Object.keys(this._storage).length;\n  }\n  /**\n   * Will return that key's value associated to the passed key name.\n   *\n   * @param {string} keyName - The key name.\n   * @returns {*} - The key value.\n   */\n\n\n  getItem(keyName) {\n    return this._storage[keyName];\n  }\n  /**\n   * When passed a key name and value, will add that key to the storage,\n   * or update that key's value if it already exists.\n   *\n   * @param {string} keyName - The key name.\n   * @param {*} keyValue - The key value.\n   * @returns {void}\n   */\n\n\n  setItem(keyName, keyValue) {\n    this._storage[keyName] = keyValue;\n  }\n  /**\n   * When passed a key name, will remove that key from the storage.\n   *\n   * @param {string} keyName - The key name.\n   * @returns {void}\n   */\n\n\n  removeItem(keyName) {\n    delete this._storage[keyName];\n  }\n  /**\n   * When passed a number n, this method will return the name of the nth key in the storage.\n   *\n   * @param {number} idx - The index of the key.\n   * @returns {string} - The nth key name.\n   */\n\n\n  key(n) {\n    const keys = Object.keys(this._storage);\n\n    if (keys.length <= n) {\n      return undefined;\n    }\n\n    return keys[n];\n  }\n  /**\n   * Serializes the content of the storage.\n   *\n   * @returns {string} - The serialized content.\n   */\n\n\n  serialize() {\n    return JSON.stringify(this._storage);\n  }\n\n}\n/**\n * Wrapper class for browser's local storage object.\n */\n\n\nclass JitsiLocalStorage extends EventEmitter {\n  /**\n   * @constructor\n   * @param {Storage} storage browser's local storage object.\n   */\n  constructor() {\n    super();\n\n    try {\n      this._storage = window.localStorage;\n      this._localStorageDisabled = false;\n    } catch (ignore) {// localStorage throws an exception.\n    }\n\n    if (!this._storage) {\n      // Handles the case when window.localStorage is undefined or throws an exception.\n      console.warn('Local storage is disabled.');\n      this._storage = new DummyLocalStorage();\n      this._localStorageDisabled = true;\n    }\n  }\n  /**\n   * Returns true if window.localStorage is disabled and false otherwise.\n   *\n   * @returns {boolean} - True if window.localStorage is disabled and false otherwise.\n   */\n\n\n  isLocalStorageDisabled() {\n    return this._localStorageDisabled;\n  }\n  /**\n   * Empties all keys out of the storage.\n   *\n   * @returns {void}\n   */\n\n\n  clear() {\n    this._storage.clear();\n\n    this.emit('changed');\n  }\n  /**\n   * Returns the number of data items stored in the Storage object.\n   *\n   * @returns {number} - The number of data items stored in the Storage object.\n   */\n\n\n  get length() {\n    return this._storage.length;\n  }\n  /**\n   * Returns that passed key's value.\n   * @param {string} keyName the name of the key you want to retrieve\n   * the value of.\n   * @returns {String|null} the value of the key. If the key does not exist,\n   * null is returned.\n   */\n\n\n  getItem(keyName) {\n    return this._storage.getItem(keyName);\n  }\n  /**\n   * Adds a key to the storage, or update key's value if it already exists.\n   * @param {string} keyName - the name of the key you want to create/update.\n   * @param {string} keyValue - the value you want to give the key you are\n   * creating/updating.\n   * @param {boolean} dontEmitChangedEvent - If true a changed event won't be emitted.\n   */\n\n\n  setItem(keyName, keyValue, dontEmitChangedEvent = false) {\n    this._storage.setItem(keyName, keyValue);\n\n    if (!dontEmitChangedEvent) {\n      this.emit('changed');\n    }\n  }\n  /**\n   * Remove a key from the storage.\n   * @param {string} keyName the name of the key you want to remove.\n   */\n\n\n  removeItem(keyName) {\n    this._storage.removeItem(keyName);\n\n    this.emit('changed');\n  }\n  /**\n   * Returns the name of the nth key in the list, or null if n is greater\n   * than or equal to the number of key/value pairs in the object.\n   *\n   * @param {number} i - The index of the key in the list.\n   * @returns {string}\n   */\n\n\n  key(i) {\n    return this._storage.key(i);\n  }\n  /**\n   * Serializes the content of the storage.\n   *\n   * @returns {string} - The serialized content.\n   */\n\n\n  serialize() {\n    if (this.isLocalStorageDisabled()) {\n      return this._storage.serialize();\n    }\n\n    const length = this._storage.length;\n    const localStorageContent = {};\n\n    for (let i = 0; i < length; i++) {\n      const key = this._storage.key(i);\n\n      localStorageContent[key] = this._storage.getItem(key);\n    }\n\n    return JSON.stringify(localStorageContent);\n  }\n\n}\n\nexport const jitsiLocalStorage = new JitsiLocalStorage();","import { BrowserDetection } from '@jitsi/js-utils';\nimport { getLogger } from '@jitsi/logger';\n\nconst logger = getLogger(__filename);\n\n/* Minimum required Chrome / Chromium version. This applies also to derivatives. */\nconst MIN_REQUIRED_CHROME_VERSION = 72;\nconst MIN_REQUIRED_SAFARI_VERSION = 14;\nconst MIN_REQUIRED_IOS_VERSION = 14;\n\n// TODO: Move this code to js-utils.\n\n// NOTE: Now we are extending BrowserDetection in order to preserve\n// RTCBrowserType interface but maybe it worth exporting BrowserCapabilities\n// and BrowserDetection as separate objects in future.\n\n/**\n * Implements browser capabilities for lib-jitsi-meet.\n */\nexport default class BrowserCapabilities extends BrowserDetection {\n    /**\n     * Creates new BrowserCapabilities instance.\n     */\n    constructor() {\n        super();\n        logger.info(\n            `This appears to be ${this.getName()}, ver: ${this.getVersion()}`);\n    }\n\n    /**\n     * Tells whether or not the <tt>MediaStream/tt> is removed from the <tt>PeerConnection</tt> and disposed on video\n     * mute (in order to turn off the camera device). This is needed on Firefox because of the following bug\n     * https://bugzilla.mozilla.org/show_bug.cgi?id=1735951\n     *\n     * @return {boolean} <tt>true</tt> if the current browser supports this strategy or <tt>false</tt> otherwise.\n     */\n    doesVideoMuteByStreamRemove() {\n        return this.isChromiumBased() || this.isWebKitBased() || this.isFirefox();\n    }\n\n    /**\n     * Checks if the current browser is Chromium based, i.e., it's either Chrome / Chromium or uses it as its engine,\n     * but doesn't identify as Chrome.\n     *\n     * This includes the following browsers:\n     * - Chrome and Chromium.\n     * - Other browsers which use the Chrome engine, but are detected as Chrome, such as Brave and Vivaldi.\n     * - Browsers which are NOT Chrome but use it as their engine, and have custom detection code: Opera, Electron\n     *   and NW.JS.\n     * This excludes\n     * - Chrome on iOS since it uses WKWebView.\n     */\n    isChromiumBased() {\n        return (this.isChrome()\n            || this.isElectron()\n            || this.isNWJS()\n            || this.isOpera())\n            && !this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current platform is iOS.\n     *\n     * @returns {boolean}\n     */\n    isIosBrowser() {\n        const { userAgent, maxTouchPoints, platform } = navigator;\n\n        return Boolean(userAgent.match(/iP(ad|hone|od)/i))\n            || (maxTouchPoints && maxTouchPoints > 2 && /MacIntel/.test(platform));\n    }\n\n    /**\n     * Checks if the current browser is WebKit based. It's either\n     * Safari or uses WebKit as its engine.\n     *\n     * This includes Chrome and Firefox on iOS\n     *\n     * @returns {boolean}\n     */\n    isWebKitBased() {\n        // https://trac.webkit.org/changeset/236144/webkit/trunk/LayoutTests/webrtc/video-addLegacyTransceiver.html\n        return this._bowser.isEngine('webkit')\n            && typeof navigator.mediaDevices !== 'undefined'\n            && typeof navigator.mediaDevices.getUserMedia !== 'undefined'\n            && typeof window.RTCRtpTransceiver !== 'undefined'\n            // eslint-disable-next-line no-undef\n            && Object.keys(RTCRtpTransceiver.prototype).indexOf('currentDirection') > -1;\n    }\n\n    /**\n     * Checks whether current running context is a Trusted Web Application.\n     *\n     * @returns {boolean} Whether the current context is a TWA.\n     */\n    isTwa() {\n        return 'matchMedia' in window && window.matchMedia('(display-mode:standalone)').matches;\n    }\n\n    /**\n     * Checks if the current browser is supported.\n     *\n     * @returns {boolean} true if the browser is supported, false otherwise.\n     */\n    isSupported() {\n        if (this.isSafari() && this._getSafariVersion() < MIN_REQUIRED_SAFARI_VERSION) {\n            return false;\n        }\n\n        return (this.isChromiumBased() && this._getChromiumBasedVersion() >= MIN_REQUIRED_CHROME_VERSION)\n            || this.isFirefox()\n            || this.isReactNative()\n            || this.isWebKitBased();\n    }\n\n    /**\n     * Returns whether the browser is supported for Android\n     * @returns {boolean} true if the browser is supported for Android devices\n     */\n    isSupportedAndroidBrowser() {\n        return this.isChromiumBased() || this.isFirefox();\n    }\n\n    /**\n     * Returns whether the browser is supported for iOS\n     * @returns {boolean} true if the browser is supported for iOS devices\n     */\n    isSupportedIOSBrowser() {\n        return this._getIOSVersion() >= MIN_REQUIRED_IOS_VERSION;\n    }\n\n    /**\n     * Returns whether or not the current environment needs a user interaction\n     * with the page before any unmute can occur.\n     *\n     * @returns {boolean}\n     */\n    isUserInteractionRequiredForUnmute() {\n        return this.isFirefox() && this.isVersionLessThan('68');\n    }\n\n    /**\n     * Checks if the current browser triggers 'onmute'/'onunmute' events when\n     * user's connection is interrupted and the video stops playback.\n     * @returns {*|boolean} 'true' if the event is supported or 'false'\n     * otherwise.\n     */\n    supportsVideoMuteOnConnInterrupted() {\n        return this.isChromiumBased() || this.isReactNative();\n    }\n\n    /**\n     * Checks if the current browser reports upload and download bandwidth\n     * statistics.\n     * @return {boolean}\n     */\n    supportsBandwidthStatistics() {\n        // FIXME bandwidth stats are currently not implemented for FF on our\n        // side, but not sure if not possible ?\n        return !this.isFirefox() && !this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current browser supports setting codec preferences on the transceiver.\n     * @returns {boolean}\n     */\n    supportsCodecPreferences() {\n        return Boolean(window.RTCRtpTransceiver\n            && 'setCodecPreferences' in window.RTCRtpTransceiver.prototype\n            && window.RTCRtpReceiver\n            && typeof window.RTCRtpReceiver.getCapabilities !== 'undefined')\n\n            // this is not working on Safari because of the following bug\n            // https://bugs.webkit.org/show_bug.cgi?id=215567\n            && !this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current browser support the device change event.\n     * @return {boolean}\n     */\n    supportsDeviceChangeEvent() {\n        return navigator.mediaDevices\n            && typeof navigator.mediaDevices.ondevicechange !== 'undefined'\n            && typeof navigator.mediaDevices.addEventListener !== 'undefined';\n    }\n\n    /**\n     * Checks if the current browser supports the Long Tasks API that lets us observe\n     * performance measurement events and be notified of tasks that take longer than\n     * 50ms to execute on the main thread.\n     */\n    supportsPerformanceObserver() {\n        return typeof window.PerformanceObserver !== 'undefined'\n            && PerformanceObserver.supportedEntryTypes.indexOf('longtask') > -1;\n    }\n\n    /**\n     * Checks if the current browser supports audio level stats on the receivers.\n     */\n    supportsReceiverStats() {\n        return typeof window.RTCRtpReceiver !== 'undefined'\n            && Object.keys(RTCRtpReceiver.prototype).indexOf('getSynchronizationSources') > -1\n\n            // Disable this on Safari because it is reporting 0.000001 as the audio levels for all\n            // remote audio tracks.\n            && !this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current browser reports round trip time statistics for\n     * the ICE candidate pair.\n     * @return {boolean}\n     */\n    supportsRTTStatistics() {\n        // Firefox does not seem to report RTT for ICE candidate pair:\n        // eslint-disable-next-line max-len\n        // https://www.w3.org/TR/webrtc-stats/#dom-rtcicecandidatepairstats-currentroundtriptime\n        // It does report mozRTT for RTP streams, but at the time of this\n        // writing it's value does not make sense most of the time\n        // (is reported as 1):\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=1241066\n        // For Chrome and others we rely on 'googRtt'.\n        return !this.isFirefox();\n    }\n\n    /**\n     * Returns true if VP9 is supported by the client on the browser. VP9 is currently disabled on Firefox and Safari\n     * because of issues with rendering. Please check https://bugzilla.mozilla.org/show_bug.cgi?id=1492500,\n     * https://bugs.webkit.org/show_bug.cgi?id=231071 and https://bugs.webkit.org/show_bug.cgi?id=231074 for details.\n     */\n    supportsVP9() {\n        return this.isChromiumBased() || this.isReactNative();\n    }\n\n    /**\n     * Checks if the browser uses SDP munging for turning on simulcast.\n     *\n     * @returns {boolean}\n     */\n    usesSdpMungingForSimulcast() {\n        return this.isChromiumBased() || this.isReactNative() || this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the browser uses RIDs/MIDs for siganling the simulcast streams\n     * to the bridge instead of the ssrcs.\n     */\n    usesRidsForSimulcast() {\n        return false;\n    }\n\n    /**\n     * Checks if the browser supports getDisplayMedia.\n     * @returns {boolean} {@code true} if the browser supports getDisplayMedia.\n     */\n    supportsGetDisplayMedia() {\n        return typeof navigator.getDisplayMedia !== 'undefined'\n            || (typeof navigator.mediaDevices !== 'undefined'\n                && typeof navigator.mediaDevices.getDisplayMedia\n                    !== 'undefined');\n    }\n\n    /**\n     * Checks if the browser supports WebRTC Encoded Transform, an alternative\n     * to insertable streams.\n     *\n     * NOTE: At the time of this writing the only browser supporting this is\n     * Safari / WebKit, behind a flag.\n     *\n     * @returns {boolean} {@code true} if the browser supports it.\n     */\n    supportsEncodedTransform() {\n        return Boolean(window.RTCRtpScriptTransform);\n    }\n\n    /**\n     * Checks if the browser supports insertable streams, needed for E2EE.\n     * @returns {boolean} {@code true} if the browser supports insertable streams.\n     */\n    supportsInsertableStreams() {\n        if (!(typeof window.RTCRtpSender !== 'undefined'\n            && window.RTCRtpSender.prototype.createEncodedStreams)) {\n            return false;\n        }\n\n        // Feature-detect transferable streams which we need to operate in a worker.\n        // See https://groups.google.com/a/chromium.org/g/blink-dev/c/1LStSgBt6AM/m/hj0odB8pCAAJ\n        const stream = new ReadableStream();\n\n        try {\n            window.postMessage(stream, '*', [ stream ]);\n\n            return true;\n        } catch {\n            return false;\n        }\n    }\n\n    /**\n     * Whether the browser supports the RED format for audio.\n     */\n    supportsAudioRed() {\n        return Boolean(window.RTCRtpSender\n            && window.RTCRtpSender.getCapabilities\n            && window.RTCRtpSender.getCapabilities('audio').codecs.some(codec => codec.mimeType === 'audio/red')\n            && window.RTCRtpReceiver\n            && window.RTCRtpReceiver.getCapabilities\n            && window.RTCRtpReceiver.getCapabilities('audio').codecs.some(codec => codec.mimeType === 'audio/red'));\n    }\n\n    /**\n     * Checks if the browser supports unified plan.\n     *\n     * @returns {boolean}\n     */\n    supportsUnifiedPlan() {\n        // We do not want to enable unified plan on Electron clients that have Chromium version < 96 because of\n        // performance and screensharing issues.\n        return !(this.isReactNative() || (this.isElectron() && (this._getChromiumBasedVersion() < 96)));\n    }\n\n    /**\n     * Checks if the browser supports voice activity detection via the @type {VADAudioAnalyser} service.\n     *\n     * @returns {boolean}\n     */\n    supportsVADDetection() {\n        return this.isChromiumBased();\n    }\n\n    /**\n     * Check if the browser supports the RTP RTX feature (and it is usable).\n     *\n     * @returns {boolean}\n     */\n    supportsRTX() {\n        // Disable RTX on Firefox up to 96 because we prefer simulcast over RTX\n        // see https://bugzilla.mozilla.org/show_bug.cgi?id=1738504\n        return !(this.isFirefox() && this.isVersionLessThan('96'));\n    }\n\n    /**\n     * Returns the version of a Chromium based browser.\n     *\n     * @returns {Number}\n     */\n    _getChromiumBasedVersion() {\n        if (this.isChromiumBased()) {\n            // NW.JS doesn't expose the Chrome version in the UA string.\n            if (this.isNWJS()) {\n                // eslint-disable-next-line no-undef\n                return Number.parseInt(process.versions.chromium, 10);\n            }\n\n            // Here we process all browsers which use the Chrome engine but\n            // don't necessarily identify as Chrome. We cannot use the version\n            // comparing functions because the Electron, Opera and NW.JS\n            // versions are inconsequential here, as we need to know the actual\n            // Chrome engine version.\n            const ua = navigator.userAgent;\n\n            if (ua.match(/Chrome/)) {\n                const version\n                    = Number.parseInt(ua.match(/Chrome\\/([\\d.]+)/)[1], 10);\n\n                return version;\n            }\n        }\n\n        return -1;\n    }\n\n    /**\n     * Returns the version of a Safari browser.\n     *\n     * @returns {Number}\n     */\n    _getSafariVersion() {\n        if (this.isSafari()) {\n            return Number.parseInt(this.getVersion(), 10);\n        }\n\n        return -1;\n    }\n\n    /**\n     * Returns the version of an ios browser.\n     *\n     * @returns {Number}\n     */\n    _getIOSVersion() {\n        if (this.isWebKitBased()) {\n            return Number.parseInt(this.getVersion(), 10);\n        }\n\n        return -1;\n    }\n}\n","import BrowserCapabilities from './BrowserCapabilities';\n\nexport default new BrowserCapabilities();\n","import { getLogger } from '@jitsi/logger';\n\nimport {\n    TYPE_OPERATIONAL,\n    TYPE_PAGE,\n    TYPE_TRACK,\n    TYPE_UI\n} from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\n\nconst MAX_CACHE_SIZE = 100;\n\n// eslist-disable-line no-undef\nconst logger = getLogger(__filename);\n\n/**\n * This class provides an API to lib-jitsi-meet and its users for sending\n * analytics events. It serves as a bridge to different backend implementations\n * (\"analytics handlers\") and a cache for events attempted to be sent before\n * the analytics handlers were enabled.\n *\n * The API is designed to be an easy replacement for the previous version of\n * this adapter, and is meant to be extended with more convenience methods.\n *\n *\n * The API calls are translated to objects with the following structure, which\n * are then passed to the sendEvent(event) function of the underlying handlers:\n *\n * {\n *    type,\n *\n *    action,\n *    actionSubject,\n *    actionSubjectId,\n *    attributes,\n *    categories,\n *    containerId,\n *    containerType,\n *    name,\n *    objectId,\n *    objectType,\n *    source,\n *    tags\n * }\n *\n * The 'type' is one of 'operational', 'page', 'track' or 'ui', and some of the\n * other properties are considered required according to the type.\n *\n * For events with type 'page', the required properties are: name.\n *\n * For events with type 'operational' and 'ui', the required properties are:\n * action, actionSubject, source\n *\n * For events with type 'page', the required properties are:\n * action, actionSubject, source, containerType, containerId, objectType,\n * objectId\n */\nclass AnalyticsAdapter {\n    /**\n     * Creates new AnalyticsAdapter instance.\n     */\n    constructor() {\n        this.reset();\n    }\n\n    /**\n     * Reset the state to the initial one.\n     *\n     * @returns {void}\n     */\n    reset() {\n        /**\n         * Whether this AnalyticsAdapter has been disposed of or not. Once this\n         * is set to true, the AnalyticsAdapter is disabled and does not accept\n         * any more events, and it can not be re-enabled.\n         * @type {boolean}\n         */\n        this.disposed = false;\n\n        /**\n         * The set of handlers to which events will be sent.\n         * @type {Set<any>}\n         */\n        this.analyticsHandlers = new Set();\n\n        /**\n         * The cache of events which are not sent yet. The cache is enabled\n         * while this field is truthy, and disabled otherwise.\n         * @type {Array}\n         */\n        this.cache = [];\n\n        /**\n         * Map of properties that will be added to every event. Note that the\n         * keys will be prefixed with \"permanent.\".\n         */\n        this.permanentProperties = {};\n\n        /**\n         * The name of the conference that this AnalyticsAdapter is associated\n         * with.\n         * @type {null}\n         */\n        this.conferenceName = '';\n\n        this.addPermanentProperties({\n            'user_agent': navigator.userAgent,\n            'browser_name': browser.getName()\n        });\n    }\n\n    /**\n     * Dispose analytics. Clears all handlers.\n     */\n    dispose() {\n        logger.warn('Disposing of analytics adapter.');\n\n        if (this.analyticsHandlers && this.analyticsHandlers.size > 0) {\n            this.analyticsHandlers.forEach(handler => {\n                if (typeof handler.dispose === 'function') {\n                    handler.dispose();\n                }\n            });\n        }\n\n        this.setAnalyticsHandlers([]);\n        this.disposed = true;\n    }\n\n    /**\n     * Sets the handlers that are going to be used to send analytics. Sends any\n     * cached events.\n     * @param {Array} handlers the handlers\n     */\n    setAnalyticsHandlers(handlers) {\n        if (this.disposed) {\n            return;\n        }\n\n        this.analyticsHandlers = new Set(handlers);\n\n        this._setUserProperties();\n\n        // Note that we disable the cache even if the set of handlers is empty.\n        const cache = this.cache;\n\n        this.cache = null;\n        if (cache) {\n            cache.forEach(event => this._sendEvent(event));\n        }\n    }\n\n    /**\n     * Set the user properties to the analytics handlers.\n     *\n     * @returns {void}\n     */\n    _setUserProperties() {\n        this.analyticsHandlers.forEach(handler => {\n            try {\n                handler.setUserProperties(this.permanentProperties);\n            } catch (error) {\n                logger.warn('Error in setUserProperties method of one of the '\n                    + `analytics handlers: ${error}`);\n            }\n        });\n    }\n\n    /**\n     * Adds a set of permanent properties to this this AnalyticsAdapter.\n     * Permanent properties will be added as \"attributes\" to events sent to\n     * the underlying \"analytics handlers\", and their keys will be prefixed\n     * by \"permanent_\", i.e. adding a permanent property {key: \"value\"} will\n     * result in {\"permanent_key\": \"value\"} object to be added to the\n     * \"attributes\" field of events.\n     *\n     * @param {Object} properties the properties to add\n     */\n    addPermanentProperties(properties) {\n        this.permanentProperties = {\n            ...this.permanentProperties,\n            ...properties\n        };\n\n        this._setUserProperties();\n    }\n\n    /**\n     * Sets the name of the conference that this AnalyticsAdapter is associated\n     * with.\n     * @param name the name to set.\n     */\n    setConferenceName(name) {\n        this.conferenceName = name;\n        this.addPermanentProperties({ 'conference_name': name });\n    }\n\n    /**\n     * Sends an event with a given name and given properties. The first\n     * parameter is either a string or an object. If it is a string, it is used\n     * as the event name and the second parameter is used at the attributes to\n     * attach to the event. If it is an object, it represents the whole event,\n     * including any desired attributes, and the second parameter is ignored.\n     *\n     * @param {String|Object} eventName either a string to be used as the name\n     * of the event, or an event object. If an event object is passed, the\n     * properties parameters is ignored.\n     * @param {Object} properties the properties/attributes to attach to the\n     * event, if eventName is a string.\n     */\n    sendEvent(eventName, properties = {}) {\n        if (this.disposed) {\n            return;\n        }\n\n        let event = null;\n\n        if (typeof eventName === 'string') {\n            event = {\n                type: TYPE_OPERATIONAL,\n                action: eventName,\n                actionSubject: eventName,\n                source: eventName,\n                attributes: properties\n            };\n        } else if (typeof eventName === 'object') {\n            event = eventName;\n        }\n\n        if (!this._verifyRequiredFields(event)) {\n            logger.error(\n                `Dropping a mis-formatted event: ${JSON.stringify(event)}`);\n\n            return;\n        }\n\n        this._sendEvent(event);\n    }\n\n    /**\n     * Checks whether an event has all of the required fields set, and tries\n     * to fill in some of the missing fields with reasonable default values.\n     * Returns true if after this operation the event has all of the required\n     * fields set, and false otherwise (if some of the required fields were not\n     * set and the attempt to fill them in with a default failed).\n     *\n     * @param event the event object.\n     * @return {boolean} true if the event (after the call to this function)\n     * contains all of the required fields, and false otherwise.\n     * @private\n     */\n    _verifyRequiredFields(event) {\n        if (!event) {\n            return false;\n        }\n\n        if (!event.type) {\n            event.type = TYPE_OPERATIONAL;\n        }\n\n        const type = event.type;\n\n        if (type !== TYPE_OPERATIONAL && type !== TYPE_PAGE\n            && type !== TYPE_UI && type !== TYPE_TRACK) {\n            logger.error(`Unknown event type: ${type}`);\n\n            return false;\n        }\n\n        if (type === TYPE_PAGE) {\n            return Boolean(event.name);\n        }\n\n        // Try to set some reasonable default values in case some of the\n        // parameters required by the handler API are missing.\n        event.action = event.action || event.name || event.actionSubject;\n        event.actionSubject = event.actionSubject || event.name || event.action;\n        event.source = event.source || event.name || event.action\n            || event.actionSubject;\n\n        if (!event.action || !event.actionSubject || !event.source) {\n            logger.error(\n                'Required field missing (action, actionSubject or source)');\n\n            return false;\n        }\n\n        // Track events have additional required fields.\n        if (type === TYPE_TRACK) {\n            event.objectType = event.objectType || 'generic-object-type';\n            event.containerType = event.containerType || 'conference';\n            if (event.containerType === 'conference' && !event.containerId) {\n                event.containerId = this.conferenceName;\n            }\n\n\n            if (!event.objectType || !event.objectId\n                || !event.containerType || !event.containerId) {\n                logger.error(\n                    'Required field missing (containerId, containerType, '\n                        + 'objectId or objectType)');\n\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Saves an event to the cache, if the cache is enabled.\n     * @param event the event to save.\n     * @returns {boolean} true if the event was saved, and false otherwise (i.e.\n     * if the cache was disabled).\n     * @private\n     */\n    _maybeCacheEvent(event) {\n        if (this.cache) {\n            this.cache.push(event);\n\n            // We limit the size of the cache, in case the user fails to ever\n            // set the analytics handlers.\n            if (this.cache.length > MAX_CACHE_SIZE) {\n                this.cache.splice(0, 1);\n            }\n\n            return true;\n        }\n\n        return false;\n\n    }\n\n    /**\n     *\n     * @param event\n     * @private\n     */\n    _sendEvent(event) {\n        if (this._maybeCacheEvent(event)) {\n            // The event was consumed by the cache.\n        } else {\n            this.analyticsHandlers.forEach(handler => {\n                try {\n                    handler.sendEvent(event);\n                } catch (e) {\n                    logger.warn(`Error sending analytics event: ${e}`);\n                }\n            });\n        }\n    }\n}\n\nexport default new AnalyticsAdapter();\n","/* global callstats */\n\nimport browser from '../browser';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nconst logger = require('@jitsi/logger').getLogger(__filename);\n\n/**\n * We define enumeration of wrtcFuncNames as we need them before\n * callstats is initialized to queue events.\n * @const\n * @see http://www.callstats.io/api/#enumeration-of-wrtcfuncnames\n */\nconst wrtcFuncNames = {\n    createOffer: 'createOffer',\n    createAnswer: 'createAnswer',\n    setLocalDescription: 'setLocalDescription',\n    setRemoteDescription: 'setRemoteDescription',\n    addIceCandidate: 'addIceCandidate',\n    getUserMedia: 'getUserMedia',\n    iceConnectionFailure: 'iceConnectionFailure',\n    signalingError: 'signalingError',\n    applicationLog: 'applicationLog'\n};\n\n/**\n * We define enumeration of fabricEvent as we need them before\n * callstats is initialized to queue events.\n * @const\n * @see http://www.callstats.io/api/#enumeration-of-fabricevent\n */\nconst fabricEvent = {\n    fabricHold: 'fabricHold',\n    fabricResume: 'fabricResume',\n    audioMute: 'audioMute',\n    audioUnmute: 'audioUnmute',\n    videoPause: 'videoPause',\n    videoResume: 'videoResume',\n    fabricUsageEvent: 'fabricUsageEvent',\n    fabricStats: 'fabricStats',\n    fabricTerminated: 'fabricTerminated',\n    screenShareStart: 'screenShareStart',\n    screenShareStop: 'screenShareStop',\n    dominantSpeaker: 'dominantSpeaker',\n    activeDeviceList: 'activeDeviceList'\n};\n\n/**\n * The user id to report to callstats as destination.\n * @type {string}\n */\nconst DEFAULT_REMOTE_USER = 'jitsi';\n\n/**\n * Type of pending reports, can be event or an error.\n * @type {{ERROR: string, EVENT: string}}\n */\nconst reportType = {\n    ERROR: 'error',\n    EVENT: 'event',\n    MST_WITH_USERID: 'mstWithUserID'\n};\n\n/**\n * Set of currently existing {@link CallStats} instances.\n * @type {Set<CallStats>}\n */\nlet _fabrics;\n\n/**\n * An instance of this class is a wrapper for the CallStats API fabric. A fabric\n * reports one peer connection to the CallStats backend and is allocated with\n * {@link callstats.addNewFabric}. It has a bunch of instance methods for\n * reporting various events. A fabric is considered disposed when\n * {@link CallStats.sendTerminateEvent} is executed.\n *\n * Currently only one backend instance can be created ever and it's done using\n * {@link CallStats.initBackend}. At the time of this writing there is no way to\n * explicitly shutdown the backend, but it's supposed to close it's connection\n * automatically, after all fabrics have been terminated.\n */\nexport default class CallStats {\n    /**\n     * A callback passed to {@link callstats.addNewFabric}.\n     * @param {string} error 'success' means ok\n     * @param {string} msg some more details\n     * @private\n     */\n    static _addNewFabricCallback(error, msg) {\n        if (CallStats.backend && error !== 'success') {\n            logger.error(`Monitoring status: ${error} msg: ${msg}`);\n        }\n    }\n\n    /**\n     * Callback passed to {@link callstats.initialize} (backend initialization)\n     * @param {string} error 'success' means ok\n     * @param {String} msg\n     * @private\n     */\n    static _initCallback(error, msg) {\n        logger.log(`CallStats Status: err=${error} msg=${msg}`);\n\n        // there is no lib, nothing to report to\n        if (error !== 'success') {\n            return;\n        }\n\n        CallStats.backendInitialized = true;\n\n        // I hate that\n        let atLeastOneFabric = false;\n        let defaultInstance = null;\n\n        for (const callStatsInstance of CallStats.fabrics.values()) {\n            if (!callStatsInstance.hasFabric) {\n                logger.debug('addNewFabric - initCallback');\n                if (callStatsInstance._addNewFabric()) {\n                    atLeastOneFabric = true;\n                    if (!defaultInstance) {\n                        defaultInstance = callStatsInstance;\n                    }\n                }\n            }\n        }\n\n        if (!atLeastOneFabric) {\n            return;\n        }\n\n        CallStats._emptyReportQueue(defaultInstance);\n    }\n\n    /**\n     * Empties report queue.\n     *\n     * @param {CallStats} csInstance - The callstats instance.\n     * @private\n     */\n    static _emptyReportQueue(csInstance) {\n        // There is no conference ID nor a PeerConnection available when some of\n        // the events are scheduled on the reportsQueue, so those will be\n        // reported on the first initialized fabric.\n        const defaultConfID = csInstance.confID;\n        const defaultPC = csInstance.peerconnection;\n\n        // notify callstats about failures if there were any\n        for (const report of CallStats.reportsQueue) {\n            if (report.type === reportType.ERROR) {\n                const errorData = report.data;\n\n                CallStats._reportError(\n                    csInstance,\n                    errorData.type,\n                    errorData.error,\n                    errorData.pc || defaultPC);\n            } else if (report.type === reportType.EVENT) {\n                // if we have and event to report and we failed to add\n                // fabric this event will not be reported anyway, returning\n                // an error\n                const eventData = report.data;\n\n                CallStats.backend.sendFabricEvent(\n                    report.pc || defaultPC,\n                    eventData.event,\n                    defaultConfID,\n                    eventData.eventData);\n            } else if (report.type === reportType.MST_WITH_USERID) {\n                const data = report.data;\n\n                CallStats.backend.associateMstWithUserID(\n                    report.pc || defaultPC,\n                    data.callStatsId,\n                    defaultConfID,\n                    data.ssrc,\n                    data.usageLabel,\n                    data.containerId\n                );\n            }\n        }\n        CallStats.reportsQueue.length = 0;\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Reports an error to callstats.\n     *\n     * @param {CallStats} [cs]\n     * @param type the type of the error, which will be one of the wrtcFuncNames\n     * @param error the error\n     * @param pc the peerconnection\n     * @private\n     */\n    static _reportError(cs, type, error, pc) {\n        let _error = error;\n\n        if (!_error) {\n            logger.warn('No error is passed!');\n            _error = new Error('Unknown error');\n        }\n        if (CallStats.backendInitialized && cs) {\n            CallStats.backend.reportError(pc, cs.confID, type, _error);\n        } else {\n            CallStats.reportsQueue.push({\n                type: reportType.ERROR,\n                data: {\n                    error: _error,\n                    pc,\n                    type\n                }\n            });\n        }\n\n        // else just ignore it\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Reports an error to callstats.\n     *\n     * @param {CallStats} cs\n     * @param event the type of the event, which will be one of the fabricEvent\n     * @param eventData additional data to pass to event\n     * @private\n     */\n    static _reportEvent(cs, event, eventData) {\n        const pc = cs && cs.peerconnection;\n        const confID = cs && cs.confID;\n\n        if (CallStats.backendInitialized && cs) {\n            CallStats.backend.sendFabricEvent(pc, event, confID, eventData);\n        } else {\n            CallStats.reportsQueue.push({\n                confID,\n                pc,\n                type: reportType.EVENT,\n                data: { event,\n                    eventData }\n            });\n        }\n    }\n\n    /**\n     * Wraps some of the CallStats API method and logs their calls with\n     * arguments on the debug logging level. Also wraps some of the backend\n     * methods execution into try catch blocks to not crash the app in case\n     * there is a problem with the backend itself.\n     * @param {callstats} theBackend\n     * @private\n     */\n    static _traceAndCatchBackendCalls(theBackend) {\n        const tryCatchMethods = [\n            'associateMstWithUserID',\n            'sendFabricEvent',\n            'sendUserFeedback'\n\n            // 'reportError', - this one needs special handling - see code below\n        ];\n\n        for (const methodName of tryCatchMethods) {\n            const originalMethod = theBackend[methodName];\n\n            theBackend[methodName] = function(...theArguments) {\n                try {\n                    return originalMethod.apply(theBackend, theArguments);\n                } catch (e) {\n                    GlobalOnErrorHandler.callErrorHandler(e);\n                }\n            };\n        }\n        const debugMethods = [\n            'associateMstWithUserID',\n            'sendFabricEvent',\n            'sendUserFeedback'\n\n            // 'reportError', - this one needs special handling - see code below\n        ];\n\n        for (const methodName of debugMethods) {\n            const originalMethod = theBackend[methodName];\n\n            theBackend[methodName] = function(...theArguments) {\n                logger.debug(methodName, theArguments);\n                originalMethod.apply(theBackend, theArguments);\n            };\n        }\n        const originalReportError = theBackend.reportError;\n\n        /* eslint-disable max-params */\n        theBackend.reportError = function(pc, cs, type, ...args) {\n            // Logs from the logger are submitted on the applicationLog event\n            // \"type\". Logging the arguments on the logger will create endless\n            // loop, because it will put all the logs to the logger queue again.\n            if (type === wrtcFuncNames.applicationLog) {\n                // NOTE otherArguments are not logged to the console on purpose\n                // to not log the whole log batch\n                // FIXME check the current logging level (currently not exposed\n                // by the logger implementation)\n                // NOTE it is not safe to log whole objects on react-native as\n                // those contain too many circular references and may crash\n                // the app.\n                if (!browser.isReactNative()) {\n                    console && console.debug('reportError', pc, cs, type);\n                }\n            } else {\n                logger.debug('reportError', pc, cs, type, ...args);\n            }\n            try {\n                originalReportError.call(theBackend, pc, cs, type, ...args);\n            } catch (exception) {\n                if (type === wrtcFuncNames.applicationLog) {\n                    console && console.error('reportError', exception);\n                } else {\n                    GlobalOnErrorHandler.callErrorHandler(exception);\n                }\n            }\n        };\n\n        /* eslint-enable max-params */\n    }\n\n    /**\n     * Returns the Set with the currently existing {@link CallStats} instances.\n     * Lazily initializes the Set to allow any Set polyfills to be applied.\n     * @type {Set<CallStats>}\n     */\n    static get fabrics() {\n        if (!_fabrics) {\n            _fabrics = new Set();\n        }\n\n        return _fabrics;\n    }\n\n    /**\n     * Initializes the CallStats backend. Should be called only if\n     * {@link CallStats.isBackendInitialized} returns <tt>false</tt>.\n     * @param {object} options\n     * @param {String} options.callStatsID CallStats credentials - ID\n     * @param {String} options.callStatsSecret CallStats credentials - secret\n     * @param {string} options.aliasName the <tt>aliasName</tt> part of\n     * the <tt>userID</tt> aka endpoint ID, see CallStats docs for more info.\n     * @param {string} options.userName the <tt>userName</tt> part of\n     * the <tt>userID</tt> aka display name, see CallStats docs for more info.\n     * @param {object} options.configParams the set of parameters\n     * to enable/disable certain features in the library. See CallStats docs for more info.\n     *\n     */\n    static initBackend(options) {\n        if (CallStats.backend) {\n            throw new Error('CallStats backend has been initialized already!');\n        }\n        try {\n            const CallStatsBackend = callstats;\n\n            CallStats.backend = new CallStatsBackend();\n            CallStats._traceAndCatchBackendCalls(CallStats.backend);\n            CallStats.userID = {\n                aliasName: options.aliasName,\n                userName: options.userName\n            };\n            CallStats.callStatsID = options.callStatsID;\n            CallStats.callStatsSecret = options.callStatsSecret;\n\n            const configParams = { ...options.configParams };\n\n            if (options.applicationName) {\n                configParams.applicationVersion = `${options.applicationName} (${browser.getName()})`;\n            }\n\n            if (options.confID) {\n                // we first check is there a tenant in the confID\n                const match = options.confID.match(/.*\\/(.*)\\/.*/);\n\n                // if there is no tenant, we will just set '/'\n                configParams.siteID = options.siteID || (match && match[1]) || '/';\n            }\n\n            // userID is generated or given by the origin server\n            CallStats.backend.initialize(\n                CallStats.callStatsID,\n                CallStats.callStatsSecret,\n                CallStats.userID,\n                CallStats._initCallback,\n                undefined,\n                configParams);\n\n            const getWiFiStatsMethod = options.getWiFiStatsMethod;\n\n            if (getWiFiStatsMethod) {\n                CallStats.backend.attachWifiStatsHandler(getWiFiStatsMethod);\n\n                getWiFiStatsMethod().then(result => {\n                    if (result) {\n                        logger.info('Reported wifi addresses:'\n                            , JSON.parse(result).addresses);\n                    }\n                })\n                .catch(() => {});// eslint-disable-line no-empty-function\n            }\n\n            return true;\n        } catch (e) {\n            // The callstats.io API failed to initialize (e.g. because its\n            // download did not succeed in general or on time). Further attempts\n            // to utilize it cannot possibly succeed.\n            GlobalOnErrorHandler.callErrorHandler(e);\n            CallStats.backend = null;\n            logger.error(e);\n\n            return false;\n        }\n    }\n\n    /**\n     * Checks if the CallStats backend has been created. It does not mean that\n     * it has been initialized, but only that the API instance has been\n     * allocated successfully.\n     * @return {boolean} <tt>true</tt> if backend exists or <tt>false</tt>\n     * otherwise\n     */\n    static isBackendInitialized() {\n        return Boolean(CallStats.backend);\n    }\n\n    /**\n     * Notifies CallStats about active device.\n     * @param {{deviceList: {String:String}}} devicesData list of devices with\n     * their data\n     * @param {CallStats} cs callstats instance related to the event\n     */\n    static sendActiveDeviceListEvent(devicesData, cs) {\n        CallStats._reportEvent(cs, fabricEvent.activeDeviceList, devicesData);\n    }\n\n    /**\n     * Notifies CallStats that there is a log we want to report.\n     *\n     * @param {Error} e error to send or {String} message\n     * @param {CallStats} cs callstats instance related to the error (optional)\n     */\n    static sendApplicationLog(e, cs) {\n        try {\n            CallStats._reportError(\n                cs,\n                wrtcFuncNames.applicationLog,\n                e,\n                cs && cs.peerconnection);\n        } catch (error) {\n            // If sendApplicationLog fails it should not be printed to\n            // the logger, because it will try to push the logs again\n            // (through sendApplicationLog) and an endless loop is created.\n            if (console && (typeof console.error === 'function')) {\n                // FIXME send analytics event as well\n                console.error('sendApplicationLog failed', error);\n            }\n        }\n    }\n\n    /**\n     * Sends the given feedback through CallStats.\n     *\n     * @param {string} conferenceID the conference ID for which the feedback\n     * will be reported.\n     * @param overall an integer between 1 and 5 indicating the\n     * user feedback\n     * @param comment detailed feedback from the user.\n     */\n    static sendFeedback(conferenceID, overall, comment) {\n        return new Promise((resolve, reject) => {\n            if (CallStats.backend) {\n                CallStats.backend.sendUserFeedback(\n                    conferenceID,\n                    {\n                        userID: CallStats.userID,\n                        overall,\n                        comment\n                    },\n                    (status, message) => {\n                        if (status === 'success') {\n                            resolve(message);\n                        } else {\n                            reject(message);\n                        }\n                    });\n            } else {\n                const reason = 'Failed to submit feedback to CallStats - no backend';\n\n                logger.error(reason);\n                reject(reason);\n            }\n        });\n    }\n\n    /**\n     * Notifies CallStats that getUserMedia failed.\n     *\n     * @param {Error} e error to send\n     * @param {CallStats} cs callstats instance related to the error (optional)\n     */\n    static sendGetUserMediaFailed(e, cs) {\n        CallStats._reportError(cs, wrtcFuncNames.getUserMedia, e, null);\n    }\n\n    /**\n     * Notifies CallStats for mute events\n     * @param mute {boolean} true for muted and false for not muted\n     * @param type {String} \"audio\"/\"video\"\n     * @param {CallStats} cs callstats instance related to the event\n     */\n    static sendMuteEvent(mute, type, cs) {\n        let event;\n\n        if (type === 'video') {\n            event = mute ? fabricEvent.videoPause : fabricEvent.videoResume;\n        } else {\n            event = mute ? fabricEvent.audioMute : fabricEvent.audioUnmute;\n        }\n\n        CallStats._reportEvent(cs, event);\n    }\n\n    /**\n     * Creates new CallStats instance that handles all callstats API calls for\n     * given {@link TraceablePeerConnection}. Each instance is meant to handle\n     * one CallStats fabric added with 'addFabric' API method for the\n     * {@link TraceablePeerConnection} instance passed in the constructor.\n     * @param {TraceablePeerConnection} tpc\n     * @param {Object} options\n     * @param {string} options.confID the conference ID that wil be used to\n     * report the session.\n     * @param {string} [options.remoteUserID='jitsi'] the remote user ID to\n     * which given <tt>tpc</tt> is connected.\n     */\n    constructor(tpc, options) {\n        this.confID = options.confID;\n        this.tpc = tpc;\n        this.peerconnection = tpc.peerconnection;\n        this.remoteUserID = options.remoteUserID || DEFAULT_REMOTE_USER;\n        this.hasFabric = false;\n\n        CallStats.fabrics.add(this);\n\n        if (CallStats.backendInitialized) {\n            this._addNewFabric();\n\n            // if this is the first fabric let's try to empty the\n            // report queue. Reports all events that we recorded between\n            // backend initialization and receiving the first fabric\n            if (CallStats.fabrics.size === 1) {\n                CallStats._emptyReportQueue(this);\n            }\n        }\n    }\n\n    /**\n     * Initializes CallStats fabric by calling \"addNewFabric\" for\n     * the peer connection associated with this instance.\n     * @return {boolean} true if the call was successful or false otherwise.\n     */\n    _addNewFabric() {\n        logger.info('addNewFabric', this.remoteUserID);\n        try {\n            const fabricAttributes = {\n                remoteEndpointType:\n                    this.tpc.isP2P\n                        ? CallStats.backend.endpointType.peer\n                        : CallStats.backend.endpointType.server\n            };\n            const ret\n                = CallStats.backend.addNewFabric(\n                    this.peerconnection,\n                    this.remoteUserID,\n                    CallStats.backend.fabricUsage.multiplex,\n                    this.confID,\n                    fabricAttributes,\n                    CallStats._addNewFabricCallback);\n\n            this.hasFabric = true;\n\n            const success = ret.status === 'success';\n\n            if (!success) {\n                logger.error('callstats fabric not initilized', ret.message);\n            }\n\n            return success;\n\n        } catch (error) {\n            GlobalOnErrorHandler.callErrorHandler(error);\n\n            return false;\n        }\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Lets CallStats module know where is given SSRC rendered by providing\n     * renderer tag ID.\n     * If the lib is not initialized yet queue the call for later, when it's\n     * ready.\n     * @param {number} ssrc the SSRC of the stream\n     * @param {boolean} isLocal indicates whether this the stream is local\n     * @param {string|null} streamEndpointId if the stream is not local the it\n     * needs to contain the stream owner's ID\n     * @param {string} usageLabel meaningful usage label of this stream like\n     *        'microphone', 'camera' or 'screen'.\n     * @param {string} containerId  the id of media 'audio' or 'video' tag which\n     *        renders the stream.\n     */\n    associateStreamWithVideoTag(\n            ssrc,\n            isLocal,\n            streamEndpointId,\n            usageLabel,\n            containerId) {\n        if (!CallStats.backend) {\n            return;\n        }\n\n        const callStatsId = isLocal ? CallStats.userID : streamEndpointId;\n\n        if (CallStats.backendInitialized) {\n            CallStats.backend.associateMstWithUserID(\n                this.peerconnection,\n                callStatsId,\n                this.confID,\n                ssrc,\n                usageLabel,\n                containerId);\n        } else {\n            CallStats.reportsQueue.push({\n                type: reportType.MST_WITH_USERID,\n                pc: this.peerconnection,\n                data: {\n                    callStatsId,\n                    containerId,\n                    ssrc,\n                    usageLabel\n                }\n            });\n        }\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Notifies CallStats that we are the new dominant speaker in the\n     * conference.\n     */\n    sendDominantSpeakerEvent() {\n        CallStats._reportEvent(this, fabricEvent.dominantSpeaker);\n    }\n\n    /**\n     * Notifies CallStats that the fabric for the underlying peerconnection was\n     * closed and no evens should be reported, after this call.\n     */\n    sendTerminateEvent() {\n        if (CallStats.backendInitialized) {\n            CallStats.backend.sendFabricEvent(\n                this.peerconnection,\n                CallStats.backend.fabricEvent.fabricTerminated,\n                this.confID);\n        }\n        CallStats.fabrics.delete(this);\n    }\n\n    /**\n     * Notifies CallStats for ice connection failed\n     */\n    sendIceConnectionFailedEvent() {\n        CallStats._reportError(\n            this,\n            wrtcFuncNames.iceConnectionFailure,\n            null,\n            this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to create offer.\n     *\n     * @param {Error} e error to send\n     */\n    sendCreateOfferFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.createOffer, e, this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to create answer.\n     *\n     * @param {Error} e error to send\n     */\n    sendCreateAnswerFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.createAnswer, e, this.peerconnection);\n    }\n\n    /**\n     * Sends either resume or hold event for the fabric associated with\n     * the underlying peerconnection.\n     * @param {boolean} isResume true to resume or false to hold\n     */\n    sendResumeOrHoldEvent(isResume) {\n        CallStats._reportEvent(\n            this,\n            isResume ? fabricEvent.fabricResume : fabricEvent.fabricHold);\n    }\n\n    /**\n     * Notifies CallStats for screen sharing events\n     * @param {boolean} start true for starting screen sharing and\n     * false for not stopping\n     * @param {string|null} ssrc - optional ssrc value, used only when\n     * starting screen sharing.\n     */\n    sendScreenSharingEvent(start, ssrc) {\n        let eventData;\n\n        if (ssrc) {\n            eventData = { ssrc };\n        }\n\n        CallStats._reportEvent(\n            this,\n            start ? fabricEvent.screenShareStart : fabricEvent.screenShareStop,\n            eventData);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to set local description.\n     *\n     * @param {Error} e error to send\n     */\n    sendSetLocalDescFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.setLocalDescription, e, this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to set remote description.\n     *\n     * @param {Error} e error to send\n     */\n    sendSetRemoteDescFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.setRemoteDescription, e, this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to add ICE candidate.\n     *\n     * @param {Error} e error to send\n     */\n    sendAddIceCandidateFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.addIceCandidate, e, this.peerconnection);\n    }\n}\n\n/**\n * The CallStats API backend instance\n * @type {callstats}\n */\nCallStats.backend = null;\n\n// some errors/events may happen before CallStats init\n// in this case we accumulate them in this array\n// and send them to callstats on init\nCallStats.reportsQueue = [];\n\n/**\n * Whether the library was successfully initialized(the backend) using its\n * initialize method.\n * @type {boolean}\n */\nCallStats.backendInitialized = false;\n\n/**\n * Part of the CallStats credentials - application ID\n * @type {string}\n */\nCallStats.callStatsID = null;\n\n/**\n * Part of the CallStats credentials - application secret\n * @type {string}\n */\nCallStats.callStatsSecret = null;\n\n/**\n * Local CallStats user ID structure. Can be set only once when\n * {@link backend} is initialized, so it's static for the time being.\n * See CallStats API for more info:\n * https://www.callstats.io/api/#userid\n * @type {object}\n */\nCallStats.userID = null;\n","/**\n * Provides statistics for the local stream.\n */\n\nconst logger = require('@jitsi/logger').getLogger(__filename);\n\n/**\n * Size of the webaudio analyzer buffer.\n * @type {number}\n */\nconst WEBAUDIO_ANALYZER_FFT_SIZE = 2048;\n\n/**\n * Value of the webaudio analyzer smoothing time parameter.\n * @type {number}\n */\nconst WEBAUDIO_ANALYZER_SMOOTING_TIME = 0.8;\n\nwindow.AudioContext = window.AudioContext || window.webkitAudioContext;\n\n/**\n * The audio context.\n * @type {AudioContext}\n */\nlet context = null;\n\n\n/**\n * Converts time domain data array to audio level.\n * @param samples the time domain data array.\n * @returns {number} the audio level\n */\nfunction timeDomainDataToAudioLevel(samples) {\n\n    let maxVolume = 0;\n\n    const length = samples.length;\n\n    for (let i = 0; i < length; i++) {\n        if (maxVolume < samples[i]) {\n            maxVolume = samples[i];\n        }\n    }\n\n    return parseFloat(((maxVolume - 127) / 128).toFixed(3));\n}\n\n/**\n * Animates audio level change\n * @param newLevel the new audio level\n * @param lastLevel the last audio level\n * @returns {Number} the audio level to be set\n */\nfunction animateLevel(newLevel, lastLevel) {\n    let value = 0;\n    const diff = lastLevel - newLevel;\n\n    if (diff > 0.2) {\n        value = lastLevel - 0.2;\n    } else if (diff < -0.4) {\n        value = lastLevel + 0.4;\n    } else {\n        value = newLevel;\n    }\n\n    return parseFloat(value.toFixed(3));\n}\n\n\n/**\n * <tt>LocalStatsCollector</tt> calculates statistics for the local stream.\n *\n * @param stream the local stream\n * @param interval stats refresh interval given in ms.\n * @param callback function that receives the audio levels.\n * @constructor\n */\nexport default function LocalStatsCollector(stream, interval, callback) {\n    this.stream = stream;\n    this.intervalId = null;\n    this.intervalMilis = interval;\n    this.audioLevel = 0;\n    this.callback = callback;\n    this.source = null;\n    this.analyser = null;\n}\n\n/**\n * Starts the collecting the statistics.\n */\nLocalStatsCollector.prototype.start = function() {\n    if (!LocalStatsCollector.isLocalStatsSupported()) {\n        return;\n    }\n\n    context.resume();\n    this.analyser = context.createAnalyser();\n\n    this.analyser.smoothingTimeConstant = WEBAUDIO_ANALYZER_SMOOTING_TIME;\n    this.analyser.fftSize = WEBAUDIO_ANALYZER_FFT_SIZE;\n\n    this.source = context.createMediaStreamSource(this.stream);\n\n    this.source.connect(this.analyser);\n\n    this.intervalId = setInterval(\n        () => {\n            const array = new Uint8Array(this.analyser.frequencyBinCount);\n\n            this.analyser.getByteTimeDomainData(array);\n            const audioLevel = timeDomainDataToAudioLevel(array);\n\n            // Set the audio levels always as NoAudioSignalDetection now\n            // uses audio levels from LocalStatsCollector and waits for\n            // atleast 4 secs for a no audio signal before displaying the\n            // notification on the UI.\n            this.audioLevel = animateLevel(audioLevel, this.audioLevel);\n            this.callback(this.audioLevel);\n        },\n        this.intervalMilis\n    );\n};\n\n/**\n * Stops collecting the statistics.\n */\nLocalStatsCollector.prototype.stop = function() {\n    if (this.intervalId) {\n        clearInterval(this.intervalId);\n        this.intervalId = null;\n    }\n\n    this.analyser?.disconnect();\n    this.analyser = null;\n    this.source?.disconnect();\n    this.source = null;\n};\n\n/**\n * Checks if the environment has the necessary conditions to support\n * collecting stats from local streams.\n *\n * @returns {boolean}\n */\nLocalStatsCollector.isLocalStatsSupported = function() {\n    return Boolean(window.AudioContext);\n};\n\n/**\n * Disconnects the audio context.\n */\nLocalStatsCollector.disconnectAudioContext = async function() {\n    if (context) {\n        logger.info('Disconnecting audio context');\n        await context.close();\n        context = null;\n    }\n};\n\n/**\n * Connects the audio context.\n */\nLocalStatsCollector.connectAudioContext = function() {\n    if (!LocalStatsCollector.isLocalStatsSupported()) {\n        return;\n    }\n\n    logger.info('Connecting audio context');\n    context = new AudioContext();\n\n    context.suspend();\n};\n\n/**\n * Initialize the audio context on startup.\n */\nLocalStatsCollector.connectAudioContext();\n","\n/**\n * The method will increase the given number by 1. If the given counter is equal\n * or greater to {@link Number.MAX_SAFE_INTEGER} then it will be rolled back to\n * 1.\n * @param {number} number - An integer counter value to be incremented.\n * @return {number} the next counter value increased by 1 (see the description\n * above for exception).\n */\nexport function safeCounterIncrement(number) {\n    let nextValue = number;\n\n    if (number >= Number.MAX_SAFE_INTEGER) {\n        nextValue = 0;\n    }\n\n    return nextValue + 1;\n}\n\n/**\n * Calculates the average value of am Array of numbers.\n *\n * @param {Float32Array} valueArray - Array of numbers.\n * @returns {number} - Number array average.\n */\nexport function calculateAverage(valueArray) {\n    return valueArray.length > 0 ? valueArray.reduce((a, b) => a + b) / valueArray.length : 0;\n}\n\n/**\n * Calculates a unique hash for a given string similar to Java's\n * implementation of String.hashCode()\n *\n * @param {String} string - String whose hash has to be calculated.\n * @returns {number} - Unique hash code calculated.\n */\nexport function hashString(string) {\n    let hash = 0;\n\n    for (let i = 0; i < string.length; i++) {\n        hash += Math.pow(string.charCodeAt(i) * 31, string.length - i);\n\n        /* eslint-disable no-bitwise */\n        hash = hash & hash; // Convert to 32bit integer\n    }\n\n    return Math.abs(hash);\n}\n\n/**\n * Returns only the positive values from an array of numbers.\n *\n * @param {Float32Array} valueArray - Array of vad scores.\n * @returns {Array} - Array of positive numbers.\n */\nexport function filterPositiveValues(valueArray) {\n    return valueArray.filter(value => value >= 0);\n}\n\n/**\n * This class calculates a simple running average that continually changes\n * as more data points are collected and added.\n */\nexport class RunningAverage {\n    /**\n     * Creates an instance of the running average calculator.\n     */\n    constructor() {\n        this.average = 0;\n        this.n = 0;\n    }\n\n    /**\n     * Adds a new data point to the existing set of values and recomputes\n     * the running average.\n     * @param {number} value\n     * @returns {void}\n     */\n    addNext(value) {\n        if (typeof value !== 'number') {\n            return;\n        }\n        this.n += 1;\n        this.average = this.average + ((value - this.average) / this.n);\n    }\n\n    /**\n     * Obtains the average value for the current subset of values.\n     * @returns {number} - computed average.\n     */\n    getAverage() {\n        return this.average;\n    }\n}\n","\nimport { getLogger } from '@jitsi/logger';\n\nimport * as StatisticsEvents from '../../service/statistics/Events';\nimport { RunningAverage } from '../util/MathUtil';\n\nconst logger = getLogger(__filename);\nconst MILLI_SECONDS = 1000;\nconst SECONDS = 60;\n\n/**\n * This class creates an observer that monitors browser's performance measurement events\n * as they are recorded in the browser's performance timeline and computes an average and\n * a maximum value for the long task events. Tasks are classified as long tasks if they take\n * longer than 50ms to execute on the main thread.\n */\nexport class PerformanceObserverStats {\n    /**\n     * Creates a new instance of Performance observer statistics.\n     *\n     * @param {*} emitter Event emitter for emitting stats periodically\n     * @param {*} statsInterval interval for calculating the stats\n     */\n    constructor(emitter, statsInterval) {\n        this.eventEmitter = emitter;\n        this.longTasks = 0;\n        this.maxDuration = 0;\n        this.performanceStatsInterval = statsInterval;\n        this.stats = new RunningAverage();\n    }\n\n    /**\n     * Obtains the average rate of long tasks observed per min and the\n     * duration of the longest task recorded by the observer.\n     * @returns {Object}\n     */\n    getLongTasksStats() {\n        return {\n            avgRatePerMinute: (this.stats.getAverage() * SECONDS).toFixed(2), // calc rate per min\n            maxDurationMs: this.maxDuration\n        };\n    }\n\n    /**\n     * Starts the performance observer by registering the callback function\n     * that calculates the performance statistics periodically.\n     * @returns {void}\n     */\n    startObserver() {\n        // Create a handler for when the long task event is fired.\n        this.longTaskEventHandler = list => {\n            const entries = list.getEntries();\n\n            for (const task of entries) {\n                this.longTasks++;\n                this.maxDuration = Math.max(this.maxDuration, task.duration).toFixed(3);\n            }\n        };\n\n        // Create an observer for monitoring long tasks.\n        logger.info('Creating a Performance Observer for monitoring Long Tasks');\n        this.observer = new PerformanceObserver(this.longTaskEventHandler);\n        this.observer.observe({ type: 'longtask',\n            buffered: true });\n        const startTime = Date.now();\n\n        // Calculate the average # of events/sec and emit a stats event.\n        this.longTasksIntervalId = setInterval(() => {\n            const now = Date.now();\n            const interval = this._lastTimeStamp\n                ? (now - this._lastTimeStamp) / MILLI_SECONDS\n                : (now - startTime) / MILLI_SECONDS;\n            const rate = this.longTasks / interval;\n\n            this.stats.addNext(rate);\n            this.eventEmitter.emit(\n                StatisticsEvents.LONG_TASKS_STATS, this.getLongTasksStats());\n\n            // Reset the counter and start counting events again.\n            this.longTasks = 0;\n            this._lastTimeStamp = Date.now();\n        }, this.performanceStatsInterval);\n    }\n\n    /**\n     * Stops the performance observer.\n     * @returns {void}\n     */\n    stopObserver() {\n        this.observer && this.observer.disconnect();\n        this.longTaskEventHandler = null;\n        if (this.longTasksIntervalId) {\n            clearInterval(this.longTasksIntervalId);\n            this.longTasksIntervalId = null;\n        }\n    }\n}\n","export enum MediaType {\n    /**\n     * The audio type.\n     */\n    AUDIO = 'audio',\n\n    /**\n     * The presenter type.\n     */\n    PRESENTER = 'presenter',\n\n    /**\n     * The video type.\n     */\n    VIDEO = 'video'\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport browser from '../browser';\n\nconst logger = getLogger('FeatureFlags');\n\n/**\n * A global module for accessing information about different feature flags state.\n */\nclass FeatureFlags {\n    /**\n     * Configures the module.\n     *\n     * @param {boolean} flags.runInLiteMode - Enables lite mode for testing to disable media decoding.\n     * @param {boolean} flags.sourceNameSignaling - Enables source names in the signaling.\n     * @param {boolean} flags.receiveMultipleVideoStreams - Signal support for receiving multiple video streams.\n     */\n    init(flags) {\n        this._runInLiteMode = Boolean(flags.runInLiteMode);\n\n        this._sourceNameSignaling = Boolean(flags.sourceNameSignaling);\n        this._receiveMultipleVideoStreams = Boolean(flags.receiveMultipleVideoStreams);\n        this._sendMultipleVideoStreams = Boolean(flags.sendMultipleVideoStreams);\n        this._ssrcRewriting = Boolean(flags.ssrcRewritingOnBridgeSupported);\n\n        // For Chromium, check if Unified plan is enabled.\n        this._usesUnifiedPlan = browser.supportsUnifiedPlan()\n            && (!browser.isChromiumBased() || (flags.enableUnifiedOnChrome ?? true));\n\n        logger.info(`Source name signaling: ${this._sourceNameSignaling},`\n            + ` Send multiple video streams: ${this._sendMultipleVideoStreams},`\n            + ` SSRC rewriting supported: ${this._ssrcRewriting},`\n            + ` uses Unified plan: ${this._usesUnifiedPlan}`);\n    }\n\n    /**\n     * Checks if multiple local video streams support is enabled.\n     *\n     * @returns {boolean}\n     */\n    isMultiStreamSupportEnabled() {\n        return this._sourceNameSignaling && this._sendMultipleVideoStreams && this._usesUnifiedPlan;\n    }\n\n    /**\n     * Checks if receiving multiple video streams is supported.\n     *\n     * @returns {boolean}\n     */\n    isReceiveMultipleVideoStreamsSupported() {\n        return this._receiveMultipleVideoStreams;\n    }\n\n    /**\n     * Checks if the run in lite mode is enabled.\n     * This will cause any media to be received and not decoded. (Directions are inactive and no ssrc and ssrc-groups\n     * are added to the remote description). This can be used for various test scenarios.\n     *\n     * @returns {boolean}\n     */\n    isRunInLiteModeEnabled() {\n        return this._runInLiteMode;\n    }\n\n    /**\n     * Checks if the source name signaling is enabled.\n     *\n     * @returns {boolean}\n     */\n    isSourceNameSignalingEnabled() {\n        return this._sourceNameSignaling;\n    }\n\n    /**\n     * Checks if the clients supports re-writing of the SSRCs on the media streams by the bridge.\n     * @returns {boolean}\n     */\n    isSsrcRewritingSupported() {\n        return this._ssrcRewriting;\n    }\n}\n\nexport default new FeatureFlags();\n","import { getLogger } from '@jitsi/logger';\n\nimport { MediaType } from '../../service/RTC/MediaType';\nimport * as StatisticsEvents from '../../service/statistics/Events';\nimport browser from '../browser';\nimport FeatureFlags from '../flags/FeatureFlags';\n\nconst GlobalOnErrorHandler = require('../util/GlobalOnErrorHandler');\n\nconst logger = getLogger(__filename);\n\n/**\n * Calculates packet lost percent using the number of lost packets and the\n * number of all packet.\n * @param lostPackets the number of lost packets\n * @param totalPackets the number of all packets.\n * @returns {number} packet loss percent\n */\nfunction calculatePacketLoss(lostPackets, totalPackets) {\n    if (!totalPackets || totalPackets <= 0\n            || !lostPackets || lostPackets <= 0) {\n        return 0;\n    }\n\n    return Math.round((lostPackets / totalPackets) * 100);\n}\n\n/**\n * Holds \"statistics\" for a single SSRC.\n * @constructor\n */\nfunction SsrcStats() {\n    this.loss = {};\n    this.bitrate = {\n        download: 0,\n        upload: 0\n    };\n    this.resolution = {};\n    this.framerate = 0;\n    this.codec = '';\n}\n\n/**\n * Sets the \"loss\" object.\n * @param loss the value to set.\n */\nSsrcStats.prototype.setLoss = function(loss) {\n    this.loss = loss || {};\n};\n\n/**\n * Sets resolution that belong to the ssrc represented by this instance.\n * @param resolution new resolution value to be set.\n */\nSsrcStats.prototype.setResolution = function(resolution) {\n    this.resolution = resolution || {};\n};\n\n/**\n * Adds the \"download\" and \"upload\" fields from the \"bitrate\" parameter to\n * the respective fields of the \"bitrate\" field of this object.\n * @param bitrate an object holding the values to add.\n */\nSsrcStats.prototype.addBitrate = function(bitrate) {\n    this.bitrate.download += bitrate.download;\n    this.bitrate.upload += bitrate.upload;\n};\n\n/**\n * Resets the bit rate for given <tt>ssrc</tt> that belong to the peer\n * represented by this instance.\n */\nSsrcStats.prototype.resetBitrate = function() {\n    this.bitrate.download = 0;\n    this.bitrate.upload = 0;\n};\n\n/**\n * Sets the \"framerate\".\n * @param framerate the value to set.\n */\nSsrcStats.prototype.setFramerate = function(framerate) {\n    this.framerate = framerate || 0;\n};\n\nSsrcStats.prototype.setCodec = function(codec) {\n    this.codec = codec || '';\n};\n\n/**\n *\n */\nfunction ConferenceStats() {\n\n    /**\n     * The bandwidth\n     * @type {{}}\n     */\n    this.bandwidth = {};\n\n    /**\n     * The bit rate\n     * @type {{}}\n     */\n    this.bitrate = {};\n\n    /**\n     * The packet loss rate\n     * @type {{}}\n     */\n    this.packetLoss = null;\n\n    /**\n     * Array with the transport information.\n     * @type {Array}\n     */\n    this.transport = [];\n}\n\n/* eslint-disable max-params */\n\n/**\n * <tt>StatsCollector</tt> registers for stats updates of given\n * <tt>peerconnection</tt> in given <tt>interval</tt>. On each update particular\n * stats are extracted and put in {@link SsrcStats} objects. Once the processing\n * is done <tt>audioLevelsUpdateCallback</tt> is called with <tt>this</tt>\n * instance as an event source.\n *\n * @param peerconnection WebRTC PeerConnection object.\n * @param audioLevelsInterval\n * @param statsInterval stats refresh interval given in ms.\n * @param eventEmitter\n * @constructor\n */\nexport default function StatsCollector(peerconnection, audioLevelsInterval, statsInterval, eventEmitter) {\n    this.peerconnection = peerconnection;\n    this.baselineAudioLevelsReport = null;\n    this.currentAudioLevelsReport = null;\n    this.currentStatsReport = null;\n    this.previousStatsReport = null;\n    this.audioLevelReportHistory = {};\n    this.audioLevelsIntervalId = null;\n    this.eventEmitter = eventEmitter;\n    this.conferenceStats = new ConferenceStats();\n\n    // Updates stats interval\n    this.audioLevelsIntervalMilis = audioLevelsInterval;\n\n    this.speakerList = [];\n    this.statsIntervalId = null;\n    this.statsIntervalMilis = statsInterval;\n\n    /**\n     * Maps SSRC numbers to {@link SsrcStats}.\n     * @type {Map<number,SsrcStats}\n     */\n    this.ssrc2stats = new Map();\n}\n\n/**\n * Set the list of the remote speakers for which audio levels are to be calculated.\n *\n * @param {Array<string>} speakerList - Endpoint ids.\n * @returns {void}\n */\nStatsCollector.prototype.setSpeakerList = function(speakerList) {\n    this.speakerList = speakerList;\n};\n\n/**\n * Stops stats updates.\n */\nStatsCollector.prototype.stop = function() {\n    if (this.audioLevelsIntervalId) {\n        clearInterval(this.audioLevelsIntervalId);\n        this.audioLevelsIntervalId = null;\n    }\n\n    if (this.statsIntervalId) {\n        clearInterval(this.statsIntervalId);\n        this.statsIntervalId = null;\n    }\n};\n\n/**\n * Callback passed to <tt>getStats</tt> method.\n * @param error an error that occurred on <tt>getStats</tt> call.\n */\nStatsCollector.prototype.errorCallback = function(error) {\n    GlobalOnErrorHandler.callErrorHandler(error);\n    logger.error('Get stats error', error);\n    this.stop();\n};\n\n/**\n * Starts stats updates.\n */\nStatsCollector.prototype.start = function(startAudioLevelStats) {\n    if (startAudioLevelStats) {\n        if (browser.supportsReceiverStats()) {\n            logger.info('Using RTCRtpSynchronizationSource for remote audio levels');\n        }\n        this.audioLevelsIntervalId = setInterval(\n            () => {\n                if (browser.supportsReceiverStats()) {\n                    const audioLevels = this.peerconnection.getAudioLevels(this.speakerList);\n\n                    for (const ssrc in audioLevels) {\n                        if (audioLevels.hasOwnProperty(ssrc)) {\n                            // Use a scaling factor of 2.5 to report the same\n                            // audio levels that getStats reports.\n                            const audioLevel = audioLevels[ssrc] * 2.5;\n\n                            this.eventEmitter.emit(\n                                StatisticsEvents.AUDIO_LEVEL,\n                                this.peerconnection,\n                                Number.parseInt(ssrc, 10),\n                                audioLevel,\n                                false /* isLocal */);\n                        }\n                    }\n                } else {\n                    // Interval updates\n                    this.peerconnection.getStats()\n                        .then(report => {\n                            this.currentAudioLevelsReport = typeof report?.result === 'function'\n                                ? report.result()\n                                : report;\n                            this.processAudioLevelReport();\n                            this.baselineAudioLevelsReport = this.currentAudioLevelsReport;\n                        })\n                        .catch(error => this.errorCallback(error));\n                }\n            },\n            this.audioLevelsIntervalMilis\n        );\n    }\n\n    const processStats = () => {\n        // Interval updates\n        this.peerconnection.getStats()\n            .then(report => {\n                this.currentStatsReport = typeof report?.result === 'function'\n                    ? report.result()\n                    : report;\n\n                try {\n                    this.processStatsReport();\n                } catch (error) {\n                    GlobalOnErrorHandler.callErrorHandler(error);\n                    logger.error('Processing of RTP stats failed:', error);\n                }\n                this.previousStatsReport = this.currentStatsReport;\n            })\n            .catch(error => this.errorCallback(error));\n    };\n\n    processStats();\n    this.statsIntervalId = setInterval(processStats, this.statsIntervalMilis);\n};\n\n/**\n *\n */\nStatsCollector.prototype._processAndEmitReport = function() {\n    // process stats\n    const totalPackets = {\n        download: 0,\n        upload: 0\n    };\n    const lostPackets = {\n        download: 0,\n        upload: 0\n    };\n    let bitrateDownload = 0;\n    let bitrateUpload = 0;\n    const resolutions = {};\n    const framerates = {};\n    const codecs = {};\n    let audioBitrateDownload = 0;\n    let audioBitrateUpload = 0;\n    let audioCodec;\n    let videoBitrateDownload = 0;\n    let videoBitrateUpload = 0;\n    let videoCodec;\n\n    for (const [ ssrc, ssrcStats ] of this.ssrc2stats) {\n        // process packet loss stats\n        const loss = ssrcStats.loss;\n        const type = loss.isDownloadStream ? 'download' : 'upload';\n\n        totalPackets[type] += loss.packetsTotal;\n        lostPackets[type] += loss.packetsLost;\n\n        // process bitrate stats\n        bitrateDownload += ssrcStats.bitrate.download;\n        bitrateUpload += ssrcStats.bitrate.upload;\n\n        // collect resolutions and framerates\n        const track = this.peerconnection.getTrackBySSRC(ssrc);\n\n        if (track) {\n            if (track.isAudioTrack()) {\n                audioBitrateDownload += ssrcStats.bitrate.download;\n                audioBitrateUpload += ssrcStats.bitrate.upload;\n                audioCodec = ssrcStats.codec;\n            } else {\n                videoBitrateDownload += ssrcStats.bitrate.download;\n                videoBitrateUpload += ssrcStats.bitrate.upload;\n                videoCodec = ssrcStats.codec;\n            }\n\n            if (FeatureFlags.isSourceNameSignalingEnabled()) {\n                const sourceName = track.getSourceName();\n\n                if (sourceName) {\n                    const resolution = ssrcStats.resolution;\n\n                    if (resolution.width // eslint-disable-line max-depth\n                            && resolution.height\n                            && resolution.width !== -1\n                            && resolution.height !== -1) {\n                        resolutions[sourceName] = resolution;\n                    }\n                    if (ssrcStats.framerate !== 0) { // eslint-disable-line max-depth\n                        framerates[sourceName] = ssrcStats.framerate;\n                    }\n                    if (audioCodec && videoCodec) { // eslint-disable-line max-depth\n                        const codecDesc = {\n                            'audio': audioCodec,\n                            'video': videoCodec\n                        };\n\n                        codecs[sourceName] = codecDesc;\n                    }\n                } else {\n                    logger.error(`No source name returned by ${track}`);\n                }\n            } else {\n                const participantId = track.getParticipantId();\n\n                if (participantId) {\n                    const resolution = ssrcStats.resolution;\n\n                    if (resolution.width // eslint-disable-line max-depth\n                            && resolution.height\n                            && resolution.width !== -1\n                            && resolution.height !== -1) {\n                        const userResolutions = resolutions[participantId] || {};\n\n                        userResolutions[ssrc] = resolution;\n                        resolutions[participantId] = userResolutions;\n                    }\n                    if (ssrcStats.framerate !== 0) { // eslint-disable-line max-depth\n                        const userFramerates = framerates[participantId] || {};\n\n                        userFramerates[ssrc] = ssrcStats.framerate;\n                        framerates[participantId] = userFramerates;\n                    }\n                    if (audioCodec && videoCodec) { // eslint-disable-line max-depth\n                        const codecDesc = {\n                            'audio': audioCodec,\n                            'video': videoCodec\n                        };\n\n                        const userCodecs = codecs[participantId] || {};\n\n                        userCodecs[ssrc] = codecDesc;\n                        codecs[participantId] = userCodecs;\n                    }\n                } else {\n                    logger.error(`No participant ID returned by ${track}`);\n                }\n            }\n        }\n\n        ssrcStats.resetBitrate();\n    }\n\n    this.conferenceStats.bitrate = {\n        'upload': bitrateUpload,\n        'download': bitrateDownload\n    };\n\n    this.conferenceStats.bitrate.audio = {\n        'upload': audioBitrateUpload,\n        'download': audioBitrateDownload\n    };\n\n    this.conferenceStats.bitrate.video = {\n        'upload': videoBitrateUpload,\n        'download': videoBitrateDownload\n    };\n\n    this.conferenceStats.packetLoss = {\n        total:\n            calculatePacketLoss(\n                lostPackets.download + lostPackets.upload,\n                totalPackets.download + totalPackets.upload),\n        download:\n            calculatePacketLoss(lostPackets.download, totalPackets.download),\n        upload:\n            calculatePacketLoss(lostPackets.upload, totalPackets.upload)\n    };\n\n    const avgAudioLevels = {};\n    let localAvgAudioLevels;\n\n    Object.keys(this.audioLevelReportHistory).forEach(ssrc => {\n        const { data, isLocal } = this.audioLevelReportHistory[ssrc];\n        const avgAudioLevel = data.reduce((sum, currentValue) => sum + currentValue) / data.length;\n\n        if (isLocal) {\n            localAvgAudioLevels = avgAudioLevel;\n        } else {\n            const track = this.peerconnection.getTrackBySSRC(Number(ssrc));\n\n            if (track) {\n                const participantId = track.getParticipantId();\n\n                if (participantId) {\n                    avgAudioLevels[participantId] = avgAudioLevel;\n                }\n            }\n        }\n    });\n    this.audioLevelReportHistory = {};\n\n    this.eventEmitter.emit(\n        StatisticsEvents.CONNECTION_STATS,\n        this.peerconnection,\n        {\n            'bandwidth': this.conferenceStats.bandwidth,\n            'bitrate': this.conferenceStats.bitrate,\n            'packetLoss': this.conferenceStats.packetLoss,\n            'resolution': resolutions,\n            'framerate': framerates,\n            'codec': codecs,\n            'transport': this.conferenceStats.transport,\n            localAvgAudioLevels,\n            avgAudioLevels\n        });\n    this.conferenceStats.transport = [];\n};\n\n/**\n * Converts the value to a non-negative number.\n * If the value is either invalid or negative then 0 will be returned.\n * @param {*} v\n * @return {number}\n * @private\n */\nStatsCollector.prototype.getNonNegativeValue = function(v) {\n    let value = v;\n\n    if (typeof value !== 'number') {\n        value = Number(value);\n    }\n\n    if (isNaN(value)) {\n        return 0;\n    }\n\n    return Math.max(0, value);\n};\n\n/**\n * Calculates bitrate between before and now using a supplied field name and its\n * value in the stats.\n * @param {RTCInboundRtpStreamStats|RTCSentRtpStreamStats} now the current stats\n * @param {RTCInboundRtpStreamStats|RTCSentRtpStreamStats} before the\n * previous stats.\n * @param fieldName the field to use for calculations.\n * @return {number} the calculated bitrate between now and before.\n * @private\n */\nStatsCollector.prototype._calculateBitrate = function(now, before, fieldName) {\n    const bytesNow = this.getNonNegativeValue(now[fieldName]);\n    const bytesBefore = this.getNonNegativeValue(before[fieldName]);\n    const bytesProcessed = Math.max(0, bytesNow - bytesBefore);\n\n    const timeMs = now.timestamp - before.timestamp;\n    let bitrateKbps = 0;\n\n    if (timeMs > 0) {\n        // TODO is there any reason to round here?\n        bitrateKbps = Math.round((bytesProcessed * 8) / timeMs);\n    }\n\n    return bitrateKbps;\n};\n\n/**\n * Stats processing for spec-compliant RTCPeerConnection#getStats.\n */\nStatsCollector.prototype.processStatsReport = function() {\n    if (!this.previousStatsReport) {\n        return;\n    }\n    const byteSentStats = {};\n\n    this.currentStatsReport.forEach(now => {\n        // RTCIceCandidatePairStats - https://w3c.github.io/webrtc-stats/#candidatepair-dict*\n        if (now.type === 'candidate-pair' && now.nominated && now.state === 'succeeded') {\n            const availableIncomingBitrate = now.availableIncomingBitrate;\n            const availableOutgoingBitrate = now.availableOutgoingBitrate;\n\n            if (availableIncomingBitrate || availableOutgoingBitrate) {\n                this.conferenceStats.bandwidth = {\n                    'download': Math.round(availableIncomingBitrate / 1000),\n                    'upload': Math.round(availableOutgoingBitrate / 1000)\n                };\n            }\n\n            const remoteUsedCandidate = this.currentStatsReport.get(now.remoteCandidateId);\n            const localUsedCandidate = this.currentStatsReport.get(now.localCandidateId);\n\n            // RTCIceCandidateStats\n            // https://w3c.github.io/webrtc-stats/#icecandidate-dict*\n            if (remoteUsedCandidate && localUsedCandidate) {\n                const remoteIpAddress = browser.isChromiumBased()\n                    ? remoteUsedCandidate.ip\n                    : remoteUsedCandidate.address;\n                const remotePort = remoteUsedCandidate.port;\n                const ip = `${remoteIpAddress}:${remotePort}`;\n\n                const localIpAddress = browser.isChromiumBased()\n                    ? localUsedCandidate.ip\n                    : localUsedCandidate.address;\n                const localPort = localUsedCandidate.port;\n                const localip = `${localIpAddress}:${localPort}`;\n                const type = remoteUsedCandidate.protocol;\n\n                // Save the address unless it has been saved already.\n                const conferenceStatsTransport = this.conferenceStats.transport;\n\n                if (!conferenceStatsTransport.some(t =>\n                    t.ip === ip\n                    && t.type === type\n                    && t.localip === localip)) {\n                    conferenceStatsTransport.push({\n                        ip,\n                        type,\n                        localip,\n                        p2p: this.peerconnection.isP2P,\n                        localCandidateType: localUsedCandidate.candidateType,\n                        remoteCandidateType: remoteUsedCandidate.candidateType,\n                        networkType: localUsedCandidate.networkType,\n                        rtt: now.currentRoundTripTime * 1000\n                    });\n                }\n            }\n\n        // RTCReceivedRtpStreamStats\n        // https://w3c.github.io/webrtc-stats/#receivedrtpstats-dict*\n        // RTCSentRtpStreamStats\n        // https://w3c.github.io/webrtc-stats/#sentrtpstats-dict*\n        } else if (now.type === 'inbound-rtp' || now.type === 'outbound-rtp') {\n            const before = this.previousStatsReport.get(now.id);\n            const ssrc = this.getNonNegativeValue(now.ssrc);\n\n            if (!before || !ssrc) {\n                return;\n            }\n\n            let ssrcStats = this.ssrc2stats.get(ssrc);\n\n            if (!ssrcStats) {\n                ssrcStats = new SsrcStats();\n                this.ssrc2stats.set(ssrc, ssrcStats);\n            }\n\n            let isDownloadStream = true;\n            let key = 'packetsReceived';\n\n            if (now.type === 'outbound-rtp') {\n                isDownloadStream = false;\n                key = 'packetsSent';\n            }\n\n            let packetsNow = now[key];\n\n            if (!packetsNow || packetsNow < 0) {\n                packetsNow = 0;\n            }\n\n            const packetsBefore = this.getNonNegativeValue(before[key]);\n            const packetsDiff = Math.max(0, packetsNow - packetsBefore);\n\n            const packetsLostNow = this.getNonNegativeValue(now.packetsLost);\n            const packetsLostBefore = this.getNonNegativeValue(before.packetsLost);\n            const packetsLostDiff = Math.max(0, packetsLostNow - packetsLostBefore);\n\n            ssrcStats.setLoss({\n                packetsTotal: packetsDiff + packetsLostDiff,\n                packetsLost: packetsLostDiff,\n                isDownloadStream\n            });\n\n            // Get the resolution and framerate for only remote video sources here. For the local video sources,\n            // 'track' stats will be used since they have the updated resolution based on the simulcast streams\n            // currently being sent. Promise based getStats reports three 'outbound-rtp' streams and there will be\n            // more calculations needed to determine what is the highest resolution stream sent by the client if the\n            // 'outbound-rtp' stats are used.\n            if (now.type === 'inbound-rtp') {\n                const resolution = {\n                    height: now.frameHeight,\n                    width: now.frameWidth\n                };\n                const frameRate = now.framesPerSecond;\n\n                if (resolution.height && resolution.width) {\n                    ssrcStats.setResolution(resolution);\n                }\n                ssrcStats.setFramerate(Math.round(frameRate || 0));\n\n                ssrcStats.addBitrate({\n                    'download': this._calculateBitrate(now, before, 'bytesReceived'),\n                    'upload': 0\n                });\n            } else {\n                byteSentStats[ssrc] = this.getNonNegativeValue(now.bytesSent);\n                ssrcStats.addBitrate({\n                    'download': 0,\n                    'upload': this._calculateBitrate(now, before, 'bytesSent')\n                });\n            }\n\n            const codec = this.currentStatsReport.get(now.codecId);\n\n            if (codec) {\n                /**\n                 * The mime type has the following form: video/VP8 or audio/ISAC,\n                 * so we what to keep just the type after the '/', audio and video\n                 * keys will be added on the processing side.\n                 */\n                const codecShortType = codec.mimeType.split('/')[1];\n\n                codecShortType && ssrcStats.setCodec(codecShortType);\n            }\n\n        // Use track stats for resolution and framerate of the local video source.\n        // RTCVideoHandlerStats - https://w3c.github.io/webrtc-stats/#vststats-dict*\n        // RTCMediaHandlerStats - https://w3c.github.io/webrtc-stats/#mststats-dict*\n        } else if (now.type === 'track' && now.kind === MediaType.VIDEO && !now.remoteSource) {\n            const resolution = {\n                height: now.frameHeight,\n                width: now.frameWidth\n            };\n            const localVideoTracks = this.peerconnection.getLocalTracks(MediaType.VIDEO);\n\n            if (!localVideoTracks?.length) {\n                return;\n            }\n\n            const ssrc = this.peerconnection.getSsrcByTrackId(now.trackIdentifier);\n\n            if (!ssrc) {\n                return;\n            }\n            let ssrcStats = this.ssrc2stats.get(ssrc);\n\n            if (!ssrcStats) {\n                ssrcStats = new SsrcStats();\n                this.ssrc2stats.set(ssrc, ssrcStats);\n            }\n            if (resolution.height && resolution.width) {\n                ssrcStats.setResolution(resolution);\n            }\n\n            // Calculate the frame rate. 'framesSent' is the total aggregate value for all the simulcast streams.\n            // Therefore, it needs to be divided by the total number of active simulcast streams.\n            let frameRate = now.framesPerSecond;\n\n            if (!frameRate) {\n                const before = this.previousStatsReport.get(now.id);\n\n                if (before) {\n                    const timeMs = now.timestamp - before.timestamp;\n\n                    if (timeMs > 0 && now.framesSent) {\n                        const numberOfFramesSinceBefore = now.framesSent - before.framesSent;\n\n                        frameRate = (numberOfFramesSinceBefore / timeMs) * 1000;\n                    }\n                }\n\n                if (!frameRate) {\n                    return;\n                }\n            }\n\n            // Get the number of simulcast streams currently enabled from TPC.\n            const numberOfActiveStreams = this.peerconnection.getActiveSimulcastStreams();\n\n            // Reset frame rate to 0 when video is suspended as a result of endpoint falling out of last-n.\n            frameRate = numberOfActiveStreams ? Math.round(frameRate / numberOfActiveStreams) : 0;\n            ssrcStats.setFramerate(frameRate);\n        }\n    });\n\n    this.eventEmitter.emit(StatisticsEvents.BYTE_SENT_STATS, this.peerconnection, byteSentStats);\n    this._processAndEmitReport();\n};\n\n/**\n * Stats processing logic.\n */\nStatsCollector.prototype.processAudioLevelReport = function() {\n    if (!this.baselineAudioLevelsReport) {\n        return;\n    }\n\n    this.currentAudioLevelsReport.forEach(now => {\n        if (now.type !== 'track') {\n            return;\n        }\n\n        // Audio level\n        const audioLevel = now.audioLevel;\n\n        if (!audioLevel) {\n            return;\n        }\n\n        const trackIdentifier = now.trackIdentifier;\n        const ssrc = this.peerconnection.getSsrcByTrackId(trackIdentifier);\n\n        if (ssrc) {\n            const isLocal\n                = ssrc === this.peerconnection.getLocalSSRC(\n                this.peerconnection.getLocalTracks(MediaType.AUDIO));\n\n            this.eventEmitter.emit(\n                StatisticsEvents.AUDIO_LEVEL,\n                this.peerconnection,\n                ssrc,\n                audioLevel,\n                isLocal);\n        }\n    });\n};\n\n","import EventEmitter from 'events';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport JitsiTrackError from '../../JitsiTrackError';\nimport { JitsiTrackEvents } from '../../JitsiTrackEvents';\nimport { FEEDBACK } from '../../service/statistics/AnalyticsEvents';\nimport * as StatisticsEvents from '../../service/statistics/Events';\nimport browser from '../browser';\nimport ScriptUtil from '../util/ScriptUtil';\n\nimport analytics from './AnalyticsAdapter';\nimport CallStats from './CallStats';\nimport LocalStats from './LocalStatsCollector';\nimport { PerformanceObserverStats } from './PerformanceObserverStats';\nimport RTPStats from './RTPStatsCollector';\nimport { CALLSTATS_SCRIPT_URL } from './constants';\n\nconst logger = require('@jitsi/logger').getLogger(__filename);\n\n/**\n * Stores all active {@link Statistics} instances.\n * @type {Set<Statistics>}\n */\nlet _instances;\n\n/**\n * True if callstats API is loaded\n */\nlet isCallstatsLoaded = false;\n\n/**\n * Since callstats.io is a third party, we cannot guarantee the quality of their\n * service. More specifically, their server may take noticeably long time to\n * respond. Consequently, it is in our best interest (in the sense that the\n * intergration of callstats.io is pretty important to us but not enough to\n * allow it to prevent people from joining a conference) to (1) start\n * downloading their API as soon as possible and (2) do the downloading\n * asynchronously.\n *\n * @param {StatisticsOptions} options - Options to use for downloading and\n * initializing callstats backend.\n */\nfunction loadCallStatsAPI(options) {\n    if (!isCallstatsLoaded) {\n        ScriptUtil.loadScript(\n            options.customScriptUrl || CALLSTATS_SCRIPT_URL,\n            /* async */ true,\n            /* prepend */ true,\n            /* relativeURL */ undefined,\n            /* loadCallback */ () => _initCallStatsBackend(options)\n        );\n        isCallstatsLoaded = true;\n    }\n}\n\n/**\n * Initializes Callstats backend.\n *\n * @param {StatisticsOptions} options - The options to use for initializing\n * callstats backend.\n * @private\n */\nfunction _initCallStatsBackend(options) {\n    if (CallStats.isBackendInitialized()) {\n        return;\n    }\n\n    if (!CallStats.initBackend({\n        callStatsID: options.callStatsID,\n        callStatsSecret: options.callStatsSecret,\n        userName: options.userName,\n        aliasName: options.aliasName,\n        applicationName: options.applicationName,\n        getWiFiStatsMethod: options.getWiFiStatsMethod,\n        confID: options.confID,\n        siteID: options.siteID,\n        configParams: options.configParams\n    })) {\n        logger.error('CallStats Backend initialization failed bad');\n    }\n}\n\n/**\n * callstats strips any additional fields from Error except for \"name\", \"stack\",\n * \"message\" and \"constraintName\". So we need to bundle additional information\n * from JitsiTrackError into error passed to callstats to preserve valuable\n * information about error.\n * @param {JitsiTrackError} error\n */\nfunction formatJitsiTrackErrorForCallStats(error) {\n    const err = new Error();\n\n    // Just copy original stack from error\n    err.stack = error.stack;\n\n    // Combine name from error's name plus (possibly) name of original GUM error\n    err.name = (error.name || 'Unknown error') + (error.gum && error.gum.error\n        && error.gum.error.name ? ` - ${error.gum.error.name}` : '');\n\n    // Put all constraints into this field. For constraint failed errors we will\n    // still know which exactly constraint failed as it will be a part of\n    // message.\n    err.constraintName = error.gum && error.gum.constraints\n        ? JSON.stringify(error.gum.constraints) : '';\n\n    // Just copy error's message.\n    err.message = error.message;\n\n    return err;\n}\n\n/**\n * Init statistic options\n * @param options\n */\nStatistics.init = function(options) {\n    Statistics.audioLevelsEnabled = !options.disableAudioLevels;\n    if (typeof options.pcStatsInterval === 'number') {\n        Statistics.pcStatsInterval = options.pcStatsInterval;\n    }\n\n    if (typeof options.audioLevelsInterval === 'number') {\n        Statistics.audioLevelsInterval = options.audioLevelsInterval;\n    }\n\n    if (typeof options.longTasksStatsInterval === 'number') {\n        Statistics.longTasksStatsInterval = options.longTasksStatsInterval;\n    }\n\n    Statistics.disableThirdPartyRequests = options.disableThirdPartyRequests;\n};\n\n/**\n * The options to configure Statistics.\n * @typedef {Object} StatisticsOptions\n * @property {string} applicationName - The application name to pass to\n * callstats.\n * @property {string} aliasName - The alias name to use when initializing callstats.\n * @property {string} userName - The user name to use when initializing callstats.\n * @property {string} confID - The callstats conference ID to use.\n * @property {string} callStatsID - Callstats credentials - the id.\n * @property {string} callStatsSecret - Callstats credentials - the secret.\n * @property {string} customScriptUrl - A custom lib url to use when downloading\n * callstats library.\n * @property {string} roomName - The room name we are currently in.\n * @property {string} configParams - The set of parameters\n * to enable/disable certain features in the library. See CallStats docs for more info.\n */\n/**\n *\n * @param xmpp\n * @param {StatisticsOptions} options - The options to use creating the\n * Statistics.\n */\nexport default function Statistics(xmpp, options) {\n    /**\n     * {@link RTPStats} mapped by {@link TraceablePeerConnection.id} which\n     * collect RTP statistics for each peerconnection.\n     * @type {Map<string, RTPStats}\n     */\n    this.rtpStatsMap = new Map();\n    this.eventEmitter = new EventEmitter();\n    this.xmpp = xmpp;\n    this.options = options || {};\n\n    this.callStatsIntegrationEnabled\n        = this.options.callStatsID && this.options.callStatsSecret && this.options.enableCallStats\n\n            // Even though AppID and AppSecret may be specified, the integration\n            // of callstats.io may be disabled because of globally-disallowed\n            // requests to any third parties.\n            && (Statistics.disableThirdPartyRequests !== true);\n    if (this.callStatsIntegrationEnabled) {\n        this.callStatsApplicationLogsDisabled\n            = this.options.callStatsApplicationLogsDisabled;\n        if (browser.isReactNative()) {\n            _initCallStatsBackend(this.options);\n        } else {\n            loadCallStatsAPI(this.options);\n        }\n\n        if (!this.options.confID) {\n            logger.warn('\"confID\" is not defined');\n        }\n    }\n\n    /**\n     * Stores {@link CallStats} instances for each\n     * {@link TraceablePeerConnection} (one {@link CallStats} instance serves\n     * one TPC). The instances are mapped by {@link TraceablePeerConnection.id}.\n     * @type {Map<number, CallStats>}\n     */\n    this.callsStatsInstances = new Map();\n\n    Statistics.instances.add(this);\n}\nStatistics.audioLevelsEnabled = false;\nStatistics.audioLevelsInterval = 200;\nStatistics.pcStatsInterval = 10000;\nStatistics.disableThirdPartyRequests = false;\nStatistics.analytics = analytics;\nStatistics.analyticsEventEmitter = new EventEmitter();\n\nObject.defineProperty(Statistics, 'instances', {\n    /**\n     * Returns the Set holding all active {@link Statistics} instances. Lazily\n     * initializes the Set to allow any Set polyfills to be applied.\n     * @type {Set<Statistics>}\n     */\n    get() {\n        if (!_instances) {\n            _instances = new Set();\n        }\n\n        return _instances;\n    }\n});\n\n/**\n * Starts collecting RTP stats for given peerconnection.\n * @param {TraceablePeerConnection} peerconnection\n */\nStatistics.prototype.startRemoteStats = function(peerconnection) {\n    this.stopRemoteStats(peerconnection);\n\n    try {\n        const rtpStats\n            = new RTPStats(\n                peerconnection,\n                Statistics.audioLevelsInterval,\n                Statistics.pcStatsInterval,\n                this.eventEmitter);\n\n        rtpStats.start(Statistics.audioLevelsEnabled);\n        this.rtpStatsMap.set(peerconnection.id, rtpStats);\n    } catch (e) {\n        logger.error(`Failed to start collecting remote statistics: ${e}`);\n    }\n};\n\nStatistics.localStats = [];\n\nStatistics.startLocalStats = function(track, callback) {\n    if (browser.isIosBrowser()) {\n        // On iOS browsers audio is lost if the audio input device is in use by another app\n        // https://bugs.webkit.org/show_bug.cgi?id=233473\n        // The culprit was using the AudioContext, so now we close the AudioContext during\n        // the track being muted, and re-instantiate it afterwards.\n        track.addEventListener(\n        JitsiTrackEvents.NO_DATA_FROM_SOURCE,\n\n        /**\n         * Closes AudioContext on no audio data, and enables it on data received again.\n         *\n         * @param {boolean} value - Whether we receive audio data or not.\n         */\n        async value => {\n            if (value) {\n                for (const localStat of Statistics.localStats) {\n                    localStat.stop();\n                }\n\n                await LocalStats.disconnectAudioContext();\n            } else {\n                LocalStats.connectAudioContext();\n                for (const localStat of Statistics.localStats) {\n                    localStat.start();\n                }\n            }\n        });\n    }\n\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n\n    track.addEventListener(\n        JitsiTrackEvents.LOCAL_TRACK_STOPPED,\n        () => {\n            Statistics.stopLocalStats(track);\n        });\n\n    const stream = track.getOriginalStream();\n    const localStats = new LocalStats(stream, Statistics.audioLevelsInterval,\n        callback);\n\n    this.localStats.push(localStats);\n    localStats.start();\n};\n\nStatistics.prototype.addAudioLevelListener = function(listener) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n    this.eventEmitter.on(StatisticsEvents.AUDIO_LEVEL, listener);\n};\n\nStatistics.prototype.removeAudioLevelListener = function(listener) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n    this.eventEmitter.removeListener(StatisticsEvents.AUDIO_LEVEL, listener);\n};\n\nStatistics.prototype.addBeforeDisposedListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.BEFORE_DISPOSED, listener);\n};\n\nStatistics.prototype.removeBeforeDisposedListener = function(listener) {\n    this.eventEmitter.removeListener(\n        StatisticsEvents.BEFORE_DISPOSED, listener);\n};\n\nStatistics.prototype.addConnectionStatsListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.CONNECTION_STATS, listener);\n};\n\nStatistics.prototype.removeConnectionStatsListener = function(listener) {\n    this.eventEmitter.removeListener(\n        StatisticsEvents.CONNECTION_STATS,\n        listener);\n};\n\nStatistics.prototype.addByteSentStatsListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.BYTE_SENT_STATS, listener);\n};\n\nStatistics.prototype.removeByteSentStatsListener = function(listener) {\n    this.eventEmitter.removeListener(StatisticsEvents.BYTE_SENT_STATS,\n        listener);\n};\n\n/**\n * Add a listener that would be notified on a LONG_TASKS_STATS event.\n *\n * @param {Function} listener a function that would be called when notified.\n * @returns {void}\n */\nStatistics.prototype.addLongTasksStatsListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.LONG_TASKS_STATS, listener);\n};\n\n/**\n * Creates an instance of {@link PerformanceObserverStats} and starts the\n * observer that records the stats periodically.\n *\n * @returns {void}\n */\nStatistics.prototype.attachLongTasksStats = function(conference) {\n    if (!browser.supportsPerformanceObserver()) {\n        logger.warn('Performance observer for long tasks not supported by browser!');\n\n        return;\n    }\n\n    this.performanceObserverStats = new PerformanceObserverStats(\n        this.eventEmitter,\n        Statistics.longTasksStatsInterval);\n\n    conference.on(\n        JitsiConferenceEvents.CONFERENCE_JOINED,\n        () => this.performanceObserverStats.startObserver());\n    conference.on(\n        JitsiConferenceEvents.CONFERENCE_LEFT,\n        () => this.performanceObserverStats.stopObserver());\n};\n\n/**\n * Obtains the current value of the LongTasks event statistics.\n *\n * @returns {Object|null} stats object if the observer has been\n * created, null otherwise.\n */\nStatistics.prototype.getLongTasksStats = function() {\n    return this.performanceObserverStats\n        ? this.performanceObserverStats.getLongTasksStats()\n        : null;\n};\n\n/**\n * Removes the given listener for the LONG_TASKS_STATS event.\n *\n * @param {Function} listener the listener we want to remove.\n * @returns {void}\n */\nStatistics.prototype.removeLongTasksStatsListener = function(listener) {\n    this.eventEmitter.removeListener(StatisticsEvents.LONG_TASKS_STATS, listener);\n};\n\n/**\n * Updates the list of speakers for which the audio levels are to be calculated. This is needed for the jvb pc only.\n *\n * @param {Array<string>} speakerList The list of remote endpoint ids.\n * @returns {void}\n */\nStatistics.prototype.setSpeakerList = function(speakerList) {\n    for (const rtpStats of Array.from(this.rtpStatsMap.values())) {\n        if (!rtpStats.peerconnection.isP2P) {\n            rtpStats.setSpeakerList(speakerList);\n        }\n    }\n};\n\nStatistics.prototype.dispose = function() {\n    try {\n        // NOTE Before reading this please see the comment in stopCallStats...\n        //\n        // Here we prevent from emitting the event twice in case it will be\n        // triggered from stopCallStats.\n        // If the event is triggered from here it means that the logs will not\n        // be submitted anyway (because there is no CallStats instance), but\n        // we're doing that for the sake of some kind of consistency.\n        if (!this.callsStatsInstances.size) {\n            this.eventEmitter.emit(StatisticsEvents.BEFORE_DISPOSED);\n        }\n        for (const callStats of this.callsStatsInstances.values()) {\n            this.stopCallStats(callStats.tpc);\n        }\n        for (const tpcId of this.rtpStatsMap.keys()) {\n            this._stopRemoteStats(tpcId);\n        }\n        if (this.eventEmitter) {\n            this.eventEmitter.removeAllListeners();\n        }\n    } finally {\n        Statistics.instances.delete(this);\n    }\n};\n\nStatistics.stopLocalStats = function(track) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n\n    const stream = track.getOriginalStream();\n\n    for (let i = 0; i < Statistics.localStats.length; i++) {\n        if (Statistics.localStats[i].stream === stream) {\n            const localStats = Statistics.localStats.splice(i, 1);\n\n            localStats[0].stop();\n            break;\n        }\n    }\n};\n\n/**\n * Stops remote RTP stats for given peerconnection ID.\n * @param {string} tpcId {@link TraceablePeerConnection.id}\n * @private\n */\nStatistics.prototype._stopRemoteStats = function(tpcId) {\n    const rtpStats = this.rtpStatsMap.get(tpcId);\n\n    if (rtpStats) {\n        rtpStats.stop();\n        this.rtpStatsMap.delete(tpcId);\n    }\n};\n\n/**\n * Stops collecting RTP stats for given peerconnection\n * @param {TraceablePeerConnection} tpc\n */\nStatistics.prototype.stopRemoteStats = function(tpc) {\n    this._stopRemoteStats(tpc.id);\n};\n\n// CALSTATS METHODS\n\n/**\n * Initializes the callstats.io API.\n * @param {TraceablePeerConnection} tpc the {@link TraceablePeerConnection}\n * instance for which CalStats will be started.\n * @param {string} remoteUserID\n */\nStatistics.prototype.startCallStats = function(tpc, remoteUserID) {\n    if (!this.callStatsIntegrationEnabled) {\n        return;\n    } else if (this.callsStatsInstances.has(tpc.id)) {\n        logger.error('CallStats instance for ${tpc} exists already');\n\n        return;\n    }\n    let confID = this.options.confID;\n\n    // confID - domain/tenant/roomName\n    // roomName - meeting name or breakout room ID\n    // For breakout rooms we change the conference ID used for callstats to use\n    // the room ID instead of the meeting name\n    if (!confID.endsWith(this.options.roomName)) {\n        confID = `${this.options.confID.slice(0, this.options.confID.lastIndexOf('/'))}/${this.options.roomName}`;\n    }\n\n    logger.info(`Starting CallStats for ${tpc}...`);\n    const newInstance\n        = new CallStats(\n            tpc,\n            {\n                confID,\n                remoteUserID\n            });\n\n    this.callsStatsInstances.set(tpc.id, newInstance);\n};\n\n/**\n * Obtains the list of *all* {@link CallStats} instances collected from every\n * valid {@link Statistics} instance.\n * @return {Set<CallStats>}\n * @private\n */\nStatistics._getAllCallStatsInstances = function() {\n    const csInstances = new Set();\n\n    for (const statistics of Statistics.instances) {\n        for (const cs of statistics.callsStatsInstances.values()) {\n            csInstances.add(cs);\n        }\n    }\n\n    return csInstances;\n};\n\n/**\n * Removes the callstats.io instances.\n */\nStatistics.prototype.stopCallStats = function(tpc) {\n    const callStatsInstance = this.callsStatsInstances.get(tpc.id);\n\n    if (callStatsInstance) {\n        // FIXME the original purpose of adding BEFORE_DISPOSED event was to be\n        // able to submit the last log batch from jitsi-meet to CallStats. After\n        // recent changes we dispose the CallStats earlier\n        // (before Statistics.dispose), so we need to emit this event here to\n        // give this last chance for final log batch submission.\n        //\n        // Eventually there should be a separate module called \"log storage\"\n        // which should emit proper events when it's underlying\n        // CallStats instance is going away.\n        if (this.callsStatsInstances.size === 1) {\n            this.eventEmitter.emit(StatisticsEvents.BEFORE_DISPOSED);\n        }\n        this.callsStatsInstances.delete(tpc.id);\n\n        // The fabric needs to be terminated when being stopped\n        callStatsInstance.sendTerminateEvent();\n    }\n};\n\n/**\n * Returns true if the callstats integration is enabled, otherwise returns\n * false.\n *\n * @returns true if the callstats integration is enabled, otherwise returns\n * false.\n */\nStatistics.prototype.isCallstatsEnabled = function() {\n    return this.callStatsIntegrationEnabled;\n};\n\n/**\n * Logs either resume or hold event for the given peer connection.\n * @param {TraceablePeerConnection} tpc the connection for which event will be\n * reported\n * @param {boolean} isResume true for resume or false for hold\n */\nStatistics.prototype.sendConnectionResumeOrHoldEvent = function(tpc, isResume) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendResumeOrHoldEvent(isResume);\n    }\n};\n\n/**\n * Notifies CallStats and analytics (if present) for ice connection failed\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendIceConnectionFailedEvent = function(tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendIceConnectionFailedEvent();\n    }\n};\n\n/**\n * Notifies CallStats for mute events\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n * @param {boolean} muted true for muted and false for not muted\n * @param {String} type \"audio\"/\"video\"\n */\nStatistics.prototype.sendMuteEvent = function(tpc, muted, type) {\n    const instance = tpc && this.callsStatsInstances.get(tpc.id);\n\n    CallStats.sendMuteEvent(muted, type, instance);\n};\n\n/**\n * Notifies CallStats for screen sharing events\n * @param start {boolean} true for starting screen sharing and\n * false for not stopping\n * @param {string|null} ssrc - optional ssrc value, used only when\n * starting screen sharing.\n */\nStatistics.prototype.sendScreenSharingEvent\n    = function(start, ssrc) {\n        for (const cs of this.callsStatsInstances.values()) {\n            cs.sendScreenSharingEvent(start, ssrc);\n        }\n    };\n\n/**\n * Notifies the statistics module that we are now the dominant speaker of the\n * conference.\n * @param {String} roomJid - The room jid where the speaker event occurred.\n */\nStatistics.prototype.sendDominantSpeakerEvent = function(roomJid) {\n    for (const cs of this.callsStatsInstances.values()) {\n        cs.sendDominantSpeakerEvent();\n    }\n\n    // xmpp send dominant speaker event\n    this.xmpp.sendDominantSpeakerEvent(roomJid);\n};\n\n/**\n * Notifies about active device.\n * @param {{deviceList: {String:String}}} devicesData - list of devices with\n *      their data\n */\nStatistics.sendActiveDeviceListEvent = function(devicesData) {\n    const globalSet = Statistics._getAllCallStatsInstances();\n\n    if (globalSet.size) {\n        for (const cs of globalSet) {\n            CallStats.sendActiveDeviceListEvent(devicesData, cs);\n        }\n    } else {\n        CallStats.sendActiveDeviceListEvent(devicesData, null);\n    }\n};\n\n/* eslint-disable max-params */\n\n/**\n * Lets the underlying statistics module know where is given SSRC rendered by\n * providing renderer tag ID.\n * @param {TraceablePeerConnection} tpc the connection to which the stream\n * belongs to\n * @param {number} ssrc the SSRC of the stream\n * @param {boolean} isLocal\n * @param {string} userId\n * @param {string} usageLabel  meaningful usage label of this stream like\n *        'microphone', 'camera' or 'screen'.\n * @param {string} containerId the id of media 'audio' or 'video' tag which\n *        renders the stream.\n */\nStatistics.prototype.associateStreamWithVideoTag = function(\n        tpc,\n        ssrc,\n        isLocal,\n        userId,\n        usageLabel,\n        containerId) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.associateStreamWithVideoTag(\n            ssrc,\n            isLocal,\n            userId,\n            usageLabel,\n            containerId);\n    }\n};\n\n/* eslint-enable max-params */\n\n/**\n * Notifies CallStats that getUserMedia failed.\n *\n * @param {Error} e error to send\n */\nStatistics.sendGetUserMediaFailed = function(e) {\n    const error\n        = e instanceof JitsiTrackError\n            ? formatJitsiTrackErrorForCallStats(e) : e;\n    const globalSet = Statistics._getAllCallStatsInstances();\n\n    if (globalSet.size) {\n        for (const cs of globalSet) {\n            CallStats.sendGetUserMediaFailed(error, cs);\n        }\n    } else {\n        CallStats.sendGetUserMediaFailed(error, null);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to create offer.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendCreateOfferFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendCreateOfferFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to create answer.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occured.\n */\nStatistics.prototype.sendCreateAnswerFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendCreateAnswerFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to set local description.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendSetLocalDescFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendSetLocalDescFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to set remote description.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendSetRemoteDescFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendSetRemoteDescFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to add ICE candidate.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendAddIceCandidateFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendAddIceCandidateFailed(e);\n    }\n};\n\n/**\n * Adds to CallStats an application log.\n *\n * @param {String} m a log message to send or an {Error} object to be reported\n */\nStatistics.sendLog = function(m) {\n    const globalSubSet = new Set();\n\n    // FIXME we don't want to duplicate logs over P2P instance, but\n    // here we should go over instances and call this method for each\n    // unique conference ID rather than selecting the first one.\n    // We don't have such use case though, so leaving as is for now.\n    for (const stats of Statistics.instances) {\n        if (stats.callStatsApplicationLogsDisabled) {\n            return;\n        }\n\n        if (stats.callsStatsInstances.size) {\n            globalSubSet.add(stats.callsStatsInstances.values().next().value);\n        }\n    }\n\n    if (globalSubSet.size) {\n        for (const csPerStats of globalSubSet) {\n            CallStats.sendApplicationLog(m, csPerStats);\n        }\n    } else {\n        CallStats.sendApplicationLog(m, null);\n    }\n};\n\n/**\n * Sends the given feedback through CallStats.\n *\n * @param overall an integer between 1 and 5 indicating the user's rating.\n * @param comment the comment from the user.\n * @returns {Promise} Resolves when callstats feedback has been submitted\n * successfully.\n */\nStatistics.prototype.sendFeedback = function(overall, comment) {\n    // Statistics.analytics.sendEvent is currently fire and forget, without\n    // confirmation of successful send.\n    Statistics.analytics.sendEvent(\n        FEEDBACK,\n        {\n            rating: overall,\n            comment\n        });\n\n    return CallStats.sendFeedback(this.options.confID, overall, comment);\n};\n\nStatistics.LOCAL_JID = require('../../service/statistics/constants').LOCAL_JID;\n\n/**\n * Reports global error to CallStats.\n *\n * @param {Error} error\n */\nStatistics.reportGlobalError = function(error) {\n    if (error instanceof JitsiTrackError && error.gum) {\n        Statistics.sendGetUserMediaFailed(error);\n    } else {\n        Statistics.sendLog(error);\n    }\n};\n\n/**\n * Sends event to analytics and logs a message to the logger/console. Console\n * messages might also be logged to callstats automatically.\n *\n * @param {string | Object} event the event name, or an object which\n * represents the entire event.\n * @param {Object} properties properties to attach to the event (if an event\n * name as opposed to an event object is provided).\n */\nStatistics.sendAnalyticsAndLog = function(event, properties = {}) {\n    if (!event) {\n        logger.warn('No event or event name given.');\n\n        return;\n    }\n\n    let eventToLog;\n\n    // Also support an API with a single object as an event.\n    if (typeof event === 'object') {\n        eventToLog = event;\n    } else {\n        eventToLog = {\n            name: event,\n            properties\n        };\n    }\n\n    logger.log(JSON.stringify(eventToLog));\n\n    // We do this last, because it may modify the object which is passed.\n    this.analytics.sendEvent(event, properties);\n};\n\n/**\n * Sends event to analytics.\n *\n * @param {string | Object} eventName the event name, or an object which\n * represents the entire event.\n * @param {Object} properties properties to attach to the event\n */\n\nStatistics.sendAnalytics = function(eventName, properties = {}) {\n    this.analytics.sendEvent(eventName, properties);\n    Statistics.analyticsEventEmitter.emit(JitsiConferenceEvents.ANALYTICS_EVENT_RECEIVED, eventName, properties);\n};\n\n\nStatistics.prototype.addAnalyticsEventListener = function(listener) {\n    Statistics.analyticsEventEmitter.on(JitsiConferenceEvents.ANALYTICS_EVENT_RECEIVED, listener);\n};\n\n\nStatistics.prototype.removeAnalyticsEventListener = function(listener) {\n    Statistics.analyticsEventEmitter.removeListener(JitsiConferenceEvents.ANALYTICS_EVENT_RECEIVED, listener);\n};\n\n\n\n\n\n","import { getLogger } from '@jitsi/logger';\nimport { Strophe } from 'strophe.js';\n\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport { SPEAKERS_AUDIO_LEVELS } from './modules/statistics/constants';\nimport Statistics from './modules/statistics/statistics';\nimport EventEmitterForwarder from './modules/util/EventEmitterForwarder';\nimport { MediaType } from './service/RTC/MediaType';\nimport RTCEvents from './service/RTC/RTCEvents';\nimport { VideoType } from './service/RTC/VideoType';\nimport AuthenticationEvents\n    from './service/authentication/AuthenticationEvents';\nimport {\n    ACTION_JINGLE_SA_TIMEOUT,\n    createBridgeDownEvent,\n    createConnectionStageReachedEvent,\n    createFocusLeftEvent,\n    createJingleEvent,\n    createRemotelyMutedEvent\n} from './service/statistics/AnalyticsEvents';\nimport { XMPPEvents } from './service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * Setups all event listeners related to conference\n * @param conference {JitsiConference} the conference\n */\nexport default function JitsiConferenceEventManager(conference) {\n    this.conference = conference;\n    this.xmppListeners = {};\n\n    // Listeners related to the conference only\n    conference.on(JitsiConferenceEvents.TRACK_MUTE_CHANGED,\n        track => {\n            if (!track.isLocal() || !conference.statistics) {\n                return;\n            }\n            const session\n                = track.isP2P\n                    ? conference.p2pJingleSession : conference.jvbJingleSession;\n\n            // TPC will be null, before the conference starts, but the event\n            // still should be queued\n            const tpc = (session && session.peerconnection) || null;\n\n            conference.statistics.sendMuteEvent(\n                tpc,\n                track.isMuted(),\n                track.getType());\n        });\n}\n\n/**\n * Setups event listeners related to conference.chatRoom\n */\nJitsiConferenceEventManager.prototype.setupChatRoomListeners = function() {\n    const conference = this.conference;\n    const chatRoom = conference.room;\n\n    this.chatRoomForwarder = new EventEmitterForwarder(chatRoom,\n        this.conference.eventEmitter);\n\n    chatRoom.addListener(XMPPEvents.ICE_RESTARTING, jingleSession => {\n        if (!jingleSession.isP2P) {\n            // If using DataChannel as bridge channel, it must be closed\n            // before ICE restart, otherwise Chrome will not trigger \"opened\"\n            // event for the channel established with the new bridge.\n            // TODO: This may be bypassed when using a WebSocket as bridge\n            // channel.\n            conference.rtc.closeBridgeChannel();\n        }\n\n        // else: there are no DataChannels in P2P session (at least for now)\n    });\n\n    chatRoom.addListener(XMPPEvents.PARTICIPANT_FEATURES_CHANGED, (from, features) => {\n        const participant = conference.getParticipantById(Strophe.getResourceFromJid(from));\n\n        if (participant) {\n            participant.setFeatures(features);\n            conference.eventEmitter.emit(JitsiConferenceEvents.PARTCIPANT_FEATURES_CHANGED, participant);\n        }\n    });\n\n    chatRoom.addListener(\n        XMPPEvents.ICE_RESTART_SUCCESS,\n        (jingleSession, offerIq) => {\n            // The JVB data chanel needs to be reopened in case the conference\n            // has been moved to a new bridge.\n            !jingleSession.isP2P\n                && conference._setBridgeChannel(\n                    offerIq, jingleSession.peerconnection);\n        });\n\n\n    chatRoom.addListener(XMPPEvents.AUDIO_MUTED_BY_FOCUS,\n        actor => {\n            // TODO: Add a way to differentiate between commands which caused\n            // us to mute and those that did not change our state (i.e. we were\n            // already muted).\n            Statistics.sendAnalytics(createRemotelyMutedEvent(MediaType.AUDIO));\n\n            conference.mutedByFocusActor = actor;\n\n            // set isMutedByFocus when setAudioMute Promise ends\n            conference.rtc.setAudioMute(true).then(\n                () => {\n                    conference.isMutedByFocus = true;\n                    conference.mutedByFocusActor = null;\n                })\n                .catch(\n                    error => {\n                        conference.mutedByFocusActor = null;\n                        logger.warn(\n                            'Error while audio muting due to focus request', error);\n                    });\n        }\n    );\n\n    chatRoom.addListener(XMPPEvents.VIDEO_MUTED_BY_FOCUS,\n        actor => {\n            // TODO: Add a way to differentiate between commands which caused\n            // us to mute and those that did not change our state (i.e. we were\n            // already muted).\n            Statistics.sendAnalytics(createRemotelyMutedEvent(MediaType.VIDEO));\n\n            conference.mutedVideoByFocusActor = actor;\n\n            // set isVideoMutedByFocus when setVideoMute Promise ends\n            conference.rtc.setVideoMute(true).then(\n                () => {\n                    conference.isVideoMutedByFocus = true;\n                    conference.mutedVideoByFocusActor = null;\n                })\n                .catch(\n                    error => {\n                        conference.mutedVideoByFocusActor = null;\n                        logger.warn(\n                            'Error while video muting due to focus request', error);\n                    });\n        }\n    );\n\n    this.chatRoomForwarder.forward(XMPPEvents.SUBJECT_CHANGED,\n        JitsiConferenceEvents.SUBJECT_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_JOINED,\n        JitsiConferenceEvents.CONFERENCE_JOINED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_JOIN_IN_PROGRESS,\n        JitsiConferenceEvents.CONFERENCE_JOIN_IN_PROGRESS);\n\n    this.chatRoomForwarder.forward(XMPPEvents.MEETING_ID_SET,\n        JitsiConferenceEvents.CONFERENCE_UNIQUE_ID_SET);\n\n    // send some analytics events\n    chatRoom.addListener(XMPPEvents.MUC_JOINED,\n        () => {\n            this.conference._onMucJoined();\n\n            this.conference.isJvbConnectionInterrupted = false;\n\n            // TODO: Move all of the 'connectionTimes' logic to its own module.\n            Object.keys(chatRoom.connectionTimes).forEach(key => {\n                const event\n                    = createConnectionStageReachedEvent(\n                        `conference_${key}`,\n                        { value: chatRoom.connectionTimes[key] });\n\n                Statistics.sendAnalytics(event);\n            });\n\n            // TODO: Move all of the 'connectionTimes' logic to its own module.\n            Object.keys(chatRoom.xmpp.connectionTimes).forEach(key => {\n                const event\n                    = createConnectionStageReachedEvent(\n                        `xmpp_${key}`,\n                        { value: chatRoom.xmpp.connectionTimes[key] });\n\n                Statistics.sendAnalytics(event);\n            });\n        });\n\n    chatRoom.addListener(XMPPEvents.RENEGOTIATION_FAILED, (e, session) => {\n        if (!session.isP2P) {\n            conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n        }\n    });\n\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_JOIN_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONNECTION_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONNECTION_ERROR);\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.NOT_ALLOWED_ERROR);\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_MEMBERS_ONLY_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.MEMBERS_ONLY_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_MAX_USERS_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONFERENCE_MAX_USERS);\n    chatRoom.addListener(XMPPEvents.ROOM_MAX_USERS_ERROR, () => conference.leave());\n\n    this.chatRoomForwarder.forward(XMPPEvents.PASSWORD_REQUIRED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.PASSWORD_REQUIRED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.AUTHENTICATION_REQUIRED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.AUTHENTICATION_REQUIRED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.BRIDGE_DOWN,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.VIDEOBRIDGE_NOT_AVAILABLE);\n    chatRoom.addListener(\n        XMPPEvents.BRIDGE_DOWN,\n        () => Statistics.sendAnalytics(createBridgeDownEvent()));\n\n    chatRoom.addListener(XMPPEvents.CONNECTION_RESTARTED,\n        jingleSession => {\n            conference._onConferenceRestarted(jingleSession);\n        });\n\n    this.chatRoomForwarder.forward(XMPPEvents.RESERVATION_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.RESERVATION_ERROR);\n    chatRoom.addListener(XMPPEvents.RESERVATION_ERROR, () => conference.leave());\n\n    this.chatRoomForwarder.forward(XMPPEvents.GRACEFUL_SHUTDOWN,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.GRACEFUL_SHUTDOWN);\n\n    chatRoom.addListener(XMPPEvents.CONNECTION_ICE_FAILED,\n        jingleSession => {\n            conference._onIceConnectionFailed(jingleSession);\n        });\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_DESTROYED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONFERENCE_DESTROYED);\n    chatRoom.addListener(XMPPEvents.MUC_DESTROYED, () => conference.leave());\n\n    this.chatRoomForwarder.forward(XMPPEvents.CHAT_ERROR_RECEIVED,\n        JitsiConferenceEvents.CONFERENCE_ERROR,\n        JitsiConferenceErrors.CHAT_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.SETTINGS_ERROR_RECEIVED,\n        JitsiConferenceEvents.CONFERENCE_ERROR,\n        JitsiConferenceErrors.SETTINGS_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.FOCUS_DISCONNECTED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.FOCUS_DISCONNECTED);\n\n    chatRoom.addListener(XMPPEvents.FOCUS_LEFT,\n        () => {\n            Statistics.sendAnalytics(createFocusLeftEvent());\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.CONFERENCE_FAILED,\n                JitsiConferenceErrors.FOCUS_LEFT);\n        });\n\n    chatRoom.addListener(XMPPEvents.SESSION_ACCEPT_TIMEOUT,\n        jingleSession => {\n            Statistics.sendAnalyticsAndLog(\n                createJingleEvent(\n                    ACTION_JINGLE_SA_TIMEOUT,\n                    { p2p: jingleSession.isP2P }));\n        });\n\n    chatRoom.addListener(XMPPEvents.RECORDER_STATE_CHANGED,\n        (session, jid) => {\n\n            if (jid) {\n                const resource = Strophe.getResourceFromJid(jid);\n                const participant = conference.getParticipantById(resource) || resource;\n\n                if (session.getStatus() === 'off') {\n                    session.setTerminator(participant);\n                } else if (session.getStatus() === 'on') {\n                    session.setInitiator(participant);\n                }\n            }\n\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.RECORDER_STATE_CHANGED,\n                session);\n        });\n\n    this.chatRoomForwarder.forward(XMPPEvents.TRANSCRIPTION_STATUS_CHANGED,\n        JitsiConferenceEvents.TRANSCRIPTION_STATUS_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.VIDEO_SIP_GW_AVAILABILITY_CHANGED,\n        JitsiConferenceEvents.VIDEO_SIP_GW_AVAILABILITY_CHANGED);\n\n    this.chatRoomForwarder.forward(\n        XMPPEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED,\n        JitsiConferenceEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.PHONE_NUMBER_CHANGED,\n        JitsiConferenceEvents.PHONE_NUMBER_CHANGED);\n\n    chatRoom.setParticipantPropertyListener((node, from) => {\n        const participant = conference.getParticipantById(from);\n\n        if (!participant) {\n            return;\n        }\n\n        participant.setProperty(\n            node.tagName.substring('jitsi_participant_'.length),\n            node.value);\n    });\n\n    chatRoom.addListener(XMPPEvents.KICKED,\n        conference.onMemberKicked.bind(conference));\n    chatRoom.addListener(XMPPEvents.SUSPEND_DETECTED,\n        conference.onSuspendDetected.bind(conference));\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOCK_CHANGED,\n        JitsiConferenceEvents.LOCK_STATE_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_MEMBERS_ONLY_CHANGED,\n        JitsiConferenceEvents.MEMBERS_ONLY_CHANGED);\n\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_JOINED,\n        conference.onMemberJoined.bind(conference));\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOBBY_MEMBER_JOINED,\n        JitsiConferenceEvents.LOBBY_USER_JOINED);\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOBBY_MEMBER_UPDATED,\n        JitsiConferenceEvents.LOBBY_USER_UPDATED);\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOBBY_MEMBER_LEFT,\n        JitsiConferenceEvents.LOBBY_USER_LEFT);\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_BOT_TYPE_CHANGED,\n        conference._onMemberBotTypeChanged.bind(conference));\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_LEFT,\n        conference.onMemberLeft.bind(conference));\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LEFT,\n        JitsiConferenceEvents.CONFERENCE_LEFT);\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_DENIED_ACCESS,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONFERENCE_ACCESS_DENIED);\n\n    chatRoom.addListener(XMPPEvents.DISPLAY_NAME_CHANGED,\n        conference.onDisplayNameChanged.bind(conference));\n\n    chatRoom.addListener(XMPPEvents.LOCAL_ROLE_CHANGED, role => {\n        conference.onLocalRoleChanged(role);\n\n        // log all events for the recorder operated by the moderator\n        if (conference.statistics && conference.isModerator()) {\n            conference.on(JitsiConferenceEvents.RECORDER_STATE_CHANGED,\n                recorderSession => {\n                    const logObject = {\n                        error: recorderSession.getError(),\n                        id: 'recorder_status',\n                        status: recorderSession.getStatus()\n                    };\n\n                    Statistics.sendLog(JSON.stringify(logObject));\n                });\n        }\n    });\n\n    chatRoom.addListener(XMPPEvents.MUC_ROLE_CHANGED,\n        conference.onUserRoleChanged.bind(conference));\n\n    chatRoom.addListener(AuthenticationEvents.IDENTITY_UPDATED,\n        (authEnabled, authIdentity) => {\n            conference.authEnabled = authEnabled;\n            conference.authIdentity = authIdentity;\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.AUTH_STATUS_CHANGED, authEnabled,\n                authIdentity);\n        });\n\n    chatRoom.addListener(\n        XMPPEvents.MESSAGE_RECEIVED,\n\n        // eslint-disable-next-line max-params\n        (jid, txt, myJid, ts) => {\n            const id = Strophe.getResourceFromJid(jid);\n            if (txt.indexOf(\"Transcript\") !== -1 || txt.indexOf(\"Fellow Jitser\") !== -1) {\n                return;\n            }\n          \n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.MESSAGE_RECEIVED,\n                id, txt, ts);\n        });\n\n    chatRoom.addListener(\n        XMPPEvents.PRIVATE_MESSAGE_RECEIVED,\n\n        // eslint-disable-next-line max-params\n        (jid, txt, myJid, ts) => {\n            const id = Strophe.getResourceFromJid(jid);\n\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.PRIVATE_MESSAGE_RECEIVED,\n                id, txt, ts);\n        });\n\n    chatRoom.addListener(XMPPEvents.PRESENCE_STATUS,\n        (jid, status) => {\n            const id = Strophe.getResourceFromJid(jid);\n            const participant = conference.getParticipantById(id);\n\n            if (!participant || participant._status === status) {\n                return;\n            }\n            participant._status = status;\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.USER_STATUS_CHANGED, id, status);\n        });\n\n    chatRoom.addListener(XMPPEvents.JSON_MESSAGE_RECEIVED,\n        (from, payload) => {\n            const id = Strophe.getResourceFromJid(from);\n            const participant = conference.getParticipantById(id);\n\n            if (participant) {\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n                    participant, payload);\n            } else {\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.NON_PARTICIPANT_MESSAGE_RECEIVED,\n                    id, payload);\n            }\n        });\n\n    chatRoom.addPresenceListener('startmuted', (data, from) => {\n        let isModerator = false;\n\n        if (conference.myUserId() === from && conference.isModerator()) {\n            isModerator = true;\n        } else {\n            const participant = conference.getParticipantById(from);\n\n            if (participant && participant.isModerator()) {\n                isModerator = true;\n            }\n        }\n\n        if (!isModerator) {\n            return;\n        }\n\n        const startAudioMuted = data.attributes.audio === 'true';\n        const startVideoMuted = data.attributes.video === 'true';\n\n        let updated = false;\n\n        if (startAudioMuted !== conference.startMutedPolicy.audio) {\n            conference.startMutedPolicy.audio = startAudioMuted;\n            updated = true;\n        }\n\n        if (startVideoMuted !== conference.startMutedPolicy.video) {\n            conference.startMutedPolicy.video = startVideoMuted;\n            updated = true;\n        }\n\n        if (updated) {\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.START_MUTED_POLICY_CHANGED,\n                conference.startMutedPolicy\n            );\n        }\n    });\n\n    if (conference.statistics) {\n        // FIXME ICE related events should end up in RTCEvents eventually\n        chatRoom.addListener(XMPPEvents.CONNECTION_ICE_FAILED,\n            session => {\n                conference.statistics.sendIceConnectionFailedEvent(\n                    session.peerconnection);\n            });\n\n        // FIXME XMPPEvents.ADD_ICE_CANDIDATE_FAILED is never emitted\n        chatRoom.addListener(XMPPEvents.ADD_ICE_CANDIDATE_FAILED,\n            (e, pc) => {\n                conference.statistics.sendAddIceCandidateFailed(e, pc);\n            });\n    }\n\n    // Breakout rooms.\n    this.chatRoomForwarder.forward(XMPPEvents.BREAKOUT_ROOMS_MOVE_TO_ROOM,\n        JitsiConferenceEvents.BREAKOUT_ROOMS_MOVE_TO_ROOM);\n    this.chatRoomForwarder.forward(XMPPEvents.BREAKOUT_ROOMS_UPDATED,\n        JitsiConferenceEvents.BREAKOUT_ROOMS_UPDATED);\n};\n\n/**\n * Setups event listeners related to conference.rtc\n */\nJitsiConferenceEventManager.prototype.setupRTCListeners = function() {\n    const conference = this.conference;\n    const rtc = conference.rtc;\n\n    rtc.addListener(\n        RTCEvents.REMOTE_TRACK_ADDED,\n        conference.onRemoteTrackAdded.bind(conference));\n\n    rtc.addListener(\n        RTCEvents.REMOTE_TRACK_REMOVED,\n        conference.onRemoteTrackRemoved.bind(conference));\n\n    rtc.addListener(RTCEvents.DOMINANT_SPEAKER_CHANGED,\n        (dominant, previous) => {\n            if (conference.participants[dominant]?._hidden) {\n                return;\n            } \n            if (conference.lastDominantSpeaker !== dominant && conference.room) {\n                conference.lastDominantSpeaker = dominant;\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.DOMINANT_SPEAKER_CHANGED, dominant, previous);\n\n                if (previous && previous.length) {\n                    const speakerList = previous.slice(0);\n\n                    // Add the dominant speaker to the top of the list (exclude self).\n                    if (conference.myUserId !== dominant) {\n                        speakerList.splice(0, 0, dominant);\n                    }\n\n                    // Trim the list to the top 5 speakers only.\n                    if (speakerList.length > SPEAKERS_AUDIO_LEVELS) {\n                        speakerList.splice(SPEAKERS_AUDIO_LEVELS, speakerList.length - SPEAKERS_AUDIO_LEVELS);\n                    }\n                    conference.statistics && conference.statistics.setSpeakerList(speakerList);\n                }\n                if (conference.statistics && conference.myUserId() === dominant) {\n                    // We are the new dominant speaker.\n                    conference.statistics.sendDominantSpeakerEvent(conference.room.roomjid);\n                }\n            }\n        });\n\n    rtc.addListener(RTCEvents.DATA_CHANNEL_OPEN, () => {\n        const now = window.performance.now();\n        const key = 'data.channel.opened';\n\n        // TODO: Move all of the 'connectionTimes' logic to its own module.\n        logger.log(`(TIME) ${key}:\\t`, now);\n        conference.room.connectionTimes[key] = now;\n        Statistics.sendAnalytics(\n            createConnectionStageReachedEvent(key, { value: now }));\n\n        conference.eventEmitter.emit(JitsiConferenceEvents.DATA_CHANNEL_OPENED);\n    });\n\n    rtc.addListener(RTCEvents.ENDPOINT_MESSAGE_RECEIVED,\n        (from, payload) => {\n            const participant = conference.getParticipantById(from);\n\n            if (participant) {\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n                    participant, payload);\n            } else {\n                logger.warn(\n                    'Ignored ENDPOINT_MESSAGE_RECEIVED for not existing '\n                        + `participant: ${from}`,\n                    payload);\n            }\n        });\n\n    rtc.addListener(RTCEvents.ENDPOINT_STATS_RECEIVED,\n        (from, payload) => {\n            const participant = conference.getParticipantById(from);\n\n            if (participant) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.ENDPOINT_STATS_RECEIVED, participant, payload);\n            } else {\n                logger.warn(`Ignoring ENDPOINT_STATS_RECEIVED for a non-existant participant: ${from}`);\n            }\n        });\n\n    rtc.addListener(RTCEvents.LOCAL_UFRAG_CHANGED,\n        (tpc, ufrag) => {\n            if (!tpc.isP2P) {\n                Statistics.sendLog(\n                    JSON.stringify({\n                        id: 'local_ufrag',\n                        value: ufrag\n                    }));\n            }\n        });\n    rtc.addListener(RTCEvents.REMOTE_UFRAG_CHANGED,\n        (tpc, ufrag) => {\n            if (!tpc.isP2P) {\n                Statistics.sendLog(\n                    JSON.stringify({\n                        id: 'remote_ufrag',\n                        value: ufrag\n                    }));\n            }\n        });\n\n    rtc.addListener(RTCEvents.CREATE_ANSWER_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendCreateAnswerFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.CREATE_OFFER_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendCreateOfferFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.SET_LOCAL_DESCRIPTION_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendSetLocalDescFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.SET_REMOTE_DESCRIPTION_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendSetRemoteDescFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.LOCAL_TRACK_SSRC_UPDATED,\n        (track, ssrc) => {\n            // when starting screen sharing, the track is created and when\n            // we do set local description and we process the ssrc we\n            // will be notified for it and we will report it with the event\n            // for screen sharing\n            if (track.isVideoTrack() && track.videoType === VideoType.DESKTOP) {\n                conference.statistics.sendScreenSharingEvent(true, ssrc);\n            }\n        });\n};\n\n/**\n * Removes event listeners related to conference.xmpp\n */\nJitsiConferenceEventManager.prototype.removeXMPPListeners = function() {\n    const conference = this.conference;\n\n    Object.keys(this.xmppListeners).forEach(eventName => {\n        conference.xmpp.removeListener(\n            eventName,\n            this.xmppListeners[eventName]);\n    });\n    this.xmppListeners = {};\n};\n\n\n/**\n * Setups event listeners related to conference.xmpp\n */\nJitsiConferenceEventManager.prototype.setupXMPPListeners = function() {\n    const conference = this.conference;\n\n    this._addConferenceXMPPListener(\n        XMPPEvents.CALL_INCOMING,\n        conference.onIncomingCall.bind(conference));\n    this._addConferenceXMPPListener(\n        XMPPEvents.CALL_ACCEPTED,\n        conference.onCallAccepted.bind(conference));\n    this._addConferenceXMPPListener(\n        XMPPEvents.TRANSPORT_INFO,\n        conference.onTransportInfo.bind(conference));\n    this._addConferenceXMPPListener(\n        XMPPEvents.CALL_ENDED,\n        conference.onCallEnded.bind(conference));\n\n    this._addConferenceXMPPListener(XMPPEvents.START_MUTED_FROM_FOCUS,\n        (audioMuted, videoMuted) => {\n            if (conference.options.config.ignoreStartMuted) {\n                return;\n            }\n\n            conference.startAudioMuted = audioMuted;\n            conference.startVideoMuted = videoMuted;\n\n            if (audioMuted) {\n                conference.isMutedByFocus = true;\n            }\n\n            if (videoMuted) {\n                conference.isVideoMutedByFocus = true;\n            }\n\n            // mute existing local tracks because this is initial mute from\n            // Jicofo\n            conference.getLocalTracks().forEach(track => {\n                switch (track.getType()) {\n                case MediaType.AUDIO:\n                    conference.startAudioMuted && track.mute();\n                    break;\n                case MediaType.VIDEO:\n                    conference.startVideoMuted && track.mute();\n                    break;\n                }\n            });\n\n            conference.eventEmitter.emit(JitsiConferenceEvents.STARTED_MUTED);\n        });\n\n    this._addConferenceXMPPListener(XMPPEvents.CONFERENCE_TIMESTAMP_RECEIVED,\n        createdTimestamp => {\n            conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_CREATED_TIMESTAMP, createdTimestamp);\n        });\n\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_CHANGED,\n        (value, mediaType, actorJid) => {\n            const actorParticipant = conference.getParticipants().find(p => p.getJid() === actorJid);\n\n            conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_CHANGED, {\n                enabled: value,\n                mediaType,\n                actor: actorParticipant\n            });\n        });\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_PARTICIPANT_APPROVED,\n        (mediaType, jid) => {\n            const participant = conference.getParticipantById(Strophe.getResourceFromJid(jid));\n\n            if (participant) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_PARTICIPANT_APPROVED, {\n                    participant,\n                    mediaType\n                });\n            }\n        });\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_PARTICIPANT_REJECTED,\n        (mediaType, jid) => {\n            const participant = conference.getParticipantById(Strophe.getResourceFromJid(jid));\n\n            if (participant) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_PARTICIPANT_REJECTED, {\n                    participant,\n                    mediaType\n                });\n            }\n        });\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_APPROVED,\n        value => conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_APPROVED, { mediaType: value }));\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_REJECTED,\n        value => {\n            conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_REJECTED, { mediaType: value });\n        });\n};\n\n/**\n * Add XMPP listener and save its reference for remove on leave conference.\n */\nJitsiConferenceEventManager.prototype._addConferenceXMPPListener = function(\n        eventName, listener) {\n    this.xmppListeners[eventName] = listener;\n    this.conference.xmpp.addListener(eventName, listener);\n};\n\n/**\n * Setups event listeners related to conference.statistics\n */\nJitsiConferenceEventManager.prototype.setupStatisticsListeners = function() {\n    const conference = this.conference;\n\n    if (!conference.statistics) {\n        return;\n    }\n\n    /* eslint-disable max-params */\n    conference.statistics.addAudioLevelListener((tpc, ssrc, level, isLocal) => {\n        conference.rtc.setAudioLevel(tpc, ssrc, level, isLocal);\n    });\n\n    /* eslint-enable max-params */\n\n    // Forward the \"before stats disposed\" event\n    conference.statistics.addBeforeDisposedListener(() => {\n        conference.eventEmitter.emit(\n            JitsiConferenceEvents.BEFORE_STATISTICS_DISPOSED);\n    });\n\n    // if we are in startSilent mode we will not be sending/receiving so nothing to detect\n    if (!conference.options.config.startSilent) {\n        conference.statistics.addByteSentStatsListener((tpc, stats) => {\n            conference.getLocalTracks(MediaType.AUDIO).forEach(track => {\n                const ssrc = tpc.getLocalSSRC(track);\n\n                if (!ssrc || !stats.hasOwnProperty(ssrc)) {\n                    return;\n                }\n\n                track.onByteSentStatsReceived(tpc, stats[ssrc]);\n            });\n        });\n    }\n};\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport { createParticipantConnectionStatusEvent } from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\nimport Statistics from '../statistics/statistics';\n\nconst logger = getLogger(__filename);\n\n/**\n * Default value of 500 milliseconds for {@link ParticipantConnectionStatus.outOfLastNTimeout}.\n *\n * @type {number}\n */\nconst DEFAULT_NOT_IN_LAST_N_TIMEOUT = 500;\n\n/**\n * Default value of 2500 milliseconds for {@link ParticipantConnectionStatus.p2pRtcMuteTimeout}.\n */\nconst DEFAULT_P2P_RTC_MUTE_TIMEOUT = 2500;\n\n/**\n * Default value of 10000 milliseconds for {@link ParticipantConnectionStatus.rtcMuteTimeout}.\n *\n * @type {number}\n */\nconst DEFAULT_RTC_MUTE_TIMEOUT = 10000;\n\n/**\n * The time to wait a track to be restored. Track which was out of lastN\n * should be inactive and when entering lastN it becomes restoring and when\n * data is received from bridge it will become active, but if no data is\n * received for some time we set status of that participant connection to\n * interrupted.\n * @type {number}\n */\nconst DEFAULT_RESTORING_TIMEOUT = 10000;\n\n/**\n * Participant connection statuses.\n *\n * @type {{\n *      ACTIVE: string,\n *      INACTIVE: string,\n *      INTERRUPTED: string,\n *      RESTORING: string\n * }}\n */\nexport const ParticipantConnectionStatus = {\n    /**\n     * Status indicating that connection is currently active.\n     */\n    ACTIVE: 'active',\n\n    /**\n     * Status indicating that connection is currently inactive.\n     * Inactive means the connection was stopped on purpose from the bridge,\n     * like exiting lastN or adaptivity decided to drop video because of not\n     * enough bandwidth.\n     */\n    INACTIVE: 'inactive',\n\n    /**\n     * Status indicating that connection is currently interrupted.\n     */\n    INTERRUPTED: 'interrupted',\n\n    /**\n     * Status indicating that connection is currently restoring.\n     */\n    RESTORING: 'restoring'\n};\n\n/**\n * Class is responsible for emitting\n * JitsiConferenceEvents.PARTICIPANT_CONN_STATUS_CHANGED events.\n */\nexport default class ParticipantConnectionStatusHandler {\n    /* eslint-disable max-params*/\n    /**\n     * Calculates the new {@link ParticipantConnectionStatus} based on\n     * the values given for some specific remote user. It is assumed that\n     * the conference is currently in the JVB mode (in contrary to the P2P mode)\n     * @param {boolean} isConnectionActiveByJvb true if the JVB did not get any\n     * data from the user for the last 15 seconds.\n     * @param {boolean} isInLastN indicates whether the user is in the last N\n     * set. When set to false it means that JVB is not sending any video for\n     * the user.\n     * @param {boolean} isRestoringTimedout if true it means that the user has\n     * been outside of last N too long to be considered\n     * {@link ParticipantConnectionStatus.RESTORING}.\n     * @param {boolean} isVideoMuted true if the user is video muted and we\n     * should not expect to receive any video.\n     * @param {boolean} isVideoTrackFrozen if the current browser support video\n     * frozen detection then it will be set to true when the video track is\n     * frozen. If the current browser does not support frozen detection the it's\n     * always false.\n     * @return {ParticipantConnectionStatus} the new connection status for\n     * the user for whom the values above were provided.\n     * @private\n     */\n    static _getNewStateForJvbMode(\n            isConnectionActiveByJvb,\n            isInLastN,\n            isRestoringTimedout,\n            isVideoMuted,\n            isVideoTrackFrozen) {\n        if (!isConnectionActiveByJvb) {\n            // when there is a connection problem signaled from jvb\n            // it means no media was flowing for at least 15secs, so both audio\n            // and video are most likely interrupted\n            return ParticipantConnectionStatus.INTERRUPTED;\n        } else if (isVideoMuted) {\n            // If the connection is active according to JVB and the user is\n            // video muted there is no way for the connection to be inactive,\n            // because the detection logic below only makes sense for video.\n            return ParticipantConnectionStatus.ACTIVE;\n        }\n\n        // Logic when isVideoTrackFrozen is supported\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n            if (!isVideoTrackFrozen) {\n                // If the video is playing we're good\n                return ParticipantConnectionStatus.ACTIVE;\n            } else if (isInLastN) {\n                return isRestoringTimedout\n                    ? ParticipantConnectionStatus.INTERRUPTED\n                    : ParticipantConnectionStatus.RESTORING;\n            }\n\n            return ParticipantConnectionStatus.INACTIVE;\n        }\n\n        // Because this browser is incapable of detecting frozen video we must\n        // rely on the lastN value\n        return isInLastN\n            ? ParticipantConnectionStatus.ACTIVE\n            : ParticipantConnectionStatus.INACTIVE;\n    }\n\n    /* eslint-enable max-params*/\n\n    /**\n     * In P2P mode we don't care about any values coming from the JVB and\n     * the connection status can be only active or interrupted.\n     * @param {boolean} isVideoMuted the user if video muted\n     * @param {boolean} isVideoTrackFrozen true if the video track for\n     * the remote user is currently frozen. If the current browser does not\n     * support video frozen detection then it's always false.\n     * @return {ParticipantConnectionStatus}\n     * @private\n     */\n    static _getNewStateForP2PMode(isVideoMuted, isVideoTrackFrozen) {\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            // There's no way to detect problems in P2P when there's no video\n            // track frozen detection...\n            return ParticipantConnectionStatus.ACTIVE;\n        }\n\n        return isVideoMuted || !isVideoTrackFrozen\n            ? ParticipantConnectionStatus.ACTIVE\n            : ParticipantConnectionStatus.INTERRUPTED;\n    }\n\n    /**\n     * Creates new instance of <tt>ParticipantConnectionStatus</tt>.\n     *\n     * @constructor\n     * @param {RTC} rtc the RTC service instance\n     * @param {JitsiConference} conference parent conference instance\n     * @param {Object} options\n     * @param {number} [options.p2pRtcMuteTimeout=2500] custom value for\n     * {@link ParticipantConnectionStatus.p2pRtcMuteTimeout}.\n     * @param {number} [options.rtcMuteTimeout=10000] custom value for\n     * {@link ParticipantConnectionStatus.rtcMuteTimeout}.\n     * @param {number} [options.outOfLastNTimeout=500] custom value for\n     * {@link ParticipantConnectionStatus.outOfLastNTimeout}.\n     */\n    constructor(rtc, conference, options) {\n        this.rtc = rtc;\n        this.conference = conference;\n\n        /**\n         * A map of the \"endpoint ID\"(which corresponds to the resource part\n         * of MUC JID(nickname)) to the timeout callback IDs scheduled using\n         * window.setTimeout.\n         * @type {Object.<string, number>}\n         */\n        this.trackTimers = {};\n\n        /**\n         * This map holds the endpoint connection status received from the JVB\n         * (as it might be different than the one stored in JitsiParticipant).\n         * Required for getting back in sync when remote video track is removed.\n         * @type {Object.<string, boolean>}\n         */\n        this.connStatusFromJvb = { };\n\n        /**\n         * If video track frozen detection through RTC mute event is supported,\n         * we wait some time until video track is considered frozen. But because\n         * when the user falls out of last N it is expected for the video to\n         * freeze this timeout must be significantly reduced in \"out of last N\"\n         * case.\n         *\n         * Basically this value is used instead of {@link rtcMuteTimeout} when\n         * user is not in last N.\n         * @type {number}\n         */\n        this.outOfLastNTimeout\n            = typeof options.outOfLastNTimeout === 'number'\n                ? options.outOfLastNTimeout : DEFAULT_NOT_IN_LAST_N_TIMEOUT;\n\n        /**\n         * How long we are going to wait for the corresponding signaling mute event after the RTC video track muted\n         * event is fired on the Media stream, before the connection interrupted is fired. The default value is\n         * {@link DEFAULT_P2P_RTC_MUTE_TIMEOUT}.\n         *\n         * @type {number} amount of time in milliseconds.\n         */\n        this.p2pRtcMuteTimeout = typeof options.p2pRtcMuteTimeout === 'number'\n            ? options.p2pRtcMuteTimeout : DEFAULT_P2P_RTC_MUTE_TIMEOUT;\n\n        /**\n         * How long we're going to wait after the RTC video track muted event\n         * for the corresponding signalling mute event, before the connection\n         * interrupted is fired. The default value is\n         * {@link DEFAULT_RTC_MUTE_TIMEOUT}.\n         *\n         * @type {number} amount of time in milliseconds\n         */\n        this.rtcMuteTimeout\n            = typeof options.rtcMuteTimeout === 'number'\n                ? options.rtcMuteTimeout : DEFAULT_RTC_MUTE_TIMEOUT;\n\n        /**\n         * This map holds a timestamp indicating  when participant's video track\n         * was RTC muted (it is assumed that each participant can have only 1\n         * video track at a time). The purpose of storing the timestamp is to\n         * avoid the transition to disconnected status in case of legitimate\n         * video mute operation where the signalling video muted event can\n         * arrive shortly after RTC muted event.\n         *\n         * The key is participant's ID which is the same as endpoint id in\n         * the Colibri conference allocated on the JVB.\n         *\n         * The value is a timestamp measured in milliseconds obtained with\n         * <tt>Date.now()</tt>.\n         *\n         * FIXME merge this logic with NO_DATA_FROM_SOURCE event\n         *       implemented in JitsiLocalTrack by extending the event to\n         *       the remote track and allowing to set different timeout for\n         *       local and remote tracks.\n         *\n         * @type {Object.<string, number>}\n         */\n        this.rtcMutedTimestamp = { };\n        logger.info(`RtcMuteTimeout set to: ${this.rtcMuteTimeout}`);\n\n        /**\n         * This map holds the timestamps indicating when participant's video\n         * entered lastN set. Participants entering lastN will have connection\n         * status restoring and when we start receiving video will become\n         * active, but if video is not received for certain time\n         * {@link DEFAULT_RESTORING_TIMEOUT} that participant connection status\n         * will become interrupted.\n         *\n         * @type {Map<string, number>}\n         */\n        this.enteredLastNTimestamp = new Map();\n\n        /**\n         * A map of the \"endpoint ID\"(which corresponds to the resource part\n         * of MUC JID(nickname)) to the restoring timeout callback IDs\n         * scheduled using window.setTimeout.\n         *\n         * @type {Map<string, number>}\n         */\n        this.restoringTimers = new Map();\n\n        /**\n         * A map that holds the current connection status (along with all the internal events that happen\n         * while in that state).\n         *\n         * The goal is to send this information to the analytics backend for post-mortem analysis.\n         */\n        this.connectionStatusMap = new Map();\n    }\n\n    /**\n     * Gets the video frozen timeout for given user.\n     * @param {string} id endpoint/participant ID\n     * @return {number} how long are we going to wait since RTC video muted\n     * even, before a video track is considered frozen.\n     * @private\n     */\n    _getVideoFrozenTimeout(id) {\n        return this.rtc.isInLastN(id)\n            ? this.rtcMuteTimeout\n            : this.conference.isP2PActive() ? this.p2pRtcMuteTimeout : this.outOfLastNTimeout;\n    }\n\n    /**\n     * Initializes <tt>ParticipantConnectionStatus</tt> and bind required event\n     * listeners.\n     */\n    init() {\n\n        this._onEndpointConnStatusChanged\n            = this.onEndpointConnStatusChanged.bind(this);\n\n        this.rtc.addListener(\n            RTCEvents.ENDPOINT_CONN_STATUS_CHANGED,\n            this._onEndpointConnStatusChanged);\n\n        // Handles P2P status changes\n        this._onP2PStatus = this.refreshConnectionStatusForAll.bind(this);\n        this.conference.on(JitsiConferenceEvents.P2P_STATUS, this._onP2PStatus);\n\n        // Used to send analytics events for the participant that left the call.\n        this._onUserLeft = this.onUserLeft.bind(this);\n        this.conference.on(JitsiConferenceEvents.USER_LEFT, this._onUserLeft);\n\n        // On some browsers MediaStreamTrack trigger \"onmute\"/\"onunmute\"\n        // events for video type tracks when they stop receiving data which is\n        // often a sign that remote user is having connectivity issues\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n\n            this._onTrackRtcMuted = this.onTrackRtcMuted.bind(this);\n            this.rtc.addListener(\n                RTCEvents.REMOTE_TRACK_MUTE, this._onTrackRtcMuted);\n\n            this._onTrackRtcUnmuted = this.onTrackRtcUnmuted.bind(this);\n            this.rtc.addListener(\n                RTCEvents.REMOTE_TRACK_UNMUTE, this._onTrackRtcUnmuted);\n\n            // Track added/removed listeners are used to bind \"mute\"/\"unmute\"\n            // event handlers\n            this._onRemoteTrackAdded = this.onRemoteTrackAdded.bind(this);\n            this.conference.on(\n                JitsiConferenceEvents.TRACK_ADDED,\n                this._onRemoteTrackAdded);\n\n            this._onRemoteTrackRemoved = this.onRemoteTrackRemoved.bind(this);\n            this.conference.on(\n                JitsiConferenceEvents.TRACK_REMOVED,\n                this._onRemoteTrackRemoved);\n\n            // Listened which will be bound to JitsiRemoteTrack to listen for\n            // signalling mute/unmute events.\n            this._onSignallingMuteChanged\n                = this.onSignallingMuteChanged.bind(this);\n\n            // Used to send an analytics event when the video type changes.\n            this._onTrackVideoTypeChanged\n                = this.onTrackVideoTypeChanged.bind(this);\n        }\n\n        this._onLastNChanged = this._onLastNChanged.bind(this);\n        this.conference.on(\n            JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED,\n            this._onLastNChanged);\n\n        this._onLastNValueChanged\n            = this.refreshConnectionStatusForAll.bind(this);\n        this.rtc.on(\n            RTCEvents.LASTN_VALUE_CHANGED, this._onLastNValueChanged);\n    }\n\n    /**\n     * Removes all event listeners and disposes of all resources held by this\n     * instance.\n     */\n    dispose() {\n\n        this.rtc.removeListener(\n            RTCEvents.ENDPOINT_CONN_STATUS_CHANGED,\n            this._onEndpointConnStatusChanged);\n\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n            this.rtc.removeListener(\n                RTCEvents.REMOTE_TRACK_MUTE,\n                this._onTrackRtcMuted);\n            this.rtc.removeListener(\n                RTCEvents.REMOTE_TRACK_UNMUTE,\n                this._onTrackRtcUnmuted);\n\n            this.conference.off(\n                JitsiConferenceEvents.TRACK_ADDED,\n                this._onRemoteTrackAdded);\n            this.conference.off(\n                JitsiConferenceEvents.TRACK_REMOVED,\n                this._onRemoteTrackRemoved);\n        }\n\n        this.conference.off(\n            JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED,\n            this._onLastNChanged);\n\n        this.rtc.removeListener(\n            RTCEvents.LASTN_VALUE_CHANGED, this._onLastNValueChanged);\n\n        this.conference.off(\n            JitsiConferenceEvents.P2P_STATUS, this._onP2PStatus);\n\n        this.conference.off(\n            JitsiConferenceEvents.USER_LEFT, this._onUserLeft);\n\n        const participantIds = Object.keys(this.trackTimers);\n\n        for (const participantId of participantIds) {\n            this.clearTimeout(participantId);\n            this.clearRtcMutedTimestamp(participantId);\n        }\n\n        for (const id in this.connectionStatusMap) {\n            if (this.connectionStatusMap.hasOwnProperty(id)) {\n                this.onUserLeft(id);\n            }\n        }\n\n        // Clear RTC connection status cache\n        this.connStatusFromJvb = {};\n    }\n\n    /**\n     * Handles RTCEvents.ENDPOINT_CONN_STATUS_CHANGED triggered when we receive\n     * notification over the data channel from the bridge about endpoint's\n     * connection status update.\n     * @param {string} endpointId - The endpoint ID(MUC nickname/resource JID).\n     * @param {boolean} isActive - true if the connection is OK or false otherwise.\n     */\n    onEndpointConnStatusChanged(endpointId, isActive) {\n\n        logger.debug(\n            `Detector RTCEvents.ENDPOINT_CONN_STATUS_CHANGED(${Date.now()}): ${\n                endpointId}: ${isActive}`);\n\n        // Filter out events for the local JID for now\n        if (endpointId !== this.conference.myUserId()) {\n            // Store the status received over the data channels\n            this.connStatusFromJvb[endpointId] = isActive;\n            this.figureOutConnectionStatus(endpointId);\n        }\n    }\n\n    /**\n     * Changes connection status.\n     * @param {JitsiParticipant} participant\n     * @param newStatus\n     */\n    _changeConnectionStatus(participant, newStatus) {\n        if (participant.getConnectionStatus() !== newStatus) {\n\n            const endpointId = participant.getId();\n\n            participant._setConnectionStatus(newStatus);\n\n            logger.debug(\n                `Emit endpoint conn status(${Date.now()}) ${endpointId}: ${\n                    newStatus}`);\n\n            // Log the event on CallStats\n            Statistics.sendLog(\n                JSON.stringify({\n                    id: 'peer.conn.status',\n                    participant: endpointId,\n                    status: newStatus\n                }));\n\n\n            this.conference.eventEmitter.emit(\n                JitsiConferenceEvents.PARTICIPANT_CONN_STATUS_CHANGED,\n                endpointId, newStatus);\n        }\n    }\n\n    /**\n     * Reset the postponed \"connection interrupted\" event which was previously\n     * scheduled as a timeout on RTC 'onmute' event.\n     *\n     * @param {string} participantId - The participant for which the \"connection\n     * interrupted\" timeout was scheduled.\n     */\n    clearTimeout(participantId) {\n        if (this.trackTimers[participantId]) {\n            window.clearTimeout(this.trackTimers[participantId]);\n            this.trackTimers[participantId] = null;\n        }\n    }\n\n    /**\n     * Clears the timestamp of the RTC muted event for participant's video track\n     * @param {string} participantId the id of the conference participant which\n     * is the same as the Colibri endpoint ID of the video channel allocated for\n     * the user on the videobridge.\n     */\n    clearRtcMutedTimestamp(participantId) {\n        this.rtcMutedTimestamp[participantId] = null;\n    }\n\n    /**\n     * Bind signalling mute event listeners for video {JitsiRemoteTrack} when\n     * a new one is added to the conference.\n     *\n     * @param {JitsiTrack} remoteTrack - The {JitsiTrack} which is being added to\n     * the conference.\n     */\n    onRemoteTrackAdded(remoteTrack) {\n        if (!remoteTrack.isLocal()\n                && remoteTrack.getType() === MediaType.VIDEO) {\n\n            logger.debug(\n                `Detector on remote track added for: ${\n                    remoteTrack.getParticipantId()}`);\n\n            remoteTrack.on(\n                JitsiTrackEvents.TRACK_MUTE_CHANGED,\n                this._onSignallingMuteChanged);\n            remoteTrack.on(\n                JitsiTrackEvents.TRACK_VIDEOTYPE_CHANGED,\n                videoType => this._onTrackVideoTypeChanged(remoteTrack, videoType));\n        }\n    }\n\n    /**\n     * Removes all event listeners bound to the remote video track and clears\n     * any related timeouts.\n     *\n     * @param {JitsiRemoteTrack} remoteTrack - The remote track which is being\n     * removed from the conference.\n     */\n    onRemoteTrackRemoved(remoteTrack) {\n        if (!remoteTrack.isLocal()\n                && remoteTrack.getType() === MediaType.VIDEO) {\n\n            const endpointId = remoteTrack.getParticipantId();\n\n            logger.debug(`Detector on remote track removed: ${endpointId}`);\n\n            remoteTrack.off(\n                JitsiTrackEvents.TRACK_MUTE_CHANGED,\n                this._onSignallingMuteChanged);\n\n            this.clearTimeout(endpointId);\n            this.clearRtcMutedTimestamp(endpointId);\n\n            this.figureOutConnectionStatus(endpointId);\n        }\n    }\n\n    /**\n     * Checks if given participant's video is considered frozen.\n     * @param {JitsiParticipant} participant - The participant.\n     * @return {boolean} <tt>true</tt> if the video has frozen for given\n     * participant or <tt>false</tt> when it's either not considered frozen\n     * (yet) or if freeze detection is not supported by the current browser.\n     *\n     * FIXME merge this logic with NO_DATA_FROM_SOURCE event\n     *       implemented in JitsiLocalTrack by extending the event to\n     *       the remote track and allowing to set different timeout for\n     *       local and remote tracks.\n     *\n     */\n    isVideoTrackFrozen(participant) {\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            return false;\n        }\n\n        const id = participant.getId();\n        const hasAnyVideoRTCMuted = participant.hasAnyVideoTrackWebRTCMuted();\n        const rtcMutedTimestamp = this.rtcMutedTimestamp[id];\n        const timeout = this._getVideoFrozenTimeout(id);\n\n        return hasAnyVideoRTCMuted\n            && typeof rtcMutedTimestamp === 'number'\n            && (Date.now() - rtcMutedTimestamp) >= timeout;\n    }\n\n    /**\n     * Goes over every participant and updates connectivity status.\n     * Should be called when a parameter which affects all of the participants\n     * is changed (P2P for example).\n     */\n    refreshConnectionStatusForAll() {\n        const participants = this.conference.getParticipants();\n\n        for (const participant of participants) {\n            this.figureOutConnectionStatus(participant.getId());\n        }\n    }\n\n    /**\n     * Figures out (and updates) the current connectivity status for\n     * the participant identified by the given id.\n     *\n     * @param {string} id - The participant's id (MUC nickname or Colibri endpoint ID).\n     */\n    figureOutConnectionStatus(id) {\n        const participant = this.conference.getParticipantById(id);\n\n        if (!participant) {\n            // Probably the participant is no longer in the conference\n            // (at the time of writing this code, participant is\n            // detached from the conference and TRACK_REMOVED events are\n            // fired),\n            // so we don't care, but let's print a log message for debugging purposes.\n            logger.debug(`figure out conn status - no participant for: ${id}`);\n\n            return;\n        }\n\n        const inP2PMode = this.conference.isP2PActive();\n        const isRestoringTimedOut = this._isRestoringTimedout(id);\n        const audioOnlyMode = this.conference.getLastN() === 0;\n\n        // NOTE Overriding videoMuted to true for audioOnlyMode should disable\n        // any detection based on video playback or the last N.\n        const isVideoMuted = participant.isVideoMuted() || audioOnlyMode;\n        const isVideoTrackFrozen = this.isVideoTrackFrozen(participant);\n        const isInLastN = this.rtc.isInLastN(id);\n        let isConnActiveByJvb = this.connStatusFromJvb[id];\n\n        if (typeof isConnActiveByJvb !== 'boolean') {\n            // If no status was received from the JVB it means that it's active\n            // (the bridge does not send notification unless there is a problem)\n            isConnActiveByJvb = true;\n        }\n\n        const newState\n            = inP2PMode\n                ? ParticipantConnectionStatusHandler._getNewStateForP2PMode(\n                    isVideoMuted,\n                    isVideoTrackFrozen)\n                : ParticipantConnectionStatusHandler._getNewStateForJvbMode(\n                    isConnActiveByJvb,\n                    isInLastN,\n                    isRestoringTimedOut,\n                    isVideoMuted,\n                    isVideoTrackFrozen);\n\n        // if the new state is not restoring clear timers and timestamps\n        // that we use to track the restoring state\n        if (newState !== ParticipantConnectionStatus.RESTORING) {\n            this._clearRestoringTimer(id);\n        }\n\n        logger.debug(\n            `Figure out conn status for ${id}, is video muted: ${\n                isVideoMuted} is active(jvb): ${\n                isConnActiveByJvb} video track frozen: ${\n                isVideoTrackFrozen} p2p mode: ${\n                inP2PMode} is in last N: ${\n                isInLastN} currentStatus => newStatus: ${\n                participant.getConnectionStatus()} => ${newState}`);\n\n        const oldConnectionStatus = this.connectionStatusMap[id] || {};\n\n        // Send an analytics event (guard on either the p2p flag or the connection status has changed\n        // since the last time this code block run).\n        if (!('p2p' in oldConnectionStatus)\n            || !('connectionStatus' in oldConnectionStatus)\n            || oldConnectionStatus.p2p !== inP2PMode\n            || oldConnectionStatus.connectionStatus !== newState) {\n\n            const nowMs = Date.now();\n\n            this.maybeSendParticipantConnectionStatusEvent(id, nowMs);\n\n            this.connectionStatusMap[id] = {\n                ...oldConnectionStatus,\n                connectionStatus: newState,\n                p2p: inP2PMode,\n                startedMs: nowMs\n            };\n\n            // sometimes (always?) we're late to hook the TRACK_VIDEOTYPE_CHANGED event and the\n            // video type is not in oldConnectionStatus.\n            if (!('videoType' in this.connectionStatusMap[id])) {\n                const videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\n\n                if (Array.isArray(videoTracks) && videoTracks.length !== 0) {\n                    this.connectionStatusMap[id].videoType = videoTracks[0].videoType;\n                }\n            }\n        }\n        this._changeConnectionStatus(participant, newState);\n    }\n\n    /**\n     * Computes the duration of the current connection status for the participant with the specified id (i.e. 15 seconds\n     * in the INTERRUPTED state) and sends a participant connection status event.\n     * @param {string} id - The jid of the participant.\n     * @param {Number} nowMs - The current time (in millis).\n     * @returns {void}\n     */\n    maybeSendParticipantConnectionStatusEvent(id, nowMs) {\n        const participantConnectionStatus = this.connectionStatusMap[id];\n\n        if (participantConnectionStatus\n            && 'startedMs' in participantConnectionStatus\n            && 'videoType' in participantConnectionStatus\n            && 'connectionStatus' in participantConnectionStatus\n            && 'p2p' in participantConnectionStatus) {\n            participantConnectionStatus.value = nowMs - participantConnectionStatus.startedMs;\n            Statistics.sendAnalytics(\n                createParticipantConnectionStatusEvent(participantConnectionStatus));\n        }\n    }\n\n    /**\n     * On change in Last N set check all leaving and entering participants to\n     * change their corresponding statuses.\n     *\n     * @param {Array<string>} leavingLastN - The array of ids leaving lastN.\n     * @param {Array<string>} enteringLastN - The array of ids entering lastN.\n     * @private\n     */\n    _onLastNChanged(leavingLastN = [], enteringLastN = []) {\n        const now = Date.now();\n\n        logger.debug(`LastN endpoints changed leaving=${leavingLastN}, entering=${enteringLastN} at ${now}`);\n\n        // If the browser doesn't fire the mute/onmute events when the remote peer stops/starts sending media,\n        // calculate the connection status for all the endpoints since it won't get triggered automatically on\n        // the endpoint that has started/stopped receiving media.\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            this.refreshConnectionStatusForAll();\n        }\n\n        for (const id of leavingLastN) {\n            this.enteredLastNTimestamp.delete(id);\n            this._clearRestoringTimer(id);\n            browser.supportsVideoMuteOnConnInterrupted() && this.figureOutConnectionStatus(id);\n        }\n        for (const id of enteringLastN) {\n            // store the timestamp this id is entering lastN\n            this.enteredLastNTimestamp.set(id, now);\n            browser.supportsVideoMuteOnConnInterrupted() && this.figureOutConnectionStatus(id);\n        }\n    }\n\n    /**\n     * Clears the restoring timer for participant's video track and the\n     * timestamp for entering lastN.\n     *\n     * @param {string} participantId - The id of the conference participant which\n     * is the same as the Colibri endpoint ID of the video channel allocated for\n     * the user on the videobridge.\n     */\n    _clearRestoringTimer(participantId) {\n        const rTimer = this.restoringTimers.get(participantId);\n\n        if (rTimer) {\n            clearTimeout(rTimer);\n            this.restoringTimers.delete(participantId);\n        }\n    }\n\n    /**\n     * Checks whether a track had stayed enough in restoring state, compares\n     * current time and the time the track entered in lastN. If it hasn't\n     * timedout and there is no timer added, add new timer in order to give it\n     * more time to become active or mark it as interrupted on next check.\n     *\n     * @param {string} participantId - The id of the conference participant which\n     * is the same as the Colibri endpoint ID of the video channel allocated for\n     * the user on the videobridge.\n     * @returns {boolean} <tt>true</tt> if the track was in restoring state\n     * more than the timeout ({@link DEFAULT_RESTORING_TIMEOUT}.) in order to\n     * set its status to interrupted.\n     * @private\n     */\n    _isRestoringTimedout(participantId) {\n        const enteredLastNTimestamp\n            = this.enteredLastNTimestamp.get(participantId);\n\n        if (enteredLastNTimestamp\n            && (Date.now() - enteredLastNTimestamp)\n                >= DEFAULT_RESTORING_TIMEOUT) {\n            return true;\n        }\n\n        // still haven't reached timeout, if there is no timer scheduled,\n        // schedule one so we can track the restoring state and change it after\n        // reaching the timeout\n        const rTimer = this.restoringTimers.get(participantId);\n\n        if (!rTimer) {\n            this.restoringTimers.set(participantId, setTimeout(\n                () => this.figureOutConnectionStatus(participantId),\n                DEFAULT_RESTORING_TIMEOUT));\n        }\n\n        return false;\n    }\n\n    /**\n     * Sends a last/final participant connection status event for the participant that left the conference.\n     * @param {string} id - The id of the participant that left the conference.\n     * @returns {void}\n     */\n    onUserLeft(id) {\n        this.maybeSendParticipantConnectionStatusEvent(id, Date.now());\n        delete this.connectionStatusMap[id];\n    }\n\n    /**\n     * Handles RTC 'onmute' event for the video track.\n     *\n     * @param {JitsiRemoteTrack} track - The video track for which 'onmute' event\n     * will be processed.\n     */\n    onTrackRtcMuted(track) {\n        const participantId = track.getParticipantId();\n        const participant = this.conference.getParticipantById(participantId);\n\n        logger.debug(`Detector track RTC muted: ${participantId}`, Date.now());\n        if (!participant) {\n            logger.error(`No participant for id: ${participantId}`);\n\n            return;\n        }\n        this.rtcMutedTimestamp[participantId] = Date.now();\n        if (!participant.isVideoMuted()) {\n            // If the user is not muted according to the signalling we'll give\n            // it some time, before the connection interrupted event is\n            // triggered.\n            this.clearTimeout(participantId);\n\n            // The timeout is reduced when user is not in the last N\n            const timeout = this._getVideoFrozenTimeout(participantId);\n\n            this.trackTimers[participantId] = window.setTimeout(() => {\n                logger.debug(\n                    `Set RTC mute timeout for: ${participantId}\\\n                     of ${timeout} ms`);\n                this.clearTimeout(participantId);\n                this.figureOutConnectionStatus(participantId);\n            }, timeout);\n        }\n    }\n\n    /**\n     * Handles RTC 'onunmute' event for the video track.\n     *\n     * @param {JitsiRemoteTrack} track - The video track for which 'onunmute'\n     * event will be processed.\n     */\n    onTrackRtcUnmuted(track) {\n        const participantId = track.getParticipantId();\n\n        logger.debug(\n            `Detector track RTC unmuted: ${participantId}`, Date.now());\n\n        this.clearTimeout(participantId);\n        this.clearRtcMutedTimestamp(participantId);\n\n        this.figureOutConnectionStatus(participantId);\n    }\n\n    /**\n     * Here the signalling \"mute\"/\"unmute\" events are processed.\n     *\n     * @param {JitsiRemoteTrack} track - The remote video track for which\n     * the signalling mute/unmute event will be processed.\n     */\n    onSignallingMuteChanged(track) {\n        const participantId = track.getParticipantId();\n\n        logger.debug(\n            `Detector on track signalling mute changed: ${participantId}`,\n            track.isMuted());\n\n        this.figureOutConnectionStatus(participantId);\n    }\n\n    /**\n     * Sends a participant connection status event as a result of the video type\n     * changing.\n     * @param {JitsiRemoteTrack} track - The track.\n     * @param {VideoType} type - The video type.\n     * @returns {void}\n     */\n    onTrackVideoTypeChanged(track, type) {\n        const id = track.getParticipantId();\n        const nowMs = Date.now();\n\n        this.maybeSendParticipantConnectionStatusEvent(id, nowMs);\n\n        this.connectionStatusMap[id] = {\n            ...this.connectionStatusMap[id] || {},\n            videoType: type,\n            startedMs: nowMs\n        };\n    }\n}\n","\nimport { Strophe } from 'strophe.js';\n\n\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport { ParticipantConnectionStatus }\n    from './modules/connectivity/ParticipantConnectionStatus';\nimport { MediaType } from './service/RTC/MediaType';\n\n/**\n * Represents a participant in (i.e. a member of) a conference.\n */\nexport default class JitsiParticipant {\n\n    /* eslint-disable max-params */\n\n    /**\n     * Initializes a new JitsiParticipant instance.\n     *\n     * @constructor\n     * @param jid the conference XMPP jid\n     * @param conference\n     * @param displayName\n     * @param {Boolean} hidden - True if the new JitsiParticipant instance is to\n     * represent a hidden participant; otherwise, false.\n     * @param {string} statsID - optional participant statsID\n     * @param {string} status - the initial status if any.\n     * @param {object} identity - the xmpp identity\n     * @param {boolean?} isReplacing - whether this is a participant replacing another into the meeting.\n     * @param {boolean?} isReplaced - whether this is a participant to be kicked and replaced into the meeting.\n     */\n    constructor(jid, conference, displayName, hidden, statsID, status, identity, isReplacing, isReplaced) {\n        this._jid = jid;\n        this._id = Strophe.getResourceFromJid(jid);\n        this._conference = conference;\n        this._displayName = displayName;\n        this._supportsDTMF = false;\n        this._tracks = [];\n        this._role = 'none';\n        this._status = status;\n        this._hidden = hidden;\n        this._statsID = statsID;\n        this._connectionStatus = ParticipantConnectionStatus.ACTIVE;\n        this._properties = {};\n        this._identity = identity;\n        this._isReplacing = isReplacing;\n        this._isReplaced = isReplaced;\n        this._features = new Set();\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * @returns {JitsiConference} The conference that this participant belongs\n     * to.\n     */\n    getConference() {\n        return this._conference;\n    }\n\n    /**\n     * Gets the value of a property of this participant.\n     */\n    getProperty(name) {\n        return this._properties[name];\n    }\n\n    /**\n     * Checks whether this <tt>JitsiParticipant</tt> has any video tracks which\n     * are muted according to their underlying WebRTC <tt>MediaStreamTrack</tt>\n     * muted status.\n     * @return {boolean} <tt>true</tt> if this <tt>participant</tt> contains any\n     * video <tt>JitsiTrack</tt>s which are muted as defined in\n     * {@link JitsiTrack.isWebRTCTrackMuted}.\n     */\n    hasAnyVideoTrackWebRTCMuted() {\n        return (\n            this.getTracks().some(\n                jitsiTrack =>\n                    jitsiTrack.getType() === MediaType.VIDEO\n                        && jitsiTrack.isWebRTCTrackMuted()));\n    }\n\n    /**\n     * Updates participant's connection status.\n     * @param {string} state the current participant connection state.\n     * {@link ParticipantConnectionStatus}.\n     * @private\n     */\n    _setConnectionStatus(status) {\n        this._connectionStatus = status;\n    }\n\n    /**\n     * Return participant's connectivity status.\n     *\n     * @returns {string} the connection status\n     * <tt>ParticipantConnectionStatus</tt> of the user.\n     * {@link ParticipantConnectionStatus}.\n     */\n    getConnectionStatus() {\n        return this._connectionStatus;\n    }\n\n    /**\n     * Sets the value of a property of this participant, and fires an event if\n     * the value has changed.\n     * @name the name of the property.\n     * @value the value to set.\n     */\n    setProperty(name, value) {\n        const oldValue = this._properties[name];\n\n        if (value !== oldValue) {\n            this._properties[name] = value;\n            this._conference.eventEmitter.emit(\n                JitsiConferenceEvents.PARTICIPANT_PROPERTY_CHANGED,\n                this,\n                name,\n                oldValue,\n                value);\n        }\n    }\n\n    /**\n     * @returns {Array.<JitsiTrack>} The list of media tracks for this\n     * participant.\n     */\n    getTracks() {\n        return this._tracks.slice();\n    }\n\n    /**\n     * @param {MediaType} mediaType\n     * @returns {Array.<JitsiTrack>} an array of media tracks for this\n     * participant, for given media type.\n     */\n    getTracksByMediaType(mediaType) {\n        return this.getTracks().filter(track => track.getType() === mediaType);\n    }\n\n    /**\n     * @returns {String} The ID of this participant.\n     */\n    getId() {\n        return this._id;\n    }\n\n    /**\n     * @returns {String} The JID of this participant.\n     */\n    getJid() {\n        return this._jid;\n    }\n\n    /**\n     * @returns {String} The human-readable display name of this participant.\n     */\n    getDisplayName() {\n        return this._displayName;\n    }\n\n    /**\n     * @returns {String} The stats ID of this participant.\n     */\n    getStatsID() {\n        return this._statsID;\n    }\n\n    /**\n     * @returns {String} The status of the participant.\n     */\n    getStatus() {\n        return this._status;\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant is a moderator or not.\n     */\n    isModerator() {\n        return this._role === 'moderator';\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant is a hidden participant. Some\n     * special system participants may want to join hidden (like for example the\n     * recorder).\n     */\n    isHidden() {\n        return this._hidden;\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant is a hidden participant. Some\n     * special system participants may want to join hidden (like for example the\n     * recorder).\n     */\n    isHiddenFromRecorder() {\n        return this._identity?.user?.['hidden-from-recorder'] === 'true';\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant replaces another participant\n     * from the meeting.\n     */\n    isReplacing() {\n        return this._isReplacing;\n    }\n\n    /**\n     * @returns {Boolean} Wheter this participants will be replaced by another\n     * participant in the meeting.\n     */\n    isReplaced() {\n        return this._isReplaced;\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant has muted their audio.\n     */\n    isAudioMuted() {\n        return this._isMediaTypeMuted(MediaType.AUDIO);\n    }\n\n    /**\n     * Determines whether all JitsiTracks which are of a specific MediaType and\n     * which belong to this JitsiParticipant are muted.\n     *\n     * @param {MediaType} mediaType - The MediaType of the JitsiTracks to be\n     * checked.\n     * @private\n     * @returns {Boolean} True if all JitsiTracks which are of the specified\n     * mediaType and which belong to this JitsiParticipant are muted; otherwise,\n     * false.\n     */\n    _isMediaTypeMuted(mediaType) {\n        return this.getTracks().reduce(\n            (muted, track) =>\n                muted && (track.getType() !== mediaType || track.isMuted()),\n            true);\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant has muted their video.\n     */\n    isVideoMuted() {\n        return this._isMediaTypeMuted(MediaType.VIDEO);\n    }\n\n    /**\n     * @returns {String} The role of this participant.\n     */\n    getRole() {\n        return this._role;\n    }\n\n    /**\n     * Sets a new participant role.\n     * @param {String} newRole - the new role.\n     */\n    setRole(newRole) {\n        this._role = newRole;\n    }\n\n    /**\n     * Sets whether participant is replacing another based on jwt.\n     * @param {String} newIsReplacing - whether is replacing.\n     */\n    setIsReplacing(newIsReplacing) {\n        this._isReplacing = newIsReplacing;\n    }\n\n    /**\n     * Sets whether participant is being replaced by another based on jwt.\n     * @param {boolean} newIsReplaced - whether is being replaced.\n     */\n    setIsReplaced(newIsReplaced) {\n        this._isReplaced = newIsReplaced;\n    }\n\n    /**\n     *\n     */\n    supportsDTMF() {\n        return this._supportsDTMF;\n    }\n\n    /**\n     * Returns a set with the features for the participant.\n     * @returns {Promise<Set<String>, Error>}\n     */\n    getFeatures() {\n        return Promise.resolve(this._features);\n    }\n\n    /**\n     * Checks current set features.\n     * @param {String} feature - the feature to check.\n     * @return {boolean} <tt>true</tt> if this <tt>participant</tt> contains the\n     * <tt>feature</tt>.\n     */\n    hasFeature(feature) {\n        return this._features.has(feature);\n    }\n\n    /**\n     * Set new features.\n     * @param {Set<String>|undefined} newFeatures - Sets new features.\n     */\n    setFeatures(newFeatures) {\n        this._features = newFeatures || new Set();\n    }\n\n    /**\n     * Returns the bot type for the participant.\n     *\n     * @returns {string|undefined} - The bot type of the participant.\n     */\n    getBotType() {\n        return this._botType;\n    }\n\n    /**\n     * Sets the bot type for the participant.\n     * @param {String} newBotType - The new bot type to set.\n     */\n    setBotType(newBotType) {\n        this._botType = newBotType;\n    }\n\n    /**\n     * Returns the connection jid for the participant.\n     *\n     * @returns {string|undefined} - The connection jid of the participant.\n     */\n    getConnectionJid() {\n        return this._connectionJid;\n    }\n\n    /**\n     * Sets the connection jid for the participant.\n     * @param {String} newJid - The connection jid to set.\n     */\n    setConnectionJid(newJid) {\n        this._connectionJid = newJid;\n    }\n}\n","/**\n * The events for the connection.\n */\n\nexport enum JitsiConnectionEvents {\n    /**\n     * Indicates that the connection has been disconnected. The event provides\n     * the following parameters to its listeners:\n     *\n     * @param msg {string} a message associated with the disconnect such as the\n     * last (known) error message\n     */\n    CONNECTION_DISCONNECTED = 'connection.connectionDisconnected',\n\n    /**\n     * Indicates that the connection has been established. The event provides\n     * the following parameters to its listeners:\n     *\n     * @param id {string} the ID of the local endpoint/participant/peer (within\n     * the context of the established connection)\n     */\n    CONNECTION_ESTABLISHED = 'connection.connectionEstablished',\n\n    /**\n     * Indicates that the connection has been failed for some reason. The event\n     * provides the following parameters to its listeners:\n     *\n     * @param errType {JitsiConnectionErrors} the type of error associated with\n     * the failure\n     * @param errReason {string} the error (message) associated with the failure\n     * @param credentials {object} the credentials used to connect (if any)\n     * @param errReasonDetails {object} an optional object with details about\n     * the error, like shard moving, suspending. Used for analytics purposes.\n     */\n    CONNECTION_FAILED = 'connection.connectionFailed',\n\n    /**\n     * Indicates that the performed action cannot be executed because the\n     * connection is not in the correct state(connected, disconnected, etc.)\n     */\n    WRONG_STATE = 'connection.wrongState',\n\n    /**\n     * Indicates that the display name is required over this connection and need to be supplied when\n     * joining the room.\n     * There are cases like lobby room where display name is required.\n     */\n    DISPLAY_NAME_REQUIRED = 'connection.display_name_required'\n};\n\n// exported for backward compatibility\nexport const CONNECTION_DISCONNECTED = JitsiConnectionEvents.CONNECTION_DISCONNECTED;\nexport const CONNECTION_ESTABLISHED = JitsiConnectionEvents.CONNECTION_ESTABLISHED;\nexport const CONNECTION_FAILED = JitsiConnectionEvents.CONNECTION_FAILED;\nexport const WRONG_STATE = JitsiConnectionEvents.WRONG_STATE;\nexport const DISPLAY_NAME_REQUIRED = JitsiConnectionEvents.DISPLAY_NAME_REQUIRED;\n","/**\n * The errors for the connection.\n */\n\nexport enum JitsiConnectionErrors {\n    /**\n     * Indicates that the connection was dropped with an error which was most likely\n     * caused by some networking issues. The dropped term in this context means that\n     * the connection was closed unexpectedly (not on user's request).\n     *\n     * One example is 'item-not-found' error thrown by Prosody when the BOSH session\n     * times out after 60 seconds of inactivity. On the other hand 'item-not-found'\n     * could also happen when BOSH request is sent to the server with the session-id\n     * that is not know to the server. But this should not happen in lib-jitsi-meet\n     * case as long as the service is configured correctly (there is no bug).\n     */\n    CONNECTION_DROPPED_ERROR = 'connection.droppedError',\n\n    /**\n     * Not specified errors.\n     */\n    OTHER_ERROR = 'connection.otherError',\n\n    /**\n     * Indicates that a password is required in order to join the conference.\n     */\n    PASSWORD_REQUIRED = 'connection.passwordRequired',\n\n    /**\n     * Indicates that the connection was dropped, because of too many 5xx HTTP\n     * errors on BOSH requests.\n     */\n    SERVER_ERROR = 'connection.serverError'\n};\n\n// exported for backward compatibility\nexport const CONNECTION_DROPPED_ERROR = JitsiConnectionErrors.CONNECTION_DROPPED_ERROR;\nexport const OTHER_ERROR = JitsiConnectionErrors.OTHER_ERROR;\nexport const PASSWORD_REQUIRED = JitsiConnectionErrors.PASSWORD_REQUIRED;\nexport const SERVER_ERROR = JitsiConnectionErrors.SERVER_ERROR;\n","\n/**\n * Promise-like object which can be passed around for resolving it later. It\n * implements the \"thenable\" interface, so it can be used wherever a Promise\n * could be used.\n *\n * In addition a \"reject on timeout\" functionality is provided.\n */\nexport default class Deferred {\n    /**\n     * Instantiates a Deferred object.\n     */\n    constructor() {\n        this.promise = new Promise((resolve, reject) => {\n            this.resolve = (...args) => {\n                this.clearRejectTimeout();\n                resolve(...args);\n            };\n            this.reject = (...args) => {\n                this.clearRejectTimeout();\n                reject(...args);\n            };\n        });\n        this.then = this.promise.then.bind(this.promise);\n        this.catch = this.promise.catch.bind(this.promise);\n    }\n\n    /**\n     * Clears the reject timeout.\n     */\n    clearRejectTimeout() {\n        clearTimeout(this._timeout);\n    }\n\n    /**\n     * Rejects the promise after the given timeout.\n     */\n    setRejectTimeout(ms) {\n        this._timeout = setTimeout(() => {\n            this.reject(new Error('timeout'));\n        }, ms);\n    }\n}\n","import EventEmitter from 'events';\n\n/**\n * The class implements basic event operations - add/remove listener.\n * NOTE: The purpose of the class is to be extended in order to add\n * this functionality to other classes.\n */\nexport default class Listenable {\n    /**\n     * Creates new instance.\n     * @param {EventEmitter} eventEmitter\n     * @constructor\n     */\n    constructor(eventEmitter = new EventEmitter()) {\n        this.eventEmitter = eventEmitter;\n\n        // aliases for addListener/removeListener\n        this.addEventListener = this.on = this.addListener;\n        this.removeEventListener = this.off = this.removeListener;\n    }\n\n    /**\n     * Adds new listener.\n     * @param {String} eventName the name of the event\n     * @param {Function} listener the listener.\n     * @returns {Function} - The unsubscribe function.\n     */\n    addListener(eventName, listener) {\n        this.eventEmitter.addListener(eventName, listener);\n\n        return () => this.removeEventListener(eventName, listener);\n    }\n\n    /**\n     * Removes listener.\n     * @param {String} eventName the name of the event that triggers the\n     * listener\n     * @param {Function} listener the listener.\n     */\n    removeListener(eventName, listener) {\n        this.eventEmitter.removeListener(eventName, listener);\n    }\n}\n","/* global RTCRtpScriptTransform */\n\nimport { getLogger } from '@jitsi/logger';\n\nconst logger = getLogger(__filename);\n\n// Flag to set on senders / receivers to avoid setting up the encryption transform\n// more than once.\nconst kJitsiE2EE = Symbol('kJitsiE2EE');\n\n/**\n * Context encapsulating the cryptography bits required for E2EE.\n * This uses the WebRTC Insertable Streams API which is explained in\n *   https://github.com/alvestrand/webrtc-media-streams/blob/master/explainer.md\n * that provides access to the encoded frames and allows them to be transformed.\n *\n * The encoded frame format is explained below in the _encodeFunction method.\n * High level design goals were:\n * - do not require changes to existing SFUs and retain (VP8) metadata.\n * - allow the SFU to rewrite SSRCs, timestamp, pictureId.\n * - allow for the key to be rotated frequently.\n */\nexport default class E2EEcontext {\n    /**\n     * Build a new E2EE context instance, which will be used in a given conference.\n     * @param {boolean} [options.sharedKey] - whether there is a uniques key shared amoung all participants.\n     */\n    constructor({ sharedKey } = {}) {\n        // Determine the URL for the worker script. Relative URLs are relative to\n        // the entry point, not the script that launches the worker.\n        let baseUrl = '';\n        const ljm = document.querySelector('script[src*=\"lib-jitsi-meet\"]');\n\n        if (ljm) {\n            const idx = ljm.src.lastIndexOf('/');\n\n            baseUrl = `${ljm.src.substring(0, idx)}/`;\n        }\n\n        let workerUrl = `${baseUrl}lib-jitsi-meet.e2ee-worker.js`;\n\n        // If there is no baseUrl then we create the worker in a normal way\n        // as you cant load scripts inside blobs from relative paths.\n        // See: https://www.html5rocks.com/en/tutorials/workers/basics/#toc-inlineworkers-loadingscripts\n        if (baseUrl && baseUrl !== '/') {\n            // Initialize the E2EE worker. In order to avoid CORS issues, start the worker and have it\n            // synchronously load the JS.\n            const workerBlob\n                = new Blob([ `importScripts(\"${workerUrl}\");` ], { type: 'application/javascript' });\n\n            workerUrl = window.URL.createObjectURL(workerBlob);\n        }\n\n        this._worker = new Worker(workerUrl, { name: 'E2EE Worker' });\n\n        this._worker.onerror = e => logger.error(e);\n\n        this._worker.postMessage({\n            operation: 'initialize',\n            sharedKey\n        });\n    }\n\n    /**\n     * Cleans up all state associated with the given participant. This is needed when a\n     * participant leaves the current conference.\n     *\n     * @param {string} participantId - The participant that just left.\n     */\n    cleanup(participantId) {\n        this._worker.postMessage({\n            operation: 'cleanup',\n            participantId\n        });\n    }\n\n    /**\n     * Cleans up all state associated with all participants in the conference. This is needed when disabling e2ee.\n     *\n     */\n    cleanupAll() {\n        this._worker.postMessage({\n            operation: 'cleanupAll'\n        });\n    }\n\n    /**\n     * Handles the given {@code RTCRtpReceiver} by creating a {@code TransformStream} which will inject\n     * a frame decoder.\n     *\n     * @param {RTCRtpReceiver} receiver - The receiver which will get the decoding function injected.\n     * @param {string} kind - The kind of track this receiver belongs to.\n     * @param {string} participantId - The participant id that this receiver belongs to.\n     */\n    handleReceiver(receiver, kind, participantId) {\n        if (receiver[kJitsiE2EE]) {\n            return;\n        }\n        receiver[kJitsiE2EE] = true;\n\n        if (window.RTCRtpScriptTransform) {\n            const options = {\n                operation: 'decode',\n                participantId\n            };\n\n            receiver.transform = new RTCRtpScriptTransform(this._worker, options);\n        } else {\n            const receiverStreams = receiver.createEncodedStreams();\n\n            this._worker.postMessage({\n                operation: 'decode',\n                readableStream: receiverStreams.readable,\n                writableStream: receiverStreams.writable,\n                participantId\n            }, [ receiverStreams.readable, receiverStreams.writable ]);\n        }\n    }\n\n    /**\n     * Handles the given {@code RTCRtpSender} by creating a {@code TransformStream} which will inject\n     * a frame encoder.\n     *\n     * @param {RTCRtpSender} sender - The sender which will get the encoding function injected.\n     * @param {string} kind - The kind of track this sender belongs to.\n     * @param {string} participantId - The participant id that this sender belongs to.\n     */\n    handleSender(sender, kind, participantId) {\n        if (sender[kJitsiE2EE]) {\n            return;\n        }\n        sender[kJitsiE2EE] = true;\n\n        if (window.RTCRtpScriptTransform) {\n            const options = {\n                operation: 'encode',\n                participantId\n            };\n\n            sender.transform = new RTCRtpScriptTransform(this._worker, options);\n        } else {\n            const senderStreams = sender.createEncodedStreams();\n\n            this._worker.postMessage({\n                operation: 'encode',\n                readableStream: senderStreams.readable,\n                writableStream: senderStreams.writable,\n                participantId\n            }, [ senderStreams.readable, senderStreams.writable ]);\n        }\n    }\n\n    /**\n     * Set the E2EE key for the specified participant.\n     *\n     * @param {string} participantId - the ID of the participant who's key we are setting.\n     * @param {Uint8Array | boolean} key - they key for the given participant.\n     * @param {Number} keyIndex - the key index.\n     */\n    setKey(participantId, key, keyIndex) {\n        this._worker.postMessage({\n            operation: 'setKey',\n            key,\n            keyIndex,\n            participantId\n        });\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport browser from '../browser';\nimport Deferred from '../util/Deferred';\nimport Listenable from '../util/Listenable';\n\nimport E2EEContext from './E2EEContext';\n\nconst logger = getLogger(__filename);\n\n/**\n * Abstract class that integrates {@link E2EEContext} with a key management system.\n */\nexport class KeyHandler extends Listenable {\n    /**\n     * Build a new KeyHandler instance, which will be used in a given conference.\n     * @param {JitsiConference} conference - the current conference.\n     * @param {object} options - the options passed to {E2EEContext}, see implemention.\n     */\n    constructor(conference, options = {}) {\n        super();\n\n        this.conference = conference;\n        this.e2eeCtx = new E2EEContext(options);\n\n        this.enabled = false;\n        this._enabling = undefined;\n\n        // Conference media events in order to attach the encryptor / decryptor.\n        // FIXME add events to TraceablePeerConnection which will allow to see when there's new receiver or sender\n        // added instead of shenanigans around conference track events and track muted.\n        //\n\n        this.conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n            this._onMediaSessionStarted.bind(this));\n        this.conference.on(\n            JitsiConferenceEvents.TRACK_ADDED,\n            track => track.isLocal() && this._onLocalTrackAdded(track));\n        this.conference.rtc.on(\n            RTCEvents.REMOTE_TRACK_ADDED,\n            (track, tpc) => this._setupReceiverE2EEForTrack(tpc, track));\n        this.conference.on(\n            JitsiConferenceEvents.TRACK_MUTE_CHANGED,\n            this._trackMuteChanged.bind(this));\n    }\n\n    /**\n     * Indicates whether E2EE is currently enabled or not.\n     *\n     * @returns {boolean}\n     */\n    isEnabled() {\n        return this.enabled;\n    }\n\n    /**\n     * Enables / disables End-To-End encryption.\n     *\n     * @param {boolean} enabled - whether E2EE should be enabled or not.\n     * @returns {void}\n     */\n    async setEnabled(enabled) {\n        this._enabling && await this._enabling;\n\n        if (enabled === this.enabled) {\n            return;\n        }\n\n        this._enabling = new Deferred();\n\n        this.enabled = enabled;\n\n        if (!enabled) {\n            this.e2eeCtx.cleanupAll();\n        }\n\n        this._setEnabled && await this._setEnabled(enabled);\n\n        this.conference.setLocalParticipantProperty('e2ee.enabled', enabled);\n\n        this.conference._restartMediaSessions();\n\n        this._enabling.resolve();\n    }\n\n    /**\n     * Sets the key for End-to-End encryption.\n     *\n     * @returns {void}\n     */\n    setEncryptionKey() {\n        throw new Error('Not implemented by subclass');\n    }\n\n    /**\n     * Setup E2EE on the new track that has been added to the conference, apply it on all the open peerconnections.\n     * @param {JitsiLocalTrack} track - the new track that's being added to the conference.\n     * @private\n     */\n    _onLocalTrackAdded(track) {\n        for (const session of this.conference.getMediaSessions()) {\n            this._setupSenderE2EEForTrack(session, track);\n        }\n    }\n\n    /**\n     * Setups E2E encryption for the new session.\n     * @param {JingleSessionPC} session - the new media session.\n     * @private\n     */\n    _onMediaSessionStarted(session) {\n        const localTracks = this.conference.getLocalTracks();\n\n        for (const track of localTracks) {\n            this._setupSenderE2EEForTrack(session, track);\n        }\n    }\n\n    /**\n     * Setup E2EE for the receiving side.\n     *\n     * @private\n     */\n    _setupReceiverE2EEForTrack(tpc, track) {\n        if (!this.enabled) {\n            return;\n        }\n\n        const receiver = tpc.findReceiverForTrack(track.track);\n\n        if (receiver) {\n            this.e2eeCtx.handleReceiver(receiver, track.getType(), track.getParticipantId());\n        } else {\n            logger.warn(`Could not handle E2EE for ${track}: receiver not found in: ${tpc}`);\n        }\n    }\n\n    /**\n     * Setup E2EE for the sending side.\n     *\n     * @param {JingleSessionPC} session - the session which sends the media produced by the track.\n     * @param {JitsiLocalTrack} track - the local track for which e2e encoder will be configured.\n     * @private\n     */\n    _setupSenderE2EEForTrack(session, track) {\n        if (!this.enabled) {\n            return;\n        }\n\n        const pc = session.peerconnection;\n        const sender = pc && pc.findSenderForTrack(track.track);\n\n        if (sender) {\n            this.e2eeCtx.handleSender(sender, track.getType(), track.getParticipantId());\n        } else {\n            logger.warn(`Could not handle E2EE for ${track}: sender not found in ${pc}`);\n        }\n    }\n\n    /**\n     * Setup E2EE on the sender that is created for the unmuted local video track.\n     * @param {JitsiLocalTrack} track - the track for which muted status has changed.\n     * @private\n     */\n    _trackMuteChanged(track) {\n        if (browser.doesVideoMuteByStreamRemove() && track.isLocal() && track.isVideoTrack() && !track.isMuted()) {\n            for (const session of this.conference.getMediaSessions()) {\n                this._setupSenderE2EEForTrack(session, track);\n            }\n        }\n    }\n}\n","import { KeyHandler } from './KeyHandler';\n\n/**\n * This module integrates {@link E2EEContext} with {external} in order to set the keys for encryption.\n */\nexport class ExternallyManagedKeyHandler extends KeyHandler {\n    /**\n     * Build a new ExternallyManagedKeyHandler instance, which will be used in a given conference.\n     * @param conference - the current conference.\n     */\n    constructor(conference) {\n        super(conference, { sharedKey: true });\n    }\n\n    /**\n     * Sets the key and index for End-to-End encryption.\n     *\n     * @param {CryptoKey} [keyInfo.encryptionKey] - encryption key.\n     * @param {Number} [keyInfo.index] - the index of the encryption key.\n     * @returns {void}\n     */\n    setKey(keyInfo) {\n        this.e2eeCtx.setKey(undefined, { encryptionKey: keyInfo.encryptionKey }, keyInfo.index);\n    }\n}\n","import uuid from './dist/index.js';\nexport const v1 = uuid.v1;\nexport const v3 = uuid.v3;\nexport const v4 = uuid.v4;\nexport const v5 = uuid.v5;\n","/* global Olm */\n\nimport { getLogger } from '@jitsi/logger';\nimport base64js from 'base64-js';\nimport isEqual from 'lodash.isequal';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport Deferred from '../util/Deferred';\nimport Listenable from '../util/Listenable';\nimport { FEATURE_E2EE, JITSI_MEET_MUC_TYPE } from '../xmpp/xmpp';\n\nconst logger = getLogger(__filename);\n\nconst REQ_TIMEOUT = 5 * 1000;\nconst OLM_MESSAGE_TYPE = 'olm';\nconst OLM_MESSAGE_TYPES = {\n    ERROR: 'error',\n    KEY_INFO: 'key-info',\n    KEY_INFO_ACK: 'key-info-ack',\n    SESSION_ACK: 'session-ack',\n    SESSION_INIT: 'session-init'\n};\n\nconst kOlmData = Symbol('OlmData');\n\nconst OlmAdapterEvents = {\n    OLM_ID_KEY_READY: 'olm.id_key_ready',\n    PARTICIPANT_E2EE_CHANNEL_READY: 'olm.participant_e2ee_channel_ready',\n    PARTICIPANT_KEY_UPDATED: 'olm.partitipant_key_updated'\n};\n\n/**\n * This class implements an End-to-End Encrypted communication channel between every two peers\n * in the conference. This channel uses libolm to achieve E2EE.\n *\n * The created channel is then used to exchange the secret key that each participant will use\n * to encrypt the actual media (see {@link E2EEContext}).\n *\n * A simple JSON message based protocol is implemented, which follows a request - response model:\n * - session-init: Initiates an olm session establishment procedure. This message will be sent\n *                 by the participant who just joined, to everyone else.\n * - session-ack: Completes the olm session etablishment. This messsage may contain ancilliary\n *                encrypted data, more specifically the sender's current key.\n * - key-info: Includes the sender's most up to date key information.\n * - key-info-ack: Acknowledges the reception of a key-info request. In addition, it may contain\n *                 the sender's key information, if available.\n * - error: Indicates a request processing error has occurred.\n *\n * These requessts and responses are transport independent. Currently they are sent using XMPP\n * MUC private messages.\n */\nexport class OlmAdapter extends Listenable {\n    /**\n     * Creates an adapter instance for the given conference.\n     */\n    constructor(conference) {\n        super();\n\n        this._conf = conference;\n        this._init = new Deferred();\n        this._key = undefined;\n        this._keyIndex = -1;\n        this._reqs = new Map();\n        this._sessionInitialization = undefined;\n\n        if (OlmAdapter.isSupported()) {\n            this._bootstrapOlm();\n\n            this._conf.on(JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED, this._onEndpointMessageReceived.bind(this));\n            this._conf.on(JitsiConferenceEvents.CONFERENCE_LEFT, this._onConferenceLeft.bind(this));\n            this._conf.on(JitsiConferenceEvents.USER_LEFT, this._onParticipantLeft.bind(this));\n            this._conf.on(JitsiConferenceEvents.PARTICIPANT_PROPERTY_CHANGED,\n                this._onParticipantPropertyChanged.bind(this));\n        } else {\n            this._init.reject(new Error('Olm not supported'));\n        }\n    }\n\n    /**\n     * Starts new olm sessions with every other participant that has the participantId \"smaller\" the localParticipantId.\n     */\n    async initSessions() {\n        if (this._sessionInitialization) {\n            throw new Error('OlmAdapter initSessions called multiple times');\n        } else {\n            this._sessionInitialization = new Deferred();\n\n            await this._init;\n\n            const promises = [];\n            const localParticipantId = this._conf.myUserId();\n\n            for (const participant of this._conf.getParticipants()) {\n                if (participant.hasFeature(FEATURE_E2EE) && localParticipantId < participant.getId()) {\n                    promises.push(this._sendSessionInit(participant));\n                }\n            }\n\n            await Promise.allSettled(promises);\n\n            // TODO: retry failed ones.\n\n            this._sessionInitialization.resolve();\n            this._sessionInitialization = undefined;\n        }\n    }\n\n    /**\n     * Indicates if olm is supported on the current platform.\n     *\n     * @returns {boolean}\n     */\n    static isSupported() {\n        return typeof window.Olm !== 'undefined';\n    }\n\n    /**\n     * Updates the current participant key and distributes it to all participants in the conference\n     * by sending a key-info message.\n     *\n     * @param {Uint8Array|boolean} key - The new key.\n     * @retrns {Promise<Number>}\n     */\n    async updateKey(key) {\n        // Store it locally for new sessions.\n        this._key = key;\n        this._keyIndex++;\n\n        // Broadcast it.\n        const promises = [];\n\n        for (const participant of this._conf.getParticipants()) {\n            const pId = participant.getId();\n            const olmData = this._getParticipantOlmData(participant);\n\n            // TODO: skip those who don't support E2EE.\n            if (!olmData.session) {\n                logger.warn(`Tried to send key to participant ${pId} but we have no session`);\n\n                // eslint-disable-next-line no-continue\n                continue;\n            }\n\n            const uuid = uuidv4();\n            const data = {\n                [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                olm: {\n                    type: OLM_MESSAGE_TYPES.KEY_INFO,\n                    data: {\n                        ciphertext: this._encryptKeyInfo(olmData.session),\n                        uuid\n                    }\n                }\n            };\n            const d = new Deferred();\n\n            d.setRejectTimeout(REQ_TIMEOUT);\n            d.catch(() => {\n                this._reqs.delete(uuid);\n            });\n            this._reqs.set(uuid, d);\n            promises.push(d);\n\n            this._sendMessage(data, pId);\n        }\n\n        await Promise.allSettled(promises);\n\n        // TODO: retry failed ones?\n\n        return this._keyIndex;\n    }\n\n    /**\n     * Updates the current participant key.\n     * @param {Uint8Array|boolean} key - The new key.\n     * @returns {number}\n    */\n    updateCurrentKey(key) {\n        this._key = key;\n\n        return this._keyIndex;\n    }\n\n    /**\n     * Frees the olmData session for the given participant.\n     *\n     */\n    clearParticipantSession(participant) {\n        const olmData = this._getParticipantOlmData(participant);\n\n        if (olmData.session) {\n            olmData.session.free();\n            olmData.session = undefined;\n        }\n    }\n\n\n    /**\n     * Frees the olmData sessions for all participants.\n     *\n     */\n    clearAllParticipantsSessions() {\n        for (const participant of this._conf.getParticipants()) {\n            this.clearParticipantSession(participant);\n        }\n    }\n\n    /**\n     * Internal helper to bootstrap the olm library.\n     *\n     * @returns {Promise<void>}\n     * @private\n     */\n    async _bootstrapOlm() {\n        logger.debug('Initializing Olm...');\n\n        try {\n            await Olm.init();\n\n            this._olmAccount = new Olm.Account();\n            this._olmAccount.create();\n\n            const idKeys = JSON.parse(this._olmAccount.identity_keys());\n\n            this._idKey = idKeys.curve25519;\n\n            logger.debug(`Olm ${Olm.get_library_version().join('.')} initialized`);\n            this._init.resolve();\n            this._onIdKeyReady(this._idKey);\n        } catch (e) {\n            logger.error('Failed to initialize Olm', e);\n            this._init.reject(e);\n        }\n\n    }\n\n    /**\n     * Publishes our own Olmn id key in presence.\n     * @private\n     */\n    _onIdKeyReady(idKey) {\n        logger.debug(`Olm id key ready: ${idKey}`);\n\n        // Publish it in presence.\n        this._conf.setLocalParticipantProperty('e2ee.idKey', idKey);\n    }\n\n    /**\n     * Event posted when the E2EE signalling channel has been established with the given participant.\n     * @private\n     */\n    _onParticipantE2EEChannelReady(id) {\n        logger.debug(`E2EE channel with participant ${id} is ready`);\n    }\n\n    /**\n     * Internal helper for encrypting the current key information for a given participant.\n     *\n     * @param {Olm.Session} session - Participant's session.\n     * @returns {string} - The encrypted text with the key information.\n     * @private\n     */\n    _encryptKeyInfo(session) {\n        const keyInfo = {};\n\n        if (this._key !== undefined) {\n            keyInfo.key = this._key ? base64js.fromByteArray(this._key) : false;\n            keyInfo.keyIndex = this._keyIndex;\n        }\n\n        return session.encrypt(JSON.stringify(keyInfo));\n    }\n\n    /**\n     * Internal helper for getting the olm related data associated with a participant.\n     *\n     * @param {JitsiParticipant} participant - Participant whose data wants to be extracted.\n     * @returns {Object}\n     * @private\n     */\n    _getParticipantOlmData(participant) {\n        participant[kOlmData] = participant[kOlmData] || {};\n\n        return participant[kOlmData];\n    }\n\n    /**\n     * Handles leaving the conference, cleaning up olm sessions.\n     *\n     * @private\n     */\n    async _onConferenceLeft() {\n        logger.debug('Conference left');\n\n        await this._init;\n\n        for (const participant of this._conf.getParticipants()) {\n            this._onParticipantLeft(participant.getId(), participant);\n        }\n\n        if (this._olmAccount) {\n            this._olmAccount.free();\n            this._olmAccount = undefined;\n        }\n    }\n\n    /**\n     * Main message handler. Handles 1-to-1 messages received from other participants\n     * and send the appropriate replies.\n     *\n     * @private\n     */\n    async _onEndpointMessageReceived(participant, payload) {\n        if (payload[JITSI_MEET_MUC_TYPE] !== OLM_MESSAGE_TYPE) {\n            return;\n        }\n\n        if (!payload.olm) {\n            logger.warn('Incorrectly formatted message');\n\n            return;\n        }\n\n        await this._init;\n\n        const msg = payload.olm;\n        const pId = participant.getId();\n        const olmData = this._getParticipantOlmData(participant);\n\n        switch (msg.type) {\n        case OLM_MESSAGE_TYPES.SESSION_INIT: {\n            if (olmData.session) {\n                logger.warn(`Participant ${pId} already has a session`);\n\n                this._sendError(participant, 'Session already established');\n            } else {\n                // Create a session for communicating with this participant.\n\n                const session = new Olm.Session();\n\n                session.create_outbound(this._olmAccount, msg.data.idKey, msg.data.otKey);\n                olmData.session = session;\n\n                // Send ACK\n                const ack = {\n                    [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                    olm: {\n                        type: OLM_MESSAGE_TYPES.SESSION_ACK,\n                        data: {\n                            ciphertext: this._encryptKeyInfo(session),\n                            uuid: msg.data.uuid\n                        }\n                    }\n                };\n\n                this._sendMessage(ack, pId);\n                this._onParticipantE2EEChannelReady(pId);\n            }\n            break;\n        }\n        case OLM_MESSAGE_TYPES.SESSION_ACK: {\n            if (olmData.session) {\n                logger.warn(`Participant ${pId} already has a session`);\n\n                this._sendError(participant, 'No session found');\n            } else if (msg.data.uuid === olmData.pendingSessionUuid) {\n                const { ciphertext } = msg.data;\n                const d = this._reqs.get(msg.data.uuid);\n                const session = new Olm.Session();\n\n                session.create_inbound(this._olmAccount, ciphertext.body);\n\n                // Remove OT keys that have been used to setup this session.\n                this._olmAccount.remove_one_time_keys(session);\n\n                // Decrypt first message.\n                const data = session.decrypt(ciphertext.type, ciphertext.body);\n\n                olmData.session = session;\n                olmData.pendingSessionUuid = undefined;\n\n                this._onParticipantE2EEChannelReady(pId);\n\n                this._reqs.delete(msg.data.uuid);\n                d.resolve();\n\n                const json = safeJsonParse(data);\n\n                if (json.key) {\n                    const key = base64js.toByteArray(json.key);\n                    const keyIndex = json.keyIndex;\n\n                    olmData.lastKey = key;\n                    this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_KEY_UPDATED, pId, key, keyIndex);\n                }\n            } else {\n                logger.warn('Received ACK with the wrong UUID');\n\n                this._sendError(participant, 'Invalid UUID');\n            }\n            break;\n        }\n        case OLM_MESSAGE_TYPES.ERROR: {\n            logger.error(msg.data.error);\n\n            break;\n        }\n        case OLM_MESSAGE_TYPES.KEY_INFO: {\n            if (olmData.session) {\n                const { ciphertext } = msg.data;\n                const data = olmData.session.decrypt(ciphertext.type, ciphertext.body);\n                const json = safeJsonParse(data);\n\n                if (json.key !== undefined && json.keyIndex !== undefined) {\n                    const key = json.key ? base64js.toByteArray(json.key) : false;\n                    const keyIndex = json.keyIndex;\n\n                    if (!isEqual(olmData.lastKey, key)) {\n                        olmData.lastKey = key;\n                        this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_KEY_UPDATED, pId, key, keyIndex);\n                    }\n\n                    // Send ACK.\n                    const ack = {\n                        [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                        olm: {\n                            type: OLM_MESSAGE_TYPES.KEY_INFO_ACK,\n                            data: {\n                                ciphertext: this._encryptKeyInfo(olmData.session),\n                                uuid: msg.data.uuid\n                            }\n                        }\n                    };\n\n                    this._sendMessage(ack, pId);\n                }\n            } else {\n                logger.debug(`Received key info message from ${pId} but we have no session for them!`);\n\n                this._sendError(participant, 'No session found while processing key-info');\n            }\n            break;\n        }\n        case OLM_MESSAGE_TYPES.KEY_INFO_ACK: {\n            if (olmData.session) {\n                const { ciphertext } = msg.data;\n                const data = olmData.session.decrypt(ciphertext.type, ciphertext.body);\n                const json = safeJsonParse(data);\n\n                if (json.key !== undefined && json.keyIndex !== undefined) {\n                    const key = json.key ? base64js.toByteArray(json.key) : false;\n                    const keyIndex = json.keyIndex;\n\n                    if (!isEqual(olmData.lastKey, key)) {\n                        olmData.lastKey = key;\n                        this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_KEY_UPDATED, pId, key, keyIndex);\n                    }\n                }\n\n                const d = this._reqs.get(msg.data.uuid);\n\n                this._reqs.delete(msg.data.uuid);\n                d.resolve();\n            } else {\n                logger.debug(`Received key info ack message from ${pId} but we have no session for them!`);\n\n                this._sendError(participant, 'No session found while processing key-info-ack');\n            }\n            break;\n        }\n        }\n    }\n\n    /**\n     * Handles a participant leaving. When a participant leaves their olm session is destroyed.\n     *\n     * @private\n     */\n    _onParticipantLeft(id, participant) {\n        logger.debug(`Participant ${id} left`);\n\n        this.clearParticipantSession(participant);\n    }\n\n    /**\n    * Handles an update in a participant's presence property.\n    *\n    * @param {JitsiParticipant} participant - The participant.\n    * @param {string} name - The name of the property that changed.\n    * @param {*} oldValue - The property's previous value.\n    * @param {*} newValue - The property's new value.\n    * @private\n    */\n    async _onParticipantPropertyChanged(participant, name, oldValue, newValue) {\n        switch (name) {\n        case 'e2ee.enabled':\n            if (newValue && this._conf.isE2EEEnabled()) {\n                const localParticipantId = this._conf.myUserId();\n                const participantId = participant.getId();\n                const participantFeatures = await participant.getFeatures();\n\n                if (participantFeatures.has(FEATURE_E2EE) && localParticipantId < participantId) {\n                    if (this._sessionInitialization) {\n                        await this._sessionInitialization;\n                    }\n                    await this._sendSessionInit(participant);\n\n                    const olmData = this._getParticipantOlmData(participant);\n                    const uuid = uuidv4();\n\n                    const d = new Deferred();\n\n                    d.setRejectTimeout(REQ_TIMEOUT);\n                    d.catch(() => {\n                        this._reqs.delete(uuid);\n                        olmData.pendingSessionUuid = undefined;\n                    });\n                    this._reqs.set(uuid, d);\n\n                    const data = {\n                        [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                        olm: {\n                            type: OLM_MESSAGE_TYPES.KEY_INFO,\n                            data: {\n                                ciphertext: this._encryptKeyInfo(olmData.session),\n                                uuid\n                            }\n                        }\n                    };\n\n                    this._sendMessage(data, participantId);\n                }\n            }\n            break;\n        }\n    }\n\n    /**\n     * Builds and sends an error message to the target participant.\n     *\n     * @param {JitsiParticipant} participant - The target participant.\n     * @param {string} error - The error message.\n     * @returns {void}\n     */\n    _sendError(participant, error) {\n        const pId = participant.getId();\n        const err = {\n            [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n            olm: {\n                type: OLM_MESSAGE_TYPES.ERROR,\n                data: {\n                    error\n                }\n            }\n        };\n\n        this._sendMessage(err, pId);\n    }\n\n    /**\n     * Internal helper to send the given object to the given participant ID.\n     * This function merely exists so the transport can be easily swapped.\n     * Currently messages are transmitted via XMPP MUC private messages.\n     *\n     * @param {object} data - The data that will be sent to the target participant.\n     * @param {string} participantId - ID of the target participant.\n     */\n    _sendMessage(data, participantId) {\n        this._conf.sendMessage(data, participantId);\n    }\n\n    /**\n     * Builds and sends the session-init request to the target participant.\n     *\n     * @param {JitsiParticipant} participant - Participant to whom we'll send the request.\n     * @returns {Promise} - The promise will be resolved when the session-ack is received.\n     * @private\n     */\n    _sendSessionInit(participant) {\n        const pId = participant.getId();\n        const olmData = this._getParticipantOlmData(participant);\n\n        if (olmData.session) {\n            logger.warn(`Tried to send session-init to ${pId} but we already have a session`);\n\n            return Promise.reject();\n        }\n\n        if (olmData.pendingSessionUuid !== undefined) {\n            logger.warn(`Tried to send session-init to ${pId} but we already have a pending session`);\n\n            return Promise.reject();\n        }\n\n        // Generate a One Time Key.\n        this._olmAccount.generate_one_time_keys(1);\n\n        const otKeys = JSON.parse(this._olmAccount.one_time_keys());\n        const otKey = Object.values(otKeys.curve25519)[0];\n\n        if (!otKey) {\n            return Promise.reject(new Error('No one-time-keys generated'));\n        }\n\n        // Mark the OT keys (one really) as published so they are not reused.\n        this._olmAccount.mark_keys_as_published();\n\n        const uuid = uuidv4();\n        const init = {\n            [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n            olm: {\n                type: OLM_MESSAGE_TYPES.SESSION_INIT,\n                data: {\n                    idKey: this._idKey,\n                    otKey,\n                    uuid\n                }\n            }\n        };\n\n        const d = new Deferred();\n\n        d.setRejectTimeout(REQ_TIMEOUT);\n        d.catch(() => {\n            this._reqs.delete(uuid);\n            olmData.pendingSessionUuid = undefined;\n        });\n        this._reqs.set(uuid, d);\n\n        this._sendMessage(init, pId);\n\n        // Store the UUID for matching with the ACK.\n        olmData.pendingSessionUuid = uuid;\n\n        return d;\n    }\n}\n\n/**\n * Helper to ensure JSON parsing always returns an object.\n *\n * @param {string} data - The data that needs to be parsed.\n * @returns {object} - Parsed data or empty object in case of failure.\n */\nfunction safeJsonParse(data) {\n    try {\n        return JSON.parse(data);\n    } catch (e) {\n        return {};\n    }\n}\n\nOlmAdapter.events = OlmAdapterEvents;\n","import { getLogger } from '@jitsi/logger';\nimport debounce from 'lodash.debounce';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nimport { KeyHandler } from './KeyHandler';\nimport { OlmAdapter } from './OlmAdapter';\nimport { importKey, ratchet } from './crypto-utils';\n\nconst logger = getLogger(__filename);\n\n// Period which we'll wait before updating / rotating our keys when a participant\n// joins or leaves.\nconst DEBOUNCE_PERIOD = 5000;\n\n/**\n * This module integrates {@link E2EEContext} with {@link OlmAdapter} in order to distribute the keys for encryption.\n */\nexport class ManagedKeyHandler extends KeyHandler {\n    /**\n     * Build a new AutomaticKeyHandler instance, which will be used in a given conference.\n     */\n    constructor(conference) {\n        super(conference);\n\n        this._key = undefined;\n        this._conferenceJoined = false;\n\n        this._olmAdapter = new OlmAdapter(conference);\n\n        this._rotateKey = debounce(this._rotateKeyImpl, DEBOUNCE_PERIOD);\n        this._ratchetKey = debounce(this._ratchetKeyImpl, DEBOUNCE_PERIOD);\n\n        // Olm signalling events.\n        this._olmAdapter.on(\n            OlmAdapter.events.PARTICIPANT_KEY_UPDATED,\n            this._onParticipantKeyUpdated.bind(this));\n\n        this.conference.on(\n            JitsiConferenceEvents.PARTICIPANT_PROPERTY_CHANGED,\n            this._onParticipantPropertyChanged.bind(this));\n        this.conference.on(\n            JitsiConferenceEvents.USER_JOINED,\n            this._onParticipantJoined.bind(this));\n        this.conference.on(\n            JitsiConferenceEvents.USER_LEFT,\n            this._onParticipantLeft.bind(this));\n        this.conference.on(\n                JitsiConferenceEvents.CONFERENCE_JOINED,\n                () => {\n                    this._conferenceJoined = true;\n                });\n    }\n\n    /**\n     * When E2EE is enabled it initializes sessions and sets the key.\n     * Cleans up the sessions when disabled.\n     *\n     * @param {boolean} enabled - whether E2EE should be enabled or not.\n     * @returns {void}\n     */\n    async _setEnabled(enabled) {\n        if (enabled) {\n            await this._olmAdapter.initSessions();\n        } else {\n            this._olmAdapter.clearAllParticipantsSessions();\n        }\n\n        // Generate a random key in case we are enabling.\n        this._key = enabled ? this._generateKey() : false;\n\n        // Send it to others using the E2EE olm channel.\n        const index = await this._olmAdapter.updateKey(this._key);\n\n        // Set our key so we begin encrypting.\n        this.e2eeCtx.setKey(this.conference.myUserId(), this._key, index);\n    }\n\n    /**\n     * Handles an update in a participant's presence property.\n     *\n     * @param {JitsiParticipant} participant - The participant.\n     * @param {string} name - The name of the property that changed.\n     * @param {*} oldValue - The property's previous value.\n     * @param {*} newValue - The property's new value.\n     * @private\n     */\n    async _onParticipantPropertyChanged(participant, name, oldValue, newValue) {\n        switch (name) {\n        case 'e2ee.idKey':\n            logger.debug(`Participant ${participant.getId()} updated their id key: ${newValue}`);\n            break;\n        case 'e2ee.enabled':\n            if (!newValue && this.enabled) {\n                this._olmAdapter.clearParticipantSession(participant);\n            }\n            break;\n        }\n    }\n\n    /**\n     * Advances (using ratcheting) the current key when a new participant joins the conference.\n     * @private\n     */\n    _onParticipantJoined() {\n        if (this._conferenceJoined && this.enabled) {\n            this._ratchetKey();\n        }\n    }\n\n    /**\n     * Rotates the current key when a participant leaves the conference.\n     * @private\n     */\n    _onParticipantLeft(id) {\n        this.e2eeCtx.cleanup(id);\n\n        if (this.enabled) {\n            this._rotateKey();\n        }\n    }\n\n    /**\n     * Rotates the local key. Rotating the key implies creating a new one, then distributing it\n     * to all participants and once they all received it, start using it.\n     *\n     * @private\n     */\n    async _rotateKeyImpl() {\n        logger.debug('Rotating key');\n\n        this._key = this._generateKey();\n        const index = await this._olmAdapter.updateKey(this._key);\n\n        this.e2eeCtx.setKey(this.conference.myUserId(), this._key, index);\n    }\n\n    /**\n     * Advances the current key by using ratcheting.\n     *\n     * @private\n     */\n    async _ratchetKeyImpl() {\n        logger.debug('Ratchetting key');\n\n        const material = await importKey(this._key);\n        const newKey = await ratchet(material);\n\n        this._key = new Uint8Array(newKey);\n\n        const index = this._olmAdapter.updateCurrentKey(this._key);\n\n        this.e2eeCtx.setKey(this.conference.myUserId(), this._key, index);\n    }\n\n    /**\n     * Handles an update in a participant's key.\n     *\n     * @param {string} id - The participant ID.\n     * @param {Uint8Array | boolean} key - The new key for the participant.\n     * @param {Number} index - The new key's index.\n     * @private\n     */\n    _onParticipantKeyUpdated(id, key, index) {\n        logger.debug(`Participant ${id} updated their key`);\n\n        this.e2eeCtx.setKey(id, key, index);\n    }\n\n    /**\n     * Generates a new 256 bit random key.\n     *\n     * @returns {Uint8Array}\n     * @private\n     */\n    _generateKey() {\n        return window.crypto.getRandomValues(new Uint8Array(32));\n    }\n}\n","/**\n * Derives a set of keys from the master key.\n * @param {CryptoKey} material - master key to derive from\n *\n * See https://tools.ietf.org/html/draft-omara-sframe-00#section-4.3.1\n */\nexport async function deriveKeys(material) {\n    const info = new ArrayBuffer();\n    const textEncoder = new TextEncoder();\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/deriveKey#HKDF\n    // https://developer.mozilla.org/en-US/docs/Web/API/HkdfParams\n    const encryptionKey = await crypto.subtle.deriveKey({\n        name: 'HKDF',\n        salt: textEncoder.encode('JFrameEncryptionKey'),\n        hash: 'SHA-256',\n        info\n    }, material, {\n        name: 'AES-GCM',\n        length: 128\n    }, false, [ 'encrypt', 'decrypt' ]);\n\n    return {\n        material,\n        encryptionKey\n    };\n}\n\n/**\n * Ratchets a key. See\n * https://tools.ietf.org/html/draft-omara-sframe-00#section-4.3.5.1\n * @param {CryptoKey} material - base key material\n * @returns {Promise<ArrayBuffer>} - ratcheted key material\n */\nexport async function ratchet(material) {\n    const textEncoder = new TextEncoder();\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/deriveBits\n    return crypto.subtle.deriveBits({\n        name: 'HKDF',\n        salt: textEncoder.encode('JFrameRatchetKey'),\n        hash: 'SHA-256',\n        info: new ArrayBuffer()\n    }, material, 256);\n}\n\n/**\n * Converts a raw key into a WebCrypto key object with default options\n * suitable for our usage.\n * @param {ArrayBuffer} keyBytes - raw key\n * @param {Array} keyUsages - key usages, see importKey documentation\n * @returns {Promise<CryptoKey>} - the WebCrypto key.\n */\nexport async function importKey(keyBytes) {\n    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey\n    return crypto.subtle.importKey('raw', keyBytes, 'HKDF', false, [ 'deriveBits', 'deriveKey' ]);\n}\n","import browser from '../browser';\n\nimport { ExternallyManagedKeyHandler } from './ExternallyManagedKeyHandler';\nimport { ManagedKeyHandler } from './ManagedKeyHandler';\nimport { OlmAdapter } from './OlmAdapter';\n\n/**\n * This module integrates {@link KeyHandler} with {@link JitsiConference} in order to enable E2E encryption.\n */\nexport class E2EEncryption {\n    /**\n     * A constructor.\n     * @param {JitsiConference} conference - The conference instance for which E2E encryption is to be enabled.\n     */\n    constructor(conference) {\n        const { e2ee = {} } = conference.options.config;\n\n        this._externallyManaged = e2ee.externallyManagedKey;\n\n        if (this._externallyManaged) {\n            this._keyHandler = new ExternallyManagedKeyHandler(conference);\n        } else {\n            this._keyHandler = new ManagedKeyHandler(conference);\n        }\n    }\n\n    /**\n     * Indicates if E2EE is supported in the current platform.\n     *\n     * @param {object} config - Global configuration.\n     * @returns {boolean}\n     */\n    static isSupported(config) {\n        const { e2ee = {} } = config;\n\n        if (!e2ee.externallyManagedKey && !OlmAdapter.isSupported()) {\n            return false;\n        }\n\n        return !(config.testing && config.testing.disableE2EE)\n            && (browser.supportsInsertableStreams()\n                || (config.enableEncodedTransformSupport && browser.supportsEncodedTransform()));\n    }\n\n    /**\n     * Indicates whether E2EE is currently enabled or not.\n     *\n     * @returns {boolean}\n     */\n    isEnabled() {\n        return this._keyHandler.isEnabled();\n    }\n\n    /**\n     * Enables / disables End-To-End encryption.\n     *\n     * @param {boolean} enabled - whether E2EE should be enabled or not.\n     * @returns {void}\n     */\n    async setEnabled(enabled) {\n        await this._keyHandler.setEnabled(enabled);\n    }\n\n    /**\n     * Sets the key and index for End-to-End encryption.\n     *\n     * @param {CryptoKey} [keyInfo.encryptionKey] - encryption key.\n     * @param {Number} [keyInfo.index] - the index of the encryption key.\n     * @returns {void}\n     */\n    setEncryptionKey(keyInfo) {\n        this._keyHandler.setKey(keyInfo);\n    }\n}\n","/* global $ */\n\nimport { b64_sha1, Strophe } from 'strophe.js'; // eslint-disable-line camelcase\n\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\nimport Listenable from '../util/Listenable';\n\n/**\n * The property\n */\nconst IDENTITY_PROPERTIES = [ 'category', 'type', 'lang', 'name' ];\nconst IDENTITY_PROPERTIES_FOR_COMPARE = [ 'category', 'type', 'lang' ];\nconst HASH = 'sha-1';\n\n/**\n *\n * @param a\n * @param b\n */\nfunction compareIdentities(a, b) {\n    let res = 0;\n\n    IDENTITY_PROPERTIES_FOR_COMPARE.some(key =>\n        (res = ((a[key] > b[key]) && 1) || ((a[key] < b[key]) && -1)) !== 0\n    );\n\n    return res;\n}\n\n/**\n * Produces a sha-1 from provided identity and features values.\n *\n * @param {Array<Object>} identities - The identity objects.\n * @param {Array<string>} features - The features.\n * @returns {string}\n */\nfunction generateSha(identities, features) {\n    const sortedIdentities = identities.sort(compareIdentities).reduce(\n        (accumulatedValue, identity) => `${\n            IDENTITY_PROPERTIES.reduce(\n                (tmp, key, idx) =>\n                    tmp\n                        + (idx === 0 ? '' : '/')\n                        + (identity[key] ? identity[key] : ''),\n                '')\n        }<`, '');\n    const sortedFeatures = features.sort().reduce(\n        (tmp, feature) => `${tmp + feature}<`, '');\n\n    return b64_sha1(sortedIdentities + sortedFeatures);\n}\n\n/**\n * Parses the disco-info node and returns the sets of features and identities.\n * @param {String} node The node with results to parse.\n * @returns {{features: Set<any>, identities: Set<any>}}\n */\nexport function parseDiscoInfo(node) {\n    const features = new Set();\n    const identities = new Set();\n\n    $(node).find('>query>feature')\n        .each((_, el) => features.add(el.getAttribute('var')));\n    $(node).find('>query>identity')\n        .each((_, el) => identities.add({\n            type: el.getAttribute('type'),\n            name: el.getAttribute('name'),\n            category: el.getAttribute('category')\n        }));\n\n    return {\n        features,\n        identities\n    };\n}\n\n/**\n * Implements xep-0115 ( http://xmpp.org/extensions/xep-0115.html )\n */\nexport default class Caps extends Listenable {\n    /**\n     * Constructs new Caps instance.\n     * @param {Strophe.Connection} connection the strophe connection object\n     * @param {String} node the value of the node attribute of the \"c\" xml node\n     * that will be sent to the other participants\n     */\n    constructor(connection = {}, node = 'http://jitsi.org/jitsimeet') {\n        super();\n        this.node = node;\n        this.disco = connection.disco;\n        if (!this.disco) {\n            throw new Error(\n                'Missing strophe-plugins '\n                + '(disco plugin is required)!');\n        }\n\n        this.version = '';\n        this.rooms = new Set();\n\n        // We keep track of features added outside the library and we publish them\n        // in the presence of the participant for simplicity, avoiding the disco info request-response.\n        this.externalFeatures = new Set();\n\n        const emuc = connection.emuc;\n\n        emuc.addListener(XMPPEvents.EMUC_ROOM_ADDED,\n            room => this._addChatRoom(room));\n        emuc.addListener(XMPPEvents.EMUC_ROOM_REMOVED,\n            room => this._removeChatRoom(room));\n        Object.keys(emuc.rooms).forEach(jid => {\n            this._addChatRoom(emuc.rooms[jid]);\n        });\n\n        Strophe.addNamespace('CAPS', 'http://jabber.org/protocol/caps');\n        this.disco.addFeature(Strophe.NS.CAPS);\n    }\n\n    /**\n     * Adds new feature to the list of supported features for the local\n     * participant\n     * @param {String} feature the name of the feature.\n     * @param {boolean} submit if true - new presence with updated \"c\" node\n     * will be sent.\n     * @param {boolean} external whether this feature was added externally to the library.\n     * We put features used directly by the clients (is jibri, remote-control enabled etc.) in the presence\n     * to avoid additional disco-info queries by those clients.\n     */\n    addFeature(feature, submit = false, external = false) {\n        this.disco.addFeature(feature);\n        this._generateVersion();\n\n        if (external && !this.externalFeatures.has(feature)) {\n            this.externalFeatures.add(feature);\n            this.rooms.forEach(room => this._updateRoomWithExternalFeatures(room));\n        }\n\n        if (submit) {\n            this.submit();\n        }\n    }\n\n    /**\n     * Removes a feature from the list of supported features for the local\n     * participant\n     * @param {String} feature the name of the feature.\n     * @param {boolean} submit if true - new presence with updated \"c\" node\n     * will be sent.\n     * @param {boolean} external whether this feature was added externally to the library.\n     */\n    removeFeature(feature, submit = false, external = false) {\n        this.disco.removeFeature(feature);\n        this._generateVersion();\n\n        if (external && this.externalFeatures.has(feature)) {\n            this.externalFeatures.delete(feature);\n            this.rooms.forEach(room => this._updateRoomWithExternalFeatures(room));\n        }\n\n        if (submit) {\n            this.submit();\n        }\n    }\n\n    /**\n     * Sends new presence stanza for every room from the list of rooms.\n     */\n    submit() {\n        this.rooms.forEach(room => room.sendPresence());\n    }\n\n    /**\n     * Updates the presences in the room based on the current values in externalFeatures.\n     * @param {ChatRoom} room the room to update.\n     * @private\n     */\n    _updateRoomWithExternalFeatures(room) {\n        if (this.externalFeatures.size === 0) {\n            room.removeFromPresence('features');\n        } else {\n            const children = [];\n\n            this.externalFeatures.forEach(f => {\n                children.push({\n                    'tagName': 'feature',\n                    attributes: { 'var': f }\n                });\n            });\n\n            room.addOrReplaceInPresence('features', { children });\n        }\n    }\n\n    /**\n     * Returns a set with the features for a host.\n     * @param {String} jid the jid of the host\n     * @param {int} timeout the timeout in ms for reply from the host.\n     * @returns {Promise<Set<String>, Error>}\n     */\n    getFeaturesAndIdentities(jid, node, timeout = 5000) {\n        return this._getDiscoInfo(jid, node, timeout);\n    }\n\n    /**\n     * Returns a set with the features and identities for a host.\n     * @param {String} jid the jid of the host\n     * @param {String|null} node the node to query\n     * @param {int} timeout the timeout in ms for reply from the host.\n     * @returns {Promise<Object>}\n     * @private\n     */\n    _getDiscoInfo(jid, node, timeout) {\n        return new Promise((resolve, reject) =>\n            this.disco.info(jid, node, response => {\n                resolve(parseDiscoInfo(response));\n            }, reject, timeout)\n        );\n    }\n\n    /**\n     * Adds ChatRoom instance to the list of rooms. Adds listeners to the room\n     * and adds \"c\" element to the presences of the room.\n     * @param {ChatRoom} room the room.\n     */\n    _addChatRoom(room) {\n        this.rooms.add(room);\n        this._fixChatRoomPresenceMap(room);\n\n        this._updateRoomWithExternalFeatures(room);\n    }\n\n    /**\n     * Removes ChatRoom instance from the list of rooms. Removes listeners\n     * added from the Caps class.\n     * @param {ChatRoom} room the room.\n     */\n    _removeChatRoom(room) {\n        this.rooms.delete(room);\n    }\n\n    /**\n     * Creates/updates the \"c\" xml node into the presence of the passed room.\n     * @param {ChatRoom} room the room.\n     */\n    _fixChatRoomPresenceMap(room) {\n        room.addOrReplaceInPresence('c', {\n            attributes: {\n                xmlns: Strophe.NS.CAPS,\n                hash: HASH,\n                node: this.node,\n                ver: this.version\n            }\n        });\n    }\n\n    /**\n     * Handles this.version changes.\n     */\n    _notifyVersionChanged() {\n        // update the version for all rooms\n        this.rooms.forEach(room => this._fixChatRoomPresenceMap(room));\n    }\n\n    /**\n     * Generates the value for the \"ver\" attribute.\n     */\n    _generateVersion() {\n        this.version\n            = generateSha(this.disco._identities, this.disco._features);\n\n        this._notifyVersionChanged();\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport Listenable from '../util/Listenable';\n\nexport const NETWORK_INFO_EVENT = 'NETWORK_INFO_CHANGED';\n\nconst logger = getLogger(__filename);\n\n/**\n * Module provides information about the current status of the internet\n * connection. Lib-jitsi-meet doesn't have any logic for detecting internet\n * online/offline, but rather it relies on the information supplied by the app\n * that uses it. By default the online state is assumed and the lib acts as if\n * it was connected. See {@link JitsiMeetJS.setNetworkInfo}.\n */\nexport class NetworkInfo extends Listenable {\n    /**\n     * Creates new {@link NetworkInfo} instance.\n     */\n    constructor() {\n        super();\n        this._current = {\n            isOnline: true\n        };\n    }\n\n    /**\n     * Updates the network info state.\n     * @param {boolean} isOnline - {@code true} if internet is online or {@code false} otherwise.\n     */\n    updateNetworkInfo({ isOnline }) {\n        logger.debug('updateNetworkInfo', { isOnline });\n        this._current = {\n            isOnline: isOnline === true\n        };\n        this.eventEmitter.emit(NETWORK_INFO_EVENT, this._current);\n    }\n\n    /**\n     * Returns the online/offline internet status. By default the value is {@code true} and changes only if\n     * the lib's user wires the state through {@link JitsiMeetJS.setNetworkInfo} like the jitsi-meet does. Because of\n     * that any logic should still assume that the internet may be offline and should handle the failure gracefully.\n     * It's only a good hint in the other way around: to pause internet operations until it comes back online.\n     * @returns {boolean}\n     */\n    isOnline() {\n        return this._current.isOnline === true;\n    }\n}\n\nconst networkInfo = new NetworkInfo();\n\nexport default networkInfo;\n","import { getLogger } from '@jitsi/logger';\n\nimport {\n    default as NetworkInfo,\n    NETWORK_INFO_EVENT\n} from '../connectivity/NetworkInfo';\nimport { getJitterDelay } from '../util/Retry';\n\nconst logger = getLogger(__filename);\n\n/**\n * The class contains the logic for triggering connection resume via XEP-0198 stream management.\n * It does two things, the first one is it tracks the internet online/offline status and it makes sure that\n * the reconnect is attempted only while online. The seconds thing is that it tracks the retry attempts and extends\n * the retry interval using the full jitter pattern.\n */\nexport default class ResumeTask {\n    /**\n     * Initializes new {@code RetryTask}.\n     * @param {Strophe.Connection} stropheConnection - The Strophe connection instance.\n     */\n    constructor(stropheConnection) {\n        this._stropheConn = stropheConnection;\n\n        /**\n         * The counter increased before each resume retry attempt, used to calculate exponential backoff.\n         * @type {number}\n         * @private\n         */\n        this._resumeRetryN = 0;\n\n        this._retryDelay = undefined;\n    }\n\n    /**\n     * @returns {number|undefined} - How much the app will wait before trying to resume the XMPP connection. When\n     * 'undefined' it means that no resume task was not scheduled.\n     */\n    get retryDelay() {\n        return this._retryDelay;\n    }\n\n    /**\n     * Called by {@link XmppConnection} when the connection drops and it's a signal it wants to schedule a reconnect.\n     *\n     * @returns {void}\n     */\n    schedule() {\n        this._cancelResume();\n\n        this._resumeRetryN += 1;\n\n        this._networkOnlineListener\n            = NetworkInfo.addEventListener(\n                NETWORK_INFO_EVENT,\n                ({ isOnline }) => {\n                    if (isOnline) {\n                        this._scheduleResume();\n                    } else {\n                        this._cancelResume();\n                    }\n                });\n\n        NetworkInfo.isOnline() && this._scheduleResume();\n    }\n\n    /**\n     * Schedules a delayed timeout which will execute the resume action.\n     * @private\n     * @returns {void}\n     */\n    _scheduleResume() {\n        if (this._resumeTimeout) {\n\n            // NO-OP\n            return;\n        }\n\n        // The retry delay will be:\n        //   1st retry: 1.5s - 3s\n        //   2nd retry: 3s - 9s\n        //   3rd and next retry: 4.5s - 27s\n        this._resumeRetryN = Math.min(3, this._resumeRetryN);\n        this._retryDelay = getJitterDelay(\n            /* retry */ this._resumeRetryN,\n            /* minDelay */ this._resumeRetryN * 1500,\n            3);\n\n        logger.info(`Will try to resume the XMPP connection in ${this.retryDelay}ms`);\n\n        this._resumeTimeout = setTimeout(() => this._resumeConnection(), this.retryDelay);\n    }\n\n    /**\n     * Cancels the delayed resume task.\n     *\n     * @private\n     * @returns {void}\n     */\n    _cancelResume() {\n        if (this._resumeTimeout) {\n            logger.info('Canceling connection resume task');\n            clearTimeout(this._resumeTimeout);\n            this._resumeTimeout = undefined;\n            this._retryDelay = undefined;\n        }\n    }\n\n    /**\n     * Resumes the XMPP connection using the stream management plugin.\n     *\n     * @private\n     * @returns {void}\n     */\n    _resumeConnection() {\n        const { streamManagement } = this._stropheConn;\n        const resumeToken = streamManagement.getResumeToken();\n\n        // Things may have changed since when the task was scheduled\n        if (!resumeToken) {\n            return;\n        }\n\n        logger.info('Trying to resume the XMPP connection');\n\n        const url = new URL(this._stropheConn.service);\n        let { search } = url;\n        const pattern = /(previd=)([\\w-]+)/;\n        const oldToken = search.match(pattern);\n\n        // Replace previd if the previd value has changed.\n        if (oldToken && oldToken.indexOf(resumeToken) === -1) {\n            search = search.replace(pattern, `$1${resumeToken}`);\n\n        // Append previd if it doesn't exist.\n        } else if (!oldToken) {\n            search += search.indexOf('?') === -1 ? `?previd=${resumeToken}` : `&previd=${resumeToken}`;\n        }\n\n        url.search = search;\n\n        this._stropheConn.service = url.toString();\n\n        streamManagement.resume();\n    }\n\n    /**\n     * Cancels the retry task. It's called by {@link XmppConnection} when it's no longer interested in reconnecting for\n     * example when the disconnect method is called.\n     *\n     * @returns {void}\n     */\n    cancel() {\n        this._cancelResume();\n        this._resumeRetryN = 0;\n        if (this._networkOnlineListener) {\n            this._networkOnlineListener();\n            this._networkOnlineListener = null;\n        }\n    }\n}\n","/**\n* Gets next timeout using the full jitter pattern.\n*\n* NOTE that there are no checks for argument correctness, so either do the math or use defaults.\n*\n* @param {number} retry - The retry number.\n* @param {number} minDelay - The minimal delay in milliseconds.\n* @param {number} base - The exponent base.\n* @returns {number} - The amount of waiting before trying another time given in milliseconds.\n* @private\n*/\nexport function getJitterDelay(retry, minDelay = 500, base = 2) {\n    return Math.floor((Math.random() * ((Math.pow(base, retry) * 1000) - minDelay)) + minDelay);\n}\n","/**\n * Attaches to the {@link Strophe.Connection.rawInput} which is called whenever any data is received from the server.\n */\nexport default class LastRequestTracker {\n    /**\n     * Initializes new instance.\n     */\n    constructor() {\n        this._lastSuccess = null;\n        this._lastFailedMessage = null;\n    }\n\n    /**\n     * Starts tracking requests on the given connection.\n     *\n     * @param {XmppConnection} xmppConnection - The XMPP connection which manages the given {@code stropheConnection}.\n     * @param {Object} stropheConnection - Strophe connection instance.\n     */\n    startTracking(xmppConnection, stropheConnection) {\n        const originalRawInput = stropheConnection.rawInput;\n\n        stropheConnection.rawInput = (...args) => {\n            const rawMessage = args[0];\n\n            if (rawMessage.includes('failure')) {\n                this._lastFailedMessage = rawMessage;\n            }\n\n            // It's okay to use rawInput callback only once the connection has been established, otherwise it will\n            // treat 'item-not-found' or other connection error on websocket reconnect as successful stanza received.\n            if (xmppConnection.connected) {\n                this._lastSuccess = Date.now();\n            }\n            originalRawInput.apply(stropheConnection, args);\n        };\n    }\n\n    /**\n     * Returns the last raw failed incoming message on the xmpp connection.\n     *\n     * @returns {string|null}\n     */\n    getLastFailedMessage() {\n        return this._lastFailedMessage;\n    }\n\n    /**\n     * Returns how many milliseconds have passed since the last successful BOSH request.\n     *\n     * @returns {number|null}\n     */\n    getTimeSinceLastSuccess() {\n        return this._lastSuccess\n            ? Date.now() - this._lastSuccess\n            : null;\n    }\n}\n","import Listenable from '../util/Listenable';\n\n/**\n * Creates ConnectionPlugin class that extends the passed class.\n * @param {Class} base the definition of the class that will be extended by\n * ConnectionPlugin\n */\nfunction getConnectionPluginDefinition(base = class {}) {\n    /**\n     * Base class for strophe connection plugins.\n     */\n    return class extends base {\n        /**\n         *\n         */\n        constructor(...args) {\n            super(...args);\n            this.connection = null;\n        }\n\n        /**\n         *\n         * @param connection\n         */\n        init(connection) {\n            this.connection = connection;\n        }\n    };\n}\n\n/**\n * ConnectionPlugin class.\n */\nexport default getConnectionPluginDefinition();\n\n/**\n * ConnectionPlugin class that extends Listenable.\n */\nexport const ConnectionPluginListenable\n    = getConnectionPluginDefinition(Listenable);\n","import { getLogger } from '@jitsi/logger';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nimport ConnectionPlugin from './ConnectionPlugin';\n\n\nconst logger = getLogger(__filename);\n\n/**\n * Default ping every 10 sec\n */\nconst PING_DEFAULT_INTERVAL = 10000;\n\n/**\n * Default ping timeout error after 5 sec of waiting.\n */\nconst PING_DEFAULT_TIMEOUT = 5000;\n\n/**\n * Default value for how many ping failures will be tolerated before the WebSocket connection is killed.\n * The worst case scenario in case of ping timing out without a response is (25 seconds at the time of this writing):\n * PING_THRESHOLD * PING_INTERVAL + PING_TIMEOUT\n */\nconst PING_DEFAULT_THRESHOLD = 2;\n\n/**\n * XEP-0199 ping plugin.\n *\n * Registers \"urn:xmpp:ping\" namespace under Strophe.NS.PING.\n */\nexport default class PingConnectionPlugin extends ConnectionPlugin {\n    /**\n     * Constructs new object\n     * @param {Object} options\n     * @param {Function} options.onPingThresholdExceeded - Callback called when ping fails too many times (controlled\n     * by the {@link PING_THRESHOLD} constant).\n     * @param {Function} options._getTimeSinceLastServerResponse - A function to obtain the last seen\n     * response from the server.\n     * @param {Object} options.pingOptions - The ping options if any.\n     * @constructor\n     */\n    constructor({ getTimeSinceLastServerResponse, onPingThresholdExceeded, pingOptions = {} }) {\n        super();\n        this.failedPings = 0;\n        this._onPingThresholdExceeded = onPingThresholdExceeded;\n        this._getTimeSinceLastServerResponse = getTimeSinceLastServerResponse;\n\n        this.pingInterval = typeof pingOptions.interval === 'number' ? pingOptions.interval : PING_DEFAULT_INTERVAL;\n        this.pingTimeout = typeof pingOptions.timeout === 'number' ? pingOptions.timeout : PING_DEFAULT_TIMEOUT;\n        this.pingThreshold = typeof pingOptions.threshold === 'number'\n            ? pingOptions.threshold : PING_DEFAULT_THRESHOLD;\n\n        // The number of timestamps of send pings to keep.\n        // The current value is 2 minutes.\n        this.pingTimestampsToKeep = Math.round(120000 / this.pingInterval);\n        this.pingExecIntervals = new Array(this.pingTimestampsToKeep);\n    }\n\n    /**\n     * Initializes the plugin. Method called by Strophe.\n     * @param connection Strophe connection instance.\n     */\n    init(connection) {\n        super.init(connection);\n        Strophe.addNamespace('PING', 'urn:xmpp:ping');\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Sends \"ping\" to given <tt>jid</tt>\n     * @param jid the JID to which ping request will be sent.\n     * @param success callback called on success.\n     * @param error callback called on error.\n     * @param timeout ms how long are we going to wait for the response. On\n     * timeout <tt>error<//t> callback is called with undefined error argument.\n     */\n    ping(jid, success, error, timeout) {\n        this._addPingExecutionTimestamp();\n\n        const iq = $iq({\n            type: 'get',\n            to: jid\n        });\n\n        iq.c('ping', { xmlns: Strophe.NS.PING });\n        this.connection.sendIQ2(iq, { timeout })\n            .then(success, error);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Starts to send ping in given interval to specified remote JID.\n     * This plugin supports only one such task and <tt>stopInterval</tt>\n     * must be called before starting a new one.\n     * @param remoteJid remote JID to which ping requests will be sent to.\n     */\n    startInterval(remoteJid) {\n        clearInterval(this.intervalId);\n        this.intervalId = window.setInterval(() => {\n\n            // when there were some server responses in the interval since the last time we checked (_lastServerCheck)\n            // let's skip the ping\n\n            const now = Date.now();\n\n            if (this._getTimeSinceLastServerResponse() < now - this._lastServerCheck) {\n                // do this just to keep in sync the intervals so we can detect suspended device\n                this._addPingExecutionTimestamp();\n\n                this._lastServerCheck = now;\n                this.failedPings = 0;\n\n                return;\n            }\n\n            this.ping(remoteJid, () => {\n                // server response is measured on raw input and ping response time is measured after all the xmpp\n                // processing is done in js, so there can be some misalignment when we do the check above.\n                // That's why we store the last time we got the response\n                this._lastServerCheck = this._getTimeSinceLastServerResponse() + Date.now();\n\n                this.failedPings = 0;\n            }, error => {\n                this.failedPings += 1;\n                const errmsg = `Ping ${error ? 'error' : 'timeout'}`;\n\n                if (this.failedPings >= this.pingThreshold) {\n                    GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n                    logger.error(errmsg, error);\n                    this._onPingThresholdExceeded && this._onPingThresholdExceeded();\n                } else {\n                    logger.warn(errmsg, error);\n                }\n            }, this.pingTimeout);\n        }, this.pingInterval);\n        logger.info(`XMPP pings will be sent every ${this.pingInterval} ms`);\n    }\n\n    /**\n     * Stops current \"ping\"  interval task.\n     */\n    stopInterval() {\n        if (this.intervalId) {\n            window.clearInterval(this.intervalId);\n            this.intervalId = null;\n            this.failedPings = 0;\n            logger.info('Ping interval cleared');\n        }\n    }\n\n    /**\n     * Adds the current time to the array of send ping timestamps.\n     * @private\n     */\n    _addPingExecutionTimestamp() {\n        this.pingExecIntervals.push(new Date().getTime());\n\n        // keep array length to PING_TIMESTAMPS_TO_KEEP\n        if (this.pingExecIntervals.length > this.pingTimestampsToKeep) {\n            this.pingExecIntervals.shift();\n        }\n    }\n\n    /**\n     * Returns the maximum time between the recent sent pings, if there is a\n     * big value it means the computer was inactive for some time(suspended).\n     * Checks the maximum gap between sending pings, considering and the\n     * current time. Trying to detect computer inactivity (sleep).\n     *\n     * @returns {int} the time ping was suspended, if it was not 0 is returned.\n     */\n    getPingSuspendTime() {\n        const pingIntervals = this.pingExecIntervals.slice();\n\n        // we need current time, as if ping was sent now\n        // if computer sleeps we will get correct interval after next\n        // scheduled ping, bet we sometimes need that interval before waiting\n        // for the next ping, on closing the connection on error.\n        pingIntervals.push(new Date().getTime());\n\n        let maxInterval = 0;\n        let previousTS = pingIntervals[0];\n\n        pingIntervals.forEach(e => {\n            const currentInterval = e - previousTS;\n\n            if (currentInterval > maxInterval) {\n                maxInterval = currentInterval;\n            }\n\n            previousTS = e;\n        });\n\n        // remove the interval between the ping sent\n        // this way in normal execution there is no suspend and the return\n        // will be 0 or close to 0.\n        maxInterval -= this.pingInterval;\n\n        // make sure we do not return less than 0\n        return Math.max(maxInterval, 0);\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport { $pres, Strophe } from 'strophe.js';\nimport 'strophejs-plugin-stream-management';\n\nimport Listenable from '../util/Listenable';\n\nimport ResumeTask from './ResumeTask';\nimport LastSuccessTracker from './StropheLastSuccess';\nimport PingConnectionPlugin from './strophe.ping';\n\nconst logger = getLogger(__filename);\n\n/**\n * The lib-jitsi-meet layer for {@link Strophe.Connection}.\n */\nexport default class XmppConnection extends Listenable {\n    /**\n     * The list of {@link XmppConnection} events.\n     *\n     * @returns {Object}\n     */\n    static get Events() {\n        return {\n            CONN_STATUS_CHANGED: 'CONN_STATUS_CHANGED',\n            CONN_SHARD_CHANGED: 'CONN_SHARD_CHANGED'\n        };\n    }\n\n    /**\n     * The list of Xmpp connection statuses.\n     *\n     * @returns {Strophe.Status}\n     */\n    static get Status() {\n        return Strophe.Status;\n    }\n\n    /**\n     * Initializes new connection instance.\n     *\n     * @param {Object} options\n     * @param {String} options.serviceUrl - The BOSH or WebSocket service URL.\n     * @param {String} options.shard - The BOSH or WebSocket is connecting to this shard.\n     * Useful for detecting when shard changes.\n     * @param {String} [options.enableWebsocketResume=true] - True/false to control the stream resumption functionality.\n     * It will enable automatically by default if supported by the XMPP server.\n     * @param {Number} [options.websocketKeepAlive=60000] - The websocket keep alive interval.\n     * It's the interval + a up to a minute of jitter. Pass -1 to disable.\n     * The keep alive is HTTP GET request to {@link options.serviceUrl} or to {@link options.websocketKeepAliveUrl}.\n     * @param {Number} [options.websocketKeepAliveUrl] - The websocket keep alive url to use if any,\n     * if missing the serviceUrl url will be used.\n     * @param {Object} [options.xmppPing] - The xmpp ping settings.\n     */\n    constructor({ enableWebsocketResume, websocketKeepAlive, websocketKeepAliveUrl, serviceUrl, shard, xmppPing }) {\n        super();\n        this._options = {\n            enableWebsocketResume: typeof enableWebsocketResume === 'undefined' ? true : enableWebsocketResume,\n            pingOptions: xmppPing,\n            shard,\n            websocketKeepAlive: typeof websocketKeepAlive === 'undefined' ? 60 * 1000 : Number(websocketKeepAlive),\n            websocketKeepAliveUrl\n        };\n\n        this._stropheConn = new Strophe.Connection(serviceUrl);\n        this._usesWebsocket = serviceUrl.startsWith('ws:') || serviceUrl.startsWith('wss:');\n\n        // The default maxRetries is 5, which is too long.\n        this._stropheConn.maxRetries = 3;\n\n        this._rawInputTracker = new LastSuccessTracker();\n        this._rawInputTracker.startTracking(this, this._stropheConn);\n\n        this._resumeTask = new ResumeTask(this._stropheConn);\n\n        /**\n         * @typedef DeferredSendIQ Object\n         * @property {Element} iq - The IQ to send.\n         * @property {function} resolve - The resolve method of the deferred Promise.\n         * @property {function} reject - The reject method of the deferred Promise.\n         * @property {number} timeout - The ID of the timeout task that needs to be cleared, before sending the IQ.\n         */\n        /**\n         * Deferred IQs to be sent upon reconnect.\n         * @type {Array<DeferredSendIQ>}\n         * @private\n         */\n        this._deferredIQs = [];\n\n        // Ping plugin is mandatory for the Websocket mode to work correctly. It's used to detect when the connection\n        // is broken (WebSocket/TCP connection not closed gracefully).\n        this.addConnectionPlugin(\n            'ping',\n            new PingConnectionPlugin({\n                getTimeSinceLastServerResponse: () => this.getTimeSinceLastSuccess(),\n                onPingThresholdExceeded: () => this._onPingErrorThresholdExceeded(),\n                pingOptions: xmppPing\n            }));\n\n        // tracks whether this is the initial connection or a reconnect\n        this._oneSuccessfulConnect = false;\n    }\n\n    /**\n     * A getter for the connected state.\n     *\n     * @returns {boolean}\n     */\n    get connected() {\n        const websocket = this._stropheConn && this._stropheConn._proto && this._stropheConn._proto.socket;\n\n        return (this._status === Strophe.Status.CONNECTED || this._status === Strophe.Status.ATTACHED)\n            && (!this.isUsingWebSocket || (websocket && websocket.readyState === WebSocket.OPEN));\n    }\n\n    /**\n     * Retrieves the feature discovery plugin instance.\n     *\n     * @returns {Strophe.Connection.disco}\n     */\n    get disco() {\n        return this._stropheConn.disco;\n    }\n\n    /**\n     * A getter for the disconnecting state.\n     *\n     * @returns {boolean}\n     */\n    get disconnecting() {\n        return this._stropheConn.disconnecting === true;\n    }\n\n    /**\n     * A getter for the domain.\n     *\n     * @returns {string|null}\n     */\n    get domain() {\n        return this._stropheConn.domain;\n    }\n\n    /**\n     * Tells if Websocket is used as the transport for the current XMPP connection. Returns true for Websocket or false\n     * for BOSH.\n     * @returns {boolean}\n     */\n    get isUsingWebSocket() {\n        return this._usesWebsocket;\n    }\n\n    /**\n     * A getter for the JID.\n     *\n     * @returns {string|null}\n     */\n    get jid() {\n        return this._stropheConn.jid;\n    }\n\n    /**\n     * Returns headers for the last BOSH response received.\n     *\n     * @returns {string}\n     */\n    get lastResponseHeaders() {\n        return this._stropheConn._proto && this._stropheConn._proto.lastResponseHeaders;\n    }\n\n    /**\n     * A getter for the logger plugin instance.\n     *\n     * @returns {*}\n     */\n    get logger() {\n        return this._stropheConn.logger;\n    }\n\n    /**\n     * A getter for the connection options.\n     *\n     * @returns {*}\n     */\n    get options() {\n        return this._stropheConn.options;\n    }\n\n    /**\n     * A getter for the domain to be used for ping.\n     */\n    get pingDomain() {\n        return this._options.pingOptions?.domain || this.domain;\n    }\n\n    /**\n     * A getter for the service URL.\n     *\n     * @returns {string}\n     */\n    get service() {\n        return this._stropheConn.service;\n    }\n\n    /**\n     * Sets new value for shard.\n     * @param value the new shard value.\n     */\n    set shard(value) {\n        this._options.shard = value;\n\n        // shard setting changed so let's schedule a new keep-alive check if connected\n        if (this._oneSuccessfulConnect) {\n            this._maybeStartWSKeepAlive();\n        }\n    }\n\n    /**\n     * Returns the current connection status.\n     *\n     * @returns {Strophe.Status}\n     */\n    get status() {\n        return this._status;\n    }\n\n    /**\n     * Adds a connection plugin to this instance.\n     *\n     * @param {string} name - The name of the plugin or rather a key under which it will be stored on this connection\n     * instance.\n     * @param {ConnectionPluginListenable} plugin - The plugin to add.\n     */\n    addConnectionPlugin(name, plugin) {\n        this[name] = plugin;\n        plugin.init(this);\n    }\n\n    /**\n     * See {@link Strophe.Connection.addHandler}\n     *\n     * @returns {void}\n     */\n    addHandler(...args) {\n        this._stropheConn.addHandler(...args);\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Wraps {@link Strophe.Connection.attach} method in order to intercept the connection status updates.\n     * See {@link Strophe.Connection.attach} for the params description.\n     *\n     * @returns {void}\n     */\n    attach(jid, sid, rid, callback, ...args) {\n        this._stropheConn.attach(jid, sid, rid, this._stropheConnectionCb.bind(this, callback), ...args);\n    }\n\n    /**\n     * Wraps Strophe.Connection.connect method in order to intercept the connection status updates.\n     * See {@link Strophe.Connection.connect} for the params description.\n     *\n     * @returns {void}\n     */\n    connect(jid, pass, callback, ...args) {\n        this._stropheConn.connect(jid, pass, this._stropheConnectionCb.bind(this, callback), ...args);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Handles {@link Strophe.Status} updates for the current connection.\n     *\n     * @param {function} targetCallback - The callback passed by the {@link XmppConnection} consumer to one of\n     * the connect methods.\n     * @param {Strophe.Status} status - The new connection status.\n     * @param {*} args - The rest of the arguments passed by Strophe.\n     * @private\n     */\n    _stropheConnectionCb(targetCallback, status, ...args) {\n        this._status = status;\n\n        let blockCallback = false;\n\n        if (status === Strophe.Status.CONNECTED || status === Strophe.Status.ATTACHED) {\n            this._maybeEnableStreamResume();\n\n            // after connecting - immediately check whether shard changed,\n            // we need this only when using websockets as bosh checks headers from every response\n            if (this._usesWebsocket && this._oneSuccessfulConnect) {\n                this._keepAliveAndCheckShard();\n            }\n            this._oneSuccessfulConnect = true;\n\n            this._maybeStartWSKeepAlive();\n            this._processDeferredIQs();\n            this._resumeTask.cancel();\n            this.ping.startInterval(this._options.pingOptions?.domain || this.domain);\n        } else if (status === Strophe.Status.DISCONNECTED) {\n            this.ping.stopInterval();\n\n            // FIXME add RECONNECTING state instead of blocking the DISCONNECTED update\n            blockCallback = this._tryResumingConnection();\n            if (!blockCallback) {\n                clearTimeout(this._wsKeepAlive);\n            }\n        }\n\n        if (!blockCallback) {\n            targetCallback(status, ...args);\n            this.eventEmitter.emit(XmppConnection.Events.CONN_STATUS_CHANGED, status);\n        }\n    }\n\n    /**\n     * Clears the list of IQs and rejects deferred Promises with an error.\n     *\n     * @private\n     */\n    _clearDeferredIQs() {\n        for (const deferred of this._deferredIQs) {\n            deferred.reject(new Error('disconnect'));\n        }\n        this._deferredIQs = [];\n    }\n\n    /**\n     * The method is meant to be used for testing. It's a shortcut for closing the WebSocket.\n     *\n     * @returns {void}\n     */\n    closeWebsocket() {\n        if (this._stropheConn && this._stropheConn._proto) {\n            this._stropheConn._proto._closeSocket();\n            this._stropheConn._proto._onClose(null);\n        }\n    }\n\n    /**\n     * See {@link Strophe.Connection.disconnect}.\n     *\n     * @returns {void}\n     */\n    disconnect(...args) {\n        this._resumeTask.cancel();\n        clearTimeout(this._wsKeepAlive);\n        this._clearDeferredIQs();\n        this._stropheConn.disconnect(...args);\n    }\n\n    /**\n     * See {@link Strophe.Connection.flush}.\n     *\n     * @returns {void}\n     */\n    flush(...args) {\n        this._stropheConn.flush(...args);\n    }\n\n    /**\n     * See {@link LastRequestTracker.getTimeSinceLastSuccess}.\n     *\n     * @returns {number|null}\n     */\n    getTimeSinceLastSuccess() {\n        return this._rawInputTracker.getTimeSinceLastSuccess();\n    }\n\n    /**\n     * See {@link LastRequestTracker.getLastFailedMessage}.\n     *\n     * @returns {string|null}\n     */\n    getLastFailedMessage() {\n        return this._rawInputTracker.getLastFailedMessage();\n    }\n\n    /**\n     * Requests a resume token from the server if enabled and all requirements are met.\n     *\n     * @private\n     */\n    _maybeEnableStreamResume() {\n        if (!this._options.enableWebsocketResume) {\n\n            return;\n        }\n\n        const { streamManagement } = this._stropheConn;\n\n        if (!this.isUsingWebSocket) {\n            logger.warn('Stream resume enabled, but WebSockets are not enabled');\n        } else if (!streamManagement) {\n            logger.warn('Stream resume enabled, but Strophe streamManagement plugin is not installed');\n        } else if (!streamManagement.isSupported()) {\n            logger.warn('Stream resume enabled, but XEP-0198 is not supported by the server');\n        } else if (!streamManagement.getResumeToken()) {\n            logger.info('Enabling XEP-0198 stream management');\n            streamManagement.enable(/* resume */ true);\n        }\n    }\n\n    /**\n     * Starts the Websocket keep alive if enabled.\n     *\n     * @private\n     * @returns {void}\n     */\n    _maybeStartWSKeepAlive() {\n        const { websocketKeepAlive } = this._options;\n\n        if (this._usesWebsocket && websocketKeepAlive > 0) {\n            this._wsKeepAlive || logger.info(`WebSocket keep alive interval: ${websocketKeepAlive}ms`);\n            clearTimeout(this._wsKeepAlive);\n\n            const intervalWithJitter = /* base */ websocketKeepAlive + /* jitter */ (Math.random() * 60 * 1000);\n\n            logger.debug(`Scheduling next WebSocket keep-alive in ${intervalWithJitter}ms`);\n\n            this._wsKeepAlive = setTimeout(\n                () => this._keepAliveAndCheckShard()\n                    .then(() => this._maybeStartWSKeepAlive()),\n                intervalWithJitter);\n        }\n    }\n\n    /**\n     * Do a http GET to the shard and if shard change will throw an event.\n     *\n     * @private\n     * @returns {Promise}\n     */\n    _keepAliveAndCheckShard() {\n        const { shard, websocketKeepAliveUrl } = this._options;\n        const url = websocketKeepAliveUrl ? websocketKeepAliveUrl\n            : this.service.replace('wss://', 'https://').replace('ws://', 'http://');\n\n        return fetch(url)\n            .then(response => {\n\n                // skips header checking if there is no info in options\n                if (!shard) {\n                    return;\n                }\n\n                const responseShard = response.headers.get('x-jitsi-shard');\n\n                if (responseShard !== shard) {\n                    logger.error(\n                        `Detected that shard changed from ${shard} to ${responseShard}`);\n                    this.eventEmitter.emit(XmppConnection.Events.CONN_SHARD_CHANGED);\n                }\n            })\n            .catch(error => {\n                logger.error(`Websocket Keep alive failed for url: ${url}`, { error });\n            });\n    }\n\n    /**\n     * Goes over the list of {@link DeferredSendIQ} tasks and sends them.\n     *\n     * @private\n     * @returns {void}\n     */\n    _processDeferredIQs() {\n        for (const deferred of this._deferredIQs) {\n            if (deferred.iq) {\n                clearTimeout(deferred.timeout);\n\n                const timeLeft = Date.now() - deferred.start;\n\n                this.sendIQ(\n                    deferred.iq,\n                    result => deferred.resolve(result),\n                    error => deferred.reject(error),\n                    timeLeft);\n            }\n        }\n\n        this._deferredIQs = [];\n    }\n\n    /**\n     * Send a stanza. This function is called to push data onto the send queue to go out over the wire.\n     *\n     * @param {Element|Strophe.Builder} stanza - The stanza to send.\n     * @returns {void}\n     */\n    send(stanza) {\n        if (!this.connected) {\n            throw new Error('Not connected');\n        }\n        this._stropheConn.send(stanza);\n    }\n\n    /**\n     * Helper function to send IQ stanzas.\n     *\n     * @param {Element} elem - The stanza to send.\n     * @param {Function} callback - The callback function for a successful request.\n     * @param {Function} errback - The callback function for a failed or timed out request.  On timeout, the stanza will\n     * be null.\n     * @param {number} timeout - The time specified in milliseconds for a timeout to occur.\n     * @returns {number} - The id used to send the IQ.\n     */\n    sendIQ(elem, callback, errback, timeout) {\n        if (!this.connected) {\n            errback('Not connected');\n\n            return;\n        }\n\n        return this._stropheConn.sendIQ(elem, callback, errback, timeout);\n    }\n\n    /**\n     * Sends an IQ immediately if connected or puts it on the send queue otherwise(in contrary to other send methods\n     * which would fail immediately if disconnected).\n     *\n     * @param {Element} iq - The IQ to send.\n     * @param {number} timeout - How long to wait for the response. The time when the connection is reconnecting is\n     * included, which means that the IQ may never be sent and still fail with a timeout.\n     */\n    sendIQ2(iq, { timeout }) {\n        return new Promise((resolve, reject) => {\n            if (this.connected) {\n                this.sendIQ(\n                    iq,\n                    result => resolve(result),\n                    error => reject(error),\n                    timeout);\n            } else {\n                const deferred = {\n                    iq,\n                    resolve,\n                    reject,\n                    start: Date.now(),\n                    timeout: setTimeout(() => {\n                        // clears the IQ on timeout and invalidates the deferred task\n                        deferred.iq = undefined;\n\n                        // Strophe calls with undefined on timeout\n                        reject(undefined);\n                    }, timeout)\n                };\n\n                this._deferredIQs.push(deferred);\n            }\n        });\n    }\n\n    /**\n     * Called by the ping plugin when ping fails too many times.\n     *\n     * @returns {void}\n     */\n    _onPingErrorThresholdExceeded() {\n        if (this.isUsingWebSocket) {\n            logger.warn('Ping error threshold exceeded - killing the WebSocket');\n            this.closeWebsocket();\n        }\n    }\n\n    /**\n     *  Helper function to send presence stanzas. The main benefit is for sending presence stanzas for which you expect\n     *  a responding presence stanza with the same id (for example when leaving a chat room).\n     *\n     * @param {Element} elem - The stanza to send.\n     * @param {Function} callback - The callback function for a successful request.\n     * @param {Function} errback - The callback function for a failed or timed out request. On timeout, the stanza will\n     * be null.\n     * @param {number} timeout - The time specified in milliseconds for a timeout to occur.\n     * @returns {number} - The id used to send the presence.\n     */\n    sendPresence(elem, callback, errback, timeout) {\n        if (!this.connected) {\n            errback('Not connected');\n\n            return;\n        }\n        this._stropheConn.sendPresence(elem, callback, errback, timeout);\n    }\n\n    /**\n     * The method gracefully closes the BOSH connection by using 'navigator.sendBeacon'.\n     *\n     * @returns {boolean} - true if the beacon was sent.\n     */\n    sendUnavailableBeacon() {\n        if (!navigator.sendBeacon || this._stropheConn.disconnecting || !this._stropheConn.connected) {\n            return false;\n        }\n\n        this._stropheConn._changeConnectStatus(Strophe.Status.DISCONNECTING);\n        this._stropheConn.disconnecting = true;\n\n        const body = this._stropheConn._proto._buildBody()\n            .attrs({\n                type: 'terminate'\n            });\n        const pres = $pres({\n            xmlns: Strophe.NS.CLIENT,\n            type: 'unavailable'\n        });\n\n        body.cnode(pres.tree());\n\n        const res = navigator.sendBeacon(\n            this.service.indexOf('https://') === -1 ? `https:${this.service}` : this.service,\n            Strophe.serialize(body.tree()));\n\n        logger.info(`Successfully send unavailable beacon ${res}`);\n\n        this._stropheConn._proto._abortAllRequests();\n        this._stropheConn._doDisconnect();\n\n        return true;\n    }\n\n    /**\n     * Tries to use stream management plugin to resume dropped XMPP connection. The streamManagement plugin clears\n     * the resume token if any connection error occurs which would put it in unrecoverable state, so as long as\n     * the token is present it means the connection can be resumed.\n     *\n     * @private\n     * @returns {boolean}\n     */\n    _tryResumingConnection() {\n        const { streamManagement } = this._stropheConn;\n        const resumeToken = streamManagement && streamManagement.getResumeToken();\n\n        if (resumeToken) {\n            this._resumeTask.schedule();\n\n            return true;\n        }\n\n        return false;\n    }\n}\n","export enum JitsiTranscriptionStatus {\n    /**\n     * The transcription is on.\n     */\n    ON = 'on',\n\n    /**\n     * The transcription is off.\n     */\n    OFF = 'off'\n}\n\n// exported for backward compatibility\nexport const ON = JitsiTranscriptionStatus.ON;\nexport const OFF = JitsiTranscriptionStatus.OFF;\n","import { getLogger } from '@jitsi/logger';\nimport { $msg } from 'strophe.js';\n\nimport { MediaType } from '../../service/RTC/MediaType';\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * The AVModeration logic.\n */\nexport default class AVModeration {\n\n    /**\n     * Constructs AV moderation room.\n     *\n     * @param {ChatRoom} room the main room.\n     */\n    constructor(room) {\n        this._xmpp = room.xmpp;\n\n        this._mainRoom = room;\n\n        this._moderationEnabledByType = {\n            [MediaType.AUDIO]: false,\n            [MediaType.VIDEO]: false\n        };\n\n        this._whitelistAudio = [];\n        this._whitelistVideo = [];\n\n        this._onMessage = this._onMessage.bind(this);\n        this._xmpp.addListener(XMPPEvents.AV_MODERATION_RECEIVED, this._onMessage);\n    }\n\n    /**\n     * Stops listening for events.\n     */\n    dispose() {\n        this._xmpp.removeListener(XMPPEvents.AV_MODERATION_RECEIVED, this._onMessage);\n    }\n\n    /**\n     * Whether AV moderation is supported on backend.\n     *\n     * @returns {boolean} whether AV moderation is supported on backend.\n     */\n    isSupported() {\n        return Boolean(this._xmpp.avModerationComponentAddress);\n    }\n\n    /**\n     * Enables or disables AV Moderation by sending a msg with command to the component.\n     */\n    enable(state, mediaType) {\n        if (!this.isSupported() || !this._mainRoom.isModerator()) {\n            logger.error(`Cannot enable:${state} AV moderation supported:${this.isSupported()},\n                moderator:${this._mainRoom.isModerator()}`);\n\n            return;\n        }\n\n        if (state === this._moderationEnabledByType[mediaType]) {\n            logger.warn(`Moderation already in state:${state} for mediaType:${mediaType}`);\n\n            return;\n        }\n\n        // send the enable/disable message\n        const msg = $msg({ to: this._xmpp.avModerationComponentAddress });\n\n        msg.c('av_moderation', {\n            enable: state,\n            mediaType\n        }).up();\n\n        this._xmpp.connection.send(msg);\n    }\n\n    /**\n     * Approves that a participant can unmute by sending a msg with its jid to the component.\n     */\n    approve(mediaType, jid) {\n        if (!this.isSupported() || !this._mainRoom.isModerator()) {\n            logger.error(`Cannot approve in AV moderation supported:${this.isSupported()},\n                moderator:${this._mainRoom.isModerator()}`);\n\n            return;\n        }\n\n        // send a message to whitelist the jid and approve it to unmute\n        const msg = $msg({ to: this._xmpp.avModerationComponentAddress });\n\n        msg.c('av_moderation', {\n            mediaType,\n            jidToWhitelist: jid }).up();\n\n        this._xmpp.connection.send(msg);\n    }\n\n    /**\n     * Rejects that a participant can unmute by sending a msg with its jid to the component.\n     */\n    reject(mediaType, jid) {\n        if (!this.isSupported() || !this._mainRoom.isModerator()) {\n            logger.error(`Cannot reject in AV moderation supported:${this.isSupported()},\n                moderator:${this._mainRoom.isModerator()}`);\n\n            return;\n        }\n\n        // send a message to remove from whitelist the jid and reject it to unmute\n        const msg = $msg({ to: this._xmpp.avModerationComponentAddress });\n\n        msg.c('av_moderation', {\n            mediaType,\n            jidToBlacklist: jid\n        }).up();\n\n        this._xmpp.connection.send(msg);\n    }\n\n    /**\n     * Receives av_moderation parsed messages as json.\n     * @param obj the parsed json content of the message to process.\n     * @private\n     */\n    _onMessage(obj) {\n        const { removed, mediaType: media, enabled, approved, actor, whitelists: newWhitelists } = obj;\n\n        if (newWhitelists) {\n            const oldList = media === MediaType.AUDIO\n                ? this._whitelistAudio\n                : this._whitelistVideo;\n            const newList = Array.isArray(newWhitelists[media]) ? newWhitelists[media] : [];\n\n            if (removed) {\n                oldList.filter(x => !newList.includes(x))\n                    .forEach(jid => this._xmpp.eventEmitter\n                        .emit(XMPPEvents.AV_MODERATION_PARTICIPANT_REJECTED, media, jid));\n            } else {\n                newList.filter(x => !oldList.includes(x))\n                    .forEach(jid => this._xmpp.eventEmitter\n                        .emit(XMPPEvents.AV_MODERATION_PARTICIPANT_APPROVED, media, jid));\n            }\n\n            if (media === MediaType.AUDIO) {\n                this._whitelistAudio = newList;\n            } else {\n                this._whitelistVideo = newList;\n            }\n        } else if (enabled !== undefined && this._moderationEnabledByType[media] !== enabled) {\n            this._moderationEnabledByType[media] = enabled;\n\n            this._xmpp.eventEmitter.emit(XMPPEvents.AV_MODERATION_CHANGED, enabled, media, actor);\n        } else if (removed) {\n            this._xmpp.eventEmitter.emit(XMPPEvents.AV_MODERATION_REJECTED, media);\n        } else if (approved) {\n            this._xmpp.eventEmitter.emit(XMPPEvents.AV_MODERATION_APPROVED, media);\n        }\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport { $msg, Strophe } from 'strophe.js';\n\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\n\nconst FEATURE_KEY = 'features/breakout-rooms';\nconst BREAKOUT_ROOM_ACTIONS = {\n    ADD: `${FEATURE_KEY}/add`,\n    REMOVE: `${FEATURE_KEY}/remove`,\n    MOVE_TO_ROOM: `${FEATURE_KEY}/move-to-room`\n};\nconst BREAKOUT_ROOM_EVENTS = {\n    MOVE_TO_ROOM: `${FEATURE_KEY}/move-to-room`,\n    UPDATE: `${FEATURE_KEY}/update`\n};\n\nconst logger = getLogger(__filename);\n\n/**\n * Helper class for handling breakout rooms.\n */\nexport default class BreakoutRooms {\n\n    /**\n     * Constructs lobby room.\n     *\n     * @param {ChatRoom} room the room we are in.\n     */\n    constructor(room) {\n        this.room = room;\n\n        this._handleMessages = this._handleMessages.bind(this);\n        this.room.xmpp.addListener(XMPPEvents.BREAKOUT_ROOMS_EVENT, this._handleMessages);\n\n        this._rooms = {};\n    }\n\n    /**\n     * Stops listening for events.\n     */\n    dispose() {\n        this.room.xmpp.removeListener(XMPPEvents.BREAKOUT_ROOMS_EVENT, this._handleMessages);\n    }\n\n    /**\n     * Creates a breakout room with the given subject.\n     *\n     * @param {string} subject - A subject for the breakout room.\n     */\n    createBreakoutRoom(subject) {\n        if (!this.isSupported() || !this.room.isModerator()) {\n            logger.error(`Cannot create breakout room - supported:${this.isSupported()},\n                moderator:${this.room.isModerator()}`);\n\n            return;\n        }\n\n        const message = {\n            type: BREAKOUT_ROOM_ACTIONS.ADD,\n            subject\n        };\n\n        this._sendMessage(message);\n    }\n\n    /**\n     * Removes a breakout room.\n     *\n     * @param {string} breakoutRoomJid - JID of the room to be removed.\n     */\n    removeBreakoutRoom(breakoutRoomJid) {\n        if (!this.isSupported() || !this.room.isModerator()) {\n            logger.error(`Cannot remove breakout room - supported:${this.isSupported()},\n                moderator:${this.room.isModerator()}`);\n\n            return;\n        }\n\n        const message = {\n            type: BREAKOUT_ROOM_ACTIONS.REMOVE,\n            breakoutRoomJid\n        };\n\n        this._sendMessage(message);\n    }\n\n    /**\n     * Sends the given participant to the given room.\n     *\n     * @param {string} participantJid - JID of the participant to be sent to a room.\n     * @param {string} roomJid - JID of the target room.\n     */\n    sendParticipantToRoom(participantJid, roomJid) {\n        if (!this.isSupported() || !this.room.isModerator()) {\n            logger.error(`Cannot send participant to room - supported:${this.isSupported()},\n                moderator:${this.room.isModerator()}`);\n\n            return;\n        }\n\n        const message = {\n            type: BREAKOUT_ROOM_ACTIONS.MOVE_TO_ROOM,\n            participantJid,\n            roomJid\n        };\n\n        this._sendMessage(message);\n    }\n\n    /**\n     * Whether Breakout Rooms support is enabled in the backend or not.\n     */\n    isSupported() {\n        return Boolean(this.getComponentAddress());\n    }\n\n    /**\n     * Gets the address of the Breakout Rooms XMPP component.\n     *\n     * @returns The address of the component.\n     */\n    getComponentAddress() {\n        return this.room.xmpp.breakoutRoomsComponentAddress;\n    }\n\n    /**\n     * Stores if the current room is a breakout room.\n     *\n     * @param {boolean} isBreakoutRoom - Whether this room is a breakout room.\n     */\n    _setIsBreakoutRoom(isBreakoutRoom) {\n        this._isBreakoutRoom = isBreakoutRoom;\n    }\n\n    /**\n     * Checks whether this room is a breakout room.\n     *\n     * @returns True if the room is a breakout room, false otherwise.\n     */\n    isBreakoutRoom() {\n        if (typeof this._isBreakoutRoom !== 'undefined') {\n            return this._isBreakoutRoom;\n        }\n\n        // Use heuristic, helpful for checking in the MUC_JOINED event.\n        return Strophe.getDomainFromJid(this.room.myroomjid) === this.getComponentAddress();\n    }\n\n    /**\n     * Sets the main room JID associated with this breakout room. Only applies when\n     * in a breakout room.\n     *\n     * @param {string} jid - The main room JID.\n     */\n    _setMainRoomJid(jid) {\n        this._mainRoomJid = jid;\n    }\n\n    /**\n     * Gets the main room's JID associated with this breakout room.\n     *\n     * @returns The main room JID.\n     */\n    getMainRoomJid() {\n        return this._mainRoomJid;\n    }\n\n    /**\n     * Handles a message for managing breakout rooms.\n     *\n     * @param {object} payload - Arbitrary data.\n     */\n    _handleMessages(payload) {\n        switch (payload.event) {\n        case BREAKOUT_ROOM_EVENTS.MOVE_TO_ROOM:\n            this.room.eventEmitter.emit(XMPPEvents.BREAKOUT_ROOMS_MOVE_TO_ROOM, payload.roomJid);\n            break;\n        case BREAKOUT_ROOM_EVENTS.UPDATE: {\n            this._rooms = payload.rooms;\n            this.room.eventEmitter.emit(XMPPEvents.BREAKOUT_ROOMS_UPDATED, payload);\n            break;\n        }\n        }\n    }\n\n    /**\n     * Helper to send a breakout rooms message to the component.\n     *\n     * @param {Object} message - Command that needs to be sent.\n     */\n    _sendMessage(message) {\n        const msg = $msg({ to: this.getComponentAddress() });\n\n        msg.c('breakout_rooms', message).up();\n\n        this.room.xmpp.connection.send(msg);\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport { $msg, Strophe } from 'strophe.js';\n\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * The command type for updating a lobby participant's e-mail address.\n *\n * @type {string}\n */\nconst EMAIL_COMMAND = 'email';\n\n/**\n * The Lobby room implementation. Setting a room to members only, joining the lobby room\n * approving or denying access to participants from the lobby room.\n */\nexport default class Lobby {\n\n    /**\n     * Constructs lobby room.\n     *\n     * @param {ChatRoom} room the main room.\n     */\n    constructor(room) {\n        this.xmpp = room.xmpp;\n        this.mainRoom = room;\n\n        const maybeJoinLobbyRoom = this._maybeJoinLobbyRoom.bind(this);\n\n        this.mainRoom.addEventListener(\n            XMPPEvents.LOCAL_ROLE_CHANGED,\n            maybeJoinLobbyRoom);\n\n        this.mainRoom.addEventListener(\n            XMPPEvents.MUC_MEMBERS_ONLY_CHANGED,\n            maybeJoinLobbyRoom);\n\n        this.mainRoom.addEventListener(\n            XMPPEvents.ROOM_CONNECT_MEMBERS_ONLY_ERROR,\n            jid => {\n                this.lobbyRoomJid = jid;\n            });\n    }\n\n    /**\n     * Whether lobby is supported on backend.\n     *\n     * @returns {boolean} whether lobby is supported on backend.\n     */\n    isSupported() {\n        return this.xmpp.lobbySupported;\n    }\n\n    /**\n     * Enables lobby by setting the main room to be members only and joins the lobby chat room.\n     *\n     * @returns {Promise}\n     */\n    enable() {\n        if (!this.isSupported()) {\n            return Promise.reject(new Error('Lobby not supported!'));\n        }\n\n        return new Promise((resolve, reject) => {\n            this.mainRoom.setMembersOnly(true, resolve, reject);\n        });\n    }\n\n    /**\n     * Disable lobby by setting the main room to be non members only and levaes the lobby chat room if joined.\n     *\n     * @returns {void}\n     */\n    disable() {\n        if (!this.isSupported() || !this.mainRoom.isModerator()\n                || !this.lobbyRoom || !this.mainRoom.membersOnlyEnabled) {\n            return;\n        }\n\n        this.mainRoom.setMembersOnly(false);\n    }\n\n    /**\n     * Broadcast a message to all participants in the lobby room\n     * @param {Object} message The message to send\n     *\n     * @returns {void}\n     */\n    sendMessage(message) {\n        if (this.lobbyRoom) {\n            this.lobbyRoom.sendMessage(JSON.stringify(message), 'json-message');\n        }\n    }\n\n    /**\n     * Sends a private message to a participant in a lobby room.\n     * @param {string} id The message to send\n     * @param {Object} message The message to send\n     *\n     * @returns {void}\n     */\n    sendPrivateMessage(id, message) {\n        if (this.lobbyRoom) {\n            this.lobbyRoom.sendPrivateMessage(id, JSON.stringify(message), 'json-message');\n        }\n    }\n\n    /**\n     * Gets the local id for a participant in a lobby room.\n     * This is used for lobby room private chat messages.\n     *\n     * @returns {string}\n     */\n    getLocalId() {\n        if (this.lobbyRoom) {\n            return Strophe.getResourceFromJid(this.lobbyRoom.myroomjid);\n        }\n    }\n\n    /**\n     * Adds a message listener to the lobby room.\n     * @param {Function} listener The listener function,\n     * called when a new message is received in the lobby room.\n     *\n     * @returns {Function} Handler returned to be able to remove it later.\n     */\n    addMessageListener(listener) {\n        if (this.lobbyRoom) {\n            const handler = (participantId, message) => {\n                listener(message, Strophe.getResourceFromJid(participantId));\n            };\n\n            this.lobbyRoom.on(XMPPEvents.JSON_MESSAGE_RECEIVED, handler);\n\n            return handler;\n        }\n    }\n\n    /**\n     * Remove a message handler from the lobby room.\n     * @param {Function} handler The handler function to remove.\n     *\n     * @returns {void}\n     */\n    removeMessageHandler(handler) {\n        if (this.lobbyRoom) {\n            this.lobbyRoom.off(XMPPEvents.JSON_MESSAGE_RECEIVED, handler);\n        }\n    }\n\n    /**\n     * Leaves the lobby room.\n     *\n     * @returns {Promise}\n     */\n    leave() {\n        if (this.lobbyRoom) {\n            return this.lobbyRoom.leave()\n                .then(() => {\n                    this.lobbyRoom = undefined;\n                    logger.info('Lobby room left!');\n                })\n                .catch(() => {}); // eslint-disable-line no-empty-function\n        }\n\n        return Promise.reject(\n                new Error('The lobby has already been left'));\n    }\n\n    /**\n     * We had received a jid for the lobby room.\n     *\n     * @param jid the lobby room jid to join.\n     */\n    setLobbyRoomJid(jid) {\n        this.lobbyRoomJid = jid;\n    }\n\n    /**\n     * Checks the state of mainRoom, lobbyRoom and current user role to decide whether to join lobby room.\n     * @private\n     */\n    _maybeJoinLobbyRoom() {\n        if (!this.isSupported()) {\n            return;\n        }\n\n        const isModerator = this.mainRoom.joined && this.mainRoom.isModerator();\n\n        if (isModerator && this.mainRoom.membersOnlyEnabled && !this.lobbyRoom) {\n            // join the lobby\n            this.join()\n                .then(() => logger.info('Joined lobby room'))\n                .catch(e => logger.error('Failed joining lobby', e));\n        }\n    }\n\n    /**\n     * Joins a lobby room setting display name and eventually avatar(using the email provided).\n     *\n     * @param {string} username is required.\n     * @param {string} email is optional.\n     * @returns {Promise} resolves once we join the room.\n     */\n    join(displayName, email) {\n        const isModerator = this.mainRoom.joined && this.mainRoom.isModerator();\n\n        if (!this.lobbyRoomJid) {\n            return Promise.reject(new Error('Missing lobbyRoomJid, cannot join lobby room.'));\n        }\n\n        const roomName = Strophe.getNodeFromJid(this.lobbyRoomJid);\n        const customDomain = Strophe.getDomainFromJid(this.lobbyRoomJid);\n\n        this.lobbyRoom = this.xmpp.createRoom(\n            roomName, {\n                customDomain,\n                disableDiscoInfo: true,\n                disableFocus: true,\n                enableLobby: false\n            }\n        );\n\n        if (displayName) {\n            // remove previously set nickname\n            this.lobbyRoom.addOrReplaceInPresence('nick', {\n                attributes: { xmlns: 'http://jabber.org/protocol/nick' },\n                value: displayName\n            });\n        }\n\n        if (isModerator) {\n            this.lobbyRoom.addPresenceListener(EMAIL_COMMAND, (node, from) => {\n                this.mainRoom.eventEmitter.emit(XMPPEvents.MUC_LOBBY_MEMBER_UPDATED, from, { email: node.value });\n            });\n            this.lobbyRoom.addEventListener(\n                XMPPEvents.MUC_MEMBER_JOINED,\n                // eslint-disable-next-line max-params\n                (from, nick, role, isHiddenDomain, statsID, status, identity, botType, jid) => {\n                    // we need to ignore joins on lobby for participants that are already in the main room\n                    if (Object.values(this.mainRoom.members).find(m => m.jid === jid)) {\n                        return;\n                    }\n\n                    // Check if the user is a member if any breakout room.\n                    for (const room of Object.values(this.mainRoom.getBreakoutRooms()._rooms)) {\n                        if (Object.values(room.participants).find(p => p.jid === jid)) {\n                            return;\n                        }\n                    }\n\n                    // we emit the new event on the main room so we can propagate\n                    // events to the conference\n                    this.mainRoom.eventEmitter.emit(\n                        XMPPEvents.MUC_LOBBY_MEMBER_JOINED,\n                        Strophe.getResourceFromJid(from),\n                        nick,\n                        identity ? identity.avatar : undefined\n                    );\n                });\n            this.lobbyRoom.addEventListener(\n                XMPPEvents.MUC_MEMBER_LEFT, from => {\n                    // we emit the new event on the main room so we can propagate\n                    // events to the conference\n                    this.mainRoom.eventEmitter.emit(\n                        XMPPEvents.MUC_LOBBY_MEMBER_LEFT,\n                        Strophe.getResourceFromJid(from)\n                    );\n                });\n            this.lobbyRoom.addEventListener(\n                XMPPEvents.MUC_DESTROYED,\n                () => {\n                    // let's make sure we emit that all lobby users had left\n                    Object.keys(this.lobbyRoom.members)\n                        .forEach(j => this.mainRoom.eventEmitter.emit(\n                            XMPPEvents.MUC_LOBBY_MEMBER_LEFT, Strophe.getResourceFromJid(j)));\n\n                    this.lobbyRoom.clean();\n\n                    this.lobbyRoom = undefined;\n                    logger.info('Lobby room left(destroyed)!');\n                });\n        } else {\n            // this should only be handled by those waiting in lobby\n            this.lobbyRoom.addEventListener(XMPPEvents.KICKED, isSelfPresence => {\n                if (isSelfPresence) {\n                    this.mainRoom.eventEmitter.emit(XMPPEvents.MUC_DENIED_ACCESS);\n\n                    this.lobbyRoom.clean();\n\n                    return;\n                }\n            });\n\n            // As there is still reference of the main room\n            // the invite will be detected and addressed to its eventEmitter, even though we are not in it\n            // the invite message should be received directly to the xmpp conn in general\n            this.mainRoom.addEventListener(\n                XMPPEvents.INVITE_MESSAGE_RECEIVED,\n                (roomJid, from, txt, invitePassword) => {\n                    logger.debug(`Received approval to join ${roomJid} ${from} ${txt}`);\n                    if (roomJid === this.mainRoom.roomjid) {\n                        // we are now allowed, so let's join\n                        this.mainRoom.join(invitePassword);\n                    }\n                });\n            this.lobbyRoom.addEventListener(\n                XMPPEvents.MUC_DESTROYED,\n                (reason, jid) => {\n                    // we are receiving the jid of the main room\n                    // means we are invited to join, maybe lobby was disabled\n                    if (jid) {\n                        this.mainRoom.join();\n\n                        return;\n                    }\n\n                    this.lobbyRoom.clean();\n\n                    this.mainRoom.eventEmitter.emit(XMPPEvents.MUC_DESTROYED, reason);\n                });\n\n            // If participant retries joining shared password while waiting in the lobby\n            // and succeeds make sure we leave lobby\n            this.mainRoom.addEventListener(\n                XMPPEvents.MUC_JOINED,\n                () => {\n                    this.leave();\n                });\n        }\n\n        return new Promise((resolve, reject) => {\n            this.lobbyRoom.addEventListener(XMPPEvents.MUC_JOINED, () => {\n                resolve();\n\n                // send our email, as we do not handle this on initial presence we need a second one\n                if (email && !isModerator) {\n                    this.lobbyRoom.addOrReplaceInPresence(EMAIL_COMMAND, { value: email })\n                        && this.lobbyRoom.sendPresence();\n                }\n            });\n            this.lobbyRoom.addEventListener(XMPPEvents.ROOM_JOIN_ERROR, reject);\n            this.lobbyRoom.addEventListener(XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR, reject);\n            this.lobbyRoom.addEventListener(XMPPEvents.ROOM_CONNECT_ERROR, reject);\n\n            this.lobbyRoom.join();\n        });\n\n    }\n\n    /**\n     * Should be possible only for moderators.\n     * @param id\n     */\n    denyAccess(id) {\n        if (!this.isSupported() || !this.mainRoom.isModerator()) {\n            return;\n        }\n\n        const jid = Object.keys(this.lobbyRoom.members)\n            .find(j => Strophe.getResourceFromJid(j) === id);\n\n        if (jid) {\n            this.lobbyRoom.kick(jid);\n        } else {\n            logger.error(`Not found member for ${id} in lobby room.`);\n        }\n    }\n\n    /**\n     * Should be possible only for moderators.\n     * @param id\n     */\n    approveAccess(id) {\n        if (!this.isSupported() || !this.mainRoom.isModerator()) {\n            return;\n        }\n\n        // Get the main room JID. If we are in a breakout room we'll use the main\n        // room's lobby.\n        let mainRoomJid = this.mainRoom.roomjid;\n\n        if (this.mainRoom.getBreakoutRooms().isBreakoutRoom()) {\n            mainRoomJid = this.mainRoom.getBreakoutRooms().getMainRoomJid();\n        }\n\n        const memberRoomJid = Object.keys(this.lobbyRoom.members)\n            .find(j => Strophe.getResourceFromJid(j) === id);\n\n        if (memberRoomJid) {\n            const jid = this.lobbyRoom.members[memberRoomJid].jid;\n            const msgToSend\n                = $msg({ to: mainRoomJid })\n                    .c('x', { xmlns: 'http://jabber.org/protocol/muc#user' })\n                    .c('invite', { to: jid });\n\n            this.xmpp.connection.sendIQ(msgToSend,\n                () => { }, // eslint-disable-line no-empty-function\n                e => {\n                    logger.error(`Error sending invite for ${jid}`, e);\n                });\n        } else {\n            logger.error(`Not found member for ${memberRoomJid} in lobby room.`);\n        }\n    }\n}\n","import { jitsiLocalStorage } from '@jitsi/js-utils';\nimport { getLogger } from '@jitsi/logger';\n\nconst logger = getLogger(__filename);\n\nimport UsernameGenerator from '../util/UsernameGenerator';\n\nlet _callStatsUserName;\n\nlet _machineId;\n\n/**\n *\n */\nexport default {\n\n    /**\n     * The storage used to store the settings.\n     */\n    _storage: jitsiLocalStorage,\n\n    /**\n     * Initializes the Settings class.\n     *\n     * @param {Storage|undefined} externalStorage - Object that implements the Storage interface. This object will be\n     * used for storing data instead of jitsiLocalStorage if specified.\n     */\n    init(externalStorage) {\n        this._storage = externalStorage || jitsiLocalStorage;\n    },\n\n    /**\n     * Returns fake username for callstats\n     * @returns {string} fake username for callstats\n     */\n    get callStatsUserName() {\n        if (!_callStatsUserName) {\n            _callStatsUserName = this._storage.getItem('callStatsUserName');\n            if (!_callStatsUserName) {\n                _callStatsUserName = generateCallStatsUserName();\n                this._storage.setItem('callStatsUserName', _callStatsUserName);\n            }\n        }\n\n        return _callStatsUserName;\n    },\n\n    /**\n     * Returns current machine id.\n     * @returns {string} machine id\n     */\n    get machineId() {\n        if (!_machineId) {\n            const amDid = this._storage.getItem('billingId');\n\n            _machineId = amDid || this._storage.getItem('jitsiMeetId');\n\n            if (amDid) {\n                this._storage.setItem('jitsiMeetId', amDid);\n            } else if (!_machineId) {\n                _machineId = generateJitsiMeetId();\n                this._storage.setItem('jitsiMeetId', _machineId);\n            }\n        }\n\n        return _machineId;\n    },\n\n    /**\n     * Returns current session id.\n     * @returns {string} current session id\n     */\n    get sessionId() {\n        // We may update sessionId in localStorage from another JitsiConference\n        // instance and that's why we should always re-read it.\n        return this._storage.getItem('sessionId');\n    },\n\n    /**\n     * Save current session id.\n     * @param {string} sessionId session id\n     */\n    set sessionId(sessionId) {\n        if (sessionId) {\n            this._storage.setItem('sessionId', sessionId);\n        } else {\n            this._storage.removeItem('sessionId');\n        }\n    }\n};\n\n/**\n * Generate fake username for callstats.\n * @returns {string} fake random username\n */\nfunction generateCallStatsUserName() {\n    const username = UsernameGenerator.generateUsername();\n\n    logger.log('generated callstats uid', username);\n\n    return username;\n}\n\n/**\n * Generate unique id.\n * @returns {string} random unique id\n */\nfunction generateJitsiMeetId() {\n    const jitsiMeetId = generateUniqueId();\n\n    logger.log('generated id', jitsiMeetId);\n\n    return jitsiMeetId;\n}\n\n/**\n *\n */\nfunction generateUniqueId() {\n    return _p8() + _p8() + _p8() + _p8();\n}\n\n/**\n *\n */\nfunction _p8() {\n    return `${Math.random().toString(16)}000000000`.substr(2, 8);\n}\n","/* global $ */\n\nimport { getLogger } from '@jitsi/logger';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport Settings from '../settings/Settings';\n\nconst AuthenticationEvents\n    = require('../../service/authentication/AuthenticationEvents');\nconst { XMPPEvents } = require('../../service/xmpp/XMPPEvents');\nconst GlobalOnErrorHandler = require('../util/GlobalOnErrorHandler');\n\nconst logger = getLogger(__filename);\n\n/**\n *\n * @param step\n */\nfunction createExpBackoffTimer(step) {\n    let count = 1;\n\n    return function(reset) {\n        // Reset call\n        if (reset) {\n            count = 1;\n\n            return;\n        }\n\n        // Calculate next timeout\n        const timeout = Math.pow(2, count - 1);\n\n        count += 1;\n\n        return timeout * step;\n    };\n}\n\n/* eslint-disable max-params */\n\n/**\n *\n * @param roomName\n * @param xmpp\n * @param emitter\n * @param options\n */\nexport default function Moderator(roomName, xmpp, emitter, options) {\n    this.roomName = roomName;\n    this.xmppService = xmpp;\n    this.getNextTimeout = createExpBackoffTimer(1000);\n    this.getNextErrorTimeout = createExpBackoffTimer(1000);\n\n    // External authentication stuff\n    this.externalAuthEnabled = false;\n    this.options = options;\n\n    // Whether SIP gateway (jigasi) support is enabled. This is set\n    // based on conference properties received in presence.\n    this.sipGatewayEnabled = false;\n\n    this.eventEmitter = emitter;\n\n    this.connection = this.xmppService.connection;\n\n    // FIXME: Message listener that talks to POPUP window\n    /**\n     *\n     * @param event\n     */\n    function listener(event) {\n        if (event.data && event.data.sessionId) {\n            if (event.origin !== window.location.origin) {\n                logger.warn(\n                    `Ignoring sessionId from different origin: ${\n                        event.origin}`);\n\n                return;\n            }\n            Settings.sessionId = event.data.sessionId;\n\n            // After popup is closed we will authenticate\n        }\n    }\n\n    // Register\n    if (window.addEventListener) {\n        window.addEventListener('message', listener, false);\n    } else {\n        window.attachEvent('onmessage', listener);\n    }\n}\n\n/* eslint-enable max-params */\n\nModerator.prototype.isExternalAuthEnabled = function() {\n    return this.externalAuthEnabled;\n};\n\nModerator.prototype.isSipGatewayEnabled = function() {\n    return this.sipGatewayEnabled;\n};\n\nModerator.prototype.onMucMemberLeft = function(jid) {\n    const resource = Strophe.getResourceFromJid(jid);\n\n    if (resource === 'focus') {\n        logger.info(\n            'Focus has left the room - leaving conference');\n        this.eventEmitter.emit(XMPPEvents.FOCUS_LEFT);\n    }\n};\n\nModerator.prototype.setFocusUserJid = function(focusJid) {\n    if (!this.focusUserJid) {\n        this.focusUserJid = focusJid;\n        logger.info(`Focus jid set to:  ${this.focusUserJid}`);\n    }\n};\n\nModerator.prototype.getFocusUserJid = function() {\n    return this.focusUserJid;\n};\n\nModerator.prototype.getFocusComponent = function() {\n    // Get focus component address\n    let focusComponent = this.options.connection.hosts.focus;\n\n    // If not specified use default:  'focus.domain'\n\n    if (!focusComponent) {\n        focusComponent = `focus.${this.options.connection.hosts.domain}`;\n    }\n\n    return focusComponent;\n};\n\nModerator.prototype.createConferenceIq = function() {\n    // Generate create conference IQ\n    const elem = $iq({ to: this.getFocusComponent(),\n        type: 'set' });\n\n    // Session Id used for authentication\n    const { sessionId } = Settings;\n    const machineUID = Settings.machineId;\n    const config = this.options.conference;\n\n    logger.info(`Session ID: ${sessionId} machine UID: ${machineUID}`);\n\n    elem.c('conference', {\n        xmlns: 'http://jitsi.org/protocol/focus',\n        room: this.roomName,\n        'machine-uid': machineUID\n    });\n\n    if (sessionId) {\n        elem.attrs({ 'session-id': sessionId });\n    }\n\n    elem.c(\n        'property', {\n            name: 'disableRtx',\n            value: Boolean(config.disableRtx)\n        }).up();\n\n    if (config.audioPacketDelay !== undefined) {\n        elem.c(\n            'property', {\n                name: 'audioPacketDelay',\n                value: config.audioPacketDelay\n            }).up();\n    }\n    if (config.startBitrate) {\n        elem.c(\n            'property', {\n                name: 'startBitrate',\n                value: config.startBitrate\n            }).up();\n    }\n    if (config.minBitrate) {\n        elem.c(\n            'property', {\n                name: 'minBitrate',\n                value: config.minBitrate\n            }).up();\n    }\n\n    if (this.options.conference.startAudioMuted !== undefined) {\n        elem.c(\n            'property', {\n                name: 'startAudioMuted',\n                value: this.options.conference.startAudioMuted\n            }).up();\n    }\n    if (this.options.conference.startVideoMuted !== undefined) {\n        elem.c(\n            'property', {\n                name: 'startVideoMuted',\n                value: this.options.conference.startVideoMuted\n            }).up();\n    }\n\n    // this flag determines whether the bridge will include this call in its\n    // rtcstats reporting or not. If the site admin hasn't set the flag in\n    // config.js, then the client defaults to false (see\n    // react/features/rtcstats/functions.js in jitsi-meet). The server-side\n    // components default to true to match the pre-existing behavior so we only\n    // signal if false.\n    const rtcstatsEnabled = this.options.conference?.analytics?.rtcstatsEnabled ?? false;\n\n    if (!rtcstatsEnabled) {\n        elem.c(\n            'property', {\n                name: 'rtcstatsEnabled',\n                value: rtcstatsEnabled\n            }).up();\n    }\n\n    const { callStatsID, callStatsSecret, disableThirdPartyRequests, enableCallStats } = this.options.conference;\n    const callstatsDisabled = !callStatsID || !callStatsSecret || !enableCallStats\n\n        // Even though AppID and AppSecret may be specified, the integration\n        // of callstats.io may be disabled because of globally-disallowed\n        // requests to any third parties.\n        || disableThirdPartyRequests === true;\n\n    // since the default is true across all the server-side components, only signal if false.\n    if (callstatsDisabled) {\n        elem.c(\n            'property', {\n                name: 'callstatsEnabled',\n                value: !callstatsDisabled\n            }).up();\n    }\n    elem.up();\n\n    return elem;\n};\n\n\nModerator.prototype.parseSessionId = function(resultIq) {\n    // eslint-disable-next-line newline-per-chained-call\n    const sessionId = $(resultIq).find('conference').attr('session-id');\n\n    if (sessionId) {\n        logger.info(`Received sessionId:  ${sessionId}`);\n        Settings.sessionId = sessionId;\n    }\n};\n\nModerator.prototype.parseConfigOptions = function(resultIq) {\n    // eslint-disable-next-line newline-per-chained-call\n    this.setFocusUserJid($(resultIq).find('conference').attr('focusjid'));\n\n    const authenticationEnabled\n        = $(resultIq).find(\n            '>conference>property'\n            + '[name=\\'authentication\\'][value=\\'true\\']').length > 0;\n\n    logger.info(`Authentication enabled: ${authenticationEnabled}`);\n\n    this.externalAuthEnabled = $(resultIq).find(\n        '>conference>property'\n            + '[name=\\'externalAuth\\'][value=\\'true\\']').length > 0;\n\n    logger.info(\n        `External authentication enabled: ${this.externalAuthEnabled}`);\n\n    if (!this.externalAuthEnabled) {\n        // We expect to receive sessionId in 'internal' authentication mode\n        this.parseSessionId(resultIq);\n    }\n\n    // eslint-disable-next-line newline-per-chained-call\n    const authIdentity = $(resultIq).find('>conference').attr('identity');\n\n    this.eventEmitter.emit(AuthenticationEvents.IDENTITY_UPDATED,\n        authenticationEnabled, authIdentity);\n\n    // Check if jicofo has jigasi support enabled.\n    if ($(resultIq).find(\n        '>conference>property'\n        + '[name=\\'sipGatewayEnabled\\'][value=\\'true\\']').length) {\n        this.sipGatewayEnabled = true;\n    }\n\n    logger.info(`Sip gateway enabled:  ${this.sipGatewayEnabled}`);\n};\n\n// FIXME We need to show the fact that we're waiting for the focus to the user\n// (or that the focus is not available)\n/**\n * Allocates the conference focus.\n *\n * @param {Function} callback - the function to be called back upon the\n * successful allocation of the conference focus\n * @returns {Promise} - Resolved when Jicofo allows to join the room. It's never\n * rejected and it'll keep on pinging Jicofo forever.\n */\nModerator.prototype.allocateConferenceFocus = function() {\n    return new Promise(resolve => {\n        // Try to use focus user JID from the config\n        this.setFocusUserJid(this.options.connection.focusUserJid);\n\n        // Send create conference IQ\n        this.connection.sendIQ(\n            this.createConferenceIq(),\n            result => this._allocateConferenceFocusSuccess(result, resolve),\n            error => this._allocateConferenceFocusError(error, resolve));\n\n        // XXX We're pressed for time here because we're beginning a complex\n        // and/or lengthy conference-establishment process which supposedly\n        // involves multiple RTTs. We don't have the time to wait for Strophe to\n        // decide to send our IQ.\n        this.connection.flush();\n    });\n};\n\n/**\n * Invoked by {@link #allocateConferenceFocus} upon its request receiving an\n * error result.\n *\n * @param error - the error result of the request that\n * {@link #allocateConferenceFocus} sent\n * @param {Function} callback - the function to be called back upon the\n * successful allocation of the conference focus\n */\nModerator.prototype._allocateConferenceFocusError = function(error, callback) {\n    // If the session is invalid, remove and try again without session ID to get\n    // a new one\n    const invalidSession\n        = $(error).find('>error>session-invalid').length\n            || $(error).find('>error>not-acceptable').length;\n\n    if (invalidSession) {\n        logger.info('Session expired! - removing');\n        Settings.sessionId = undefined;\n    }\n    if ($(error).find('>error>graceful-shutdown').length) {\n        this.eventEmitter.emit(XMPPEvents.GRACEFUL_SHUTDOWN);\n\n        return;\n    }\n\n    // Check for error returned by the reservation system\n    const reservationErr = $(error).find('>error>reservation-error');\n\n    if (reservationErr.length) {\n        // Trigger error event\n        const errorCode = reservationErr.attr('error-code');\n        const errorTextNode = $(error).find('>error>text');\n        let errorMsg;\n\n        if (errorTextNode) {\n            errorMsg = errorTextNode.text();\n        }\n        this.eventEmitter.emit(\n            XMPPEvents.RESERVATION_ERROR,\n            errorCode,\n            errorMsg);\n\n        return;\n    }\n\n    // Not authorized to create new room\n    if ($(error).find('>error>not-authorized').length) {\n        logger.warn('Unauthorized to start the conference', error);\n        const toDomain = Strophe.getDomainFromJid(error.getAttribute('to'));\n\n        if (toDomain !== this.options.connection.hosts.anonymousdomain) {\n            // FIXME \"is external\" should come either from the focus or\n            // config.js\n            this.externalAuthEnabled = true;\n        }\n        this.eventEmitter.emit(XMPPEvents.AUTHENTICATION_REQUIRED);\n\n        return;\n    }\n    const waitMs = this.getNextErrorTimeout();\n    const errmsg = `Focus error, retry after ${waitMs}`;\n\n    GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n    logger.error(errmsg, error);\n\n    // Show message\n    const focusComponent = this.getFocusComponent();\n    const retrySec = waitMs / 1000;\n\n    // FIXME: message is duplicated ? Do not show in case of session invalid\n    // which means just a retry\n\n    if (!invalidSession) {\n        this.eventEmitter.emit(\n            XMPPEvents.FOCUS_DISCONNECTED,\n            focusComponent,\n            retrySec);\n    }\n\n    // Reset response timeout\n    this.getNextTimeout(true);\n    window.setTimeout(\n        () => this.allocateConferenceFocus().then(callback),\n        waitMs);\n};\n\n/**\n * Invoked by {@link #allocateConferenceFocus} upon its request receiving a\n * success (i.e. non-error) result.\n *\n * @param result - the success (i.e. non-error) result of the request that\n * {@link #allocateConferenceFocus} sent\n * @param {Function} callback - the function to be called back upon the\n * successful allocation of the conference focus\n */\nModerator.prototype._allocateConferenceFocusSuccess = function(\n        result,\n        callback) {\n    // Setup config options\n    this.parseConfigOptions(result);\n\n    // Reset the error timeout (because we haven't failed here).\n    this.getNextErrorTimeout(true);\n\n    // eslint-disable-next-line newline-per-chained-call\n    if ($(result).find('conference').attr('ready') === 'true') {\n        // Reset the non-error timeout (because we've succeeded here).\n        this.getNextTimeout(true);\n\n        // Exec callback\n        callback();\n    } else {\n        const waitMs = this.getNextTimeout();\n\n        logger.info(`Waiting for the focus... ${waitMs}`);\n        window.setTimeout(\n            () => this.allocateConferenceFocus().then(callback),\n            waitMs);\n    }\n};\n\nModerator.prototype.authenticate = function() {\n    return new Promise((resolve, reject) => {\n        this.connection.sendIQ(\n            this.createConferenceIq(),\n            result => {\n                this.parseSessionId(result);\n                resolve();\n            },\n            errorIq => reject({\n                error: $(errorIq).find('iq>error :first')\n                    .prop('tagName'),\n                message: $(errorIq).find('iq>error>text')\n                    .text()\n            })\n        );\n    });\n};\n\nModerator.prototype.getLoginUrl = function(urlCallback, failureCallback) {\n    this._getLoginUrl(/* popup */ false, urlCallback, failureCallback);\n};\n\n/**\n *\n * @param {boolean} popup false for {@link Moderator#getLoginUrl} or true for\n * {@link Moderator#getPopupLoginUrl}\n * @param urlCb\n * @param failureCb\n */\nModerator.prototype._getLoginUrl = function(popup, urlCb, failureCb) {\n    const iq = $iq({ to: this.getFocusComponent(),\n        type: 'get' });\n    const attrs = {\n        xmlns: 'http://jitsi.org/protocol/focus',\n        room: this.roomName,\n        'machine-uid': Settings.machineId\n    };\n    let str = 'auth url'; // for logger\n\n    if (popup) {\n        attrs.popup = true;\n        str = `POPUP ${str}`;\n    }\n    iq.c('login-url', attrs);\n\n    /**\n     * Implements a failure callback which reports an error message and an error\n     * through (1) GlobalOnErrorHandler, (2) logger, and (3) failureCb.\n     *\n     * @param {string} errmsg the error messsage to report\n     * @param {*} error the error to report (in addition to errmsg)\n     */\n    function reportError(errmsg, err) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n        logger.error(errmsg, err);\n        failureCb(err);\n    }\n    this.connection.sendIQ(\n        iq,\n        result => {\n            // eslint-disable-next-line newline-per-chained-call\n            let url = $(result).find('login-url').attr('url');\n\n            url = decodeURIComponent(url);\n            if (url) {\n                logger.info(`Got ${str}: ${url}`);\n                urlCb(url);\n            } else {\n                reportError(`Failed to get ${str} from the focus`, result);\n            }\n        },\n        reportError.bind(undefined, `Get ${str} error`)\n    );\n};\n\nModerator.prototype.getPopupLoginUrl = function(urlCallback, failureCallback) {\n    this._getLoginUrl(/* popup */ true, urlCallback, failureCallback);\n};\n\nModerator.prototype.logout = function(callback) {\n    const iq = $iq({ to: this.getFocusComponent(),\n        type: 'set' });\n    const { sessionId } = Settings;\n\n    if (!sessionId) {\n        callback();\n\n        return;\n    }\n    iq.c('logout', {\n        xmlns: 'http://jitsi.org/protocol/focus',\n        'session-id': sessionId\n    });\n    this.connection.sendIQ(\n        iq,\n        result => {\n            // eslint-disable-next-line newline-per-chained-call\n            let logoutUrl = $(result).find('logout').attr('logout-url');\n\n            if (logoutUrl) {\n                logoutUrl = decodeURIComponent(logoutUrl);\n            }\n            logger.info(`Log out OK, url: ${logoutUrl}`, result);\n            Settings.sessionId = undefined;\n            callback(logoutUrl);\n        },\n        error => {\n            const errmsg = 'Logout error';\n\n            GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n            logger.error(errmsg, error);\n        }\n    );\n};\n","/* global $ */\n\nimport { getLogger } from '@jitsi/logger';\nimport isEqual from 'lodash.isequal';\nimport { $iq, $msg, $pres, Strophe } from 'strophe.js';\n\nimport * as JitsiTranscriptionStatus from '../../JitsiTranscriptionStatus';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport Listenable from '../util/Listenable';\n\nimport AVModeration from './AVModeration';\nimport BreakoutRooms from './BreakoutRooms';\nimport Lobby from './Lobby';\nimport XmppConnection from './XmppConnection';\nimport Moderator from './moderator';\n\nconst logger = getLogger(__filename);\n\nexport const parser = {\n    packet2JSON(xmlElement, nodes) {\n        for (const child of Array.from(xmlElement.children)) {\n            const node = {\n                attributes: {},\n                children: [],\n                tagName: child.tagName\n            };\n\n            for (const attr of Array.from(child.attributes)) {\n                node.attributes[attr.name] = attr.value;\n            }\n            const text = Strophe.getText(child);\n\n            if (text) {\n                // Using Strophe.getText will do work for traversing all direct\n                // child text nodes but returns an escaped value, which is not\n                // desirable at this point.\n                node.value = Strophe.xmlunescape(text);\n            }\n            nodes.push(node);\n            this.packet2JSON(child, node.children);\n        }\n    },\n    json2packet(nodes, packet) {\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n\n            if (node) {\n                packet.c(node.tagName, node.attributes);\n                if (node.value) {\n                    packet.t(node.value);\n                }\n                if (node.children) {\n                    this.json2packet(node.children, packet);\n                }\n                packet.up();\n            }\n        }\n\n        // packet.up();\n    }\n};\n\n/**\n * Returns array of JS objects from the presence JSON associated with the passed\n / nodeName\n * @param pres the presence JSON\n * @param nodeName the name of the node (videomuted, audiomuted, etc)\n */\nexport function filterNodeFromPresenceJSON(pres, nodeName) {\n    const res = [];\n\n    for (let i = 0; i < pres.length; i++) {\n        if (pres[i].tagName === nodeName) {\n            res.push(pres[i]);\n        }\n    }\n\n    return res;\n}\n\n// XXX As ChatRoom constructs XMPP stanzas and Strophe is build around the idea\n// of chaining function calls, allow long function call chains.\n/* eslint-disable newline-per-chained-call */\n\n/**\n * Array of affiliations that are allowed in members only room.\n * @type {string[]}\n */\nconst MEMBERS_AFFILIATIONS = [ 'owner', 'admin', 'member' ];\n\n/**\n *\n */\nexport default class ChatRoom extends Listenable {\n\n    /* eslint-disable max-params */\n\n    /**\n     *\n     * @param {XmppConnection} connection - The XMPP connection instance.\n     * @param jid\n     * @param password\n     * @param XMPP\n     * @param options\n     * @param {boolean} options.disableFocus - when set to {@code false} will\n     * not invite Jicofo into the room.\n     * @param {boolean} options.disableDiscoInfo - when set to {@code false} will skip disco info.\n     * This is intended to be used only for lobby rooms.\n     * @param {boolean} options.enableLobby - when set to {@code false} will skip creating lobby room.\n     * @param {boolean} options.hiddenFromRecorderFeatureEnabled - when set to {@code true} we will check identity tag\n     * for node presence.\n     */\n    constructor(connection, jid, password, XMPP, options) {\n        super();\n        this.xmpp = XMPP;\n        this.connection = connection;\n        this.roomjid = Strophe.getBareJidFromJid(jid);\n        this.myroomjid = jid;\n        this.password = password;\n        this.replaceParticipant = false;\n        logger.info(`Joined MUC as ${this.myroomjid}`);\n        this.members = {};\n        this.presMap = {};\n        this.presHandlers = {};\n        this._removeConnListeners = [];\n        this.joined = false;\n        this.inProgressEmitted = false;\n        this.role = null;\n        this.focusMucJid = null;\n        this.noBridgeAvailable = false;\n        this.options = options || {};\n        this.moderator\n            = new Moderator(this.roomjid, this.xmpp, this.eventEmitter, {\n                connection: this.xmpp.options,\n                conference: this.options\n            });\n        if (typeof this.options.enableLobby === 'undefined' || this.options.enableLobby) {\n            this.lobby = new Lobby(this);\n        }\n        this.avModeration = new AVModeration(this);\n        this.breakoutRooms = new BreakoutRooms(this);\n        this.initPresenceMap(options);\n        this.lastPresences = {};\n        this.phoneNumber = null;\n        this.phonePin = null;\n        this.connectionTimes = {};\n        this.participantPropertyListener = null;\n\n        this.locked = false;\n        this.transcriptionStatus = JitsiTranscriptionStatus.OFF;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     *\n     */\n    initPresenceMap(options = {}) {\n        this.presMap.to = this.myroomjid;\n        this.presMap.xns = 'http://jabber.org/protocol/muc';\n        this.presMap.nodes = [];\n\n        if (options.statsId) {\n            this.presMap.nodes.push({\n                'tagName': 'stats-id',\n                'value': options.statsId\n            });\n        }\n\n        this.presenceUpdateTime = Date.now();\n    }\n\n    /**\n     * Joins the chat room.\n     * @param {string} password - Password to unlock room on joining.\n     * @returns {Promise} - resolved when join completes. At the time of this\n     * writing it's never rejected.\n     */\n    join(password, replaceParticipant) {\n        this.password = password;\n        this.replaceParticipant = replaceParticipant;\n\n        return new Promise(resolve => {\n            this.options.disableFocus\n                && logger.info(`Conference focus disabled for ${this.roomjid}`);\n\n            const preJoin\n                = this.options.disableFocus\n                    ? Promise.resolve()\n                    : this.moderator.allocateConferenceFocus();\n\n            preJoin.then(() => {\n                this.sendPresence(true);\n                this._removeConnListeners.push(\n                    this.connection.addEventListener(\n                        XmppConnection.Events.CONN_STATUS_CHANGED,\n                        this.onConnStatusChanged.bind(this))\n                );\n                resolve();\n            });\n        });\n    }\n\n    /**\n     *\n     * @param fromJoin - Whether this is initial presence to join the room.\n     */\n    sendPresence(fromJoin) {\n        const to = this.presMap.to;\n\n        if (!this.connection || !this.connection.connected || !to || (!this.joined && !fromJoin)) {\n            // Too early to send presence - not initialized\n            return;\n        }\n\n        const pres = $pres({ to });\n\n        // xep-0045 defines: \"including in the initial presence stanza an empty\n        // <x/> element qualified by the 'http://jabber.org/protocol/muc'\n        // namespace\" and subsequent presences should not include that or it can\n        // be considered as joining, and server can send us the message history\n        // for the room on every presence\n        if (fromJoin) {\n            if (this.replaceParticipant) {\n                pres.c('flip_device').up();\n            }\n\n            pres.c('x', { xmlns: this.presMap.xns });\n\n            if (this.password) {\n                pres.c('password').t(this.password).up();\n            }\n            if (this.options.billingId) {\n                pres.c('billingid').t(this.options.billingId).up();\n            }\n\n            pres.up();\n        }\n\n        parser.json2packet(this.presMap.nodes, pres);\n\n        // we store time we last synced presence state\n        this.presenceSyncTime = Date.now();\n\n        this.connection.send(pres);\n        if (fromJoin) {\n            // XXX We're pressed for time here because we're beginning a complex\n            // and/or lengthy conference-establishment process which supposedly\n            // involves multiple RTTs. We don't have the time to wait for\n            // Strophe to decide to send our IQ.\n            this.connection.flush();\n        }\n    }\n\n    /**\n     * Sends the presence unavailable, signaling the server\n     * we want to leave the room.\n     */\n    doLeave(reason) {\n        logger.log('do leave', this.myroomjid);\n        const pres = $pres({\n            to: this.myroomjid,\n            type: 'unavailable'\n        });\n\n        if (reason) {\n            pres.c('status').t(reason).up();\n        }\n\n        this.presMap.length = 0;\n\n        // XXX Strophe is asynchronously sending by default. Unfortunately, that\n        // means that there may not be enough time to send the unavailable\n        // presence. Switching Strophe to synchronous sending is not much of an\n        // option because it may lead to a noticeable delay in navigating away\n        // from the current location. As a compromise, we will try to increase\n        // the chances of sending the unavailable presence within the short time\n        // span that we have upon unloading by invoking flush() on the\n        // connection. We flush() once before sending/queuing the unavailable\n        // presence in order to attemtp to have the unavailable presence at the\n        // top of the send queue. We flush() once more after sending/queuing the\n        // unavailable presence in order to attempt to have it sent as soon as\n        // possible.\n        // FIXME do not use Strophe.Connection in the ChatRoom directly\n        !this.connection.isUsingWebSocket && this.connection.flush();\n        this.connection.send(pres);\n        this.connection.flush();\n    }\n\n    /**\n     *\n     */\n    discoRoomInfo() {\n        // https://xmpp.org/extensions/xep-0045.html#disco-roominfo\n\n        const getInfo\n            = $iq({\n                type: 'get',\n                to: this.roomjid\n            })\n                .c('query', { xmlns: Strophe.NS.DISCO_INFO });\n\n        this.connection.sendIQ(getInfo, result => {\n            const locked\n                = $(result).find('>query>feature[var=\"muc_passwordprotected\"]')\n                    .length\n                    === 1;\n\n            if (locked !== this.locked) {\n                this.eventEmitter.emit(XMPPEvents.MUC_LOCK_CHANGED, locked);\n                this.locked = locked;\n            }\n\n            const meetingIdValEl\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_meetingId\"]>value');\n\n            if (meetingIdValEl.length) {\n                this.setMeetingId(meetingIdValEl.text());\n            } else {\n                logger.warn('No meeting ID from backend');\n            }\n\n            const membersOnly = $(result).find('>query>feature[var=\"muc_membersonly\"]').length === 1;\n\n            const lobbyRoomField\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_lobbyroom\"]>value');\n\n            if (this.lobby) {\n                this.lobby.setLobbyRoomJid(lobbyRoomField && lobbyRoomField.length ? lobbyRoomField.text() : undefined);\n            }\n\n            const isBreakoutField\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_isbreakout\"]>value');\n            const isBreakoutRoom = Boolean(isBreakoutField?.text());\n\n            this.breakoutRooms._setIsBreakoutRoom(isBreakoutRoom);\n\n            const breakoutMainRoomField\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_breakout_main_room\"]>value');\n\n            if (breakoutMainRoomField?.length) {\n                this.breakoutRooms._setMainRoomJid(breakoutMainRoomField.text());\n            }\n\n            if (membersOnly !== this.membersOnlyEnabled) {\n                this.membersOnlyEnabled = membersOnly;\n                this.eventEmitter.emit(XMPPEvents.MUC_MEMBERS_ONLY_CHANGED, membersOnly);\n            }\n\n        }, error => {\n            GlobalOnErrorHandler.callErrorHandler(error);\n            logger.error('Error getting room info: ', error);\n        });\n    }\n\n    /**\n     * Sets the meeting unique Id (received from the backend).\n     *\n     * @param {string} meetingId - The new meetings id.\n     * @returns {void}\n     */\n    setMeetingId(meetingId) {\n        if (this.meetingId !== meetingId) {\n            if (this.meetingId) {\n                logger.warn(`Meeting Id changed from:${this.meetingId} to:${meetingId}`);\n            }\n            this.meetingId = meetingId;\n            this.eventEmitter.emit(XMPPEvents.MEETING_ID_SET, meetingId);\n        }\n    }\n\n    /**\n     *\n     */\n    createNonAnonymousRoom() {\n        // http://xmpp.org/extensions/xep-0045.html#createroom-reserved\n\n        if (this.options.disableDiscoInfo) {\n            return;\n        }\n\n        const getForm = $iq({ type: 'get',\n            to: this.roomjid })\n            .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' })\n            .c('x', { xmlns: 'jabber:x:data',\n                type: 'submit' });\n\n        this.connection.sendIQ(getForm, form => {\n            if (!$(form).find(\n                    '>query>x[xmlns=\"jabber:x:data\"]'\n                    + '>field[var=\"muc#roomconfig_whois\"]').length) {\n                const errmsg = 'non-anonymous rooms not supported';\n\n                GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n                logger.error(errmsg);\n\n                return;\n            }\n\n            const formSubmit = $iq({ to: this.roomjid,\n                type: 'set' })\n                .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' });\n\n            formSubmit.c('x', { xmlns: 'jabber:x:data',\n                type: 'submit' });\n\n            formSubmit.c('field', { 'var': 'FORM_TYPE' })\n                .c('value')\n                .t('http://jabber.org/protocol/muc#roomconfig').up().up();\n\n            formSubmit.c('field', { 'var': 'muc#roomconfig_whois' })\n                .c('value').t('anyone').up().up();\n\n            this.connection.sendIQ(formSubmit);\n\n        }, error => {\n            GlobalOnErrorHandler.callErrorHandler(error);\n            logger.error('Error getting room configuration form: ', error);\n        });\n    }\n\n    /**\n     * Handles Xmpp Connection status updates.\n     *\n     * @param {Strophe.Status} status - The Strophe connection status.\n     */\n    onConnStatusChanged(status) {\n        // Send cached presence when the XMPP connection is re-established.\n        if (status === XmppConnection.Status.CONNECTED) {\n            this.sendPresence();\n        }\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresence(pres) {\n        const from = pres.getAttribute('from');\n        const member = {};\n        const statusEl = pres.getElementsByTagName('status')[0];\n\n        if (statusEl) {\n            member.status = statusEl.textContent || '';\n        }\n        let hasStatusUpdate = false;\n        let hasVersionUpdate = false;\n        const xElement\n            = pres.getElementsByTagNameNS(\n                'http://jabber.org/protocol/muc#user', 'x')[0];\n        const mucUserItem\n            = xElement && xElement.getElementsByTagName('item')[0];\n\n        member.isReplaceParticipant\n            = pres.getElementsByTagName('flip_device').length;\n\n        member.affiliation\n            = mucUserItem && mucUserItem.getAttribute('affiliation');\n        member.role = mucUserItem && mucUserItem.getAttribute('role');\n\n        // Focus recognition\n        const jid = mucUserItem && mucUserItem.getAttribute('jid');\n\n        member.jid = jid;\n        member.isFocus\n            = jid && jid.indexOf(`${this.moderator.getFocusUserJid()}/`) === 0;\n        member.isHiddenDomain\n            = jid && jid.indexOf('@') > 0\n                && this.options.hiddenDomain\n                    === jid.substring(jid.indexOf('@') + 1, jid.indexOf('/'));\n\n        const isTranscriber = pres.getElementsByTagName('nick');\n\n        if (isTranscriber[0] && isTranscriber[0].innerHTML.toLowerCase() === \"transcriber\") {\n              member.isHiddenDomain = true;\n        }\n        \n        this.eventEmitter.emit(XMPPEvents.PRESENCE_RECEIVED, {\n            fromHiddenDomain: member.isHiddenDomain,\n            presence: pres\n        });\n\n        const xEl = pres.querySelector('x');\n\n        if (xEl) {\n            xEl.remove();\n        }\n\n        const nodes = [];\n\n        parser.packet2JSON(pres, nodes);\n        this.lastPresences[from] = nodes;\n\n        // process nodes to extract data needed for MUC_JOINED and\n        // MUC_MEMBER_JOINED events\n        const extractIdentityInformation = node => {\n            const identity = {};\n            const userInfo = node.children.find(c => c.tagName === 'user');\n\n            if (userInfo) {\n                identity.user = {};\n                const tags = [ 'id', 'name', 'avatar' ];\n\n                if (this.options.hiddenFromRecorderFeatureEnabled) {\n                    tags.push('hidden-from-recorder');\n                }\n\n                for (const tag of tags) {\n                    const child\n                        = userInfo.children.find(c => c.tagName === tag);\n\n                    if (child) {\n                        identity.user[tag] = child.value;\n                    }\n                }\n            }\n            const groupInfo = node.children.find(c => c.tagName === 'group');\n\n            if (groupInfo) {\n                identity.group = groupInfo.value;\n            }\n\n            return identity;\n        };\n\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n\n            switch (node.tagName) {\n            case 'bot': {\n                const { attributes } = node;\n\n                if (!attributes) {\n                    break;\n                }\n                const { type } = attributes;\n\n                member.botType = type;\n                break;\n            }\n            case 'nick':\n                member.nick = node.value;\n                break;\n            case 'userId':\n                member.id = node.value;\n                break;\n            case 'stats-id':\n                member.statsID = node.value;\n                break;\n            case 'identity':\n                member.identity = extractIdentityInformation(node);\n                break;\n            case 'features': {\n                member.features = this._extractFeatures(node);\n                break;\n            }\n            case 'stat': {\n                const { attributes } = node;\n\n                if (!attributes) {\n                    break;\n                }\n                const { name } = attributes;\n\n                if (name === 'version') {\n                    member.version = attributes.value;\n                }\n                break;\n            }\n            }\n        }\n\n        if (!this.joined && !this.inProgressEmitted) {\n            const now = this.connectionTimes['muc.join.started'] = window.performance.now();\n\n            logger.log('(TIME) MUC join started:\\t', now);\n\n            this.eventEmitter.emit(XMPPEvents.MUC_JOIN_IN_PROGRESS);\n            this.inProgressEmitted = true;\n        }\n\n        if (from === this.myroomjid) {\n            const newRole\n                = member.affiliation === 'owner' ? member.role : 'none';\n\n            if (this.role !== newRole) {\n                this.role = newRole;\n                this.eventEmitter.emit(\n                    XMPPEvents.LOCAL_ROLE_CHANGED,\n                    this.role);\n            }\n            if (!this.joined) {\n                this.joined = true;\n                const now = this.connectionTimes['muc.joined']\n                    = window.performance.now();\n\n                logger.log('(TIME) MUC joined:\\t', now);\n\n                // set correct initial state of locked\n                if (this.password) {\n                    this.locked = true;\n                }\n\n                // Re-send presence in case any presence updates were added,\n                // but blocked from sending, during the join process.\n                // send the presence only if there was a modification after we had synced it\n                if (this.presenceUpdateTime >= this.presenceSyncTime) {\n                    this.sendPresence();\n                }\n\n                this.eventEmitter.emit(XMPPEvents.MUC_JOINED);\n\n                // Now let's check the disco-info to retrieve the\n                // meeting Id if any\n                !this.options.disableDiscoInfo && this.discoRoomInfo();\n            }\n        } else if (jid === undefined) {\n            logger.info('Ignoring member with undefined JID');\n        } else if (this.members[from] === undefined) {\n            // new participant\n            this.members[from] = member;\n            logger.log('entered', from, member);\n            hasStatusUpdate = member.status !== undefined;\n            hasVersionUpdate = member.version !== undefined;\n            if (member.isFocus) {\n                this._initFocus(from, member.features);\n            } else {\n                // identity is being added to member joined, so external\n                // services can be notified for that (currently identity is\n                // not used inside library)\n                this.eventEmitter.emit(\n                    XMPPEvents.MUC_MEMBER_JOINED,\n                    from,\n                    member.nick,\n                    member.role,\n                    member.isHiddenDomain,\n                    member.statsID,\n                    member.status,\n                    member.identity,\n                    member.botType,\n                    member.jid,\n                    member.features,\n                    member.isReplaceParticipant);\n\n                // we are reporting the status with the join\n                // so we do not want a second event about status update\n                hasStatusUpdate = false;\n            }\n        } else {\n            // Presence update for existing participant\n            // Watch role change:\n            const memberOfThis = this.members[from];\n\n            if (memberOfThis.role !== member.role) {\n                memberOfThis.role = member.role;\n                this.eventEmitter.emit(\n                    XMPPEvents.MUC_ROLE_CHANGED, from, member.role);\n            }\n\n            // affiliation changed\n            if (memberOfThis.affiliation !== member.affiliation) {\n                memberOfThis.affiliation = member.affiliation;\n            }\n\n            // fire event that botType had changed\n            if (memberOfThis.botType !== member.botType) {\n                memberOfThis.botType = member.botType;\n                this.eventEmitter.emit(\n                    XMPPEvents.MUC_MEMBER_BOT_TYPE_CHANGED,\n                    from,\n                    member.botType);\n            }\n\n            if (member.isFocus) {\n                // From time to time first few presences of the focus are not\n                // containing it's jid. That way we can mark later the focus\n                // member instead of not marking it at all and not starting the\n                // conference.\n                // FIXME: Maybe there is a better way to handle this issue. It\n                // seems there is some period of time in prosody that the\n                // configuration form is received but not applied. And if any\n                // participant joins during that period of time the first\n                // presence from the focus won't contain\n                // <item jid=\"focus...\" />.\n                // By default we are disabling the waiting for form submission in order to use the room\n                // and we had enabled by default that jids are public in the room ,\n                // so this case should not happen, if public jid is turned off we will receive the jid\n                // when we become moderator in the room\n                memberOfThis.isFocus = true;\n                this._initFocus(from, member.features);\n            }\n\n            // store the new display name\n            if (member.displayName) {\n                memberOfThis.displayName = member.displayName;\n            }\n\n            // update stored status message to be able to detect changes\n            if (memberOfThis.status !== member.status) {\n                hasStatusUpdate = true;\n                memberOfThis.status = member.status;\n            }\n\n            if (memberOfThis.version !== member.version) {\n                hasVersionUpdate = true;\n                memberOfThis.version = member.version;\n            }\n\n            if (!isEqual(memberOfThis.features, member.features)) {\n                memberOfThis.features = member.features;\n                this.eventEmitter.emit(XMPPEvents.PARTICIPANT_FEATURES_CHANGED, from, member.features);\n            }\n        }\n\n        // after we had fired member or room joined events, lets fire events\n        // for the rest info we got in presence\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n\n            switch (node.tagName) {\n            case 'nick':\n                if (!member.isFocus) {\n                    const displayName\n                        = this.xmpp.options.displayJids\n                            ? Strophe.getResourceFromJid(from)\n                            : member.nick;\n\n                    this.eventEmitter.emit(\n                        XMPPEvents.DISPLAY_NAME_CHANGED,\n                        from,\n                        displayName);\n                }\n                break;\n            case 'bridgeNotAvailable':\n                if (member.isFocus && !this.noBridgeAvailable) {\n                    this.noBridgeAvailable = true;\n                    this.eventEmitter.emit(XMPPEvents.BRIDGE_DOWN);\n                }\n                break;\n            case 'conference-properties':\n                if (member.isFocus) {\n                    const properties = {};\n\n                    for (let j = 0; j < node.children.length; j++) {\n                        const { attributes } = node.children[j];\n\n                        if (attributes && attributes.key) {\n                            properties[attributes.key] = attributes.value;\n                        }\n                    }\n\n                    this.eventEmitter.emit(XMPPEvents.CONFERENCE_PROPERTIES_CHANGED, properties);\n\n                    // Log if Jicofo supports restart by terminate only once. This conference property does not change\n                    // during the call.\n                    if (typeof this.restartByTerminateSupported === 'undefined') {\n                        this.restartByTerminateSupported = properties['support-terminate-restart'] === 'true';\n                        logger.info(`Jicofo supports restart by terminate: ${this.supportsRestartByTerminate()}`);\n                    }\n                }\n                break;\n            case 'transcription-status': {\n                const { attributes } = node;\n\n                if (!attributes) {\n                    break;\n                }\n\n                const { status } = attributes;\n\n                if (status && status !== this.transcriptionStatus) {\n                    this.transcriptionStatus = status;\n                    this.eventEmitter.emit(\n                        XMPPEvents.TRANSCRIPTION_STATUS_CHANGED,\n                        status\n                    );\n                }\n\n\n                break;\n            }\n            case 'call-control': {\n                const att = node.attributes;\n\n                if (!att) {\n                    break;\n                }\n                this.phoneNumber = att.phone || null;\n                this.phonePin = att.pin || null;\n                this.eventEmitter.emit(XMPPEvents.PHONE_NUMBER_CHANGED);\n                break;\n            }\n            default:\n                this.processNode(node, from);\n            }\n        }\n\n        // Trigger status message update if necessary\n        if (hasStatusUpdate) {\n            this.eventEmitter.emit(\n                XMPPEvents.PRESENCE_STATUS,\n                from,\n                member.status);\n        }\n\n        if (hasVersionUpdate) {\n            logger.info(`Received version for ${jid}: ${member.version}`);\n        }\n    }\n\n    /**\n     * Extracts the features from the presence.\n     * @param node the node to process.\n     * @return features the Set of features where extracted data is added.\n     * @private\n     */\n    _extractFeatures(node) {\n        const features = new Set();\n\n        for (let j = 0; j < node.children.length; j++) {\n            const { attributes } = node.children[j];\n\n            if (attributes && attributes.var) {\n                features.add(attributes.var);\n            }\n        }\n\n        return features;\n    }\n\n    /**\n     * Initialize some properties when the focus participant is verified.\n     * @param from jid of the focus\n     * @param features the features reported in jicofo presence\n     */\n    _initFocus(from, features) {\n        this.focusMucJid = from;\n        this.focusFeatures = features;\n    }\n\n    /**\n     * Sets the special listener to be used for \"command\"s whose name starts\n     * with \"jitsi_participant_\".\n     */\n    setParticipantPropertyListener(listener) {\n        this.participantPropertyListener = listener;\n    }\n\n    /**\n     * Checks if Jicofo supports restarting Jingle session after 'session-terminate'.\n     * @returns {boolean}\n     */\n    supportsRestartByTerminate() {\n        return this.restartByTerminateSupported;\n    }\n\n    /**\n     *\n     * @param node\n     * @param from\n     */\n    processNode(node, from) {\n        // make sure we catch all errors coming from any handler\n        // otherwise we can remove the presence handler from strophe\n        try {\n            let tagHandlers = this.presHandlers[node.tagName];\n\n            if (node.tagName.startsWith('jitsi_participant_')) {\n                tagHandlers = [ this.participantPropertyListener ];\n            }\n\n            if (tagHandlers) {\n                tagHandlers.forEach(handler => {\n                    handler(node, Strophe.getResourceFromJid(from), from);\n                });\n            }\n        } catch (e) {\n            GlobalOnErrorHandler.callErrorHandler(e);\n            logger.error(`Error processing:${node.tagName} node.`, e);\n        }\n    }\n\n    /**\n     * Send text message to the other participants in the conference\n     * @param message\n     * @param elementName\n     */\n    sendMessage(message, elementName) {\n        const msg = $msg({ to: this.roomjid,\n            type: 'groupchat' });\n\n        // We are adding the message in a packet extension. If this element\n        // is different from 'body', we add a custom namespace.\n        // e.g. for 'json-message' extension of message stanza.\n        if (elementName === 'body') {\n            msg.c(elementName, {}, message);\n        } else {\n            msg.c(elementName, { xmlns: 'http://jitsi.org/jitmeet' }, message);\n        }\n\n        this.connection.send(msg);\n        this.eventEmitter.emit(XMPPEvents.SENDING_CHAT_MESSAGE, message);\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Send private text message to another participant of the conference\n     * @param id id/muc resource of the receiver\n     * @param message\n     * @param elementName\n     */\n    sendPrivateMessage(id, message, elementName) {\n        const msg = $msg({ to: `${this.roomjid}/${id}`,\n            type: 'chat' });\n\n        // We are adding the message in packet. If this element is different\n        // from 'body', we add our custom namespace for the same.\n        // e.g. for 'json-message' message extension.\n        if (elementName === 'body') {\n            msg.c(elementName, message).up();\n        } else {\n            msg.c(elementName, { xmlns: 'http://jitsi.org/jitmeet' }, message)\n                .up();\n        }\n\n        this.connection.send(msg);\n        this.eventEmitter.emit(\n            XMPPEvents.SENDING_PRIVATE_CHAT_MESSAGE, message);\n    }\n    /* eslint-enable max-params */\n\n    /**\n     *\n     * @param subject\n     */\n    setSubject(subject) {\n        const msg = $msg({ to: this.roomjid,\n            type: 'groupchat' });\n\n        msg.c('subject', subject);\n        this.connection.send(msg);\n    }\n\n    /**\n     * Called when participant leaves.\n     * @param jid the jid of the participant that leaves\n     * @param skipEvents optional params to skip any events, including check\n     * whether this is the focus that left\n     * @param reason the reason for leaving (optional).\n     */\n    onParticipantLeft(jid, skipEvents, reason) {\n        delete this.lastPresences[jid];\n\n        if (skipEvents) {\n            return;\n        }\n\n        this.eventEmitter.emit(XMPPEvents.MUC_MEMBER_LEFT, jid, reason);\n\n        this.moderator.onMucMemberLeft(jid);\n    }\n\n    /**\n     *\n     * @param pres\n     * @param from\n     */\n    onPresenceUnavailable(pres, from) {\n        // ignore presence\n        if ($(pres).find('>ignore[xmlns=\"http://jitsi.org/jitmeet/\"]').length) {\n            return true;\n        }\n\n        // room destroyed ?\n        const destroySelect = $(pres).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>destroy');\n\n        if (destroySelect.length) {\n            let reason;\n            const reasonSelect\n                = $(pres).find(\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n                        + '>destroy>reason');\n\n            if (reasonSelect.length) {\n                reason = reasonSelect.text();\n            }\n\n            this.eventEmitter.emit(XMPPEvents.MUC_DESTROYED, reason, destroySelect.attr('jid'));\n            this.connection.emuc.doLeave(this.roomjid);\n\n            return true;\n        }\n\n        // Status code 110 indicates that this notification is \"self-presence\".\n        const isSelfPresence\n            = $(pres)\n                .find(\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>'\n                        + 'status[code=\"110\"]')\n                .length;\n        const isKick\n            = $(pres)\n                .find(\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n                        + '>status[code=\"307\"]')\n                .length;\n        const membersKeys = Object.keys(this.members);\n        const isReplaceParticipant = $(pres).find('flip_device').length;\n\n        if (isKick) {\n            const actorSelect\n                = $(pres)\n                .find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>item>actor');\n            let actorNick;\n\n            if (actorSelect.length) {\n                actorNick = actorSelect.attr('nick');\n            }\n\n            let reason;\n            const reasonSelect\n                = $(pres).find(\n                '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n                + '>item>reason');\n\n            if (reasonSelect.length) {\n                reason = reasonSelect.text();\n            }\n\n            // we first fire the kicked so we can show the participant\n            // who kicked, before notifying that participant left\n            // we fire kicked for us and for any participant kicked\n            this.eventEmitter.emit(\n                XMPPEvents.KICKED,\n                isSelfPresence,\n                actorNick,\n                Strophe.getResourceFromJid(from),\n                reason,\n                isReplaceParticipant);\n        }\n\n        if (isSelfPresence) {\n            // If the status code is 110 this means we're leaving and we would\n            // like to remove everyone else from our view, so we trigger the\n            // event.\n            membersKeys.forEach(jid => {\n                const member = this.members[jid];\n\n                delete this.members[jid];\n                this.onParticipantLeft(jid, member.isFocus);\n            });\n            this.connection.emuc.doLeave(this.roomjid);\n\n            // we fire muc_left only if this is not a kick,\n            // kick has both statuses 110 and 307.\n            if (!isKick) {\n                this.eventEmitter.emit(XMPPEvents.MUC_LEFT);\n            }\n        } else {\n            const reasonSelect = $(pres).find('>status');\n            let reason;\n\n            if (reasonSelect.length) {\n                reason = reasonSelect.text();\n            }\n\n            delete this.members[from];\n            this.onParticipantLeft(from, false, reason);\n        }\n    }\n\n    /**\n     *\n     * @param msg\n     * @param from\n     */\n    onMessage(msg, from) {\n        const type = msg.getAttribute('type');\n\n        if (type === 'error') {\n            const settingsErrorMsg = $(msg).find('>settings-error>text').text();\n\n            if (settingsErrorMsg.length) {\n                this.eventEmitter.emit(XMPPEvents.SETTINGS_ERROR_RECEIVED, settingsErrorMsg);\n\n                return true;\n            }\n            const errorMsg = $(msg).find('>error>text').text();\n\n            this.eventEmitter.emit(XMPPEvents.CHAT_ERROR_RECEIVED, errorMsg);\n\n            return true;\n        }\n\n        const txt = $(msg).find('>body').text();\n        const subject = $(msg).find('>subject');\n\n        if (subject.length) {\n            const subjectText = subject.text();\n\n            if (subjectText || subjectText === '') {\n                this.eventEmitter.emit(XMPPEvents.SUBJECT_CHANGED, subjectText);\n                logger.log(`Subject is changed to ${subjectText}`);\n            }\n        }\n\n        // xep-0203 delay\n        let stamp = $(msg).find('>delay').attr('stamp');\n\n        if (!stamp) {\n            // or xep-0091 delay, UTC timestamp\n            stamp = $(msg).find('>[xmlns=\"jabber:x:delay\"]').attr('stamp');\n\n            if (stamp) {\n                // the format is CCYYMMDDThh:mm:ss\n                const dateParts\n                    = stamp.match(/(\\d{4})(\\d{2})(\\d{2}T\\d{2}:\\d{2}:\\d{2})/);\n\n                stamp = `${dateParts[1]}-${dateParts[2]}-${dateParts[3]}Z`;\n            }\n        }\n\n        if (from === this.roomjid) {\n            let invite;\n\n            if ($(msg).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>status[code=\"104\"]').length) {\n                this.discoRoomInfo();\n            } else if ((invite = $(msg).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>invite'))\n                        && invite.length) {\n                const passwordSelect = $(msg).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>password');\n                let password;\n\n                if (passwordSelect && passwordSelect.length) {\n                    password = passwordSelect.text();\n                }\n\n                this.eventEmitter.emit(XMPPEvents.INVITE_MESSAGE_RECEIVED,\n                    from, invite.attr('from'), txt, password);\n            }\n        }\n\n        const jsonMessage = $(msg).find('>json-message').text();\n\n        if (jsonMessage) {\n            const parsedJson = this.xmpp.tryParseJSONAndVerify(jsonMessage);\n\n            // We emit this event if the message is a valid json, and is not\n            // delivered after a delay, i.e. stamp is undefined.\n            // e.g. - subtitles should not be displayed if delayed.\n            if (parsedJson && stamp === undefined) {\n                this.eventEmitter.emit(XMPPEvents.JSON_MESSAGE_RECEIVED,\n                    from, parsedJson);\n\n                return;\n            }\n        }\n\n        if (txt) {\n            if (type === 'chat') {\n                this.eventEmitter.emit(XMPPEvents.PRIVATE_MESSAGE_RECEIVED,\n                        from, txt, this.myroomjid, stamp);\n            } else if (type === 'groupchat') {\n                this.eventEmitter.emit(XMPPEvents.MESSAGE_RECEIVED,\n                        from, txt, this.myroomjid, stamp);\n            }\n        }\n    }\n\n    /**\n     *\n     * @param pres\n     * @param from\n     */\n    onPresenceError(pres, from) {\n        if ($(pres)\n                .find(\n                    '>error[type=\"auth\"]'\n                        + '>not-authorized['\n                        + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]')\n                .length) {\n            logger.log('on password required', from);\n            this.eventEmitter.emit(XMPPEvents.PASSWORD_REQUIRED);\n        } else if ($(pres)\n                .find(\n                    '>error[type=\"cancel\"]'\n                        + '>not-allowed['\n                        + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]')\n                .length) {\n            const toDomain = Strophe.getDomainFromJid(pres.getAttribute('to'));\n\n            if (toDomain === this.xmpp.options.hosts.anonymousdomain) {\n                // enter the room by replying with 'not-authorized'. This would\n                // result in reconnection from authorized domain.\n                // We're either missing Jicofo/Prosody config for anonymous\n                // domains or something is wrong.\n                this.eventEmitter.emit(XMPPEvents.ROOM_JOIN_ERROR);\n\n            } else {\n                logger.warn('onPresError ', pres);\n                this.eventEmitter.emit(\n                    XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR);\n            }\n        } else if ($(pres).find('>error>service-unavailable').length) {\n            logger.warn('Maximum users limit for the room has been reached',\n                pres);\n            this.eventEmitter.emit(XMPPEvents.ROOM_MAX_USERS_ERROR);\n        } else if ($(pres)\n            .find(\n                '>error[type=\"auth\"]'\n                + '>registration-required['\n                + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]').length) {\n\n            // let's extract the lobby jid from the custom field\n            const lobbyRoomNode = $(pres).find('>error[type=\"auth\"]>lobbyroom');\n            let lobbyRoomJid;\n\n            if (lobbyRoomNode.length) {\n                lobbyRoomJid = lobbyRoomNode.text();\n            } else {\n                // let's fallback to old location of lobbyroom node, TODO: to be removed in the future once\n                // everything is updated\n                const lobbyRoomOldNode = $(pres).find('>lobbyroom');\n\n                if (lobbyRoomOldNode.length) {\n                    lobbyRoomJid = lobbyRoomOldNode.text();\n                }\n            }\n\n            this.eventEmitter.emit(XMPPEvents.ROOM_CONNECT_MEMBERS_ONLY_ERROR, lobbyRoomJid);\n        } else {\n            logger.warn('onPresError ', pres);\n            this.eventEmitter.emit(XMPPEvents.ROOM_CONNECT_ERROR);\n        }\n    }\n\n    /**\n     *\n     * @param jid\n     * @param affiliation\n     */\n    setAffiliation(jid, affiliation) {\n        const grantIQ = $iq({\n            to: this.roomjid,\n            type: 'set'\n        })\n        .c('query', { xmlns: 'http://jabber.org/protocol/muc#admin' })\n        .c('item', {\n            affiliation,\n            jid: Strophe.getBareJidFromJid(jid)\n        })\n        .c('reason').t(`Your affiliation has been changed to '${affiliation}'.`)\n        .up().up().up();\n\n        this.connection.sendIQ(\n            grantIQ,\n            result => logger.log('Set affiliation of participant with jid: ', jid, 'to', affiliation, result),\n            error => logger.log('Set affiliation of participant error: ', error));\n    }\n\n    /**\n     *\n     * @param jid\n     * @param reason\n     */\n    kick(jid, reason = 'You have been kicked.') {\n        const kickIQ = $iq({ to: this.roomjid,\n            type: 'set' })\n            .c('query', { xmlns: 'http://jabber.org/protocol/muc#admin' })\n            .c('item', { nick: Strophe.getResourceFromJid(jid),\n                role: 'none' })\n            .c('reason').t(reason).up().up().up();\n\n        this.connection.sendIQ(\n            kickIQ,\n            result => logger.log('Kick participant with jid: ', jid, result),\n            error => logger.log('Kick participant error: ', error));\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     *\n     * @param key\n     * @param onSuccess\n     * @param onError\n     * @param onNotSupported\n     */\n    lockRoom(key, onSuccess, onError, onNotSupported) {\n        // http://xmpp.org/extensions/xep-0045.html#roomconfig\n        this.connection.sendIQ(\n            $iq({\n                to: this.roomjid,\n                type: 'get'\n            })\n                .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' }),\n            res => {\n                if ($(res)\n                        .find(\n                            '>query>x[xmlns=\"jabber:x:data\"]'\n                                + '>field[var=\"muc#roomconfig_roomsecret\"]')\n                        .length) {\n                    const formsubmit\n                        = $iq({\n                            to: this.roomjid,\n                            type: 'set'\n                        })\n                            .c('query', {\n                                xmlns: 'http://jabber.org/protocol/muc#owner'\n                            });\n\n                    formsubmit.c('x', {\n                        xmlns: 'jabber:x:data',\n                        type: 'submit'\n                    });\n                    formsubmit\n                        .c('field', { 'var': 'FORM_TYPE' })\n                        .c('value')\n                        .t('http://jabber.org/protocol/muc#roomconfig')\n                        .up()\n                        .up();\n                    formsubmit\n                        .c('field', { 'var': 'muc#roomconfig_roomsecret' })\n                        .c('value')\n                        .t(key)\n                        .up()\n                        .up();\n                    formsubmit\n                        .c('field',\n                             { 'var': 'muc#roomconfig_passwordprotectedroom' })\n                        .c('value')\n                        .t(key === null || key.length === 0 ? '0' : '1')\n                        .up()\n                        .up();\n\n                    // if members only enabled\n                    if (this.membersOnlyEnabled) {\n                        formsubmit\n                            .c('field', { 'var': 'muc#roomconfig_membersonly' })\n                            .c('value')\n                            .t('true')\n                            .up()\n                            .up();\n                    }\n\n                    // Fixes a bug in prosody 0.9.+\n                    // https://prosody.im/issues/issue/373\n                    formsubmit\n                        .c('field', { 'var': 'muc#roomconfig_whois' })\n                        .c('value')\n                        .t('anyone')\n                        .up()\n                        .up();\n\n                    this.connection.sendIQ(\n                        formsubmit,\n                        () => {\n\n                            // we set the password in chat room so we can use it\n                            // later when dialing out\n                            this.password = key;\n                            onSuccess();\n                        },\n                        onError);\n                } else {\n                    onNotSupported();\n                }\n            },\n            onError);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Turns off or on the members only config for the main room.\n     *\n     * @param {boolean} enabled - Whether to turn it on or off.\n     * @param onSuccess - optional callback.\n     * @param onError - optional callback.\n     */\n    setMembersOnly(enabled, onSuccess, onError) {\n        if (enabled && Object.values(this.members).filter(m => !m.isFocus).length) {\n            // first grant membership to all that are in the room\n            // currently there is a bug in prosody where it handles only the first item\n            // that's why we will send iq per member\n            Object.values(this.members).forEach(m => {\n                if (m.jid && !MEMBERS_AFFILIATIONS.includes(m.affiliation)) {\n                    this.xmpp.connection.sendIQ(\n                        $iq({\n                            to: this.roomjid,\n                            type: 'set' })\n                        .c('query', {\n                            xmlns: 'http://jabber.org/protocol/muc#admin' })\n                        .c('item', {\n                            'affiliation': 'member',\n                            'jid': Strophe.getBareJidFromJid(m.jid)\n                        }).up().up());\n                }\n            });\n        }\n\n        const errorCallback = onError ? onError : () => {}; // eslint-disable-line no-empty-function\n\n        this.xmpp.connection.sendIQ(\n            $iq({\n                to: this.roomjid,\n                type: 'get'\n            }).c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' }),\n            res => {\n                if ($(res).find('>query>x[xmlns=\"jabber:x:data\"]>field[var=\"muc#roomconfig_membersonly\"]').length) {\n                    const formToSubmit\n                        = $iq({\n                            to: this.roomjid,\n                            type: 'set'\n                        }).c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' });\n\n                    formToSubmit.c('x', {\n                        xmlns: 'jabber:x:data',\n                        type: 'submit'\n                    });\n                    formToSubmit\n                        .c('field', { 'var': 'FORM_TYPE' })\n                        .c('value')\n                        .t('http://jabber.org/protocol/muc#roomconfig')\n                        .up()\n                        .up();\n                    formToSubmit\n                        .c('field', { 'var': 'muc#roomconfig_membersonly' })\n                        .c('value')\n                        .t(enabled ? 'true' : 'false')\n                        .up()\n                        .up();\n\n                    // if room is locked from other participant or we are locking it\n                    if (this.locked) {\n                        formToSubmit\n                            .c('field',\n                                { 'var': 'muc#roomconfig_passwordprotectedroom' })\n                            .c('value')\n                            .t('1')\n                            .up()\n                            .up();\n                    }\n\n                    this.xmpp.connection.sendIQ(formToSubmit, onSuccess, errorCallback);\n                } else {\n                    errorCallback(new Error('Setting members only room not supported!'));\n                }\n            },\n            errorCallback);\n    }\n\n    /**\n     * Adds the key to the presence map, overriding any previous value.\n     * This method is used by jibri.\n     *\n     * @param key The key to add or replace.\n     * @param values The new values.\n     * @returns {boolean|null} <tt>true</tt> if the operation succeeded or <tt>false</tt> when no add or replce was\n     * performed as the value was already there.\n     * @deprecated Use 'addOrReplaceInPresence' instead. TODO: remove it from here and jibri.\n     */\n    addToPresence(key, values) {\n        return this.addOrReplaceInPresence(key, values);\n    }\n\n    /**\n     * Adds the key to the presence map, overriding any previous value.\n     * @param key The key to add or replace.\n     * @param values The new values.\n     * @returns {boolean|null} <tt>true</tt> if the operation succeeded or <tt>false</tt> when no add or replace was\n     * performed as the value was already there.\n     */\n    addOrReplaceInPresence(key, values) {\n        values.tagName = key;\n\n        const matchingNodes = this.presMap.nodes.filter(node => key === node.tagName);\n\n        // if we have found just one, let's check is it the same\n        if (matchingNodes.length === 1 && isEqual(matchingNodes[0], values)) {\n            return false;\n        }\n\n        this.removeFromPresence(key);\n        this.presMap.nodes.push(values);\n        this.presenceUpdateTime = Date.now();\n\n        return true;\n    }\n\n    /**\n     * Retrieves a value from the presence map.\n     *\n     * @param {string} key - The key to find the value for.\n     * @returns {Object?}\n     */\n    getFromPresence(key) {\n        return this.presMap.nodes.find(node => key === node.tagName);\n    }\n\n    /**\n     * Removes a key from the presence map.\n     * @param key\n     */\n    removeFromPresence(key) {\n        const nodes = this.presMap.nodes.filter(node => key !== node.tagName);\n\n        this.presMap.nodes = nodes;\n        this.presenceUpdateTime = Date.now();\n    }\n\n    /**\n     *\n     * @param name\n     * @param handler\n     */\n    addPresenceListener(name, handler) {\n        if (typeof handler !== 'function') {\n            throw new Error('\"handler\" is not a function');\n        }\n        let tagHandlers = this.presHandlers[name];\n\n        if (!tagHandlers) {\n            this.presHandlers[name] = tagHandlers = [];\n        }\n        if (tagHandlers.indexOf(handler) === -1) {\n            tagHandlers.push(handler);\n        } else {\n            logger.warn(\n                `Trying to add the same handler more than once for: ${name}`);\n        }\n    }\n\n    /**\n     *\n     * @param name\n     * @param handler\n     */\n    removePresenceListener(name, handler) {\n        const tagHandlers = this.presHandlers[name];\n        const handlerIdx = tagHandlers ? tagHandlers.indexOf(handler) : -1;\n\n        // eslint-disable-next-line no-negated-condition\n        if (handlerIdx !== -1) {\n            tagHandlers.splice(handlerIdx, 1);\n        } else {\n            logger.warn(`Handler for: ${name} was not registered`);\n        }\n    }\n\n    /**\n     * Checks if the user identified by given <tt>mucJid</tt> is the conference\n     * focus.\n     * @param mucJid the full MUC address of the user to be checked.\n     * @returns {boolean|null} <tt>true</tt> if MUC user is the conference focus\n     * or <tt>false</tt> if is not. When given <tt>mucJid</tt> does not exist in\n     * the MUC then <tt>null</tt> is returned.\n     */\n    isFocus(mucJid) {\n        const member = this.members[mucJid];\n\n        if (member) {\n            return member.isFocus;\n        }\n\n        return null;\n    }\n\n    /**\n     *\n     */\n    isModerator() {\n        return this.role === 'moderator';\n    }\n\n    /**\n     *\n     * @param peerJid\n     */\n    getMemberRole(peerJid) {\n        if (this.members[peerJid]) {\n            return this.members[peerJid].role;\n        }\n\n        return null;\n    }\n\n    /**\n     *\n     * @param mute\n     */\n    addAudioInfoToPresence(mute) {\n        const audioMutedTagName = 'audiomuted';\n\n        // we skip adding it as muted is default value\n        if (mute && !this.getFromPresence(audioMutedTagName)) {\n            return false;\n        }\n\n        return this.addOrReplaceInPresence(\n            audioMutedTagName,\n            {\n                value: mute.toString()\n            });\n    }\n\n    /**\n     *\n     * @param mute\n     */\n    addVideoInfoToPresence(mute) {\n        const videoMutedTagName = 'videomuted';\n\n        // we skip adding it as muted is default value\n        if (mute && !this.getFromPresence(videoMutedTagName)) {\n            return false;\n        }\n\n        return this.addOrReplaceInPresence(\n            videoMutedTagName,\n            {\n                value: mute.toString()\n            });\n    }\n\n    /**\n     * Obtains the info about given media advertised in the MUC presence of\n     * the participant identified by the given endpoint JID.\n     * @param {string} endpointId the endpoint ID mapped to the participant\n     * which corresponds to MUC nickname.\n     * @param {MediaType} mediaType the type of the media for which presence\n     * info will be obtained.\n     * @return {PeerMediaInfo} presenceInfo an object with media presence\n     * info or <tt>null</tt> either if there is no presence available or if\n     * the media type given is invalid.\n     */\n    getMediaPresenceInfo(endpointId, mediaType) {\n        // Will figure out current muted status by looking up owner's presence\n        const pres = this.lastPresences[`${this.roomjid}/${endpointId}`];\n\n        if (!pres) {\n            // No presence available\n            return null;\n        }\n        const data = {\n            muted: true, // muted by default\n            videoType: mediaType === MediaType.VIDEO ? VideoType.CAMERA : undefined // 'camera' by default\n        };\n        let mutedNode = null;\n\n        if (mediaType === MediaType.AUDIO) {\n            mutedNode = filterNodeFromPresenceJSON(pres, 'audiomuted');\n        } else if (mediaType === MediaType.VIDEO) {\n            mutedNode = filterNodeFromPresenceJSON(pres, 'videomuted');\n            const codecTypeNode = filterNodeFromPresenceJSON(pres, 'jitsi_participant_codecType');\n            const videoTypeNode = filterNodeFromPresenceJSON(pres, 'videoType');\n\n            if (videoTypeNode.length > 0) {\n                data.videoType = videoTypeNode[0].value;\n            }\n            if (codecTypeNode.length > 0) {\n                data.codecType = codecTypeNode[0].value;\n            }\n        } else {\n            logger.error(`Unsupported media type: ${mediaType}`);\n\n            return null;\n        }\n\n        if (mutedNode.length > 0) {\n            data.muted = mutedNode[0].value === 'true';\n        }\n\n        return data;\n    }\n\n    /**\n     * Returns the last presence advertised by a MUC member.\n     * @param {string} mucNick\n     * @returns {*}\n     */\n    getLastPresence(mucNick) {\n        return this.lastPresences[`${this.roomjid}/${mucNick}`];\n    }\n\n    /**\n     * Returns true if the SIP calls are supported and false otherwise\n     */\n    isSIPCallingSupported() {\n        if (this.moderator) {\n            return this.moderator.isSipGatewayEnabled();\n        }\n\n        return false;\n    }\n\n    /**\n     * Dials a number.\n     * @param number the number\n     */\n    dial(number) {\n        return this.connection.rayo.dial(number, 'fromnumber',\n            Strophe.getBareJidFromJid(this.myroomjid), this.password,\n            this.focusMucJid);\n    }\n\n    /**\n     * Hangup an existing call\n     */\n    hangup() {\n        return this.connection.rayo.hangup();\n    }\n\n    /**\n     *\n     * @returns {Lobby}\n     */\n    getLobby() {\n        return this.lobby;\n    }\n\n    /**\n     * @returns {AVModeration}\n     */\n    getAVModeration() {\n        return this.avModeration;\n    }\n\n    /**\n     * @returns {BreakoutRooms}\n     */\n    getBreakoutRooms() {\n        return this.breakoutRooms;\n    }\n\n    /**\n     * Returns the phone number for joining the conference.\n     */\n    getPhoneNumber() {\n        return this.phoneNumber;\n    }\n\n    /**\n     * Returns the pin for joining the conference with phone.\n     */\n    getPhonePin() {\n        return this.phonePin;\n    }\n\n    /**\n     * Returns the meeting unique ID if any came from backend.\n     *\n     * @returns {string} - The meeting ID.\n     */\n    getMeetingId() {\n        return this.meetingId;\n    }\n\n    /**\n     * Mutes remote participant.\n     * @param jid of the participant\n     * @param mute\n     * @param mediaType\n     */\n    muteParticipant(jid, mute, mediaType) {\n        logger.info('set mute', mute, jid);\n        const iqToFocus = $iq(\n            { to: this.focusMucJid,\n                type: 'set' })\n            .c('mute', {\n                xmlns: `http://jitsi.org/jitmeet/${mediaType}`,\n                jid\n            })\n            .t(mute.toString())\n            .up();\n\n        this.connection.sendIQ(\n            iqToFocus,\n            result => logger.log('set mute', result),\n            error => logger.log('set mute error', error));\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMute(iq) {\n        const from = iq.getAttribute('from');\n\n        if (from !== this.focusMucJid) {\n            logger.warn('Ignored mute from non focus peer');\n\n            return;\n        }\n        const mute = $(iq).find('mute');\n\n        if (mute.length && mute.text() === 'true') {\n            this.eventEmitter.emit(XMPPEvents.AUDIO_MUTED_BY_FOCUS, mute.attr('actor'));\n        } else {\n            // XXX Why do we support anything but muting? Why do we encode the\n            // value in the text of the element? Why do we use a separate XML\n            // namespace?\n            logger.warn('Ignoring a mute request which does not explicitly '\n                + 'specify a positive mute command.');\n        }\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMuteVideo(iq) {\n        const from = iq.getAttribute('from');\n\n        if (from !== this.focusMucJid) {\n            logger.warn('Ignored mute from non focus peer');\n\n            return;\n        }\n        const mute = $(iq).find('mute');\n\n        if (mute.length && mute.text() === 'true') {\n            this.eventEmitter.emit(XMPPEvents.VIDEO_MUTED_BY_FOCUS, mute.attr('actor'));\n        } else {\n            // XXX Why do we support anything but muting? Why do we encode the\n            // value in the text of the element? Why do we use a separate XML\n            // namespace?\n            logger.warn('Ignoring a mute request which does not explicitly '\n                + 'specify a positive mute command.');\n        }\n    }\n\n    /**\n     * Clean any listeners or resources, executed on leaving.\n     */\n    clean() {\n        this._removeConnListeners.forEach(remove => remove());\n        this._removeConnListeners = [];\n\n        this.joined = false;\n        this.inProgressEmitted = false;\n    }\n\n    /**\n     * Leaves the room. Closes the jingle session.\n     * @returns {Promise} which is resolved if XMPPEvents.MUC_LEFT is received\n     * less than 5s after sending presence unavailable. Otherwise the promise is\n     * rejected.\n     */\n    leave(reason) {\n        this.avModeration.dispose();\n        this.breakoutRooms.dispose();\n\n        const promises = [];\n\n        this.lobby?.lobbyRoom && promises.push(this.lobby.leave());\n\n        promises.push(new Promise((resolve, reject) => {\n            let timeout = -1;\n\n            const onMucLeft = (doReject = false) => {\n                this.eventEmitter.removeListener(XMPPEvents.MUC_LEFT, onMucLeft);\n                clearTimeout(timeout);\n                if (doReject) {\n                    // The timeout expired. Make sure we clean the EMUC state.\n                    this.connection.emuc.doLeave(this.roomjid);\n                    reject(new Error('The timeout for the confirmation about leaving the room expired.'));\n                } else {\n                    resolve();\n                }\n            };\n\n            timeout = setTimeout(() => onMucLeft(true), 5000);\n\n            this.clean();\n            this.eventEmitter.on(XMPPEvents.MUC_LEFT, onMucLeft);\n            this.doLeave(reason);\n        }));\n\n        return Promise.allSettled(promises);\n    }\n}\n\n/* eslint-enable newline-per-chained-call */\n","/* global $ */\n\nimport { getLogger } from '@jitsi/logger';\nimport { Strophe } from 'strophe.js';\n\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\n\nimport ChatRoom from './ChatRoom';\nimport { ConnectionPluginListenable } from './ConnectionPlugin';\n\nconst logger = getLogger(__filename);\n\n/**\n * MUC connection plugin.\n */\nexport default class MucConnectionPlugin extends ConnectionPluginListenable {\n    /**\n     *\n     * @param xmpp\n     */\n    constructor(xmpp) {\n        super();\n        this.xmpp = xmpp;\n        this.rooms = {};\n    }\n\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n\n        // add handlers (just once)\n        this.connection.addHandler(this.onPresence.bind(this), null,\n            'presence', null, null, null, null);\n        this.connection.addHandler(this.onPresenceUnavailable.bind(this),\n            null, 'presence', 'unavailable', null);\n        this.connection.addHandler(this.onPresenceError.bind(this), null,\n            'presence', 'error', null);\n        this.connection.addHandler(this.onMessage.bind(this), null,\n            'message', null, null);\n        this.connection.addHandler(this.onMute.bind(this),\n            'http://jitsi.org/jitmeet/audio', 'iq', 'set', null, null);\n        this.connection.addHandler(this.onMuteVideo.bind(this),\n            'http://jitsi.org/jitmeet/video', 'iq', 'set', null, null);\n    }\n\n    /**\n     *\n     * @param jid\n     * @param password\n     * @param options\n     */\n    createRoom(jid, password, options) {\n        const roomJid = Strophe.getBareJidFromJid(jid);\n\n        if (this.isRoomCreated(roomJid)) {\n            const errmsg = 'You are already in the room!';\n\n            logger.error(errmsg);\n            throw new Error(errmsg);\n        }\n        this.rooms[roomJid] = new ChatRoom(this.connection, jid,\n            password, this.xmpp, options);\n        this.eventEmitter.emit(\n            XMPPEvents.EMUC_ROOM_ADDED, this.rooms[roomJid]);\n\n        return this.rooms[roomJid];\n    }\n\n    /**\n     *  Check if a room with the passed JID is already created.\n     *\n     * @param {string} roomJid - The JID of the room.\n     * @returns {boolean}\n     */\n    isRoomCreated(roomJid) {\n        return roomJid in this.rooms;\n    }\n\n    /**\n     *\n     * @param jid\n     */\n    doLeave(jid) {\n        this.eventEmitter.emit(\n            XMPPEvents.EMUC_ROOM_REMOVED, this.rooms[jid]);\n        delete this.rooms[jid];\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresence(pres) {\n        const from = pres.getAttribute('from');\n\n        // What is this for? A workaround for something?\n        if (pres.getAttribute('type')) {\n            return true;\n        }\n\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        // Parse status.\n        if ($(pres).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n            + '>status[code=\"201\"]').length) {\n            room.createNonAnonymousRoom();\n        }\n\n        room.onPresence(pres);\n\n        return true;\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresenceUnavailable(pres) {\n        const from = pres.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        room.onPresenceUnavailable(pres, from);\n\n        return true;\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresenceError(pres) {\n        const from = pres.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        room.onPresenceError(pres, from);\n\n        return true;\n    }\n\n    /**\n     *\n     * @param msg\n     */\n    onMessage(msg) {\n        // FIXME: this is a hack. but jingle on muc makes nickchanges hard\n        const from = msg.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        room.onMessage(msg, from);\n\n        return true;\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMute(iq) {\n        const from = iq.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        // Returning false would result in the listener being deregistered by Strophe\n        if (!room) {\n            return true;\n        }\n\n        room.onMute(iq);\n\n        return true;\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMuteVideo(iq) {\n        const from = iq.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        // Returning false would result in the listener being deregistered by Strophe\n        if (!room) {\n            return true;\n        }\n\n        room.onMuteVideo(iq);\n\n        return true;\n    }\n}\n","/* global $ */\n\nimport { getLogger } from '@jitsi/logger';\nimport { $build } from 'strophe.js';\n\nimport { MediaType } from '../../service/RTC/MediaType';\nimport FeatureFlags from '../flags/FeatureFlags';\n\nconst logger = getLogger(__filename);\n\n/**\n * Creates a \"source\" XML element for the source described in compact JSON format in [sourceCompactJson].\n * @param {*} owner the endpoint ID of the owner of the source.\n * @param {*} sourceCompactJson the compact JSON representation of the source.\n * @returns the created \"source\" XML element.\n */\nfunction _createSourceExtension(owner, sourceCompactJson) {\n    const node = $build('source', {\n        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0',\n        ssrc: sourceCompactJson.s,\n        name: FeatureFlags.isSourceNameSignalingEnabled() ? sourceCompactJson.n : undefined\n    });\n\n    if (sourceCompactJson.m) {\n        node.c('parameter', {\n            name: 'msid',\n            value: sourceCompactJson.m\n        }).up();\n    }\n    node.c('ssrc-info', {\n        xmlns: 'http://jitsi.org/jitmeet',\n        owner\n    }).up();\n\n    return node.node;\n}\n\n/**\n * Creates an \"ssrc-group\" XML element for the SSRC group described in compact JSON format in [ssrcGroupCompactJson].\n * @param {*} ssrcGroupCompactJson the compact JSON representation of the SSRC group.\n * @returns the created \"ssrc-group\" element.\n */\nfunction _createSsrcGroupExtension(ssrcGroupCompactJson) {\n    const node = $build('ssrc-group', {\n        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0',\n        semantics: _getSemantics(ssrcGroupCompactJson[0])\n    });\n\n    for (let i = 1; i < ssrcGroupCompactJson.length; i++) {\n        node.c('source', {\n            xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0',\n            ssrc: ssrcGroupCompactJson[i]\n        }).up();\n    }\n\n    return node.node;\n}\n\n/**\n * Finds in a Jingle IQ the RTP description element with the given media type. If one does not exists, create it (as\n *  well as the required  \"content\" parent element) and adds it to the IQ.\n * @param {*} iq\n * @param {*} mediaType The media type, \"audio\" or \"video\".\n * @returns the RTP description element with the given media type.\n */\nfunction _getOrCreateRtpDescription(iq, mediaType) {\n    const jingle = $(iq).find('jingle')[0];\n    let content = $(jingle).find(`content[name=\"${mediaType}\"]`);\n    let description;\n\n    if (content.length) {\n        content = content[0];\n    } else {\n        // I'm not suree if \"creator\" and \"senders\" are required.\n        content = $build('content', {\n            name: mediaType\n        }).node;\n        jingle.appendChild(content);\n    }\n\n    description = $(content).find('description');\n\n    if (description.length) {\n        description = description[0];\n    } else {\n        description = $build('description', {\n            xmlns: 'urn:xmpp:jingle:apps:rtp:1',\n            media: mediaType\n        }).node;\n        content.appendChild(description);\n    }\n\n    return description;\n}\n\n/**\n * Converts the short string representing SSRC group semantics in compact JSON format to the standard representation\n * (i.e. convert \"f\" to \"FID\" and \"s\" to \"SIM\").\n * @param {*} str the compact JSON format representation of an SSRC group's semantics.\n * @returns the SSRC group semantics corresponding to [str].\n */\nfunction _getSemantics(str) {\n    if (str === 'f') {\n        return 'FID';\n    } else if (str === 's') {\n        return 'SIM';\n    }\n\n    return null;\n}\n\n/**\n * Reads a JSON-encoded message (from a \"json-message\" element) and extracts source descriptions. Adds the extracted\n * source descriptions to the given Jingle IQ in the standard Jingle format.\n *\n * Encoding sources in this compact JSON format instead of standard Jingle was introduced in order to reduce the\n * network traffic and load on the XMPP server. The format is described in Jicofo [TODO: insert link].\n *\n * @param {*} iq the IQ to which source descriptions will be added.\n * @param {*} jsonMessageXml The XML node for the \"json-message\" element.\n * @returns {Map<string, Array<string>} The audio and video ssrcs extracted from the JSON-encoded message with remote\n * endpoint id as the key.\n */\nexport function expandSourcesFromJson(iq, jsonMessageXml) {\n    let json;\n\n    try {\n        json = JSON.parse(jsonMessageXml.textContent);\n    } catch (error) {\n        logger.error(`json-message XML contained invalid JSON, ignoring: ${jsonMessageXml.textContent}`);\n\n        return null;\n    }\n\n    if (!json?.sources) {\n        // It might be a message of a different type, no need to log.\n        return null;\n    }\n\n    // This is where we'll add \"source\" and \"ssrc-group\" elements. Create them elements if they don't exist.\n    const audioRtpDescription = _getOrCreateRtpDescription(iq, MediaType.AUDIO);\n    const videoRtpDescription = _getOrCreateRtpDescription(iq, MediaType.VIDEO);\n    const ssrcMap = new Map();\n\n    for (const owner in json.sources) {\n        if (json.sources.hasOwnProperty(owner)) {\n            const ssrcs = [];\n            const ownerSources = json.sources[owner];\n\n            // The video sources, video ssrc-groups, audio sources and audio ssrc-groups are encoded in that order in\n            // the elements of the array.\n            const videoSources = ownerSources?.length && ownerSources[0];\n            const videoSsrcGroups = ownerSources?.length > 1 && ownerSources[1];\n            const audioSources = ownerSources?.length > 2 && ownerSources[2];\n            const audioSsrcGroups = ownerSources?.length > 3 && ownerSources[3];\n\n            if (videoSources?.length) {\n                for (let i = 0; i < videoSources.length; i++) {\n                    videoRtpDescription.appendChild(_createSourceExtension(owner, videoSources[i]));\n                    ssrcs.push(videoSources[i]?.s);\n                }\n            }\n\n            if (videoSsrcGroups?.length) {\n                for (let i = 0; i < videoSsrcGroups.length; i++) {\n                    videoRtpDescription.appendChild(_createSsrcGroupExtension(videoSsrcGroups[i]));\n                }\n            }\n            if (audioSources?.length) {\n                for (let i = 0; i < audioSources.length; i++) {\n                    audioRtpDescription.appendChild(_createSourceExtension(owner, audioSources[i]));\n                    ssrcs.push(audioSources[i]?.s);\n                }\n            }\n\n            if (audioSsrcGroups?.length) {\n                for (let i = 0; i < audioSsrcGroups.length; i++) {\n                    audioRtpDescription.appendChild(_createSsrcGroupExtension(audioSsrcGroups[i]));\n                }\n            }\n            ssrcMap.set(owner, ssrcs);\n        }\n    }\n\n    return ssrcMap;\n}\n","/**\n * Enumeration of the media direction types.\n */\nexport enum MediaDirection {\n    /**\n     * Media is send and receive is suspended.\n     */\n    INACTIVE = 'inactive',\n\n    /**\n     * Media is only received from remote peer.\n     */\n    RECVONLY = 'recvonly',\n\n    /**\n     * Media is only sent to the remote peer.\n     */\n    SENDONLY = 'sendonly',\n\n    /**\n     * Media is sent and received.\n     */\n    SENDRECV = 'sendrecv'\n};\n","\nimport JitsiTrackError from '../../JitsiTrackError';\nimport * as JitsiTrackErrors from '../../JitsiTrackErrors';\nimport browser from '../browser';\n\nconst logger = require('@jitsi/logger').getLogger(__filename);\n\n/**\n * The default frame rate for Screen Sharing.\n */\nexport const SS_DEFAULT_FRAME_RATE = 5;\n\n/**\n * Handles obtaining a stream from a screen capture on different browsers.\n */\nconst ScreenObtainer = {\n    /**\n     * If not <tt>null</tt> it means that the initialization process is still in\n     * progress. It is used to make desktop stream request wait and continue\n     * after it's done.\n     * {@type Promise|null}\n     */\n\n    obtainStream: null,\n\n    /**\n     * Initializes the function used to obtain a screen capture\n     * (this.obtainStream).\n     *\n     * @param {object} options\n     */\n    init(options = {}) {\n        this.options = options;\n        this.obtainStream = this._createObtainStreamMethod();\n\n        if (!this.obtainStream) {\n            logger.info('Desktop sharing disabled');\n        }\n    },\n\n    /**\n     * Returns a method which will be used to obtain the screen sharing stream\n     * (based on the browser type).\n     *\n     * @returns {Function}\n     * @private\n     */\n    _createObtainStreamMethod() {\n        if (browser.isNWJS()) {\n            return (onSuccess, onFailure) => {\n                window.JitsiMeetNW.obtainDesktopStream(\n                    onSuccess,\n                    (error, constraints) => {\n                        let jitsiError;\n\n                        // FIXME:\n                        // This is very very dirty fix for recognising that the\n                        // user have clicked the cancel button from the Desktop\n                        // sharing pick window. The proper solution would be to\n                        // detect this in the NWJS application by checking the\n                        // streamId === \"\". Even better solution would be to\n                        // stop calling GUM from the NWJS app and just pass the\n                        // streamId to lib-jitsi-meet. This way the desktop\n                        // sharing implementation for NWJS and chrome extension\n                        // will be the same and lib-jitsi-meet will be able to\n                        // control the constraints, check the streamId, etc.\n                        //\n                        // I cannot find documentation about \"InvalidStateError\"\n                        // but this is what we are receiving from GUM when the\n                        // streamId for the desktop sharing is \"\".\n\n                        if (error && error.name === 'InvalidStateError') {\n                            jitsiError = new JitsiTrackError(\n                                JitsiTrackErrors.SCREENSHARING_USER_CANCELED\n                            );\n                        } else {\n                            jitsiError = new JitsiTrackError(\n                                error, constraints, [ 'desktop' ]);\n                        }\n                        (typeof onFailure === 'function')\n                            && onFailure(jitsiError);\n                    });\n            };\n        } else if (browser.isElectron()) {\n            return this.obtainScreenOnElectron;\n        } else if (browser.isReactNative() && browser.supportsGetDisplayMedia()) {\n            return this.obtainScreenFromGetDisplayMediaRN;\n        } else if (browser.supportsGetDisplayMedia()) {\n            return this.obtainScreenFromGetDisplayMedia;\n        }\n        logger.log('Screen sharing not supported on ', browser.getName());\n\n        return null;\n    },\n\n    /**\n     * Gets the appropriate constraints for audio sharing.\n     *\n     * @returns {Object|boolean}\n     */\n    _getAudioConstraints() {\n        const { audioQuality } = this.options;\n        const audio = audioQuality?.stereo ? {\n            autoGainControl: false,\n            channelCount: 2,\n            echoCancellation: false,\n            noiseSuppression: false\n        } : true;\n\n        return audio;\n    },\n\n    /**\n     * Checks whether obtaining a screen capture is supported in the current\n     * environment.\n     * @returns {boolean}\n     */\n    isSupported() {\n        return this.obtainStream !== null;\n    },\n\n    /**\n     * Obtains a screen capture stream on Electron.\n     *\n     * @param onSuccess - Success callback.\n     * @param onFailure - Failure callback.\n     * @param {Object} options - Optional parameters.\n     */\n    obtainScreenOnElectron(onSuccess, onFailure, options = {}) {\n        if (window.JitsiMeetScreenObtainer && window.JitsiMeetScreenObtainer.openDesktopPicker) {\n            const { desktopSharingFrameRate, desktopSharingSources } = this.options;\n\n            window.JitsiMeetScreenObtainer.openDesktopPicker(\n                {\n                    desktopSharingSources:\n                        options.desktopSharingSources || desktopSharingSources || [ 'screen', 'window' ]\n                },\n                (streamId, streamType, screenShareAudio = false) => {\n                    if (streamId) {\n                        let audioConstraints = false;\n\n                        if (screenShareAudio) {\n                            audioConstraints = {};\n                            const optionalConstraints = this._getAudioConstraints();\n\n                            if (typeof optionalConstraints !== 'boolean') {\n                                audioConstraints = {\n                                    optional: optionalConstraints\n                                };\n                            }\n\n                            // Audio screen sharing for electron only works for screen type devices.\n                            // i.e. when the user shares the whole desktop.\n                            // Note. The documentation specifies that chromeMediaSourceId should not be present\n                            // which, in the case a users has multiple monitors, leads to them being shared all\n                            // at once. However we tested with chromeMediaSourceId present and it seems to be\n                            // working properly.\n                            if (streamType === 'screen') {\n                                audioConstraints.mandatory = {\n                                    chromeMediaSource: 'desktop'\n                                };\n                            }\n                        }\n\n                        const constraints = {\n                            audio: audioConstraints,\n                            video: {\n                                mandatory: {\n                                    chromeMediaSource: 'desktop',\n                                    chromeMediaSourceId: streamId,\n                                    minFrameRate: desktopSharingFrameRate?.min ?? SS_DEFAULT_FRAME_RATE,\n                                    maxFrameRate: desktopSharingFrameRate?.max ?? SS_DEFAULT_FRAME_RATE,\n                                    maxWidth: window.screen.width,\n                                    maxHeight: window.screen.height\n                                }\n                            }\n                        };\n\n                        // We have to use the old API on Electron to get a desktop stream.\n                        navigator.mediaDevices.getUserMedia(constraints)\n                            .then(stream => onSuccess({\n                                stream,\n                                sourceId: streamId,\n                                sourceType: streamType\n                            }), onFailure);\n                    } else {\n                        // As noted in Chrome Desktop Capture API:\n                        // If user didn't select any source (i.e. canceled the prompt)\n                        // then the callback is called with an empty streamId.\n                        onFailure(new JitsiTrackError(JitsiTrackErrors.SCREENSHARING_USER_CANCELED));\n                    }\n                },\n                err => onFailure(new JitsiTrackError(\n                    JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_ERROR,\n                    err\n                ))\n            );\n        } else {\n            onFailure(new JitsiTrackError(JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_NOT_FOUND));\n        }\n    },\n\n    /**\n     * Obtains a screen capture stream using getDisplayMedia.\n     *\n     * @param callback - The success callback.\n     * @param errorCallback - The error callback.\n     */\n    obtainScreenFromGetDisplayMedia(callback, errorCallback) {\n        let getDisplayMedia;\n\n        if (navigator.getDisplayMedia) {\n            getDisplayMedia = navigator.getDisplayMedia.bind(navigator);\n        } else {\n            // eslint-disable-next-line max-len\n            getDisplayMedia = navigator.mediaDevices.getDisplayMedia.bind(navigator.mediaDevices);\n        }\n\n        const { desktopSharingFrameRate } = this.options;\n        const setScreenSharingResolutionConstraints = browser.isChromiumBased()\n            && this.options?.testing?.setScreenSharingResolutionConstraints;\n        let video = {};\n\n        if (typeof desktopSharingFrameRate === 'object') {\n            video.frameRate = desktopSharingFrameRate;\n        }\n\n        // Capturing the screenshare at very high resolutions restricts the framerate. Therefore, skip this hack when\n        // the capture framerate is > 5 fps.\n        if (setScreenSharingResolutionConstraints && !(desktopSharingFrameRate?.max > SS_DEFAULT_FRAME_RATE)) {\n            // Set bogus resolution constraints to work around\n            // https://bugs.chromium.org/p/chromium/issues/detail?id=1056311\n            video.height = 99999;\n            video.width = 99999;\n        }\n\n        const audio = this._getAudioConstraints();\n\n        // At the time of this writing 'min' constraint for fps is not supported by getDisplayMedia.\n        video.frameRate && delete video.frameRate.min;\n\n        if (Object.keys(video).length === 0) {\n            video = true;\n        }\n\n        const constraints = {\n            video,\n            audio,\n            cursor: 'always'\n        };\n\n        logger.info('Using getDisplayMedia for screen sharing', constraints);\n\n        getDisplayMedia(constraints)\n            .then(stream => {\n                callback({\n                    stream,\n                    sourceId: stream.id\n                });\n            })\n            .catch(error => {\n                const errorDetails = {\n                    errorName: error && error.name,\n                    errorMsg: error && error.message,\n                    errorStack: error && error.stack\n                };\n\n                logger.error('getDisplayMedia error', constraints, errorDetails);\n\n                if (errorDetails.errorMsg && errorDetails.errorMsg.indexOf('denied by system') !== -1) {\n                    // On Chrome this is the only thing different between error returned when user cancels\n                    // and when no permission was given on the OS level.\n                    errorCallback(new JitsiTrackError(JitsiTrackErrors.PERMISSION_DENIED));\n\n                    return;\n                }\n\n                errorCallback(new JitsiTrackError(JitsiTrackErrors.SCREENSHARING_USER_CANCELED));\n            });\n    },\n\n    /**\n     * Obtains a screen capture stream using getDisplayMedia.\n     *\n     * @param callback - The success callback.\n     * @param errorCallback - The error callback.\n     */\n    obtainScreenFromGetDisplayMediaRN(callback, errorCallback) {\n        logger.info('Using getDisplayMedia for screen sharing');\n\n        navigator.mediaDevices.getDisplayMedia({ video: true })\n            .then(stream => {\n                callback({\n                    stream,\n                    sourceId: stream.id });\n            })\n            .catch(() => {\n                errorCallback(new JitsiTrackError(JitsiTrackErrors\n                    .SCREENSHARING_USER_CANCELED));\n            });\n    },\n\n    /**\n     * Sets the max frame rate to be used for a desktop track capture.\n     *\n     * @param {number} maxFps capture frame rate to be used for desktop tracks.\n     * @returns {void}\n     */\n    setDesktopSharingFrameRate(maxFps) {\n        logger.info(`Setting the desktop capture rate to ${maxFps}`);\n\n        this.options.desktopSharingFrameRate = {\n            min: SS_DEFAULT_FRAME_RATE,\n            max: maxFps\n        };\n    }\n};\n\nexport default ScreenObtainer;\n","import { getLogger } from '@jitsi/logger';\nconst logger = getLogger(__filename);\n\nimport CodecMimeType from '../../service/RTC/CodecMimeType';\nimport { MediaDirection } from '../../service/RTC/MediaDirection';\nimport browser from '../browser';\nimport RandomUtil from '../util/RandomUtil';\n\nconst SDPUtil = {\n    filterSpecialChars(text) {\n        // XXX Neither one of the falsy values (e.g. null, undefined, false,\n        // \"\", etc.) \"contain\" special chars.\n        // eslint-disable-next-line no-useless-escape\n        return text ? text.replace(/[\\\\\\/\\{,\\}\\+]/g, '') : text;\n    },\n    iceparams(mediadesc, sessiondesc) {\n        let data = null;\n        let pwd, ufrag;\n\n        if ((ufrag = SDPUtil.findLine(mediadesc, 'a=ice-ufrag:', sessiondesc))\n                && (pwd\n                    = SDPUtil.findLine(\n                        mediadesc,\n                        'a=ice-pwd:',\n                        sessiondesc))) {\n            data = {\n                ufrag: SDPUtil.parseICEUfrag(ufrag),\n                pwd: SDPUtil.parseICEPwd(pwd)\n            };\n        }\n\n        return data;\n    },\n    parseICEUfrag(line) {\n        return line.substring(12);\n    },\n    buildICEUfrag(frag) {\n        return `a=ice-ufrag:${frag}`;\n    },\n    parseICEPwd(line) {\n        return line.substring(10);\n    },\n    buildICEPwd(pwd) {\n        return `a=ice-pwd:${pwd}`;\n    },\n    parseMID(line) {\n        return line.substring(6);\n    },\n\n    /**\n     * Finds the MSID attribute in the given array of SSRC attribute lines and returns the value.\n     *\n     * @param {string[]} ssrcLines - an array of lines similar to 'a:213123 msid:stream-id track-id'.\n     * @returns {undefined|string}\n     */\n    parseMSIDAttribute(ssrcLines) {\n        const msidLine = ssrcLines.find(line => line.indexOf(' msid:') > 0);\n\n        if (!msidLine) {\n            return undefined;\n        }\n\n        const v = msidLine.substring(msidLine.indexOf(' msid:') + 6 /* the length of ' msid:' */);\n\n        return SDPUtil.filterSpecialChars(v);\n    },\n    parseMLine(line) {\n        const data = {};\n        const parts = line.substring(2).split(' ');\n\n        data.media = parts.shift();\n        data.port = parts.shift();\n        data.proto = parts.shift();\n        if (parts[parts.length - 1] === '') { // trailing whitespace\n            parts.pop();\n        }\n        data.fmt = parts;\n\n        return data;\n    },\n    buildMLine(mline) {\n        return (\n            `m=${mline.media} ${mline.port} ${mline.proto} ${\n                mline.fmt.join(' ')}`);\n    },\n    parseRTPMap(line) {\n        const data = {};\n        let parts = line.substring(9).split(' ');\n\n        data.id = parts.shift();\n        parts = parts[0].split('/');\n        data.name = parts.shift();\n        data.clockrate = parts.shift();\n        data.channels = parts.length ? parts.shift() : '1';\n\n        return data;\n    },\n\n    /**\n     * Parses SDP line \"a=sctpmap:...\" and extracts SCTP port from it.\n     * @param line eg. \"a=sctpmap:5000 webrtc-datachannel\"\n     * @returns [SCTP port number, protocol, streams]\n     */\n    parseSCTPMap(line) {\n        const parts = line.substring(10).split(' ');\n        const sctpPort = parts[0];\n        const protocol = parts[1];\n\n        // Stream count is optional\n        const streamCount = parts.length > 2 ? parts[2] : null;\n\n\n        return [ sctpPort, protocol, streamCount ];// SCTP port\n    },\n    parseSCTPPort(line) {\n        return line.substring(12);\n    },\n    buildRTPMap(el) {\n        let line\n            = `a=rtpmap:${el.getAttribute('id')} ${el.getAttribute('name')}/${\n                el.getAttribute('clockrate')}`;\n\n        if (el.getAttribute('channels')\n            && el.getAttribute('channels') !== '1') {\n            line += `/${el.getAttribute('channels')}`;\n        }\n\n        return line;\n    },\n    parseCrypto(line) {\n        const data = {};\n        const parts = line.substring(9).split(' ');\n\n        data.tag = parts.shift();\n        data['crypto-suite'] = parts.shift();\n        data['key-params'] = parts.shift();\n        if (parts.length) {\n            data['session-params'] = parts.join(' ');\n        }\n\n        return data;\n    },\n    parseFingerprint(line) { // RFC 4572\n        const data = {};\n        const parts = line.substring(14).split(' ');\n\n        data.hash = parts.shift();\n        data.fingerprint = parts.shift();\n\n        // TODO assert that fingerprint satisfies 2UHEX *(\":\" 2UHEX) ?\n        return data;\n    },\n    parseFmtp(line) {\n        const data = [];\n        let parts = line.split(' ');\n\n        parts.shift();\n        parts = parts.join(' ').split(';');\n        for (let i = 0; i < parts.length; i++) {\n            let key = parts[i].split('=')[0];\n\n            while (key.length && key[0] === ' ') {\n                key = key.substring(1);\n            }\n            const value = parts[i].split('=')[1];\n\n            if (key && value) {\n                data.push({ name: key,\n                    value });\n            } else if (key) {\n                // rfc 4733 (DTMF) style stuff\n                data.push({ name: '',\n                    value: key });\n            }\n        }\n\n        return data;\n    },\n    parseICECandidate(line) {\n        const candidate = {};\n        const elems = line.split(' ');\n\n        candidate.foundation = elems[0].substring(12);\n        candidate.component = elems[1];\n        candidate.protocol = elems[2].toLowerCase();\n        candidate.priority = elems[3];\n        candidate.ip = elems[4];\n        candidate.port = elems[5];\n\n        // elems[6] => \"typ\"\n        candidate.type = elems[7];\n        candidate.generation = 0; // default value, may be overwritten below\n        for (let i = 8; i < elems.length; i += 2) {\n            switch (elems[i]) {\n            case 'raddr':\n                candidate['rel-addr'] = elems[i + 1];\n                break;\n            case 'rport':\n                candidate['rel-port'] = elems[i + 1];\n                break;\n            case 'generation':\n                candidate.generation = elems[i + 1];\n                break;\n            case 'tcptype':\n                candidate.tcptype = elems[i + 1];\n                break;\n            default: // TODO\n                logger.debug(\n                    `parseICECandidate not translating \"${\n                        elems[i]}\" = \"${elems[i + 1]}\"`);\n            }\n        }\n        candidate.network = '1';\n\n        // not applicable to SDP -- FIXME: should be unique, not just random\n        // eslint-disable-next-line newline-per-chained-call\n        candidate.id = Math.random().toString(36).substr(2, 10);\n\n        return candidate;\n    },\n    buildICECandidate(cand) {\n        let line = [\n            `a=candidate:${cand.foundation}`,\n            cand.component,\n            cand.protocol,\n            cand.priority,\n            cand.ip,\n            cand.port,\n            'typ',\n            cand.type\n        ].join(' ');\n\n        line += ' ';\n        switch (cand.type) {\n        case 'srflx':\n        case 'prflx':\n        case 'relay':\n            if (cand.hasOwnAttribute('rel-addr')\n                    && cand.hasOwnAttribute('rel-port')) {\n                line += 'raddr';\n                line += ' ';\n                line += cand['rel-addr'];\n                line += ' ';\n                line += 'rport';\n                line += ' ';\n                line += cand['rel-port'];\n                line += ' ';\n            }\n            break;\n        }\n        if (cand.hasOwnAttribute('tcptype')) {\n            line += 'tcptype';\n            line += ' ';\n            line += cand.tcptype;\n            line += ' ';\n        }\n        line += 'generation';\n        line += ' ';\n        line += cand.hasOwnAttribute('generation') ? cand.generation : '0';\n\n        return line;\n    },\n    parseSSRC(desc) {\n        // proprietary mapping of a=ssrc lines\n        // TODO: see \"Jingle RTP Source Description\" by Juberti and P. Thatcher\n        // on google docs and parse according to that\n        const data = new Map();\n        const lines = desc.split('\\r\\n');\n\n        for (let i = 0; i < lines.length; i++) {\n            if (lines[i].substring(0, 7) === 'a=ssrc:') {\n                // FIXME: Use regex to smartly find the ssrc.\n                const ssrc = lines[i].split('a=ssrc:')[1].split(' ')[0];\n\n                if (!data.get(ssrc)) {\n                    data.set(ssrc, []);\n                }\n\n                data.get(ssrc).push(lines[i]);\n            }\n        }\n\n        return data;\n    },\n\n    /**\n     * Gets the source name out of the name attribute \"a=ssrc:254321 name:name1\".\n     *\n     * @param {string[]} ssrcLines\n     * @returns {string | undefined}\n     */\n    parseSourceNameLine(ssrcLines) {\n        const sourceNameLine = ssrcLines.find(ssrcSdpLine => ssrcSdpLine.indexOf(' name:') > 0);\n\n        // Everything past the \"name:\" part\n        return sourceNameLine?.substring(sourceNameLine.indexOf(' name:') + 6);\n    },\n\n    /**\n     * Parse the \"videoType\" attribute encoded in a set of SSRC attributes (e.g.\n     * \"a=ssrc:1234 videoType:desktop\")\n     *\n     * @param {string[]} ssrcLines\n     * @returns {string | undefined}\n     */\n    parseVideoTypeLine(ssrcLines) {\n        const s = ' videoType:';\n        const videoTypeLine = ssrcLines.find(ssrcSdpLine => ssrcSdpLine.indexOf(s) > 0);\n\n        return videoTypeLine?.substring(videoTypeLine.indexOf(s) + s.length);\n    },\n    parseRTCPFB(line) {\n        const parts = line.substr(10).split(' ');\n        const data = {};\n\n        data.pt = parts.shift();\n        data.type = parts.shift();\n        data.params = parts;\n\n        return data;\n    },\n    parseExtmap(line) {\n        const parts = line.substr(9).split(' ');\n        const data = {};\n\n        data.value = parts.shift();\n        if (data.value.indexOf('/') === -1) {\n            data.direction = 'both';\n        } else {\n            data.direction = data.value.substr(data.value.indexOf('/') + 1);\n            data.value = data.value.substr(0, data.value.indexOf('/'));\n        }\n        data.uri = parts.shift();\n        data.params = parts;\n\n        return data;\n    },\n    findLine(haystack, needle, sessionpart) {\n        let lines = haystack.split('\\r\\n');\n\n        for (let i = 0; i < lines.length; i++) {\n            if (lines[i].substring(0, needle.length) === needle) {\n                return lines[i];\n            }\n        }\n        if (!sessionpart) {\n            return false;\n        }\n\n        // search session part\n        lines = sessionpart.split('\\r\\n');\n        for (let j = 0; j < lines.length; j++) {\n            if (lines[j].substring(0, needle.length) === needle) {\n                return lines[j];\n            }\n        }\n\n        return false;\n    },\n    findLines(haystack, needle, sessionpart) {\n        let lines = haystack.split('\\r\\n');\n        const needles = [];\n\n        for (let i = 0; i < lines.length; i++) {\n            if (lines[i].substring(0, needle.length) === needle) {\n                needles.push(lines[i]);\n            }\n        }\n        if (needles.length || !sessionpart) {\n            return needles;\n        }\n\n        // search session part\n        lines = sessionpart.split('\\r\\n');\n        for (let j = 0; j < lines.length; j++) {\n            if (lines[j].substring(0, needle.length) === needle) {\n                needles.push(lines[j]);\n            }\n        }\n\n        return needles;\n    },\n    candidateToJingle(line) {\n        // a=candidate:2979166662 1 udp 2113937151 192.168.2.100 57698 typ host\n        // generation 0\n        //      <candidate component=... foundation=... generation=... id=...\n        // ip=... network=... port=... priority=... protocol=... type=.../>\n        if (line.indexOf('candidate:') === 0) {\n            // eslint-disable-next-line no-param-reassign\n            line = `a=${line}`;\n        } else if (line.substring(0, 12) !== 'a=candidate:') {\n            logger.warn(\n                'parseCandidate called with a line that is not a candidate'\n                    + ' line');\n            logger.warn(line);\n\n            return null;\n        }\n        if (line.substring(line.length - 2) === '\\r\\n') { // chomp it\n            // eslint-disable-next-line no-param-reassign\n            line = line.substring(0, line.length - 2);\n        }\n        const candidate = {};\n        const elems = line.split(' ');\n\n        if (elems[6] !== 'typ') {\n            logger.warn('did not find typ in the right place');\n            logger.warn(line);\n\n            return null;\n        }\n        candidate.foundation = elems[0].substring(12);\n        candidate.component = elems[1];\n        candidate.protocol = elems[2].toLowerCase();\n        candidate.priority = elems[3];\n        candidate.ip = elems[4];\n        candidate.port = elems[5];\n\n        // elems[6] => \"typ\"\n        candidate.type = elems[7];\n\n        candidate.generation = '0'; // default, may be overwritten below\n        for (let i = 8; i < elems.length; i += 2) {\n            switch (elems[i]) {\n            case 'raddr':\n                candidate['rel-addr'] = elems[i + 1];\n                break;\n            case 'rport':\n                candidate['rel-port'] = elems[i + 1];\n                break;\n            case 'generation':\n                candidate.generation = elems[i + 1];\n                break;\n            case 'tcptype':\n                candidate.tcptype = elems[i + 1];\n                break;\n            default: // TODO\n                logger.debug(`not translating \"${elems[i]}\" = \"${elems[i + 1]}\"`);\n            }\n        }\n        candidate.network = '1';\n\n        // not applicable to SDP -- FIXME: should be unique, not just random\n        // eslint-disable-next-line newline-per-chained-call\n        candidate.id = Math.random().toString(36).substr(2, 10);\n\n        return candidate;\n    },\n    candidateFromJingle(cand) {\n        let line = 'a=candidate:';\n\n        line += cand.getAttribute('foundation');\n        line += ' ';\n        line += cand.getAttribute('component');\n        line += ' ';\n\n        let protocol = cand.getAttribute('protocol');\n\n        // use tcp candidates for FF\n\n        if (browser.isFirefox() && protocol.toLowerCase() === 'ssltcp') {\n            protocol = 'tcp';\n        }\n\n        line += protocol; // .toUpperCase(); // chrome M23 doesn't like this\n        line += ' ';\n        line += cand.getAttribute('priority');\n        line += ' ';\n        line += cand.getAttribute('ip');\n        line += ' ';\n        line += cand.getAttribute('port');\n        line += ' ';\n        line += 'typ';\n        line += ` ${cand.getAttribute('type')}`;\n        line += ' ';\n        switch (cand.getAttribute('type')) {\n        case 'srflx':\n        case 'prflx':\n        case 'relay':\n            if (cand.getAttribute('rel-addr')\n                    && cand.getAttribute('rel-port')) {\n                line += 'raddr';\n                line += ' ';\n                line += cand.getAttribute('rel-addr');\n                line += ' ';\n                line += 'rport';\n                line += ' ';\n                line += cand.getAttribute('rel-port');\n                line += ' ';\n            }\n            break;\n        }\n        if (protocol.toLowerCase() === 'tcp') {\n            line += 'tcptype';\n            line += ' ';\n            line += cand.getAttribute('tcptype');\n            line += ' ';\n        }\n        line += 'generation';\n        line += ' ';\n        line += cand.getAttribute('generation') || '0';\n\n        return `${line}\\r\\n`;\n    },\n\n    /**\n     * Parse the 'most' primary video ssrc from the given m line\n     * @param {object} mLine object as parsed from transform.parse\n     * @return {number} the primary video ssrc from the given m line\n     */\n    parsePrimaryVideoSsrc(videoMLine) {\n        const numSsrcs = videoMLine.ssrcs\n            .map(ssrcInfo => ssrcInfo.id)\n            .filter((ssrc, index, array) => array.indexOf(ssrc) === index)\n            .length;\n        const numGroups\n            = (videoMLine.ssrcGroups && videoMLine.ssrcGroups.length) || 0;\n\n        if (numSsrcs > 1 && numGroups === 0) {\n            // Ambiguous, can't figure out the primary\n            return;\n        }\n        let primarySsrc = null;\n\n        if (numSsrcs === 1) {\n            primarySsrc = videoMLine.ssrcs[0].id;\n        } else if (numSsrcs === 2) {\n            // Can figure it out if there's an FID group\n            const fidGroup\n                = videoMLine.ssrcGroups.find(\n                    group => group.semantics === 'FID');\n\n            if (fidGroup) {\n                primarySsrc = fidGroup.ssrcs.split(' ')[0];\n            }\n        } else if (numSsrcs >= 3) {\n            // Can figure it out if there's a sim group\n            const simGroup\n                = videoMLine.ssrcGroups.find(\n                    group => group.semantics === 'SIM');\n\n            if (simGroup) {\n                primarySsrc = simGroup.ssrcs.split(' ')[0];\n            }\n        }\n\n        return primarySsrc;\n    },\n\n    /**\n     * Generate an ssrc\n     * @returns {number} an ssrc\n     */\n    generateSsrc() {\n        return RandomUtil.randomInt(1, 0xffffffff);\n    },\n\n    /**\n     * Get an attribute for the given ssrc with the given attributeName\n     *  from the given mline\n     * @param {object} mLine an mLine object as parsed from transform.parse\n     * @param {number} ssrc the ssrc for which an attribute is desired\n     * @param {string} attributeName the name of the desired attribute\n     * @returns {string} the value corresponding to the given ssrc\n     *  and attributeName\n     */\n    getSsrcAttribute(mLine, ssrc, attributeName) {\n        for (let i = 0; i < mLine.ssrcs.length; ++i) {\n            const ssrcLine = mLine.ssrcs[i];\n\n            if (ssrcLine.id === ssrc\n                && ssrcLine.attribute === attributeName) {\n                return ssrcLine.value;\n            }\n        }\n    },\n\n    /**\n     * Parses the ssrcs from the group sdp line and\n     *  returns them as a list of numbers\n     * @param {object} the ssrcGroup object as parsed from\n     *  sdp-transform\n     * @returns {list<number>} a list of the ssrcs in the group\n     *  parsed as numbers\n     */\n    parseGroupSsrcs(ssrcGroup) {\n        return ssrcGroup\n            .ssrcs\n            .split(' ')\n            .map(ssrcStr => parseInt(ssrcStr, 10));\n    },\n\n    /**\n     * Get the mline of the given type from the given sdp\n     * @param {object} sdp sdp as parsed from transform.parse\n     * @param {string} type the type of the desired mline (e.g. \"video\")\n     * @returns {object} a media object\n     */\n    getMedia(sdp, type) {\n        return sdp.media.find(m => m.type === type);\n    },\n\n    /**\n     * Extracts the ICE username fragment from an SDP string.\n     * @param {string} sdp the SDP in raw text format\n     */\n    getUfrag(sdp) {\n        const ufragLines\n            = sdp.split('\\n').filter(line => line.startsWith('a=ice-ufrag:'));\n\n        if (ufragLines.length > 0) {\n            return ufragLines[0].substr('a=ice-ufrag:'.length);\n        }\n    },\n\n    /**\n     * Sets the given codecName as the preferred codec by moving it to the beginning\n     * of the payload types list (modifies the given mline in place). All instances\n     * of the codec are moved up.\n     * @param {object} mLine the mline object from an sdp as parsed by transform.parse\n     * @param {string} codecName the name of the preferred codec\n     */\n    preferCodec(mline, codecName) {\n        if (!mline || !codecName) {\n            return;\n        }\n\n        const matchingPayloadTypes = mline.rtp\n            .filter(rtp => rtp.codec && rtp.codec.toLowerCase() === codecName.toLowerCase())\n            .map(rtp => rtp.payload);\n\n        if (matchingPayloadTypes) {\n            // Call toString() on payloads to get around an issue within SDPTransform that sets\n            // payloads as a number, instead of a string, when there is only one payload.\n            const payloadTypes\n                = mline.payloads\n                .toString()\n                .split(' ')\n                .map(p => parseInt(p, 10));\n\n            for (const pt of matchingPayloadTypes.reverse()) {\n                const payloadIndex = payloadTypes.indexOf(pt);\n\n                payloadTypes.splice(payloadIndex, 1);\n                payloadTypes.unshift(pt);\n            }\n            mline.payloads = payloadTypes.join(' ');\n        }\n    },\n\n    /**\n     * Strips the given codec from the given mline. All related RTX payload\n     * types are also stripped. If the resulting mline would have no codecs,\n     * it's disabled.\n     *\n     * @param {object} mLine the mline object from an sdp as parsed by transform.parse.\n     * @param {string} codecName the name of the codec which will be stripped.\n     * @param {boolean} highProfile determines if only the high profile H264 codec needs to be\n     * stripped from the sdp when the passed codecName is H264.\n     */\n    stripCodec(mLine, codecName, highProfile = false) {\n        if (!mLine || !codecName) {\n            return;\n        }\n\n        const h264Pts = [];\n        let removePts = [];\n        const stripH264HighCodec = codecName.toLowerCase() === CodecMimeType.H264 && highProfile;\n\n        for (const rtp of mLine.rtp) {\n            if (rtp.codec\n                && rtp.codec.toLowerCase() === codecName.toLowerCase()) {\n                if (stripH264HighCodec) {\n                    h264Pts.push(rtp.payload);\n                } else {\n                    removePts.push(rtp.payload);\n                }\n            }\n        }\n\n        // high profile H264 codecs have 64 as the first two bytes of the profile-level-id.\n        if (stripH264HighCodec) {\n            removePts = mLine.fmtp\n                .filter(item => h264Pts.indexOf(item.payload) > -1 && item.config.includes('profile-level-id=64'))\n                .map(item => item.payload);\n        }\n\n        if (removePts.length > 0) {\n            // We also need to remove the payload types that are related to RTX\n            // for the codecs we want to disable.\n            const rtxApts = removePts.map(item => `apt=${item}`);\n            const rtxPts = mLine.fmtp.filter(\n                item => rtxApts.indexOf(item.config) !== -1);\n\n            removePts.push(...rtxPts.map(item => item.payload));\n\n            // Call toString() on payloads to get around an issue within\n            // SDPTransform that sets payloads as a number, instead of a string,\n            // when there is only one payload.\n            const allPts = mLine.payloads\n                .toString()\n                .split(' ')\n                .map(Number);\n            const keepPts = allPts.filter(pt => removePts.indexOf(pt) === -1);\n\n            if (keepPts.length === 0) {\n                // There are no other codecs, disable the stream.\n                mLine.port = 0;\n                mLine.direction = MediaDirection.INACTIVE;\n                mLine.payloads = '*';\n            } else {\n                mLine.payloads = keepPts.join(' ');\n            }\n\n            mLine.rtp = mLine.rtp.filter(\n                item => keepPts.indexOf(item.payload) !== -1);\n            mLine.fmtp = mLine.fmtp.filter(\n                item => keepPts.indexOf(item.payload) !== -1);\n            if (mLine.rtcpFb) {\n                mLine.rtcpFb = mLine.rtcpFb.filter(\n                    item => keepPts.indexOf(item.payload) !== -1);\n            }\n        }\n    }\n};\n\nexport default SDPUtil;\n","/* global $ */\n\nimport clonedeep from 'lodash.clonedeep';\nimport transform from 'sdp-transform';\n\nimport { MediaDirection } from '../../service/RTC/MediaDirection';\nimport browser from '../browser';\nimport FeatureFlags from '../flags/FeatureFlags';\n\nimport SDPUtil from './SDPUtil';\n\n/**\n *\n * @param sdp\n */\nexport default function SDP(sdp) {\n    const media = sdp.split('\\r\\nm=');\n\n    for (let i = 1, length = media.length; i < length; i++) {\n        let mediaI = `m=${media[i]}`;\n\n        if (i !== length - 1) {\n            mediaI += '\\r\\n';\n        }\n        media[i] = mediaI;\n    }\n    const session = `${media.shift()}\\r\\n`;\n\n    this.media = media;\n    this.raw = session + media.join('');\n    this.session = session;\n}\n\n/**\n * A flag will make {@link transportToJingle} and {@link jingle2media} replace\n * ICE candidates IPs with invalid value of '1.1.1.1' which will cause ICE\n * failure. The flag is used in the automated testing.\n * @type {boolean}\n */\nSDP.prototype.failICE = false;\n\n/**\n * Whether or not to remove TCP ice candidates when translating from/to jingle.\n * @type {boolean}\n */\nSDP.prototype.removeTcpCandidates = false;\n\n/**\n * Whether or not to remove UDP ice candidates when translating from/to jingle.\n * @type {boolean}\n */\nSDP.prototype.removeUdpCandidates = false;\n\n/**\n * Adds a new m-line to the description so that a new local source can then be attached to the transceiver that gets\n * added after a reneogtiation cycle.\n *\n * @param {MediaType} mediaType media type of the new source that is being added.\n */\nSDP.prototype.addMlineForNewLocalSource = function(mediaType) {\n    const mid = this.media.length;\n    const sdp = transform.parse(this.raw);\n    const mline = clonedeep(sdp.media.find(m => m.type === mediaType));\n\n    // Edit media direction, mid and remove the existing ssrc lines in the m-line.\n    mline.mid = mid;\n    mline.direction = MediaDirection.RECVONLY;\n\n    // Remove the ssrcs and source groups.\n    mline.msid = undefined;\n    mline.ssrcs = undefined;\n    mline.ssrcGroups = undefined;\n\n    sdp.media = sdp.media.concat(mline);\n\n    // We regenerate the BUNDLE group (since we added a new m-line)\n    sdp.groups.forEach(group => {\n        if (group.type === 'BUNDLE') {\n            const mids = group.mids.split(' ');\n\n            mids.push(mid);\n            group.mids = mids.join(' ');\n        }\n    });\n    this.raw = transform.write(sdp);\n};\n\n/**\n * Returns map of MediaChannel mapped per channel idx.\n */\nSDP.prototype.getMediaSsrcMap = function() {\n    const mediaSSRCs = {};\n\n    for (let mediaindex = 0; mediaindex < this.media.length; mediaindex++) {\n        const mid\n            = SDPUtil.parseMID(\n                SDPUtil.findLine(this.media[mediaindex], 'a=mid:'));\n        const media = {\n            mediaindex,\n            mid,\n            ssrcs: {},\n            ssrcGroups: []\n        };\n\n        mediaSSRCs[mediaindex] = media;\n\n        SDPUtil.findLines(this.media[mediaindex], 'a=ssrc:').forEach(line => {\n            const linessrc = line.substring(7).split(' ')[0];\n\n            // allocate new ChannelSsrc\n\n            if (!media.ssrcs[linessrc]) {\n                media.ssrcs[linessrc] = {\n                    ssrc: linessrc,\n                    lines: []\n                };\n            }\n            media.ssrcs[linessrc].lines.push(line);\n        });\n        SDPUtil.findLines(this.media[mediaindex], 'a=ssrc-group:').forEach(line => {\n            const idx = line.indexOf(' ');\n            const semantics = line.substr(0, idx).substr(13);\n            const ssrcs = line.substr(14 + semantics.length).split(' ');\n\n            if (ssrcs.length) {\n                media.ssrcGroups.push({\n                    semantics,\n                    ssrcs\n                });\n            }\n        });\n    }\n\n    return mediaSSRCs;\n};\n\n/**\n * Returns <tt>true</tt> if this SDP contains given SSRC.\n * @param ssrc the ssrc to check.\n * @returns {boolean} <tt>true</tt> if this SDP contains given SSRC.\n */\nSDP.prototype.containsSSRC = function(ssrc) {\n    // FIXME this code is really strange - improve it if you can\n    const medias = this.getMediaSsrcMap();\n    let result = false;\n\n    Object.keys(medias).forEach(mediaindex => {\n        if (result) {\n            return;\n        }\n        if (medias[mediaindex].ssrcs[ssrc]) {\n            result = true;\n        }\n    });\n\n    return result;\n};\n\n// add content's to a jingle element\nSDP.prototype.toJingle = function(elem, thecreator) {\n    // https://xmpp.org/extensions/xep-0338.html\n    SDPUtil.findLines(this.session, 'a=group:').forEach(line => {\n        const parts = line.split(' ');\n        const semantics = parts.shift().substr(8);\n\n        elem.c('group', { xmlns: 'urn:xmpp:jingle:apps:grouping:0',\n            semantics });\n        for (let j = 0; j < parts.length; j++) {\n            elem.c('content', { name: parts[j] }).up();\n        }\n        elem.up();\n    });\n\n    for (let i = 0; i < this.media.length; i++) {\n        const mline = SDPUtil.parseMLine(this.media[i].split('\\r\\n')[0]);\n\n        if (!(mline.media === 'audio'\n              || mline.media === 'video'\n              || mline.media === 'application')) {\n            continue; // eslint-disable-line no-continue\n        }\n\n        let ssrc;\n        const assrcline = SDPUtil.findLine(this.media[i], 'a=ssrc:');\n\n        if (assrcline) {\n            ssrc = assrcline.substring(7).split(' ')[0]; // take the first\n        } else {\n            ssrc = false;\n        }\n\n        elem.c('content', { creator: thecreator,\n            name: mline.media });\n        const amidline = SDPUtil.findLine(this.media[i], 'a=mid:');\n\n        if (amidline) {\n            // prefer identifier from a=mid if present\n            const mid = SDPUtil.parseMID(amidline);\n\n            elem.attrs({ name: mid });\n        }\n\n        if (mline.media === 'audio' || mline.media === 'video') {\n            elem.c('description',\n                { xmlns: 'urn:xmpp:jingle:apps:rtp:1',\n                    media: mline.media });\n            if (ssrc) {\n                elem.attrs({ ssrc });\n            }\n            for (let j = 0; j < mline.fmt.length; j++) {\n                const rtpmap\n                    = SDPUtil.findLine(\n                        this.media[i],\n                        `a=rtpmap:${mline.fmt[j]}`);\n\n                elem.c('payload-type', SDPUtil.parseRTPMap(rtpmap));\n\n                // put any 'a=fmtp:' + mline.fmt[j] lines into <param name=foo\n                // value=bar/>\n                const afmtpline\n                    = SDPUtil.findLine(\n                        this.media[i],\n                        `a=fmtp:${mline.fmt[j]}`);\n\n                if (afmtpline) {\n                    const fmtpParameters = SDPUtil.parseFmtp(afmtpline);\n\n                    // eslint-disable-next-line max-depth\n                    for (let k = 0; k < fmtpParameters.length; k++) {\n                        elem.c('parameter', fmtpParameters[k]).up();\n                    }\n                }\n\n                // XEP-0293 -- map a=rtcp-fb\n                this.rtcpFbToJingle(i, elem, mline.fmt[j]);\n\n                elem.up();\n            }\n\n            if (ssrc) {\n                const ssrcMap = SDPUtil.parseSSRC(this.media[i]);\n\n                for (const [ availableSsrc, ssrcParameters ] of ssrcMap) {\n                    const sourceName = SDPUtil.parseSourceNameLine(ssrcParameters);\n                    const videoType = SDPUtil.parseVideoTypeLine(ssrcParameters);\n\n                    elem.c('source', {\n                        ssrc: availableSsrc,\n                        name: FeatureFlags.isSourceNameSignalingEnabled() ? sourceName : undefined,\n                        videoType,\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                    });\n\n                    const msid = SDPUtil.parseMSIDAttribute(ssrcParameters);\n\n                    // eslint-disable-next-line max-depth\n                    if (msid) {\n                        elem.c('parameter');\n                        elem.attrs({ name: 'msid' });\n                        elem.attrs({ value: msid });\n                        elem.up();\n                    }\n\n                    elem.up();\n                }\n\n                // XEP-0339 handle ssrc-group attributes\n                const ssrcGroupLines\n                    = SDPUtil.findLines(this.media[i], 'a=ssrc-group:');\n\n                ssrcGroupLines.forEach(line => {\n                    const idx = line.indexOf(' ');\n                    const semantics = line.substr(0, idx).substr(13);\n                    const ssrcs = line.substr(14 + semantics.length).split(' ');\n\n                    if (ssrcs.length) {\n                        elem.c('ssrc-group', { semantics,\n                            xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0' });\n                        ssrcs.forEach(s => elem.c('source', { ssrc: s }).up());\n                        elem.up();\n                    }\n                });\n            }\n\n            const ridLines = SDPUtil.findLines(this.media[i], 'a=rid:');\n\n            if (ridLines.length && browser.usesRidsForSimulcast()) {\n                // Map a line which looks like \"a=rid:2 send\" to just\n                // the rid (\"2\")\n                const rids = ridLines\n                    .map(ridLine => ridLine.split(':')[1])\n                    .map(ridInfo => ridInfo.split(' ')[0]);\n\n                rids.forEach(rid => {\n                    elem.c('source', {\n                        rid,\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                    });\n                    elem.up();\n                });\n                const unifiedSimulcast\n                    = SDPUtil.findLine(this.media[i], 'a=simulcast:');\n\n                if (unifiedSimulcast) {\n                    elem.c('rid-group', {\n                        semantics: 'SIM',\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                    });\n                    rids.forEach(rid => {\n                        elem.c('source', { rid }).up();\n                    });\n                    elem.up();\n                }\n            }\n\n            if (SDPUtil.findLine(this.media[i], 'a=rtcp-mux')) {\n                elem.c('rtcp-mux').up();\n            }\n\n            // XEP-0293 -- map a=rtcp-fb:*\n            this.rtcpFbToJingle(i, elem, '*');\n\n            // XEP-0294\n            const extmapLines = SDPUtil.findLines(this.media[i], 'a=extmap:');\n\n            for (let j = 0; j < extmapLines.length; j++) {\n                const extmap = SDPUtil.parseExtmap(extmapLines[j]);\n\n                elem.c('rtp-hdrext', {\n                    xmlns: 'urn:xmpp:jingle:apps:rtp:rtp-hdrext:0',\n                    uri: extmap.uri,\n                    id: extmap.value\n                });\n\n                // eslint-disable-next-line max-depth\n                if (extmap.hasOwnProperty('direction')) {\n\n                    // eslint-disable-next-line max-depth\n                    switch (extmap.direction) {\n                    case MediaDirection.SENDONLY:\n                        elem.attrs({ senders: 'responder' });\n                        break;\n                    case MediaDirection.RECVONLY:\n                        elem.attrs({ senders: 'initiator' });\n                        break;\n                    case MediaDirection.SENDRECV:\n                        elem.attrs({ senders: 'both' });\n                        break;\n                    case MediaDirection.INACTIVE:\n                        elem.attrs({ senders: 'none' });\n                        break;\n                    }\n                }\n\n                // TODO: handle params\n                elem.up();\n            }\n            elem.up(); // end of description\n        }\n\n        // map ice-ufrag/pwd, dtls fingerprint, candidates\n        this.transportToJingle(i, elem);\n\n        const m = this.media[i];\n\n        if (SDPUtil.findLine(m, `a=${MediaDirection.SENDRECV}`, this.session)) {\n            elem.attrs({ senders: 'both' });\n        } else if (SDPUtil.findLine(m, `a=${MediaDirection.SENDONLY}`, this.session)) {\n            elem.attrs({ senders: 'initiator' });\n        } else if (SDPUtil.findLine(m, `a=${MediaDirection.RECVONLY}`, this.session)) {\n            elem.attrs({ senders: 'responder' });\n        } else if (SDPUtil.findLine(m, `a=${MediaDirection.INACTIVE}`, this.session)) {\n            elem.attrs({ senders: 'none' });\n        }\n\n        // Reject an m-line only when port is 0 and a=bundle-only is not present in the section.\n        // The port is automatically set to 0 when bundle-only is used.\n        if (mline.port === '0' && !SDPUtil.findLine(m, 'a=bundle-only', this.session)) {\n            // estos hack to reject an m-line\n            elem.attrs({ senders: 'rejected' });\n        }\n        elem.up(); // end of content\n    }\n    elem.up();\n\n    return elem;\n};\n\nSDP.prototype.transportToJingle = function(mediaindex, elem) {\n    elem.c('transport');\n\n    // XEP-0343 DTLS/SCTP\n    const sctpport\n        = SDPUtil.findLine(this.media[mediaindex], 'a=sctp-port:', this.session);\n    const sctpmap\n        = SDPUtil.findLine(this.media[mediaindex], 'a=sctpmap:', this.session);\n\n    if (sctpport) {\n        const sctpAttrs = SDPUtil.parseSCTPPort(sctpport);\n\n        elem.c('sctpmap', {\n            xmlns: 'urn:xmpp:jingle:transports:dtls-sctp:1',\n            number: sctpAttrs, /* SCTP port */\n            protocol: 'webrtc-datachannel' /* protocol */\n        });\n\n        // The parser currently requires streams to be present\n        elem.attrs({ streams: 0 });\n        elem.up();\n    } else if (sctpmap) {\n        const sctpAttrs = SDPUtil.parseSCTPMap(sctpmap);\n\n        elem.c('sctpmap', {\n            xmlns: 'urn:xmpp:jingle:transports:dtls-sctp:1',\n            number: sctpAttrs[0], /* SCTP port */\n            protocol: sctpAttrs[1] /* protocol */\n        });\n\n        // Optional stream count attribute\n        if (sctpAttrs.length > 2) {\n            elem.attrs({ streams: sctpAttrs[2] });\n        } else {\n            elem.attrs({ streams: 0 });\n        }\n        elem.up();\n    }\n\n    // XEP-0320\n    const fingerprints\n        = SDPUtil.findLines(\n            this.media[mediaindex],\n            'a=fingerprint:',\n            this.session);\n\n    fingerprints.forEach(line => {\n        const fingerprint = SDPUtil.parseFingerprint(line);\n\n        fingerprint.xmlns = 'urn:xmpp:jingle:apps:dtls:0';\n        elem.c('fingerprint').t(fingerprint.fingerprint);\n        delete fingerprint.fingerprint;\n\n        const setupLine\n            = SDPUtil.findLine(\n                this.media[mediaindex],\n                'a=setup:',\n                this.session);\n\n        if (setupLine) {\n            fingerprint.setup = setupLine.substr(8);\n        }\n        elem.attrs(fingerprint);\n        elem.up(); // end of fingerprint\n    });\n    const iceParameters = SDPUtil.iceparams(this.media[mediaindex], this.session);\n\n    if (iceParameters) {\n        iceParameters.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\n        elem.attrs(iceParameters);\n\n        // XEP-0176\n        const candidateLines\n            = SDPUtil.findLines(\n                this.media[mediaindex],\n                'a=candidate:',\n                this.session);\n\n        candidateLines.forEach(line => { // add any a=candidate lines\n            const candidate = SDPUtil.candidateToJingle(line);\n\n            if (this.failICE) {\n                candidate.ip = '1.1.1.1';\n            }\n            const protocol\n                = candidate && typeof candidate.protocol === 'string'\n                    ? candidate.protocol.toLowerCase()\n                    : '';\n\n            if ((this.removeTcpCandidates\n                    && (protocol === 'tcp' || protocol === 'ssltcp'))\n                || (this.removeUdpCandidates && protocol === 'udp')) {\n                return;\n            }\n            elem.c('candidate', candidate).up();\n        });\n    }\n    elem.up(); // end of transport\n};\n\n// XEP-0293\nSDP.prototype.rtcpFbToJingle = function(mediaindex, elem, payloadtype) {\n    const lines\n        = SDPUtil.findLines(\n            this.media[mediaindex],\n            `a=rtcp-fb:${payloadtype}`);\n\n    lines.forEach(line => {\n        const feedback = SDPUtil.parseRTCPFB(line);\n\n        if (feedback.type === 'trr-int') {\n            elem.c('rtcp-fb-trr-int', {\n                xmlns: 'urn:xmpp:jingle:apps:rtp:rtcp-fb:0',\n                value: feedback.params[0]\n            });\n            elem.up();\n        } else {\n            elem.c('rtcp-fb', {\n                xmlns: 'urn:xmpp:jingle:apps:rtp:rtcp-fb:0',\n                type: feedback.type\n            });\n            if (feedback.params.length > 0) {\n                elem.attrs({ 'subtype': feedback.params[0] });\n            }\n            elem.up();\n        }\n    });\n};\n\nSDP.prototype.rtcpFbFromJingle = function(elem, payloadtype) { // XEP-0293\n    let sdp = '';\n    const feedbackElementTrrInt\n        = elem.find(\n            '>rtcp-fb-trr-int[xmlns=\"urn:xmpp:jingle:apps:rtp:rtcp-fb:0\"]');\n\n    if (feedbackElementTrrInt.length) {\n        sdp += 'a=rtcp-fb:* trr-int ';\n        if (feedbackElementTrrInt.attr('value')) {\n            sdp += feedbackElementTrrInt.attr('value');\n        } else {\n            sdp += '0';\n        }\n        sdp += '\\r\\n';\n    }\n\n    const feedbackElements = elem.find('>rtcp-fb[xmlns=\"urn:xmpp:jingle:apps:rtp:rtcp-fb:0\"]');\n\n    feedbackElements.each((_, fb) => {\n        sdp += `a=rtcp-fb:${payloadtype} ${fb.getAttribute('type')}`;\n        if (fb.hasAttribute('subtype')) {\n            sdp += ` ${fb.getAttribute('subtype')}`;\n        }\n        sdp += '\\r\\n';\n    });\n\n    return sdp;\n};\n\n// construct an SDP from a jingle stanza\nSDP.prototype.fromJingle = function(jingle) {\n    const sessionId = Date.now();\n\n    // Use a unique session id for every TPC.\n    this.raw = 'v=0\\r\\n'\n        + `o=- ${sessionId} 2 IN IP4 0.0.0.0\\r\\n`\n        + 's=-\\r\\n'\n        + 't=0 0\\r\\n';\n\n    // http://tools.ietf.org/html/draft-ietf-mmusic-sdp-bundle-negotiation-04\n    // #section-8\n    const groups\n        = $(jingle).find('>group[xmlns=\"urn:xmpp:jingle:apps:grouping:0\"]');\n\n    if (groups.length) {\n        groups.each((idx, group) => {\n            const contents\n                = $(group)\n                    .find('>content')\n                    .map((_, content) => content.getAttribute('name'))\n                    .get();\n\n            if (contents.length > 0) {\n                this.raw\n                    += `a=group:${\n                        group.getAttribute('semantics')\n                            || group.getAttribute('type')} ${\n                        contents.join(' ')}\\r\\n`;\n            }\n        });\n    }\n\n    this.session = this.raw;\n    jingle.find('>content').each((_, content) => {\n        const m = this.jingle2media($(content));\n\n        this.media.push(m);\n    });\n\n    // reconstruct msid-semantic -- apparently not necessary\n    /*\n     var msid = SDPUtil.parseSSRC(this.raw);\n     if (msid.hasOwnProperty('mslabel')) {\n     this.session += \"a=msid-semantic: WMS \" + msid.mslabel + \"\\r\\n\";\n     }\n     */\n\n    this.raw = this.session + this.media.join('');\n};\n\n// translate a jingle content element into an an SDP media part\nSDP.prototype.jingle2media = function(content) {\n    const desc = content.find('>description');\n    const transport = content.find('>transport[xmlns=\"urn:xmpp:jingle:transports:ice-udp:1\"]');\n    let sdp = '';\n    const sctp = transport.find(\n        '>sctpmap[xmlns=\"urn:xmpp:jingle:transports:dtls-sctp:1\"]');\n\n    const media = { media: desc.attr('media') };\n\n    media.port = '9';\n    if (content.attr('senders') === 'rejected') {\n        // estos hack to reject an m-line.\n        media.port = '0';\n    }\n    if (transport.find('>fingerprint[xmlns=\"urn:xmpp:jingle:apps:dtls:0\"]').length) {\n        media.proto = sctp.length ? 'UDP/DTLS/SCTP' : 'UDP/TLS/RTP/SAVPF';\n    } else {\n        media.proto = 'UDP/TLS/RTP/SAVPF';\n    }\n    if (sctp.length) {\n        sdp += `m=application ${media.port} UDP/DTLS/SCTP webrtc-datachannel\\r\\n`;\n        sdp += `a=sctp-port:${sctp.attr('number')}\\r\\n`;\n        sdp += 'a=max-message-size:262144\\r\\n';\n    } else {\n        media.fmt\n            = desc\n                .find('>payload-type')\n                .map((_, payloadType) => payloadType.getAttribute('id'))\n                .get();\n        sdp += `${SDPUtil.buildMLine(media)}\\r\\n`;\n    }\n\n    sdp += 'c=IN IP4 0.0.0.0\\r\\n';\n    if (!sctp.length) {\n        sdp += 'a=rtcp:1 IN IP4 0.0.0.0\\r\\n';\n    }\n\n    // XEP-0176 ICE parameters\n    if (transport.length) {\n        if (transport.attr('ufrag')) {\n            sdp += `${SDPUtil.buildICEUfrag(transport.attr('ufrag'))}\\r\\n`;\n        }\n        if (transport.attr('pwd')) {\n            sdp += `${SDPUtil.buildICEPwd(transport.attr('pwd'))}\\r\\n`;\n        }\n        transport.find('>fingerprint[xmlns=\"urn:xmpp:jingle:apps:dtls:0\"]').each((_, fingerprint) => {\n            sdp += `a=fingerprint:${fingerprint.getAttribute('hash')}`;\n            sdp += ` ${$(fingerprint).text()}`;\n            sdp += '\\r\\n';\n            if (fingerprint.hasAttribute('setup')) {\n                sdp += `a=setup:${fingerprint.getAttribute('setup')}\\r\\n`;\n            }\n        });\n    }\n\n    // XEP-0176 ICE candidates\n    transport.find('>candidate')\n        .each((_, candidate) => {\n            let protocol = candidate.getAttribute('protocol');\n\n            protocol\n                = typeof protocol === 'string' ? protocol.toLowerCase() : '';\n\n            if ((this.removeTcpCandidates\n                    && (protocol === 'tcp' || protocol === 'ssltcp'))\n                || (this.removeUdpCandidates && protocol === 'udp')) {\n                return;\n            } else if (this.failICE) {\n                candidate.setAttribute('ip', '1.1.1.1');\n            }\n\n            sdp += SDPUtil.candidateFromJingle(candidate);\n        });\n\n    switch (content.attr('senders')) {\n    case 'initiator':\n        sdp += `a=${MediaDirection.SENDONLY}\\r\\n`;\n        break;\n    case 'responder':\n        sdp += `a=${MediaDirection.RECVONLY}\\r\\n`;\n        break;\n    case 'none':\n        sdp += `a=${MediaDirection.INACTIVE}\\r\\n`;\n        break;\n    case 'both':\n        sdp += `a=${MediaDirection.SENDRECV}\\r\\n`;\n        break;\n    }\n    sdp += `a=mid:${content.attr('name')}\\r\\n`;\n\n    // <description><rtcp-mux/></description>\n    // see http://code.google.com/p/libjingle/issues/detail?id=309 -- no spec\n    // though\n    // and http://mail.jabber.org/pipermail/jingle/2011-December/001761.html\n    if (desc.find('>rtcp-mux').length) {\n        sdp += 'a=rtcp-mux\\r\\n';\n    }\n\n    desc.find('>payload-type').each((_, payloadType) => {\n        sdp += `${SDPUtil.buildRTPMap(payloadType)}\\r\\n`;\n        if ($(payloadType).find('>parameter').length) {\n            sdp += `a=fmtp:${payloadType.getAttribute('id')} `;\n            sdp\n                += $(payloadType)\n                    .find('>parameter')\n                    .map((__, parameter) => {\n                        const name = parameter.getAttribute('name');\n\n                        return (\n                            (name ? `${name}=` : '')\n                                + parameter.getAttribute('value'));\n                    })\n                    .get()\n                    .join(';');\n            sdp += '\\r\\n';\n        }\n\n        // xep-0293\n        sdp += this.rtcpFbFromJingle($(payloadType), payloadType.getAttribute('id'));\n    });\n\n    // xep-0293\n    sdp += this.rtcpFbFromJingle(desc, '*');\n\n    // xep-0294\n    desc\n        .find('>rtp-hdrext[xmlns=\"urn:xmpp:jingle:apps:rtp:rtp-hdrext:0\"]')\n        .each((_, hdrExt) => {\n            sdp\n                += `a=extmap:${hdrExt.getAttribute('id')} ${\n                    hdrExt.getAttribute('uri')}\\r\\n`;\n        });\n\n    // XEP-0339 handle ssrc-group attributes\n    desc\n        .find('>ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n        .each((_, ssrcGroup) => {\n            const semantics = ssrcGroup.getAttribute('semantics');\n            const ssrcs\n                = $(ssrcGroup)\n                    .find('>source')\n                    .map((__, source) => source.getAttribute('ssrc'))\n                    .get();\n\n            if (ssrcs.length) {\n                sdp += `a=ssrc-group:${semantics} ${ssrcs.join(' ')}\\r\\n`;\n            }\n        });\n\n    // XEP-0339 handle source attributes\n    let userSources = '';\n    let nonUserSources = '';\n\n    desc\n        .find('>source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n        .each((_, source) => {\n            const ssrc = source.getAttribute('ssrc');\n            let isUserSource = true;\n            let sourceStr = '';\n\n            $(source)\n                .find('>parameter')\n                .each((__, parameter) => {\n                    const name = parameter.getAttribute('name');\n                    let value = parameter.getAttribute('value');\n\n                    value = SDPUtil.filterSpecialChars(value);\n                    sourceStr += `a=ssrc:${ssrc} ${name}`;\n\n                    if (value && value.length) {\n                        sourceStr += `:${value}`;\n                    }\n\n                    sourceStr += '\\r\\n';\n\n                    if (value?.includes('mixedmslabel')) {\n                        isUserSource = false;\n                    }\n                });\n\n            if (isUserSource) {\n                userSources += sourceStr;\n            } else {\n                nonUserSources += sourceStr;\n            }\n        });\n\n    // The sdp-interop package is relying the mixedmslabel m line to be the first one in order to set the direction\n    // to sendrecv.\n    sdp += nonUserSources + userSources;\n\n    return sdp;\n};\n","import FeatureFlags from '../flags/FeatureFlags';\n\nimport SDPUtil from './SDPUtil';\n\n// this could be useful in Array.prototype.\n/**\n *\n * @param array1\n * @param array2\n */\nfunction arrayEquals(array1, array2) {\n    // if the other array is a falsy value, return\n    if (!array2) {\n        return false;\n    }\n\n    // compare lengths - can save a lot of time\n    if (array1.length !== array2.length) {\n        return false;\n    }\n\n    for (let i = 0, l = array1.length; i < l; i++) {\n        // Check if we have nested arrays\n        if (array1[i] instanceof Array && array2[i] instanceof Array) {\n            // recurse into the nested arrays\n            if (!array1[i].equals(array2[i])) {\n                return false;\n            }\n        } else if (array1[i] !== array2[i]) {\n            // Warning - two different object instances will never be\n            // equal: {x:20} != {x:20}\n            return false;\n        }\n    }\n\n    return true;\n}\n\n/**\n *\n * @param mySDP\n * @param otherSDP\n */\nexport default function SDPDiffer(mySDP, otherSDP) {\n    this.mySDP = mySDP;\n    this.otherSDP = otherSDP;\n    if (!mySDP) {\n        throw new Error('\"mySDP\" is undefined!');\n    } else if (!otherSDP) {\n        throw new Error('\"otherSDP\" is undefined!');\n    }\n}\n\n/**\n * Returns map of MediaChannel that contains media contained in\n * 'mySDP', but not contained in 'otherSdp'. Mapped by channel idx.\n */\nSDPDiffer.prototype.getNewMedia = function() {\n\n    const myMedias = this.mySDP.getMediaSsrcMap();\n    const othersMedias = this.otherSDP.getMediaSsrcMap();\n    const newMedia = {};\n\n    Object.keys(othersMedias).forEach(othersMediaIdx => {\n        const myMedia = myMedias[othersMediaIdx];\n        const othersMedia = othersMedias[othersMediaIdx];\n\n        if (!myMedia && othersMedia) {\n            // Add whole channel\n            newMedia[othersMediaIdx] = othersMedia;\n\n            return;\n        }\n\n        // Look for new ssrcs across the channel\n        Object.keys(othersMedia.ssrcs).forEach(ssrc => {\n            if (Object.keys(myMedia.ssrcs).indexOf(ssrc) === -1) {\n                // Allocate channel if we've found ssrc that doesn't exist in\n                // our channel\n                if (!newMedia[othersMediaIdx]) {\n                    newMedia[othersMediaIdx] = {\n                        mediaindex: othersMedia.mediaindex,\n                        mid: othersMedia.mid,\n                        ssrcs: {},\n                        ssrcGroups: []\n                    };\n                }\n                newMedia[othersMediaIdx].ssrcs[ssrc] = othersMedia.ssrcs[ssrc];\n            } else if (othersMedia.ssrcs[ssrc].lines\n                        && myMedia.ssrcs[ssrc].lines) {\n                // we want to detect just changes in adding/removing msid\n                const myContainMsid = myMedia.ssrcs[ssrc].lines.find(\n                    line => line.indexOf('msid') !== -1) !== undefined;\n                const newContainMsid = othersMedia.ssrcs[ssrc].lines.find(\n                    line => line.indexOf('msid') !== -1) !== undefined;\n\n                if (myContainMsid !== newContainMsid) {\n                    if (!newMedia[othersMediaIdx]) {\n                        newMedia[othersMediaIdx] = {\n                            mediaindex: othersMedia.mediaindex,\n                            mid: othersMedia.mid,\n                            ssrcs: {},\n                            ssrcGroups: []\n                        };\n                    }\n                    newMedia[othersMediaIdx].ssrcs[ssrc]\n                        = othersMedia.ssrcs[ssrc];\n                }\n            }\n        });\n\n        // Look for new ssrc groups across the channels\n        othersMedia.ssrcGroups.forEach(otherSsrcGroup => {\n\n            // try to match the other ssrc-group with an ssrc-group of ours\n            let matched = false;\n\n            for (let i = 0; i < myMedia.ssrcGroups.length; i++) {\n                const mySsrcGroup = myMedia.ssrcGroups[i];\n\n                if (otherSsrcGroup.semantics === mySsrcGroup.semantics\n                    && arrayEquals(otherSsrcGroup.ssrcs, mySsrcGroup.ssrcs)) {\n\n                    matched = true;\n                    break;\n                }\n            }\n\n            if (!matched) {\n                // Allocate channel if we've found an ssrc-group that doesn't\n                // exist in our channel\n\n                if (!newMedia[othersMediaIdx]) {\n                    newMedia[othersMediaIdx] = {\n                        mediaindex: othersMedia.mediaindex,\n                        mid: othersMedia.mid,\n                        ssrcs: {},\n                        ssrcGroups: []\n                    };\n                }\n                newMedia[othersMediaIdx].ssrcGroups.push(otherSsrcGroup);\n            }\n        });\n    });\n\n    return newMedia;\n};\n\n/**\n * TODO: document!\n */\nSDPDiffer.prototype.toJingle = function(modify) {\n    const sdpMediaSsrcs = this.getNewMedia();\n\n    let modified = false;\n\n    Object.keys(sdpMediaSsrcs).forEach(mediaindex => {\n        modified = true;\n        const media = sdpMediaSsrcs[mediaindex];\n\n        modify.c('content', { name: media.mid });\n\n        modify.c('description',\n            { xmlns: 'urn:xmpp:jingle:apps:rtp:1',\n                media: media.mid });\n\n        // FIXME: not completely sure this operates on blocks and / or handles\n        // different ssrcs correctly\n        // generate sources from lines\n        Object.keys(media.ssrcs).forEach(ssrcNum => {\n            const mediaSsrc = media.ssrcs[ssrcNum];\n            const ssrcLines = mediaSsrc.lines;\n            const sourceName = SDPUtil.parseSourceNameLine(ssrcLines);\n            const videoType = SDPUtil.parseVideoTypeLine(ssrcLines);\n\n            modify.c('source', { xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0' });\n            modify.attrs({\n                name: FeatureFlags.isSourceNameSignalingEnabled() ? sourceName : undefined,\n                videoType,\n                ssrc: mediaSsrc.ssrc\n            });\n\n            // Only MSID attribute is sent\n            const msid = SDPUtil.parseMSIDAttribute(ssrcLines);\n\n            if (msid) {\n                modify.c('parameter');\n                modify.attrs({ name: 'msid' });\n                modify.attrs({ value: msid });\n                modify.up();\n            }\n\n            modify.up(); // end of source\n        });\n\n        // generate source groups from lines\n        media.ssrcGroups.forEach(ssrcGroup => {\n            if (ssrcGroup.ssrcs.length) {\n\n                modify.c('ssrc-group', {\n                    semantics: ssrcGroup.semantics,\n                    xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                });\n\n                ssrcGroup.ssrcs.forEach(ssrc => {\n                    modify.c('source', { ssrc })\n                        .up(); // end of source\n                });\n                modify.up(); // end of ssrc-group\n            }\n        });\n\n        modify.up(); // end of description\n        modify.up(); // end of content\n    });\n\n    return modified;\n};\n","/**\n * Creates a continuation function with some arguments already applied.\n *\n * Useful as a shorthand when combined with other control flow functions. Any\n * arguments passed to the returned function are added to the arguments\n * originally passed to apply.\n *\n * @name apply\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {Function} fn - The function you want to eventually apply all\n * arguments to. Invokes with (arguments...).\n * @param {...*} arguments... - Any number of arguments to automatically apply\n * when the continuation is called.\n * @returns {Function} the partially-applied function\n * @example\n *\n * // using apply\n * async.parallel([\n *     async.apply(fs.writeFile, 'testfile1', 'test1'),\n *     async.apply(fs.writeFile, 'testfile2', 'test2')\n * ]);\n *\n *\n * // the same process without using apply\n * async.parallel([\n *     function(callback) {\n *         fs.writeFile('testfile1', 'test1', callback);\n *     },\n *     function(callback) {\n *         fs.writeFile('testfile2', 'test2', callback);\n *     }\n * ]);\n *\n * // It's possible to pass any number of additional arguments when calling the\n * // continuation:\n *\n * node> var fn = async.apply(sys.puts, 'one');\n * node> fn('two', 'three');\n * one\n * two\n * three\n */\nfunction apply(fn, ...args) {\n    return (...callArgs) => fn(...args,...callArgs);\n}\n\nfunction initialParams (fn) {\n    return function (...args/*, callback*/) {\n        var callback = args.pop();\n        return fn.call(this, args, callback);\n    };\n}\n\n/* istanbul ignore file */\n\nvar hasQueueMicrotask = typeof queueMicrotask === 'function' && queueMicrotask;\nvar hasSetImmediate = typeof setImmediate === 'function' && setImmediate;\nvar hasNextTick = typeof process === 'object' && typeof process.nextTick === 'function';\n\nfunction fallback(fn) {\n    setTimeout(fn, 0);\n}\n\nfunction wrap(defer) {\n    return (fn, ...args) => defer(() => fn(...args));\n}\n\nvar _defer;\n\nif (hasQueueMicrotask) {\n    _defer = queueMicrotask;\n} else if (hasSetImmediate) {\n    _defer = setImmediate;\n} else if (hasNextTick) {\n    _defer = process.nextTick;\n} else {\n    _defer = fallback;\n}\n\nvar setImmediate$1 = wrap(_defer);\n\n/**\n * Take a sync function and make it async, passing its return value to a\n * callback. This is useful for plugging sync functions into a waterfall,\n * series, or other async functions. Any arguments passed to the generated\n * function will be passed to the wrapped function (except for the final\n * callback argument). Errors thrown will be passed to the callback.\n *\n * If the function passed to `asyncify` returns a Promise, that promises's\n * resolved/rejected state will be used to call the callback, rather than simply\n * the synchronous return value.\n *\n * This also means you can asyncify ES2017 `async` functions.\n *\n * @name asyncify\n * @static\n * @memberOf module:Utils\n * @method\n * @alias wrapSync\n * @category Util\n * @param {Function} func - The synchronous function, or Promise-returning\n * function to convert to an {@link AsyncFunction}.\n * @returns {AsyncFunction} An asynchronous wrapper of the `func`. To be\n * invoked with `(args..., callback)`.\n * @example\n *\n * // passing a regular synchronous function\n * async.waterfall([\n *     async.apply(fs.readFile, filename, \"utf8\"),\n *     async.asyncify(JSON.parse),\n *     function (data, next) {\n *         // data is the result of parsing the text.\n *         // If there was a parsing error, it would have been caught.\n *     }\n * ], callback);\n *\n * // passing a function returning a promise\n * async.waterfall([\n *     async.apply(fs.readFile, filename, \"utf8\"),\n *     async.asyncify(function (contents) {\n *         return db.model.create(contents);\n *     }),\n *     function (model, next) {\n *         // `model` is the instantiated model object.\n *         // If there was an error, this function would be skipped.\n *     }\n * ], callback);\n *\n * // es2017 example, though `asyncify` is not needed if your JS environment\n * // supports async functions out of the box\n * var q = async.queue(async.asyncify(async function(file) {\n *     var intermediateStep = await processFile(file);\n *     return await somePromise(intermediateStep)\n * }));\n *\n * q.push(files);\n */\nfunction asyncify(func) {\n    if (isAsync(func)) {\n        return function (...args/*, callback*/) {\n            const callback = args.pop();\n            const promise = func.apply(this, args);\n            return handlePromise(promise, callback)\n        }\n    }\n\n    return initialParams(function (args, callback) {\n        var result;\n        try {\n            result = func.apply(this, args);\n        } catch (e) {\n            return callback(e);\n        }\n        // if result is Promise object\n        if (result && typeof result.then === 'function') {\n            return handlePromise(result, callback)\n        } else {\n            callback(null, result);\n        }\n    });\n}\n\nfunction handlePromise(promise, callback) {\n    return promise.then(value => {\n        invokeCallback(callback, null, value);\n    }, err => {\n        invokeCallback(callback, err && err.message ? err : new Error(err));\n    });\n}\n\nfunction invokeCallback(callback, error, value) {\n    try {\n        callback(error, value);\n    } catch (err) {\n        setImmediate$1(e => { throw e }, err);\n    }\n}\n\nfunction isAsync(fn) {\n    return fn[Symbol.toStringTag] === 'AsyncFunction';\n}\n\nfunction isAsyncGenerator(fn) {\n    return fn[Symbol.toStringTag] === 'AsyncGenerator';\n}\n\nfunction isAsyncIterable(obj) {\n    return typeof obj[Symbol.asyncIterator] === 'function';\n}\n\nfunction wrapAsync(asyncFn) {\n    if (typeof asyncFn !== 'function') throw new Error('expected a function')\n    return isAsync(asyncFn) ? asyncify(asyncFn) : asyncFn;\n}\n\n// conditionally promisify a function.\n// only return a promise if a callback is omitted\nfunction awaitify (asyncFn, arity = asyncFn.length) {\n    if (!arity) throw new Error('arity is undefined')\n    function awaitable (...args) {\n        if (typeof args[arity - 1] === 'function') {\n            return asyncFn.apply(this, args)\n        }\n\n        return new Promise((resolve, reject) => {\n            args[arity - 1] = (err, ...cbArgs) => {\n                if (err) return reject(err)\n                resolve(cbArgs.length > 1 ? cbArgs : cbArgs[0]);\n            };\n            asyncFn.apply(this, args);\n        })\n    }\n\n    return awaitable\n}\n\nfunction applyEach (eachfn) {\n    return function applyEach(fns, ...callArgs) {\n        const go = awaitify(function (callback) {\n            var that = this;\n            return eachfn(fns, (fn, cb) => {\n                wrapAsync(fn).apply(that, callArgs.concat(cb));\n            }, callback);\n        });\n        return go;\n    };\n}\n\nfunction _asyncMap(eachfn, arr, iteratee, callback) {\n    arr = arr || [];\n    var results = [];\n    var counter = 0;\n    var _iteratee = wrapAsync(iteratee);\n\n    return eachfn(arr, (value, _, iterCb) => {\n        var index = counter++;\n        _iteratee(value, (err, v) => {\n            results[index] = v;\n            iterCb(err);\n        });\n    }, err => {\n        callback(err, results);\n    });\n}\n\nfunction isArrayLike(value) {\n    return value &&\n        typeof value.length === 'number' &&\n        value.length >= 0 &&\n        value.length % 1 === 0;\n}\n\n// A temporary value used to identify if the loop should be broken.\n// See #1064, #1293\nconst breakLoop = {};\n\nfunction once(fn) {\n    function wrapper (...args) {\n        if (fn === null) return;\n        var callFn = fn;\n        fn = null;\n        callFn.apply(this, args);\n    }\n    Object.assign(wrapper, fn);\n    return wrapper\n}\n\nfunction getIterator (coll) {\n    return coll[Symbol.iterator] && coll[Symbol.iterator]();\n}\n\nfunction createArrayIterator(coll) {\n    var i = -1;\n    var len = coll.length;\n    return function next() {\n        return ++i < len ? {value: coll[i], key: i} : null;\n    }\n}\n\nfunction createES2015Iterator(iterator) {\n    var i = -1;\n    return function next() {\n        var item = iterator.next();\n        if (item.done)\n            return null;\n        i++;\n        return {value: item.value, key: i};\n    }\n}\n\nfunction createObjectIterator(obj) {\n    var okeys = obj ? Object.keys(obj) : [];\n    var i = -1;\n    var len = okeys.length;\n    return function next() {\n        var key = okeys[++i];\n        if (key === '__proto__') {\n            return next();\n        }\n        return i < len ? {value: obj[key], key} : null;\n    };\n}\n\nfunction createIterator(coll) {\n    if (isArrayLike(coll)) {\n        return createArrayIterator(coll);\n    }\n\n    var iterator = getIterator(coll);\n    return iterator ? createES2015Iterator(iterator) : createObjectIterator(coll);\n}\n\nfunction onlyOnce(fn) {\n    return function (...args) {\n        if (fn === null) throw new Error(\"Callback was already called.\");\n        var callFn = fn;\n        fn = null;\n        callFn.apply(this, args);\n    };\n}\n\n// for async generators\nfunction asyncEachOfLimit(generator, limit, iteratee, callback) {\n    let done = false;\n    let canceled = false;\n    let awaiting = false;\n    let running = 0;\n    let idx = 0;\n\n    function replenish() {\n        //console.log('replenish')\n        if (running >= limit || awaiting || done) return\n        //console.log('replenish awaiting')\n        awaiting = true;\n        generator.next().then(({value, done: iterDone}) => {\n            //console.log('got value', value)\n            if (canceled || done) return\n            awaiting = false;\n            if (iterDone) {\n                done = true;\n                if (running <= 0) {\n                    //console.log('done nextCb')\n                    callback(null);\n                }\n                return;\n            }\n            running++;\n            iteratee(value, idx, iterateeCallback);\n            idx++;\n            replenish();\n        }).catch(handleError);\n    }\n\n    function iterateeCallback(err, result) {\n        //console.log('iterateeCallback')\n        running -= 1;\n        if (canceled) return\n        if (err) return handleError(err)\n\n        if (err === false) {\n            done = true;\n            canceled = true;\n            return\n        }\n\n        if (result === breakLoop || (done && running <= 0)) {\n            done = true;\n            //console.log('done iterCb')\n            return callback(null);\n        }\n        replenish();\n    }\n\n    function handleError(err) {\n        if (canceled) return\n        awaiting = false;\n        done = true;\n        callback(err);\n    }\n\n    replenish();\n}\n\nvar eachOfLimit = (limit) => {\n    return (obj, iteratee, callback) => {\n        callback = once(callback);\n        if (limit <= 0) {\n            throw new RangeError('concurrency limit cannot be less than 1')\n        }\n        if (!obj) {\n            return callback(null);\n        }\n        if (isAsyncGenerator(obj)) {\n            return asyncEachOfLimit(obj, limit, iteratee, callback)\n        }\n        if (isAsyncIterable(obj)) {\n            return asyncEachOfLimit(obj[Symbol.asyncIterator](), limit, iteratee, callback)\n        }\n        var nextElem = createIterator(obj);\n        var done = false;\n        var canceled = false;\n        var running = 0;\n        var looping = false;\n\n        function iterateeCallback(err, value) {\n            if (canceled) return\n            running -= 1;\n            if (err) {\n                done = true;\n                callback(err);\n            }\n            else if (err === false) {\n                done = true;\n                canceled = true;\n            }\n            else if (value === breakLoop || (done && running <= 0)) {\n                done = true;\n                return callback(null);\n            }\n            else if (!looping) {\n                replenish();\n            }\n        }\n\n        function replenish () {\n            looping = true;\n            while (running < limit && !done) {\n                var elem = nextElem();\n                if (elem === null) {\n                    done = true;\n                    if (running <= 0) {\n                        callback(null);\n                    }\n                    return;\n                }\n                running += 1;\n                iteratee(elem.value, elem.key, onlyOnce(iterateeCallback));\n            }\n            looping = false;\n        }\n\n        replenish();\n    };\n};\n\n/**\n * The same as [`eachOf`]{@link module:Collections.eachOf} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name eachOfLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.eachOf]{@link module:Collections.eachOf}\n * @alias forEachOfLimit\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each\n * item in `coll`. The `key` is the item's key, or index in the case of an\n * array.\n * Invoked with (item, key, callback).\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n * @returns {Promise} a promise, if a callback is omitted\n */\nfunction eachOfLimit$1(coll, limit, iteratee, callback) {\n    return eachOfLimit(limit)(coll, wrapAsync(iteratee), callback);\n}\n\nvar eachOfLimit$2 = awaitify(eachOfLimit$1, 4);\n\n// eachOf implementation optimized for array-likes\nfunction eachOfArrayLike(coll, iteratee, callback) {\n    callback = once(callback);\n    var index = 0,\n        completed = 0,\n        {length} = coll,\n        canceled = false;\n    if (length === 0) {\n        callback(null);\n    }\n\n    function iteratorCallback(err, value) {\n        if (err === false) {\n            canceled = true;\n        }\n        if (canceled === true) return\n        if (err) {\n            callback(err);\n        } else if ((++completed === length) || value === breakLoop) {\n            callback(null);\n        }\n    }\n\n    for (; index < length; index++) {\n        iteratee(coll[index], index, onlyOnce(iteratorCallback));\n    }\n}\n\n// a generic version of eachOf which can handle array, object, and iterator cases.\nfunction eachOfGeneric (coll, iteratee, callback) {\n    return eachOfLimit$2(coll, Infinity, iteratee, callback);\n}\n\n/**\n * Like [`each`]{@link module:Collections.each}, except that it passes the key (or index) as the second argument\n * to the iteratee.\n *\n * @name eachOf\n * @static\n * @memberOf module:Collections\n * @method\n * @alias forEachOf\n * @category Collection\n * @see [async.each]{@link module:Collections.each}\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each\n * item in `coll`.\n * The `key` is the item's key, or index in the case of an array.\n * Invoked with (item, key, callback).\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n * @returns {Promise} a promise, if a callback is omitted\n * @example\n *\n * // dev.json is a file containing a valid json object config for dev environment\n * // dev.json is a file containing a valid json object config for test environment\n * // prod.json is a file containing a valid json object config for prod environment\n * // invalid.json is a file with a malformed json object\n *\n * let configs = {}; //global variable\n * let validConfigFileMap = {dev: 'dev.json', test: 'test.json', prod: 'prod.json'};\n * let invalidConfigFileMap = {dev: 'dev.json', test: 'test.json', invalid: 'invalid.json'};\n *\n * // asynchronous function that reads a json file and parses the contents as json object\n * function parseFile(file, key, callback) {\n *     fs.readFile(file, \"utf8\", function(err, data) {\n *         if (err) return calback(err);\n *         try {\n *             configs[key] = JSON.parse(data);\n *         } catch (e) {\n *             return callback(e);\n *         }\n *         callback();\n *     });\n * }\n *\n * // Using callbacks\n * async.forEachOf(validConfigFileMap, parseFile, function (err) {\n *     if (err) {\n *         console.error(err);\n *     } else {\n *         console.log(configs);\n *         // configs is now a map of JSON data, e.g.\n *         // { dev: //parsed dev.json, test: //parsed test.json, prod: //parsed prod.json}\n *     }\n * });\n *\n * //Error handing\n * async.forEachOf(invalidConfigFileMap, parseFile, function (err) {\n *     if (err) {\n *         console.error(err);\n *         // JSON parse error exception\n *     } else {\n *         console.log(configs);\n *     }\n * });\n *\n * // Using Promises\n * async.forEachOf(validConfigFileMap, parseFile)\n * .then( () => {\n *     console.log(configs);\n *     // configs is now a map of JSON data, e.g.\n *     // { dev: //parsed dev.json, test: //parsed test.json, prod: //parsed prod.json}\n * }).catch( err => {\n *     console.error(err);\n * });\n *\n * //Error handing\n * async.forEachOf(invalidConfigFileMap, parseFile)\n * .then( () => {\n *     console.log(configs);\n * }).catch( err => {\n *     console.error(err);\n *     // JSON parse error exception\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let result = await async.forEachOf(validConfigFileMap, parseFile);\n *         console.log(configs);\n *         // configs is now a map of JSON data, e.g.\n *         // { dev: //parsed dev.json, test: //parsed test.json, prod: //parsed prod.json}\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n * //Error handing\n * async () => {\n *     try {\n *         let result = await async.forEachOf(invalidConfigFileMap, parseFile);\n *         console.log(configs);\n *     }\n *     catch (err) {\n *         console.log(err);\n *         // JSON parse error exception\n *     }\n * }\n *\n */\nfunction eachOf(coll, iteratee, callback) {\n    var eachOfImplementation = isArrayLike(coll) ? eachOfArrayLike : eachOfGeneric;\n    return eachOfImplementation(coll, wrapAsync(iteratee), callback);\n}\n\nvar eachOf$1 = awaitify(eachOf, 3);\n\n/**\n * Produces a new collection of values by mapping each value in `coll` through\n * the `iteratee` function. The `iteratee` is called with an item from `coll`\n * and a callback for when it has finished processing. Each of these callbacks\n * takes 2 arguments: an `error`, and the transformed item from `coll`. If\n * `iteratee` passes an error to its callback, the main `callback` (for the\n * `map` function) is immediately called with the error.\n *\n * Note, that since this function applies the `iteratee` to each item in\n * parallel, there is no guarantee that the `iteratee` functions will complete\n * in order. However, the results array will be in the same order as the\n * original `coll`.\n *\n * If `map` is passed an Object, the results will be an Array.  The results\n * will roughly be in the order of the original Objects' keys (but this can\n * vary across JavaScript engines).\n *\n * @name map\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with the transformed item.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Results is an Array of the\n * transformed items from the `coll`. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * // file1.txt is a file that is 1000 bytes in size\n * // file2.txt is a file that is 2000 bytes in size\n * // file3.txt is a file that is 3000 bytes in size\n * // file4.txt does not exist\n *\n * const fileList = ['file1.txt','file2.txt','file3.txt'];\n * const withMissingFileList = ['file1.txt','file2.txt','file4.txt'];\n *\n * // asynchronous function that returns the file size in bytes\n * function getFileSizeInBytes(file, callback) {\n *     fs.stat(file, function(err, stat) {\n *         if (err) {\n *             return callback(err);\n *         }\n *         callback(null, stat.size);\n *     });\n * }\n *\n * // Using callbacks\n * async.map(fileList, getFileSizeInBytes, function(err, results) {\n *     if (err) {\n *         console.log(err);\n *     } else {\n *         console.log(results);\n *         // results is now an array of the file size in bytes for each file, e.g.\n *         // [ 1000, 2000, 3000]\n *     }\n * });\n *\n * // Error Handling\n * async.map(withMissingFileList, getFileSizeInBytes, function(err, results) {\n *     if (err) {\n *         console.log(err);\n *         // [ Error: ENOENT: no such file or directory ]\n *     } else {\n *         console.log(results);\n *     }\n * });\n *\n * // Using Promises\n * async.map(fileList, getFileSizeInBytes)\n * .then( results => {\n *     console.log(results);\n *     // results is now an array of the file size in bytes for each file, e.g.\n *     // [ 1000, 2000, 3000]\n * }).catch( err => {\n *     console.log(err);\n * });\n *\n * // Error Handling\n * async.map(withMissingFileList, getFileSizeInBytes)\n * .then( results => {\n *     console.log(results);\n * }).catch( err => {\n *     console.log(err);\n *     // [ Error: ENOENT: no such file or directory ]\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let results = await async.map(fileList, getFileSizeInBytes);\n *         console.log(results);\n *         // results is now an array of the file size in bytes for each file, e.g.\n *         // [ 1000, 2000, 3000]\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n * // Error Handling\n * async () => {\n *     try {\n *         let results = await async.map(withMissingFileList, getFileSizeInBytes);\n *         console.log(results);\n *     }\n *     catch (err) {\n *         console.log(err);\n *         // [ Error: ENOENT: no such file or directory ]\n *     }\n * }\n *\n */\nfunction map (coll, iteratee, callback) {\n    return _asyncMap(eachOf$1, coll, iteratee, callback)\n}\nvar map$1 = awaitify(map, 3);\n\n/**\n * Applies the provided arguments to each function in the array, calling\n * `callback` after all functions have completed. If you only provide the first\n * argument, `fns`, then it will return a function which lets you pass in the\n * arguments as if it were a single function call. If more arguments are\n * provided, `callback` is required while `args` is still optional. The results\n * for each of the applied async functions are passed to the final callback\n * as an array.\n *\n * @name applyEach\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} fns - A collection of {@link AsyncFunction}s\n * to all call with the same arguments\n * @param {...*} [args] - any number of separate arguments to pass to the\n * function.\n * @param {Function} [callback] - the final argument should be the callback,\n * called when all functions have completed processing.\n * @returns {AsyncFunction} - Returns a function that takes no args other than\n * an optional callback, that is the result of applying the `args` to each\n * of the functions.\n * @example\n *\n * const appliedFn = async.applyEach([enableSearch, updateSchema], 'bucket')\n *\n * appliedFn((err, results) => {\n *     // results[0] is the results for `enableSearch`\n *     // results[1] is the results for `updateSchema`\n * });\n *\n * // partial application example:\n * async.each(\n *     buckets,\n *     async (bucket) => async.applyEach([enableSearch, updateSchema], bucket)(),\n *     callback\n * );\n */\nvar applyEach$1 = applyEach(map$1);\n\n/**\n * The same as [`eachOf`]{@link module:Collections.eachOf} but runs only a single async operation at a time.\n *\n * @name eachOfSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.eachOf]{@link module:Collections.eachOf}\n * @alias forEachOfSeries\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * Invoked with (item, key, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Invoked with (err).\n * @returns {Promise} a promise, if a callback is omitted\n */\nfunction eachOfSeries(coll, iteratee, callback) {\n    return eachOfLimit$2(coll, 1, iteratee, callback)\n}\nvar eachOfSeries$1 = awaitify(eachOfSeries, 3);\n\n/**\n * The same as [`map`]{@link module:Collections.map} but runs only a single async operation at a time.\n *\n * @name mapSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.map]{@link module:Collections.map}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with the transformed item.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Results is an array of the\n * transformed items from the `coll`. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction mapSeries (coll, iteratee, callback) {\n    return _asyncMap(eachOfSeries$1, coll, iteratee, callback)\n}\nvar mapSeries$1 = awaitify(mapSeries, 3);\n\n/**\n * The same as [`applyEach`]{@link module:ControlFlow.applyEach} but runs only a single async operation at a time.\n *\n * @name applyEachSeries\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.applyEach]{@link module:ControlFlow.applyEach}\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} fns - A collection of {@link AsyncFunction}s to all\n * call with the same arguments\n * @param {...*} [args] - any number of separate arguments to pass to the\n * function.\n * @param {Function} [callback] - the final argument should be the callback,\n * called when all functions have completed processing.\n * @returns {AsyncFunction} - A function, that when called, is the result of\n * appling the `args` to the list of functions.  It takes no args, other than\n * a callback.\n */\nvar applyEachSeries = applyEach(mapSeries$1);\n\nconst PROMISE_SYMBOL = Symbol('promiseCallback');\n\nfunction promiseCallback () {\n    let resolve, reject;\n    function callback (err, ...args) {\n        if (err) return reject(err)\n        resolve(args.length > 1 ? args : args[0]);\n    }\n\n    callback[PROMISE_SYMBOL] = new Promise((res, rej) => {\n        resolve = res,\n        reject = rej;\n    });\n\n    return callback\n}\n\n/**\n * Determines the best order for running the {@link AsyncFunction}s in `tasks`, based on\n * their requirements. Each function can optionally depend on other functions\n * being completed first, and each function is run as soon as its requirements\n * are satisfied.\n *\n * If any of the {@link AsyncFunction}s pass an error to their callback, the `auto` sequence\n * will stop. Further tasks will not execute (so any other functions depending\n * on it will not run), and the main `callback` is immediately called with the\n * error.\n *\n * {@link AsyncFunction}s also receive an object containing the results of functions which\n * have completed so far as the first argument, if they have dependencies. If a\n * task function has no dependencies, it will only be passed a callback.\n *\n * @name auto\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Object} tasks - An object. Each of its properties is either a\n * function or an array of requirements, with the {@link AsyncFunction} itself the last item\n * in the array. The object's key of a property serves as the name of the task\n * defined by that property, i.e. can be used when specifying requirements for\n * other tasks. The function receives one or two arguments:\n * * a `results` object, containing the results of the previously executed\n *   functions, only passed if the task has any dependencies,\n * * a `callback(err, result)` function, which must be called when finished,\n *   passing an `error` (which can be `null`) and the result of the function's\n *   execution.\n * @param {number} [concurrency=Infinity] - An optional `integer` for\n * determining the maximum number of tasks that can be run in parallel. By\n * default, as many as possible.\n * @param {Function} [callback] - An optional callback which is called when all\n * the tasks have been completed. It receives the `err` argument if any `tasks`\n * pass an error to their callback. Results are always returned; however, if an\n * error occurs, no further `tasks` will be performed, and the results object\n * will only contain partial results. Invoked with (err, results).\n * @returns {Promise} a promise, if a callback is not passed\n * @example\n *\n * //Using Callbacks\n * async.auto({\n *     get_data: function(callback) {\n *         // async code to get some data\n *         callback(null, 'data', 'converted to array');\n *     },\n *     make_folder: function(callback) {\n *         // async code to create a directory to store a file in\n *         // this is run at the same time as getting the data\n *         callback(null, 'folder');\n *     },\n *     write_file: ['get_data', 'make_folder', function(results, callback) {\n *         // once there is some data and the directory exists,\n *         // write the data to a file in the directory\n *         callback(null, 'filename');\n *     }],\n *     email_link: ['write_file', function(results, callback) {\n *         // once the file is written let's email a link to it...\n *         callback(null, {'file':results.write_file, 'email':'user@example.com'});\n *     }]\n * }, function(err, results) {\n *     if (err) {\n *         console.log('err = ', err);\n *     }\n *     console.log('results = ', results);\n *     // results = {\n *     //     get_data: ['data', 'converted to array']\n *     //     make_folder; 'folder',\n *     //     write_file: 'filename'\n *     //     email_link: { file: 'filename', email: 'user@example.com' }\n *     // }\n * });\n *\n * //Using Promises\n * async.auto({\n *     get_data: function(callback) {\n *         console.log('in get_data');\n *         // async code to get some data\n *         callback(null, 'data', 'converted to array');\n *     },\n *     make_folder: function(callback) {\n *         console.log('in make_folder');\n *         // async code to create a directory to store a file in\n *         // this is run at the same time as getting the data\n *         callback(null, 'folder');\n *     },\n *     write_file: ['get_data', 'make_folder', function(results, callback) {\n *         // once there is some data and the directory exists,\n *         // write the data to a file in the directory\n *         callback(null, 'filename');\n *     }],\n *     email_link: ['write_file', function(results, callback) {\n *         // once the file is written let's email a link to it...\n *         callback(null, {'file':results.write_file, 'email':'user@example.com'});\n *     }]\n * }).then(results => {\n *     console.log('results = ', results);\n *     // results = {\n *     //     get_data: ['data', 'converted to array']\n *     //     make_folder; 'folder',\n *     //     write_file: 'filename'\n *     //     email_link: { file: 'filename', email: 'user@example.com' }\n *     // }\n * }).catch(err => {\n *     console.log('err = ', err);\n * });\n *\n * //Using async/await\n * async () => {\n *     try {\n *         let results = await async.auto({\n *             get_data: function(callback) {\n *                 // async code to get some data\n *                 callback(null, 'data', 'converted to array');\n *             },\n *             make_folder: function(callback) {\n *                 // async code to create a directory to store a file in\n *                 // this is run at the same time as getting the data\n *                 callback(null, 'folder');\n *             },\n *             write_file: ['get_data', 'make_folder', function(results, callback) {\n *                 // once there is some data and the directory exists,\n *                 // write the data to a file in the directory\n *                 callback(null, 'filename');\n *             }],\n *             email_link: ['write_file', function(results, callback) {\n *                 // once the file is written let's email a link to it...\n *                 callback(null, {'file':results.write_file, 'email':'user@example.com'});\n *             }]\n *         });\n *         console.log('results = ', results);\n *         // results = {\n *         //     get_data: ['data', 'converted to array']\n *         //     make_folder; 'folder',\n *         //     write_file: 'filename'\n *         //     email_link: { file: 'filename', email: 'user@example.com' }\n *         // }\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n */\nfunction auto(tasks, concurrency, callback) {\n    if (typeof concurrency !== 'number') {\n        // concurrency is optional, shift the args.\n        callback = concurrency;\n        concurrency = null;\n    }\n    callback = once(callback || promiseCallback());\n    var numTasks = Object.keys(tasks).length;\n    if (!numTasks) {\n        return callback(null);\n    }\n    if (!concurrency) {\n        concurrency = numTasks;\n    }\n\n    var results = {};\n    var runningTasks = 0;\n    var canceled = false;\n    var hasError = false;\n\n    var listeners = Object.create(null);\n\n    var readyTasks = [];\n\n    // for cycle detection:\n    var readyToCheck = []; // tasks that have been identified as reachable\n    // without the possibility of returning to an ancestor task\n    var uncheckedDependencies = {};\n\n    Object.keys(tasks).forEach(key => {\n        var task = tasks[key];\n        if (!Array.isArray(task)) {\n            // no dependencies\n            enqueueTask(key, [task]);\n            readyToCheck.push(key);\n            return;\n        }\n\n        var dependencies = task.slice(0, task.length - 1);\n        var remainingDependencies = dependencies.length;\n        if (remainingDependencies === 0) {\n            enqueueTask(key, task);\n            readyToCheck.push(key);\n            return;\n        }\n        uncheckedDependencies[key] = remainingDependencies;\n\n        dependencies.forEach(dependencyName => {\n            if (!tasks[dependencyName]) {\n                throw new Error('async.auto task `' + key +\n                    '` has a non-existent dependency `' +\n                    dependencyName + '` in ' +\n                    dependencies.join(', '));\n            }\n            addListener(dependencyName, () => {\n                remainingDependencies--;\n                if (remainingDependencies === 0) {\n                    enqueueTask(key, task);\n                }\n            });\n        });\n    });\n\n    checkForDeadlocks();\n    processQueue();\n\n    function enqueueTask(key, task) {\n        readyTasks.push(() => runTask(key, task));\n    }\n\n    function processQueue() {\n        if (canceled) return\n        if (readyTasks.length === 0 && runningTasks === 0) {\n            return callback(null, results);\n        }\n        while(readyTasks.length && runningTasks < concurrency) {\n            var run = readyTasks.shift();\n            run();\n        }\n\n    }\n\n    function addListener(taskName, fn) {\n        var taskListeners = listeners[taskName];\n        if (!taskListeners) {\n            taskListeners = listeners[taskName] = [];\n        }\n\n        taskListeners.push(fn);\n    }\n\n    function taskComplete(taskName) {\n        var taskListeners = listeners[taskName] || [];\n        taskListeners.forEach(fn => fn());\n        processQueue();\n    }\n\n\n    function runTask(key, task) {\n        if (hasError) return;\n\n        var taskCallback = onlyOnce((err, ...result) => {\n            runningTasks--;\n            if (err === false) {\n                canceled = true;\n                return\n            }\n            if (result.length < 2) {\n                [result] = result;\n            }\n            if (err) {\n                var safeResults = {};\n                Object.keys(results).forEach(rkey => {\n                    safeResults[rkey] = results[rkey];\n                });\n                safeResults[key] = result;\n                hasError = true;\n                listeners = Object.create(null);\n                if (canceled) return\n                callback(err, safeResults);\n            } else {\n                results[key] = result;\n                taskComplete(key);\n            }\n        });\n\n        runningTasks++;\n        var taskFn = wrapAsync(task[task.length - 1]);\n        if (task.length > 1) {\n            taskFn(results, taskCallback);\n        } else {\n            taskFn(taskCallback);\n        }\n    }\n\n    function checkForDeadlocks() {\n        // Kahn's algorithm\n        // https://en.wikipedia.org/wiki/Topological_sorting#Kahn.27s_algorithm\n        // http://connalle.blogspot.com/2013/10/topological-sortingkahn-algorithm.html\n        var currentTask;\n        var counter = 0;\n        while (readyToCheck.length) {\n            currentTask = readyToCheck.pop();\n            counter++;\n            getDependents(currentTask).forEach(dependent => {\n                if (--uncheckedDependencies[dependent] === 0) {\n                    readyToCheck.push(dependent);\n                }\n            });\n        }\n\n        if (counter !== numTasks) {\n            throw new Error(\n                'async.auto cannot execute tasks due to a recursive dependency'\n            );\n        }\n    }\n\n    function getDependents(taskName) {\n        var result = [];\n        Object.keys(tasks).forEach(key => {\n            const task = tasks[key];\n            if (Array.isArray(task) && task.indexOf(taskName) >= 0) {\n                result.push(key);\n            }\n        });\n        return result;\n    }\n\n    return callback[PROMISE_SYMBOL]\n}\n\nvar FN_ARGS = /^(?:async\\s+)?(?:function)?\\s*\\w*\\s*\\(\\s*([^)]+)\\s*\\)(?:\\s*{)/;\nvar ARROW_FN_ARGS = /^(?:async\\s+)?\\(?\\s*([^)=]+)\\s*\\)?(?:\\s*=>)/;\nvar FN_ARG_SPLIT = /,/;\nvar FN_ARG = /(=.+)?(\\s*)$/;\n\nfunction stripComments(string) {\n    let stripped = '';\n    let index = 0;\n    let endBlockComment = string.indexOf('*/');\n    while (index < string.length) {\n        if (string[index] === '/' && string[index+1] === '/') {\n            // inline comment\n            let endIndex = string.indexOf('\\n', index);\n            index = (endIndex === -1) ? string.length : endIndex;\n        } else if ((endBlockComment !== -1) && (string[index] === '/') && (string[index+1] === '*')) {\n            // block comment\n            let endIndex = string.indexOf('*/', index);\n            if (endIndex !== -1) {\n                index = endIndex + 2;\n                endBlockComment = string.indexOf('*/', index);\n            } else {\n                stripped += string[index];\n                index++;\n            }\n        } else {\n            stripped += string[index];\n            index++;\n        }\n    }\n    return stripped;\n}\n\nfunction parseParams(func) {\n    const src = stripComments(func.toString());\n    let match = src.match(FN_ARGS);\n    if (!match) {\n        match = src.match(ARROW_FN_ARGS);\n    }\n    if (!match) throw new Error('could not parse args in autoInject\\nSource:\\n' + src)\n    let [, args] = match;\n    return args\n        .replace(/\\s/g, '')\n        .split(FN_ARG_SPLIT)\n        .map((arg) => arg.replace(FN_ARG, '').trim());\n}\n\n/**\n * A dependency-injected version of the [async.auto]{@link module:ControlFlow.auto} function. Dependent\n * tasks are specified as parameters to the function, after the usual callback\n * parameter, with the parameter names matching the names of the tasks it\n * depends on. This can provide even more readable task graphs which can be\n * easier to maintain.\n *\n * If a final callback is specified, the task results are similarly injected,\n * specified as named parameters after the initial error parameter.\n *\n * The autoInject function is purely syntactic sugar and its semantics are\n * otherwise equivalent to [async.auto]{@link module:ControlFlow.auto}.\n *\n * @name autoInject\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.auto]{@link module:ControlFlow.auto}\n * @category Control Flow\n * @param {Object} tasks - An object, each of whose properties is an {@link AsyncFunction} of\n * the form 'func([dependencies...], callback). The object's key of a property\n * serves as the name of the task defined by that property, i.e. can be used\n * when specifying requirements for other tasks.\n * * The `callback` parameter is a `callback(err, result)` which must be called\n *   when finished, passing an `error` (which can be `null`) and the result of\n *   the function's execution. The remaining parameters name other tasks on\n *   which the task is dependent, and the results from those tasks are the\n *   arguments of those parameters.\n * @param {Function} [callback] - An optional callback which is called when all\n * the tasks have been completed. It receives the `err` argument if any `tasks`\n * pass an error to their callback, and a `results` object with any completed\n * task results, similar to `auto`.\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * //  The example from `auto` can be rewritten as follows:\n * async.autoInject({\n *     get_data: function(callback) {\n *         // async code to get some data\n *         callback(null, 'data', 'converted to array');\n *     },\n *     make_folder: function(callback) {\n *         // async code to create a directory to store a file in\n *         // this is run at the same time as getting the data\n *         callback(null, 'folder');\n *     },\n *     write_file: function(get_data, make_folder, callback) {\n *         // once there is some data and the directory exists,\n *         // write the data to a file in the directory\n *         callback(null, 'filename');\n *     },\n *     email_link: function(write_file, callback) {\n *         // once the file is written let's email a link to it...\n *         // write_file contains the filename returned by write_file.\n *         callback(null, {'file':write_file, 'email':'user@example.com'});\n *     }\n * }, function(err, results) {\n *     console.log('err = ', err);\n *     console.log('email_link = ', results.email_link);\n * });\n *\n * // If you are using a JS minifier that mangles parameter names, `autoInject`\n * // will not work with plain functions, since the parameter names will be\n * // collapsed to a single letter identifier.  To work around this, you can\n * // explicitly specify the names of the parameters your task function needs\n * // in an array, similar to Angular.js dependency injection.\n *\n * // This still has an advantage over plain `auto`, since the results a task\n * // depends on are still spread into arguments.\n * async.autoInject({\n *     //...\n *     write_file: ['get_data', 'make_folder', function(get_data, make_folder, callback) {\n *         callback(null, 'filename');\n *     }],\n *     email_link: ['write_file', function(write_file, callback) {\n *         callback(null, {'file':write_file, 'email':'user@example.com'});\n *     }]\n *     //...\n * }, function(err, results) {\n *     console.log('err = ', err);\n *     console.log('email_link = ', results.email_link);\n * });\n */\nfunction autoInject(tasks, callback) {\n    var newTasks = {};\n\n    Object.keys(tasks).forEach(key => {\n        var taskFn = tasks[key];\n        var params;\n        var fnIsAsync = isAsync(taskFn);\n        var hasNoDeps =\n            (!fnIsAsync && taskFn.length === 1) ||\n            (fnIsAsync && taskFn.length === 0);\n\n        if (Array.isArray(taskFn)) {\n            params = [...taskFn];\n            taskFn = params.pop();\n\n            newTasks[key] = params.concat(params.length > 0 ? newTask : taskFn);\n        } else if (hasNoDeps) {\n            // no dependencies, use the function as-is\n            newTasks[key] = taskFn;\n        } else {\n            params = parseParams(taskFn);\n            if ((taskFn.length === 0 && !fnIsAsync) && params.length === 0) {\n                throw new Error(\"autoInject task functions require explicit parameters.\");\n            }\n\n            // remove callback param\n            if (!fnIsAsync) params.pop();\n\n            newTasks[key] = params.concat(newTask);\n        }\n\n        function newTask(results, taskCb) {\n            var newArgs = params.map(name => results[name]);\n            newArgs.push(taskCb);\n            wrapAsync(taskFn)(...newArgs);\n        }\n    });\n\n    return auto(newTasks, callback);\n}\n\n// Simple doubly linked list (https://en.wikipedia.org/wiki/Doubly_linked_list) implementation\n// used for queues. This implementation assumes that the node provided by the user can be modified\n// to adjust the next and last properties. We implement only the minimal functionality\n// for queue support.\nclass DLL {\n    constructor() {\n        this.head = this.tail = null;\n        this.length = 0;\n    }\n\n    removeLink(node) {\n        if (node.prev) node.prev.next = node.next;\n        else this.head = node.next;\n        if (node.next) node.next.prev = node.prev;\n        else this.tail = node.prev;\n\n        node.prev = node.next = null;\n        this.length -= 1;\n        return node;\n    }\n\n    empty () {\n        while(this.head) this.shift();\n        return this;\n    }\n\n    insertAfter(node, newNode) {\n        newNode.prev = node;\n        newNode.next = node.next;\n        if (node.next) node.next.prev = newNode;\n        else this.tail = newNode;\n        node.next = newNode;\n        this.length += 1;\n    }\n\n    insertBefore(node, newNode) {\n        newNode.prev = node.prev;\n        newNode.next = node;\n        if (node.prev) node.prev.next = newNode;\n        else this.head = newNode;\n        node.prev = newNode;\n        this.length += 1;\n    }\n\n    unshift(node) {\n        if (this.head) this.insertBefore(this.head, node);\n        else setInitial(this, node);\n    }\n\n    push(node) {\n        if (this.tail) this.insertAfter(this.tail, node);\n        else setInitial(this, node);\n    }\n\n    shift() {\n        return this.head && this.removeLink(this.head);\n    }\n\n    pop() {\n        return this.tail && this.removeLink(this.tail);\n    }\n\n    toArray() {\n        return [...this]\n    }\n\n    *[Symbol.iterator] () {\n        var cur = this.head;\n        while (cur) {\n            yield cur.data;\n            cur = cur.next;\n        }\n    }\n\n    remove (testFn) {\n        var curr = this.head;\n        while(curr) {\n            var {next} = curr;\n            if (testFn(curr)) {\n                this.removeLink(curr);\n            }\n            curr = next;\n        }\n        return this;\n    }\n}\n\nfunction setInitial(dll, node) {\n    dll.length = 1;\n    dll.head = dll.tail = node;\n}\n\nfunction queue(worker, concurrency, payload) {\n    if (concurrency == null) {\n        concurrency = 1;\n    }\n    else if(concurrency === 0) {\n        throw new RangeError('Concurrency must not be zero');\n    }\n\n    var _worker = wrapAsync(worker);\n    var numRunning = 0;\n    var workersList = [];\n    const events = {\n        error: [],\n        drain: [],\n        saturated: [],\n        unsaturated: [],\n        empty: []\n    };\n\n    function on (event, handler) {\n        events[event].push(handler);\n    }\n\n    function once (event, handler) {\n        const handleAndRemove = (...args) => {\n            off(event, handleAndRemove);\n            handler(...args);\n        };\n        events[event].push(handleAndRemove);\n    }\n\n    function off (event, handler) {\n        if (!event) return Object.keys(events).forEach(ev => events[ev] = [])\n        if (!handler) return events[event] = []\n        events[event] = events[event].filter(ev => ev !== handler);\n    }\n\n    function trigger (event, ...args) {\n        events[event].forEach(handler => handler(...args));\n    }\n\n    var processingScheduled = false;\n    function _insert(data, insertAtFront, rejectOnError, callback) {\n        if (callback != null && typeof callback !== 'function') {\n            throw new Error('task callback must be a function');\n        }\n        q.started = true;\n\n        var res, rej;\n        function promiseCallback (err, ...args) {\n            // we don't care about the error, let the global error handler\n            // deal with it\n            if (err) return rejectOnError ? rej(err) : res()\n            if (args.length <= 1) return res(args[0])\n            res(args);\n        }\n\n        var item = {\n            data,\n            callback: rejectOnError ?\n                promiseCallback :\n                (callback || promiseCallback)\n        };\n\n        if (insertAtFront) {\n            q._tasks.unshift(item);\n        } else {\n            q._tasks.push(item);\n        }\n\n        if (!processingScheduled) {\n            processingScheduled = true;\n            setImmediate$1(() => {\n                processingScheduled = false;\n                q.process();\n            });\n        }\n\n        if (rejectOnError || !callback) {\n            return new Promise((resolve, reject) => {\n                res = resolve;\n                rej = reject;\n            })\n        }\n    }\n\n    function _createCB(tasks) {\n        return function (err, ...args) {\n            numRunning -= 1;\n\n            for (var i = 0, l = tasks.length; i < l; i++) {\n                var task = tasks[i];\n\n                var index = workersList.indexOf(task);\n                if (index === 0) {\n                    workersList.shift();\n                } else if (index > 0) {\n                    workersList.splice(index, 1);\n                }\n\n                task.callback(err, ...args);\n\n                if (err != null) {\n                    trigger('error', err, task.data);\n                }\n            }\n\n            if (numRunning <= (q.concurrency - q.buffer) ) {\n                trigger('unsaturated');\n            }\n\n            if (q.idle()) {\n                trigger('drain');\n            }\n            q.process();\n        };\n    }\n\n    function _maybeDrain(data) {\n        if (data.length === 0 && q.idle()) {\n            // call drain immediately if there are no tasks\n            setImmediate$1(() => trigger('drain'));\n            return true\n        }\n        return false\n    }\n\n    const eventMethod = (name) => (handler) => {\n        if (!handler) {\n            return new Promise((resolve, reject) => {\n                once(name, (err, data) => {\n                    if (err) return reject(err)\n                    resolve(data);\n                });\n            })\n        }\n        off(name);\n        on(name, handler);\n\n    };\n\n    var isProcessing = false;\n    var q = {\n        _tasks: new DLL(),\n        *[Symbol.iterator] () {\n            yield* q._tasks[Symbol.iterator]();\n        },\n        concurrency,\n        payload,\n        buffer: concurrency / 4,\n        started: false,\n        paused: false,\n        push (data, callback) {\n            if (Array.isArray(data)) {\n                if (_maybeDrain(data)) return\n                return data.map(datum => _insert(datum, false, false, callback))\n            }\n            return _insert(data, false, false, callback);\n        },\n        pushAsync (data, callback) {\n            if (Array.isArray(data)) {\n                if (_maybeDrain(data)) return\n                return data.map(datum => _insert(datum, false, true, callback))\n            }\n            return _insert(data, false, true, callback);\n        },\n        kill () {\n            off();\n            q._tasks.empty();\n        },\n        unshift (data, callback) {\n            if (Array.isArray(data)) {\n                if (_maybeDrain(data)) return\n                return data.map(datum => _insert(datum, true, false, callback))\n            }\n            return _insert(data, true, false, callback);\n        },\n        unshiftAsync (data, callback) {\n            if (Array.isArray(data)) {\n                if (_maybeDrain(data)) return\n                return data.map(datum => _insert(datum, true, true, callback))\n            }\n            return _insert(data, true, true, callback);\n        },\n        remove (testFn) {\n            q._tasks.remove(testFn);\n        },\n        process () {\n            // Avoid trying to start too many processing operations. This can occur\n            // when callbacks resolve synchronously (#1267).\n            if (isProcessing) {\n                return;\n            }\n            isProcessing = true;\n            while(!q.paused && numRunning < q.concurrency && q._tasks.length){\n                var tasks = [], data = [];\n                var l = q._tasks.length;\n                if (q.payload) l = Math.min(l, q.payload);\n                for (var i = 0; i < l; i++) {\n                    var node = q._tasks.shift();\n                    tasks.push(node);\n                    workersList.push(node);\n                    data.push(node.data);\n                }\n\n                numRunning += 1;\n\n                if (q._tasks.length === 0) {\n                    trigger('empty');\n                }\n\n                if (numRunning === q.concurrency) {\n                    trigger('saturated');\n                }\n\n                var cb = onlyOnce(_createCB(tasks));\n                _worker(data, cb);\n            }\n            isProcessing = false;\n        },\n        length () {\n            return q._tasks.length;\n        },\n        running () {\n            return numRunning;\n        },\n        workersList () {\n            return workersList;\n        },\n        idle() {\n            return q._tasks.length + numRunning === 0;\n        },\n        pause () {\n            q.paused = true;\n        },\n        resume () {\n            if (q.paused === false) { return; }\n            q.paused = false;\n            setImmediate$1(q.process);\n        }\n    };\n    // define these as fixed properties, so people get useful errors when updating\n    Object.defineProperties(q, {\n        saturated: {\n            writable: false,\n            value: eventMethod('saturated')\n        },\n        unsaturated: {\n            writable: false,\n            value: eventMethod('unsaturated')\n        },\n        empty: {\n            writable: false,\n            value: eventMethod('empty')\n        },\n        drain: {\n            writable: false,\n            value: eventMethod('drain')\n        },\n        error: {\n            writable: false,\n            value: eventMethod('error')\n        },\n    });\n    return q;\n}\n\n/**\n * Creates a `cargo` object with the specified payload. Tasks added to the\n * cargo will be processed altogether (up to the `payload` limit). If the\n * `worker` is in progress, the task is queued until it becomes available. Once\n * the `worker` has completed some tasks, each callback of those tasks is\n * called. Check out [these](https://camo.githubusercontent.com/6bbd36f4cf5b35a0f11a96dcd2e97711ffc2fb37/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130382f62626330636662302d356632392d313165322d393734662d3333393763363464633835382e676966) [animations](https://camo.githubusercontent.com/f4810e00e1c5f5f8addbe3e9f49064fd5d102699/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130312f38346339323036362d356632392d313165322d383134662d3964336430323431336266642e676966)\n * for how `cargo` and `queue` work.\n *\n * While [`queue`]{@link module:ControlFlow.queue} passes only one task to one of a group of workers\n * at a time, cargo passes an array of tasks to a single worker, repeating\n * when the worker is finished.\n *\n * @name cargo\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.queue]{@link module:ControlFlow.queue}\n * @category Control Flow\n * @param {AsyncFunction} worker - An asynchronous function for processing an array\n * of queued tasks. Invoked with `(tasks, callback)`.\n * @param {number} [payload=Infinity] - An optional `integer` for determining\n * how many tasks should be processed per round; if omitted, the default is\n * unlimited.\n * @returns {module:ControlFlow.QueueObject} A cargo object to manage the tasks. Callbacks can\n * attached as certain properties to listen for specific events during the\n * lifecycle of the cargo and inner queue.\n * @example\n *\n * // create a cargo object with payload 2\n * var cargo = async.cargo(function(tasks, callback) {\n *     for (var i=0; i<tasks.length; i++) {\n *         console.log('hello ' + tasks[i].name);\n *     }\n *     callback();\n * }, 2);\n *\n * // add some items\n * cargo.push({name: 'foo'}, function(err) {\n *     console.log('finished processing foo');\n * });\n * cargo.push({name: 'bar'}, function(err) {\n *     console.log('finished processing bar');\n * });\n * await cargo.push({name: 'baz'});\n * console.log('finished processing baz');\n */\nfunction cargo(worker, payload) {\n    return queue(worker, 1, payload);\n}\n\n/**\n * Creates a `cargoQueue` object with the specified payload. Tasks added to the\n * cargoQueue will be processed together (up to the `payload` limit) in `concurrency` parallel workers.\n * If the all `workers` are in progress, the task is queued until one becomes available. Once\n * a `worker` has completed some tasks, each callback of those tasks is\n * called. Check out [these](https://camo.githubusercontent.com/6bbd36f4cf5b35a0f11a96dcd2e97711ffc2fb37/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130382f62626330636662302d356632392d313165322d393734662d3333393763363464633835382e676966) [animations](https://camo.githubusercontent.com/f4810e00e1c5f5f8addbe3e9f49064fd5d102699/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130312f38346339323036362d356632392d313165322d383134662d3964336430323431336266642e676966)\n * for how `cargo` and `queue` work.\n *\n * While [`queue`]{@link module:ControlFlow.queue} passes only one task to one of a group of workers\n * at a time, and [`cargo`]{@link module:ControlFlow.cargo} passes an array of tasks to a single worker,\n * the cargoQueue passes an array of tasks to multiple parallel workers.\n *\n * @name cargoQueue\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.queue]{@link module:ControlFlow.queue}\n * @see [async.cargo]{@link module:ControlFLow.cargo}\n * @category Control Flow\n * @param {AsyncFunction} worker - An asynchronous function for processing an array\n * of queued tasks. Invoked with `(tasks, callback)`.\n * @param {number} [concurrency=1] - An `integer` for determining how many\n * `worker` functions should be run in parallel.  If omitted, the concurrency\n * defaults to `1`.  If the concurrency is `0`, an error is thrown.\n * @param {number} [payload=Infinity] - An optional `integer` for determining\n * how many tasks should be processed per round; if omitted, the default is\n * unlimited.\n * @returns {module:ControlFlow.QueueObject} A cargoQueue object to manage the tasks. Callbacks can\n * attached as certain properties to listen for specific events during the\n * lifecycle of the cargoQueue and inner queue.\n * @example\n *\n * // create a cargoQueue object with payload 2 and concurrency 2\n * var cargoQueue = async.cargoQueue(function(tasks, callback) {\n *     for (var i=0; i<tasks.length; i++) {\n *         console.log('hello ' + tasks[i].name);\n *     }\n *     callback();\n * }, 2, 2);\n *\n * // add some items\n * cargoQueue.push({name: 'foo'}, function(err) {\n *     console.log('finished processing foo');\n * });\n * cargoQueue.push({name: 'bar'}, function(err) {\n *     console.log('finished processing bar');\n * });\n * cargoQueue.push({name: 'baz'}, function(err) {\n *     console.log('finished processing baz');\n * });\n * cargoQueue.push({name: 'boo'}, function(err) {\n *     console.log('finished processing boo');\n * });\n */\nfunction cargo$1(worker, concurrency, payload) {\n    return queue(worker, concurrency, payload);\n}\n\n/**\n * Reduces `coll` into a single value using an async `iteratee` to return each\n * successive step. `memo` is the initial state of the reduction. This function\n * only operates in series.\n *\n * For performance reasons, it may make sense to split a call to this function\n * into a parallel map, and then use the normal `Array.prototype.reduce` on the\n * results. This function is for situations where each step in the reduction\n * needs to be async; if you can get the data before reducing it, then it's\n * probably a good idea to do so.\n *\n * @name reduce\n * @static\n * @memberOf module:Collections\n * @method\n * @alias inject\n * @alias foldl\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {*} memo - The initial state of the reduction.\n * @param {AsyncFunction} iteratee - A function applied to each item in the\n * array to produce the next step in the reduction.\n * The `iteratee` should complete with the next state of the reduction.\n * If the iteratee completes with an error, the reduction is stopped and the\n * main `callback` is immediately called with the error.\n * Invoked with (memo, item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result is the reduced value. Invoked with\n * (err, result).\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * // file1.txt is a file that is 1000 bytes in size\n * // file2.txt is a file that is 2000 bytes in size\n * // file3.txt is a file that is 3000 bytes in size\n * // file4.txt does not exist\n *\n * const fileList = ['file1.txt','file2.txt','file3.txt'];\n * const withMissingFileList = ['file1.txt','file2.txt','file3.txt', 'file4.txt'];\n *\n * // asynchronous function that computes the file size in bytes\n * // file size is added to the memoized value, then returned\n * function getFileSizeInBytes(memo, file, callback) {\n *     fs.stat(file, function(err, stat) {\n *         if (err) {\n *             return callback(err);\n *         }\n *         callback(null, memo + stat.size);\n *     });\n * }\n *\n * // Using callbacks\n * async.reduce(fileList, 0, getFileSizeInBytes, function(err, result) {\n *     if (err) {\n *         console.log(err);\n *     } else {\n *         console.log(result);\n *         // 6000\n *         // which is the sum of the file sizes of the three files\n *     }\n * });\n *\n * // Error Handling\n * async.reduce(withMissingFileList, 0, getFileSizeInBytes, function(err, result) {\n *     if (err) {\n *         console.log(err);\n *         // [ Error: ENOENT: no such file or directory ]\n *     } else {\n *         console.log(result);\n *     }\n * });\n *\n * // Using Promises\n * async.reduce(fileList, 0, getFileSizeInBytes)\n * .then( result => {\n *     console.log(result);\n *     // 6000\n *     // which is the sum of the file sizes of the three files\n * }).catch( err => {\n *     console.log(err);\n * });\n *\n * // Error Handling\n * async.reduce(withMissingFileList, 0, getFileSizeInBytes)\n * .then( result => {\n *     console.log(result);\n * }).catch( err => {\n *     console.log(err);\n *     // [ Error: ENOENT: no such file or directory ]\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let result = await async.reduce(fileList, 0, getFileSizeInBytes);\n *         console.log(result);\n *         // 6000\n *         // which is the sum of the file sizes of the three files\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n * // Error Handling\n * async () => {\n *     try {\n *         let result = await async.reduce(withMissingFileList, 0, getFileSizeInBytes);\n *         console.log(result);\n *     }\n *     catch (err) {\n *         console.log(err);\n *         // [ Error: ENOENT: no such file or directory ]\n *     }\n * }\n *\n */\nfunction reduce(coll, memo, iteratee, callback) {\n    callback = once(callback);\n    var _iteratee = wrapAsync(iteratee);\n    return eachOfSeries$1(coll, (x, i, iterCb) => {\n        _iteratee(memo, x, (err, v) => {\n            memo = v;\n            iterCb(err);\n        });\n    }, err => callback(err, memo));\n}\nvar reduce$1 = awaitify(reduce, 4);\n\n/**\n * Version of the compose function that is more natural to read. Each function\n * consumes the return value of the previous function. It is the equivalent of\n * [compose]{@link module:ControlFlow.compose} with the arguments reversed.\n *\n * Each function is executed with the `this` binding of the composed function.\n *\n * @name seq\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.compose]{@link module:ControlFlow.compose}\n * @category Control Flow\n * @param {...AsyncFunction} functions - the asynchronous functions to compose\n * @returns {Function} a function that composes the `functions` in order\n * @example\n *\n * // Requires lodash (or underscore), express3 and dresende's orm2.\n * // Part of an app, that fetches cats of the logged user.\n * // This example uses `seq` function to avoid overnesting and error\n * // handling clutter.\n * app.get('/cats', function(request, response) {\n *     var User = request.models.User;\n *     async.seq(\n *         User.get.bind(User),  // 'User.get' has signature (id, callback(err, data))\n *         function(user, fn) {\n *             user.getCats(fn);      // 'getCats' has signature (callback(err, data))\n *         }\n *     )(req.session.user_id, function (err, cats) {\n *         if (err) {\n *             console.error(err);\n *             response.json({ status: 'error', message: err.message });\n *         } else {\n *             response.json({ status: 'ok', message: 'Cats found', data: cats });\n *         }\n *     });\n * });\n */\nfunction seq(...functions) {\n    var _functions = functions.map(wrapAsync);\n    return function (...args) {\n        var that = this;\n\n        var cb = args[args.length - 1];\n        if (typeof cb == 'function') {\n            args.pop();\n        } else {\n            cb = promiseCallback();\n        }\n\n        reduce$1(_functions, args, (newargs, fn, iterCb) => {\n            fn.apply(that, newargs.concat((err, ...nextargs) => {\n                iterCb(err, nextargs);\n            }));\n        },\n        (err, results) => cb(err, ...results));\n\n        return cb[PROMISE_SYMBOL]\n    };\n}\n\n/**\n * Creates a function which is a composition of the passed asynchronous\n * functions. Each function consumes the return value of the function that\n * follows. Composing functions `f()`, `g()`, and `h()` would produce the result\n * of `f(g(h()))`, only this version uses callbacks to obtain the return values.\n *\n * If the last argument to the composed function is not a function, a promise\n * is returned when you call it.\n *\n * Each function is executed with the `this` binding of the composed function.\n *\n * @name compose\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {...AsyncFunction} functions - the asynchronous functions to compose\n * @returns {Function} an asynchronous function that is the composed\n * asynchronous `functions`\n * @example\n *\n * function add1(n, callback) {\n *     setTimeout(function () {\n *         callback(null, n + 1);\n *     }, 10);\n * }\n *\n * function mul3(n, callback) {\n *     setTimeout(function () {\n *         callback(null, n * 3);\n *     }, 10);\n * }\n *\n * var add1mul3 = async.compose(mul3, add1);\n * add1mul3(4, function (err, result) {\n *     // result now equals 15\n * });\n */\nfunction compose(...args) {\n    return seq(...args.reverse());\n}\n\n/**\n * The same as [`map`]{@link module:Collections.map} but runs a maximum of `limit` async operations at a time.\n *\n * @name mapLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.map]{@link module:Collections.map}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with the transformed item.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Results is an array of the\n * transformed items from the `coll`. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction mapLimit (coll, limit, iteratee, callback) {\n    return _asyncMap(eachOfLimit(limit), coll, iteratee, callback)\n}\nvar mapLimit$1 = awaitify(mapLimit, 4);\n\n/**\n * The same as [`concat`]{@link module:Collections.concat} but runs a maximum of `limit` async operations at a time.\n *\n * @name concatLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.concat]{@link module:Collections.concat}\n * @category Collection\n * @alias flatMapLimit\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`,\n * which should use an array as its result. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished, or an error occurs. Results is an array\n * containing the concatenated results of the `iteratee` function. Invoked with\n * (err, results).\n * @returns A Promise, if no callback is passed\n */\nfunction concatLimit(coll, limit, iteratee, callback) {\n    var _iteratee = wrapAsync(iteratee);\n    return mapLimit$1(coll, limit, (val, iterCb) => {\n        _iteratee(val, (err, ...args) => {\n            if (err) return iterCb(err);\n            return iterCb(err, args);\n        });\n    }, (err, mapResults) => {\n        var result = [];\n        for (var i = 0; i < mapResults.length; i++) {\n            if (mapResults[i]) {\n                result = result.concat(...mapResults[i]);\n            }\n        }\n\n        return callback(err, result);\n    });\n}\nvar concatLimit$1 = awaitify(concatLimit, 4);\n\n/**\n * Applies `iteratee` to each item in `coll`, concatenating the results. Returns\n * the concatenated list. The `iteratee`s are called in parallel, and the\n * results are concatenated as they return. The results array will be returned in\n * the original order of `coll` passed to the `iteratee` function.\n *\n * @name concat\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @alias flatMap\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`,\n * which should use an array as its result. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished, or an error occurs. Results is an array\n * containing the concatenated results of the `iteratee` function. Invoked with\n * (err, results).\n * @returns A Promise, if no callback is passed\n * @example\n *\n * // dir1 is a directory that contains file1.txt, file2.txt\n * // dir2 is a directory that contains file3.txt, file4.txt\n * // dir3 is a directory that contains file5.txt\n * // dir4 does not exist\n *\n * let directoryList = ['dir1','dir2','dir3'];\n * let withMissingDirectoryList = ['dir1','dir2','dir3', 'dir4'];\n *\n * // Using callbacks\n * async.concat(directoryList, fs.readdir, function(err, results) {\n *    if (err) {\n *        console.log(err);\n *    } else {\n *        console.log(results);\n *        // [ 'file1.txt', 'file2.txt', 'file3.txt', 'file4.txt', file5.txt ]\n *    }\n * });\n *\n * // Error Handling\n * async.concat(withMissingDirectoryList, fs.readdir, function(err, results) {\n *    if (err) {\n *        console.log(err);\n *        // [ Error: ENOENT: no such file or directory ]\n *        // since dir4 does not exist\n *    } else {\n *        console.log(results);\n *    }\n * });\n *\n * // Using Promises\n * async.concat(directoryList, fs.readdir)\n * .then(results => {\n *     console.log(results);\n *     // [ 'file1.txt', 'file2.txt', 'file3.txt', 'file4.txt', file5.txt ]\n * }).catch(err => {\n *      console.log(err);\n * });\n *\n * // Error Handling\n * async.concat(withMissingDirectoryList, fs.readdir)\n * .then(results => {\n *     console.log(results);\n * }).catch(err => {\n *     console.log(err);\n *     // [ Error: ENOENT: no such file or directory ]\n *     // since dir4 does not exist\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let results = await async.concat(directoryList, fs.readdir);\n *         console.log(results);\n *         // [ 'file1.txt', 'file2.txt', 'file3.txt', 'file4.txt', file5.txt ]\n *     } catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n * // Error Handling\n * async () => {\n *     try {\n *         let results = await async.concat(withMissingDirectoryList, fs.readdir);\n *         console.log(results);\n *     } catch (err) {\n *         console.log(err);\n *         // [ Error: ENOENT: no such file or directory ]\n *         // since dir4 does not exist\n *     }\n * }\n *\n */\nfunction concat(coll, iteratee, callback) {\n    return concatLimit$1(coll, Infinity, iteratee, callback)\n}\nvar concat$1 = awaitify(concat, 3);\n\n/**\n * The same as [`concat`]{@link module:Collections.concat} but runs only a single async operation at a time.\n *\n * @name concatSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.concat]{@link module:Collections.concat}\n * @category Collection\n * @alias flatMapSeries\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`.\n * The iteratee should complete with an array an array of results.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished, or an error occurs. Results is an array\n * containing the concatenated results of the `iteratee` function. Invoked with\n * (err, results).\n * @returns A Promise, if no callback is passed\n */\nfunction concatSeries(coll, iteratee, callback) {\n    return concatLimit$1(coll, 1, iteratee, callback)\n}\nvar concatSeries$1 = awaitify(concatSeries, 3);\n\n/**\n * Returns a function that when called, calls-back with the values provided.\n * Useful as the first function in a [`waterfall`]{@link module:ControlFlow.waterfall}, or for plugging values in to\n * [`auto`]{@link module:ControlFlow.auto}.\n *\n * @name constant\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {...*} arguments... - Any number of arguments to automatically invoke\n * callback with.\n * @returns {AsyncFunction} Returns a function that when invoked, automatically\n * invokes the callback with the previous given arguments.\n * @example\n *\n * async.waterfall([\n *     async.constant(42),\n *     function (value, next) {\n *         // value === 42\n *     },\n *     //...\n * ], callback);\n *\n * async.waterfall([\n *     async.constant(filename, \"utf8\"),\n *     fs.readFile,\n *     function (fileData, next) {\n *         //...\n *     }\n *     //...\n * ], callback);\n *\n * async.auto({\n *     hostname: async.constant(\"https://server.net/\"),\n *     port: findFreePort,\n *     launchServer: [\"hostname\", \"port\", function (options, cb) {\n *         startServer(options, cb);\n *     }],\n *     //...\n * }, callback);\n */\nfunction constant(...args) {\n    return function (...ignoredArgs/*, callback*/) {\n        var callback = ignoredArgs.pop();\n        return callback(null, ...args);\n    };\n}\n\nfunction _createTester(check, getResult) {\n    return (eachfn, arr, _iteratee, cb) => {\n        var testPassed = false;\n        var testResult;\n        const iteratee = wrapAsync(_iteratee);\n        eachfn(arr, (value, _, callback) => {\n            iteratee(value, (err, result) => {\n                if (err || err === false) return callback(err);\n\n                if (check(result) && !testResult) {\n                    testPassed = true;\n                    testResult = getResult(true, value);\n                    return callback(null, breakLoop);\n                }\n                callback();\n            });\n        }, err => {\n            if (err) return cb(err);\n            cb(null, testPassed ? testResult : getResult(false));\n        });\n    };\n}\n\n/**\n * Returns the first value in `coll` that passes an async truth test. The\n * `iteratee` is applied in parallel, meaning the first iteratee to return\n * `true` will fire the detect `callback` with that result. That means the\n * result might not be the first item in the original `coll` (in terms of order)\n * that passes the test.\n\n * If order within the original `coll` is important, then look at\n * [`detectSeries`]{@link module:Collections.detectSeries}.\n *\n * @name detect\n * @static\n * @memberOf module:Collections\n * @method\n * @alias find\n * @category Collections\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\n * The iteratee must complete with a boolean value as its result.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the `iteratee` functions have finished.\n * Result will be the first item in the array that passes the truth test\n * (iteratee) or the value `undefined` if none passed. Invoked with\n * (err, result).\n * @returns A Promise, if no callback is passed\n * @example\n *\n * // dir1 is a directory that contains file1.txt, file2.txt\n * // dir2 is a directory that contains file3.txt, file4.txt\n * // dir3 is a directory that contains file5.txt\n *\n * // asynchronous function that checks if a file exists\n * function fileExists(file, callback) {\n *    fs.access(file, fs.constants.F_OK, (err) => {\n *        callback(null, !err);\n *    });\n * }\n *\n * async.detect(['file3.txt','file2.txt','dir1/file1.txt'], fileExists,\n *    function(err, result) {\n *        console.log(result);\n *        // dir1/file1.txt\n *        // result now equals the first file in the list that exists\n *    }\n *);\n *\n * // Using Promises\n * async.detect(['file3.txt','file2.txt','dir1/file1.txt'], fileExists)\n * .then(result => {\n *     console.log(result);\n *     // dir1/file1.txt\n *     // result now equals the first file in the list that exists\n * }).catch(err => {\n *     console.log(err);\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let result = await async.detect(['file3.txt','file2.txt','dir1/file1.txt'], fileExists);\n *         console.log(result);\n *         // dir1/file1.txt\n *         // result now equals the file in the list that exists\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n */\nfunction detect(coll, iteratee, callback) {\n    return _createTester(bool => bool, (res, item) => item)(eachOf$1, coll, iteratee, callback)\n}\nvar detect$1 = awaitify(detect, 3);\n\n/**\n * The same as [`detect`]{@link module:Collections.detect} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name detectLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.detect]{@link module:Collections.detect}\n * @alias findLimit\n * @category Collections\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\n * The iteratee must complete with a boolean value as its result.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the `iteratee` functions have finished.\n * Result will be the first item in the array that passes the truth test\n * (iteratee) or the value `undefined` if none passed. Invoked with\n * (err, result).\n * @returns a Promise if no callback is passed\n */\nfunction detectLimit(coll, limit, iteratee, callback) {\n    return _createTester(bool => bool, (res, item) => item)(eachOfLimit(limit), coll, iteratee, callback)\n}\nvar detectLimit$1 = awaitify(detectLimit, 4);\n\n/**\n * The same as [`detect`]{@link module:Collections.detect} but runs only a single async operation at a time.\n *\n * @name detectSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.detect]{@link module:Collections.detect}\n * @alias findSeries\n * @category Collections\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\n * The iteratee must complete with a boolean value as its result.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the `iteratee` functions have finished.\n * Result will be the first item in the array that passes the truth test\n * (iteratee) or the value `undefined` if none passed. Invoked with\n * (err, result).\n * @returns a Promise if no callback is passed\n */\nfunction detectSeries(coll, iteratee, callback) {\n    return _createTester(bool => bool, (res, item) => item)(eachOfLimit(1), coll, iteratee, callback)\n}\n\nvar detectSeries$1 = awaitify(detectSeries, 3);\n\nfunction consoleFunc(name) {\n    return (fn, ...args) => wrapAsync(fn)(...args, (err, ...resultArgs) => {\n        /* istanbul ignore else */\n        if (typeof console === 'object') {\n            /* istanbul ignore else */\n            if (err) {\n                /* istanbul ignore else */\n                if (console.error) {\n                    console.error(err);\n                }\n            } else if (console[name]) { /* istanbul ignore else */\n                resultArgs.forEach(x => console[name](x));\n            }\n        }\n    })\n}\n\n/**\n * Logs the result of an [`async` function]{@link AsyncFunction} to the\n * `console` using `console.dir` to display the properties of the resulting object.\n * Only works in Node.js or in browsers that support `console.dir` and\n * `console.error` (such as FF and Chrome).\n * If multiple arguments are returned from the async function,\n * `console.dir` is called on each argument in order.\n *\n * @name dir\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} function - The function you want to eventually apply\n * all arguments to.\n * @param {...*} arguments... - Any number of arguments to apply to the function.\n * @example\n *\n * // in a module\n * var hello = function(name, callback) {\n *     setTimeout(function() {\n *         callback(null, {hello: name});\n *     }, 1000);\n * };\n *\n * // in the node repl\n * node> async.dir(hello, 'world');\n * {hello: 'world'}\n */\nvar dir = consoleFunc('dir');\n\n/**\n * The post-check version of [`whilst`]{@link module:ControlFlow.whilst}. To reflect the difference in\n * the order of operations, the arguments `test` and `iteratee` are switched.\n *\n * `doWhilst` is to `whilst` as `do while` is to `while` in plain JavaScript.\n *\n * @name doWhilst\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.whilst]{@link module:ControlFlow.whilst}\n * @category Control Flow\n * @param {AsyncFunction} iteratee - A function which is called each time `test`\n * passes. Invoked with (callback).\n * @param {AsyncFunction} test - asynchronous truth test to perform after each\n * execution of `iteratee`. Invoked with (...args, callback), where `...args` are the\n * non-error args from the previous callback of `iteratee`.\n * @param {Function} [callback] - A callback which is called after the test\n * function has failed and repeated execution of `iteratee` has stopped.\n * `callback` will be passed an error and any arguments passed to the final\n * `iteratee`'s callback. Invoked with (err, [results]);\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction doWhilst(iteratee, test, callback) {\n    callback = onlyOnce(callback);\n    var _fn = wrapAsync(iteratee);\n    var _test = wrapAsync(test);\n    var results;\n\n    function next(err, ...args) {\n        if (err) return callback(err);\n        if (err === false) return;\n        results = args;\n        _test(...args, check);\n    }\n\n    function check(err, truth) {\n        if (err) return callback(err);\n        if (err === false) return;\n        if (!truth) return callback(null, ...results);\n        _fn(next);\n    }\n\n    return check(null, true);\n}\n\nvar doWhilst$1 = awaitify(doWhilst, 3);\n\n/**\n * Like ['doWhilst']{@link module:ControlFlow.doWhilst}, except the `test` is inverted. Note the\n * argument ordering differs from `until`.\n *\n * @name doUntil\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.doWhilst]{@link module:ControlFlow.doWhilst}\n * @category Control Flow\n * @param {AsyncFunction} iteratee - An async function which is called each time\n * `test` fails. Invoked with (callback).\n * @param {AsyncFunction} test - asynchronous truth test to perform after each\n * execution of `iteratee`. Invoked with (...args, callback), where `...args` are the\n * non-error args from the previous callback of `iteratee`\n * @param {Function} [callback] - A callback which is called after the test\n * function has passed and repeated execution of `iteratee` has stopped. `callback`\n * will be passed an error and any arguments passed to the final `iteratee`'s\n * callback. Invoked with (err, [results]);\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction doUntil(iteratee, test, callback) {\n    const _test = wrapAsync(test);\n    return doWhilst$1(iteratee, (...args) => {\n        const cb = args.pop();\n        _test(...args, (err, truth) => cb (err, !truth));\n    }, callback);\n}\n\nfunction _withoutIndex(iteratee) {\n    return (value, index, callback) => iteratee(value, callback);\n}\n\n/**\n * Applies the function `iteratee` to each item in `coll`, in parallel.\n * The `iteratee` is called with an item from the list, and a callback for when\n * it has finished. If the `iteratee` passes an error to its `callback`, the\n * main `callback` (for the `each` function) is immediately called with the\n * error.\n *\n * Note, that since this function applies `iteratee` to each item in parallel,\n * there is no guarantee that the iteratee functions will complete in order.\n *\n * @name each\n * @static\n * @memberOf module:Collections\n * @method\n * @alias forEach\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to\n * each item in `coll`. Invoked with (item, callback).\n * The array index is not passed to the iteratee.\n * If you need the index, use `eachOf`.\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n * @returns {Promise} a promise, if a callback is omitted\n * @example\n *\n * // dir1 is a directory that contains file1.txt, file2.txt\n * // dir2 is a directory that contains file3.txt, file4.txt\n * // dir3 is a directory that contains file5.txt\n * // dir4 does not exist\n *\n * const fileList = [ 'dir1/file2.txt', 'dir2/file3.txt', 'dir/file5.txt'];\n * const withMissingFileList = ['dir1/file1.txt', 'dir4/file2.txt'];\n *\n * // asynchronous function that deletes a file\n * const deleteFile = function(file, callback) {\n *     fs.unlink(file, callback);\n * };\n *\n * // Using callbacks\n * async.each(fileList, deleteFile, function(err) {\n *     if( err ) {\n *         console.log(err);\n *     } else {\n *         console.log('All files have been deleted successfully');\n *     }\n * });\n *\n * // Error Handling\n * async.each(withMissingFileList, deleteFile, function(err){\n *     console.log(err);\n *     // [ Error: ENOENT: no such file or directory ]\n *     // since dir4/file2.txt does not exist\n *     // dir1/file1.txt could have been deleted\n * });\n *\n * // Using Promises\n * async.each(fileList, deleteFile)\n * .then( () => {\n *     console.log('All files have been deleted successfully');\n * }).catch( err => {\n *     console.log(err);\n * });\n *\n * // Error Handling\n * async.each(fileList, deleteFile)\n * .then( () => {\n *     console.log('All files have been deleted successfully');\n * }).catch( err => {\n *     console.log(err);\n *     // [ Error: ENOENT: no such file or directory ]\n *     // since dir4/file2.txt does not exist\n *     // dir1/file1.txt could have been deleted\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         await async.each(files, deleteFile);\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n * // Error Handling\n * async () => {\n *     try {\n *         await async.each(withMissingFileList, deleteFile);\n *     }\n *     catch (err) {\n *         console.log(err);\n *         // [ Error: ENOENT: no such file or directory ]\n *         // since dir4/file2.txt does not exist\n *         // dir1/file1.txt could have been deleted\n *     }\n * }\n *\n */\nfunction eachLimit(coll, iteratee, callback) {\n    return eachOf$1(coll, _withoutIndex(wrapAsync(iteratee)), callback);\n}\n\nvar each = awaitify(eachLimit, 3);\n\n/**\n * The same as [`each`]{@link module:Collections.each} but runs a maximum of `limit` async operations at a time.\n *\n * @name eachLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.each]{@link module:Collections.each}\n * @alias forEachLimit\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The array index is not passed to the iteratee.\n * If you need the index, use `eachOfLimit`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n * @returns {Promise} a promise, if a callback is omitted\n */\nfunction eachLimit$1(coll, limit, iteratee, callback) {\n    return eachOfLimit(limit)(coll, _withoutIndex(wrapAsync(iteratee)), callback);\n}\nvar eachLimit$2 = awaitify(eachLimit$1, 4);\n\n/**\n * The same as [`each`]{@link module:Collections.each} but runs only a single async operation at a time.\n *\n * Note, that unlike [`each`]{@link module:Collections.each}, this function applies iteratee to each item\n * in series and therefore the iteratee functions will complete in order.\n\n * @name eachSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.each]{@link module:Collections.each}\n * @alias forEachSeries\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each\n * item in `coll`.\n * The array index is not passed to the iteratee.\n * If you need the index, use `eachOfSeries`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n * @returns {Promise} a promise, if a callback is omitted\n */\nfunction eachSeries(coll, iteratee, callback) {\n    return eachLimit$2(coll, 1, iteratee, callback)\n}\nvar eachSeries$1 = awaitify(eachSeries, 3);\n\n/**\n * Wrap an async function and ensure it calls its callback on a later tick of\n * the event loop.  If the function already calls its callback on a next tick,\n * no extra deferral is added. This is useful for preventing stack overflows\n * (`RangeError: Maximum call stack size exceeded`) and generally keeping\n * [Zalgo](http://blog.izs.me/post/59142742143/designing-apis-for-asynchrony)\n * contained. ES2017 `async` functions are returned as-is -- they are immune\n * to Zalgo's corrupting influences, as they always resolve on a later tick.\n *\n * @name ensureAsync\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} fn - an async function, one that expects a node-style\n * callback as its last argument.\n * @returns {AsyncFunction} Returns a wrapped function with the exact same call\n * signature as the function passed in.\n * @example\n *\n * function sometimesAsync(arg, callback) {\n *     if (cache[arg]) {\n *         return callback(null, cache[arg]); // this would be synchronous!!\n *     } else {\n *         doSomeIO(arg, callback); // this IO would be asynchronous\n *     }\n * }\n *\n * // this has a risk of stack overflows if many results are cached in a row\n * async.mapSeries(args, sometimesAsync, done);\n *\n * // this will defer sometimesAsync's callback if necessary,\n * // preventing stack overflows\n * async.mapSeries(args, async.ensureAsync(sometimesAsync), done);\n */\nfunction ensureAsync(fn) {\n    if (isAsync(fn)) return fn;\n    return function (...args/*, callback*/) {\n        var callback = args.pop();\n        var sync = true;\n        args.push((...innerArgs) => {\n            if (sync) {\n                setImmediate$1(() => callback(...innerArgs));\n            } else {\n                callback(...innerArgs);\n            }\n        });\n        fn.apply(this, args);\n        sync = false;\n    };\n}\n\n/**\n * Returns `true` if every element in `coll` satisfies an async test. If any\n * iteratee call returns `false`, the main `callback` is immediately called.\n *\n * @name every\n * @static\n * @memberOf module:Collections\n * @method\n * @alias all\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collection in parallel.\n * The iteratee must complete with a boolean result value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result will be either `true` or `false`\n * depending on the values of the async tests. Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n * @example\n *\n * // dir1 is a directory that contains file1.txt, file2.txt\n * // dir2 is a directory that contains file3.txt, file4.txt\n * // dir3 is a directory that contains file5.txt\n * // dir4 does not exist\n *\n * const fileList = ['dir1/file1.txt','dir2/file3.txt','dir3/file5.txt'];\n * const withMissingFileList = ['file1.txt','file2.txt','file4.txt'];\n *\n * // asynchronous function that checks if a file exists\n * function fileExists(file, callback) {\n *    fs.access(file, fs.constants.F_OK, (err) => {\n *        callback(null, !err);\n *    });\n * }\n *\n * // Using callbacks\n * async.every(fileList, fileExists, function(err, result) {\n *     console.log(result);\n *     // true\n *     // result is true since every file exists\n * });\n *\n * async.every(withMissingFileList, fileExists, function(err, result) {\n *     console.log(result);\n *     // false\n *     // result is false since NOT every file exists\n * });\n *\n * // Using Promises\n * async.every(fileList, fileExists)\n * .then( result => {\n *     console.log(result);\n *     // true\n *     // result is true since every file exists\n * }).catch( err => {\n *     console.log(err);\n * });\n *\n * async.every(withMissingFileList, fileExists)\n * .then( result => {\n *     console.log(result);\n *     // false\n *     // result is false since NOT every file exists\n * }).catch( err => {\n *     console.log(err);\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let result = await async.every(fileList, fileExists);\n *         console.log(result);\n *         // true\n *         // result is true since every file exists\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n * async () => {\n *     try {\n *         let result = await async.every(withMissingFileList, fileExists);\n *         console.log(result);\n *         // false\n *         // result is false since NOT every file exists\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n */\nfunction every(coll, iteratee, callback) {\n    return _createTester(bool => !bool, res => !res)(eachOf$1, coll, iteratee, callback)\n}\nvar every$1 = awaitify(every, 3);\n\n/**\n * The same as [`every`]{@link module:Collections.every} but runs a maximum of `limit` async operations at a time.\n *\n * @name everyLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.every]{@link module:Collections.every}\n * @alias allLimit\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collection in parallel.\n * The iteratee must complete with a boolean result value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result will be either `true` or `false`\n * depending on the values of the async tests. Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n */\nfunction everyLimit(coll, limit, iteratee, callback) {\n    return _createTester(bool => !bool, res => !res)(eachOfLimit(limit), coll, iteratee, callback)\n}\nvar everyLimit$1 = awaitify(everyLimit, 4);\n\n/**\n * The same as [`every`]{@link module:Collections.every} but runs only a single async operation at a time.\n *\n * @name everySeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.every]{@link module:Collections.every}\n * @alias allSeries\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collection in series.\n * The iteratee must complete with a boolean result value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result will be either `true` or `false`\n * depending on the values of the async tests. Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n */\nfunction everySeries(coll, iteratee, callback) {\n    return _createTester(bool => !bool, res => !res)(eachOfSeries$1, coll, iteratee, callback)\n}\nvar everySeries$1 = awaitify(everySeries, 3);\n\nfunction filterArray(eachfn, arr, iteratee, callback) {\n    var truthValues = new Array(arr.length);\n    eachfn(arr, (x, index, iterCb) => {\n        iteratee(x, (err, v) => {\n            truthValues[index] = !!v;\n            iterCb(err);\n        });\n    }, err => {\n        if (err) return callback(err);\n        var results = [];\n        for (var i = 0; i < arr.length; i++) {\n            if (truthValues[i]) results.push(arr[i]);\n        }\n        callback(null, results);\n    });\n}\n\nfunction filterGeneric(eachfn, coll, iteratee, callback) {\n    var results = [];\n    eachfn(coll, (x, index, iterCb) => {\n        iteratee(x, (err, v) => {\n            if (err) return iterCb(err);\n            if (v) {\n                results.push({index, value: x});\n            }\n            iterCb(err);\n        });\n    }, err => {\n        if (err) return callback(err);\n        callback(null, results\n            .sort((a, b) => a.index - b.index)\n            .map(v => v.value));\n    });\n}\n\nfunction _filter(eachfn, coll, iteratee, callback) {\n    var filter = isArrayLike(coll) ? filterArray : filterGeneric;\n    return filter(eachfn, coll, wrapAsync(iteratee), callback);\n}\n\n/**\n * Returns a new array of all the values in `coll` which pass an async truth\n * test. This operation is performed in parallel, but the results array will be\n * in the same order as the original.\n *\n * @name filter\n * @static\n * @memberOf module:Collections\n * @method\n * @alias select\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n * with a boolean argument once it has completed. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback provided\n * @example\n *\n * // dir1 is a directory that contains file1.txt, file2.txt\n * // dir2 is a directory that contains file3.txt, file4.txt\n * // dir3 is a directory that contains file5.txt\n *\n * const files = ['dir1/file1.txt','dir2/file3.txt','dir3/file6.txt'];\n *\n * // asynchronous function that checks if a file exists\n * function fileExists(file, callback) {\n *    fs.access(file, fs.constants.F_OK, (err) => {\n *        callback(null, !err);\n *    });\n * }\n *\n * // Using callbacks\n * async.filter(files, fileExists, function(err, results) {\n *    if(err) {\n *        console.log(err);\n *    } else {\n *        console.log(results);\n *        // [ 'dir1/file1.txt', 'dir2/file3.txt' ]\n *        // results is now an array of the existing files\n *    }\n * });\n *\n * // Using Promises\n * async.filter(files, fileExists)\n * .then(results => {\n *     console.log(results);\n *     // [ 'dir1/file1.txt', 'dir2/file3.txt' ]\n *     // results is now an array of the existing files\n * }).catch(err => {\n *     console.log(err);\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let results = await async.filter(files, fileExists);\n *         console.log(results);\n *         // [ 'dir1/file1.txt', 'dir2/file3.txt' ]\n *         // results is now an array of the existing files\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n */\nfunction filter (coll, iteratee, callback) {\n    return _filter(eachOf$1, coll, iteratee, callback)\n}\nvar filter$1 = awaitify(filter, 3);\n\n/**\n * The same as [`filter`]{@link module:Collections.filter} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name filterLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.filter]{@link module:Collections.filter}\n * @alias selectLimit\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n * with a boolean argument once it has completed. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback provided\n */\nfunction filterLimit (coll, limit, iteratee, callback) {\n    return _filter(eachOfLimit(limit), coll, iteratee, callback)\n}\nvar filterLimit$1 = awaitify(filterLimit, 4);\n\n/**\n * The same as [`filter`]{@link module:Collections.filter} but runs only a single async operation at a time.\n *\n * @name filterSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.filter]{@link module:Collections.filter}\n * @alias selectSeries\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n * with a boolean argument once it has completed. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results)\n * @returns {Promise} a promise, if no callback provided\n */\nfunction filterSeries (coll, iteratee, callback) {\n    return _filter(eachOfSeries$1, coll, iteratee, callback)\n}\nvar filterSeries$1 = awaitify(filterSeries, 3);\n\n/**\n * Calls the asynchronous function `fn` with a callback parameter that allows it\n * to call itself again, in series, indefinitely.\n\n * If an error is passed to the callback then `errback` is called with the\n * error, and execution stops, otherwise it will never be called.\n *\n * @name forever\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {AsyncFunction} fn - an async function to call repeatedly.\n * Invoked with (next).\n * @param {Function} [errback] - when `fn` passes an error to it's callback,\n * this function will be called, and execution stops. Invoked with (err).\n * @returns {Promise} a promise that rejects if an error occurs and an errback\n * is not passed\n * @example\n *\n * async.forever(\n *     function(next) {\n *         // next is suitable for passing to things that need a callback(err [, whatever]);\n *         // it will result in this function being called again.\n *     },\n *     function(err) {\n *         // if next is called with a value in its first parameter, it will appear\n *         // in here as 'err', and execution will stop.\n *     }\n * );\n */\nfunction forever(fn, errback) {\n    var done = onlyOnce(errback);\n    var task = wrapAsync(ensureAsync(fn));\n\n    function next(err) {\n        if (err) return done(err);\n        if (err === false) return;\n        task(next);\n    }\n    return next();\n}\nvar forever$1 = awaitify(forever, 2);\n\n/**\n * The same as [`groupBy`]{@link module:Collections.groupBy} but runs a maximum of `limit` async operations at a time.\n *\n * @name groupByLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.groupBy]{@link module:Collections.groupBy}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with a `key` to group the value under.\n * Invoked with (value, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Result is an `Object` whoses\n * properties are arrays of values which returned the corresponding key.\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction groupByLimit(coll, limit, iteratee, callback) {\n    var _iteratee = wrapAsync(iteratee);\n    return mapLimit$1(coll, limit, (val, iterCb) => {\n        _iteratee(val, (err, key) => {\n            if (err) return iterCb(err);\n            return iterCb(err, {key, val});\n        });\n    }, (err, mapResults) => {\n        var result = {};\n        // from MDN, handle object having an `hasOwnProperty` prop\n        var {hasOwnProperty} = Object.prototype;\n\n        for (var i = 0; i < mapResults.length; i++) {\n            if (mapResults[i]) {\n                var {key} = mapResults[i];\n                var {val} = mapResults[i];\n\n                if (hasOwnProperty.call(result, key)) {\n                    result[key].push(val);\n                } else {\n                    result[key] = [val];\n                }\n            }\n        }\n\n        return callback(err, result);\n    });\n}\n\nvar groupByLimit$1 = awaitify(groupByLimit, 4);\n\n/**\n * Returns a new object, where each value corresponds to an array of items, from\n * `coll`, that returned the corresponding key. That is, the keys of the object\n * correspond to the values passed to the `iteratee` callback.\n *\n * Note: Since this function applies the `iteratee` to each item in parallel,\n * there is no guarantee that the `iteratee` functions will complete in order.\n * However, the values for each key in the `result` will be in the same order as\n * the original `coll`. For Objects, the values will roughly be in the order of\n * the original Objects' keys (but this can vary across JavaScript engines).\n *\n * @name groupBy\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with a `key` to group the value under.\n * Invoked with (value, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Result is an `Object` whoses\n * properties are arrays of values which returned the corresponding key.\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * // dir1 is a directory that contains file1.txt, file2.txt\n * // dir2 is a directory that contains file3.txt, file4.txt\n * // dir3 is a directory that contains file5.txt\n * // dir4 does not exist\n *\n * const files = ['dir1/file1.txt','dir2','dir4']\n *\n * // asynchronous function that detects file type as none, file, or directory\n * function detectFile(file, callback) {\n *     fs.stat(file, function(err, stat) {\n *         if (err) {\n *             return callback(null, 'none');\n *         }\n *         callback(null, stat.isDirectory() ? 'directory' : 'file');\n *     });\n * }\n *\n * //Using callbacks\n * async.groupBy(files, detectFile, function(err, result) {\n *     if(err) {\n *         console.log(err);\n *     } else {\n *\t       console.log(result);\n *         // {\n *         //     file: [ 'dir1/file1.txt' ],\n *         //     none: [ 'dir4' ],\n *         //     directory: [ 'dir2']\n *         // }\n *         // result is object containing the files grouped by type\n *     }\n * });\n *\n * // Using Promises\n * async.groupBy(files, detectFile)\n * .then( result => {\n *     console.log(result);\n *     // {\n *     //     file: [ 'dir1/file1.txt' ],\n *     //     none: [ 'dir4' ],\n *     //     directory: [ 'dir2']\n *     // }\n *     // result is object containing the files grouped by type\n * }).catch( err => {\n *     console.log(err);\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let result = await async.groupBy(files, detectFile);\n *         console.log(result);\n *         // {\n *         //     file: [ 'dir1/file1.txt' ],\n *         //     none: [ 'dir4' ],\n *         //     directory: [ 'dir2']\n *         // }\n *         // result is object containing the files grouped by type\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n */\nfunction groupBy (coll, iteratee, callback) {\n    return groupByLimit$1(coll, Infinity, iteratee, callback)\n}\n\n/**\n * The same as [`groupBy`]{@link module:Collections.groupBy} but runs only a single async operation at a time.\n *\n * @name groupBySeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.groupBy]{@link module:Collections.groupBy}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with a `key` to group the value under.\n * Invoked with (value, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Result is an `Object` whose\n * properties are arrays of values which returned the corresponding key.\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction groupBySeries (coll, iteratee, callback) {\n    return groupByLimit$1(coll, 1, iteratee, callback)\n}\n\n/**\n * Logs the result of an `async` function to the `console`. Only works in\n * Node.js or in browsers that support `console.log` and `console.error` (such\n * as FF and Chrome). If multiple arguments are returned from the async\n * function, `console.log` is called on each argument in order.\n *\n * @name log\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} function - The function you want to eventually apply\n * all arguments to.\n * @param {...*} arguments... - Any number of arguments to apply to the function.\n * @example\n *\n * // in a module\n * var hello = function(name, callback) {\n *     setTimeout(function() {\n *         callback(null, 'hello ' + name);\n *     }, 1000);\n * };\n *\n * // in the node repl\n * node> async.log(hello, 'world');\n * 'hello world'\n */\nvar log = consoleFunc('log');\n\n/**\n * The same as [`mapValues`]{@link module:Collections.mapValues} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name mapValuesLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.mapValues]{@link module:Collections.mapValues}\n * @category Collection\n * @param {Object} obj - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - A function to apply to each value and key\n * in `coll`.\n * The iteratee should complete with the transformed value as its result.\n * Invoked with (value, key, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. `result` is a new object consisting\n * of each key from `obj`, with each transformed value on the right-hand side.\n * Invoked with (err, result).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction mapValuesLimit(obj, limit, iteratee, callback) {\n    callback = once(callback);\n    var newObj = {};\n    var _iteratee = wrapAsync(iteratee);\n    return eachOfLimit(limit)(obj, (val, key, next) => {\n        _iteratee(val, key, (err, result) => {\n            if (err) return next(err);\n            newObj[key] = result;\n            next(err);\n        });\n    }, err => callback(err, newObj));\n}\n\nvar mapValuesLimit$1 = awaitify(mapValuesLimit, 4);\n\n/**\n * A relative of [`map`]{@link module:Collections.map}, designed for use with objects.\n *\n * Produces a new Object by mapping each value of `obj` through the `iteratee`\n * function. The `iteratee` is called each `value` and `key` from `obj` and a\n * callback for when it has finished processing. Each of these callbacks takes\n * two arguments: an `error`, and the transformed item from `obj`. If `iteratee`\n * passes an error to its callback, the main `callback` (for the `mapValues`\n * function) is immediately called with the error.\n *\n * Note, the order of the keys in the result is not guaranteed.  The keys will\n * be roughly in the order they complete, (but this is very engine-specific)\n *\n * @name mapValues\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Object} obj - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each value and key\n * in `coll`.\n * The iteratee should complete with the transformed value as its result.\n * Invoked with (value, key, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. `result` is a new object consisting\n * of each key from `obj`, with each transformed value on the right-hand side.\n * Invoked with (err, result).\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * // file1.txt is a file that is 1000 bytes in size\n * // file2.txt is a file that is 2000 bytes in size\n * // file3.txt is a file that is 3000 bytes in size\n * // file4.txt does not exist\n *\n * const fileMap = {\n *     f1: 'file1.txt',\n *     f2: 'file2.txt',\n *     f3: 'file3.txt'\n * };\n *\n * const withMissingFileMap = {\n *     f1: 'file1.txt',\n *     f2: 'file2.txt',\n *     f3: 'file4.txt'\n * };\n *\n * // asynchronous function that returns the file size in bytes\n * function getFileSizeInBytes(file, key, callback) {\n *     fs.stat(file, function(err, stat) {\n *         if (err) {\n *             return callback(err);\n *         }\n *         callback(null, stat.size);\n *     });\n * }\n *\n * // Using callbacks\n * async.mapValues(fileMap, getFileSizeInBytes, function(err, result) {\n *     if (err) {\n *         console.log(err);\n *     } else {\n *         console.log(result);\n *         // result is now a map of file size in bytes for each file, e.g.\n *         // {\n *         //     f1: 1000,\n *         //     f2: 2000,\n *         //     f3: 3000\n *         // }\n *     }\n * });\n *\n * // Error handling\n * async.mapValues(withMissingFileMap, getFileSizeInBytes, function(err, result) {\n *     if (err) {\n *         console.log(err);\n *         // [ Error: ENOENT: no such file or directory ]\n *     } else {\n *         console.log(result);\n *     }\n * });\n *\n * // Using Promises\n * async.mapValues(fileMap, getFileSizeInBytes)\n * .then( result => {\n *     console.log(result);\n *     // result is now a map of file size in bytes for each file, e.g.\n *     // {\n *     //     f1: 1000,\n *     //     f2: 2000,\n *     //     f3: 3000\n *     // }\n * }).catch (err => {\n *     console.log(err);\n * });\n *\n * // Error Handling\n * async.mapValues(withMissingFileMap, getFileSizeInBytes)\n * .then( result => {\n *     console.log(result);\n * }).catch (err => {\n *     console.log(err);\n *     // [ Error: ENOENT: no such file or directory ]\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let result = await async.mapValues(fileMap, getFileSizeInBytes);\n *         console.log(result);\n *         // result is now a map of file size in bytes for each file, e.g.\n *         // {\n *         //     f1: 1000,\n *         //     f2: 2000,\n *         //     f3: 3000\n *         // }\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n * // Error Handling\n * async () => {\n *     try {\n *         let result = await async.mapValues(withMissingFileMap, getFileSizeInBytes);\n *         console.log(result);\n *     }\n *     catch (err) {\n *         console.log(err);\n *         // [ Error: ENOENT: no such file or directory ]\n *     }\n * }\n *\n */\nfunction mapValues(obj, iteratee, callback) {\n    return mapValuesLimit$1(obj, Infinity, iteratee, callback)\n}\n\n/**\n * The same as [`mapValues`]{@link module:Collections.mapValues} but runs only a single async operation at a time.\n *\n * @name mapValuesSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.mapValues]{@link module:Collections.mapValues}\n * @category Collection\n * @param {Object} obj - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each value and key\n * in `coll`.\n * The iteratee should complete with the transformed value as its result.\n * Invoked with (value, key, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. `result` is a new object consisting\n * of each key from `obj`, with each transformed value on the right-hand side.\n * Invoked with (err, result).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction mapValuesSeries(obj, iteratee, callback) {\n    return mapValuesLimit$1(obj, 1, iteratee, callback)\n}\n\n/**\n * Caches the results of an async function. When creating a hash to store\n * function results against, the callback is omitted from the hash and an\n * optional hash function can be used.\n *\n * **Note: if the async function errs, the result will not be cached and\n * subsequent calls will call the wrapped function.**\n *\n * If no hash function is specified, the first argument is used as a hash key,\n * which may work reasonably if it is a string or a data type that converts to a\n * distinct string. Note that objects and arrays will not behave reasonably.\n * Neither will cases where the other arguments are significant. In such cases,\n * specify your own hash function.\n *\n * The cache of results is exposed as the `memo` property of the function\n * returned by `memoize`.\n *\n * @name memoize\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} fn - The async function to proxy and cache results from.\n * @param {Function} hasher - An optional function for generating a custom hash\n * for storing results. It has all the arguments applied to it apart from the\n * callback, and must be synchronous.\n * @returns {AsyncFunction} a memoized version of `fn`\n * @example\n *\n * var slow_fn = function(name, callback) {\n *     // do something\n *     callback(null, result);\n * };\n * var fn = async.memoize(slow_fn);\n *\n * // fn can now be used as if it were slow_fn\n * fn('some name', function() {\n *     // callback\n * });\n */\nfunction memoize(fn, hasher = v => v) {\n    var memo = Object.create(null);\n    var queues = Object.create(null);\n    var _fn = wrapAsync(fn);\n    var memoized = initialParams((args, callback) => {\n        var key = hasher(...args);\n        if (key in memo) {\n            setImmediate$1(() => callback(null, ...memo[key]));\n        } else if (key in queues) {\n            queues[key].push(callback);\n        } else {\n            queues[key] = [callback];\n            _fn(...args, (err, ...resultArgs) => {\n                // #1465 don't memoize if an error occurred\n                if (!err) {\n                    memo[key] = resultArgs;\n                }\n                var q = queues[key];\n                delete queues[key];\n                for (var i = 0, l = q.length; i < l; i++) {\n                    q[i](err, ...resultArgs);\n                }\n            });\n        }\n    });\n    memoized.memo = memo;\n    memoized.unmemoized = fn;\n    return memoized;\n}\n\n/* istanbul ignore file */\n\n/**\n * Calls `callback` on a later loop around the event loop. In Node.js this just\n * calls `process.nextTick`.  In the browser it will use `setImmediate` if\n * available, otherwise `setTimeout(callback, 0)`, which means other higher\n * priority events may precede the execution of `callback`.\n *\n * This is used internally for browser-compatibility purposes.\n *\n * @name nextTick\n * @static\n * @memberOf module:Utils\n * @method\n * @see [async.setImmediate]{@link module:Utils.setImmediate}\n * @category Util\n * @param {Function} callback - The function to call on a later loop around\n * the event loop. Invoked with (args...).\n * @param {...*} args... - any number of additional arguments to pass to the\n * callback on the next tick.\n * @example\n *\n * var call_order = [];\n * async.nextTick(function() {\n *     call_order.push('two');\n *     // call_order now equals ['one','two']\n * });\n * call_order.push('one');\n *\n * async.setImmediate(function (a, b, c) {\n *     // a, b, and c equal 1, 2, and 3\n * }, 1, 2, 3);\n */\nvar _defer$1;\n\nif (hasNextTick) {\n    _defer$1 = process.nextTick;\n} else if (hasSetImmediate) {\n    _defer$1 = setImmediate;\n} else {\n    _defer$1 = fallback;\n}\n\nvar nextTick = wrap(_defer$1);\n\nvar _parallel = awaitify((eachfn, tasks, callback) => {\n    var results = isArrayLike(tasks) ? [] : {};\n\n    eachfn(tasks, (task, key, taskCb) => {\n        wrapAsync(task)((err, ...result) => {\n            if (result.length < 2) {\n                [result] = result;\n            }\n            results[key] = result;\n            taskCb(err);\n        });\n    }, err => callback(err, results));\n}, 3);\n\n/**\n * Run the `tasks` collection of functions in parallel, without waiting until\n * the previous function has completed. If any of the functions pass an error to\n * its callback, the main `callback` is immediately called with the value of the\n * error. Once the `tasks` have completed, the results are passed to the final\n * `callback` as an array.\n *\n * **Note:** `parallel` is about kicking-off I/O tasks in parallel, not about\n * parallel execution of code.  If your tasks do not use any timers or perform\n * any I/O, they will actually be executed in series.  Any synchronous setup\n * sections for each task will happen one after the other.  JavaScript remains\n * single-threaded.\n *\n * **Hint:** Use [`reflect`]{@link module:Utils.reflect} to continue the\n * execution of other tasks when a task fails.\n *\n * It is also possible to use an object instead of an array. Each property will\n * be run as a function and the results will be passed to the final `callback`\n * as an object instead of an array. This can be a more readable way of handling\n * results from {@link async.parallel}.\n *\n * @name parallel\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection of\n * [async functions]{@link AsyncFunction} to run.\n * Each async function can complete with any number of optional `result` values.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed successfully. This function gets a results array\n * (or object) containing all the result arguments passed to the task callbacks.\n * Invoked with (err, results).\n * @returns {Promise} a promise, if a callback is not passed\n *\n * @example\n *\n * //Using Callbacks\n * async.parallel([\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ], function(err, results) {\n *     console.log(results);\n *     // results is equal to ['one','two'] even though\n *     // the second function had a shorter timeout.\n * });\n *\n * // an example using an object instead of an array\n * async.parallel({\n *     one: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 1);\n *         }, 200);\n *     },\n *     two: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 2);\n *         }, 100);\n *     }\n * }, function(err, results) {\n *     console.log(results);\n *     // results is equal to: { one: 1, two: 2 }\n * });\n *\n * //Using Promises\n * async.parallel([\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ]).then(results => {\n *     console.log(results);\n *     // results is equal to ['one','two'] even though\n *     // the second function had a shorter timeout.\n * }).catch(err => {\n *     console.log(err);\n * });\n *\n * // an example using an object instead of an array\n * async.parallel({\n *     one: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 1);\n *         }, 200);\n *     },\n *     two: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 2);\n *         }, 100);\n *     }\n * }).then(results => {\n *     console.log(results);\n *     // results is equal to: { one: 1, two: 2 }\n * }).catch(err => {\n *     console.log(err);\n * });\n *\n * //Using async/await\n * async () => {\n *     try {\n *         let results = await async.parallel([\n *             function(callback) {\n *                 setTimeout(function() {\n *                     callback(null, 'one');\n *                 }, 200);\n *             },\n *             function(callback) {\n *                 setTimeout(function() {\n *                     callback(null, 'two');\n *                 }, 100);\n *             }\n *         ]);\n *         console.log(results);\n *         // results is equal to ['one','two'] even though\n *         // the second function had a shorter timeout.\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n * // an example using an object instead of an array\n * async () => {\n *     try {\n *         let results = await async.parallel({\n *             one: function(callback) {\n *                 setTimeout(function() {\n *                     callback(null, 1);\n *                 }, 200);\n *             },\n *            two: function(callback) {\n *                 setTimeout(function() {\n *                     callback(null, 2);\n *                 }, 100);\n *            }\n *         });\n *         console.log(results);\n *         // results is equal to: { one: 1, two: 2 }\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n */\nfunction parallel(tasks, callback) {\n    return _parallel(eachOf$1, tasks, callback);\n}\n\n/**\n * The same as [`parallel`]{@link module:ControlFlow.parallel} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name parallelLimit\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.parallel]{@link module:ControlFlow.parallel}\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection of\n * [async functions]{@link AsyncFunction} to run.\n * Each async function can complete with any number of optional `result` values.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed successfully. This function gets a results array\n * (or object) containing all the result arguments passed to the task callbacks.\n * Invoked with (err, results).\n * @returns {Promise} a promise, if a callback is not passed\n */\nfunction parallelLimit(tasks, limit, callback) {\n    return _parallel(eachOfLimit(limit), tasks, callback);\n}\n\n/**\n * A queue of tasks for the worker function to complete.\n * @typedef {Iterable} QueueObject\n * @memberOf module:ControlFlow\n * @property {Function} length - a function returning the number of items\n * waiting to be processed. Invoke with `queue.length()`.\n * @property {boolean} started - a boolean indicating whether or not any\n * items have been pushed and processed by the queue.\n * @property {Function} running - a function returning the number of items\n * currently being processed. Invoke with `queue.running()`.\n * @property {Function} workersList - a function returning the array of items\n * currently being processed. Invoke with `queue.workersList()`.\n * @property {Function} idle - a function returning false if there are items\n * waiting or being processed, or true if not. Invoke with `queue.idle()`.\n * @property {number} concurrency - an integer for determining how many `worker`\n * functions should be run in parallel. This property can be changed after a\n * `queue` is created to alter the concurrency on-the-fly.\n * @property {number} payload - an integer that specifies how many items are\n * passed to the worker function at a time. only applies if this is a\n * [cargo]{@link module:ControlFlow.cargo} object\n * @property {AsyncFunction} push - add a new task to the `queue`. Calls `callback`\n * once the `worker` has finished processing the task. Instead of a single task,\n * a `tasks` array can be submitted. The respective callback is used for every\n * task in the list. Invoke with `queue.push(task, [callback])`,\n * @property {AsyncFunction} unshift - add a new task to the front of the `queue`.\n * Invoke with `queue.unshift(task, [callback])`.\n * @property {AsyncFunction} pushAsync - the same as `q.push`, except this returns\n * a promise that rejects if an error occurs.\n * @property {AsyncFunction} unshiftAsync - the same as `q.unshift`, except this returns\n * a promise that rejects if an error occurs.\n * @property {Function} remove - remove items from the queue that match a test\n * function.  The test function will be passed an object with a `data` property,\n * and a `priority` property, if this is a\n * [priorityQueue]{@link module:ControlFlow.priorityQueue} object.\n * Invoked with `queue.remove(testFn)`, where `testFn` is of the form\n * `function ({data, priority}) {}` and returns a Boolean.\n * @property {Function} saturated - a function that sets a callback that is\n * called when the number of running workers hits the `concurrency` limit, and\n * further tasks will be queued.  If the callback is omitted, `q.saturated()`\n * returns a promise for the next occurrence.\n * @property {Function} unsaturated - a function that sets a callback that is\n * called when the number of running workers is less than the `concurrency` &\n * `buffer` limits, and further tasks will not be queued. If the callback is\n * omitted, `q.unsaturated()` returns a promise for the next occurrence.\n * @property {number} buffer - A minimum threshold buffer in order to say that\n * the `queue` is `unsaturated`.\n * @property {Function} empty - a function that sets a callback that is called\n * when the last item from the `queue` is given to a `worker`. If the callback\n * is omitted, `q.empty()` returns a promise for the next occurrence.\n * @property {Function} drain - a function that sets a callback that is called\n * when the last item from the `queue` has returned from the `worker`. If the\n * callback is omitted, `q.drain()` returns a promise for the next occurrence.\n * @property {Function} error - a function that sets a callback that is called\n * when a task errors. Has the signature `function(error, task)`. If the\n * callback is omitted, `error()` returns a promise that rejects on the next\n * error.\n * @property {boolean} paused - a boolean for determining whether the queue is\n * in a paused state.\n * @property {Function} pause - a function that pauses the processing of tasks\n * until `resume()` is called. Invoke with `queue.pause()`.\n * @property {Function} resume - a function that resumes the processing of\n * queued tasks when the queue is paused. Invoke with `queue.resume()`.\n * @property {Function} kill - a function that removes the `drain` callback and\n * empties remaining tasks from the queue forcing it to go idle. No more tasks\n * should be pushed to the queue after calling this function. Invoke with `queue.kill()`.\n *\n * @example\n * const q = async.queue(worker, 2)\n * q.push(item1)\n * q.push(item2)\n * q.push(item3)\n * // queues are iterable, spread into an array to inspect\n * const items = [...q] // [item1, item2, item3]\n * // or use for of\n * for (let item of q) {\n *     console.log(item)\n * }\n *\n * q.drain(() => {\n *     console.log('all done')\n * })\n * // or\n * await q.drain()\n */\n\n/**\n * Creates a `queue` object with the specified `concurrency`. Tasks added to the\n * `queue` are processed in parallel (up to the `concurrency` limit). If all\n * `worker`s are in progress, the task is queued until one becomes available.\n * Once a `worker` completes a `task`, that `task`'s callback is called.\n *\n * @name queue\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {AsyncFunction} worker - An async function for processing a queued task.\n * If you want to handle errors from an individual task, pass a callback to\n * `q.push()`. Invoked with (task, callback).\n * @param {number} [concurrency=1] - An `integer` for determining how many\n * `worker` functions should be run in parallel.  If omitted, the concurrency\n * defaults to `1`.  If the concurrency is `0`, an error is thrown.\n * @returns {module:ControlFlow.QueueObject} A queue object to manage the tasks. Callbacks can be\n * attached as certain properties to listen for specific events during the\n * lifecycle of the queue.\n * @example\n *\n * // create a queue object with concurrency 2\n * var q = async.queue(function(task, callback) {\n *     console.log('hello ' + task.name);\n *     callback();\n * }, 2);\n *\n * // assign a callback\n * q.drain(function() {\n *     console.log('all items have been processed');\n * });\n * // or await the end\n * await q.drain()\n *\n * // assign an error callback\n * q.error(function(err, task) {\n *     console.error('task experienced an error');\n * });\n *\n * // add some items to the queue\n * q.push({name: 'foo'}, function(err) {\n *     console.log('finished processing foo');\n * });\n * // callback is optional\n * q.push({name: 'bar'});\n *\n * // add some items to the queue (batch-wise)\n * q.push([{name: 'baz'},{name: 'bay'},{name: 'bax'}], function(err) {\n *     console.log('finished processing item');\n * });\n *\n * // add some items to the front of the queue\n * q.unshift({name: 'bar'}, function (err) {\n *     console.log('finished processing bar');\n * });\n */\nfunction queue$1 (worker, concurrency) {\n    var _worker = wrapAsync(worker);\n    return queue((items, cb) => {\n        _worker(items[0], cb);\n    }, concurrency, 1);\n}\n\n// Binary min-heap implementation used for priority queue.\n// Implementation is stable, i.e. push time is considered for equal priorities\nclass Heap {\n    constructor() {\n        this.heap = [];\n        this.pushCount = Number.MIN_SAFE_INTEGER;\n    }\n\n    get length() {\n        return this.heap.length;\n    }\n\n    empty () {\n        this.heap = [];\n        return this;\n    }\n\n    percUp(index) {\n        let p;\n\n        while (index > 0 && smaller(this.heap[index], this.heap[p=parent(index)])) {\n            let t = this.heap[index];\n            this.heap[index] = this.heap[p];\n            this.heap[p] = t;\n\n            index = p;\n        }\n    }\n\n    percDown(index) {\n        let l;\n\n        while ((l=leftChi(index)) < this.heap.length) {\n            if (l+1 < this.heap.length && smaller(this.heap[l+1], this.heap[l])) {\n                l = l+1;\n            }\n\n            if (smaller(this.heap[index], this.heap[l])) {\n                break;\n            }\n\n            let t = this.heap[index];\n            this.heap[index] = this.heap[l];\n            this.heap[l] = t;\n\n            index = l;\n        }\n    }\n\n    push(node) {\n        node.pushCount = ++this.pushCount;\n        this.heap.push(node);\n        this.percUp(this.heap.length-1);\n    }\n\n    unshift(node) {\n        return this.heap.push(node);\n    }\n\n    shift() {\n        let [top] = this.heap;\n\n        this.heap[0] = this.heap[this.heap.length-1];\n        this.heap.pop();\n        this.percDown(0);\n\n        return top;\n    }\n\n    toArray() {\n        return [...this];\n    }\n\n    *[Symbol.iterator] () {\n        for (let i = 0; i < this.heap.length; i++) {\n            yield this.heap[i].data;\n        }\n    }\n\n    remove (testFn) {\n        let j = 0;\n        for (let i = 0; i < this.heap.length; i++) {\n            if (!testFn(this.heap[i])) {\n                this.heap[j] = this.heap[i];\n                j++;\n            }\n        }\n\n        this.heap.splice(j);\n\n        for (let i = parent(this.heap.length-1); i >= 0; i--) {\n            this.percDown(i);\n        }\n\n        return this;\n    }\n}\n\nfunction leftChi(i) {\n    return (i<<1)+1;\n}\n\nfunction parent(i) {\n    return ((i+1)>>1)-1;\n}\n\nfunction smaller(x, y) {\n    if (x.priority !== y.priority) {\n        return x.priority < y.priority;\n    }\n    else {\n        return x.pushCount < y.pushCount;\n    }\n}\n\n/**\n * The same as [async.queue]{@link module:ControlFlow.queue} only tasks are assigned a priority and\n * completed in ascending priority order.\n *\n * @name priorityQueue\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.queue]{@link module:ControlFlow.queue}\n * @category Control Flow\n * @param {AsyncFunction} worker - An async function for processing a queued task.\n * If you want to handle errors from an individual task, pass a callback to\n * `q.push()`.\n * Invoked with (task, callback).\n * @param {number} concurrency - An `integer` for determining how many `worker`\n * functions should be run in parallel.  If omitted, the concurrency defaults to\n * `1`.  If the concurrency is `0`, an error is thrown.\n * @returns {module:ControlFlow.QueueObject} A priorityQueue object to manage the tasks. There are two\n * differences between `queue` and `priorityQueue` objects:\n * * `push(task, priority, [callback])` - `priority` should be a number. If an\n *   array of `tasks` is given, all tasks will be assigned the same priority.\n * * The `unshift` method was removed.\n */\nfunction priorityQueue(worker, concurrency) {\n    // Start with a normal queue\n    var q = queue$1(worker, concurrency);\n    var processingScheduled = false;\n\n    q._tasks = new Heap();\n\n    // Override push to accept second parameter representing priority\n    q.push = function(data, priority = 0, callback = () => {}) {\n        if (typeof callback !== 'function') {\n            throw new Error('task callback must be a function');\n        }\n        q.started = true;\n        if (!Array.isArray(data)) {\n            data = [data];\n        }\n        if (data.length === 0 && q.idle()) {\n            // call drain immediately if there are no tasks\n            return setImmediate$1(() => q.drain());\n        }\n\n        for (var i = 0, l = data.length; i < l; i++) {\n            var item = {\n                data: data[i],\n                priority,\n                callback\n            };\n\n            q._tasks.push(item);\n        }\n\n        if (!processingScheduled) {\n            processingScheduled = true;\n            setImmediate$1(() => {\n                processingScheduled = false;\n                q.process();\n            });\n        }\n    };\n\n    // Remove unshift function\n    delete q.unshift;\n\n    return q;\n}\n\n/**\n * Runs the `tasks` array of functions in parallel, without waiting until the\n * previous function has completed. Once any of the `tasks` complete or pass an\n * error to its callback, the main `callback` is immediately called. It's\n * equivalent to `Promise.race()`.\n *\n * @name race\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array} tasks - An array containing [async functions]{@link AsyncFunction}\n * to run. Each function can complete with an optional `result` value.\n * @param {Function} callback - A callback to run once any of the functions have\n * completed. This function gets an error or result from the first function that\n * completed. Invoked with (err, result).\n * @returns undefined\n * @example\n *\n * async.race([\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ],\n * // main callback\n * function(err, result) {\n *     // the result will be equal to 'two' as it finishes earlier\n * });\n */\nfunction race(tasks, callback) {\n    callback = once(callback);\n    if (!Array.isArray(tasks)) return callback(new TypeError('First argument to race must be an array of functions'));\n    if (!tasks.length) return callback();\n    for (var i = 0, l = tasks.length; i < l; i++) {\n        wrapAsync(tasks[i])(callback);\n    }\n}\n\nvar race$1 = awaitify(race, 2);\n\n/**\n * Same as [`reduce`]{@link module:Collections.reduce}, only operates on `array` in reverse order.\n *\n * @name reduceRight\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.reduce]{@link module:Collections.reduce}\n * @alias foldr\n * @category Collection\n * @param {Array} array - A collection to iterate over.\n * @param {*} memo - The initial state of the reduction.\n * @param {AsyncFunction} iteratee - A function applied to each item in the\n * array to produce the next step in the reduction.\n * The `iteratee` should complete with the next state of the reduction.\n * If the iteratee completes with an error, the reduction is stopped and the\n * main `callback` is immediately called with the error.\n * Invoked with (memo, item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result is the reduced value. Invoked with\n * (err, result).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction reduceRight (array, memo, iteratee, callback) {\n    var reversed = [...array].reverse();\n    return reduce$1(reversed, memo, iteratee, callback);\n}\n\n/**\n * Wraps the async function in another function that always completes with a\n * result object, even when it errors.\n *\n * The result object has either the property `error` or `value`.\n *\n * @name reflect\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} fn - The async function you want to wrap\n * @returns {Function} - A function that always passes null to it's callback as\n * the error. The second argument to the callback will be an `object` with\n * either an `error` or a `value` property.\n * @example\n *\n * async.parallel([\n *     async.reflect(function(callback) {\n *         // do some stuff ...\n *         callback(null, 'one');\n *     }),\n *     async.reflect(function(callback) {\n *         // do some more stuff but error ...\n *         callback('bad stuff happened');\n *     }),\n *     async.reflect(function(callback) {\n *         // do some more stuff ...\n *         callback(null, 'two');\n *     })\n * ],\n * // optional callback\n * function(err, results) {\n *     // values\n *     // results[0].value = 'one'\n *     // results[1].error = 'bad stuff happened'\n *     // results[2].value = 'two'\n * });\n */\nfunction reflect(fn) {\n    var _fn = wrapAsync(fn);\n    return initialParams(function reflectOn(args, reflectCallback) {\n        args.push((error, ...cbArgs) => {\n            let retVal = {};\n            if (error) {\n                retVal.error = error;\n            }\n            if (cbArgs.length > 0){\n                var value = cbArgs;\n                if (cbArgs.length <= 1) {\n                    [value] = cbArgs;\n                }\n                retVal.value = value;\n            }\n            reflectCallback(null, retVal);\n        });\n\n        return _fn.apply(this, args);\n    });\n}\n\n/**\n * A helper function that wraps an array or an object of functions with `reflect`.\n *\n * @name reflectAll\n * @static\n * @memberOf module:Utils\n * @method\n * @see [async.reflect]{@link module:Utils.reflect}\n * @category Util\n * @param {Array|Object|Iterable} tasks - The collection of\n * [async functions]{@link AsyncFunction} to wrap in `async.reflect`.\n * @returns {Array} Returns an array of async functions, each wrapped in\n * `async.reflect`\n * @example\n *\n * let tasks = [\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         // do some more stuff but error ...\n *         callback(new Error('bad stuff happened'));\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ];\n *\n * async.parallel(async.reflectAll(tasks),\n * // optional callback\n * function(err, results) {\n *     // values\n *     // results[0].value = 'one'\n *     // results[1].error = Error('bad stuff happened')\n *     // results[2].value = 'two'\n * });\n *\n * // an example using an object instead of an array\n * let tasks = {\n *     one: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     two: function(callback) {\n *         callback('two');\n *     },\n *     three: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'three');\n *         }, 100);\n *     }\n * };\n *\n * async.parallel(async.reflectAll(tasks),\n * // optional callback\n * function(err, results) {\n *     // values\n *     // results.one.value = 'one'\n *     // results.two.error = 'two'\n *     // results.three.value = 'three'\n * });\n */\nfunction reflectAll(tasks) {\n    var results;\n    if (Array.isArray(tasks)) {\n        results = tasks.map(reflect);\n    } else {\n        results = {};\n        Object.keys(tasks).forEach(key => {\n            results[key] = reflect.call(this, tasks[key]);\n        });\n    }\n    return results;\n}\n\nfunction reject(eachfn, arr, _iteratee, callback) {\n    const iteratee = wrapAsync(_iteratee);\n    return _filter(eachfn, arr, (value, cb) => {\n        iteratee(value, (err, v) => {\n            cb(err, !v);\n        });\n    }, callback);\n}\n\n/**\n * The opposite of [`filter`]{@link module:Collections.filter}. Removes values that pass an `async` truth test.\n *\n * @name reject\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.filter]{@link module:Collections.filter}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - An async truth test to apply to each item in\n * `coll`.\n * The should complete with a boolean value as its `result`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * // dir1 is a directory that contains file1.txt, file2.txt\n * // dir2 is a directory that contains file3.txt, file4.txt\n * // dir3 is a directory that contains file5.txt\n *\n * const fileList = ['dir1/file1.txt','dir2/file3.txt','dir3/file6.txt'];\n *\n * // asynchronous function that checks if a file exists\n * function fileExists(file, callback) {\n *    fs.access(file, fs.constants.F_OK, (err) => {\n *        callback(null, !err);\n *    });\n * }\n *\n * // Using callbacks\n * async.reject(fileList, fileExists, function(err, results) {\n *    // [ 'dir3/file6.txt' ]\n *    // results now equals an array of the non-existing files\n * });\n *\n * // Using Promises\n * async.reject(fileList, fileExists)\n * .then( results => {\n *     console.log(results);\n *     // [ 'dir3/file6.txt' ]\n *     // results now equals an array of the non-existing files\n * }).catch( err => {\n *     console.log(err);\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let results = await async.reject(fileList, fileExists);\n *         console.log(results);\n *         // [ 'dir3/file6.txt' ]\n *         // results now equals an array of the non-existing files\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n */\nfunction reject$1 (coll, iteratee, callback) {\n    return reject(eachOf$1, coll, iteratee, callback)\n}\nvar reject$2 = awaitify(reject$1, 3);\n\n/**\n * The same as [`reject`]{@link module:Collections.reject} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name rejectLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.reject]{@link module:Collections.reject}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} iteratee - An async truth test to apply to each item in\n * `coll`.\n * The should complete with a boolean value as its `result`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction rejectLimit (coll, limit, iteratee, callback) {\n    return reject(eachOfLimit(limit), coll, iteratee, callback)\n}\nvar rejectLimit$1 = awaitify(rejectLimit, 4);\n\n/**\n * The same as [`reject`]{@link module:Collections.reject} but runs only a single async operation at a time.\n *\n * @name rejectSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.reject]{@link module:Collections.reject}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - An async truth test to apply to each item in\n * `coll`.\n * The should complete with a boolean value as its `result`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction rejectSeries (coll, iteratee, callback) {\n    return reject(eachOfSeries$1, coll, iteratee, callback)\n}\nvar rejectSeries$1 = awaitify(rejectSeries, 3);\n\nfunction constant$1(value) {\n    return function () {\n        return value;\n    }\n}\n\n/**\n * Attempts to get a successful response from `task` no more than `times` times\n * before returning an error. If the task is successful, the `callback` will be\n * passed the result of the successful task. If all attempts fail, the callback\n * will be passed the error and result (if any) of the final attempt.\n *\n * @name retry\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @see [async.retryable]{@link module:ControlFlow.retryable}\n * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - Can be either an\n * object with `times` and `interval` or a number.\n * * `times` - The number of attempts to make before giving up.  The default\n *   is `5`.\n * * `interval` - The time to wait between retries, in milliseconds.  The\n *   default is `0`. The interval may also be specified as a function of the\n *   retry count (see example).\n * * `errorFilter` - An optional synchronous function that is invoked on\n *   erroneous result. If it returns `true` the retry attempts will continue;\n *   if the function returns `false` the retry flow is aborted with the current\n *   attempt's error and result being returned to the final callback.\n *   Invoked with (err).\n * * If `opts` is a number, the number specifies the number of times to retry,\n *   with the default interval of `0`.\n * @param {AsyncFunction} task - An async function to retry.\n * Invoked with (callback).\n * @param {Function} [callback] - An optional callback which is called when the\n * task has succeeded, or after the final failed attempt. It receives the `err`\n * and `result` arguments of the last attempt at completing the `task`. Invoked\n * with (err, results).\n * @returns {Promise} a promise if no callback provided\n *\n * @example\n *\n * // The `retry` function can be used as a stand-alone control flow by passing\n * // a callback, as shown below:\n *\n * // try calling apiMethod 3 times\n * async.retry(3, apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // try calling apiMethod 3 times, waiting 200 ms between each retry\n * async.retry({times: 3, interval: 200}, apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // try calling apiMethod 10 times with exponential backoff\n * // (i.e. intervals of 100, 200, 400, 800, 1600, ... milliseconds)\n * async.retry({\n *   times: 10,\n *   interval: function(retryCount) {\n *     return 50 * Math.pow(2, retryCount);\n *   }\n * }, apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // try calling apiMethod the default 5 times no delay between each retry\n * async.retry(apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // try calling apiMethod only when error condition satisfies, all other\n * // errors will abort the retry control flow and return to final callback\n * async.retry({\n *   errorFilter: function(err) {\n *     return err.message === 'Temporary error'; // only retry on a specific error\n *   }\n * }, apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // to retry individual methods that are not as reliable within other\n * // control flow functions, use the `retryable` wrapper:\n * async.auto({\n *     users: api.getUsers.bind(api),\n *     payments: async.retryable(3, api.getPayments.bind(api))\n * }, function(err, results) {\n *     // do something with the results\n * });\n *\n */\nconst DEFAULT_TIMES = 5;\nconst DEFAULT_INTERVAL = 0;\n\nfunction retry(opts, task, callback) {\n    var options = {\n        times: DEFAULT_TIMES,\n        intervalFunc: constant$1(DEFAULT_INTERVAL)\n    };\n\n    if (arguments.length < 3 && typeof opts === 'function') {\n        callback = task || promiseCallback();\n        task = opts;\n    } else {\n        parseTimes(options, opts);\n        callback = callback || promiseCallback();\n    }\n\n    if (typeof task !== 'function') {\n        throw new Error(\"Invalid arguments for async.retry\");\n    }\n\n    var _task = wrapAsync(task);\n\n    var attempt = 1;\n    function retryAttempt() {\n        _task((err, ...args) => {\n            if (err === false) return\n            if (err && attempt++ < options.times &&\n                (typeof options.errorFilter != 'function' ||\n                    options.errorFilter(err))) {\n                setTimeout(retryAttempt, options.intervalFunc(attempt - 1));\n            } else {\n                callback(err, ...args);\n            }\n        });\n    }\n\n    retryAttempt();\n    return callback[PROMISE_SYMBOL]\n}\n\nfunction parseTimes(acc, t) {\n    if (typeof t === 'object') {\n        acc.times = +t.times || DEFAULT_TIMES;\n\n        acc.intervalFunc = typeof t.interval === 'function' ?\n            t.interval :\n            constant$1(+t.interval || DEFAULT_INTERVAL);\n\n        acc.errorFilter = t.errorFilter;\n    } else if (typeof t === 'number' || typeof t === 'string') {\n        acc.times = +t || DEFAULT_TIMES;\n    } else {\n        throw new Error(\"Invalid arguments for async.retry\");\n    }\n}\n\n/**\n * A close relative of [`retry`]{@link module:ControlFlow.retry}.  This method\n * wraps a task and makes it retryable, rather than immediately calling it\n * with retries.\n *\n * @name retryable\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.retry]{@link module:ControlFlow.retry}\n * @category Control Flow\n * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - optional\n * options, exactly the same as from `retry`, except for a `opts.arity` that\n * is the arity of the `task` function, defaulting to `task.length`\n * @param {AsyncFunction} task - the asynchronous function to wrap.\n * This function will be passed any arguments passed to the returned wrapper.\n * Invoked with (...args, callback).\n * @returns {AsyncFunction} The wrapped function, which when invoked, will\n * retry on an error, based on the parameters specified in `opts`.\n * This function will accept the same parameters as `task`.\n * @example\n *\n * async.auto({\n *     dep1: async.retryable(3, getFromFlakyService),\n *     process: [\"dep1\", async.retryable(3, function (results, cb) {\n *         maybeProcessData(results.dep1, cb);\n *     })]\n * }, callback);\n */\nfunction retryable (opts, task) {\n    if (!task) {\n        task = opts;\n        opts = null;\n    }\n    let arity = (opts && opts.arity) || task.length;\n    if (isAsync(task)) {\n        arity += 1;\n    }\n    var _task = wrapAsync(task);\n    return initialParams((args, callback) => {\n        if (args.length < arity - 1 || callback == null) {\n            args.push(callback);\n            callback = promiseCallback();\n        }\n        function taskFn(cb) {\n            _task(...args, cb);\n        }\n\n        if (opts) retry(opts, taskFn, callback);\n        else retry(taskFn, callback);\n\n        return callback[PROMISE_SYMBOL]\n    });\n}\n\n/**\n * Run the functions in the `tasks` collection in series, each one running once\n * the previous function has completed. If any functions in the series pass an\n * error to its callback, no more functions are run, and `callback` is\n * immediately called with the value of the error. Otherwise, `callback`\n * receives an array of results when `tasks` have completed.\n *\n * It is also possible to use an object instead of an array. Each property will\n * be run as a function, and the results will be passed to the final `callback`\n * as an object instead of an array. This can be a more readable way of handling\n *  results from {@link async.series}.\n *\n * **Note** that while many implementations preserve the order of object\n * properties, the [ECMAScript Language Specification](http://www.ecma-international.org/ecma-262/5.1/#sec-8.6)\n * explicitly states that\n *\n * > The mechanics and order of enumerating the properties is not specified.\n *\n * So if you rely on the order in which your series of functions are executed,\n * and want this to work on all platforms, consider using an array.\n *\n * @name series\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection containing\n * [async functions]{@link AsyncFunction} to run in series.\n * Each function can complete with any number of optional `result` values.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed. This function gets a results array (or object)\n * containing all the result arguments passed to the `task` callbacks. Invoked\n * with (err, result).\n * @return {Promise} a promise, if no callback is passed\n * @example\n *\n * //Using Callbacks\n * async.series([\n *     function(callback) {\n *         setTimeout(function() {\n *             // do some async task\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             // then do another async task\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ], function(err, results) {\n *     console.log(results);\n *     // results is equal to ['one','two']\n * });\n *\n * // an example using objects instead of arrays\n * async.series({\n *     one: function(callback) {\n *         setTimeout(function() {\n *             // do some async task\n *             callback(null, 1);\n *         }, 200);\n *     },\n *     two: function(callback) {\n *         setTimeout(function() {\n *             // then do another async task\n *             callback(null, 2);\n *         }, 100);\n *     }\n * }, function(err, results) {\n *     console.log(results);\n *     // results is equal to: { one: 1, two: 2 }\n * });\n *\n * //Using Promises\n * async.series([\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ]).then(results => {\n *     console.log(results);\n *     // results is equal to ['one','two']\n * }).catch(err => {\n *     console.log(err);\n * });\n *\n * // an example using an object instead of an array\n * async.series({\n *     one: function(callback) {\n *         setTimeout(function() {\n *             // do some async task\n *             callback(null, 1);\n *         }, 200);\n *     },\n *     two: function(callback) {\n *         setTimeout(function() {\n *             // then do another async task\n *             callback(null, 2);\n *         }, 100);\n *     }\n * }).then(results => {\n *     console.log(results);\n *     // results is equal to: { one: 1, two: 2 }\n * }).catch(err => {\n *     console.log(err);\n * });\n *\n * //Using async/await\n * async () => {\n *     try {\n *         let results = await async.series([\n *             function(callback) {\n *                 setTimeout(function() {\n *                     // do some async task\n *                     callback(null, 'one');\n *                 }, 200);\n *             },\n *             function(callback) {\n *                 setTimeout(function() {\n *                     // then do another async task\n *                     callback(null, 'two');\n *                 }, 100);\n *             }\n *         ]);\n *         console.log(results);\n *         // results is equal to ['one','two']\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n * // an example using an object instead of an array\n * async () => {\n *     try {\n *         let results = await async.parallel({\n *             one: function(callback) {\n *                 setTimeout(function() {\n *                     // do some async task\n *                     callback(null, 1);\n *                 }, 200);\n *             },\n *            two: function(callback) {\n *                 setTimeout(function() {\n *                     // then do another async task\n *                     callback(null, 2);\n *                 }, 100);\n *            }\n *         });\n *         console.log(results);\n *         // results is equal to: { one: 1, two: 2 }\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n */\nfunction series(tasks, callback) {\n    return _parallel(eachOfSeries$1, tasks, callback);\n}\n\n/**\n * Returns `true` if at least one element in the `coll` satisfies an async test.\n * If any iteratee call returns `true`, the main `callback` is immediately\n * called.\n *\n * @name some\n * @static\n * @memberOf module:Collections\n * @method\n * @alias any\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collections in parallel.\n * The iteratee should complete with a boolean `result` value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the iteratee functions have finished.\n * Result will be either `true` or `false` depending on the values of the async\n * tests. Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n * @example\n *\n * // dir1 is a directory that contains file1.txt, file2.txt\n * // dir2 is a directory that contains file3.txt, file4.txt\n * // dir3 is a directory that contains file5.txt\n * // dir4 does not exist\n *\n * // asynchronous function that checks if a file exists\n * function fileExists(file, callback) {\n *    fs.access(file, fs.constants.F_OK, (err) => {\n *        callback(null, !err);\n *    });\n * }\n *\n * // Using callbacks\n * async.some(['dir1/missing.txt','dir2/missing.txt','dir3/file5.txt'], fileExists,\n *    function(err, result) {\n *        console.log(result);\n *        // true\n *        // result is true since some file in the list exists\n *    }\n *);\n *\n * async.some(['dir1/missing.txt','dir2/missing.txt','dir4/missing.txt'], fileExists,\n *    function(err, result) {\n *        console.log(result);\n *        // false\n *        // result is false since none of the files exists\n *    }\n *);\n *\n * // Using Promises\n * async.some(['dir1/missing.txt','dir2/missing.txt','dir3/file5.txt'], fileExists)\n * .then( result => {\n *     console.log(result);\n *     // true\n *     // result is true since some file in the list exists\n * }).catch( err => {\n *     console.log(err);\n * });\n *\n * async.some(['dir1/missing.txt','dir2/missing.txt','dir4/missing.txt'], fileExists)\n * .then( result => {\n *     console.log(result);\n *     // false\n *     // result is false since none of the files exists\n * }).catch( err => {\n *     console.log(err);\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let result = await async.some(['dir1/missing.txt','dir2/missing.txt','dir3/file5.txt'], fileExists);\n *         console.log(result);\n *         // true\n *         // result is true since some file in the list exists\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n * async () => {\n *     try {\n *         let result = await async.some(['dir1/missing.txt','dir2/missing.txt','dir4/missing.txt'], fileExists);\n *         console.log(result);\n *         // false\n *         // result is false since none of the files exists\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n */\nfunction some(coll, iteratee, callback) {\n    return _createTester(Boolean, res => res)(eachOf$1, coll, iteratee, callback)\n}\nvar some$1 = awaitify(some, 3);\n\n/**\n * The same as [`some`]{@link module:Collections.some} but runs a maximum of `limit` async operations at a time.\n *\n * @name someLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.some]{@link module:Collections.some}\n * @alias anyLimit\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collections in parallel.\n * The iteratee should complete with a boolean `result` value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the iteratee functions have finished.\n * Result will be either `true` or `false` depending on the values of the async\n * tests. Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n */\nfunction someLimit(coll, limit, iteratee, callback) {\n    return _createTester(Boolean, res => res)(eachOfLimit(limit), coll, iteratee, callback)\n}\nvar someLimit$1 = awaitify(someLimit, 4);\n\n/**\n * The same as [`some`]{@link module:Collections.some} but runs only a single async operation at a time.\n *\n * @name someSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.some]{@link module:Collections.some}\n * @alias anySeries\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collections in series.\n * The iteratee should complete with a boolean `result` value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the iteratee functions have finished.\n * Result will be either `true` or `false` depending on the values of the async\n * tests. Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n */\nfunction someSeries(coll, iteratee, callback) {\n    return _createTester(Boolean, res => res)(eachOfSeries$1, coll, iteratee, callback)\n}\nvar someSeries$1 = awaitify(someSeries, 3);\n\n/**\n * Sorts a list by the results of running each `coll` value through an async\n * `iteratee`.\n *\n * @name sortBy\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with a value to use as the sort criteria as\n * its `result`.\n * Invoked with (item, callback).\n * @param {Function} callback - A callback which is called after all the\n * `iteratee` functions have finished, or an error occurs. Results is the items\n * from the original `coll` sorted by the values returned by the `iteratee`\n * calls. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback passed\n * @example\n *\n * // bigfile.txt is a file that is 251100 bytes in size\n * // mediumfile.txt is a file that is 11000 bytes in size\n * // smallfile.txt is a file that is 121 bytes in size\n *\n * // asynchronous function that returns the file size in bytes\n * function getFileSizeInBytes(file, callback) {\n *     fs.stat(file, function(err, stat) {\n *         if (err) {\n *             return callback(err);\n *         }\n *         callback(null, stat.size);\n *     });\n * }\n *\n * // Using callbacks\n * async.sortBy(['mediumfile.txt','smallfile.txt','bigfile.txt'], getFileSizeInBytes,\n *     function(err, results) {\n *         if (err) {\n *             console.log(err);\n *         } else {\n *             console.log(results);\n *             // results is now the original array of files sorted by\n *             // file size (ascending by default), e.g.\n *             // [ 'smallfile.txt', 'mediumfile.txt', 'bigfile.txt']\n *         }\n *     }\n * );\n *\n * // By modifying the callback parameter the\n * // sorting order can be influenced:\n *\n * // ascending order\n * async.sortBy(['mediumfile.txt','smallfile.txt','bigfile.txt'], function(file, callback) {\n *     getFileSizeInBytes(file, function(getFileSizeErr, fileSize) {\n *         if (getFileSizeErr) return callback(getFileSizeErr);\n *         callback(null, fileSize);\n *     });\n * }, function(err, results) {\n *         if (err) {\n *             console.log(err);\n *         } else {\n *             console.log(results);\n *             // results is now the original array of files sorted by\n *             // file size (ascending by default), e.g.\n *             // [ 'smallfile.txt', 'mediumfile.txt', 'bigfile.txt']\n *         }\n *     }\n * );\n *\n * // descending order\n * async.sortBy(['bigfile.txt','mediumfile.txt','smallfile.txt'], function(file, callback) {\n *     getFileSizeInBytes(file, function(getFileSizeErr, fileSize) {\n *         if (getFileSizeErr) {\n *             return callback(getFileSizeErr);\n *         }\n *         callback(null, fileSize * -1);\n *     });\n * }, function(err, results) {\n *         if (err) {\n *             console.log(err);\n *         } else {\n *             console.log(results);\n *             // results is now the original array of files sorted by\n *             // file size (ascending by default), e.g.\n *             // [ 'bigfile.txt', 'mediumfile.txt', 'smallfile.txt']\n *         }\n *     }\n * );\n *\n * // Error handling\n * async.sortBy(['mediumfile.txt','smallfile.txt','missingfile.txt'], getFileSizeInBytes,\n *     function(err, results) {\n *         if (err) {\n *             console.log(err);\n *             // [ Error: ENOENT: no such file or directory ]\n *         } else {\n *             console.log(results);\n *         }\n *     }\n * );\n *\n * // Using Promises\n * async.sortBy(['mediumfile.txt','smallfile.txt','bigfile.txt'], getFileSizeInBytes)\n * .then( results => {\n *     console.log(results);\n *     // results is now the original array of files sorted by\n *     // file size (ascending by default), e.g.\n *     // [ 'smallfile.txt', 'mediumfile.txt', 'bigfile.txt']\n * }).catch( err => {\n *     console.log(err);\n * });\n *\n * // Error handling\n * async.sortBy(['mediumfile.txt','smallfile.txt','missingfile.txt'], getFileSizeInBytes)\n * .then( results => {\n *     console.log(results);\n * }).catch( err => {\n *     console.log(err);\n *     // [ Error: ENOENT: no such file or directory ]\n * });\n *\n * // Using async/await\n * (async () => {\n *     try {\n *         let results = await async.sortBy(['bigfile.txt','mediumfile.txt','smallfile.txt'], getFileSizeInBytes);\n *         console.log(results);\n *         // results is now the original array of files sorted by\n *         // file size (ascending by default), e.g.\n *         // [ 'smallfile.txt', 'mediumfile.txt', 'bigfile.txt']\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * })();\n *\n * // Error handling\n * async () => {\n *     try {\n *         let results = await async.sortBy(['missingfile.txt','mediumfile.txt','smallfile.txt'], getFileSizeInBytes);\n *         console.log(results);\n *     }\n *     catch (err) {\n *         console.log(err);\n *         // [ Error: ENOENT: no such file or directory ]\n *     }\n * }\n *\n */\nfunction sortBy (coll, iteratee, callback) {\n    var _iteratee = wrapAsync(iteratee);\n    return map$1(coll, (x, iterCb) => {\n        _iteratee(x, (err, criteria) => {\n            if (err) return iterCb(err);\n            iterCb(err, {value: x, criteria});\n        });\n    }, (err, results) => {\n        if (err) return callback(err);\n        callback(null, results.sort(comparator).map(v => v.value));\n    });\n\n    function comparator(left, right) {\n        var a = left.criteria, b = right.criteria;\n        return a < b ? -1 : a > b ? 1 : 0;\n    }\n}\nvar sortBy$1 = awaitify(sortBy, 3);\n\n/**\n * Sets a time limit on an asynchronous function. If the function does not call\n * its callback within the specified milliseconds, it will be called with a\n * timeout error. The code property for the error object will be `'ETIMEDOUT'`.\n *\n * @name timeout\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} asyncFn - The async function to limit in time.\n * @param {number} milliseconds - The specified time limit.\n * @param {*} [info] - Any variable you want attached (`string`, `object`, etc)\n * to timeout Error for more information..\n * @returns {AsyncFunction} Returns a wrapped function that can be used with any\n * of the control flow functions.\n * Invoke this function with the same parameters as you would `asyncFunc`.\n * @example\n *\n * function myFunction(foo, callback) {\n *     doAsyncTask(foo, function(err, data) {\n *         // handle errors\n *         if (err) return callback(err);\n *\n *         // do some stuff ...\n *\n *         // return processed data\n *         return callback(null, data);\n *     });\n * }\n *\n * var wrapped = async.timeout(myFunction, 1000);\n *\n * // call `wrapped` as you would `myFunction`\n * wrapped({ bar: 'bar' }, function(err, data) {\n *     // if `myFunction` takes < 1000 ms to execute, `err`\n *     // and `data` will have their expected values\n *\n *     // else `err` will be an Error with the code 'ETIMEDOUT'\n * });\n */\nfunction timeout(asyncFn, milliseconds, info) {\n    var fn = wrapAsync(asyncFn);\n\n    return initialParams((args, callback) => {\n        var timedOut = false;\n        var timer;\n\n        function timeoutCallback() {\n            var name = asyncFn.name || 'anonymous';\n            var error  = new Error('Callback function \"' + name + '\" timed out.');\n            error.code = 'ETIMEDOUT';\n            if (info) {\n                error.info = info;\n            }\n            timedOut = true;\n            callback(error);\n        }\n\n        args.push((...cbArgs) => {\n            if (!timedOut) {\n                callback(...cbArgs);\n                clearTimeout(timer);\n            }\n        });\n\n        // setup timer and call original function\n        timer = setTimeout(timeoutCallback, milliseconds);\n        fn(...args);\n    });\n}\n\nfunction range(size) {\n    var result = Array(size);\n    while (size--) {\n        result[size] = size;\n    }\n    return result;\n}\n\n/**\n * The same as [times]{@link module:ControlFlow.times} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name timesLimit\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.times]{@link module:ControlFlow.times}\n * @category Control Flow\n * @param {number} count - The number of times to run the function.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - The async function to call `n` times.\n * Invoked with the iteration index and a callback: (n, next).\n * @param {Function} callback - see [async.map]{@link module:Collections.map}.\n * @returns {Promise} a promise, if no callback is provided\n */\nfunction timesLimit(count, limit, iteratee, callback) {\n    var _iteratee = wrapAsync(iteratee);\n    return mapLimit$1(range(count), limit, _iteratee, callback);\n}\n\n/**\n * Calls the `iteratee` function `n` times, and accumulates results in the same\n * manner you would use with [map]{@link module:Collections.map}.\n *\n * @name times\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.map]{@link module:Collections.map}\n * @category Control Flow\n * @param {number} n - The number of times to run the function.\n * @param {AsyncFunction} iteratee - The async function to call `n` times.\n * Invoked with the iteration index and a callback: (n, next).\n * @param {Function} callback - see {@link module:Collections.map}.\n * @returns {Promise} a promise, if no callback is provided\n * @example\n *\n * // Pretend this is some complicated async factory\n * var createUser = function(id, callback) {\n *     callback(null, {\n *         id: 'user' + id\n *     });\n * };\n *\n * // generate 5 users\n * async.times(5, function(n, next) {\n *     createUser(n, function(err, user) {\n *         next(err, user);\n *     });\n * }, function(err, users) {\n *     // we should now have 5 users\n * });\n */\nfunction times (n, iteratee, callback) {\n    return timesLimit(n, Infinity, iteratee, callback)\n}\n\n/**\n * The same as [times]{@link module:ControlFlow.times} but runs only a single async operation at a time.\n *\n * @name timesSeries\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.times]{@link module:ControlFlow.times}\n * @category Control Flow\n * @param {number} n - The number of times to run the function.\n * @param {AsyncFunction} iteratee - The async function to call `n` times.\n * Invoked with the iteration index and a callback: (n, next).\n * @param {Function} callback - see {@link module:Collections.map}.\n * @returns {Promise} a promise, if no callback is provided\n */\nfunction timesSeries (n, iteratee, callback) {\n    return timesLimit(n, 1, iteratee, callback)\n}\n\n/**\n * A relative of `reduce`.  Takes an Object or Array, and iterates over each\n * element in parallel, each step potentially mutating an `accumulator` value.\n * The type of the accumulator defaults to the type of collection passed in.\n *\n * @name transform\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {*} [accumulator] - The initial state of the transform.  If omitted,\n * it will default to an empty Object or Array, depending on the type of `coll`\n * @param {AsyncFunction} iteratee - A function applied to each item in the\n * collection that potentially modifies the accumulator.\n * Invoked with (accumulator, item, key, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result is the transformed accumulator.\n * Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n * @example\n *\n * // file1.txt is a file that is 1000 bytes in size\n * // file2.txt is a file that is 2000 bytes in size\n * // file3.txt is a file that is 3000 bytes in size\n *\n * // helper function that returns human-readable size format from bytes\n * function formatBytes(bytes, decimals = 2) {\n *   // implementation not included for brevity\n *   return humanReadbleFilesize;\n * }\n *\n * const fileList = ['file1.txt','file2.txt','file3.txt'];\n *\n * // asynchronous function that returns the file size, transformed to human-readable format\n * // e.g. 1024 bytes = 1KB, 1234 bytes = 1.21 KB, 1048576 bytes = 1MB, etc.\n * function transformFileSize(acc, value, key, callback) {\n *     fs.stat(value, function(err, stat) {\n *         if (err) {\n *             return callback(err);\n *         }\n *         acc[key] = formatBytes(stat.size);\n *         callback(null);\n *     });\n * }\n *\n * // Using callbacks\n * async.transform(fileList, transformFileSize, function(err, result) {\n *     if(err) {\n *         console.log(err);\n *     } else {\n *         console.log(result);\n *         // [ '1000 Bytes', '1.95 KB', '2.93 KB' ]\n *     }\n * });\n *\n * // Using Promises\n * async.transform(fileList, transformFileSize)\n * .then(result => {\n *     console.log(result);\n *     // [ '1000 Bytes', '1.95 KB', '2.93 KB' ]\n * }).catch(err => {\n *     console.log(err);\n * });\n *\n * // Using async/await\n * (async () => {\n *     try {\n *         let result = await async.transform(fileList, transformFileSize);\n *         console.log(result);\n *         // [ '1000 Bytes', '1.95 KB', '2.93 KB' ]\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * })();\n *\n * @example\n *\n * // file1.txt is a file that is 1000 bytes in size\n * // file2.txt is a file that is 2000 bytes in size\n * // file3.txt is a file that is 3000 bytes in size\n *\n * // helper function that returns human-readable size format from bytes\n * function formatBytes(bytes, decimals = 2) {\n *   // implementation not included for brevity\n *   return humanReadbleFilesize;\n * }\n *\n * const fileMap = { f1: 'file1.txt', f2: 'file2.txt', f3: 'file3.txt' };\n *\n * // asynchronous function that returns the file size, transformed to human-readable format\n * // e.g. 1024 bytes = 1KB, 1234 bytes = 1.21 KB, 1048576 bytes = 1MB, etc.\n * function transformFileSize(acc, value, key, callback) {\n *     fs.stat(value, function(err, stat) {\n *         if (err) {\n *             return callback(err);\n *         }\n *         acc[key] = formatBytes(stat.size);\n *         callback(null);\n *     });\n * }\n *\n * // Using callbacks\n * async.transform(fileMap, transformFileSize, function(err, result) {\n *     if(err) {\n *         console.log(err);\n *     } else {\n *         console.log(result);\n *         // { f1: '1000 Bytes', f2: '1.95 KB', f3: '2.93 KB' }\n *     }\n * });\n *\n * // Using Promises\n * async.transform(fileMap, transformFileSize)\n * .then(result => {\n *     console.log(result);\n *     // { f1: '1000 Bytes', f2: '1.95 KB', f3: '2.93 KB' }\n * }).catch(err => {\n *     console.log(err);\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let result = await async.transform(fileMap, transformFileSize);\n *         console.log(result);\n *         // { f1: '1000 Bytes', f2: '1.95 KB', f3: '2.93 KB' }\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n */\nfunction transform (coll, accumulator, iteratee, callback) {\n    if (arguments.length <= 3 && typeof accumulator === 'function') {\n        callback = iteratee;\n        iteratee = accumulator;\n        accumulator = Array.isArray(coll) ? [] : {};\n    }\n    callback = once(callback || promiseCallback());\n    var _iteratee = wrapAsync(iteratee);\n\n    eachOf$1(coll, (v, k, cb) => {\n        _iteratee(accumulator, v, k, cb);\n    }, err => callback(err, accumulator));\n    return callback[PROMISE_SYMBOL]\n}\n\n/**\n * It runs each task in series but stops whenever any of the functions were\n * successful. If one of the tasks were successful, the `callback` will be\n * passed the result of the successful task. If all tasks fail, the callback\n * will be passed the error and result (if any) of the final attempt.\n *\n * @name tryEach\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection containing functions to\n * run, each function is passed a `callback(err, result)` it must call on\n * completion with an error `err` (which can be `null`) and an optional `result`\n * value.\n * @param {Function} [callback] - An optional callback which is called when one\n * of the tasks has succeeded, or all have failed. It receives the `err` and\n * `result` arguments of the last attempt at completing the `task`. Invoked with\n * (err, results).\n * @returns {Promise} a promise, if no callback is passed\n * @example\n * async.tryEach([\n *     function getDataFromFirstWebsite(callback) {\n *         // Try getting the data from the first website\n *         callback(err, data);\n *     },\n *     function getDataFromSecondWebsite(callback) {\n *         // First website failed,\n *         // Try getting the data from the backup website\n *         callback(err, data);\n *     }\n * ],\n * // optional callback\n * function(err, results) {\n *     Now do something with the data.\n * });\n *\n */\nfunction tryEach(tasks, callback) {\n    var error = null;\n    var result;\n    return eachSeries$1(tasks, (task, taskCb) => {\n        wrapAsync(task)((err, ...args) => {\n            if (err === false) return taskCb(err);\n\n            if (args.length < 2) {\n                [result] = args;\n            } else {\n                result = args;\n            }\n            error = err;\n            taskCb(err ? null : {});\n        });\n    }, () => callback(error, result));\n}\n\nvar tryEach$1 = awaitify(tryEach);\n\n/**\n * Undoes a [memoize]{@link module:Utils.memoize}d function, reverting it to the original,\n * unmemoized form. Handy for testing.\n *\n * @name unmemoize\n * @static\n * @memberOf module:Utils\n * @method\n * @see [async.memoize]{@link module:Utils.memoize}\n * @category Util\n * @param {AsyncFunction} fn - the memoized function\n * @returns {AsyncFunction} a function that calls the original unmemoized function\n */\nfunction unmemoize(fn) {\n    return (...args) => {\n        return (fn.unmemoized || fn)(...args);\n    };\n}\n\n/**\n * Repeatedly call `iteratee`, while `test` returns `true`. Calls `callback` when\n * stopped, or an error occurs.\n *\n * @name whilst\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {AsyncFunction} test - asynchronous truth test to perform before each\n * execution of `iteratee`. Invoked with ().\n * @param {AsyncFunction} iteratee - An async function which is called each time\n * `test` passes. Invoked with (callback).\n * @param {Function} [callback] - A callback which is called after the test\n * function has failed and repeated execution of `iteratee` has stopped. `callback`\n * will be passed an error and any arguments passed to the final `iteratee`'s\n * callback. Invoked with (err, [results]);\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * var count = 0;\n * async.whilst(\n *     function test(cb) { cb(null, count < 5); },\n *     function iter(callback) {\n *         count++;\n *         setTimeout(function() {\n *             callback(null, count);\n *         }, 1000);\n *     },\n *     function (err, n) {\n *         // 5 seconds have passed, n = 5\n *     }\n * );\n */\nfunction whilst(test, iteratee, callback) {\n    callback = onlyOnce(callback);\n    var _fn = wrapAsync(iteratee);\n    var _test = wrapAsync(test);\n    var results = [];\n\n    function next(err, ...rest) {\n        if (err) return callback(err);\n        results = rest;\n        if (err === false) return;\n        _test(check);\n    }\n\n    function check(err, truth) {\n        if (err) return callback(err);\n        if (err === false) return;\n        if (!truth) return callback(null, ...results);\n        _fn(next);\n    }\n\n    return _test(check);\n}\nvar whilst$1 = awaitify(whilst, 3);\n\n/**\n * Repeatedly call `iteratee` until `test` returns `true`. Calls `callback` when\n * stopped, or an error occurs. `callback` will be passed an error and any\n * arguments passed to the final `iteratee`'s callback.\n *\n * The inverse of [whilst]{@link module:ControlFlow.whilst}.\n *\n * @name until\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.whilst]{@link module:ControlFlow.whilst}\n * @category Control Flow\n * @param {AsyncFunction} test - asynchronous truth test to perform before each\n * execution of `iteratee`. Invoked with (callback).\n * @param {AsyncFunction} iteratee - An async function which is called each time\n * `test` fails. Invoked with (callback).\n * @param {Function} [callback] - A callback which is called after the test\n * function has passed and repeated execution of `iteratee` has stopped. `callback`\n * will be passed an error and any arguments passed to the final `iteratee`'s\n * callback. Invoked with (err, [results]);\n * @returns {Promise} a promise, if a callback is not passed\n *\n * @example\n * const results = []\n * let finished = false\n * async.until(function test(cb) {\n *     cb(null, finished)\n * }, function iter(next) {\n *     fetchPage(url, (err, body) => {\n *         if (err) return next(err)\n *         results = results.concat(body.objects)\n *         finished = !!body.next\n *         next(err)\n *     })\n * }, function done (err) {\n *     // all pages have been fetched\n * })\n */\nfunction until(test, iteratee, callback) {\n    const _test = wrapAsync(test);\n    return whilst$1((cb) => _test((err, truth) => cb (err, !truth)), iteratee, callback);\n}\n\n/**\n * Runs the `tasks` array of functions in series, each passing their results to\n * the next in the array. However, if any of the `tasks` pass an error to their\n * own callback, the next function is not executed, and the main `callback` is\n * immediately called with the error.\n *\n * @name waterfall\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array} tasks - An array of [async functions]{@link AsyncFunction}\n * to run.\n * Each function should complete with any number of `result` values.\n * The `result` values will be passed as arguments, in order, to the next task.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed. This will be passed the results of the last task's\n * callback. Invoked with (err, [results]).\n * @returns undefined\n * @example\n *\n * async.waterfall([\n *     function(callback) {\n *         callback(null, 'one', 'two');\n *     },\n *     function(arg1, arg2, callback) {\n *         // arg1 now equals 'one' and arg2 now equals 'two'\n *         callback(null, 'three');\n *     },\n *     function(arg1, callback) {\n *         // arg1 now equals 'three'\n *         callback(null, 'done');\n *     }\n * ], function (err, result) {\n *     // result now equals 'done'\n * });\n *\n * // Or, with named functions:\n * async.waterfall([\n *     myFirstFunction,\n *     mySecondFunction,\n *     myLastFunction,\n * ], function (err, result) {\n *     // result now equals 'done'\n * });\n * function myFirstFunction(callback) {\n *     callback(null, 'one', 'two');\n * }\n * function mySecondFunction(arg1, arg2, callback) {\n *     // arg1 now equals 'one' and arg2 now equals 'two'\n *     callback(null, 'three');\n * }\n * function myLastFunction(arg1, callback) {\n *     // arg1 now equals 'three'\n *     callback(null, 'done');\n * }\n */\nfunction waterfall (tasks, callback) {\n    callback = once(callback);\n    if (!Array.isArray(tasks)) return callback(new Error('First argument to waterfall must be an array of functions'));\n    if (!tasks.length) return callback();\n    var taskIndex = 0;\n\n    function nextTask(args) {\n        var task = wrapAsync(tasks[taskIndex++]);\n        task(...args, onlyOnce(next));\n    }\n\n    function next(err, ...args) {\n        if (err === false) return\n        if (err || taskIndex === tasks.length) {\n            return callback(err, ...args);\n        }\n        nextTask(args);\n    }\n\n    nextTask([]);\n}\n\nvar waterfall$1 = awaitify(waterfall);\n\n/**\n * An \"async function\" in the context of Async is an asynchronous function with\n * a variable number of parameters, with the final parameter being a callback.\n * (`function (arg1, arg2, ..., callback) {}`)\n * The final callback is of the form `callback(err, results...)`, which must be\n * called once the function is completed.  The callback should be called with a\n * Error as its first argument to signal that an error occurred.\n * Otherwise, if no error occurred, it should be called with `null` as the first\n * argument, and any additional `result` arguments that may apply, to signal\n * successful completion.\n * The callback must be called exactly once, ideally on a later tick of the\n * JavaScript event loop.\n *\n * This type of function is also referred to as a \"Node-style async function\",\n * or a \"continuation passing-style function\" (CPS). Most of the methods of this\n * library are themselves CPS/Node-style async functions, or functions that\n * return CPS/Node-style async functions.\n *\n * Wherever we accept a Node-style async function, we also directly accept an\n * [ES2017 `async` function]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function}.\n * In this case, the `async` function will not be passed a final callback\n * argument, and any thrown error will be used as the `err` argument of the\n * implicit callback, and the return value will be used as the `result` value.\n * (i.e. a `rejected` of the returned Promise becomes the `err` callback\n * argument, and a `resolved` value becomes the `result`.)\n *\n * Note, due to JavaScript limitations, we can only detect native `async`\n * functions and not transpilied implementations.\n * Your environment must have `async`/`await` support for this to work.\n * (e.g. Node > v7.6, or a recent version of a modern browser).\n * If you are using `async` functions through a transpiler (e.g. Babel), you\n * must still wrap the function with [asyncify]{@link module:Utils.asyncify},\n * because the `async function` will be compiled to an ordinary function that\n * returns a promise.\n *\n * @typedef {Function} AsyncFunction\n * @static\n */\n\nvar index = {\n    apply,\n    applyEach: applyEach$1,\n    applyEachSeries,\n    asyncify,\n    auto,\n    autoInject,\n    cargo,\n    cargoQueue: cargo$1,\n    compose,\n    concat: concat$1,\n    concatLimit: concatLimit$1,\n    concatSeries: concatSeries$1,\n    constant,\n    detect: detect$1,\n    detectLimit: detectLimit$1,\n    detectSeries: detectSeries$1,\n    dir,\n    doUntil,\n    doWhilst: doWhilst$1,\n    each,\n    eachLimit: eachLimit$2,\n    eachOf: eachOf$1,\n    eachOfLimit: eachOfLimit$2,\n    eachOfSeries: eachOfSeries$1,\n    eachSeries: eachSeries$1,\n    ensureAsync,\n    every: every$1,\n    everyLimit: everyLimit$1,\n    everySeries: everySeries$1,\n    filter: filter$1,\n    filterLimit: filterLimit$1,\n    filterSeries: filterSeries$1,\n    forever: forever$1,\n    groupBy,\n    groupByLimit: groupByLimit$1,\n    groupBySeries,\n    log,\n    map: map$1,\n    mapLimit: mapLimit$1,\n    mapSeries: mapSeries$1,\n    mapValues,\n    mapValuesLimit: mapValuesLimit$1,\n    mapValuesSeries,\n    memoize,\n    nextTick,\n    parallel,\n    parallelLimit,\n    priorityQueue,\n    queue: queue$1,\n    race: race$1,\n    reduce: reduce$1,\n    reduceRight,\n    reflect,\n    reflectAll,\n    reject: reject$2,\n    rejectLimit: rejectLimit$1,\n    rejectSeries: rejectSeries$1,\n    retry,\n    retryable,\n    seq,\n    series,\n    setImmediate: setImmediate$1,\n    some: some$1,\n    someLimit: someLimit$1,\n    someSeries: someSeries$1,\n    sortBy: sortBy$1,\n    timeout,\n    times,\n    timesLimit,\n    timesSeries,\n    transform,\n    tryEach: tryEach$1,\n    unmemoize,\n    until,\n    waterfall: waterfall$1,\n    whilst: whilst$1,\n\n    // aliases\n    all: every$1,\n    allLimit: everyLimit$1,\n    allSeries: everySeries$1,\n    any: some$1,\n    anyLimit: someLimit$1,\n    anySeries: someSeries$1,\n    find: detect$1,\n    findLimit: detectLimit$1,\n    findSeries: detectSeries$1,\n    flatMap: concat$1,\n    flatMapLimit: concatLimit$1,\n    flatMapSeries: concatSeries$1,\n    forEach: each,\n    forEachSeries: eachSeries$1,\n    forEachLimit: eachLimit$2,\n    forEachOf: eachOf$1,\n    forEachOfSeries: eachOfSeries$1,\n    forEachOfLimit: eachOfLimit$2,\n    inject: reduce$1,\n    foldl: reduce$1,\n    foldr: reduceRight,\n    select: filter$1,\n    selectLimit: filterLimit$1,\n    selectSeries: filterSeries$1,\n    wrapSync: asyncify,\n    during: whilst$1,\n    doDuring: doWhilst$1\n};\n\nexport default index;\nexport { apply, applyEach$1 as applyEach, applyEachSeries, asyncify, auto, autoInject, cargo, cargo$1 as cargoQueue, compose, concat$1 as concat, concatLimit$1 as concatLimit, concatSeries$1 as concatSeries, constant, detect$1 as detect, detectLimit$1 as detectLimit, detectSeries$1 as detectSeries, dir, doUntil, doWhilst$1 as doWhilst, each, eachLimit$2 as eachLimit, eachOf$1 as eachOf, eachOfLimit$2 as eachOfLimit, eachOfSeries$1 as eachOfSeries, eachSeries$1 as eachSeries, ensureAsync, every$1 as every, everyLimit$1 as everyLimit, everySeries$1 as everySeries, filter$1 as filter, filterLimit$1 as filterLimit, filterSeries$1 as filterSeries, forever$1 as forever, groupBy, groupByLimit$1 as groupByLimit, groupBySeries, log, map$1 as map, mapLimit$1 as mapLimit, mapSeries$1 as mapSeries, mapValues, mapValuesLimit$1 as mapValuesLimit, mapValuesSeries, memoize, nextTick, parallel, parallelLimit, priorityQueue, queue$1 as queue, race$1 as race, reduce$1 as reduce, reduceRight, reflect, reflectAll, reject$2 as reject, rejectLimit$1 as rejectLimit, rejectSeries$1 as rejectSeries, retry, retryable, seq, series, setImmediate$1 as setImmediate, some$1 as some, someLimit$1 as someLimit, someSeries$1 as someSeries, sortBy$1 as sortBy, timeout, times, timesLimit, timesSeries, transform, tryEach$1 as tryEach, unmemoize, until, waterfall$1 as waterfall, whilst$1 as whilst, every$1 as all, everyLimit$1 as allLimit, everySeries$1 as allSeries, some$1 as any, someLimit$1 as anyLimit, someSeries$1 as anySeries, detect$1 as find, detectLimit$1 as findLimit, detectSeries$1 as findSeries, concat$1 as flatMap, concatLimit$1 as flatMapLimit, concatSeries$1 as flatMapSeries, each as forEach, eachSeries$1 as forEachSeries, eachLimit$2 as forEachLimit, eachOf$1 as forEachOf, eachOfSeries$1 as forEachOfSeries, eachOfLimit$2 as forEachOfLimit, reduce$1 as inject, reduce$1 as foldl, reduceRight as foldr, filter$1 as select, filterLimit$1 as selectLimit, filterSeries$1 as selectSeries, asyncify as wrapSync, whilst$1 as during, doWhilst$1 as doDuring };\n","import { getLogger } from '@jitsi/logger';\nimport { queue } from 'async';\n\nconst logger = getLogger(__filename);\n\n/**\n * A queue for async task execution.\n */\nexport default class AsyncQueue {\n    /**\n     * Creates new instance.\n     */\n    constructor() {\n        this._queue = queue(this._processQueueTasks.bind(this), 1);\n        this._stopped = false;\n    }\n\n    /**\n     * Removes any pending tasks from the queue.\n     */\n    clear() {\n        this._queue.kill();\n    }\n\n    /**\n     * Internal task processing implementation which makes things work.\n     */\n    _processQueueTasks(task, finishedCallback) {\n        try {\n            task(finishedCallback);\n        } catch (error) {\n            logger.error(`Task failed: ${error?.stack}`);\n            finishedCallback(error);\n        }\n    }\n\n    /**\n     * The 'task' function will be given a callback it MUST call with either:\n     *  1) No arguments if it was successful or\n     *  2) An error argument if there was an error\n     * If the task wants to process the success or failure of the task, it\n     * should pass the {@code callback} to the push function, e.g.:\n     * queue.push(task, (err) => {\n     *     if (err) {\n     *         // error handling\n     *     } else {\n     *         // success handling\n     *     }\n     * });\n     *\n     * @param {function} task - The task to be executed. See the description above.\n     * @param {function} [callback] - Optional callback to be called after the task has been executed.\n     */\n    push(task, callback) {\n        if (this._stopped) {\n            callback && callback(new Error('The queue has been stopped'));\n\n            return;\n        }\n        this._queue.push(task, callback);\n    }\n\n    /**\n     * Shutdowns the queue. All already queued tasks will execute, but no future tasks can be added. If a task is added\n     * after the queue has been shutdown then the callback will be called with an error.\n     */\n    shutdown() {\n        this._stopped = true;\n    }\n}\n","export enum JingleSessionState {\n    /**\n     * The pending Jingle session state which means the session as defined in\n     * XEP-0166(before 'session-invite/session-accept' took place).\n     */\n    PENDING = 'pending',\n\n    /**\n     * The active Jingle session state as defined in XEP-0166\n     * (after 'session-invite'/'session-accept').\n     */\n    ACTIVE = 'active',\n\n    /**\n     * The ended Jingle session state as defined in XEP-0166\n     * (after 'session-terminate').\n     */\n    ENDED = 'ended'\n};\n\n// exported for backward compatibility\nexport const PENDING = JingleSessionState.PENDING;\nexport const ACTIVE = JingleSessionState.ACTIVE;\nexport const ENDED = JingleSessionState.ENDED;\n","import { getLogger } from '@jitsi/logger';\n\nimport Listenable from '../util/Listenable';\n\nimport * as JingleSessionState from './JingleSessionState';\n\nconst logger = getLogger(__filename);\n\n/**\n * JingleSession provides an API to manage a single Jingle session. We will\n * have different implementations depending on the underlying interface used\n * (i.e. WebRTC and ORTC) and here we hold the code common to all of them.\n */\nexport default class JingleSession extends Listenable {\n\n    /* eslint-disable max-params */\n\n    /**\n     * Creates new <tt>JingleSession</tt>.\n     * @param {string} sid the Jingle session identifier\n     * @param {string} localJid our JID\n     * @param {string} remoteJid the JID of the remote peer\n     * @param {XmppConnection} connection the XMPP connection\n     * @param {Object} mediaConstraints the media constraints object passed to the PeerConnection onCreateAnswer/Offer.\n     * @param {Object} pcConfig The {@code RTCConfiguration} object passed to the PeerConnection's constructor.\n     * @param {boolean} isInitiator indicates if it will be the side which initiates the session.\n     */\n    constructor(\n            sid,\n            localJid,\n            remoteJid,\n            connection,\n            mediaConstraints,\n            pcConfig,\n            isInitiator) {\n        super();\n        this.sid = sid;\n        this.localJid = localJid;\n        this.remoteJid = remoteJid;\n        this.connection = connection;\n        this.mediaConstraints = mediaConstraints;\n        this.pcConfig = pcConfig;\n\n        /**\n         * Indicates whether this instance is an initiator or an answerer of\n         * the Jingle session.\n         * @type {boolean}\n         */\n        this.isInitiator = isInitiator;\n\n        /**\n         * Whether to use dripping or not. Dripping is sending trickle\n         * candidates not one-by-one.\n         */\n        this.usedrip = true;\n\n        /**\n         *  When dripping is used, stores ICE candidates which are to be sent.\n         */\n        this.dripContainer = [];\n\n        /**\n         * The chat room instance associated with the session.\n         * @type {ChatRoom}\n         */\n        this.room = null;\n\n        /**\n         * The signaling layer.\n         * @type {SignalingLayerImpl | null}\n         * @private\n         */\n        this._signalingLayer = null;\n\n        /**\n         * Jingle session state - uninitialized until {@link initialize} is\n         * called @type {JingleSessionState}\n         */\n        this.state = null;\n\n        /**\n         * The RTC service instance\n         * @type {RTC}\n         */\n        this.rtc = null;\n    }\n\n    /**\n     * Returns XMPP address of this session's initiator.\n     * @return {string}\n     */\n    get initiatorJid() {\n        return this.isInitiator ? this.localJid : this.remoteJid;\n    }\n\n    /**\n     * Returns XMPP address of this session's responder.\n     * @return {string}\n     */\n    get responderJid() {\n        return this.isInitiator ? this.remoteJid : this.localJid;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Prepares this object to initiate a session.\n     * @param {ChatRoom} room the chat room for the conference associated with\n     * this session\n     * @param {RTC} rtc the RTC service instance\n     * @param {SignalingLayerImpl} signalingLayer - The signaling layer instance.\n     * @param {object} options - the options, see implementing class's\n     * {@link #doInitialize} description for more details.\n     */\n    initialize(room, rtc, signalingLayer, options) {\n        if (this.state !== null) {\n            const errmsg\n                = `attempt to initiate on session ${this.sid}\n                   in state ${this.state}`;\n\n            logger.error(errmsg);\n            throw new Error(errmsg);\n        }\n\n        // TODO decouple from room\n        this.room = room;\n        this.rtc = rtc;\n        this._signalingLayer = signalingLayer;\n        this.state = JingleSessionState.PENDING;\n        this.doInitialize(options);\n    }\n\n    /**\n     * The implementing class finishes initialization here. Called at the end of\n     * {@link initialize}.\n     * @param {Object} options - The options specific to the implementing class.\n     * @protected\n     */\n    doInitialize(options) { } // eslint-disable-line no-unused-vars, no-empty-function, max-len\n\n    /* eslint-disable no-unused-vars, no-empty-function */\n\n    /**\n     * Adds the ICE candidates found in the 'contents' array as remote\n     * candidates?\n     * Note: currently only used on transport-info\n     *\n     * @param contents\n     */\n    addIceCandidates(contents) {}\n\n    /* eslint-enable no-unused-vars, no-empty-function */\n\n    /**\n     * Returns current state of this <tt>JingleSession</tt> instance.\n     * @returns {JingleSessionState} the current state of this session instance.\n     */\n    getState() {\n        return this.state;\n    }\n\n    /* eslint-disable no-unused-vars, no-empty-function */\n\n    /**\n     * Handles an 'add-source' event.\n     *\n     * @param contents an array of Jingle 'content' elements.\n     */\n    addSources(contents) {}\n\n    /**\n     * Handles a 'remove-source' event.\n     *\n     * @param contents an array of Jingle 'content' elements.\n     */\n    removeSources(contents) {}\n\n    /**\n     * Terminates this Jingle session by sending session-terminate\n     * @param success a callback called once the 'session-terminate' packet has\n     * been acknowledged with RESULT.\n     * @param failure a callback called when either timeout occurs or ERROR\n     * response is received.\n     * @param {Object} options\n     * @param {string} [options.reason] XMPP Jingle error condition\n     * @param {string} [options.reasonDescription] some meaningful error message\n     * @param {boolean} [options.requestRestart=false] set to true to ask Jicofo to start a new session one this once is\n     * terminated.\n     * @param {boolean} [options.sendSessionTerminate=true] set to false to skip\n     * sending session-terminate. It may not make sense to send it if the XMPP\n     * connection has been closed already or if the remote peer has disconnected\n     */\n    terminate(success, failure, options) {}\n\n    /**\n     * Handles an offer from the remote peer (prepares to accept a session).\n     * @param jingle the 'jingle' XML element.\n     * @param success callback called when we the incoming session has been\n     * accepted\n     * @param failure callback called when we fail for any reason, will supply\n     * error object with details(which is meant more to be printed to the logger\n     * than analysed in the code, as the error is unrecoverable anyway)\n     */\n    acceptOffer(jingle, success, failure) {}\n\n    /**\n     * Returns the JID of the initiator of the jingle session.\n     */\n    _getInitiatorJid() {\n        return this.isInitiator ? this.localJid : this.remoteJid;\n    }\n\n    /* eslint-enable no-unused-vars, no-empty-function */\n}\n","enum MediaSessionEvents {\n    /**\n     * Event triggered when the remote party signals video max frame heights for its local sources.\n     */\n    REMOTE_SOURCE_CONSTRAINTS_CHANGED = 'media_session.REMOTE_SOURCE_CONSTRAINTS_CHANGED',\n\n    /**\n     * Event triggered when the remote party signals it's receive video max frame height.\n     */\n    REMOTE_VIDEO_CONSTRAINTS_CHANGED = 'media_session.REMOTE_VIDEO_CONSTRAINTS_CHANGED'\n};\n\nexport default MediaSessionEvents;","/* global $ */\n\nimport { getLogger } from '@jitsi/logger';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport * as CodecMimeType from '../../service/RTC/CodecMimeType';\nimport { MediaDirection } from '../../service/RTC/MediaDirection';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport {\n    ICE_DURATION,\n    ICE_STATE_CHANGED\n} from '../../service/statistics/AnalyticsEvents';\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\nimport { SS_DEFAULT_FRAME_RATE } from '../RTC/ScreenObtainer';\nimport FeatureFlags from '../flags/FeatureFlags';\nimport SDP from '../sdp/SDP';\nimport SDPDiffer from '../sdp/SDPDiffer';\nimport SDPUtil from '../sdp/SDPUtil';\nimport Statistics from '../statistics/statistics';\nimport AsyncQueue from '../util/AsyncQueue';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport { integerHash } from '../util/StringUtils';\n\nimport browser from './../browser';\nimport JingleSession from './JingleSession';\nimport * as JingleSessionState from './JingleSessionState';\nimport MediaSessionEvents from './MediaSessionEvents';\nimport XmppConnection from './XmppConnection';\n\nconst logger = getLogger(__filename);\n\n/**\n * Constant tells how long we're going to wait for IQ response, before timeout\n * error is  triggered.\n * @type {number}\n */\nconst IQ_TIMEOUT = 10000;\n\n/*\n * The default number of samples (per stat) to keep when webrtc stats gathering\n * is enabled in TraceablePeerConnection.\n */\nconst DEFAULT_MAX_STATS = 300;\n\n/**\n * The time duration for which the client keeps gathering ICE candidates to be sent out in a single IQ.\n * @type {number} timeout in ms.\n */\nconst ICE_CAND_GATHERING_TIMEOUT = 150;\n\n/**\n * Reads the endpoint ID given a string which represents either the endpoint's full JID, or the endpoint ID itself.\n * @param {String} jidOrEndpointId A string which is either the full JID of a participant, or the ID of an\n * endpoint/participant.\n * @returns The endpoint ID associated with 'jidOrEndpointId'.\n */\nfunction getEndpointId(jidOrEndpointId) {\n    return Strophe.getResourceFromJid(jidOrEndpointId) || jidOrEndpointId;\n}\n\n/**\n * @typedef {Object} JingleSessionPCOptions\n * @property {Object} abTesting - A/B testing related options (ask George).\n * @property {boolean} abTesting.enableSuspendVideoTest - enables the suspend\n * video test ?(ask George).\n * @property {boolean} disableH264 - Described in the config.js[1].\n * @property {boolean} disableRtx - Described in the config.js[1].\n * @property {boolean} disableSimulcast - Described in the config.js[1].\n * @property {boolean} enableInsertableStreams - Set to true when the insertable streams constraints is to be enabled\n * on the PeerConnection.\n * @property {boolean} failICE - it's an option used in the tests. Set to\n * <tt>true</tt> to block any real candidates and make the ICE fail.\n * @property {boolean} gatherStats - Described in the config.js[1].\n * @property {object} p2p - Peer to peer related options (FIXME those could be\n * fetched from config.p2p on the upper level).\n * @property {boolean} preferH264 - Described in the config.js[1].\n * @property {Object} testing - Testing and/or experimental options.\n * @property {boolean} webrtcIceUdpDisable - Described in the config.js[1].\n * @property {boolean} webrtcIceTcpDisable - Described in the config.js[1].\n *\n * [1]: https://github.com/jitsi/jitsi-meet/blob/master/config.js\n */\n/**\n *\n */\nexport default class JingleSessionPC extends JingleSession {\n    /**\n     * Parses 'senders' attribute of the video content.\n     * @param {jQuery} jingleContents\n     * @return {string|null} one of the values of content \"senders\" attribute\n     * defined by Jingle. If there is no \"senders\" attribute or if the value is\n     * invalid then <tt>null</tt> will be returned.\n     * @private\n     */\n    static parseVideoSenders(jingleContents) {\n        const videoContents = jingleContents.find('>content[name=\"video\"]');\n\n        if (videoContents.length) {\n            const senders = videoContents[0].getAttribute('senders');\n\n            if (senders === 'both'\n                || senders === 'initiator'\n                || senders === 'responder'\n                || senders === 'none') {\n                return senders;\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Parses the video max frame height value out of the 'content-modify' IQ.\n     *\n     * @param {jQuery} jingleContents - A jQuery selector pointing to the '>jingle' element.\n     * @returns {Number|null}\n     */\n    static parseMaxFrameHeight(jingleContents) {\n        const maxFrameHeightSel = jingleContents.find('>content[name=\"video\"]>max-frame-height');\n\n        return maxFrameHeightSel.length ? Number(maxFrameHeightSel.text()) : null;\n    }\n\n    /**\n     * Parses the source-name and max frame height value of the 'content-modify' IQ when source-name signaling\n     * is enabled.\n     *\n     * @param {jQuery} jingleContents - A jQuery selector pointing to the '>jingle' element.\n     * @returns {Object|null}\n     */\n    static parseSourceMaxFrameHeight(jingleContents) {\n        const receiverConstraints = [];\n        const sourceFrameHeightSel = jingleContents.find('>content[name=\"video\"]>source-frame-height');\n        let maxHeight, sourceName;\n\n        if (sourceFrameHeightSel.length) {\n            sourceFrameHeightSel.each((_, source) => {\n                sourceName = source.getAttribute('sourceName');\n                maxHeight = source.getAttribute('maxHeight');\n                receiverConstraints.push({\n                    maxHeight,\n                    sourceName\n                });\n            });\n\n            return receiverConstraints;\n        }\n\n        return null;\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Creates new <tt>JingleSessionPC</tt>\n     * @param {string} sid the Jingle Session ID - random string which identifies the session\n     * @param {string} localJid our JID\n     * @param {string} remoteJid remote peer JID\n     * @param {XmppConnection} connection - The XMPP connection instance.\n     * @param mediaConstraints the media constraints object passed to createOffer/Answer, as defined\n     * by the WebRTC standard\n     * @param pcConfig The {@code RTCConfiguration} to use for the WebRTC peer connection.\n     * @param {boolean} isP2P indicates whether this instance is meant to be used in a direct, peer to\n     * peer connection or <tt>false</tt> if it's a JVB connection.\n     * @param {boolean} isInitiator indicates if it will be the side which initiates the session.\n     * @constructor\n     *\n     * @implements {SignalingLayer}\n     */\n    constructor(\n            sid,\n            localJid,\n            remoteJid,\n            connection,\n            mediaConstraints,\n            pcConfig,\n            isP2P,\n            isInitiator) {\n        super(\n            sid,\n            localJid,\n            remoteJid, connection, mediaConstraints, pcConfig, isInitiator);\n\n        /**\n         * The bridge session's identifier. One Jingle session can during\n         * it's lifetime participate in multiple bridge sessions managed by\n         * Jicofo. A new bridge session is started whenever Jicofo sends\n         * 'session-initiate' or 'transport-replace'.\n         *\n         * @type {?string}\n         * @private\n         */\n        this._bridgeSessionId = null;\n\n        /**\n         * The oldest SDP passed to {@link notifyMySSRCUpdate} while the XMPP connection was offline that will be\n         * used to update Jicofo once the XMPP connection goes back online.\n         * @type {SDP|undefined}\n         * @private\n         */\n        this._cachedOldLocalSdp = undefined;\n\n        /**\n         * The latest SDP passed to {@link notifyMySSRCUpdate} while the XMPP connection was offline that will be\n         * used to update Jicofo once the XMPP connection goes back online.\n         * @type {SDP|undefined}\n         * @private\n         */\n        this._cachedNewLocalSdp = undefined;\n\n        /**\n         * Stores result of {@link window.performance.now()} at the time when\n         * ICE enters 'checking' state.\n         * @type {number|null} null if no value has been stored yet\n         * @private\n         */\n        this._iceCheckingStartedTimestamp = null;\n\n        /**\n         * Stores result of {@link window.performance.now()} at the time when\n         * first ICE candidate is spawned by the peerconnection to mark when\n         * ICE gathering started. That's, because ICE gathering state changed\n         * events are not supported by most of the browsers, so we try something\n         * that will work everywhere. It may not be as accurate, but given that\n         * 'host' candidate usually comes first, the delay should be minimal.\n         * @type {number|null} null if no value has been stored yet\n         * @private\n         */\n        this._gatheringStartedTimestamp = null;\n\n        /**\n         * Local preference for the receive video max frame height.\n         *\n         * @type {Number|undefined}\n         */\n        this.localRecvMaxFrameHeight = undefined;\n\n        /**\n         * Receiver constraints (max height) set by the application per remote source. Will be used for p2p connection\n         * in lieu of localRecvMaxFrameHeight when source-name signaling is enabled.\n         *\n         * @type {Map<string, number>}\n         */\n        this._sourceReceiverConstraints = undefined;\n\n        /**\n         * Indicates whether or not this session is willing to send/receive\n         * video media. When set to <tt>false</tt> the underlying peer\n         * connection will disable local video transfer and the remote peer will\n         * be will be asked to stop sending video via 'content-modify' IQ\n         * (the senders attribute of video contents will be adjusted\n         * accordingly). Note that this notification is sent only in P2P\n         * session, because Jicofo does not support it yet. Obviously when\n         * the value is changed from <tt>false</tt> to <tt>true</tt> another\n         * notification will be sent to resume video transfer on the remote\n         * side.\n         * @type {boolean}\n         * @private\n         */\n        this._localVideoActive = true;\n\n        /**\n         * Indicates whether or not the remote peer has video transfer active.\n         * When set to <tt>true</tt> it means that remote peer is neither\n         * sending nor willing to receive video. In such case we'll ask\n         * our peerconnection to stop sending video by calling\n         * {@link TraceablePeerConnection.setVideoTransferActive} with\n         * <tt>false</tt>.\n         * @type {boolean}\n         * @private\n         */\n        this._remoteVideoActive = true;\n\n        /**\n         * Marks that ICE gathering duration has been reported already. That\n         * prevents reporting it again, after eventual 'transport-replace' (JVB\n         * conference migration/ICE restart).\n         * @type {boolean}\n         * @private\n         */\n        this._gatheringReported = false;\n\n        this.lasticecandidate = false;\n        this.closed = false;\n\n        /**\n         * Indicates whether or not this <tt>JingleSessionPC</tt> is used in\n         * a peer to peer type of session.\n         * @type {boolean} <tt>true</tt> if it's a peer to peer\n         * session or <tt>false</tt> if it's a JVB session\n         */\n        this.isP2P = isP2P;\n\n        /**\n         * Remote preference for the receive video max frame height.\n         *\n         * @type {Number|undefined}\n         */\n        this.remoteRecvMaxFrameHeight = undefined;\n\n        /**\n         * Remote preference for the receive video max frame heights when source-name signaling is enabled.\n         *\n         * @type {Map<string, number>|undefined}\n         */\n        this.remoteSourceMaxFrameHeights = undefined;\n\n        /**\n         * The queue used to serialize operations done on the peerconnection.\n         *\n         * @type {AsyncQueue}\n         */\n        this.modificationQueue = new AsyncQueue();\n\n        /**\n         * Flag used to guarantee that the connection established event is\n         * triggered just once.\n         * @type {boolean}\n         */\n        this.wasConnected = false;\n\n        /**\n         * Keeps track of how long (in ms) it took from ICE start to ICE\n         * connect.\n         *\n         * @type {number}\n         */\n        this.establishmentDuration = undefined;\n\n        this._xmppListeners = [];\n        this._xmppListeners.push(\n            connection.addEventListener(\n                XmppConnection.Events.CONN_STATUS_CHANGED,\n                this.onXmppStatusChanged.bind(this))\n        );\n\n        this._removeSenderVideoConstraintsChangeListener = undefined;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Checks whether or not this session instance is still operational.\n     * @private\n     * @returns {boolean} {@code true} if operation or {@code false} otherwise.\n     */\n    _assertNotEnded() {\n        return this.state !== JingleSessionState.ENDED;\n    }\n\n    /**\n     * @inheritDoc\n     * @param {JingleSessionPCOptions} options  - a set of config options.\n     */\n    doInitialize(options) {\n        this.failICE = Boolean(options.failICE);\n        this.lasticecandidate = false;\n        this.options = options;\n\n        /**\n         * {@code true} if reconnect is in progress.\n         * @type {boolean}\n         */\n        this.isReconnect = false;\n\n        /**\n         * Set to {@code true} if the connection was ever stable\n         * @type {boolean}\n         */\n        this.wasstable = false;\n        this.webrtcIceUdpDisable = Boolean(options.webrtcIceUdpDisable);\n        this.webrtcIceTcpDisable = Boolean(options.webrtcIceTcpDisable);\n\n        const pcOptions = { disableRtx: options.disableRtx };\n\n        if (options.gatherStats) {\n            pcOptions.maxstats = DEFAULT_MAX_STATS;\n        }\n        pcOptions.capScreenshareBitrate = false;\n        pcOptions.enableInsertableStreams = options.enableInsertableStreams;\n        pcOptions.videoQuality = options.videoQuality;\n        pcOptions.forceTurnRelay = options.forceTurnRelay;\n        pcOptions.audioQuality = options.audioQuality;\n        pcOptions.usesUnifiedPlan = this.usesUnifiedPlan\n            = browser.supportsUnifiedPlan()\n                && (browser.isFirefox()\n                    || browser.isWebKitBased()\n                    || (browser.isChromiumBased()\n\n                        // Provide a way to control the behavior for jvb and p2p connections independently.\n                        && this.isP2P\n                        ? options.p2p?.enableUnifiedOnChrome ?? true\n                        : options.enableUnifiedOnChrome ?? true));\n\n        if (this.isP2P) {\n            // simulcast needs to be disabled for P2P (121) calls\n            pcOptions.disableSimulcast = true;\n            const abtestSuspendVideo = this._abtestSuspendVideoEnabled(options);\n\n            if (typeof abtestSuspendVideo !== 'undefined') {\n                pcOptions.abtestSuspendVideo = abtestSuspendVideo;\n            }\n        } else {\n            // H264 does not support simulcast, so it needs to be disabled.\n            pcOptions.disableSimulcast\n                = options.disableSimulcast\n                    || (options.preferH264 && !options.disableH264)\n                    || (options.videoQuality && options.videoQuality.preferredCodec === CodecMimeType.H264);\n\n            // Disable simulcast for low fps screenshare and enable it for high fps screenshare.\n            // testing.capScreenshareBitrate config.js setting has now been deprecated.\n            pcOptions.capScreenshareBitrate = pcOptions.disableSimulcast\n                || !(typeof options.desktopSharingFrameRate?.max === 'number'\n                    && options.desktopSharingFrameRate?.max > SS_DEFAULT_FRAME_RATE);\n\n            // add the capScreenshareBitrate to the permanent properties so that it's included with every event that we\n            // send to the analytics backend.\n            Statistics.analytics.addPermanentProperties({ capScreenshareBitrate: pcOptions.capScreenshareBitrate });\n        }\n\n        if (options.startSilent) {\n            pcOptions.startSilent = true;\n        }\n\n        this.peerconnection\n            = this.rtc.createPeerConnection(\n                    this._signalingLayer,\n                    this.pcConfig,\n                    this.isP2P,\n                    pcOptions);\n\n        this.peerconnection.onicecandidate = ev => {\n            if (!ev) {\n                // There was an incomplete check for ev before which left\n                // the last line of the function unprotected from a potential\n                // throw of an exception. Consequently, it may be argued that\n                // the check is unnecessary. Anyway, I'm leaving it and making\n                // the check complete.\n                return;\n            }\n\n            // XXX this is broken, candidate is not parsed.\n            const candidate = ev.candidate;\n            const now = window.performance.now();\n\n            if (candidate) {\n                if (this._gatheringStartedTimestamp === null) {\n                    this._gatheringStartedTimestamp = now;\n                }\n\n                // Discard candidates of disabled protocols.\n                let protocol = candidate.protocol;\n\n                if (typeof protocol === 'string') {\n                    protocol = protocol.toLowerCase();\n                    if (protocol === 'tcp' || protocol === 'ssltcp') {\n                        if (this.webrtcIceTcpDisable) {\n                            return;\n                        }\n                    } else if (protocol === 'udp') {\n                        if (this.webrtcIceUdpDisable) {\n                            return;\n                        }\n                    }\n                }\n            } else if (!this._gatheringReported) {\n                // End of gathering\n                Statistics.sendAnalytics(\n                    ICE_DURATION,\n                    {\n                        phase: 'gathering',\n                        value: now - this._gatheringStartedTimestamp,\n                        p2p: this.isP2P,\n                        initiator: this.isInitiator\n                    });\n                this._gatheringReported = true;\n            }\n            this.sendIceCandidate(candidate);\n        };\n\n        // Note there is a change in the spec about closed:\n        // This value moved into the RTCPeerConnectionState enum in\n        // the May 13, 2016 draft of the specification, as it reflects the state\n        // of the RTCPeerConnection, not the signaling connection. You now\n        // detect a closed connection by checking for connectionState to be\n        // \"closed\" instead.\n        // I suppose at some point this will be moved to onconnectionstatechange\n        this.peerconnection.onsignalingstatechange = () => {\n            if (this.peerconnection.signalingState === 'stable') {\n                this.wasstable = true;\n            } else if (this.peerconnection.signalingState === 'closed'\n                || this.peerconnection.connectionState === 'closed') {\n                this.room.eventEmitter.emit(XMPPEvents.SUSPEND_DETECTED, this);\n            }\n        };\n\n        /**\n         * The oniceconnectionstatechange event handler contains the code to\n         * execute when the iceconnectionstatechange event, of type Event,\n         * is received by this RTCPeerConnection. Such an event is sent when\n         * the value of RTCPeerConnection.iceConnectionState changes.\n         */\n        this.peerconnection.oniceconnectionstatechange = () => {\n            const now = window.performance.now();\n            let isStable = false;\n\n            if (!this.isP2P) {\n                this.room.connectionTimes[\n                    `ice.state.${this.peerconnection.iceConnectionState}`]\n                    = now;\n            }\n            logger.log(`(TIME) ICE ${this.peerconnection.iceConnectionState} ${this.isP2P ? 'P2P' : 'JVB'}:\\t`, now);\n\n            Statistics.sendAnalytics(\n                ICE_STATE_CHANGED,\n                {\n                    p2p: this.isP2P,\n                    state: this.peerconnection.iceConnectionState,\n                    'signaling_state': this.peerconnection.signalingState,\n                    reconnect: this.isReconnect,\n                    value: now\n                });\n\n            this.room.eventEmitter.emit(\n                XMPPEvents.ICE_CONNECTION_STATE_CHANGED,\n                this,\n                this.peerconnection.iceConnectionState);\n            switch (this.peerconnection.iceConnectionState) {\n            case 'checking':\n                this._iceCheckingStartedTimestamp = now;\n                break;\n            case 'connected':\n                // Informs interested parties that the connection has been restored. This includes the case when\n                // media connection to the bridge has been restored after an ICE failure by using session-terminate.\n                if (this.peerconnection.signalingState === 'stable') {\n                    isStable = true;\n                    const usesTerminateForRestart = !this.options.enableIceRestart\n                        && this.room.supportsRestartByTerminate();\n\n                    if (this.isReconnect || usesTerminateForRestart) {\n                        this.room.eventEmitter.emit(\n                            XMPPEvents.CONNECTION_RESTORED, this);\n                    }\n                }\n\n                // Add a workaround for an issue on chrome in Unified plan when the local endpoint is the offerer.\n                // The 'signalingstatechange' event for 'stable' is handled after the 'iceconnectionstatechange' event\n                // for 'completed' is handled by the client. This prevents the client from firing a\n                // CONNECTION_ESTABLISHED event for the p2p session. As a result, the offerer continues to stay on the\n                // jvb connection while the remote peer switches to the p2p connection breaking the media flow between\n                // the endpoints.\n                // TODO - file a chromium bug and add the information here.\n                if (!this.wasConnected\n                    && (this.wasstable\n                        || isStable\n                        || (this.usesUnifiedPlan && this.isInitiator && browser.isChromiumBased()))) {\n\n                    Statistics.sendAnalytics(\n                        ICE_DURATION,\n                        {\n                            phase: 'checking',\n                            value: now - this._iceCheckingStartedTimestamp,\n                            p2p: this.isP2P,\n                            initiator: this.isInitiator\n                        });\n\n                    // Switch between ICE gathering and ICE checking whichever\n                    // started first (scenarios are different for initiator\n                    // vs responder)\n                    const iceStarted\n                        = Math.min(\n                            this._iceCheckingStartedTimestamp,\n                            this._gatheringStartedTimestamp);\n\n                    this.establishmentDuration = now - iceStarted;\n\n                    Statistics.sendAnalytics(\n                        ICE_DURATION,\n                        {\n                            phase: 'establishment',\n                            value: this.establishmentDuration,\n                            p2p: this.isP2P,\n                            initiator: this.isInitiator\n                        });\n\n                    this.wasConnected = true;\n                    this.room.eventEmitter.emit(\n                        XMPPEvents.CONNECTION_ESTABLISHED, this);\n                }\n                this.isReconnect = false;\n                break;\n            case 'disconnected':\n                this.isReconnect = true;\n\n                // Informs interested parties that the connection has been\n                // interrupted.\n                if (this.wasstable) {\n                    this.room.eventEmitter.emit(\n                        XMPPEvents.CONNECTION_INTERRUPTED, this);\n                }\n                break;\n            case 'failed':\n                this.room.eventEmitter.emit(\n                    XMPPEvents.CONNECTION_ICE_FAILED, this);\n                break;\n            }\n        };\n\n\n        /**\n         * The connection state event is fired whenever the aggregate of underlying\n         * transports change their state.\n         */\n        this.peerconnection.onconnectionstatechange = () => {\n            const icestate = this.peerconnection.iceConnectionState;\n\n            switch (this.peerconnection.connectionState) {\n            case 'failed':\n                // Since version 76 Chrome no longer switches ICE connection\n                // state to failed (see\n                // https://bugs.chromium.org/p/chromium/issues/detail?id=982793\n                // for details) we use this workaround to recover from lost connections\n                if (icestate === 'disconnected') {\n                    this.room.eventEmitter.emit(\n                        XMPPEvents.CONNECTION_ICE_FAILED, this);\n                }\n                break;\n            }\n        };\n\n        /**\n         * The negotiationneeded event is fired whenever we shake the media on the\n         * RTCPeerConnection object.\n         */\n        this.peerconnection.onnegotiationneeded = () => {\n            const state = this.peerconnection.signalingState;\n            const remoteDescription = this.peerconnection.remoteDescription;\n\n            if (this.usesUnifiedPlan\n                && !this.isP2P\n                && state === 'stable'\n                && remoteDescription\n                && typeof remoteDescription.sdp === 'string') {\n                logger.info(`${this} onnegotiationneeded fired on ${this.peerconnection}`);\n\n                const workFunction = finishedCallback => {\n                    const oldSdp = new SDP(this.peerconnection.localDescription.sdp);\n\n                    this._renegotiate()\n                        .then(() => this.peerconnection.configureSenderVideoEncodings())\n                        .then(() => {\n                            const newSdp = new SDP(this.peerconnection.localDescription.sdp);\n\n                            this.notifyMySSRCUpdate(oldSdp, newSdp);\n                        })\n                        .then(() => finishedCallback(), error => finishedCallback(error));\n                };\n\n                this.modificationQueue.push(\n                    workFunction,\n                    error => {\n                        if (error) {\n                            logger.error(`${this} onnegotiationneeded error`, error);\n                        } else {\n                            logger.debug(`${this} onnegotiationneeded executed - OK`);\n                        }\n                    });\n            }\n        };\n    }\n\n    /**\n     * Remote preference for receive video max frame height.\n     *\n     * @returns {Number|undefined}\n     */\n    getRemoteRecvMaxFrameHeight() {\n        if (this.isP2P) {\n            return this.remoteRecvMaxFrameHeight;\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Remote preference for receive video max frame heights when source-name signaling is enabled.\n     *\n     * @returns {Map<string, number>|undefined}\n     */\n    getRemoteSourcesRecvMaxFrameHeight() {\n        if (this.isP2P) {\n            return this.remoteSourceMaxFrameHeights;\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Sends given candidate in Jingle 'transport-info' message.\n     * @param {RTCIceCandidate} candidate the WebRTC ICE candidate instance\n     * @private\n     */\n    sendIceCandidate(candidate) {\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n        if (candidate && candidate.candidate.length && !this.lasticecandidate) {\n            const ice = SDPUtil.iceparams(localSDP.media[candidate.sdpMLineIndex], localSDP.session);\n            const jcand = SDPUtil.candidateToJingle(candidate.candidate);\n\n            if (!(ice && jcand)) {\n                const errorMesssage = 'failed to get ice && jcand';\n\n                GlobalOnErrorHandler.callErrorHandler(new Error(errorMesssage));\n                logger.error(errorMesssage);\n\n                return;\n            }\n            ice.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\n\n            if (this.usedrip) {\n                if (this.dripContainer.length === 0) {\n                    setTimeout(() => {\n                        if (this.dripContainer.length === 0) {\n                            return;\n                        }\n                        this.sendIceCandidates(this.dripContainer);\n                        this.dripContainer = [];\n                    }, ICE_CAND_GATHERING_TIMEOUT);\n                }\n                this.dripContainer.push(candidate);\n            } else {\n                this.sendIceCandidates([ candidate ]);\n            }\n        } else {\n            logger.log(`${this} sendIceCandidate: last candidate`);\n\n            // FIXME: remember to re-think in ICE-restart\n            this.lasticecandidate = true;\n        }\n    }\n\n    /**\n     * Sends given candidates in Jingle 'transport-info' message.\n     * @param {Array<RTCIceCandidate>} candidates an array of the WebRTC ICE\n     * candidate instances\n     * @private\n     */\n    sendIceCandidates(candidates) {\n        if (!this._assertNotEnded('sendIceCandidates')) {\n\n            return;\n        }\n\n        logger.log(`${this} sendIceCandidates ${JSON.stringify(candidates)}`);\n        const cand = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\n                action: 'transport-info',\n                initiator: this.initiatorJid,\n                sid: this.sid });\n\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n        for (let mid = 0; mid < localSDP.media.length; mid++) {\n            const cands = candidates.filter(el => el.sdpMLineIndex === mid);\n            const mline\n                = SDPUtil.parseMLine(localSDP.media[mid].split('\\r\\n')[0]);\n\n            if (cands.length > 0) {\n                const ice\n                    = SDPUtil.iceparams(localSDP.media[mid], localSDP.session);\n\n                ice.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\n                cand.c('content', {\n                    creator: this.initiatorJid === this.localJid\n                        ? 'initiator' : 'responder',\n                    name: cands[0].sdpMid ? cands[0].sdpMid : mline.media\n                }).c('transport', ice);\n                for (let i = 0; i < cands.length; i++) {\n                    const candidate\n                        = SDPUtil.candidateToJingle(cands[i].candidate);\n\n                    // Mangle ICE candidate if 'failICE' test option is enabled\n\n                    if (this.failICE) {\n                        candidate.ip = '1.1.1.1';\n                    }\n                    cand.c('candidate', candidate).up();\n                }\n\n                // add fingerprint\n                const fingerprintLine\n                    = SDPUtil.findLine(\n                        localSDP.media[mid],\n                        'a=fingerprint:', localSDP.session);\n\n                if (fingerprintLine) {\n                    const tmp = SDPUtil.parseFingerprint(fingerprintLine);\n\n                    tmp.required = true;\n                    cand.c(\n                        'fingerprint',\n                        { xmlns: 'urn:xmpp:jingle:apps:dtls:0' })\n                        .t(tmp.fingerprint);\n                    delete tmp.fingerprint;\n                    cand.attrs(tmp);\n                    cand.up();\n                }\n                cand.up(); // transport\n                cand.up(); // content\n            }\n        }\n\n        // might merge last-candidate notification into this, but it is called\n        // a lot later. See webrtc issue #2340\n        // logger.log('was this the last candidate', this.lasticecandidate);\n        this.connection.sendIQ(\n            cand, null, this.newJingleErrorHandler(cand), IQ_TIMEOUT);\n    }\n\n    /**\n     * Sends Jingle 'session-info' message which includes custom Jitsi Meet\n     * 'ice-state' element with the text value 'failed' to let Jicofo know\n     * that the ICE connection has entered the failed state. It can then\n     * choose to re-create JVB channels and send 'transport-replace' to\n     * retry the connection.\n     */\n    sendIceFailedNotification() {\n        const sessionInfo\n            = $iq({\n                to: this.remoteJid,\n                type: 'set' })\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\n                action: 'session-info',\n                initiator: this.initiatorJid,\n                sid: this.sid })\n            .c('ice-state', { xmlns: 'http://jitsi.org/protocol/focus' })\n            .t('failed')\n            .up();\n\n        this._bridgeSessionId\n            && sessionInfo.c(\n                'bridge-session', {\n                    xmlns: 'http://jitsi.org/protocol/focus',\n                    id: this._bridgeSessionId\n                });\n\n        this.connection.sendIQ2(\n            sessionInfo, {\n                /*\n                 * This message will be often sent when there are connectivity\n                 * issues, so make it slightly longer than Prosody's default BOSH\n                 * inactivity timeout of 60 seconds.\n                 */\n                timeout: 65\n            })\n            .catch(this.newJingleErrorHandler(sessionInfo));\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    addIceCandidates(elem) {\n        if (this.peerconnection.signalingState === 'closed') {\n            logger.warn(`${this} Ignored add ICE candidate when in closed state`);\n\n            return;\n        }\n\n        const iceCandidates = [];\n\n        elem.find('>content>transport>candidate')\n            .each((idx, candidate) => {\n                let line = SDPUtil.candidateFromJingle(candidate);\n\n                line = line.replace('\\r\\n', '').replace('a=', '');\n\n                // FIXME this code does not care to handle\n                // non-bundle transport\n                const rtcCandidate = new RTCIceCandidate({\n                    sdpMLineIndex: 0,\n\n                    // FF comes up with more complex names like audio-23423,\n                    // Given that it works on both Chrome and FF without\n                    // providing it, let's leave it like this for the time\n                    // being...\n                    // sdpMid: 'audio',\n                    sdpMid: '',\n                    candidate: line\n                });\n\n                iceCandidates.push(rtcCandidate);\n            });\n\n        if (!iceCandidates.length) {\n            logger.error(`${this} No ICE candidates to add ?`, elem[0] && elem[0].outerHTML);\n\n            return;\n        }\n\n        // We want to have this task queued, so that we know it is executed,\n        // after the initial sRD/sLD offer/answer cycle was done (based on\n        // the assumption that candidates are spawned after the offer/answer\n        // and XMPP preserves order).\n        const workFunction = finishedCallback => {\n            for (const iceCandidate of iceCandidates) {\n                this.peerconnection.addIceCandidate(iceCandidate)\n                    .then(\n                        () => logger.debug(`${this} addIceCandidate ok!`),\n                        err => logger.error(`${this} addIceCandidate failed!`, err));\n            }\n\n            finishedCallback();\n            logger.debug(`${this} ICE candidates task finished`);\n        };\n\n        logger.debug(`${this} Queued add (${iceCandidates.length}) ICE candidates task`);\n        this.modificationQueue.push(workFunction);\n    }\n\n    /**\n     *\n     * @param contents\n     */\n    readSsrcInfo(contents) {\n        const ssrcs = $(contents).find('>description>source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\n\n        ssrcs.each((i, ssrcElement) => {\n            const ssrc = Number(ssrcElement.getAttribute('ssrc'));\n\n            if (FeatureFlags.isSourceNameSignalingEnabled()) {\n                if (ssrcElement.hasAttribute('name')) {\n                    const sourceName = ssrcElement.getAttribute('name');\n\n                    this._signalingLayer.setTrackSourceName(ssrc, sourceName);\n                }\n            }\n\n            if (this.isP2P) {\n                // In P2P all SSRCs are owner by the remote peer\n                this._signalingLayer.setSSRCOwner(ssrc, Strophe.getResourceFromJid(this.remoteJid));\n            } else {\n                $(ssrcElement)\n                    .find('>ssrc-info[xmlns=\"http://jitsi.org/jitmeet\"]')\n                    .each((i3, ssrcInfoElement) => {\n                        const owner = ssrcInfoElement.getAttribute('owner');\n\n                        if (owner?.length) {\n                            if (isNaN(ssrc) || ssrc < 0) {\n                                logger.warn(`${this} Invalid SSRC ${ssrc} value received for ${owner}`);\n                            } else {\n                                this._signalingLayer.setSSRCOwner(ssrc, getEndpointId(owner));\n                            }\n                        }\n                    });\n            }\n        });\n    }\n\n    /**\n     * Makes the underlying TraceablePeerConnection generate new SSRC for\n     * the recvonly video stream.\n     * @deprecated\n     */\n    generateRecvonlySsrc() {\n        if (this.peerconnection) {\n            this.peerconnection.generateRecvonlySsrc();\n        } else {\n            logger.error(`${this} Unable to generate recvonly SSRC - no peerconnection`);\n        }\n    }\n\n    /**\n     * Returns the video codec configured as the preferred codec on the peerconnection.\n     */\n    getConfiguredVideoCodec() {\n        return this.peerconnection.getConfiguredVideoCodec();\n    }\n\n    /**\n     * Accepts incoming Jingle 'session-initiate' and should send 'session-accept' in result.\n     *\n     * @param jingleOffer jQuery selector pointing to the jingle element of the offer IQ\n     * @param success callback called when we accept incoming session successfully and receive RESULT packet to\n     * 'session-accept' sent.\n     * @param failure function(error) called if for any reason we fail to accept the incoming offer. 'error' argument\n     * can be used to log some details about the error.\n     * @param {Array<JitsiLocalTrack>} [localTracks] the optional list of the local tracks that will be added, before\n     * the offer/answer cycle executes. We allow the localTracks to optionally be passed in so that the addition of the\n     * local tracks and the processing of the initial offer can all be done atomically. We want to make sure that any\n     * other operations which originate in the XMPP Jingle messages related with this session to be executed with an\n     * assumption that the initial offer/answer cycle has been executed already.\n     */\n    acceptOffer(jingleOffer, success, failure, localTracks) {\n        this.setOfferAnswerCycle(\n            jingleOffer,\n            () => {\n                // FIXME we may not care about RESULT packet for session-accept\n                // then we should either call 'success' here immediately or\n                // modify sendSessionAccept method to do that\n                this.sendSessionAccept(() => {\n                    success();\n                    this.room.eventEmitter.emit(XMPPEvents.SESSION_ACCEPT, this);\n\n                    // The first video track is added to the peerconnection and signaled as part of the session-accept.\n                    // Add secondary video tracks (that were already added to conference) to the peerconnection here.\n                    // This will happen when someone shares a secondary source to a two people call, the other user\n                    // leaves and joins the call again, a new peerconnection is created for p2p/jvb connection. At this\n                    // point, there are 2 video tracks which need to be signaled to the remote peer.\n                    const videoTracks = localTracks.filter(track => track.getType() === MediaType.VIDEO);\n\n                    videoTracks.length && videoTracks.splice(0, 1);\n                    if (FeatureFlags.isMultiStreamSupportEnabled() && videoTracks.length) {\n                        this.addTracks(videoTracks);\n                    }\n                },\n                error => {\n                    failure(error);\n                    this.room.eventEmitter.emit(XMPPEvents.SESSION_ACCEPT_ERROR, this, error);\n                });\n            },\n            failure,\n            localTracks);\n    }\n\n    /**\n     * Creates an offer and sends Jingle 'session-initiate' to the remote peer.\n     *\n     * @param {Array<JitsiLocalTrack>} localTracks the local tracks that will be added, before the offer/answer cycle\n     * executes (for the local track addition to be an atomic operation together with the offer/answer).\n     */\n    invite(localTracks = []) {\n        if (!this.isInitiator) {\n            throw new Error('Trying to invite from the responder session');\n        }\n        const workFunction = finishedCallback => {\n            const addTracks = [];\n\n            for (const track of localTracks) {\n                addTracks.push(this.peerconnection.addTrack(track, this.isInitiator));\n            }\n\n            Promise.all(addTracks)\n                .then(() => this.peerconnection.createOffer(this.mediaConstraints))\n                .then(offerSdp => this.peerconnection.setLocalDescription(offerSdp))\n                .then(() => {\n                    // NOTE that the offer is obtained from the localDescription getter as it needs to go though\n                    // the transformation chain.\n                    this.sendSessionInitiate(this.peerconnection.localDescription.sdp);\n                })\n                .then(() => finishedCallback(), error => finishedCallback(error));\n        };\n\n        logger.debug(`${this} Queued invite task`);\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error(`${this} invite error`, error);\n                } else {\n                    logger.debug(`${this} invite executed - OK`);\n                }\n            });\n    }\n\n    /**\n     * Sends 'session-initiate' to the remote peer.\n     *\n     * NOTE this method is synchronous and we're not waiting for the RESULT\n     * response which would delay the startup process.\n     *\n     * @param {string} offerSdp  - The local session description which will be\n     * used to generate an offer.\n     * @private\n     */\n    sendSessionInitiate(offerSdp) {\n        let init = $iq({\n            to: this.remoteJid,\n            type: 'set'\n        }).c('jingle', {\n            xmlns: 'urn:xmpp:jingle:1',\n            action: 'session-initiate',\n            initiator: this.initiatorJid,\n            sid: this.sid\n        });\n\n        new SDP(offerSdp).toJingle(\n            init,\n            this.isInitiator ? 'initiator' : 'responder');\n        init = init.tree();\n        logger.debug(`${this} Session-initiate: `, init);\n        this.connection.sendIQ(init,\n            () => {\n                logger.info(`${this} Got RESULT for \"session-initiate\"`);\n            },\n            error => {\n                logger.error(`${this} \"session-initiate\" error`, error);\n            },\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Sets the answer received from the remote peer as the remote description.\n     *\n     * @param jingleAnswer\n     */\n    setAnswer(jingleAnswer) {\n        if (!this.isInitiator) {\n            throw new Error('Trying to set an answer on the responder session');\n        }\n\n        const workFunction = finishedCallback => {\n            const newRemoteSdp = this._processNewJingleOfferIq(jingleAnswer);\n            const oldLocalSdp = new SDP(this.peerconnection.localDescription.sdp);\n            const remoteDescription = new RTCSessionDescription({\n                type: 'answer',\n                sdp: newRemoteSdp.raw\n            });\n\n            this.peerconnection.setRemoteDescription(remoteDescription)\n                .then(() => {\n                    if (this.state === JingleSessionState.PENDING) {\n                        this.state = JingleSessionState.ACTIVE;\n                        const newLocalSdp = new SDP(this.peerconnection.localDescription.sdp);\n\n                        this.sendContentModify();\n                        this.notifyMySSRCUpdate(oldLocalSdp, newLocalSdp);\n                    }\n                })\n                .then(() => finishedCallback(), error => finishedCallback(error));\n        };\n\n        logger.debug(`${this} Queued setAnswer task`);\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error(`${this} setAnswer task failed: ${error}`);\n                } else {\n                    logger.debug(`${this} setAnswer task done`);\n                }\n            });\n    }\n\n    /**\n     * This is a setRemoteDescription/setLocalDescription cycle which starts at converting Strophe Jingle IQ into\n     * remote offer SDP. Once converted, setRemoteDescription, createAnswer and setLocalDescription calls follow.\n     *\n     * @param jingleOfferAnswerIq jQuery selector pointing to the jingle element of the offer (or answer) IQ\n     * @param success callback called when sRD/sLD cycle finishes successfully.\n     * @param failure callback called with an error object as an argument if we fail at any point during setRD,\n     * createAnswer, setLD.\n     * @param {Array<JitsiLocalTrack>} [localTracks] the optional list of the local tracks that will be added, before\n     * the offer/answer cycle executes (for the local track addition to be an atomic operation together with the\n     * offer/answer).\n     */\n    setOfferAnswerCycle(jingleOfferAnswerIq, success, failure, localTracks = []) {\n        const workFunction = finishedCallback => {\n            const addTracks = [];\n            const audioTracks = localTracks.filter(track => track.getType() === MediaType.AUDIO);\n            const videoTracks = localTracks.filter(track => track.getType() === MediaType.VIDEO);\n            let tracks = localTracks;\n\n            // Add only 1 video track at a time. Adding 2 or more video tracks to the peerconnection at the same time\n            // makes the browser go into a renegotiation loop by firing 'negotiationneeded' event after every\n            // renegotiation.\n            if (FeatureFlags.isMultiStreamSupportEnabled() && videoTracks.length > 1) {\n                tracks = [ ...audioTracks, videoTracks[0] ];\n            }\n            for (const track of tracks) {\n                addTracks.push(this.peerconnection.addTrack(track, this.isInitiator));\n            }\n            const newRemoteSdp = this._processNewJingleOfferIq(jingleOfferAnswerIq);\n            const oldLocalSdp = this.peerconnection.localDescription.sdp;\n\n            const bridgeSession = $(jingleOfferAnswerIq)\n                .find('>bridge-session[xmlns=\"http://jitsi.org/protocol/focus\"]');\n            const bridgeSessionId = bridgeSession.attr('id');\n\n            if (bridgeSessionId !== this._bridgeSessionId) {\n                this._bridgeSessionId = bridgeSessionId;\n            }\n            const remoteDescription = new RTCSessionDescription({\n                type: 'offer',\n                sdp: newRemoteSdp.raw\n            });\n\n            Promise.all(addTracks)\n                .then(() => this._responderRenegotiate(remoteDescription))\n                .then(() => {\n                    if (this.state === JingleSessionState.PENDING) {\n                        this.state = JingleSessionState.ACTIVE;\n\n                        // #1 Sync up video transfer active/inactive only after the initial O/A cycle. We want to\n                        // adjust the video media direction only in the local SDP and the Jingle contents direction\n                        // included in the initial offer/answer is mapped to the remote SDP. Jingle 'content-modify'\n                        // IQ is processed in a way that it will only modify local SDP when remote peer is no longer\n                        // interested in receiving video content. Changing media direction in the remote SDP will mess\n                        // up our SDP translation chain (simulcast, video mute, RTX etc.)\n                        // #2 Sends the max frame height if it was set, before the session-initiate/accept\n                        if (this.isP2P\n                            && (!this._localVideoActive\n                                || this.localRecvMaxFrameHeight\n                                || this._sourceReceiverConstraints)) {\n                            this.sendContentModify();\n                        }\n                    }\n\n                    // Old local SDP will be available when we're setting answer for the first time, but not when offer\n                    // and it's fine since we're generating an answer now it will contain all our SSRCs.\n                    if (oldLocalSdp) {\n                        const newLocalSdp = new SDP(this.peerconnection.localDescription.sdp);\n\n                        this.notifyMySSRCUpdate(new SDP(oldLocalSdp), newLocalSdp);\n                    }\n                })\n                .then(() => finishedCallback(), error => finishedCallback(error));\n        };\n\n        logger.debug(`${this} Queued setOfferAnswerCycle task`);\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error(`${this} setOfferAnswerCycle task failed: ${error}`);\n                    failure(error);\n                } else {\n                    logger.debug(`${this} setOfferAnswerCycle task done`);\n                    success();\n                }\n            });\n    }\n\n    /**\n     * Updates the codecs on the peerconnection and initiates a renegotiation for the\n     * new codec config to take effect.\n     *\n     * @param {CodecMimeType} preferred the preferred codec.\n     * @param {CodecMimeType} disabled the codec that needs to be disabled.\n     */\n    setVideoCodecs(preferred = null, disabled = null) {\n        const current = this.peerconnection.getConfiguredVideoCodec();\n\n        if (this._assertNotEnded() && preferred !== current) {\n            logger.info(`${this} Switching video codec from ${current} to ${preferred}`);\n            this.peerconnection.setVideoCodecs(preferred, disabled);\n\n            // Initiate a renegotiate for the codec setting to take effect.\n            const workFunction = finishedCallback => {\n                this._renegotiate().then(\n                    () => {\n                        logger.debug(`${this} setVideoCodecs task is done`);\n\n                        return finishedCallback();\n                    }, error => {\n                        logger.error(`${this} setVideoCodecs task failed: ${error}`);\n\n                        return finishedCallback(error);\n                    });\n            };\n\n            logger.debug(`${this} Queued setVideoCodecs task`);\n\n            // Queue and execute\n            this.modificationQueue.push(workFunction);\n        }\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Although it states \"replace transport\" it does accept full Jingle offer\n     * which should contain new ICE transport details.\n     * @param jingleOfferElem an element Jingle IQ that contains new offer and\n     *        transport info.\n     * @param success callback called when we succeed to accept new offer.\n     * @param failure function(error) called when we fail to accept new offer.\n     */\n    replaceTransport(jingleOfferElem, success, failure) {\n        if (this.options.enableForcedReload) {\n            const sdp = new SDP(this.peerconnection.localDescription.sdp);\n\n            this.sendTransportAccept(sdp, success, failure);\n            this.room.eventEmitter.emit(XMPPEvents.CONNECTION_RESTARTED, this);\n\n            return;\n        }\n        this.room.eventEmitter.emit(XMPPEvents.ICE_RESTARTING, this);\n\n        // We need to first reject the 'data' section to have the SCTP stack\n        // cleaned up to signal the known data channel is now invalid. After\n        // that the original offer is set to have the SCTP connection\n        // established with the new bridge.\n        const originalOffer = jingleOfferElem.clone();\n\n        jingleOfferElem\n            .find('>content[name=\\'data\\']')\n            .attr('senders', 'rejected');\n\n        // Remove all remote sources in order to reset the client's state\n        // for the remote MediaStreams. When a conference is moved to\n        // another bridge it will start streaming with a sequence number\n        // that is not in sync with the most recently seen by the client.\n        // The symptoms include frozen or black video and lots of \"failed to\n        // unprotect SRTP packets\" in Chrome logs.\n        jingleOfferElem\n            .find('>content>description>source')\n            .remove();\n        jingleOfferElem\n            .find('>content>description>ssrc-group')\n            .remove();\n\n        // On the JVB it's not a real ICE restart and all layers are re-initialized from scratch as Jicofo does\n        // the restart by re-allocating new channels. Chrome (or WebRTC stack) needs to have the DTLS transport layer\n        // reset to start a new handshake with fresh DTLS transport on the bridge. Make it think that the DTLS\n        // fingerprint has changed by setting an all zeros key.\n        const newFingerprint = jingleOfferElem.find('>content>transport>fingerprint');\n\n        newFingerprint.attr('hash', 'sha-1');\n        newFingerprint.text('00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00');\n\n        // First set an offer with a rejected 'data' section\n        this.setOfferAnswerCycle(\n            jingleOfferElem,\n            () => {\n                // Now set the original offer(with the 'data' section)\n                this.setOfferAnswerCycle(\n                    originalOffer,\n                    () => {\n                        const localSDP\n                            = new SDP(this.peerconnection.localDescription.sdp);\n\n                        this.sendTransportAccept(localSDP, success, failure);\n\n                        this.room.eventEmitter.emit(\n                            XMPPEvents.ICE_RESTART_SUCCESS,\n                            this,\n                            originalOffer);\n                    },\n                    failure);\n            },\n            failure\n        );\n    }\n\n    /**\n     * Sends Jingle 'session-accept' message.\n     * @param {function()} success callback called when we receive 'RESULT'\n     *        packet for the 'session-accept'\n     * @param {function(error)} failure called when we receive an error response\n     *        or when the request has timed out.\n     * @private\n     */\n    sendSessionAccept(success, failure) {\n        // NOTE: since we're just reading from it, we don't need to be within\n        //  the modification queue to access the local description\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\n        const accept = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\n                action: 'session-accept',\n                initiator: this.initiatorJid,\n                responder: this.responderJid,\n                sid: this.sid });\n\n        if (this.webrtcIceTcpDisable) {\n            localSDP.removeTcpCandidates = true;\n        }\n        if (this.webrtcIceUdpDisable) {\n            localSDP.removeUdpCandidates = true;\n        }\n        if (this.failICE) {\n            localSDP.failICE = true;\n        }\n        localSDP.toJingle(\n            accept,\n            this.initiatorJid === this.localJid ? 'initiator' : 'responder');\n\n        logger.info(`${this} Sending session-accept`);\n        logger.debug(accept.tree());\n        this.connection.sendIQ(accept,\n            success,\n            this.newJingleErrorHandler(accept, error => {\n                failure(error);\n\n                // 'session-accept' is a critical timeout and we'll\n                // have to restart\n                this.room.eventEmitter.emit(\n                    XMPPEvents.SESSION_ACCEPT_TIMEOUT, this);\n            }),\n            IQ_TIMEOUT);\n\n        // XXX Videobridge needs WebRTC's answer (ICE ufrag and pwd, DTLS\n        // fingerprint and setup) ASAP in order to start the connection\n        // establishment.\n        //\n        // FIXME Flushing the connection at this point triggers an issue with\n        // BOSH request handling in Prosody on slow connections.\n        //\n        // The problem is that this request will be quite large and it may take\n        // time before it reaches Prosody. In the meantime Strophe may decide\n        // to send the next one. And it was observed that a small request with\n        // 'transport-info' usually follows this one. It does reach Prosody\n        // before the previous one was completely received. 'rid' on the server\n        // is increased and Prosody ignores the request with 'session-accept'.\n        // It will never reach Jicofo and everything in the request table is\n        // lost. Removing the flush does not guarantee it will never happen, but\n        // makes it much less likely('transport-info' is bundled with\n        // 'session-accept' and any immediate requests).\n        //\n        // this.connection.flush();\n    }\n\n    /**\n     * Will send 'content-modify' IQ in order to ask the remote peer to\n     * either stop or resume sending video media or to adjust sender's video constraints.\n     * @private\n     */\n    sendContentModify() {\n        const maxFrameHeight = this.localRecvMaxFrameHeight;\n        const senders = this._localVideoActive ? 'both' : 'none';\n\n        let sessionModify\n            = $iq({\n                to: this.remoteJid,\n                type: 'set'\n            })\n                .c('jingle', {\n                    xmlns: 'urn:xmpp:jingle:1',\n                    action: 'content-modify',\n                    initiator: this.initiatorJid,\n                    sid: this.sid\n                })\n                .c('content', {\n                    name: MediaType.VIDEO,\n                    senders\n                });\n\n        if (typeof maxFrameHeight !== 'undefined') {\n            sessionModify = sessionModify\n                .c('max-frame-height', { xmlns: 'http://jitsi.org/jitmeet/video' })\n                .t(maxFrameHeight);\n            logger.info(`${this} sending content-modify, video senders: ${senders},`\n                + ` max frame height: ${maxFrameHeight}`);\n        }\n\n        if (typeof this._sourceReceiverConstraints !== 'undefined') {\n            this._sourceReceiverConstraints.forEach((maxHeight, sourceName) => {\n                sessionModify\n                    .c('source-frame-height', { xmlns: 'http://jitsi.org/jitmeet/video' })\n                    .attrs({\n                        sourceName,\n                        maxHeight\n                    });\n\n                sessionModify.up();\n                logger.info(`${this} sending content-modify for source-name: ${sourceName}, maxHeight: ${maxHeight}`);\n            });\n        }\n\n        logger.debug(sessionModify.tree());\n\n        this.connection.sendIQ(\n            sessionModify,\n            null,\n            this.newJingleErrorHandler(sessionModify),\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Adjust the preference for max video frame height that the local party is willing to receive. Signals\n     * the remote party.\n     *\n     * @param {Number} maxFrameHeight - the new value to set.\n     * @param {Map<string, number>} sourceReceiverConstraints - The receiver constraints per source.\n     */\n    setReceiverVideoConstraint(maxFrameHeight, sourceReceiverConstraints) {\n        logger.info(`${this} setReceiverVideoConstraint - max frame height: ${maxFrameHeight}`\n            + ` sourceReceiverConstraints: ${sourceReceiverConstraints}`);\n\n        if (FeatureFlags.isSourceNameSignalingEnabled()) {\n            this._sourceReceiverConstraints = sourceReceiverConstraints;\n        } else {\n            this.localRecvMaxFrameHeight = maxFrameHeight;\n        }\n\n        if (this.isP2P) {\n            // Tell the remote peer about our receive constraint. If Jingle session is not yet active the state will\n            // be synced after offer/answer.\n            if (this.state === JingleSessionState.ACTIVE) {\n                this.sendContentModify();\n            }\n        }\n    }\n\n    /**\n     * Sends Jingle 'transport-accept' message which is a response to\n     * 'transport-replace'.\n     * @param localSDP the 'SDP' object with local session description\n     * @param success callback called when we receive 'RESULT' packet for\n     *        'transport-replace'\n     * @param failure function(error) called when we receive an error response\n     *        or when the request has timed out.\n     * @private\n     */\n    sendTransportAccept(localSDP, success, failure) {\n        const transportAccept = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'transport-accept',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            });\n\n        localSDP.media.forEach((medialines, idx) => {\n            const mline = SDPUtil.parseMLine(medialines.split('\\r\\n')[0]);\n\n            transportAccept.c('content',\n                {\n                    creator:\n                        this.initiatorJid === this.localJid\n                            ? 'initiator'\n                            : 'responder',\n                    name: mline.media\n                }\n            );\n            localSDP.transportToJingle(idx, transportAccept);\n            transportAccept.up();\n        });\n\n        logger.info(`${this} Sending transport-accept`);\n        logger.debug(transportAccept.tree());\n\n        this.connection.sendIQ(transportAccept,\n            success,\n            this.newJingleErrorHandler(transportAccept, failure),\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Sends Jingle 'transport-reject' message which is a response to\n     * 'transport-replace'.\n     * @param success callback called when we receive 'RESULT' packet for\n     *        'transport-replace'\n     * @param failure function(error) called when we receive an error response\n     *        or when the request has timed out.\n     *\n     * FIXME method should be marked as private, but there's some spaghetti that\n     *       needs to be fixed prior doing that\n     */\n    sendTransportReject(success, failure) {\n        // Send 'transport-reject', so that the focus will\n        // know that we've failed\n        const transportReject = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'transport-reject',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            });\n\n        logger.info(`${this} Sending 'transport-reject'`);\n        logger.debug(transportReject.tree());\n\n        this.connection.sendIQ(transportReject,\n            success,\n            this.newJingleErrorHandler(transportReject, failure),\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Sets the resolution constraint on the local camera track.\n     * @param {number} maxFrameHeight - The user preferred max frame height.\n     * @param {string} sourceName - The source name of the track.\n     * @returns {Promise} promise that will be resolved when the operation is\n     * successful and rejected otherwise.\n     */\n    setSenderVideoConstraint(maxFrameHeight, sourceName = null) {\n        if (this._assertNotEnded()) {\n            logger.info(`${this} setSenderVideoConstraint: ${maxFrameHeight}, sourceName: ${sourceName}`);\n\n            const jitsiLocalTrack = sourceName\n                ? this.rtc.getLocalVideoTracks().find(track => track.getSourceName() === sourceName)\n                : this.rtc.getLocalVideoTrack();\n\n            return this.peerconnection.setSenderVideoConstraints(maxFrameHeight, jitsiLocalTrack);\n        }\n\n        return Promise.resolve();\n    }\n\n    /**\n     * @inheritDoc\n     */\n    terminate(success, failure, options) {\n        if (this.state === JingleSessionState.ENDED) {\n            return;\n        }\n\n        if (!options || Boolean(options.sendSessionTerminate)) {\n            const sessionTerminate\n                = $iq({\n                    to: this.remoteJid,\n                    type: 'set'\n                })\n                    .c('jingle', {\n                        xmlns: 'urn:xmpp:jingle:1',\n                        action: 'session-terminate',\n                        initiator: this.initiatorJid,\n                        sid: this.sid\n                    })\n                    .c('reason')\n                    .c((options && options.reason) || 'success')\n                    .up();\n\n            if (options && options.reasonDescription) {\n                sessionTerminate\n                    .c('text')\n                    .t(options.reasonDescription)\n                    .up()\n                    .up();\n            } else {\n                sessionTerminate.up();\n            }\n\n            this._bridgeSessionId\n                && sessionTerminate.c(\n                    'bridge-session', {\n                        xmlns: 'http://jitsi.org/protocol/focus',\n                        id: this._bridgeSessionId,\n                        restart: options && options.requestRestart === true\n                    }).up();\n\n            logger.info(`${this} Sending session-terminate`);\n            logger.debug(sessionTerminate.tree());\n\n            this.connection.sendIQ(\n                sessionTerminate,\n                success,\n                this.newJingleErrorHandler(sessionTerminate, failure),\n                IQ_TIMEOUT);\n        } else {\n            logger.info(`${this} Skipped sending session-terminate`);\n        }\n\n        // this should result in 'onTerminated' being called by strope.jingle.js\n        this.connection.jingle.terminate(this.sid);\n    }\n\n    /**\n     *\n     * @param reasonCondition\n     * @param reasonText\n     */\n    onTerminated(reasonCondition, reasonText) {\n        // Do something with reason and reasonCondition when we start to care\n        // this.reasonCondition = reasonCondition;\n        // this.reasonText = reasonText;\n        logger.info(`${this} Session terminated`, reasonCondition, reasonText);\n\n        this._xmppListeners.forEach(removeListener => removeListener());\n        this._xmppListeners = [];\n\n        if (this._removeSenderVideoConstraintsChangeListener) {\n            this._removeSenderVideoConstraintsChangeListener();\n        }\n\n        this.close();\n    }\n\n    /**\n     * Handles XMPP connection state changes.\n     *\n     * @param {XmppConnection.Status} status - The new status.\n     */\n    onXmppStatusChanged(status) {\n        if (status === XmppConnection.Status.CONNECTED && this._cachedOldLocalSdp) {\n            logger.info(`${this} Sending SSRC update on reconnect`);\n            this.notifyMySSRCUpdate(\n                this._cachedOldLocalSdp,\n                this._cachedNewLocalSdp);\n        }\n    }\n\n    /**\n     * Parse the information from the xml sourceAddElem and translate it\n     *  into sdp lines\n     * @param {jquery xml element} sourceAddElem the source-add\n     *  element from jingle\n     * @param {SDP object} currentRemoteSdp the current remote\n     *  sdp (as of this new source-add)\n     * @returns {list} a list of SDP line strings that should\n     *  be added to the remote SDP\n     */\n    _parseSsrcInfoFromSourceAdd(sourceAddElem, currentRemoteSdp) {\n        const addSsrcInfo = [];\n        const self = this;\n\n        $(sourceAddElem).each((i1, content) => {\n            const name = $(content).attr('name');\n            let lines = '';\n\n            $(content)\n                .find('ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n                .each(function() {\n                    // eslint-disable-next-line no-invalid-this\n                    const semantics = this.getAttribute('semantics');\n                    const ssrcs\n                        = $(this) // eslint-disable-line no-invalid-this\n                            .find('>source')\n                            .map(function() {\n                                // eslint-disable-next-line no-invalid-this\n                                return this.getAttribute('ssrc');\n                            })\n                            .get();\n\n                    if (ssrcs.length) {\n                        lines += `a=ssrc-group:${semantics} ${ssrcs.join(' ')}\\r\\n`;\n                    }\n                });\n\n            // handles both >source and >description>source\n            const tmp\n                = $(content).find(\n                    'source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\n\n            /* eslint-disable no-invalid-this */\n            tmp.each(function() {\n                const ssrc = $(this).attr('ssrc');\n\n                if (currentRemoteSdp.containsSSRC(ssrc)) {\n\n                    // Do not print the warning for unified plan p2p case since ssrcs are never removed from the SDP.\n                    !(self.usesUnifiedPlan && self.isP2P)\n                        && logger.warn(`${self} Source-add request for existing SSRC: ${ssrc}`);\n\n                    return;\n                }\n\n                // eslint-disable-next-line newline-per-chained-call\n                $(this).find('>parameter').each(function() {\n                    lines += `a=ssrc:${ssrc} ${$(this).attr('name')}`;\n                    if ($(this).attr('value') && $(this).attr('value').length) {\n                        lines += `:${$(this).attr('value')}`;\n                    }\n                    lines += '\\r\\n';\n                });\n            });\n\n            let midFound = false;\n\n            /* eslint-enable no-invalid-this */\n            currentRemoteSdp.media.forEach((media, i2) => {\n                if (!SDPUtil.findLine(media, `a=mid:${name}`)) {\n                    return;\n                }\n                if (!addSsrcInfo[i2]) {\n                    addSsrcInfo[i2] = '';\n                }\n                addSsrcInfo[i2] += lines;\n                midFound = true;\n            });\n\n            // In p2p unified mode with multi-stream enabled, the new sources will have content name that doesn't exist\n            // in the current remote description. Add a new m-line for this newly signaled source.\n            if (!midFound && this.isP2P && FeatureFlags.isSourceNameSignalingEnabled()) {\n                addSsrcInfo[name] = lines;\n            }\n        });\n\n        return addSsrcInfo;\n    }\n\n    /**\n     * Handles a Jingle source-add message for this Jingle session.\n     * @param elem An array of Jingle \"content\" elements.\n     */\n    addRemoteStream(elem) {\n        this._addOrRemoveRemoteStream(true /* add */, elem);\n    }\n\n    /**\n     * Handles a Jingle source-remove message for this Jingle session.\n     * @param elem An array of Jingle \"content\" elements.\n     */\n    removeRemoteStream(elem) {\n        this._addOrRemoveRemoteStream(false /* remove */, elem);\n    }\n\n    /**\n     * Handles the deletion of SSRCs associated with a remote user from the remote description when the user leaves.\n     *\n     * @param {string} id Endpoint id of the participant that has left the call.\n     * @returns {void}\n     */\n    removeRemoteStreamsOnLeave(id) {\n        const workFunction = finishCallback => {\n            const removeSsrcInfo = this.peerconnection.getRemoteSourceInfoByParticipant(id);\n\n            if (removeSsrcInfo.length) {\n                const oldLocalSdp = new SDP(this.peerconnection.localDescription.sdp);\n                const newRemoteSdp = this._processRemoteRemoveSource(removeSsrcInfo);\n\n                this._renegotiate(newRemoteSdp.raw)\n                    .then(() => {\n                        const newLocalSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n                        this.notifyMySSRCUpdate(oldLocalSdp, newLocalSDP);\n                        finishCallback();\n                    })\n                    .catch(err => finishCallback(err));\n            } else {\n                finishCallback();\n            }\n        };\n\n        logger.debug(`${this} Queued removeRemoteStreamsOnLeave task for participant ${id}`);\n\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error(`${this} removeRemoteStreamsOnLeave error:`, error);\n                } else {\n                    logger.info(`${this} removeRemoteStreamsOnLeave done!`);\n                }\n            });\n    }\n\n    /**\n     * Handles either Jingle 'source-add' or 'source-remove' message for this\n     * Jingle session.\n     * @param {boolean} isAdd <tt>true</tt> for 'source-add' or <tt>false</tt>\n     * otherwise.\n     * @param {Array<Element>} elem an array of Jingle \"content\" elements.\n     * @private\n     */\n    _addOrRemoveRemoteStream(isAdd, elem) {\n        const logPrefix = isAdd ? 'addRemoteStream' : 'removeRemoteStream';\n\n        if (isAdd) {\n            this.readSsrcInfo(elem);\n        }\n\n        const workFunction = finishedCallback => {\n            if (!this.peerconnection.localDescription\n                || !this.peerconnection.localDescription.sdp) {\n                const errMsg = `${logPrefix} - localDescription not ready yet`;\n\n                logger.error(errMsg);\n                finishedCallback(errMsg);\n\n                return;\n            }\n\n            logger.log(`${this} Processing ${logPrefix}`);\n\n            const oldLocalSdp = new SDP(this.peerconnection.localDescription.sdp);\n            const sdp = new SDP(this.peerconnection.remoteDescription.sdp);\n            const addOrRemoveSsrcInfo\n                = isAdd\n                    ? this._parseSsrcInfoFromSourceAdd(elem, sdp)\n                    : this._parseSsrcInfoFromSourceRemove(elem, sdp);\n            const newRemoteSdp\n                = isAdd\n                    ? this._processRemoteAddSource(addOrRemoveSsrcInfo)\n                    : this._processRemoteRemoveSource(addOrRemoveSsrcInfo);\n            const remoteDescription = new RTCSessionDescription({\n                type: 'offer',\n                sdp: newRemoteSdp.raw\n            });\n\n            // Always initiate a sRD->cA->sLD cycle when a remote source is added or removed irrespective of whether\n            // the local endpoint is an initiator or responder. Fixes bugs on Chromium where decoders are not created\n            // when sLD->cO->sRD cycle is initiated for p2p cases when remote sources are received.\n            this._responderRenegotiate(remoteDescription).then(() => {\n                const newLocalSdp = new SDP(this.peerconnection.localDescription.sdp);\n\n                logger.log(`${this} ${logPrefix} - OK`);\n                this.notifyMySSRCUpdate(oldLocalSdp, newLocalSdp);\n                finishedCallback();\n            }, error => {\n                logger.error(`${this} ${logPrefix} failed:`, error);\n                finishedCallback(error);\n            });\n        };\n\n        logger.debug(`${this} Queued ${logPrefix} task`);\n\n        // Queue and execute\n        this.modificationQueue.push(workFunction);\n    }\n\n    /**\n     * Takes in a jingle offer iq, returns the new sdp offer\n     * @param {jquery xml element} offerIq the incoming offer\n     * @returns {SDP object} the jingle offer translated to SDP\n     */\n    _processNewJingleOfferIq(offerIq) {\n        const remoteSdp = new SDP('');\n\n        if (this.webrtcIceTcpDisable) {\n            remoteSdp.removeTcpCandidates = true;\n        }\n        if (this.webrtcIceUdpDisable) {\n            remoteSdp.removeUdpCandidates = true;\n        }\n        if (this.failICE) {\n            remoteSdp.failICE = true;\n        }\n\n        remoteSdp.fromJingle(offerIq);\n        this.readSsrcInfo($(offerIq).find('>content'));\n\n        return remoteSdp;\n    }\n\n    /**\n     * Remove the given ssrc lines from the current remote sdp\n     * @param {list} removeSsrcInfo a list of SDP line strings that\n     *  should be removed from the remote SDP\n     * @returns type {SDP Object} the new remote SDP (after removing the lines\n     *  in removeSsrcInfo\n     */\n    _processRemoteRemoveSource(removeSsrcInfo) {\n        const remoteSdp = this.usesUnifiedPlan\n            ? new SDP(this.peerconnection.peerconnection.remoteDescription.sdp)\n            : new SDP(this.peerconnection.remoteDescription.sdp);\n\n        removeSsrcInfo.forEach((lines, idx) => {\n            // eslint-disable-next-line no-param-reassign\n            lines = lines.split('\\r\\n');\n            lines.pop(); // remove empty last element;\n            if (this.usesUnifiedPlan) {\n                let mid;\n\n                lines.forEach(line => {\n                    mid = remoteSdp.media.findIndex(mLine => mLine.includes(line));\n\n                    if (mid > -1) {\n                        remoteSdp.media[mid] = remoteSdp.media[mid].replace(`${line}\\r\\n`, '');\n                        if (this.isP2P) {\n                            const mediaType = SDPUtil.parseMLine(remoteSdp.media[mid].split('\\r\\n')[0])?.media;\n                            const desiredDirection = this.peerconnection.getDesiredMediaDirection(mediaType, false);\n\n                            [ MediaDirection.SENDRECV, MediaDirection.SENDONLY ].forEach(direction => {\n                                remoteSdp.media[mid] = remoteSdp.media[mid]\n                                    .replace(`a=${direction}`, `a=${desiredDirection}`);\n                            });\n                        } else {\n                            // Jvb connections will have direction set to 'sendonly' for the remote sources.\n                            remoteSdp.media[mid] = remoteSdp.media[mid]\n                                .replace(`a=${MediaDirection.SENDONLY}`, `a=${MediaDirection.INACTIVE}`);\n                        }\n                    }\n                });\n\n                // Reject the m-line so that the browser removes the associated transceiver from the list of available\n                // transceivers. This will prevent the client from trying to re-use these inactive transceivers when\n                // additional video sources are added to the peerconnection.\n                if (mid > -1 && !this.isP2P && FeatureFlags.isMultiStreamSupportEnabled()) {\n                    const { media, port } = SDPUtil.parseMLine(remoteSdp.media[mid].split('\\r\\n')[0]);\n\n                    remoteSdp.media[mid] = remoteSdp.media[mid].replace(`m=${media} ${port}`, `m=${media} 0`);\n                }\n            } else {\n                lines.forEach(line => {\n                    remoteSdp.media[idx] = remoteSdp.media[idx].replace(`${line}\\r\\n`, '');\n                });\n            }\n        });\n        remoteSdp.raw = remoteSdp.session + remoteSdp.media.join('');\n\n        return remoteSdp;\n    }\n\n    /**\n     * Add the given ssrc lines to the current remote sdp\n     * @param {list} addSsrcInfo a list of SDP line strings that\n     *  should be added to the remote SDP\n     * @returns type {SDP Object} the new remote SDP (after removing the lines\n     *  in removeSsrcInfo\n     */\n    _processRemoteAddSource(addSsrcInfo) {\n        let remoteSdp = new SDP(this.peerconnection.remoteDescription.sdp);\n\n        // Add a new m-line in the remote description if the source info for a secondary video source is recceived from\n        // the remote p2p peer when multi-stream support is enabled.\n        if (addSsrcInfo.length > remoteSdp.media.length\n            && FeatureFlags.isSourceNameSignalingEnabled()\n            && this.isP2P\n            && this.usesUnifiedPlan) {\n            remoteSdp.addMlineForNewLocalSource(MediaType.VIDEO);\n            remoteSdp = new SDP(remoteSdp.raw);\n        }\n        addSsrcInfo.forEach((lines, idx) => {\n            remoteSdp.media[idx] += lines;\n\n            // Make sure to change the direction to 'sendrecv/sendonly' only for p2p connections. For jvb connections,\n            // a new m-line is added for the new remote sources.\n            if (this.isP2P && this.usesUnifiedPlan) {\n                const mediaType = SDPUtil.parseMLine(remoteSdp.media[idx].split('\\r\\n')[0])?.media;\n                const desiredDirection = this.peerconnection.getDesiredMediaDirection(mediaType, true);\n\n                [ MediaDirection.RECVONLY, MediaDirection.INACTIVE ].forEach(direction => {\n                    remoteSdp.media[idx] = remoteSdp.media[idx]\n                        .replace(`a=${direction}`, `a=${desiredDirection}`);\n                });\n            }\n        });\n        remoteSdp.raw = remoteSdp.session + remoteSdp.media.join('');\n\n        return remoteSdp;\n    }\n\n    /**\n     * Do a new o/a flow using the existing remote description\n     * @param {string} [optionalRemoteSdp] optional, raw remote sdp\n     *  to use.  If not provided, the remote sdp from the\n     *  peerconnection will be used\n     * @returns {Promise} promise which resolves when the\n     *  o/a flow is complete with no arguments or\n     *  rejects with an error {string}\n     */\n    _renegotiate(optionalRemoteSdp) {\n        if (this.peerconnection.signalingState === 'closed') {\n            const error = new Error('Attempted to renegotiate in state closed');\n\n            this.room.eventEmitter.emit(XMPPEvents.RENEGOTIATION_FAILED, error, this);\n\n            return Promise.reject(error);\n        }\n\n        const remoteSdp\n            = optionalRemoteSdp || this.peerconnection.remoteDescription.sdp;\n\n        if (!remoteSdp) {\n            const error = new Error(`Can not renegotiate without remote description, current state: ${this.state}`);\n\n            this.room.eventEmitter.emit(XMPPEvents.RENEGOTIATION_FAILED, error, this);\n\n            return Promise.reject(error);\n        }\n\n        const remoteDescription = new RTCSessionDescription({\n            type: this.isInitiator ? 'answer' : 'offer',\n            sdp: remoteSdp\n        });\n\n        if (this.isInitiator) {\n            return this._initiatorRenegotiate(remoteDescription);\n        }\n\n        return this._responderRenegotiate(remoteDescription);\n    }\n\n    /**\n     * Renegotiate cycle implementation for the responder case.\n     * @param {object} remoteDescription the SDP object as defined by the WebRTC\n     * which will be used as remote description in the cycle.\n     * @private\n     */\n    _responderRenegotiate(remoteDescription) {\n        logger.debug(`${this} Renegotiate: setting remote description`);\n\n        return this.peerconnection.setRemoteDescription(remoteDescription)\n            .then(() => {\n                logger.debug(`${this} Renegotiate: creating answer`);\n\n                return this.peerconnection.createAnswer(this.mediaConstraints)\n                    .then(answer => {\n                        logger.debug(`${this} Renegotiate: setting local description`);\n\n                        return this.peerconnection.setLocalDescription(answer);\n                    });\n            });\n    }\n\n    /**\n     * Renegotiate cycle implementation for the initiator's case.\n     * @param {object} remoteDescription the SDP object as defined by the WebRTC\n     * which will be used as remote description in the cycle.\n     * @private\n     */\n    _initiatorRenegotiate(remoteDescription) {\n        logger.debug(`${this} Renegotiate: creating offer`);\n\n        return this.peerconnection.createOffer(this.mediaConstraints)\n            .then(offer => {\n                logger.debug(`${this} Renegotiate: setting local description`);\n\n                return this.peerconnection.setLocalDescription(offer)\n                    .then(() => {\n                        logger.debug(`${this} Renegotiate: setting remote description`);\n\n                        // eslint-disable-next-line max-len\n                        return this.peerconnection.setRemoteDescription(remoteDescription);\n                    });\n            });\n    }\n\n    /**\n     * Adds a new track to the peerconnection. This method needs to be called only when a secondary JitsiLocalTrack is\n     * being added to the peerconnection for the first time.\n     *\n     * @param {Array<JitsiLocalTrack>} localTracks - Tracks to be added to the peer connection.\n     * @returns {Promise<void>} that resolves when the track is successfully added to the peerconnection, rejected\n     * otherwise.\n     */\n    addTracks(localTracks = null) {\n        if (!FeatureFlags.isMultiStreamSupportEnabled()\n            || !localTracks?.length\n            || localTracks.find(track => track.getType() !== MediaType.VIDEO)) {\n            return Promise.reject(new Error('Multiple tracks of the given media type are not supported'));\n        }\n\n        const replaceTracks = [];\n        const workFunction = finishedCallback => {\n            const oldLocalSDP = new SDP(this.peerconnection.localDescription.sdp);\n            const remoteSdp = new SDP(this.peerconnection.peerconnection.remoteDescription.sdp);\n\n            // Add transceivers by adding a new mline in the remote description for each track.\n            for (const track of localTracks) {\n                remoteSdp.addMlineForNewLocalSource(track.getType());\n            }\n\n            const remoteDescription = new RTCSessionDescription({\n                type: 'offer',\n                sdp: remoteSdp.raw\n            });\n\n            // Always initiate a responder renegotiate since the new m-line is added to remote SDP.\n            this._responderRenegotiate(remoteDescription)\n                .then(() => {\n                    // Replace the tracks on the newly generated transceivers.\n                    for (const track of localTracks) {\n                        replaceTracks.push(this.peerconnection.replaceTrack(null, track));\n                    }\n\n                    return Promise.all(replaceTracks);\n                })\n\n                // Trigger a renegotiation here since renegotiations are suppressed at TPC.replaceTrack for screenshare\n                // tracks. This is done here so that presence for screenshare tracks is sent before signaling.\n                .then(() => this._renegotiate())\n                .then(() => {\n                    const newLocalSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n                    // Signal the new sources to the peer.\n                    this.notifyMySSRCUpdate(oldLocalSDP, newLocalSDP);\n                    finishedCallback();\n                })\n                .catch(error => finishedCallback(error));\n        };\n\n        return new Promise((resolve, reject) => {\n            logger.debug(`${this} Queued renegotiation after addTrack`);\n\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        logger.error(`${this} renegotiation after addTrack error`, error);\n                        reject(error);\n                    } else {\n                        logger.debug(`${this} renegotiation after addTrack executed - OK`);\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Replaces <tt>oldTrack</tt> with <tt>newTrack</tt> and performs a single\n     * offer/answer cycle after both operations are done. Either\n     * <tt>oldTrack</tt> or <tt>newTrack</tt> can be null; replacing a valid\n     * <tt>oldTrack</tt> with a null <tt>newTrack</tt> effectively just removes\n     * <tt>oldTrack</tt>\n     * @param {JitsiLocalTrack|null} oldTrack the current track in use to be\n     * replaced\n     * @param {JitsiLocalTrack|null} newTrack the new track to use\n     * @returns {Promise} which resolves once the replacement is complete\n     *  with no arguments or rejects with an error {string}\n     */\n    replaceTrack(oldTrack, newTrack) {\n        const workFunction = finishedCallback => {\n            logger.debug(`${this} replaceTrack worker started. oldTrack = ${oldTrack}, newTrack = ${newTrack}`);\n\n            const oldLocalSdp = this.peerconnection.localDescription.sdp;\n\n            if (!this.usesUnifiedPlan) {\n                // NOTE the code below assumes that no more than 1 video track\n                // can be added to the peer connection.\n                // Transition from camera to desktop share\n                // or transition from one camera source to another.\n                if (this.peerconnection.options.capScreenshareBitrate\n                    && oldTrack && newTrack && newTrack.isVideoTrack()) {\n                    // Clearing current primary SSRC will make\n                    // the SdpConsistency generate a new one which will result\n                    // with:\n                    // 1. source-remove for the old video stream.\n                    // 2. source-add for the new video stream.\n                    this.peerconnection.clearRecvonlySsrc();\n                }\n\n                // Transition from no video to video (unmute).\n                if (!oldTrack && newTrack && newTrack.isVideoTrack()) {\n                    // Clearing current primary SSRC will make\n                    // the SdpConsistency generate a new one which will result\n                    // with:\n                    // 1. source-remove for the recvonly\n                    // 2. source-add for the new video stream\n                    this.peerconnection.clearRecvonlySsrc();\n\n                // Transition from video to no video\n                } else if (oldTrack && oldTrack.isVideoTrack() && !newTrack) {\n                    // Clearing current primary SSRC and generating the recvonly\n                    // will result in:\n                    // 1. source-remove for the old video stream\n                    // 2. source-add for the recvonly stream\n                    this.peerconnection.clearRecvonlySsrc();\n                    this.peerconnection.generateRecvonlySsrc();\n                }\n            }\n\n            this.peerconnection.replaceTrack(oldTrack, newTrack)\n                .then(shouldRenegotiate => {\n                    let promise = Promise.resolve();\n\n                    logger.debug(`${this} TPC.replaceTrack finished. shouldRenegotiate = ${\n                        shouldRenegotiate}, JingleSessionState = ${this.state}`);\n\n                    if (shouldRenegotiate\n                        && (oldTrack || newTrack)\n                        && this.state === JingleSessionState.ACTIVE) {\n                        promise = this._renegotiate().then(() => {\n                            const newLocalSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n                            this.notifyMySSRCUpdate(new SDP(oldLocalSdp), newLocalSDP);\n                        });\n                    }\n\n                    return promise.then(() => {\n                        // Set the source name of the new track.\n                        if (FeatureFlags.isSourceNameSignalingEnabled()\n                            && oldTrack\n                            && newTrack\n                            && oldTrack.isVideoTrack()) {\n                            newTrack.setSourceName(oldTrack.getSourceName());\n                        }\n\n                        if (newTrack?.isVideoTrack()) {\n                            logger.debug(`${this} replaceTrack worker: configuring video stream`);\n\n                            // Configure the video encodings after the track is replaced.\n                            return this.peerconnection.configureSenderVideoEncodings(newTrack);\n                        }\n                    });\n                })\n                .then(() => finishedCallback(), error => finishedCallback(error));\n        };\n\n        return new Promise((resolve, reject) => {\n            logger.debug(`${this} Queued replaceTrack task. Old track = ${oldTrack}, new track = ${newTrack}`);\n\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        logger.error(`${this} Replace track error:`, error);\n                        reject(error);\n                    } else {\n                        logger.info(`${this}  Replace track done!`);\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Parse the information from the xml sourceRemoveElem and translate it\n     *  into sdp lines\n     * @param {jquery xml element} sourceRemoveElem the source-remove\n     *  element from jingle\n     * @param {SDP object} currentRemoteSdp the current remote\n     *  sdp (as of this new source-remove)\n     * @returns {list} a list of SDP line strings that should\n     *  be removed from the remote SDP\n     */\n    _parseSsrcInfoFromSourceRemove(sourceRemoveElem, currentRemoteSdp) {\n        const removeSsrcInfo = [];\n\n        $(sourceRemoveElem).each((i1, content) => {\n            const name = $(content).attr('name');\n            let lines = '';\n\n            $(content)\n                .find('ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n                .each(function() {\n                    /* eslint-disable no-invalid-this */\n                    const semantics = this.getAttribute('semantics');\n                    const ssrcs\n                        = $(this)\n                            .find('>source')\n                            .map(function() {\n                                return this.getAttribute('ssrc');\n                            })\n                            .get();\n\n                    if (ssrcs.length) {\n                        lines\n                            += `a=ssrc-group:${semantics} ${\n                                ssrcs.join(' ')}\\r\\n`;\n                    }\n\n                    /* eslint-enable no-invalid-this */\n                });\n            const ssrcs = [];\n\n            // handles both >source and >description>source versions\n            const tmp\n                = $(content).find(\n                    'source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\n\n            tmp.each(function() {\n                // eslint-disable-next-line no-invalid-this\n                const ssrc = $(this).attr('ssrc');\n\n                ssrcs.push(ssrc);\n            });\n            currentRemoteSdp.media.forEach((media, i2) => {\n                if (!SDPUtil.findLine(media, `a=mid:${name}`)) {\n                    return;\n                }\n                if (!removeSsrcInfo[i2]) {\n                    removeSsrcInfo[i2] = '';\n                }\n                ssrcs.forEach(ssrc => {\n                    const ssrcLines\n                        = SDPUtil.findLines(media, `a=ssrc:${ssrc}`);\n\n                    if (ssrcLines.length) {\n                        removeSsrcInfo[i2] += `${ssrcLines.join('\\r\\n')}\\r\\n`;\n                    }\n                });\n                removeSsrcInfo[i2] += lines;\n            });\n        });\n\n        return removeSsrcInfo;\n    }\n\n    /**\n     * Will print an error if there is any difference, between the SSRCs given\n     * in the <tt>oldSDP</tt> and the ones currently described in\n     * the peerconnection's local description.\n     * @param {string} operationName the operation's name which will be printed\n     * in the error message.\n     * @param {SDP} oldSDP the old local SDP which will be compared with\n     * the current one.\n     * @return {boolean} <tt>true</tt> if there was any change or <tt>false</tt>\n     * otherwise.\n     * @private\n     */\n    _verifyNoSSRCChanged(operationName, oldSDP) {\n        const currentLocalSDP\n            = new SDP(this.peerconnection.localDescription.sdp);\n        let sdpDiff = new SDPDiffer(oldSDP, currentLocalSDP);\n        const addedMedia = sdpDiff.getNewMedia();\n\n        if (Object.keys(addedMedia).length) {\n            logger.error(`${this} - some SSRC were added on ${operationName}`, addedMedia);\n\n            return false;\n        }\n\n        sdpDiff = new SDPDiffer(currentLocalSDP, oldSDP);\n        const removedMedia = sdpDiff.getNewMedia();\n\n        if (Object.keys(removedMedia).length) {\n            logger.error(`${this} - some SSRCs were removed on ${operationName}`, removedMedia);\n\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Adds local track back to the peerconnection associated with this session.\n     * @param {JitsiLocalTrack} track\n     * @return {Promise} a promise that will resolve once the local track is added back to this session and\n     * renegotiation succeeds (if its warranted). Will be rejected with a <tt>string</tt> that provides some error\n     * details in case something goes wrong.\n     */\n    addTrackToPc(track) {\n        return this._addRemoveTrack(false /* add */, track)\n            .then(() => {\n                // Configure the video encodings after the track is unmuted. If the user joins the call muted and\n                // unmutes it the first time, all the parameters need to be configured.\n                if (track.isVideoTrack()) {\n                    return this.peerconnection.configureSenderVideoEncodings(track);\n                }\n            });\n    }\n\n    /**\n     * Remove local track as part of the mute operation.\n     * @param {JitsiLocalTrack} track the local track to be removed\n     * @return {Promise} a promise which will be resolved once the local track\n     * is removed from this session and the renegotiation is performed.\n     * The promise will be rejected with a <tt>string</tt> that the describes\n     * the error if anything goes wrong.\n     */\n    removeTrackFromPc(track) {\n        return this._addRemoveTrack(true /* remove */, track);\n    }\n\n    /**\n     * See {@link addTrackToPc} and {@link removeTrackFromPc}.\n     * @param {boolean} isRemove <tt>true</tt> for \"remove\" operation or <tt>false</tt> for \"add\" operation.\n     * @param {JitsiLocalTrack} track the track that will be added/removed\n     * @private\n     */\n    _addRemoveTrack(isRemove, track) {\n        if (!track) {\n            return Promise.reject('invalid \"track\" argument value');\n        }\n        const operationName = isRemove ? 'removeTrack' : 'addTrack';\n        const workFunction = finishedCallback => {\n            const tpc = this.peerconnection;\n\n            if (!tpc) {\n                finishedCallback(`Error:  tried ${operationName} track with no active peer connection`);\n\n                return;\n            }\n            const oldLocalSDP = tpc.localDescription.sdp;\n            const operationPromise\n                = isRemove\n                    ? tpc.removeTrackFromPc(track)\n                    : tpc.addTrackToPc(track);\n\n            operationPromise\n                .then(shouldRenegotiate => {\n                    if (shouldRenegotiate && oldLocalSDP && tpc.remoteDescription.sdp) {\n                        this._renegotiate()\n                            .then(() => {\n                                // The results are ignored, as this check failure is not enough to fail the whole\n                                // operation. It will log an error inside for plan-b.\n                                !this.usesUnifiedPlan && this._verifyNoSSRCChanged(operationName, new SDP(oldLocalSDP));\n                                const newLocalSdp = tpc.localDescription.sdp;\n\n                                // Signal the ssrc if an unmute operation results in a new ssrc being generated.\n                                this.notifyMySSRCUpdate(new SDP(oldLocalSDP), new SDP(newLocalSdp));\n                                finishedCallback();\n                            });\n                    } else {\n                        finishedCallback();\n                    }\n                },\n                finishedCallback /* will be called with an error */);\n        };\n\n        logger.debug(`${this} Queued ${operationName} task`);\n\n        return new Promise((resolve, reject) => {\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        logger.error(`${this} ${operationName} failed`);\n                        reject(error);\n                    } else {\n                        logger.debug(`${this} ${operationName} done`);\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Resumes or suspends media transfer over the underlying peer connection.\n     * @param {boolean} audioActive <tt>true</tt> to enable audio media\n     * transfer or <tt>false</tt> to suspend audio media transmission.\n     * @param {boolean} videoActive <tt>true</tt> to enable video media\n     * transfer or <tt>false</tt> to suspend video media transmission.\n     * @return {Promise} a <tt>Promise</tt> which will resolve once\n     * the operation is done. It will be rejected with an error description as\n     * a string in case anything goes wrong.\n     */\n    setMediaTransferActive(audioActive, videoActive) {\n        if (!this.peerconnection) {\n            return Promise.reject(\n                'Can not modify transfer active state,'\n                    + ' before \"initialize\" is called');\n        }\n\n        const logAudioStr = audioActive ? 'audio active' : 'audio inactive';\n        const logVideoStr = videoActive ? 'video active' : 'video inactive';\n\n        logger.info(`${this} Queued make ${logVideoStr}, ${logAudioStr} task`);\n\n        const workFunction = finishedCallback => {\n            const isSessionActive = this.state === JingleSessionState.ACTIVE;\n\n            // Because the value is modified on the queue it's impossible to\n            // check it's final value reliably prior to submitting the task.\n            // The rule here is that the last submitted state counts.\n            // Check the values here to avoid unnecessary renegotiation cycle.\n            const audioActiveChanged\n                = this.peerconnection.setAudioTransferActive(audioActive);\n\n            if (this._localVideoActive !== videoActive) {\n                this._localVideoActive = videoActive;\n\n                // Do only for P2P - Jicofo will reply with 'bad-request'\n                // We don't want to send 'content-modify', before the initial\n                // O/A (state === JingleSessionState.ACTIVE), because that will\n                // mess up video media direction in the remote SDP.\n                // 'content-modify' when processed only affects the media\n                // direction in the local SDP. We're doing that, because setting\n                // 'inactive' on video media in remote SDP will mess up our SDP\n                // translation chain (simulcast, RTX, video mute etc.).\n                if (this.isP2P && isSessionActive) {\n                    this.sendContentModify();\n                }\n            }\n\n            const pcVideoActiveChanged\n                = this.peerconnection.setVideoTransferActive(\n                    this._localVideoActive && this._remoteVideoActive);\n\n            // Will do the sRD/sLD cycle to update SDPs and adjust the media\n            // direction\n            if (isSessionActive\n                    && (audioActiveChanged || pcVideoActiveChanged)) {\n                this._renegotiate()\n                    .then(\n                        finishedCallback,\n                        finishedCallback /* will be called with an error */);\n            } else {\n                finishedCallback();\n            }\n        };\n\n        return new Promise((resolve, reject) => {\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        logger.error(`${this} Make ${logVideoStr}, ${logAudioStr} task failed!`);\n                        reject(error);\n                    } else {\n                        logger.debug(`${this} Make ${logVideoStr}, ${logAudioStr} task done!`);\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Will put and execute on the queue a session modify task. Currently it\n     * only checks the senders attribute of the video content in order to figure\n     * out if the remote peer has video in the inactive state (stored locally\n     * in {@link _remoteVideoActive} - see field description for more info).\n     * @param {jQuery} jingleContents jQuery selector pointing to the jingle\n     * element of the session modify IQ.\n     * @see {@link _remoteVideoActive}\n     * @see {@link _localVideoActive}\n     */\n    modifyContents(jingleContents) {\n        const newVideoSenders = JingleSessionPC.parseVideoSenders(jingleContents);\n        const newMaxFrameHeight = JingleSessionPC.parseMaxFrameHeight(jingleContents);\n        const sourceMaxFrameHeights = JingleSessionPC.parseSourceMaxFrameHeight(jingleContents);\n\n        // frame height is optional in our content-modify protocol\n        if (newMaxFrameHeight) {\n            logger.info(`${this} received remote max frame height: ${newMaxFrameHeight}`);\n            this.remoteRecvMaxFrameHeight = newMaxFrameHeight;\n            this.eventEmitter.emit(MediaSessionEvents.REMOTE_VIDEO_CONSTRAINTS_CHANGED, this);\n        }\n\n        if (sourceMaxFrameHeights) {\n            this.remoteSourceMaxFrameHeights = sourceMaxFrameHeights;\n            this.eventEmitter.emit(MediaSessionEvents.REMOTE_SOURCE_CONSTRAINTS_CHANGED, this, sourceMaxFrameHeights);\n        }\n\n        if (newVideoSenders === null) {\n            logger.error(`${this} - failed to parse video \"senders\" attribute in \"content-modify\" action`);\n\n            return;\n        }\n\n        const workFunction = finishedCallback => {\n            if (this._assertNotEnded() && this._modifyRemoteVideoActive(newVideoSenders)) {\n                // Will do the sRD/sLD cycle to update SDPs and adjust the media direction.\n                this._renegotiate()\n                    .then(finishedCallback, finishedCallback /* (error) */);\n            } else {\n                finishedCallback();\n            }\n        };\n\n        logger.debug(`${this} queued \"content-modify\" task(video senders=\"${newVideoSenders}\")`);\n\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error(`${this} \"content-modify\" failed`, error);\n                } else {\n                    logger.debug(`${this} \"content-modify\" task(video senders=\"${newVideoSenders}\") done`);\n                }\n            });\n    }\n\n    /**\n     * Processes new value of remote video \"senders\" Jingle attribute and tries\n     * to apply it for {@link _remoteVideoActive}.\n     * @param {string} remoteVideoSenders the value of \"senders\" attribute of\n     * Jingle video content element advertised by remote peer.\n     * @return {boolean} <tt>true</tt> if the change affected state of\n     * the underlying peerconnection and renegotiation is required for\n     * the changes to take effect.\n     * @private\n     */\n    _modifyRemoteVideoActive(remoteVideoSenders) {\n        const isRemoteVideoActive\n            = remoteVideoSenders === 'both'\n                || (remoteVideoSenders === 'initiator' && this.isInitiator)\n                || (remoteVideoSenders === 'responder' && !this.isInitiator);\n\n        if (isRemoteVideoActive !== this._remoteVideoActive) {\n            logger.debug(`${this} new remote video active: ${isRemoteVideoActive}`);\n            this._remoteVideoActive = isRemoteVideoActive;\n        }\n\n        return this.peerconnection.setVideoTransferActive(this._localVideoActive && this._remoteVideoActive);\n    }\n\n    /**\n     * Figures out added/removed ssrcs and send update IQs.\n     * @param oldSDP SDP object for old description.\n     * @param newSDP SDP object for new description.\n     */\n    notifyMySSRCUpdate(oldSDP, newSDP) {\n        if (this.state !== JingleSessionState.ACTIVE) {\n            logger.warn(`${this} Skipping SSRC update in '${this.state} ' state.`);\n\n            return;\n        }\n\n        if (!this.connection.connected) {\n            // The goal is to compare the oldest SDP with the latest one upon reconnect\n            if (!this._cachedOldLocalSdp) {\n                this._cachedOldLocalSdp = oldSDP;\n            }\n            this._cachedNewLocalSdp = newSDP;\n            logger.warn(`${this} Not sending SSRC update while the signaling is disconnected`);\n\n            return;\n        }\n\n        this._cachedOldLocalSdp = undefined;\n        this._cachedNewLocalSdp = undefined;\n\n        const getSignaledSourceInfo = sdpDiffer => {\n            const newMedia = sdpDiffer.getNewMedia();\n            let ssrcs = [];\n            let mediaType = null;\n\n            // It is assumed that sources are signaled one at a time.\n            Object.keys(newMedia).forEach(mediaIndex => {\n                const signaledSsrcs = Object.keys(newMedia[mediaIndex].ssrcs);\n\n                mediaType = newMedia[mediaIndex].mid;\n                if (signaledSsrcs?.length) {\n                    ssrcs = ssrcs.concat(signaledSsrcs);\n                }\n            });\n\n            return {\n                mediaType,\n                ssrcs\n            };\n        };\n\n        // send source-remove IQ.\n        let sdpDiffer = new SDPDiffer(newSDP, oldSDP);\n        const remove = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'source-remove',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            }\n            );\n\n        sdpDiffer.toJingle(remove);\n\n        // context a common object for one run of ssrc update (source-add and source-remove) so we can match them if we\n        // need to\n        const ctx = {};\n        const removedSsrcInfo = getSignaledSourceInfo(sdpDiffer);\n\n        if (removedSsrcInfo.ssrcs.length) {\n            // Log only the SSRCs instead of the full IQ.\n            logger.info(`${this} Sending source-remove for ${removedSsrcInfo.mediaType}`\n                + ` ssrcs=${removedSsrcInfo.ssrcs}`);\n            this.connection.sendIQ(\n                remove,\n                () => {\n                    this.room.eventEmitter.emit(XMPPEvents.SOURCE_REMOVE, this, ctx);\n                },\n                this.newJingleErrorHandler(remove, error => {\n                    this.room.eventEmitter.emit(XMPPEvents.SOURCE_REMOVE_ERROR, this, error, ctx);\n                }),\n                IQ_TIMEOUT);\n        }\n\n        // send source-add IQ.\n        sdpDiffer = new SDPDiffer(oldSDP, newSDP);\n        const add = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'source-add',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            }\n            );\n\n        sdpDiffer.toJingle(add);\n        const addedSsrcInfo = getSignaledSourceInfo(sdpDiffer);\n\n        if (addedSsrcInfo.ssrcs.length) {\n            // Log only the SSRCs instead of the full IQ.\n            logger.info(`${this} Sending source-add for ${addedSsrcInfo.mediaType} ssrcs=${addedSsrcInfo.ssrcs}`);\n            this.connection.sendIQ(\n                add,\n                () => {\n                    this.room.eventEmitter.emit(XMPPEvents.SOURCE_ADD, this, ctx);\n                },\n                this.newJingleErrorHandler(add, error => {\n                    this.room.eventEmitter.emit(XMPPEvents.SOURCE_ADD_ERROR, this, error, addedSsrcInfo.mediaType, ctx);\n                }),\n                IQ_TIMEOUT);\n        }\n    }\n\n    /**\n     * Method returns function(errorResponse) which is a callback to be passed\n     * to Strophe connection.sendIQ method. An 'error' structure is created that\n     * is passed as 1st argument to given <tt>failureCb</tt>. The format of this\n     * structure is as follows:\n     * {\n     *  code: {XMPP error response code}\n     *  reason: {the name of XMPP error reason element or 'timeout' if the\n      *          request has timed out within <tt>IQ_TIMEOUT</tt> milliseconds}\n     *  source: {request.tree() that provides original request}\n     *  session: {this JingleSessionPC.toString()}\n     * }\n     * @param request Strophe IQ instance which is the request to be dumped into\n     *        the error structure\n     * @param failureCb function(error) called when error response was returned\n     *        or when a timeout has occurred.\n     * @returns {function(this:JingleSessionPC)}\n     */\n    newJingleErrorHandler(request, failureCb) {\n        return errResponse => {\n\n            const error = {};\n\n            // Get XMPP error code and condition(reason)\n            const errorElSel = $(errResponse).find('error');\n\n            if (errorElSel.length) {\n                error.code = errorElSel.attr('code');\n                const errorReasonSel = $(errResponse).find('error :first');\n\n                if (errorReasonSel.length) {\n                    error.reason = errorReasonSel[0].tagName;\n                }\n\n                const errorMsgSel = errorElSel.find('>text');\n\n                if (errorMsgSel.length) {\n                    error.msg = errorMsgSel.text();\n                }\n            }\n\n            if (!errResponse) {\n                error.reason = 'timeout';\n            }\n\n            error.session = this.toString();\n\n            if (failureCb) {\n                failureCb(error);\n            } else if (this.state === JingleSessionState.ENDED\n                        && error.reason === 'item-not-found') {\n                // When remote peer decides to terminate the session, but it\n                // still have few messages on the queue for processing,\n                // it will first send us 'session-terminate' (we enter ENDED)\n                // and then follow with 'item-not-found' for the queued requests\n                // We don't want to have that logged on error level.\n                logger.debug(`${this} Jingle error: ${JSON.stringify(error)}`);\n            } else {\n                GlobalOnErrorHandler.callErrorHandler(\n                    new Error(\n                        `Jingle error: ${JSON.stringify(error)}`));\n            }\n        };\n    }\n\n    /**\n     * Returns the ice connection state for the peer connection.\n     * @returns the ice connection state for the peer connection.\n     */\n    getIceConnectionState() {\n        return this.peerconnection.getConnectionState();\n    }\n\n    /**\n     * Closes the peerconnection.\n     */\n    close() {\n        this.state = JingleSessionState.ENDED;\n        this.establishmentDuration = undefined;\n\n        if (this.peerconnection) {\n            this.peerconnection.onicecandidate = null;\n            this.peerconnection.oniceconnectionstatechange = null;\n            this.peerconnection.onnegotiationneeded = null;\n            this.peerconnection.onsignalingstatechange = null;\n        }\n\n        logger.debug(`${this} Clearing modificationQueue`);\n\n        // Remove any pending tasks from the queue\n        this.modificationQueue.clear();\n\n        logger.debug(`${this} Queued PC close task`);\n        this.modificationQueue.push(finishCallback => {\n            // do not try to close if already closed.\n            this.peerconnection && this.peerconnection.close();\n            finishCallback();\n            logger.debug(`${this} PC close task done!`);\n        });\n\n        logger.debug(`${this} Shutdown modificationQueue!`);\n\n        // No more tasks can go in after the close task\n        this.modificationQueue.shutdown();\n    }\n\n    /**\n     * Converts to string with minor summary.\n     * @return {string}\n     */\n    toString() {\n        return `JingleSessionPC[session=${this.isP2P ? 'P2P' : 'JVB'},initiator=${this.isInitiator},sid=${this.sid}]`;\n    }\n\n    /**\n     * If the A/B test for suspend video is disabled according to the room's\n     * configuration, returns undefined. Otherwise returns a boolean which\n     * indicates whether the suspend video option should be enabled or disabled.\n     * @param {JingleSessionPCOptions} options - The config options.\n     */\n    _abtestSuspendVideoEnabled({ abTesting }) {\n        if (!abTesting || !abTesting.enableSuspendVideoTest) {\n            return;\n        }\n\n        // We want the two participants in a P2P call to agree on the value of\n        // the \"suspend\" option. We use the JID of the initiator, because it is\n        // both randomly selected and agreed upon by both participants.\n        const jid = this._getInitiatorJid();\n\n        return integerHash(jid) % 2 === 0;\n    }\n}\n","/* global $ */\n\nimport { getLogger } from '@jitsi/logger';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport { MediaType } from '../../service/RTC/MediaType';\nimport {\n    ACTION_JINGLE_TR_RECEIVED,\n    ACTION_JINGLE_TR_SUCCESS,\n    createJingleEvent\n} from '../../service/statistics/AnalyticsEvents';\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport RandomUtil from '../util/RandomUtil';\n\nimport ConnectionPlugin from './ConnectionPlugin';\nimport { expandSourcesFromJson } from './JingleHelperFunctions';\nimport JingleSessionPC from './JingleSessionPC';\n\nconst logger = getLogger(__filename);\n\n// XXX Strophe is build around the idea of chaining function calls so allow long\n// function call chains.\n/* eslint-disable newline-per-chained-call */\n\n/**\n * Parses the transport XML element and returns the list of ICE candidates formatted as text.\n *\n * @param {*} transport Transport XML element extracted from the IQ.\n * @returns {Array<string>}\n */\nfunction _parseIceCandidates(transport) {\n    const candidates = $(transport).find('>candidate');\n    const parseCandidates = [];\n\n    // Extract the candidate information from the IQ.\n    candidates.each((_, candidate) => {\n        const attributes = candidate.attributes;\n        const candidateAttrs = [];\n\n        for (let i = 0; i < attributes.length; i++) {\n            const attr = attributes[i];\n\n            candidateAttrs.push(`${attr.name}: ${attr.value}`);\n        }\n        parseCandidates.push(candidateAttrs.join(' '));\n    });\n\n    return parseCandidates;\n}\n\n/**\n *\n */\nexport default class JingleConnectionPlugin extends ConnectionPlugin {\n    /**\n     * Creates new <tt>JingleConnectionPlugin</tt>\n     * @param {XMPP} xmpp\n     * @param {EventEmitter} eventEmitter\n     * @param {Object} iceConfig an object that holds the iceConfig to be passed\n     * to the p2p and the jvb <tt>PeerConnection</tt>.\n     */\n    constructor(xmpp, eventEmitter, iceConfig) {\n        super();\n        this.xmpp = xmpp;\n        this.eventEmitter = eventEmitter;\n        this.sessions = {};\n        this.jvbIceConfig = iceConfig.jvb;\n        this.p2pIceConfig = iceConfig.p2p;\n        this.mediaConstraints = {\n            offerToReceiveAudio: true,\n            offerToReceiveVideo: true\n        };\n    }\n\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n        this.connection.addHandler(this.onJingle.bind(this),\n            'urn:xmpp:jingle:1', 'iq', 'set', null, null);\n    }\n\n    /**\n     *\n     * @param iq\n     */\n    onJingle(iq) {\n        const sid = $(iq).find('jingle').attr('sid');\n        const action = $(iq).find('jingle').attr('action');\n        const fromJid = iq.getAttribute('from');\n\n        // send ack first\n        const ack = $iq({ type: 'result',\n            to: fromJid,\n            id: iq.getAttribute('id')\n        });\n\n        let sess = this.sessions[sid];\n\n        if (action !== 'session-initiate') {\n            if (!sess) {\n                ack.attrs({ type: 'error' });\n                ack.c('error', { type: 'cancel' })\n                    .c('item-not-found', {\n                        xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\n                    })\n                    .up()\n                    .c('unknown-session', {\n                        xmlns: 'urn:xmpp:jingle:errors:1'\n                    });\n                logger.warn(`invalid session id: ${sid}`);\n                logger.debug(iq);\n                this.connection.send(ack);\n\n                return true;\n            }\n\n            // local jid is not checked\n            if (fromJid !== sess.remoteJid) {\n                logger.warn(\n                    'jid mismatch for session id', sid, sess.remoteJid, iq);\n                ack.attrs({ type: 'error' });\n                ack.c('error', { type: 'cancel' })\n                    .c('item-not-found', {\n                        xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\n                    })\n                    .up()\n                    .c('unknown-session', {\n                        xmlns: 'urn:xmpp:jingle:errors:1'\n                    });\n                this.connection.send(ack);\n\n                return true;\n            }\n        } else if (sess !== undefined) {\n            // Existing session with same session id. This might be out-of-order\n            // if the sess.remoteJid is the same as from.\n            ack.attrs({ type: 'error' });\n            ack.c('error', { type: 'cancel' })\n                .c('service-unavailable', {\n                    xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\n                })\n                .up();\n            logger.warn('duplicate session id', sid, iq);\n            this.connection.send(ack);\n\n            return true;\n        }\n        const now = window.performance.now();\n\n        // FIXME that should work most of the time, but we'd have to\n        // think how secure it is to assume that user with \"focus\"\n        // nickname is Jicofo.\n        const isP2P = Strophe.getResourceFromJid(fromJid) !== 'focus';\n\n        // see http://xmpp.org/extensions/xep-0166.html#concepts-session\n\n        const jsonMessages = $(iq).find('jingle>json-message');\n\n        if (jsonMessages?.length) {\n            let audioVideoSsrcs;\n\n            logger.info(`Found a JSON-encoded element in ${action}, translating to standard Jingle.`);\n            for (let i = 0; i < jsonMessages.length; i++) {\n                // Currently there is always a single json-message in the IQ with the source information.\n                audioVideoSsrcs = expandSourcesFromJson(iq, jsonMessages[i]);\n            }\n\n            if (audioVideoSsrcs?.size) {\n                const logMessage = [];\n\n                for (const endpoint of audioVideoSsrcs.keys()) {\n                    logMessage.push(`${endpoint}:[${audioVideoSsrcs.get(endpoint)}]`);\n                }\n                logger.debug(`Received ${action} from ${fromJid} with sources=${logMessage.join(', ')}`);\n            }\n\n            // TODO: is there a way to remove the json-message elements once we've extracted the information?\n            // removeChild doesn't seem to work.\n        }\n\n        switch (action) {\n        case 'session-initiate': {\n            logger.log('(TIME) received session-initiate:\\t', now);\n            const startMuted = $(iq).find('jingle>startmuted');\n\n            isP2P && logger.debug(`Received ${action} from ${fromJid}`);\n            if (startMuted?.length) {\n                const audioMuted = startMuted.attr(MediaType.AUDIO);\n                const videoMuted = startMuted.attr(MediaType.VIDEO);\n\n                this.eventEmitter.emit(\n                    XMPPEvents.START_MUTED_FROM_FOCUS,\n                    audioMuted === 'true',\n                    videoMuted === 'true');\n            }\n            const pcConfig = isP2P ? this.p2pIceConfig : this.jvbIceConfig;\n\n            sess\n                = new JingleSessionPC(\n                    $(iq).find('jingle').attr('sid'),\n                    $(iq).attr('to'),\n                    fromJid,\n                    this.connection,\n                    this.mediaConstraints,\n\n                    // Makes a copy in order to prevent exception thrown on RN when either this.p2pIceConfig or\n                    // this.jvbIceConfig is modified and there's a PeerConnection instance holding a reference\n                    JSON.parse(JSON.stringify(pcConfig)),\n                    isP2P,\n                    /* initiator */ false);\n\n            this.sessions[sess.sid] = sess;\n            this.eventEmitter.emit(XMPPEvents.CALL_INCOMING, sess, $(iq).find('>jingle'), now);\n            break;\n        }\n        case 'session-accept': {\n            const ssrcs = [];\n            const contents = $(iq).find('jingle>content');\n\n            // Extract the SSRCs from the session-accept received from a p2p peer.\n            for (const content of contents) {\n                const ssrc = $(content).find('description').attr('ssrc');\n\n                ssrc && ssrcs.push(ssrc);\n            }\n            logger.debug(`Received ${action} from ${fromJid} with ssrcs=${ssrcs}`);\n            this.eventEmitter.emit(XMPPEvents.CALL_ACCEPTED, sess, $(iq).find('>jingle'));\n            break;\n        }\n        case 'content-modify': {\n            const height = $(iq).find('jingle>content[name=\"video\"]>max-frame-height');\n\n            logger.debug(`Received ${action} from ${fromJid} with a max-frame-height=${height?.text()}`);\n            sess.modifyContents($(iq).find('>jingle'));\n            break;\n        }\n        case 'transport-info': {\n            const candidates = _parseIceCandidates($(iq).find('jingle>content>transport'));\n\n            logger.debug(`Received ${action} from ${fromJid} for candidates=${candidates.join(', ')}`);\n            this.eventEmitter.emit(XMPPEvents.TRANSPORT_INFO, sess, $(iq).find('>jingle'));\n            break;\n        }\n        case 'session-terminate': {\n            logger.log('terminating...', sess.sid);\n            let reasonCondition = null;\n            let reasonText = null;\n\n            if ($(iq).find('>jingle>reason').length) {\n                reasonCondition\n                    = $(iq).find('>jingle>reason>:first')[0].tagName;\n                reasonText = $(iq).find('>jingle>reason>text').text();\n            }\n            logger.debug(`Received ${action} from ${fromJid} disconnect reason=${reasonText}`);\n            this.terminate(sess.sid, reasonCondition, reasonText);\n            this.eventEmitter.emit(XMPPEvents.CALL_ENDED, sess, reasonCondition, reasonText);\n            break;\n        }\n        case 'transport-replace': {\n            logger.info('(TIME) Start transport replace:\\t', now);\n            const transport = $(iq).find('jingle>content>transport');\n            const candidates = _parseIceCandidates(transport);\n            const iceUfrag = $(transport).attr('ufrag');\n            const icePwd = $(transport).attr('pwd');\n            const dtlsFingerprint = $(transport).find('>fingerprint')?.text();\n\n            logger.debug(`Received ${action} from ${fromJid} with iceUfrag=${iceUfrag},`\n            + ` icePwd=${icePwd}, DTLS fingerprint=${dtlsFingerprint}, candidates=${candidates.join(', ')}`);\n\n            Statistics.sendAnalytics(createJingleEvent(\n                ACTION_JINGLE_TR_RECEIVED,\n                {\n                    p2p: isP2P,\n                    value: now\n                }));\n\n            sess.replaceTransport($(iq).find('>jingle'), () => {\n                const successTime = window.performance.now();\n\n                logger.info('(TIME) Transport replace success:\\t', successTime);\n                Statistics.sendAnalytics(createJingleEvent(\n                    ACTION_JINGLE_TR_SUCCESS,\n                    {\n                        p2p: isP2P,\n                        value: successTime\n                    }));\n            }, error => {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error('Transport replace failed', error);\n                sess.sendTransportReject();\n            });\n            break;\n        }\n        case 'source-add':\n            sess.addRemoteStream($(iq).find('>jingle>content'));\n            break;\n        case 'source-remove':\n            sess.removeRemoteStream($(iq).find('>jingle>content'));\n            break;\n        default:\n            logger.warn('jingle action not implemented', action);\n            ack.attrs({ type: 'error' });\n            ack.c('error', { type: 'cancel' })\n                .c('bad-request',\n                    { xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas' })\n                .up();\n            break;\n        }\n        this.connection.send(ack);\n\n        return true;\n    }\n\n    /**\n     * Creates new <tt>JingleSessionPC</tt> meant to be used in a direct P2P\n     * connection, configured as 'initiator'.\n     * @param {string} me our JID\n     * @param {string} peer remote participant's JID\n     * @return {JingleSessionPC}\n     */\n    newP2PJingleSession(me, peer) {\n        const sess\n            = new JingleSessionPC(\n                RandomUtil.randomHexString(12),\n                me,\n                peer,\n                this.connection,\n                this.mediaConstraints,\n                this.p2pIceConfig,\n                /* P2P */ true,\n                /* initiator */ true);\n\n        this.sessions[sess.sid] = sess;\n\n        return sess;\n    }\n\n    /**\n     *\n     * @param sid\n     * @param reasonCondition\n     * @param reasonText\n     */\n    terminate(sid, reasonCondition, reasonText) {\n        if (this.sessions.hasOwnProperty(sid)) {\n            if (this.sessions[sid].state !== 'ended') {\n                this.sessions[sid].onTerminated(reasonCondition, reasonText);\n            }\n            delete this.sessions[sid];\n        }\n    }\n\n    /**\n     *\n     */\n    getStunAndTurnCredentials() {\n        // get stun and turn configuration from server via xep-0215\n        // uses time-limited credentials as described in\n        // http://tools.ietf.org/html/draft-uberti-behave-turn-rest-00\n        //\n        // See https://modules.prosody.im/mod_turncredentials.html\n        // for a prosody module which implements this.\n        // Or the new implementation https://modules.prosody.im/mod_external_services which will be in prosody 0.12\n        //\n        // Currently, this doesn't work with updateIce and therefore credentials\n        // with a long validity have to be fetched before creating the\n        // peerconnection.\n        // TODO: implement refresh via updateIce as described in\n        //      https://code.google.com/p/webrtc/issues/detail?id=1650\n        this.connection.sendIQ(\n            $iq({ type: 'get',\n                to: this.xmpp.options.hosts.domain })\n                .c('services', { xmlns: 'urn:xmpp:extdisco:2' }),\n            v2Res => this.onReceiveStunAndTurnCredentials(v2Res),\n            () => {\n                logger.warn('getting turn credentials with extdisco:2 failed, trying extdisco:1');\n                this.connection.sendIQ(\n                    $iq({ type: 'get',\n                        to: this.xmpp.options.hosts.domain })\n                        .c('services', { xmlns: 'urn:xmpp:extdisco:1' }),\n                    v1Res => this.onReceiveStunAndTurnCredentials(v1Res),\n                    () => {\n                        logger.warn('getting turn credentials failed');\n                        logger.warn('is mod_turncredentials or similar installed and configured?');\n                    }\n                );\n            });\n    }\n\n    /**\n     * Parses response when querying for services using urn:xmpp:extdisco:1 or urn:xmpp:extdisco:2.\n     * Stores results in jvbIceConfig and p2pIceConfig.\n     * @param res The response iq.\n     * @return {boolean} Whether something was processed from the supplied message.\n     */\n    onReceiveStunAndTurnCredentials(res) {\n        const iceservers = [];\n\n        $(res).find('>services>service').each((idx, el) => {\n            // eslint-disable-next-line no-param-reassign\n            el = $(el);\n            const dict = {};\n            const type = el.attr('type');\n\n            switch (type) {\n            case 'stun':\n                dict.urls = `stun:${el.attr('host')}`;\n                if (el.attr('port')) {\n                    dict.urls += `:${el.attr('port')}`;\n                }\n                iceservers.push(dict);\n                break;\n            case 'turn':\n            case 'turns': {\n                dict.urls = `${type}:`;\n                dict.username = el.attr('username');\n                dict.urls += el.attr('host');\n                const port = el.attr('port');\n\n                if (port) {\n                    dict.urls += `:${el.attr('port')}`;\n                }\n                const transport = el.attr('transport');\n\n                if (transport && transport !== 'udp') {\n                    dict.urls += `?transport=${transport}`;\n                }\n\n                dict.credential = el.attr('password')\n                        || dict.credential;\n                iceservers.push(dict);\n                break;\n            }\n            }\n        });\n\n        const options = this.xmpp.options;\n\n        // Shuffle ICEServers for loadbalancing\n        for (let i = iceservers.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            const temp = iceservers[i];\n\n            iceservers[i] = iceservers[j];\n            iceservers[j] = temp;\n        }\n\n        let filter;\n\n        if (options.useTurnUdp) {\n            filter = s => s.urls.startsWith('turn');\n        } else {\n            // By default we filter out STUN and TURN/UDP and leave only TURN/TCP.\n            filter = s => s.urls.startsWith('turn') && (s.urls.indexOf('transport=tcp') >= 0);\n        }\n\n        this.jvbIceConfig.iceServers = iceservers.filter(filter);\n        this.p2pIceConfig.iceServers = iceservers;\n\n        return iceservers.length > 0;\n    }\n\n    /**\n     * Returns the data saved in 'updateLog' in a format to be logged.\n     */\n    getLog() {\n        const data = {};\n\n        Object.keys(this.sessions).forEach(sid => {\n            const session = this.sessions[sid];\n            const pc = session.peerconnection;\n\n            if (pc && pc.updateLog) {\n                // FIXME: should probably be a .dump call\n                data[`jingle_${sid}`] = {\n                    updateLog: pc.updateLog,\n                    stats: pc.stats,\n                    url: window.location.href\n                };\n            }\n        });\n\n        return data;\n    }\n}\n\n/* eslint-enable newline-per-chained-call */\n","import { Strophe } from 'strophe.js';\n\nimport ConnectionPlugin from './ConnectionPlugin';\n\n/**\n *  Logs raw stanzas and makes them available for download as JSON\n */\nclass StropheLogger extends ConnectionPlugin {\n    /**\n     *\n     */\n    constructor() {\n        super();\n        this.log = [];\n    }\n\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n        this.connection.rawInput = this.logIncoming.bind(this);\n        this.connection.rawOutput = this.logOutgoing.bind(this);\n    }\n\n    /**\n     *\n     * @param stanza\n     */\n    logIncoming(stanza) {\n        this.log.push([ new Date().getTime(), 'incoming', stanza ]);\n    }\n\n    /**\n     *\n     * @param stanza\n     */\n    logOutgoing(stanza) {\n        this.log.push([ new Date().getTime(), 'outgoing', stanza ]);\n    }\n}\n\n/**\n *\n */\nexport default function() {\n    Strophe.addConnectionPlugin('logger', new StropheLogger());\n}\n","/* global $ */\n\nimport { getLogger } from '@jitsi/logger';\nimport { $iq } from 'strophe.js';\n\nimport ConnectionPlugin from './ConnectionPlugin';\n\nconst logger = getLogger(__filename);\n\nconst RAYO_XMLNS = 'urn:xmpp:rayo:1';\n\n/**\n *\n */\nexport default class RayoConnectionPlugin extends ConnectionPlugin {\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n\n        this.connection.addHandler(\n            this.onRayo.bind(this), RAYO_XMLNS, 'iq', 'set', null, null);\n    }\n\n    /**\n     *\n     * @param iq\n     */\n    onRayo(iq) {\n        logger.info('Rayo IQ', iq);\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     *\n     * @param to\n     * @param from\n     * @param roomName\n     * @param roomPass\n     * @param focusMucJid\n     */\n    dial(to, from, roomName, roomPass, focusMucJid) {\n        return new Promise((resolve, reject) => {\n            if (!focusMucJid) {\n                reject(new Error('Internal error!'));\n\n                return;\n            }\n            const req = $iq({\n                type: 'set',\n                to: focusMucJid\n            });\n\n            req.c('dial', {\n                xmlns: RAYO_XMLNS,\n                to,\n                from\n            });\n            req.c('header', {\n                name: 'JvbRoomName',\n                value: roomName\n            }).up();\n\n            if (roomPass && roomPass.length) {\n                req.c('header', {\n                    name: 'JvbRoomPassword',\n                    value: roomPass\n                }).up();\n            }\n\n            this.connection.sendIQ(\n                req,\n                result => {\n                    logger.info('Dial result ', result);\n\n                    // eslint-disable-next-line newline-per-chained-call\n                    const resource = $(result).find('ref').attr('uri');\n\n                    this.callResource = resource.substr('xmpp:'.length);\n                    logger.info(`Received call resource: ${this.callResource}`);\n                    resolve();\n                },\n                error => {\n                    logger.info('Dial error ', error);\n                    reject(error);\n                });\n        });\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     *\n     */\n    hangup() {\n        return new Promise((resolve, reject) => {\n            if (!this.callResource) {\n                reject(new Error('No call in progress'));\n                logger.warn('No call in progress');\n\n                return;\n            }\n\n            const req = $iq({\n                type: 'set',\n                to: this.callResource\n            });\n\n            req.c('hangup', {\n                xmlns: RAYO_XMLNS\n            });\n\n            this.connection.sendIQ(req, result => {\n                logger.info('Hangup result ', result);\n                this.callResource = null;\n                resolve();\n            }, error => {\n                logger.info('Hangup error ', error);\n                this.callResource = null;\n                reject(new Error('Hangup error '));\n            });\n        });\n    }\n}\n","/**\n * Strophe logger implementation. Logs from level WARN and above.\n */\nimport { getLogger } from '@jitsi/logger';\nimport { Strophe } from 'strophe.js';\n\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nconst logger = getLogger(__filename);\n\n/**\n * This is the last HTTP error status captured from Strophe debug logs.\n * The purpose of storing it is to distinguish between the network and\n * infrastructure reason for connection being dropped (see connectionHandler in\n * xmpp.js). The value will be cleared (-1) if the subsequent request succeeds\n * which means that the failure could be transient.\n *\n * FIXME in the latest Strophe (not released on npm) there is API to handle\n * particular HTTP errors, but there is no way to learn if the subsequent\n * request succeeded in order to tell if the error was one time incident or if\n * it was the reason for dropping the connection by Strophe (the connection is\n * dropped after 5 subsequent failures). Ideally Strophe should provide more\n * details about the reason on why the connection stopped.\n *\n * @type {number}\n */\nlet lastErrorStatus = -1;\n\n/**\n * A regular expression used to catch Strophe's log message indicating that the\n * last BOSH request was successful. When there is such message seen the\n * {@link lastErrorStatus} will be set back to '-1'.\n * @type {RegExp}\n */\nconst resetLastErrorStatusRegExpr = /request id \\d+.\\d+ got 200/;\n\n/**\n * A regular expression used to capture the current value of the BOSH request\n * error status (HTTP error code or '0' or something else).\n * @type {RegExp}\n */\nconst lastErrorStatusRegExpr\n    = /request errored, status: (\\d+), number of errors: \\d+/;\n\n/**\n *\n */\nexport default function() {\n\n    Strophe.log = function(level, msg) {\n        // Our global handler reports uncaught errors to the stats which may\n        // interpret those as partial call failure.\n        // Strophe log entry about secondary request timeout does not mean that\n        // it's a final failure(the request will be restarted), so we lower it's\n        // level here to a warning.\n        logger.trace('Strophe', level, msg);\n        if (typeof msg === 'string'\n                && msg.indexOf('Request ') !== -1\n                && msg.indexOf('timed out (secondary), restarting') !== -1) {\n            // eslint-disable-next-line no-param-reassign\n            level = Strophe.LogLevel.WARN;\n        }\n\n        /* eslint-disable no-case-declarations */\n        switch (level) {\n        case Strophe.LogLevel.DEBUG:\n            // The log message which reports successful status is logged on\n            // Strophe's DEBUG level.\n            if (lastErrorStatus !== -1\n                    && resetLastErrorStatusRegExpr.test(msg)) {\n                logger.debug('Reset lastErrorStatus');\n                lastErrorStatus = -1;\n            }\n            break;\n        case Strophe.LogLevel.WARN:\n            logger.warn(`Strophe: ${msg}`);\n            const errStatusCapture = lastErrorStatusRegExpr.exec(msg);\n\n            if (errStatusCapture && errStatusCapture.length === 2) {\n                lastErrorStatus = parseInt(errStatusCapture[1], 10);\n                logger.debug(`lastErrorStatus set to: ${lastErrorStatus}`);\n            }\n            break;\n        case Strophe.LogLevel.ERROR:\n        case Strophe.LogLevel.FATAL:\n            // eslint-disable-next-line no-param-reassign\n            msg = `Strophe: ${msg}`;\n            GlobalOnErrorHandler.callErrorHandler(new Error(msg));\n            logger.error(msg);\n            break;\n        }\n\n        /* eslint-enable no-case-declarations */\n    };\n\n    /**\n     * Returns error status (HTTP error code) of the last BOSH request.\n     *\n     * @return {number} HTTP error code, '0' for unknown or \"god knows what\"\n     * (this is a hack).\n     */\n    Strophe.getLastErrorStatus = function() {\n        return lastErrorStatus;\n    };\n\n    Strophe.getStatusString = function(status) {\n        switch (status) {\n        case Strophe.Status.BINDREQUIRED:\n            return 'BINDREQUIRED';\n        case Strophe.Status.ERROR:\n            return 'ERROR';\n        case Strophe.Status.CONNECTING:\n            return 'CONNECTING';\n        case Strophe.Status.CONNFAIL:\n            return 'CONNFAIL';\n        case Strophe.Status.AUTHENTICATING:\n            return 'AUTHENTICATING';\n        case Strophe.Status.AUTHFAIL:\n            return 'AUTHFAIL';\n        case Strophe.Status.CONNECTED:\n            return 'CONNECTED';\n        case Strophe.Status.DISCONNECTED:\n            return 'DISCONNECTED';\n        case Strophe.Status.DISCONNECTING:\n            return 'DISCONNECTING';\n        case Strophe.Status.ATTACHED:\n            return 'ATTACHED';\n        default:\n            return 'unknown';\n        }\n    };\n}\n","/* global $ */\n\nimport { getLogger } from '@jitsi/logger';\nimport { $msg, Strophe } from 'strophe.js';\nimport 'strophejs-plugin-disco';\n\nimport * as JitsiConnectionErrors from '../../JitsiConnectionErrors';\nimport * as JitsiConnectionEvents from '../../JitsiConnectionEvents';\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\nimport browser from '../browser';\nimport { E2EEncryption } from '../e2ee/E2EEncryption';\nimport FeatureFlags from '../flags/FeatureFlags';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport Listenable from '../util/Listenable';\nimport RandomUtil from '../util/RandomUtil';\n\nimport Caps, { parseDiscoInfo } from './Caps';\nimport XmppConnection from './XmppConnection';\nimport MucConnectionPlugin from './strophe.emuc';\nimport JingleConnectionPlugin from './strophe.jingle';\nimport initStropheLogger from './strophe.logger';\nimport RayoConnectionPlugin from './strophe.rayo';\nimport initStropheUtil from './strophe.util';\n\nconst logger = getLogger(__filename);\n\n/**\n* Regex to extract exact error message on jwt error.\n*/\nconst FAILURE_REGEX = /<failure.*><not-allowed\\/><text>(.*)<\\/text><\\/failure>/gi;\n\n/**\n * Creates XMPP connection.\n *\n * @param {Object} options\n * @param {string} [options.token] - JWT token used for authentication(JWT authentication module must be enabled in\n * Prosody).\n * @param {string} options.serviceUrl - The service URL for XMPP connection.\n * @param {string} options.shard - The shard where XMPP connection initially landed.\n * @param {string} options.enableWebsocketResume - True to enable stream resumption.\n * @param {number} [options.websocketKeepAlive] - See {@link XmppConnection} constructor.\n * @param {number} [options.websocketKeepAliveUrl] - See {@link XmppConnection} constructor.\n * @param {Object} [options.xmppPing] - See {@link XmppConnection} constructor.\n * @returns {XmppConnection}\n */\nfunction createConnection({\n    enableWebsocketResume,\n    serviceUrl = '/http-bind',\n    shard,\n    token,\n    websocketKeepAlive,\n    websocketKeepAliveUrl,\n    xmppPing }) {\n\n    // Append token as URL param\n    if (token) {\n        // eslint-disable-next-line no-param-reassign\n        serviceUrl += `${serviceUrl.indexOf('?') === -1 ? '?' : '&'}token=${token}`;\n    }\n\n    return new XmppConnection({\n        enableWebsocketResume,\n        serviceUrl,\n        websocketKeepAlive,\n        websocketKeepAliveUrl,\n        xmppPing,\n        shard\n    });\n}\n\n/**\n * Initializes Strophe plugins that need to work with Strophe.Connection directly rather than the lib-jitsi-meet's\n * {@link XmppConnection} wrapper.\n *\n * @returns {void}\n */\nfunction initStropheNativePlugins() {\n    initStropheUtil();\n    initStropheLogger();\n}\n\n// FIXME: remove once we have a default config template. -saghul\n/**\n * A list of ice servers to use by default for P2P.\n */\nexport const DEFAULT_STUN_SERVERS = [\n    { urls: 'stun:meet-jit-si-turnrelay.jitsi.net:443' }\n];\n\n/**\n * The name of the field used to recognize a chat message as carrying a JSON\n * payload from another endpoint.\n * If the json-message of a chat message contains a valid JSON object, and\n * the JSON has this key, then it is a valid json-message to be sent.\n */\nexport const JITSI_MEET_MUC_TYPE = 'type';\n\n/**\n * The feature used by jigasi participants.\n * @type {string}\n */\nexport const FEATURE_JIGASI = 'http://jitsi.org/protocol/jigasi';\n\n/**\n * The feature used by the lib to mark support for e2ee. We use the feature by putting it in the presence\n * to avoid additional signaling (disco-info).\n * @type {string}\n */\nexport const FEATURE_E2EE = 'https://jitsi.org/meet/e2ee';\n\n/**\n *\n */\nexport default class XMPP extends Listenable {\n    /**\n     * FIXME describe all options\n     * @param {Object} options\n     * @param {String} options.serviceUrl - URL passed to the XMPP client which will be used to establish XMPP\n     * connection with the server.\n     * @param {String} options.bosh - Deprecated, use {@code serviceUrl}.\n     * @param {boolean} options.enableWebsocketResume - Enables XEP-0198 stream management which will make the XMPP\n     * module try to resume the session in case the Websocket connection breaks.\n     * @param {number} [options.websocketKeepAlive] - The websocket keep alive interval. See {@link XmppConnection}\n     * constructor for more details.\n     * @param {number} [options.websocketKeepAliveUrl] - The websocket keep alive url. See {@link XmppConnection}\n     * constructor for more details.\n     * @param {Object} [options.xmppPing] - The xmpp ping settings.\n     * @param {Array<Object>} options.p2pStunServers see {@link JingleConnectionPlugin} for more details.\n     * @param token\n     */\n    constructor(options, token) {\n        super();\n        this.connection = null;\n        this.disconnectInProgress = false;\n        this.connectionTimes = {};\n        this.options = options;\n        this.token = token;\n        this.authenticatedUser = false;\n\n        if (!this.options.deploymentInfo) {\n            this.options.deploymentInfo = {};\n        }\n\n        initStropheNativePlugins();\n\n        const xmppPing = options.xmppPing || {};\n\n        // let's ping the main domain (in case a guest one is used for the connection)\n        xmppPing.domain = options.hosts.domain;\n\n        this.connection = createConnection({\n            enableWebsocketResume: options.enableWebsocketResume,\n\n            // FIXME remove deprecated bosh option at some point\n            serviceUrl: options.serviceUrl || options.bosh,\n            token,\n            websocketKeepAlive: options.websocketKeepAlive,\n            websocketKeepAliveUrl: options.websocketKeepAliveUrl,\n            xmppPing,\n            shard: options.deploymentInfo.shard\n        });\n\n        // forwards the shard changed event\n        this.connection.on(XmppConnection.Events.CONN_SHARD_CHANGED, () => {\n            /* eslint-disable camelcase */\n            const details = {\n                shard_changed: true,\n                suspend_time: this.connection.ping.getPingSuspendTime(),\n                time_since_last_success: this.connection.getTimeSinceLastSuccess()\n            };\n            /* eslint-enable camelcase */\n\n            this.eventEmitter.emit(\n                JitsiConnectionEvents.CONNECTION_FAILED,\n                JitsiConnectionErrors.OTHER_ERROR,\n                undefined,\n                undefined,\n                details);\n        });\n\n        this._initStrophePlugins();\n\n        this.caps = new Caps(this.connection, /* clientNode */ 'https://jitsi.org/jitsi-meet');\n\n        // Initialize features advertised in disco-info\n        this.initFeaturesList();\n\n        // Setup a disconnect on unload as a way to facilitate API consumers. It\n        // sounds like they would want that. A problem for them though may be if\n        // they wanted to utilize the connected connection in an unload handler\n        // of their own. However, it should be fairly easy for them to do that\n        // by registering their unload handler before us.\n        // $(window).on(`${this.options.disableBeforeUnloadHandlers ? '' : 'beforeunload '}unload`, ev => {\n        //     this.disconnect(ev).catch(() => {\n        //         // ignore errors in order to not brake the unload.\n        //     });\n        // });\n    }\n\n    /**\n     * Initializes the list of feature advertised through the disco-info\n     * mechanism.\n     */\n    initFeaturesList() {\n        // http://xmpp.org/extensions/xep-0167.html#support\n        // http://xmpp.org/extensions/xep-0176.html#support\n        this.caps.addFeature('urn:xmpp:jingle:1');\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:1');\n        this.caps.addFeature('urn:xmpp:jingle:transports:ice-udp:1');\n        this.caps.addFeature('urn:xmpp:jingle:apps:dtls:0');\n        this.caps.addFeature('urn:xmpp:jingle:transports:dtls-sctp:1');\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:audio');\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:video');\n        this.caps.addFeature('http://jitsi.org/json-encoded-sources');\n\n        if (!(this.options.disableRtx || !browser.supportsRTX())) {\n            this.caps.addFeature('urn:ietf:rfc:4588');\n        }\n        if (this.options.enableOpusRed === true && browser.supportsAudioRed()) {\n            this.caps.addFeature('http://jitsi.org/opus-red');\n        }\n\n        if (typeof this.options.enableRemb === 'undefined' || this.options.enableRemb) {\n            this.caps.addFeature('http://jitsi.org/remb');\n        }\n\n        // Disable TCC on Firefox because of a known issue where BWE is halved on every renegotiation.\n        if (!browser.isFirefox() && (typeof this.options.enableTcc === 'undefined' || this.options.enableTcc)) {\n            this.caps.addFeature('http://jitsi.org/tcc');\n        }\n\n        // this is dealt with by SDP O/A so we don't need to announce this\n        // XEP-0293\n        // this.caps.addFeature('urn:xmpp:jingle:apps:rtp:rtcp-fb:0');\n        // XEP-0294\n        // this.caps.addFeature('urn:xmpp:jingle:apps:rtp:rtp-hdrext:0');\n\n        // this.caps.addFeature('urn:ietf:rfc:5576'); // a=ssrc\n\n        // Enable Lipsync ?\n        if (browser.isChromiumBased() && this.options.enableLipSync === true) {\n            logger.info('Lip-sync enabled !');\n            this.caps.addFeature('http://jitsi.org/meet/lipsync');\n        }\n\n        if (this.connection.rayo) {\n            this.caps.addFeature('urn:xmpp:rayo:client:1');\n        }\n\n        if (E2EEncryption.isSupported(this.options)) {\n            this.caps.addFeature(FEATURE_E2EE, false, true);\n        }\n\n        // Advertise source-name signaling when the endpoint supports it.\n        if (FeatureFlags.isSourceNameSignalingEnabled()) {\n            logger.info('Source-name signaling is enabled');\n            this.caps.addFeature('http://jitsi.org/source-name');\n        }\n        if (FeatureFlags.isReceiveMultipleVideoStreamsSupported()) {\n            logger.info('Receiving multiple video streams is enabled');\n            this.caps.addFeature('http://jitsi.org/receive-multiple-video-streams');\n        }\n\n        if (FeatureFlags.isSsrcRewritingSupported()) {\n            logger.info('SSRC rewriting is supported');\n            this.caps.addFeature('http://jitsi.org/ssrc-rewriting');\n        }\n    }\n\n    /**\n     *\n     */\n    getConnection() {\n        return this.connection;\n    }\n\n    /**\n     * Receive connection status changes and handles them.\n     *\n     * @param {Object} credentials\n     * @param {string} credentials.jid - The user's XMPP ID passed to the\n     * connect method. For example, 'user@xmpp.com'.\n     * @param {string} credentials.password - The password passed to the connect\n     * method.\n     * @param {string} status - One of Strophe's connection status strings.\n     * @param {string} [msg] - The connection error message provided by Strophe.\n     */\n    connectionHandler(credentials = {}, status, msg) {\n        const now = window.performance.now();\n        const statusStr = Strophe.getStatusString(status).toLowerCase();\n\n        this.connectionTimes[statusStr] = now;\n        logger.log(\n            `(TIME) Strophe ${statusStr}${msg ? `[${msg}]` : ''}:\\t`,\n            now);\n\n        this.eventEmitter.emit(XMPPEvents.CONNECTION_STATUS_CHANGED, credentials, status, msg);\n        this._maybeSendDeploymentInfoStat();\n        if (status === Strophe.Status.CONNECTED || status === Strophe.Status.ATTACHED) {\n            // once connected or attached we no longer need this handle, drop it if it exist\n            if (this._sysMessageHandler) {\n                this.connection._stropheConn.deleteHandler(this._sysMessageHandler);\n                this._sysMessageHandler = null;\n            }\n\n            this.sendDiscoInfo && this.connection.jingle.getStunAndTurnCredentials();\n\n            logger.info(`My Jabber ID: ${this.connection.jid}`);\n\n            // XmppConnection emits CONNECTED again on reconnect - a good opportunity to clear any \"last error\" flags\n            this._resetState();\n\n            // make sure we will send the info after the features request succeeds or fails\n            this.sendDeploymentInfo = false;\n            this.sendDiscoInfo && this.caps.getFeaturesAndIdentities(this.options.hosts.domain)\n                .then(({ features, identities }) => {\n                    if (!features.has(Strophe.NS.PING)) {\n                        logger.error(`Ping NOT supported by ${\n                            this.options.hosts.domain} - please enable ping in your XMPP server config`);\n                    }\n\n                    this._processDiscoInfoIdentities(\n                        identities, undefined /* when querying we will query for features */);\n                })\n                .catch(error => {\n                    const errmsg = 'Feature discovery error';\n\n                    GlobalOnErrorHandler.callErrorHandler(\n                        new Error(`${errmsg}: ${error}`));\n                    logger.error(errmsg, error);\n\n                    this._maybeSendDeploymentInfoStat(true);\n                });\n\n            // make sure we don't query again\n            this.sendDiscoInfo = false;\n\n            if (credentials.password) {\n                this.authenticatedUser = true;\n            }\n            if (this.connection && this.connection.connected\n                && Strophe.getResourceFromJid(this.connection.jid)) {\n                // .connected is true while connecting?\n                // this.connection.send($pres());\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_ESTABLISHED,\n                    Strophe.getResourceFromJid(this.connection.jid));\n            }\n        } else if (status === Strophe.Status.CONNFAIL) {\n            if (msg === 'x-strophe-bad-non-anon-jid') {\n                this.anonymousConnectionFailed = true;\n            } else {\n                this.connectionFailed = true;\n            }\n            this.lastErrorMsg = msg;\n            if (msg === 'giving-up') {\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_FAILED,\n                    JitsiConnectionErrors.OTHER_ERROR, msg);\n            }\n        } else if (status === Strophe.Status.ERROR) {\n            this.lastErrorMsg = msg;\n        } else if (status === Strophe.Status.DISCONNECTED) {\n            // Stop ping interval\n            this.connection.ping.stopInterval();\n            const wasIntentionalDisconnect = Boolean(this.disconnectInProgress);\n            const errMsg = msg || this.lastErrorMsg;\n\n            if (this.anonymousConnectionFailed) {\n                // prompt user for username and password\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_FAILED,\n                    JitsiConnectionErrors.PASSWORD_REQUIRED);\n            } else if (this.connectionFailed) {\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_FAILED,\n                    JitsiConnectionErrors.OTHER_ERROR,\n                    errMsg,\n                    undefined, /* credentials */\n                    this._getConnectionFailedReasonDetails());\n            } else if (wasIntentionalDisconnect) {\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_DISCONNECTED, errMsg);\n            } else {\n                // XXX if Strophe drops the connection while not being asked to,\n                // it means that most likely some serious error has occurred.\n                // One currently known case is when a BOSH request fails for\n                // more than 4 times. The connection is dropped without\n                // supplying a reason(error message/event) through the API.\n                logger.error('XMPP connection dropped!');\n\n                // XXX if the last request error is within 5xx range it means it\n                // was a server failure\n                const lastErrorStatus = Strophe.getLastErrorStatus();\n\n                if (lastErrorStatus >= 500 && lastErrorStatus < 600) {\n                    this.eventEmitter.emit(\n                        JitsiConnectionEvents.CONNECTION_FAILED,\n                        JitsiConnectionErrors.SERVER_ERROR,\n                        errMsg || 'server-error',\n                        /* credentials */ undefined,\n                        this._getConnectionFailedReasonDetails());\n                } else {\n                    this.eventEmitter.emit(\n                        JitsiConnectionEvents.CONNECTION_FAILED,\n                        JitsiConnectionErrors.CONNECTION_DROPPED_ERROR,\n                        errMsg || 'connection-dropped-error',\n                        /* credentials */ undefined,\n                        this._getConnectionFailedReasonDetails());\n                }\n            }\n        } else if (status === Strophe.Status.AUTHFAIL) {\n            const lastFailedRawMessage = this.getConnection().getLastFailedMessage();\n\n            // wrong password or username, prompt user\n            this.eventEmitter.emit(\n                JitsiConnectionEvents.CONNECTION_FAILED,\n                JitsiConnectionErrors.PASSWORD_REQUIRED,\n                msg || this._parseConnectionFailedMessage(lastFailedRawMessage),\n                credentials);\n        }\n    }\n\n    /**\n     * Process received identities.\n     * @param {Set<String>} identities The identities to process.\n     * @param {Set<String>} features The features to process, optional. If missing lobby component will be queried\n     * for more features.\n     * @private\n     */\n    _processDiscoInfoIdentities(identities, features) {\n        // check for speakerstats\n        identities.forEach(identity => {\n            if (identity.type === 'av_moderation') {\n                this.avModerationComponentAddress = identity.name;\n            }\n\n            if (identity.type === 'speakerstats') {\n                this.speakerStatsComponentAddress = identity.name;\n            }\n\n            if (identity.type === 'conference_duration') {\n                this.conferenceDurationComponentAddress = identity.name;\n            }\n\n            if (identity.type === 'lobbyrooms') {\n                this.lobbySupported = true;\n                const processLobbyFeatures = f => {\n                    f.forEach(fr => {\n                        if (fr.endsWith('#displayname_required')) {\n                            this.eventEmitter.emit(JitsiConnectionEvents.DISPLAY_NAME_REQUIRED);\n                        }\n                    });\n                };\n\n                if (features) {\n                    processLobbyFeatures(features);\n                } else {\n                    identity.name && this.caps.getFeaturesAndIdentities(identity.name, identity.type)\n                        .then(({ features: f }) => processLobbyFeatures(f))\n                        .catch(e => logger.warn('Error getting features from lobby.', e && e.message));\n                }\n            }\n\n            if (identity.type === 'shard') {\n                this.options.deploymentInfo.shard = this.connection.shard = identity.name;\n            }\n\n            if (identity.type === 'region') {\n                this.options.deploymentInfo.region = this.connection.region = identity.name;\n            }\n\n            if (identity.type === 'release') {\n                this.options.deploymentInfo.backendRelease = identity.name;\n            }\n\n            if (identity.type === 'breakout_rooms') {\n                this.breakoutRoomsComponentAddress = identity.name;\n            }\n        });\n\n        this._maybeSendDeploymentInfoStat(true);\n\n        if (this.avModerationComponentAddress\n            || this.speakerStatsComponentAddress\n            || this.conferenceDurationComponentAddress\n            || this.breakoutRoomsComponentAddress) {\n            this.connection.addHandler(this._onPrivateMessage.bind(this), null, 'message', null, null);\n        }\n    }\n\n    /**\n    * Parses a raw failure xmpp xml message received on auth failed.\n    *\n    * @param {string} msg - The raw failure message from xmpp.\n    * @returns {string|null} - The parsed message from the raw xmpp message.\n    */\n    _parseConnectionFailedMessage(msg) {\n        if (!msg) {\n            return null;\n        }\n\n        const matches = FAILURE_REGEX.exec(msg);\n\n        return matches ? matches[1] : null;\n    }\n\n    /**\n     *\n     * @param jid\n     * @param password\n     */\n    _connect(jid, password) {\n        // connection.connect() starts the connection process.\n        //\n        // As the connection process proceeds, the user supplied callback will\n        // be triggered multiple times with status updates. The callback should\n        // take two arguments - the status code and the error condition.\n        //\n        // The status code will be one of the values in the Strophe.Status\n        // constants. The error condition will be one of the conditions defined\n        // in RFC 3920 or the condition ‘strophe-parsererror’.\n        //\n        // The Parameters wait, hold and route are optional and only relevant\n        // for BOSH connections. Please see XEP 124 for a more detailed\n        // explanation of the optional parameters.\n        //\n        // Connection status constants for use by the connection handler\n        // callback.\n        //\n        //  Status.ERROR - An error has occurred (websockets specific)\n        //  Status.CONNECTING - The connection is currently being made\n        //  Status.CONNFAIL - The connection attempt failed\n        //  Status.AUTHENTICATING - The connection is authenticating\n        //  Status.AUTHFAIL - The authentication attempt failed\n        //  Status.CONNECTED - The connection has succeeded\n        //  Status.DISCONNECTED - The connection has been terminated\n        //  Status.DISCONNECTING - The connection is currently being terminated\n        //  Status.ATTACHED - The connection has been attached\n\n        this._resetState();\n\n        // we want to send this only on the initial connect\n        this.sendDiscoInfo = true;\n        this.sendDeploymentInfo = true;\n\n        if (this.connection._stropheConn && this.connection._stropheConn._addSysHandler) {\n            this._sysMessageHandler = this.connection._stropheConn._addSysHandler(\n                this._onSystemMessage.bind(this),\n                null,\n                'message'\n            );\n        } else {\n            logger.warn('Cannot attach strophe system handler, jiconop cannot operate');\n        }\n\n        this.connection.connect(\n            jid,\n            password,\n            this.connectionHandler.bind(this, {\n                jid,\n                password\n            }));\n    }\n\n    /**\n     * Receives system messages during the connect/login process and checks for services or\n     * @param msg The received message.\n     * @returns {void}\n     * @private\n     */\n    _onSystemMessage(msg) {\n        // proceed only if the message has any of the expected information\n        if ($(msg).find('>services').length === 0 && $(msg).find('>query').length === 0) {\n            return;\n        }\n\n        this.sendDiscoInfo = false;\n\n        const foundIceServers = this.connection.jingle.onReceiveStunAndTurnCredentials(msg);\n\n        const { features, identities } = parseDiscoInfo(msg);\n\n        this._processDiscoInfoIdentities(identities, features);\n\n        if (foundIceServers || identities.size > 0 || features.size > 0) {\n            this.connection._stropheConn.deleteHandler(this._sysMessageHandler);\n            this._sysMessageHandler = null;\n        }\n    }\n\n    /**\n     * Attach to existing connection. Can be used for optimizations. For\n     * example: if the connection is created on the server we can attach to it\n     * and start using it.\n     *\n     * @param options {object} connecting options - rid, sid, jid and password.\n     */\n    attach(options) {\n        this._resetState();\n\n        // we want to send this only on the initial connect\n        this.sendDiscoInfo = true;\n\n        const now = this.connectionTimes.attaching = window.performance.now();\n\n        logger.log('(TIME) Strophe Attaching:\\t', now);\n        this.connection.attach(options.jid, options.sid,\n            parseInt(options.rid, 10) + 1,\n            this.connectionHandler.bind(this, {\n                jid: options.jid,\n                password: options.password\n            }));\n    }\n\n    /**\n     * Resets any state/flag before starting a new connection.\n     * @private\n     */\n    _resetState() {\n        this.anonymousConnectionFailed = false;\n        this.connectionFailed = false;\n        this.lastErrorMsg = undefined;\n        this.disconnectInProgress = undefined;\n    }\n\n    /**\n     *\n     * @param jid\n     * @param password\n     */\n    connect(jid, password) {\n        if (!jid) {\n            const { anonymousdomain, domain } = this.options.hosts;\n            let configDomain = anonymousdomain || domain;\n\n            // Force authenticated domain if room is appended with '?login=true'\n            // or if we're joining with the token\n\n            // FIXME Do not rely on window.location because (1) React Native\n            // does not have a window.location by default and (2) here we cannot\n            // know for sure that query/search has not be stripped from\n            // window.location by the time the following executes.\n            const { location } = window;\n\n            if (anonymousdomain) {\n                const search = location && location.search;\n\n                if ((search && search.indexOf('login=true') !== -1)\n                        || this.token) {\n                    configDomain = domain;\n                }\n            }\n\n            // eslint-disable-next-line no-param-reassign\n            jid = configDomain || (location && location.hostname);\n        }\n\n        return this._connect(jid, password);\n    }\n\n    /**\n     * Joins or creates a muc with the provided jid, created from the passed\n     * in room name and muc host and onCreateResource result.\n     *\n     * @param {string} roomName - The name of the muc to join.\n     * @param {Object} options - Configuration for how to join the muc.\n     * @param {Function} [onCreateResource] - Callback to invoke when a resource\n     * is to be added to the jid.\n     * @returns {Promise} Resolves with an instance of a strophe muc.\n     */\n    createRoom(roomName, options, onCreateResource) {\n        // Support passing the domain in a String object as part of the room name.\n        const domain = roomName.domain || options.customDomain;\n\n        // There are cases (when using subdomain) where muc can hold an uppercase part\n        let roomjid = `${this.getRoomJid(roomName, domain)}/`;\n        const mucNickname = onCreateResource\n            ? onCreateResource(this.connection.jid, this.authenticatedUser)\n            : RandomUtil.randomHexString(8).toLowerCase();\n\n        logger.info(`JID ${this.connection.jid} using MUC nickname ${mucNickname}`);\n        roomjid += mucNickname;\n\n        return this.connection.emuc.createRoom(roomjid, null, options);\n    }\n\n    /**\n     * Returns the room JID based on the passed room name and domain.\n     *\n     * @param {string} roomName - The room name.\n     * @param {string} domain - The domain.\n     * @returns {string} - The room JID.\n     */\n    getRoomJid(roomName, domain) {\n        return `${roomName}@${domain ? domain : this.options.hosts.muc.toLowerCase()}`;\n    }\n\n    /**\n     * Check if a room with the passed JID is already created.\n     *\n     * @param {string} roomJid - The JID of the room.\n     * @returns {boolean}\n     */\n    isRoomCreated(roomName, domain) {\n        return this.connection.emuc.isRoomCreated(this.getRoomJid(roomName, domain));\n    }\n\n    /**\n     * Returns the jid of the participant associated with the Strophe connection.\n     *\n     * @returns {string} The jid of the participant.\n     */\n    getJid() {\n        return this.connection.jid;\n    }\n\n    /**\n     * Returns the logs from strophe.jingle.\n     * @returns {Object}\n     */\n    getJingleLog() {\n        const jingle = this.connection.jingle;\n\n\n        return jingle ? jingle.getLog() : {};\n    }\n\n    /**\n     * Returns the logs from strophe.\n     */\n    getXmppLog() {\n        return (this.connection.logger || {}).log || null;\n    }\n\n    /**\n     *\n     */\n    dial(...args) {\n        this.connection.rayo.dial(...args);\n    }\n\n    /**\n     * Pings the server.\n     * @param timeout how many ms before a timeout should occur.\n     * @returns {Promise} resolved on ping success and reject on an error or\n     * a timeout.\n     */\n    ping(timeout) {\n        return new Promise((resolve, reject) => {\n            this.connection.ping.ping(this.connection.pingDomain, resolve, reject, timeout);\n        });\n    }\n\n    /**\n     *\n     */\n    getSessions() {\n        return this.connection.jingle.sessions;\n    }\n\n    /**\n     * Disconnects this from the XMPP server (if this is connected).\n     *\n     * @param {Object} ev - Optionally, the event which triggered the necessity to\n     * disconnect from the XMPP server (e.g. beforeunload, unload).\n     * @returns {Promise} - Resolves when the disconnect process is finished or rejects with an error.\n     */\n    disconnect(ev) {\n        if (this.disconnectInProgress) {\n            return this.disconnectInProgress;\n        } else if (!this.connection) {\n            return Promise.resolve();\n        }\n\n        this.disconnectInProgress = new Promise(resolve => {\n            const disconnectListener = (credentials, status) => {\n                if (status === Strophe.Status.DISCONNECTED) {\n                    resolve();\n                    this.eventEmitter.removeListener(XMPPEvents.CONNECTION_STATUS_CHANGED, disconnectListener);\n                }\n            };\n\n            this.eventEmitter.on(XMPPEvents.CONNECTION_STATUS_CHANGED, disconnectListener);\n        });\n\n        this._cleanupXmppConnection(ev);\n\n        return this.disconnectInProgress;\n    }\n\n    /**\n     * The method is supposed to gracefully close the XMPP connection and the main goal is to make sure that the current\n     * participant will be removed from the conference XMPP MUC, so that it doesn't leave a \"ghost\" participant behind.\n     *\n     * @param {Object} ev - Optionally, the event which triggered the necessity to disconnect from the XMPP server\n     * (e.g. beforeunload, unload).\n     * @private\n     * @returns {void}\n     */\n    _cleanupXmppConnection(ev) {\n        // XXX Strophe is asynchronously sending by default. Unfortunately, that means that there may not be enough time\n        // to send an unavailable presence or disconnect at all. Switching Strophe to synchronous sending is not much of\n        // an option because it may lead to a noticeable delay in navigating away from the current location. As\n        // a compromise, we will try to increase the chances of sending an unavailable presence and/or disconnecting\n        // within the short time span that we have upon unloading by invoking flush() on the connection. We flush() once\n        // before disconnect() in order to attempt to have its unavailable presence at the top of the send queue. We\n        // flush() once more after disconnect() in order to attempt to have its unavailable presence sent as soon as\n        // possible.\n        !this.connection.isUsingWebSocket && this.connection.flush();\n\n        if (!this.connection.isUsingWebSocket && ev !== null && typeof ev !== 'undefined') {\n            const evType = ev.type;\n\n            if (evType === 'beforeunload' || evType === 'unload') {\n                // XXX Whatever we said above, synchronous sending is the best (known) way to properly disconnect from\n                // the XMPP server. Consequently, it may be fine to have the source code and comment it in or out\n                // depending on whether we want to run with it for some time.\n                this.connection.options.sync = true;\n\n                // This is needed in some browsers where sync xhr sending is disabled by default on unload.\n                if (this.connection.sendUnavailableBeacon()) {\n\n                    return;\n                }\n            }\n        }\n\n        this.connection.disconnect();\n\n        if (this.connection.options.sync !== true) {\n            this.connection.flush();\n        }\n    }\n\n    /**\n     *\n     */\n    _initStrophePlugins() {\n        const iceConfig = {\n            jvb: { iceServers: [ ] },\n            p2p: { iceServers: [ ] }\n        };\n\n        const p2pStunServers = (this.options.p2p\n            && this.options.p2p.stunServers) || DEFAULT_STUN_SERVERS;\n\n        if (Array.isArray(p2pStunServers)) {\n            logger.info('P2P STUN servers: ', p2pStunServers);\n            iceConfig.p2p.iceServers = p2pStunServers;\n        }\n\n        if (this.options.p2p && this.options.p2p.iceTransportPolicy) {\n            logger.info('P2P ICE transport policy: ',\n                this.options.p2p.iceTransportPolicy);\n\n            iceConfig.p2p.iceTransportPolicy\n                = this.options.p2p.iceTransportPolicy;\n        }\n\n        this.connection.addConnectionPlugin('emuc', new MucConnectionPlugin(this));\n        this.connection.addConnectionPlugin('jingle', new JingleConnectionPlugin(this, this.eventEmitter, iceConfig));\n        this.connection.addConnectionPlugin('rayo', new RayoConnectionPlugin());\n    }\n\n    /**\n     * Returns details about connection failure. Shard change or is it after\n     * suspend.\n     * @returns {object} contains details about a connection failure.\n     * @private\n     */\n    _getConnectionFailedReasonDetails() {\n        const details = {};\n\n        // check for moving between shard if information is available\n        if (this.options.deploymentInfo\n            && this.options.deploymentInfo.shard\n            && this.connection.lastResponseHeaders) {\n\n            // split headers by line\n            const headersArr = this.connection.lastResponseHeaders\n                .trim().split(/[\\r\\n]+/);\n            const headers = {};\n\n            headersArr.forEach(line => {\n                const parts = line.split(': ');\n                const header = parts.shift();\n                const value = parts.join(': ');\n\n                headers[header] = value;\n            });\n\n            /* eslint-disable camelcase */\n            details.shard_changed\n                = this.options.deploymentInfo.shard\n                    !== headers['x-jitsi-shard'];\n            /* eslint-enable camelcase */\n        }\n\n        /* eslint-disable camelcase */\n        // check for possible suspend\n        details.suspend_time = this.connection.ping.getPingSuspendTime();\n        details.time_since_last_success = this.connection.getTimeSinceLastSuccess();\n        /* eslint-enable camelcase */\n\n        return details;\n    }\n\n    /**\n     * Notifies speaker stats component if available that we are the new\n     * dominant speaker in the conference.\n     * @param {String} roomJid - The room jid where the speaker event occurred.\n     */\n    sendDominantSpeakerEvent(roomJid) {\n        // no speaker stats component advertised\n        if (!this.speakerStatsComponentAddress || !roomJid) {\n            return;\n        }\n\n        const msg = $msg({ to: this.speakerStatsComponentAddress });\n\n        msg.c('speakerstats', {\n            xmlns: 'http://jitsi.org/jitmeet',\n            room: roomJid })\n            .up();\n\n        this.connection.send(msg);\n    }\n\n    /**\n     * Sends face expressions to speaker stats component.\n     * @param {String} roomJid - The room jid where the speaker event occurred.\n     * @param {Object} payload - The expression to be sent to the speaker stats.\n     */\n    sendFaceExpressionEvent(roomJid, payload) {\n        // no speaker stats component advertised\n        if (!this.speakerStatsComponentAddress || !roomJid) {\n            return;\n        }\n\n        const msg = $msg({ to: this.speakerStatsComponentAddress });\n\n        msg.c('faceExpression', {\n            xmlns: 'http://jitsi.org/jitmeet',\n            room: roomJid,\n            expression: payload.faceExpression,\n            duration: payload.duration\n        }).up();\n\n        this.connection.send(msg);\n    }\n\n    /**\n     * Check if the given argument is a valid JSON ENDPOINT_MESSAGE string by\n     * parsing it and checking if it has a field called 'type'.\n     *\n     * @param {string} jsonString check if this string is a valid json string\n     * and contains the special structure.\n     * @returns {boolean, object} if given object is a valid JSON string, return\n     * the json object. Otherwise, returns false.\n     */\n    tryParseJSONAndVerify(jsonString) {\n        // ignore empty strings, like message errors\n        if (!jsonString) {\n            return false;\n        }\n\n        try {\n            const json = JSON.parse(jsonString);\n\n            // Handle non-exception-throwing cases:\n            // Neither JSON.parse(false) or JSON.parse(1234) throw errors,\n            // hence the type-checking,\n            // but... JSON.parse(null) returns null, and\n            // typeof null === \"object\",\n            // so we must check for that, too.\n            // Thankfully, null is falsey, so this suffices:\n            if (json && typeof json === 'object') {\n                const type = json[JITSI_MEET_MUC_TYPE];\n\n                if (typeof type !== 'undefined') {\n                    return json;\n                }\n\n                logger.debug('parsing valid json but does not have correct '\n                    + 'structure', 'topic: ', type);\n            }\n        } catch (e) {\n            logger.error(`Error parsing json ${jsonString}`, e);\n\n            return false;\n        }\n\n        return false;\n    }\n\n    /**\n     * A private message is received, message that is not addressed to the muc.\n     * We expect private message coming from plugins component if it is\n     * enabled and running.\n     *\n     * @param {string} msg - The message.\n     */\n    _onPrivateMessage(msg) {\n        const from = msg.getAttribute('from');\n\n        if (!(from === this.speakerStatsComponentAddress\n            || from === this.conferenceDurationComponentAddress\n            || from === this.avModerationComponentAddress\n            || from === this.breakoutRoomsComponentAddress)) {\n            return true;\n        }\n\n        const jsonMessage = $(msg).find('>json-message')\n            .text();\n        const parsedJson = this.tryParseJSONAndVerify(jsonMessage);\n\n        if (!parsedJson) {\n            return true;\n        }\n\n        if (parsedJson[JITSI_MEET_MUC_TYPE] === 'speakerstats' && parsedJson.users) {\n            this.eventEmitter.emit(XMPPEvents.SPEAKER_STATS_RECEIVED, parsedJson.users);\n        } else if (parsedJson[JITSI_MEET_MUC_TYPE] === 'conference_duration' && parsedJson.created_timestamp) {\n            this.eventEmitter.emit(XMPPEvents.CONFERENCE_TIMESTAMP_RECEIVED, parsedJson.created_timestamp);\n        } else if (parsedJson[JITSI_MEET_MUC_TYPE] === 'av_moderation') {\n            this.eventEmitter.emit(XMPPEvents.AV_MODERATION_RECEIVED, parsedJson);\n        } else if (parsedJson[JITSI_MEET_MUC_TYPE] === 'breakout_rooms') {\n            this.eventEmitter.emit(XMPPEvents.BREAKOUT_ROOMS_EVENT, parsedJson);\n        }\n\n        return true;\n    }\n\n    /**\n     * Sends deployment info to stats if not sent already.\n     * We want to try sending it on failure to connect\n     * or when we get a sys message(from jiconop2)\n     * or after success or failure of disco-info\n     * @param force Whether to force sending without checking anything.\n     * @private\n     */\n    _maybeSendDeploymentInfoStat(force) {\n        const acceptedStatuses = [\n            Strophe.Status.ERROR,\n            Strophe.Status.CONNFAIL,\n            Strophe.Status.AUTHFAIL,\n            Strophe.Status.DISCONNECTED,\n            Strophe.Status.CONNTIMEOUT\n        ];\n\n        if (!force && !(acceptedStatuses.includes(this.connection.status) && this.sendDeploymentInfo)) {\n            return;\n        }\n\n        // Log deployment-specific information, if available. Defined outside\n        // the application by individual deployments\n        const aprops = this.options.deploymentInfo;\n\n        if (aprops && Object.keys(aprops).length > 0) {\n            const logObject = {};\n\n            for (const attr in aprops) {\n                if (aprops.hasOwnProperty(attr)) {\n                    logObject[attr] = aprops[attr];\n                }\n            }\n\n            // Let's push to analytics any updates that may have come from the backend\n            Statistics.analytics.addPermanentProperties({ ...logObject });\n\n            logObject.id = 'deployment_info';\n            Statistics.sendLog(JSON.stringify(logObject));\n        }\n\n        this.sendDeploymentInfo = false;\n    }\n}\n","import {\n    CONNECTION_DISCONNECTED,\n    CONNECTION_ESTABLISHED,\n    CONNECTION_FAILED\n} from './JitsiConnectionEvents';\nimport XMPP from './modules/xmpp/xmpp';\n\n/**\n * @typedef {Object} UpgradeRoleError\n *\n * @property {JitsiConnectionErrors} [connectionError] - One of\n * {@link JitsiConnectionErrors} which occurred when trying to connect to the\n * XMPP server.\n * @property {String} [authenticationError] - One of XMPP error conditions\n * returned by Jicofo on authentication attempt. See\n * {@link https://xmpp.org/rfcs/rfc3920.html#streams-error}.\n * @property {String} [message] - More details about the error.\n * @property {Object} [credentials] - The credentials that failed the\n * authentication.\n * @property {String} [credentials.jid] - The XMPP ID part of the credentials\n * that failed the authentication.\n * @property {string} [credentials.password] - The password part of the\n * credentials that failed the authentication.\n *\n * NOTE If neither one of the errors is present, then the operation has been\n * canceled.\n */\n\n/* eslint-disable no-invalid-this */\n\n/**\n * Connects to the XMPP server using the specified credentials and contacts\n * Jicofo in order to obtain a session ID (which is then stored in the local\n * storage). The user's role of the parent conference will be upgraded to\n * moderator (by Jicofo). It's also used to join the conference when starting\n * from anonymous domain and only authenticated users are allowed to create new\n * rooms.\n *\n * @param {Object} options\n * @param {string} options.id - XMPP user's ID to log in. For example,\n * user@xmpp-server.com.\n * @param {string} options.password - XMPP user's password to log in with.\n * @param {Function} [options.onLoginSuccessful] - Callback called when logging\n * into the XMPP server was successful. The next step will be to obtain a new\n * session ID from Jicofo and join the MUC using it which will effectively\n * upgrade the user's role to moderator.\n * @returns {Object} A <tt>thenable</tt> which (1) settles when the process of\n * authenticating and upgrading the role of the specified XMPP user finishes and\n * (2) has a <tt>cancel</tt> method that allows the caller to interrupt the\n * process. If the process finishes successfully, the session ID has been stored\n * in the settings and the <tt>thenable</tt> is resolved. If the process\n * finishes with failure, the <tt>thenable</tt> is rejected with reason of type\n * {@link UpgradeRoleError} which will have either <tt>connectionError</tt> or\n * <tt>authenticationError</tt> property set depending on which of the steps has\n * failed. If <tt>cancel</tt> is called before the process finishes, then the\n * thenable will be rejected with an empty object (i.e. no error property will\n * be set on the rejection reason).\n */\nexport default function authenticateAndUpgradeRole({\n    // 1. Log the specified XMPP user in.\n    id,\n    password,\n    onCreateResource,\n\n    // 2. Let the API client/consumer know as soon as the XMPP user has been\n    //    successfully logged in.\n    onLoginSuccessful\n}) {\n    let canceled = false;\n    let rejectPromise;\n    let xmpp = new XMPP(this.connection.options);\n\n    const process = new Promise((resolve, reject) => {\n        // The process is represented by a Thenable with a cancel method. The\n        // Thenable is implemented using Promise and the cancel using the\n        // Promise's reject function.\n        rejectPromise = reject;\n\n\n        xmpp.addListener(\n            CONNECTION_DISCONNECTED,\n            () => {\n                xmpp = undefined;\n            });\n        xmpp.addListener(\n            CONNECTION_ESTABLISHED,\n            () => {\n                if (canceled) {\n                    return;\n                }\n\n                // Let the caller know that the XMPP login was successful.\n                onLoginSuccessful && onLoginSuccessful();\n\n                // Now authenticate with Jicofo and get a new session ID.\n                const room = xmpp.createRoom(\n                    this.options.name,\n                    this.options.config,\n                    onCreateResource\n                );\n\n                room.moderator.authenticate()\n                    .then(() => {\n                        xmpp && xmpp.disconnect();\n\n                        if (canceled) {\n                            return;\n                        }\n\n                        // At this point we should have the new session ID\n                        // stored in the settings. Send a new conference IQ.\n                        this.room.moderator.allocateConferenceFocus();\n\n                        resolve();\n                    })\n                    .catch(({ error, message }) => {\n                        xmpp.disconnect();\n\n                        reject({\n                            authenticationError: error,\n                            message\n                        });\n                    });\n            });\n        xmpp.addListener(\n            CONNECTION_FAILED,\n            (connectionError, message, credentials) => {\n                reject({\n                    connectionError,\n                    credentials,\n                    message\n                });\n                xmpp = undefined;\n            });\n\n        canceled || xmpp.connect(id, password);\n    });\n\n    /**\n     * Cancels the process, if it's in progress, of authenticating and upgrading\n     * the role of the local participant/user.\n     *\n     * @public\n     * @returns {void}\n     */\n    process.cancel = () => {\n        canceled = true;\n        rejectPromise({});\n        xmpp && xmpp.disconnect();\n    };\n\n    return process;\n}\n\n/* eslint-enable no-invalid-this */\n","\nimport { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport CodecMimeType from '../../service/RTC/CodecMimeType';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport browser from '../browser';\n\nconst logger = getLogger(__filename);\n\n/**\n * This class handles the codec selection mechanism for the conference based on the config.js settings.\n * The preferred codec is selected based on the settings and the list of codecs supported by the browser.\n * The preferred codec is published in presence which is then used by the other endpoints in the\n * conference to pick a supported codec at join time and when the call transitions between p2p and jvb\n * connections.\n */\nexport class CodecSelection {\n    /**\n     * Creates a new instance for a given conference.\n     *\n     * @param {JitsiConference} conference the conference instance\n     * @param {*} options\n     * @param {string} options.disabledCodec the codec that needs to be disabled.\n     * @param {boolean} options.enforcePreferredCodec whether codec preference has to be\n     * enforced even when an endpoints that doesn't support the preferred codec joins the call.\n     * Falling back to the standard codec will be skipped when this option is true, endpoints\n     * that do not support the preferred codec may not be able to encode/decode video when this happens.\n     * @param {string} options.jvbCodec the codec that is preferred on jvb connection.\n     * @param {string} options.p2pCodec the codec that is preferred on p2p connection.\n     */\n    constructor(conference, options) {\n        this.conference = conference;\n        this.options = options;\n\n        // VP8 cannot be disabled and it will be the default codec when no preference is set.\n        this.disabledCodec = options.disabledCodec === CodecMimeType.VP8\n            ? undefined\n            : this._getCodecMimeType(options.disabledCodec);\n\n        // Check if the codec values passed are valid.\n        const jvbCodec = this._getCodecMimeType(options.jvbCodec);\n        const p2pCodec = this._getCodecMimeType(options.p2pCodec);\n\n        this.jvbPreferredCodec = jvbCodec && this._isCodecSupported(jvbCodec) ? jvbCodec : CodecMimeType.VP8;\n        this.p2pPreferredCodec = p2pCodec && this._isCodecSupported(p2pCodec) ? p2pCodec : CodecMimeType.VP8;\n        logger.debug(`Codec preferences for the conference are JVB: ${this.jvbPreferredCodec},\n            P2P: ${this.p2pPreferredCodec}`);\n\n        if (this.jvbPreferredCodec === CodecMimeType.VP9 && !browser.supportsVP9()) {\n            this.jvbPreferredCodec = CodecMimeType.VP8;\n        }\n\n        this.conference.on(\n            JitsiConferenceEvents.USER_JOINED,\n            () => this._selectPreferredCodec());\n        this.conference.on(\n            JitsiConferenceEvents.USER_LEFT,\n            () => this._selectPreferredCodec());\n        this.conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n            session => this._onMediaSessionStarted(session));\n    }\n\n    /**\n     * Checks if a given string is a valid video codec mime type.\n     *\n     * @param {string} codec the codec string that needs to be validated.\n     * @returns {CodecMimeType|null} mime type if valid, null otherwise.\n     * @private\n     */\n    _getCodecMimeType(codec) {\n        if (typeof codec === 'string') {\n            return Object.values(CodecMimeType).find(value => value === codec.toLowerCase());\n        }\n\n        return null;\n    }\n\n    /**\n     * Checks if the given codec is supported by the browser.\n     *\n     * @param {CodecMimeType} preferredCodec codec to be checked.\n     * @returns {boolean} true if the given codec is supported, false otherwise.\n     * @private\n     */\n    _isCodecSupported(preferredCodec) {\n        // Skip the check on FF and RN because they do not support the getCapabilities API.\n        // It is safe to assume both of them support all the codecs supported by Chrome.\n        if (browser.isFirefox() || browser.isReactNative()) {\n            return true;\n        }\n\n        return window.RTCRtpReceiver\n            && window.RTCRtpReceiver.getCapabilities\n            && window.RTCRtpReceiver.getCapabilities('video').codecs\n            .some(codec => codec.mimeType.toLowerCase() === `video/${preferredCodec}`);\n    }\n\n    /**\n     * Handles the {@link JitsiConferenceEvents._MEDIA_SESSION_STARTED} event. Codecs need to be\n     * configured on the media session that is newly created.\n     *\n     * @param {JingleSessionPC} mediaSession media session that started.\n     * @returns {void}\n     * @private\n     */\n    _onMediaSessionStarted(mediaSession) {\n        const preferredCodec = mediaSession.isP2P ? this.p2pPreferredCodec : this.jvbPreferredCodec;\n        const disabledCodec = this.disabledCodec && this._isCodecSupported(this.disabledCodec)\n            ? this.disabledCodec\n            : null;\n\n        this._selectPreferredCodec(mediaSession, preferredCodec, disabledCodec);\n    }\n\n    /**\n     * Sets the codec on the media session based on the preferred codec setting and the supported codecs\n     * published by the remote participants in their presence.\n     *\n     * @param {JingleSessionPC} mediaSession session for which the codec selection has to be made.\n     * @param {CodecMimeType} preferredCodec preferred codec.\n     * @param {CodecMimeType} disabledCodec codec that needs to be disabled.\n     */\n    _selectPreferredCodec(mediaSession = null, preferredCodec = null, disabledCodec = null) {\n        const session = mediaSession ? mediaSession : this.conference.jvbJingleSession;\n        const currentCodec = preferredCodec ? preferredCodec : this.jvbPreferredCodec;\n        let selectedCodec = currentCodec;\n\n        if (session && !session.isP2P && !this.options.enforcePreferredCodec) {\n            const remoteParticipants = this.conference.getParticipants().map(participant => participant.getId());\n\n            for (const remote of remoteParticipants) {\n                const peerMediaInfo = session._signalingLayer.getPeerMediaInfo(remote, MediaType.VIDEO);\n                const peerCodec = peerMediaInfo?.codecType;\n\n                if (peerCodec\n                    && peerCodec !== currentCodec\n                    && (peerCodec !== CodecMimeType.VP9 || browser.supportsVP9())) {\n                    selectedCodec = peerCodec;\n                }\n            }\n        }\n        session && session.setVideoCodecs(selectedCodec, disabledCodec);\n    }\n\n    /**\n     * Returns the preferred codec for the conference. The preferred codec for the JVB media session\n     * is the one that gets published in presence and a comparision is made whenever a participant joins\n     * or leaves the call.\n     *\n     * @returns {CodecMimeType} preferred codec.\n     */\n    getPreferredCodec() {\n        return this.jvbPreferredCodec;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport { createBridgeChannelClosedEvent } from '../../service/statistics/AnalyticsEvents';\nimport FeatureFlags from '../flags/FeatureFlags';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nconst logger = getLogger(__filename);\n\n/**\n * Handles a WebRTC RTCPeerConnection or a WebSocket instance to communicate\n * with the videobridge.\n */\nexport default class BridgeChannel {\n    /**\n     * Binds \"ondatachannel\" event listener on the given RTCPeerConnection\n     * instance, or creates a WebSocket connection with the videobridge.\n     * At least one of both, peerconnection or wsUrl parameters, must be\n     * given.\n     * @param {RTCPeerConnection} [peerconnection] WebRTC peer connection\n     * instance.\n     * @param {string} [wsUrl] WebSocket URL.\n     * @param {EventEmitter} emitter the EventEmitter instance to use for event emission.\n     */\n    constructor(peerconnection, wsUrl, emitter) {\n        if (!peerconnection && !wsUrl) {\n            throw new TypeError('At least peerconnection or wsUrl must be given');\n        } else if (peerconnection && wsUrl) {\n            throw new TypeError('Just one of peerconnection or wsUrl must be given');\n        }\n\n        if (peerconnection) {\n            logger.debug('constructor() with peerconnection');\n        } else {\n            logger.debug(`constructor() with wsUrl:\"${wsUrl}\"`);\n        }\n\n        // The underlying WebRTC RTCDataChannel or WebSocket instance.\n        // @type {RTCDataChannel|WebSocket}\n        this._channel = null;\n\n        // @type {EventEmitter}\n        this._eventEmitter = emitter;\n\n        // Whether a RTCDataChannel or WebSocket is internally used.\n        // @type {string} \"datachannel\" / \"websocket\"\n        this._mode = null;\n\n        // Indicates whether the connection retries are enabled or not.\n        this._areRetriesEnabled = false;\n\n        // Indicates whether the connection was closed from the client or not.\n        this._closedFromClient = false;\n\n        // If a RTCPeerConnection is given, listen for new RTCDataChannel\n        // event.\n        if (peerconnection) {\n            const datachannel\n                = peerconnection.createDataChannel(\n                    'JVB data channel', {\n                        protocol: 'http://jitsi.org/protocols/colibri'\n                    });\n\n            // Handle the RTCDataChannel.\n            this._handleChannel(datachannel);\n            this._mode = 'datachannel';\n\n        // Otherwise create a WebSocket connection.\n        } else if (wsUrl) {\n            this._areRetriesEnabled = true;\n            this._wsUrl = wsUrl;\n            this._initWebSocket();\n        }\n    }\n\n    /**\n     * Initializes the web socket channel.\n     *\n     * @returns {void}\n     */\n    _initWebSocket() {\n        // Create a WebSocket instance.\n        const ws = new WebSocket(this._wsUrl);\n\n        // Handle the WebSocket.\n        this._handleChannel(ws);\n        this._mode = 'websocket';\n    }\n\n    /**\n     * Starts the websocket connection retries.\n     *\n     * @returns {void}\n     */\n    _startConnectionRetries() {\n        let timeoutS = 1;\n\n        const reload = () => {\n            if (this.isOpen()) {\n                return;\n            }\n            this._initWebSocket(this._wsUrl);\n            timeoutS = Math.min(timeoutS * 2, 60);\n            this._retryTimeout = setTimeout(reload, timeoutS * 1000);\n        };\n\n        this._retryTimeout = setTimeout(reload, timeoutS * 1000);\n    }\n\n    /**\n     * Stops the websocket connection retries.\n     *\n     * @returns {void}\n     */\n    _stopConnectionRetries() {\n        if (this._retryTimeout) {\n            clearTimeout(this._retryTimeout);\n            this._retryTimeout = undefined;\n        }\n    }\n\n    /**\n     * Retries to establish the websocket connection after the connection was closed by the server.\n     *\n     * @param {CloseEvent} closeEvent - The close event that triggered the retries.\n     * @returns {void}\n     */\n    _retryWebSocketConnection(closeEvent) {\n        if (!this._areRetriesEnabled) {\n            return;\n        }\n        const { code, reason } = closeEvent;\n\n        Statistics.sendAnalytics(createBridgeChannelClosedEvent(code, reason));\n        this._areRetriesEnabled = false;\n        this._eventEmitter.once(RTCEvents.DATA_CHANNEL_OPEN, () => {\n            this._stopConnectionRetries();\n            this._areRetriesEnabled = true;\n        });\n        this._startConnectionRetries();\n    }\n\n    /**\n     * The channel mode.\n     * @return {string} \"datachannel\" or \"websocket\" (or null if not yet set).\n     */\n    get mode() {\n        return this._mode;\n    }\n\n    /**\n     * Closes the currently opened channel.\n     */\n    close() {\n        this._closedFromClient = true;\n        this._stopConnectionRetries();\n        this._areRetriesEnabled = false;\n        if (this._channel) {\n            try {\n                this._channel.close();\n            } catch (error) {} // eslint-disable-line no-empty\n\n            this._channel = null;\n        }\n    }\n\n    /**\n     * Whether there is an underlying RTCDataChannel or WebSocket and it's\n     * open.\n     * @return {boolean}\n     */\n    isOpen() {\n        return this._channel && (this._channel.readyState === 'open'\n            || this._channel.readyState === WebSocket.OPEN);\n    }\n\n    /**\n     * Sends local stats via the bridge channel.\n     * @param {Object} payload The payload of the message.\n     * @throws NetworkError/InvalidStateError/Error if the operation fails or if there is no data channel created.\n     */\n    sendEndpointStatsMessage(payload) {\n        this._send({\n            colibriClass: 'EndpointStats',\n            ...payload\n        });\n    }\n\n    /**\n     * Sends message via the channel.\n     * @param {string} to The id of the endpoint that should receive the\n     * message. If \"\" the message will be sent to all participants.\n     * @param  {object} payload The payload of the message.\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\n     * or from WebSocket#send or Error with \"No opened channel\" message.\n     */\n    sendMessage(to, payload) {\n        this._send({\n            colibriClass: 'EndpointMessage',\n            msgPayload: payload,\n            to\n        });\n    }\n\n    /**\n     * Sends a \"lastN value changed\" message via the channel.\n     * @param {number} value The new value for lastN. -1 means unlimited.\n     */\n    sendSetLastNMessage(value) {\n        logger.log(`Sending lastN=${value}.`);\n\n        this._send({\n            colibriClass: 'LastNChangedEvent',\n            lastN: value\n        });\n    }\n\n    /**\n     * Sends a \"selected endpoints changed\" message via the channel.\n     *\n     * @param {Array<string>} endpointIds - The ids of the selected endpoints.\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\n     * or from WebSocket#send or Error with \"No opened channel\" message.\n     */\n    sendSelectedEndpointsMessage(endpointIds) {\n        logger.log(`Sending selected endpoints: ${endpointIds}.`);\n\n        this._send({\n            colibriClass: 'SelectedEndpointsChangedEvent',\n            selectedEndpoints: endpointIds\n        });\n    }\n\n    /**\n     * Sends a \"receiver video constraint\" message via the channel.\n     * @param {Number} maxFrameHeightPixels the maximum frame height,\n     * in pixels, this receiver is willing to receive\n     */\n    sendReceiverVideoConstraintMessage(maxFrameHeightPixels) {\n        logger.log(`Sending ReceiverVideoConstraint with maxFrameHeight=${maxFrameHeightPixels}px`);\n        this._send({\n            colibriClass: 'ReceiverVideoConstraint',\n            maxFrameHeight: maxFrameHeightPixels\n        });\n    }\n\n    /**\n     * Sends a 'ReceiverVideoConstraints' message via the bridge channel.\n     *\n     * @param {ReceiverVideoConstraints} constraints video constraints.\n     */\n    sendNewReceiverVideoConstraintsMessage(constraints) {\n        logger.log(`Sending ReceiverVideoConstraints with ${JSON.stringify(constraints)}`);\n        this._send({\n            colibriClass: 'ReceiverVideoConstraints',\n            ...constraints\n        });\n    }\n\n    /**\n     * Sends a 'VideoTypeMessage' message via the bridge channel.\n     *\n     * @param {string} videoType 'camera', 'desktop' or 'none'.\n     * @deprecated to be replaced with sendSourceVideoTypeMessage\n     */\n    sendVideoTypeMessage(videoType) {\n        logger.debug(`Sending VideoTypeMessage with video type as ${videoType}`);\n        this._send({\n            colibriClass: 'VideoTypeMessage',\n            videoType\n        });\n    }\n\n    /**\n     * Sends a 'VideoTypeMessage' message via the bridge channel.\n     *\n     * @param {BridgeVideoType} videoType - the video type.\n     * @param {SourceName} sourceName - the source name of the video track.\n     * @returns {void}\n     */\n    sendSourceVideoTypeMessage(sourceName, videoType) {\n        logger.info(`Sending SourceVideoTypeMessage with video type ${sourceName}: ${videoType}`);\n        this._send({\n            colibriClass: 'SourceVideoTypeMessage',\n            sourceName,\n            videoType\n        });\n    }\n\n    /**\n     * Set events on the given RTCDataChannel or WebSocket instance.\n     */\n    _handleChannel(channel) {\n        const emitter = this._eventEmitter;\n\n        channel.onopen = () => {\n            logger.info(`${this._mode} channel opened`);\n\n            // Code sample for sending string and/or binary data.\n            // Sends string message to the bridge:\n            //     channel.send(\"Hello bridge!\");\n            // Sends 12 bytes binary message to the bridge:\n            //     channel.send(new ArrayBuffer(12));\n\n            emitter.emit(RTCEvents.DATA_CHANNEL_OPEN);\n        };\n\n        channel.onerror = event => {\n            // WS error events contain no information about the failure (this is available in the onclose event) and\n            // the event references the WS object itself, which causes hangs on mobile.\n            if (this._mode !== 'websocket') {\n                logger.error(`Channel error: ${event.message}`);\n            }\n        };\n\n        channel.onmessage = ({ data }) => {\n            // JSON object.\n            let obj;\n\n            try {\n                obj = JSON.parse(data);\n            } catch (error) {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error('Failed to parse channel message as JSON: ', data, error);\n\n                return;\n            }\n\n            const colibriClass = obj.colibriClass;\n\n            switch (colibriClass) {\n            case 'DominantSpeakerEndpointChangeEvent': {\n                const { dominantSpeakerEndpoint, previousSpeakers = [] } = obj;\n\n                logger.debug(`Dominant speaker: ${dominantSpeakerEndpoint}, previous speakers: ${previousSpeakers}`);\n                emitter.emit(RTCEvents.DOMINANT_SPEAKER_CHANGED, dominantSpeakerEndpoint, previousSpeakers);\n                break;\n            }\n            case 'EndpointConnectivityStatusChangeEvent': {\n                const endpoint = obj.endpoint;\n                const isActive = obj.active === 'true';\n\n                logger.info(`Endpoint connection status changed: ${endpoint} active=${isActive}`);\n                emitter.emit(RTCEvents.ENDPOINT_CONN_STATUS_CHANGED, endpoint, isActive);\n\n                break;\n            }\n            case 'EndpointMessage': {\n                emitter.emit(RTCEvents.ENDPOINT_MESSAGE_RECEIVED, obj.from, obj.msgPayload);\n\n                break;\n            }\n            case 'EndpointStats': {\n                emitter.emit(RTCEvents.ENDPOINT_STATS_RECEIVED, obj.from, obj);\n\n                break;\n            }\n            case 'LastNEndpointsChangeEvent': {\n                if (!FeatureFlags.isSourceNameSignalingEnabled()) {\n                    // The new/latest list of last-n endpoint IDs (i.e. endpoints for which the bridge is sending\n                    // video).\n                    const lastNEndpoints = obj.lastNEndpoints;\n\n                    logger.info(`New forwarded endpoints: ${lastNEndpoints}`);\n                    emitter.emit(RTCEvents.LASTN_ENDPOINT_CHANGED, lastNEndpoints);\n                }\n\n                break;\n            }\n            case 'ForwardedSources': {\n                if (FeatureFlags.isSourceNameSignalingEnabled()) {\n                    // The new/latest list of forwarded sources\n                    const forwardedSources = obj.forwardedSources;\n\n                    logger.info(`New forwarded sources: ${forwardedSources}`);\n                    emitter.emit(RTCEvents.FORWARDED_SOURCES_CHANGED, forwardedSources);\n                }\n\n                break;\n            }\n            case 'SenderVideoConstraints': {\n                const videoConstraints = obj.videoConstraints;\n\n                if (videoConstraints) {\n                    logger.info(`SenderVideoConstraints: ${JSON.stringify(videoConstraints)}`);\n                    emitter.emit(RTCEvents.SENDER_VIDEO_CONSTRAINTS_CHANGED, videoConstraints);\n                }\n                break;\n            }\n            case 'SenderSourceConstraints': {\n                if (FeatureFlags.isSourceNameSignalingEnabled()) {\n                    const { sourceName, maxHeight } = obj;\n\n                    if (typeof sourceName === 'string' && typeof maxHeight === 'number') {\n                        // eslint-disable-next-line object-property-newline\n                        logger.info(`SenderSourceConstraints: ${JSON.stringify({ sourceName, maxHeight })}`);\n                        emitter.emit(\n                            RTCEvents.SENDER_VIDEO_CONSTRAINTS_CHANGED, {\n                                sourceName,\n                                maxHeight\n                            }\n                        );\n                    } else {\n                        logger.error(`Invalid SenderSourceConstraints: ${JSON.stringify(obj)}`);\n                    }\n                }\n                break;\n            }\n            case 'ServerHello': {\n                logger.info(`Received ServerHello, version=${obj.version}.`);\n                break;\n            }\n            default: {\n                logger.debug('Channel JSON-formatted message: ', obj);\n\n                // The received message appears to be appropriately formatted\n                // (i.e. is a JSON object which assigns a value to the\n                // mandatory property colibriClass) so don't just swallow it,\n                // expose it to public consumption.\n                emitter.emit(`rtc.datachannel.${colibriClass}`, obj);\n            }\n            }\n        };\n\n        channel.onclose = event => {\n            logger.info(`Channel closed by ${this._closedFromClient ? 'client' : 'server'}`);\n\n            if (this._mode === 'websocket') {\n                if (!this._closedFromClient) {\n                    logger.error(`Channel closed: ${event.code} ${event.reason}`);\n                    this._retryWebSocketConnection(event);\n                }\n            }\n\n            // Remove the channel.\n            this._channel = null;\n        };\n\n        // Store the channel.\n        this._channel = channel;\n    }\n\n    /**\n     * Sends passed object via the channel.\n     * @param {object} jsonObject The object that will be sent.\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\n     * or from WebSocket#send or Error with \"No opened channel\" message.\n     */\n    _send(jsonObject) {\n        const channel = this._channel;\n\n        if (!this.isOpen()) {\n            logger.error('Bridge Channel send: no opened channel.');\n            throw new Error('No opened channel');\n        }\n\n        channel.send(JSON.stringify(jsonObject));\n    }\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\n\nlet logDisabled_ = true;\nlet deprecationWarnings_ = true;\n\n/**\n * Extract browser version out of the provided user agent string.\n *\n * @param {!string} uastring userAgent string.\n * @param {!string} expr Regular expression used as match criteria.\n * @param {!number} pos position in the version string to be returned.\n * @return {!number} browser version.\n */\nexport function extractVersion(uastring, expr, pos) {\n  const match = uastring.match(expr);\n  return match && match.length >= pos && parseInt(match[pos], 10);\n}\n\n// Wraps the peerconnection event eventNameToWrap in a function\n// which returns the modified event object (or false to prevent\n// the event).\nexport function wrapPeerConnectionEvent(window, eventNameToWrap, wrapper) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  const proto = window.RTCPeerConnection.prototype;\n  const nativeAddEventListener = proto.addEventListener;\n  proto.addEventListener = function(nativeEventName, cb) {\n    if (nativeEventName !== eventNameToWrap) {\n      return nativeAddEventListener.apply(this, arguments);\n    }\n    const wrappedCallback = (e) => {\n      const modifiedEvent = wrapper(e);\n      if (modifiedEvent) {\n        if (cb.handleEvent) {\n          cb.handleEvent(modifiedEvent);\n        } else {\n          cb(modifiedEvent);\n        }\n      }\n    };\n    this._eventMap = this._eventMap || {};\n    if (!this._eventMap[eventNameToWrap]) {\n      this._eventMap[eventNameToWrap] = new Map();\n    }\n    this._eventMap[eventNameToWrap].set(cb, wrappedCallback);\n    return nativeAddEventListener.apply(this, [nativeEventName,\n      wrappedCallback]);\n  };\n\n  const nativeRemoveEventListener = proto.removeEventListener;\n  proto.removeEventListener = function(nativeEventName, cb) {\n    if (nativeEventName !== eventNameToWrap || !this._eventMap\n        || !this._eventMap[eventNameToWrap]) {\n      return nativeRemoveEventListener.apply(this, arguments);\n    }\n    if (!this._eventMap[eventNameToWrap].has(cb)) {\n      return nativeRemoveEventListener.apply(this, arguments);\n    }\n    const unwrappedCb = this._eventMap[eventNameToWrap].get(cb);\n    this._eventMap[eventNameToWrap].delete(cb);\n    if (this._eventMap[eventNameToWrap].size === 0) {\n      delete this._eventMap[eventNameToWrap];\n    }\n    if (Object.keys(this._eventMap).length === 0) {\n      delete this._eventMap;\n    }\n    return nativeRemoveEventListener.apply(this, [nativeEventName,\n      unwrappedCb]);\n  };\n\n  Object.defineProperty(proto, 'on' + eventNameToWrap, {\n    get() {\n      return this['_on' + eventNameToWrap];\n    },\n    set(cb) {\n      if (this['_on' + eventNameToWrap]) {\n        this.removeEventListener(eventNameToWrap,\n            this['_on' + eventNameToWrap]);\n        delete this['_on' + eventNameToWrap];\n      }\n      if (cb) {\n        this.addEventListener(eventNameToWrap,\n            this['_on' + eventNameToWrap] = cb);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n}\n\nexport function disableLog(bool) {\n  if (typeof bool !== 'boolean') {\n    return new Error('Argument type: ' + typeof bool +\n        '. Please use a boolean.');\n  }\n  logDisabled_ = bool;\n  return (bool) ? 'adapter.js logging disabled' :\n      'adapter.js logging enabled';\n}\n\n/**\n * Disable or enable deprecation warnings\n * @param {!boolean} bool set to true to disable warnings.\n */\nexport function disableWarnings(bool) {\n  if (typeof bool !== 'boolean') {\n    return new Error('Argument type: ' + typeof bool +\n        '. Please use a boolean.');\n  }\n  deprecationWarnings_ = !bool;\n  return 'adapter.js deprecation warnings ' + (bool ? 'disabled' : 'enabled');\n}\n\nexport function log() {\n  if (typeof window === 'object') {\n    if (logDisabled_) {\n      return;\n    }\n    if (typeof console !== 'undefined' && typeof console.log === 'function') {\n      console.log.apply(console, arguments);\n    }\n  }\n}\n\n/**\n * Shows a deprecation warning suggesting the modern and spec-compatible API.\n */\nexport function deprecated(oldMethod, newMethod) {\n  if (!deprecationWarnings_) {\n    return;\n  }\n  console.warn(oldMethod + ' is deprecated, please use ' + newMethod +\n      ' instead.');\n}\n\n/**\n * Browser detector.\n *\n * @return {object} result containing browser and version\n *     properties.\n */\nexport function detectBrowser(window) {\n  // Returned result object.\n  const result = {browser: null, version: null};\n\n  // Fail early if it's not a browser\n  if (typeof window === 'undefined' || !window.navigator) {\n    result.browser = 'Not a browser.';\n    return result;\n  }\n\n  const {navigator} = window;\n\n  if (navigator.mozGetUserMedia) { // Firefox.\n    result.browser = 'firefox';\n    result.version = extractVersion(navigator.userAgent,\n        /Firefox\\/(\\d+)\\./, 1);\n  } else if (navigator.webkitGetUserMedia ||\n      (window.isSecureContext === false && window.webkitRTCPeerConnection &&\n       !window.RTCIceGatherer)) {\n    // Chrome, Chromium, Webview, Opera.\n    // Version matches Chrome/WebRTC version.\n    // Chrome 74 removed webkitGetUserMedia on http as well so we need the\n    // more complicated fallback to webkitRTCPeerConnection.\n    result.browser = 'chrome';\n    result.version = extractVersion(navigator.userAgent,\n        /Chrom(e|ium)\\/(\\d+)\\./, 2);\n  } else if (window.RTCPeerConnection &&\n      navigator.userAgent.match(/AppleWebKit\\/(\\d+)\\./)) { // Safari.\n    result.browser = 'safari';\n    result.version = extractVersion(navigator.userAgent,\n        /AppleWebKit\\/(\\d+)\\./, 1);\n    result.supportsUnifiedPlan = window.RTCRtpTransceiver &&\n        'currentDirection' in window.RTCRtpTransceiver.prototype;\n  } else { // Default fallthrough: not supported.\n    result.browser = 'Not a supported browser.';\n    return result;\n  }\n\n  return result;\n}\n\n/**\n * Checks if something is an object.\n *\n * @param {*} val The something you want to check.\n * @return true if val is an object, false otherwise.\n */\nfunction isObject(val) {\n  return Object.prototype.toString.call(val) === '[object Object]';\n}\n\n/**\n * Remove all empty objects and undefined values\n * from a nested object -- an enhanced and vanilla version\n * of Lodash's `compact`.\n */\nexport function compactObject(data) {\n  if (!isObject(data)) {\n    return data;\n  }\n\n  return Object.keys(data).reduce(function(accumulator, key) {\n    const isObj = isObject(data[key]);\n    const value = isObj ? compactObject(data[key]) : data[key];\n    const isEmptyObject = isObj && !Object.keys(value).length;\n    if (value === undefined || isEmptyObject) {\n      return accumulator;\n    }\n    return Object.assign(accumulator, {[key]: value});\n  }, {});\n}\n\n/* iterates the stats graph recursively. */\nexport function walkStats(stats, base, resultSet) {\n  if (!base || resultSet.has(base.id)) {\n    return;\n  }\n  resultSet.set(base.id, base);\n  Object.keys(base).forEach(name => {\n    if (name.endsWith('Id')) {\n      walkStats(stats, stats.get(base[name]), resultSet);\n    } else if (name.endsWith('Ids')) {\n      base[name].forEach(id => {\n        walkStats(stats, stats.get(id), resultSet);\n      });\n    }\n  });\n}\n\n/* filter getStats for a sender/receiver track. */\nexport function filterStats(result, track, outbound) {\n  const streamStatsType = outbound ? 'outbound-rtp' : 'inbound-rtp';\n  const filteredResult = new Map();\n  if (track === null) {\n    return filteredResult;\n  }\n  const trackStats = [];\n  result.forEach(value => {\n    if (value.type === 'track' &&\n        value.trackIdentifier === track.id) {\n      trackStats.push(value);\n    }\n  });\n  trackStats.forEach(trackStat => {\n    result.forEach(stats => {\n      if (stats.type === streamStatsType && stats.trackId === trackStat.id) {\n        walkStats(result, stats, filteredResult);\n      }\n    });\n  });\n  return filteredResult;\n}\n\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\nimport * as utils from '../utils.js';\nconst logging = utils.log;\n\nexport function shimGetUserMedia(window, browserDetails) {\n  const navigator = window && window.navigator;\n\n  if (!navigator.mediaDevices) {\n    return;\n  }\n\n  const constraintsToChrome_ = function(c) {\n    if (typeof c !== 'object' || c.mandatory || c.optional) {\n      return c;\n    }\n    const cc = {};\n    Object.keys(c).forEach(key => {\n      if (key === 'require' || key === 'advanced' || key === 'mediaSource') {\n        return;\n      }\n      const r = (typeof c[key] === 'object') ? c[key] : {ideal: c[key]};\n      if (r.exact !== undefined && typeof r.exact === 'number') {\n        r.min = r.max = r.exact;\n      }\n      const oldname_ = function(prefix, name) {\n        if (prefix) {\n          return prefix + name.charAt(0).toUpperCase() + name.slice(1);\n        }\n        return (name === 'deviceId') ? 'sourceId' : name;\n      };\n      if (r.ideal !== undefined) {\n        cc.optional = cc.optional || [];\n        let oc = {};\n        if (typeof r.ideal === 'number') {\n          oc[oldname_('min', key)] = r.ideal;\n          cc.optional.push(oc);\n          oc = {};\n          oc[oldname_('max', key)] = r.ideal;\n          cc.optional.push(oc);\n        } else {\n          oc[oldname_('', key)] = r.ideal;\n          cc.optional.push(oc);\n        }\n      }\n      if (r.exact !== undefined && typeof r.exact !== 'number') {\n        cc.mandatory = cc.mandatory || {};\n        cc.mandatory[oldname_('', key)] = r.exact;\n      } else {\n        ['min', 'max'].forEach(mix => {\n          if (r[mix] !== undefined) {\n            cc.mandatory = cc.mandatory || {};\n            cc.mandatory[oldname_(mix, key)] = r[mix];\n          }\n        });\n      }\n    });\n    if (c.advanced) {\n      cc.optional = (cc.optional || []).concat(c.advanced);\n    }\n    return cc;\n  };\n\n  const shimConstraints_ = function(constraints, func) {\n    if (browserDetails.version >= 61) {\n      return func(constraints);\n    }\n    constraints = JSON.parse(JSON.stringify(constraints));\n    if (constraints && typeof constraints.audio === 'object') {\n      const remap = function(obj, a, b) {\n        if (a in obj && !(b in obj)) {\n          obj[b] = obj[a];\n          delete obj[a];\n        }\n      };\n      constraints = JSON.parse(JSON.stringify(constraints));\n      remap(constraints.audio, 'autoGainControl', 'googAutoGainControl');\n      remap(constraints.audio, 'noiseSuppression', 'googNoiseSuppression');\n      constraints.audio = constraintsToChrome_(constraints.audio);\n    }\n    if (constraints && typeof constraints.video === 'object') {\n      // Shim facingMode for mobile & surface pro.\n      let face = constraints.video.facingMode;\n      face = face && ((typeof face === 'object') ? face : {ideal: face});\n      const getSupportedFacingModeLies = browserDetails.version < 66;\n\n      if ((face && (face.exact === 'user' || face.exact === 'environment' ||\n                    face.ideal === 'user' || face.ideal === 'environment')) &&\n          !(navigator.mediaDevices.getSupportedConstraints &&\n            navigator.mediaDevices.getSupportedConstraints().facingMode &&\n            !getSupportedFacingModeLies)) {\n        delete constraints.video.facingMode;\n        let matches;\n        if (face.exact === 'environment' || face.ideal === 'environment') {\n          matches = ['back', 'rear'];\n        } else if (face.exact === 'user' || face.ideal === 'user') {\n          matches = ['front'];\n        }\n        if (matches) {\n          // Look for matches in label, or use last cam for back (typical).\n          return navigator.mediaDevices.enumerateDevices()\n          .then(devices => {\n            devices = devices.filter(d => d.kind === 'videoinput');\n            let dev = devices.find(d => matches.some(match =>\n              d.label.toLowerCase().includes(match)));\n            if (!dev && devices.length && matches.includes('back')) {\n              dev = devices[devices.length - 1]; // more likely the back cam\n            }\n            if (dev) {\n              constraints.video.deviceId = face.exact ? {exact: dev.deviceId} :\n                                                        {ideal: dev.deviceId};\n            }\n            constraints.video = constraintsToChrome_(constraints.video);\n            logging('chrome: ' + JSON.stringify(constraints));\n            return func(constraints);\n          });\n        }\n      }\n      constraints.video = constraintsToChrome_(constraints.video);\n    }\n    logging('chrome: ' + JSON.stringify(constraints));\n    return func(constraints);\n  };\n\n  const shimError_ = function(e) {\n    if (browserDetails.version >= 64) {\n      return e;\n    }\n    return {\n      name: {\n        PermissionDeniedError: 'NotAllowedError',\n        PermissionDismissedError: 'NotAllowedError',\n        InvalidStateError: 'NotAllowedError',\n        DevicesNotFoundError: 'NotFoundError',\n        ConstraintNotSatisfiedError: 'OverconstrainedError',\n        TrackStartError: 'NotReadableError',\n        MediaDeviceFailedDueToShutdown: 'NotAllowedError',\n        MediaDeviceKillSwitchOn: 'NotAllowedError',\n        TabCaptureError: 'AbortError',\n        ScreenCaptureError: 'AbortError',\n        DeviceCaptureError: 'AbortError'\n      }[e.name] || e.name,\n      message: e.message,\n      constraint: e.constraint || e.constraintName,\n      toString() {\n        return this.name + (this.message && ': ') + this.message;\n      }\n    };\n  };\n\n  const getUserMedia_ = function(constraints, onSuccess, onError) {\n    shimConstraints_(constraints, c => {\n      navigator.webkitGetUserMedia(c, onSuccess, e => {\n        if (onError) {\n          onError(shimError_(e));\n        }\n      });\n    });\n  };\n  navigator.getUserMedia = getUserMedia_.bind(navigator);\n\n  // Even though Chrome 45 has navigator.mediaDevices and a getUserMedia\n  // function which returns a Promise, it does not accept spec-style\n  // constraints.\n  if (navigator.mediaDevices.getUserMedia) {\n    const origGetUserMedia = navigator.mediaDevices.getUserMedia.\n        bind(navigator.mediaDevices);\n    navigator.mediaDevices.getUserMedia = function(cs) {\n      return shimConstraints_(cs, c => origGetUserMedia(c).then(stream => {\n        if (c.audio && !stream.getAudioTracks().length ||\n            c.video && !stream.getVideoTracks().length) {\n          stream.getTracks().forEach(track => {\n            track.stop();\n          });\n          throw new DOMException('', 'NotFoundError');\n        }\n        return stream;\n      }, e => Promise.reject(shimError_(e))));\n    };\n  }\n}\n","/*\n *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\nexport function shimGetDisplayMedia(window, getSourceId) {\n  if (window.navigator.mediaDevices &&\n    'getDisplayMedia' in window.navigator.mediaDevices) {\n    return;\n  }\n  if (!(window.navigator.mediaDevices)) {\n    return;\n  }\n  // getSourceId is a function that returns a promise resolving with\n  // the sourceId of the screen/window/tab to be shared.\n  if (typeof getSourceId !== 'function') {\n    console.error('shimGetDisplayMedia: getSourceId argument is not ' +\n        'a function');\n    return;\n  }\n  window.navigator.mediaDevices.getDisplayMedia =\n    function getDisplayMedia(constraints) {\n      return getSourceId(constraints)\n        .then(sourceId => {\n          const widthSpecified = constraints.video && constraints.video.width;\n          const heightSpecified = constraints.video &&\n            constraints.video.height;\n          const frameRateSpecified = constraints.video &&\n            constraints.video.frameRate;\n          constraints.video = {\n            mandatory: {\n              chromeMediaSource: 'desktop',\n              chromeMediaSourceId: sourceId,\n              maxFrameRate: frameRateSpecified || 3\n            }\n          };\n          if (widthSpecified) {\n            constraints.video.mandatory.maxWidth = widthSpecified;\n          }\n          if (heightSpecified) {\n            constraints.video.mandatory.maxHeight = heightSpecified;\n          }\n          return window.navigator.mediaDevices.getUserMedia(constraints);\n        });\n    };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\nimport * as utils from '../utils.js';\n\nexport {shimGetUserMedia} from './getusermedia';\nexport {shimGetDisplayMedia} from './getdisplaymedia';\n\nexport function shimMediaStream(window) {\n  window.MediaStream = window.MediaStream || window.webkitMediaStream;\n}\n\nexport function shimOnTrack(window) {\n  if (typeof window === 'object' && window.RTCPeerConnection && !('ontrack' in\n      window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'ontrack', {\n      get() {\n        return this._ontrack;\n      },\n      set(f) {\n        if (this._ontrack) {\n          this.removeEventListener('track', this._ontrack);\n        }\n        this.addEventListener('track', this._ontrack = f);\n      },\n      enumerable: true,\n      configurable: true\n    });\n    const origSetRemoteDescription =\n        window.RTCPeerConnection.prototype.setRemoteDescription;\n    window.RTCPeerConnection.prototype.setRemoteDescription =\n      function setRemoteDescription() {\n        if (!this._ontrackpoly) {\n          this._ontrackpoly = (e) => {\n            // onaddstream does not fire when a track is added to an existing\n            // stream. But stream.onaddtrack is implemented so we use that.\n            e.stream.addEventListener('addtrack', te => {\n              let receiver;\n              if (window.RTCPeerConnection.prototype.getReceivers) {\n                receiver = this.getReceivers()\n                  .find(r => r.track && r.track.id === te.track.id);\n              } else {\n                receiver = {track: te.track};\n              }\n\n              const event = new Event('track');\n              event.track = te.track;\n              event.receiver = receiver;\n              event.transceiver = {receiver};\n              event.streams = [e.stream];\n              this.dispatchEvent(event);\n            });\n            e.stream.getTracks().forEach(track => {\n              let receiver;\n              if (window.RTCPeerConnection.prototype.getReceivers) {\n                receiver = this.getReceivers()\n                  .find(r => r.track && r.track.id === track.id);\n              } else {\n                receiver = {track};\n              }\n              const event = new Event('track');\n              event.track = track;\n              event.receiver = receiver;\n              event.transceiver = {receiver};\n              event.streams = [e.stream];\n              this.dispatchEvent(event);\n            });\n          };\n          this.addEventListener('addstream', this._ontrackpoly);\n        }\n        return origSetRemoteDescription.apply(this, arguments);\n      };\n  } else {\n    // even if RTCRtpTransceiver is in window, it is only used and\n    // emitted in unified-plan. Unfortunately this means we need\n    // to unconditionally wrap the event.\n    utils.wrapPeerConnectionEvent(window, 'track', e => {\n      if (!e.transceiver) {\n        Object.defineProperty(e, 'transceiver',\n          {value: {receiver: e.receiver}});\n      }\n      return e;\n    });\n  }\n}\n\nexport function shimGetSendersWithDtmf(window) {\n  // Overrides addTrack/removeTrack, depends on shimAddTrackRemoveTrack.\n  if (typeof window === 'object' && window.RTCPeerConnection &&\n      !('getSenders' in window.RTCPeerConnection.prototype) &&\n      'createDTMFSender' in window.RTCPeerConnection.prototype) {\n    const shimSenderWithDtmf = function(pc, track) {\n      return {\n        track,\n        get dtmf() {\n          if (this._dtmf === undefined) {\n            if (track.kind === 'audio') {\n              this._dtmf = pc.createDTMFSender(track);\n            } else {\n              this._dtmf = null;\n            }\n          }\n          return this._dtmf;\n        },\n        _pc: pc\n      };\n    };\n\n    // augment addTrack when getSenders is not available.\n    if (!window.RTCPeerConnection.prototype.getSenders) {\n      window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n        this._senders = this._senders || [];\n        return this._senders.slice(); // return a copy of the internal state.\n      };\n      const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n      window.RTCPeerConnection.prototype.addTrack =\n        function addTrack(track, stream) {\n          let sender = origAddTrack.apply(this, arguments);\n          if (!sender) {\n            sender = shimSenderWithDtmf(this, track);\n            this._senders.push(sender);\n          }\n          return sender;\n        };\n\n      const origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;\n      window.RTCPeerConnection.prototype.removeTrack =\n        function removeTrack(sender) {\n          origRemoveTrack.apply(this, arguments);\n          const idx = this._senders.indexOf(sender);\n          if (idx !== -1) {\n            this._senders.splice(idx, 1);\n          }\n        };\n    }\n    const origAddStream = window.RTCPeerConnection.prototype.addStream;\n    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n      this._senders = this._senders || [];\n      origAddStream.apply(this, [stream]);\n      stream.getTracks().forEach(track => {\n        this._senders.push(shimSenderWithDtmf(this, track));\n      });\n    };\n\n    const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n    window.RTCPeerConnection.prototype.removeStream =\n      function removeStream(stream) {\n        this._senders = this._senders || [];\n        origRemoveStream.apply(this, [stream]);\n\n        stream.getTracks().forEach(track => {\n          const sender = this._senders.find(s => s.track === track);\n          if (sender) { // remove sender\n            this._senders.splice(this._senders.indexOf(sender), 1);\n          }\n        });\n      };\n  } else if (typeof window === 'object' && window.RTCPeerConnection &&\n             'getSenders' in window.RTCPeerConnection.prototype &&\n             'createDTMFSender' in window.RTCPeerConnection.prototype &&\n             window.RTCRtpSender &&\n             !('dtmf' in window.RTCRtpSender.prototype)) {\n    const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n    window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n      const senders = origGetSenders.apply(this, []);\n      senders.forEach(sender => sender._pc = this);\n      return senders;\n    };\n\n    Object.defineProperty(window.RTCRtpSender.prototype, 'dtmf', {\n      get() {\n        if (this._dtmf === undefined) {\n          if (this.track.kind === 'audio') {\n            this._dtmf = this._pc.createDTMFSender(this.track);\n          } else {\n            this._dtmf = null;\n          }\n        }\n        return this._dtmf;\n      }\n    });\n  }\n}\n\nexport function shimGetStats(window) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n\n  const origGetStats = window.RTCPeerConnection.prototype.getStats;\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    const [selector, onSucc, onErr] = arguments;\n\n    // If selector is a function then we are in the old style stats so just\n    // pass back the original getStats format to avoid breaking old users.\n    if (arguments.length > 0 && typeof selector === 'function') {\n      return origGetStats.apply(this, arguments);\n    }\n\n    // When spec-style getStats is supported, return those when called with\n    // either no arguments or the selector argument is null.\n    if (origGetStats.length === 0 && (arguments.length === 0 ||\n        typeof selector !== 'function')) {\n      return origGetStats.apply(this, []);\n    }\n\n    const fixChromeStats_ = function(response) {\n      const standardReport = {};\n      const reports = response.result();\n      reports.forEach(report => {\n        const standardStats = {\n          id: report.id,\n          timestamp: report.timestamp,\n          type: {\n            localcandidate: 'local-candidate',\n            remotecandidate: 'remote-candidate'\n          }[report.type] || report.type\n        };\n        report.names().forEach(name => {\n          standardStats[name] = report.stat(name);\n        });\n        standardReport[standardStats.id] = standardStats;\n      });\n\n      return standardReport;\n    };\n\n    // shim getStats with maplike support\n    const makeMapStats = function(stats) {\n      return new Map(Object.keys(stats).map(key => [key, stats[key]]));\n    };\n\n    if (arguments.length >= 2) {\n      const successCallbackWrapper_ = function(response) {\n        onSucc(makeMapStats(fixChromeStats_(response)));\n      };\n\n      return origGetStats.apply(this, [successCallbackWrapper_,\n        selector]);\n    }\n\n    // promise-support\n    return new Promise((resolve, reject) => {\n      origGetStats.apply(this, [\n        function(response) {\n          resolve(makeMapStats(fixChromeStats_(response)));\n        }, reject]);\n    }).then(onSucc, onErr);\n  };\n}\n\nexport function shimSenderReceiverGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\n      window.RTCRtpSender && window.RTCRtpReceiver)) {\n    return;\n  }\n\n  // shim sender stats.\n  if (!('getStats' in window.RTCRtpSender.prototype)) {\n    const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n    if (origGetSenders) {\n      window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n        const senders = origGetSenders.apply(this, []);\n        senders.forEach(sender => sender._pc = this);\n        return senders;\n      };\n    }\n\n    const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n    if (origAddTrack) {\n      window.RTCPeerConnection.prototype.addTrack = function addTrack() {\n        const sender = origAddTrack.apply(this, arguments);\n        sender._pc = this;\n        return sender;\n      };\n    }\n    window.RTCRtpSender.prototype.getStats = function getStats() {\n      const sender = this;\n      return this._pc.getStats().then(result =>\n        /* Note: this will include stats of all senders that\n         *   send a track with the same id as sender.track as\n         *   it is not possible to identify the RTCRtpSender.\n         */\n        utils.filterStats(result, sender.track, true));\n    };\n  }\n\n  // shim receiver stats.\n  if (!('getStats' in window.RTCRtpReceiver.prototype)) {\n    const origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;\n    if (origGetReceivers) {\n      window.RTCPeerConnection.prototype.getReceivers =\n        function getReceivers() {\n          const receivers = origGetReceivers.apply(this, []);\n          receivers.forEach(receiver => receiver._pc = this);\n          return receivers;\n        };\n    }\n    utils.wrapPeerConnectionEvent(window, 'track', e => {\n      e.receiver._pc = e.srcElement;\n      return e;\n    });\n    window.RTCRtpReceiver.prototype.getStats = function getStats() {\n      const receiver = this;\n      return this._pc.getStats().then(result =>\n        utils.filterStats(result, receiver.track, false));\n    };\n  }\n\n  if (!('getStats' in window.RTCRtpSender.prototype &&\n      'getStats' in window.RTCRtpReceiver.prototype)) {\n    return;\n  }\n\n  // shim RTCPeerConnection.getStats(track).\n  const origGetStats = window.RTCPeerConnection.prototype.getStats;\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    if (arguments.length > 0 &&\n        arguments[0] instanceof window.MediaStreamTrack) {\n      const track = arguments[0];\n      let sender;\n      let receiver;\n      let err;\n      this.getSenders().forEach(s => {\n        if (s.track === track) {\n          if (sender) {\n            err = true;\n          } else {\n            sender = s;\n          }\n        }\n      });\n      this.getReceivers().forEach(r => {\n        if (r.track === track) {\n          if (receiver) {\n            err = true;\n          } else {\n            receiver = r;\n          }\n        }\n        return r.track === track;\n      });\n      if (err || (sender && receiver)) {\n        return Promise.reject(new DOMException(\n          'There are more than one sender or receiver for the track.',\n          'InvalidAccessError'));\n      } else if (sender) {\n        return sender.getStats();\n      } else if (receiver) {\n        return receiver.getStats();\n      }\n      return Promise.reject(new DOMException(\n        'There is no sender or receiver for the track.',\n        'InvalidAccessError'));\n    }\n    return origGetStats.apply(this, arguments);\n  };\n}\n\nexport function shimAddTrackRemoveTrackWithNative(window) {\n  // shim addTrack/removeTrack with native variants in order to make\n  // the interactions with legacy getLocalStreams behave as in other browsers.\n  // Keeps a mapping stream.id => [stream, rtpsenders...]\n  window.RTCPeerConnection.prototype.getLocalStreams =\n    function getLocalStreams() {\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n      return Object.keys(this._shimmedLocalStreams)\n        .map(streamId => this._shimmedLocalStreams[streamId][0]);\n    };\n\n  const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n  window.RTCPeerConnection.prototype.addTrack =\n    function addTrack(track, stream) {\n      if (!stream) {\n        return origAddTrack.apply(this, arguments);\n      }\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n\n      const sender = origAddTrack.apply(this, arguments);\n      if (!this._shimmedLocalStreams[stream.id]) {\n        this._shimmedLocalStreams[stream.id] = [stream, sender];\n      } else if (this._shimmedLocalStreams[stream.id].indexOf(sender) === -1) {\n        this._shimmedLocalStreams[stream.id].push(sender);\n      }\n      return sender;\n    };\n\n  const origAddStream = window.RTCPeerConnection.prototype.addStream;\n  window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n    this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n\n    stream.getTracks().forEach(track => {\n      const alreadyExists = this.getSenders().find(s => s.track === track);\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.',\n            'InvalidAccessError');\n      }\n    });\n    const existingSenders = this.getSenders();\n    origAddStream.apply(this, arguments);\n    const newSenders = this.getSenders()\n      .filter(newSender => existingSenders.indexOf(newSender) === -1);\n    this._shimmedLocalStreams[stream.id] = [stream].concat(newSenders);\n  };\n\n  const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n  window.RTCPeerConnection.prototype.removeStream =\n    function removeStream(stream) {\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n      delete this._shimmedLocalStreams[stream.id];\n      return origRemoveStream.apply(this, arguments);\n    };\n\n  const origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;\n  window.RTCPeerConnection.prototype.removeTrack =\n    function removeTrack(sender) {\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n      if (sender) {\n        Object.keys(this._shimmedLocalStreams).forEach(streamId => {\n          const idx = this._shimmedLocalStreams[streamId].indexOf(sender);\n          if (idx !== -1) {\n            this._shimmedLocalStreams[streamId].splice(idx, 1);\n          }\n          if (this._shimmedLocalStreams[streamId].length === 1) {\n            delete this._shimmedLocalStreams[streamId];\n          }\n        });\n      }\n      return origRemoveTrack.apply(this, arguments);\n    };\n}\n\nexport function shimAddTrackRemoveTrack(window, browserDetails) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  // shim addTrack and removeTrack.\n  if (window.RTCPeerConnection.prototype.addTrack &&\n      browserDetails.version >= 65) {\n    return shimAddTrackRemoveTrackWithNative(window);\n  }\n\n  // also shim pc.getLocalStreams when addTrack is shimmed\n  // to return the original streams.\n  const origGetLocalStreams = window.RTCPeerConnection.prototype\n      .getLocalStreams;\n  window.RTCPeerConnection.prototype.getLocalStreams =\n    function getLocalStreams() {\n      const nativeStreams = origGetLocalStreams.apply(this);\n      this._reverseStreams = this._reverseStreams || {};\n      return nativeStreams.map(stream => this._reverseStreams[stream.id]);\n    };\n\n  const origAddStream = window.RTCPeerConnection.prototype.addStream;\n  window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n    this._streams = this._streams || {};\n    this._reverseStreams = this._reverseStreams || {};\n\n    stream.getTracks().forEach(track => {\n      const alreadyExists = this.getSenders().find(s => s.track === track);\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.',\n            'InvalidAccessError');\n      }\n    });\n    // Add identity mapping for consistency with addTrack.\n    // Unless this is being used with a stream from addTrack.\n    if (!this._reverseStreams[stream.id]) {\n      const newStream = new window.MediaStream(stream.getTracks());\n      this._streams[stream.id] = newStream;\n      this._reverseStreams[newStream.id] = stream;\n      stream = newStream;\n    }\n    origAddStream.apply(this, [stream]);\n  };\n\n  const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n  window.RTCPeerConnection.prototype.removeStream =\n    function removeStream(stream) {\n      this._streams = this._streams || {};\n      this._reverseStreams = this._reverseStreams || {};\n\n      origRemoveStream.apply(this, [(this._streams[stream.id] || stream)]);\n      delete this._reverseStreams[(this._streams[stream.id] ?\n          this._streams[stream.id].id : stream.id)];\n      delete this._streams[stream.id];\n    };\n\n  window.RTCPeerConnection.prototype.addTrack =\n    function addTrack(track, stream) {\n      if (this.signalingState === 'closed') {\n        throw new DOMException(\n          'The RTCPeerConnection\\'s signalingState is \\'closed\\'.',\n          'InvalidStateError');\n      }\n      const streams = [].slice.call(arguments, 1);\n      if (streams.length !== 1 ||\n          !streams[0].getTracks().find(t => t === track)) {\n        // this is not fully correct but all we can manage without\n        // [[associated MediaStreams]] internal slot.\n        throw new DOMException(\n          'The adapter.js addTrack polyfill only supports a single ' +\n          ' stream which is associated with the specified track.',\n          'NotSupportedError');\n      }\n\n      const alreadyExists = this.getSenders().find(s => s.track === track);\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.',\n            'InvalidAccessError');\n      }\n\n      this._streams = this._streams || {};\n      this._reverseStreams = this._reverseStreams || {};\n      const oldStream = this._streams[stream.id];\n      if (oldStream) {\n        // this is using odd Chrome behaviour, use with caution:\n        // https://bugs.chromium.org/p/webrtc/issues/detail?id=7815\n        // Note: we rely on the high-level addTrack/dtmf shim to\n        // create the sender with a dtmf sender.\n        oldStream.addTrack(track);\n\n        // Trigger ONN async.\n        Promise.resolve().then(() => {\n          this.dispatchEvent(new Event('negotiationneeded'));\n        });\n      } else {\n        const newStream = new window.MediaStream([track]);\n        this._streams[stream.id] = newStream;\n        this._reverseStreams[newStream.id] = stream;\n        this.addStream(newStream);\n      }\n      return this.getSenders().find(s => s.track === track);\n    };\n\n  // replace the internal stream id with the external one and\n  // vice versa.\n  function replaceInternalStreamId(pc, description) {\n    let sdp = description.sdp;\n    Object.keys(pc._reverseStreams || []).forEach(internalId => {\n      const externalStream = pc._reverseStreams[internalId];\n      const internalStream = pc._streams[externalStream.id];\n      sdp = sdp.replace(new RegExp(internalStream.id, 'g'),\n          externalStream.id);\n    });\n    return new RTCSessionDescription({\n      type: description.type,\n      sdp\n    });\n  }\n  function replaceExternalStreamId(pc, description) {\n    let sdp = description.sdp;\n    Object.keys(pc._reverseStreams || []).forEach(internalId => {\n      const externalStream = pc._reverseStreams[internalId];\n      const internalStream = pc._streams[externalStream.id];\n      sdp = sdp.replace(new RegExp(externalStream.id, 'g'),\n          internalStream.id);\n    });\n    return new RTCSessionDescription({\n      type: description.type,\n      sdp\n    });\n  }\n  ['createOffer', 'createAnswer'].forEach(function(method) {\n    const nativeMethod = window.RTCPeerConnection.prototype[method];\n    const methodObj = {[method]() {\n      const args = arguments;\n      const isLegacyCall = arguments.length &&\n          typeof arguments[0] === 'function';\n      if (isLegacyCall) {\n        return nativeMethod.apply(this, [\n          (description) => {\n            const desc = replaceInternalStreamId(this, description);\n            args[0].apply(null, [desc]);\n          },\n          (err) => {\n            if (args[1]) {\n              args[1].apply(null, err);\n            }\n          }, arguments[2]\n        ]);\n      }\n      return nativeMethod.apply(this, arguments)\n      .then(description => replaceInternalStreamId(this, description));\n    }};\n    window.RTCPeerConnection.prototype[method] = methodObj[method];\n  });\n\n  const origSetLocalDescription =\n      window.RTCPeerConnection.prototype.setLocalDescription;\n  window.RTCPeerConnection.prototype.setLocalDescription =\n    function setLocalDescription() {\n      if (!arguments.length || !arguments[0].type) {\n        return origSetLocalDescription.apply(this, arguments);\n      }\n      arguments[0] = replaceExternalStreamId(this, arguments[0]);\n      return origSetLocalDescription.apply(this, arguments);\n    };\n\n  // TODO: mangle getStats: https://w3c.github.io/webrtc-stats/#dom-rtcmediastreamstats-streamidentifier\n\n  const origLocalDescription = Object.getOwnPropertyDescriptor(\n      window.RTCPeerConnection.prototype, 'localDescription');\n  Object.defineProperty(window.RTCPeerConnection.prototype,\n      'localDescription', {\n        get() {\n          const description = origLocalDescription.get.apply(this);\n          if (description.type === '') {\n            return description;\n          }\n          return replaceInternalStreamId(this, description);\n        }\n      });\n\n  window.RTCPeerConnection.prototype.removeTrack =\n    function removeTrack(sender) {\n      if (this.signalingState === 'closed') {\n        throw new DOMException(\n          'The RTCPeerConnection\\'s signalingState is \\'closed\\'.',\n          'InvalidStateError');\n      }\n      // We can not yet check for sender instanceof RTCRtpSender\n      // since we shim RTPSender. So we check if sender._pc is set.\n      if (!sender._pc) {\n        throw new DOMException('Argument 1 of RTCPeerConnection.removeTrack ' +\n            'does not implement interface RTCRtpSender.', 'TypeError');\n      }\n      const isLocal = sender._pc === this;\n      if (!isLocal) {\n        throw new DOMException('Sender was not created by this connection.',\n            'InvalidAccessError');\n      }\n\n      // Search for the native stream the senders track belongs to.\n      this._streams = this._streams || {};\n      let stream;\n      Object.keys(this._streams).forEach(streamid => {\n        const hasTrack = this._streams[streamid].getTracks()\n          .find(track => sender.track === track);\n        if (hasTrack) {\n          stream = this._streams[streamid];\n        }\n      });\n\n      if (stream) {\n        if (stream.getTracks().length === 1) {\n          // if this is the last track of the stream, remove the stream. This\n          // takes care of any shimmed _senders.\n          this.removeStream(this._reverseStreams[stream.id]);\n        } else {\n          // relying on the same odd chrome behaviour as above.\n          stream.removeTrack(sender.track);\n        }\n        this.dispatchEvent(new Event('negotiationneeded'));\n      }\n    };\n}\n\nexport function shimPeerConnection(window, browserDetails) {\n  if (!window.RTCPeerConnection && window.webkitRTCPeerConnection) {\n    // very basic support for old versions.\n    window.RTCPeerConnection = window.webkitRTCPeerConnection;\n  }\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n\n  // shim implicit creation of RTCSessionDescription/RTCIceCandidate\n  if (browserDetails.version < 53) {\n    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']\n        .forEach(function(method) {\n          const nativeMethod = window.RTCPeerConnection.prototype[method];\n          const methodObj = {[method]() {\n            arguments[0] = new ((method === 'addIceCandidate') ?\n                window.RTCIceCandidate :\n                window.RTCSessionDescription)(arguments[0]);\n            return nativeMethod.apply(this, arguments);\n          }};\n          window.RTCPeerConnection.prototype[method] = methodObj[method];\n        });\n  }\n}\n\n// Attempt to fix ONN in plan-b mode.\nexport function fixNegotiationNeeded(window, browserDetails) {\n  utils.wrapPeerConnectionEvent(window, 'negotiationneeded', e => {\n    const pc = e.target;\n    if (browserDetails.version < 72 || (pc.getConfiguration &&\n        pc.getConfiguration().sdpSemantics === 'plan-b')) {\n      if (pc.signalingState !== 'stable') {\n        return;\n      }\n    }\n    return e;\n  });\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport * as utils from '../utils';\n\nexport function shimGetUserMedia(window, browserDetails) {\n  const navigator = window && window.navigator;\n  const MediaStreamTrack = window && window.MediaStreamTrack;\n\n  navigator.getUserMedia = function(constraints, onSuccess, onError) {\n    // Replace Firefox 44+'s deprecation warning with unprefixed version.\n    utils.deprecated('navigator.getUserMedia',\n        'navigator.mediaDevices.getUserMedia');\n    navigator.mediaDevices.getUserMedia(constraints).then(onSuccess, onError);\n  };\n\n  if (!(browserDetails.version > 55 &&\n      'autoGainControl' in navigator.mediaDevices.getSupportedConstraints())) {\n    const remap = function(obj, a, b) {\n      if (a in obj && !(b in obj)) {\n        obj[b] = obj[a];\n        delete obj[a];\n      }\n    };\n\n    const nativeGetUserMedia = navigator.mediaDevices.getUserMedia.\n        bind(navigator.mediaDevices);\n    navigator.mediaDevices.getUserMedia = function(c) {\n      if (typeof c === 'object' && typeof c.audio === 'object') {\n        c = JSON.parse(JSON.stringify(c));\n        remap(c.audio, 'autoGainControl', 'mozAutoGainControl');\n        remap(c.audio, 'noiseSuppression', 'mozNoiseSuppression');\n      }\n      return nativeGetUserMedia(c);\n    };\n\n    if (MediaStreamTrack && MediaStreamTrack.prototype.getSettings) {\n      const nativeGetSettings = MediaStreamTrack.prototype.getSettings;\n      MediaStreamTrack.prototype.getSettings = function() {\n        const obj = nativeGetSettings.apply(this, arguments);\n        remap(obj, 'mozAutoGainControl', 'autoGainControl');\n        remap(obj, 'mozNoiseSuppression', 'noiseSuppression');\n        return obj;\n      };\n    }\n\n    if (MediaStreamTrack && MediaStreamTrack.prototype.applyConstraints) {\n      const nativeApplyConstraints =\n        MediaStreamTrack.prototype.applyConstraints;\n      MediaStreamTrack.prototype.applyConstraints = function(c) {\n        if (this.kind === 'audio' && typeof c === 'object') {\n          c = JSON.parse(JSON.stringify(c));\n          remap(c, 'autoGainControl', 'mozAutoGainControl');\n          remap(c, 'noiseSuppression', 'mozNoiseSuppression');\n        }\n        return nativeApplyConstraints.apply(this, [c]);\n      };\n    }\n  }\n}\n","/*\n *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nexport function shimGetDisplayMedia(window, preferredMediaSource) {\n  if (window.navigator.mediaDevices &&\n    'getDisplayMedia' in window.navigator.mediaDevices) {\n    return;\n  }\n  if (!(window.navigator.mediaDevices)) {\n    return;\n  }\n  window.navigator.mediaDevices.getDisplayMedia =\n    function getDisplayMedia(constraints) {\n      if (!(constraints && constraints.video)) {\n        const err = new DOMException('getDisplayMedia without video ' +\n            'constraints is undefined');\n        err.name = 'NotFoundError';\n        // from https://heycam.github.io/webidl/#idl-DOMException-error-names\n        err.code = 8;\n        return Promise.reject(err);\n      }\n      if (constraints.video === true) {\n        constraints.video = {mediaSource: preferredMediaSource};\n      } else {\n        constraints.video.mediaSource = preferredMediaSource;\n      }\n      return window.navigator.mediaDevices.getUserMedia(constraints);\n    };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport * as utils from '../utils';\nexport {shimGetUserMedia} from './getusermedia';\nexport {shimGetDisplayMedia} from './getdisplaymedia';\n\nexport function shimOnTrack(window) {\n  if (typeof window === 'object' && window.RTCTrackEvent &&\n      ('receiver' in window.RTCTrackEvent.prototype) &&\n      !('transceiver' in window.RTCTrackEvent.prototype)) {\n    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {\n      get() {\n        return {receiver: this.receiver};\n      }\n    });\n  }\n}\n\nexport function shimPeerConnection(window, browserDetails) {\n  if (typeof window !== 'object' ||\n      !(window.RTCPeerConnection || window.mozRTCPeerConnection)) {\n    return; // probably media.peerconnection.enabled=false in about:config\n  }\n  if (!window.RTCPeerConnection && window.mozRTCPeerConnection) {\n    // very basic support for old versions.\n    window.RTCPeerConnection = window.mozRTCPeerConnection;\n  }\n\n  if (browserDetails.version < 53) {\n    // shim away need for obsolete RTCIceCandidate/RTCSessionDescription.\n    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']\n        .forEach(function(method) {\n          const nativeMethod = window.RTCPeerConnection.prototype[method];\n          const methodObj = {[method]() {\n            arguments[0] = new ((method === 'addIceCandidate') ?\n                window.RTCIceCandidate :\n                window.RTCSessionDescription)(arguments[0]);\n            return nativeMethod.apply(this, arguments);\n          }};\n          window.RTCPeerConnection.prototype[method] = methodObj[method];\n        });\n  }\n\n  const modernStatsTypes = {\n    inboundrtp: 'inbound-rtp',\n    outboundrtp: 'outbound-rtp',\n    candidatepair: 'candidate-pair',\n    localcandidate: 'local-candidate',\n    remotecandidate: 'remote-candidate'\n  };\n\n  const nativeGetStats = window.RTCPeerConnection.prototype.getStats;\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    const [selector, onSucc, onErr] = arguments;\n    return nativeGetStats.apply(this, [selector || null])\n      .then(stats => {\n        if (browserDetails.version < 53 && !onSucc) {\n          // Shim only promise getStats with spec-hyphens in type names\n          // Leave callback version alone; misc old uses of forEach before Map\n          try {\n            stats.forEach(stat => {\n              stat.type = modernStatsTypes[stat.type] || stat.type;\n            });\n          } catch (e) {\n            if (e.name !== 'TypeError') {\n              throw e;\n            }\n            // Avoid TypeError: \"type\" is read-only, in old versions. 34-43ish\n            stats.forEach((stat, i) => {\n              stats.set(i, Object.assign({}, stat, {\n                type: modernStatsTypes[stat.type] || stat.type\n              }));\n            });\n          }\n        }\n        return stats;\n      })\n      .then(onSucc, onErr);\n  };\n}\n\nexport function shimSenderGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\n      window.RTCRtpSender)) {\n    return;\n  }\n  if (window.RTCRtpSender && 'getStats' in window.RTCRtpSender.prototype) {\n    return;\n  }\n  const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n  if (origGetSenders) {\n    window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n      const senders = origGetSenders.apply(this, []);\n      senders.forEach(sender => sender._pc = this);\n      return senders;\n    };\n  }\n\n  const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n  if (origAddTrack) {\n    window.RTCPeerConnection.prototype.addTrack = function addTrack() {\n      const sender = origAddTrack.apply(this, arguments);\n      sender._pc = this;\n      return sender;\n    };\n  }\n  window.RTCRtpSender.prototype.getStats = function getStats() {\n    return this.track ? this._pc.getStats(this.track) :\n        Promise.resolve(new Map());\n  };\n}\n\nexport function shimReceiverGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\n      window.RTCRtpSender)) {\n    return;\n  }\n  if (window.RTCRtpSender && 'getStats' in window.RTCRtpReceiver.prototype) {\n    return;\n  }\n  const origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;\n  if (origGetReceivers) {\n    window.RTCPeerConnection.prototype.getReceivers = function getReceivers() {\n      const receivers = origGetReceivers.apply(this, []);\n      receivers.forEach(receiver => receiver._pc = this);\n      return receivers;\n    };\n  }\n  utils.wrapPeerConnectionEvent(window, 'track', e => {\n    e.receiver._pc = e.srcElement;\n    return e;\n  });\n  window.RTCRtpReceiver.prototype.getStats = function getStats() {\n    return this._pc.getStats(this.track);\n  };\n}\n\nexport function shimRemoveStream(window) {\n  if (!window.RTCPeerConnection ||\n      'removeStream' in window.RTCPeerConnection.prototype) {\n    return;\n  }\n  window.RTCPeerConnection.prototype.removeStream =\n    function removeStream(stream) {\n      utils.deprecated('removeStream', 'removeTrack');\n      this.getSenders().forEach(sender => {\n        if (sender.track && stream.getTracks().includes(sender.track)) {\n          this.removeTrack(sender);\n        }\n      });\n    };\n}\n\nexport function shimRTCDataChannel(window) {\n  // rename DataChannel to RTCDataChannel (native fix in FF60):\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1173851\n  if (window.DataChannel && !window.RTCDataChannel) {\n    window.RTCDataChannel = window.DataChannel;\n  }\n}\n\nexport function shimAddTransceiver(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origAddTransceiver = window.RTCPeerConnection.prototype.addTransceiver;\n  if (origAddTransceiver) {\n    window.RTCPeerConnection.prototype.addTransceiver =\n      function addTransceiver() {\n        this.setParametersPromises = [];\n        const initParameters = arguments[1];\n        const shouldPerformCheck = initParameters &&\n                                  'sendEncodings' in initParameters;\n        if (shouldPerformCheck) {\n          // If sendEncodings params are provided, validate grammar\n          initParameters.sendEncodings.forEach((encodingParam) => {\n            if ('rid' in encodingParam) {\n              const ridRegex = /^[a-z0-9]{0,16}$/i;\n              if (!ridRegex.test(encodingParam.rid)) {\n                throw new TypeError('Invalid RID value provided.');\n              }\n            }\n            if ('scaleResolutionDownBy' in encodingParam) {\n              if (!(parseFloat(encodingParam.scaleResolutionDownBy) >= 1.0)) {\n                throw new RangeError('scale_resolution_down_by must be >= 1.0');\n              }\n            }\n            if ('maxFramerate' in encodingParam) {\n              if (!(parseFloat(encodingParam.maxFramerate) >= 0)) {\n                throw new RangeError('max_framerate must be >= 0.0');\n              }\n            }\n          });\n        }\n        const transceiver = origAddTransceiver.apply(this, arguments);\n        if (shouldPerformCheck) {\n          // Check if the init options were applied. If not we do this in an\n          // asynchronous way and save the promise reference in a global object.\n          // This is an ugly hack, but at the same time is way more robust than\n          // checking the sender parameters before and after the createOffer\n          // Also note that after the createoffer we are not 100% sure that\n          // the params were asynchronously applied so we might miss the\n          // opportunity to recreate offer.\n          const {sender} = transceiver;\n          const params = sender.getParameters();\n          if (!('encodings' in params) ||\n              // Avoid being fooled by patched getParameters() below.\n              (params.encodings.length === 1 &&\n               Object.keys(params.encodings[0]).length === 0)) {\n            params.encodings = initParameters.sendEncodings;\n            sender.sendEncodings = initParameters.sendEncodings;\n            this.setParametersPromises.push(sender.setParameters(params)\n              .then(() => {\n                delete sender.sendEncodings;\n              }).catch(() => {\n                delete sender.sendEncodings;\n              })\n            );\n          }\n        }\n        return transceiver;\n      };\n  }\n}\n\nexport function shimGetParameters(window) {\n  if (!(typeof window === 'object' && window.RTCRtpSender)) {\n    return;\n  }\n  const origGetParameters = window.RTCRtpSender.prototype.getParameters;\n  if (origGetParameters) {\n    window.RTCRtpSender.prototype.getParameters =\n      function getParameters() {\n        const params = origGetParameters.apply(this, arguments);\n        if (!('encodings' in params)) {\n          params.encodings = [].concat(this.sendEncodings || [{}]);\n        }\n        return params;\n      };\n  }\n}\n\nexport function shimCreateOffer(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origCreateOffer = window.RTCPeerConnection.prototype.createOffer;\n  window.RTCPeerConnection.prototype.createOffer = function createOffer() {\n    if (this.setParametersPromises && this.setParametersPromises.length) {\n      return Promise.all(this.setParametersPromises)\n      .then(() => {\n        return origCreateOffer.apply(this, arguments);\n      })\n      .finally(() => {\n        this.setParametersPromises = [];\n      });\n    }\n    return origCreateOffer.apply(this, arguments);\n  };\n}\n\nexport function shimCreateAnswer(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origCreateAnswer = window.RTCPeerConnection.prototype.createAnswer;\n  window.RTCPeerConnection.prototype.createAnswer = function createAnswer() {\n    if (this.setParametersPromises && this.setParametersPromises.length) {\n      return Promise.all(this.setParametersPromises)\n      .then(() => {\n        return origCreateAnswer.apply(this, arguments);\n      })\n      .finally(() => {\n        this.setParametersPromises = [];\n      });\n    }\n    return origCreateAnswer.apply(this, arguments);\n  };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n'use strict';\nimport * as utils from '../utils';\n\nexport function shimLocalStreamsAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n  if (!('getLocalStreams' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.getLocalStreams =\n      function getLocalStreams() {\n        if (!this._localStreams) {\n          this._localStreams = [];\n        }\n        return this._localStreams;\n      };\n  }\n  if (!('addStream' in window.RTCPeerConnection.prototype)) {\n    const _addTrack = window.RTCPeerConnection.prototype.addTrack;\n    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n      if (!this._localStreams) {\n        this._localStreams = [];\n      }\n      if (!this._localStreams.includes(stream)) {\n        this._localStreams.push(stream);\n      }\n      // Try to emulate Chrome's behaviour of adding in audio-video order.\n      // Safari orders by track id.\n      stream.getAudioTracks().forEach(track => _addTrack.call(this, track,\n        stream));\n      stream.getVideoTracks().forEach(track => _addTrack.call(this, track,\n        stream));\n    };\n\n    window.RTCPeerConnection.prototype.addTrack =\n      function addTrack(track, ...streams) {\n        if (streams) {\n          streams.forEach((stream) => {\n            if (!this._localStreams) {\n              this._localStreams = [stream];\n            } else if (!this._localStreams.includes(stream)) {\n              this._localStreams.push(stream);\n            }\n          });\n        }\n        return _addTrack.apply(this, arguments);\n      };\n  }\n  if (!('removeStream' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.removeStream =\n      function removeStream(stream) {\n        if (!this._localStreams) {\n          this._localStreams = [];\n        }\n        const index = this._localStreams.indexOf(stream);\n        if (index === -1) {\n          return;\n        }\n        this._localStreams.splice(index, 1);\n        const tracks = stream.getTracks();\n        this.getSenders().forEach(sender => {\n          if (tracks.includes(sender.track)) {\n            this.removeTrack(sender);\n          }\n        });\n      };\n  }\n}\n\nexport function shimRemoteStreamsAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n  if (!('getRemoteStreams' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.getRemoteStreams =\n      function getRemoteStreams() {\n        return this._remoteStreams ? this._remoteStreams : [];\n      };\n  }\n  if (!('onaddstream' in window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'onaddstream', {\n      get() {\n        return this._onaddstream;\n      },\n      set(f) {\n        if (this._onaddstream) {\n          this.removeEventListener('addstream', this._onaddstream);\n          this.removeEventListener('track', this._onaddstreampoly);\n        }\n        this.addEventListener('addstream', this._onaddstream = f);\n        this.addEventListener('track', this._onaddstreampoly = (e) => {\n          e.streams.forEach(stream => {\n            if (!this._remoteStreams) {\n              this._remoteStreams = [];\n            }\n            if (this._remoteStreams.includes(stream)) {\n              return;\n            }\n            this._remoteStreams.push(stream);\n            const event = new Event('addstream');\n            event.stream = stream;\n            this.dispatchEvent(event);\n          });\n        });\n      }\n    });\n    const origSetRemoteDescription =\n      window.RTCPeerConnection.prototype.setRemoteDescription;\n    window.RTCPeerConnection.prototype.setRemoteDescription =\n      function setRemoteDescription() {\n        const pc = this;\n        if (!this._onaddstreampoly) {\n          this.addEventListener('track', this._onaddstreampoly = function(e) {\n            e.streams.forEach(stream => {\n              if (!pc._remoteStreams) {\n                pc._remoteStreams = [];\n              }\n              if (pc._remoteStreams.indexOf(stream) >= 0) {\n                return;\n              }\n              pc._remoteStreams.push(stream);\n              const event = new Event('addstream');\n              event.stream = stream;\n              pc.dispatchEvent(event);\n            });\n          });\n        }\n        return origSetRemoteDescription.apply(pc, arguments);\n      };\n  }\n}\n\nexport function shimCallbacksAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n  const prototype = window.RTCPeerConnection.prototype;\n  const origCreateOffer = prototype.createOffer;\n  const origCreateAnswer = prototype.createAnswer;\n  const setLocalDescription = prototype.setLocalDescription;\n  const setRemoteDescription = prototype.setRemoteDescription;\n  const addIceCandidate = prototype.addIceCandidate;\n\n  prototype.createOffer =\n    function createOffer(successCallback, failureCallback) {\n      const options = (arguments.length >= 2) ? arguments[2] : arguments[0];\n      const promise = origCreateOffer.apply(this, [options]);\n      if (!failureCallback) {\n        return promise;\n      }\n      promise.then(successCallback, failureCallback);\n      return Promise.resolve();\n    };\n\n  prototype.createAnswer =\n    function createAnswer(successCallback, failureCallback) {\n      const options = (arguments.length >= 2) ? arguments[2] : arguments[0];\n      const promise = origCreateAnswer.apply(this, [options]);\n      if (!failureCallback) {\n        return promise;\n      }\n      promise.then(successCallback, failureCallback);\n      return Promise.resolve();\n    };\n\n  let withCallback = function(description, successCallback, failureCallback) {\n    const promise = setLocalDescription.apply(this, [description]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.setLocalDescription = withCallback;\n\n  withCallback = function(description, successCallback, failureCallback) {\n    const promise = setRemoteDescription.apply(this, [description]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.setRemoteDescription = withCallback;\n\n  withCallback = function(candidate, successCallback, failureCallback) {\n    const promise = addIceCandidate.apply(this, [candidate]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.addIceCandidate = withCallback;\n}\n\nexport function shimGetUserMedia(window) {\n  const navigator = window && window.navigator;\n\n  if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n    // shim not needed in Safari 12.1\n    const mediaDevices = navigator.mediaDevices;\n    const _getUserMedia = mediaDevices.getUserMedia.bind(mediaDevices);\n    navigator.mediaDevices.getUserMedia = (constraints) => {\n      return _getUserMedia(shimConstraints(constraints));\n    };\n  }\n\n  if (!navigator.getUserMedia && navigator.mediaDevices &&\n    navigator.mediaDevices.getUserMedia) {\n    navigator.getUserMedia = function getUserMedia(constraints, cb, errcb) {\n      navigator.mediaDevices.getUserMedia(constraints)\n      .then(cb, errcb);\n    }.bind(navigator);\n  }\n}\n\nexport function shimConstraints(constraints) {\n  if (constraints && constraints.video !== undefined) {\n    return Object.assign({},\n      constraints,\n      {video: utils.compactObject(constraints.video)}\n    );\n  }\n\n  return constraints;\n}\n\nexport function shimRTCIceServerUrls(window) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  // migrate from non-spec RTCIceServer.url to RTCIceServer.urls\n  const OrigPeerConnection = window.RTCPeerConnection;\n  window.RTCPeerConnection =\n    function RTCPeerConnection(pcConfig, pcConstraints) {\n      if (pcConfig && pcConfig.iceServers) {\n        const newIceServers = [];\n        for (let i = 0; i < pcConfig.iceServers.length; i++) {\n          let server = pcConfig.iceServers[i];\n          if (!server.hasOwnProperty('urls') &&\n              server.hasOwnProperty('url')) {\n            utils.deprecated('RTCIceServer.url', 'RTCIceServer.urls');\n            server = JSON.parse(JSON.stringify(server));\n            server.urls = server.url;\n            delete server.url;\n            newIceServers.push(server);\n          } else {\n            newIceServers.push(pcConfig.iceServers[i]);\n          }\n        }\n        pcConfig.iceServers = newIceServers;\n      }\n      return new OrigPeerConnection(pcConfig, pcConstraints);\n    };\n  window.RTCPeerConnection.prototype = OrigPeerConnection.prototype;\n  // wrap static methods. Currently just generateCertificate.\n  if ('generateCertificate' in OrigPeerConnection) {\n    Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {\n      get() {\n        return OrigPeerConnection.generateCertificate;\n      }\n    });\n  }\n}\n\nexport function shimTrackEventTransceiver(window) {\n  // Add event.transceiver member over deprecated event.receiver\n  if (typeof window === 'object' && window.RTCTrackEvent &&\n      'receiver' in window.RTCTrackEvent.prototype &&\n      !('transceiver' in window.RTCTrackEvent.prototype)) {\n    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {\n      get() {\n        return {receiver: this.receiver};\n      }\n    });\n  }\n}\n\nexport function shimCreateOfferLegacy(window) {\n  const origCreateOffer = window.RTCPeerConnection.prototype.createOffer;\n  window.RTCPeerConnection.prototype.createOffer =\n    function createOffer(offerOptions) {\n      if (offerOptions) {\n        if (typeof offerOptions.offerToReceiveAudio !== 'undefined') {\n          // support bit values\n          offerOptions.offerToReceiveAudio =\n            !!offerOptions.offerToReceiveAudio;\n        }\n        const audioTransceiver = this.getTransceivers().find(transceiver =>\n          transceiver.receiver.track.kind === 'audio');\n        if (offerOptions.offerToReceiveAudio === false && audioTransceiver) {\n          if (audioTransceiver.direction === 'sendrecv') {\n            if (audioTransceiver.setDirection) {\n              audioTransceiver.setDirection('sendonly');\n            } else {\n              audioTransceiver.direction = 'sendonly';\n            }\n          } else if (audioTransceiver.direction === 'recvonly') {\n            if (audioTransceiver.setDirection) {\n              audioTransceiver.setDirection('inactive');\n            } else {\n              audioTransceiver.direction = 'inactive';\n            }\n          }\n        } else if (offerOptions.offerToReceiveAudio === true &&\n            !audioTransceiver) {\n          this.addTransceiver('audio');\n        }\n\n        if (typeof offerOptions.offerToReceiveVideo !== 'undefined') {\n          // support bit values\n          offerOptions.offerToReceiveVideo =\n            !!offerOptions.offerToReceiveVideo;\n        }\n        const videoTransceiver = this.getTransceivers().find(transceiver =>\n          transceiver.receiver.track.kind === 'video');\n        if (offerOptions.offerToReceiveVideo === false && videoTransceiver) {\n          if (videoTransceiver.direction === 'sendrecv') {\n            if (videoTransceiver.setDirection) {\n              videoTransceiver.setDirection('sendonly');\n            } else {\n              videoTransceiver.direction = 'sendonly';\n            }\n          } else if (videoTransceiver.direction === 'recvonly') {\n            if (videoTransceiver.setDirection) {\n              videoTransceiver.setDirection('inactive');\n            } else {\n              videoTransceiver.direction = 'inactive';\n            }\n          }\n        } else if (offerOptions.offerToReceiveVideo === true &&\n            !videoTransceiver) {\n          this.addTransceiver('video');\n        }\n      }\n      return origCreateOffer.apply(this, arguments);\n    };\n}\n\nexport function shimAudioContext(window) {\n  if (typeof window !== 'object' || window.AudioContext) {\n    return;\n  }\n  window.AudioContext = window.webkitAudioContext;\n}\n","/*\n *  Copyright (c) 2017 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport SDPUtils from 'sdp';\nimport * as utils from './utils';\n\nexport function shimRTCIceCandidate(window) {\n  // foundation is arbitrarily chosen as an indicator for full support for\n  // https://w3c.github.io/webrtc-pc/#rtcicecandidate-interface\n  if (!window.RTCIceCandidate || (window.RTCIceCandidate && 'foundation' in\n      window.RTCIceCandidate.prototype)) {\n    return;\n  }\n\n  const NativeRTCIceCandidate = window.RTCIceCandidate;\n  window.RTCIceCandidate = function RTCIceCandidate(args) {\n    // Remove the a= which shouldn't be part of the candidate string.\n    if (typeof args === 'object' && args.candidate &&\n        args.candidate.indexOf('a=') === 0) {\n      args = JSON.parse(JSON.stringify(args));\n      args.candidate = args.candidate.substr(2);\n    }\n\n    if (args.candidate && args.candidate.length) {\n      // Augment the native candidate with the parsed fields.\n      const nativeCandidate = new NativeRTCIceCandidate(args);\n      const parsedCandidate = SDPUtils.parseCandidate(args.candidate);\n      const augmentedCandidate = Object.assign(nativeCandidate,\n          parsedCandidate);\n\n      // Add a serializer that does not serialize the extra attributes.\n      augmentedCandidate.toJSON = function toJSON() {\n        return {\n          candidate: augmentedCandidate.candidate,\n          sdpMid: augmentedCandidate.sdpMid,\n          sdpMLineIndex: augmentedCandidate.sdpMLineIndex,\n          usernameFragment: augmentedCandidate.usernameFragment,\n        };\n      };\n      return augmentedCandidate;\n    }\n    return new NativeRTCIceCandidate(args);\n  };\n  window.RTCIceCandidate.prototype = NativeRTCIceCandidate.prototype;\n\n  // Hook up the augmented candidate in onicecandidate and\n  // addEventListener('icecandidate', ...)\n  utils.wrapPeerConnectionEvent(window, 'icecandidate', e => {\n    if (e.candidate) {\n      Object.defineProperty(e, 'candidate', {\n        value: new window.RTCIceCandidate(e.candidate),\n        writable: 'false'\n      });\n    }\n    return e;\n  });\n}\n\nexport function shimMaxMessageSize(window, browserDetails) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n\n  if (!('sctp' in window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'sctp', {\n      get() {\n        return typeof this._sctp === 'undefined' ? null : this._sctp;\n      }\n    });\n  }\n\n  const sctpInDescription = function(description) {\n    if (!description || !description.sdp) {\n      return false;\n    }\n    const sections = SDPUtils.splitSections(description.sdp);\n    sections.shift();\n    return sections.some(mediaSection => {\n      const mLine = SDPUtils.parseMLine(mediaSection);\n      return mLine && mLine.kind === 'application'\n          && mLine.protocol.indexOf('SCTP') !== -1;\n    });\n  };\n\n  const getRemoteFirefoxVersion = function(description) {\n    // TODO: Is there a better solution for detecting Firefox?\n    const match = description.sdp.match(/mozilla...THIS_IS_SDPARTA-(\\d+)/);\n    if (match === null || match.length < 2) {\n      return -1;\n    }\n    const version = parseInt(match[1], 10);\n    // Test for NaN (yes, this is ugly)\n    return version !== version ? -1 : version;\n  };\n\n  const getCanSendMaxMessageSize = function(remoteIsFirefox) {\n    // Every implementation we know can send at least 64 KiB.\n    // Note: Although Chrome is technically able to send up to 256 KiB, the\n    //       data does not reach the other peer reliably.\n    //       See: https://bugs.chromium.org/p/webrtc/issues/detail?id=8419\n    let canSendMaxMessageSize = 65536;\n    if (browserDetails.browser === 'firefox') {\n      if (browserDetails.version < 57) {\n        if (remoteIsFirefox === -1) {\n          // FF < 57 will send in 16 KiB chunks using the deprecated PPID\n          // fragmentation.\n          canSendMaxMessageSize = 16384;\n        } else {\n          // However, other FF (and RAWRTC) can reassemble PPID-fragmented\n          // messages. Thus, supporting ~2 GiB when sending.\n          canSendMaxMessageSize = 2147483637;\n        }\n      } else if (browserDetails.version < 60) {\n        // Currently, all FF >= 57 will reset the remote maximum message size\n        // to the default value when a data channel is created at a later\n        // stage. :(\n        // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831\n        canSendMaxMessageSize =\n          browserDetails.version === 57 ? 65535 : 65536;\n      } else {\n        // FF >= 60 supports sending ~2 GiB\n        canSendMaxMessageSize = 2147483637;\n      }\n    }\n    return canSendMaxMessageSize;\n  };\n\n  const getMaxMessageSize = function(description, remoteIsFirefox) {\n    // Note: 65536 bytes is the default value from the SDP spec. Also,\n    //       every implementation we know supports receiving 65536 bytes.\n    let maxMessageSize = 65536;\n\n    // FF 57 has a slightly incorrect default remote max message size, so\n    // we need to adjust it here to avoid a failure when sending.\n    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1425697\n    if (browserDetails.browser === 'firefox'\n         && browserDetails.version === 57) {\n      maxMessageSize = 65535;\n    }\n\n    const match = SDPUtils.matchPrefix(description.sdp,\n      'a=max-message-size:');\n    if (match.length > 0) {\n      maxMessageSize = parseInt(match[0].substr(19), 10);\n    } else if (browserDetails.browser === 'firefox' &&\n                remoteIsFirefox !== -1) {\n      // If the maximum message size is not present in the remote SDP and\n      // both local and remote are Firefox, the remote peer can receive\n      // ~2 GiB.\n      maxMessageSize = 2147483637;\n    }\n    return maxMessageSize;\n  };\n\n  const origSetRemoteDescription =\n      window.RTCPeerConnection.prototype.setRemoteDescription;\n  window.RTCPeerConnection.prototype.setRemoteDescription =\n    function setRemoteDescription() {\n      this._sctp = null;\n      // Chrome decided to not expose .sctp in plan-b mode.\n      // As usual, adapter.js has to do an 'ugly worakaround'\n      // to cover up the mess.\n      if (browserDetails.browser === 'chrome' && browserDetails.version >= 76) {\n        const {sdpSemantics} = this.getConfiguration();\n        if (sdpSemantics === 'plan-b') {\n          Object.defineProperty(this, 'sctp', {\n            get() {\n              return typeof this._sctp === 'undefined' ? null : this._sctp;\n            },\n            enumerable: true,\n            configurable: true,\n          });\n        }\n      }\n\n      if (sctpInDescription(arguments[0])) {\n        // Check if the remote is FF.\n        const isFirefox = getRemoteFirefoxVersion(arguments[0]);\n\n        // Get the maximum message size the local peer is capable of sending\n        const canSendMMS = getCanSendMaxMessageSize(isFirefox);\n\n        // Get the maximum message size of the remote peer.\n        const remoteMMS = getMaxMessageSize(arguments[0], isFirefox);\n\n        // Determine final maximum message size\n        let maxMessageSize;\n        if (canSendMMS === 0 && remoteMMS === 0) {\n          maxMessageSize = Number.POSITIVE_INFINITY;\n        } else if (canSendMMS === 0 || remoteMMS === 0) {\n          maxMessageSize = Math.max(canSendMMS, remoteMMS);\n        } else {\n          maxMessageSize = Math.min(canSendMMS, remoteMMS);\n        }\n\n        // Create a dummy RTCSctpTransport object and the 'maxMessageSize'\n        // attribute.\n        const sctp = {};\n        Object.defineProperty(sctp, 'maxMessageSize', {\n          get() {\n            return maxMessageSize;\n          }\n        });\n        this._sctp = sctp;\n      }\n\n      return origSetRemoteDescription.apply(this, arguments);\n    };\n}\n\nexport function shimSendThrowTypeError(window) {\n  if (!(window.RTCPeerConnection &&\n      'createDataChannel' in window.RTCPeerConnection.prototype)) {\n    return;\n  }\n\n  // Note: Although Firefox >= 57 has a native implementation, the maximum\n  //       message size can be reset for all data channels at a later stage.\n  //       See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831\n\n  function wrapDcSend(dc, pc) {\n    const origDataChannelSend = dc.send;\n    dc.send = function send() {\n      const data = arguments[0];\n      const length = data.length || data.size || data.byteLength;\n      if (dc.readyState === 'open' &&\n          pc.sctp && length > pc.sctp.maxMessageSize) {\n        throw new TypeError('Message too large (can send a maximum of ' +\n          pc.sctp.maxMessageSize + ' bytes)');\n      }\n      return origDataChannelSend.apply(dc, arguments);\n    };\n  }\n  const origCreateDataChannel =\n    window.RTCPeerConnection.prototype.createDataChannel;\n  window.RTCPeerConnection.prototype.createDataChannel =\n    function createDataChannel() {\n      const dataChannel = origCreateDataChannel.apply(this, arguments);\n      wrapDcSend(dataChannel, this);\n      return dataChannel;\n    };\n  utils.wrapPeerConnectionEvent(window, 'datachannel', e => {\n    wrapDcSend(e.channel, e.target);\n    return e;\n  });\n}\n\n\n/* shims RTCConnectionState by pretending it is the same as iceConnectionState.\n * See https://bugs.chromium.org/p/webrtc/issues/detail?id=6145#c12\n * for why this is a valid hack in Chrome. In Firefox it is slightly incorrect\n * since DTLS failures would be hidden. See\n * https://bugzilla.mozilla.org/show_bug.cgi?id=1265827\n * for the Firefox tracking bug.\n */\nexport function shimConnectionState(window) {\n  if (!window.RTCPeerConnection ||\n      'connectionState' in window.RTCPeerConnection.prototype) {\n    return;\n  }\n  const proto = window.RTCPeerConnection.prototype;\n  Object.defineProperty(proto, 'connectionState', {\n    get() {\n      return {\n        completed: 'connected',\n        checking: 'connecting'\n      }[this.iceConnectionState] || this.iceConnectionState;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(proto, 'onconnectionstatechange', {\n    get() {\n      return this._onconnectionstatechange || null;\n    },\n    set(cb) {\n      if (this._onconnectionstatechange) {\n        this.removeEventListener('connectionstatechange',\n            this._onconnectionstatechange);\n        delete this._onconnectionstatechange;\n      }\n      if (cb) {\n        this.addEventListener('connectionstatechange',\n            this._onconnectionstatechange = cb);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  ['setLocalDescription', 'setRemoteDescription'].forEach((method) => {\n    const origMethod = proto[method];\n    proto[method] = function() {\n      if (!this._connectionstatechangepoly) {\n        this._connectionstatechangepoly = e => {\n          const pc = e.target;\n          if (pc._lastConnectionState !== pc.connectionState) {\n            pc._lastConnectionState = pc.connectionState;\n            const newEvent = new Event('connectionstatechange', e);\n            pc.dispatchEvent(newEvent);\n          }\n          return e;\n        };\n        this.addEventListener('iceconnectionstatechange',\n          this._connectionstatechangepoly);\n      }\n      return origMethod.apply(this, arguments);\n    };\n  });\n}\n\nexport function removeExtmapAllowMixed(window, browserDetails) {\n  /* remove a=extmap-allow-mixed for webrtc.org < M71 */\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  if (browserDetails.browser === 'chrome' && browserDetails.version >= 71) {\n    return;\n  }\n  if (browserDetails.browser === 'safari' && browserDetails.version >= 605) {\n    return;\n  }\n  const nativeSRD = window.RTCPeerConnection.prototype.setRemoteDescription;\n  window.RTCPeerConnection.prototype.setRemoteDescription =\n  function setRemoteDescription(desc) {\n    if (desc && desc.sdp && desc.sdp.indexOf('\\na=extmap-allow-mixed') !== -1) {\n      const sdp = desc.sdp.split('\\n').filter((line) => {\n        return line.trim() !== 'a=extmap-allow-mixed';\n      }).join('\\n');\n      // Safari enforces read-only-ness of RTCSessionDescription fields.\n      if (window.RTCSessionDescription &&\n          desc instanceof window.RTCSessionDescription) {\n        arguments[0] = new window.RTCSessionDescription({\n          type: desc.type,\n          sdp,\n        });\n      } else {\n        desc.sdp = sdp;\n      }\n    }\n    return nativeSRD.apply(this, arguments);\n  };\n}\n\nexport function shimAddIceCandidateNullOrEmpty(window, browserDetails) {\n  // Support for addIceCandidate(null or undefined)\n  // as well as addIceCandidate({candidate: \"\", ...})\n  // https://bugs.chromium.org/p/chromium/issues/detail?id=978582\n  // Note: must be called before other polyfills which change the signature.\n  if (!(window.RTCPeerConnection && window.RTCPeerConnection.prototype)) {\n    return;\n  }\n  const nativeAddIceCandidate =\n      window.RTCPeerConnection.prototype.addIceCandidate;\n  if (!nativeAddIceCandidate || nativeAddIceCandidate.length === 0) {\n    return;\n  }\n  window.RTCPeerConnection.prototype.addIceCandidate =\n    function addIceCandidate() {\n      if (!arguments[0]) {\n        if (arguments[1]) {\n          arguments[1].apply(null);\n        }\n        return Promise.resolve();\n      }\n      // Firefox 68+ emits and processes {candidate: \"\", ...}, ignore\n      // in older versions.\n      // Native support for ignoring exists for Chrome M77+.\n      // Safari ignores as well, exact version unknown but works in the same\n      // version that also ignores addIceCandidate(null).\n      if (((browserDetails.browser === 'chrome' && browserDetails.version < 78)\n           || (browserDetails.browser === 'firefox'\n               && browserDetails.version < 68)\n           || (browserDetails.browser === 'safari'))\n          && arguments[0] && arguments[0].candidate === '') {\n        return Promise.resolve();\n      }\n      return nativeAddIceCandidate.apply(this, arguments);\n    };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\nimport * as utils from './utils';\n\n  // Browser shims.\nimport * as chromeShim from './chrome/chrome_shim';\nimport * as firefoxShim from './firefox/firefox_shim';\nimport * as safariShim from './safari/safari_shim';\nimport * as commonShim from './common_shim';\nimport * as sdp from 'sdp';\n\n// Shimming starts here.\nexport function adapterFactory({window} = {}, options = {\n  shimChrome: true,\n  shimFirefox: true,\n  shimSafari: true,\n}) {\n  // Utils.\n  const logging = utils.log;\n  const browserDetails = utils.detectBrowser(window);\n\n  const adapter = {\n    browserDetails,\n    commonShim,\n    extractVersion: utils.extractVersion,\n    disableLog: utils.disableLog,\n    disableWarnings: utils.disableWarnings,\n    // Expose sdp as a convenience. For production apps include directly.\n    sdp,\n  };\n\n  // Shim browser if found.\n  switch (browserDetails.browser) {\n    case 'chrome':\n      if (!chromeShim || !chromeShim.shimPeerConnection ||\n          !options.shimChrome) {\n        logging('Chrome shim is not included in this adapter release.');\n        return adapter;\n      }\n      if (browserDetails.version === null) {\n        logging('Chrome shim can not determine version, not shimming.');\n        return adapter;\n      }\n      logging('adapter.js shimming chrome.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = chromeShim;\n\n      // Must be called before shimPeerConnection.\n      commonShim.shimAddIceCandidateNullOrEmpty(window, browserDetails);\n\n      chromeShim.shimGetUserMedia(window, browserDetails);\n      chromeShim.shimMediaStream(window, browserDetails);\n      chromeShim.shimPeerConnection(window, browserDetails);\n      chromeShim.shimOnTrack(window, browserDetails);\n      chromeShim.shimAddTrackRemoveTrack(window, browserDetails);\n      chromeShim.shimGetSendersWithDtmf(window, browserDetails);\n      chromeShim.shimGetStats(window, browserDetails);\n      chromeShim.shimSenderReceiverGetStats(window, browserDetails);\n      chromeShim.fixNegotiationNeeded(window, browserDetails);\n\n      commonShim.shimRTCIceCandidate(window, browserDetails);\n      commonShim.shimConnectionState(window, browserDetails);\n      commonShim.shimMaxMessageSize(window, browserDetails);\n      commonShim.shimSendThrowTypeError(window, browserDetails);\n      commonShim.removeExtmapAllowMixed(window, browserDetails);\n      break;\n    case 'firefox':\n      if (!firefoxShim || !firefoxShim.shimPeerConnection ||\n          !options.shimFirefox) {\n        logging('Firefox shim is not included in this adapter release.');\n        return adapter;\n      }\n      logging('adapter.js shimming firefox.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = firefoxShim;\n\n      // Must be called before shimPeerConnection.\n      commonShim.shimAddIceCandidateNullOrEmpty(window, browserDetails);\n\n      firefoxShim.shimGetUserMedia(window, browserDetails);\n      firefoxShim.shimPeerConnection(window, browserDetails);\n      firefoxShim.shimOnTrack(window, browserDetails);\n      firefoxShim.shimRemoveStream(window, browserDetails);\n      firefoxShim.shimSenderGetStats(window, browserDetails);\n      firefoxShim.shimReceiverGetStats(window, browserDetails);\n      firefoxShim.shimRTCDataChannel(window, browserDetails);\n      firefoxShim.shimAddTransceiver(window, browserDetails);\n      firefoxShim.shimGetParameters(window, browserDetails);\n      firefoxShim.shimCreateOffer(window, browserDetails);\n      firefoxShim.shimCreateAnswer(window, browserDetails);\n\n      commonShim.shimRTCIceCandidate(window, browserDetails);\n      commonShim.shimConnectionState(window, browserDetails);\n      commonShim.shimMaxMessageSize(window, browserDetails);\n      commonShim.shimSendThrowTypeError(window, browserDetails);\n      break;\n    case 'safari':\n      if (!safariShim || !options.shimSafari) {\n        logging('Safari shim is not included in this adapter release.');\n        return adapter;\n      }\n      logging('adapter.js shimming safari.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = safariShim;\n\n      // Must be called before shimCallbackAPI.\n      commonShim.shimAddIceCandidateNullOrEmpty(window, browserDetails);\n\n      safariShim.shimRTCIceServerUrls(window, browserDetails);\n      safariShim.shimCreateOfferLegacy(window, browserDetails);\n      safariShim.shimCallbacksAPI(window, browserDetails);\n      safariShim.shimLocalStreamsAPI(window, browserDetails);\n      safariShim.shimRemoteStreamsAPI(window, browserDetails);\n      safariShim.shimTrackEventTransceiver(window, browserDetails);\n      safariShim.shimGetUserMedia(window, browserDetails);\n      safariShim.shimAudioContext(window, browserDetails);\n\n      commonShim.shimRTCIceCandidate(window, browserDetails);\n      commonShim.shimMaxMessageSize(window, browserDetails);\n      commonShim.shimSendThrowTypeError(window, browserDetails);\n      commonShim.removeExtmapAllowMixed(window, browserDetails);\n      break;\n    default:\n      logging('Unsupported browser!');\n      break;\n  }\n\n  return adapter;\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n\n'use strict';\n\nimport {adapterFactory} from './adapter_factory.js';\n\nconst adapter =\n  adapterFactory({window: typeof window === 'undefined' ? undefined : window});\nexport default adapter;\n","import { getLogger } from '@jitsi/logger';\nimport EventEmitter from 'events';\nimport clonedeep from 'lodash.clonedeep';\nimport 'webrtc-adapter';\n\nimport JitsiTrackError from '../../JitsiTrackError';\nimport * as JitsiTrackErrors from '../../JitsiTrackErrors';\nimport CameraFacingMode from '../../service/RTC/CameraFacingMode';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport Resolutions from '../../service/RTC/Resolutions';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport { AVAILABLE_DEVICE } from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport Listenable from '../util/Listenable';\n\nimport screenObtainer from './ScreenObtainer';\n\nconst logger = getLogger(__filename);\n\nconst eventEmitter = new EventEmitter();\n\nconst AVAILABLE_DEVICES_POLL_INTERVAL_TIME = 3000; // ms\n\n/**\n * Default MediaStreamConstraints to use for calls to getUserMedia.\n *\n * @private\n */\nconst DEFAULT_CONSTRAINTS = {\n    video: {\n        height: {\n            ideal: 720,\n            max: 720,\n            min: 180\n        },\n        width: {\n            ideal: 1280,\n            max: 1280,\n            min: 320\n        }\n    }\n};\n\n// Currently audio output device change is supported only in Chrome and\n// default output always has 'default' device ID\nlet audioOutputDeviceId = 'default'; // default device\n// whether user has explicitly set a device to use\nlet audioOutputChanged = false;\n\n// Disables all audio processing\nlet disableAP = false;\n\n// Disables Acoustic Echo Cancellation\nlet disableAEC = false;\n\n// Disables Noise Suppression\nlet disableNS = false;\n\n// Disables Automatic Gain Control\nlet disableAGC = false;\n\n// Enables stereo.\nlet stereo = null;\n\nconst featureDetectionAudioEl = document.createElement('audio');\nconst isAudioOutputDeviceChangeAvailable\n    = typeof featureDetectionAudioEl.setSinkId !== 'undefined';\n\nlet availableDevices = [];\nlet availableDevicesPollTimer;\n\n/**\n * An empty function.\n */\nfunction emptyFuncton() {\n    // no-op\n}\n\n/**\n * Creates a constraints object to be passed into a call to getUserMedia.\n *\n * @param {Array} um - An array of user media types to get. The accepted types are \"video\", \"audio\", and \"desktop.\"\n * @param {Object} options - Various values to be added to the constraints.\n * @param {string} options.cameraDeviceId - The device id for the video capture device to get video from.\n * @param {Object} options.constraints - Default constraints object to use as a base for the returned constraints.\n * @param {Object} options.desktopStream - The desktop source id from which to capture a desktop sharing video.\n * @param {string} options.facingMode - Which direction the camera is pointing to (applicable on mobile)\n * @param {string} options.micDeviceId - The device id for the audio capture device to get audio from.\n * @private\n * @returns {Object}\n */\nfunction getConstraints(um = [], options = {}) {\n    // Create a deep copy of the constraints to avoid any modification of\n    // the passed in constraints object.\n    const constraints = clonedeep(options.constraints || DEFAULT_CONSTRAINTS);\n\n    if (um.indexOf('video') >= 0) {\n        // The \"resolution\" option is a shortcut and takes precendence.\n        if (Resolutions[options.resolution]) {\n            const r = Resolutions[options.resolution];\n\n            constraints.video.height = { ideal: r.height };\n            constraints.video.width = { ideal: r.width };\n        }\n\n        if (!constraints.video) {\n            constraints.video = {};\n        }\n\n        // Override the constraints on Safari because of the following webkit bug.\n        // https://bugs.webkit.org/show_bug.cgi?id=210932\n        // Camera doesn't start on older macOS versions if min/max constraints are specified.\n        // TODO: remove this hack when the bug fix is available on Mojave, Sierra and High Sierra.\n        if (browser.isWebKitBased()) {\n            if (constraints.video.height && constraints.video.height.ideal) {\n                constraints.video.height = { ideal: constraints.video.height.ideal };\n            } else {\n                logger.warn('Ideal camera height missing, camera may not start properly');\n            }\n            if (constraints.video.width && constraints.video.width.ideal) {\n                constraints.video.width = { ideal: constraints.video.width.ideal };\n            } else {\n                logger.warn('Ideal camera width missing, camera may not start properly');\n            }\n        }\n        if (options.cameraDeviceId) {\n            constraints.video.deviceId = options.cameraDeviceId;\n        } else {\n            const facingMode = options.facingMode || CameraFacingMode.USER;\n\n            constraints.video.facingMode = facingMode;\n        }\n    } else {\n        constraints.video = false;\n    }\n\n    if (um.indexOf('audio') >= 0) {\n        if (!constraints.audio || typeof constraints.audio === 'boolean') {\n            constraints.audio = {};\n        }\n\n        constraints.audio = {\n            autoGainControl: !disableAGC && !disableAP,\n            deviceId: options.micDeviceId,\n            echoCancellation: !disableAEC && !disableAP,\n            noiseSuppression: !disableNS && !disableAP\n        };\n\n        if (stereo) {\n            Object.assign(constraints.audio, { channelCount: 2 });\n        }\n    } else {\n        constraints.audio = false;\n    }\n\n    return constraints;\n}\n\n/**\n * Updates the granted permissions based on the options we requested and the\n * streams we received.\n * @param um the options we requested to getUserMedia.\n * @param stream the stream we received from calling getUserMedia.\n */\nfunction updateGrantedPermissions(um, stream) {\n    const audioTracksReceived\n        = Boolean(stream) && stream.getAudioTracks().length > 0;\n    const videoTracksReceived\n        = Boolean(stream) && stream.getVideoTracks().length > 0;\n    const grantedPermissions = {};\n\n    if (um.indexOf('video') !== -1) {\n        grantedPermissions.video = videoTracksReceived;\n    }\n    if (um.indexOf('audio') !== -1) {\n        grantedPermissions.audio = audioTracksReceived;\n    }\n\n    eventEmitter.emit(RTCEvents.PERMISSIONS_CHANGED, grantedPermissions);\n}\n\n/**\n * Checks if new list of available media devices differs from previous one.\n * @param {MediaDeviceInfo[]} newDevices - list of new devices.\n * @returns {boolean} - true if list is different, false otherwise.\n */\nfunction compareAvailableMediaDevices(newDevices) {\n    if (newDevices.length !== availableDevices.length) {\n        return true;\n    }\n\n    /* eslint-disable newline-per-chained-call */\n\n    return (\n        newDevices.map(mediaDeviceInfoToJSON).sort().join('')\n            !== availableDevices\n                .map(mediaDeviceInfoToJSON).sort().join(''));\n\n    /* eslint-enable newline-per-chained-call */\n\n    /**\n     *\n     * @param info\n     */\n    function mediaDeviceInfoToJSON(info) {\n        return JSON.stringify({\n            kind: info.kind,\n            deviceId: info.deviceId,\n            groupId: info.groupId,\n            label: info.label,\n            facing: info.facing\n        });\n    }\n}\n\n/**\n * Sends analytics event with the passed device list.\n *\n * @param {Array<MediaDeviceInfo>} deviceList - List with info about the\n * available devices.\n * @returns {void}\n */\nfunction sendDeviceListToAnalytics(deviceList) {\n    const audioInputDeviceCount\n        = deviceList.filter(d => d.kind === 'audioinput').length;\n    const audioOutputDeviceCount\n        = deviceList.filter(d => d.kind === 'audiooutput').length;\n    const videoInputDeviceCount\n        = deviceList.filter(d => d.kind === 'videoinput').length;\n    const videoOutputDeviceCount\n        = deviceList.filter(d => d.kind === 'videooutput').length;\n\n    deviceList.forEach(device => {\n        const attributes = {\n            'audio_input_device_count': audioInputDeviceCount,\n            'audio_output_device_count': audioOutputDeviceCount,\n            'video_input_device_count': videoInputDeviceCount,\n            'video_output_device_count': videoOutputDeviceCount,\n            'device_id': device.deviceId,\n            'device_group_id': device.groupId,\n            'device_kind': device.kind,\n            'device_label': device.label\n        };\n\n        Statistics.sendAnalytics(AVAILABLE_DEVICE, attributes);\n    });\n}\n\n\n/**\n * Update known devices.\n *\n * @param {Array<Object>} pds - The new devices.\n * @returns {void}\n *\n * NOTE: Use this function as a shared callback to handle both the devicechange event  and the polling implementations.\n * This prevents duplication and works around a chrome bug (verified to occur on 68) where devicechange fires twice in\n * a row, which can cause async post devicechange processing to collide.\n */\nfunction updateKnownDevices(pds) {\n    if (compareAvailableMediaDevices(pds)) {\n        onMediaDevicesListChanged(pds);\n    }\n}\n\n/**\n * Event handler for the 'devicechange' event.\n *\n * @param {MediaDeviceInfo[]} devices - list of media devices.\n * @emits RTCEvents.DEVICE_LIST_CHANGED\n */\nfunction onMediaDevicesListChanged(devicesReceived) {\n    availableDevices = devicesReceived.slice(0);\n    logger.info('list of media devices has changed:', availableDevices);\n\n    sendDeviceListToAnalytics(availableDevices);\n\n    // Used by tracks to update the real device id before the consumer of lib-jitsi-meet receives the new device list.\n    eventEmitter.emit(RTCEvents.DEVICE_LIST_WILL_CHANGE, availableDevices);\n\n    eventEmitter.emit(RTCEvents.DEVICE_LIST_CHANGED, availableDevices);\n}\n\n/**\n *\n */\nclass RTCUtils extends Listenable {\n    /**\n     *\n     */\n    constructor() {\n        super(eventEmitter);\n    }\n\n    /**\n     * Depending on the browser, sets difference instance methods for\n     * interacting with user media and adds methods to native WebRTC-related\n     * objects. Also creates an instance variable for peer connection\n     * constraints.\n     *\n     * @param {Object} options\n     * @returns {void}\n     */\n    init(options = {}) {\n        if (typeof options.disableAEC === 'boolean') {\n            disableAEC = options.disableAEC;\n            logger.info(`Disable AEC: ${disableAEC}`);\n        }\n        if (typeof options.disableNS === 'boolean') {\n            disableNS = options.disableNS;\n            logger.info(`Disable NS: ${disableNS}`);\n        }\n        if (typeof options.disableAP === 'boolean') {\n            disableAP = options.disableAP;\n            logger.info(`Disable AP: ${disableAP}`);\n        }\n        if (typeof options.disableAGC === 'boolean') {\n            disableAGC = options.disableAGC;\n            logger.info(`Disable AGC: ${disableAGC}`);\n        }\n        if (typeof options.audioQuality?.stereo === 'boolean') {\n            stereo = options.audioQuality.stereo;\n            logger.info(`Stereo: ${stereo}`);\n        }\n\n        window.clearInterval(availableDevicesPollTimer);\n        availableDevicesPollTimer = undefined;\n\n        if (!browser.isReactNative()) {\n            this.attachMediaStream\n                = wrapAttachMediaStream((element, stream) => {\n                    if (element) {\n                        element.srcObject = stream;\n                    }\n                });\n        }\n\n        this.pcConstraints = {};\n\n        screenObtainer.init(options);\n\n        if (this.isDeviceListAvailable()) {\n            this.enumerateDevices(ds => {\n                availableDevices = ds.slice(0);\n\n                logger.debug('Available devices: ', availableDevices);\n                sendDeviceListToAnalytics(availableDevices);\n\n                eventEmitter.emit(\n                    RTCEvents.DEVICE_LIST_AVAILABLE,\n                    availableDevices);\n\n                if (browser.supportsDeviceChangeEvent()) {\n                    navigator.mediaDevices.addEventListener(\n                        'devicechange',\n                        () => this.enumerateDevices(emptyFuncton));\n                } else {\n                    // Periodically poll enumerateDevices() method to check if\n                    // list of media devices has changed.\n                    availableDevicesPollTimer = window.setInterval(\n                        () => this.enumerateDevices(emptyFuncton),\n                        AVAILABLE_DEVICES_POLL_INTERVAL_TIME);\n                }\n            });\n        }\n    }\n\n    /**\n     *\n     * @param {Function} callback\n     */\n    enumerateDevices(callback) {\n        navigator.mediaDevices.enumerateDevices()\n            .then(devices => {\n                updateKnownDevices(devices);\n                callback(devices);\n            })\n            .catch(error => {\n                logger.warn(`Failed to  enumerate devices. ${error}`);\n                updateKnownDevices([]);\n                callback([]);\n            });\n    }\n\n    /**\n     * Acquires a media stream via getUserMedia that\n     * matches the given constraints\n     *\n     * @param {array} umDevices which devices to acquire (e.g. audio, video)\n     * @param {Object} constraints - Stream specifications to use.\n     * @param {number} timeout - The timeout in ms for GUM.\n     * @returns {Promise}\n     */\n    _getUserMedia(umDevices, constraints = {}, timeout = 0) {\n        return new Promise((resolve, reject) => {\n            let gumTimeout, timeoutExpired = false;\n\n            if (typeof timeout === 'number' && !isNaN(timeout) && timeout > 0) {\n                gumTimeout = setTimeout(() => {\n                    timeoutExpired = true;\n                    gumTimeout = undefined;\n                    reject(new JitsiTrackError(JitsiTrackErrors.TIMEOUT));\n                }, timeout);\n            }\n\n            navigator.mediaDevices.getUserMedia(constraints)\n                .then(stream => {\n                    logger.log('onUserMediaSuccess');\n                    updateGrantedPermissions(umDevices, stream);\n                    if (!timeoutExpired) {\n                        if (typeof gumTimeout !== 'undefined') {\n                            clearTimeout(gumTimeout);\n                        }\n                        resolve(stream);\n                    }\n                })\n                .catch(error => {\n                    logger.warn(`Failed to get access to local media. ${error} ${JSON.stringify(constraints)}`);\n                    const jitsiError = new JitsiTrackError(error, constraints, umDevices);\n\n                    if (!timeoutExpired) {\n                        if (typeof gumTimeout !== 'undefined') {\n                            clearTimeout(gumTimeout);\n                        }\n                        reject(jitsiError);\n                    }\n\n                    if (jitsiError.name === JitsiTrackErrors.PERMISSION_DENIED) {\n                        updateGrantedPermissions(umDevices, undefined);\n                    }\n\n                    // else {\n                    // Probably the error is not caused by the lack of permissions and we don't need to update them.\n                    // }\n                });\n        });\n    }\n\n    /**\n     * Acquire a display stream via the screenObtainer. This requires extra\n     * logic compared to use screenObtainer versus normal device capture logic\n     * in RTCUtils#_getUserMedia.\n     *\n     * @param {Object} options - Optional parameters.\n     * @returns {Promise} A promise which will be resolved with an object which\n     * contains the acquired display stream. If desktop sharing is not supported\n     * then a rejected promise will be returned.\n     */\n    _getDesktopMedia(options) {\n        if (!screenObtainer.isSupported()) {\n            return Promise.reject(new Error('Desktop sharing is not supported!'));\n        }\n\n        return new Promise((resolve, reject) => {\n            screenObtainer.obtainStream(\n                stream => {\n                    resolve(stream);\n                },\n                error => {\n                    reject(error);\n                },\n                options);\n        });\n    }\n\n    /**\n     * Private utility for determining if the passed in MediaStream contains\n     * tracks of the type(s) specified in the requested devices.\n     *\n     * @param {string[]} requestedDevices - The track types that are expected to\n     * be includes in the stream.\n     * @param {MediaStream} stream - The MediaStream to check if it has the\n     * expected track types.\n     * @returns {string[]} An array of string with the missing track types. The\n     * array will be empty if all requestedDevices are found in the stream.\n     */\n    _getMissingTracks(requestedDevices = [], stream) {\n        const missingDevices = [];\n\n        const audioDeviceRequested = requestedDevices.includes('audio');\n        const audioTracksReceived\n            = stream && stream.getAudioTracks().length > 0;\n\n        if (audioDeviceRequested && !audioTracksReceived) {\n            missingDevices.push('audio');\n        }\n\n        const videoDeviceRequested = requestedDevices.includes('video');\n        const videoTracksReceived\n            = stream && stream.getVideoTracks().length > 0;\n\n        if (videoDeviceRequested && !videoTracksReceived) {\n            missingDevices.push('video');\n        }\n\n        return missingDevices;\n    }\n\n    /**\n     * Gets streams from specified device types. This function intentionally\n     * ignores errors for upstream to catch and handle instead.\n     *\n     * @param {Object} options - A hash describing what devices to get and\n     * relevant constraints.\n     * @param {string[]} options.devices - The types of media to capture. Valid\n     * values are \"desktop\", \"audio\", and \"video\".\n     * @param {Object} options.desktopSharingFrameRate\n     * @param {Object} options.desktopSharingFrameRate.min - Minimum fps\n     * @param {Object} options.desktopSharingFrameRate.max - Maximum fps\n     * @param {String} options.desktopSharingSourceDevice - The device id or\n     * label for a video input source that should be used for screensharing.\n     * @param {Array<string>} options.desktopSharingSources - The types of sources (\"screen\", \"window\", etc)\n     * from which the user can select what to share.\n     * @returns {Promise} The promise, when successful, will return an array of\n     * meta data for the requested device type, which includes the stream and\n     * track. If an error occurs, it will be deferred to the caller for\n     * handling.\n     */\n    obtainAudioAndVideoPermissions(options) {\n        const {\n            timeout,\n            ...otherOptions\n        } = options;\n\n        const mediaStreamsMetaData = [];\n\n        // Declare private functions to be used in the promise chain below.\n        // These functions are declared in the scope of this function because\n        // they are not being used anywhere else, so only this function needs to\n        // know about them.\n\n        /**\n         * Executes a request for desktop media if specified in options.\n         *\n         * @returns {Promise}\n         */\n        const maybeRequestDesktopDevice = function() {\n            const umDevices = otherOptions.devices || [];\n            const isDesktopDeviceRequested\n                = umDevices.indexOf('desktop') !== -1;\n\n            if (!isDesktopDeviceRequested) {\n                return Promise.resolve();\n            }\n\n            const {\n                desktopSharingSourceDevice,\n                desktopSharingSources\n            } = otherOptions;\n\n            // Attempt to use a video input device as a screenshare source if\n            // the option is defined.\n            if (desktopSharingSourceDevice) {\n                const matchingDevice\n                    = availableDevices && availableDevices.find(device =>\n                        device.kind === 'videoinput'\n                            && (device.deviceId === desktopSharingSourceDevice\n                            || device.label === desktopSharingSourceDevice));\n\n                if (!matchingDevice) {\n                    return Promise.reject(new JitsiTrackError(\n                        { name: 'ConstraintNotSatisfiedError' },\n                        {},\n                        [ desktopSharingSourceDevice ]\n                    ));\n                }\n\n                const requestedDevices = [ 'video' ];\n                const constraints = {\n                    video: {\n                        deviceId: matchingDevice.deviceId\n\n                        // frameRate is omited here on purpose since this is a device that we'll pretend is a screen.\n                    }\n                };\n\n                return this._getUserMedia(requestedDevices, constraints, timeout)\n                    .then(stream => {\n                        return {\n                            sourceType: 'device',\n                            stream\n                        };\n                    });\n            }\n\n            return this._getDesktopMedia({ desktopSharingSources });\n        }.bind(this);\n\n        /**\n         * Creates a meta data object about the passed in desktopStream and\n         * pushes the meta data to the internal array mediaStreamsMetaData to be\n         * returned later.\n         *\n         * @param {MediaStreamTrack} desktopStream - A track for a desktop\n         * capture.\n         * @returns {void}\n         */\n        const maybeCreateAndAddDesktopTrack = function(desktopStream) {\n            if (!desktopStream) {\n                return;\n            }\n\n            const { stream, sourceId, sourceType } = desktopStream;\n\n            const desktopAudioTracks = stream.getAudioTracks();\n\n            if (desktopAudioTracks.length) {\n                const desktopAudioStream = new MediaStream(desktopAudioTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: desktopAudioStream,\n                    sourceId,\n                    sourceType,\n                    track: desktopAudioStream.getAudioTracks()[0]\n                });\n            }\n\n            const desktopVideoTracks = stream.getVideoTracks();\n\n            if (desktopVideoTracks.length) {\n                const desktopVideoStream = new MediaStream(desktopVideoTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: desktopVideoStream,\n                    sourceId,\n                    sourceType,\n                    track: desktopVideoStream.getVideoTracks()[0],\n                    videoType: VideoType.DESKTOP\n                });\n            }\n        };\n\n        /**\n         * Executes a request for audio and/or video, as specified in options.\n         * By default both audio and video will be captured if options.devices\n         * is not defined.\n         *\n         * @returns {Promise}\n         */\n        const maybeRequestCaptureDevices = function() {\n            const umDevices = otherOptions.devices || [ 'audio', 'video' ];\n            const requestedCaptureDevices = umDevices.filter(device => device === 'audio' || device === 'video');\n\n            if (!requestedCaptureDevices.length) {\n                return Promise.resolve();\n            }\n\n            const constraints = getConstraints(requestedCaptureDevices, otherOptions);\n\n            logger.info('Got media constraints: ', JSON.stringify(constraints));\n\n            return this._getUserMedia(requestedCaptureDevices, constraints, timeout);\n        }.bind(this);\n\n        /**\n         * Splits the passed in media stream into separate audio and video\n         * streams and creates meta data objects for each and pushes them to the\n         * internal array mediaStreamsMetaData to be returned later.\n         *\n         * @param {MediaStreamTrack} avStream - A track for with audio and/or\n         * video track.\n         * @returns {void}\n         */\n        const maybeCreateAndAddAVTracks = function(avStream) {\n            if (!avStream) {\n                return;\n            }\n\n            const audioTracks = avStream.getAudioTracks();\n\n            if (audioTracks.length) {\n                const audioStream = new MediaStream(audioTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: audioStream,\n                    track: audioStream.getAudioTracks()[0],\n                    effects: otherOptions.effects\n                });\n            }\n\n            const videoTracks = avStream.getVideoTracks();\n\n            if (videoTracks.length) {\n                const videoStream = new MediaStream(videoTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: videoStream,\n                    track: videoStream.getVideoTracks()[0],\n                    videoType: VideoType.CAMERA,\n                    effects: otherOptions.effects\n                });\n            }\n        };\n\n        return maybeRequestDesktopDevice()\n            .then(maybeCreateAndAddDesktopTrack)\n            .then(maybeRequestCaptureDevices)\n            .then(maybeCreateAndAddAVTracks)\n            .then(() => mediaStreamsMetaData)\n            .catch(error => {\n                mediaStreamsMetaData.forEach(({ stream }) => {\n                    this.stopMediaStream(stream);\n                });\n\n                return Promise.reject(error);\n            });\n    }\n\n    /**\n     * Checks whether it is possible to enumerate available cameras/microphones.\n     *\n     * @returns {boolean} {@code true} if the device listing is available;\n     * {@code false}, otherwise.\n     */\n    isDeviceListAvailable() {\n        return Boolean(\n            navigator.mediaDevices\n                && navigator.mediaDevices.enumerateDevices);\n    }\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     * @params {string} [deviceType] - type of device to change. Default is\n     *      undefined or 'input', 'output' - for audio output device change.\n     * @returns {boolean} true if available, false otherwise.\n     */\n    isDeviceChangeAvailable(deviceType) {\n        if (deviceType === 'output' || deviceType === 'audiooutput') {\n            return isAudioOutputDeviceChangeAvailable;\n        }\n\n        return true;\n    }\n\n    /**\n     * A method to handle stopping of the stream.\n     * One point to handle the differences in various implementations.\n     * @param mediaStream MediaStream object to stop.\n     */\n    stopMediaStream(mediaStream) {\n        if (!mediaStream) {\n            return;\n        }\n\n        mediaStream.getTracks().forEach(track => {\n            if (track.stop) {\n                track.stop();\n            }\n        });\n\n        // leave stop for implementation still using it\n        if (mediaStream.stop) {\n            mediaStream.stop();\n        }\n\n        // The MediaStream implementation of the react-native-webrtc project has\n        // an explicit release method that is to be invoked in order to release\n        // used resources such as memory.\n        if (mediaStream.release) {\n            mediaStream.release();\n        }\n    }\n\n    /**\n     * Returns whether the desktop sharing is enabled or not.\n     * @returns {boolean}\n     */\n    isDesktopSharingEnabled() {\n        return screenObtainer.isSupported();\n    }\n\n    /**\n     * Sets current audio output device.\n     * @param {string} deviceId - id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices(), 'default' for default\n     *      device\n     * @returns {Promise} - resolves when audio output is changed, is rejected\n     *      otherwise\n     */\n    setAudioOutputDevice(deviceId) {\n        if (!this.isDeviceChangeAvailable('output')) {\n            return Promise.reject(\n                new Error('Audio output device change is not supported'));\n        }\n\n        return featureDetectionAudioEl.setSinkId(deviceId)\n            .then(() => {\n                audioOutputDeviceId = deviceId;\n                audioOutputChanged = true;\n\n                logger.log(`Audio output device set to ${deviceId}`);\n\n                eventEmitter.emit(RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                    deviceId);\n            });\n    }\n\n    /**\n     * Sets the capture frame rate for desktop tracks.\n     *\n     * @param {number} maxFps - max fps to be used as the capture frame rate.\n     * @returns {void}\n     */\n    setDesktopSharingFrameRate(maxFps) {\n        screenObtainer.setDesktopSharingFrameRate(maxFps);\n    }\n\n    /**\n     * Returns currently used audio output device id, '' stands for default\n     * device\n     * @returns {string}\n     */\n    getAudioOutputDevice() {\n        return audioOutputDeviceId;\n    }\n\n    /**\n     * Returns list of available media devices if its obtained, otherwise an\n     * empty array is returned/\n     * @returns {Array} list of available media devices.\n     */\n    getCurrentlyAvailableMediaDevices() {\n        return availableDevices;\n    }\n\n    /**\n     * Returns whether available devices have permissions granted\n     * @returns {Boolean}\n     */\n    arePermissionsGrantedForAvailableDevices() {\n        return availableDevices.some(device => Boolean(device.label));\n    }\n\n    /**\n     * Returns event data for device to be reported to stats.\n     * @returns {MediaDeviceInfo} device.\n     */\n    getEventDataForActiveDevice(device) {\n        const deviceList = [];\n        const deviceData = {\n            'deviceId': device.deviceId,\n            'kind': device.kind,\n            'label': device.label,\n            'groupId': device.groupId\n        };\n\n        deviceList.push(deviceData);\n\n        return { deviceList };\n    }\n}\n\nconst rtcUtils = new RTCUtils();\n\n/**\n * Wraps original attachMediaStream function to set current audio output device\n * if this is supported.\n * @param {Function} origAttachMediaStream\n * @returns {Function}\n */\nfunction wrapAttachMediaStream(origAttachMediaStream) {\n    return function(element, stream) {\n        // eslint-disable-next-line prefer-rest-params\n        const res = origAttachMediaStream.apply(rtcUtils, arguments);\n\n        if (stream\n                && rtcUtils.isDeviceChangeAvailable('output')\n                && stream.getAudioTracks\n                && stream.getAudioTracks().length\n\n                // we skip setting audio output if there was no explicit change\n                && audioOutputChanged) {\n            element.setSinkId(rtcUtils.getAudioOutputDevice())\n                .catch(function(ex) {\n                    const err\n                        = new JitsiTrackError(ex, null, [ 'audiooutput' ]);\n\n                    GlobalOnErrorHandler.callUnhandledRejectionHandler({\n                        promise: this, // eslint-disable-line no-invalid-this\n                        reason: err\n                    });\n\n                    logger.warn(\n                        'Failed to set audio output device for the element.'\n                            + ' Default audio output device will be used'\n                            + ' instead',\n                        element,\n                        err);\n                });\n        }\n\n        return res;\n    };\n}\n\nexport default rtcUtils;\n","import { getLogger } from '@jitsi/logger';\nimport EventEmitter from 'events';\n\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport browser from '../browser';\n\nimport RTCUtils from './RTCUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * Maps our handler types to MediaStreamTrack properties.\n */\nconst trackHandler2Prop = {\n    'track_mute': 'onmute', // Not supported on FF\n    'track_unmute': 'onunmute',\n    'track_ended': 'onended'\n};\n\n/**\n * Represents a single media track (either audio or video).\n */\nexport default class JitsiTrack extends EventEmitter {\n    /* eslint-disable max-params */\n    /**\n     * Represents a single media track (either audio or video).\n     * @constructor\n     * @param conference the rtc instance\n     * @param stream the WebRTC MediaStream instance\n     * @param track the WebRTC MediaStreamTrack instance, must be part of\n     * the given <tt>stream</tt>.\n     * @param streamInactiveHandler the function that will handle\n     *        onended/oninactive events of the stream.\n     * @param trackMediaType the media type of the JitsiTrack\n     * @param videoType the VideoType for this track if any\n     */\n    constructor(\n            conference,\n            stream,\n            track,\n            streamInactiveHandler,\n            trackMediaType,\n            videoType) {\n        super();\n\n        // aliases for addListener/removeListener\n        this.addEventListener = this.addListener;\n        this.removeEventListener = this.off = this.removeListener;\n\n        /**\n         * Array with the HTML elements that are displaying the streams.\n         * @type {Array}\n         */\n        this.containers = [];\n        this.conference = conference;\n        this.audioLevel = -1;\n        this.type = trackMediaType;\n        this.track = track;\n        this.videoType = videoType;\n        this.handlers = new Map();\n\n        /**\n         * Indicates whether this JitsiTrack has been disposed. If true, this\n         * JitsiTrack is to be considered unusable and operations involving it\n         * are to fail (e.g. {@link JitsiConference#addTrack(JitsiTrack)},\n         * {@link JitsiConference#removeTrack(JitsiTrack)}).\n         * @type {boolean}\n         */\n        this.disposed = false;\n\n        /**\n         * The inactive handler which will be triggered when the underlying\n         * <tt>MediaStream</tt> ends.\n         *\n         * @private\n         * @type {Function}\n         */\n        this._streamInactiveHandler = streamInactiveHandler;\n\n        this._setStream(stream);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Adds onended/oninactive handler to a MediaStream or a MediaStreamTrack.\n     * Firefox doesn't fire a inactive event on the MediaStream, instead it fires\n     * a onended event on the MediaStreamTrack.\n     * @param {Function} handler the handler\n     */\n    _addMediaStreamInactiveHandler(handler) {\n        if (browser.isFirefox()) {\n            this.track.onended = handler;\n        } else {\n            this.stream.oninactive = handler;\n        }\n    }\n\n    /**\n     * Sets handler to the WebRTC MediaStream or MediaStreamTrack object\n     * depending on the passed type.\n     * @param {string} type the type of the handler that is going to be set\n     * @param {Function} handler the handler.\n     */\n    _setHandler(type, handler) {\n        if (!trackHandler2Prop.hasOwnProperty(type)) {\n            logger.error(`Invalid handler type ${type}`);\n\n            return;\n        }\n        if (handler) {\n            this.handlers.set(type, handler);\n        } else {\n            this.handlers.delete(type);\n        }\n\n        if (this.stream) {\n            for (const track of this.stream.getTracks()) {\n                track[trackHandler2Prop[type]] = handler;\n            }\n        }\n    }\n\n    /**\n     * Unregisters all event handlers bound to the underlying media stream/track\n     * @private\n     */\n    _unregisterHandlers() {\n        if (!this.stream) {\n            logger.warn(\n                `${this}: unable to unregister handlers - no stream object`);\n\n            return;\n        }\n\n        for (const type of this.handlers.keys()) {\n            // FIXME Why only video tracks?\n            for (const videoTrack of this.stream.getVideoTracks()) {\n                videoTrack[trackHandler2Prop[type]] = undefined;\n            }\n        }\n        if (this._streamInactiveHandler) {\n            this._addMediaStreamInactiveHandler(undefined);\n        }\n    }\n\n    /**\n     * Sets the stream property of JitsiTrack object and sets all stored\n     * handlers to it.\n     *\n     * @param {MediaStream} stream the new stream.\n     * @protected\n     */\n    _setStream(stream) {\n        if (this.stream === stream) {\n            return;\n        }\n\n        this.stream = stream;\n\n        // TODO Practically, that's like the opposite of _unregisterHandlers\n        // i.e. may be abstracted into a function/method called\n        // _registerHandlers for clarity and easing the maintenance of the two\n        // pieces of source code.\n        if (this.stream) {\n            for (const type of this.handlers.keys()) {\n                this._setHandler(type, this.handlers.get(type));\n            }\n            if (this._streamInactiveHandler) {\n                this._addMediaStreamInactiveHandler(this._streamInactiveHandler);\n            }\n        }\n    }\n\n    /**\n     * Returns the video type (camera or desktop) of this track.\n     */\n    getVideoType() {\n        return this.videoType;\n    }\n\n    /**\n     * Returns the type (audio or video) of this track.\n     */\n    getType() {\n        return this.type;\n    }\n\n    /**\n     * Check if this is an audio track.\n     */\n    isAudioTrack() {\n        return this.getType() === MediaType.AUDIO;\n    }\n\n    /**\n     * Checks whether the underlying WebRTC <tt>MediaStreamTrack</tt> is muted\n     * according to it's 'muted' field status.\n     * @return {boolean} <tt>true</tt> if the underlying\n     * <tt>MediaStreamTrack</tt> is muted or <tt>false</tt> otherwise.\n     */\n    isWebRTCTrackMuted() {\n        return this.track && this.track.muted;\n    }\n\n    /**\n     * Check if this is a video track.\n     */\n    isVideoTrack() {\n        return this.getType() === MediaType.VIDEO;\n    }\n\n    /**\n     * Checks whether this is a local track.\n     * @abstract\n     * @return {boolean} 'true' if it's a local track or 'false' otherwise.\n     */\n    isLocal() {\n        throw new Error('Not implemented by subclass');\n    }\n\n    /**\n     * Check whether this is a local audio track.\n     *\n     * @return {boolean} -  true if track represents a local audio track, false otherwise.\n     */\n    isLocalAudioTrack() {\n        return this.isAudioTrack() && this.isLocal();\n    }\n\n    /**\n     * Returns the WebRTC MediaStream instance.\n     */\n    getOriginalStream() {\n        return this.stream;\n    }\n\n    /**\n     * Returns the ID of the underlying WebRTC Media Stream(if any)\n     * @returns {String|null}\n     */\n    getStreamId() {\n        return this.stream ? this.stream.id : null;\n    }\n\n    /**\n     * Return the underlying WebRTC MediaStreamTrack\n     * @returns {MediaStreamTrack}\n     */\n    getTrack() {\n        return this.track;\n    }\n\n    /**\n     * Return the underlying WebRTC MediaStreamTrack label\n     * @returns {string}\n     */\n    getTrackLabel() {\n        return this.track.label;\n    }\n\n    /**\n     * Returns the ID of the underlying WebRTC MediaStreamTrack(if any)\n     * @returns {String|null}\n     */\n    getTrackId() {\n        return this.track ? this.track.id : null;\n    }\n\n    /**\n     * Return meaningful usage label for this track depending on it's media and\n     * eventual video type.\n     * @returns {string}\n     */\n    getUsageLabel() {\n        if (this.isAudioTrack()) {\n            return 'mic';\n        }\n\n        return this.videoType ? this.videoType : 'default';\n    }\n\n    /**\n     * Eventually will trigger RTCEvents.TRACK_ATTACHED event.\n     * @param container the video/audio container to which this stream is\n     *        attached and for which event will be fired.\n     * @private\n     */\n    _maybeFireTrackAttached(container) {\n        if (this.conference && container) {\n            this.conference._onTrackAttach(this, container);\n        }\n    }\n\n    /**\n     * Attaches the MediaStream of this track to an HTML container.\n     * Adds the container to the list of containers that are displaying the\n     * track.\n     *\n     * @param container the HTML container which can be 'video' or 'audio'\n     * element.\n     *\n     * @returns {void}\n     */\n    attach(container) {\n        if (this.stream) {\n            this._onTrackAttach(container);\n            RTCUtils.attachMediaStream(container, this.stream);\n        }\n        this.containers.push(container);\n        this._maybeFireTrackAttached(container);\n        this._attachTTFMTracker(container);\n    }\n\n    /**\n     * Removes this JitsiTrack from the passed HTML container.\n     *\n     * @param container the HTML container to detach from this JitsiTrack. If\n     * <tt>null</tt> or <tt>undefined</tt>, all containers are removed. A\n     * container can be a 'video', 'audio' or 'object' HTML element instance to\n     * which this JitsiTrack is currently attached.\n     */\n    detach(container) {\n        if (!container) {\n            return;\n        }\n        for (let cs = this.containers, i = cs.length - 1; i >= 0; --i) {\n            const c = cs[i];\n\n            if (!container) {\n                this._onTrackDetach(c);\n                RTCUtils.attachMediaStream(c, null);\n            }\n            if (!container || c === container) {\n                cs.splice(i, 1);\n            }\n        }\n\n        if (container) {\n            this._onTrackDetach(container);\n            RTCUtils.attachMediaStream(container, null);\n        }\n    }\n\n    /**\n     * Called when the track has been attached to a new container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _onTrackAttach(container) { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending JitsiTrack\n    }\n\n    /**\n     * Called when the track has been detached from a container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _onTrackDetach(container) { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending JitsiTrack\n    }\n\n    /**\n     * Attach time to first media tracker only if there is conference and only\n     * for the first element.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _attachTTFMTracker(container) { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending JitsiTrack\n    }\n\n    /**\n     * Removes attached event listeners.\n     *\n     * @returns {Promise}\n     */\n    dispose() {\n        this.removeAllListeners();\n\n        this.disposed = true;\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Returns id of the track.\n     * @returns {string|null} id of the track or null if this is fake track.\n     */\n    getId() {\n        return this.getStreamId();\n    }\n\n    /**\n     * Checks whether the MediaStream is active/not ended.\n     * When there is no check for active we don't have information and so\n     * will return that stream is active (in case of FF).\n     * @returns {boolean} whether MediaStream is active.\n     */\n    isActive() {\n        if (typeof this.stream.active !== 'undefined') {\n            return this.stream.active;\n        }\n\n        return true;\n    }\n\n    /**\n     * Sets the audio level for the stream\n     * @param {number} audioLevel value between 0 and 1\n     * @param {TraceablePeerConnection} [tpc] the peerconnection instance which\n     * is source for the audio level. It can be <tt>undefined</tt> for\n     * a local track if the audio level was measured outside of the\n     * peerconnection (see /modules/statistics/LocalStatsCollector.js).\n     */\n    setAudioLevel(audioLevel, tpc) {\n        let newAudioLevel = audioLevel;\n\n        // When using getSynchornizationSources on the audio receiver to gather audio levels for\n        // remote tracks, browser reports last known audio levels even when the remote user is\n        // audio muted, we need to reset the value to zero here so that the audio levels are cleared.\n        // Remote tracks have the tpc info present while local tracks do not.\n        if (browser.supportsReceiverStats() && typeof tpc !== 'undefined' && this.isMuted()) {\n            newAudioLevel = 0;\n        }\n\n        if (this.audioLevel !== newAudioLevel) {\n            this.audioLevel = newAudioLevel;\n            this.emit(\n                JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n                newAudioLevel,\n                tpc);\n\n        // LocalStatsCollector reports a value of 0.008 for muted mics\n        // and a value of 0 when there is no audio input.\n        } else if (this.audioLevel === 0\n            && newAudioLevel === 0\n            && this.isLocal()\n            && !this.isWebRTCTrackMuted()) {\n            this.emit(\n                JitsiTrackEvents.NO_AUDIO_INPUT,\n                newAudioLevel);\n        }\n    }\n\n    /**\n     * Returns the msid of the stream attached to the JitsiTrack object or null\n     * if no stream is attached.\n     */\n    getMSID() {\n        const streamId = this.getStreamId();\n        const trackId = this.getTrackId();\n\n        return streamId && trackId ? `${streamId} ${trackId}` : null;\n    }\n\n    /**\n     * Sets new audio output device for track's DOM elements. Video tracks are\n     * ignored.\n     * @param {string} audioOutputDeviceId - id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices(), '' for default device\n     * @emits JitsiTrackEvents.TRACK_AUDIO_OUTPUT_CHANGED\n     * @returns {Promise}\n     */\n    setAudioOutput(audioOutputDeviceId) {\n        if (!RTCUtils.isDeviceChangeAvailable('output')) {\n            return Promise.reject(\n                new Error('Audio output device change is not supported'));\n        }\n\n        // All audio communication is done through audio tracks, so ignore\n        // changing audio output for video tracks at all.\n        if (this.isVideoTrack()) {\n            return Promise.resolve();\n        }\n\n        return (\n            Promise.all(\n                this.containers.map(\n                    element =>\n                        element.setSinkId(audioOutputDeviceId)\n                            .catch(error => {\n                                logger.warn(\n                                    'Failed to change audio output device on'\n                                        + ' element. Default or previously set'\n                                        + ' audio output device will be used.',\n                                    element,\n                                    error);\n                                throw error;\n                            }))\n            )\n                .then(() => {\n                    this.emit(\n                        JitsiTrackEvents.TRACK_AUDIO_OUTPUT_CHANGED,\n                        audioOutputDeviceId);\n                }));\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport JitsiTrackError from '../../JitsiTrackError';\nimport {\n    TRACK_IS_DISPOSED,\n    TRACK_NO_STREAM_FOUND\n} from '../../JitsiTrackErrors';\nimport {\n    LOCAL_TRACK_STOPPED,\n    NO_DATA_FROM_SOURCE,\n    TRACK_MUTE_CHANGED\n} from '../../JitsiTrackEvents';\nimport CameraFacingMode from '../../service/RTC/CameraFacingMode';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport {\n    NO_BYTES_SENT,\n    TRACK_UNMUTED,\n    createNoDataFromSourceEvent\n} from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\nimport FeatureFlags from '../flags/FeatureFlags';\nimport Statistics from '../statistics/statistics';\n\nimport JitsiTrack from './JitsiTrack';\nimport RTCUtils from './RTCUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * Represents a single media track(either audio or video).\n * One <tt>JitsiLocalTrack</tt> corresponds to one WebRTC MediaStreamTrack.\n */\nexport default class JitsiLocalTrack extends JitsiTrack {\n    /**\n     * Constructs a new JitsiLocalTrack instance.\n     *\n     * @constructor\n     * @param {Object} trackInfo\n     * @param {number} trackInfo.rtcId - The ID assigned by the RTC module.\n     * @param {Object} trackInfo.stream - The WebRTC MediaStream, parent of the track.\n     * @param {Object} trackInfo.track - The underlying WebRTC MediaStreamTrack for new JitsiLocalTrack.\n     * @param {string} trackInfo.mediaType - The MediaType of the JitsiLocalTrack.\n     * @param {string} trackInfo.videoType - The VideoType of the JitsiLocalTrack.\n     * @param {Array<Object>} trackInfo.effects - The effects to be applied to the JitsiLocalTrack.\n     * @param {number} trackInfo.resolution - The the video resolution if it's a video track\n     * @param {string} trackInfo.deviceId - The ID of the local device for this track.\n     * @param {string} trackInfo.facingMode - Thehe camera facing mode used in getUserMedia call (for mobile only).\n     * @param {sourceId} trackInfo.sourceId - The id of the desktop sharing source. NOTE: defined for desktop sharing\n     * tracks only.\n     */\n    constructor({\n        deviceId,\n        facingMode,\n        mediaType,\n        resolution,\n        rtcId,\n        sourceId,\n        sourceType,\n        stream,\n        track,\n        videoType,\n        effects = []\n    }) {\n        super(\n            /* conference */ null,\n            stream,\n            track,\n            /* streamInactiveHandler */ () => this.emit(LOCAL_TRACK_STOPPED, this),\n            mediaType,\n            videoType);\n\n        this._setEffectInProgress = false;\n        const effect = effects.find(e => e.isEnabled(this));\n\n        if (effect) {\n            this._startStreamEffect(effect);\n        }\n\n        const displaySurface = videoType === VideoType.DESKTOP\n            ? track.getSettings().displaySurface\n            : null;\n\n        /**\n         * Track metadata.\n         */\n        this.metadata = {\n            timestamp: Date.now(),\n            ...displaySurface ? { displaySurface } : {}\n        };\n\n\n        /**\n         * The ID assigned by the RTC module on instance creation.\n         *\n         * @type {number}\n         */\n        this.rtcId = rtcId;\n        this.sourceId = sourceId;\n        this.sourceType = sourceType;\n\n        // Get the resolution from the track itself because it cannot be\n        // certain which resolution webrtc has fallen back to using.\n        this.resolution = track.getSettings().height;\n        this.maxEnabledResolution = resolution;\n\n        // Cache the constraints of the track in case of any this track\n        // model needs to call getUserMedia again, such as when unmuting.\n        this._constraints = track.getConstraints();\n\n        // Safari returns an empty constraints object, construct the constraints using getSettings.\n        if (!Object.keys(this._constraints).length && videoType === VideoType.CAMERA) {\n            this._constraints = {\n                height: track.getSettings().height,\n                width: track.getSettings().width\n            };\n        }\n\n        this.deviceId = deviceId;\n\n        /**\n         * The <tt>Promise</tt> which represents the progress of a previously\n         * queued/scheduled {@link _setMuted} (from the point of view of\n         * {@link _queueSetMuted}).\n         *\n         * @private\n         * @type {Promise}\n         */\n        this._prevSetMuted = Promise.resolve();\n\n        /**\n         * The facing mode of the camera from which this JitsiLocalTrack\n         * instance was obtained.\n         *\n         * @private\n         * @type {CameraFacingMode|undefined}\n         */\n        this._facingMode = facingMode;\n\n        // Currently there is no way to know the MediaStreamTrack ended due to\n        // to device disconnect in Firefox through e.g. \"readyState\" property.\n        // Instead we will compare current track's label with device labels from\n        // enumerateDevices() list.\n        this._trackEnded = false;\n\n        /**\n         * Indicates whether data has been sent or not.\n         */\n        this._hasSentData = false;\n\n        /**\n         * Used only for detection of audio problems. We want to check only once\n         * whether the track is sending data ot not. This flag is set to false\n         * after the check.\n         */\n        this._testDataSent = true;\n\n        // Currently there is no way to determine with what device track was\n        // created (until getConstraints() support), however we can associate\n        // tracks with real devices obtained from enumerateDevices() call as\n        // soon as it's called.\n        // NOTE: this.deviceId corresponds to the device id specified in GUM constraints and this._realDeviceId seems to\n        // correspond to the id of a matching device from the available device list.\n        this._realDeviceId = this.deviceId === '' ? undefined : this.deviceId;\n\n        // The source name that will be signaled for this track.\n        this._sourceName = null;\n\n        this._trackMutedTS = 0;\n\n        this._onDeviceListWillChange = devices => {\n            const oldRealDeviceId = this._realDeviceId;\n\n            this._setRealDeviceIdFromDeviceList(devices);\n\n            if (\n                // Mark track as ended for those browsers that do not support\n                // \"readyState\" property. We do not touch tracks created with\n                // default device ID \"\".\n                (typeof this.getTrack().readyState === 'undefined'\n                    && typeof this._realDeviceId !== 'undefined'\n                    && !devices.find(d => d.deviceId === this._realDeviceId))\n\n                // If there was an associated realDeviceID and after the device change the realDeviceId is undefined\n                // then the associated device has been disconnected and the _trackEnded flag needs to be set. In\n                // addition on some Chrome versions the readyState property is set after the device change event is\n                // triggered which causes issues in jitsi-meet with the selection of a new device because we don't\n                // detect that the old one was removed.\n                || (typeof oldRealDeviceId !== 'undefined' && typeof this._realDeviceId === 'undefined')\n            ) {\n                this._trackEnded = true;\n            }\n        };\n\n        // Subscribe each created local audio track to\n        // RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED event. This is different from\n        // handling this event for remote tracks (which are handled in RTC.js),\n        // because there might be local tracks not attached to a conference.\n        if (this.isAudioTrack() && RTCUtils.isDeviceChangeAvailable('output')) {\n            this._onAudioOutputDeviceChanged = this.setAudioOutput.bind(this);\n            RTCUtils.addListener(\n                RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                this._onAudioOutputDeviceChanged);\n        }\n\n        RTCUtils.addListener(RTCEvents.DEVICE_LIST_WILL_CHANGE, this._onDeviceListWillChange);\n\n        this._initNoDataFromSourceHandlers();\n    }\n\n    /**\n     * Adds stream to conference and marks it as \"unmute\" operation.\n     *\n     * @private\n     * @returns {Promise}\n     */\n    _addStreamToConferenceAsUnmute() {\n        if (!this.conference) {\n            return Promise.resolve();\n        }\n\n        // FIXME it would be good to not included conference as part of this process. Only TraceablePeerConnections to\n        // which the track is attached should care about this action. The TPCs to which the track is not attached can\n        // sync up when track is re-attached. A problem with that is that the \"modify sources\" queue is part of the\n        // JingleSessionPC and it would be excluded from the process. One solution would be to extract class between\n        // TPC and JingleSessionPC which would contain the queue and would notify the signaling layer when local SSRCs\n        // are changed. This would help to separate XMPP from the RTC module.\n        return new Promise((resolve, reject) => {\n            this.conference._addLocalTrackToPc(this)\n                .then(resolve, error => reject(new Error(error)));\n        });\n    }\n\n    /**\n     * Fires NO_DATA_FROM_SOURCE event and logs it to analytics and callstats.\n     *\n     * @private\n     * @returns {void}\n     */\n    _fireNoDataFromSourceEvent() {\n        const value = !this.isReceivingData();\n\n        this.emit(NO_DATA_FROM_SOURCE, value);\n\n        // FIXME: Should we report all of those events\n        Statistics.sendAnalytics(createNoDataFromSourceEvent(this.getType(), value));\n        Statistics.sendLog(JSON.stringify({\n            name: NO_DATA_FROM_SOURCE,\n            log: value\n        }));\n    }\n\n    /**\n     * Sets handlers to the MediaStreamTrack object that will detect camera issues.\n     *\n     * @private\n     * @returns {void}\n     */\n    _initNoDataFromSourceHandlers() {\n        if (!this._isNoDataFromSourceEventsEnabled()) {\n            return;\n        }\n\n        this._setHandler('track_mute', () => {\n            this._trackMutedTS = window.performance.now();\n            this._fireNoDataFromSourceEvent();\n        });\n\n        this._setHandler('track_unmute', () => {\n            this._fireNoDataFromSourceEvent();\n            Statistics.sendAnalyticsAndLog(\n                TRACK_UNMUTED,\n                {\n                    'media_type': this.getType(),\n                    'track_type': 'local',\n                    value: window.performance.now() - this._trackMutedTS\n                });\n        });\n\n        if (this.isVideoTrack() && this.videoType === VideoType.CAMERA) {\n            this._setHandler('track_ended', () => {\n                if (!this.isReceivingData()) {\n                    this._fireNoDataFromSourceEvent();\n                }\n            });\n        }\n    }\n\n    /**\n     * Returns true if no data from source events are enabled for this JitsiLocalTrack and false otherwise.\n     *\n     * @private\n     * @returns {boolean} - True if no data from source events are enabled for this JitsiLocalTrack and false otherwise.\n     */\n    _isNoDataFromSourceEventsEnabled() {\n        // Disable the events for screen sharing.\n        return !this.isVideoTrack() || this.videoType !== VideoType.DESKTOP;\n    }\n\n    /**\n     * Initializes a new Promise to execute {@link #_setMuted}. May be called multiple times in a row and the\n     * invocations of {@link #_setMuted} and, consequently, {@link #mute} and/or {@link #unmute} will be resolved in a\n     * serialized fashion.\n     *\n     * @param {boolean} muted - The value to invoke <tt>_setMuted</tt> with.\n     * @private\n     * @returns {Promise}\n     */\n    _queueSetMuted(muted) {\n        const setMuted = this._setMuted.bind(this, muted);\n\n        this._prevSetMuted = this._prevSetMuted.then(setMuted, setMuted);\n\n        return this._prevSetMuted;\n    }\n\n    /**\n     * Removes stream from conference and marks it as \"mute\" operation.\n     *\n     * @param {Function} successCallback - Callback that will be called when the operation is successful.\n     * @param {Function} errorCallback - Callback that will be called when the operation fails.\n     * @private\n     * @returns {Promise}\n     */\n    _removeStreamFromConferenceAsMute(successCallback, errorCallback) {\n        if (!this.conference) {\n            successCallback();\n\n            return;\n        }\n        this.conference._removeLocalTrackFromPc(this).then(\n            successCallback,\n            error => errorCallback(new Error(error)));\n    }\n\n    /**\n     * Sends mute status for a track to conference if any.\n     *\n     * @param {boolean} mute - If track is muted.\n     * @private\n     * @returns {void}\n     */\n    _sendMuteStatus(mute) {\n        if (this.conference) {\n            this.conference._setTrackMuteStatus(this.getType(), this, mute) && this.conference.room.sendPresence();\n        }\n    }\n\n    /**\n     * Mutes / unmutes this track.\n     *\n     * @param {boolean} muted - If <tt>true</tt>, this track will be muted; otherwise, this track will be unmuted.\n     * @private\n     * @returns {Promise}\n     */\n    _setMuted(muted) {\n        if (this.isMuted() === muted\n            && !(this.videoType === VideoType.DESKTOP && FeatureFlags.isMultiStreamSupportEnabled())) {\n            return Promise.resolve();\n        }\n\n        if (this.disposed) {\n            return Promise.reject(new JitsiTrackError(TRACK_IS_DISPOSED));\n        }\n\n        let promise = Promise.resolve();\n\n        // A function that will print info about muted status transition\n        const logMuteInfo = () => logger.info(`Mute ${this}: ${muted}`);\n\n        // In the multi-stream mode, desktop tracks are muted from jitsi-meet instead of being removed from the\n        // conference. This is needed because we don't want the client to signal a source-remove to the remote peer for\n        // the desktop track when screenshare is stopped. Later when screenshare is started again, the same sender will\n        // be re-used without the need for signaling a new ssrc through source-add.\n        if (this.isAudioTrack()\n                || (this.videoType === VideoType.DESKTOP && !FeatureFlags.isMultiStreamSupportEnabled())\n                || !browser.doesVideoMuteByStreamRemove()) {\n            logMuteInfo();\n\n            // If we have a stream effect that implements its own mute functionality, prioritize it before\n            // normal mute e.g. the stream effect that implements system audio sharing has a custom\n            // mute state in which if the user mutes, system audio still has to go through.\n            if (this._streamEffect && this._streamEffect.setMuted) {\n                this._streamEffect.setMuted(muted);\n            } else if (this.track) {\n                this.track.enabled = !muted;\n            }\n        } else if (muted) {\n            promise = new Promise((resolve, reject) => {\n                logMuteInfo();\n                this._removeStreamFromConferenceAsMute(\n                    () => {\n                        if (this._streamEffect) {\n                            this._stopStreamEffect();\n                        }\n\n                        // FIXME: Maybe here we should set the SRC for the\n                        // containers to something\n                        // We don't want any events to be fired on this stream\n                        this._unregisterHandlers();\n                        this.stopStream();\n                        this._setStream(null);\n\n                        resolve();\n                    },\n                    reject);\n            });\n        } else {\n            logMuteInfo();\n\n            // This path is only for camera.\n            const streamOptions = {\n                cameraDeviceId: this.getDeviceId(),\n                devices: [ MediaType.VIDEO ],\n                effects: this._streamEffect ? [ this._streamEffect ] : [],\n                facingMode: this.getCameraFacingMode()\n            };\n\n            promise\n                = RTCUtils.obtainAudioAndVideoPermissions(Object.assign(\n                    {},\n                    streamOptions,\n                    { constraints: { video: this._constraints } }));\n\n            promise = promise.then(streamsInfo => {\n                // The track kind for presenter track is video as well.\n                const mediaType = this.getType() === MediaType.PRESENTER ? MediaType.VIDEO : this.getType();\n                const streamInfo = streamsInfo.find(info => info.track.kind === mediaType);\n\n                if (streamInfo) {\n                    this._setStream(streamInfo.stream);\n                    this.track = streamInfo.track;\n\n                    // This is not good when video type changes after\n                    // unmute, but let's not crash here\n                    if (this.videoType !== streamInfo.videoType) {\n                        logger.warn(\n                            `${this}: video type has changed after unmute!`,\n                            this.videoType, streamInfo.videoType);\n                        this.videoType = streamInfo.videoType;\n                    }\n                } else {\n                    throw new JitsiTrackError(TRACK_NO_STREAM_FOUND);\n                }\n\n                if (this._streamEffect) {\n                    this._startStreamEffect(this._streamEffect);\n                }\n\n                this.containers.map(cont => RTCUtils.attachMediaStream(cont, this.stream));\n\n                return this._addStreamToConferenceAsUnmute();\n            });\n        }\n\n        return promise\n            .then(() => {\n                this._sendMuteStatus(muted);\n\n                // Send the videoType message to the bridge.\n                this.isVideoTrack() && this.conference && this.conference._sendBridgeVideoTypeMessage(this);\n                this.emit(TRACK_MUTE_CHANGED, this);\n            });\n    }\n\n    /**\n     * Sets real device ID by comparing track information with device information. This is temporary solution until\n     * getConstraints() method will be implemented in browsers.\n     *\n     * @param {MediaDeviceInfo[]} devices - The list of devices obtained from enumerateDevices() call.\n     * @private\n     * @returns {void}\n     */\n    _setRealDeviceIdFromDeviceList(devices) {\n        const track = this.getTrack();\n        const kind = `${track.kind}input`;\n\n        // We need to match by deviceId as well, in case of multiple devices with the same label.\n        let device = devices.find(d => d.kind === kind && d.label === track.label && d.deviceId === this.deviceId);\n\n        if (!device && this._realDeviceId === 'default') { // the default device has been changed.\n            // If the default device was 'A' and the default device is changed to 'B' the label for the track will\n            // remain 'Default - A' but the label for the device in the device list will be updated to 'A'. That's\n            // why in order to match it we need to remove the 'Default - ' part.\n            const label = (track.label || '').replace('Default - ', '');\n\n            device = devices.find(d => d.kind === kind && d.label === label);\n        }\n\n        if (device) {\n            this._realDeviceId = device.deviceId;\n        } else {\n            this._realDeviceId = undefined;\n        }\n    }\n\n    /**\n     * Sets the stream property of JitsiLocalTrack object and sets all stored handlers to it.\n     *\n     * @param {MediaStream} stream - The new MediaStream.\n     * @private\n     * @returns {void}\n     */\n    _setStream(stream) {\n        super._setStream(stream);\n\n        if (stream) {\n            // Store the MSID for video mute/unmute purposes.\n            this.storedMSID = this.getMSID();\n            logger.debug(`Setting new MSID: ${this.storedMSID} on ${this}`);\n        } else {\n            logger.debug(`Setting 'null' stream on ${this}`);\n        }\n    }\n\n    /**\n     * Starts the effect process and returns the modified stream.\n     *\n     * @param {Object} effect - Represents effect instance\n     * @private\n     * @returns {void}\n     */\n    _startStreamEffect(effect) {\n        this._streamEffect = effect;\n        this._originalStream = this.stream;\n        this._setStream(this._streamEffect.startEffect(this._originalStream));\n        this.track = this.stream.getTracks()[0];\n    }\n\n    /**\n     * Stops the effect process and returns the original stream.\n     *\n     * @private\n     * @returns {void}\n     */\n    _stopStreamEffect() {\n        if (this._streamEffect) {\n            this._streamEffect.stopEffect();\n            this._setStream(this._originalStream);\n            this._originalStream = null;\n            this.track = this.stream ? this.stream.getTracks()[0] : null;\n        }\n    }\n\n    /**\n     * Switches the camera facing mode if the WebRTC implementation supports the custom MediaStreamTrack._switchCamera\n     * method. Currently, the method in question is implemented in react-native-webrtc only. When such a WebRTC\n     * implementation is executing, the method is the preferred way to switch between the front/user-facing and the\n     * back/environment-facing cameras because it will likely be (as is the case of react-native-webrtc) noticeably\n     * faster that creating a new MediaStreamTrack via a new getUserMedia call with the switched facingMode constraint\n     * value. Moreover, the approach with a new getUserMedia call may not even work: WebRTC on Android and iOS is\n     * either very slow to open the camera a second time or plainly freezes attempting to do that.\n     *\n     * @returns {void}\n     */\n    _switchCamera() {\n        if (this.isVideoTrack()\n                && this.videoType === VideoType.CAMERA\n                && typeof this.track._switchCamera === 'function') {\n            this.track._switchCamera();\n\n            this._facingMode\n                = this._facingMode === CameraFacingMode.ENVIRONMENT\n                    ? CameraFacingMode.USER\n                    : CameraFacingMode.ENVIRONMENT;\n        }\n    }\n\n    /**\n     * Stops the currently used effect (if there is one) and starts the passed effect (if there is one).\n     *\n     * @param {Object|undefined} effect - The new effect to be set.\n     * @private\n     * @returns {void}\n     */\n    _switchStreamEffect(effect) {\n        if (this._streamEffect) {\n            this._stopStreamEffect();\n            this._streamEffect = undefined;\n        }\n        if (effect) {\n            this._startStreamEffect(effect);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     *\n     * Stops sending the media track. And removes it from the HTML. NOTE: Works for local tracks only.\n     *\n     * @extends JitsiTrack#dispose\n     * @returns {Promise}\n     */\n    dispose() {\n        let promise = Promise.resolve();\n\n        // Remove the effect instead of stopping it so that the original stream is restored\n        // on both the local track and on the peerconnection.\n        if (this._streamEffect) {\n            promise = this.setEffect();\n        }\n\n        let removeTrackPromise = Promise.resolve();\n\n        if (this.conference) {\n            removeTrackPromise = this.conference.removeTrack(this);\n        }\n\n        if (this.stream) {\n            this.stopStream();\n            this.detach();\n        }\n\n        RTCUtils.removeListener(RTCEvents.DEVICE_LIST_WILL_CHANGE, this._onDeviceListWillChange);\n\n        if (this._onAudioOutputDeviceChanged) {\n            RTCUtils.removeListener(RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                this._onAudioOutputDeviceChanged);\n        }\n\n        return Promise.allSettled([ promise, removeTrackPromise ]).then(() => super.dispose());\n    }\n\n    /**\n     * Returns facing mode for video track from camera. For other cases (e.g. audio track or 'desktop' video track)\n     * returns undefined.\n     *\n     * @returns {CameraFacingMode|undefined}\n     */\n    getCameraFacingMode() {\n        if (this.isVideoTrack() && this.videoType === VideoType.CAMERA) {\n            // MediaStreamTrack#getSettings() is not implemented in many\n            // browsers, so we need feature checking here. Progress on the\n            // respective browser's implementation can be tracked at\n            // https://bugs.chromium.org/p/webrtc/issues/detail?id=2481 for\n            // Chromium and https://bugzilla.mozilla.org/show_bug.cgi?id=1213517\n            // for Firefox. Even if a browser implements getSettings() already,\n            // it might still not return anything for 'facingMode'.\n            const trackSettings = this.track.getSettings?.();\n\n            if (trackSettings && 'facingMode' in trackSettings) {\n                return trackSettings.facingMode;\n            }\n\n            if (typeof this._facingMode !== 'undefined') {\n                return this._facingMode;\n            }\n\n            // In most cases we are showing a webcam. So if we've gotten here,\n            // it should be relatively safe to assume that we are probably\n            // showing the user-facing camera.\n            return CameraFacingMode.USER;\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Returns device id associated with track.\n     *\n     * @returns {string}\n     */\n    getDeviceId() {\n        return this._realDeviceId || this.deviceId;\n    }\n\n    /**\n     * Get the duration of the track.\n     *\n     * @returns {Number} the duration of the track in seconds\n     */\n    getDuration() {\n        return (Date.now() / 1000) - (this.metadata.timestamp / 1000);\n    }\n\n    /**\n     * Returns the participant id which owns the track.\n     *\n     * @returns {string} the id of the participants. It corresponds to the\n     * Colibri endpoint id/MUC nickname in case of Jitsi-meet.\n     */\n    getParticipantId() {\n        return this.conference && this.conference.myUserId();\n    }\n\n    /**\n     * Returns the source name associated with the jitsi track.\n     *\n     * @returns {string | null} source name\n     */\n    getSourceName() {\n        return this._sourceName;\n    }\n\n    /**\n     * Returns if associated MediaStreamTrack is in the 'ended' state\n     *\n     * @returns {boolean}\n     */\n    isEnded() {\n        if (this.isVideoTrack() && this.isMuted()) {\n            // If a video track is muted the readyState will be ended, that's why we need to rely only on the\n            // _trackEnded flag.\n            return this._trackEnded;\n        }\n\n        return this.getTrack().readyState === 'ended' || this._trackEnded;\n    }\n\n    /**\n     * Returns <tt>true</tt>.\n     *\n     * @returns {boolean} <tt>true</tt>\n     */\n    isLocal() {\n        return true;\n    }\n\n    /**\n     * Returns <tt>true</tt> - if the stream is muted and <tt>false</tt> otherwise.\n     *\n     * @returns {boolean} <tt>true</tt> - if the stream is muted and <tt>false</tt> otherwise.\n     */\n    isMuted() {\n        // this.stream will be null when we mute local video on Chrome\n        if (!this.stream) {\n            return true;\n        }\n        if (this.isVideoTrack() && !this.isActive()) {\n            return true;\n        }\n\n        // If currently used stream effect has its own muted state, use that.\n        if (this._streamEffect && this._streamEffect.isMuted) {\n            return this._streamEffect.isMuted();\n        }\n\n        return !this.track || !this.track.enabled;\n    }\n\n    /**\n     * Checks whether the attached MediaStream is receiving data from source or not. If the stream property is null\n     * (because of mute or another reason) this method will return false.\n     * NOTE: This method doesn't indicate problem with the streams directly. For example in case of video mute the\n     * method will return false or if the user has disposed the track.\n     *\n     * @returns {boolean} true if the stream is receiving data and false this otherwise.\n     */\n    isReceivingData() {\n        if (this.isVideoTrack()\n            && (this.isMuted() || this._stopStreamInProgress || this.videoType === VideoType.DESKTOP)) {\n            return true;\n        }\n\n        if (!this.stream) {\n            return false;\n        }\n\n        // In older version of the spec there is no muted property and readyState can have value muted. In the latest\n        // versions readyState can have values \"live\" and \"ended\" and there is muted boolean property. If the stream is\n        // muted that means that we aren't receiving any data from the source. We want to notify the users for error if\n        // the stream is muted or ended on it's creation.\n\n        // For video blur enabled use the original video stream\n        const stream = this._effectEnabled ? this._originalStream : this.stream;\n\n        return stream.getTracks().some(track =>\n            (!('readyState' in track) || track.readyState === 'live')\n                && (!('muted' in track) || track.muted !== true));\n    }\n\n    /**\n     * Asynchronously mutes this track.\n     *\n     * @returns {Promise}\n     */\n    mute() {\n        return this._queueSetMuted(true);\n    }\n\n    /**\n     * Handles bytes sent statistics. NOTE: used only for audio tracks to detect audio issues.\n     *\n     * @param {TraceablePeerConnection} tpc - The peerconnection that is reporting the bytes sent stat.\n     * @param {number} bytesSent - The new value.\n     * @returns {void}\n     */\n    onByteSentStatsReceived(tpc, bytesSent) {\n        if (bytesSent > 0) {\n            this._hasSentData = true;\n        }\n        const iceConnectionState = tpc.getConnectionState();\n\n        if (this._testDataSent && iceConnectionState === 'connected') {\n            setTimeout(() => {\n                if (!this._hasSentData) {\n                    logger.warn(`${this} 'bytes sent' <= 0: \\\n                        ${bytesSent}`);\n\n                    Statistics.analytics.sendEvent(NO_BYTES_SENT, { 'media_type': this.getType() });\n                }\n            }, 3000);\n            this._testDataSent = false;\n        }\n    }\n\n    /**\n     * Sets the JitsiConference object associated with the track. This is temp solution.\n     *\n     * @param conference - JitsiConference object.\n     * @returns {void}\n     */\n    setConference(conference) {\n        this.conference = conference;\n\n        // We want to keep up with postponed events which should have been fired\n        // on \"attach\" call, but for local track we not always have the\n        // conference before attaching. However this may result in duplicated\n        // events if they have been triggered on \"attach\" already.\n        for (let i = 0; i < this.containers.length; i++) {\n            this._maybeFireTrackAttached(this.containers[i]);\n        }\n    }\n\n    /**\n     * Sets the effect and switches between the modified stream and original one.\n     *\n     * @param {Object} effect - Represents the effect instance to be used.\n     * @returns {Promise}\n     */\n    setEffect(effect) {\n        if (typeof this._streamEffect === 'undefined' && typeof effect === 'undefined') {\n            return Promise.resolve();\n        }\n\n        if (typeof effect !== 'undefined' && !effect.isEnabled(this)) {\n            return Promise.reject(new Error('Incompatible effect instance!'));\n        }\n\n        if (this._setEffectInProgress === true) {\n            return Promise.reject(new Error('setEffect already in progress!'));\n        }\n\n        // In case we have an audio track that is being enhanced with an effect, we still want it to be applied,\n        // even if the track is muted. Where as for video the actual track doesn't exists if it's muted.\n        if (this.isMuted() && !this.isAudioTrack()) {\n            this._streamEffect = effect;\n\n            return Promise.resolve();\n        }\n\n        const conference = this.conference;\n\n        if (!conference) {\n            this._switchStreamEffect(effect);\n            if (this.isVideoTrack()) {\n                this.containers.forEach(cont => RTCUtils.attachMediaStream(cont, this.stream));\n            }\n\n            return Promise.resolve();\n        }\n\n        this._setEffectInProgress = true;\n\n        return conference._removeLocalTrackFromPc(this)\n            .then(() => {\n                this._switchStreamEffect(effect);\n                if (this.isVideoTrack()) {\n                    this.containers.forEach(cont => RTCUtils.attachMediaStream(cont, this.stream));\n                }\n\n                return conference._addLocalTrackToPc(this);\n            })\n            .then(() => {\n                this._setEffectInProgress = false;\n            })\n            .catch(error => {\n                // Any error will be not recovarable and will trigger CONFERENCE_FAILED event. But let's try to cleanup\n                // everyhting related to the effect functionality.\n                this._setEffectInProgress = false;\n                this._switchStreamEffect();\n                logger.error('Failed to switch to the new stream!', error);\n                throw error;\n            });\n    }\n\n    /**\n     * Sets the source name to be used for signaling the jitsi track.\n     *\n     * @param {string} name The source name.\n     */\n    setSourceName(name) {\n        this._sourceName = name;\n    }\n\n    /**\n     * Stops the associated MediaStream.\n     *\n     * @returns {void}\n     */\n    stopStream() {\n        /**\n         * Indicates that we are executing {@link #stopStream} i.e.\n         * {@link RTCUtils#stopMediaStream} for the <tt>MediaStream</tt>\n         * associated with this <tt>JitsiTrack</tt> instance.\n         *\n         * @private\n         * @type {boolean}\n         */\n        this._stopStreamInProgress = true;\n\n        try {\n            RTCUtils.stopMediaStream(this.stream);\n        } finally {\n            this._stopStreamInProgress = false;\n        }\n    }\n\n    /**\n     * Creates a text representation of this local track instance.\n     *\n     * @return {string}\n     */\n    toString() {\n        return `LocalTrack[${this.rtcId},${this.getType()}]`;\n    }\n\n    /**\n     * Asynchronously unmutes this track.\n     *\n     * @returns {Promise}\n     */\n    unmute() {\n        return this._queueSetMuted(false);\n    }\n}\n","/* Copyright @ 2015 - Present, 8x8 Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport transform from 'sdp-transform';\n\n/**\n * Rewrites the source information in the way sdp-transform expects.\n * Source information is split into multiple ssrc objects each containing\n * an id, attribute and value.\n * @param {Object} media - media description to be modified.\n * @returns {void}\n */\nconst write = function(session, opts) {\n    if (typeof session !== 'undefined' && typeof session.media !== 'undefined' && Array.isArray(session.media)) {\n        session.media.forEach(mLine => {\n            if (mLine.sources && mLine.sources.length) {\n                mLine.ssrcs = [];\n                mLine.sources.forEach(source => {\n                    Object.keys(source).forEach(attribute => {\n                        if (attribute === 'id') {\n                            return;\n                        }\n                        mLine.ssrcs.push({\n                            id: source.id,\n                            attribute,\n                            value: source[attribute]\n                        });\n                    });\n                });\n                delete mLine.sources;\n            }\n\n            // join ssrcs in ssrc groups\n            if (mLine.ssrcGroups && mLine.ssrcGroups.length) {\n                mLine.ssrcGroups.forEach(ssrcGroup => {\n                    if (typeof ssrcGroup.ssrcs !== 'undefined'\n                    && Array.isArray(ssrcGroup.ssrcs)) {\n                        ssrcGroup.ssrcs = ssrcGroup.ssrcs.join(' ');\n                    }\n                });\n            }\n        });\n    }\n\n    return transform.write(session, opts);\n};\n\n/**\n * Rewrites the source information that we get from sdp-transform.\n * All the ssrc lines with different attributes that belong to the\n * same ssrc are grouped into a single soure object with multiple key value pairs.\n * @param {Object} media - media description to be modified.\n * @returns {void}\n */\nconst parse = function(sdp) {\n    const session = transform.parse(sdp);\n\n    if (typeof session !== 'undefined' && typeof session.media !== 'undefined' && Array.isArray(session.media)) {\n        session.media.forEach(mLine => {\n            // group sources attributes by ssrc\n            if (typeof mLine.ssrcs !== 'undefined' && Array.isArray(mLine.ssrcs)) {\n                mLine.sources = [];\n                mLine.ssrcs.forEach(ssrc => {\n                    const found = mLine.sources.findIndex(source => source.id === ssrc.id);\n\n                    if (found > -1) {\n                        mLine.sources[found][ssrc.attribute] = ssrc.value;\n                    } else {\n                        const src = { id: ssrc.id };\n\n                        src[ssrc.attribute] = ssrc.value;\n                        mLine.sources.push(src);\n                    }\n                });\n                delete mLine.ssrcs;\n            }\n\n            // split ssrcs in ssrc groups\n            if (typeof mLine.ssrcGroups !== 'undefined' && Array.isArray(mLine.ssrcGroups)) {\n                mLine.ssrcGroups.forEach(ssrcGroup => {\n                    if (typeof ssrcGroup.ssrcs === 'string') {\n                        ssrcGroup.ssrcs = ssrcGroup.ssrcs.split(' ');\n                    }\n                });\n            }\n        });\n    }\n\n    return session;\n};\n\nexport default {\n    write,\n    parse\n};\n","/* Copyright @ 2015 - Present, 8x8 Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport clonedeep from 'lodash.clonedeep';\n\nimport transform from './transform.js';\n\nconst PLAN_B_MIDS = [ 'audio', 'video', 'data' ];\nconst findSimGroup = ssrcGroup => ssrcGroup.find(grp => grp.semantics === 'SIM');\nconst findFidGroup = ssrcGroup => ssrcGroup.find(grp => grp.semantics === 'FID');\n\n/**\n * Add the ssrcs of the SIM group and their corresponding FID group ssrcs\n * to the m-line.\n * @param {Object} mLine - The m-line to which ssrcs have to be added.\n * @param {Object} simGroup - The SIM group whose ssrcs have to be added to\n * the m-line.\n * @param {Object} sourceGroups - inverted source-group map.\n * @param {Array<Object>} sourceList - array containing all the sources.\n */\nfunction addSimGroupSources(mLine, simGroup, sourceGroups, sourceList) {\n    if (!mLine || !simGroup) {\n        return;\n    }\n    const findSourcebyId = src => sourceList.find(source => source.id.toString() === src);\n\n    simGroup.ssrcs.forEach(src => {\n        mLine.sources.push(findSourcebyId(src));\n\n        // find the related FID group member for this ssrc.\n        const relatedFidGroup = sourceGroups[parseInt(src, 10)].find(grp => grp.semantics === 'FID');\n\n        if (relatedFidGroup) {\n            const relatedSsrc = relatedFidGroup.ssrcs.find(s => s !== src);\n\n            mLine.sources.push(findSourcebyId(relatedSsrc));\n            mLine.ssrcGroups.push(relatedFidGroup);\n        }\n    });\n\n    // Add the SIM group last.\n    mLine.ssrcGroups.push(simGroup);\n}\n\n/**\n * Add ssrcs and ssrc-groups to the m-line. When a primary ssrc, i.e., the\n * first ssrc in a SIM group is passed, all the other ssrcs from the SIM\n * group and the other ssrcs from the related FID groups are added to the same\n * m-line since they all belong to the same remote source. Since the ssrcs are\n * not guaranteed to be in the correct order, try to find if a SIM group exists,\n * if not, just add the FID group.\n * @param {Object} mLine - The m-line to which ssrcs have to be added.\n * @param {Object} ssrc - the primary ssrc.\n * @param {Object} sourceGroups - inverted source-group map.\n * @param {Array<Object>} sourceList - array containing all the sources.\n * @returns {void}\n */\nfunction addSourcesToMline(mLine, ssrc, sourceGroups, sourceList) {\n    if (!mLine || !ssrc) {\n        return;\n    }\n    mLine.sources = [];\n    mLine.ssrcGroups = [];\n\n    // If there are no associated ssrc-groups, just add the ssrc and msid.\n    if (!sourceGroups[ssrc.id]) {\n        mLine.sources.push(ssrc);\n        mLine.msid = ssrc.msid;\n\n        return;\n    }\n    const findSourcebyId = src => sourceList.find(source => source.id.toString() === src);\n\n    // Find the SIM and FID groups that this ssrc belongs to.\n    const simGroup = findSimGroup(sourceGroups[ssrc.id]);\n    const fidGroup = findFidGroup(sourceGroups[ssrc.id]);\n\n    // Add the ssrcs for the SIM group and their corresponding FID groups.\n    if (simGroup) {\n        addSimGroupSources(mLine, simGroup, sourceGroups, sourceList);\n    } else if (fidGroup) {\n        // check if the other ssrc from this FID group is part of a SIM group\n        const otherSsrc = fidGroup.ssrcs.find(s => s !== ssrc);\n        const simGroup2 = findSimGroup(sourceGroups[otherSsrc]);\n\n        if (simGroup2) {\n            addSimGroupSources(mLine, simGroup2, sourceGroups, sourceList);\n        } else {\n            // Add the FID group ssrcs.\n            fidGroup.ssrcs.forEach(src => {\n                mLine.sources.push(findSourcebyId(src));\n            });\n            mLine.ssrcGroups.push(fidGroup);\n        }\n    }\n\n    // Set the msid for the media description using the msid attribute of the ssrcs.\n    mLine.msid = mLine.sources[0].msid;\n}\n\n/**\n * Checks if there is a mline for the given ssrc or its related primary ssrc.\n * We always implode the SIM group to the first ssrc in the SIM group before sRD,\n * so we also check if mline for that ssrc exists.\n * For example:\n * If the following ssrcs are in a SIM group,\n * <ssrc-group xmlns=\\\"urn:xmpp:jingle:apps:rtp:ssma:0\\\" semantics=\\\"SIM\\\">\n *        <source ssrc=\\\"1806330949\\\"/>\n *        <source ssrc=\\\"4173145196\\\"/>\n *        <source ssrc=\\\"2002632207\\\"/>\n * </ssrc-group>\n * This method returns true for any one of the 3 ssrcs if there is a mline for 1806330949.\n * @param {Object} ssrc - ssrc to check.\n * @param {Object} sourceGroups - inverted source-group map.\n * @param {Array<Object>} mlines - mlines in the description\n\n * @returns {Boolean} - Returns true if mline for the given ssrc or the related primary ssrc\n * exists, returns false otherwise.\n */\nfunction checkIfMlineForSsrcExists(ssrc, sourceGroups, mlines) {\n    const findMatchingMline = mline => {\n        if (mline.sources) {\n            return mline.sources.some(source => source.id === ssrc.id);\n        }\n\n        return false;\n    };\n\n    if (!mlines.find(findMatchingMline)) {\n        // check if this ssrc is member of a SIM group. If so, check if there\n        // is a matching m-line for the primary ssrc of the SIM group.\n        if (!sourceGroups[ssrc.id]) {\n            return false;\n        }\n        const simGroup = findSimGroup(sourceGroups[ssrc.id]);\n        const fidGroup = findFidGroup(sourceGroups[ssrc.id]);\n\n        if (simGroup) {\n            return mlines.some(mline => mline.sources\n                && mline.sources.some(src => src.id.toString() === simGroup.ssrcs[0]));\n        } else if (fidGroup && ssrc.id.toString() !== fidGroup.ssrcs[0]) {\n            const otherSsrc = { id: fidGroup.ssrcs[0] };\n\n            return checkIfMlineForSsrcExists(otherSsrc, sourceGroups, mlines);\n\n        }\n\n        return false;\n    }\n\n    return true;\n}\n\n/**\n * Create an inverted sourceGroup map to put all the grouped ssrcs\n * in the same m-line.\n * @param {Array<Object>} sourceGroups\n * @returns {Object} - An inverted sourceGroup map.\n */\nfunction createSourceGroupMap(sourceGroups) {\n    const ssrc2group = {};\n\n    if (!sourceGroups || !Array.isArray(sourceGroups)) {\n        return ssrc2group;\n    }\n    sourceGroups.forEach(group => {\n        if (group.ssrcs && Array.isArray(group.ssrcs)) {\n            group.ssrcs.forEach(ssrc => {\n                if (typeof ssrc2group[ssrc] === 'undefined') {\n                    ssrc2group[ssrc] = [];\n                }\n                ssrc2group[ssrc].push(group);\n            });\n        }\n    });\n\n    return ssrc2group;\n}\n\n/**\n * Check if a new SDP requests an ICE restart.\n * @param {Object} - the parsed new SDP\n * @param {Object} - the parsed previous SDP\n * @returns {Boolean} - Returns true if an ICE restart is requested otherwise false.\n */\nfunction checkForIceRestart(newDesc, oldDesc) {\n    if (!newDesc || !oldDesc || newDesc.media.length === 0 || oldDesc.media.length === 0) {\n        return false;\n    }\n\n    const newMLine = newDesc.media[0];\n    const oldMLine = oldDesc.media[0];\n\n    return newMLine.iceUfrag !== oldMLine.iceUfrag || newMLine.icePwd !== oldMLine.icePwd;\n}\n\n/**\n * Interop provides an API for tranforming a Plan B SDP to a Unified Plan SDP and\n * vice versa.\n */\nexport class Interop {\n    /**\n     * This method transforms a Unified Plan SDP to an equivalent Plan B SDP.\n     * @param {RTCSessionDescription} description - The description in Unified plan format.\n     * @returns RTCSessionDescription - The transformed session description.\n     */\n    toPlanB(description) {\n        if (!description || typeof description.sdp !== 'string') {\n            console.warn('An empty description was passed as an argument.');\n\n            return description;\n        }\n\n        // Objectify the SDP for easier manipulation.\n        const session = transform.parse(description.sdp);\n\n        // If the SDP contains no media, there's nothing to transform.\n        if (!session.media || !session.media.length) {\n            console.warn('The description has no media.');\n\n            return description;\n        }\n\n        // Make sure this is a unified plan sdp\n        if (session.media.every(m => PLAN_B_MIDS.indexOf(m.mid) !== -1)) {\n            console.warn('The description does not look like unified plan sdp');\n\n            return description;\n        }\n\n        const media = {};\n        const sessionMedia = session.media;\n\n        session.media = [];\n        sessionMedia.forEach(mLine => {\n            const type = mLine.type;\n\n            if (type === 'application') {\n                mLine.mid = 'data';\n                media[mLine.mid] = mLine;\n\n                return;\n            }\n            if (typeof media[type] === 'undefined') {\n                const bLine = clonedeep(mLine);\n\n                // Copy the msid attribute to all the ssrcs if they belong to the same source group\n                if (bLine.sources && Array.isArray(bLine.sources)) {\n                    bLine.sources.forEach(source => {\n                        mLine.msid ? source.msid = mLine.msid : delete source.msid;\n                    });\n                }\n\n                // Do not signal the FID groups if there is no msid attribute present\n                // on the sources as sesison-accept with this source info will fail strophe\n                // validation and the session will not be established. This behavior is seen\n                // on Firefox (with RTX enabled) when no video source is added at the join time.\n                // FF generates two recvonly ssrcs with no msid and a corresponding FID group in\n                // this case.\n                if (!bLine.ssrcGroups || !mLine.msid) {\n                    bLine.ssrcGroups = [];\n                }\n                delete bLine.msid;\n                bLine.mid = type;\n                media[type] = bLine;\n            } else if (mLine.msid) {\n                // Add sources and source-groups to the existing m-line of the same media type.\n                const bLine = clonedeep(mLine);\n\n                if (bLine.sources && Array.isArray(bLine.sources)) {\n                    // Copy the msid attribute to each ssrc.\n                    bLine.sources.forEach(ssrc => {\n                        ssrc.msid = mLine.msid;\n                    });\n                    media[type].sources = (media[type].sources || []).concat(bLine.sources);\n                }\n                if (typeof bLine.ssrcGroups !== 'undefined' && Array.isArray(bLine.ssrcGroups)) {\n                    media[type].ssrcGroups = (media[type].ssrcGroups || []).concat(bLine.ssrcGroups);\n                }\n            }\n        });\n        session.media = Object.values(media);\n\n        // Bundle the media only if it is active.\n        const bundle = [];\n\n        Object.values(media).forEach(mline => {\n            if (mline.direction !== 'inactive') {\n                bundle.push(mline.mid);\n            }\n        });\n\n        // We regenerate the BUNDLE group with the new mids.\n        session.groups.forEach(group => {\n            if (group.type === 'BUNDLE') {\n                group.mids = bundle.join(' ');\n            }\n        });\n\n        // msid semantic\n        session.msidSemantic = {\n            semantic: 'WMS',\n            token: '*'\n        };\n        const resStr = transform.write(session);\n\n        return new RTCSessionDescription({\n            type: description.type,\n            sdp: resStr\n        });\n    }\n\n    /**\n     * This method transforms a Plan B SDP to an equivalent Unified Plan SDP.\n     * @param {RTCSessionDescription} description - The description in plan-b format.\n     * @param {RTCSessionDescription} current - The current description set on\n     * the peerconnection in Unified-plan format, i.e., the readonly attribute\n     * remoteDescription on the RTCPeerConnection object.\n     * @returns RTCSessionDescription - The transformed session description.\n     */\n    toUnifiedPlan(description, current = null) {\n        if (!description || typeof description.sdp !== 'string') {\n            console.warn('An empty description was passed as an argument.');\n\n            return description;\n        }\n\n        // Objectify the SDP for easier manipulation.\n        const session = transform.parse(description.sdp);\n\n        // If the SDP contains no media, there's nothing to transform.\n        if (!session.media || !session.media.length) {\n            console.warn('The description has no media.');\n\n            return description;\n        }\n\n        // Make sure this is a plan-b sdp.\n        if (session.media.length > 3 || session.media.every(m => PLAN_B_MIDS.indexOf(m.mid) === -1)) {\n            console.warn('The description does not look like plan-b');\n\n            return description;\n        }\n        const currentDesc = current ? transform.parse(current.sdp) : null;\n        const iceRestart = checkForIceRestart(session, currentDesc);\n        const newIceUfrag = session.media[0].iceUfrag;\n        const newIcePwd = session.media[0].icePwd;\n        const newFingerprint = session.media[0].fingerprint;\n        const media = {};\n\n        session.media.forEach(mLine => {\n            const type = mLine.type;\n\n            if (type === 'application') {\n                if (!currentDesc || !currentDesc.media) {\n                    const newMline = clonedeep(mLine);\n\n                    newMline.mid = Object.keys(media).length.toString();\n                    media[mLine.mid] = newMline;\n\n                    return;\n                }\n                const mLineForData = currentDesc.media.findIndex(m => m.type === type);\n\n                if (mLineForData) {\n                    currentDesc.media[mLineForData] = mLine;\n                    currentDesc.media[mLineForData].mid = mLineForData;\n                }\n\n                return;\n            }\n\n            // Create an inverted sourceGroup map here to put all the grouped SSRCs in the same m-line.\n            const ssrc2group = createSourceGroupMap(mLine.ssrcGroups);\n\n            // If there are no sources advertised for a media type, add the description if this is the first\n            // remote offer, i.e., no current description was passed. Chrome in Unified plan does not produce\n            // recvonly ssrcs unlike Firefox and Safari.\n            if (!mLine.sources) {\n                if (!currentDesc) {\n                    const newMline = clonedeep(mLine);\n\n                    newMline.mid = Object.keys(media).length.toString();\n                    media[mLine.mid] = newMline;\n                }\n\n                return;\n            }\n            mLine.sources.forEach((ssrc, idx) => {\n                // Do not add the receive-only ssrcs that Jicofo sends in the source-add.\n                // These ssrcs do not have the \"msid\" attribute set.\n                if (!ssrc.msid) {\n                    return;\n                }\n\n                // If there is no description set on the peerconnection, create new m-lines.\n                if (!currentDesc || !currentDesc.media) {\n                    if (checkIfMlineForSsrcExists(ssrc, ssrc2group, Object.values(media))) {\n                        return;\n                    }\n                    const newMline = clonedeep(mLine);\n\n                    newMline.mid = Object.keys(media).length.toString();\n                    newMline.direction = idx\n                        ? 'sendonly'\n                        : mLine.direction === 'sendonly' ? 'sendonly' : 'sendrecv';\n                    newMline.bundleOnly = undefined;\n                    addSourcesToMline(newMline, ssrc, ssrc2group, mLine.sources);\n                    media[newMline.mid] = newMline;\n\n                    return;\n                }\n\n                // Create and append the m-lines to the existing description.\n                if (checkIfMlineForSsrcExists(ssrc, ssrc2group, currentDesc.media)) {\n                    return;\n                }\n                const newMline = clonedeep(mLine);\n\n                newMline.mid = currentDesc.media.length.toString();\n                newMline.direction = 'sendonly';\n                addSourcesToMline(newMline, ssrc, ssrc2group, mLine.sources);\n                currentDesc.media.push(newMline);\n            });\n        });\n        session.media = currentDesc ? currentDesc.media : Object.values(media);\n        const mids = [];\n\n        session.media.forEach(mLine => {\n            mids.push(mLine.mid);\n            if (iceRestart) {\n                mLine.iceUfrag = newIceUfrag;\n                mLine.icePwd = newIcePwd;\n                mLine.fingerprint = newFingerprint;\n            }\n        });\n\n        // We regenerate the BUNDLE group (since we regenerated the mids)\n        session.groups.forEach(group => {\n            if (group.type === 'BUNDLE') {\n                group.mids = mids.join(' ');\n            }\n        });\n\n        // msid semantic\n        session.msidSemantic = {\n            semantic: 'WMS',\n            token: '*'\n        };\n\n        // Increment the session version every time.\n        session.origin.sessionVersion++;\n        const resultSdp = transform.write(session);\n\n        return new RTCSessionDescription({\n            type: description.type,\n            sdp: resultSdp\n        });\n    }\n}\n","export enum SignalingEvents {\n    /**\n     * Event triggered when participant's muted status changes.\n     *\n     * @param {string} endpointId the track owner's identifier (MUC nickname)\n     * @param {MediaType} mediaType \"audio\" or \"video\"\n     * @param {boolean} isMuted the new muted state\n     */\n    PEER_MUTED_CHANGED = 'signaling.peerMuted',\n\n    /**\n     * Event triggered when participant's video type changes.\n     *\n     * @param {string} endpointId the video owner's ID (MUC nickname)\n     * @param {VideoType} videoType the new value\n     */\n    PEER_VIDEO_TYPE_CHANGED = 'signaling.peerVideoType',\n\n    /**\n     * Event triggered when source's muted status changes.\n     *\n     * @param {string} sourceName - The name of the source.\n     * @param {boolean} isMuted - The new muted state.\n     */\n    SOURCE_MUTED_CHANGED = 'signaling.sourceMuted',\n\n    /**\n     * Event triggered when source's video type changes.\n     *\n     * @param {string} source - The name of the source.\n     * @param {VideoType} videoType - The new value.\n     */\n    SOURCE_VIDEO_TYPE_CHANGED = 'signaling.sourceVideoType'\n}\n\n// exported for backward compatibility\nexport const PEER_MUTED_CHANGED = SignalingEvents.PEER_MUTED_CHANGED;\nexport const PEER_VIDEO_TYPE_CHANGED = SignalingEvents.PEER_VIDEO_TYPE_CHANGED;\nexport const SOURCE_MUTED_CHANGED = SignalingEvents.SOURCE_MUTED_CHANGED;\nexport const SOURCE_VIDEO_TYPE_CHANGED = SignalingEvents.SOURCE_VIDEO_TYPE_CHANGED;\n","\nimport Listenable from '../../modules/util/Listenable';\nimport { MediaType } from '../../service/RTC/MediaType';\n\n/**\n * @typedef {string} EndpointId\n */\n/**\n * @typedef {string} SourceName\n */\n/**\n * @typedef {Object} SourceInfo\n *\n * @property {SourceName} sourceName - Name of the media source.\n * @property {boolean} [muted=false] - Tells if the source is muted (paused?).\n * @property {string} [videoType] - Type of the video for video type.\n */\n\n/**\n * Generates a source name.\n *\n * @param {EndpointId} endpointId - Jitsi Endpoint Id.\n * @param {MediaType} mediaType - the media type string.\n * @param {number} trackIdx - Track index (or sender idx? - to be figured out) starting from 0.\n * @returns {SourceName} eg. endpointA-v0\n */\nexport function getSourceNameForJitsiTrack(endpointId, mediaType, trackIdx) {\n    const firstLetterOfMediaType = mediaType.substring(0, 1);\n\n    return `${endpointId}-${firstLetterOfMediaType}${trackIdx}`;\n}\n\n/**\n * Extracts MediaType from give source name (must be in the correct format as generated by\n * {@link getSourceNameForJitsiTrack}).\n *\n * @param {SourceName} sourceName - the source name.\n * @returns {MediaType}\n */\nexport function getMediaTypeFromSourceName(sourceName) {\n    const firstLetterOfMediaTypeIdx = sourceName.indexOf('-') + 1;\n\n    if (firstLetterOfMediaTypeIdx <= 0) {\n        throw new Error(`Invalid source name: ${sourceName}`);\n    }\n\n    const firstLetterOfMediaType = sourceName.substr(firstLetterOfMediaTypeIdx, 1);\n\n    for (const type of Object.values(MediaType)) {\n        if (type.substr(0, 1) === firstLetterOfMediaType) {\n            return type;\n        }\n    }\n\n    throw new Error(`Invalid source name: ${sourceName}`);\n}\n\n/**\n * An object that carries the info about specific media type advertised by\n * participant in the signaling channel.\n * @typedef {Object} PeerMediaInfo\n * @property {boolean} muted indicates if the media is currently muted\n * @property {VideoType|undefined} videoType the type of the video if applicable\n */\n\n/**\n * Interface used to expose the information carried over the signaling channel\n * which is not available to the RTC module in the media SDP.\n *\n * @interface SignalingLayer\n */\nexport default class SignalingLayer extends Listenable {\n\n    /**\n     * Obtains the endpoint ID for given SSRC.\n     * @param {number} ssrc the SSRC number.\n     * @return {string|null} the endpoint ID for given media SSRC.\n     */\n    getSSRCOwner(ssrc) { // eslint-disable-line no-unused-vars\n        throw new Error('not implemented');\n    }\n\n    /**\n     * Obtains the info about given media advertised in the MUC presence of\n     * the participant identified by the given MUC JID.\n     * @param {string} owner the MUC jid of the participant for whom\n     * {@link PeerMediaInfo} will be obtained.\n     * @param {MediaType} mediaType the type of the media for which presence\n     * @param {SourceName} sourceName - The name of the source for which the info is to be obtained.\n     * info will be obtained.\n     * @return {PeerMediaInfo|null} presenceInfo an object with media presence\n     * info or <tt>null</tt> either if there is no presence available for given\n     * JID or if the media type given is invalid.\n     *\n     * @deprecated This method is to be replaced with getPeerSourceInfo.\n     */\n    getPeerMediaInfo(owner, mediaType, sourceName) { // eslint-disable-line no-unused-vars\n        throw new Error('not implemented');\n    }\n\n    /**\n     * Obtains the info about a source for given name and endpoint ID.\n     * @param {EndpointId} owner - The owner's endpoint ID.\n     * @param {SourceName} sourceName - The name of the source for which the info is to be obtained.\n     * @returns {SourceInfo | undefined}\n     */\n    getPeerSourceInfo(owner, sourceName) { // eslint-disable-line no-unused-vars\n        throw new Error('not implemented');\n    }\n\n    /**\n     * Obtains the source name for given SSRC.\n     * @param {number} ssrc the track's SSRC identifier.\n     * @returns {SourceName | undefined} the track's source name.\n     */\n    getTrackSourceName(ssrc) { // eslint-disable-line no-unused-vars\n        throw new Error('not implemented');\n    }\n}\n","import * as transform from 'sdp-transform';\n\n/**\n * Parses the primary SSRC of given SSRC group.\n * @param {object} group the SSRC group object as defined by the 'sdp-transform'\n * @return {Number} the primary SSRC number\n */\nexport function parsePrimarySSRC(group) {\n    return parseInt(group.ssrcs.split(' ')[0], 10);\n}\n\n/**\n * Parses the secondary SSRC of given SSRC group.\n * @param {object} group the SSRC group object as defined by the 'sdp-transform'\n * @return {Number} the secondary SSRC number\n */\nexport function parseSecondarySSRC(group) {\n    return parseInt(group.ssrcs.split(' ')[1], 10);\n}\n\n/**\n * Tells how many distinct SSRCs are contained in given media line.\n * @param {Object} mLine the media line object as defined by 'sdp-transform' lib\n * @return {number}\n */\nfunction _getSSRCCount(mLine) {\n    if (!mLine.ssrcs) {\n        return 0;\n    }\n\n    return mLine.ssrcs\n        .map(ssrcInfo => ssrcInfo.id)\n        .filter((ssrc, index, array) => array.indexOf(ssrc) === index)\n        .length;\n}\n\n/**\n * A wrapper around 'sdp-transform' media description object which provides\n * utility methods for common SDP/SSRC related operations.\n */\nclass MLineWrap {\n\n    /**\n     * Creates new <tt>MLineWrap</t>>\n     * @param {Object} mLine the media line object as defined by 'sdp-transform'\n     * lib.\n     */\n    constructor(mLine) {\n        if (!mLine) {\n            throw new Error('mLine is undefined');\n        }\n\n        this.mLine = mLine;\n    }\n\n    /**\n     * Getter for the mLine's \"ssrcs\" array. If the array was undefined an empty\n     * one will be preassigned.\n     *\n     * @return {Array<Object>} an array of 'sdp-transform' SSRC attributes\n     * objects.\n     */\n    get ssrcs() {\n        if (!this.mLine.ssrcs) {\n            this.mLine.ssrcs = [];\n        }\n\n        return this.mLine.ssrcs;\n    }\n\n    /**\n     * Setter for the mLine's \"ssrcs\" array.\n     *\n     * @param {Array<Object>} ssrcs an array of 'sdp-transform' SSRC attributes\n     * objects.\n     */\n    set ssrcs(ssrcs) {\n        this.mLine.ssrcs = ssrcs;\n    }\n\n    /**\n     * Returns the direction of the underlying media description.\n     * @return {string} the media direction name as defined in the SDP.\n     */\n    get direction() {\n        return this.mLine.direction;\n    }\n\n    /**\n     * Modifies the direction of the underlying media description.\n     * @param {string} direction the new direction to be set\n     */\n    set direction(direction) {\n        this.mLine.direction = direction;\n    }\n\n    /**\n     * Exposes the SSRC group array of the underlying media description object.\n     * @return {Array.<Object>}\n     */\n    get ssrcGroups() {\n        if (!this.mLine.ssrcGroups) {\n            this.mLine.ssrcGroups = [];\n        }\n\n        return this.mLine.ssrcGroups;\n    }\n\n    /**\n     * Modifies the SSRC groups array of the underlying media description\n     * object.\n     * @param {Array.<Object>} ssrcGroups\n     */\n    set ssrcGroups(ssrcGroups) {\n        this.mLine.ssrcGroups = ssrcGroups;\n    }\n\n    /**\n     * Obtains value from SSRC attribute.\n     * @param {number} ssrcNumber the SSRC number for which attribute is to be\n     * found\n     * @param {string} attrName the name of the SSRC attribute to be found.\n     * @return {string|undefined} the value of SSRC attribute or\n     * <tt>undefined</tt> if no such attribute exists.\n     */\n    getSSRCAttrValue(ssrcNumber, attrName) {\n        const attribute = this.ssrcs.find(\n            ssrcObj => ssrcObj.id === ssrcNumber\n            && ssrcObj.attribute === attrName);\n\n\n        return attribute && attribute.value;\n    }\n\n    /**\n     * Removes all attributes for given SSRC number.\n     * @param {number} ssrcNum the SSRC number for which all attributes will be\n     * removed.\n     */\n    removeSSRC(ssrcNum) {\n        if (!this.mLine.ssrcs || !this.mLine.ssrcs.length) {\n            return;\n        }\n\n        this.mLine.ssrcs\n            = this.mLine.ssrcs.filter(ssrcObj => ssrcObj.id !== ssrcNum);\n    }\n\n    /**\n     * Adds SSRC attribute\n     * @param {object} ssrcObj the SSRC attribute object as defined in\n     * the 'sdp-transform' lib.\n     */\n    addSSRCAttribute(ssrcObj) {\n        this.ssrcs.push(ssrcObj);\n    }\n\n    /**\n     * Finds a SSRC group matching both semantics and SSRCs in order.\n     * @param {string} semantics the name of the semantics\n     * @param {string} [ssrcs] group SSRCs as a string (like it's defined in\n     * SSRC group object of the 'sdp-transform' lib) e.g. \"1232546 342344 25434\"\n     * @return {object|undefined} the SSRC group object or <tt>undefined</tt> if\n     * not found.\n     */\n    findGroup(semantics, ssrcs) {\n        return this.ssrcGroups.find(\n            group =>\n                group.semantics === semantics\n                    && (!ssrcs || ssrcs === group.ssrcs));\n    }\n\n    /**\n     * Finds all groups matching given semantic's name.\n     * @param {string} semantics the name of the semantics\n     * @return {Array.<object>} an array of SSRC group objects as defined by\n     * the 'sdp-transform' lib.\n     */\n    findGroups(semantics) {\n        return this.ssrcGroups.filter(\n            group => group.semantics === semantics);\n    }\n\n    /**\n     * Finds all groups matching given semantic's name and group's primary SSRC.\n     * @param {string} semantics the name of the semantics\n     * @param {number} primarySSRC the primary SSRC number to be matched\n     * @return {Object} SSRC group object as defined by the 'sdp-transform' lib.\n     */\n    findGroupByPrimarySSRC(semantics, primarySSRC) {\n        return this.ssrcGroups.find(\n            group => group.semantics === semantics\n                && parsePrimarySSRC(group) === primarySSRC);\n    }\n\n    /**\n     * @param {string|null} msid the media stream id or <tt>null</tt> to match\n     * the first SSRC object with any 'msid' value.\n     * @return {Object|undefined} the SSRC object as defined by 'sdp-transform'\n     * lib.\n     */\n    findSSRCByMSID(msid) {\n        return this.ssrcs.find(\n            ssrcObj => ssrcObj.attribute === 'msid'\n                && (msid === null || ssrcObj.value === msid));\n    }\n\n    /**\n     * Gets the SSRC count for the underlying media description.\n     * @return {number}\n     */\n    getSSRCCount() {\n        return _getSSRCCount(this.mLine);\n    }\n\n    /**\n     * Checks whether the underlying media description contains any SSRC groups.\n     * @return {boolean} <tt>true</tt> if there are any SSRC groups or\n     * <tt>false</tt> otherwise.\n     */\n    containsAnySSRCGroups() {\n        return this.mLine.ssrcGroups !== undefined;\n    }\n\n    /**\n     * Finds the primary video SSRC.\n     * @returns {number|undefined} the primary video ssrc\n     * @throws Error if the underlying media description is not a video\n     */\n    getPrimaryVideoSsrc() {\n        const mediaType = this.mLine.type;\n\n        if (mediaType !== 'video') {\n            throw new Error(\n                `getPrimarySsrc doesn't work with '${mediaType}'`);\n        }\n\n        const numSsrcs = _getSSRCCount(this.mLine);\n\n        if (numSsrcs === 1) {\n            // Not using \"ssrcs\" getter on purpose here\n            return this.mLine.ssrcs[0].id;\n        }\n\n        // Look for a SIM, FID, or FEC-FR group\n        if (this.mLine.ssrcGroups) {\n            const simGroup = this.findGroup('SIM');\n\n            if (simGroup) {\n                return parsePrimarySSRC(simGroup);\n            }\n            const fidGroup = this.findGroup('FID');\n\n            if (fidGroup) {\n                return parsePrimarySSRC(fidGroup);\n            }\n            const fecGroup = this.findGroup('FEC-FR');\n\n            if (fecGroup) {\n                return parsePrimarySSRC(fecGroup);\n            }\n        }\n\n    }\n\n    /**\n     * Obtains RTX SSRC from the underlying video description (the\n     * secondary SSRC of the first \"FID\" group found)\n     * @param {number} primarySsrc the video ssrc for which to find the\n     * corresponding rtx ssrc\n     * @returns {number|undefined} the rtx ssrc (or undefined if there isn't\n     * one)\n     */\n    getRtxSSRC(primarySsrc) {\n        const fidGroup = this.findGroupByPrimarySSRC('FID', primarySsrc);\n\n\n        return fidGroup && parseSecondarySSRC(fidGroup);\n    }\n\n    /**\n     * Obtains all SSRCs contained in the underlying media description.\n     * @return {Array.<number>} an array with all SSRC as numbers.\n     */\n    getSSRCs() {\n        return this.ssrcs\n            .map(ssrcInfo => ssrcInfo.id)\n            .filter((ssrc, index, array) => array.indexOf(ssrc) === index);\n    }\n\n    /**\n     * Obtains primary video SSRCs.\n     * @return {Array.<number>} an array of all primary video SSRCs as numbers.\n     * @throws Error if the wrapped media description is not a video.\n     */\n    getPrimaryVideoSSRCs() {\n        const mediaType = this.mLine.type;\n\n        if (mediaType !== 'video') {\n            throw new Error(\n                `getPrimaryVideoSSRCs doesn't work with ${mediaType}`);\n        }\n\n        const videoSSRCs = this.getSSRCs();\n\n        for (const ssrcGroupInfo of this.ssrcGroups) {\n            // Right now, FID and FEC-FR groups are the only ones we parse to\n            // disqualify streams.  If/when others arise we'll\n            // need to add support for them here\n            if (ssrcGroupInfo.semantics === 'FID'\n                    || ssrcGroupInfo.semantics === 'FEC-FR') {\n                // secondary streams should be filtered out\n                const secondarySsrc = parseSecondarySSRC(ssrcGroupInfo);\n\n                videoSSRCs.splice(\n                    videoSSRCs.indexOf(secondarySsrc), 1);\n            }\n        }\n\n        return videoSSRCs;\n    }\n\n    /**\n     * Dumps all SSRC groups of this media description to JSON.\n     */\n    dumpSSRCGroups() {\n        return JSON.stringify(this.mLine.ssrcGroups);\n    }\n\n    /**\n     * Removes all SSRC groups which contain given SSRC number at any position.\n     * @param {number} ssrc the SSRC for which all matching groups are to be\n     * removed.\n     */\n    removeGroupsWithSSRC(ssrc) {\n        if (!this.mLine.ssrcGroups) {\n            return;\n        }\n\n        this.mLine.ssrcGroups = this.mLine.ssrcGroups\n            .filter(groupInfo => groupInfo.ssrcs.indexOf(`${ssrc}`) === -1);\n    }\n\n    /**\n     * Removes groups that match given semantics.\n     * @param {string} semantics e.g. \"SIM\" or \"FID\"\n     */\n    removeGroupsBySemantics(semantics) {\n        if (!this.mLine.ssrcGroups) {\n            return;\n        }\n\n        this.mLine.ssrcGroups\n            = this.mLine.ssrcGroups\n                .filter(groupInfo => groupInfo.semantics !== semantics);\n    }\n\n    /**\n     * Replaces SSRC (does not affect SSRC groups, but only attributes).\n     * @param {number} oldSSRC the old SSRC number\n     * @param {number} newSSRC the new SSRC number\n     */\n    replaceSSRC(oldSSRC, newSSRC) {\n        if (this.mLine.ssrcs) {\n            this.mLine.ssrcs.forEach(ssrcInfo => {\n                if (ssrcInfo.id === oldSSRC) {\n                    ssrcInfo.id = newSSRC;\n                }\n            });\n        }\n    }\n\n    /**\n     * Adds given SSRC group to this media description.\n     * @param {object} group the SSRC group object as defined by\n     * the 'sdp-transform' lib.\n     */\n    addSSRCGroup(group) {\n        this.ssrcGroups.push(group);\n    }\n}\n\n/**\n * Utility class for SDP manipulation using the 'sdp-transform' library.\n *\n * Typical use usage scenario:\n *\n * const transformer = new SdpTransformWrap(rawSdp);\n * const videoMLine = transformer.selectMedia('video);\n * if (videoMLine) {\n *     videoMLiner.addSSRCAttribute({\n *         id: 2342343,\n *         attribute: \"cname\",\n *         value: \"someCname\"\n *     });\n *     rawSdp = transformer.toRawSdp();\n * }\n */\nexport class SdpTransformWrap {\n\n    /**\n     * Creates new instance and parses the raw SDP into objects using\n     * 'sdp-transform' lib.\n     * @param {string} rawSDP the SDP in raw text format.\n     */\n    constructor(rawSDP) {\n        this.parsedSDP = transform.parse(rawSDP);\n    }\n\n    /**\n     * Selects all the m-lines from the SDP for a given media type.\n     *\n     * @param {string} mediaType the name of the media e.g. 'audio', 'video', 'data'.\n     * @return {MLineWrap|null} return {@link MLineWrap} instance for the media line or <tt>null</tt> if not found. The\n     * object returned references the underlying SDP state held by this <tt>SdpTransformWrap</tt> instance (it's not a\n     * copy).\n     */\n    selectMedia(mediaType) {\n        const selectedMLines = this.parsedSDP.media\n            .filter(mLine => mLine.type === mediaType)\n            .map(mLine => new MLineWrap(mLine));\n\n        return selectedMLines ?? null;\n    }\n\n    /**\n     * Converts the currently stored SDP state in this instance to raw text SDP\n     * format.\n     * @return {string}\n     */\n    toRawSDP() {\n        return transform.write(this.parsedSDP);\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport { MediaDirection } from '../../service/RTC/MediaDirection';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport { getSourceNameForJitsiTrack } from '../../service/RTC/SignalingLayer';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport browser from '../browser';\nimport FeatureFlags from '../flags/FeatureFlags';\n\nimport { SdpTransformWrap } from './SdpTransformUtil';\n\nconst logger = getLogger(__filename);\n\n/**\n * Fakes local SDP exposed to {@link JingleSessionPC} through the local\n * description getter. Modifies the SDP, so that it will contain muted local\n * video tracks description, even though their underlying {MediaStreamTrack}s\n * are no longer in the WebRTC peerconnection. That prevents from SSRC updates\n * being sent to Jicofo/remote peer and prevents sRD/sLD cycle on the remote\n * side.\n */\nexport default class LocalSdpMunger {\n\n    /**\n     * Creates new <tt>LocalSdpMunger</tt> instance.\n     *\n     * @param {TraceablePeerConnection} tpc\n     * @param {string} localEndpointId - The endpoint id of the local user.\n     */\n    constructor(tpc, localEndpointId) {\n        this.tpc = tpc;\n        this.localEndpointId = localEndpointId;\n        this.audioSourcesToMsidMap = new Map();\n        this.videoSourcesToMsidMap = new Map();\n    }\n\n    /**\n     * Makes sure that muted local video tracks associated with the parent\n     * {@link TraceablePeerConnection} are described in the local SDP. It's done\n     * in order to prevent from sending 'source-remove'/'source-add' Jingle\n     * notifications when local video track is muted (<tt>MediaStream</tt> is\n     * removed from the peerconnection).\n     *\n     * NOTE 1 video track is assumed\n     *\n     * @param {SdpTransformWrap} transformer the transformer instance which will\n     * be used to process the SDP.\n     * @return {boolean} <tt>true</tt> if there were any modifications to\n     * the SDP wrapped by <tt>transformer</tt>.\n     * @private\n     */\n    _addMutedLocalVideoTracksToSDP(transformer) {\n        // Go over each video tracks and check if the SDP has to be changed\n        const localVideos = this.tpc.getLocalTracks(MediaType.VIDEO);\n\n        if (!localVideos.length) {\n            return false;\n        } else if (localVideos.length !== 1) {\n            logger.error(\n                `${this.tpc} there is more than 1 video track ! `\n                    + 'Strange things may happen !', localVideos);\n        }\n\n        const videoMLine = transformer.selectMedia(MediaType.VIDEO)?.[0];\n\n        if (!videoMLine) {\n            logger.debug(\n                `${this.tpc} unable to hack local video track SDP`\n                    + '- no \"video\" media');\n\n            return false;\n        }\n\n        let modified = false;\n\n        for (const videoTrack of localVideos) {\n            const muted = videoTrack.isMuted();\n            const mediaStream = videoTrack.getOriginalStream();\n            const isCamera = videoTrack.videoType === VideoType.CAMERA;\n\n            // During the mute/unmute operation there are periods of time when\n            // the track's underlying MediaStream is not added yet to\n            // the PeerConnection. The SDP needs to be munged in such case.\n            const isInPeerConnection\n                = mediaStream && this.tpc.isMediaStreamInPc(mediaStream);\n            const shouldFakeSdp = isCamera && (muted || !isInPeerConnection);\n\n            if (!shouldFakeSdp) {\n                continue; // eslint-disable-line no-continue\n            }\n\n            // Inject removed SSRCs\n            const requiredSSRCs\n                = this.tpc.isSimulcastOn()\n                    ? this.tpc.simulcast.ssrcCache\n                    : [ this.tpc.sdpConsistency.cachedPrimarySsrc ];\n\n            if (!requiredSSRCs.length) {\n                logger.error(`No SSRCs stored for: ${videoTrack} in ${this.tpc}`);\n\n                continue; // eslint-disable-line no-continue\n            }\n\n            modified = true;\n\n            // We need to fake sendrecv.\n            // NOTE the SDP produced here goes only to Jicofo and is never set\n            // as localDescription. That's why\n            // TraceablePeerConnection.mediaTransferActive is ignored here.\n            videoMLine.direction = MediaDirection.SENDRECV;\n\n            // Check if the recvonly has MSID\n            const primarySSRC = requiredSSRCs[0];\n\n            // FIXME The cname could come from the stream, but may turn out to\n            // be too complex. It is fine to come up with any value, as long as\n            // we only care about the actual SSRC values when deciding whether\n            // or not an update should be sent.\n            const primaryCname = `injected-${primarySSRC}`;\n\n            for (const ssrcNum of requiredSSRCs) {\n                // Remove old attributes\n                videoMLine.removeSSRC(ssrcNum);\n\n                // Inject\n                videoMLine.addSSRCAttribute({\n                    id: ssrcNum,\n                    attribute: 'cname',\n                    value: primaryCname\n                });\n                videoMLine.addSSRCAttribute({\n                    id: ssrcNum,\n                    attribute: 'msid',\n                    value: videoTrack.storedMSID\n                });\n            }\n            if (requiredSSRCs.length > 1) {\n                const group = {\n                    ssrcs: requiredSSRCs.join(' '),\n                    semantics: 'SIM'\n                };\n\n                if (!videoMLine.findGroup(group.semantics, group.ssrcs)) {\n                    // Inject the group\n                    videoMLine.addSSRCGroup(group);\n                }\n            }\n\n            // Insert RTX\n            // FIXME in P2P RTX is used by Chrome regardless of config option\n            // status. Because of that 'source-remove'/'source-add'\n            // notifications are still sent to remove/add RTX SSRC and FID group\n            if (!this.tpc.options.disableRtx) {\n                this.tpc.rtxModifier.modifyRtxSsrcs2(videoMLine);\n            }\n        }\n\n        return modified;\n    }\n\n    /**\n     * Returns a string that can be set as the MSID attribute for a source.\n     *\n     * @param {string} mediaType - Media type of the source.\n     * @param {string} trackId - Id of the MediaStreamTrack associated with the source.\n     * @param {string} streamId - Id of the MediaStream associated with the source.\n     * @returns {string|null}\n     */\n    _generateMsidAttribute(mediaType, trackId, streamId = null) {\n        if (!(mediaType && trackId)) {\n            logger.error(`Unable to munge local MSID - track id=${trackId} or media type=${mediaType} is missing`);\n\n            return null;\n        }\n        const pcId = this.tpc.id;\n\n        // Handle a case on Firefox when the browser doesn't produce a 'a:ssrc' line with the 'msid' attribute or has\n        // '-' for the stream id part of the msid line. Jicofo needs an unique identifier to be associated with a ssrc\n        // and uses the msid for that.\n        if (streamId === '-' || !streamId) {\n            return `${this.localEndpointId}-${mediaType}-${pcId} ${trackId}-${pcId}`;\n        }\n\n        return `${streamId}-${pcId} ${trackId}-${pcId}`;\n    }\n\n    /**\n     * Modifies 'cname', 'msid', 'label' and 'mslabel' by appending the id of {@link LocalSdpMunger#tpc} at the end,\n     * preceding by a dash sign.\n     *\n     * @param {MLineWrap} mediaSection - The media part (audio or video) of the session description which will be\n     * modified in place.\n     * @returns {void}\n     * @private\n     */\n    _transformMediaIdentifiers(mediaSection) {\n        const mediaType = mediaSection.mLine?.type;\n        const pcId = this.tpc.id;\n\n        for (const ssrcLine of mediaSection.ssrcs) {\n            switch (ssrcLine.attribute) {\n            case 'cname':\n            case 'label':\n            case 'mslabel':\n                ssrcLine.value = ssrcLine.value && `${ssrcLine.value}-${pcId}`;\n                break;\n            case 'msid': {\n                if (ssrcLine.value) {\n                    const streamAndTrackIDs = ssrcLine.value.split(' ');\n\n                    let streamId = streamAndTrackIDs[0];\n                    const trackId = streamAndTrackIDs[1];\n\n                    if (FeatureFlags.isSourceNameSignalingEnabled()) {\n                        // Always overwrite streamId since we want the msid to be in this format even if the browser\n                        // generates one (in p2p mode).\n                        streamId = `${this.localEndpointId}-${mediaType}`;\n\n                        // eslint-disable-next-line max-depth\n                        if (mediaType === MediaType.VIDEO) {\n                            // eslint-disable-next-line max-depth\n                            if (!this.videoSourcesToMsidMap.has(trackId)) {\n                                streamId = `${streamId}-${this.videoSourcesToMsidMap.size}`;\n                                this.videoSourcesToMsidMap.set(trackId, streamId);\n                            }\n                        } else if (!this.audioSourcesToMsidMap.has(trackId)) {\n                            streamId = `${streamId}-${this.audioSourcesToMsidMap.size}`;\n                            this.audioSourcesToMsidMap.set(trackId, streamId);\n                        }\n\n                        streamId = mediaType === MediaType.VIDEO\n                            ? this.videoSourcesToMsidMap.get(trackId)\n                            : this.audioSourcesToMsidMap.get(trackId);\n                    }\n                    ssrcLine.value = this._generateMsidAttribute(mediaType, trackId, streamId);\n                } else {\n                    logger.warn(`Unable to munge local MSID - weird format detected: ${ssrcLine.value}`);\n                }\n                break;\n            }\n            }\n        }\n\n        // Additional transformations related to MSID are applicable to Unified-plan implementation only.\n        if (!this.tpc.usesUnifiedPlan()) {\n            return;\n        }\n\n        const mediaDirection = mediaSection.mLine?.direction;\n\n        // On FF when the user has started muted create answer will generate a recv only SSRC. We don't want to signal\n        // this SSRC in order to reduce the load of the xmpp server for large calls. Therefore the SSRC needs to be\n        // removed from the SDP.\n        //\n        // For all other use cases (when the user has had media but then the user has stopped it) we want to keep the\n        // receive only SSRCs in the SDP. Otherwise source-remove will be triggered and the next time the user add a\n        // track we will reuse the SSRCs and send source-add with the same SSRCs. This is problematic because of issues\n        // on Chrome and FF (https://bugzilla.mozilla.org/show_bug.cgi?id=1768729) when removing and then adding the\n        // same SSRC in the remote sdp the remote track is not rendered.\n        if (browser.isFirefox()\n            && (mediaDirection === MediaDirection.RECVONLY || mediaDirection === MediaDirection.INACTIVE)\n            && (\n                (mediaType === MediaType.VIDEO && !this.tpc._hasHadVideoTrack)\n                || (mediaType === MediaType.AUDIO && !this.tpc._hasHadAudioTrack)\n            )\n        ) {\n            mediaSection.ssrcs = undefined;\n            mediaSection.ssrcGroups = undefined;\n        }\n\n        const msidLine = mediaSection.mLine?.msid;\n        const trackId = msidLine && msidLine.split(' ')[1];\n        const sources = [ ...new Set(mediaSection.mLine?.ssrcs?.map(s => s.id)) ];\n\n        for (const source of sources) {\n            const msidExists = mediaSection.ssrcs\n                .find(ssrc => ssrc.id === source && ssrc.attribute === 'msid');\n\n            if (!msidExists && trackId) {\n                const generatedMsid = this._generateMsidAttribute(mediaType, trackId);\n\n                mediaSection.ssrcs.push({\n                    id: source,\n                    attribute: 'msid',\n                    value: generatedMsid\n                });\n            }\n        }\n    }\n\n    /**\n     * Maybe modifies local description to fake local video tracks SDP when\n     * those are muted.\n     *\n     * @param {object} desc the WebRTC SDP object instance for the local\n     * description.\n     * @returns {RTCSessionDescription}\n     */\n    maybeAddMutedLocalVideoTracksToSDP(desc) {\n        if (!desc) {\n            throw new Error('No local description passed in.');\n        }\n\n        const transformer = new SdpTransformWrap(desc.sdp);\n\n        if (this._addMutedLocalVideoTracksToSDP(transformer)) {\n            return new RTCSessionDescription({\n                type: desc.type,\n                sdp: transformer.toRawSDP()\n            });\n        }\n\n        return desc;\n    }\n\n    /**\n     * This transformation will make sure that stream identifiers are unique\n     * across all of the local PeerConnections even if the same stream is used\n     * by multiple instances at the same time.\n     * Each PeerConnection assigns different SSRCs to the same local\n     * MediaStream, but the MSID remains the same as it's used to identify\n     * the stream by the WebRTC backend. The transformation will append\n     * {@link TraceablePeerConnection#id} at the end of each stream's identifier\n     * (\"cname\", \"msid\", \"label\" and \"mslabel\").\n     *\n     * @param {RTCSessionDescription} sessionDesc - The local session\n     * description (this instance remains unchanged).\n     * @return {RTCSessionDescription} - Transformed local session description\n     * (a modified copy of the one given as the input).\n     */\n    transformStreamIdentifiers(sessionDesc) {\n        // FIXME similar check is probably duplicated in all other transformers\n        if (!sessionDesc || !sessionDesc.sdp || !sessionDesc.type) {\n            return sessionDesc;\n        }\n\n        const transformer = new SdpTransformWrap(sessionDesc.sdp);\n        const audioMLine = transformer.selectMedia(MediaType.AUDIO)?.[0];\n\n        if (audioMLine) {\n            this._transformMediaIdentifiers(audioMLine);\n            this._injectSourceNames(audioMLine);\n        }\n\n        const videoMlines = transformer.selectMedia(MediaType.VIDEO);\n\n        if (!FeatureFlags.isMultiStreamSupportEnabled()) {\n            videoMlines.splice(1);\n        }\n\n        for (const videoMLine of videoMlines) {\n            this._transformMediaIdentifiers(videoMLine);\n            this._injectSourceNames(videoMLine);\n        }\n\n        // Plan-b clients generate new SSRCs and trackIds whenever tracks are removed and added back to the\n        // peerconnection, therefore local track based map for msids needs to be reset after every transformation.\n        if (FeatureFlags.isSourceNameSignalingEnabled() && !this.tpc._usesUnifiedPlan) {\n            this.audioSourcesToMsidMap.clear();\n            this.videoSourcesToMsidMap.clear();\n        }\n\n        return new RTCSessionDescription({\n            type: sessionDesc.type,\n            sdp: transformer.toRawSDP()\n        });\n    }\n\n    /**\n     * Injects source names. Source names are need to for multiple streams per endpoint support. The final plan is to\n     * use the \"mid\" attribute for source names, but because the SDP to Jingle conversion still operates in the Plan-B\n     * semantics (one source name per media), a custom \"name\" attribute is injected into SSRC lines..\n     *\n     * @param {MLineWrap} mediaSection - The media part (audio or video) of the session description which will be\n     * modified in place.\n     * @returns {void}\n     * @private\n     */\n    _injectSourceNames(mediaSection) {\n        if (!FeatureFlags.isSourceNameSignalingEnabled()) {\n            return;\n        }\n\n        const sources = [ ...new Set(mediaSection.mLine?.ssrcs?.map(s => s.id)) ];\n        const mediaType = mediaSection.mLine?.type;\n\n        if (!mediaType) {\n            throw new Error('_transformMediaIdentifiers - no media type in mediaSection');\n        }\n\n        for (const source of sources) {\n            const nameExists = mediaSection.ssrcs.find(ssrc => ssrc.id === source && ssrc.attribute === 'name');\n            const msid = mediaSection.ssrcs.find(ssrc => ssrc.id === source && ssrc.attribute === 'msid')?.value;\n            let trackIndex;\n\n            if (msid) {\n                const streamId = msid.split(' ')[0];\n\n                trackIndex = streamId.split('-')[2];\n            }\n\n            const sourceName = getSourceNameForJitsiTrack(this.localEndpointId, mediaType, trackIndex);\n\n            if (!nameExists) {\n                // Inject source names as a=ssrc:3124985624 name:endpointA-v0\n                mediaSection.ssrcs.push({\n                    id: source,\n                    attribute: 'name',\n                    value: sourceName\n                });\n            }\n\n            if (mediaType === MediaType.VIDEO) {\n                const videoType = this.tpc.getLocalVideoTracks().find(track => track.getSourceName() === sourceName)\n                    ?.getVideoType();\n\n                if (videoType) {\n                    // Inject videoType as a=ssrc:1234 videoType:desktop.\n                    mediaSection.ssrcs.push({\n                        id: source,\n                        attribute: 'videoType',\n                        value: videoType\n                    });\n                }\n            }\n        }\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport { MediaDirection } from '../../service/RTC/MediaDirection';\nimport { MediaType } from '../../service/RTC/MediaType';\n\nimport SDPUtil from './SDPUtil';\nimport { parseSecondarySSRC, SdpTransformWrap } from './SdpTransformUtil';\n\nconst logger = getLogger(__filename);\n\n/**\n * Begin helper functions\n */\n/**\n * Updates or inserts the appropriate rtx information for primarySsrc with\n *  the given rtxSsrc.  If no rtx ssrc for primarySsrc currently exists, it will\n *  add the appropriate ssrc and ssrc group lines.  If primarySsrc already has\n *  an rtx ssrc, the appropriate ssrc and group lines will be updated\n * @param {MLineWrap} mLine\n * @param {object} primarySsrcInfo the info (ssrc, msid & cname) for the\n *  primary ssrc\n * @param {number} rtxSsrc the rtx ssrc to associate with the primary ssrc\n */\nfunction updateAssociatedRtxStream(mLine, primarySsrcInfo, rtxSsrc) {\n    const primarySsrc = primarySsrcInfo.id;\n    const primarySsrcMsid = primarySsrcInfo.msid;\n    const primarySsrcCname = primarySsrcInfo.cname;\n\n    const previousRtxSSRC = mLine.getRtxSSRC(primarySsrc);\n\n    if (previousRtxSSRC === rtxSsrc) {\n        return;\n    }\n    if (previousRtxSSRC) {\n        // Stream already had an rtx ssrc that is different than the one given,\n        //  remove all trace of the old one\n        mLine.removeSSRC(previousRtxSSRC);\n        mLine.removeGroupsWithSSRC(previousRtxSSRC);\n    }\n    mLine.addSSRCAttribute({\n        id: rtxSsrc,\n        attribute: 'cname',\n        value: primarySsrcCname\n    });\n    mLine.addSSRCAttribute({\n        id: rtxSsrc,\n        attribute: 'msid',\n        value: primarySsrcMsid\n    });\n    mLine.addSSRCGroup({\n        semantics: 'FID',\n        ssrcs: `${primarySsrc} ${rtxSsrc}`\n    });\n}\n\n/**\n * End helper functions\n */\n\n/**\n * Adds any missing RTX streams for video streams\n *  and makes sure that they remain consistent\n */\nexport default class RtxModifier {\n    /**\n     * Constructor\n     */\n    constructor() {\n        /**\n         * Map of video ssrc to corresponding RTX\n         *  ssrc\n         */\n        this.correspondingRtxSsrcs = new Map();\n    }\n\n    /**\n     * Clear the cached map of primary video ssrcs to\n     *  their corresponding rtx ssrcs so that they will\n     *  not be used for the next call to modifyRtxSsrcs\n     */\n    clearSsrcCache() {\n        this.correspondingRtxSsrcs.clear();\n    }\n\n    /**\n     * Explicitly set the primary video ssrc -> rtx ssrc\n     *  mapping to be used in modifyRtxSsrcs\n     * @param {Map} ssrcMapping a mapping of primary video\n     *  ssrcs to their corresponding rtx ssrcs\n     */\n    setSsrcCache(ssrcMapping) {\n        logger.debug('Setting ssrc cache to ', ssrcMapping);\n        this.correspondingRtxSsrcs = ssrcMapping;\n    }\n\n    /**\n     * Adds RTX ssrcs for any video ssrcs that don't already have them.  If the video ssrc has been seen before, and\n     * already had an RTX ssrc generated, the same RTX ssrc will be used again.\n     *\n     * @param {string} sdpStr sdp in raw string format\n     * @returns {string} The modified sdp in raw string format.\n     */\n    modifyRtxSsrcs(sdpStr) {\n        let modified = false;\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\n        const videoMLines = sdpTransformer.selectMedia(MediaType.VIDEO);\n\n        if (!videoMLines?.length) {\n            logger.debug(`No 'video' media found in the sdp: ${sdpStr}`);\n\n            return sdpStr;\n        }\n\n        for (const videoMLine of videoMLines) {\n            if (this.modifyRtxSsrcs2(videoMLine)) {\n                modified = true;\n            }\n        }\n\n        return modified ? sdpTransformer.toRawSDP() : sdpStr;\n    }\n\n    /**\n     * Does the same thing as {@link modifyRtxSsrcs}, but takes the {@link MLineWrap} instance wrapping video media as\n     * an argument.\n     * @param {MLineWrap} videoMLine\n     * @return {boolean} <tt>true</tt> if the SDP wrapped by {@link SdpTransformWrap} has been modified or\n     * <tt>false</tt> otherwise.\n     */\n    modifyRtxSsrcs2(videoMLine) {\n        if (videoMLine.direction === MediaDirection.RECVONLY) {\n            return false;\n        }\n        if (videoMLine.getSSRCCount() < 1) {\n            return false;\n        }\n        const primaryVideoSsrcs = videoMLine.getPrimaryVideoSSRCs();\n\n        for (const ssrc of primaryVideoSsrcs) {\n            const msid = videoMLine.getSSRCAttrValue(ssrc, 'msid');\n            const cname = videoMLine.getSSRCAttrValue(ssrc, 'cname');\n            let correspondingRtxSsrc = this.correspondingRtxSsrcs.get(ssrc);\n\n            if (!correspondingRtxSsrc) {\n                // If there's one in the sdp already for it, we'll just set\n                //  that as the corresponding one\n                const previousAssociatedRtxStream = videoMLine.getRtxSSRC(ssrc);\n\n                if (previousAssociatedRtxStream) {\n                    correspondingRtxSsrc = previousAssociatedRtxStream;\n                } else {\n                    correspondingRtxSsrc = SDPUtil.generateSsrc();\n                }\n                this.correspondingRtxSsrcs.set(ssrc, correspondingRtxSsrc);\n            }\n            updateAssociatedRtxStream(\n                videoMLine,\n                {\n                    id: ssrc,\n                    cname,\n                    msid\n                },\n                correspondingRtxSsrc);\n        }\n\n        // FIXME we're not looking into much details whether the SDP has been\n        // modified or not once the precondition requirements are met.\n        return true;\n    }\n\n    /**\n     * Strip all rtx streams from the given sdp.\n     *\n     * @param {string} sdpStr sdp in raw string format\n     * @returns {string} sdp string with all rtx streams stripped\n     */\n    stripRtx(sdpStr) {\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\n        const videoMLines = sdpTransformer.selectMedia(MediaType.VIDEO);\n\n        if (!videoMLines?.length) {\n            logger.debug(`No 'video' media found in the sdp: ${sdpStr}`);\n\n            return sdpStr;\n        }\n\n        for (const videoMLine of videoMLines) {\n            if (videoMLine.direction !== MediaDirection.RECVONLY\n                && videoMLine.getSSRCCount()\n                && videoMLine.containsAnySSRCGroups()) {\n                const fidGroups = videoMLine.findGroups('FID');\n\n                // Remove the fid groups from the mline\n                videoMLine.removeGroupsBySemantics('FID');\n\n                // Get the rtx ssrcs and remove them from the mline\n                for (const fidGroup of fidGroups) {\n                    const rtxSsrc = parseSecondarySSRC(fidGroup);\n\n                    videoMLine.removeSSRC(rtxSsrc);\n                }\n            }\n        }\n\n        return sdpTransformer.toRawSDP();\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport { MediaType } from '../../service/RTC/MediaType';\n\nimport {\n    parsePrimarySSRC,\n    parseSecondarySSRC,\n    SdpTransformWrap\n} from './SdpTransformUtil';\n\nconst logger = getLogger(__filename);\n\n/**\n * Handles the work of keeping video ssrcs consistent across multiple\n * o/a cycles, making it such that all stream operations can be\n * kept local and do not need to be signaled.\n * NOTE: This only keeps the 'primary' video ssrc consistent: meaning\n * the primary video stream\n */\nexport default class SdpConsistency {\n    /**\n     * Constructor\n     * @param {string} logPrefix the log prefix appended to every logged\n     * message, currently used to distinguish for which\n     * <tt>TraceablePeerConnection</tt> the instance works.\n     */\n    constructor(logPrefix) {\n        this.clearVideoSsrcCache();\n        this.logPrefix = logPrefix;\n    }\n\n    /**\n     * Clear the cached video primary and primary rtx ssrcs so that\n     *  they will not be used for the next call to\n     *  makeVideoPrimarySsrcsConsistent\n     */\n    clearVideoSsrcCache() {\n        this.cachedPrimarySsrc = null;\n        this.injectRecvOnly = false;\n    }\n\n    /**\n     * Explicitly set the primary ssrc to be used in\n     *  makeVideoPrimarySsrcsConsistent\n     * @param {number} primarySsrc the primarySsrc to be used\n     *  in future calls to makeVideoPrimarySsrcsConsistent\n     * @throws Error if <tt>primarySsrc</tt> is not a number\n     */\n    setPrimarySsrc(primarySsrc) {\n        if (typeof primarySsrc !== 'number') {\n            throw new Error('Primary SSRC must be a number!');\n        }\n        this.cachedPrimarySsrc = primarySsrc;\n    }\n\n    /**\n     * Checks whether or not there is a primary video SSRC cached already.\n     * @return {boolean}\n     */\n    hasPrimarySsrcCached() {\n        return Boolean(this.cachedPrimarySsrc);\n    }\n\n    /**\n     * Given an sdp string, either:\n     *  1) record the primary video and primary rtx ssrcs to be\n     *   used in future calls to makeVideoPrimarySsrcsConsistent or\n     *  2) change the primary and primary rtx ssrcs in the given sdp\n     *   to match the ones previously cached\n     * @param {string} sdpStr the sdp string to (potentially)\n     *  change to make the video ssrcs consistent\n     * @returns {string} a (potentially) modified sdp string\n     *  with ssrcs consistent with this class' cache\n     */\n    makeVideoPrimarySsrcsConsistent(sdpStr) {\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\n        const videoMLine = sdpTransformer.selectMedia(MediaType.VIDEO)?.[0];\n\n        if (!videoMLine) {\n            logger.debug(`${this.logPrefix} no 'video' media found in the sdp: ${sdpStr}`);\n\n            return sdpStr;\n        }\n\n        if (videoMLine.direction === 'recvonly') {\n            // If the mline is recvonly, we'll add the primary\n            //  ssrc as a recvonly ssrc\n            if (this.cachedPrimarySsrc && this.injectRecvOnly) {\n                videoMLine.addSSRCAttribute({\n                    id: this.cachedPrimarySsrc,\n                    attribute: 'cname',\n                    value: `recvonly-${this.cachedPrimarySsrc}`\n                });\n            } else {\n                logger.info(`${this.logPrefix} no SSRC found for the recvonly video stream!`);\n            }\n        } else {\n            const newPrimarySsrc = videoMLine.getPrimaryVideoSsrc();\n\n            if (!newPrimarySsrc) {\n                logger.info(`${this.logPrefix} sdp-consistency couldn't parse new primary ssrc`);\n\n                return sdpStr;\n            }\n            if (this.cachedPrimarySsrc) {\n                videoMLine.replaceSSRC(newPrimarySsrc, this.cachedPrimarySsrc);\n                for (const group of videoMLine.ssrcGroups) {\n                    if (group.semantics === 'FID') {\n                        const primarySsrc = parsePrimarySSRC(group);\n                        const rtxSsrc = parseSecondarySSRC(group);\n\n                        // eslint-disable-next-line max-depth\n                        if (primarySsrc === newPrimarySsrc) {\n                            group.ssrcs\n                                = `${this.cachedPrimarySsrc} ${rtxSsrc}`;\n                        }\n                    }\n                }\n            } else {\n                this.cachedPrimarySsrc = newPrimarySsrc;\n            }\n            this.injectRecvOnly = true;\n        }\n\n        return sdpTransformer.toRawSDP();\n    }\n}\n","import { MediaDirection } from '../../service/RTC/MediaDirection';\nimport { MediaType } from '../../service/RTC/MediaType';\n\nimport * as transform from 'sdp-transform';\n\nconst DEFAULT_NUM_OF_LAYERS = 3;\n\ninterface Description {\n    type: RTCSdpType;\n    sdp: string;\n}\n\ninterface Options {\n    numOfLayers?: number\n}\n\n/**\n * This class handles SDP munging for enabling simulcast for local video streams in Unified plan. A set of random SSRCs\n * are generated for the higher layer streams and they are cached for a given mid. The cached SSRCs are then reused on\n * the subsequent iterations while munging the local description. This class also handles imploding of the simulcast\n * SSRCs for remote endpoints into the primary FID group in remote description since Jicofo signals all SSRCs relevant\n * to a given endpoint.\n */\nexport default class SdpSimulcast {\n    private _options: Options;\n    private _ssrcCache: Map<string, Array<number>>;\n\n    /**\n     * Creates a new instance.\n     *\n     * @param options\n     */\n    constructor(options: Options) {\n        this._options = options;\n        this._ssrcCache = new Map();\n\n        if (!this._options.numOfLayers) {\n            this._options.numOfLayers = DEFAULT_NUM_OF_LAYERS;\n        }\n    }\n\n    /**\n     * Updates the given media description using the SSRCs that were cached for the mid associated\n     * with the media description and returns the modified media description.\n     *\n     * @param mLine\n     * @returns\n     */\n     _fillSsrcsFromCache(mLine: transform.MediaDescription) : any {\n        const mid = mLine.mid;\n        const cachedSsrcs = this._ssrcCache.get(mid);\n        const newSsrcs = this._parseSimLayers(mLine);\n        const newMsid = this._getSsrcAttribute(mLine, newSsrcs[0], 'msid');\n        const newCname = this._getSsrcAttribute(mLine, newSsrcs[0], 'cname');\n\n        mLine.ssrcs = [];\n        mLine.ssrcGroups = [];\n\n        for (const ssrc of cachedSsrcs) {\n            mLine.ssrcs.push({\n                id: ssrc,\n                attribute: 'msid',\n                value: newMsid\n            });\n            mLine.ssrcs.push({\n                id: ssrc,\n                attribute: 'cname',\n                value: newCname\n            });\n        }\n\n        mLine.ssrcGroups.push({\n            semantics: 'SIM',\n            ssrcs: cachedSsrcs.join(' ')\n        });\n\n        return mLine;\n    }\n\n    /**\n     * Generates a new set of SSRCs for the higher simulcast layers/streams and adds the attributes and SIM group to\n     * the given media description and returns the modified media description.\n     *\n     * @param mLine\n     * @param primarySsrc\n     * @returns\n     */\n    _generateNewSsrcsForSimulcast(mLine: transform.MediaDescription, primarySsrc: number) : any {\n        const cname = this._getSsrcAttribute(mLine, primarySsrc, 'cname');\n        let msid = this._getSsrcAttribute(mLine, primarySsrc, 'msid');\n        const addAssociatedAttributes = (mLine: transform.MediaDescription, ssrc: number) => {\n            mLine.ssrcs.push({\n                id: ssrc,\n                attribute: 'cname',\n                value: cname\n            });\n            mLine.ssrcs.push({\n                id: ssrc,\n                attribute: 'msid',\n                value: msid\n            });\n        }\n\n        // In Unified-plan mode, the a=ssrc lines with the msid attribute are not present (only cname attributes are\n        // present) in the answers that Chrome and Safari generate for an offer received from Jicofo. Generate these\n        // a=ssrc lines using the msid values from the a=msid line.\n        if (!msid) {\n            msid = mLine.msid;\n            const primarySsrcs = mLine.ssrcs;\n\n            primarySsrcs.forEach(ssrc => {\n                mLine.ssrcs.push({\n                    id: ssrc.id,\n                    attribute: 'msid',\n                    value: msid\n                });\n            })\n        }\n\n        // Generate SIM layers.\n        const simSsrcs = [];\n\n        for (let i = 0; i < this._options.numOfLayers - 1; ++i) {\n            const simSsrc = this._generateSsrc();\n\n            addAssociatedAttributes(mLine, simSsrc);\n            simSsrcs.push(simSsrc);\n        }\n\n        mLine.ssrcGroups = mLine.ssrcGroups || [];\n        mLine.ssrcGroups.push({\n            semantics: 'SIM',\n            ssrcs: primarySsrc + ' ' + simSsrcs.join(' ')\n        });\n\n        return mLine;\n    }\n\n    /**\n     * Returns a random number to be used for the SSRC.\n     *\n     * @returns\n     */\n    _generateSsrc() : number {\n        const max = 0xffffffff;\n\n        return Math.floor(Math.random() * max);\n    }\n\n    /**\n     * Returns the requested attribute value for a SSRC from a given media description.\n     *\n     * @param mLine\n     * @param ssrc\n     * @param attributeName\n     * @returns\n     */\n    _getSsrcAttribute(mLine: transform.MediaDescription, ssrc: number, attributeName: string) : string | undefined {\n        return mLine.ssrcs?.find(\n            ssrcInfo => Number(ssrcInfo.id) === ssrc\n            && ssrcInfo.attribute === attributeName)?.value;\n    }\n\n    /**\n     * Returns an array of all the primary SSRCs in the SIM group for a given media description.\n     *\n     * @param mLine\n     * @returns\n     */\n    _parseSimLayers(mLine: transform.MediaDescription) : Array<number> | null {\n        const simGroup = mLine.ssrcGroups?.find(group => group.semantics === 'SIM');\n\n        if (simGroup) {\n            return simGroup.ssrcs.split(' ').map(ssrc => Number(ssrc));\n        }\n\n        if (mLine.ssrcs?.length) {\n            return [ Number(mLine.ssrcs[0].id) ];\n        }\n\n        return null;\n    }\n\n    /**\n     * Munges the given media description to enable simulcast for the video media sections that are in either have\n     * SENDRECV or SENDONLY as the media direction thereby ignoring all the RECVONLY transceivers created for remote\n     * endpoints.\n     * NOTE: This needs to be called only when simulcast is enabled.\n     *\n     * @param description\n     * @returns\n     */\n    mungeLocalDescription(description: Description) : Description {\n        if (!description || !description.sdp) {\n            return description;\n        }\n        const session = transform.parse(description.sdp);\n\n        for (let media of session.media) {\n            // Ignore recvonly and inactive transceivers created for remote sources.\n            if (media.direction === MediaDirection.RECVONLY || media.direction === MediaDirection.INACTIVE) {\n                continue;\n            }\n\n            // Ignore audio m-lines.\n            if (media.type !== MediaType.VIDEO) {\n                continue;\n            }\n            const mid = media.mid;\n            const numSsrcs = new Set(media.ssrcs?.map(ssrcInfo => ssrcInfo.id));\n            const numGroups = media.ssrcGroups?.length ?? 0;\n            let primarySsrc: number;\n\n            // Do not munge if the description has no ssrcs or if simulcast is already enabled.\n            if (numSsrcs.size === 0 || numSsrcs.size > 2 || (numSsrcs.size === 2 && numGroups === 0)) {\n                continue;\n            }\n            if (numSsrcs.size === 1) {\n                primarySsrc = Number(media.ssrcs[0]?.id);\n            } else {\n                const fidGroup = media.ssrcGroups.find(group => group.semantics === 'FID');\n\n                if (fidGroup) {\n                    primarySsrc = Number(fidGroup.ssrcs.split(' ')[0]);\n                }\n            }\n\n            if (this._ssrcCache.has(mid)) {\n                media = this._fillSsrcsFromCache(media);\n            } else {\n                media = this._generateNewSsrcsForSimulcast(media, primarySsrc);\n                const simulcastSsrcs = this._parseSimLayers(media);\n\n                // Update the SSRCs in the cache so that they can re-used for the same mid again.\n                this._ssrcCache.set(mid, simulcastSsrcs);\n            }\n        }\n\n        return new RTCSessionDescription({\n            type: description.type,\n            sdp: transform.write(session)\n        });\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport { JitsiConferenceEvents } from '../../JitsiConferenceEvents';\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport { createTrackStreamingStatusEvent } from '../../service/statistics/AnalyticsEvents';\nimport JitsiConference from '../../types/hand-crafted/JitsiConference';\nimport JitsiRemoteTrack from '../../types/hand-crafted/modules/RTC/JitsiRemoteTrack';\nimport RTC from '../../types/hand-crafted/modules/RTC/RTC';\nimport { VideoType } from '../../types/hand-crafted/service/RTC/VideoType';\nimport browser from '../browser';\nimport Statistics from '../statistics/statistics';\n\n/** Track streaming statuses. */\nexport enum TrackStreamingStatus {\n\n    /**\n     * Status indicating that streaming is currently active.\n     */\n    ACTIVE = 'active',\n\n    /**\n     * Status indicating that streaming is currently inactive.\n     * Inactive means the streaming was stopped on purpose from the bridge, like exiting forwarded sources or\n     * adaptivity decided to drop video because of not enough bandwidth.\n     */\n    INACTIVE = 'inactive',\n\n    /**\n     * Status indicating that streaming is currently interrupted.\n     */\n    INTERRUPTED = 'interrupted',\n\n    /**\n     * Status indicating that streaming is currently restoring.\n     */\n    RESTORING = 'restoring',\n  }\n\ntype StreamingStatusMap = {\n    // TODO: Replace this hand crafted VideoType when we convert VideoType.js to Typescript.\n    videoType?: VideoType, \n    startedMs?: number,\n    p2p?: boolean,\n    streamingStatus?: string,\n    value?: number\n};\n\nconst logger = getLogger(__filename);\n\n/**\n * Default value of 500 milliseconds for {@link TrackStreamingStatusImpl.outOfForwardedSourcesTimeout}.\n */\nconst DEFAULT_NOT_IN_FORWARDED_SOURCES_TIMEOUT = 500;\n\n/**\n * Default value of 2500 milliseconds for {@link TrackStreamingStatusImpl.p2pRtcMuteTimeout}.\n */\nconst DEFAULT_P2P_RTC_MUTE_TIMEOUT = 2500;\n\n/**\n * Default value of 10000 milliseconds for {@link TrackStreamingStatusImpl.rtcMuteTimeout}.\n */\nconst DEFAULT_RTC_MUTE_TIMEOUT = 10000;\n\n/**\n * The time to wait a track to be restored. Track which was out of forwarded sources should be inactive and when\n * entering forwarded sources it becomes restoring and when data is received from bridge it will become active, but if\n * no data is received for some time we set status of that track streaming to interrupted.\n */\nconst DEFAULT_RESTORING_TIMEOUT = 10000;\n\n/**\n * Class is responsible for emitting JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED events.\n */\nexport class TrackStreamingStatusImpl {\n    rtc: RTC;\n    conference: JitsiConference;\n    track: JitsiRemoteTrack;\n\n    /**  This holds the timeout callback ID scheduled using window.setTimeout. */\n    trackTimer: number | null;\n\n    /**\n     * If video track frozen detection through RTC mute event is supported, we wait some time until video track is\n     * considered frozen. But because when the track falls out of forwarded sources it is expected for the video to\n     * freeze this timeout must be significantly reduced in \"out of forwarded sources\" case.\n     *\n     * Basically this value is used instead of {@link rtcMuteTimeout} when track is not in forwarded sources.\n     */\n    outOfForwardedSourcesTimeout: number;\n\n    /**\n     * How long we are going to wait for the corresponding signaling mute event after the RTC video track muted\n     * event is fired on the Media stream, before the connection interrupted is fired. The default value is\n     * {@link DEFAULT_P2P_RTC_MUTE_TIMEOUT}.\n     */\n    p2pRtcMuteTimeout: number;\n\n    /**\n     * How long we're going to wait after the RTC video track muted event for the corresponding signalling mute\n     * event, before the connection interrupted is fired. The default value is {@link DEFAULT_RTC_MUTE_TIMEOUT}.\n     *\n     * @returns amount of time in milliseconds\n     */\n    rtcMuteTimeout: number;\n\n    /**\n     * This holds a timestamp indicating  when remote video track was RTC muted. The purpose of storing the\n     * timestamp is to avoid the transition to disconnected status in case of legitimate video mute operation where\n     * the signalling video muted event can arrive shortly after RTC muted event.\n     *\n     * The timestamp is measured in milliseconds obtained with <tt>Date.now()</tt>.\n     *\n     * FIXME merge this logic with NO_DATA_FROM_SOURCE event implemented in JitsiLocalTrack by extending the event\n     * to the remote track and allowing to set different timeout for local and remote tracks.\n     */\n    rtcMutedTimestamp: number | null;\n\n    /** This holds the restoring timeout callback ID scheduled using window.setTimeout. */\n    restoringTimer: ReturnType<typeof setTimeout> | null;\n\n    /**\n     * This holds the current streaming status (along with all the internal events that happen while in that\n     * state).\n     *\n     * The goal is to send this information to the analytics backend for post-mortem analysis.\n     */\n    streamingStatusMap: StreamingStatusMap;\n\n    _onP2PStatus: () => void;\n    _onUserLeft: () => void;\n    _onTrackRtcMuted: () => void;\n    _onTrackRtcUnmuted: () => void;\n    _onSignallingMuteChanged: () => void;\n    _onTrackVideoTypeChanged: () => void;\n    _onLastNValueChanged: () => void;\n    _onForwardedSourcesChanged: () => void;\n\n    /* eslint-disable max-params*/\n    /**\n     * Calculates the new {@link TrackStreamingStatus} based on the values given for some specific remote track. It is\n     * assumed that the conference is currently in the JVB mode (in contrary to the P2P mode)\n     * @param isInForwardedSources - indicates whether the track is in the forwarded sources set. When set to\n     * false it means that JVB is not sending any video for the track.\n     * @param isRestoringTimedout - if true it means that the track has been outside of forwarded sources too\n     * long to be considered {@link TrackStreamingStatus.RESTORING}.\n     * @param isVideoMuted - true if the track is video muted and we should not expect to receive any video.\n     * @param isVideoTrackFrozen - if the current browser support video frozen detection then it will be set to\n     * true when the video track is frozen. If the current browser does not support frozen detection the it's always\n     * false.\n     * @return {TrackStreamingStatus} the new streaming status for the track for whom the values above were provided.\n     * @private\n     */\n    static _getNewStateForJvbMode(\n            isInForwardedSources: boolean,\n            isRestoringTimedout: boolean,\n            isVideoMuted: boolean,\n            isVideoTrackFrozen: boolean): TrackStreamingStatus {\n\n        // We are currently not checking the endpoint connection status received from the JVB.\n        if (isVideoMuted) {\n            // If the connection is active according to JVB and the track is video muted there is no way for the\n            // connection to be inactive, because the detection logic below only makes sense for video.\n            return TrackStreamingStatus.ACTIVE;\n        }\n\n        // Logic when isVideoTrackFrozen is supported\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n            if (!isVideoTrackFrozen) {\n                // If the video is playing we're good\n                return TrackStreamingStatus.ACTIVE;\n            } else if (isInForwardedSources) {\n                return isRestoringTimedout ? TrackStreamingStatus.INTERRUPTED : TrackStreamingStatus.RESTORING;\n            }\n\n            return TrackStreamingStatus.INACTIVE;\n        }\n\n        // Because this browser is incapable of detecting frozen video we must rely on the forwarded sources value\n        return isInForwardedSources ? TrackStreamingStatus.ACTIVE : TrackStreamingStatus.INACTIVE;\n    }\n\n    /* eslint-enable max-params*/\n\n    /**\n     * In P2P mode we don't care about any values coming from the JVB and the streaming status can be only active or\n     * interrupted.\n     * @param isVideoMuted - true if video muted\n     * @param isVideoTrackFrozen - true if the video track for the remote track is currently frozen. If the\n     * current browser does not support video frozen detection then it's always false.\n     * @return {TrackStreamingStatus}\n     * @private\n     */\n    static _getNewStateForP2PMode(isVideoMuted: boolean, isVideoTrackFrozen: boolean): TrackStreamingStatus {\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            // There's no way to detect problems in P2P when there's no video track frozen detection...\n            return TrackStreamingStatus.ACTIVE;\n        }\n\n        return isVideoMuted || !isVideoTrackFrozen\n            ? TrackStreamingStatus.ACTIVE : TrackStreamingStatus.INTERRUPTED;\n    }\n\n    /**\n     * Creates new instance of <tt>TrackStreamingStatus</tt>.\n     *\n     * @constructor\n     * @param rtc - the RTC service instance\n     * @param conference - parent conference instance\n     * @param {Object} options\n     * @param {number} [options.p2pRtcMuteTimeout=2500] custom value for\n     * {@link TrackStreamingStatusImpl.p2pRtcMuteTimeout}.\n     * @param {number} [options.rtcMuteTimeout=2000] custom value for\n     * {@link TrackStreamingStatusImpl.rtcMuteTimeout}.\n     * @param {number} [options.outOfForwardedSourcesTimeout=500] custom value for\n     * {@link TrackStreamingStatusImpl.outOfForwardedSourcesTimeout}.\n     */\n    constructor(rtc: RTC, conference: JitsiConference, track: JitsiRemoteTrack, options: {\n        outOfForwardedSourcesTimeout: number,\n        p2pRtcMuteTimeout: number,\n        rtcMuteTimeout: number\n    }) {\n        this.rtc = rtc;\n        this.conference = conference;\n        this.track = track;\n\n        this.restoringTimer = null;\n        this.rtcMutedTimestamp = null;\n        this.streamingStatusMap = {};\n        this.trackTimer = null;\n\n        this.outOfForwardedSourcesTimeout = typeof options.outOfForwardedSourcesTimeout === 'number'\n            ? options.outOfForwardedSourcesTimeout : DEFAULT_NOT_IN_FORWARDED_SOURCES_TIMEOUT;\n\n        this.p2pRtcMuteTimeout = typeof options.p2pRtcMuteTimeout === 'number'\n            ? options.p2pRtcMuteTimeout : DEFAULT_P2P_RTC_MUTE_TIMEOUT;\n\n        this.rtcMuteTimeout = typeof options.rtcMuteTimeout === 'number'\n            ? options.rtcMuteTimeout : DEFAULT_RTC_MUTE_TIMEOUT;\n        logger.info(`RtcMuteTimeout set to: ${this.rtcMuteTimeout}`);\n    }\n\n    /**\n     * Gets the video frozen timeout for given source name.\n     * @return how long are we going to wait since RTC video muted even, before a video track is considered\n     * frozen.\n     * @private\n     */\n    _getVideoFrozenTimeout(): number {\n        const sourceName = this.track.getSourceName();\n\n        return this.rtc.isInForwardedSources(sourceName)\n            ? this.rtcMuteTimeout\n            : this.conference.isP2PActive() ? this.p2pRtcMuteTimeout : this.outOfForwardedSourcesTimeout;\n    }\n\n    /**\n     * Initializes <tt>TrackStreamingStatus</tt> and bind required event listeners.\n     */\n    init(): void {\n        // Handles P2P status changes\n        this._onP2PStatus = this.figureOutStreamingStatus.bind(this);\n        this.conference.on(JitsiConferenceEvents.P2P_STATUS, this._onP2PStatus);\n\n        // Used to send analytics events for the participant that left the call.\n        this._onUserLeft = this.onUserLeft.bind(this);\n        this.conference.on(JitsiConferenceEvents.USER_LEFT, this._onUserLeft);\n\n        // On some browsers MediaStreamTrack trigger \"onmute\"/\"onunmute\" events for video type tracks when they stop\n        // receiving data which is often a sign that remote user is having connectivity issues.\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n\n            this._onTrackRtcMuted = this.onTrackRtcMuted.bind(this);\n            this.rtc.addListener(RTCEvents.REMOTE_TRACK_MUTE, this._onTrackRtcMuted);\n\n            this._onTrackRtcUnmuted = this.onTrackRtcUnmuted.bind(this);\n            this.rtc.addListener(RTCEvents.REMOTE_TRACK_UNMUTE, this._onTrackRtcUnmuted);\n\n            // Listened which will be bound to JitsiRemoteTrack to listen for signalling mute/unmute events.\n            this._onSignallingMuteChanged = this.onSignallingMuteChanged.bind(this);\n            this.track.on(JitsiTrackEvents.TRACK_MUTE_CHANGED, this._onSignallingMuteChanged);\n\n            // Used to send an analytics event when the video type changes.\n            this._onTrackVideoTypeChanged = this.onTrackVideoTypeChanged.bind(this);\n            this.track.on(JitsiTrackEvents.TRACK_VIDEOTYPE_CHANGED, this._onTrackVideoTypeChanged);\n        }\n\n        this._onForwardedSourcesChanged = this.onForwardedSourcesChanged.bind(this);\n        this.conference.on(JitsiConferenceEvents.FORWARDED_SOURCES_CHANGED, this._onForwardedSourcesChanged);\n\n        this._onLastNValueChanged = this.figureOutStreamingStatus.bind(this);\n        this.rtc.on(RTCEvents.LASTN_VALUE_CHANGED, this._onLastNValueChanged);\n    }\n\n    /**\n     * Removes all event listeners and disposes of all resources held by this instance.\n     */\n    dispose(): void {\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n            this.rtc.removeListener(RTCEvents.REMOTE_TRACK_MUTE, this._onTrackRtcMuted);\n            this.rtc.removeListener(RTCEvents.REMOTE_TRACK_UNMUTE, this._onTrackRtcUnmuted);\n\n            this.track.off(JitsiTrackEvents.TRACK_MUTE_CHANGED, this._onSignallingMuteChanged);\n        }\n\n        this.conference.off(JitsiConferenceEvents.FORWARDED_SOURCES_CHANGED, this._onForwardedSourcesChanged);\n        this.conference.off(JitsiConferenceEvents.P2P_STATUS, this._onP2PStatus);\n        this.conference.off(JitsiConferenceEvents.USER_LEFT, this._onUserLeft);\n        this.rtc.removeListener(RTCEvents.LASTN_VALUE_CHANGED, this._onLastNValueChanged);\n\n        this.clearTimeout();\n        this.clearRtcMutedTimestamp();\n        this.maybeSendTrackStreamingStatusEvent(Date.now());\n        this.figureOutStreamingStatus();\n    }\n\n    /**\n     * Changes streaming status.\n     * @param newStatus\n     */\n    _changeStreamingStatus(newStatus: TrackStreamingStatus): void {\n        if (this.track.getTrackStreamingStatus() !== newStatus) {\n\n            const sourceName = this.track.getSourceName();\n\n            this.track._setTrackStreamingStatus(newStatus);\n\n            logger.debug(`Emit track streaming status(${Date.now()}) ${sourceName}: ${newStatus}`);\n\n            // Log the event on CallStats\n            Statistics.sendLog(\n                JSON.stringify({\n                    id: 'track.streaming.status',\n                    track: sourceName,\n                    status: newStatus\n                }));\n\n            // It's common for the event listeners to access the JitsiRemoteTrack. Thus pass it as a parameter here.\n            this.track.emit(JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED, this.track, newStatus);\n        }\n    }\n\n    /**\n     * Reset the postponed \"streaming interrupted\" event which was previously scheduled as a timeout on RTC 'onmute'\n     * event.\n     */\n    clearTimeout(): void {\n        if (this.trackTimer) {\n            window.clearTimeout(this.trackTimer);\n            this.trackTimer = null;\n        }\n    }\n\n    /**\n     * Clears the timestamp of the RTC muted event for remote video track.\n     */\n    clearRtcMutedTimestamp(): void {\n        this.rtcMutedTimestamp = null;\n    }\n\n    /**\n     * Checks if track is considered frozen.\n     * @return <tt>true</tt> if the video has frozen or <tt>false</tt> when it's either not considered frozen\n     * (yet) or if freeze detection is not supported by the current browser.\n     *\n     * FIXME merge this logic with NO_DATA_FROM_SOURCE event implemented in JitsiLocalTrack by extending the event to\n     *       the remote track and allowing to set different timeout for local and remote tracks.\n     */\n    isVideoTrackFrozen(): boolean {\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            return false;\n        }\n\n        const isVideoRTCMuted = this.track.isWebRTCTrackMuted();\n        const rtcMutedTimestamp = this.rtcMutedTimestamp;\n        const timeout = this._getVideoFrozenTimeout();\n\n        return isVideoRTCMuted && typeof rtcMutedTimestamp === 'number' && (Date.now() - rtcMutedTimestamp) >= timeout;\n    }\n\n    /**\n     * Figures out (and updates) the current streaming status for the track identified by the source name.\n     */\n    figureOutStreamingStatus(): void {\n        const sourceName = this.track.getSourceName();\n        const inP2PMode = this.conference.isP2PActive();\n        const isRestoringTimedOut = this._isRestoringTimedout();\n        const audioOnlyMode = this.conference.getLastN() === 0;\n\n        // NOTE Overriding videoMuted to true for audioOnlyMode should disable any detection based on video playback or\n        // forwarded sources.\n        const isVideoMuted = this.track.isMuted() || audioOnlyMode;\n        const isVideoTrackFrozen = this.isVideoTrackFrozen();\n        const isInForwardedSources = this.rtc.isInForwardedSources(sourceName);\n\n        const newState\n            = inP2PMode\n                ? TrackStreamingStatusImpl._getNewStateForP2PMode(\n                    isVideoMuted,\n                    isVideoTrackFrozen)\n                : TrackStreamingStatusImpl._getNewStateForJvbMode(\n                    isInForwardedSources,\n                    isRestoringTimedOut,\n                    isVideoMuted,\n                    isVideoTrackFrozen);\n\n        // if the new state is not restoring clear timers and timestamps that we use to track the restoring state\n        if (newState !== TrackStreamingStatus.RESTORING) {\n            this._clearRestoringTimer();\n        }\n\n        logger.debug(\n            `Figure out conn status for ${sourceName}, is video muted: ${\n                isVideoMuted} video track frozen: ${\n                isVideoTrackFrozen} p2p mode: ${\n                inP2PMode} is in forwarded sources: ${\n                isInForwardedSources} currentStatus => newStatus: ${\n                this.track.getTrackStreamingStatus()} => ${newState}`);\n\n        const oldStreamingStatus = this.streamingStatusMap || {};\n\n        // Send an analytics event (guard on either the p2p flag or the streaming status has changed since the last\n        // time this code block run).\n        if (!('p2p' in oldStreamingStatus)\n            || !('streamingStatus' in oldStreamingStatus)\n            || oldStreamingStatus.p2p !== inP2PMode\n            || oldStreamingStatus.streamingStatus !== newState) {\n\n            const nowMs = Date.now();\n\n            this.maybeSendTrackStreamingStatusEvent(nowMs);\n\n            this.streamingStatusMap = {\n                ...oldStreamingStatus,\n                streamingStatus: newState,\n                p2p: inP2PMode,\n                startedMs: nowMs\n            };\n\n            // sometimes (always?) we're late to hook the TRACK_VIDEOTYPE_CHANGED event and the video type is not in\n            // oldStreamingStatus.\n            if (!('videoType' in this.streamingStatusMap)) {\n                this.streamingStatusMap.videoType = this.track.getVideoType();\n            }\n        }\n        this._changeStreamingStatus(newState);\n    }\n\n    /**\n     * Computes the duration of the current streaming status for the track (i.e. 15 seconds in the INTERRUPTED state)\n     * and sends a track streaming status event.\n     * @param nowMs - The current time (in millis).\n     */\n    maybeSendTrackStreamingStatusEvent(nowMs: number): void {\n        const trackStreamingStatus = this.streamingStatusMap;\n\n        if (trackStreamingStatus\n            && 'startedMs' in trackStreamingStatus\n            && 'videoType' in trackStreamingStatus\n            && 'streamingStatus' in trackStreamingStatus\n            && 'p2p' in trackStreamingStatus) {\n            trackStreamingStatus.value = nowMs - trackStreamingStatus.startedMs;\n            Statistics.sendAnalytics(createTrackStreamingStatusEvent(trackStreamingStatus));\n        }\n    }\n\n    /**\n     * On change in forwarded sources set check all leaving and entering track to change their corresponding statuses.\n     *\n     * @param leavingForwardedSources - The array of sourceName leaving forwarded sources.\n     * @param enteringForwardedSources - The array of sourceName entering forwarded sources.\n     * @param timestamp - The time in millis\n     * @private\n     */\n    onForwardedSourcesChanged(\n            leavingForwardedSources: string[] = [],\n            enteringForwardedSources: string[] = [],\n            timestamp: number): void {\n\n        const sourceName = this.track.getSourceName();\n\n        logger.debug(`Fowarded sources changed leaving=${leavingForwardedSources}, entering=${\n            enteringForwardedSources} at ${timestamp}`);\n\n        // If the browser doesn't fire the mute/onmute events when the remote peer stops/starts sending media,\n        // calculate the streaming status for all the tracks since it won't get triggered automatically on the track\n        // that has started/stopped receiving media.\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            this.figureOutStreamingStatus();\n        }\n\n        if (leavingForwardedSources.includes(sourceName)) {\n            this.track._clearEnteredForwardedSourcesTimestamp();\n            this._clearRestoringTimer();\n            browser.supportsVideoMuteOnConnInterrupted() && this.figureOutStreamingStatus();\n        }\n\n        if (enteringForwardedSources.includes(sourceName)) {\n            // store the timestamp this track is entering forwarded sources\n            this.track._setEnteredForwardedSourcesTimestamp(timestamp);\n            browser.supportsVideoMuteOnConnInterrupted() && this.figureOutStreamingStatus();\n        }\n    }\n\n    /**\n     * Clears the restoring timer for video track and the timestamp for entering forwarded sources.\n     */\n    _clearRestoringTimer(): void {\n        const rTimer = this.restoringTimer;\n\n        if (rTimer) {\n            clearTimeout(rTimer);\n            this.restoringTimer = null;\n        }\n    }\n\n    /**\n     * Checks whether a track had stayed enough in restoring state, compares current time and the time the track\n     * entered in forwarded sources. If it hasn't timedout and there is no timer added, add new timer in order to give\n     * it more time to become active or mark it as interrupted on next check.\n     *\n     * @returns <tt>true</tt> if the track was in restoring state more than the timeout\n     * ({@link DEFAULT_RESTORING_TIMEOUT}.) in order to set its status to interrupted.\n     * @private\n     */\n    _isRestoringTimedout(): boolean {\n        const enteredForwardedSourcesTimestamp = this.track._getEnteredForwardedSourcesTimestamp();\n\n        if (enteredForwardedSourcesTimestamp\n            && (Date.now() - enteredForwardedSourcesTimestamp) >= DEFAULT_RESTORING_TIMEOUT) {\n            return true;\n        }\n\n        // still haven't reached timeout, if there is no timer scheduled, schedule one so we can track the restoring\n        // state and change it after reaching the timeout\n        const rTimer = this.restoringTimer;\n\n        if (!rTimer) {\n            this.restoringTimer = setTimeout(() => this.figureOutStreamingStatus(), DEFAULT_RESTORING_TIMEOUT);\n        }\n\n        return false;\n    }\n\n    /** Checks whether a track is the current track. */\n    _isCurrentTrack(track: JitsiRemoteTrack): boolean {\n        return track.getSourceName() === this.track.getSourceName();\n    }\n\n    /**\n     * Sends a last/final track streaming status event for the track of the user that left the conference.\n     * @param id - The id of the participant that left the conference.\n     */\n    onUserLeft(id: string): void {\n        if (this.track.getParticipantId() === id) {\n            this.maybeSendTrackStreamingStatusEvent(Date.now());\n            this.streamingStatusMap = {};\n        }\n    }\n\n    /**\n     * Handles RTC 'onmute' event for the video track.\n     *\n     * @param track - The video track for which 'onmute' event will be processed.\n     */\n    onTrackRtcMuted(track: JitsiRemoteTrack): void {\n        if (!this._isCurrentTrack(track)) {\n            return;\n        }\n\n        const sourceName = track.getSourceName();\n\n        logger.debug(`Detector track RTC muted: ${sourceName}`, Date.now());\n\n        this.rtcMutedTimestamp = Date.now();\n        if (!track.isMuted()) {\n            // If the user is not muted according to the signalling we'll give it some time, before the streaming\n            // interrupted event is triggered.\n            this.clearTimeout();\n\n            // The timeout is reduced when track is not in the forwarded sources\n            const timeout = this._getVideoFrozenTimeout();\n\n            this.trackTimer = window.setTimeout(() => {\n                logger.debug(`Set RTC mute timeout for: ${sourceName} of ${timeout} ms`);\n                this.clearTimeout();\n                this.figureOutStreamingStatus();\n            }, timeout);\n        }\n    }\n\n    /**\n     * Handles RTC 'onunmute' event for the video track.\n     *\n     * @param track - The video track for which 'onunmute' event will be processed.\n     */\n    onTrackRtcUnmuted(track: JitsiRemoteTrack): void {\n        if (!this._isCurrentTrack(track)) {\n            return;\n        }\n\n        const sourceName = this.track.getSourceName();\n\n        logger.debug(`Detector track RTC unmuted: ${sourceName}`, Date.now());\n\n        this.clearTimeout();\n        this.clearRtcMutedTimestamp();\n\n        this.figureOutStreamingStatus();\n    }\n\n    /**\n     * Here the signalling \"mute\"/\"unmute\" events are processed.\n     *\n     * @param track - The remote video track for which the signalling mute/unmute event will be\n     * processed.\n     */\n    onSignallingMuteChanged(track: JitsiRemoteTrack): void {\n        if (!this._isCurrentTrack(track)) {\n            return;\n        }\n\n        const sourceName = this.track.getSourceName();\n\n        logger.debug(`Detector on track signalling mute changed: ${sourceName}`, track.isMuted());\n\n        this.figureOutStreamingStatus();\n    }\n\n    /**\n     * Sends a track streaming status event as a result of the video type changing.\n     * @deprecated this will go away with full multiple streams support\n     * @param type - The video type.\n     */\n    onTrackVideoTypeChanged(type: VideoType): void {\n        const nowMs = Date.now();\n\n        this.maybeSendTrackStreamingStatusEvent(nowMs);\n\n        this.streamingStatusMap = {\n            ...this.streamingStatusMap || {},\n            videoType: type,\n            startedMs: nowMs\n        };\n    }\n}\n\nexport default TrackStreamingStatusImpl;\n","import * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport { createTtfmEvent } from '../../service/statistics/AnalyticsEvents';\nimport TrackStreamingStatusImpl, { TrackStreamingStatus } from '../connectivity/TrackStreamingStatus';\nimport FeatureFlags from '../flags/FeatureFlags';\nimport Statistics from '../statistics/statistics';\n\nimport JitsiTrack from './JitsiTrack';\n\nconst logger = require('@jitsi/logger').getLogger(__filename);\n\nconst RTCEvents = require('../../service/RTC/RTCEvents');\n\nlet ttfmTrackerAudioAttached = false;\nlet ttfmTrackerVideoAttached = false;\n\n/**\n * List of container events that we are going to process. _onContainerEventHandler will be added as listener to the\n * container for every event in the list.\n */\nconst containerEvents = [ 'abort', 'canplaythrough', 'ended', 'error' ];\n\n/* eslint-disable max-params */\n\n/**\n * Represents a single media track (either audio or video).\n */\nexport default class JitsiRemoteTrack extends JitsiTrack {\n    /**\n     * Creates new JitsiRemoteTrack instance.\n     * @param {RTC} rtc the RTC service instance.\n     * @param {JitsiConference} conference the conference to which this track\n     *        belongs to\n     * @param {string} ownerEndpointId the endpoint ID of the track owner\n     * @param {MediaStream} stream WebRTC MediaStream, parent of the track\n     * @param {MediaStreamTrack} track underlying WebRTC MediaStreamTrack for\n     *        the new JitsiRemoteTrack\n     * @param {MediaType} mediaType the type of the media\n     * @param {VideoType} videoType the type of the video if applicable\n     * @param {number} ssrc the SSRC number of the Media Stream\n     * @param {boolean} muted the initial muted state\n     * @param {boolean} isP2P indicates whether or not this track belongs to a\n     * P2P session\n     * @param {String} sourceName the source name signaled for the track\n     * @throws {TypeError} if <tt>ssrc</tt> is not a number.\n     * @constructor\n     */\n    constructor(\n            rtc,\n            conference,\n            ownerEndpointId,\n            stream,\n            track,\n            mediaType,\n            videoType,\n            ssrc,\n            muted,\n            isP2P,\n            sourceName) {\n        super(\n            conference,\n            stream,\n            track,\n            () => {\n                // Nothing to do if the track is inactive.\n            },\n            mediaType,\n            videoType);\n        this.rtc = rtc;\n\n        // Prevent from mixing up type of SSRC which should be a number\n        if (typeof ssrc !== 'number') {\n            throw new TypeError(`SSRC ${ssrc} is not a number`);\n        }\n        this.ssrc = ssrc;\n        this.ownerEndpointId = ownerEndpointId;\n        this.muted = muted;\n        this.isP2P = isP2P;\n        this._sourceName = sourceName;\n        this._trackStreamingStatus = null;\n        this._trackStreamingStatusImpl = null;\n\n        /**\n         * This holds the timestamp indicating when remote video track entered forwarded sources set. Track entering\n         * forwardedSources will have streaming status restoring and when we start receiving video will become active,\n         * but if video is not received for certain time {@link DEFAULT_RESTORING_TIMEOUT} that track streaming status\n         * will become interrupted.\n         */\n        this._enteredForwardedSourcesTimestamp = null;\n\n        this.addEventListener = this.on = this._addEventListener.bind(this);\n        this.removeEventListener = this.off = this._removeEventListener.bind(this);\n\n        logger.debug(`New remote track added: ${this}`);\n\n        // we want to mark whether the track has been ever muted\n        // to detect ttfm events for startmuted conferences, as it can\n        // significantly increase ttfm values\n        this.hasBeenMuted = muted;\n\n        // Bind 'onmute' and 'onunmute' event handlers\n        if (this.rtc && this.track) {\n            this._bindTrackHandlers();\n        }\n        this._containerHandlers = {};\n        containerEvents.forEach(event => {\n            this._containerHandlers[event] = this._containerEventHandler.bind(this, event);\n        });\n    }\n\n    /* eslint-enable max-params */\n    /**\n     * Attaches the track handlers.\n     *\n     * @returns {void}\n     */\n    _bindTrackHandlers() {\n        this.track.addEventListener('mute', () => this._onTrackMute());\n        this.track.addEventListener('unmute', () => this._onTrackUnmute());\n        this.track.addEventListener('ended', () => {\n            logger.debug(`\"onended\" event(${Date.now()}): ${this}`);\n        });\n    }\n\n    /**\n     * Overrides addEventListener method to init TrackStreamingStatus instance when there are listeners for the\n     * {@link JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED} event.\n     *\n     * @param {string} event - event name\n     * @param {function} handler - event handler\n     */\n    _addEventListener(event, handler) {\n        super.addListener(event, handler);\n\n        if (FeatureFlags.isSourceNameSignalingEnabled()\n            && event === JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED\n            && this.listenerCount(JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED)\n            && !this._trackStreamingStatusImpl\n        ) {\n            this._initTrackStreamingStatus();\n            logger.debug(`Initializing track streaming status: ${this._sourceName}`);\n        }\n    }\n\n    /**\n     * Overrides removeEventListener method to dispose TrackStreamingStatus instance.\n     *\n     * @param {string} event - event name\n     * @param {function} handler - event handler\n     */\n    _removeEventListener(event, handler) {\n        super.removeListener(event, handler);\n\n        if (FeatureFlags.isSourceNameSignalingEnabled()\n            && event === JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED\n            && !this.listenerCount(JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED)\n        ) {\n            this._disposeTrackStreamingStatus();\n            logger.debug(`Disposing track streaming status: ${this._sourceName}`);\n        }\n    }\n\n    /**\n     * Callback invoked when the track is muted. Emits an event notifying\n     * listeners of the mute event.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onTrackMute() {\n        logger.debug(`\"onmute\" event(${Date.now()}): ${this}`);\n\n        this.rtc.eventEmitter.emit(RTCEvents.REMOTE_TRACK_MUTE, this);\n    }\n\n    /**\n     * Callback invoked when the track is unmuted. Emits an event notifying\n     * listeners of the mute event.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onTrackUnmute() {\n        logger.debug(`\"onunmute\" event(${Date.now()}): ${this}`);\n\n        this.rtc.eventEmitter.emit(RTCEvents.REMOTE_TRACK_UNMUTE, this);\n    }\n\n    /**\n     * Removes attached event listeners and dispose TrackStreamingStatus .\n     *\n     * @returns {Promise}\n     */\n    dispose() {\n        if (FeatureFlags.isSourceNameSignalingEnabled()) {\n            this._disposeTrackStreamingStatus();\n        }\n\n        return super.dispose();\n    }\n\n    /**\n     * Sets current muted status and fires an events for the change.\n     * @param value the muted status.\n     */\n    setMute(value) {\n        if (this.muted === value) {\n            return;\n        }\n\n        if (value) {\n            this.hasBeenMuted = true;\n        }\n\n        // we can have a fake video stream\n        if (this.stream) {\n            this.stream.muted = value;\n        }\n\n        this.muted = value;\n        this.emit(JitsiTrackEvents.TRACK_MUTE_CHANGED, this);\n    }\n\n    /**\n     * Returns the current muted status of the track.\n     * @returns {boolean|*|JitsiRemoteTrack.muted} <tt>true</tt> if the track is\n     * muted and <tt>false</tt> otherwise.\n     */\n    isMuted() {\n        return this.muted;\n    }\n\n    /**\n     * Returns the participant id which owns the track.\n     *\n     * @returns {string} the id of the participants. It corresponds to the\n     * Colibri endpoint id/MUC nickname in case of Jitsi-meet.\n     */\n    getParticipantId() {\n        return this.ownerEndpointId;\n    }\n\n    /**\n     * Return false;\n     */\n    isLocal() {\n        return false;\n    }\n\n    /**\n     * Returns the synchronization source identifier (SSRC) of this remote\n     * track.\n     *\n     * @returns {number} the SSRC of this remote track.\n     */\n    getSSRC() {\n        return this.ssrc;\n    }\n\n\n    /**\n     * Returns the tracks source name\n     *\n     * @returns {string} the track's source name\n     */\n    getSourceName() {\n        return this._sourceName;\n    }\n\n    /**\n     * Changes the video type of the track.\n     *\n     * @param {string} type - The new video type(\"camera\", \"desktop\").\n     */\n    _setVideoType(type) {\n        if (this.videoType === type) {\n            return;\n        }\n        this.videoType = type;\n        this.emit(JitsiTrackEvents.TRACK_VIDEOTYPE_CHANGED, type);\n    }\n\n    /**\n     * Handles track play events.\n     */\n    _playCallback() {\n        if (!this.conference.room) {\n            return;\n        }\n\n        const type = this.isVideoTrack() ? 'video' : 'audio';\n\n        const now = window.performance.now();\n\n        console.log(`(TIME) Render ${type}:\\t`, now);\n        this.conference.getConnectionTimes()[`${type}.render`] = now;\n\n        // The conference can be started without calling GUM\n        // FIXME if there would be a module for connection times this kind\n        // of logic (gumDuration or ttfm) should end up there\n        const gumStart = window.connectionTimes['obtainPermissions.start'];\n        const gumEnd = window.connectionTimes['obtainPermissions.end'];\n        const gumDuration\n            = !isNaN(gumEnd) && !isNaN(gumStart) ? gumEnd - gumStart : 0;\n\n        // Subtract the muc.joined-to-session-initiate duration because jicofo\n        // waits until there are 2 participants to start Jingle sessions.\n        const ttfm = now\n            - (this.conference.getConnectionTimes()['session.initiate']\n                - this.conference.getConnectionTimes()['muc.joined'])\n            - gumDuration;\n\n        this.conference.getConnectionTimes()[`${type}.ttfm`] = ttfm;\n        console.log(`(TIME) TTFM ${type}:\\t`, ttfm);\n\n        Statistics.sendAnalytics(createTtfmEvent(\n            {\n                'media_type': type,\n                muted: this.hasBeenMuted,\n                value: ttfm\n            }));\n\n    }\n\n    /**\n     * Attach time to first media tracker only if there is conference and only\n     * for the first element.\n     * @param container the HTML container which can be 'video' or 'audio'\n     * element.\n     * @private\n     */\n    _attachTTFMTracker(container) {\n        if ((ttfmTrackerAudioAttached && this.isAudioTrack())\n            || (ttfmTrackerVideoAttached && this.isVideoTrack())) {\n            return;\n        }\n\n        if (this.isAudioTrack()) {\n            ttfmTrackerAudioAttached = true;\n        }\n        if (this.isVideoTrack()) {\n            ttfmTrackerVideoAttached = true;\n        }\n\n        container.addEventListener('canplay', this._playCallback.bind(this));\n    }\n\n    /**\n     * Called when the track has been attached to a new container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or 'audio' element.\n     * @private\n     */\n    _onTrackAttach(container) {\n        containerEvents.forEach(event => {\n            container.addEventListener(event, this._containerHandlers[event]);\n        });\n    }\n\n    /**\n     * Called when the track has been detached from a container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or 'audio' element.\n     * @private\n     */\n    _onTrackDetach(container) {\n        containerEvents.forEach(event => {\n            container.removeEventListener(event, this._containerHandlers[event]);\n        });\n    }\n\n    /**\n     * An event handler for events triggered by the attached container.\n     *\n     * @param {string} type - The type of the event.\n     */\n    _containerEventHandler(type) {\n        logger.debug(`${type} handler was called for a container with attached ${this}`);\n    }\n\n    /**\n     * Returns a string with a description of the current status of the track.\n     *\n     * @returns {string}\n     */\n    _getStatus() {\n        const { enabled, muted, readyState } = this.track;\n\n        return `readyState: ${readyState}, muted: ${muted}, enabled: ${enabled}`;\n    }\n\n    /**\n     * Initializes trackStreamingStatusImpl.\n     */\n    _initTrackStreamingStatus() {\n        const config = this.conference.options.config;\n\n        this._trackStreamingStatus = TrackStreamingStatus.ACTIVE;\n\n        this._trackStreamingStatusImpl = new TrackStreamingStatusImpl(\n            this.rtc,\n            this.conference,\n            this,\n            {\n                // These options are not public API, leaving it here only as an entry point through config for\n                // tuning up purposes. Default values should be adjusted as soon as optimal values are discovered.\n                p2pRtcMuteTimeout: config._p2pConnStatusRtcMuteTimeout,\n                rtcMuteTimeout: config._peerConnStatusRtcMuteTimeout,\n                outOfForwardedSourcesTimeout: config._peerConnStatusOutOfLastNTimeout\n            });\n\n        this._trackStreamingStatusImpl.init();\n\n        // In some edge cases, both browser 'unmute' and bridge's forwarded sources events are received before a\n        // LargeVideoUpdate is scheduled for auto-pinning a new screenshare track. If there are no layout changes and\n        // no further track events are received for the SS track, a black tile will be displayed for screenshare on\n        // stage. Fire a TRACK_STREAMING_STATUS_CHANGED event if the media is already being received for the remote\n        // track to prevent this from happening.\n        !this._trackStreamingStatusImpl.isVideoTrackFrozen()\n            && this.rtc.eventEmitter.emit(\n                JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED,\n                this,\n                this._trackStreamingStatus);\n    }\n\n    /**\n     * Disposes trackStreamingStatusImpl and clears trackStreamingStatus.\n     */\n    _disposeTrackStreamingStatus() {\n        if (this._trackStreamingStatusImpl) {\n            this._trackStreamingStatusImpl.dispose();\n            this._trackStreamingStatusImpl = null;\n            this._trackStreamingStatus = null;\n        }\n    }\n\n    /**\n     * Updates track's streaming status.\n     *\n     * @param {string} state the current track streaming state. {@link TrackStreamingStatus}.\n     */\n    _setTrackStreamingStatus(status) {\n        this._trackStreamingStatus = status;\n    }\n\n    /**\n     * Returns track's streaming status.\n     *\n     * @returns {string} the streaming status <tt>TrackStreamingStatus</tt> of the track. Returns null\n     * if trackStreamingStatusImpl hasn't been initialized.\n     *\n     * {@link TrackStreamingStatus}.\n     */\n    getTrackStreamingStatus() {\n        return this._trackStreamingStatus;\n    }\n\n    /**\n     * Clears the timestamp of when the track entered forwarded sources.\n     */\n    _clearEnteredForwardedSourcesTimestamp() {\n        this._enteredForwardedSourcesTimestamp = null;\n    }\n\n    /**\n     * Updates the timestamp of when the track entered forwarded sources.\n     *\n     * @param {number} timestamp the time in millis\n     */\n    _setEnteredForwardedSourcesTimestamp(timestamp) {\n        this._enteredForwardedSourcesTimestamp = timestamp;\n    }\n\n    /**\n     * Returns the timestamp of when the track entered forwarded sources.\n     *\n     * @returns {number} the time in millis\n     */\n    _getEnteredForwardedSourcesTimestamp() {\n        return this._enteredForwardedSourcesTimestamp;\n    }\n\n    /**\n     * Creates a text representation of this remote track instance.\n     * @return {string}\n     */\n    toString() {\n        return `RemoteTrack[userID: ${this.getParticipantId()}, type: ${this.getType()}, ssrc: ${\n            this.getSSRC()}, p2p: ${this.isP2P}, sourceName: ${this._sourceName}, status: ${this._getStatus()}]`;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport transform from 'sdp-transform';\n\nimport { MediaDirection } from '../../service/RTC/MediaDirection';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport browser from '../browser';\nimport FeatureFlags from '../flags/FeatureFlags';\n\nconst logger = getLogger(__filename);\nconst DESKTOP_SHARE_RATE = 500000;\nconst LD_BITRATE = 200000;\nconst SD_BITRATE = 700000;\nconst SIM_LAYER_1_RID = '1';\nconst SIM_LAYER_2_RID = '2';\nconst SIM_LAYER_3_RID = '3';\n\nexport const HD_BITRATE = 2500000;\nexport const HD_SCALE_FACTOR = 1;\nexport const LD_SCALE_FACTOR = 4;\nexport const SD_SCALE_FACTOR = 2;\nexport const SIM_LAYER_RIDS = [ SIM_LAYER_1_RID, SIM_LAYER_2_RID, SIM_LAYER_3_RID ];\n\n/**\n * Handles track related operations on TraceablePeerConnection when browser is\n * running in unified plan mode.\n */\nexport class TPCUtils {\n    /**\n     * Creates a new instance for a given TraceablePeerConnection\n     *\n     * @param peerconnection - the tpc instance for which we have utility functions.\n     */\n    constructor(peerconnection) {\n        this.pc = peerconnection;\n        const bitrateSettings = this.pc.options?.videoQuality?.maxBitratesVideo;\n        const standardBitrates = {\n            low: LD_BITRATE,\n            standard: SD_BITRATE,\n            high: HD_BITRATE\n        };\n\n        // Check if the max. bitrates for video are specified through config.js videoQuality settings.\n        // Right now only VP8 bitrates are configured on the simulcast encodings, VP9 bitrates have to be\n        // configured on the SDP using b:AS line.\n        this.videoBitrates = bitrateSettings ?? standardBitrates;\n        const encodingBitrates = this.videoBitrates.VP8 ?? this.videoBitrates;\n\n        /**\n         * The startup configuration for the stream encodings that are applicable to\n         * the video stream when a new sender is created on the peerconnection. The initial\n         * config takes into account the differences in browser's simulcast implementation.\n         *\n         * Encoding parameters:\n         * active - determine the on/off state of a particular encoding.\n         * maxBitrate - max. bitrate value to be applied to that particular encoding\n         *  based on the encoding's resolution and config.js videoQuality settings if applicable.\n         * rid - Rtp Stream ID that is configured for a particular simulcast stream.\n         * scaleResolutionDownBy - the factor by which the encoding is scaled down from the\n         *  original resolution of the captured video.\n         */\n        this.localStreamEncodingsConfig = [\n            {\n                active: true,\n                maxBitrate: browser.isFirefox() ? encodingBitrates.high : encodingBitrates.low,\n                rid: SIM_LAYER_1_RID,\n                scaleResolutionDownBy: browser.isFirefox() ? HD_SCALE_FACTOR : LD_SCALE_FACTOR\n            },\n            {\n                active: true,\n                maxBitrate: encodingBitrates.standard,\n                rid: SIM_LAYER_2_RID,\n                scaleResolutionDownBy: SD_SCALE_FACTOR\n            },\n            {\n                active: true,\n                maxBitrate: browser.isFirefox() ? encodingBitrates.low : encodingBitrates.high,\n                rid: SIM_LAYER_3_RID,\n                scaleResolutionDownBy: browser.isFirefox() ? LD_SCALE_FACTOR : HD_SCALE_FACTOR\n            }\n        ];\n    }\n\n    /**\n     * Obtains stream encodings that need to be configured on the given track based\n     * on the track media type and the simulcast setting.\n     * @param {JitsiLocalTrack} localTrack\n     */\n    _getStreamEncodings(localTrack) {\n        if (this.pc.isSimulcastOn() && localTrack.isVideoTrack()) {\n            return this.localStreamEncodingsConfig;\n        }\n\n        return localTrack.isVideoTrack()\n            ? [ {\n                active: true,\n                maxBitrate: this.videoBitrates.high\n            } ]\n            : [ { active: true } ];\n    }\n\n    /**\n     * Ensures that the ssrcs associated with a FID ssrc-group appear in the correct order, i.e.,\n     * the primary ssrc first and the secondary rtx ssrc later. This is important for unified\n     * plan since we have only one FID group per media description.\n     * @param {Object} description the webRTC session description instance for the remote\n     * description.\n     * @private\n     */\n    ensureCorrectOrderOfSsrcs(description) {\n        const parsedSdp = transform.parse(description.sdp);\n\n        parsedSdp.media.forEach(mLine => {\n            if (mLine.type === MediaType.AUDIO) {\n                return;\n            }\n            if (!mLine.ssrcGroups || !mLine.ssrcGroups.length) {\n                return;\n            }\n            let reorderedSsrcs = [];\n\n            const ssrcs = new Set();\n\n            mLine.ssrcGroups.map(group =>\n                group.ssrcs\n                    .split(' ')\n                    .filter(Boolean)\n                    .forEach(ssrc => ssrcs.add(ssrc))\n            );\n\n            ssrcs.forEach(ssrc => {\n                const sources = mLine.ssrcs.filter(source => source.id.toString() === ssrc);\n\n                reorderedSsrcs = reorderedSsrcs.concat(sources);\n            });\n            mLine.ssrcs = reorderedSsrcs;\n        });\n\n        return new RTCSessionDescription({\n            type: description.type,\n            sdp: transform.write(parsedSdp)\n        });\n    }\n\n    /**\n     * Returns the transceiver associated with a given RTCRtpSender/RTCRtpReceiver.\n     *\n     * @param {string} mediaType - type of track associated with the transceiver 'audio' or 'video'.\n     * @param {JitsiLocalTrack} localTrack - local track to be used for lookup.\n     * @returns {RTCRtpTransceiver}\n     */\n    findTransceiver(mediaType, localTrack = null) {\n        const transceiver = localTrack?.track && localTrack.getOriginalStream()\n            ? this.pc.peerconnection.getTransceivers().find(t => t.sender?.track?.id === localTrack.getTrackId())\n            : this.pc.peerconnection.getTransceivers().find(t => t.receiver?.track?.kind === mediaType);\n\n        return transceiver;\n    }\n\n    /**\n     * Takes in a *unified plan* offer and inserts the appropriate\n     * parameters for adding simulcast receive support.\n     * @param {Object} desc - A session description object\n     * @param {String} desc.type - the type (offer/answer)\n     * @param {String} desc.sdp - the sdp content\n     *\n     * @return {Object} A session description (same format as above) object\n     * with its sdp field modified to advertise simulcast receive support\n     */\n    insertUnifiedPlanSimulcastReceive(desc) {\n        // a=simulcast line is not needed on browsers where we SDP munging is used for enabling on simulcast.\n        // Remove this check when the client switches to RID/MID based simulcast on all browsers.\n        if (browser.usesSdpMungingForSimulcast()) {\n            return desc;\n        }\n        const sdp = transform.parse(desc.sdp);\n        const idx = sdp.media.findIndex(mline => mline.type === MediaType.VIDEO);\n\n        if (sdp.media[idx].rids && (sdp.media[idx].simulcast_03 || sdp.media[idx].simulcast)) {\n            // Make sure we don't have the simulcast recv line on video descriptions other than\n            // the first video description.\n            sdp.media.forEach((mline, i) => {\n                if (mline.type === MediaType.VIDEO && i !== idx) {\n                    sdp.media[i].rids = undefined;\n                    sdp.media[i].simulcast = undefined;\n\n                    // eslint-disable-next-line camelcase\n                    sdp.media[i].simulcast_03 = undefined;\n                }\n            });\n\n            return new RTCSessionDescription({\n                type: desc.type,\n                sdp: transform.write(sdp)\n            });\n        }\n\n        // In order of highest to lowest spatial quality\n        sdp.media[idx].rids = [\n            {\n                id: SIM_LAYER_1_RID,\n                direction: 'recv'\n            },\n            {\n                id: SIM_LAYER_2_RID,\n                direction: 'recv'\n            },\n            {\n                id: SIM_LAYER_3_RID,\n                direction: 'recv'\n            }\n        ];\n\n        // Firefox 72 has stopped parsing the legacy rid= parameters in simulcast attributes.\n        // eslint-disable-next-line max-len\n        // https://www.fxsitecompat.dev/en-CA/docs/2019/pt-and-rid-in-webrtc-simulcast-attributes-are-no-longer-supported/\n        const simulcastLine = browser.isFirefox() && browser.isVersionGreaterThan(71)\n            ? `recv ${SIM_LAYER_RIDS.join(';')}`\n            : `recv rid=${SIM_LAYER_RIDS.join(';')}`;\n\n        // eslint-disable-next-line camelcase\n        sdp.media[idx].simulcast_03 = {\n            value: simulcastLine\n        };\n\n        return new RTCSessionDescription({\n            type: desc.type,\n            sdp: transform.write(sdp)\n        });\n    }\n\n    /**\n    * Adds {@link JitsiLocalTrack} to the WebRTC peerconnection for the first time.\n    * @param {JitsiLocalTrack} track - track to be added to the peerconnection.\n    * @param {boolean} isInitiator - boolean that indicates if the endpoint is offerer in a p2p connection.\n    * @returns {void}\n    */\n    addTrack(localTrack, isInitiator) {\n        const track = localTrack.getTrack();\n\n        if (isInitiator) {\n            const streams = [];\n\n            if (localTrack.getOriginalStream()) {\n                streams.push(localTrack.getOriginalStream());\n            }\n\n            // Use pc.addTransceiver() for the initiator case when local tracks are getting added\n            // to the peerconnection before a session-initiate is sent over to the peer.\n            const transceiverInit = {\n                direction: MediaDirection.SENDRECV,\n                streams,\n                sendEncodings: []\n            };\n\n            if (!browser.isFirefox()) {\n                transceiverInit.sendEncodings = this._getStreamEncodings(localTrack);\n            }\n            this.pc.peerconnection.addTransceiver(track, transceiverInit);\n        } else {\n            // Use pc.addTrack() for responder case so that we can re-use the m-lines that were created\n            // when setRemoteDescription was called. pc.addTrack() automatically  attaches to any existing\n            // unused \"recv-only\" transceiver.\n            this.pc.peerconnection.addTrack(track);\n        }\n    }\n\n    /**\n     * Returns the calculated active state of the simulcast encodings based on the frame height requested for the send\n     * stream. All the encodings that have a resolution lower than the frame height requested will be enabled.\n     *\n     * @param {JitsiLocalTrack} localVideoTrack The local video track.\n     * @param {number} newHeight The resolution requested for the video track.\n     * @returns {Array<boolean>}\n     */\n    calculateEncodingsActiveState(localVideoTrack, newHeight) {\n        const localTrack = localVideoTrack.getTrack();\n        const { height } = localTrack.getSettings();\n        const encodingsState = this.localStreamEncodingsConfig\n        .map(encoding => height / encoding.scaleResolutionDownBy)\n        .map((frameHeight, idx) => {\n            let active = localVideoTrack.getVideoType() === VideoType.CAMERA\n\n                // Keep the LD stream enabled even when the LD stream's resolution is higher than of the requested\n                // resolution. This can happen when camera is captured at resolutions higher than 720p but the\n                // requested resolution is 180. Since getParameters doesn't give us information about the resolutions\n                // of the simulcast encodings, we have to rely on our initial config for the simulcast streams.\n                ? newHeight > 0 && this.localStreamEncodingsConfig[idx]?.scaleResolutionDownBy === LD_SCALE_FACTOR\n                    ? true\n                    : frameHeight <= newHeight\n\n                // Keep all the encodings for desktop track active.\n                : true;\n\n            // Disable the lower spatial layers for screensharing in Unified plan when low fps screensharing is in\n            // progress. Sending all three streams often results in the browser suspending the high resolution in low\n            // b/w and cpu cases, especially on the low end machines. Suspending the low resolution streams ensures\n            // that the highest resolution stream is available always. Safari is an exception here since it does not\n            // send the desktop stream at all if only the high resolution stream is enabled.\n            if (localVideoTrack.getVideoType() === VideoType.DESKTOP\n                && this.pc._capScreenshareBitrate\n                && this.pc.usesUnifiedPlan()\n                && !browser.isWebKitBased()\n                && this.localStreamEncodingsConfig[idx].scaleResolutionDownBy !== HD_SCALE_FACTOR) {\n                active = false;\n            }\n\n            return active;\n        });\n\n        return encodingsState;\n    }\n\n    /**\n     * Returns the calculates max bitrates that need to be configured on the simulcast encodings based on the video\n     * type and other considerations associated with screenshare.\n     *\n     * @param {JitsiLocalTrack} localVideoTrack The local video track.\n     * @returns {Array<number>}\n     */\n    calculateEncodingsBitrates(localVideoTrack) {\n        const videoType = localVideoTrack.getVideoType();\n        const desktopShareBitrate = this.pc.options?.videoQuality?.desktopBitrate || DESKTOP_SHARE_RATE;\n        const presenterEnabled = localVideoTrack._originalStream\n            && localVideoTrack._originalStream.id !== localVideoTrack.getStreamId();\n        const lowFpsScreenshare = localVideoTrack.getVideoType() === VideoType.DESKTOP\n            && this.pc._capScreenshareBitrate\n            && !browser.isWebKitBased();\n        const encodingsBitrates = this.localStreamEncodingsConfig\n        .map(encoding => {\n            const bitrate = lowFpsScreenshare\n\n                // For low fps screensharing, set a max bitrate of 500 Kbps when presenter is not turned on, 2500 Kbps\n                // otherwise.\n                ? presenterEnabled ? HD_BITRATE : desktopShareBitrate\n\n                // For high fps screenshare, 'maxBitrate' setting must be cleared on Chrome in plan-b, because\n                // if simulcast is enabled for screen and maxBitrates are set then Chrome will not send the\n                // desktop stream.\n                : videoType === VideoType.DESKTOP && browser.isChromiumBased() && !this.pc.usesUnifiedPlan()\n                    ? undefined\n                    : encoding.maxBitrate;\n\n            return bitrate;\n        });\n\n        return encodingsBitrates;\n    }\n\n    /**\n     * Replaces the existing track on a RTCRtpSender with the given track.\n     *\n     * @param {JitsiLocalTrack} oldTrack - existing track on the sender that needs to be removed.\n     * @param {JitsiLocalTrack} newTrack - new track that needs to be added to the sender.\n     * @returns {Promise<RTCRtpTransceiver>} - resolved with the associated transceiver when done, rejected otherwise.\n     */\n    replaceTrack(oldTrack, newTrack) {\n        const mediaType = newTrack?.getType() ?? oldTrack?.getType();\n        const localTracks = this.pc.getLocalTracks(mediaType);\n        const track = newTrack?.getTrack() ?? null;\n        const isNewLocalSource = FeatureFlags.isMultiStreamSupportEnabled()\n            && localTracks?.length\n            && !oldTrack\n            && newTrack\n            && !localTracks.find(t => t === newTrack);\n        let transceiver;\n\n        // If old track exists, replace the track on the corresponding sender.\n        if (oldTrack && !oldTrack.isMuted()) {\n            transceiver = this.pc.peerconnection.getTransceivers().find(t => t.sender.track === oldTrack.getTrack());\n\n        // Find the first recvonly transceiver when more than one track of the same media type is being added to the pc.\n        // As part of the track addition, a new m-line was added to the remote description with direction set to\n        // recvonly.\n        } else if (isNewLocalSource) {\n            transceiver = this.pc.peerconnection.getTransceivers().find(\n                t => t.receiver.track.kind === mediaType\n                && t.direction === MediaDirection.RECVONLY\n                && t.currentDirection === MediaDirection.INACTIVE);\n\n        // For mute/unmute operations, find the transceiver based on the track index in the source name if present,\n        // otherwise it is assumed to be the first local track that was added to the peerconnection.\n        } else {\n            transceiver = this.pc.peerconnection.getTransceivers().find(t => t.receiver.track.kind === mediaType);\n            const sourceName = newTrack?.getSourceName() ?? oldTrack?.getSourceName();\n\n            if (sourceName) {\n                const trackIndex = Number(sourceName.split('-')[1].substring(1));\n\n                if (trackIndex) {\n                    transceiver = this.pc.peerconnection.getTransceivers()\n                        .filter(t => t.receiver.track.kind === mediaType\n                            && t.direction !== MediaDirection.RECVONLY)[trackIndex];\n                }\n            }\n        }\n\n        if (!transceiver) {\n            return Promise.reject(new Error('replace track failed'));\n        }\n        logger.debug(`${this.pc} Replacing ${oldTrack} with ${newTrack}`);\n\n        return transceiver.sender.replaceTrack(track)\n            .then(() => Promise.resolve(transceiver));\n    }\n\n    /**\n    * Enables/disables audio transmission on the peer connection. When\n    * disabled the audio transceiver direction will be set to 'inactive'\n    * which means that no data will be sent nor accepted, but\n    * the connection should be kept alive.\n    * @param {boolean} active - true to enable audio media transmission or\n    * false to disable.\n    * @returns {void}\n    */\n    setAudioTransferActive(active) {\n        this.setMediaTransferActive(MediaType.AUDIO, active);\n    }\n\n    /**\n     * Set the simulcast stream encoding properties on the RTCRtpSender.\n     * @param {JitsiLocalTrack} track - the current track in use for which\n     * the encodings are to be set.\n     * @returns {Promise<void>} - resolved when done.\n     */\n    setEncodings(track) {\n        const mediaType = track.getType();\n        const transceiver = this.findTransceiver(mediaType, track);\n        const parameters = transceiver?.sender?.getParameters();\n\n        // Resolve if the encodings are not available yet. This happens immediately after the track is added to the\n        // peerconnection on chrome in unified-plan. It is ok to ignore and not report the error here since the\n        // action that triggers 'addTrack' (like unmute) will also configure the encodings and set bitrates after that.\n        if (!parameters?.encodings?.length) {\n            return Promise.resolve();\n        }\n        parameters.encodings = this._getStreamEncodings(track);\n\n        return transceiver.sender.setParameters(parameters);\n    }\n\n    /**\n     * Enables/disables media transmission on the peerconnection by changing the direction\n     * on the transceiver for the specified media type.\n     * @param {String} mediaType - 'audio' or 'video'\n     * @param {boolean} active - true to enable media transmission or false\n     * to disable.\n     * @returns {void}\n     */\n    setMediaTransferActive(mediaType, active) {\n        const transceivers = this.pc.peerconnection.getTransceivers()\n            .filter(t => t.receiver && t.receiver.track && t.receiver.track.kind === mediaType);\n        const localTracks = this.pc.getLocalTracks(mediaType);\n\n        logger.info(`${this.pc} ${active ? 'Enabling' : 'Suspending'} ${mediaType} media transfer.`);\n        transceivers.forEach((transceiver, idx) => {\n            if (active) {\n                // The first transceiver is for the local track and only this one can be set to 'sendrecv'.\n                // When multi-stream is enabled, there can be multiple transceivers with outbound streams.\n                if (idx < localTracks.length) {\n                    transceiver.direction = MediaDirection.SENDRECV;\n                } else {\n                    transceiver.direction = MediaDirection.RECVONLY;\n                }\n            } else {\n                transceiver.direction = MediaDirection.INACTIVE;\n            }\n        });\n    }\n\n    /**\n    * Enables/disables video media transmission on the peer connection. When\n    * disabled the SDP video media direction in the local SDP will be adjusted to\n    * 'inactive' which means that no data will be sent nor accepted, but\n    * the connection should be kept alive.\n    * @param {boolean} active - true to enable video media transmission or\n    * false to disable.\n    * @returns {void}\n    */\n    setVideoTransferActive(active) {\n        this.setMediaTransferActive(MediaType.VIDEO, active);\n    }\n\n    /**\n     * Ensures that the resolution of the stream encodings are consistent with the values\n     * that were configured on the RTCRtpSender when the source was added to the peerconnection.\n     * This should prevent us from overriding the default values if the browser returns\n     * erroneous values when RTCRtpSender.getParameters is used for getting the encodings info.\n     * @param {Object} parameters - the RTCRtpEncodingParameters obtained from the browser.\n     * @returns {void}\n     */\n    updateEncodingsResolution(parameters) {\n        if (!(browser.isWebKitBased() && parameters.encodings && Array.isArray(parameters.encodings))) {\n            return;\n        }\n        const allEqualEncodings\n            = encodings => encodings.every(encoding => typeof encoding.scaleResolutionDownBy !== 'undefined'\n                && encoding.scaleResolutionDownBy === encodings[0].scaleResolutionDownBy);\n\n        // Implement the workaround only when all the encodings report the same resolution.\n        if (allEqualEncodings(parameters.encodings)) {\n            parameters.encodings.forEach((encoding, idx) => {\n                encoding.scaleResolutionDownBy = this.localStreamEncodingsConfig[idx].scaleResolutionDownBy;\n            });\n        }\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport { Interop } from '@jitsi/sdp-interop';\nimport transform from 'sdp-transform';\n\nimport * as CodecMimeType from '../../service/RTC/CodecMimeType';\nimport { MediaDirection } from '../../service/RTC/MediaDirection';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport * as SignalingEvents from '../../service/RTC/SignalingEvents';\nimport { getSourceNameForJitsiTrack } from '../../service/RTC/SignalingLayer';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport { SS_DEFAULT_FRAME_RATE } from '../RTC/ScreenObtainer';\nimport browser from '../browser';\nimport FeatureFlags from '../flags/FeatureFlags';\nimport LocalSdpMunger from '../sdp/LocalSdpMunger';\nimport RtxModifier from '../sdp/RtxModifier';\nimport SDP from '../sdp/SDP';\nimport SDPUtil from '../sdp/SDPUtil';\nimport SdpConsistency from '../sdp/SdpConsistency';\nimport SdpSimulcast from '../sdp/SdpSimulcast';\nimport { SdpTransformWrap } from '../sdp/SdpTransformUtil';\nimport * as GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nimport JitsiRemoteTrack from './JitsiRemoteTrack';\nimport RTC from './RTC';\nimport {\n    HD_BITRATE,\n    HD_SCALE_FACTOR,\n    SIM_LAYER_RIDS,\n    TPCUtils\n} from './TPCUtils';\n\n// FIXME SDP tools should end up in some kind of util module\n\nconst logger = getLogger(__filename);\nconst DEGRADATION_PREFERENCE_CAMERA = 'maintain-framerate';\nconst DEGRADATION_PREFERENCE_DESKTOP = 'maintain-resolution';\n\n/* eslint-disable max-params */\n\n/**\n * Creates new instance of 'TraceablePeerConnection'.\n *\n * @param {RTC} rtc the instance of <tt>RTC</tt> service\n * @param {number} id the peer connection id assigned by the parent RTC module.\n * @param {SignalingLayer} signalingLayer the signaling layer instance\n * @param {object} pcConfig The {@code RTCConfiguration} to use for the WebRTC peer connection.\n * @param {object} constraints WebRTC 'PeerConnection' constraints\n * @param {boolean} isP2P indicates whether or not the new instance will be used in a peer to peer connection.\n * @param {object} options <tt>TracablePeerConnection</tt> config options.\n * @param {boolean} options.disableSimulcast if set to 'true' will disable the simulcast.\n * @param {boolean} options.disableRtx if set to 'true' will disable the RTX.\n * @param {string} options.disabledCodec the mime type of the code that should not be negotiated on the peerconnection.\n * @param {string} options.preferredCodec the mime type of the codec that needs to be made the preferred codec for the\n * peerconnection.\n * @param {boolean} options.startSilent If set to 'true' no audio will be sent or received.\n * @param {boolean} options.usesUnifiedPlan Indicates if the  browser is running in unified plan mode.\n *\n * FIXME: initially the purpose of TraceablePeerConnection was to be able to\n * debug the peer connection. Since many other responsibilities have been added\n * it would make sense to extract a separate class from it and come up with\n * a more suitable name.\n *\n * @constructor\n */\nexport default function TraceablePeerConnection(\n        rtc,\n        id,\n        signalingLayer,\n        pcConfig,\n        constraints,\n        isP2P,\n        options) {\n\n    /**\n     * Indicates whether or not this peer connection instance is actively\n     * sending/receiving audio media. When set to <tt>false</tt> the SDP audio\n     * media direction will be adjusted to 'inactive' in order to suspend\n     * the transmission.\n     * @type {boolean}\n     * @private\n     */\n    this.audioTransferActive = !(options.startSilent === true);\n\n    /**\n     * The DTMF sender instance used to send DTMF tones.\n     *\n     * @type {RTCDTMFSender|undefined}\n     * @private\n     */\n    this._dtmfSender = undefined;\n\n    /**\n     * @typedef {Object} TouchToneRequest\n     * @property {string} tones - The DTMF tones string as defined by\n     * {@code RTCDTMFSender.insertDTMF}, 'tones' argument.\n     * @property {number} duration - The amount of time in milliseconds that\n     * each DTMF should last.\n     * @property {string} interToneGap - The length of time in miliseconds to\n     * wait between tones.\n     */\n    /**\n     * TouchToneRequests which are waiting to be played. This queue is filled\n     * if there are touch tones currently being played.\n     *\n     * @type {Array<TouchToneRequest>}\n     * @private\n     */\n    this._dtmfTonesQueue = [];\n\n    /**\n     * Indicates whether or not this peer connection instance is actively\n     * sending/receiving video media. When set to <tt>false</tt> the SDP video\n     * media direction will be adjusted to 'inactive' in order to suspend\n     * the transmission.\n     * @type {boolean}\n     * @private\n     */\n    this.videoTransferActive = true;\n\n    /**\n     * The parent instance of RTC service which created this\n     * <tt>TracablePeerConnection</tt>.\n     * @type {RTC}\n     */\n    this.rtc = rtc;\n\n    /**\n     * The peer connection identifier assigned by the RTC module.\n     * @type {number}\n     */\n    this.id = id;\n\n    /**\n     * Indicates whether or not this instance is used in a peer to peer\n     * connection.\n     * @type {boolean}\n     */\n    this.isP2P = isP2P;\n\n    /**\n     * The map holds remote tracks associated with this peer connection. It maps user's JID to media type and a set of\n     * remote tracks.\n     * @type {Map<string, Map<MediaType, Set<JitsiRemoteTrack>>>}\n     */\n    this.remoteTracks = new Map();\n\n    /**\n     * A map which stores local tracks mapped by {@link JitsiLocalTrack.rtcId}\n     * @type {Map<number, JitsiLocalTrack>}\n     */\n    this.localTracks = new Map();\n\n    /**\n     * Keeps tracks of the WebRTC <tt>MediaStream</tt>s that have been added to\n     * the underlying WebRTC PeerConnection.\n     * @type {Array}\n     * @private\n     */\n    this._addedStreams = [];\n\n    /**\n     * @typedef {Object} TPCGroupInfo\n     * @property {string} semantics the SSRC groups semantics\n     * @property {Array<number>} ssrcs group's SSRCs in order where the first\n     * one is group's primary SSRC, the second one is secondary (RTX) and so\n     * on...\n     */\n    /**\n     * @typedef {Object} TPCSSRCInfo\n     * @property {Array<number>} ssrcs an array which holds all track's SSRCs\n     * @property {Array<TPCGroupInfo>} groups an array stores all track's SSRC\n     * groups\n     */\n    /**\n     * Holds the info about local track's SSRCs mapped per their\n     * {@link JitsiLocalTrack.rtcId}\n     * @type {Map<number, TPCSSRCInfo>}\n     */\n    this.localSSRCs = new Map();\n\n    /**\n     * The local ICE username fragment for this session.\n     */\n    this.localUfrag = null;\n\n    /**\n     * The remote ICE username fragment for this session.\n     */\n    this.remoteUfrag = null;\n\n    /**\n     * The DTLS transport object for the PeerConnection.\n     * Note: this assume only one shared transport exists because we bundled\n     *       all streams on the same underlying transport.\n     */\n    this._dtlsTransport = null;\n\n    /**\n     * The signaling layer which operates this peer connection.\n     * @type {SignalingLayer}\n     */\n    this.signalingLayer = signalingLayer;\n\n    // SignalingLayer listeners\n    this._peerVideoTypeChanged = this._peerVideoTypeChanged.bind(this);\n    this.signalingLayer.on(SignalingEvents.PEER_VIDEO_TYPE_CHANGED, this._peerVideoTypeChanged);\n\n    this._peerMutedChanged = this._peerMutedChanged.bind(this);\n    this.signalingLayer.on(SignalingEvents.PEER_MUTED_CHANGED, this._peerMutedChanged);\n    this.options = options;\n\n    // Setup SignalingLayer listeners for source-name based events.\n    this.signalingLayer.on(SignalingEvents.SOURCE_MUTED_CHANGED,\n        (sourceName, isMuted) => this._sourceMutedChanged(sourceName, isMuted));\n    this.signalingLayer.on(SignalingEvents.SOURCE_VIDEO_TYPE_CHANGED,\n        (sourceName, videoType) => this._sourceVideoTypeChanged(sourceName, videoType));\n\n    // Make sure constraints is properly formatted in order to provide information about whether or not this\n    // connection is P2P to rtcstats.\n    const safeConstraints = constraints || {};\n\n    safeConstraints.optional = safeConstraints.optional || [];\n\n    // The `optional` parameter needs to be of type array, otherwise chrome will throw an error.\n    // Firefox and Safari just ignore it.\n    if (Array.isArray(safeConstraints.optional)) {\n        safeConstraints.optional.push({ rtcStatsSFUP2P: this.isP2P });\n    } else {\n        logger.warn('Optional param is not an array, rtcstats p2p data is omitted.');\n    }\n\n    this.peerconnection = new RTCPeerConnection(pcConfig, safeConstraints);\n\n    this.tpcUtils = new TPCUtils(this);\n    this.updateLog = [];\n    this.stats = {};\n    this.statsinterval = null;\n\n    /**\n     * Flag used to indicate if simulcast is turned off and a cap of 500 Kbps is applied on screensharing.\n     */\n    this._capScreenshareBitrate = this.options.capScreenshareBitrate;\n\n    /**\n    * Flag used to indicate if the browser is running in unified  plan mode.\n    */\n    this._usesUnifiedPlan = options.usesUnifiedPlan;\n\n    /**\n     * Flag used to indicate if RTCRtpTransceiver#setCodecPreferences is to be used instead of SDP\n     * munging for codec selection.\n     */\n    this._usesTransceiverCodecPreferences = browser.supportsCodecPreferences() && this._usesUnifiedPlan;\n    this._usesTransceiverCodecPreferences\n        && logger.info('Using RTCRtpTransceiver#setCodecPreferences for codec selection');\n\n    // We currently need these flags only for FF and that's why we are updating them only for unified plan.\n    if (this._usesUnifiedPlan) {\n        /**\n         * Indicates whether an audio track has ever been added to the peer connection.\n         */\n        this._hasHadAudioTrack = false;\n\n        /**\n         * Indicates whether a video track has ever been added to the peer connection.\n         */\n        this._hasHadVideoTrack = false;\n    }\n\n    /**\n     * @type {number} The max number of stats to keep in this.stats. Limit to\n     * 300 values, i.e. 5 minutes; set to 0 to disable\n     */\n    this.maxstats = options.maxstats;\n\n    this.interop = new Interop();\n\n    if (this._usesUnifiedPlan) {\n        this.simulcast = new SdpSimulcast({ numOfLayers: SIM_LAYER_RIDS.length });\n    } else {\n        const Simulcast = require('@jitsi/sdp-simulcast');\n\n        this.simulcast = new Simulcast(\n            {\n                numOfLayers: SIM_LAYER_RIDS.length,\n                explodeRemoteSimulcast: false,\n                usesUnifiedPlan: false\n            });\n    }\n\n    this.sdpConsistency = new SdpConsistency(this.toString());\n\n    /**\n     * Munges local SDP provided to the Jingle Session in order to prevent from\n     * sending SSRC updates on attach/detach and mute/unmute (for video).\n     * @type {LocalSdpMunger}\n     */\n    this.localSdpMunger = new LocalSdpMunger(this, this.rtc.getLocalEndpointId());\n\n    /**\n     * TracablePeerConnection uses RTC's eventEmitter\n     * @type {EventEmitter}\n     */\n    this.eventEmitter = rtc.eventEmitter;\n    this.rtxModifier = new RtxModifier();\n\n    /**\n     * The height constraint applied on the video sender. The default value is 2160 (4K) when layer suspension is\n     * explicitly disabled.\n     */\n    this._senderVideoMaxHeight = 2160;\n\n    /**\n     * The height constraints to be applied on the sender per local video source (source name as the key).\n     * @type {Map<string, number>}\n     */\n    this._senderMaxHeights = new Map();\n\n    // override as desired\n    this.trace = (what, info) => {\n        logger.debug(what, info);\n\n        this.updateLog.push({\n            time: new Date(),\n            type: what,\n            value: info || ''\n        });\n    };\n    this.onicecandidate = null;\n    this.peerconnection.onicecandidate = event => {\n        this.trace(\n            'onicecandidate',\n            JSON.stringify(event.candidate, null, ' '));\n\n        if (this.onicecandidate !== null) {\n            this.onicecandidate(event);\n        }\n    };\n\n    // Use track events when browser is running in unified plan mode and stream events in plan-b mode.\n    if (this._usesUnifiedPlan) {\n        this.onTrack = evt => {\n            const stream = evt.streams[0];\n\n            this._remoteTrackAdded(stream, evt.track, evt.transceiver);\n            stream.addEventListener('removetrack', e => {\n                this._remoteTrackRemoved(stream, e.track);\n            });\n        };\n        this.peerconnection.addEventListener('track', this.onTrack);\n    } else {\n        this.peerconnection.onaddstream = event => this._remoteStreamAdded(event.stream);\n        this.peerconnection.onremovestream = event => this._remoteStreamRemoved(event.stream);\n    }\n    this.onsignalingstatechange = null;\n    this.peerconnection.onsignalingstatechange = event => {\n        this.trace('onsignalingstatechange', this.signalingState);\n        if (this.onsignalingstatechange !== null) {\n            this.onsignalingstatechange(event);\n        }\n    };\n    this.oniceconnectionstatechange = null;\n    this.peerconnection.oniceconnectionstatechange = event => {\n        this.trace('oniceconnectionstatechange', this.iceConnectionState);\n        if (this.oniceconnectionstatechange !== null) {\n            this.oniceconnectionstatechange(event);\n        }\n    };\n    this.onnegotiationneeded = null;\n    this.peerconnection.onnegotiationneeded = event => {\n        this.trace('onnegotiationneeded');\n        if (this.onnegotiationneeded !== null) {\n            this.onnegotiationneeded(event);\n        }\n    };\n    this.onconnectionstatechange = null;\n    this.peerconnection.onconnectionstatechange = event => {\n        this.trace('onconnectionstatechange', this.connectionState);\n        if (this.onconnectionstatechange !== null) {\n            this.onconnectionstatechange(event);\n        }\n    };\n    this.ondatachannel = null;\n    this.peerconnection.ondatachannel = event => {\n        this.trace('ondatachannel');\n        if (this.ondatachannel !== null) {\n            this.ondatachannel(event);\n        }\n    };\n\n    if (this.maxstats) {\n        this.statsinterval = window.setInterval(() => {\n            this.getStats().then(stats => {\n                if (typeof stats?.result === 'function') {\n                    const results = stats.result();\n\n                    for (let i = 0; i < results.length; ++i) {\n                        const res = results[i];\n\n                        res.names().forEach(name => {\n                            this._processStat(res, name, res.stat(name));\n                        });\n                    }\n                } else {\n                    stats.forEach(r => this._processStat(r, '', r));\n                }\n            });\n        }, 1000);\n    }\n\n    logger.info(`Create new ${this}`);\n}\n\n/* eslint-enable max-params */\n\n/**\n * Process stat and adds it to the array of stats we store.\n * @param report the current stats report.\n * @param name the name of the report, if available\n * @param statValue the value to add.\n * @private\n */\nTraceablePeerConnection.prototype._processStat\n    = function(report, name, statValue) {\n        const id = `${report.id}-${name}`;\n        let s = this.stats[id];\n        const now = new Date();\n\n        if (!s) {\n            this.stats[id] = s = {\n                startTime: now,\n                endTime: now,\n                values: [],\n                times: []\n            };\n        }\n        s.values.push(statValue);\n        s.times.push(now.getTime());\n        if (s.values.length > this.maxstats) {\n            s.values.shift();\n            s.times.shift();\n        }\n        s.endTime = now;\n    };\n\n/**\n * Returns a string representation of a SessionDescription object.\n */\nconst dumpSDP = function(description) {\n    if (typeof description === 'undefined' || description === null) {\n        return '';\n    }\n\n    return `type: ${description.type}\\r\\n${description.sdp}`;\n};\n\n\n/**\n * Forwards the {@link peerconnection.iceConnectionState} state except that it\n * will convert \"completed\" into \"connected\" where both mean that the ICE has\n * succeeded and is up and running. We never see \"completed\" state for\n * the JVB connection, but it started appearing for the P2P one. This method\n * allows to adapt old logic to this new situation.\n * @return {string}\n */\nTraceablePeerConnection.prototype.getConnectionState = function() {\n    const state = this.peerconnection.iceConnectionState;\n\n    if (state === 'completed') {\n        return 'connected';\n    }\n\n    return state;\n};\n\n/**\n * Obtains the media direction for given {@link MediaType}. The method takes\n * into account whether or not there are any local tracks for media and\n * the {@link audioTransferActive} and {@link videoTransferActive} flags.\n * @param {MediaType} mediaType\n * @param {boolean} isAddOperation whether the direction is to be calculated after a source-add action.\n * @return {string} one of the SDP direction constants ('sendrecv, 'recvonly'\n * etc.) which should be used when setting local description on the peer\n * connection.\n * @private\n */\nTraceablePeerConnection.prototype.getDesiredMediaDirection = function(mediaType, isAddOperation = false) {\n    const hasLocalSource = this.hasAnyTracksOfType(mediaType);\n\n    if (this._usesUnifiedPlan) {\n        return isAddOperation\n            ? hasLocalSource ? MediaDirection.SENDRECV : MediaDirection.SENDONLY\n            : hasLocalSource ? MediaDirection.RECVONLY : MediaDirection.INACTIVE;\n    }\n\n    const mediaTransferActive = mediaType === MediaType.AUDIO ? this.audioTransferActive : this.videoTransferActive;\n\n    if (mediaTransferActive) {\n        return hasLocalSource ? MediaDirection.SENDRECV : MediaDirection.RECVONLY;\n    }\n\n    return MediaDirection.INACTIVE;\n};\n\n/**\n * Returns the list of RTCRtpReceivers created for the source of the given media type associated with\n * the set of remote endpoints specified.\n * @param {Array<string>} endpoints list of the endpoints\n * @param {string} mediaType 'audio' or 'video'\n * @returns {Array<RTCRtpReceiver>} list of receivers created by the peerconnection.\n */\nTraceablePeerConnection.prototype._getReceiversByEndpointIds = function(endpoints, mediaType) {\n    let remoteTracks = [];\n    let receivers = [];\n\n    for (const endpoint of endpoints) {\n        remoteTracks = remoteTracks.concat(this.getRemoteTracks(endpoint, mediaType));\n    }\n\n    // Get the ids of the MediaStreamTracks associated with each of these remote tracks.\n    const remoteTrackIds = remoteTracks.map(remote => remote.track?.id);\n\n    receivers = this.peerconnection.getReceivers()\n        .filter(receiver => receiver.track\n            && receiver.track.kind === mediaType\n            && remoteTrackIds.find(trackId => trackId === receiver.track.id));\n\n    return receivers;\n};\n\n/**\n * Tells whether or not this TPC instance is using Simulcast.\n * @return {boolean} <tt>true</tt> if simulcast is enabled and active or\n * <tt>false</tt> if it's turned off.\n */\nTraceablePeerConnection.prototype.isSimulcastOn = function() {\n    return !this.options.disableSimulcast;\n};\n\n/**\n * Handles {@link SignalingEvents.PEER_VIDEO_TYPE_CHANGED}\n * @param {string} endpointId the video owner's ID (MUC nickname)\n * @param {VideoType} videoType the new value\n * @private\n */\nTraceablePeerConnection.prototype._peerVideoTypeChanged = function(endpointId, videoType) {\n    // Check if endpointId has a value to avoid action on random track\n    if (!endpointId) {\n        logger.error(`${this} No endpointID on peerVideoTypeChanged`);\n\n        return;\n    }\n    const videoTrack = this.getRemoteTracks(endpointId, MediaType.VIDEO);\n\n    if (videoTrack.length) {\n        // NOTE 1 track per media type is assumed\n        videoTrack[0]._setVideoType(videoType);\n    }\n};\n\n/**\n * Handles remote track mute / unmute events.\n * @param {string} endpointId the track owner's identifier (MUC nickname)\n * @param {MediaType} mediaType \"audio\" or \"video\"\n * @param {boolean} isMuted the new mute state\n * @private\n */\nTraceablePeerConnection.prototype._peerMutedChanged = function(endpointId, mediaType, isMuted) {\n    // Check if endpointId is a value to avoid doing action on all remote tracks\n    if (!endpointId) {\n        logger.error(`${this} On peerMuteChanged - no endpoint ID`);\n\n        return;\n    }\n    const track = this.getRemoteTracks(endpointId, mediaType);\n\n    if (track.length) {\n        // NOTE 1 track per media type is assumed\n        track[0].setMute(isMuted);\n    }\n};\n\n/**\n * Handles remote source mute and unmute changed events.\n *\n * @param {string} sourceName - The name of the remote source.\n * @param {boolean} isMuted - The new mute state.\n */\nTraceablePeerConnection.prototype._sourceMutedChanged = function(sourceName, isMuted) {\n    const track = this.getRemoteTracks().find(t => t.getSourceName() === sourceName);\n\n    if (!track) {\n        return;\n    }\n\n    track.setMute(isMuted);\n};\n\n/**\n * Handles remote source videoType changed events.\n *\n * @param {string} sourceName - The name of the remote source.\n * @param {boolean} isMuted - The new value.\n */\nTraceablePeerConnection.prototype._sourceVideoTypeChanged = function(sourceName, videoType) {\n    const track = this.getRemoteTracks().find(t => t.getSourceName() === sourceName);\n\n    if (!track) {\n        return;\n    }\n\n    track._setVideoType(videoType);\n};\n\n/**\n * Obtains audio levels of the remote audio tracks by getting the source information on the RTCRtpReceivers.\n * The information relevant to the ssrc is updated each time a RTP packet constaining the ssrc is received.\n * @param {Array<string>} speakerList list of endpoint ids for which audio levels are to be gathered.\n * @returns {Object} containing ssrc and audio level information as a key-value pair.\n */\nTraceablePeerConnection.prototype.getAudioLevels = function(speakerList = []) {\n    const audioLevels = {};\n    const audioReceivers = speakerList.length\n        ? this._getReceiversByEndpointIds(speakerList, MediaType.AUDIO)\n        : this.peerconnection.getReceivers()\n            .filter(receiver => receiver.track && receiver.track.kind === MediaType.AUDIO && receiver.track.enabled);\n\n    audioReceivers.forEach(remote => {\n        const ssrc = remote.getSynchronizationSources();\n\n        if (ssrc && ssrc.length) {\n            // As per spec, this audiolevel is a value between 0..1 (linear), where 1.0\n            // represents 0 dBov, 0 represents silence, and 0.5 represents approximately\n            // 6 dBSPL change in the sound pressure level from 0 dBov.\n            // https://www.w3.org/TR/webrtc/#dom-rtcrtpcontributingsource-audiolevel\n            audioLevels[ssrc[0].source] = ssrc[0].audioLevel;\n        }\n    });\n\n    return audioLevels;\n};\n\n/**\n * Obtains local tracks for given {@link MediaType}. If the <tt>mediaType</tt>\n * argument is omitted the list of all local tracks will be returned.\n * @param {MediaType} [mediaType]\n * @return {Array<JitsiLocalTrack>}\n */\nTraceablePeerConnection.prototype.getLocalTracks = function(mediaType) {\n    let tracks = Array.from(this.localTracks.values());\n\n    if (mediaType !== undefined) {\n        tracks = tracks.filter(track => track.getType() === mediaType);\n    }\n\n    return tracks;\n};\n\n/**\n * Retrieves the local video tracks.\n *\n * @returns {Array<JitsiLocalTrack>} - local video tracks.\n */\nTraceablePeerConnection.prototype.getLocalVideoTracks = function() {\n    return this.getLocalTracks(MediaType.VIDEO);\n};\n\n/**\n * Checks whether or not this {@link TraceablePeerConnection} instance contains any local tracks for given\n * <tt>mediaType</tt>.\n *\n * @param {MediaType} mediaType - The media type.\n * @return {boolean}\n */\nTraceablePeerConnection.prototype.hasAnyTracksOfType = function(mediaType) {\n    if (!mediaType) {\n        throw new Error('\"mediaType\" is required');\n    }\n\n    return this.getLocalTracks(mediaType).length > 0;\n};\n\n/**\n * Obtains all remote tracks currently known to this PeerConnection instance.\n *\n * @param {string} [endpointId] - The track owner's identifier (MUC nickname)\n * @param {MediaType} [mediaType] - The remote tracks will be filtered by their media type if this argument is\n * specified.\n * @return {Array<JitsiRemoteTrack>}\n */\nTraceablePeerConnection.prototype.getRemoteTracks = function(endpointId, mediaType) {\n    let remoteTracks = [];\n    const endpoints = endpointId ? [ endpointId ] : this.remoteTracks.keys();\n\n    for (const endpoint of endpoints) {\n        const endpointTracksByMediaType = this.remoteTracks.get(endpoint);\n\n        if (endpointTracksByMediaType) {\n            for (const trackMediaType of endpointTracksByMediaType.keys()) {\n                // per media type filtering\n                if (!mediaType || mediaType === trackMediaType) {\n                    remoteTracks = remoteTracks.concat(Array.from(endpointTracksByMediaType.get(trackMediaType)));\n                }\n            }\n        }\n    }\n\n    return remoteTracks;\n};\n\n/**\n * Parses the remote description and returns the sdp lines of the sources associated with a remote participant.\n *\n * @param {string} id Endpoint id of the remote participant.\n * @returns {Array<string>} The sdp lines that have the ssrc information.\n */\nTraceablePeerConnection.prototype.getRemoteSourceInfoByParticipant = function(id) {\n    const removeSsrcInfo = [];\n    const remoteTracks = this.getRemoteTracks(id);\n\n    if (!remoteTracks?.length) {\n        return removeSsrcInfo;\n    }\n    const primarySsrcs = remoteTracks.map(track => track.getSSRC());\n    const sdp = new SDP(this.remoteDescription.sdp);\n\n    primarySsrcs.forEach((ssrc, idx) => {\n        for (const media of sdp.media) {\n            let lines = '';\n            let ssrcLines = SDPUtil.findLines(media, `a=ssrc:${ssrc}`);\n\n            if (ssrcLines.length) {\n                if (!removeSsrcInfo[idx]) {\n                    removeSsrcInfo[idx] = '';\n                }\n\n                // Check if there are any FID groups present for the primary ssrc.\n                const fidLines = SDPUtil.findLines(media, `a=ssrc-group:FID ${ssrc}`);\n\n                if (fidLines.length) {\n                    const secondarySsrc = fidLines[0].split(' ')[2];\n\n                    lines += `${fidLines[0]}\\r\\n`;\n                    ssrcLines = ssrcLines.concat(SDPUtil.findLines(media, `a=ssrc:${secondarySsrc}`));\n                }\n                removeSsrcInfo[idx] += `${ssrcLines.join('\\r\\n')}\\r\\n`;\n                removeSsrcInfo[idx] += lines;\n            }\n        }\n    });\n\n    return removeSsrcInfo;\n};\n\n/**\n * Returns the target bitrates configured for the local video source.\n *\n * @returns {Object}\n */\nTraceablePeerConnection.prototype.getTargetVideoBitrates = function() {\n    const currentCodec = this.getConfiguredVideoCodec();\n\n    return this.tpcUtils.videoBitrates[currentCodec.toUpperCase()] || this.tpcUtils.videoBitrates;\n};\n\n/**\n * Tries to find {@link JitsiTrack} for given SSRC number. It will search both\n * local and remote tracks bound to this instance.\n * @param {number} ssrc\n * @return {JitsiTrack|null}\n */\nTraceablePeerConnection.prototype.getTrackBySSRC = function(ssrc) {\n    if (typeof ssrc !== 'number') {\n        throw new Error(`SSRC ${ssrc} is not a number`);\n    }\n    for (const localTrack of this.localTracks.values()) {\n        if (this.getLocalSSRC(localTrack) === ssrc) {\n            return localTrack;\n        }\n    }\n    for (const remoteTrack of this.getRemoteTracks()) {\n        if (remoteTrack.getSSRC() === ssrc) {\n            return remoteTrack;\n        }\n    }\n\n    return null;\n};\n\n/**\n * Tries to find SSRC number for given {@link JitsiTrack} id. It will search\n * both local and remote tracks bound to this instance.\n * @param {string} id\n * @return {number|null}\n */\nTraceablePeerConnection.prototype.getSsrcByTrackId = function(id) {\n\n    const findTrackById = track => track.getTrack().id === id;\n    const localTrack = this.getLocalTracks().find(findTrackById);\n\n    if (localTrack) {\n        return this.getLocalSSRC(localTrack);\n    }\n\n    const remoteTrack = this.getRemoteTracks().find(findTrackById);\n\n    if (remoteTrack) {\n        return remoteTrack.getSSRC();\n    }\n\n    return null;\n};\n\n/**\n * Called when new remote MediaStream is added to the PeerConnection.\n * @param {MediaStream} stream the WebRTC MediaStream for remote participant\n */\nTraceablePeerConnection.prototype._remoteStreamAdded = function(stream) {\n    const streamId = stream.id;\n\n    if (!RTC.isUserStreamById(streamId)) {\n        logger.info(`${this} ignored remote 'stream added' event for non-user stream[id=${streamId}]`);\n\n        return;\n    }\n\n    // Bind 'addtrack'/'removetrack' event handlers\n    if (browser.isChromiumBased()) {\n        stream.onaddtrack = event => {\n            this._remoteTrackAdded(stream, event.track);\n        };\n        stream.onremovetrack = event => {\n            this._remoteTrackRemoved(stream, event.track);\n        };\n    }\n\n    // Call remoteTrackAdded for each track in the stream\n    const streamAudioTracks = stream.getAudioTracks();\n\n    for (const audioTrack of streamAudioTracks) {\n        this._remoteTrackAdded(stream, audioTrack);\n    }\n    const streamVideoTracks = stream.getVideoTracks();\n\n    for (const videoTrack of streamVideoTracks) {\n        this._remoteTrackAdded(stream, videoTrack);\n    }\n};\n\n\n/**\n * Called on \"track added\" and \"stream added\" PeerConnection events (because we\n * handle streams on per track basis). Finds the owner and the SSRC for\n * the track and passes that to ChatRoom for further processing.\n * @param {MediaStream} stream the WebRTC MediaStream instance which is\n * the parent of the track\n * @param {MediaStreamTrack} track the WebRTC MediaStreamTrack added for remote\n * participant.\n * @param {RTCRtpTransceiver} transceiver the WebRTC transceiver that is created\n * for the remote participant in unified plan.\n */\nTraceablePeerConnection.prototype._remoteTrackAdded = function(stream, track, transceiver = null) {\n    const streamId = stream.id;\n    const mediaType = track.kind;\n\n    if (!this.isP2P && !RTC.isUserStreamById(streamId)) {\n        logger.info(`${this} ignored remote 'stream added' event for non-user stream[id=${streamId}]`);\n\n        return;\n    }\n    logger.info(`${this} adding remote track for stream[id=${streamId},type=${mediaType}]`);\n\n    // look up an associated JID for a stream id\n    if (!mediaType) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `MediaType undefined for remote track, stream id: ${streamId}`\n            ));\n\n        // Abort\n        return;\n    }\n\n    const remoteSDP = this._usesUnifiedPlan\n        ? new SDP(this.peerconnection.remoteDescription.sdp)\n        : new SDP(this.remoteDescription.sdp);\n    let mediaLines;\n\n    // In unified plan mode, find the matching mline using 'mid' if its availble, otherwise use the\n    // 'msid' attribute of the stream.\n    if (this._usesUnifiedPlan) {\n        if (transceiver && transceiver.mid) {\n            const mid = transceiver.mid;\n\n            mediaLines = remoteSDP.media.filter(mls => SDPUtil.findLine(mls, `a=mid:${mid}`));\n        } else {\n            mediaLines = remoteSDP.media.filter(mls => {\n                const msid = SDPUtil.findLine(mls, 'a=msid:');\n\n                return typeof msid !== 'undefined' && streamId === msid.substring(7).split(' ')[0];\n            });\n        }\n    } else {\n        mediaLines = remoteSDP.media.filter(mls => mls.startsWith(`m=${mediaType}`));\n    }\n\n    if (!mediaLines.length) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(`No media lines found in remote SDP for remote stream[id=${streamId},type=${mediaType}]`));\n\n        // Abort\n        return;\n    }\n\n    let ssrcLines = SDPUtil.findLines(mediaLines[0], 'a=ssrc:');\n\n    ssrcLines\n        = ssrcLines.filter(line => line.indexOf(`msid:${streamId}`) !== -1);\n    if (!ssrcLines.length) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(`No SSRC lines found in remote SDP for remote stream[msid=${streamId},type=${mediaType}]`));\n\n        // Abort\n        return;\n    }\n\n    // FIXME the length of ssrcLines[0] not verified, but it will fail\n    // with global error handler anyway\n    const ssrcStr = ssrcLines[0].substring(7).split(' ')[0];\n    const trackSsrc = Number(ssrcStr);\n    const ownerEndpointId = this.signalingLayer.getSSRCOwner(trackSsrc);\n\n    if (isNaN(trackSsrc) || trackSsrc < 0) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `Invalid SSRC for remote stream[ssrc=${trackSsrc},id=${streamId},type=${mediaType}]`));\n\n        // Abort\n        return;\n    } else if (!ownerEndpointId) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `No SSRC owner known for remote stream[ssrc=${trackSsrc},id=${streamId},type=${mediaType}]`));\n\n        // Abort\n        return;\n    }\n\n\n    let sourceName;\n\n    if (FeatureFlags.isSourceNameSignalingEnabled()) {\n        sourceName = this.signalingLayer.getTrackSourceName(trackSsrc);\n\n        // If source name was not signaled, we'll generate one which allows testing signaling\n        // when mixing legacy(mobile) with new clients.\n        if (!sourceName) {\n            sourceName = getSourceNameForJitsiTrack(ownerEndpointId, mediaType, 0);\n        }\n    }\n\n    // eslint-disable-next-line no-undef\n    logger.info(`${this} creating remote track[endpoint=${ownerEndpointId},ssrc=${trackSsrc},`\n        + `type=${mediaType},sourceName=${sourceName}]`);\n\n    const peerMediaInfo = this.signalingLayer.getPeerMediaInfo(ownerEndpointId, mediaType, sourceName);\n\n    if (!peerMediaInfo) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(`${this}: no peer media info available for ${ownerEndpointId}`));\n\n        return;\n    }\n\n    const muted = peerMediaInfo.muted;\n    const videoType = peerMediaInfo.videoType; // can be undefined\n\n    // eslint-disable-next-line no-undef\n    this._createRemoteTrack(\n        ownerEndpointId, stream, track, mediaType, videoType, trackSsrc, muted, sourceName);\n};\n\n// FIXME cleanup params\n/* eslint-disable max-params */\n\n/**\n * Initializes a new JitsiRemoteTrack instance with the data provided by\n * the signaling layer and SDP.\n *\n * @param {string} ownerEndpointId the owner's endpoint ID (MUC nickname)\n * @param {MediaStream} stream the WebRTC stream instance\n * @param {MediaStreamTrack} track the WebRTC track instance\n * @param {MediaType} mediaType the track's type of the media\n * @param {VideoType} [videoType] the track's type of the video (if applicable)\n * @param {number} ssrc the track's main SSRC number\n * @param {boolean} muted the initial muted status\n * @param {String} sourceName the track's source name\n */\nTraceablePeerConnection.prototype._createRemoteTrack = function(\n        ownerEndpointId,\n        stream,\n        track,\n        mediaType,\n        videoType,\n        ssrc,\n        muted,\n        sourceName) {\n    let remoteTracksMap = this.remoteTracks.get(ownerEndpointId);\n\n    if (!remoteTracksMap) {\n        remoteTracksMap = new Map();\n        remoteTracksMap.set(MediaType.AUDIO, new Set());\n        remoteTracksMap.set(MediaType.VIDEO, new Set());\n        this.remoteTracks.set(ownerEndpointId, remoteTracksMap);\n    }\n\n    const userTracksByMediaType = remoteTracksMap.get(mediaType);\n\n    if (userTracksByMediaType?.size\n        && Array.from(userTracksByMediaType).find(jitsiTrack => jitsiTrack.getTrack() === track)) {\n        // Ignore duplicated event which can originate either from 'onStreamAdded' or 'onTrackAdded'.\n        logger.info(`${this} ignored duplicated track event for track[endpoint=${ownerEndpointId},type=${mediaType}]`);\n\n        return;\n    } else if (userTracksByMediaType?.size && !FeatureFlags.isSourceNameSignalingEnabled()) {\n        logger.error(`${this} received a second remote track for track[endpoint=${ownerEndpointId},type=${mediaType}]`\n            + 'deleting the existing track');\n        const existingTrack = Array.from(userTracksByMediaType)[0];\n\n        // The exisiting track needs to be removed here. This happens on Safari sometimes when a SSRC is removed from\n        // the remote description and the browser doesn't fire a 'removetrack' event on the associated MediaStream.\n        this._remoteTrackRemoved(existingTrack.getOriginalStream(), existingTrack.getTrack());\n    }\n\n    const remoteTrack\n        = new JitsiRemoteTrack(\n                this.rtc,\n                this.rtc.conference,\n                ownerEndpointId,\n                stream,\n                track,\n                mediaType,\n                videoType,\n                ssrc,\n                muted,\n                this.isP2P,\n                sourceName);\n\n    userTracksByMediaType.add(remoteTrack);\n    this.eventEmitter.emit(RTCEvents.REMOTE_TRACK_ADDED, remoteTrack, this);\n};\n\n/* eslint-enable max-params */\n\n/**\n * Handles remote stream removal.\n * @param stream the WebRTC MediaStream object which is being removed from the\n * PeerConnection\n */\nTraceablePeerConnection.prototype._remoteStreamRemoved = function(stream) {\n    if (!RTC.isUserStream(stream)) {\n        logger.info(`Ignored remote 'stream removed' event for stream[id=${stream.id}]`);\n\n        return;\n    }\n\n    // Call remoteTrackRemoved for each track in the stream\n    const streamVideoTracks = stream.getVideoTracks();\n\n    for (const videoTrack of streamVideoTracks) {\n        this._remoteTrackRemoved(stream, videoTrack);\n    }\n    const streamAudioTracks = stream.getAudioTracks();\n\n    for (const audioTrack of streamAudioTracks) {\n        this._remoteTrackRemoved(stream, audioTrack);\n    }\n};\n\n/**\n * Handles remote media track removal.\n *\n * @param {MediaStream} stream - WebRTC MediaStream instance which is the parent of the track.\n * @param {MediaStreamTrack} track - WebRTC MediaStreamTrack which has been removed from the PeerConnection.\n * @returns {void}\n */\nTraceablePeerConnection.prototype._remoteTrackRemoved = function(stream, track) {\n    const streamId = stream.id;\n    const trackId = track?.id;\n\n    if (!RTC.isUserStreamById(streamId)) {\n        logger.info(`${this} ignored remote 'stream removed' event for non-user stream[id=${streamId}]`);\n\n        return;\n    }\n\n    if (!streamId) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(`${this} remote track removal failed - no stream ID`));\n\n        return;\n    }\n\n    if (!trackId) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(`${this} remote track removal failed - no track ID`));\n\n        return;\n    }\n\n    const toBeRemoved = this.getRemoteTracks().find(\n        remoteTrack => remoteTrack.getStreamId() === streamId\n        && remoteTrack.getTrackId() === trackId);\n\n    if (!toBeRemoved) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(`${this} remote track removal failed - track not found`));\n\n        return;\n    }\n\n    logger.info(`${this} remote track removed stream[id=${streamId},trackId=${trackId}]`);\n    this._removeRemoteTrack(toBeRemoved);\n};\n\n/**\n * Removes all JitsiRemoteTracks associated with given MUC nickname (resource part of the JID).\n *\n * @param {string} owner - The resource part of the MUC JID.\n * @returns {JitsiRemoteTrack[]} - The array of removed tracks.\n */\nTraceablePeerConnection.prototype.removeRemoteTracks = function(owner) {\n    let removedTracks = [];\n    const remoteTracksByMedia = this.remoteTracks.get(owner);\n\n    if (remoteTracksByMedia) {\n        removedTracks = removedTracks.concat(Array.from(remoteTracksByMedia.get(MediaType.AUDIO)));\n        removedTracks = removedTracks.concat(Array.from(remoteTracksByMedia.get(MediaType.VIDEO)));\n        this.remoteTracks.delete(owner);\n    }\n    logger.debug(`${this} removed remote tracks[endpoint=${owner},count=${removedTracks.length}`);\n\n    return removedTracks;\n};\n\n/**\n * Removes and disposes given <tt>JitsiRemoteTrack</tt> instance. Emits {@link RTCEvents.REMOTE_TRACK_REMOVED}.\n *\n * @param {JitsiRemoteTrack} toBeRemoved - The remote track to be removed.\n * @returns {void}\n */\nTraceablePeerConnection.prototype._removeRemoteTrack = function(toBeRemoved) {\n    toBeRemoved.dispose();\n    const participantId = toBeRemoved.getParticipantId();\n    const userTracksByMediaType = this.remoteTracks.get(participantId);\n\n    if (!userTracksByMediaType) {\n        logger.error(`${this} removeRemoteTrack: no remote tracks map for endpoint=${participantId}`);\n    } else if (!userTracksByMediaType.get(toBeRemoved.getType())?.delete(toBeRemoved)) {\n        logger.error(`${this} Failed to remove ${toBeRemoved} - type mapping messed up ?`);\n    }\n    this.eventEmitter.emit(RTCEvents.REMOTE_TRACK_REMOVED, toBeRemoved);\n};\n\n/**\n * Returns a map with keys msid/mediaType and <tt>TrackSSRCInfo</tt> values.\n * @param {RTCSessionDescription} desc the local description.\n * @return {Map<string,TrackSSRCInfo>}\n */\nTraceablePeerConnection.prototype._extractSSRCMap = function(desc) {\n    /**\n     * Track SSRC infos mapped by stream ID (msid) or mediaType (unified-plan)\n     * @type {Map<string,TrackSSRCInfo>}\n     */\n    const ssrcMap = new Map();\n\n    /**\n     * Groups mapped by primary SSRC number\n     * @type {Map<number,Array<SSRCGroupInfo>>}\n     */\n    const groupsMap = new Map();\n\n    if (typeof desc !== 'object' || desc === null\n        || typeof desc.sdp !== 'string') {\n        logger.warn('An empty description was passed as an argument');\n\n        return ssrcMap;\n    }\n\n    const session = transform.parse(desc.sdp);\n\n    if (!Array.isArray(session.media)) {\n        return ssrcMap;\n    }\n\n    let media = session.media;\n\n    // For unified plan clients, only the first audio and video mlines will have ssrcs for the local sources.\n    // The rest of the m-lines are for the recv-only sources, one for each remote source.\n    if (this._usesUnifiedPlan) {\n        if (FeatureFlags.isMultiStreamSupportEnabled()) {\n            media = media.filter(mline => mline.direction === MediaDirection.SENDONLY\n                || mline.direction === MediaDirection.SENDRECV);\n        } else {\n            media = [];\n            [ MediaType.AUDIO, MediaType.VIDEO ].forEach(mediaType => {\n                const mLine = session.media.find(m => m.type === mediaType);\n\n                mLine && media.push(mLine);\n            });\n        }\n    }\n\n    let index = 0;\n\n    for (const mLine of media) {\n        if (!Array.isArray(mLine.ssrcs)) {\n            continue; // eslint-disable-line no-continue\n        }\n\n        if (Array.isArray(mLine.ssrcGroups)) {\n            for (const group of mLine.ssrcGroups) {\n                if (typeof group.semantics !== 'undefined' && typeof group.ssrcs !== 'undefined') {\n                    // Parse SSRCs and store as numbers\n                    const groupSSRCs = group.ssrcs.split(' ').map(ssrcStr => parseInt(ssrcStr, 10));\n                    const primarySSRC = groupSSRCs[0];\n\n                    // Note that group.semantics is already present\n                    group.ssrcs = groupSSRCs;\n\n                    // eslint-disable-next-line max-depth\n                    if (!groupsMap.has(primarySSRC)) {\n                        groupsMap.set(primarySSRC, []);\n                    }\n                    groupsMap.get(primarySSRC).push(group);\n                }\n            }\n        }\n\n        let ssrcs = mLine.ssrcs;\n\n        // Filter the ssrcs with 'msid' attribute for plan-b clients and 'cname' for unified-plan clients.\n        ssrcs = this._usesUnifiedPlan\n            ? ssrcs.filter(s => s.attribute === 'cname')\n            : ssrcs.filter(s => s.attribute === 'msid');\n\n        for (const ssrc of ssrcs) {\n            // Use the mediaType as key for the source map for unified plan clients since msids are not part of\n            // the standard and the unified plan SDPs do not have a proper msid attribute for the sources.\n            // Also the ssrcs for sources do not change for Unified plan clients since RTCRtpSender#replaceTrack is\n            // used for switching the tracks so it is safe to use the mediaType as the key for the TrackSSRCInfo map.\n            const key = this._usesUnifiedPlan\n                ? FeatureFlags.isMultiStreamSupportEnabled() ? `${mLine.type}-${index}` : mLine.type\n                : ssrc.value;\n            const ssrcNumber = ssrc.id;\n            let ssrcInfo = ssrcMap.get(key);\n\n            if (!ssrcInfo) {\n                ssrcInfo = {\n                    ssrcs: [],\n                    groups: [],\n                    msid: key\n                };\n                ssrcMap.set(key, ssrcInfo);\n            }\n            ssrcInfo.ssrcs.push(ssrcNumber);\n\n            if (groupsMap.has(ssrcNumber)) {\n                const ssrcGroups = groupsMap.get(ssrcNumber);\n\n                for (const group of ssrcGroups) {\n                    ssrcInfo.groups.push(group);\n                }\n            }\n        }\n\n        // Currently multi-stream is supported for video only.\n        mLine.type === MediaType.VIDEO && index++;\n    }\n\n    return ssrcMap;\n};\n\n/**\n * Takes a SessionDescription object and returns a \"normalized\" version.\n * Currently it takes care of ordering the a=ssrc lines and denoting receive\n * only SSRCs.\n */\nconst normalizePlanB = function(desc) {\n    if (typeof desc !== 'object' || desc === null\n        || typeof desc.sdp !== 'string') {\n        logger.warn('An empty description was passed as an argument');\n\n        return desc;\n    }\n\n    // eslint-disable-next-line no-shadow\n    const transform = require('sdp-transform');\n    const session = transform.parse(desc.sdp);\n\n    if (typeof session !== 'undefined'\n            && typeof session.media !== 'undefined'\n            && Array.isArray(session.media)) {\n        session.media.forEach(mLine => {\n\n            // Chrome appears to be picky about the order in which a=ssrc lines\n            // are listed in an m-line when rtx is enabled (and thus there are\n            // a=ssrc-group lines with FID semantics). Specifically if we have\n            // \"a=ssrc-group:FID S1 S2\" and the \"a=ssrc:S2\" lines appear before\n            // the \"a=ssrc:S1\" lines, SRD fails.\n            // So, put SSRC which appear as the first SSRC in an FID ssrc-group\n            // first.\n            const firstSsrcs = [];\n            const newSsrcLines = [];\n\n            if (typeof mLine.ssrcGroups !== 'undefined'\n                && Array.isArray(mLine.ssrcGroups)) {\n                mLine.ssrcGroups.forEach(group => {\n                    if (typeof group.semantics !== 'undefined'\n                        && group.semantics === 'FID') {\n                        if (typeof group.ssrcs !== 'undefined') {\n                            firstSsrcs.push(Number(group.ssrcs.split(' ')[0]));\n                        }\n                    }\n                });\n            }\n\n            if (Array.isArray(mLine.ssrcs)) {\n                let i;\n\n                for (i = 0; i < mLine.ssrcs.length; i++) {\n                    if (typeof mLine.ssrcs[i] === 'object'\n                        && typeof mLine.ssrcs[i].id !== 'undefined'\n                        && firstSsrcs.indexOf(mLine.ssrcs[i].id) >= 0) {\n                        newSsrcLines.push(mLine.ssrcs[i]);\n                        delete mLine.ssrcs[i];\n                    }\n                }\n\n                for (i = 0; i < mLine.ssrcs.length; i++) {\n                    if (typeof mLine.ssrcs[i] !== 'undefined') {\n                        newSsrcLines.push(mLine.ssrcs[i]);\n                    }\n                }\n\n                mLine.ssrcs = replaceDefaultUnifiedPlanMsid(newSsrcLines);\n            }\n        });\n    }\n\n    const resStr = transform.write(session);\n\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: resStr\n    });\n};\n\n/**\n * Unified plan differentiates a remote track not associated with a stream using\n * the msid \"-\", which can incorrectly trigger an onaddstream event in plan-b.\n * For jitsi, these tracks are actually receive-only ssrcs. To prevent\n * onaddstream from firing, remove the ssrcs with msid \"-\" except the cname\n * line. Normally the ssrcs are not used by the client, as the bridge controls\n * media flow, but keep one reference to the ssrc for the p2p case.\n *\n * @param {Array<Object>} ssrcLines - The ssrc lines from a remote description.\n * @private\n * @returns {Array<Object>} ssrcLines with removed lines referencing msid \"-\".\n */\nfunction replaceDefaultUnifiedPlanMsid(ssrcLines = []) {\n    if (!browser.isChrome() || !browser.isVersionGreaterThan(70)) {\n        return ssrcLines;\n    }\n\n    let filteredLines = [ ...ssrcLines ];\n\n    const problematicSsrcIds = ssrcLines.filter(ssrcLine =>\n        ssrcLine.attribute === 'mslabel' && ssrcLine.value === '-')\n        .map(ssrcLine => ssrcLine.id);\n\n    problematicSsrcIds.forEach(ssrcId => {\n        // Find the cname which is to be modified and left in.\n        const cnameLine = filteredLines.find(line =>\n            line.id === ssrcId && line.attribute === 'cname');\n\n        cnameLine.value = `${MediaDirection.RECVONLY}-${ssrcId}`;\n\n        // Remove all of lines for the ssrc.\n        filteredLines\n            = filteredLines.filter(line => line.id !== ssrcId);\n\n        // But re-add the cname line so there is a reference kept to the ssrc\n        // in the SDP.\n        filteredLines.push(cnameLine);\n    });\n\n    return filteredLines;\n}\n\n/**\n * Makes sure that both audio and video directions are configured as 'sendrecv'.\n * @param {Object} localDescription the SDP object as defined by WebRTC.\n * @param {object} options <tt>TracablePeerConnection</tt> config options.\n */\nconst enforceSendRecv = function(localDescription, options) {\n    if (!localDescription) {\n        throw new Error('No local description passed in.');\n    }\n\n    const transformer = new SdpTransformWrap(localDescription.sdp);\n    const audioMedia = transformer.selectMedia(MediaType.AUDIO)?.[0];\n    let changed = false;\n\n    if (audioMedia && audioMedia.direction !== MediaDirection.SENDRECV) {\n        if (options.startSilent) {\n            audioMedia.direction = MediaDirection.INACTIVE;\n        } else {\n            audioMedia.direction = MediaDirection.SENDRECV;\n        }\n\n        changed = true;\n    }\n\n    const videoMedia = transformer.selectMedia(MediaType.VIDEO)?.[0];\n\n    if (videoMedia && videoMedia.direction !== MediaDirection.SENDRECV) {\n        videoMedia.direction = MediaDirection.SENDRECV;\n        changed = true;\n    }\n\n    if (changed) {\n        return new RTCSessionDescription({\n            type: localDescription.type,\n            sdp: transformer.toRawSDP()\n        });\n    }\n\n    return localDescription;\n};\n\n/**\n *\n * @param {JitsiLocalTrack} localTrack\n */\nTraceablePeerConnection.prototype.getLocalSSRC = function(localTrack) {\n    const ssrcInfo = this._getSSRC(localTrack.rtcId);\n\n    return ssrcInfo && ssrcInfo.ssrcs[0];\n};\n\n/**\n * When doing unified plan simulcast, we'll have a set of ssrcs but no ssrc-groups on Firefox. Unfortunately, Jicofo\n * will complain if it sees ssrcs with matching msids but no ssrc-group, so a ssrc-group line is injected to make\n * Jicofo happy.\n *\n * @param desc A session description object (with 'type' and 'sdp' fields)\n * @return A session description object with its sdp field modified to contain an inject ssrc-group for simulcast.\n */\nTraceablePeerConnection.prototype._injectSsrcGroupForUnifiedSimulcast = function(desc) {\n    const sdp = transform.parse(desc.sdp);\n    const video = sdp.media.find(mline => mline.type === 'video');\n\n    // Check if the browser supports RTX, add only the primary ssrcs to the SIM group if that is the case.\n    video.ssrcGroups = video.ssrcGroups || [];\n    const fidGroups = video.ssrcGroups.filter(group => group.semantics === 'FID');\n\n    if (video.simulcast || video.simulcast_03) {\n        const ssrcs = [];\n\n        if (fidGroups && fidGroups.length) {\n            fidGroups.forEach(group => {\n                ssrcs.push(group.ssrcs.split(' ')[0]);\n            });\n        } else {\n            video.ssrcs.forEach(ssrc => {\n                if (ssrc.attribute === 'msid') {\n                    ssrcs.push(ssrc.id);\n                }\n            });\n        }\n        if (video.ssrcGroups.find(group => group.semantics === 'SIM')) {\n            // Group already exists, no need to do anything\n            return desc;\n        }\n\n        // Add a SIM group for every 3 FID groups.\n        for (let i = 0; i < ssrcs.length; i += 3) {\n            const simSsrcs = ssrcs.slice(i, i + 3);\n\n            video.ssrcGroups.push({\n                semantics: 'SIM',\n                ssrcs: simSsrcs.join(' ')\n            });\n        }\n    }\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: transform.write(sdp)\n    });\n};\n\n/* eslint-disable-next-line vars-on-top */\nconst getters = {\n    signalingState() {\n        return this.peerconnection.signalingState;\n    },\n    iceConnectionState() {\n        return this.peerconnection.iceConnectionState;\n    },\n    connectionState() {\n        return this.peerconnection.connectionState;\n    },\n    localDescription() {\n        let desc = this.peerconnection.localDescription;\n\n        if (!desc) {\n            logger.debug(`${this} getLocalDescription no localDescription found`);\n\n            return {};\n        }\n\n        this.trace('getLocalDescription::preTransform', dumpSDP(desc));\n\n        // If the browser is running in unified plan mode and this is a jvb connection,\n        // transform the SDP to Plan B first.\n        if (this._usesUnifiedPlan && !this.isP2P) {\n            desc = this.interop.toPlanB(desc);\n            this.trace('getLocalDescription::postTransform (Plan B)',\n                dumpSDP(desc));\n\n            desc = this._injectSsrcGroupForUnifiedSimulcast(desc);\n            this.trace('getLocalDescription::postTransform (inject ssrc group)',\n                dumpSDP(desc));\n        } else if (!this._usesUnifiedPlan) {\n            if (browser.doesVideoMuteByStreamRemove()) {\n                desc = this.localSdpMunger.maybeAddMutedLocalVideoTracksToSDP(desc);\n                logger.debug(\n                    'getLocalDescription::postTransform (munge local SDP)', desc);\n            }\n\n            // What comes out of this getter will be signalled over Jingle to\n            // the other peer, so we need to make sure the media direction is\n            // 'sendrecv' because we won't change the direction later and don't want\n            // the other peer to think we can't send or receive.\n            //\n            // Note that the description we set in chrome does have the accurate\n            // direction (e.g. 'recvonly'), since that is technically what is\n            // happening (check setLocalDescription impl).\n            desc = enforceSendRecv(desc, this.options);\n        }\n\n        // See the method's doc for more info about this transformation.\n        desc = this.localSdpMunger.transformStreamIdentifiers(desc);\n\n        return desc;\n    },\n    remoteDescription() {\n        let desc = this.peerconnection.remoteDescription;\n\n        if (!desc) {\n            logger.debug(`${this} getRemoteDescription no remoteDescription found`);\n\n            return {};\n        }\n        this.trace('getRemoteDescription::preTransform', dumpSDP(desc));\n\n        if (this._usesUnifiedPlan) {\n            if (this.isP2P) {\n                // Adjust the media direction for p2p based on whether a local source has been added.\n                desc = this._adjustRemoteMediaDirection(desc);\n            } else {\n                // If this is a jvb connection, transform the SDP to Plan B first.\n                desc = this.interop.toPlanB(desc);\n                this.trace('getRemoteDescription::postTransform (Plan B)', dumpSDP(desc));\n            }\n        }\n\n        return desc;\n    }\n};\n\nObject.keys(getters).forEach(prop => {\n    Object.defineProperty(\n        TraceablePeerConnection.prototype,\n        prop, {\n            get: getters[prop]\n        }\n    );\n});\n\nTraceablePeerConnection.prototype._getSSRC = function(rtcId) {\n    return this.localSSRCs.get(rtcId);\n};\n\n/**\n * Checks if low fps screensharing is in progress.\n *\n * @private\n * @returns {boolean} Returns true if 5 fps screensharing is in progress, false otherwise.\n */\nTraceablePeerConnection.prototype.isSharingLowFpsScreen = function() {\n    return this._isSharingScreen() && this._capScreenshareBitrate;\n};\n\n/**\n * Checks if screensharing is in progress.\n *\n * @returns {boolean}  Returns true if a desktop track has been added to the peerconnection, false otherwise.\n */\nTraceablePeerConnection.prototype._isSharingScreen = function() {\n    const tracks = this.getLocalVideoTracks();\n\n    return Boolean(tracks.find(track => track.videoType === VideoType.DESKTOP));\n};\n\n/**\n * Munges the order of the codecs in the SDP passed based on the preference\n * set through config.js settings. All instances of the specified codec are\n * moved up to the top of the list when it is preferred. The specified codec\n * is deleted from the list if the configuration specifies that the codec be\n * disabled.\n * @param {RTCSessionDescription} description that needs to be munged.\n * @returns {RTCSessionDescription} the munged description.\n */\nTraceablePeerConnection.prototype._mungeCodecOrder = function(description) {\n    if (!this.codecPreference) {\n        return description;\n    }\n\n    const parsedSdp = transform.parse(description.sdp);\n\n    // Only the m-line that defines the source the browser will be sending should need to change.\n    // This is typically the first m-line with the matching media type.\n    const mLine = parsedSdp.media.find(m => m.type === this.codecPreference.mediaType);\n\n    if (!mLine) {\n        return description;\n    }\n\n    if (this.codecPreference.enable) {\n        SDPUtil.preferCodec(mLine, this.codecPreference.mimeType);\n\n        // Strip the high profile H264 codecs on mobile clients for p2p connection.\n        // High profile codecs give better quality at the expense of higher load which\n        // we do not want on mobile clients.\n        // Jicofo offers only the baseline code for the jvb connection.\n        // TODO - add check for mobile browsers once js-utils provides that check.\n        if (this.codecPreference.mimeType === CodecMimeType.H264 && browser.isReactNative() && this.isP2P) {\n            SDPUtil.stripCodec(mLine, this.codecPreference.mimeType, true /* high profile */);\n        }\n    } else {\n        SDPUtil.stripCodec(mLine, this.codecPreference.mimeType);\n    }\n\n    return new RTCSessionDescription({\n        type: description.type,\n        sdp: transform.write(parsedSdp)\n    });\n};\n\n/**\n * Add {@link JitsiLocalTrack} to this TPC.\n * @param {JitsiLocalTrack} track\n * @param {boolean} isInitiator indicates if the endpoint is the offerer.\n * @returns {Promise<void>} - resolved when done.\n */\nTraceablePeerConnection.prototype.addTrack = function(track, isInitiator = false) {\n    const rtcId = track.rtcId;\n\n    logger.info(`${this} adding ${track}`);\n\n    if (this.localTracks.has(rtcId)) {\n\n        return Promise.reject(new Error(`${track} is already in ${this}`));\n    }\n\n    this.localTracks.set(rtcId, track);\n    const webrtcStream = track.getOriginalStream();\n\n    if (this._usesUnifiedPlan) {\n        logger.debug(`${this} TPC.addTrack using unified plan`);\n        try {\n            this.tpcUtils.addTrack(track, isInitiator);\n            if (track) {\n                if (track.isAudioTrack()) {\n                    this._hasHadAudioTrack = true;\n                } else {\n                    this._hasHadVideoTrack = true;\n                }\n            }\n        } catch (error) {\n            logger.error(`${this} Adding track=${track} failed: ${error?.message}`);\n\n            return Promise.reject(error);\n        }\n    } else {\n        // Use addStream API for the plan-b case.\n        if (webrtcStream) {\n            this._addStream(webrtcStream);\n\n        // It's not ok for a track to not have a WebRTC stream if:\n        } else if (!browser.doesVideoMuteByStreamRemove()\n                    || track.isAudioTrack()\n                    || (track.isVideoTrack() && !track.isMuted())) {\n            return Promise.reject(new Error(`${this} no WebRTC stream for track=${track}`));\n        }\n\n        // Muted video tracks do not have WebRTC stream\n        if (browser.doesVideoMuteByStreamRemove() && track.isVideoTrack() && track.isMuted()) {\n            const ssrcInfo = this.generateNewStreamSSRCInfo(track);\n\n            this.sdpConsistency.setPrimarySsrc(ssrcInfo.ssrcs[0]);\n            const simGroup\n                = ssrcInfo.groups.find(groupInfo => groupInfo.semantics === 'SIM');\n\n            if (simGroup) {\n                this.simulcast.setSsrcCache(simGroup.ssrcs);\n            }\n            const fidGroups\n                = ssrcInfo.groups.filter(\n                    groupInfo => groupInfo.semantics === 'FID');\n\n            if (fidGroups) {\n                const rtxSsrcMapping = new Map();\n\n                fidGroups.forEach(fidGroup => {\n                    const primarySsrc = fidGroup.ssrcs[0];\n                    const rtxSsrc = fidGroup.ssrcs[1];\n\n                    rtxSsrcMapping.set(primarySsrc, rtxSsrc);\n                });\n                this.rtxModifier.setSsrcCache(rtxSsrcMapping);\n            }\n        }\n    }\n    let promiseChain = Promise.resolve();\n\n    // On Firefox, the encodings have to be configured on the sender only after the transceiver is created.\n    if (browser.isFirefox()) {\n        promiseChain = promiseChain.then(() => webrtcStream && this.tpcUtils.setEncodings(track));\n    }\n\n    return promiseChain;\n};\n\n/**\n * Adds local track to the RTCPeerConnection.\n *\n * @param {JitsiLocalTrack} track the track to be added to the pc.\n * @return {Promise<boolean>} Promise that resolves to true if the underlying PeerConnection's state has changed and\n * renegotiation is required, false if no renegotiation is needed or Promise is rejected when something goes wrong.\n */\nTraceablePeerConnection.prototype.addTrackToPc = function(track) {\n    logger.info(`${this} Adding track=${track} to PC`);\n\n    if (!this._assertTrackBelongs('addTrackToPc', track)) {\n        // Abort\n\n        return Promise.reject('Track not found on the peerconnection');\n    }\n\n    const webRtcStream = track.getOriginalStream();\n\n    if (!webRtcStream) {\n        logger.error(`${this} Unable to add track=${track} to PC - no WebRTC stream`);\n\n        return Promise.reject('Stream not found');\n    }\n\n    if (this._usesUnifiedPlan) {\n        return this.tpcUtils.replaceTrack(null, track).then(() => {\n            if (track) {\n                if (track.isAudioTrack()) {\n                    this._hasHadAudioTrack = true;\n                } else {\n                    this._hasHadVideoTrack = true;\n                }\n            }\n\n            return false;\n        });\n    }\n\n    this._addStream(webRtcStream);\n\n    return Promise.resolve(true);\n};\n\n/**\n * Adds WebRTC media stream to the underlying PeerConnection\n * @param {MediaStream} mediaStream\n * @private\n */\nTraceablePeerConnection.prototype._addStream = function(mediaStream) {\n    this.peerconnection.addStream(mediaStream);\n    this._addedStreams.push(mediaStream);\n};\n\n/**\n * Removes WebRTC media stream from the underlying PeerConection\n * @param {MediaStream} mediaStream\n */\nTraceablePeerConnection.prototype._removeStream = function(mediaStream) {\n    this.peerconnection.removeStream(mediaStream);\n    this._addedStreams\n        = this._addedStreams.filter(stream => stream !== mediaStream);\n};\n\n/**\n * This method when called will check if given <tt>localTrack</tt> belongs to\n * this TPC (that it has been previously added using {@link addTrack}). If the\n * track does not belong an error message will be logged.\n * @param {string} methodName the method name that will be logged in an error\n * message\n * @param {JitsiLocalTrack} localTrack\n * @return {boolean} <tt>true</tt> if given local track belongs to this TPC or\n * <tt>false</tt> otherwise.\n * @private\n */\nTraceablePeerConnection.prototype._assertTrackBelongs = function(\n        methodName,\n        localTrack) {\n    const doesBelong = this.localTracks.has(localTrack?.rtcId);\n\n    if (!doesBelong) {\n        logger.error(`${this} ${methodName}: track=${localTrack} does not belong to pc`);\n    }\n\n    return doesBelong;\n};\n\n/**\n * Returns the codec that is configured on the client as the preferred video codec.\n * This takes into account the current order of codecs in the local description sdp.\n *\n * @returns {CodecMimeType} The codec that is set as the preferred codec to receive\n * video in the local SDP.\n */\nTraceablePeerConnection.prototype.getConfiguredVideoCodec = function() {\n    const sdp = this.peerconnection.localDescription?.sdp;\n    const defaultCodec = CodecMimeType.VP8;\n\n    if (!sdp) {\n        return defaultCodec;\n    }\n    const parsedSdp = transform.parse(sdp);\n    const mLine = parsedSdp.media.find(m => m.type === MediaType.VIDEO);\n    const codec = mLine.rtp[0].codec;\n\n    if (codec) {\n        return Object.values(CodecMimeType).find(value => value === codec.toLowerCase());\n    }\n\n    return defaultCodec;\n};\n\n/**\n * Enables or disables simulcast for screenshare based on the frame rate requested for desktop track capture.\n *\n * @param {number} maxFps framerate to be used for desktop track capture.\n */\nTraceablePeerConnection.prototype.setDesktopSharingFrameRate = function(maxFps) {\n    const lowFps = maxFps <= SS_DEFAULT_FRAME_RATE;\n\n    this._capScreenshareBitrate = this.isSimulcastOn() && lowFps;\n};\n\n/**\n * Sets the codec preference on the peerconnection. The codec preference goes into effect when\n * the next renegotiation happens.\n *\n * @param {CodecMimeType} preferredCodec the preferred codec.\n * @param {CodecMimeType} disabledCodec the codec that needs to be disabled.\n * @returns {void}\n */\nTraceablePeerConnection.prototype.setVideoCodecs = function(preferredCodec = null, disabledCodec = null) {\n    // If both enable and disable are set, disable settings will prevail.\n    const enable = disabledCodec === null;\n    const mimeType = disabledCodec ? disabledCodec : preferredCodec;\n\n    if (this.codecPreference && (preferredCodec || disabledCodec)) {\n        this.codecPreference.enable = enable;\n        this.codecPreference.mimeType = mimeType;\n    } else if (preferredCodec || disabledCodec) {\n        this.codecPreference = {\n            enable,\n            mediaType: MediaType.VIDEO,\n            mimeType\n        };\n    } else {\n        logger.warn(`${this} Invalid codec settings[preferred=${preferredCodec},disabled=${disabledCodec}],\n            atleast one value is needed`);\n    }\n};\n\n/**\n * Tells if the given WebRTC <tt>MediaStream</tt> has been added to\n * the underlying WebRTC PeerConnection.\n * @param {MediaStream} mediaStream\n * @returns {boolean}\n */\nTraceablePeerConnection.prototype.isMediaStreamInPc = function(mediaStream) {\n    return this._addedStreams.indexOf(mediaStream) > -1;\n};\n\n/**\n * Remove local track from this TPC.\n * @param {JitsiLocalTrack} localTrack the track to be removed from this TPC.\n *\n * FIXME It should probably remove a boolean just like {@link removeTrackFromPc}\n *       The same applies to addTrack.\n */\nTraceablePeerConnection.prototype.removeTrack = function(localTrack) {\n    const webRtcStream = localTrack.getOriginalStream();\n\n    this.trace(\n        'removeStream',\n        localTrack.rtcId, webRtcStream ? webRtcStream.id : undefined);\n\n    if (!this._assertTrackBelongs('removeStream', localTrack)) {\n        // Abort - nothing to be done here\n        return;\n    }\n    this.localTracks.delete(localTrack.rtcId);\n    this.localSSRCs.delete(localTrack.rtcId);\n\n    if (webRtcStream) {\n        this.peerconnection.removeStream(webRtcStream);\n    }\n};\n\n/**\n * Returns the sender corresponding to the given media type.\n * @param {MEDIA_TYPE} mediaType - The media type 'audio' or 'video' to be used for the search.\n * @returns {RTPSender|undefined} - The found sender or undefined if no sender\n * was found.\n */\nTraceablePeerConnection.prototype.findSenderByKind = function(mediaType) {\n    if (this.peerconnection.getSenders) {\n        return this.peerconnection.getSenders().find(s => s.track && s.track.kind === mediaType);\n    }\n};\n\n/**\n * Returns the receiver corresponding to the given MediaStreamTrack.\n *\n * @param {MediaSreamTrack} track - The media stream track used for the search.\n * @returns {RTCRtpReceiver|undefined} - The found receiver or undefined if no receiver\n * was found.\n */\nTraceablePeerConnection.prototype.findReceiverForTrack = function(track) {\n    return this.peerconnection.getReceivers().find(r => r.track === track);\n};\n\n/**\n * Returns the sender corresponding to the given MediaStreamTrack.\n *\n * @param {MediaSreamTrack} track - The media stream track used for the search.\n * @returns {RTCRtpSender|undefined} - The found sender or undefined if no sender\n * was found.\n */\nTraceablePeerConnection.prototype.findSenderForTrack = function(track) {\n    if (this.peerconnection.getSenders) {\n        return this.peerconnection.getSenders().find(s => s.track === track);\n    }\n};\n\n/**\n * Replaces <tt>oldTrack</tt> with <tt>newTrack</tt> from the peer connection.\n * Either <tt>oldTrack</tt> or <tt>newTrack</tt> can be null; replacing a valid\n * <tt>oldTrack</tt> with a null <tt>newTrack</tt> effectively just removes\n * <tt>oldTrack</tt>\n *\n * @param {JitsiLocalTrack|null} oldTrack - The current track in use to be replaced on the pc.\n * @param {JitsiLocalTrack|null} newTrack - The new track to be used.\n *\n * @returns {Promise<boolean>} - If the promise resolves with true, renegotiation will be needed.\n * Otherwise no renegotiation is needed.\n */\nTraceablePeerConnection.prototype.replaceTrack = function(oldTrack, newTrack) {\n    if (!(oldTrack || newTrack)) {\n        logger.info(`${this} replaceTrack called with no new track and no old track`);\n\n        return Promise.resolve();\n    }\n\n    // If a track is being added to the peerconnection for the first time, we want the source signaling to be sent to\n    // Jicofo before the mute state is sent over presence. Therefore, trigger a renegotiation in this case. If we\n    // rely on \"negotiationneeded\" fired by the browser to signal new ssrcs, the mute state in presence will be sent\n    // before the source signaling which is undesirable.\n    // Send the presence before signaling for a new screenshare source. This is needed for multi-stream support since\n    // videoType needs to be availble at remote track creation time so that a fake tile for screenshare can be added.\n    // FIXME - This check needs to be removed when the client switches to the bridge based signaling for tracks.\n    const isNewTrackScreenshare = !oldTrack\n        && newTrack?.getVideoType() === VideoType.DESKTOP\n        && FeatureFlags.isMultiStreamSupportEnabled()\n        && !this.isP2P; // negotiationneeded is not fired on p2p peerconnection\n    const negotiationNeeded = !isNewTrackScreenshare && Boolean(!oldTrack || !this.localTracks.has(oldTrack?.rtcId));\n\n    if (this._usesUnifiedPlan) {\n        logger.debug(`${this} TPC.replaceTrack using unified plan`);\n        const mediaType = newTrack?.getType() ?? oldTrack?.getType();\n        const stream = newTrack?.getOriginalStream();\n        const promise = newTrack && !stream\n\n            // Ignore cases when the track is replaced while the device is in a muted state.\n            // The track will be replaced again on the peerconnection when the user unmutes.\n            ? Promise.resolve()\n            : this.tpcUtils.replaceTrack(oldTrack, newTrack);\n\n        return promise\n            .then(transceiver => {\n                if (newTrack) {\n                    if (newTrack.isAudioTrack()) {\n                        this._hasHadAudioTrack = true;\n                    } else {\n                        this._hasHadVideoTrack = true;\n                    }\n                }\n\n                oldTrack && this.localTracks.delete(oldTrack.rtcId);\n                newTrack && this.localTracks.set(newTrack.rtcId, newTrack);\n\n                // Update the local SSRC cache for the case when one track gets replaced with another and no\n                // renegotiation is triggered as a result of this.\n                if (oldTrack && newTrack) {\n                    const oldTrackSSRC = this.localSSRCs.get(oldTrack.rtcId);\n\n                    if (oldTrackSSRC) {\n                        this.localSSRCs.delete(oldTrack.rtcId);\n                        this.localSSRCs.set(newTrack.rtcId, oldTrackSSRC);\n                    }\n                }\n                const mediaActive = mediaType === MediaType.AUDIO\n                    ? this.audioTransferActive\n                    : this.videoTransferActive;\n\n                // Set the transceiver direction only if media is not suspended on the connection. This happens when\n                // the client is using the p2p connection. Transceiver direction is updated when media is resumed on\n                // this connection again.\n                if (transceiver && mediaActive) {\n                    // In the scenario where we remove the oldTrack (oldTrack is not null and newTrack is null) on FF\n                    // if we change the direction to RECVONLY, create answer will generate SDP with only 1 receive\n                    // only ssrc instead of keeping all 6 ssrcs that we currently have. Stopping the screen sharing\n                    // and then starting it again will trigger 2 rounds of source-remove and source-add replacing\n                    // the 6 ssrcs for the screen sharing with 1 receive only ssrc and then removing the receive\n                    // only ssrc and adding the same 6 ssrcs. On the remote participant's side the same ssrcs will\n                    // be reused on a new m-line and if the remote participant is FF due to\n                    // https://bugzilla.mozilla.org/show_bug.cgi?id=1768729 the video stream won't be rendered.\n                    // That's why we need keep the direction to SENDRECV for FF.\n                    //\n                    // NOTE: If we return back to the approach of not removing the track for FF and instead using the\n                    // enabled property for mute or stopping screensharing we may need to change the direction to\n                    // RECVONLY if FF still sends the media even though the enabled flag is set to false.\n                    transceiver.direction\n                        = newTrack || browser.isFirefox() ? MediaDirection.SENDRECV : MediaDirection.RECVONLY;\n                } else if (transceiver) {\n                    transceiver.direction = MediaDirection.INACTIVE;\n                }\n\n                // Avoid configuring the encodings on Chromium/Safari until simulcast is configured\n                // for the newly added track using SDP munging which happens during the renegotiation.\n                const configureEncodingsPromise = browser.usesSdpMungingForSimulcast() || !newTrack\n                    ? Promise.resolve()\n                    : this.tpcUtils.setEncodings(newTrack);\n\n                // Force renegotiation only when the source is added for the first time.\n                return configureEncodingsPromise.then(() => negotiationNeeded);\n            });\n    }\n\n    logger.debug(`${this} TPC.replaceTrack using plan B`);\n\n    let promiseChain = Promise.resolve();\n\n    if (oldTrack) {\n        this.removeTrack(oldTrack);\n    }\n    if (newTrack) {\n        promiseChain = this.addTrack(newTrack);\n    }\n\n    return promiseChain.then(() => true);\n};\n\n/**\n * Removes local track from the RTCPeerConnection.\n *\n * @param {JitsiLocalTrack} localTrack the local track to be removed.\n * @return {Promise<boolean>} Promise that resolves to true if the underlying PeerConnection's state has changed and\n * renegotiation is required, false if no renegotiation is needed or Promise is rejected when something goes wrong.\n */\nTraceablePeerConnection.prototype.removeTrackFromPc = function(localTrack) {\n    const webRtcStream = localTrack.getOriginalStream();\n\n    this.trace('removeTrack', localTrack.rtcId, webRtcStream ? webRtcStream.id : null);\n\n    if (!this._assertTrackBelongs('removeTrack', localTrack)) {\n        // Abort - nothing to be done here\n        return Promise.reject('Track not found in the peerconnection');\n    }\n\n    if (this._usesUnifiedPlan) {\n        return this.tpcUtils.replaceTrack(localTrack, null).then(() => false);\n    }\n\n    if (webRtcStream) {\n        logger.info(`${this} Removing track=${localTrack} from PC`);\n        this._removeStream(webRtcStream);\n\n        return Promise.resolve(true);\n    }\n\n    logger.error(`${this} removeTrack - no WebRTC stream for track=${localTrack}`);\n\n    return Promise.reject('Stream not found');\n};\n\nTraceablePeerConnection.prototype.createDataChannel = function(label, opts) {\n    this.trace('createDataChannel', label, opts);\n\n    return this.peerconnection.createDataChannel(label, opts);\n};\n\n/**\n * Ensures that the simulcast ssrc-group appears after any other ssrc-groups\n * in the SDP so that simulcast is properly activated.\n *\n * @param {Object} localSdp the WebRTC session description instance for\n * the local description.\n * @private\n */\nTraceablePeerConnection.prototype._ensureSimulcastGroupIsLast = function(localSdp) {\n    let sdpStr = localSdp.sdp;\n\n    const videoStartIndex = sdpStr.indexOf('m=video');\n    const simStartIndex = sdpStr.indexOf('a=ssrc-group:SIM', videoStartIndex);\n    let otherStartIndex = sdpStr.lastIndexOf('a=ssrc-group');\n\n    if (simStartIndex === -1\n        || otherStartIndex === -1\n        || otherStartIndex === simStartIndex) {\n        return localSdp;\n    }\n\n    const simEndIndex = sdpStr.indexOf('\\r\\n', simStartIndex);\n    const simStr = sdpStr.substring(simStartIndex, simEndIndex + 2);\n\n    sdpStr = sdpStr.replace(simStr, '');\n    otherStartIndex = sdpStr.lastIndexOf('a=ssrc-group');\n    const otherEndIndex = sdpStr.indexOf('\\r\\n', otherStartIndex);\n    const sdpHead = sdpStr.slice(0, otherEndIndex);\n    const simStrTrimmed = simStr.trim();\n    const sdpTail = sdpStr.slice(otherEndIndex);\n\n    sdpStr = `${sdpHead}\\r\\n${simStrTrimmed}${sdpTail}`;\n\n    return new RTCSessionDescription({\n        type: localSdp.type,\n        sdp: sdpStr\n    });\n};\n\n/**\n * Will adjust audio and video media direction in the given SDP object to\n * reflect the current status of the {@link audioTransferActive} and\n * {@link videoTransferActive} flags.\n * @param {RTCSessionDescription} localDescription the WebRTC session description instance for\n * the local description.\n * @private\n */\nTraceablePeerConnection.prototype._adjustLocalMediaDirection = function(localDescription) {\n    const transformer = new SdpTransformWrap(localDescription.sdp);\n    let modifiedDirection = false;\n    const audioMedia = transformer.selectMedia(MediaType.AUDIO)?.[0];\n\n    if (audioMedia) {\n        const desiredAudioDirection = this.getDesiredMediaDirection(MediaType.AUDIO);\n\n        if (audioMedia.direction !== desiredAudioDirection) {\n            audioMedia.direction = desiredAudioDirection;\n            logger.info(`${this} Adjusted local audio direction to ${desiredAudioDirection}`);\n            modifiedDirection = true;\n        }\n    } else {\n        logger.warn(`${this} No \"audio\" media found in the local description`);\n    }\n\n    const videoMedia = transformer.selectMedia(MediaType.VIDEO)?.[0];\n\n    if (videoMedia) {\n        const desiredVideoDirection = this.getDesiredMediaDirection(MediaType.VIDEO);\n\n        if (videoMedia.direction !== desiredVideoDirection) {\n            videoMedia.direction = desiredVideoDirection;\n            logger.info(`${this} Adjusted local video direction to ${desiredVideoDirection}`);\n            modifiedDirection = true;\n        }\n    } else {\n        logger.warn(`${this} No \"video\" media found in the local description`);\n    }\n\n    if (modifiedDirection) {\n        return new RTCSessionDescription({\n            type: localDescription.type,\n            sdp: transformer.toRawSDP()\n        });\n    }\n\n    return localDescription;\n};\n\n/**\n * Adjusts the media direction on the remote description based on availability of local and remote sources in a p2p\n * media connection.\n *\n * @param {RTCSessionDescription} remoteDescription the WebRTC session description instance for the remote description.\n * @returns the transformed remoteDescription.\n * @private\n */\nTraceablePeerConnection.prototype._adjustRemoteMediaDirection = function(remoteDescription) {\n    const transformer = new SdpTransformWrap(remoteDescription.sdp);\n\n    [ MediaType.AUDIO, MediaType.VIDEO ].forEach(mediaType => {\n        const media = transformer.selectMedia(mediaType)?.[0];\n        const hasLocalSource = this.hasAnyTracksOfType(mediaType);\n        const hasRemoteSource = this.getRemoteTracks(null, mediaType).length > 0;\n\n        media.direction = hasLocalSource && hasRemoteSource\n            ? MediaDirection.SENDRECV\n            : hasLocalSource\n                ? MediaDirection.RECVONLY\n                : hasRemoteSource ? MediaDirection.SENDONLY : MediaDirection.INACTIVE;\n    });\n\n    return new RTCSessionDescription({\n        type: remoteDescription.type,\n        sdp: transformer.toRawSDP()\n    });\n};\n\n/**\n * Munges the stereo flag as well as the opusMaxAverageBitrate in the SDP, based\n * on values set through config.js, if present.\n *\n * @param {RTCSessionDescription} description that needs to be munged.\n * @returns {RTCSessionDescription} the munged description.\n */\nTraceablePeerConnection.prototype._mungeOpus = function(description) {\n    const { audioQuality } = this.options;\n\n    if (!audioQuality?.stereo && !audioQuality?.opusMaxAverageBitrate) {\n        return description;\n    }\n\n    const parsedSdp = transform.parse(description.sdp);\n    const mLines = parsedSdp.media;\n\n    for (const mLine of mLines) {\n        if (mLine.type === 'audio') {\n            const { payload } = mLine.rtp.find(protocol => protocol.codec === CodecMimeType.OPUS);\n\n            if (!payload) {\n                // eslint-disable-next-line no-continue\n                continue;\n            }\n\n            let fmtpOpus = mLine.fmtp.find(protocol => protocol.payload === payload);\n\n            if (!fmtpOpus) {\n                fmtpOpus = {\n                    payload,\n                    config: ''\n                };\n            }\n\n            const fmtpConfig = transform.parseParams(fmtpOpus.config);\n            let sdpChanged = false;\n\n            if (audioQuality?.stereo) {\n                fmtpConfig.stereo = 1;\n                sdpChanged = true;\n            }\n\n            if (audioQuality?.opusMaxAverageBitrate) {\n                fmtpConfig.maxaveragebitrate = audioQuality.opusMaxAverageBitrate;\n                sdpChanged = true;\n            }\n\n            if (!sdpChanged) {\n                // eslint-disable-next-line no-continue\n                continue;\n            }\n\n            let mungedConfig = '';\n\n            for (const key of Object.keys(fmtpConfig)) {\n                mungedConfig += `${key}=${fmtpConfig[key]}; `;\n            }\n\n            fmtpOpus.config = mungedConfig.trim();\n        }\n    }\n\n    return new RTCSessionDescription({\n        type: description.type,\n        sdp: transform.write(parsedSdp)\n    });\n};\n\n/**\n * Munges the SDP to set all directions to inactive and drop all ssrc and ssrc-groups.\n *\n * @param {RTCSessionDescription} description that needs to be munged.\n * @returns {RTCSessionDescription} the munged description.\n */\nTraceablePeerConnection.prototype._mungeInactive = function(description) {\n    const parsedSdp = transform.parse(description.sdp);\n    const mLines = parsedSdp.media;\n\n    for (const mLine of mLines) {\n        mLine.direction = MediaDirection.INACTIVE;\n        mLine.ssrcs = undefined;\n        mLine.ssrcGroups = undefined;\n    }\n\n    return new RTCSessionDescription({\n        type: description.type,\n        sdp: transform.write(parsedSdp)\n    });\n};\n\n/**\n * Sets up the _dtlsTransport object and initializes callbacks for it.\n */\nTraceablePeerConnection.prototype._initializeDtlsTransport = function() {\n    // We are assuming here that we only have one bundled transport here\n    if (!this.peerconnection.getSenders || this._dtlsTransport) {\n        return;\n    }\n\n    const senders = this.peerconnection.getSenders();\n\n    if (senders.length !== 0 && senders[0].transport) {\n        this._dtlsTransport = senders[0].transport;\n\n        this._dtlsTransport.onerror = error => {\n            logger.error(`${this} DtlsTransport error: ${error}`);\n        };\n\n        this._dtlsTransport.onstatechange = () => {\n            this.trace('dtlsTransport.onstatechange', this._dtlsTransport.state);\n        };\n    }\n};\n\n/**\n * Sets the max bitrates on the video m-lines when VP9 is the selected codec.\n *\n * @param {RTCSessionDescription} description - The local description that needs to be munged.\n * @param {boolean} isLocalSdp - Whether the max bitrate (via b=AS line in SDP) is set on local SDP.\n * @returns RTCSessionDescription\n */\nTraceablePeerConnection.prototype._setVp9MaxBitrates = function(description, isLocalSdp = false) {\n    if (!this.codecPreference) {\n        return description;\n    }\n\n    const parsedSdp = transform.parse(description.sdp);\n\n    // Find all the m-lines associated with the local sources.\n    const direction = isLocalSdp ? MediaDirection.RECVONLY : MediaDirection.SENDONLY;\n    const mLines = FeatureFlags.isMultiStreamSupportEnabled()\n        ? parsedSdp.media.filter(m => m.type === MediaType.VIDEO && m.direction !== direction)\n        : [ parsedSdp.media.find(m => m.type === MediaType.VIDEO) ];\n\n    // Find the mid associated with the desktop track so that bitrates can be configured accordingly on the\n    // corresponding m-line.\n    const getDesktopTrackMid = () => {\n        const desktopTrack = this.getLocalVideoTracks().find(track => track.getVideoType() === VideoType.DESKTOP);\n        let mid;\n\n        if (desktopTrack) {\n            const trackIndex = Number(desktopTrack.getSourceName()?.split('-')[1].substring(1));\n\n            if (typeof trackIndex === 'number') {\n                const transceiver = this.peerconnection.getTransceivers()\n                    .filter(t => t.receiver.track.kind === MediaType.VIDEO\n                        && t.direction !== MediaDirection.RECVONLY)[trackIndex];\n\n                mid = transceiver?.mid;\n            }\n        }\n\n        return Number(mid);\n    };\n\n    for (const mLine of mLines) {\n        if (this.codecPreference.mimeType === CodecMimeType.VP9) {\n            const bitrates = this.tpcUtils.videoBitrates.VP9 || this.tpcUtils.videoBitrates;\n            const hdBitrate = bitrates.high ? bitrates.high : HD_BITRATE;\n            const mid = mLine.mid;\n            const isSharingScreen = FeatureFlags.isMultiStreamSupportEnabled()\n                ? mid === getDesktopTrackMid()\n                : this._isSharingScreen();\n            const limit = Math.floor((isSharingScreen ? HD_BITRATE : hdBitrate) / 1000);\n\n            // Use only the HD bitrate for now as there is no API available yet for configuring\n            // the bitrates on the individual SVC layers.\n            mLine.bandwidth = [ {\n                type: 'AS',\n                limit\n            } ];\n        } else {\n            // Clear the bandwidth limit in SDP when VP9 is no longer the preferred codec.\n            // This is needed on react native clients as react-native-webrtc returns the\n            // SDP that the application passed instead of returning the SDP off the native side.\n            // This line automatically gets cleared on web on every renegotiation.\n            mLine.bandwidth = undefined;\n        }\n    }\n\n    return new RTCSessionDescription({\n        type: description.type,\n        sdp: transform.write(parsedSdp)\n    });\n};\n\n/**\n * Configures the stream encodings depending on the video type and the bitrates configured.\n *\n * @param {JitsiLocalTrack} - The local track for which the sender encodings have to configured.\n * @returns {Promise} promise that will be resolved when the operation is successful and rejected otherwise.\n */\nTraceablePeerConnection.prototype.configureSenderVideoEncodings = function(localVideoTrack = null) {\n    if (FeatureFlags.isSourceNameSignalingEnabled()) {\n        if (localVideoTrack) {\n            return this.setSenderVideoConstraints(\n                this._senderMaxHeights.get(localVideoTrack.getSourceName()),\n                localVideoTrack);\n        }\n        const promises = [];\n\n        for (const track of this.getLocalVideoTracks()) {\n            promises.push(this.setSenderVideoConstraints(this._senderMaxHeights.get(track.getSourceName()), track));\n        }\n\n        return Promise.allSettled(promises);\n    }\n\n    let localTrack = localVideoTrack;\n\n    if (!localTrack) {\n        localTrack = this.getLocalVideoTracks()[0];\n    }\n\n    return this.setSenderVideoConstraints(this._senderVideoMaxHeight, localTrack);\n};\n\nTraceablePeerConnection.prototype.setLocalDescription = function(description) {\n    let localDescription = description;\n\n    this.trace('setLocalDescription::preTransform', dumpSDP(localDescription));\n\n    // Munge stereo flag and opusMaxAverageBitrate based on config.js\n    localDescription = this._mungeOpus(localDescription);\n\n    if (!this._usesUnifiedPlan) {\n        localDescription = this._adjustLocalMediaDirection(localDescription);\n        localDescription = this._ensureSimulcastGroupIsLast(localDescription);\n    }\n\n    // Munge the order of the codecs based on the preferences set through config.js.\n    localDescription = this._mungeCodecOrder(localDescription);\n    localDescription = this._setVp9MaxBitrates(localDescription, true);\n\n    this.trace('setLocalDescription::postTransform', dumpSDP(localDescription));\n\n    return new Promise((resolve, reject) => {\n        this.peerconnection.setLocalDescription(localDescription)\n            .then(() => {\n                this.trace('setLocalDescriptionOnSuccess');\n                const localUfrag = SDPUtil.getUfrag(localDescription.sdp);\n\n                if (localUfrag !== this.localUfrag) {\n                    this.localUfrag = localUfrag;\n                    this.eventEmitter.emit(RTCEvents.LOCAL_UFRAG_CHANGED, this, localUfrag);\n                }\n\n                this._initializeDtlsTransport();\n\n                resolve();\n            }, err => {\n                this.trace('setLocalDescriptionOnFailure', err);\n                this.eventEmitter.emit(RTCEvents.SET_LOCAL_DESCRIPTION_FAILED, err, this);\n                reject(err);\n            });\n    });\n};\n\n/**\n * Enables/disables audio media transmission on this peer connection. When\n * disabled the SDP audio media direction in the local SDP will be adjusted to\n * 'inactive' which means that no data will be sent nor accepted, but\n * the connection should be kept alive.\n * @param {boolean} active <tt>true</tt> to enable audio media transmission or\n * <tt>false</tt> to disable. If the value is not a boolean the call will have\n * no effect.\n * @return {boolean} <tt>true</tt> if the value has changed and sRD/sLD cycle\n * needs to be executed in order for the changes to take effect or\n * <tt>false</tt> if the given value was the same as the previous one.\n * @public\n */\nTraceablePeerConnection.prototype.setAudioTransferActive = function(active) {\n    logger.debug(`${this} audio transfer active: ${active}`);\n    const changed = this.audioTransferActive !== active;\n\n    this.audioTransferActive = active;\n\n    if (this._usesUnifiedPlan) {\n        this.tpcUtils.setAudioTransferActive(active);\n\n        // false means no renegotiation up the chain which is not needed in the Unified mode\n        return false;\n    }\n\n    return changed;\n};\n\nTraceablePeerConnection.prototype.setRemoteDescription = function(description) {\n    let remoteDescription = description;\n\n    this.trace('setRemoteDescription::preTransform', dumpSDP(description));\n\n    // Munge stereo flag and opusMaxAverageBitrate based on config.js\n    remoteDescription = this._mungeOpus(remoteDescription);\n\n    if (this._usesUnifiedPlan) {\n        // Translate the SDP to Unified plan format first for the jvb case, p2p case will only have 2 m-lines.\n        if (!this.isP2P) {\n            const currentDescription = this.peerconnection.remoteDescription;\n\n            remoteDescription = this.interop.toUnifiedPlan(remoteDescription, currentDescription);\n            this.trace('setRemoteDescription::postTransform (Unified)', dumpSDP(remoteDescription));\n\n            if (FeatureFlags.isRunInLiteModeEnabled()) {\n                remoteDescription = this._mungeInactive(remoteDescription);\n            }\n        }\n        if (this.isSimulcastOn()) {\n            remoteDescription = this.tpcUtils.insertUnifiedPlanSimulcastReceive(remoteDescription);\n            this.trace('setRemoteDescription::postTransform (sim receive)', dumpSDP(remoteDescription));\n        }\n        remoteDescription = this.tpcUtils.ensureCorrectOrderOfSsrcs(remoteDescription);\n        this.trace('setRemoteDescription::postTransform (correct ssrc order)', dumpSDP(remoteDescription));\n    } else {\n        if (this.isSimulcastOn()) {\n            // Implode the simulcast ssrcs so that the remote sdp has only the first ssrc in the SIM group.\n            remoteDescription = this.simulcast.mungeRemoteDescription(\n                remoteDescription,\n                true /* add x-google-conference flag */);\n            this.trace('setRemoteDescription::postTransform (simulcast)', dumpSDP(remoteDescription));\n        }\n        remoteDescription = normalizePlanB(remoteDescription);\n    }\n\n    // Munge the order of the codecs based on the preferences set through config.js.\n    remoteDescription = this._mungeCodecOrder(remoteDescription);\n    remoteDescription = this._setVp9MaxBitrates(remoteDescription);\n    this.trace('setRemoteDescription::postTransform (munge codec order)', dumpSDP(remoteDescription));\n\n    return new Promise((resolve, reject) => {\n        this.peerconnection.setRemoteDescription(remoteDescription)\n            .then(() => {\n                this.trace('setRemoteDescriptionOnSuccess');\n                const remoteUfrag = SDPUtil.getUfrag(remoteDescription.sdp);\n\n                if (remoteUfrag !== this.remoteUfrag) {\n                    this.remoteUfrag = remoteUfrag;\n                    this.eventEmitter.emit(RTCEvents.REMOTE_UFRAG_CHANGED, this, remoteUfrag);\n                }\n\n                this._initializeDtlsTransport();\n\n                resolve();\n            }, err => {\n                this.trace('setRemoteDescriptionOnFailure', err);\n                this.eventEmitter.emit(RTCEvents.SET_REMOTE_DESCRIPTION_FAILED, err, this);\n                reject(err);\n            });\n    });\n};\n\n/**\n * Changes the resolution of the video stream that is sent to the peer based on the resolution requested by the peer\n * and user preference, sets the degradation preference on the sender based on the video type, configures the maximum\n * bitrates on the send stream.\n *\n * @param {number} frameHeight - The max frame height to be imposed on the outgoing video stream.\n * @param {JitsiLocalTrack} - The local track for which the sender constraints have to be applied.\n * @returns {Promise} promise that will be resolved when the operation is successful and rejected otherwise.\n */\nTraceablePeerConnection.prototype.setSenderVideoConstraints = function(frameHeight, localVideoTrack) {\n    if (frameHeight < 0) {\n        throw new Error(`Invalid frameHeight: ${frameHeight}`);\n    }\n\n    // XXX: This is not yet supported on mobile.\n    if (browser.isReactNative()) {\n        return Promise.resolve();\n    }\n\n    if (FeatureFlags.isSourceNameSignalingEnabled()) {\n        this._senderMaxHeights.set(localVideoTrack.getSourceName(), frameHeight);\n    } else {\n        this._senderVideoMaxHeight = frameHeight;\n    }\n\n    if (!localVideoTrack || localVideoTrack.isMuted()) {\n        return Promise.resolve();\n    }\n    const videoSender = this.findSenderForTrack(localVideoTrack.getTrack());\n\n    if (!videoSender) {\n        return Promise.resolve();\n    }\n    const parameters = videoSender.getParameters();\n\n    if (!parameters?.encodings?.length) {\n        return Promise.resolve();\n    }\n\n    const isSharingLowFpsScreen = localVideoTrack.getVideoType() === VideoType.DESKTOP && this._capScreenshareBitrate;\n\n    // Set the degradation preference.\n    const preference = isSharingLowFpsScreen\n        ? DEGRADATION_PREFERENCE_DESKTOP // Prefer resolution for low fps share.\n        : DEGRADATION_PREFERENCE_CAMERA; // Prefer frame-rate for high fps share and camera.\n\n    parameters.degradationPreference = preference;\n    logger.info(`${this} Setting degradation preference [preference=${preference},track=${localVideoTrack}`);\n\n    // Calculate the encodings active state based on the resolution requested by the bridge.\n    this.encodingsEnabledState = this.tpcUtils.calculateEncodingsActiveState(localVideoTrack, frameHeight);\n    const maxBitrates = this.tpcUtils.calculateEncodingsBitrates(localVideoTrack);\n    const videoType = localVideoTrack.getVideoType();\n\n    if (this.isSimulcastOn()) {\n        for (const encoding in parameters.encodings) {\n            if (parameters.encodings.hasOwnProperty(encoding)) {\n                parameters.encodings[encoding].active = this.encodingsEnabledState[encoding];\n\n                // Firefox doesn't follow the spec and lets application specify the degradation preference on the\n                // encodings.\n                browser.isFirefox() && (parameters.encodings[encoding].degradationPreference = preference);\n\n                if (this.getConfiguredVideoCodec() === CodecMimeType.VP8\n                    && (this.options?.videoQuality?.maxBitratesVideo\n                        || isSharingLowFpsScreen\n                        || this._usesUnifiedPlan)) {\n                    parameters.encodings[encoding].maxBitrate = maxBitrates[encoding];\n                }\n            }\n        }\n        this.tpcUtils.updateEncodingsResolution(parameters);\n\n    // For p2p and cases and where simulcast is explicitly disabled.\n    } else if (frameHeight > 0) {\n        let scaleFactor = HD_SCALE_FACTOR;\n\n        // Do not scale down encodings for desktop tracks for non-simulcast case.\n        if (videoType === VideoType.CAMERA && localVideoTrack.resolution > frameHeight) {\n            scaleFactor = Math.floor(localVideoTrack.resolution / frameHeight);\n        }\n\n        parameters.encodings[0].active = true;\n        parameters.encodings[0].scaleResolutionDownBy = scaleFactor;\n\n        // Firefox doesn't follow the spec and lets application specify the degradation preference on the encodings.\n        browser.isFirefox() && (parameters.encodings[0].degradationPreference = preference);\n\n        // Configure the bitrate.\n        if (this.getConfiguredVideoCodec() === CodecMimeType.VP8 && this.options?.videoQuality?.maxBitratesVideo) {\n            let bitrate = this.getTargetVideoBitrates()?.high;\n\n            if (videoType === VideoType.CAMERA) {\n                bitrate = this.tpcUtils.localStreamEncodingsConfig\n                    .find(layer => layer.scaleResolutionDownBy === scaleFactor)?.maxBitrate ?? bitrate;\n            }\n            parameters.encodings[0].maxBitrate = bitrate;\n        }\n    } else {\n        parameters.encodings[0].active = false;\n    }\n\n    logger.info(`${this} setting max height=${frameHeight},encodings=${JSON.stringify(parameters.encodings)}`);\n\n    return videoSender.setParameters(parameters).then(() => {\n        localVideoTrack.maxEnabledResolution = frameHeight;\n        this.eventEmitter.emit(RTCEvents.LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED, localVideoTrack);\n    });\n};\n\n/**\n * Enables/disables video media transmission on this peer connection. When\n * disabled the SDP video media direction in the local SDP will be adjusted to\n * 'inactive' which means that no data will be sent nor accepted, but\n * the connection should be kept alive.\n * @param {boolean} active <tt>true</tt> to enable video media transmission or\n * <tt>false</tt> to disable. If the value is not a boolean the call will have\n * no effect.\n * @return {boolean} <tt>true</tt> if the value has changed and sRD/sLD cycle\n * needs to be executed in order for the changes to take effect or\n * <tt>false</tt> if the given value was the same as the previous one.\n * @public\n */\nTraceablePeerConnection.prototype.setVideoTransferActive = function(active) {\n    logger.debug(`${this} video transfer active: ${active}`);\n    const changed = this.videoTransferActive !== active;\n\n    this.videoTransferActive = active;\n\n    if (this._usesUnifiedPlan) {\n        this.tpcUtils.setVideoTransferActive(active);\n\n        // false means no renegotiation up the chain which is not needed in the Unified mode\n        return false;\n    }\n\n    return changed;\n};\n\n/**\n * Sends DTMF tones if possible.\n *\n * @param {string} tones - The DTMF tones string as defined by {@code RTCDTMFSender.insertDTMF}, 'tones' argument.\n * @param {number} duration - The amount of time in milliseconds that each DTMF should last. It's 200ms by default.\n * @param {number} interToneGap - The length of time in miliseconds to wait between tones. It's 200ms by default.\n *\n * @returns {void}\n */\nTraceablePeerConnection.prototype.sendTones = function(tones, duration = 200, interToneGap = 200) {\n    if (!this._dtmfSender) {\n        if (this.peerconnection.getSenders) {\n            const rtpSender = this.peerconnection.getSenders().find(s => s.dtmf);\n\n            this._dtmfSender = rtpSender && rtpSender.dtmf;\n            this._dtmfSender && logger.info(`${this} initialized DTMFSender using getSenders`);\n        }\n\n        if (!this._dtmfSender) {\n            const localAudioTrack = Array.from(this.localTracks.values()).find(t => t.isAudioTrack());\n\n            if (this.peerconnection.createDTMFSender && localAudioTrack) {\n                this._dtmfSender = this.peerconnection.createDTMFSender(localAudioTrack.getTrack());\n            }\n            this._dtmfSender && logger.info(`${this} initialized DTMFSender using deprecated createDTMFSender`);\n        }\n\n        if (this._dtmfSender) {\n            this._dtmfSender.ontonechange = this._onToneChange.bind(this);\n        }\n    }\n\n    if (this._dtmfSender) {\n        if (this._dtmfSender.toneBuffer) {\n            this._dtmfTonesQueue.push({\n                tones,\n                duration,\n                interToneGap\n            });\n\n            return;\n        }\n\n        this._dtmfSender.insertDTMF(tones, duration, interToneGap);\n    } else {\n        logger.warn(`${this} sendTones - failed to select DTMFSender`);\n    }\n};\n\n/**\n * Callback ivoked by {@code this._dtmfSender} when it has finished playing\n * a single tone.\n *\n * @param {Object} event - The tonechange event which indicates what characters\n * are left to be played for the current tone.\n * @private\n * @returns {void}\n */\nTraceablePeerConnection.prototype._onToneChange = function(event) {\n    // An empty event.tone indicates the current tones have finished playing.\n    // Automatically start playing any queued tones on finish.\n    if (this._dtmfSender && event.tone === '' && this._dtmfTonesQueue.length) {\n        const { tones, duration, interToneGap } = this._dtmfTonesQueue.shift();\n\n        this._dtmfSender.insertDTMF(tones, duration, interToneGap);\n    }\n};\n\n/**\n * Makes the underlying TraceablePeerConnection generate new SSRC for\n * the recvonly video stream.\n */\nTraceablePeerConnection.prototype.generateRecvonlySsrc = function() {\n    const newSSRC = SDPUtil.generateSsrc();\n\n    logger.info(`${this} generated new recvonly SSRC=${newSSRC}`);\n    this.sdpConsistency.setPrimarySsrc(newSSRC);\n};\n\n/**\n * Makes the underlying TraceablePeerConnection forget the current primary video\n * SSRC.\n */\nTraceablePeerConnection.prototype.clearRecvonlySsrc = function() {\n    logger.info(`${this} Clearing primary video SSRC!`);\n    this.sdpConsistency.clearVideoSsrcCache();\n};\n\n/**\n * Closes underlying WebRTC PeerConnection instance and removes all remote\n * tracks by emitting {@link RTCEvents.REMOTE_TRACK_REMOVED} for each one of\n * them.\n */\nTraceablePeerConnection.prototype.close = function() {\n    this.trace('stop');\n\n    // Off SignalingEvents\n    this.signalingLayer.off(SignalingEvents.PEER_MUTED_CHANGED, this._peerMutedChanged);\n    this.signalingLayer.off(SignalingEvents.PEER_VIDEO_TYPE_CHANGED, this._peerVideoTypeChanged);\n    this._usesUnifiedPlan && this.peerconnection.removeEventListener('track', this.onTrack);\n\n    for (const peerTracks of this.remoteTracks.values()) {\n        for (const remoteTracks of peerTracks.values()) {\n            for (const remoteTrack of remoteTracks) {\n                this._removeRemoteTrack(remoteTrack);\n            }\n        }\n    }\n    this.remoteTracks.clear();\n\n    this._addedStreams = [];\n\n    this._dtmfSender = null;\n    this._dtmfTonesQueue = [];\n\n    if (!this.rtc._removePeerConnection(this)) {\n        logger.error(`${this} RTC._removePeerConnection returned false`);\n    }\n    if (this.statsinterval !== null) {\n        window.clearInterval(this.statsinterval);\n        this.statsinterval = null;\n    }\n    logger.info(`${this} Closing peerconnection`);\n    this.peerconnection.close();\n};\n\nTraceablePeerConnection.prototype.createAnswer = function(constraints) {\n    return this._createOfferOrAnswer(false /* answer */, constraints);\n};\n\nTraceablePeerConnection.prototype.createOffer = function(constraints) {\n    return this._createOfferOrAnswer(true /* offer */, constraints);\n};\n\nTraceablePeerConnection.prototype._createOfferOrAnswer = function(\n        isOffer,\n        constraints) {\n    const logName = isOffer ? 'Offer' : 'Answer';\n\n    this.trace(`create${logName}`, JSON.stringify(constraints, null, ' '));\n\n    const handleSuccess = (resultSdp, resolveFn, rejectFn) => {\n        try {\n            this.trace(\n                `create${logName}OnSuccess::preTransform`, dumpSDP(resultSdp));\n\n            if (!this._usesUnifiedPlan) {\n                // If there are no local video tracks, then a \"recvonly\"\n                // SSRC needs to be generated\n                if (!this.hasAnyTracksOfType(MediaType.VIDEO)\n                    && !this.sdpConsistency.hasPrimarySsrcCached()) {\n                    this.generateRecvonlySsrc();\n                }\n\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = new RTCSessionDescription({\n                    type: resultSdp.type,\n                    sdp: this.sdpConsistency.makeVideoPrimarySsrcsConsistent(\n                        resultSdp.sdp)\n                });\n\n                this.trace(\n                    `create${logName}OnSuccess::postTransform `\n                         + '(make primary audio/video ssrcs consistent)',\n                    dumpSDP(resultSdp));\n            }\n\n            const localVideoTrack = this.getLocalVideoTracks()[0];\n\n            // Configure simulcast for camera tracks and for desktop tracks that need simulcast.\n            if (this.isSimulcastOn() && browser.usesSdpMungingForSimulcast()\n                && (localVideoTrack?.getVideoType() === VideoType.CAMERA\n                || this._usesUnifiedPlan)) {\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = this.simulcast.mungeLocalDescription(resultSdp);\n                this.trace(`create${logName} OnSuccess::postTransform (simulcast)`, dumpSDP(resultSdp));\n            }\n\n            if (!this.options.disableRtx && browser.usesSdpMungingForSimulcast()) {\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = new RTCSessionDescription({\n                    type: resultSdp.type,\n                    sdp: this.rtxModifier.modifyRtxSsrcs(resultSdp.sdp)\n                });\n\n                this.trace(\n                    `create${logName}`\n                         + 'OnSuccess::postTransform (rtx modifier)',\n                    dumpSDP(resultSdp));\n            }\n\n            const ssrcMap = this._extractSSRCMap(resultSdp);\n\n            this._processLocalSSRCsMap(ssrcMap);\n\n            resolveFn(resultSdp);\n        } catch (e) {\n            this.trace(`create${logName}OnError`, e);\n            this.trace(`create${logName}OnError`, dumpSDP(resultSdp));\n            logger.error(`${this} create${logName}OnError`, e, dumpSDP(resultSdp));\n\n            rejectFn(e);\n        }\n    };\n\n    const handleFailure = (err, rejectFn) => {\n        this.trace(`create${logName}OnFailure`, err);\n        const eventType\n            = isOffer\n                ? RTCEvents.CREATE_OFFER_FAILED\n                : RTCEvents.CREATE_ANSWER_FAILED;\n\n        this.eventEmitter.emit(eventType, err, this);\n\n        rejectFn(err);\n    };\n\n    // Set the codec preference before creating an offer or answer so that the generated SDP will have\n    // the correct preference order.\n    if (this._usesTransceiverCodecPreferences) {\n        const transceiver = this.peerconnection.getTransceivers()\n            .find(t => t.receiver && t.receiver?.track?.kind === MediaType.VIDEO);\n\n        if (transceiver) {\n            let capabilities = RTCRtpReceiver.getCapabilities(MediaType.VIDEO)?.codecs;\n            const mimeType = this.codecPreference?.mimeType;\n            const enable = this.codecPreference?.enable;\n\n            if (capabilities && mimeType && enable) {\n                // Move the desired codec (all variations of it as well) to the beginning of the list.\n                /* eslint-disable-next-line arrow-body-style */\n                capabilities.sort(caps => {\n                    return caps.mimeType.toLowerCase() === `${MediaType.VIDEO}/${mimeType}` ? -1 : 1;\n                });\n            } else if (capabilities && mimeType) {\n                capabilities = capabilities\n                    .filter(caps => caps.mimeType.toLowerCase() !== `${MediaType.VIDEO}/${mimeType}`);\n            }\n\n            // Disable ulpfec on Google Chrome and derivatives because\n            // https://bugs.chromium.org/p/chromium/issues/detail?id=1276427\n            if (browser.isChromiumBased()) {\n                capabilities = capabilities\n                    .filter(caps => caps.mimeType.toLowerCase() !== `${MediaType.VIDEO}/${CodecMimeType.ULPFEC}`);\n            }\n\n            try {\n                transceiver.setCodecPreferences(capabilities);\n            } catch (err) {\n                logger.warn(`${this} Setting codec[preference=${mimeType},enable=${enable}] failed`, err);\n            }\n        }\n    }\n\n    return new Promise((resolve, reject) => {\n        let oaPromise;\n\n        if (isOffer) {\n            oaPromise = this.peerconnection.createOffer(constraints);\n        } else {\n            oaPromise = this.peerconnection.createAnswer(constraints);\n        }\n\n        oaPromise\n            .then(\n                sdp => handleSuccess(sdp, resolve, reject),\n                error => handleFailure(error, reject));\n    });\n};\n\n/**\n * Extract primary SSRC from given {@link TrackSSRCInfo} object.\n * @param {TrackSSRCInfo} ssrcObj\n * @return {number|null} the primary SSRC or <tt>null</tt>\n */\nTraceablePeerConnection.prototype._extractPrimarySSRC = function(ssrcObj) {\n    if (ssrcObj && ssrcObj.groups && ssrcObj.groups.length) {\n        return ssrcObj.groups[0].ssrcs[0];\n    } else if (ssrcObj && ssrcObj.ssrcs && ssrcObj.ssrcs.length) {\n        return ssrcObj.ssrcs[0];\n    }\n\n    return null;\n};\n\n/**\n * Goes over the SSRC map extracted from the latest local description and tries\n * to match them with the local tracks (by MSID). Will update the values\n * currently stored in the {@link TraceablePeerConnection.localSSRCs} map.\n * @param {Map<string,TrackSSRCInfo>} ssrcMap\n * @private\n */\nTraceablePeerConnection.prototype._processLocalSSRCsMap = function(ssrcMap) {\n    for (const track of this.localTracks.values()) {\n        let sourceIndex, sourceName;\n\n        if (FeatureFlags.isMultiStreamSupportEnabled()) {\n            sourceName = track.getSourceName();\n            sourceIndex = sourceName?.indexOf('-') + 2;\n        }\n\n        const sourceIdentifier = this._usesUnifiedPlan\n            ? FeatureFlags.isMultiStreamSupportEnabled() && sourceIndex\n                ? `${track.getType()}-${sourceName.substr(sourceIndex, 1)}` : track.getType()\n            : track.storedMSID;\n\n        if (ssrcMap.has(sourceIdentifier)) {\n            const newSSRC = ssrcMap.get(sourceIdentifier);\n\n            if (!newSSRC) {\n                logger.error(`${this} No SSRC found for stream=${sourceIdentifier}`);\n\n                return;\n            }\n            const oldSSRC = this.localSSRCs.get(track.rtcId);\n            const newSSRCNum = this._extractPrimarySSRC(newSSRC);\n            const oldSSRCNum = this._extractPrimarySSRC(oldSSRC);\n\n            // eslint-disable-next-line no-negated-condition\n            if (newSSRCNum !== oldSSRCNum) {\n                oldSSRCNum && logger.error(`${this} Overwriting SSRC for track=${track}] with ssrc=${newSSRC}`);\n                this.localSSRCs.set(track.rtcId, newSSRC);\n                this.eventEmitter.emit(RTCEvents.LOCAL_TRACK_SSRC_UPDATED, track, newSSRCNum);\n            }\n        } else if (!track.isVideoTrack() && !track.isMuted()) {\n            // It is normal to find no SSRCs for a muted video track in\n            // the local SDP as the recv-only SSRC is no longer munged in.\n            // So log the warning only if it's not a muted video track.\n            logger.warn(`${this} No SSRCs found in the local SDP for track=${track}, stream=${sourceIdentifier}`);\n        }\n    }\n};\n\nTraceablePeerConnection.prototype.addIceCandidate = function(candidate) {\n    this.trace('addIceCandidate', JSON.stringify({\n        candidate: candidate.candidate,\n        sdpMid: candidate.sdpMid,\n        sdpMLineIndex: candidate.sdpMLineIndex,\n        usernameFragment: candidate.usernameFragment\n    }, null, ' '));\n\n    return this.peerconnection.addIceCandidate(candidate);\n};\n\n/**\n * Returns the number of simulcast streams that are currently enabled on the peerconnection.\n *\n * @returns {number} The number of simulcast streams currently enabled or 1 when simulcast is disabled.\n */\nTraceablePeerConnection.prototype.getActiveSimulcastStreams = function() {\n    let activeStreams = 1;\n\n    if (this.isSimulcastOn() && this.encodingsEnabledState) {\n        activeStreams = this.encodingsEnabledState.filter(stream => Boolean(stream))?.length;\n    } else if (this.isSimulcastOn()) {\n        activeStreams = SIM_LAYER_RIDS.length;\n    }\n\n    return activeStreams;\n};\n\n/**\n * Obtains call-related stats from the peer connection.\n *\n * @returns {Promise<Object>} Promise which resolves with data providing statistics about\n * the peerconnection.\n */\nTraceablePeerConnection.prototype.getStats = function() {\n    return this.peerconnection.getStats();\n};\n\n/**\n * Generates and stores new SSRC info object for given local track.\n * The method should be called only for a video track being added to this TPC\n * in the muted state (given that the current browser uses this strategy).\n * @param {JitsiLocalTrack} track\n * @return {TPCSSRCInfo}\n */\nTraceablePeerConnection.prototype.generateNewStreamSSRCInfo = function(track) {\n    const rtcId = track.rtcId;\n    let ssrcInfo = this._getSSRC(rtcId);\n\n    if (ssrcInfo) {\n        logger.error(`${this} Overwriting local SSRCs for track id=${rtcId}`);\n    }\n\n    // Configure simulcast for camera tracks and desktop tracks that need simulcast.\n    if (this.isSimulcastOn()\n        && (track.getVideoType() === VideoType.CAMERA || !this.isSharingLowFpsScreen())) {\n        ssrcInfo = {\n            ssrcs: [],\n            groups: []\n        };\n        for (let i = 0; i < SIM_LAYER_RIDS.length; i++) {\n            ssrcInfo.ssrcs.push(SDPUtil.generateSsrc());\n        }\n        ssrcInfo.groups.push({\n            ssrcs: ssrcInfo.ssrcs.slice(),\n            semantics: 'SIM'\n        });\n    } else {\n        ssrcInfo = {\n            ssrcs: [ SDPUtil.generateSsrc() ],\n            groups: []\n        };\n    }\n    if (!this.options.disableRtx) {\n        // Specifically use a for loop here because we'll\n        //  be adding to the list we're iterating over, so we\n        //  only want to iterate through the items originally\n        //  on the list\n        const currNumSsrcs = ssrcInfo.ssrcs.length;\n\n        for (let i = 0; i < currNumSsrcs; ++i) {\n            const primarySsrc = ssrcInfo.ssrcs[i];\n            const rtxSsrc = SDPUtil.generateSsrc();\n\n            ssrcInfo.ssrcs.push(rtxSsrc);\n            ssrcInfo.groups.push({\n                ssrcs: [ primarySsrc, rtxSsrc ],\n                semantics: 'FID'\n            });\n        }\n    }\n    ssrcInfo.msid = track.storedMSID;\n    this.localSSRCs.set(rtcId, ssrcInfo);\n\n    return ssrcInfo;\n};\n\n/**\n * Returns if the peer connection uses Unified plan implementation.\n *\n * @returns {boolean} True if the pc uses Unified plan, false otherwise.\n */\nTraceablePeerConnection.prototype.usesUnifiedPlan = function() {\n    return this._usesUnifiedPlan;\n};\n\n/**\n * Creates a text representation of this <tt>TraceablePeerConnection</tt>\n * instance.\n * @return {string}\n */\nTraceablePeerConnection.prototype.toString = function() {\n    return `TPC[id=${this.id},type=${this.isP2P ? 'P2P' : 'JVB'}]`;\n};\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport BridgeVideoType from '../../service/RTC/BridgeVideoType';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport browser from '../browser';\nimport FeatureFlags from '../flags/FeatureFlags';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport Listenable from '../util/Listenable';\nimport { safeCounterIncrement } from '../util/MathUtil';\n\nimport BridgeChannel from './BridgeChannel';\nimport JitsiLocalTrack from './JitsiLocalTrack';\nimport RTCUtils from './RTCUtils';\nimport TraceablePeerConnection from './TraceablePeerConnection';\n\n\nconst logger = getLogger(__filename);\n\n/**\n * The counter used to generated id numbers assigned to peer connections\n * @type {number}\n */\nlet peerConnectionIdCounter = 0;\n\n/**\n * The counter used to generate id number for the local\n * <code>MediaStreamTrack</code>s.\n * @type {number}\n */\nlet rtcTrackIdCounter = 0;\n\n/**\n * Creates {@code JitsiLocalTrack} instances from the passed in meta information\n * about MedieaTracks.\n *\n * @param {Object[]} mediaStreamMetaData - An array of meta information with\n * MediaTrack instances. Each can look like:\n * {{\n *     stream: MediaStream instance that holds a track with audio or video,\n *     track: MediaTrack within the MediaStream,\n *     videoType: \"camera\" or \"desktop\" or falsy,\n *     sourceId: ID of the desktopsharing source,\n *     sourceType: The desktopsharing source type,\n *     effects: Array of effect types\n * }}\n */\nfunction _createLocalTracks(mediaStreamMetaData = []) {\n    return mediaStreamMetaData.map(metaData => {\n        const {\n            sourceId,\n            sourceType,\n            stream,\n            track,\n            videoType,\n            effects\n        } = metaData;\n\n        const { deviceId, facingMode } = track.getSettings();\n\n        // FIXME Move rtcTrackIdCounter to a static method in JitsiLocalTrack\n        // so RTC does not need to handle ID management. This move would be\n        // safer to do once the old createLocalTracks is removed.\n        rtcTrackIdCounter = safeCounterIncrement(rtcTrackIdCounter);\n\n        return new JitsiLocalTrack({\n            deviceId,\n            facingMode,\n            mediaType: track.kind,\n            rtcId: rtcTrackIdCounter,\n            sourceId,\n            sourceType,\n            stream,\n            track,\n            videoType: videoType || null,\n            effects\n        });\n    });\n}\n\n/**\n *\n */\nexport default class RTC extends Listenable {\n    /**\n     *\n     * @param conference\n     * @param options\n     */\n    constructor(conference, options = {}) {\n        super();\n        this.conference = conference;\n\n        /**\n         * A map of active <tt>TraceablePeerConnection</tt>.\n         * @type {Map.<number, TraceablePeerConnection>}\n         */\n        this.peerConnections = new Map();\n\n        this.localTracks = [];\n\n        this.options = options;\n\n        // BridgeChannel instance.\n        // @private\n        // @type {BridgeChannel}\n        this._channel = null;\n\n        /**\n         * The value specified to the last invocation of setLastN before the\n         * channel completed opening. If non-null, the value will be sent\n         * through a channel (once) as soon as it opens and will then be\n         * discarded.\n         * @private\n         * @type {number}\n         */\n        this._lastN = undefined;\n\n        /**\n         * Defines the last N endpoints list. It can be null or an array once\n         * initialised with a channel last N event.\n         * @type {Array<string>|null}\n         * @private\n         */\n        this._lastNEndpoints = null;\n\n        /**\n         * Defines the forwarded sources list. It can be null or an array once initialised with a channel forwarded\n         * sources event.\n         *\n         * @type {Array<string>|null}\n         * @private\n         */\n        this._forwardedSources = null;\n\n        /**\n         * The number representing the maximum video height the local client\n         * should receive from the bridge.\n         *\n         * @type {number|undefined}\n         * @private\n         */\n        this._maxFrameHeight = undefined;\n\n        /**\n         * The endpoint IDs of currently selected participants.\n         *\n         * @type {Array}\n         * @private\n         */\n        this._selectedEndpoints = null;\n\n        // The last N change listener.\n        this._lastNChangeListener = this._onLastNChanged.bind(this);\n\n        // The forwarded sources change listener.\n        this._forwardedSourcesChangeListener = this._onForwardedSourcesChanged.bind(this);\n\n        this._onDeviceListChanged = this._onDeviceListChanged.bind(this);\n        this._updateAudioOutputForAudioTracks\n            = this._updateAudioOutputForAudioTracks.bind(this);\n\n        /**\n         * The default video type assumed by the bridge.\n         * @deprecated this will go away with multiple streams support\n         * @type {BridgeVideoType}\n         * @private\n         */\n        this._videoType = BridgeVideoType.NONE;\n\n        // Switch audio output device on all remote audio tracks. Local audio\n        // tracks handle this event by themselves.\n        if (RTCUtils.isDeviceChangeAvailable('output')) {\n            RTCUtils.addListener(\n                RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                this._updateAudioOutputForAudioTracks\n            );\n\n            RTCUtils.addListener(\n                RTCEvents.DEVICE_LIST_CHANGED,\n                this._onDeviceListChanged\n            );\n        }\n    }\n\n    /**\n     * Removes any listeners and stored state from this {@code RTC} instance.\n     *\n     * @returns {void}\n     */\n    destroy() {\n        RTCUtils.removeListener(RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED, this._updateAudioOutputForAudioTracks);\n        RTCUtils.removeListener(RTCEvents.DEVICE_LIST_CHANGED, this._onDeviceListChanged);\n\n        if (this._channelOpenListener) {\n            this.removeListener(RTCEvents.DATA_CHANNEL_OPEN, this._channelOpenListener);\n        }\n    }\n\n    /**\n     * Exposes the private helper for converting a WebRTC MediaStream to a\n     * JitsiLocalTrack.\n     *\n     * @param {Array<Object>} tracksInfo\n     * @returns {Array<JitsiLocalTrack>}\n     */\n    static createLocalTracks(tracksInfo) {\n        return _createLocalTracks(tracksInfo);\n    }\n\n    /**\n     * Creates the local MediaStreams.\n     * @param {object} [options] Optional parameters.\n     * @param {array} options.devices The devices that will be requested.\n     * @param {string} options.resolution Resolution constraints.\n     * @param {string} options.cameraDeviceId\n     * @param {string} options.micDeviceId\n     * @returns {*} Promise object that will receive the new JitsiTracks\n     */\n    static obtainAudioAndVideoPermissions(options) {\n        return RTCUtils.obtainAudioAndVideoPermissions(options)\n            .then(tracksInfo => _createLocalTracks(tracksInfo));\n    }\n\n    /**\n     * Initializes the bridge channel of this instance.\n     * At least one of both, peerconnection or wsUrl parameters, must be\n     * given.\n     * @param {RTCPeerConnection} [peerconnection] WebRTC peer connection\n     * instance.\n     * @param {string} [wsUrl] WebSocket URL.\n     */\n    initializeBridgeChannel(peerconnection, wsUrl) {\n        this._channel = new BridgeChannel(peerconnection, wsUrl, this.eventEmitter);\n\n        this._channelOpenListener = () => {\n            const logError = (error, msgType, value) => {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error(`Cannot send ${msgType}(${JSON.stringify(value)}) endpoint message`, error);\n            };\n\n            // When the channel becomes available, tell the bridge about video selections so that it can do adaptive\n            // simulcast, we want the notification to trigger even if userJid is undefined, or null.\n            if (this._receiverVideoConstraints) {\n                try {\n                    this._channel.sendNewReceiverVideoConstraintsMessage(this._receiverVideoConstraints);\n                } catch (error) {\n                    logError(error, 'ReceiverVideoConstraints', this._receiverVideoConstraints);\n                }\n            }\n            if (this._selectedEndpoints) {\n                try {\n                    this._channel.sendSelectedEndpointsMessage(this._selectedEndpoints);\n                } catch (error) {\n                    logError(error, 'SelectedEndpointsChangedEvent', this._selectedEndpoints);\n                }\n            }\n            if (typeof this._maxFrameHeight !== 'undefined') {\n                try {\n                    this._channel.sendReceiverVideoConstraintMessage(this._maxFrameHeight);\n                } catch (error) {\n                    logError(error, 'ReceiverVideoConstraint', this._maxFrameHeight);\n                }\n            }\n            if (typeof this._lastN !== 'undefined' && this._lastN !== -1) {\n                try {\n                    this._channel.sendSetLastNMessage(this._lastN);\n                } catch (error) {\n                    logError(error, 'LastNChangedEvent', this._lastN);\n                }\n            }\n            if (!FeatureFlags.isSourceNameSignalingEnabled()) {\n                try {\n                    this._channel.sendVideoTypeMessage(this._videoType);\n                } catch (error) {\n                    logError(error, 'VideoTypeMessage', this._videoType);\n                }\n            }\n        };\n        this.addListener(RTCEvents.DATA_CHANNEL_OPEN, this._channelOpenListener);\n\n        // Add Last N change listener.\n        this.addListener(RTCEvents.LASTN_ENDPOINT_CHANGED, this._lastNChangeListener);\n\n        if (FeatureFlags.isSourceNameSignalingEnabled()) {\n            // Add forwarded sources change listener.\n            this.addListener(RTCEvents.FORWARDED_SOURCES_CHANGED, this._forwardedSourcesChangeListener);\n        }\n    }\n\n    /**\n     * Callback invoked when the list of known audio and video devices has\n     * been updated. Attempts to update the known available audio output\n     * devices.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onDeviceListChanged() {\n        this._updateAudioOutputForAudioTracks(RTCUtils.getAudioOutputDevice());\n    }\n\n    /**\n     * Receives events when Last N had changed.\n     * @param {array} lastNEndpoints The new Last N endpoints.\n     * @private\n     */\n    _onLastNChanged(lastNEndpoints = []) {\n        const oldLastNEndpoints = this._lastNEndpoints || [];\n        let leavingLastNEndpoints = [];\n        let enteringLastNEndpoints = [];\n\n        this._lastNEndpoints = lastNEndpoints;\n\n        leavingLastNEndpoints = oldLastNEndpoints.filter(\n            id => !this.isInLastN(id));\n\n        enteringLastNEndpoints = lastNEndpoints.filter(\n            id => oldLastNEndpoints.indexOf(id) === -1);\n\n        this.conference.eventEmitter.emit(\n            JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED,\n            leavingLastNEndpoints,\n            enteringLastNEndpoints);\n    }\n\n    /**\n     * Receives events when forwarded sources had changed.\n     *\n     * @param {array} forwardedSources The new forwarded sources.\n     * @private\n     */\n    _onForwardedSourcesChanged(forwardedSources = []) {\n        const oldForwardedSources = this._forwardedSources || [];\n        let leavingForwardedSources = [];\n        let enteringForwardedSources = [];\n\n        this._forwardedSources = forwardedSources;\n\n        leavingForwardedSources = oldForwardedSources.filter(sourceName => !this.isInForwardedSources(sourceName));\n\n        enteringForwardedSources = forwardedSources.filter(\n            sourceName => oldForwardedSources.indexOf(sourceName) === -1);\n\n        this.conference.eventEmitter.emit(\n            JitsiConferenceEvents.FORWARDED_SOURCES_CHANGED,\n            leavingForwardedSources,\n            enteringForwardedSources,\n            Date.now());\n    }\n\n    /**\n     * Should be called when current media session ends and after the\n     * PeerConnection has been closed using PeerConnection.close() method.\n     */\n    onCallEnded() {\n        if (this._channel) {\n            // The BridgeChannel is not explicitly closed as the PeerConnection\n            // is closed on call ended which triggers datachannel onclose\n            // events. If using a WebSocket, the channel must be closed since\n            // it is not managed by the PeerConnection.\n            // The reference is cleared to disable any logic related to the\n            // channel.\n            if (this._channel && this._channel.mode === 'websocket') {\n                this._channel.close();\n            }\n\n            this._channel = null;\n        }\n    }\n\n    /**\n     * Sets the capture frame rate to be used for desktop tracks.\n     *\n     * @param {number} maxFps framerate to be used for desktop track capture.\n     */\n    setDesktopSharingFrameRate(maxFps) {\n        RTCUtils.setDesktopSharingFrameRate(maxFps);\n    }\n\n    /**\n     * Sets the receiver video constraints that determine how bitrate is allocated to each of the video streams\n     * requested from the bridge. The constraints are cached and sent through the bridge channel once the channel\n     * is established.\n     * @param {*} constraints\n     */\n    setNewReceiverVideoConstraints(constraints) {\n        this._receiverVideoConstraints = constraints;\n\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendNewReceiverVideoConstraintsMessage(constraints);\n        }\n    }\n\n    /**\n     * Sets the maximum video size the local participant should receive from\n     * remote participants. Will cache the value and send it through the channel\n     * once it is created.\n     *\n     * @param {number} maxFrameHeightPixels the maximum frame height, in pixels,\n     * this receiver is willing to receive.\n     * @returns {void}\n     */\n    setReceiverVideoConstraint(maxFrameHeight) {\n        this._maxFrameHeight = maxFrameHeight;\n\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendReceiverVideoConstraintMessage(maxFrameHeight);\n        }\n    }\n\n    /**\n     * Sets the video type and availability for the local video source.\n     *\n     * @param {string} videoType 'camera' for camera, 'desktop' for screenshare and\n     * 'none' for when local video source is muted or removed from the peerconnection.\n     * @returns {void}\n     */\n    setVideoType(videoType) {\n        if (this._videoType !== videoType) {\n            this._videoType = videoType;\n\n            if (this._channel && this._channel.isOpen()) {\n                this._channel.sendVideoTypeMessage(videoType);\n            }\n        }\n    }\n\n    /**\n     * Sends the track's  video type to the JVB.\n     * @param {SourceName} sourceName - the track's source name.\n     * @param {BridgeVideoType} videoType - the track's video type.\n     */\n    sendSourceVideoType(sourceName, videoType) {\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendSourceVideoTypeMessage(sourceName, videoType);\n        }\n    }\n\n    /**\n     * Elects the participants with the given ids to be the selected\n     * participants in order to always receive video for this participant (even\n     * when last n is enabled). If there is no channel we store it and send it\n     * through the channel once it is created.\n     *\n     * @param {Array<string>} ids - The user ids.\n     * @throws NetworkError or InvalidStateError or Error if the operation\n     * fails.\n     * @returns {void}\n     */\n    selectEndpoints(ids) {\n        this._selectedEndpoints = ids;\n\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendSelectedEndpointsMessage(ids);\n        }\n    }\n\n    /**\n     *\n     * @param eventType\n     * @param listener\n     */\n    static addListener(eventType, listener) {\n        RTCUtils.addListener(eventType, listener);\n    }\n\n    /**\n     *\n     * @param eventType\n     * @param listener\n     */\n    static removeListener(eventType, listener) {\n        RTCUtils.removeListener(eventType, listener);\n    }\n\n    /**\n     *\n     * @param options\n     */\n    static init(options = {}) {\n        this.options = options;\n\n        return RTCUtils.init(this.options);\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Creates new <tt>TraceablePeerConnection</tt>\n     * @param {SignalingLayer} signaling The signaling layer that will provide information about the media or\n     * participants which is not carried over SDP.\n     * @param {object} pcConfig The {@code RTCConfiguration} to use for the WebRTC peer connection.\n     * @param {boolean} isP2P Indicates whether or not the new TPC will be used in a peer to peer type of session.\n     * @param {object} options The config options.\n     * @param {boolean} options.enableInsertableStreams - Set to true when the insertable streams constraints is to be\n     * enabled on the PeerConnection.\n     * @param {boolean} options.disableSimulcast If set to 'true' will disable the simulcast.\n     * @param {boolean} options.disableRtx If set to 'true' will disable the RTX.\n     * @param {boolean} options.startSilent If set to 'true' no audio will be sent or received.\n     * @return {TraceablePeerConnection}\n     */\n    createPeerConnection(signaling, pcConfig, isP2P, options) {\n        const pcConstraints = JSON.parse(JSON.stringify(RTCUtils.pcConstraints));\n\n        if (options.enableInsertableStreams) {\n            logger.debug('E2EE - setting insertable streams constraints');\n            pcConfig.encodedInsertableStreams = true;\n        }\n\n        const supportsSdpSemantics = browser.isReactNative()\n            || (browser.isChromiumBased() && !options.usesUnifiedPlan);\n\n        if (supportsSdpSemantics) {\n            logger.debug('WebRTC application is running in plan-b mode');\n            pcConfig.sdpSemantics = 'plan-b';\n        }\n\n        if (options.forceTurnRelay) {\n            pcConfig.iceTransportPolicy = 'relay';\n        }\n\n        // Set the RTCBundlePolicy to max-bundle so that only one set of ice candidates is generated.\n        // The default policy generates separate ice candidates for audio and video connections.\n        // This change is necessary for Unified plan to work properly on Chrome and Safari.\n        pcConfig.bundlePolicy = 'max-bundle';\n\n        peerConnectionIdCounter = safeCounterIncrement(peerConnectionIdCounter);\n\n        const newConnection\n            = new TraceablePeerConnection(\n                this,\n                peerConnectionIdCounter,\n                signaling,\n                pcConfig, pcConstraints,\n                isP2P, options);\n\n        this.peerConnections.set(newConnection.id, newConnection);\n\n        return newConnection;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Removed given peer connection from this RTC module instance.\n     * @param {TraceablePeerConnection} traceablePeerConnection\n     * @return {boolean} <tt>true</tt> if the given peer connection was removed\n     * successfully or <tt>false</tt> if there was no peer connection mapped in\n     * this RTC instance.\n     */\n    _removePeerConnection(traceablePeerConnection) {\n        const id = traceablePeerConnection.id;\n\n        if (this.peerConnections.has(id)) {\n            // NOTE Remote tracks are not removed here.\n            this.peerConnections.delete(id);\n\n            return true;\n        }\n\n        return false;\n\n    }\n\n    /**\n     *\n     * @param track\n     */\n    addLocalTrack(track) {\n        if (!track) {\n            throw new Error('track must not be null nor undefined');\n        }\n\n        this.localTracks.push(track);\n\n        track.conference = this.conference;\n    }\n\n    /**\n     * Get forwarded sources list.\n     * @returns {Array<string>|null}\n     */\n    getForwardedSources() {\n        return this._forwardedSources;\n    }\n\n    /**\n     * Get local video track.\n     * @returns {JitsiLocalTrack|undefined}\n     */\n    getLocalVideoTrack() {\n        const localVideo = this.getLocalTracks(MediaType.VIDEO);\n\n\n        return localVideo.length ? localVideo[0] : undefined;\n    }\n\n    /**\n     * Returns all the local video tracks.\n     * @returns {Array<JitsiLocalTrack>}\n     */\n    getLocalVideoTracks() {\n        return this.getLocalTracks(MediaType.VIDEO);\n    }\n\n    /**\n     * Get local audio track.\n     * @returns {JitsiLocalTrack|undefined}\n     */\n    getLocalAudioTrack() {\n        const localAudio = this.getLocalTracks(MediaType.AUDIO);\n\n\n        return localAudio.length ? localAudio[0] : undefined;\n    }\n\n    /**\n     * Returns the endpoint id for the local user.\n     * @returns {string}\n     */\n    getLocalEndpointId() {\n        return this.conference.myUserId();\n    }\n\n    /**\n     * Returns the local tracks of the given media type, or all local tracks if\n     * no specific type is given.\n     * @param {MediaType} [mediaType] Optional media type filter.\n     * (audio or video).\n     */\n    getLocalTracks(mediaType) {\n        let tracks = this.localTracks.slice();\n\n        if (mediaType !== undefined) {\n            tracks = tracks.filter(\n                track => track.getType() === mediaType);\n        }\n\n        return tracks;\n    }\n\n    /**\n     * Obtains all remote tracks currently known to this RTC module instance.\n     * @param {MediaType} [mediaType] The remote tracks will be filtered\n     *      by their media type if this argument is specified.\n     * @return {Array<JitsiRemoteTrack>}\n     */\n    getRemoteTracks(mediaType) {\n        let remoteTracks = [];\n\n        for (const tpc of this.peerConnections.values()) {\n            const pcRemoteTracks = tpc.getRemoteTracks(undefined, mediaType);\n\n            if (pcRemoteTracks) {\n                remoteTracks = remoteTracks.concat(pcRemoteTracks);\n            }\n        }\n\n        return remoteTracks;\n    }\n\n    /**\n     * Set mute for all local audio streams attached to the conference.\n     * @param value The mute value.\n     * @returns {Promise}\n     */\n    setAudioMute(value) {\n        const mutePromises = [];\n\n        this.getLocalTracks(MediaType.AUDIO).forEach(audioTrack => {\n            // this is a Promise\n            mutePromises.push(value ? audioTrack.mute() : audioTrack.unmute());\n        });\n\n        // We return a Promise from all Promises so we can wait for their\n        // execution.\n        return Promise.all(mutePromises);\n    }\n\n    /**\n    * Set mute for all local video streams attached to the conference.\n    * @param value The mute value.\n    * @returns {Promise}\n    */\n    setVideoMute(value) {\n        const mutePromises = [];\n\n        this.getLocalTracks(MediaType.VIDEO).concat(this.getLocalTracks(MediaType.PRESENTER))\n            .forEach(videoTrack => {\n                // this is a Promise\n                mutePromises.push(value ? videoTrack.mute() : videoTrack.unmute());\n            });\n\n        // We return a Promise from all Promises so we can wait for their\n        // execution.\n        return Promise.all(mutePromises);\n    }\n\n    /**\n     *\n     * @param track\n     */\n    removeLocalTrack(track) {\n        const pos = this.localTracks.indexOf(track);\n\n        if (pos === -1) {\n            return;\n        }\n\n        this.localTracks.splice(pos, 1);\n    }\n\n    /**\n     *\n     * @param elSelector\n     * @param stream\n     */\n    static attachMediaStream(elSelector, stream) {\n        return RTCUtils.attachMediaStream(elSelector, stream);\n    }\n\n    /**\n     * Returns true if retrieving the list of input devices is supported\n     * and false if not.\n     */\n    static isDeviceListAvailable() {\n        return RTCUtils.isDeviceListAvailable();\n    }\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     * @param {string} [deviceType] Type of device to change. Default is\n     *      undefined or 'input', 'output' - for audio output device change.\n     * @returns {boolean} true if available, false otherwise.\n     */\n    static isDeviceChangeAvailable(deviceType) {\n        return RTCUtils.isDeviceChangeAvailable(deviceType);\n    }\n\n    /**\n     * Returns whether the current execution environment supports WebRTC (for\n     * use within this library).\n     *\n     * @returns {boolean} {@code true} if WebRTC is supported in the current\n     * execution environment (for use within this library); {@code false},\n     * otherwise.\n     */\n    static isWebRtcSupported() {\n        return browser.isSupported();\n    }\n\n    /**\n     * Returns currently used audio output device id, '' stands for default\n     * device\n     * @returns {string}\n     */\n    static getAudioOutputDevice() {\n        return RTCUtils.getAudioOutputDevice();\n    }\n\n    /**\n     * Returns list of available media devices if its obtained, otherwise an\n     * empty array is returned/\n     * @returns {array} list of available media devices.\n     */\n    static getCurrentlyAvailableMediaDevices() {\n        return RTCUtils.getCurrentlyAvailableMediaDevices();\n    }\n\n    /**\n     * Returns whether available devices have permissions granted\n     * @returns {Boolean}\n     */\n    static arePermissionsGrantedForAvailableDevices() {\n        return RTCUtils.arePermissionsGrantedForAvailableDevices();\n    }\n\n    /**\n     * Returns event data for device to be reported to stats.\n     * @returns {MediaDeviceInfo} device.\n     */\n    static getEventDataForActiveDevice(device) {\n        return RTCUtils.getEventDataForActiveDevice(device);\n    }\n\n    /**\n     * Sets current audio output device.\n     * @param {string} deviceId Id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices().\n     * @returns {Promise} resolves when audio output is changed, is rejected\n     *      otherwise\n     */\n    static setAudioOutputDevice(deviceId) {\n        return RTCUtils.setAudioOutputDevice(deviceId);\n    }\n\n    /**\n     * Returns <tt>true<tt/> if given WebRTC MediaStream is considered a valid\n     * \"user\" stream which means that it's not a \"receive only\" stream nor a\n     * \"mixed\" JVB stream.\n     *\n     * Clients that implement Unified Plan, such as Firefox use recvonly\n     * \"streams/channels/tracks\" for receiving remote stream/tracks, as opposed\n     * to Plan B where there are only 3 channels: audio, video and data.\n     *\n     * @param {MediaStream} stream The WebRTC MediaStream instance.\n     * @returns {boolean}\n     */\n    static isUserStream(stream) {\n        return RTC.isUserStreamById(stream.id);\n    }\n\n    /**\n     * Returns <tt>true<tt/> if a WebRTC MediaStream identified by given stream\n     * ID is considered a valid \"user\" stream which means that it's not a\n     * \"receive only\" stream nor a \"mixed\" JVB stream.\n     *\n     * Clients that implement Unified Plan, such as Firefox use recvonly\n     * \"streams/channels/tracks\" for receiving remote stream/tracks, as opposed\n     * to Plan B where there are only 3 channels: audio, video and data.\n     *\n     * @param {string} streamId The id of WebRTC MediaStream.\n     * @returns {boolean}\n     */\n    static isUserStreamById(streamId) {\n        return streamId && streamId !== 'mixedmslabel'\n            && streamId !== 'default';\n    }\n\n    /**\n     * Allows to receive list of available cameras/microphones.\n     * @param {function} callback Would receive array of devices as an\n     *      argument.\n     */\n    static enumerateDevices(callback) {\n        RTCUtils.enumerateDevices(callback);\n    }\n\n    /**\n     * A method to handle stopping of the stream.\n     * One point to handle the differences in various implementations.\n     * @param {MediaStream} mediaStream MediaStream object to stop.\n     */\n    static stopMediaStream(mediaStream) {\n        RTCUtils.stopMediaStream(mediaStream);\n    }\n\n    /**\n     * Returns whether the desktop sharing is enabled or not.\n     * @returns {boolean}\n     */\n    static isDesktopSharingEnabled() {\n        return RTCUtils.isDesktopSharingEnabled();\n    }\n\n    /**\n     * Closes the currently opened bridge channel.\n     */\n    closeBridgeChannel() {\n        if (this._channel) {\n            this._channel.close();\n            this._channel = null;\n\n            this.removeListener(RTCEvents.LASTN_ENDPOINT_CHANGED, this._lastNChangeListener);\n        }\n    }\n\n    /* eslint-disable max-params */\n    /**\n     *\n     * @param {TraceablePeerConnection} tpc\n     * @param {number} ssrc\n     * @param {number} audioLevel\n     * @param {boolean} isLocal\n     */\n    setAudioLevel(tpc, ssrc, audioLevel, isLocal) {\n        const track = tpc.getTrackBySSRC(ssrc);\n\n        if (!track) {\n            return;\n        } else if (!track.isAudioTrack()) {\n            logger.warn(`Received audio level for non-audio track: ${ssrc}`);\n\n            return;\n        } else if (track.isLocal() !== isLocal) {\n            logger.error(\n                `${track} was expected to ${isLocal ? 'be' : 'not be'} local`);\n        }\n\n        track.setAudioLevel(audioLevel, tpc);\n    }\n\n    /**\n     * Sends message via the bridge channel.\n     * @param {string} to The id of the endpoint that should receive the\n     *      message. If \"\" the message will be sent to all participants.\n     * @param {object} payload The payload of the message.\n     * @throws NetworkError or InvalidStateError or Error if the operation\n     * fails or there is no data channel created.\n     */\n    sendChannelMessage(to, payload) {\n        if (this._channel) {\n            this._channel.sendMessage(to, payload);\n        } else {\n            throw new Error('Channel support is disabled!');\n        }\n    }\n\n    /**\n     * Sends the local stats via the bridge channel.\n     * @param {Object} payload The payload of the message.\n     * @throws NetworkError/InvalidStateError/Error if the operation fails or if there is no data channel created.\n     */\n    sendEndpointStatsMessage(payload) {\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendEndpointStatsMessage(payload);\n        }\n    }\n\n    /**\n     * Selects a new value for \"lastN\". The requested amount of videos are going\n     * to be delivered after the value is in effect. Set to -1 for unlimited or\n     * all available videos.\n     * @param {number} value the new value for lastN.\n     */\n    setLastN(value) {\n        if (this._lastN !== value) {\n            this._lastN = value;\n            if (this._channel && this._channel.isOpen()) {\n                this._channel.sendSetLastNMessage(value);\n            }\n            this.eventEmitter.emit(RTCEvents.LASTN_VALUE_CHANGED, value);\n        }\n    }\n\n    /**\n     * Indicates if the endpoint id is currently included in the last N.\n     * @param {string} id The endpoint id that we check for last N.\n     * @returns {boolean} true if the endpoint id is in the last N or if we\n     * don't have bridge channel support, otherwise we return false.\n     */\n    isInLastN(id) {\n        return !this._lastNEndpoints // lastNEndpoints not initialised yet.\n            || this._lastNEndpoints.indexOf(id) > -1;\n    }\n\n    /**\n     * Indicates if the source name is currently included in the forwarded sources.\n     *\n     * @param {string} sourceName The source name that we check for forwarded sources.\n     * @returns {boolean} true if the source name is in the forwarded sources or if we don't have bridge channel\n     * support, otherwise we return false.\n     */\n    isInForwardedSources(sourceName) {\n        return !this._forwardedSources // forwardedSources not initialised yet.\n            || this._forwardedSources.indexOf(sourceName) > -1;\n    }\n\n    /**\n     * Updates the target audio output device for all remote audio tracks.\n     *\n     * @param {string} deviceId - The device id of the audio ouput device to\n     * use for all remote tracks.\n     * @private\n     * @returns {void}\n     */\n    _updateAudioOutputForAudioTracks(deviceId) {\n        const remoteAudioTracks = this.getRemoteTracks(MediaType.AUDIO);\n\n        for (const track of remoteAudioTracks) {\n            track.setAudioOutput(deviceId);\n        }\n    }\n}\n","export enum ConnectionQualityEvents {\n    /**\n     * Indicates that the local connection statistics were updated.\n     */\n    LOCAL_STATS_UPDATED = 'cq.local_stats_updated',\n\n    /**\n     * Indicates that the connection statistics for a particular remote participant\n     * were updated.\n     */\n    REMOTE_STATS_UPDATED = 'cq.remote_stats_updated'\n};\n\n// exported for backward compatibility\nexport const LOCAL_STATS_UPDATED = ConnectionQualityEvents.LOCAL_STATS_UPDATED;\nexport const REMOTE_STATS_UPDATED = ConnectionQualityEvents.REMOTE_STATS_UPDATED;\n\n","import { getLogger } from '@jitsi/logger';\n\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\nimport CodecMimeType from '../../service/RTC/CodecMimeType';\nimport * as RTCEvents from '../../service/RTC/RTCEvents';\nimport * as ConnectionQualityEvents from '../../service/connectivity/ConnectionQualityEvents';\nimport browser from '../browser';\n\nconst Resolutions = require('../../service/RTC/Resolutions');\nconst { VideoType } = require('../../service/RTC/VideoType');\nconst { XMPPEvents } = require('../../service/xmpp/XMPPEvents');\n\nconst logger = getLogger(__filename);\n\n/**\n * The value to use for the \"type\" field for messages sent by ConnectionQuality\n * over the data channel.\n */\nconst STATS_MESSAGE_TYPE = 'stats';\n\n/**\n * The value to use for the \"type\" field for messages sent\n * over the data channel that contain a face landmark.\n */\nconst FACE_LANDMARK_MESSAGE_TYPE = 'face_landmark';\n\nconst kSimulcastFormats = [\n    { width: 1920,\n        height: 1080,\n        layers: 3,\n        target: 'high',\n        targetRN: 4000000 },\n    { width: 1280,\n        height: 720,\n        layers: 3,\n        target: 'high',\n        targetRN: 2500000 },\n    { width: 960,\n        height: 540,\n        layers: 3,\n        target: 'standard',\n        targetRN: 900000 },\n    { width: 640,\n        height: 360,\n        layers: 2,\n        target: 'standard',\n        targetRN: 500000 },\n    { width: 480,\n        height: 270,\n        layers: 2,\n        target: 'low',\n        targetRN: 350000 },\n    { width: 320,\n        height: 180,\n        layers: 1,\n        target: 'low',\n        targetRN: 150000 }\n];\n\n/**\n * The maximum bitrate to use as a measurement against the participant's current\n * bitrate. This cap helps in the cases where the participant's bitrate is high\n * but not enough to fulfill high targets, such as with 1080p.\n */\nconst MAX_TARGET_BITRATE = 2500;\n\n/**\n * The initial bitrate for video in kbps.\n */\nlet startBitrate = 800;\n\n/**\n * Gets the expected bitrate (in kbps) in perfect network conditions.\n * @param simulcast {boolean} whether simulcast is enabled or not.\n * @param resolution {Resolution} the resolution.\n * @param millisSinceStart {number} the number of milliseconds since sending video started.\n * @param videoQualitySettings {Object} the bitrate and codec settings for the local video source.\n */\nfunction getTarget(simulcast, resolution, millisSinceStart, videoQualitySettings) {\n    let target = 0;\n    let height = Math.min(resolution.height, resolution.width);\n\n    // Find the first format with height no bigger than ours.\n    let simulcastFormat = kSimulcastFormats.find(f => f.height <= height);\n\n    if (simulcastFormat && simulcast && videoQualitySettings.codec === CodecMimeType.VP8) {\n        // Sum the target fields from all simulcast layers for the given\n        // resolution (e.g. 720p + 360p + 180p) for VP8 simulcast.\n        for (height = simulcastFormat.height; height >= 180; height /= 2) {\n            const targetHeight = height;\n\n            simulcastFormat = kSimulcastFormats.find(f => f.height === targetHeight);\n            if (simulcastFormat) {\n                target += browser.isReactNative()\n                    ? simulcastFormat.targetRN\n                    : videoQualitySettings[simulcastFormat.target];\n            } else {\n                break;\n            }\n        }\n    } else if (simulcastFormat) {\n        // For VP9 SVC, H.264 (simulcast automatically disabled) and p2p, target bitrate will be\n        // same as that of the individual stream bitrate.\n        target = browser.isReactNative()\n            ? simulcastFormat.targetRN\n            : videoQualitySettings[simulcastFormat.target];\n    }\n\n    // Allow for an additional 1 second for ramp up -- delay any initial drop\n    // of connection quality by 1 second. Convert target from bps to kbps.\n    return Math.min(target / 1000, rampUp(Math.max(0, millisSinceStart - 1000)));\n}\n\n/**\n * Gets the bitrate to which GCC would have ramped up in perfect network\n * conditions after millisSinceStart milliseconds.\n * @param millisSinceStart {number} the number of milliseconds since sending\n * video was enabled.\n */\nfunction rampUp(millisSinceStart) {\n    if (millisSinceStart > 60000) {\n        return Number.MAX_SAFE_INTEGER;\n    }\n\n    // According to GCC the send side bandwidth estimation grows with at most\n    // 8% per second.\n    // https://tools.ietf.org/html/draft-ietf-rmcat-gcc-02#section-5.5\n    return startBitrate * Math.pow(1.08, millisSinceStart / 1000);\n}\n\n/**\n * A class which monitors the local statistics coming from the RTC modules, and\n * calculates a \"connection quality\" value, in percent, for the media\n * connection. A value of 100% indicates a very good network connection, and a\n * value of 0% indicates a poor connection.\n */\nexport default class ConnectionQuality {\n    /**\n     *\n     * @param conference\n     * @param eventEmitter\n     * @param options\n     */\n    constructor(conference, eventEmitter, options) {\n        this.eventEmitter = eventEmitter;\n\n        /**\n         * The owning JitsiConference.\n         */\n        this._conference = conference;\n\n        /**\n         * Holds statistics about the local connection quality.\n         */\n        this._localStats = {\n            connectionQuality: 100,\n            jvbRTT: undefined\n        };\n\n        /**\n         * The time this._localStats.connectionQuality was last updated.\n         */\n        this._lastConnectionQualityUpdate = -1;\n\n        /**\n         * Conference options.\n         */\n        this._options = options;\n\n        /**\n         * Maps a participant ID to an object holding connection quality\n         * statistics received from this participant.\n         */\n        this._remoteStats = {};\n\n        /**\n         * The time that the ICE state last changed to CONNECTED. We use this\n         * to calculate how much time we as a sender have had to ramp-up.\n         */\n        this._timeIceConnected = -1;\n\n        /**\n         * The time that local video was unmuted. We use this to calculate how\n         * much time we as a sender have had to ramp-up.\n         */\n        this._timeVideoUnmuted = -1;\n\n        // We assume a global startBitrate value for the sake of simplicity.\n        if (this._options.config?.startBitrate > 0) {\n            startBitrate = this._options.config.startBitrate;\n        }\n\n        // TODO: consider ignoring these events and letting the user of\n        // lib-jitsi-meet handle these separately.\n        conference.on(\n            ConferenceEvents.CONNECTION_INTERRUPTED,\n            () => {\n                this._updateLocalConnectionQuality(0);\n                this.eventEmitter.emit(\n                    ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n                    this._localStats);\n                this._broadcastLocalStats();\n            });\n\n        conference.room.addListener(\n            XMPPEvents.ICE_CONNECTION_STATE_CHANGED,\n            (jingleSession, newState) => {\n                if (!jingleSession.isP2P && newState === 'connected') {\n                    this._timeIceConnected = window.performance.now();\n                }\n            });\n\n        // Listen to DataChannel message from other participants in the\n        // conference, and update the _remoteStats field accordingly.\n        // TODO - Delete this when all the mobile endpoints switch to using the new Colibri\n        // message format for sending the endpoint stats.\n        conference.on(\n            ConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n            (participant, payload) => {\n                if (payload.type === STATS_MESSAGE_TYPE) {\n                    this._updateRemoteStats(\n                        participant.getId(), payload.values);\n                }\n            });\n\n        conference.on(\n            ConferenceEvents.ENDPOINT_STATS_RECEIVED,\n            (participant, payload) => {\n                this._updateRemoteStats(participant.getId(), payload);\n            });\n\n        conference.on(\n            ConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n            (participant, payload) => {\n                if (payload.type === FACE_LANDMARK_MESSAGE_TYPE) {\n                    this.eventEmitter.emit(\n                        ConferenceEvents.FACE_LANDMARK_ADDED,\n                        participant.getId(),\n                        payload);\n                }\n            });\n\n        // Listen to local statistics events originating from the RTC module and update the _localStats field.\n        conference.statistics.addConnectionStatsListener(this._updateLocalStats.bind(this));\n\n        // Save the last time we were unmuted.\n        conference.on(\n            ConferenceEvents.TRACK_MUTE_CHANGED,\n            track => {\n                if (track.isVideoTrack()) {\n                    if (track.isMuted()) {\n                        this._timeVideoUnmuted = -1;\n                    } else {\n                        this._maybeUpdateUnmuteTime();\n                    }\n                }\n            });\n        conference.on(\n            ConferenceEvents.TRACK_ADDED,\n            track => {\n                if (track.isVideoTrack() && !track.isMuted()) {\n                    this._maybeUpdateUnmuteTime();\n                }\n            });\n        conference.rtc.on(\n            RTCEvents.LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED,\n            track => {\n                this._localStats.maxEnabledResolution = track.maxEnabledResolution;\n            });\n\n        conference.on(\n            ConferenceEvents.SERVER_REGION_CHANGED,\n            serverRegion => {\n                this._localStats.serverRegion = serverRegion;\n            });\n\n        conference.on(\n            ConferenceEvents.PROPERTIES_CHANGED,\n            properties => {\n                this._localStats.bridgeCount\n                    = Number((properties || {})['bridge-count']);\n            }\n        );\n    }\n\n    /**\n     * Sets _timeVideoUnmuted if it was previously unset. If it was already set,\n     * doesn't change it.\n     */\n    _maybeUpdateUnmuteTime() {\n        if (this._timeVideoUnmuted < 0) {\n            this._timeVideoUnmuted = window.performance.now();\n        }\n    }\n\n    /**\n     * Calculates a new \"connection quality\" value.\n     * @param videoType {VideoType} the type of the video source (camera or a screen capture).\n     * @param isMuted {boolean} whether the local video is muted.\n     * @param resolutionName {Resolution} the input resolution used by the camera.\n     * @returns {*} the newly calculated connection quality.\n     */\n    _calculateConnectionQuality(videoType, isMuted, resolutionName) {\n\n        // resolutionName is an index into Resolutions (where \"720\" is\n        // \"1280x720\" and \"960\" is \"960x720\" ...).\n        const resolution = Resolutions[resolutionName];\n\n        let quality = 100;\n        let packetLoss;\n\n        // TODO: take into account packet loss for received streams\n\n        if (this._localStats.packetLoss) {\n            packetLoss = this._localStats.packetLoss.upload;\n\n            // Ugly Hack Alert (UHA):\n            // The packet loss for the upload direction is calculated based on\n            // incoming RTCP Receiver Reports. Since we don't have RTCP\n            // termination for audio, these reports come from the actual\n            // receivers in the conference and therefore the reported packet\n            // loss includes loss from the bridge to the receiver.\n            // When we are sending video this effect is small, because the\n            // number of video packets is much larger than the number of audio\n            // packets (and our calculation is based on the total number of\n            // received and lost packets).\n            // When video is muted, however, the effect might be significant,\n            // but we don't know what it is. We do know that it is positive, so\n            // as a temporary solution, until RTCP termination is implemented\n            // for the audio streams, we relax the packet loss checks here.\n            if (isMuted) {\n                packetLoss *= 0.5;\n            }\n        }\n\n        if (isMuted || !resolution || videoType === VideoType.DESKTOP\n            || this._timeIceConnected < 0\n            || this._timeVideoUnmuted < 0) {\n\n            // Calculate a value based on packet loss only.\n            if (packetLoss === undefined) {\n                logger.error('Cannot calculate connection quality, unknown '\n                    + 'packet loss.');\n                quality = 100;\n            } else if (packetLoss <= 2) {\n                quality = 100; // Full 5 bars.\n            } else if (packetLoss <= 4) {\n                quality = 70; // 4 bars\n            } else if (packetLoss <= 6) {\n                quality = 50; // 3 bars\n            } else if (packetLoss <= 8) {\n                quality = 30; // 2 bars\n            } else if (packetLoss <= 12) {\n                quality = 10; // 1 bars\n            } else {\n                quality = 0; // Still 1 bar, but slower climb-up.\n            }\n        } else {\n            // Calculate a value based on the send video bitrate on the active TPC.\n            const activeTPC = this._conference.getActivePeerConnection();\n\n            if (activeTPC) {\n                const isSimulcastOn = activeTPC.isSimulcastOn();\n                const videoQualitySettings = activeTPC.getTargetVideoBitrates();\n\n                // Add the codec info as well.\n                videoQualitySettings.codec = activeTPC.getConfiguredVideoCodec();\n\n                // Time since sending of video was enabled.\n                const millisSinceStart = window.performance.now()\n                    - Math.max(this._timeVideoUnmuted, this._timeIceConnected);\n                const statsInterval = this._options.config?.pcStatsInterval ?? 10000;\n\n                // Expected sending bitrate in perfect conditions.\n                let target = getTarget(isSimulcastOn, resolution, millisSinceStart, videoQualitySettings);\n\n                target = Math.min(target, MAX_TARGET_BITRATE);\n\n                // Calculate the quality only after the stats are available (after video was enabled).\n                if (millisSinceStart > statsInterval) {\n                    quality = 100 * this._localStats.bitrate.upload / target;\n                }\n            }\n\n            // Whatever the bitrate, drop early if there is significant loss\n            if (packetLoss && packetLoss >= 10) {\n                quality = Math.min(quality, 30);\n            }\n        }\n\n        // Make sure that the quality doesn't climb quickly\n        if (this._lastConnectionQualityUpdate > 0) {\n            const maxIncreasePerSecond = 2;\n            const prevConnectionQuality = this._localStats.connectionQuality;\n            const diffSeconds = (window.performance.now() - this._lastConnectionQualityUpdate) / 1000;\n\n            quality = Math.min(quality, prevConnectionQuality + (diffSeconds * maxIncreasePerSecond));\n        }\n\n        return Math.min(100, quality);\n    }\n\n    /**\n     * Updates the localConnectionQuality value\n     * @param values {number} the new value. Should be in [0, 100].\n     */\n    _updateLocalConnectionQuality(value) {\n        this._localStats.connectionQuality = value;\n        this._lastConnectionQualityUpdate = window.performance.now();\n    }\n\n    /**\n     * Broadcasts the local statistics to all other participants in the\n     * conference.\n     */\n    _broadcastLocalStats() {\n        // Send only the data that remote participants care about.\n        const data = {\n            bitrate: this._localStats.bitrate,\n            packetLoss: this._localStats.packetLoss,\n            connectionQuality: this._localStats.connectionQuality,\n            jvbRTT: this._localStats.jvbRTT,\n            serverRegion: this._localStats.serverRegion,\n            maxEnabledResolution: this._localStats.maxEnabledResolution,\n            avgAudioLevels: this._localStats.localAvgAudioLevels\n        };\n\n        try {\n            this._conference.sendEndpointStatsMessage(data);\n        } catch (err) {\n            // Ignore the error as we might hit it in the beginning of the call before the channel is ready.\n            // The statistics will be sent again after few seconds and error is logged elseware as well.\n        }\n    }\n\n    /**\n     * Updates the local statistics\n     * @param {TraceablePeerConnection} tpc the peerconnection which emitted\n     * the stats\n     * @param data new statistics\n     */\n    _updateLocalStats(tpc, data) {\n        // Update jvbRTT\n        if (!tpc.isP2P) {\n            const jvbRTT\n                = data.transport\n                    && data.transport.length && data.transport[0].rtt;\n\n            this._localStats.jvbRTT = jvbRTT ? jvbRTT : undefined;\n        }\n\n        // Do not continue with processing of other stats if they do not\n        // originate from the active peerconnection\n        if (tpc !== this._conference.getActivePeerConnection()) {\n            return;\n        }\n\n        let key;\n        const updateLocalConnectionQuality\n            = !this._conference.isConnectionInterrupted();\n        const localVideoTrack\n            = this._conference.getLocalVideoTrack();\n        const videoType\n            = localVideoTrack ? localVideoTrack.videoType : undefined;\n        const isMuted = localVideoTrack ? localVideoTrack.isMuted() : true;\n        const resolution = localVideoTrack\n            ? Math.min(localVideoTrack.resolution, localVideoTrack.maxEnabledResolution) : null;\n\n        if (!isMuted) {\n            this._maybeUpdateUnmuteTime();\n        }\n\n        // Copy the fields already in 'data'.\n        for (key in data) {\n            if (data.hasOwnProperty(key)) {\n                this._localStats[key] = data[key];\n            }\n        }\n\n        // And re-calculate the connectionQuality field.\n        if (updateLocalConnectionQuality) {\n            this._updateLocalConnectionQuality(\n                this._calculateConnectionQuality(\n                    videoType,\n                    isMuted,\n                    resolution));\n        }\n\n        this.eventEmitter.emit(\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n            this._localStats);\n        this._broadcastLocalStats();\n    }\n\n    /**\n     * Updates remote statistics\n     * @param id the id of the remote participant\n     * @param data the statistics received\n     */\n    _updateRemoteStats(id, data) {\n        // Use only the fields we need\n        this._remoteStats[id] = {\n            bitrate: data.bitrate,\n            packetLoss: data.packetLoss,\n            connectionQuality: data.connectionQuality,\n            jvbRTT: data.jvbRTT,\n            serverRegion: data.serverRegion,\n            maxEnabledResolution: data.maxEnabledResolution,\n            avgAudioLevels: data.avgAudioLevels\n        };\n\n        this.eventEmitter.emit(\n            ConnectionQualityEvents.REMOTE_STATS_UPDATED,\n            id,\n            this._remoteStats[id]);\n    }\n\n    /**\n     * Returns the local statistics.\n     * Exported only for use in jitsi-meet-torture.\n     */\n    getStats() {\n        return this._localStats;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceErrors from '../../JitsiConferenceErrors';\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * This class deals with shenanigans around JVB media session's ICE failed status handling.\n *\n * If ICE restarts are NOT explicitly enabled by the {@code enableIceRestart} config option, then the conference will\n * delay emitting the {@JitsiConferenceErrors.ICE_FAILED} event by 15 seconds. If the network info module reports\n * the internet offline status then the time will start counting after the internet comes back online.\n *\n * If ICE restart are enabled, then a delayed ICE failed notification to Jicofo will be sent, only if the ICE connection\n * does not recover soon after or before the XMPP connection is restored (if it was ever broken). If ICE fails while\n * the XMPP connection is not broken then the notifications will be sent after 2 seconds delay.\n */\nexport default class IceFailedHandling {\n    /**\n     * Creates new {@code DelayedIceFailed} task.\n     * @param {JitsiConference} conference\n     */\n    constructor(conference) {\n        this._conference = conference;\n    }\n\n    /**\n     * After making sure there's no way for the ICE connection to recover this method either sends ICE failed\n     * notification to Jicofo or emits the ice failed conference event.\n     * @private\n     * @returns {void}\n     */\n    _actOnIceFailed() {\n        if (!this._conference.room) {\n            return;\n        }\n\n        const { enableForcedReload, enableIceRestart } = this._conference.options.config;\n        const explicitlyDisabled = typeof enableIceRestart !== 'undefined' && !enableIceRestart;\n        const supportsRestartByTerminate = this._conference.room.supportsRestartByTerminate();\n        const useTerminateForRestart = supportsRestartByTerminate && !enableIceRestart;\n\n        logger.info('ICE failed,'\n            + ` enableForcedReload: ${enableForcedReload},`\n            + ` enableIceRestart: ${enableIceRestart},`\n            + ` supports restart by terminate: ${supportsRestartByTerminate}`);\n\n        if (explicitlyDisabled || (!enableIceRestart && !supportsRestartByTerminate) || enableForcedReload) {\n            logger.info('ICE failed, but ICE restarts are disabled');\n            const reason = enableForcedReload\n                ? JitsiConferenceErrors.CONFERENCE_RESTARTED\n                : JitsiConferenceErrors.ICE_FAILED;\n\n            this._conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED, reason);\n\n            return;\n        }\n\n        const jvbConnection = this._conference.jvbJingleSession;\n        const jvbConnIceState = jvbConnection && jvbConnection.getIceConnectionState();\n\n        if (!jvbConnection) {\n            logger.warn('Not sending ICE failed - no JVB connection');\n        } else if (jvbConnIceState === 'connected') {\n            logger.info('ICE connection restored - not sending ICE failed');\n        } else {\n            logger.info('Sending ICE failed - the connection did not recover, '\n                + `ICE state: ${jvbConnIceState}, `\n                + `use 'session-terminate': ${useTerminateForRestart}`);\n            if (useTerminateForRestart) {\n                this._conference.jvbJingleSession.terminate(\n                    () => {\n                        logger.info('session-terminate for ice restart - done');\n                    },\n                    error => {\n                        logger.error(`session-terminate for ice restart - error: ${error.message}`);\n                    }, {\n                        reason: 'connectivity-error',\n                        reasonDescription: 'ICE FAILED',\n                        requestRestart: true,\n                        sendSessionTerminate: true\n                    });\n            } else {\n                this._conference.jvbJingleSession.sendIceFailedNotification();\n            }\n        }\n    }\n\n    /**\n     * Starts the task.\n     */\n    start() {\n        //  Using xmpp.ping allows to handle both XMPP being disconnected and internet offline cases. The ping function\n        // uses sendIQ2 method which is resilient to XMPP connection disconnected state and will patiently wait until it\n        // gets reconnected.\n        //  This also handles the case about waiting for the internet to come back online, because ping\n        // will only succeed when the internet is online and then there's a chance for the ICE to recover from FAILED to\n        // CONNECTED which is the extra 2 second timeout after ping.\n        //  The 65 second timeout is given on purpose as there's no chance for XMPP to recover after 65 seconds of no\n        // communication with the server. Such resume attempt will result in unrecoverable conference failed event due\n        // to 'item-not-found' error returned by the server.\n        this._conference.xmpp.ping(65000).then(\n            () => {\n                if (!this._canceled) {\n                    this._iceFailedTimeout = window.setTimeout(() => {\n                        this._iceFailedTimeout = undefined;\n                        this._actOnIceFailed();\n                    }, 2000);\n                }\n            },\n            error => {\n                logger.error('PING error/timeout - not sending ICE failed', error);\n            });\n    }\n\n    /**\n     * Cancels the task.\n     */\n    cancel() {\n        this._canceled = true;\n        window.clearTimeout(this._iceFailedTimeout);\n    }\n}\n","export enum DetectionEvents {\n    /**\n     * Event triggered by a audio detector indicating that its active state has changed from active to inactive or vice\n     * versa.\n     * @event\n     * @type {boolean} - true when service has changed to active false otherwise.\n     */\n    DETECTOR_STATE_CHANGE = 'detector_state_change',\n\n    /** Event triggered by {@link NoAudioSignalDetector} when the local audio device associated with a JitsiConference\n     * starts receiving audio levels with the value of 0 meaning no audio is being captured on that device, or when\n     * it starts receiving audio levels !== 0 after being in a state of no audio.\n     * @event\n     * @type {boolean} - true when the current conference audio track has audio input false otherwise.\n     */\n    AUDIO_INPUT_STATE_CHANGE = 'audio_input_state_changed',\n\n    /** Event triggered by NoAudioSignalDetector when the local audio device associated with a JitsiConference goes silent\n     * for a period of time, meaning that the device is either broken or hardware/software muted.\n     * @event\n     * @type {void}\n     */\n    NO_AUDIO_INPUT = 'no_audio_input_detected',\n\n    /**\n     *  Event generated by {@link VADNoiseDetection} when the tracked device is considered noisy.\n     *  @event\n     *  @type {Object}\n     */\n    VAD_NOISY_DEVICE = 'detection.vad_noise_device',\n\n    /**\n     * Event generated by VADReportingService when if finishes creating a VAD report for the monitored devices.\n     * The generated objects are of type Array<Object>, one score for each monitored device.\n     * @event VAD_REPORT_PUBLISHED\n     * @type Array<Object> with the following structure:\n     * @property {Date} timestamp - Timestamp at which the compute took place.\n     * @property {number} avgVAD - Average VAD score over monitored period of time.\n     * @property {string} deviceId - Associate local audio device ID.\n     */\n    VAD_REPORT_PUBLISHED = 'vad-report-published',\n\n    /**\n     * Event generated by {@link TrackVADEmitter} when PCM sample VAD score is available.\n     *\n     * @event\n     * @type {Object}\n     * @property {Date}   timestamp - Exact time at which processed PCM sample was generated.\n     * @property {number} score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n     * @property {Float32Array} pcmData - Raw PCM data with which the VAD score was calculated.\n     * @property {string} deviceId - Device id of the associated track.\n     */\n    VAD_SCORE_PUBLISHED = 'detection.vad_score_published',\n\n    /**\n     *  Event generated by {@link VADTalkMutedDetection} when a user is talking while the mic is muted.\n     *\n     *  @event\n     *  @type {Object}\n     */\n    VAD_TALK_WHILE_MUTED = 'detection.vad_talk_while_muted'\n};\n\n// exported for backward compatibility\nexport const DETECTOR_STATE_CHANGE = DetectionEvents.DETECTOR_STATE_CHANGE;\nexport const AUDIO_INPUT_STATE_CHANGE = DetectionEvents.AUDIO_INPUT_STATE_CHANGE;\nexport const NO_AUDIO_INPUT = DetectionEvents.NO_AUDIO_INPUT;\nexport const VAD_NOISY_DEVICE = DetectionEvents.VAD_NOISY_DEVICE;\nexport const VAD_REPORT_PUBLISHED = DetectionEvents.VAD_REPORT_PUBLISHED;\nexport const VAD_SCORE_PUBLISHED = DetectionEvents.VAD_SCORE_PUBLISHED;\nexport const VAD_TALK_WHILE_MUTED = DetectionEvents.VAD_TALK_WHILE_MUTED;\n","import EventEmitter from 'events';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport browser from '../browser';\n\nimport * as DetectionEvents from './DetectionEvents';\n\n// We wait a certain time interval for constant silence input from the current device to account for\n// potential abnormalities and for a better use experience i.e. don't generate event the instant\n// an audio track is added to the tcr.\n// Potential improvement - add this as a configurable parameter.\nconst SILENCE_PERIOD_MS = 4000;\n\n/**\n * Detect if there is no audio input on the current TraceAblePeerConnection selected track. The no audio\n * state must be constant for a configured amount of time in order for the event to be triggered.\n * @fires DetectionEvents.AUDIO_INPUT_STATE_CHANGE\n * @fires DetectionEvents.NO_AUDIO_INPUT\n */\nexport default class NoAudioSignalDetection extends EventEmitter {\n    /**\n     * Creates new NoAudioSignalDetection.\n     *\n     * @param conference the JitsiConference instance that created us.\n     * @constructor\n     */\n    constructor(conference) {\n        super();\n\n        this._conference = conference;\n        this._timeoutTrigger = null;\n        this._hasAudioInput = null;\n\n        if (!browser.supportsReceiverStats()) {\n            conference.statistics.addAudioLevelListener(this._audioLevel.bind(this));\n        }\n        conference.on(JitsiConferenceEvents.TRACK_ADDED, this._trackAdded.bind(this));\n    }\n\n    /**\n     * Clear the timeout state.\n     */\n    _clearTriggerTimeout() {\n        clearTimeout(this._timeoutTrigger);\n        this._timeoutTrigger = null;\n    }\n\n\n    /**\n     * Generated event triggered by a change in the current conference audio input state.\n     *\n     * @param {*} audioLevel - The audio level of the ssrc.\n     * @fires DetectionEvents.AUDIO_INPUT_STATE_CHANGE\n     */\n    _handleAudioInputStateChange(audioLevel) {\n        // Current audio input state of the active local track in the conference, true for audio input false for no\n        // audio input.\n        const status = audioLevel !== 0;\n\n        // If this is the first audio event picked up or the current status is different from the previous trigger\n        // the event.\n        if (this._hasAudioInput === null || this._hasAudioInput !== status) {\n            this._hasAudioInput = status;\n            this.emit(DetectionEvents.AUDIO_INPUT_STATE_CHANGE, this._hasAudioInput);\n        }\n    }\n\n    /**\n     * Generate event triggered by a prolonged period of no audio input.\n     *\n     * @param {number} audioLevel - The audio level of the ssrc.\n     * @fires DetectionEvents.NO_AUDIO_INPUT\n     */\n    _handleNoAudioInputDetection(audioLevel) {\n        if (this._eventFired) {\n            return;\n        }\n\n        if (audioLevel === 0 && !this._timeoutTrigger) {\n            this._timeoutTrigger = setTimeout(() => {\n                this._eventFired = true;\n\n                this.emit(DetectionEvents.NO_AUDIO_INPUT);\n            }, SILENCE_PERIOD_MS);\n        } else if (audioLevel !== 0 && this._timeoutTrigger) {\n            this._clearTriggerTimeout();\n        }\n    }\n\n    /**\n     * Receives audio level events for all send and receive streams on the current TraceablePeerConnection.\n     *\n     * @param {TraceablePeerConnection} tpc - TraceablePeerConnection of the owning conference.\n     * @param {number} ssrc - The synchronization source identifier (SSRC) of the endpoint/participant/stream\n     * being reported.\n     * @param {number} audioLevel - The audio level of the ssrc.\n     * @param {boolean} isLocal - true for local/send streams or false for remote/receive streams.\n     */\n    _audioLevel(tpc, ssrc, audioLevel, isLocal) {\n        // We are interested in the local audio streams\n        if (!isLocal || !this._audioTrack) {\n            return;\n        }\n\n        // Get currently active local tracks from the TraceablePeerConnection\n        const localSSRCs = tpc.localSSRCs.get(this._audioTrack.rtcId);\n\n        // Only target the current active track in the tpc. For some reason audio levels for previous\n        // devices are also picked up from the PeerConnection so we filter them out.\n        if (!localSSRCs || !localSSRCs.ssrcs.includes(ssrc)) {\n            return;\n        }\n\n        // First handle audio input state change. In case the state changed to no input the no audio input event\n        // can try to fire again.\n        this._handleAudioInputStateChange(audioLevel);\n        this._handleNoAudioInputDetection(audioLevel);\n    }\n\n    /**\n     * Notifies NoAudioSignalDetection that a JitsiTrack was added to the associated JitsiConference.\n     * Only take into account local audio tracks.\n     *\n     * @param {JitsiTrack} track - The added JitsiTrack.\n     */\n    _trackAdded(track) {\n        if (track.isLocalAudioTrack()) {\n            // Reset state for the new track.\n            this._audioTrack = track;\n            this._eventFired = false;\n            this._clearTriggerTimeout();\n\n            // Listen for the audio levels on the newly added audio track\n            if (browser.supportsReceiverStats()) {\n                track.on(\n                    JitsiTrackEvents.NO_AUDIO_INPUT,\n                    audioLevel => {\n                        this._handleNoAudioInputDetection(audioLevel);\n                    }\n                );\n                track.on(\n                    JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n                    audioLevel => {\n                        this._handleNoAudioInputDetection(audioLevel);\n                        this._handleAudioInputStateChange(audioLevel);\n                    }\n                );\n            }\n        }\n    }\n}\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport RTCEvents from '../../service/RTC/RTCEvents';\n\n/**\n * The value which we use to say, every sound over this threshold\n * is talking on the mic.\n * @type {number}\n */\nconst SPEECH_DETECT_THRESHOLD = 0.6;\n\n/**\n * The <tt>P2PDominantSpeakerDetection</tt> is activated only when p2p is\n * currently used.\n * Listens for changes in the audio level changes of the local p2p audio track\n * or remote p2p one and fires dominant speaker events to be able to use\n * features depending on those events (speaker stats), to make them work without\n * the video bridge.\n */\nexport default class P2PDominantSpeakerDetection {\n    /**\n     * Creates P2PDominantSpeakerDetection\n     * @param conference the JitsiConference instance that created us.\n     * @constructor\n     */\n    constructor(conference) {\n        this.conference = conference;\n\n        conference.addEventListener(\n            JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED,\n            this._audioLevel.bind(this));\n\n        this.myUserID = this.conference.myUserId();\n    }\n\n    /**\n     * Receives audio level events for all streams in the conference.\n     *\n     * @param {String} id - The participant id\n     * @param {number} audioLevel - The audio level.\n     */\n    _audioLevel(id, audioLevel) {\n\n        // we do not process if p2p is not active\n        // or audio level is under certain threshold\n        // or if the audio level is for local audio track which is muted\n        if (!this.conference.isP2PActive()\n            || audioLevel <= SPEECH_DETECT_THRESHOLD\n            || (id === this.myUserID\n                    && this.conference.getLocalAudioTrack().isMuted())) {\n            return;\n        }\n\n        this.conference.rtc.eventEmitter.emit(\n            RTCEvents.DOMINANT_SPEAKER_CHANGED,\n            id);\n    }\n}\n","/**\n * Adapter that creates AudioContext objects depending on the browser.\n *\n * @returns {AudioContext} - Return a new AudioContext or undefined if the browser does not support it.\n */\nexport function createAudioContext(options) {\n    const AudioContextImpl = window.AudioContext || window.webkitAudioContext;\n\n    if (!AudioContextImpl) {\n        return undefined;\n    }\n\n    return new AudioContextImpl(options);\n}\n","import EventEmitter from 'events';\n\nimport RTC from '../RTC/RTC';\nimport { createAudioContext } from '../webaudio/WebAudioUtils';\n\nimport { VAD_SCORE_PUBLISHED } from './DetectionEvents';\n\n/**\n * Connects an audio JitsiLocalTrack to a vadProcessor using WebAudio ScriptProcessorNode.\n * Once an object is created audio from the local track flows through the ScriptProcessorNode as raw PCM.\n * The PCM is processed by the injected vad module and a voice activity detection score is obtained, the\n * score is published to consumers via an EventEmitter.\n * After work is done with this service the destroy method needs to be called for a proper cleanup.\n *\n * @fires VAD_SCORE_PUBLISHED\n */\nexport default class TrackVADEmitter extends EventEmitter {\n    /**\n     * Constructor.\n     *\n     * @param {number} procNodeSampleRate - Sample rate of the ScriptProcessorNode. Possible values  256, 512, 1024,\n     *  2048, 4096, 8192, 16384. Passing other values will default to closes neighbor.\n     * @param {Object} vadProcessor - VAD processor that allows us to calculate VAD score for PCM samples.\n     * @param {JitsiLocalTrack} jitsiLocalTrack - JitsiLocalTrack corresponding to micDeviceId.\n     */\n    constructor(procNodeSampleRate, vadProcessor, jitsiLocalTrack) {\n        super();\n\n        /**\n         * Sample rate of the ScriptProcessorNode.\n         */\n        this._procNodeSampleRate = procNodeSampleRate;\n\n        /**\n         * VAD Processor that allows us to calculate VAD score for PCM samples\n         */\n        this._vadProcessor = vadProcessor;\n\n        /**\n         * The JitsiLocalTrack instance.\n         */\n        this._localTrack = jitsiLocalTrack;\n\n        /**\n         * Buffer to hold residue PCM resulting after a ScriptProcessorNode callback\n         */\n        this._bufferResidue = new Float32Array([]);\n\n        /**\n         * The AudioContext instance with the preferred sample frequency.\n         */\n        this._audioContext = createAudioContext({ sampleRate: vadProcessor.getRequiredPCMFrequency() });\n\n        /**\n         * PCM Sample size expected by the VAD Processor instance. We cache it here as this value is used extensively,\n         * saves a couple of function calls.\n         */\n        this._vadSampleSize = vadProcessor.getSampleLength();\n\n        /**\n         * Event listener function that will be called by the ScriptProcessNode with raw PCM data, depending on the set\n         * sample rate.\n         */\n        this._onAudioProcess = this._onAudioProcess.bind(this);\n\n        this._initializeAudioContext();\n    }\n\n    /**\n     * Factory method that sets up all the necessary components for the creation of the TrackVADEmitter.\n     *\n     * @param {string} micDeviceId - Target microphone device id.\n     * @param {number} procNodeSampleRate - Sample rate of the proc node.\n     * @param {Object} vadProcessor -Module that calculates the voice activity score for a certain audio PCM sample.\n     * The processor needs to implement the following functions:\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by getSampleLength.\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\n     * @returns {Promise<TrackVADEmitter>} - Promise resolving in a new instance of TrackVADEmitter.\n     */\n    static create(micDeviceId, procNodeSampleRate, vadProcessor) {\n        return RTC.obtainAudioAndVideoPermissions({\n            devices: [ 'audio' ],\n            micDeviceId\n        }).then(localTrack => {\n            // We only expect one audio track when specifying a device id.\n            if (!localTrack[0]) {\n                throw new Error(`Failed to create jitsi local track for device id: ${micDeviceId}`);\n            }\n\n            return new TrackVADEmitter(procNodeSampleRate, vadProcessor, localTrack[0]);\n\n            // We have no exception handling at this point as there is nothing to clean up, the vadProcessor\n            // life cycle is handled by whoever created this instance.\n        });\n    }\n\n    /**\n     * Sets up the audio graph in the AudioContext.\n     *\n     * @returns {void}\n     */\n    _initializeAudioContext() {\n        this._audioSource = this._audioContext.createMediaStreamSource(this._localTrack.stream);\n\n        // TODO AudioProcessingNode is deprecated in the web audio specifications and the recommended replacement\n        // is audio worklet, however at the point of implementation AudioProcessingNode was still de de facto way\n        // of achieving this functionality and supported in all major browsers as opposed to audio worklet which\n        // was only available in Chrome. This todo is just a reminder that we should replace AudioProcessingNode\n        // with audio worklet when it's mature enough and has more browser support.\n        // We don't need stereo for determining the VAD score so we create a single channel processing node.\n        this._audioProcessingNode = this._audioContext.createScriptProcessor(this._procNodeSampleRate, 1, 1);\n    }\n\n    /**\n     * ScriptProcessorNode callback, the input parameters contains the PCM audio that is then sent to rnnoise.\n     * Rnnoise only accepts PCM samples of 480 bytes whereas the webaudio processor node can't sample at a multiple\n     * of 480 thus after each _onAudioProcess callback there will remain and PCM buffer residue equal\n     * to _procNodeSampleRate / 480 which will be added to the next sample buffer and so on.\\\n     *\n     *\n     * @param {AudioProcessingEvent} audioEvent - Audio event.\n     * @returns {void}\n     * @fires VAD_SCORE_PUBLISHED\n     */\n    _onAudioProcess(audioEvent) {\n        // Prepend the residue PCM buffer from the previous process callback.\n        const inData = audioEvent.inputBuffer.getChannelData(0);\n        const completeInData = [ ...this._bufferResidue, ...inData ];\n        const sampleTimestamp = Date.now();\n\n        let i = 0;\n\n        for (; i + this._vadSampleSize < completeInData.length; i += this._vadSampleSize) {\n            const pcmSample = completeInData.slice(i, i + this._vadSampleSize);\n\n            // The VAD processor might change the values inside the array so we make a copy.\n            const vadScore = this._vadProcessor.calculateAudioFrameVAD(pcmSample.slice());\n\n            this.emit(VAD_SCORE_PUBLISHED, {\n                timestamp: sampleTimestamp,\n                score: vadScore,\n                pcmData: pcmSample,\n                deviceId: this._localTrack.getDeviceId()\n            });\n        }\n\n        this._bufferResidue = completeInData.slice(i, completeInData.length);\n    }\n\n    /**\n     * Connects the nodes in the AudioContext to start the flow of audio data.\n     *\n     * @returns {void}\n     */\n    _connectAudioGraph() {\n        this._audioProcessingNode.onaudioprocess = this._onAudioProcess;\n        this._audioSource.connect(this._audioProcessingNode);\n        this._audioProcessingNode.connect(this._audioContext.destination);\n    }\n\n    /**\n     * Disconnects the nodes in the AudioContext.\n     *\n     * @returns {void}\n     */\n    _disconnectAudioGraph() {\n        // Even thought we disconnect the processing node it seems that some callbacks remain queued,\n        // resulting in calls with and uninitialized context.\n        // eslint-disable-next-line no-empty-function\n        this._audioProcessingNode.onaudioprocess = () => {};\n        this._audioProcessingNode.disconnect();\n        this._audioSource.disconnect();\n    }\n\n    /**\n     * Cleanup potentially acquired resources.\n     *\n     * @returns {void}\n     */\n    _cleanupResources() {\n        this._disconnectAudioGraph();\n        this._localTrack.stopStream();\n    }\n\n    /**\n     * Get the associated track device ID.\n     *\n     * @returns {string}\n     */\n    getDeviceId() {\n        return this._localTrack.getDeviceId();\n    }\n\n\n    /**\n     * Get the associated track label.\n     *\n     * @returns {string}\n     */\n    getTrackLabel() {\n        return this._localTrack.getDeviceLabel();\n    }\n\n    /**\n     * Start the emitter by connecting the audio graph.\n     *\n     * @returns {void}\n     */\n    start() {\n        this._connectAudioGraph();\n    }\n\n    /**\n     * Stops the emitter by disconnecting the audio graph.\n     *\n     * @returns {void}\n     */\n    stop() {\n        this._disconnectAudioGraph();\n        this._bufferResidue = [];\n    }\n\n    /**\n     * Destroy TrackVADEmitter instance (release resources and stop callbacks).\n     *\n     * @returns {void}\n     */\n    destroy() {\n        if (this._destroyed) {\n            return;\n        }\n\n        this._cleanupResources();\n        this._destroyed = true;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport { EventEmitter } from 'events';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nimport { VAD_SCORE_PUBLISHED, DETECTOR_STATE_CHANGE } from './DetectionEvents';\nimport TrackVADEmitter from './TrackVADEmitter';\n\nconst logger = getLogger(__filename);\n\n/**\n * Sample rate of TrackVADEmitter, it defines how many audio samples are processed at a time.\n * @type {number}\n */\nconst VAD_EMITTER_SAMPLE_RATE = 4096;\n\n/**\n * Connects a TrackVADEmitter to the target conference local audio track and manages various services that use\n * the data to produce audio analytics (VADTalkMutedDetection and VADNoiseDetection).\n */\nexport default class VADAudioAnalyser extends EventEmitter {\n    /**\n     * Creates <tt>VADAudioAnalyser</tt>\n     * @param {JitsiConference} conference - JitsiConference instance that created us.\n     * @param {Object} createVADProcessor - Function that creates a Voice activity detection processor. The processor\n     * needs to implement the following functions:\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by getSampleLength.\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\n     * @constructor\n     */\n    constructor(conference, createVADProcessor) {\n        super();\n\n        /**\n         * Member function that instantiates a VAD processor.\n         */\n        this._createVADProcessor = createVADProcessor;\n\n        /**\n         * Current {@link TrackVADEmitter}. VAD Emitter uses a {@link JitsiLocalTrack} and VAD processor to generate\n         * period voice probability scores.\n         */\n        this._vadEmitter = null;\n\n        /**\n         * Current state of the _vadEmitter\n         */\n        this._isVADEmitterRunning = false;\n\n        /**\n         * Array of currently attached VAD processing services.\n         */\n        this._detectionServices = [];\n\n        /**\n         * Promise used to chain create and destroy operations associated with TRACK_ADDED and TRACK_REMOVED events\n         * coming from the conference.\n         * Because we have an async created component (VAD Processor) we need to make sure that it's initialized before\n         * we destroy it ( when changing the device for instance), or when we use it from an external point of entry\n         * i.e. (TRACK_MUTE_CHANGED event callback).\n         */\n        this._vadInitTracker = Promise.resolve();\n\n        /**\n         * Listens for {@link TrackVADEmitter} events and processes them.\n         */\n        this._processVADScore = this._processVADScore.bind(this);\n\n        conference.on(JitsiConferenceEvents.TRACK_ADDED, this._trackAdded.bind(this));\n        conference.on(JitsiConferenceEvents.TRACK_REMOVED, this._trackRemoved.bind(this));\n        conference.on(JitsiConferenceEvents.TRACK_MUTE_CHANGED, this._trackMuteChanged.bind(this));\n    }\n\n    /**\n     * Attach a VAD detector service to the analyser and handle it's state changes.\n     *\n     * @param {Object} vadTMDetector\n     */\n    addVADDetectionService(vadService) {\n        this._detectionServices.push(vadService);\n        vadService.on(DETECTOR_STATE_CHANGE, () => {\n            // When the state of a detector changes check if there are any active detectors attached so that\n            // the _vadEmitter doesn't run needlessly.\n            const activeDetector = this._detectionServices.filter(detector => detector.isActive() === true);\n\n            // If there are no active detectors running and the vadEmitter is running then stop the emitter as it is\n            // uses a considerable amount of CPU. Otherwise start the service if it's stopped and there is a detector\n            // that needs it.\n            if (!activeDetector.length && this._isVADEmitterRunning) {\n                this._stopVADEmitter();\n            } else if (!this._isVADEmitterRunning) {\n                this._startVADEmitter();\n            }\n        });\n    }\n\n    /**\n     * Start the {@link TrackVADEmitter} and attach the event listener.\n     * @returns {void}\n     */\n    _startVADEmitter() {\n        if (this._vadEmitter) {\n            this._vadEmitter.on(VAD_SCORE_PUBLISHED, this._processVADScore);\n            this._vadEmitter.start();\n            this._isVADEmitterRunning = true;\n        }\n    }\n\n    /**\n     * Stop the {@link TrackVADEmitter} and detach the event listener.\n     * @returns {void}\n     */\n    _stopVADEmitter() {\n        if (this._vadEmitter) {\n            this._vadEmitter.removeListener(VAD_SCORE_PUBLISHED, this._processVADScore);\n            this._vadEmitter.stop();\n        }\n        this._isVADEmitterRunning = false;\n    }\n\n    /**\n     * Listens for {@link TrackVADEmitter} events and directs them to attached services as needed.\n     *\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n     * @param {Float32Array} pcmData - Raw PCM data with which the VAD score was calculated.\n     * @param {string} vadScore.deviceId - Device id of the associated track.\n     * @listens VAD_SCORE_PUBLISHED\n     */\n    _processVADScore(vadScore) {\n        for (const detector of this._detectionServices) {\n            detector.processVADScore(vadScore);\n        }\n    }\n\n    /**\n     * Change the isMuted state of all attached detection services.\n     *\n     * @param {boolean} isMuted\n     */\n    _changeDetectorsMuteState(isMuted) {\n        for (const detector of this._detectionServices) {\n            detector.changeMuteState(isMuted);\n        }\n    }\n\n    /**\n     * Notifies the detector that a track was added to the associated {@link JitsiConference}.\n     * Only take into account local audio tracks.\n     * @param {JitsiTrack} track - The added track.\n     * @returns {void}\n     * @listens TRACK_ADDED\n     */\n    _trackAdded(track) {\n        if (track.isLocalAudioTrack()) {\n            // Keep a track promise so we take into account successive TRACK_ADD events being generated so that we\n            // destroy/create the processing context in the proper order.\n            this._vadInitTracker = this._vadInitTracker.then(() => this._createVADProcessor())\n                .then(vadProcessor =>\n                    TrackVADEmitter.create(track.getDeviceId(), VAD_EMITTER_SAMPLE_RATE, vadProcessor)\n                )\n                .then(vadEmitter => {\n                    logger.debug('Created VAD emitter for track: ', track.getTrackLabel());\n\n                    this._vadEmitter = vadEmitter;\n\n                    // Iterate through the detection services and set their appropriate mute state, depending on\n                    // service this will trigger a DETECTOR_STATE_CHANGE which in turn might start the _vadEmitter.\n                    this._changeDetectorsMuteState(track.isMuted());\n                })\n                .catch(error => {\n                    logger.warn('Failed to start VADAudioAnalyser', error);\n                });\n        }\n    }\n\n    /**\n     * Notifies the detector that the mute state of a {@link JitsiConference} track has changed. Only takes into account\n     * local audio tracks.\n     * @param {JitsiTrack} track - The track whose mute state has changed.\n     * @returns {void}\n     * @listens TRACK_MUTE_CHANGED\n     */\n    _trackMuteChanged(track) {\n        if (track.isLocalAudioTrack()) {\n            // On a mute toggle reset the state.\n            this._vadInitTracker = this._vadInitTracker.then(() => {\n                // Set mute status for the attached detection services.\n                this._changeDetectorsMuteState(track.isMuted());\n            });\n        }\n    }\n\n    /**\n     * Notifies the detector that a track associated with the {@link JitsiConference} was removed. Only takes into\n     * account local audio tracks. Cleans up resources associated with the track and resets the processing context.\n     *\n     * @param {JitsiTrack} track - The removed track.\n     * @returns {void}\n     * @listens TRACK_REMOVED\n     */\n    _trackRemoved(track) {\n        if (track.isLocalAudioTrack()) {\n            // Use the promise to make sure operations are in sequence.\n            this._vadInitTracker = this._vadInitTracker.then(() => {\n                logger.debug('Removing track from VAD detection - ', track.getTrackLabel());\n\n                // Track was removed, clean up and set appropriate states.\n                if (this._vadEmitter) {\n                    this._stopVADEmitter();\n                    this._vadEmitter.destroy();\n                    this._vadEmitter = null;\n                }\n\n                // Reset state of detectors when active track is removed.\n                for (const detector of this._detectionServices) {\n                    detector.reset();\n                }\n            });\n        }\n    }\n\n\n}\n","import { EventEmitter } from 'events';\n\nimport { calculateAverage, filterPositiveValues } from '../util/MathUtil';\n\nimport { VAD_NOISY_DEVICE, DETECTOR_STATE_CHANGE } from './DetectionEvents';\n\n/**\n * The average value VAD needs to be under over a period of time to be considered noise.\n * @type {number}\n */\nconst VAD_NOISE_AVG_THRESHOLD = 0.2;\n\n/**\n * The average values that audio input need to be over to be considered loud.\n * @type {number}\n */\nconst NOISY_AUDIO_LEVEL_THRESHOLD = 0.040;\n\n/**\n * The value that a VAD score needs to be under in order for processing to begin.\n * @type {number}\n */\nconst VAD_SCORE_TRIGGER = 0.2;\n\n/**\n * The value that a VAD score needs to be under in order for processing to begin.\n * @type {number}\n */\nconst AUDIO_LEVEL_SCORE_TRIGGER = 0.020;\n\n/**\n * Time span over which we calculate an average score used to determine if we trigger the event.\n * @type {number}\n */\nconst PROCESS_TIME_FRAME_SPAN_MS = 1500;\n\n/**\n * Detect if provided VAD score and PCM data is considered noise.\n */\nexport default class VADNoiseDetection extends EventEmitter {\n    /**\n     * Creates <tt>VADNoiseDetection</tt>\n     *\n     * @constructor\n     */\n    constructor() {\n        super();\n\n        /**\n         * Flag which denotes the current state of the detection service i.e.if there is already a processing operation\n         * ongoing.\n         */\n        this._processing = false;\n\n        /**\n         * Buffer that keeps the VAD scores for a period of time.\n         */\n        this._scoreArray = [];\n\n        /**\n         * Buffer that keeps audio level samples for a period of time.\n         */\n        this._audioLvlArray = [];\n\n        /**\n         * Current state of the service, if it's not active no processing will occur.\n         */\n        this._active = false;\n\n        this._calculateNoisyScore = this._calculateNoisyScore.bind(this);\n    }\n\n    /**\n     * Compute cumulative VAD score and PCM audio levels once the PROCESS_TIME_FRAME_SPAN_MS timeout has elapsed.\n     * If the score is above the set threshold fire the event.\n     * @returns {void}\n     * @fires VAD_NOISY_DEVICE\n     */\n    _calculateNoisyScore() {\n        const scoreAvg = calculateAverage(this._scoreArray);\n        const audioLevelAvg = calculateAverage(this._audioLvlArray);\n\n        if (scoreAvg < VAD_NOISE_AVG_THRESHOLD && audioLevelAvg > NOISY_AUDIO_LEVEL_THRESHOLD) {\n            this.emit(VAD_NOISY_DEVICE);\n\n            this._setActiveState(false);\n        }\n\n        // We reset the context in case a new process phase needs to be triggered.\n        this.reset();\n    }\n\n    /**\n     * Record the vad score and average volume in the appropriate buffers.\n     *\n     * @param {number} vadScore\n     * @param {number} avgAudioLvl - average audio level of the PCM sample associated with the VAD score.s\n     */\n    _recordValues(vadScore, avgAudioLvl) {\n        this._scoreArray.push(vadScore);\n        this._audioLvlArray.push(avgAudioLvl);\n    }\n\n    /**\n     * Set the active state of the detection service and notify any listeners.\n     *\n     * @param {boolean} active\n     * @fires DETECTOR_STATE_CHANGE\n     */\n    _setActiveState(active) {\n        this._active = active;\n        this.emit(DETECTOR_STATE_CHANGE, this._active);\n    }\n\n    /**\n     * Change the state according to the muted status of the tracked device.\n     *\n     * @param {boolean} isMuted - Is the device muted or not.\n     */\n    changeMuteState(isMuted) {\n        // This service only needs to run when the microphone is not muted.\n        this._setActiveState(!isMuted);\n        this.reset();\n    }\n\n    /**\n     * Check whether or not the service is active or not.\n     *\n     * @returns {boolean}\n     */\n    isActive() {\n        return this._active;\n    }\n\n    /**\n     * Reset the processing context, clear buffers, cancel the timeout trigger.\n     *\n     * @returns {void}\n     */\n    reset() {\n        this._processing = false;\n        this._scoreArray = [];\n        this._audioLvlArray = [];\n        clearTimeout(this._processTimeout);\n    }\n\n    /**\n     * Listens for {@link TrackVADEmitter} events and processes them.\n     *\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n     * @param {Float32Array} vadScore.pcmData - Raw PCM Data associated with the VAD score.\n     * @param {string} vadScore.deviceId - Device id of the associated track.\n     * @listens VAD_SCORE_PUBLISHED\n     */\n    processVADScore(vadScore) {\n        if (!this._active) {\n            return;\n        }\n\n        // There is a processing phase on going, add score to buffer array.\n        if (this._processing) {\n            // Filter and calculate sample average so we don't have to process one large array at a time.\n            const posAudioLevels = filterPositiveValues(vadScore.pcmData);\n\n            this._recordValues(vadScore.score, calculateAverage(posAudioLevels));\n\n            return;\n        }\n\n        // If the VAD score for the sample is low and audio level has a high enough level we can start listening for\n        // noise\n        if (vadScore.score < VAD_SCORE_TRIGGER) {\n            const posAudioLevels = filterPositiveValues(vadScore.pcmData);\n            const avgAudioLvl = calculateAverage(posAudioLevels);\n\n            if (avgAudioLvl > AUDIO_LEVEL_SCORE_TRIGGER) {\n                this._processing = true;\n                this._recordValues(vadScore.score, avgAudioLvl);\n\n                // Once the preset timeout executes the final score will be calculated.\n                this._processTimeout = setTimeout(this._calculateNoisyScore, PROCESS_TIME_FRAME_SPAN_MS);\n            }\n        }\n    }\n}\n","import { EventEmitter } from 'events';\n\nimport { calculateAverage } from '../util/MathUtil';\n\nimport { VAD_TALK_WHILE_MUTED, DETECTOR_STATE_CHANGE } from './DetectionEvents';\n\n\n/**\n * The threshold which the average VAD values for a span of time needs to exceed to trigger an event.\n * @type {number}\n */\nconst VAD_AVG_THRESHOLD = 0.6;\n\n/**\n * The VAD score needed to trigger the processing algorithm, i.e. if a sample has the VAD score >= VAD_VOICE_LEVEL\n * we start processing all scores for a time span defined by const PROCESS_TIME_FRAME_SPAN_MS.\n * @type {number}\n */\nconst VAD_VOICE_LEVEL = 0.9;\n\n/**\n * Sample rate of TrackVADEmitter, it defines how many audio samples are processed at a time.\n * @type {number}\n */\n\n/**\n * Time span over which we calculate an average score used to determine if we trigger the event.\n * @type {number}\n */\nconst PROCESS_TIME_FRAME_SPAN_MS = 700;\n\n/**\n * Detect if provided VAD score which is generated on a muted device is voice and fires an event.\n */\nexport default class VADTalkMutedDetection extends EventEmitter {\n    /**\n     * Creates <tt>VADTalkMutedDetection</tt>\n     * @constructor\n     */\n    constructor() {\n        super();\n\n        /**\n         * Flag which denotes the current state of the detection service i.e.if there is already a processing operation\n         * ongoing.\n         */\n        this._processing = false;\n\n        /**\n         * Buffer that keeps the VAD scores for a period of time.\n         */\n        this._scoreArray = [];\n\n        /**\n         * Current mute state of the audio track being monitored.\n         */\n        this._active = false;\n\n        this._calculateVADScore = this._calculateVADScore.bind(this);\n    }\n\n    /**\n     * Compute cumulative VAD score function called once the PROCESS_TIME_FRAME_SPAN_MS timeout has elapsed.\n     * @returns {void}\n     * @fires VAD_TALK_WHILE_MUTED\n     */\n    _calculateVADScore() {\n        const score = calculateAverage(this._scoreArray);\n\n        if (score > VAD_AVG_THRESHOLD) {\n            this.emit(VAD_TALK_WHILE_MUTED);\n\n            // Event was fired. Stop event emitter and remove listeners so no residue events kick off after this point\n            // and a single VAD_TALK_WHILE_MUTED is generated per mic muted state.\n            this._setActiveState(false);\n        }\n\n        // We reset the context in case a new process phase needs to be triggered.\n        this.reset();\n    }\n\n    /**\n     * Set the active state of the detection service and notify any listeners.\n     *\n     * @param {boolean} active\n     * @fires DETECTOR_STATE_CHANGE\n     */\n    _setActiveState(active) {\n        this._active = active;\n        this.emit(DETECTOR_STATE_CHANGE, this._active);\n    }\n\n    /**\n     * Change the state according to the muted status of the tracked device.\n     *\n     * @param {boolean} isMuted - Is the device muted or not.\n     */\n    changeMuteState(isMuted) {\n        // This service only needs to run when the microphone is muted.\n        this._setActiveState(isMuted);\n        this.reset();\n    }\n\n    /**\n     * Check whether or not the service is active or not.\n     *\n     * @returns {boolean}\n     */\n    isActive() {\n        return this._active;\n    }\n\n    /**\n     * Listens for {@link TrackVADEmitter} events and processes them.\n     *\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n     * @param {string} vadScore.deviceId - Device id of the associated track.\n     * @listens VAD_SCORE_PUBLISHED\n     */\n    processVADScore(vadScore) {\n        if (!this._active) {\n            return;\n        }\n\n        // There is a processing phase on going, add score to buffer array.\n        if (this._processing) {\n            this._scoreArray.push(vadScore.score);\n\n            return;\n        }\n\n        // Because we remove all listeners on the vadEmitter once the main event is triggered,\n        // there is no need to check for rogue events.\n        if (vadScore.score > VAD_VOICE_LEVEL) {\n            this._processing = true;\n            this._scoreArray.push(vadScore.score);\n\n            // Start gathering VAD scores for the configured period of time.\n            this._processTimeout = setTimeout(this._calculateVADScore, PROCESS_TIME_FRAME_SPAN_MS);\n        }\n    }\n\n    /**\n     * Reset the processing context, clear buffer, cancel the timeout trigger.\n     *\n     * @returns {void}\n     */\n    reset() {\n        this._processing = false;\n        this._scoreArray = [];\n        clearTimeout(this._processTimeout);\n    }\n}\n","export enum E2ePingEvents {\n    /**\n     * Indicates that the end-to-end round-trip-time for a participant has changed.\n     */\n    E2E_RTT_CHANGED = 'e2eping.e2e_rtt_changed'\n};\n\n// exported for backward compatibility\nexport const E2E_RTT_CHANGED = E2ePingEvents.E2E_RTT_CHANGED;\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport * as JitsiE2EPingEvents from '../../service/e2eping/E2ePingEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * The 'type' of a message which designates an e2e ping request.\n * @type {string}\n */\nconst E2E_PING_REQUEST = 'e2e-ping-request';\n\n/**\n * The 'type' of a message which designates an e2e ping response.\n * @type {string}\n */\nconst E2E_PING_RESPONSE = 'e2e-ping-response';\n\n/**\n * The number of requests to wait for before emitting an RTT value.\n */\nconst DEFAULT_NUM_REQUESTS = 5;\n\n/**\n * The maximum number of messages per second to aim for. This is for the entire\n * conference, with the assumption that all endpoints join at once.\n */\nconst DEFAULT_MAX_MESSAGES_PER_SECOND = 250;\n\n/**\n * The conference size beyond which e2e pings will be disabled.\n */\nconst DEFAULT_MAX_CONFERENCE_SIZE = 200;\n\n/**\n * Saves e2e ping related state for a single JitsiParticipant.\n */\nclass ParticipantWrapper {\n    /**\n     * Creates a ParticipantWrapper\n     * @param {JitsiParticipant} participant - The remote participant that this\n     * object wraps.\n     * @param {E2ePing} e2eping\n     */\n    constructor(participant, e2eping) {\n        // The JitsiParticipant\n        this.participant = participant;\n\n        // The E2ePing\n        this.e2eping = e2eping;\n\n        // Caches the ID\n        this.id = participant.getId();\n\n        // Recently sent requests\n        this.requests = {};\n\n        // The ID of the last sent request. We just increment it for each new\n        // request. Start at 1 so we can consider only thruthy values valid.\n        this.lastRequestId = 1;\n\n        this.sendRequest = this.sendRequest.bind(this);\n        this.handleResponse = this.handleResponse.bind(this);\n        this.maybeLogRttAndStop = this.maybeLogRttAndStop.bind(this);\n        this.scheduleNext = this.scheduleNext.bind(this);\n        this.stop = this.stop.bind(this);\n        this.getDelay = this.getDelay.bind(this);\n        this.timeout = this.scheduleNext();\n    }\n\n    /**\n     * Schedule the next ping to be sent.\n     */\n    scheduleNext() {\n        return window.setTimeout(this.sendRequest, this.getDelay());\n    }\n\n    /**\n     * Stop pinging this participant, canceling a scheduled ping, if any.\n     */\n    stop() {\n        if (this.timeout) {\n            window.clearTimeout(this.timeout);\n        }\n        this.e2eping.removeParticipant(this.id);\n    }\n\n    /**\n     * Get the delay until the next ping in milliseconds.\n     */\n    getDelay() {\n        const conferenceSize = this.e2eping.conference.getParticipants().length;\n        const endpointPairs = conferenceSize * (conferenceSize - 1) / 2;\n        const totalMessages = endpointPairs * this.e2eping.numRequests;\n        const totalSeconds = totalMessages / this.e2eping.maxMessagesPerSecond;\n\n        // Randomize between .5 and 1.5\n        const r = 1.5 - Math.random();\n        const delayBetweenMessages = r * Math.max(1000 * (totalSeconds / this.e2eping.numRequests), 1000);\n\n        return delayBetweenMessages;\n    }\n\n    /**\n     * Sends the next ping request.\n     * @type {*}\n     */\n    sendRequest() {\n        const requestId = this.lastRequestId++;\n        const requestMessage = {\n            type: E2E_PING_REQUEST,\n            id: requestId\n        };\n\n        this.e2eping.sendMessage(requestMessage, this.id);\n        this.requests[requestId] = {\n            id: requestId,\n            timeSent: window.performance.now()\n        };\n    }\n\n    /**\n     * Handles a response from this participant.\n     * @type {*}\n     */\n    handleResponse(response) {\n        const request = this.requests[response.id];\n\n        if (request) {\n            request.rtt = window.performance.now() - request.timeSent;\n        }\n        this.maybeLogRttAndStop();\n    }\n\n    /**\n     * Check if we've received the pre-configured number of responses, and if\n     * so log the measured RTT and stop sending requests.\n     * @type {*}\n     */\n    maybeLogRttAndStop() {\n        // The RTT we'll report is the minimum RTT measured\n        let rtt = Infinity;\n        let request, requestId;\n        let numRequestsWithResponses = 0;\n        let totalNumRequests = 0;\n\n        for (requestId in this.requests) {\n            if (this.requests.hasOwnProperty(requestId)) {\n                request = this.requests[requestId];\n\n                totalNumRequests++;\n                if (request.rtt) {\n                    numRequestsWithResponses++;\n                    rtt = Math.min(rtt, request.rtt);\n                }\n            }\n        }\n\n        if (numRequestsWithResponses >= this.e2eping.numRequests) {\n            logger.info(`Measured RTT=${rtt} ms to ${this.id} (in ${this.participant.getProperty('region')})`);\n            this.stop();\n\n            this.e2eping.conference.eventEmitter.emit(\n                JitsiE2EPingEvents.E2E_RTT_CHANGED, this.participant, rtt);\n\n            return;\n        } else if (totalNumRequests > 2 * this.e2eping.numRequests) {\n            logger.info(`Stopping e2eping for ${this.id} because we sent ${totalNumRequests} with only `\n                + `${numRequestsWithResponses} responses.`);\n            this.stop();\n\n            return;\n        }\n\n        this.timeout = this.scheduleNext();\n    }\n}\n\n/**\n * Implements end-to-end ping (from one conference participant to another) via\n * the jitsi-videobridge channel (either WebRTC data channel or web socket).\n *\n * TODO: use a broadcast message instead of individual pings to each remote\n * participant.\n *\n * This class:\n * 1. Sends periodic ping requests to all other participants in the\n * conference.\n * 2. Responds to ping requests from other participants.\n * 3. Fires events with the end-to-end RTT to each participant whenever a\n * response is received.\n * 4. Fires analytics events with the end-to-end RTT periodically.\n */\nexport default class E2ePing {\n    /**\n     * @param {JitsiConference} conference - The conference.\n     * @param {Function} sendMessage - The function to use to send a message.\n     * @param {Object} options\n     */\n    constructor(conference, options, sendMessage) {\n        this.conference = conference;\n        this.eventEmitter = conference.eventEmitter;\n        this.sendMessage = sendMessage;\n\n        // Maps a participant ID to its ParticipantWrapper\n        this.participants = {};\n\n        this.numRequests = DEFAULT_NUM_REQUESTS;\n        this.maxConferenceSize = DEFAULT_MAX_CONFERENCE_SIZE;\n        this.maxMessagesPerSecond = DEFAULT_MAX_MESSAGES_PER_SECOND;\n\n        if (options && options.e2eping) {\n            if (typeof options.e2eping.numRequests === 'number') {\n                this.numRequests = options.e2eping.numRequests;\n            }\n            if (typeof options.e2eping.maxConferenceSize === 'number') {\n                this.maxConferenceSize = options.e2eping.maxConferenceSize;\n            }\n            if (typeof options.e2eping.maxMessagesPerSecond === 'number') {\n                this.maxMessagesPerSecond = options.e2eping.maxMessagesPerSecond;\n            }\n        }\n        logger.info(\n            `Initializing e2e ping with numRequests=${this.numRequests}, maxConferenceSize=${this.maxConferenceSize}, `\n            + `maxMessagesPerSecond=${this.maxMessagesPerSecond}.`);\n\n        this.participantJoined = this.participantJoined.bind(this);\n\n        this.participantLeft = this.participantLeft.bind(this);\n        conference.on(JitsiConferenceEvents.USER_LEFT, this.participantLeft);\n\n        this.messageReceived = this.messageReceived.bind(this);\n        conference.on(JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED, this.messageReceived);\n\n        this.conferenceJoined = this.conferenceJoined.bind(this);\n        conference.on(JitsiConferenceEvents.CONFERENCE_JOINED, this.conferenceJoined);\n    }\n\n    /**\n     * Delay processing USER_JOINED events until the MUC is fully joined,\n     * otherwise the apparent conference size will be wrong.\n     */\n    conferenceJoined() {\n        this.conference.getParticipants().forEach(p => this.participantJoined(p.getId(), p));\n        this.conference.on(JitsiConferenceEvents.USER_JOINED, this.participantJoined);\n    }\n\n    /**\n     * Handles a message that was received.\n     *\n     * @param participant - The message sender.\n     * @param payload - The payload of the message.\n     */\n    messageReceived(participant, payload) {\n        // Listen to E2E PING requests and responses from other participants\n        // in the conference.\n        if (payload.type === E2E_PING_REQUEST) {\n            this.handleRequest(participant.getId(), payload);\n        } else if (payload.type === E2E_PING_RESPONSE) {\n            this.handleResponse(participant.getId(), payload);\n        }\n    }\n\n    /**\n     * Handles a participant joining the conference. Starts to send ping\n     * requests to the participant.\n     *\n     * @param {String} id - The ID of the participant.\n     * @param {JitsiParticipant} participant - The participant that joined.\n     */\n    participantJoined(id, participant) {\n        if (this.participants[id]) {\n            logger.info(`Participant wrapper already exists for ${id}. Clearing.`);\n            this.participants[id].stop();\n        }\n\n        if (this.conference.getParticipants().length > this.maxConferenceSize) {\n            return;\n        }\n\n        // We don't need to send e2eping in both directions for a pair of\n        // endpoints. Force only one direction with just string comparison of\n        // the IDs.\n        if (this.conference.myUserId() > id) {\n            logger.info(`Starting e2eping for participant ${id}`);\n            this.participants[id] = new ParticipantWrapper(participant, this);\n        }\n    }\n\n    /**\n     * Remove a participant without calling \"stop\".\n     */\n    removeParticipant(id) {\n        if (this.participants[id]) {\n            delete this.participants[id];\n        }\n    }\n\n    /**\n     * Handles a participant leaving the conference. Stops sending requests.\n     *\n     * @param {String} id - The ID of the participant.\n     */\n    participantLeft(id) {\n        if (this.participants[id]) {\n            this.participants[id].stop();\n            delete this.participants[id];\n        }\n    }\n\n    /**\n     * Handles a ping request coming from another participant.\n     *\n     * @param {string} participantId - The ID of the participant who sent the\n     * request.\n     * @param {Object} request - The request.\n     */\n    handleRequest(participantId, request) {\n        // If it's a valid request, just send a response.\n        if (request && request.id) {\n            const response = {\n                type: E2E_PING_RESPONSE,\n                id: request.id\n            };\n\n            this.sendMessage(response, participantId);\n        } else {\n            logger.info(`Received an invalid e2e ping request from ${participantId}.`);\n        }\n    }\n\n    /**\n     * Handles a ping response coming from another participant\n     * @param {string} participantId - The ID of the participant who sent the\n     * response.\n     * @param {Object} response - The response.\n     */\n    handleResponse(participantId, response) {\n        const participantWrapper = this.participants[participantId];\n\n        if (participantWrapper) {\n            participantWrapper.handleResponse(response);\n        }\n    }\n\n    /**\n     * Stops this E2ePing (i.e. stop sending requests).\n     */\n    stop() {\n        logger.info('Stopping e2eping');\n\n        this.conference.off(JitsiConferenceEvents.USER_JOINED, this.participantJoined);\n        this.conference.off(JitsiConferenceEvents.USER_LEFT, this.participantLeft);\n        this.conference.off(JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED, this.messageReceived);\n\n        for (const id in this.participants) {\n            if (this.participants.hasOwnProperty(id)) {\n                this.participants[id].stop();\n            }\n        }\n\n        this.participants = {};\n    }\n}\n\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * Emits {@link JitsiConferenceEvents.JVB121_STATUS} events based on the current\n * P2P status and the conference participants count. See the event description\n * for more info.\n */\nexport default class Jvb121EventGenerator {\n    /**\n     * Creates new <tt>Jvb121EventGenerator</tt> for the given conference.\n     * @param {JitsiConference} conference\n     */\n    constructor(conference) {\n        this._conference = conference;\n\n        /**\n         * Indicates whether it's a one to one JVB conference (<tt>true</tt>)\n         * or a multiparty (<tt>false</tt>). Will be also <tt>false</tt> if\n         * the conference is currently in the P2P mode.\n         * @type {boolean}\n         * @private\n         */\n        this._jvb121 = true;\n\n        this._conference.addEventListener(\n            JitsiConferenceEvents.USER_JOINED, () => this.evaluateStatus());\n        this._conference.addEventListener(\n            JitsiConferenceEvents.USER_LEFT, () => this.evaluateStatus());\n        this._conference.addEventListener(\n            JitsiConferenceEvents.P2P_STATUS, () => this.evaluateStatus());\n    }\n\n    /**\n     * Checks whether the JVB121 value should be updated and a new event\n     * emitted.\n     */\n    evaluateStatus() {\n        const oldStatus = this._jvb121;\n        const newStatus\n            = !this._conference.isP2PActive()\n                && this._conference.getParticipantCount() <= 2;\n\n        if (oldStatus !== newStatus) {\n            this._jvb121 = newStatus;\n            logger.debug(`JVB121 status ${oldStatus} => ${newStatus}`);\n            this._conference.eventEmitter.emit(\n                JitsiConferenceEvents.JVB121_STATUS, oldStatus, newStatus);\n        }\n    }\n}\n","import SariskaMediaTransport from '../../../SariskaMediaTransport';\n\n/**\n * Base class for recording backends.\n */\nexport class RecordingAdapter {\n\n    /**\n     * Starts recording.\n     *\n     * @param {string} micDeviceId - The microphone to record on.\n     * @returns {Promise}\n     */\n    start(/* eslint-disable no-unused-vars */\n            micDeviceId/* eslint-enable no-unused-vars */) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Stops recording.\n     *\n     * @returns {Promise}\n     */\n    stop() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Export the recorded and encoded audio file.\n     *\n     * @returns {Promise<Object>}\n     */\n    exportRecordedData() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Mutes or unmutes the current recording.\n     *\n     * @param {boolean} muted - Whether to mute or to unmute.\n     * @returns {Promise}\n     */\n    setMuted(/* eslint-disable no-unused-vars */\n            muted/* eslint-enable no-unused-vars */) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Changes the current microphone.\n     *\n     * @param {string} micDeviceId - The new microphone device ID.\n     * @returns {Promise}\n     */\n    setMicDevice(/* eslint-disable no-unused-vars */\n            micDeviceId/* eslint-enable no-unused-vars */) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Helper method for getting an audio {@code MediaStream}. Use this instead\n     * of calling browser APIs directly.\n     *\n     * @protected\n     * @param {number} micDeviceId - The ID of the current audio device.\n     * @returns {Promise}\n     */\n    _getAudioStream(micDeviceId) {\n        return SariskaMediaTransport.createLocalTracks({\n            devices: [ 'audio' ],\n            micDeviceId\n        }).then(result => {\n            if (result.length !== 1) {\n                throw new Error('Unexpected number of streams '\n                    + 'from createLocalTracks.');\n            }\n            const mediaStream = result[0].stream;\n\n            if (mediaStream === undefined) {\n                throw new Error('Failed to create local track.');\n            }\n\n            return mediaStream;\n        });\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nconst logger = getLogger(__filename);\nimport { RecordingAdapter } from './RecordingAdapter';\n\n/**\n * Recording adapter that uses {@code MediaRecorder} (default browser encoding\n * with Opus codec).\n */\nexport class OggAdapter extends RecordingAdapter {\n\n    /**\n     * Instance of MediaRecorder.\n     * @private\n     */\n    _mediaRecorder = null;\n\n    /**\n     * Initialization promise.\n     * @private\n     */\n    _initPromise = null;\n\n    /**\n     * The recorded audio file.\n     * @private\n     */\n    _recordedData = null;\n\n    /**\n     * Implements {@link RecordingAdapter#start()}.\n     *\n     * @inheritdoc\n     */\n    start(micDeviceId) {\n        if (!this._initPromise) {\n            this._initPromise = this._initialize(micDeviceId);\n        }\n\n        return this._initPromise.then(() =>\n            new Promise(resolve => {\n                this._mediaRecorder.start();\n                resolve();\n            })\n        );\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#stop()}.\n     *\n     * @inheritdoc\n     */\n    stop() {\n        return new Promise(\n            resolve => {\n                this._mediaRecorder.onstop = () => resolve();\n                this._mediaRecorder.stop();\n            }\n        );\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#exportRecordedData()}.\n     *\n     * @inheritdoc\n     */\n    exportRecordedData() {\n        if (this._recordedData !== null) {\n            return Promise.resolve({\n                data: this._recordedData,\n                format: 'ogg'\n            });\n        }\n\n        return Promise.reject('No audio data recorded.');\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#setMuted()}.\n     *\n     * @inheritdoc\n     */\n    setMuted(muted) {\n        const shouldEnable = !muted;\n\n        if (!this._stream) {\n            return Promise.resolve();\n        }\n\n        const track = this._stream.getAudioTracks()[0];\n\n        if (!track) {\n            logger.error('Cannot mute/unmute. Track not found!');\n\n            return Promise.resolve();\n        }\n\n        if (track.enabled !== shouldEnable) {\n            track.enabled = shouldEnable;\n            logger.log(muted ? 'Mute' : 'Unmute');\n        }\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Initialize the adapter.\n     *\n     * @private\n     * @param {string} micDeviceId - The current microphone device ID.\n     * @returns {Promise}\n     */\n    _initialize(micDeviceId) {\n        if (this._mediaRecorder) {\n            return Promise.resolve();\n        }\n\n        return new Promise((resolve, error) => {\n            this._getAudioStream(micDeviceId)\n            .then(stream => {\n                this._stream = stream;\n                this._mediaRecorder = new MediaRecorder(stream);\n                this._mediaRecorder.ondataavailable\n                    = e => this._saveMediaData(e.data);\n                resolve();\n            })\n            .catch(err => {\n                logger.error(`Error calling getUserMedia(): ${err}`);\n                error();\n            });\n        });\n    }\n\n    /**\n     * Callback for storing the encoded data.\n     *\n     * @private\n     * @param {Blob} data - Encoded data.\n     * @returns {void}\n     */\n    _saveMediaData(data) {\n        this._recordedData = data;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nconst logger = getLogger(__filename);\nimport { RecordingAdapter } from './RecordingAdapter';\n\n/**\n * Base class for {@code AudioContext}-based recording adapters.\n */\nexport class AbstractAudioContextAdapter extends RecordingAdapter {\n    /**\n     * The {@code AudioContext} instance.\n     */\n    _audioContext = null;\n\n    /**\n     * The {@code ScriptProcessorNode} instance.\n     */\n    _audioProcessingNode = null;\n\n    /**\n     * The {@code MediaStreamAudioSourceNode} instance.\n     */\n    _audioSource = null;\n\n    /**\n     * The {@code MediaStream} instance, representing the current audio device.\n     */\n    _stream = null;\n\n    /**\n     * Sample rate.\n     */\n    _sampleRate = 44100;\n\n    /**\n     * Constructor.\n     */\n    constructor() {\n        super();\n\n        // sampleRate is browser and OS dependent.\n        // Setting sampleRate explicitly is in the specs but not implemented\n        // by browsers.\n        // See: https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/\n        //    AudioContext#Browser_compatibility\n        // And https://bugs.chromium.org/p/chromium/issues/detail?id=432248\n\n        this._audioContext = new AudioContext();\n        this._sampleRate = this._audioContext.sampleRate;\n        logger.log(`Current sampleRate ${this._sampleRate}.`);\n    }\n\n    /**\n     * Sets up the audio graph in the AudioContext.\n     *\n     * @protected\n     * @param {string} micDeviceId - The current microphone device ID.\n     * @param {Function} callback - Callback function to\n     * handle AudioProcessingEvents.\n     * @returns {Promise}\n     */\n    _initializeAudioContext(micDeviceId, callback) {\n        if (typeof callback !== 'function') {\n            return Promise.reject('a callback function is required.');\n        }\n\n        return this._getAudioStream(micDeviceId)\n        .then(stream => {\n            this._stream = stream;\n            this._audioSource\n                = this._audioContext.createMediaStreamSource(stream);\n            this._audioProcessingNode\n                = this._audioContext.createScriptProcessor(4096, 1, 1);\n            this._audioProcessingNode.onaudioprocess = callback;\n            logger.debug('AudioContext is set up.');\n        })\n        .catch(err => {\n            logger.error(`Error calling getUserMedia(): ${err}`);\n\n            return Promise.reject(err);\n        });\n    }\n\n    /**\n     * Connects the nodes in the {@code AudioContext} to start the flow of\n     * audio data.\n     *\n     * @protected\n     * @returns {void}\n     */\n    _connectAudioGraph() {\n        this._audioSource.connect(this._audioProcessingNode);\n        this._audioProcessingNode.connect(this._audioContext.destination);\n    }\n\n    /**\n     * Disconnects the nodes in the {@code AudioContext}.\n     *\n     * @protected\n     * @returns {void}\n     */\n    _disconnectAudioGraph() {\n        this._audioProcessingNode.onaudioprocess = undefined;\n        this._audioProcessingNode.disconnect();\n        this._audioSource.disconnect();\n    }\n\n    /**\n     * Replaces the current microphone MediaStream.\n     *\n     * @protected\n     * @param {string} micDeviceId - New microphone ID.\n     * @returns {Promise}\n     */\n    _replaceMic(micDeviceId) {\n        if (this._audioContext && this._audioProcessingNode) {\n            return this._getAudioStream(micDeviceId).then(newStream => {\n                const newSource = this._audioContext\n                    .createMediaStreamSource(newStream);\n\n                this._audioSource.disconnect();\n                newSource.connect(this._audioProcessingNode);\n                this._stream = newStream;\n                this._audioSource = newSource;\n            });\n        }\n\n        return Promise.resolve();\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nconst logger = getLogger(__filename);\n\nimport { AbstractAudioContextAdapter } from './AbstractAudioContextAdapter';\n\nconst WAV_BITS_PER_SAMPLE = 16;\n\n/**\n * Recording adapter for raw WAVE format.\n */\nexport class WavAdapter extends AbstractAudioContextAdapter {\n\n    /**\n     * Length of the WAVE file, in number of samples.\n     */\n    _wavLength = 0;\n\n    /**\n     * The {@code ArrayBuffer}s that stores the PCM bits.\n     */\n    _wavBuffers = [];\n\n    /**\n     * Whether or not the {@code WavAdapter} is in a ready state.\n     */\n    _isInitialized = false;\n\n    /**\n     * Initialization promise.\n     */\n    _initPromise = null;\n\n    /**\n     * Constructor.\n     */\n    constructor() {\n        super();\n        this._onAudioProcess = this._onAudioProcess.bind(this);\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#start()}.\n     *\n     * @inheritdoc\n     */\n    start(micDeviceId) {\n        if (!this._initPromise) {\n            this._initPromise = this._initialize(micDeviceId);\n        }\n\n        return this._initPromise.then(() => {\n            this._wavBuffers = [];\n            this._wavLength = 0;\n\n            this._connectAudioGraph();\n        });\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#stop()}.\n     *\n     * @inheritdoc\n     */\n    stop() {\n        this._disconnectAudioGraph();\n        this._data = this._exportMonoWAV(this._wavBuffers, this._wavLength);\n        this._audioProcessingNode = null;\n        this._audioSource = null;\n        this._isInitialized = false;\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#exportRecordedData()}.\n     *\n     * @inheritdoc\n     */\n    exportRecordedData() {\n        if (this._data !== null) {\n            return Promise.resolve({\n                data: this._data,\n                format: 'wav'\n            });\n        }\n\n        return Promise.reject('No audio data recorded.');\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#setMuted()}.\n     *\n     * @inheritdoc\n     */\n    setMuted(muted) {\n        const shouldEnable = !muted;\n\n        if (!this._stream) {\n            return Promise.resolve();\n        }\n\n        const track = this._stream.getAudioTracks()[0];\n\n        if (!track) {\n            logger.error('Cannot mute/unmute. Track not found!');\n\n            return Promise.resolve();\n        }\n\n        if (track.enabled !== shouldEnable) {\n            track.enabled = shouldEnable;\n            logger.log(muted ? 'Mute' : 'Unmute');\n        }\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#setMicDevice()}.\n     *\n     * @inheritdoc\n     */\n    setMicDevice(micDeviceId) {\n        return this._replaceMic(micDeviceId);\n    }\n\n    /**\n     * Creates a WAVE file header.\n     *\n     * @private\n     * @param {number} dataLength - Length of the payload (PCM data), in bytes.\n     * @returns {Uint8Array}\n     */\n    _createWavHeader(dataLength) {\n        // adapted from\n        // https://github.com/mmig/speech-to-flac/blob/master/encoder.js\n\n        // ref: http://soundfile.sapp.org/doc/WaveFormat/\n\n        // create our WAVE file header\n        const buffer = new ArrayBuffer(44);\n        const view = new DataView(buffer);\n\n        // RIFF chunk descriptor\n        writeUTFBytes(view, 0, 'RIFF');\n\n        // set file size at the end\n        writeUTFBytes(view, 8, 'WAVE');\n\n        // FMT sub-chunk\n        writeUTFBytes(view, 12, 'fmt ');\n        view.setUint32(16, 16, true);\n        view.setUint16(20, 1, true);\n\n        // NumChannels\n        view.setUint16(22, 1, true);\n\n        // SampleRate\n        view.setUint32(24, this._sampleRate, true);\n\n        // ByteRate\n        view.setUint32(28,\n            Number(this._sampleRate) * 1 * WAV_BITS_PER_SAMPLE / 8, true);\n\n        // BlockAlign\n        view.setUint16(32, 1 * Number(WAV_BITS_PER_SAMPLE) / 8, true);\n\n        view.setUint16(34, WAV_BITS_PER_SAMPLE, true);\n\n        // data sub-chunk\n        writeUTFBytes(view, 36, 'data');\n\n        // file length\n        view.setUint32(4, 32 + dataLength, true);\n\n        // data chunk length\n        view.setUint32(40, dataLength, true);\n\n        return new Uint8Array(buffer);\n    }\n\n    /**\n     * Initialize the adapter.\n     *\n     * @private\n     * @param {string} micDeviceId - The current microphone device ID.\n     * @returns {Promise}\n     */\n    _initialize(micDeviceId) {\n        if (this._isInitialized) {\n            return Promise.resolve();\n        }\n\n        return this._initializeAudioContext(micDeviceId, this._onAudioProcess)\n            .then(() => {\n                this._isInitialized = true;\n            });\n    }\n\n    /**\n     * Callback function for handling AudioProcessingEvents.\n     *\n     * @private\n     * @param {AudioProcessingEvent} e - The event containing the raw PCM.\n     * @returns {void}\n     */\n    _onAudioProcess(e) {\n        // See: https://developer.mozilla.org/en-US/docs/Web/API/\n        //      AudioBuffer/getChannelData\n        // The returned value is an Float32Array.\n        const channelLeft = e.inputBuffer.getChannelData(0);\n\n        // Need to copy the Float32Array:\n        // unlike passing to WebWorker, this data is passed by reference,\n        // so we need to copy it, otherwise the resulting audio file will be\n        // just repeating the last segment.\n        this._wavBuffers.push(new Float32Array(channelLeft));\n        this._wavLength += channelLeft.length;\n    }\n\n    /**\n     * Combines buffers and export to a wav file.\n     *\n     * @private\n     * @param {Float32Array[]} buffers - The stored buffers.\n     * @param {number} length - Total length (number of samples).\n     * @returns {Blob}\n     */\n    _exportMonoWAV(buffers, length) {\n        const dataLength = length * 2; // each sample = 16 bit = 2 bytes\n        const buffer = new ArrayBuffer(44 + dataLength);\n        const view = new DataView(buffer);\n\n        // copy WAV header data into the array buffer\n        const header = this._createWavHeader(dataLength);\n        const len = header.length;\n\n        for (let i = 0; i < len; ++i) {\n            view.setUint8(i, header[i]);\n        }\n\n        // write audio data\n        floatTo16BitPCM(view, 44, buffers);\n\n        return new Blob([ view ], { type: 'audio/wav' });\n    }\n}\n\n\n/**\n * Helper function. Writes a UTF string to memory\n * using big endianness. Required by WAVE headers.\n *\n * @param {ArrayBuffer} view - The view to memory.\n * @param {number} offset - Offset.\n * @param {string} string - The string to be written.\n * @returns {void}\n */\nfunction writeUTFBytes(view, offset, string) {\n    const lng = string.length;\n\n    // convert to big endianness\n    for (let i = 0; i < lng; ++i) {\n        view.setUint8(offset + i, string.charCodeAt(i));\n    }\n}\n\n/**\n * Helper function for converting Float32Array to Int16Array.\n *\n * @param {DataView} output - View to the output buffer.\n * @param {number} offset - The offset in output buffer to write from.\n * @param {Float32Array[]} inputBuffers - The input buffers.\n * @returns {void}\n */\nfunction floatTo16BitPCM(output, offset, inputBuffers) {\n\n    let i, j;\n    let input, s, sampleCount;\n    const bufferCount = inputBuffers.length;\n    let o = offset;\n\n    for (i = 0; i < bufferCount; ++i) {\n        input = inputBuffers[i];\n        sampleCount = input.length;\n        for (j = 0; j < sampleCount; ++j, o += 2) {\n            s = Math.max(-1, Math.min(1, input[j]));\n            output.setInt16(o, s < 0 ? s * 0x8000 : s * 0x7FFF, true);\n        }\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nconst logger = getLogger(__filename);\nimport { AbstractAudioContextAdapter } from '../AbstractAudioContextAdapter';\n\nimport {\n    DEBUG,\n    MAIN_THREAD_FINISH,\n    MAIN_THREAD_INIT,\n    MAIN_THREAD_NEW_DATA_ARRIVED,\n    WORKER_BLOB_READY,\n    WORKER_LIBFLAC_READY\n} from './messageTypes';\n\n\n/**\n * Recording adapter that uses libflac.js in the background.\n */\nexport class FlacAdapter extends AbstractAudioContextAdapter {\n\n    /**\n     * Instance of WebWorker (flacEncodeWorker).\n     */\n    _encoder = null;\n\n    /**\n     * Resolve function of the Promise returned by {@code stop()}.\n     * This is called after the WebWorker sends back {@code WORKER_BLOB_READY}.\n     */\n    _stopPromiseResolver = null;\n\n    /**\n     * Resolve function of the Promise that initializes the flacEncodeWorker.\n     */\n    _initWorkerPromiseResolver = null;\n\n    /**\n     * Initialization promise.\n     */\n    _initPromise = null;\n\n    /**\n     * Constructor.\n     */\n    constructor() {\n        super();\n        this._onAudioProcess = this._onAudioProcess.bind(this);\n        this._onWorkerMessage = this._onWorkerMessage.bind(this);\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#start()}.\n     *\n     * @inheritdoc\n     */\n    start(micDeviceId) {\n        if (!this._initPromise) {\n            this._initPromise = this._initialize(micDeviceId);\n        }\n\n        return this._initPromise.then(() => {\n            this._connectAudioGraph();\n        });\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#stop()}.\n     *\n     * @inheritdoc\n     */\n    stop() {\n        if (!this._encoder) {\n            logger.error('Attempting to stop but has nothing to stop.');\n\n            return Promise.reject();\n        }\n\n        return new Promise(resolve => {\n            this._initPromise = null;\n            this._disconnectAudioGraph();\n            this._stopPromiseResolver = resolve;\n            this._encoder.postMessage({\n                command: MAIN_THREAD_FINISH\n            });\n        });\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#exportRecordedData()}.\n     *\n     * @inheritdoc\n     */\n    exportRecordedData() {\n        if (this._data !== null) {\n            return Promise.resolve({\n                data: this._data,\n                format: 'flac'\n            });\n        }\n\n        return Promise.reject('No audio data recorded.');\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#setMuted()}.\n     *\n     * @inheritdoc\n     */\n    setMuted(muted) {\n        const shouldEnable = !muted;\n\n        if (!this._stream) {\n            return Promise.resolve();\n        }\n\n        const track = this._stream.getAudioTracks()[0];\n\n        if (!track) {\n            logger.error('Cannot mute/unmute. Track not found!');\n\n            return Promise.resolve();\n        }\n\n        if (track.enabled !== shouldEnable) {\n            track.enabled = shouldEnable;\n            logger.log(muted ? 'Mute' : 'Unmute');\n        }\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#setMicDevice()}.\n     *\n     * @inheritdoc\n     */\n    setMicDevice(micDeviceId) {\n        return this._replaceMic(micDeviceId);\n    }\n\n    /**\n     * Initialize the adapter.\n     *\n     * @private\n     * @param {string} micDeviceId - The current microphone device ID.\n     * @returns {Promise}\n     */\n    _initialize(micDeviceId) {\n        if (this._encoder !== null) {\n            return Promise.resolve();\n        }\n\n        const promiseInitWorker = new Promise((resolve, reject) => {\n            try {\n                this._loadWebWorker();\n            } catch (e) {\n                reject();\n            }\n\n            // Save the Promise's resolver to resolve it later.\n            // This Promise is only resolved in _onWorkerMessage when we\n            // receive WORKER_LIBFLAC_READY from the WebWorker.\n            this._initWorkerPromiseResolver = resolve;\n\n            // set up listener for messages from the WebWorker\n            this._encoder.onmessage = this._onWorkerMessage;\n\n            this._encoder.postMessage({\n                command: MAIN_THREAD_INIT,\n                config: {\n                    sampleRate: this._sampleRate,\n                    bps: 16\n                }\n            });\n        });\n\n        // Arrow function is used here because we want AudioContext to be\n        // initialized only **after** promiseInitWorker is resolved.\n        return promiseInitWorker\n            .then(() =>\n                this._initializeAudioContext(\n                    micDeviceId,\n                    this._onAudioProcess\n                ));\n    }\n\n    /**\n     * Callback function for handling AudioProcessingEvents.\n     *\n     * @private\n     * @param {AudioProcessingEvent} e - The event containing the raw PCM.\n     * @returns {void}\n     */\n    _onAudioProcess(e) {\n        // Delegates to the WebWorker to do the encoding.\n        // The return of getChannelData() is a Float32Array,\n        // each element representing one sample.\n        const channelLeft = e.inputBuffer.getChannelData(0);\n\n        this._encoder.postMessage({\n            command: MAIN_THREAD_NEW_DATA_ARRIVED,\n            buf: channelLeft\n        });\n    }\n\n    /**\n     * Handler for messages from flacEncodeWorker.\n     *\n     * @private\n     * @param {MessageEvent} e - The event sent by the WebWorker.\n     * @returns {void}\n     */\n    _onWorkerMessage(e) {\n        switch (e.data.command) {\n        case WORKER_BLOB_READY:\n            // Received a Blob representing an encoded FLAC file.\n            this._data = e.data.buf;\n            if (this._stopPromiseResolver !== null) {\n                this._stopPromiseResolver();\n                this._stopPromiseResolver = null;\n                this._encoder.terminate();\n                this._encoder = null;\n            }\n            break;\n        case DEBUG:\n            logger.log(e.data);\n            break;\n        case WORKER_LIBFLAC_READY:\n            logger.log('libflac is ready.');\n            this._initWorkerPromiseResolver();\n            break;\n        default:\n            logger.error(\n                `Unknown event\n                from encoder (WebWorker): \"${e.data.command}\"!`);\n            break;\n        }\n    }\n\n    /**\n     * Loads the WebWorker.\n     *\n     * @private\n     * @returns {void}\n     */\n    _loadWebWorker() {\n        const blob = new Blob([\"importScripts('https://sdk.sariska.io/flacEncodeWorker.min.js');\"], {\"type\": 'application/javascript'});\n        const url = window.URL || window.webkitURL;\n        const blobUrl = url.createObjectURL(blob);\n        this._encoder = new Worker(blobUrl);\n        URL.revokeObjectURL(blobUrl);\n    }\n}","/**\n * Types of messages that are passed between the main thread and the WebWorker\n * ({@code flacEncodeWorker})\n */\n\n// Messages sent by the main thread\n\n/**\n * Message type that signals the termination of encoding,\n * after which no new audio bits should be sent to the\n * WebWorker.\n */\nexport const MAIN_THREAD_FINISH = 'MAIN_THREAD_FINISH';\n\n/**\n * Message type that carries initial parameters for\n * the WebWorker.\n */\nexport const MAIN_THREAD_INIT = 'MAIN_THREAD_INIT';\n\n/**\n * Message type that carries the newly received raw audio bits\n * for the WebWorker to encode.\n */\nexport const MAIN_THREAD_NEW_DATA_ARRIVED = 'MAIN_THREAD_NEW_DATA_ARRIVED';\n\n// Messages sent by the WebWorker\n\n/**\n * Message type that signals libflac is ready to receive audio bits.\n */\nexport const WORKER_LIBFLAC_READY = 'WORKER_LIBFLAC_READY';\n\n/**\n * Message type that carries the encoded FLAC file as a Blob.\n */\nexport const WORKER_BLOB_READY = 'WORKER_BLOB_READY';\n\n// Messages sent by either the main thread or the WebWorker\n\n/**\n * Debug messages.\n */\nexport const DEBUG = 'DEBUG';\n","/* @flow */\n\nimport Bourne from '@hapi/bourne';\nimport { jitsiLocalStorage } from '@jitsi/js-utils';\n\nimport { getLogger } from '@jitsi/logger';\nconst logger = getLogger(__filename);\n\n/**\n * Gets high precision system time.\n *\n * @returns {number}\n */\nfunction highPrecisionTime() {\n    return window.performance\n        && window.performance.now\n        && window.performance.timing\n        && window.performance.timing.navigationStart\n        ? window.performance.now() + window.performance.timing.navigationStart\n        : Date.now();\n}\n\n// Have to use string literal here, instead of Symbols,\n// because these values need to be JSON-serializible.\n\n/**\n * Types of SessionEvents.\n */\nconst SessionEventType = Object.freeze({\n    /**\n     * Start of local recording session. This is recorded when the\n     * {@code RecordingController} receives the signal to start local recording,\n     * before the actual adapter is engaged.\n     */\n    SESSION_STARTED: 'SESSION_STARTED',\n\n    /**\n     * Start of a continuous segment. This is recorded when the adapter is\n     * engaged. Can happen multiple times in a local recording session,\n     * due to browser reloads or switching of recording device.\n     */\n    SEGMENT_STARTED: 'SEGMENT_STARTED',\n\n    /**\n     * End of a continuous segment. This is recorded when the adapter unengages.\n     */\n    SEGMENT_ENDED: 'SEGMENT_ENDED'\n});\n\n/**\n * Represents an event during a local recording session.\n * The event can be either that the adapter started recording, or stopped\n * recording.\n */\n// type SessionEvent = {\n\n//     /**\n//      * The type of the event.\n//      * Should be one of the values in {@code SessionEventType}.\n//      */\n//     type: string,\n\n//     /**\n//      * The timestamp of the event.\n//      */\n//     timestamp: number\n// };\n\n/**\n * Representation of the metadata of a segment.\n */\n// type SegmentInfo = {\n\n//     /**\n//      * The length of gap before this segment, in milliseconds.\n//      * mull if unknown.\n//      */\n//     gapBefore?: ?number,\n\n//     /**\n//      * The duration of this segment, in milliseconds.\n//      * null if unknown or the segment is not finished.\n//      */\n//     duration?: ?number,\n\n//     /**\n//      * The start time, in milliseconds.\n//      */\n//     start?: ?number,\n\n//     /**\n//      * The end time, in milliseconds.\n//      * null if unknown, the segment is not finished, or the recording is\n//      * interrupted (e.g. browser reload).\n//      */\n//     end?: ?number\n// };\n\n/**\n * Representation of metadata of a local recording session.\n */\n// type SessionInfo = {\n\n//     /**\n//      * The session token.\n//      */\n//     sessionToken: string,\n\n//     /**\n//      * The start time of the session.\n//      */\n//     start: ?number,\n\n//     /**\n//      * The recording format.\n//      */\n//     format: string,\n\n//     /**\n//      * Array of segments in the session.\n//      */\n//     segments: SegmentInfo[]\n// }\n\n/**\n * {@code localStorage} key.\n */\nconst LOCAL_STORAGE_KEY = 'localRecordingMetadataVersion1';\n\n/**\n * SessionManager manages the metadata of each segment during each local\n * recording session.\n *\n * A segment is a continuous portion of recording done using the same adapter\n * on the same microphone device.\n *\n * Browser refreshes, switching of microphone will cause new segments to be\n * created.\n *\n * A recording session can consist of one or more segments.\n */\nclass SessionManager {\n\n    /**\n     * The metadata.\n     */\n    _sessionsMetadata = {\n    };\n\n    /**\n     * Constructor.\n     */\n    constructor() {\n        this._loadMetadata();\n    }\n\n    /**\n     * Loads metadata from localStorage.\n     *\n     * @private\n     * @returns {void}\n     */\n    _loadMetadata() {\n        const dataStr = jitsiLocalStorage.getItem(LOCAL_STORAGE_KEY);\n\n        if (dataStr !== null) {\n            try {\n                const dataObject = Bourne.parse(dataStr);\n\n                this._sessionsMetadata = dataObject;\n            } catch (e) {\n                logger.warn('Failed to parse localStorage item.');\n\n                return;\n            }\n        }\n    }\n\n    /**\n     * Persists metadata to localStorage.\n     *\n     * @private\n     * @returns {void}\n     */\n    _saveMetadata() {\n        jitsiLocalStorage.setItem(LOCAL_STORAGE_KEY,\n            JSON.stringify(this._sessionsMetadata));\n    }\n\n    /**\n     * Creates a session if not exists.\n     *\n     * @param {string} sessionToken - The local recording session token.\n     * @param {string} format - The local recording format.\n     * @returns {void}\n     */\n    createSession(sessionToken, format) {\n        if (this._sessionsMetadata[sessionToken] === undefined) {\n            this._sessionsMetadata[sessionToken] = {\n                format,\n                events: []\n            };\n            this._sessionsMetadata[sessionToken].events.push({\n                type: SessionEventType.SESSION_STARTED,\n                timestamp: highPrecisionTime()\n            });\n            this._saveMetadata();\n        } else {\n            logger.warn(`Session ${sessionToken} already exists`);\n        }\n    }\n\n    /**\n     * Gets all the Sessions.\n     *\n     * @returns {SessionInfo[]}\n     */\n    getSessions(){\n        const sessionTokens = Object.keys(this._sessionsMetadata);\n        const output = [];\n\n        for (let i = 0; i < sessionTokens.length; ++i) {\n            const thisSession = this._sessionsMetadata[sessionTokens[i]];\n            const newSessionInfo = {\n                start: thisSession.events[0].timestamp,\n                format: thisSession.format,\n                sessionToken: sessionTokens[i],\n                segments: this.getSegments(sessionTokens[i])\n            };\n\n            output.push(newSessionInfo);\n        }\n\n        output.sort((a, b) => (a.start || 0) - (b.start || 0));\n\n        return output;\n    }\n\n    /**\n     * Removes session metadata.\n     *\n     * @param {string} sessionToken - The session token.\n     * @returns {void}\n     */\n    removeSession(sessionToken) {\n        delete this._sessionsMetadata[sessionToken];\n        this._saveMetadata();\n    }\n\n    /**\n     * Get segments of a given Session.\n     *\n     * @param {string} sessionToken - The session token.\n     * @returns {SegmentInfo[]}\n     */\n    getSegments(sessionToken) {\n        const thisSession = this._sessionsMetadata[sessionToken];\n\n        if (thisSession) {\n            return this._constructSegments(thisSession.events);\n        }\n\n        return [];\n    }\n\n    /**\n     * Marks the start of a new segment.\n     * This should be invoked by {@code RecordingAdapter}s when they need to\n     * start asynchronous operations (such as switching tracks) that interrupts\n     * recording.\n     *\n     * @param {string} sessionToken - The token of the session to start a new\n     * segment in.\n     * @returns {number} - Current segment index.\n     */\n    beginSegment(sessionToken) {\n        if (this._sessionsMetadata[sessionToken] === undefined) {\n            logger.warn('Attempting to add segments to nonexistent'\n                + ` session ${sessionToken}`);\n\n            return -1;\n        }\n        this._sessionsMetadata[sessionToken].events.push({\n            type: SessionEventType.SEGMENT_STARTED,\n            timestamp: highPrecisionTime()\n        });\n        this._saveMetadata();\n\n        return this.getSegments(sessionToken).length - 1;\n    }\n\n    /**\n     * Gets the current segment index. Starting from 0 for the first\n     * segment.\n     *\n     * @param {string} sessionToken - The session token.\n     * @returns {number}\n     */\n    getCurrentSegmentIndex(sessionToken) {\n        if (this._sessionsMetadata[sessionToken] === undefined) {\n            return -1;\n        }\n        const segments = this.getSegments(sessionToken);\n\n        if (segments.length === 0) {\n            return -1;\n        }\n\n        const lastSegment = segments[segments.length - 1];\n\n        if (lastSegment.end) {\n            // last segment is already ended\n            return -1;\n        }\n\n        return segments.length - 1;\n    }\n\n    /**\n     * Marks the end of the last segment in a session.\n     *\n     * @param {string} sessionToken - The session token.\n     * @returns {void}\n     */\n    endSegment(sessionToken) {\n        if (this._sessionsMetadata[sessionToken] === undefined) {\n            logger.warn('Attempting to end a segment in nonexistent'\n                + ` session ${sessionToken}`);\n        } else {\n            this._sessionsMetadata[sessionToken].events.push({\n                type: SessionEventType.SEGMENT_ENDED,\n                timestamp: highPrecisionTime()\n            });\n            this._saveMetadata();\n        }\n    }\n\n    /**\n     * Constructs an array of {@code SegmentInfo} from an array of\n     * {@code SessionEvent}s.\n     *\n     * @private\n     * @param {SessionEvent[]} events - The array of {@code SessionEvent}s.\n     * @returns {SegmentInfo[]}\n     */\n    _constructSegments(events) {\n        if (events.length === 0) {\n            return [];\n        }\n\n        const output = [];\n        let sessionStartTime = null;\n        let currentSegment = {};\n\n        /**\n         * Helper function for adding a new {@code SegmentInfo} object to the\n         * output.\n         *\n         * @returns {void}\n         */\n        function commit() {\n            if (currentSegment.gapBefore === undefined\n                || currentSegment.gapBefore === null) {\n                if (output.length > 0 && output[output.length - 1].end) {\n                    const lastSegment = output[output.length - 1];\n\n                    if (currentSegment.start && lastSegment.end) {\n                        currentSegment.gapBefore = currentSegment.start\n                            - lastSegment.end;\n                    } else {\n                        currentSegment.gapBefore = null;\n                    }\n                } else if (sessionStartTime !== null && output.length === 0) {\n                    currentSegment.gapBefore = currentSegment.start\n                        ? currentSegment.start - sessionStartTime\n                        : null;\n                } else {\n                    currentSegment.gapBefore = null;\n                }\n            }\n            currentSegment.duration = currentSegment.end && currentSegment.start\n                ? currentSegment.end - currentSegment.start\n                : null;\n            output.push(currentSegment);\n            currentSegment = {};\n        }\n\n        for (let i = 0; i < events.length; ++i) {\n            const currentEvent = events[i];\n\n            switch (currentEvent.type) {\n            case SessionEventType.SESSION_STARTED:\n                if (sessionStartTime === null) {\n                    sessionStartTime = currentEvent.timestamp;\n                } else {\n                    logger.warn('Unexpected SESSION_STARTED event.'\n                        , currentEvent);\n                }\n                break;\n            case SessionEventType.SEGMENT_STARTED:\n                if (currentSegment.start === undefined\n                    || currentSegment.start === null) {\n                    currentSegment.start = currentEvent.timestamp;\n                } else {\n                    commit();\n                    currentSegment.start = currentEvent.timestamp;\n                }\n                break;\n\n            case SessionEventType.SEGMENT_ENDED:\n                if (currentSegment.start === undefined\n                    || currentSegment.start === null) {\n                    logger.warn('Unexpected SEGMENT_ENDED event', currentEvent);\n                } else {\n                    currentSegment.end = currentEvent.timestamp;\n                    commit();\n                }\n                break;\n\n            default:\n                logger.warn('Unexpected error during _constructSegments');\n                break;\n            }\n        }\n        if (currentSegment.start) {\n            commit();\n        }\n\n        return output;\n    }\n\n}\n\n/**\n * Global singleton of {@code SessionManager}.\n */\nexport const sessionManager = new SessionManager();\n\n// For debug only. To remove later.\nwindow.sessionManager = sessionManager;\n","/* @flow */\n\nimport Bourne from '@hapi/bourne';\nimport { getLogger } from '@jitsi/logger';\nconst logger = getLogger(__filename);\n\nimport {\n    FlacAdapter,\n    OggAdapter,\n    WavAdapter,\n    downloadBlob\n} from '../recording';\nimport { sessionManager } from '../session';\n\n/**\n * XMPP command for signaling the start of local recording to all clients.\n * Should be sent by the moderator only.\n */\nconst COMMAND_START = 'localRecStart';\n\n/**\n * XMPP command for signaling the stop of local recording to all clients.\n * Should be sent by the moderator only.\n */\nconst COMMAND_STOP = 'localRecStop';\n\n/**\n * One-time command used to trigger the moderator to resend the commands.\n * This is a workaround for newly-joined clients to receive remote presence.\n */\nconst COMMAND_PING = 'localRecPing';\n\n/**\n * One-time command sent upon receiving a {@code COMMAND_PING}.\n * Only the moderator sends this command.\n * This command does not carry any information itself, but rather forces the\n * XMPP server to resend the remote presence.\n */\nconst COMMAND_PONG = 'localRecPong';\n\n/**\n * Participant property key for local recording stats.\n */\nconst PROPERTY_STATS = 'localRecStats';\n\n/**\n * Supported recording formats.\n */\nconst RECORDING_FORMATS = new Set([ 'flac', 'wav', 'ogg' ]);\n\n/**\n * Default recording format.\n */\nconst DEFAULT_RECORDING_FORMAT = 'flac';\n\n/**\n * States of the {@code RecordingController}.\n */\nconst ControllerState = Object.freeze({\n    /**\n     * Idle (not recording).\n     */\n    IDLE: Symbol('IDLE'),\n\n    /**\n     * Starting.\n     */\n    STARTING: Symbol('STARTING'),\n\n    /**\n     * Engaged (recording).\n     */\n    RECORDING: Symbol('RECORDING'),\n\n    /**\n     * Stopping.\n     */\n    STOPPING: Symbol('STOPPING'),\n\n    /**\n     * Failed, due to error during starting / stopping process.\n     */\n    FAILED: Symbol('FAILED')\n});\n\n/**\n * Type of the stats reported by each participant (client).\n */\n// type RecordingStats = {\n\n//     /**\n//      * Current local recording session token used by the participant.\n//      */\n//     currentSessionToken: number,\n\n//     /**\n//      * Whether local recording is engaged on the participant's device.\n//      */\n//     isRecording: boolean,\n\n//     /**\n//      * Total recorded bytes. (Reserved for future use.)\n//      */\n//     recordedBytes: number,\n\n//     /**\n//      * Total recording duration. (Reserved for future use.)\n//      */\n//     recordedLength: number\n// }\n\n/**\n * The component responsible for the coordination of local recording, across\n * multiple participants.\n * Current implementation requires that there is only one moderator in a room.\n */\nexport class RecordingController {\n\n    /**\n     * For each recording session, there is a separate @{code RecordingAdapter}\n     * instance so that encoded bits from the previous sessions can still be\n     * retrieved after they ended.\n     *\n     * @private\n     */\n    _adapters = {};\n\n    /**\n     * The {@code JitsiConference} instance.\n     *\n     * @private\n     */\n    _conference = null;\n\n    /**\n     * Current recording session token.\n     * Session token is a number generated by the moderator, to ensure every\n     * client is in the same recording state.\n     *\n     * @private\n     */\n    _currentSessionToken = -1;\n\n    /**\n     * Current state of {@code RecordingController}.\n     *\n     * @private\n     */\n    _state = ControllerState.IDLE;\n\n    /**\n     * Whether or not the audio is muted in the UI. This is stored as internal\n     * state of {@code RecordingController} because we might have recording\n     * sessions that start muted.\n     */\n    _isMuted = false;\n\n    /**\n     * The ID of the active microphone.\n     *\n     * @private\n     */\n    _micDeviceId = 'default';\n\n    /**\n     * Current recording format. This will be in effect from the next\n     * recording session, i.e., if this value is changed during an on-going\n     * recording session, that on-going session will not use the new format.\n     *\n     * @private\n     */\n    _format = DEFAULT_RECORDING_FORMAT;\n\n    /**\n     * Whether or not the {@code RecordingController} has registered for\n     * XMPP events. Prevents initialization from happening multiple times.\n     *\n     * @private\n     */\n    _registered = false;\n\n\n    constructor() {\n        this.registerEvents = this.registerEvents.bind(this);\n        this.getParticipantsStats = this.getParticipantsStats.bind(this);\n        this._onStartCommand = this._onStartCommand.bind(this);\n        this._onStopCommand = this._onStopCommand.bind(this);\n        this._onPingCommand = this._onPingCommand.bind(this);\n        this._doStartRecording = this._doStartRecording.bind(this);\n        this._doStopRecording = this._doStopRecording.bind(this);\n        this._updateStats = this._updateStats.bind(this);\n        this._switchToNewSession = this._switchToNewSession.bind(this);\n    }\n    /**\n     * Registers listeners for XMPP events.\n     *\n     * @param {JitsiConference} conference - A {@code JitsiConference} instance.\n     * @returns {void}\n     */\n    registerEvents(conference) {\n        if (!this._registered) {\n            this._conference = conference;\n            if (this._conference) {\n                this._conference\n                    .addCommandListener(COMMAND_STOP, this._onStopCommand);\n                this._conference\n                    .addCommandListener(COMMAND_START, this._onStartCommand);\n                this._conference\n                    .addCommandListener(COMMAND_PING, this._onPingCommand);\n                this._registered = true;\n            }\n            if (!this._conference.isModerator()) {\n                this._conference.sendCommandOnce(COMMAND_PING, {});\n            }\n        }\n    }\n\n    /**\n     * Sets the event handler for {@code onStateChanged}.\n     *\n     * @param {Function} delegate - The event handler.\n     * @returns {void}\n     */\n    set onStateChanged(delegate) {\n        this._onStateChanged = delegate;\n    }\n\n    /**\n     * Sets the event handler for {@code onNotify}.\n     *\n     * @param {Function} delegate - The event handler.\n     * @returns {void}\n     */\n    set onNotify(delegate) {\n        this._onNotify = delegate;\n    }\n\n    /**\n     * Sets the event handler for {@code onWarning}.\n     *\n     * @param {Function} delegate - The event handler.\n     * @returns {void}\n     */\n    set onWarning(delegate) {\n        this._onWarning = delegate;\n    }\n\n    /**\n     * Signals the participants to start local recording.\n     *\n     * @returns {void}\n     */\n    startRecording(format) {\n        this.registerEvents();\n        this.switchFormat(format);\n        if (this._conference && this._conference.isModerator()) {\n            this._conference.removeCommand(COMMAND_STOP);\n            this._conference.sendCommand(COMMAND_START, {\n                attributes: {\n                    sessionToken: this._getRandomToken(),\n                    format: this._format\n                }\n            });\n        } else if (this._onWarning) {\n            this._onWarning('localRecording.messages.notModerator');\n        }\n    }\n\n    /**\n     * Signals the participants to stop local recording.\n     *\n     * @returns {void}\n     */\n    stopRecording() {\n        if (this._conference) {\n            if (this._conference.isModerator()) {\n                this._conference.removeCommand(COMMAND_START);\n                this._conference.sendCommand(COMMAND_STOP, {\n                    attributes: {\n                        sessionToken: this._currentSessionToken\n                    }\n                });\n            } else if (this._onWarning) {\n                this._onWarning('localRecording.messages.notModerator');\n            }\n        }\n    }\n\n    /**\n     * Triggers the download of recorded data.\n     * Browser only.\n     *\n     * @param {number} sessionToken - The token of the session to download.\n     * @returns {void}\n     */\n    downloadRecordedData(sessionToken) {\n        if (this._adapters[sessionToken]) {\n            this._adapters[sessionToken].exportRecordedData()\n                .then(args => {\n                    const { data, format } = args;\n\n                    const filename = `session_${sessionToken}`\n                        + `_${this._conference.myUserId()}.${format}`;\n\n                    downloadBlob(data, filename);\n                })\n                .catch(error => {\n                    logger.error('Failed to download audio for'\n                        + ` session ${sessionToken}. Error: ${error}`);\n                });\n        } else {\n            logger.error(`Invalid session token for download ${sessionToken}`);\n        }\n    }\n\n    /**\n     * Changes the current microphone.\n     *\n     * @param {string} micDeviceId - The new microphone device ID.\n     * @returns {void}\n     */\n    setMicDevice(micDeviceId) {\n        if (micDeviceId !== this._micDeviceId) {\n            this._micDeviceId = String(micDeviceId);\n\n            if (this._state === ControllerState.RECORDING) {\n                // sessionManager.endSegment(this._currentSessionToken);\n                logger.log('Before switching microphone...');\n                this._adapters[this._currentSessionToken]\n                    .setMicDevice(this._micDeviceId)\n                    .then(() => {\n                        logger.log('Finished switching microphone.');\n\n                        // sessionManager.beginSegment(this._currentSesoken);\n                    })\n                    .catch(() => {\n                        logger.error('Failed to switch microphone');\n                    });\n            }\n            logger.log(`Switch microphone to ${this._micDeviceId}`);\n        }\n    }\n\n    /**\n     * Mute or unmute audio. When muted, the ongoing local recording should\n     * produce silence.\n     *\n     * @param {boolean} muted - If the audio should be muted.\n     * @returns {void}\n     */\n    setMuted(muted) {\n        this._isMuted = Boolean(muted);\n\n        if (this._state === ControllerState.RECORDING) {\n            this._adapters[this._currentSessionToken].setMuted(this._isMuted);\n        }\n    }\n\n    /**\n     * Switches the recording format.\n     *\n     * @param {string} newFormat - The new format.\n     * @returns {void}\n     */\n    switchFormat(newFormat) {\n        if (!RECORDING_FORMATS.has(newFormat)) {\n            logger.log(`Unknown format ${newFormat}. Ignoring...`);\n\n            return;\n        }\n        this._format = newFormat;\n        logger.log(`Recording format switched to ${newFormat}`);\n\n        // the new format will be used in the next recording session\n    }\n\n    /**\n     * Returns the local recording stats.\n     *\n     * @returns {RecordingStats}\n     */\n    getLocalStats() {\n        return {\n            currentSessionToken: this._currentSessionToken,\n            isRecording: this._state === ControllerState.RECORDING,\n            recordedBytes: 0,\n            recordedLength: 0\n        };\n    }\n    /**\n     * Returns the remote participants' local recording stats.\n     *\n     * @returns {*}\n     */\n    getParticipantsStats() {\n        const members\n            = this._conference.getParticipants()\n            .map(member => {\n                return {\n                    id: member.getId(),\n                    displayName: member.getDisplayName(),\n                    recordingStats:\n                        Bourne.parse(member.getProperty(PROPERTY_STATS) || '{}'),\n                    isSelf: false\n                };\n            });\n\n        // transform into a dictionary for consistent ordering\n        const result = {};\n\n        for (let i = 0; i < members.length; ++i) {\n            result[members[i].id] = members[i];\n        }\n        const localId = this._conference.myUserId();\n\n        result[localId] = {\n            id: localId,\n            displayName: 'localRecording.me',\n            recordingStats: this.getLocalStats(),\n            isSelf: true\n        };\n\n        return result;\n    }\n    /**\n     * Changes the current state of {@code RecordingController}.\n     *\n     * @private\n     * @param {Symbol} newState - The new state.\n     * @returns {void}\n     */\n    _changeState(newState) {\n        if (this._state !== newState) {\n            logger.log(`state change: ${this._state.toString()} -> `\n                + `${newState.toString()}`);\n            this._state = newState;\n        }\n    }\n    /**\n     * Sends out updates about the local recording stats via XMPP.\n     *\n     * @private\n     * @returns {void}\n     */\n    _updateStats() {\n        if (this._conference) {\n            this._conference.setLocalParticipantProperty(PROPERTY_STATS,\n                JSON.stringify(this.getLocalStats()));\n        }\n    }\n    /**\n     * Callback function for XMPP event.\n     *\n     * @private\n     * @param {*} value - The event args.\n     * @returns {void}\n     */\n    _onStartCommand(value) {\n        const { sessionToken, format } = value.attributes;\n\n        if (this._state === ControllerState.IDLE) {\n            this._changeState(ControllerState.STARTING);\n            this._switchToNewSession(sessionToken, format);\n            this._doStartRecording();\n        } else if (this._state === ControllerState.RECORDING\n            && this._currentSessionToken !== sessionToken) {\n            // There is local recording going on, but not for the same session.\n            // This means the current state might be out-of-sync with the\n            // moderator's, so we need to restart the recording.\n            this._changeState(ControllerState.STOPPING);\n            this._doStopRecording().then(() => {\n                this._changeState(ControllerState.STARTING);\n                this._switchToNewSession(sessionToken, format);\n                this._doStartRecording();\n            });\n        }\n    }\n    /**\n     * Callback function for XMPP event.\n     *\n     * @private\n     * @param {*} value - The event args.\n     * @returns {void}\n     */\n    _onStopCommand(value) {\n        if (this._state === ControllerState.RECORDING\n            && this._currentSessionToken === value.attributes.sessionToken) {\n            this._changeState(ControllerState.STOPPING);\n            this._doStopRecording();\n        }\n    }\n    /**\n     * Callback function for XMPP event.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onPingCommand() {\n        if (this._conference.isModerator()) {\n            logger.log('Received ping, sending pong.');\n            this._conference.sendCommandOnce(COMMAND_PONG, {});\n        }\n    }\n\n    /**\n     * Generates a token that can be used to distinguish each local recording\n     * session.\n     *\n     * @returns {number}\n     */\n    _getRandomToken() {\n        return Math.floor(Math.random() * 100000000) + 1;\n    }\n    /**\n     * Starts the recording locally.\n     *\n     * @private\n     * @returns {void}\n     */\n    _doStartRecording() {\n        if (this._state === ControllerState.STARTING) {\n            const delegate = this._adapters[this._currentSessionToken];\n\n            delegate.start(this._micDeviceId)\n            .then(() => {\n                this._changeState(ControllerState.RECORDING);\n                sessionManager.beginSegment(this._currentSessionToken);\n                logger.log('Local recording engaged.');\n\n                if (this._onNotify) {\n                    this._onNotify('localRecording.messages.engaged');\n                }\n                if (this._onStateChanged) {\n                    this._onStateChanged(true);\n                }\n\n                delegate.setMuted(this._isMuted);\n                this._updateStats();\n            })\n            .catch(err => {\n                logger.error('Failed to start local recording.', err);\n            });\n        }\n\n    }\n    /**\n     * Stops the recording locally.\n     *\n     * @private\n     * @returns {Promise<void>}\n     */\n    _doStopRecording() {\n        if (this._state === ControllerState.STOPPING) {\n            const token = this._currentSessionToken;\n\n            return this._adapters[this._currentSessionToken]\n                .stop()\n                .then(() => {\n                    this._changeState(ControllerState.IDLE);\n                    sessionManager.endSegment(this._currentSessionToken);\n                    logger.log('Local recording unengaged.');\n                    this.downloadRecordedData(token);\n\n                    const messageKey\n                        = this._conference.isModerator()\n                            ? 'localRecording.messages.finishedModerator'\n                            : 'localRecording.messages.finished';\n                    const messageParams = {\n                        token\n                    };\n\n                    if (this._onNotify) {\n                        this._onNotify(messageKey, messageParams);\n                    }\n                    if (this._onStateChanged) {\n                        this._onStateChanged(false);\n                    }\n                    this._updateStats();\n                })\n                .catch(err => {\n                    logger.error('Failed to stop local recording.', err);\n                });\n        }\n\n        /* eslint-disable */\n        return Promise.resolve();\n        // FIXME: better ways to satisfy flow and ESLint at the same time?\n        /* eslint-enable */\n\n    }\n    /**\n     * Switches to a new local recording session.\n     *\n     * @param {string} sessionToken - The session Token.\n     * @param {string} format - The recording format for the session.\n     * @returns {void}\n     */\n    _switchToNewSession(sessionToken, format) {\n        this._format = format;\n        this._currentSessionToken = sessionToken;\n        logger.log(`New session: ${this._currentSessionToken}, `\n            + `format: ${this._format}`);\n        this._adapters[sessionToken]\n             = this._createRecordingAdapter();\n        sessionManager.createSession(sessionToken, this._format);\n    }\n\n    /**\n     * Creates a recording adapter according to the current recording format.\n     *\n     * @private\n     * @returns {RecordingAdapter}\n     */\n    _createRecordingAdapter() {\n        logger.debug('[RecordingController] creating recording'\n            + ` adapter for ${this._format} format.`);\n\n        switch (this._format) {\n        case 'ogg':\n            return new OggAdapter();\n        case 'flac':\n            return new FlacAdapter();\n        case 'wav':\n            return new WavAdapter();\n        default:\n            throw new Error(`Unknown format: ${this._format}`);\n        }\n    }\n}","/**\n * Force download of Blob in browser by faking an <a> tag.\n *\n * @param {Blob} blob - Base64 URL.\n * @param {string} fileName - The filename to appear in the download dialog.\n * @returns {void}\n */\nexport function downloadBlob(blob, fileName = 'recording.ogg') {\n    const base64Url = window.URL.createObjectURL(blob);\n\n    // fake a anchor tag\n    const a = document.createElement('a');\n\n    a.style = 'display: none';\n    a.href = base64Url;\n    a.download = fileName;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n}\n","import { getLogger } from '@jitsi/logger';\nimport isEqual from 'lodash.isequal';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport FeatureFlags from '../flags/FeatureFlags';\n\nconst logger = getLogger(__filename);\nconst MAX_HEIGHT_ONSTAGE = 2160;\nconst MAX_HEIGHT_THUMBNAIL = 180;\nconst LASTN_UNLIMITED = -1;\n\n/**\n * This class translates the legacy signaling format between the client and the bridge (that affects bandwidth\n * allocation) to the new format described here https://github.com/jitsi/jitsi-videobridge/blob/master/doc/allocation.md\n */\nclass ReceiverVideoConstraints {\n    /**\n     * Creates a new instance.\n     */\n    constructor() {\n        // Default constraints used for endpoints that are not explicitly included in constraints.\n        // These constraints are used for endpoints that are thumbnails in the stage view.\n        this._defaultConstraints = { 'maxHeight': MAX_HEIGHT_THUMBNAIL };\n\n        // The number of videos requested from the bridge.\n        this._lastN = LASTN_UNLIMITED;\n\n        // The number representing the maximum video height the local client should receive from the bridge.\n        this._maxFrameHeight = MAX_HEIGHT_ONSTAGE;\n\n        // The endpoint IDs of the participants that are currently selected.\n        this._selectedEndpoints = [];\n\n        this._receiverVideoConstraints = {\n            constraints: {},\n            defaultConstraints: this.defaultConstraints,\n            lastN: this._lastN,\n            onStageEndpoints: [],\n            selectedEndpoints: this._selectedEndpoints\n        };\n    }\n\n    /**\n     * Returns the receiver video constraints that need to be sent on the bridge channel.\n     */\n    get constraints() {\n        this._receiverVideoConstraints.lastN = this._lastN;\n\n        if (!this._selectedEndpoints.length) {\n            return this._receiverVideoConstraints;\n        }\n\n        // The client is assumed to be in TileView if it has selected more than one endpoint, otherwise it is\n        // assumed to be in StageView.\n        this._receiverVideoConstraints.constraints = {};\n        if (this._selectedEndpoints.length > 1) {\n            /**\n             * Tile view.\n             * Only the default constraints are specified here along with lastN (if it is set).\n             * {\n             *  'colibriClass': 'ReceiverVideoConstraints',\n             *  'defaultConstraints': { 'maxHeight': 360 }\n             * }\n             */\n            this._receiverVideoConstraints.defaultConstraints = { 'maxHeight': this._maxFrameHeight };\n            this._receiverVideoConstraints.onStageEndpoints = [];\n            this._receiverVideoConstraints.selectedEndpoints = [];\n        } else {\n            /**\n             * Stage view.\n             * The participant on stage is specified in onStageEndpoints and a higher maxHeight is specified\n             * for that endpoint while a default maxHeight of 180 is applied to all the other endpoints.\n             * {\n             *  'colibriClass': 'ReceiverVideoConstraints',\n             *  'onStageEndpoints': ['A'],\n             *  'defaultConstraints': { 'maxHeight':  180 },\n             *  'constraints': {\n             *      'A': { 'maxHeight': 720 }\n             *   }\n             * }\n             */\n            this._receiverVideoConstraints.constraints[this._selectedEndpoints[0]] = {\n                'maxHeight': this._maxFrameHeight\n            };\n            this._receiverVideoConstraints.defaultConstraints = this._defaultConstraints;\n            this._receiverVideoConstraints.onStageEndpoints = this._selectedEndpoints;\n            this._receiverVideoConstraints.selectedEndpoints = [];\n        }\n\n        return this._receiverVideoConstraints;\n    }\n\n    /**\n     * Updates the lastN field of the ReceiverVideoConstraints sent to the bridge.\n     *\n     * @param {number} value\n     * @returns {boolean} Returns true if the the value has been updated, false otherwise.\n     */\n    updateLastN(value) {\n        const changed = this._lastN !== value;\n\n        if (changed) {\n            this._lastN = value;\n            logger.debug(`Updating ReceiverVideoConstraints lastN(${value})`);\n        }\n\n        return changed;\n    }\n\n    /**\n     * Updates the resolution (height requested) in the contraints field of the ReceiverVideoConstraints\n     * sent to the bridge.\n     *\n     * @param {number} maxFrameHeight\n     * @requires {boolean} Returns true if the the value has been updated, false otherwise.\n     */\n    updateReceiveResolution(maxFrameHeight) {\n        const changed = this._maxFrameHeight !== maxFrameHeight;\n\n        if (changed) {\n            this._maxFrameHeight = maxFrameHeight;\n            logger.debug(`Updating receive maxFrameHeight: ${maxFrameHeight}`);\n        }\n\n        return changed;\n    }\n\n    /**\n     * Updates the receiver constraints sent to the bridge.\n     *\n     * @param {Object} videoConstraints\n     * @returns {boolean} Returns true if the the value has been updated, false otherwise.\n     */\n    updateReceiverVideoConstraints(videoConstraints) {\n        const changed = !isEqual(this._receiverVideoConstraints, videoConstraints);\n\n        if (changed) {\n            this._receiverVideoConstraints = videoConstraints;\n            logger.debug(`Updating ReceiverVideoConstraints ${JSON.stringify(videoConstraints)}`);\n        }\n\n        return changed;\n    }\n\n    /**\n     * Updates the list of selected endpoints.\n     *\n     * @param {Array<string>} ids\n     * @returns {void}\n     */\n    updateSelectedEndpoints(ids) {\n        logger.debug(`Updating selected endpoints: ${JSON.stringify(ids)}`);\n        this._selectedEndpoints = ids;\n    }\n}\n\n/**\n * This class manages the receive video contraints for a given {@link JitsiConference}. These constraints are\n * determined by the application based on how the remote video streams need to be displayed. This class is responsible\n * for communicating these constraints to the bridge over the bridge channel.\n */\nexport default class ReceiveVideoController {\n    /**\n     * Creates a new instance for a given conference.\n     *\n     * @param {JitsiConference} conference the conference instance for which the new instance will be managing\n     * the receive video quality constraints.\n     * @param {RTC} rtc the rtc instance which is responsible for initializing the bridge channel.\n     */\n    constructor(conference, rtc) {\n        this._conference = conference;\n        this._rtc = rtc;\n\n        const { config } = conference.options;\n\n        // The number of videos requested from the bridge, -1 represents unlimited or all available videos.\n        this._lastN = config?.startLastN ?? (config?.channelLastN || LASTN_UNLIMITED);\n\n        // The number representing the maximum video height the local client should receive from the bridge.\n        this._maxFrameHeight = MAX_HEIGHT_ONSTAGE;\n\n        /**\n         * The map that holds the max frame height requested for each remote source when source-name signaling is\n         * enabled.\n         *\n         * @type Map<string, number>\n         */\n        this._sourceReceiverConstraints = new Map();\n\n        // Enable new receiver constraints by default unless it is explicitly disabled through config.js.\n        const useNewReceiverConstraints = config?.useNewBandwidthAllocationStrategy ?? true;\n\n        if (useNewReceiverConstraints) {\n            this._receiverVideoConstraints = new ReceiverVideoConstraints();\n            const lastNUpdated = this._receiverVideoConstraints.updateLastN(this._lastN);\n\n            lastNUpdated && this._rtc.setNewReceiverVideoConstraints(this._receiverVideoConstraints.constraints);\n        } else {\n            this._rtc.setLastN(this._lastN);\n        }\n\n        // The endpoint IDs of the participants that are currently selected.\n        this._selectedEndpoints = [];\n\n        this._conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n            session => this._onMediaSessionStarted(session));\n    }\n\n    /**\n     * Returns a map of all the remote source names and the corresponding max frame heights.\n     *\n     * @param {number} maxFrameHeight\n     * @returns\n     */\n    _getDefaultSourceReceiverConstraints(mediaSession, maxFrameHeight) {\n        if (!FeatureFlags.isSourceNameSignalingEnabled()) {\n            return null;\n        }\n        const remoteVideoTracks = mediaSession.peerconnection?.getRemoteTracks(null, MediaType.VIDEO) || [];\n        const receiverConstraints = new Map();\n\n        for (const track of remoteVideoTracks) {\n            receiverConstraints.set(track.getSourceName(), maxFrameHeight);\n        }\n\n        return receiverConstraints;\n    }\n\n    /**\n     * Handles the {@link JitsiConferenceEvents.MEDIA_SESSION_STARTED}, that is when the conference creates new media\n     * session. The preferred receive frameHeight is applied on the media session.\n     *\n     * @param {JingleSessionPC} mediaSession - the started media session.\n     * @returns {void}\n     * @private\n     */\n    _onMediaSessionStarted(mediaSession) {\n        if (mediaSession.isP2P || !this._receiverVideoConstraints) {\n            mediaSession.setReceiverVideoConstraint(this._maxFrameHeight, this._sourceReceiverConstraints);\n        } else {\n            this._receiverVideoConstraints.updateReceiveResolution(this._maxFrameHeight);\n            this._rtc.setNewReceiverVideoConstraints(this._receiverVideoConstraints.constraints);\n        }\n    }\n\n    /**\n     * Returns the lastN value for the conference.\n     *\n     * @returns {number}\n     */\n    getLastN() {\n        return this._lastN;\n    }\n\n    /**\n     * Elects the participants with the given ids to be the selected participants in order to always receive video\n     * for this participant (even when last n is enabled).\n     *\n     * @param {Array<string>} ids - The user ids.\n     * @returns {void}\n     */\n    selectEndpoints(ids) {\n        this._selectedEndpoints = ids;\n\n        if (this._receiverVideoConstraints) {\n            // Filter out the local endpointId from the list of selected endpoints.\n            const remoteEndpointIds = ids.filter(id => id !== this._conference.myUserId());\n            const oldConstraints = JSON.parse(JSON.stringify(this._receiverVideoConstraints.constraints));\n\n            remoteEndpointIds.length && this._receiverVideoConstraints.updateSelectedEndpoints(remoteEndpointIds);\n            const newConstraints = this._receiverVideoConstraints.constraints;\n\n            // Send bridge message only when the constraints change.\n            if (!isEqual(newConstraints, oldConstraints)) {\n                this._rtc.setNewReceiverVideoConstraints(newConstraints);\n            }\n\n            return;\n        }\n        this._rtc.selectEndpoints(ids);\n    }\n\n    /**\n     * Selects a new value for \"lastN\". The requested amount of videos are going to be delivered after the value is\n     * in effect. Set to -1 for unlimited or all available videos.\n     *\n     * @param {number} value the new value for lastN.\n     * @returns {void}\n     */\n    setLastN(value) {\n        if (this._lastN !== value) {\n            this._lastN = value;\n\n            if (this._receiverVideoConstraints) {\n                const lastNUpdated = this._receiverVideoConstraints.updateLastN(value);\n\n                // Send out the message on the bridge channel if lastN was updated.\n                lastNUpdated && this._rtc.setNewReceiverVideoConstraints(this._receiverVideoConstraints.constraints);\n\n                return;\n            }\n            this._rtc.setLastN(value);\n        }\n    }\n\n    /**\n     * Sets the maximum video resolution the local participant should receive from remote participants.\n     *\n     * @param {number|undefined} maxFrameHeight - the new value.\n     * @returns {void}\n     */\n    setPreferredReceiveMaxFrameHeight(maxFrameHeight) {\n        this._maxFrameHeight = maxFrameHeight;\n\n        for (const session of this._conference.getMediaSessions()) {\n            if (session.isP2P || !this._receiverVideoConstraints) {\n                session.setReceiverVideoConstraint(\n                    maxFrameHeight,\n                    this._getDefaultSourceReceiverConstraints(this._maxFrameHeight));\n            } else {\n                const resolutionUpdated = this._receiverVideoConstraints.updateReceiveResolution(maxFrameHeight);\n\n                resolutionUpdated\n                    && this._rtc.setNewReceiverVideoConstraints(this._receiverVideoConstraints.constraints);\n            }\n        }\n    }\n\n    /**\n     * Sets the receiver constraints for the conference.\n     *\n     * @param {Object} constraints The video constraints.\n     */\n    setReceiverConstraints(constraints) {\n        if (!this._receiverVideoConstraints) {\n            this._receiverVideoConstraints = new ReceiverVideoConstraints();\n        }\n\n        const isEndpointsFormat = Object.keys(constraints).includes('onStageEndpoints', 'selectedEndpoints');\n        const isSourcesFormat = Object.keys(constraints).includes('onStageSources', 'selectedSources');\n\n        if (!FeatureFlags.isSourceNameSignalingEnabled() && isSourcesFormat) {\n            throw new Error(\n                '\"onStageSources\" and \"selectedSources\" are not supported when sourceNameSignaling is disabled.'\n            );\n        }\n\n        if (FeatureFlags.isSourceNameSignalingEnabled() && isEndpointsFormat) {\n            throw new Error(\n                '\"onStageEndpoints\" and \"selectedEndpoints\" are not supported when sourceNameSignaling is enabled.'\n            );\n        }\n        const constraintsChanged = this._receiverVideoConstraints.updateReceiverVideoConstraints(constraints);\n\n        if (constraintsChanged) {\n            this._lastN = constraints.lastN ?? this._lastN;\n            this._selectedEndpoints = constraints.selectedEndpoints ?? this._selectedEndpoints;\n            this._rtc.setNewReceiverVideoConstraints(constraints);\n\n            const p2pSession = this._conference.getMediaSessions().find(session => session.isP2P);\n\n            if (!p2pSession) {\n                return;\n            }\n\n            if (FeatureFlags.isSourceNameSignalingEnabled()) {\n                const mappedConstraints = Array.from(Object.entries(constraints.constraints))\n                    .map(constraint => {\n                        constraint[1] = constraint[1].maxHeight;\n\n                        return constraint;\n                    });\n\n                this._sourceReceiverConstraints = new Map(mappedConstraints);\n\n                // Send the receiver constraints to the peer through a \"content-modify\" message.\n                p2pSession.setReceiverVideoConstraint(null, this._sourceReceiverConstraints);\n            } else {\n                let maxFrameHeight = Object.values(constraints.constraints)[0]?.maxHeight;\n\n                if (!maxFrameHeight) {\n                    maxFrameHeight = constraints.defaultConstraints?.maxHeight;\n                }\n                maxFrameHeight && p2pSession.setReceiverVideoConstraint(maxFrameHeight);\n            }\n        }\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport FeatureFlags from '../flags/FeatureFlags';\nimport MediaSessionEvents from '../xmpp/MediaSessionEvents';\n\nconst logger = getLogger(__filename);\nconst MAX_LOCAL_RESOLUTION = 2160;\n\n/**\n * The class manages send video constraints across media sessions({@link JingleSessionPC}) which belong to\n * {@link JitsiConference}. It finds the lowest common value, between the local user's send preference and\n * the remote party's receive preference. Also this module will consider only the active session's receive value,\n * because local tracks are shared and while JVB may have no preference, the remote p2p may have and they may be totally\n * different.\n */\nexport default class SendVideoController {\n    /**\n     * Creates new instance for a given conference.\n     *\n     * @param {JitsiConference} conference - the conference instance for which the new instance will be managing\n     * the send video quality constraints.\n     * @param {RTC} rtc - the rtc instance that is responsible for sending the messages on the bridge channel.\n     */\n    constructor(conference, rtc) {\n        this._conference = conference;\n        this._preferredSendMaxFrameHeight = MAX_LOCAL_RESOLUTION;\n        this._rtc = rtc;\n\n        /**\n         * Source name based sender constraints.\n         * @type {Map<string, number>};\n         */\n\n        this._sourceSenderConstraints = new Map();\n        this._conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n            session => this._onMediaSessionStarted(session));\n        this._conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED,\n            () => this._configureConstraintsForLocalSources());\n        this._rtc.on(\n            RTCEvents.SENDER_VIDEO_CONSTRAINTS_CHANGED,\n            videoConstraints => this._onSenderConstraintsReceived(videoConstraints));\n    }\n\n    /**\n     * Configures the video encodings on the local sources when a media connection is established or becomes active.\n     *\n     * @returns {Promise<void[]>}\n     * @private\n     */\n    _configureConstraintsForLocalSources() {\n        if (FeatureFlags.isSourceNameSignalingEnabled()) {\n            for (const track of this._rtc.getLocalVideoTracks()) {\n                const sourceName = track.getSourceName();\n\n                sourceName && this._propagateSendMaxFrameHeight(sourceName);\n            }\n        } else {\n            this._propagateSendMaxFrameHeight();\n        }\n    }\n\n    /**\n     * Handles the {@link JitsiConferenceEvents.MEDIA_SESSION_STARTED}, that is when the conference creates new media\n     * session. It doesn't mean it's already active though. For example the JVB connection may be created after\n     * the conference has entered the p2p mode already.\n     *\n     * @param {JingleSessionPC} mediaSession - the started media session.\n     * @private\n     */\n    _onMediaSessionStarted(mediaSession) {\n        if (FeatureFlags.isSourceNameSignalingEnabled()) {\n            mediaSession.addListener(\n                MediaSessionEvents.REMOTE_SOURCE_CONSTRAINTS_CHANGED,\n                (session, sourceConstraints) => {\n                    session === this._conference.getActiveMediaSession()\n                        && sourceConstraints.forEach(constraint => this._onSenderConstraintsReceived(constraint));\n                });\n        } else {\n            mediaSession.addListener(\n                MediaSessionEvents.REMOTE_VIDEO_CONSTRAINTS_CHANGED,\n                session => session === this._conference.getActiveMediaSession()\n                    && this._configureConstraintsForLocalSources());\n        }\n    }\n\n    /**\n     * Propagates the video constraints if they have changed.\n     *\n     * @param {Object} videoConstraints - The sender video constraints received from the bridge.\n     * @returns {Promise<void[]>}\n     * @private\n     */\n    _onSenderConstraintsReceived(videoConstraints) {\n        if (FeatureFlags.isSourceNameSignalingEnabled()) {\n            const { maxHeight, sourceName } = videoConstraints;\n            const localVideoTracks = this._conference.getLocalVideoTracks() ?? [];\n\n            for (const track of localVideoTracks) {\n                // Propagate the sender constraint only if it has changed.\n                if (track.getSourceName() === sourceName\n                    && (!this._sourceSenderConstraints.has(sourceName)\n                    || this._sourceSenderConstraints.get(sourceName) !== maxHeight)) {\n                    this._sourceSenderConstraints.set(sourceName, maxHeight);\n                    logger.debug(`Sender constraints for source:${sourceName} changed to maxHeight:${maxHeight}`);\n                    this._propagateSendMaxFrameHeight(sourceName);\n                }\n            }\n        } else if (this._senderVideoConstraints?.idealHeight !== videoConstraints.idealHeight) {\n            this._senderVideoConstraints = videoConstraints;\n            this._propagateSendMaxFrameHeight();\n        }\n    }\n\n    /**\n     * Figures out the send video constraint as specified by {@link _selectSendMaxFrameHeight} and sets it on all media\n     * sessions for the reasons mentioned in this class description.\n     *\n     * @param {string} sourceName - The source for which sender constraints have changed.\n     * @returns {Promise<void[]>}\n     * @private\n     */\n    _propagateSendMaxFrameHeight(sourceName = null) {\n        if (FeatureFlags.isSourceNameSignalingEnabled() && !sourceName) {\n            throw new Error('sourceName missing for calculating the sendMaxHeight for video tracks');\n        }\n        const sendMaxFrameHeight = this._selectSendMaxFrameHeight(sourceName);\n        const promises = [];\n\n        if (sendMaxFrameHeight >= 0) {\n            for (const session of this._conference.getMediaSessions()) {\n                promises.push(session.setSenderVideoConstraint(sendMaxFrameHeight, sourceName));\n            }\n        }\n\n        return Promise.all(promises);\n    }\n\n    /**\n     * Selects the lowest common value for the local video send constraint by looking at local user's preference and\n     * the active media session's receive preference set by the remote party.\n     *\n     * @param {string} sourceName - The source for which sender constraints have changed.\n     * @returns {number|undefined}\n     * @private\n     */\n    _selectSendMaxFrameHeight(sourceName = null) {\n        if (FeatureFlags.isSourceNameSignalingEnabled() && !sourceName) {\n            throw new Error('sourceName missing for calculating the sendMaxHeight for video tracks');\n        }\n        const activeMediaSession = this._conference.getActiveMediaSession();\n        const remoteRecvMaxFrameHeight = activeMediaSession\n            ? activeMediaSession.isP2P\n                ? sourceName\n                    ? this._sourceSenderConstraints.get(sourceName)\n                    : activeMediaSession.getRemoteRecvMaxFrameHeight()\n                : sourceName ? this._sourceSenderConstraints.get(sourceName) : this._senderVideoConstraints?.idealHeight\n            : undefined;\n\n        if (this._preferredSendMaxFrameHeight >= 0 && remoteRecvMaxFrameHeight >= 0) {\n            return Math.min(this._preferredSendMaxFrameHeight, remoteRecvMaxFrameHeight);\n        } else if (remoteRecvMaxFrameHeight >= 0) {\n            return remoteRecvMaxFrameHeight;\n        }\n\n        return this._preferredSendMaxFrameHeight;\n    }\n\n    /**\n     * Sets local preference for max send video frame height.\n     *\n     * @param {number} maxFrameHeight - the new value to set.\n     * @returns {Promise<void[]>} - resolved when the operation is complete.\n     */\n    setPreferredSendMaxFrameHeight(maxFrameHeight) {\n        this._preferredSendMaxFrameHeight = maxFrameHeight;\n\n        if (FeatureFlags.isSourceNameSignalingEnabled()) {\n            const promises = [];\n\n            for (const sourceName of this._sourceSenderConstraints.keys()) {\n                promises.push(this._propagateSendMaxFrameHeight(sourceName));\n            }\n\n            return Promise.allSettled(promises);\n        }\n\n        return this._propagateSendMaxFrameHeight();\n    }\n}\n","/**\n * A collection of utility functions for taking in XML and parsing it to return\n * certain values.\n */\nexport default {\n    /**\n     * Parses the presence update of the focus and returns an object with the\n     * statuses related to recording.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {Object} The current presence values related to recording.\n     */\n    getFocusRecordingUpdate(presence) {\n        const jibriStatus = presence\n            && presence.getElementsByTagName('jibri-recording-status')[0];\n\n        if (!jibriStatus) {\n            return;\n        }\n\n        return {\n            error: jibriStatus.getAttribute('failure_reason'),\n            initiator: jibriStatus.getAttribute('initiator'),\n            recordingMode: jibriStatus.getAttribute('recording_mode'),\n            sessionID: jibriStatus.getAttribute('session_id'),\n            status: jibriStatus.getAttribute('status')\n        };\n    },\n\n    /**\n     * Parses the presence update from a hidden domain participant and returns\n     * an object with the statuses related to recording.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {Object} The current presence values related to recording.\n     */\n    getHiddenDomainUpdate(presence) {\n        const liveStreamViewURLContainer\n            = presence.getElementsByTagName('live-stream-view-url')[0];\n        const liveStreamViewURL = liveStreamViewURLContainer\n            && liveStreamViewURLContainer.textContent;\n        const modeContainer\n            = presence.getElementsByTagName('mode')[0];\n        const mode = modeContainer\n            && modeContainer.textContent\n            && modeContainer.textContent.toLowerCase();\n        const sessionIDContainer\n            = presence.getElementsByTagName('session_id')[0];\n        const sessionID\n            = sessionIDContainer && sessionIDContainer.textContent;\n\n        return {\n            liveStreamViewURL,\n            mode,\n            sessionID\n        };\n    },\n\n    /**\n     * Returns the recording session ID from a successful IQ.\n     *\n     * @param {Node} response - The response from the IQ.\n     * @returns {string} The session ID of the recording session.\n     */\n    getSessionIdFromIq(response) {\n        const jibri = response && response.getElementsByTagName('jibri')[0];\n\n        return jibri && jibri.getAttribute('session_id');\n    },\n\n    /**\n     * Returns the recording session ID from a presence, if it exists.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {string|undefined} The session ID of the recording session.\n     */\n    getSessionId(presence) {\n        const sessionIdContainer\n            = presence.getElementsByTagName('session_id')[0];\n        const sessionId = sessionIdContainer && sessionIdContainer.textContent;\n\n        return sessionId;\n    },\n\n    /**\n     * Returns whether or not a presence is from the focus.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {boolean} True if the presence is from the focus.\n     */\n    isFromFocus(presence) {\n        return presence.getAttribute('from').includes('focus');\n    }\n};\n","import { $iq } from 'strophe.js';\n\nimport recordingXMLUtils from './recordingXMLUtils';\n\n/**\n * Represents a recording session.\n */\nexport default class JibriSession {\n    /**\n     * Initializes a new JibriSession instance.\n     *\n     * @constructor\n     */\n    constructor(options = {}) {\n        this._connection = options.connection;\n        this._mode = options.mode;\n\n        this._setSessionID(options.sessionID);\n        this.setStatus(options.status);\n    }\n\n    /**\n     * Returns the error related to the session instance, if any.\n     *\n     * @returns {string|undefined}\n     */\n    getError() {\n        return this._error;\n    }\n\n    /**\n     * Returns the session ID of the session instance.\n     *\n     * @returns {string|undefined}\n     */\n    getID() {\n        return this._sessionID;\n    }\n\n    /**\n     * Returns the initiator of the session instance.\n     *\n     * @returns {JitsiParticipant|string} The participant that started the session.\n     */\n    getInitiator() {\n        return this._initiator;\n    }\n\n    /**\n     * Returns the streaming URL of the session.\n     *\n     * @returns {string|undefined}\n     */\n    getLiveStreamViewURL() {\n        return this._liveStreamViewURL;\n    }\n\n    /**\n     * Returns the current status of the session.\n     *\n     * @returns {string|undefined}\n     */\n    getStatus() {\n        return this._status;\n    }\n\n    /**\n     * Returns the jid of the participant that stopped the session.\n     *\n     * @returns {JitsiParticipant|string} The participant that stopped the session.\n     */\n    getTerminator() {\n        return this._terminator;\n    }\n\n    /**\n     * Returns the current recording mode of the session, such as \"file\".\n     *\n     * @returns {string}\n     */\n    getMode() {\n        return this._mode;\n    }\n\n    /**\n     * Sets the last known error message related to the session.\n     *\n     * @param {string} error - The error string explaining why the session\n     * entered an error state.\n     * @returns {void}\n     */\n    setError(error) {\n        this._error = error;\n    }\n\n    /**\n     * Sets the last live stream URL for the session instance. Usually this is\n     * a YouTube URL and usually this is only set for \"stream\" sessions.\n     *\n     * @param {string} url - The live stream URL associated with the session.\n     * @returns {void}\n     */\n    setLiveStreamViewURL(url) {\n        this._liveStreamViewURL = url;\n    }\n\n    /**\n     * Sets the last known status for this recording session.\n     *\n     * @param {string} status - The new status to set.\n     * @returns {void}\n     */\n    setStatus(status) {\n        this._status = status;\n    }\n\n    /**\n     * Sets the participant that started the session.\n     * @param {JitsiParticipant | string} participant - The participant or resource id\n     * if local participant.\n     */\n    setInitiator(participant) {\n        this._initiator = participant;\n    }\n\n    /**\n     * Sets the participant that stopped the session.\n     * @param {JitsiParticipant | string} participant - The participant or the resource id\n     * if local participant.\n     */\n    setTerminator(participant) {\n        this._terminator = participant;\n    }\n\n    /**\n     * Sends a message to start the actual recording.\n     *\n     * @param {Object} options - Additional arguments for starting the\n     * recording.\n     * @param {string} [options.appData] - Data specific to the app/service that\n     * the result file will be uploaded.\n     * @param {string} [options.broadcastId] - The broadcast ID of an\n     * associated YouTube stream, used for knowing the URL from which the stream\n     * can be viewed.\n     * @param {string} options.focusMucJid - The JID of the focus participant\n     * that controls recording.\n     * @param {streamId} options.streamId - Necessary for live streaming, this\n     * is the stream key needed to start a live streaming session with the\n     * streaming service provider.\n     * @returns Promise\n     */\n    start({ appData, broadcastId, focusMucJid, streamId }) {\n        return new Promise((resolve, reject) => {\n            this._connection.sendIQ(\n                this._createIQ({\n                    action: 'start',\n                    appData,\n                    focusMucJid,\n                    broadcastId,\n                    streamId\n                }),\n                result => {\n                    // All users will eventually receive the 'pending' status\n                    // from the backend, but for the user initiating the session\n                    // it's better to give some instant feedback that recording\n                    // is starting so fire 'pending' here manually.\n                    this.setStatus('pending');\n                    this._setSessionID(\n                        recordingXMLUtils.getSessionIdFromIq(result));\n\n                    resolve();\n                },\n                error => {\n                    this._setErrorFromIq(error);\n\n                    reject(error);\n                });\n        });\n    }\n\n    /**\n     * Sends a message to actually stop the recording session.\n     *\n     * @param {Object} options - Additional arguments for stopping the\n     * recording.\n     * @param {Object} options.focusMucJid - The JID of the focus participant\n     * that controls recording.\n     * @returns Promise\n     */\n    stop({ focusMucJid }) {\n        return new Promise((resolve, reject) => {\n            this._connection.sendIQ(\n                this._createIQ({\n                    action: 'stop',\n                    focusMucJid\n                }),\n                resolve,\n                reject);\n        });\n    }\n\n    /**\n     * Generates the message to change the status of the recording session.\n     *\n     * @param {string} status - The new status to which the recording session\n     * should transition.\n     * @param {string} [options.appData] - Data specific to the app/service that\n     * the result file will be uploaded.\n     * @param {string} [options.broadcastId] - The broadcast ID of an\n     * associated YouTube stream, used for knowing the URL from which the stream\n     * can be viewed.\n     * @param {string} options.focusMucJid - The JID of the focus participant\n     * that controls recording.\n     * @param {streamId} options.streamId - Necessary for live streaming, this\n     * is the stream key needed to start a live streaming session with the\n     * streaming service provider.\n     * @returns Object - The XMPP IQ message.\n     */\n    _createIQ({ action, appData, broadcastId, focusMucJid, streamId }) {\n        try {\n            appData = JSON.parse(appData)|| {};\n        } catch(e) {\n            appData = {};\n        }\n        \n        appData[\"base_url\"] = appData[\"base_url\"] ? appData[\"base_url\"] : `${window.location.origin}${window.location.pathname}`;\n        appData[\"token\"] =  this._connection.emuc.xmpp.token;\n        \n        return $iq({\n            to: focusMucJid,\n            type: 'set'\n        })\n        .c('jibri', {\n            'xmlns': 'http://jitsi.org/protocol/jibri',\n            'action': action,\n            'app_data': JSON.stringify(appData),\n            'recording_mode': this._mode,\n            'streamid': streamId,\n            'you_tube_broadcast_id': broadcastId\n        })\n        .up();\n    }\n\n    /**\n     * Handles the error from an iq and stores the error.\n     *\n     * @param {Node} errorIq - The error response from an Iq.\n     * @private\n     * @returns {void}\n     */\n    _setErrorFromIq(errorIq) {\n        const error = errorIq.getElementsByTagName('error')[0];\n\n        this.setError(error.children[0].tagName);\n    }\n\n    /**\n     * Sets the known session ID for this recording session.\n     *\n     * @param {string} sessionID\n     * @private\n     * @returns {void}\n     */\n    _setSessionID(sessionID) {\n        this._sessionID = sessionID;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\n\nimport JibriSession from './JibriSession';\nimport recordingXMLUtils from './recordingXMLUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * A class responsible for starting and stopping recording sessions and emitting\n * state updates for them.\n */\nclass RecordingManager {\n    /**\n     * Initialize {@code RecordingManager} with other objects that are necessary\n     * for starting a recording.\n     *\n     * @param {ChatRoom} chatRoom - The chat room to handle.\n     * @returns {void}\n     */\n    constructor(chatRoom) {\n        /**\n         * All known recording sessions from the current conference.\n         */\n        this._sessions = {};\n\n        this._chatRoom = chatRoom;\n\n        this.onPresence = this.onPresence.bind(this);\n\n        this._chatRoom.eventEmitter.addListener(\n            XMPPEvents.PRESENCE_RECEIVED, this.onPresence);\n    }\n\n    /**\n     * Finds an existing recording session by session ID.\n     *\n     * @param {string} sessionID - The session ID associated with the recording.\n     * @returns {JibriSession|undefined}\n     */\n    getSession(sessionID) {\n        return this._sessions[sessionID];\n    }\n\n    /**\n     * Callback to invoke to parse through a presence update to find recording\n     * related updates (from Jibri participant doing the recording and the\n     * focus which controls recording).\n     *\n     * @param {Object} event - The presence data from the pubsub event.\n     * @param {Node} event.presence - An XMPP presence update.\n     * @param {boolean} event.fromHiddenDomain - Whether or not the update comes\n     * from a participant that is trusted but not visible, as would be the case\n     * with the Jibri recorder participant.\n     * @returns {void}\n     */\n    onPresence({ fromHiddenDomain, presence }) {\n        if (recordingXMLUtils.isFromFocus(presence)) {\n            this._handleFocusPresence(presence);\n        } else if (fromHiddenDomain) {\n            this._handleJibriPresence(presence);\n        }\n    }\n\n    /**\n     * Start a recording session.\n     *\n     * @param {Object} options - Configuration for the recording.\n     * @param {string} [options.appData] - Data specific to the app/service that\n     * the result file will be uploaded.\n     * @param {string} [optional] options.broadcastId - The channel on which a\n     * live stream will occur.\n     * @param {string} options.mode - The mode in which recording should be\n     * started. Recognized values are \"file\" and \"stream\".\n     * @param {string} [optional] options.streamId - The stream key to be used\n     * for live stream broadcasting. Required for live streaming.\n     * @returns {Promise} A promise for starting a recording, which will pass\n     * back the session on success. The promise resolves after receiving an\n     * acknowledgment of the start request success or fail.\n     */\n    startRecording(options) {\n        const session = new JibriSession({\n            ...options,\n            connection: this._chatRoom.connection\n        });\n\n        return session.start({\n            appData: options.appData,\n            broadcastId: options.broadcastId,\n            focusMucJid: this._chatRoom.focusMucJid,\n            streamId: options.streamId\n        })\n            .then(() => {\n                // Only store the session and emit if the session has not been\n                // added already. This is a workaround for the session getting\n                // created due to a presence update to announce a \"pending\"\n                // recording being received before JibriSession#start finishes.\n                if (!this.getSession(session.getID())) {\n                    this._addSession(session);\n                    this._emitSessionUpdate(session);\n                }\n\n                return session;\n            })\n            .catch(error => {\n                this._emitSessionUpdate(session);\n\n                return Promise.reject(error);\n            });\n    }\n\n    /**\n     * Stop a recording session.\n     *\n     * @param {string} sessionID - The ID associated with the recording session\n     * to be stopped.\n     * @returns {Promise} The promise resolves after receiving an\n     * acknowledgment of the stop request success or fail.\n     */\n    stopRecording(sessionID) {\n        const session = this.getSession(sessionID);\n\n        if (session) {\n            return session.stop({ focusMucJid: this._chatRoom.focusMucJid });\n        }\n\n        return Promise.reject(new Error('Could not find session'));\n    }\n\n    /**\n     * Stores a reference to the passed in JibriSession.\n     *\n     * @param {string} session - The JibriSession instance to store.\n     * @returns {void}\n     */\n    _addSession(session) {\n        this._sessions[session.getID()] = session;\n    }\n\n    /**\n     * Create a new instance of a recording session and stores a reference to\n     * it.\n     *\n     * @param {string} sessionID - The session ID of the recording in progress.\n     * @param {string} status - The current status of the recording session.\n     * @param {string} mode - The recording mode of the session.\n     * @returns {JibriSession}\n     */\n    _createSession(sessionID, status, mode) {\n        const session = new JibriSession({\n            connection: this._chatRoom.connection,\n            focusMucJid: this._chatRoom.focusMucJid,\n            mode,\n            sessionID,\n            status\n        });\n\n        this._addSession(session);\n\n        return session;\n    }\n\n    /**\n     * Notifies listeners of an update to a recording session.\n     *\n     * @param {JibriSession} session - The session that has been updated.\n     * @param {string|undefined} initiator - The jid of the initiator of the update.\n     */\n    _emitSessionUpdate(session, initiator) {\n        this._chatRoom.eventEmitter.emit(\n            XMPPEvents.RECORDER_STATE_CHANGED, session, initiator);\n    }\n\n    /**\n     * Parses presence to update an existing JibriSession or to create a new\n     * JibriSession.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {void}\n     */\n    _handleFocusPresence(presence) {\n        const jibriStatus = recordingXMLUtils.getFocusRecordingUpdate(presence);\n\n        if (!jibriStatus) {\n            return;\n        }\n\n        const { error, initiator, recordingMode, sessionID, status } = jibriStatus;\n\n        // We'll look for an existing session or create one (in case we're a\n        // participant joining a call with an existing recording going on).\n        let session = this.getSession(sessionID);\n\n        // Handle the case where a status update is received in presence but\n        // the local participant has joined while the JibriSession has already\n        // ended.\n        if (!session && status === 'off') {\n            logger.warn(\n                'Ignoring recording presence update',\n                'Received a new session with status off.');\n\n            return;\n        }\n\n        // Jicofo sends updates via presence, and any extension in presence\n        // is sent until it is explicitly removed.  It's difficult for\n        // Jicofo to know when a presence has been sent once, so it won't\n        // remove jibri status extension.  This means we may receive the same\n        // status update more than once, so check for that here\n        if (session\n            && session.getStatus() === status\n            && session.getError() === error) {\n            logger.warn('Ignoring duplicate presence update: ',\n                JSON.stringify(jibriStatus));\n\n            return;\n        }\n\n        if (!session) {\n            session = this._createSession(sessionID, status, recordingMode);\n        }\n\n        session.setStatus(status);\n\n        if (error) {\n            session.setError(error);\n        }\n\n        this._emitSessionUpdate(session, initiator);\n    }\n\n    /**\n     * Handles updates from the Jibri which can broadcast a YouTube URL that\n     * needs to be updated in a JibriSession.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {void}\n     */\n    _handleJibriPresence(presence) {\n        const { liveStreamViewURL, mode, sessionID }\n            = recordingXMLUtils.getHiddenDomainUpdate(presence);\n\n        if (!sessionID) {\n            logger.warn(\n                'Ignoring potential jibri presence due to no session id.');\n\n            return;\n        }\n\n        let session = this.getSession(sessionID);\n\n        if (!session) {\n            session = this._createSession(sessionID, '', mode);\n        }\n\n        session.setLiveStreamViewURL(liveStreamViewURL);\n\n        this._emitSessionUpdate(session);\n    }\n}\n\nexport default RecordingManager;\n","import { getLogger } from '@jitsi/logger';\n\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport * as ConnectionQualityEvents from '../../service/connectivity/ConnectionQualityEvents';\nimport { createAudioOutputProblemEvent } from '../../service/statistics/AnalyticsEvents';\n\nimport Statistics from './statistics';\n\nconst logger = getLogger(__filename);\n\n/**\n * Number of local samples that will be used for comparison before and after the remote sample is received.\n */\nconst NUMBER_OF_LOCAL_SAMPLES = 2;\n\n/**\n * Collects the average audio levels per participant from the local stats and the stats received by every remote\n * participant and compares them to detect potential audio problem for a participant.\n */\nexport default class AudioOutputProblemDetector {\n\n    /**\n     * Creates new <tt>AudioOutputProblemDetector</tt> instance.\n     *\n     * @param {JitsiConference} conference - The conference instance to be monitored.\n     */\n    constructor(conference) {\n        this._conference = conference;\n        this._localAudioLevelCache = {};\n        this._reportedParticipants = [];\n        this._audioProblemCandidates = {};\n        this._numberOfRemoteAudioLevelsReceived = {};\n        this._onLocalAudioLevelsReport = this._onLocalAudioLevelsReport.bind(this);\n        this._onRemoteAudioLevelReceived = this._onRemoteAudioLevelReceived.bind(this);\n        this._clearUserData = this._clearUserData.bind(this);\n        this._conference.on(ConnectionQualityEvents.REMOTE_STATS_UPDATED, this._onRemoteAudioLevelReceived);\n        this._conference.statistics.addConnectionStatsListener(this._onLocalAudioLevelsReport);\n        this._conference.on(ConferenceEvents.USER_LEFT, this._clearUserData);\n    }\n\n    /**\n     * A listener for audio level data received by a remote participant.\n     *\n     * @param {string} userID - The user id of the participant that sent the data.\n     * @param {number} audioLevel - The average audio level value.\n     * @returns {void}\n     */\n    _onRemoteAudioLevelReceived(userID, { avgAudioLevels }) {\n        const numberOfReports = (this._numberOfRemoteAudioLevelsReceived[userID] + 1) || 0;\n\n        this._numberOfRemoteAudioLevelsReceived[userID] = numberOfReports;\n\n        if (this._reportedParticipants.indexOf(userID) !== -1 || (userID in this._audioProblemCandidates)\n                || avgAudioLevels <= 0 || numberOfReports < 3) {\n            return;\n        }\n\n        const participant = this._conference.getParticipantById(userID);\n\n        if (participant) {\n            const tracks = participant.getTracksByMediaType(MediaType.AUDIO);\n\n            if (tracks.length > 0 && participant.isAudioMuted()) {\n                // We don't need to report an error if everything seems fine with the participant and its tracks but\n                // the participant is audio muted. Since those are average audio levels we potentially can receive non\n                // zero values for muted track.\n                return;\n            }\n        }\n\n        const localAudioLevels = this._localAudioLevelCache[userID];\n\n        if (!Array.isArray(localAudioLevels) || localAudioLevels.every(audioLevel => audioLevel === 0)) {\n            this._audioProblemCandidates[userID] = {\n                remoteAudioLevels: avgAudioLevels,\n                localAudioLevels: []\n            };\n        }\n    }\n\n    /**\n     * A listener for audio level data retrieved by the local stats.\n     *\n     * @param {TraceablePeerConnection} tpc - The <tt>TraceablePeerConnection</tt> instance used to gather the data.\n     * @param {Object} avgAudioLevels - The average audio levels per participant.\n     * @returns {void}\n     */\n    _onLocalAudioLevelsReport(tpc, { avgAudioLevels }) {\n        if (tpc !== this._conference.getActivePeerConnection()) {\n            return;\n        }\n\n        Object.keys(avgAudioLevels).forEach(userID => {\n            if (this._reportedParticipants.indexOf(userID) !== -1) {\n                return;\n            }\n\n            const localAudioLevels = this._localAudioLevelCache[userID];\n\n            if (!Array.isArray(localAudioLevels)) {\n                this._localAudioLevelCache[userID] = [ ];\n            } else if (localAudioLevels.length >= NUMBER_OF_LOCAL_SAMPLES) {\n                localAudioLevels.shift();\n            }\n\n            this._localAudioLevelCache[userID].push(avgAudioLevels[userID]);\n        });\n\n\n        Object.keys(this._audioProblemCandidates).forEach(userID => {\n            const { localAudioLevels, remoteAudioLevels } = this._audioProblemCandidates[userID];\n\n            localAudioLevels.push(avgAudioLevels[userID]);\n\n            if (localAudioLevels.length === NUMBER_OF_LOCAL_SAMPLES) {\n                if (localAudioLevels.every(audioLevel => typeof audioLevel === 'undefined' || audioLevel === 0)) {\n                    const localAudioLevelsString = JSON.stringify(localAudioLevels);\n\n                    Statistics.sendAnalytics(\n                        createAudioOutputProblemEvent(userID, localAudioLevelsString, remoteAudioLevels));\n                    logger.warn(`A potential problem is detected with the audio output for participant ${\n                        userID}, local audio levels: ${localAudioLevelsString}, remote audio levels: ${\n                        remoteAudioLevels}`);\n                    this._reportedParticipants.push(userID);\n                    this._clearUserData(userID);\n                }\n\n                delete this._audioProblemCandidates[userID];\n            }\n        });\n    }\n\n    /**\n     * Clears the data stored for a participant.\n     *\n     * @param {string} userID - The id of the participant.\n     * @returns {void}\n     */\n    _clearUserData(userID) {\n        delete this._localAudioLevelCache[userID];\n    }\n\n    /**\n     * Disposes the allocated resources.\n     *\n     * @returns {void}\n     */\n    dispose() {\n        this._conference.off(ConnectionQualityEvents.REMOTE_STATS_UPDATED, this._onRemoteAudioLevelReceived);\n        this._conference.off(ConferenceEvents.USER_LEFT, this._clearUserData);\n        this._conference.statistics.removeConnectionStatsListener(this._onLocalAudioLevelsReport);\n        this._localAudioLevelCache = undefined;\n        this._audioProblemCandidates = undefined;\n        this._reportedParticipants = undefined;\n        this._numberOfRemoteAudioLevelsReceived = undefined;\n        this._conference = undefined;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport isEqual from 'lodash.isequal';\n\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport * as ConnectionQualityEvents\n    from '../../service/connectivity/ConnectionQualityEvents';\nimport {\n    createRtpStatsEvent,\n    createTransportStatsEvent\n} from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\n\nimport Statistics from './statistics';\n\n\nconst logger = getLogger(__filename);\n\n/**\n * This will calculate an average for one, named stat and submit it to\n * the analytics module when requested. It automatically counts the samples.\n */\nclass AverageStatReport {\n    /**\n     * Creates new <tt>AverageStatReport</tt> for given name.\n     * @param {string} name that's the name of the event that will be reported\n     * to the analytics module.\n     */\n    constructor(name) {\n        this.name = name;\n        this.count = 0;\n        this.sum = 0;\n        this.samples = [];\n    }\n\n    /**\n     * Adds the next value that will be included in the average when\n     * {@link calculate} is called.\n     * @param {number} nextValue\n     */\n    addNext(nextValue) {\n        if (typeof nextValue !== 'number') {\n            logger.error(\n                `${this.name} - invalid value for idx: ${this.count}`,\n                nextValue);\n        } else if (!isNaN(nextValue)) {\n            this.sum += nextValue;\n            this.samples.push(nextValue);\n            this.count += 1;\n        }\n    }\n\n    /**\n     * Calculates an average for the samples collected using {@link addNext}.\n     * @return {number|NaN} an average of all collected samples or <tt>NaN</tt>\n     * if no samples were collected.\n     */\n    calculate() {\n        return this.sum / this.count;\n    }\n\n    /**\n     * Appends the report to the analytics \"data\" object. The object will be\n     * set under <tt>prefix</tt> + {@link this.name} key.\n     * @param {Object} report the analytics \"data\" object\n     */\n    appendReport(report) {\n        report[`${this.name}_avg`] = this.calculate();\n        report[`${this.name}_samples`] = JSON.stringify(this.samples);\n    }\n\n    /**\n     * Clears all memory of any samples collected, so that new average can be\n     * calculated using this instance.\n     */\n    reset() {\n        this.samples = [];\n        this.sum = 0;\n        this.count = 0;\n    }\n}\n\n/**\n * Class gathers the stats that are calculated and reported for a\n * {@link TraceablePeerConnection} even if it's not currently active. For\n * example we want to monitor RTT for the JVB connection while in P2P mode.\n */\nclass ConnectionAvgStats {\n    /**\n     * Creates new <tt>ConnectionAvgStats</tt>\n     * @param {AvgRTPStatsReporter} avgRtpStatsReporter\n     * @param {boolean} isP2P\n     * @param {number} n the number of samples, before arithmetic mean is to be\n     * calculated and values submitted to the analytics module.\n     */\n    constructor(avgRtpStatsReporter, isP2P, n) {\n        /**\n         * Is this instance for JVB or P2P connection ?\n         * @type {boolean}\n         */\n        this.isP2P = isP2P;\n\n        /**\n         * How many samples are to be included in arithmetic mean calculation.\n         * @type {number}\n         * @private\n         */\n        this._n = n;\n\n        /**\n         * The current sample index. Starts from 0 and goes up to {@link _n})\n         * when analytics report will be submitted.\n         * @type {number}\n         * @private\n         */\n        this._sampleIdx = 0;\n\n        /**\n         * Average round trip time reported by the ICE candidate pair.\n         * @type {AverageStatReport}\n         */\n        this._avgRTT = new AverageStatReport('rtt');\n\n        /**\n         * Map stores average RTT to the JVB reported by remote participants.\n         * Mapped per participant id {@link JitsiParticipant.getId}.\n         *\n         * This is used only when {@link ConnectionAvgStats.isP2P} equals to\n         * <tt>false</tt>.\n         *\n         * @type {Map<string,AverageStatReport>}\n         * @private\n         */\n        this._avgRemoteRTTMap = new Map();\n\n        /**\n         * The conference for which stats will be collected and reported.\n         * @type {JitsiConference}\n         * @private\n         */\n        this._avgRtpStatsReporter = avgRtpStatsReporter;\n\n        /**\n         * The latest average E2E RTT for the JVB connection only.\n         *\n         * This is used only when {@link ConnectionAvgStats.isP2P} equals to\n         * <tt>false</tt>.\n         *\n         * @type {number}\n         */\n        this._avgEnd2EndRTT = undefined;\n\n        this._onConnectionStats = (tpc, stats) => {\n            if (this.isP2P === tpc.isP2P) {\n                this._calculateAvgStats(stats);\n            }\n        };\n\n        const conference = avgRtpStatsReporter._conference;\n\n        conference.statistics.addConnectionStatsListener(\n            this._onConnectionStats);\n\n        if (!this.isP2P) {\n            this._onUserLeft = id => this._avgRemoteRTTMap.delete(id);\n            conference.on(ConferenceEvents.USER_LEFT, this._onUserLeft);\n\n            this._onRemoteStatsUpdated\n                = (id, data) => this._processRemoteStats(id, data);\n            conference.on(\n                ConnectionQualityEvents.REMOTE_STATS_UPDATED,\n                this._onRemoteStatsUpdated);\n        }\n    }\n\n    /**\n     * Processes next batch of stats.\n     * @param {go figure} data\n     * @private\n     */\n    _calculateAvgStats(data) {\n        if (!data) {\n            logger.error('No stats');\n\n            return;\n        }\n\n        if (browser.supportsRTTStatistics()) {\n            if (data.transport && data.transport.length) {\n                this._avgRTT.addNext(data.transport[0].rtt);\n            }\n        }\n\n        this._sampleIdx += 1;\n\n        if (this._sampleIdx >= this._n) {\n            if (browser.supportsRTTStatistics()) {\n                const conference = this._avgRtpStatsReporter._conference;\n\n                const batchReport = {\n                    p2p: this.isP2P,\n                    'conference_size': conference.getParticipantCount()\n                };\n\n                if (data.transport && data.transport.length) {\n                    Object.assign(batchReport, {\n                        'local_candidate_type':\n                            data.transport[0].localCandidateType,\n                        'remote_candidate_type':\n                            data.transport[0].remoteCandidateType,\n                        'transport_type': data.transport[0].type\n                    });\n                }\n\n                this._avgRTT.appendReport(batchReport);\n\n                if (this.isP2P) {\n                    // Report RTT diff only for P2P.\n                    const jvbEnd2EndRTT = this\n                        ._avgRtpStatsReporter.jvbStatsMonitor._avgEnd2EndRTT;\n\n                    if (!isNaN(jvbEnd2EndRTT)) {\n                        // eslint-disable-next-line dot-notation\n                        batchReport['rtt_diff']\n                            = this._avgRTT.calculate() - jvbEnd2EndRTT;\n                    }\n                } else {\n                    // Report end to end RTT only for JVB.\n                    const avgRemoteRTT = this._calculateAvgRemoteRTT();\n                    const avgLocalRTT = this._avgRTT.calculate();\n\n                    this._avgEnd2EndRTT = avgLocalRTT + avgRemoteRTT;\n\n                    if (!isNaN(avgLocalRTT) && !isNaN(avgRemoteRTT)) {\n                        // eslint-disable-next-line dot-notation\n                        batchReport['end2end_rtt_avg'] = this._avgEnd2EndRTT;\n                    }\n                }\n\n                Statistics.sendAnalytics(createRtpStatsEvent(batchReport));\n            }\n\n            this._resetAvgStats();\n        }\n    }\n\n    /**\n     * Calculates arithmetic mean of all RTTs towards the JVB reported by\n     * participants.\n     * @return {number|NaN} NaN if not available (not enough data)\n     * @private\n     */\n    _calculateAvgRemoteRTT() {\n        let count = 0, sum = 0;\n\n        // FIXME should we ignore RTT for participant\n        // who \"is having connectivity issues\" ?\n        for (const remoteAvg of this._avgRemoteRTTMap.values()) {\n            const avg = remoteAvg.calculate();\n\n            if (!isNaN(avg)) {\n                sum += avg;\n                count += 1;\n                remoteAvg.reset();\n            }\n        }\n\n        return sum / count;\n    }\n\n    /**\n     * Processes {@link ConnectionQualityEvents.REMOTE_STATS_UPDATED} to analyse\n     * RTT towards the JVB reported by each participant.\n     * @param {string} id {@link JitsiParticipant.getId}\n     * @param {go figure in ConnectionQuality.js} data\n     * @private\n     */\n    _processRemoteStats(id, data) {\n        const validData = typeof data.jvbRTT === 'number';\n        let rttAvg = this._avgRemoteRTTMap.get(id);\n\n        if (!rttAvg && validData) {\n            rttAvg = new AverageStatReport(`${id}_stat_rtt`);\n            this._avgRemoteRTTMap.set(id, rttAvg);\n        }\n\n        if (validData) {\n            rttAvg.addNext(data.jvbRTT);\n        } else if (rttAvg) {\n            this._avgRemoteRTTMap.delete(id);\n        }\n    }\n\n    /**\n     * Reset cache of all averages and {@link _sampleIdx}.\n     * @private\n     */\n    _resetAvgStats() {\n        this._avgRTT.reset();\n        if (this._avgRemoteRTTMap) {\n            this._avgRemoteRTTMap.clear();\n        }\n        this._sampleIdx = 0;\n    }\n\n    /**\n     *\n     */\n    dispose() {\n\n        const conference = this._avgRtpStatsReporter._conference;\n\n        conference.statistics.removeConnectionStatsListener(\n            this._onConnectionStats);\n        if (!this.isP2P) {\n            conference.off(\n                ConnectionQualityEvents.REMOTE_STATS_UPDATED,\n                this._onRemoteStatsUpdated);\n            conference.off(\n                ConferenceEvents.USER_LEFT,\n                this._onUserLeft);\n        }\n    }\n}\n\n/**\n * Reports average RTP statistics values (arithmetic mean) to the analytics\n * module for things like bit rate, bandwidth, packet loss etc. It keeps track\n * of the P2P vs JVB conference modes and submits the values under different\n * namespaces (the events for P2P mode have 'p2p.' prefix). Every switch between\n * P2P mode resets the data collected so far and averages are calculated from\n * scratch.\n */\nexport default class AvgRTPStatsReporter {\n    /**\n     * Creates new instance of <tt>AvgRTPStatsReporter</tt>\n     * @param {JitsiConference} conference\n     * @param {number} n the number of samples, before arithmetic mean is to be\n     * calculated and values submitted to the analytics module.\n     */\n    constructor(conference, n) {\n        /**\n         * How many {@link ConnectionQualityEvents.LOCAL_STATS_UPDATED} samples\n         * are to be included in arithmetic mean calculation.\n         * @type {number}\n         * @private\n         */\n        this._n = n;\n\n        if (n > 0) {\n            logger.info(`Avg RTP stats will be calculated every ${n} samples`);\n        } else {\n            logger.info('Avg RTP stats reports are disabled.');\n\n            // Do not initialize\n            return;\n        }\n\n        /**\n         * The current sample index. Starts from 0 and goes up to {@link _n})\n         * when analytics report will be submitted.\n         * @type {number}\n         * @private\n         */\n        this._sampleIdx = 0;\n\n        /**\n         * The conference for which stats will be collected and reported.\n         * @type {JitsiConference}\n         * @private\n         */\n        this._conference = conference;\n\n        /**\n         * Average audio upload bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgAudioBitrateUp\n            = new AverageStatReport('bitrate_audio_upload');\n\n        /**\n         * Average audio download bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgAudioBitrateDown\n            = new AverageStatReport('bitrate_audio_download');\n\n        /**\n         * Average video upload bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgVideoBitrateUp\n            = new AverageStatReport('bitrate_video_upload');\n\n        /**\n         * Average video download bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgVideoBitrateDown\n            = new AverageStatReport('bitrate_video_download');\n\n        /**\n         * Average upload bandwidth\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgBandwidthUp\n            = new AverageStatReport('bandwidth_upload');\n\n        /**\n         * Average download bandwidth\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgBandwidthDown\n            = new AverageStatReport('bandwidth_download');\n\n        /**\n         * Average total packet loss\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgPacketLossTotal\n            = new AverageStatReport('packet_loss_total');\n\n        /**\n         * Average upload packet loss\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgPacketLossUp\n            = new AverageStatReport('packet_loss_upload');\n\n        /**\n         * Average download packet loss\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgPacketLossDown\n            = new AverageStatReport('packet_loss_download');\n\n        /**\n         * Average FPS for remote videos\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteFPS = new AverageStatReport('framerate_remote');\n\n        /**\n         * Average FPS for remote screen streaming videos (reported only if not\n         * a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteScreenFPS\n            = new AverageStatReport('framerate_screen_remote');\n\n        /**\n         * Average FPS for local video (camera)\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalFPS = new AverageStatReport('framerate_local');\n\n        /**\n         * Average FPS for local screen streaming video (reported only if not\n         * a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalScreenFPS\n            = new AverageStatReport('framerate_screen_local');\n\n        /**\n         * Average pixels for remote screen streaming videos (reported only if\n         * not a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteCameraPixels\n            = new AverageStatReport('pixels_remote');\n\n        /**\n         * Average pixels for remote screen streaming videos (reported only if\n         * not a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteScreenPixels\n            = new AverageStatReport('pixels_screen_remote');\n\n        /**\n         * Average pixels for local video (camera)\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalCameraPixels\n            = new AverageStatReport('pixels_local');\n\n        /**\n         * Average pixels for local screen streaming video (reported only if not\n         * a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalScreenPixels\n            = new AverageStatReport('pixels_screen_local');\n\n        /**\n         * Average connection quality as defined by\n         * the {@link ConnectionQuality} module.\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgCQ = new AverageStatReport('connection_quality');\n\n        this._cachedTransportStats = undefined;\n\n        this._onLocalStatsUpdated = data => {\n            this._calculateAvgStats(data);\n            this._maybeSendTransportAnalyticsEvent(data);\n        };\n        conference.on(\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n            this._onLocalStatsUpdated);\n\n        this._onP2PStatusChanged = () => {\n            logger.debug('Resetting average stats calculation');\n            this._resetAvgStats();\n            this.jvbStatsMonitor._resetAvgStats();\n            this.p2pStatsMonitor._resetAvgStats();\n        };\n        conference.on(\n            ConferenceEvents.P2P_STATUS,\n            this._onP2PStatusChanged);\n\n        this._onJvb121StatusChanged = (oldStatus, newStatus) => {\n            // We want to reset only on the transition from false => true,\n            // because otherwise those stats are resetted on JVB <=> P2P\n            // transition.\n            if (newStatus === true) {\n                logger.info('Resetting JVB avg RTP stats');\n                this._resetAvgJvbStats();\n            }\n        };\n        conference.on(\n            ConferenceEvents.JVB121_STATUS,\n            this._onJvb121StatusChanged);\n\n        this.jvbStatsMonitor\n            = new ConnectionAvgStats(this, false /* JVB */, n);\n\n        this.p2pStatsMonitor\n            = new ConnectionAvgStats(this, true /* P2P */, n);\n    }\n\n    /**\n     * Processes next batch of stats reported on\n     * {@link ConnectionQualityEvents.LOCAL_STATS_UPDATED}.\n     * @param {go figure} data\n     * @private\n     */\n    _calculateAvgStats(data) {\n\n        if (!data) {\n            logger.error('No stats');\n\n            return;\n        }\n\n        const isP2P = this._conference.isP2PActive();\n        const confSize = this._conference.getParticipantCount();\n\n        if (!isP2P && confSize < 2) {\n\n            // There's no point in collecting stats for a JVB conference of 1.\n            // That happens for short period of time after everyone leaves\n            // the room, until Jicofo terminates the session.\n            return;\n        }\n\n        /* Uncomment to figure out stats structure\n        for (const key in data) {\n            if (data.hasOwnProperty(key)) {\n                logger.info(`local stat ${key}: `, data[key]);\n            }\n        } */\n\n        const bitrate = data.bitrate;\n        const bandwidth = data.bandwidth;\n        const packetLoss = data.packetLoss;\n        const frameRate = data.framerate;\n        const resolution = data.resolution;\n\n        if (!bitrate) {\n            logger.error('No \"bitrate\"');\n\n            return;\n        } else if (!bandwidth) {\n            logger.error('No \"bandwidth\"');\n\n            return;\n        } else if (!packetLoss) {\n            logger.error('No \"packetloss\"');\n\n            return;\n        } else if (!frameRate) {\n            logger.error('No \"framerate\"');\n\n            return;\n        } else if (!resolution) {\n            logger.error('No resolution');\n\n            return;\n        }\n\n        this._avgAudioBitrateUp.addNext(bitrate.audio.upload);\n        this._avgAudioBitrateDown.addNext(bitrate.audio.download);\n\n        this._avgVideoBitrateUp.addNext(bitrate.video.upload);\n        this._avgVideoBitrateDown.addNext(bitrate.video.download);\n\n        if (browser.supportsBandwidthStatistics()) {\n            this._avgBandwidthUp.addNext(bandwidth.upload);\n            this._avgBandwidthDown.addNext(bandwidth.download);\n        }\n\n        this._avgPacketLossUp.addNext(packetLoss.upload);\n        this._avgPacketLossDown.addNext(packetLoss.download);\n        this._avgPacketLossTotal.addNext(packetLoss.total);\n\n        this._avgCQ.addNext(data.connectionQuality);\n\n        if (frameRate) {\n            this._avgRemoteFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, false /* remote */, VideoType.CAMERA));\n            this._avgRemoteScreenFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, false /* remote */, VideoType.DESKTOP));\n\n            this._avgLocalFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, true /* local */, VideoType.CAMERA));\n            this._avgLocalScreenFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, true /* local */, VideoType.DESKTOP));\n        }\n\n        if (resolution) {\n            this._avgRemoteCameraPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, false /* remote */, VideoType.CAMERA));\n\n            this._avgRemoteScreenPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, false /* remote */, VideoType.DESKTOP));\n\n            this._avgLocalCameraPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, true /* local */, VideoType.CAMERA));\n\n            this._avgLocalScreenPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, true /* local */, VideoType.DESKTOP));\n        }\n\n        this._sampleIdx += 1;\n\n        if (this._sampleIdx >= this._n) {\n\n            const batchReport = {\n                p2p: isP2P,\n                'conference_size': confSize\n            };\n\n            if (data.transport && data.transport.length) {\n                Object.assign(batchReport, {\n                    'local_candidate_type':\n                        data.transport[0].localCandidateType,\n                    'remote_candidate_type':\n                        data.transport[0].remoteCandidateType,\n                    'transport_type': data.transport[0].type\n                });\n            }\n\n            this._avgAudioBitrateUp.appendReport(batchReport);\n            this._avgAudioBitrateDown.appendReport(batchReport);\n\n            this._avgVideoBitrateUp.appendReport(batchReport);\n            this._avgVideoBitrateDown.appendReport(batchReport);\n\n            if (browser.supportsBandwidthStatistics()) {\n                this._avgBandwidthUp.appendReport(batchReport);\n                this._avgBandwidthDown.appendReport(batchReport);\n            }\n            this._avgPacketLossUp.appendReport(batchReport);\n            this._avgPacketLossDown.appendReport(batchReport);\n            this._avgPacketLossTotal.appendReport(batchReport);\n\n            this._avgRemoteFPS.appendReport(batchReport);\n            if (!isNaN(this._avgRemoteScreenFPS.calculate())) {\n                this._avgRemoteScreenFPS.appendReport(batchReport);\n            }\n            this._avgLocalFPS.appendReport(batchReport);\n            if (!isNaN(this._avgLocalScreenFPS.calculate())) {\n                this._avgLocalScreenFPS.appendReport(batchReport);\n            }\n\n            this._avgRemoteCameraPixels.appendReport(batchReport);\n            if (!isNaN(this._avgRemoteScreenPixels.calculate())) {\n                this._avgRemoteScreenPixels.appendReport(batchReport);\n            }\n            this._avgLocalCameraPixels.appendReport(batchReport);\n            if (!isNaN(this._avgLocalScreenPixels.calculate())) {\n                this._avgLocalScreenPixels.appendReport(batchReport);\n            }\n\n            this._avgCQ.appendReport(batchReport);\n\n            Statistics.sendAnalytics(createRtpStatsEvent(batchReport));\n\n            this._resetAvgStats();\n        }\n    }\n\n    /**\n     * Calculates average number of pixels for the report\n     *\n     * @param {map} peerResolutions a map of peer resolutions\n     * @param {boolean} isLocal if the average is to be calculated for the local\n     * video or <tt>false</tt> if for remote videos.\n     * @param {VideoType} videoType\n     * @return {number|NaN} average number of pixels or <tt>NaN</tt> if there\n     * are no samples.\n     * @private\n     */\n    _calculateAvgVideoPixels(peerResolutions, isLocal, videoType) {\n        let peerPixelsSum = 0;\n        let peerCount = 0;\n        const myID = this._conference.myUserId();\n\n        for (const peerID of Object.keys(peerResolutions)) {\n            if (isLocal ? peerID === myID : peerID !== myID) {\n                const participant\n                    = isLocal\n                        ? null\n                        : this._conference.getParticipantById(peerID);\n                const videosResolution = peerResolutions[peerID];\n\n                // Do not continue without participant for non local peerID\n                if ((isLocal || participant) && videosResolution) {\n                    const peerAvgPixels = this._calculatePeerAvgVideoPixels(\n                        videosResolution, participant, videoType);\n\n                    if (!isNaN(peerAvgPixels)) {\n                        peerPixelsSum += peerAvgPixels;\n                        peerCount += 1;\n                    }\n                }\n            }\n        }\n\n        return peerPixelsSum / peerCount;\n    }\n\n    /**\n     * Calculate average pixels for either remote or local participant\n     * @param {object} videos maps resolution per video SSRC\n     * @param {JitsiParticipant|null} participant remote participant or\n     * <tt>null</tt> for local video pixels calculation.\n     * @param {VideoType} videoType the type of the video for which an average\n     * will be calculated.\n     * @return {number|NaN} average video pixels of all participant's videos or\n     * <tt>NaN</tt> if currently not available\n     * @private\n     */\n    _calculatePeerAvgVideoPixels(videos, participant, videoType) {\n        let ssrcs = Object.keys(videos).map(ssrc => Number(ssrc));\n        let videoTracks = null;\n\n        // NOTE that this method is supposed to be called for the stats\n        // received from the current peerconnection.\n        const tpc = this._conference.getActivePeerConnection();\n\n        if (participant) {\n            videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\n            if (videoTracks) {\n                ssrcs\n                    = ssrcs.filter(\n                        ssrc => videoTracks.find(\n                            track =>\n                                !track.isMuted()\n                                    && track.getSSRC() === ssrc\n                                    && track.videoType === videoType));\n            }\n        } else {\n            videoTracks = this._conference.getLocalTracks(MediaType.VIDEO);\n            ssrcs\n                = ssrcs.filter(\n                    ssrc => videoTracks.find(\n                        track =>\n                            !track.isMuted()\n                                && tpc.getLocalSSRC(track) === ssrc\n                                && track.videoType === videoType));\n        }\n\n        let peerPixelsSum = 0;\n        let peerSsrcCount = 0;\n\n        for (const ssrc of ssrcs) {\n            const peerSsrcPixels\n                = Number(videos[ssrc].height) * Number(videos[ssrc].width);\n\n            // FPS is reported as 0 for users with no video\n            if (!isNaN(peerSsrcPixels) && peerSsrcPixels > 0) {\n                peerPixelsSum += peerSsrcPixels;\n                peerSsrcCount += 1;\n            }\n        }\n\n        return peerPixelsSum / peerSsrcCount;\n    }\n\n\n    /**\n     * Calculates average FPS for the report\n     * @param {go figure} frameRate\n     * @param {boolean} isLocal if the average is to be calculated for the local\n     * video or <tt>false</tt> if for remote videos.\n     * @param {VideoType} videoType\n     * @return {number|NaN} average FPS or <tt>NaN</tt> if there are no samples.\n     * @private\n     */\n    _calculateAvgVideoFps(frameRate, isLocal, videoType) {\n        let peerFpsSum = 0;\n        let peerCount = 0;\n        const myID = this._conference.myUserId();\n\n        for (const peerID of Object.keys(frameRate)) {\n            if (isLocal ? peerID === myID : peerID !== myID) {\n                const participant\n                    = isLocal\n                        ? null : this._conference.getParticipantById(peerID);\n                const videosFps = frameRate[peerID];\n\n                // Do not continue without participant for non local peerID\n                if ((isLocal || participant) && videosFps) {\n                    const peerAvgFPS\n                        = this._calculatePeerAvgVideoFps(\n                            videosFps, participant, videoType);\n\n                    if (!isNaN(peerAvgFPS)) {\n                        peerFpsSum += peerAvgFPS;\n                        peerCount += 1;\n                    }\n                }\n            }\n        }\n\n        return peerFpsSum / peerCount;\n    }\n\n    /**\n     * Calculate average FPS for either remote or local participant\n     * @param {object} videos maps FPS per video SSRC\n     * @param {JitsiParticipant|null} participant remote participant or\n     * <tt>null</tt> for local FPS calculation.\n     * @param {VideoType} videoType the type of the video for which an average\n     * will be calculated.\n     * @return {number|NaN} average FPS of all participant's videos or\n     * <tt>NaN</tt> if currently not available\n     * @private\n     */\n    _calculatePeerAvgVideoFps(videos, participant, videoType) {\n        let ssrcs = Object.keys(videos).map(ssrc => Number(ssrc));\n        let videoTracks = null;\n\n        // NOTE that this method is supposed to be called for the stats\n        // received from the current peerconnection.\n        const tpc = this._conference.getActivePeerConnection();\n\n        if (participant) {\n            videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\n            if (videoTracks) {\n                ssrcs\n                    = ssrcs.filter(\n                        ssrc => videoTracks.find(\n                            track => !track.isMuted()\n                                && track.getSSRC() === ssrc\n                                && track.videoType === videoType));\n            }\n        } else {\n            videoTracks = this._conference.getLocalTracks(MediaType.VIDEO);\n            ssrcs\n                = ssrcs.filter(\n                    ssrc => videoTracks.find(\n                        track => !track.isMuted()\n                            && tpc.getLocalSSRC(track) === ssrc\n                            && track.videoType === videoType));\n        }\n\n        let peerFpsSum = 0;\n        let peerSsrcCount = 0;\n\n        for (const ssrc of ssrcs) {\n            const peerSsrcFps = Number(videos[ssrc]);\n\n            // FPS is reported as 0 for users with no video\n            if (!isNaN(peerSsrcFps) && peerSsrcFps > 0) {\n                peerFpsSum += peerSsrcFps;\n                peerSsrcCount += 1;\n            }\n        }\n\n        return peerFpsSum / peerSsrcCount;\n    }\n\n    /**\n     * Sends the 'transport.stats' analytics event whenever we detect that\n     * there is a change in the local or remote candidate type on the transport\n     * that is currently selected.\n     * @param {*} data\n     * @private\n     */\n    _maybeSendTransportAnalyticsEvent(data) {\n        if (!data || !data.transport || !data.transport.length) {\n            return;\n        }\n        const transportStats = {\n            p2p: data.transport[0].p2p,\n            'local_candidate_type': data.transport[0].localCandidateType,\n            'remote_candidate_type': data.transport[0].remoteCandidateType,\n            'transport_type': data.transport[0].type\n        };\n\n        if (!this._cachedTransportStats || !isEqual(transportStats, this._cachedTransportStats)) {\n            this._cachedTransportStats = transportStats;\n            Statistics.sendAnalytics(createTransportStatsEvent(transportStats));\n        }\n    }\n\n    /**\n     * Resets the stats related to JVB connection. Must not be called when in\n     * P2P mode, because then the {@link AverageStatReport} instances are\n     * tracking P2P stats. Note that this should never happen unless something\n     * is wrong with the P2P and JVB121 events.\n     * @private\n     */\n    _resetAvgJvbStats() {\n        this._resetAvgStats();\n        this.jvbStatsMonitor._resetAvgStats();\n    }\n\n    /**\n     * Reset cache of all averages and {@link _sampleIdx}.\n     * @private\n     */\n    _resetAvgStats() {\n        this._avgAudioBitrateUp.reset();\n        this._avgAudioBitrateDown.reset();\n\n        this._avgVideoBitrateUp.reset();\n        this._avgVideoBitrateDown.reset();\n\n        this._avgBandwidthUp.reset();\n        this._avgBandwidthDown.reset();\n\n        this._avgPacketLossUp.reset();\n        this._avgPacketLossDown.reset();\n        this._avgPacketLossTotal.reset();\n\n        this._avgRemoteFPS.reset();\n        this._avgRemoteScreenFPS.reset();\n        this._avgLocalFPS.reset();\n        this._avgLocalScreenFPS.reset();\n\n        this._avgRemoteCameraPixels.reset();\n        this._avgRemoteScreenPixels.reset();\n        this._avgLocalCameraPixels.reset();\n        this._avgLocalScreenPixels.reset();\n\n        this._avgCQ.reset();\n\n        this._sampleIdx = 0;\n    }\n\n    /**\n     * Unregisters all event listeners and stops working.\n     */\n    dispose() {\n        this._conference.off(\n            ConferenceEvents.P2P_STATUS,\n            this._onP2PStatusChanged);\n        this._conference.off(\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n            this._onLocalStatsUpdated);\n        this._conference.off(\n            ConferenceEvents.JVB121_STATUS,\n            this._onJvb121StatusChanged);\n        this.jvbStatsMonitor.dispose();\n        this.p2pStatsMonitor.dispose();\n    }\n}\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\n\nimport SpeakerStats from './SpeakerStats';\n\n/**\n * A collection for tracking speaker stats. Attaches listeners\n * to the conference to automatically update on tracked events.\n */\nexport default class SpeakerStatsCollector {\n    /**\n     * Initializes a new SpeakerStatsCollector instance.\n     *\n     * @constructor\n     * @param {JitsiConference} conference - The conference to track.\n     * @returns {void}\n     */\n    constructor(conference) {\n        this.stats = {\n            users: {\n\n                // userId: SpeakerStats\n            },\n            dominantSpeakerId: null\n        };\n\n        const userId = conference.myUserId();\n\n        this.stats.users[userId] = new SpeakerStats(userId, null, true);\n        this.conference = conference;\n\n        conference.addEventListener(\n            JitsiConferenceEvents.DOMINANT_SPEAKER_CHANGED,\n            this._onDominantSpeaker.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.USER_JOINED,\n            this._onUserJoin.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.USER_LEFT,\n            this._onUserLeave.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.DISPLAY_NAME_CHANGED,\n            this._onDisplayNameChange.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.FACE_LANDMARK_ADDED,\n            this._onFaceLandmarkAdd.bind(this));\n        if (conference.xmpp) {\n            conference.xmpp.addListener(\n                XMPPEvents.SPEAKER_STATS_RECEIVED,\n                this._updateStats.bind(this));\n        }\n    }\n\n    /**\n     * Reacts to dominant speaker change events by changing its speaker stats\n     * models to reflect the current dominant speaker.\n     *\n     * @param {string} dominantSpeakerId - The user id of the new\n     * dominant speaker.\n     * @returns {void}\n     * @private\n     */\n    _onDominantSpeaker(dominantSpeakerId) {\n        const oldDominantSpeaker\n            = this.stats.users[this.stats.dominantSpeakerId];\n        const newDominantSpeaker = this.stats.users[dominantSpeakerId];\n\n        oldDominantSpeaker && oldDominantSpeaker.setDominantSpeaker(false);\n        newDominantSpeaker && newDominantSpeaker.setDominantSpeaker(true);\n        this.stats.dominantSpeakerId = dominantSpeakerId;\n    }\n\n    /**\n     * Reacts to user join events by creating a new SpeakerStats model.\n     *\n     * @param {string} userId - The user id of the new user.\n     * @param {JitsiParticipant} - The JitsiParticipant model for the new user.\n     * @returns {void}\n     * @private\n     */\n    _onUserJoin(userId, participant) {\n        if (participant.isHidden()) {\n            return;\n        }\n\n        if (!this.stats.users[userId]) {\n            this.stats.users[userId] = new SpeakerStats(userId, participant.getDisplayName());\n        }\n    }\n\n    /**\n     * Reacts to user leave events by updating the associated user's\n     * SpeakerStats model.\n     *\n     * @param {string} userId - The user id of the user that left.\n     * @returns {void}\n     * @private\n     */\n    _onUserLeave(userId) {\n        const savedUser = this.stats.users[userId];\n\n        if (savedUser) {\n            savedUser.markAsHasLeft();\n        }\n    }\n\n    /**\n     * Reacts to user name change events by updating the last known name\n     * tracked in the associated SpeakerStats model.\n     *\n     * @param {string} userId - The user id of the user that left.\n     * @returns {void}\n     * @private\n     */\n    _onDisplayNameChange(userId, newName) {\n        const savedUser = this.stats.users[userId];\n\n        if (savedUser) {\n            savedUser.setDisplayName(newName);\n        }\n    }\n\n    /**\n     * Processes a new face landmark object of a remote user.\n     *\n     * @param {string} userId - The user id of the user that left.\n     * @param {Object} data - The face landmark object.\n     * @returns {void}\n     * @private\n     */\n    _onFaceLandmarkAdd(userId, data) {\n        const savedUser = this.stats.users[userId];\n\n        if (savedUser && data.faceExpression) {\n            savedUser.addFaceExpression(data.faceExpression, data.duration);\n        }\n    }\n\n    /**\n     * Return a copy of the tracked SpeakerStats models.\n     *\n     * @returns {Object} The keys are the user ids and the values are the\n     * associated user's SpeakerStats model.\n     */\n    getStats() {\n        return this.stats.users;\n    }\n\n    /**\n     * Updates of the current stats is requested, passing the new values.\n     *\n     * @param {Object} newStats - The new values used to update current one.\n     * @private\n     */\n    _updateStats(newStats) {\n        for (const userId in newStats) { // eslint-disable-line guard-for-in\n            let speakerStatsToUpdate;\n            const newParticipant = this.conference.getParticipantById(userId);\n\n            // we want to ignore hidden participants\n            if (!newParticipant || !newParticipant.isHidden()) {\n                if (this.stats.users[userId]) {\n                    speakerStatsToUpdate = this.stats.users[userId];\n\n                    if (!speakerStatsToUpdate.getDisplayName()) {\n                        speakerStatsToUpdate\n                            .setDisplayName(newStats[userId].displayName);\n                    }\n                } else {\n                    speakerStatsToUpdate = new SpeakerStats(\n                        userId, newStats[userId].displayName);\n                    this.stats.users[userId] = speakerStatsToUpdate;\n                    speakerStatsToUpdate.markAsHasLeft();\n                }\n            }\n\n            speakerStatsToUpdate.totalDominantSpeakerTime\n                = newStats[userId].totalDominantSpeakerTime;\n\n            speakerStatsToUpdate.setFaceExpressions(newStats[userId].faceExpressions);\n        }\n    }\n}\n","/* eslint-disable max-params */\n\n/**\n * This object stores variables needed around the recording of an audio stream\n * and passing this recording along with additional information along to\n * different processes\n */\nexport default class RecordingResult {\n    /**\n     * @param blob the recording audio stream as a single blob\n     * @param name the name of the person of the audio stream\n     * @param startTime the time in UTC when recording of the audiostream started\n     * @param wordArray the recorder audio stream transcribed as an array of Word objects\n     */\n    constructor(blob, name, startTime, wordArray) {\n        this.blob = blob;\n        this.name = name;\n        this.startTime = startTime;\n        this.wordArray = wordArray;\n    }\n}\n","/**\n * A TrackRecorder object holds all the information needed for recording a\n * single JitsiTrack (either remote or local)\n * @param track The JitsiTrack the object is going to hold\n */\nexport default class TrackRecorder {\n    /**\n     * @param track The JitsiTrack the object is going to hold\n     */\n    constructor(track) {\n        // The JitsiTrack holding the stream\n        this.track = track;\n\n        // The MediaRecorder recording the stream\n        this.recorder = null;\n\n        // The array of data chunks recorded from the stream\n        // acts as a buffer until the data is stored on disk\n        this.data = null;\n\n        // the name of the person of the JitsiTrack. This can be undefined and/or\n        // not unique\n        this.name = null;\n\n        // the time of the start of the recording\n        this.startTime = null;\n    }\n}\n","import RecordingResult from './recordingResult';\nimport TrackRecorder from './trackRecorder';\n\n/**\n * Possible audio formats MIME types\n */\nconst AUDIO_WEBM = 'audio/webm'; // Supported in chrome\nconst AUDIO_OGG = 'audio/ogg'; // Supported in firefox\n\n/**\n * Starts the recording of a JitsiTrack in a TrackRecorder object.\n * This will also define the timestamp and try to update the name\n * @param trackRecorder the TrackRecorder to start\n */\nfunction startRecorder(trackRecorder) {\n    if (trackRecorder.recorder === undefined) {\n        throw new Error('Passed an object to startRecorder which is not a '\n            + 'TrackRecorder object');\n    }\n    trackRecorder.recorder.start();\n    trackRecorder.startTime = new Date();\n}\n\n/**\n * Stops the recording of a JitsiTrack in a TrackRecorder object.\n * This will also try to update the name\n * @param trackRecorder the TrackRecorder to stop\n */\nfunction stopRecorder(trackRecorder) {\n    if (trackRecorder.recorder === undefined) {\n        throw new Error('Passed an object to stopRecorder which is not a '\n            + 'TrackRecorder object');\n    }\n    trackRecorder.recorder.stop();\n}\n\n/**\n * Determines which kind of audio recording the browser supports\n * chrome supports \"audio/webm\" and firefox supports \"audio/ogg\"\n */\nfunction determineCorrectFileType() {\n    if (MediaRecorder.isTypeSupported(AUDIO_WEBM)) {\n        return AUDIO_WEBM;\n    } else if (MediaRecorder.isTypeSupported(AUDIO_OGG)) {\n        return AUDIO_OGG;\n    }\n    throw new Error(\n        'unable to create a MediaRecorder with the right mimetype!');\n}\n\n/**\n * main exported object of the file, holding all\n * relevant functions and variables for the outside world\n * @param jitsiConference the jitsiConference which this object\n * is going to record\n */\nfunction AudioRecorder(jitsiConference) {\n    // array of TrackRecorders, where each trackRecorder\n    // holds the JitsiTrack, MediaRecorder and recorder data\n    this.recorders = [];\n\n    // get which file type is supported by the current browser\n    this.fileType = determineCorrectFileType();\n\n    // boolean flag for active recording\n    this.isRecording = false;\n\n    // the jitsiconference the object is recording\n    this.jitsiConference = jitsiConference;\n}\n\n/**\n * Add the exported module so that it can be accessed by other files\n */\nAudioRecorder.determineCorrectFileType = determineCorrectFileType;\n\n/**\n * Adds a new TrackRecorder object to the array.\n *\n * @param track the track potentially holding an audio stream\n */\nAudioRecorder.prototype.addTrack = function(track) {\n    if (track.isAudioTrack()) {\n        // create the track recorder\n        const trackRecorder = this.instantiateTrackRecorder(track);\n\n        // push it to the local array of all recorders\n\n        this.recorders.push(trackRecorder);\n\n        // update the name of the trackRecorders\n        this.updateNames();\n\n        // If we're already recording, immediately start recording this new\n        // track.\n        if (this.isRecording) {\n            startRecorder(trackRecorder);\n        }\n    }\n};\n\n/**\n * Creates a TrackRecorder object. Also creates the MediaRecorder and\n * data array for the trackRecorder.\n * @param track the JitsiTrack holding the audio MediaStream(s)\n */\nAudioRecorder.prototype.instantiateTrackRecorder = function(track) {\n    const trackRecorder = new TrackRecorder(track);\n\n    // Create a new stream which only holds the audio track\n    const originalStream = trackRecorder.track.getOriginalStream();\n    const stream = new MediaStream();\n\n    originalStream.getAudioTracks().forEach(t => stream.addTrack(t));\n\n    // Create the MediaRecorder\n    trackRecorder.recorder = new MediaRecorder(stream,\n        { mimeType: this.fileType });\n\n    // array for holding the recorder data. Resets it when\n    // audio already has been recorder once\n    trackRecorder.data = [];\n\n    // function handling a dataEvent, e.g the stream gets new data\n    trackRecorder.recorder.ondataavailable = function(dataEvent) {\n        if (dataEvent.data.size > 0) {\n            trackRecorder.data.push(dataEvent.data);\n        }\n    };\n\n    return trackRecorder;\n};\n\n/**\n * Notifies the module that a specific track has stopped, e.g participant left\n * the conference.\n * if the recording has not started yet, the TrackRecorder will be removed from\n * the array. If the recording has started, the recorder will stop recording\n * but not removed from the array so that the recorded stream can still be\n * accessed\n *\n * @param {JitsiTrack} track the JitsiTrack to remove from the recording session\n */\nAudioRecorder.prototype.removeTrack = function(track) {\n    if (track.isVideoTrack()) {\n        return;\n    }\n\n    const array = this.recorders;\n    let i;\n\n    for (i = 0; i < array.length; i++) {\n        if (array[i].track.getParticipantId() === track.getParticipantId()) {\n            const recorderToRemove = array[i];\n\n            if (this.isRecording) {\n                stopRecorder(recorderToRemove);\n            } else {\n                // remove the TrackRecorder from the array\n                array.splice(i, 1);\n            }\n        }\n    }\n\n    // make sure the names are up to date\n    this.updateNames();\n};\n\n/**\n * Tries to update the name value of all TrackRecorder in the array.\n * If it hasn't changed,it will keep the exiting name. If it changes to a\n * undefined value, the old value will also be kept.\n */\nAudioRecorder.prototype.updateNames = function() {\n    const conference = this.jitsiConference;\n\n    this.recorders.forEach(trackRecorder => {\n        if (trackRecorder.track.isLocal()) {\n            trackRecorder.name = 'the transcriber';\n        } else {\n            const id = trackRecorder.track.getParticipantId();\n            const participant = conference.getParticipantById(id);\n            const newName = participant.getDisplayName();\n\n            if (newName !== 'undefined') {\n                trackRecorder.name = newName;\n            }\n        }\n    });\n};\n\n/**\n * Starts the audio recording of every local and remote track\n */\nAudioRecorder.prototype.start = function() {\n    if (this.isRecording) {\n        throw new Error('audiorecorder is already recording');\n    }\n\n    // set boolean isRecording flag to true so if new participants join the\n    // conference, that track can instantly start recording as well\n    this.isRecording = true;\n\n    // start all the mediaRecorders\n    this.recorders.forEach(trackRecorder => startRecorder(trackRecorder));\n\n    // log that recording has started\n    console.log(\n        `Started the recording of the audio. There are currently ${\n            this.recorders.length} recorders active.`);\n};\n\n/**\n * Stops the audio recording of every local and remote track\n */\nAudioRecorder.prototype.stop = function() {\n    // set the boolean flag to false\n    this.isRecording = false;\n\n    // stop all recorders\n    this.recorders.forEach(trackRecorder => stopRecorder(trackRecorder));\n    console.log('stopped recording');\n};\n\n/**\n * link hacking to download all recorded audio streams\n */\nAudioRecorder.prototype.download = function() {\n    this.recorders.forEach(trackRecorder => {\n        const blob = new Blob(trackRecorder.data, { type: this.fileType });\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement('a');\n\n        document.body.appendChild(a);\n        a.style = 'display: none';\n        a.href = url;\n        a.download = `test.${this.fileType.split('/')[1]}`;\n        a.click();\n        window.URL.revokeObjectURL(url);\n    });\n};\n\n/**\n * returns the audio files of all recorders as an array of objects,\n * which include the name of the owner of the track and the starting time stamp\n * @returns {Array} an array of RecordingResult objects\n */\nAudioRecorder.prototype.getRecordingResults = function() {\n    if (this.isRecording) {\n        throw new Error(\n            'cannot get blobs because the AudioRecorder is still recording!');\n    }\n\n    // make sure the names are up to date before sending them off\n    this.updateNames();\n\n    const array = [];\n\n    this.recorders.forEach(\n        recorder =>\n            array.push(\n                new RecordingResult(\n                    new Blob(recorder.data, { type: this.fileType }),\n                    recorder.name,\n                    recorder.startTime)));\n\n    return array;\n};\n\n/**\n * Gets the mime type of the recorder audio\n * @returns {String} the mime type of the recorder audio\n */\nAudioRecorder.prototype.getFileType = function() {\n    return this.fileType;\n};\n\n/**\n * export the main object AudioRecorder\n */\nexport default AudioRecorder;\n","/**\n * An object representing a transcribed word, with some additional information\n * @param word the word\n * @param begin the time the word was started being uttered\n * @param end the time the word stopped being uttered\n */\nexport default class Word {\n    /**\n     * @param word the word\n     * @param begin the time the word was started being uttered\n     * @param end the time the word stopped being uttered\n     */\n    constructor(word, begin, end) {\n        this.word = word;\n        this.begin = begin;\n        this.end = end;\n    }\n\n    /**\n     * Get the string representation of the word\n     * @returns {*} the word as a string\n     */\n    getWord() {\n        return this.word;\n    }\n\n    /**\n     * Get the time the word started being uttered\n     * @returns {*} the start time as an integer\n     */\n    getBeginTime() {\n        return this.begin;\n    }\n\n    /**\n     * Get the time the word stopped being uttered\n     * @returns {*} the end time as an integer\n     */\n    getEndTime() {\n        return this.end;\n    }\n}\n","/* global config */\n\nimport Word from '../word';\n\nimport audioRecorder from './../audioRecorder';\nimport AbstractTranscriptionService from './AbstractTranscriptionService';\n\n/**\n * Implements a TranscriptionService for a Sphinx4 http server\n */\nexport default class SphinxService extends AbstractTranscriptionService {\n    /**\n     * Implements a TranscriptionService for a Sphinx4 http server\n     */\n    constructor() {\n        super();\n\n        // set the correct url\n        this.url = getURL();\n    }\n\n    /**\n     * Overrides the sendRequest method from AbstractTranscriptionService\n     * it will send the audio stream the a Sphinx4 server to get the transcription\n     *\n     * @param audioFileBlob the recorder audio stream an a single Blob\n     * @param callback the callback function retrieving the server response\n     */\n    sendRequest(audioFileBlob, callback) {\n        console.log(`sending an audio file  to ${this.url}`);\n        console.log(`the audio file being sent: ${audioFileBlob}`);\n        const request = new XMLHttpRequest();\n\n        request.onreadystatechange = function() {\n            if (request.readyState === XMLHttpRequest.DONE\n                && request.status === 200) {\n                callback(request.responseText);\n            } else if (request.readyState === XMLHttpRequest.DONE) {\n                throw new Error(\n                    `unable to accept response from sphinx server. status: ${request.status}`);\n            }\n\n            // if not ready no point to throw an error\n        };\n        request.open('POST', this.url);\n        request.setRequestHeader('Content-Type',\n            audioRecorder.determineCorrectFileType());\n        request.send(audioFileBlob);\n        console.log(`send ${audioFileBlob}`);\n    }\n\n    /**\n     * Overrides the formatResponse method from AbstractTranscriptionService\n     * It will parse the answer from the server in the expected format\n     *\n     * @param response the JSON body retrieved from the Sphinx4 server\n     */\n    formatResponse(response) {\n        const result = JSON.parse(response).objects;\n\n        // make sure to delete the session id object, which is always\n        // the first value in the JSON array\n        result.shift();\n        const array = [];\n\n        result.forEach(\n            word => word.filler\n                || array.push(new Word(word.word, word.start, word.end)));\n\n        return array;\n    }\n\n    /**\n     * checks wether the reply is empty, or doesn't contain a correct JSON object\n     * @param response the server response\n     * @return {boolean} whether the response is valid\n     */\n    verify(response) {\n        console.log(`response from server:${response.toString()}`);\n\n        // test if server responded with a string object\n        if (typeof response !== 'string') {\n            return false;\n        }\n\n        // test if the string can be parsed into valid JSON\n        let json;\n\n        try {\n            json = JSON.parse(response);\n        } catch (error) {\n            console.log(error);\n\n            return false;\n        }\n\n        // check if the JSON has a \"objects\" value\n        if (json.objects === undefined) {\n            return false;\n        }\n\n        // get the \"objects\" value and check for a session ID\n        const array = json.objects;\n\n        if (!(array[0] && array[0]['session-id'])) {\n            return false;\n        }\n\n        // everything seems to be in order\n        return true;\n    }\n}\n\n/**\n * Gets the URL to the Sphinx4 server from the config file. If it's not there,\n * it will throw an error\n *\n * @returns {string} the URL to the sphinx4 server\n */\nfunction getURL() {\n    const message = 'config does not contain an url to a Sphinx4 https server';\n\n    if (config.sphinxURL === undefined) {\n        console.log(message);\n    } else {\n        const toReturn = config.sphinxURL;\n\n        if (toReturn.includes !== undefined && toReturn.includes('https://')) {\n            return toReturn;\n        }\n        console.log(message);\n\n    }\n}\n","/**\n * Abstract class representing an interface to implement a speech-to-text\n * service on.\n */\nexport default class TranscriptionService {\n    /**\n     * Abstract class representing an interface to implement a speech-to-text\n     * service on.\n     */\n    constructor() {\n        throw new Error('TranscriptionService is abstract and cannot be created');\n    }\n\n    /**\n     * This method can be used to send the recorder audio stream and\n     * retrieve the answer from the transcription service from the callback\n     *\n     * @param {RecordingResult} recordingResult a recordingResult object which\n     * includes the recorded audio stream as a blob\n     * @param {Function} callback  which will retrieve the a RecordingResult with\n     *        the answer as a WordArray\n     */\n    send(recordingResult, callback) {\n        this.sendRequest(recordingResult.blob, response => {\n            if (this.verify(response)) {\n                recordingResult.wordArray = this.formatResponse(response);\n            } else {\n                console.log('the retrieved response from the server is not valid!');\n                recordingResult.wordArray = [];\n            }\n            callback(recordingResult);\n        });\n    }\n\n    /**\n     * Abstract method which will rend the recorder audio stream to the implemented\n     * transcription service and will retrieve an answer, which will be\n     * called on the given callback method\n     *\n     * @param {Blob} audioBlob the recorded audio stream as a single Blob\n     * @param {function} callback function which will retrieve the answer\n     *                            from the service\n     */\n    sendRequest(audioBlob, callback) { // eslint-disable-line no-unused-vars\n        throw new Error('TranscriptionService.sendRequest is abstract');\n    }\n\n    /**\n     * Abstract method which will parse the output from the implemented\n     * transcription service to the expected format\n     *\n     * The transcriber class expect an array of word objects, where each word\n     * object is one transcribed word by the service.\n     *\n     * The expected output of this method is an array of word objects, in\n     * the correct order. That is, the first object in the array is the first word\n     * being said, and the last word in the array is the last word being said\n     *\n     * @param response the answer from the speech-to-text server which needs to be\n     *                 formatted\n     * @return {Array<Word>} an array of Word objects\n     */\n    formatResponse(response) { // eslint-disable-line no-unused-vars\n        throw new Error('TranscriptionService.format is abstract');\n    }\n\n    /**\n     * Abstract method which will verify that the response from the server is valid\n     *\n     * @param response the response from the server\n     * @return {boolean} true if response is valid, false otherwise\n     */\n    verify(response) { // eslint-disable-line no-unused-vars\n        throw new Error('TranscriptionService.verify is abstract');\n    }\n}\n","import AudioRecorder from './audioRecorder';\nimport SphinxService from './transcriptionServices/SphinxTranscriptionService';\n\nconst BEFORE_STATE = 'before';\nconst RECORDING_STATE = 'recording';\nconst TRANSCRIBING_STATE = 'transcribing';\nconst FINISHED_STATE = 'finished';\n\n// the amount of characters each line in the transcription will have\nconst MAXIMUM_SENTENCE_LENGTH = 80;\n\n/**\n * This is the main object for handing the Transcription. It interacts with\n * the audioRecorder to record every person in a conference and sends the\n * recorder audio to a transcriptionService. The returned speech-to-text result\n * will be merged to create a transcript\n * @param {AudioRecorder} audioRecorder An audioRecorder recording a conference\n */\nfunction Transcriber() {\n    // the object which can record all audio in the conference\n    this.audioRecorder = new AudioRecorder();\n\n    // this object can send the recorder audio to a speech-to-text service\n    this.transcriptionService = new SphinxService();\n\n    // holds a counter to keep track if merging can start\n    this.counter = null;\n\n    // holds the date when transcription started which makes it possible\n    // to calculate the offset between recordings\n    this.startTime = null;\n\n    // will hold the transcription once it is completed\n    this.transcription = null;\n\n    // this will be a method which will be called once the transcription is done\n    // with the transcription as parameter\n    this.callback = null;\n\n    // stores all the retrieved speech-to-text results to merge together\n    // this value will store an Array<Word> object\n    this.results = [];\n\n    // Stores the current state of the transcription process\n    this.state = BEFORE_STATE;\n\n    // Used in the updateTranscription method to add a new line when the\n    // sentence becomes to long\n    this.lineLength = 0;\n}\n\n/**\n * Method to start the transcription process. It will tell the audioRecorder\n * to start storing all audio streams and record the start time for merging\n * purposes\n */\nTranscriber.prototype.start = function start() {\n    if (this.state !== BEFORE_STATE) {\n        throw new Error(\n            `The transcription can only start when it's in the \"${\n                BEFORE_STATE}\" state. It's currently in the \"${\n                this.state}\" state`);\n    }\n    this.state = RECORDING_STATE;\n    this.audioRecorder.start();\n    this.startTime = new Date();\n};\n\n/**\n * Method to stop the transcription process. It will tell the audioRecorder to\n * stop, and get all the recorded audio to send it to the transcription service\n\n * @param callback a callback which will receive the transcription\n */\nTranscriber.prototype.stop = function stop(callback) {\n    if (this.state !== RECORDING_STATE) {\n        throw new Error(\n            `The transcription can only stop when it's in the \"${\n                RECORDING_STATE}\" state. It's currently in the \"${\n                this.state}\" state`);\n    }\n\n    // stop the recording\n    console.log('stopping recording and sending audio files');\n    this.audioRecorder.stop();\n\n    // and send all recorded audio to the transcription service\n    const callBack = blobCallBack.bind(null, this);\n\n    this.audioRecorder.getRecordingResults().forEach(recordingResult => {\n        this.transcriptionService.send(recordingResult, callBack);\n        this.counter++;\n    });\n\n    // set the state to \"transcribing\" so that maybeMerge() functions correctly\n    this.state = TRANSCRIBING_STATE;\n\n    // and store the callback for later\n    this.callback = callback;\n};\n\n/**\n * This method gets the answer from the transcription service, calculates the\n * offset and adds is to every Word object. It will also start the merging\n * when every send request has been received\n *\n * note: Make sure to bind this as a Transcription object\n * @param {Transcriber} transcriber the transcriber instance\n * @param {RecordingResult} answer a RecordingResult object with a defined\n * WordArray\n */\nfunction blobCallBack(transcriber, answer) {\n    console.log(\n        'retrieved an answer from the transcription service. The answer has an'\n            + ` array of length: ${answer.wordArray.length}`);\n\n    // first add the offset between the start of the transcription and\n    // the start of the recording to all start and end times\n    if (answer.wordArray.length > 0) {\n        let offset = answer.startTime.getUTCMilliseconds()\n            - transcriber.startTime.getUTCMilliseconds();\n\n        // transcriber time will always be earlier\n\n        if (offset < 0) {\n            offset = 0; // presume 0 if it somehow not earlier\n        }\n\n        let array = '[';\n\n        answer.wordArray.forEach(wordObject => {\n            wordObject.begin += offset;\n            wordObject.end += offset;\n            array += `${wordObject.word},`;\n        });\n        array += ']';\n        console.log(array);\n\n        // give a name value to the Array object so that the merging can access\n        // the name value without having to use the whole recordingResult object\n        // in the algorithm\n        answer.wordArray.name = answer.name;\n    }\n\n    // then store the array and decrease the counter\n    transcriber.results.push(answer.wordArray);\n    transcriber.counter--;\n    console.log(`current counter: ${transcriber.counter}`);\n\n    // and check if all results have been received.\n    transcriber.maybeMerge();\n}\n\n/**\n * this method will check if the counter is zero. If it is, it will call\n * the merging method\n */\nTranscriber.prototype.maybeMerge = function() {\n    if (this.state === TRANSCRIBING_STATE && this.counter === 0) {\n        // make sure to include the events in the result arrays before\n        // merging starts\n        this.merge();\n    }\n};\n\n/**\n * This method will merge all speech-to-text arrays together in one\n * readable transcription string\n */\nTranscriber.prototype.merge = function() {\n    console.log(\n        `starting merge process!\\n The length of the array: ${\n            this.results.length}`);\n    this.transcription = '';\n\n    // the merging algorithm will look over all Word objects who are at pos 0 in\n    // every array. It will then select the one closest in time to the\n    // previously placed word, while removing the selected word from its array\n    // note: words can be skipped the skipped word's begin and end time somehow\n    // end up between the closest word start and end time\n    const arrays = this.results;\n\n    // arrays of Word objects\n    const potentialWords = []; // array of the first Word objects\n    // check if any arrays are already empty and remove them\n\n    hasPopulatedArrays(arrays);\n\n    // populate all the potential Words for a first time\n    arrays.forEach(array => pushWordToSortedArray(potentialWords, array));\n\n    // keep adding words to transcription until all arrays are exhausted\n    while (hasPopulatedArrays(arrays)) {\n        // first select the lowest array;\n        let lowestWordArray = arrays[0];\n\n        arrays.forEach(wordArray => {\n            if (wordArray[0].begin < lowestWordArray[0].begin) {\n                lowestWordArray = wordArray;\n            }\n        });\n\n        // put the word in the transcription\n        let wordToAdd = lowestWordArray.shift();\n\n        this.updateTranscription(wordToAdd, lowestWordArray.name);\n\n        // keep going until a word in another array has a smaller time\n        // or the array is empty\n        while (lowestWordArray.length > 0) {\n            let foundSmaller = false;\n            const wordToCompare = lowestWordArray[0].begin;\n\n            arrays.forEach(wordArray => {\n                if (wordArray[0].begin < wordToCompare) {\n                    foundSmaller = true;\n                }\n            });\n\n            // add next word if no smaller time has been found\n            if (foundSmaller) {\n                break;\n            }\n\n            wordToAdd = lowestWordArray.shift();\n            this.updateTranscription(wordToAdd, null);\n        }\n\n    }\n\n    // set the state to finished and do the necessary left-over tasks\n    this.state = FINISHED_STATE;\n    if (this.callback) {\n        this.callback(this.transcription);\n    }\n};\n\n/**\n * Appends a word object to the transcription. It will make a new line with a\n * name if a name is specified\n * @param {Word} word the Word object holding the word to append\n * @param {String|null} name the name of a new speaker. Null if not applicable\n */\nTranscriber.prototype.updateTranscription = function(word, name) {\n    if (name !== undefined && name !== null) {\n        this.transcription += `\\n${name}:`;\n        this.lineLength = name.length + 1; // +1 for the semi-colon\n    }\n    if (this.lineLength + word.word.length > MAXIMUM_SENTENCE_LENGTH) {\n        this.transcription += '\\n    ';\n        this.lineLength = 4; // because of the 4 spaces after the new line\n    }\n    this.transcription += ` ${word.word}`;\n    this.lineLength += word.word.length + 1; // +1 for the space\n};\n\n/**\n * Check if the given 2 dimensional array has any non-zero Word-arrays in them.\n * All zero-element arrays inside will be removed\n * If any non-zero-element arrays are found, the method will return true.\n * otherwise it will return false\n * @param {Array<Array>} twoDimensionalArray the array to check\n * @returns {boolean} true if any non-zero arrays inside, otherwise false\n */\nfunction hasPopulatedArrays(twoDimensionalArray) {\n    for (let i = 0; i < twoDimensionalArray.length; i++) {\n        if (twoDimensionalArray[i].length === 0) {\n            twoDimensionalArray.splice(i, 1);\n        }\n    }\n\n    return twoDimensionalArray.length > 0;\n}\n\n/**\n * Push a word to the right location in a sorted array. The array is sorted\n * from lowest to highest start time. Every word is stored in an object which\n * includes the name of the person saying the word.\n *\n * @param {Array<Word>} array the sorted array to push to\n * @param {Word} word the word to push into the array\n */\nfunction pushWordToSortedArray(array, word) {\n    if (array.length === 0) {\n        array.push(word);\n    } else {\n        if (array[array.length - 1].begin <= word.begin) {\n            array.push(word);\n\n            return;\n        }\n\n        for (let i = 0; i < array.length; i++) {\n            if (word.begin < array[i].begin) {\n                array.splice(i, 0, word);\n\n                return;\n            }\n        }\n        array.push(word); // fail safe\n    }\n}\n\n/**\n * Gives the transcriber a JitsiTrack holding an audioStream to transcribe.\n * The JitsiTrack is given to the audioRecorder. If it doesn't hold an\n * audiostream, it will not be added by the audioRecorder\n * @param {JitsiTrack} track the track to give to the audioRecorder\n */\nTranscriber.prototype.addTrack = function(track) {\n    this.audioRecorder.addTrack(track);\n};\n\n/**\n * Remove the given track from the auioRecorder\n * @param track\n */\nTranscriber.prototype.removeTrack = function(track) {\n    this.audioRecorder.removeTrack(track);\n};\n\n/**\n * Will return the created transcription if it's avialable or throw an error\n * when it's not done yet\n * @returns {String} the transcription as a String\n */\nTranscriber.prototype.getTranscription = function() {\n    if (this.state !== FINISHED_STATE) {\n        throw new Error(\n            `The transcription can only be retrieved when it's in the \"${\n                FINISHED_STATE}\" state. It's currently in the \"${\n                this.state}\" state`);\n    }\n\n    return this.transcription;\n};\n\n/**\n * Returns the current state of the transcription process\n */\nTranscriber.prototype.getState = function() {\n    return this.state;\n};\n\n/**\n * Resets the state to the \"before\" state, such that it's again possible to\n * call the start method\n */\nTranscriber.prototype.reset = function() {\n    this.state = BEFORE_STATE;\n    this.counter = null;\n    this.transcription = null;\n    this.startTime = null;\n    this.callback = null;\n    this.results = [];\n    this.lineLength = 0;\n};\n\nexport default Transcriber;\n","import Statistics from '../statistics/statistics';\n\nconst logger = require('@jitsi/logger').getLogger(__filename);\n\n/**\n * Creates new instance of <tt>ComponentsVersions</tt> which will be discovering\n * the versions of conferencing system components in given\n * <tt>JitsiConference</tt>.\n * @param conference <tt>JitsiConference</tt> instance which will be used to\n *        listen for focus presence updates.\n * @constructor\n */\nexport default function ComponentsVersions(conference) {\n\n    this.versions = {};\n\n    this.conference = conference;\n    this.conference.addCommandListener(\n        'versions', this.processVersions.bind(this));\n}\n\nComponentsVersions.prototype.processVersions\n    = function(versions, mucResource, mucJid) {\n        if (!this.conference.isFocus(mucJid)) {\n            logger.warn(\n                `Received versions not from the focus user: ${versions}`,\n                mucJid);\n\n            return;\n        }\n\n        const log = [];\n\n        versions.children.forEach(component => {\n\n            const name = component.attributes.name;\n            const version = component.value;\n\n            if (this.versions[name] !== version) {\n                this.versions[name] = version;\n                logger.info(`Got ${name} version: ${version}`);\n\n                log.push({\n                    id: 'component_version',\n                    component: name,\n                    version\n                });\n            }\n        });\n\n        // logs versions to stats\n        if (log.length > 0) {\n            Statistics.sendLog(JSON.stringify(log));\n        }\n    };\n\n/**\n * Obtains the version of conferencing system component.\n * @param componentName the name of the component for which we want to obtain\n *        the version.\n * @returns {String} which describes the version of the component identified by\n *          given <tt>componentName</tt> or <tt>undefined</tt> if not found.\n */\nComponentsVersions.prototype.getComponentVersion = function(componentName) {\n    return this.versions[componentName];\n};\n","export enum VideoSIPGWStatusConstants {\n    /**\n     * Status that video SIP GW service is available.\n     */\n    STATUS_AVAILABLE = 'available',\n\n    /**\n     * Status that video SIP GW service is not available.\n     */\n    STATUS_UNDEFINED = 'undefined',\n\n    /**\n     * Status that video SIP GW service is available but there are no free nodes\n     * at the moment to serve new requests.\n     */\n    STATUS_BUSY = 'busy'\n};\n\nexport enum VideoSIPGWStateConstants {\n    /**\n     * Video SIP GW session state, currently running.\n     */\n    STATE_ON = 'on',\n\n    /**\n     * Video SIP GW session state, currently stopped and not running.\n     */\n    STATE_OFF = 'off',\n\n    /**\n     * Video SIP GW session state, currently is starting.\n     */\n    STATE_PENDING = 'pending',\n\n    /**\n     * Video SIP GW session state, has observed some issues and is retrying at the\n     * moment.\n     */\n    STATE_RETRYING = 'retrying',\n\n    /**\n     * Video SIP GW session state, tried to start but it failed.\n     */\n    STATE_FAILED = 'failed'\n};\n\nexport enum VideoSIPGWErrorConstants {\n    /**\n     * Error on trying to create video SIP GW session in conference where\n     * there is no room connection (hasn't joined or has left the room).\n     */\n    ERROR_NO_CONNECTION = 'error_no_connection',\n\n    /**\n     * Error on trying to create video SIP GW session with address for which\n     * there is an already created session.\n     */\n    ERROR_SESSION_EXISTS = 'error_session_already_exists'\n};\n\n// exported for backward compatibility\nexport const STATUS_AVAILABLE = VideoSIPGWStatusConstants.STATUS_AVAILABLE;\nexport const STATUS_UNDEFINED = VideoSIPGWStatusConstants.STATUS_UNDEFINED;\nexport const STATUS_BUSY = VideoSIPGWStatusConstants.STATUS_BUSY;\n\nexport const STATE_ON = VideoSIPGWStateConstants.STATE_ON;\nexport const STATE_OFF = VideoSIPGWStateConstants.STATE_OFF;\nexport const STATE_PENDING = VideoSIPGWStateConstants.STATE_PENDING;\nexport const STATE_RETRYING = VideoSIPGWStateConstants.STATE_RETRYING;\nexport const STATE_FAILED = VideoSIPGWStateConstants.STATE_FAILED;\n\nexport const ERROR_NO_CONNECTION = VideoSIPGWErrorConstants.ERROR_NO_CONNECTION;\nexport const ERROR_SESSION_EXISTS = VideoSIPGWErrorConstants.ERROR_SESSION_EXISTS;\n","import { getLogger } from '@jitsi/logger';\nimport { $iq } from 'strophe.js';\n\nimport Listenable from '../util/Listenable';\n\nimport * as VideoSIPGWConstants from './VideoSIPGWConstants';\n\nconst logger = getLogger(__filename);\n\n/**\n * The event name for current sip video session state changed.\n * @type {string} event name for sip video session state changed.\n */\nconst STATE_CHANGED = 'STATE_CHANGED';\n\n/**\n * Jitsi video SIP GW session. Holding its state and able to start/stop it.\n * When session is in OFF or FAILED stated it cannot be used anymore.\n */\nexport default class JitsiVideoSIPGWSession extends Listenable {\n\n    /**\n     * Creates new session with the desired sip address and display name.\n     *\n     * @param {string} sipAddress - The sip address to use when\n     * starting the session.\n     * @param {string} displayName - The display name to use for\n     * that participant.\n     * @param {ChatRoom} chatRoom - The chat room this session is bound to.\n     */\n    constructor(sipAddress, displayName, chatRoom) {\n        super();\n\n        this.sipAddress = sipAddress;\n        this.displayName = displayName;\n        this.chatRoom = chatRoom;\n\n        /*\n         * The initial state is undefined. Initial state cannot be STATE_OFF,\n         * the session enters this state when it was in STATE_ON and was stopped\n         * and such session cannot be used anymore.\n         *\n         * @type {VideoSIPGWConstants|undefined}\n         */\n        this.state = undefined;\n    }\n\n    /**\n     * Stops the current session.\n     */\n    stop() {\n        if (this.state === VideoSIPGWConstants.STATE_OFF\n            || this.state === VideoSIPGWConstants.STATE_FAILED) {\n            logger.warn('Video SIP GW session already stopped or failed!');\n\n            return;\n        }\n\n        this._sendJibriIQ('stop');\n    }\n\n    /**\n     * Starts a new session. Sends an iq to the focus.\n     */\n    start() {\n        // if state is off, this session was active for some reason\n        // and we should create new one, rather than reusing it\n        if (this.state === VideoSIPGWConstants.STATE_ON\n            || this.state === VideoSIPGWConstants.STATE_OFF\n            || this.state === VideoSIPGWConstants.STATE_PENDING\n            || this.state === VideoSIPGWConstants.STATE_RETRYING) {\n            logger.warn('Video SIP GW session already started!');\n\n            return;\n        }\n\n        this._sendJibriIQ('start');\n    }\n\n    /**\n     * Changes the state of this session.\n     *\n     * @param {string} newState - The new {VideoSIPGWConstants} state to set.\n     * @param {string} [optional] failureReason - The reason why a failure state\n     * was entered.\n     * @returns {void}\n     */\n    setState(newState, failureReason) {\n        if (newState === this.state) {\n            return;\n        }\n\n        const oldState = this.state;\n\n        this.state = newState;\n        this.eventEmitter.emit(STATE_CHANGED,\n            {\n                address: this.sipAddress,\n                failureReason,\n                oldState,\n                newState: this.state,\n                displayName: this.displayName\n            }\n        );\n    }\n\n    /**\n     * Subscribes the passed listener to the event for state change of this\n     * session.\n     *\n     * @param {Function} listener - The function that will receive the event.\n     */\n    addStateListener(listener) {\n        this.addListener(STATE_CHANGED, listener);\n    }\n\n    /**\n     * Unsubscribes the passed handler.\n     *\n     * @param {Function} listener - The function to be removed.\n     */\n    removeStateListener(listener) {\n        this.removeListener(STATE_CHANGED, listener);\n    }\n\n    /**\n     * Sends a jibri command using an iq.\n     *\n     * @private\n     * @param {string} action - The action to send ('start' or 'stop').\n     */\n    _sendJibriIQ(action) {\n        const appData = {};\n        appData[\"baseUrl\"] =  window.location.origin;\n        appData[\"token\"] =  this.chatRoom.connection.emuc.xmpp.token\n\n        const attributes = {\n            'xmlns': 'http://jitsi.org/protocol/jibri',\n            'action': action,\n            'app_data': JSON.stringify(appData),\n            sipaddress: this.sipAddress\n        };\n\n        attributes.displayname = this.displayName;\n\n        const iq = $iq({\n            to: this.chatRoom.focusMucJid,\n            type: 'set' })\n            .c('jibri', attributes)\n            .up();\n\n        logger.debug(`${action} video SIP GW session`, iq.nodeTree);\n        this.chatRoom.connection.sendIQ(\n            iq,\n            () => {}, // eslint-disable-line no-empty-function\n            error => {\n                logger.error(\n                    `Failed to ${action} video SIP GW session, error: `, error);\n                this.setState(VideoSIPGWConstants.STATE_FAILED);\n            });\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nconst logger = getLogger(__filename);\n\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\n\nimport JitsiVideoSIPGWSession from './JitsiVideoSIPGWSession';\nimport * as Constants from './VideoSIPGWConstants';\n\n/**\n * Main video SIP GW handler. Stores references of all created sessions.\n */\nexport default class VideoSIPGW {\n\n    /**\n     * Creates new handler.\n     *\n     * @param {ChatRoom} chatRoom - Tha chat room to handle.\n     */\n    constructor(chatRoom) {\n        this.chatRoom = chatRoom;\n        this.eventEmitter = chatRoom.eventEmitter;\n        logger.debug('creating VideoSIPGW');\n        this.sessions = {};\n\n        this.sessionStateChangeListener = this.sessionStateChanged.bind(this);\n\n        // VideoSIPGW, JitsiConference and ChatRoom are not reusable and no\n        // more than one VideoSIPGW can be created per JitsiConference,\n        // so we don't bother to cleanup\n        chatRoom.addPresenceListener('jibri-sip-call-state',\n            this.handleJibriSIPState.bind(this));\n    }\n\n    /**\n     * Handles presence nodes with name: jibri-sip-call-state.\n     *\n     * @param {Object} node the presence node Object to handle.\n     * Object representing part of the presence received over xmpp.\n     */\n    handleJibriSIPState(node) {\n        const attributes = node.attributes;\n\n        if (!attributes) {\n            return;\n        }\n\n        logger.debug('Handle video sip gw state : ', attributes);\n\n        const newState = attributes.state;\n\n        if (newState === this.state) {\n            return;\n        }\n\n        switch (newState) {\n        case Constants.STATE_ON:\n        case Constants.STATE_OFF:\n        case Constants.STATE_PENDING:\n        case Constants.STATE_RETRYING:\n        case Constants.STATE_FAILED: {\n            const address = attributes.sipaddress;\n\n            if (!address) {\n                return;\n            }\n\n            // find the corresponding session and set its state\n            const session = this.sessions[address];\n\n            if (session) {\n                session.setState(newState, attributes.failure_reason);\n            } else {\n                logger.warn('Video SIP GW session not found:', address);\n            }\n        }\n        }\n    }\n\n    /**\n     * Creates new session and stores its reference if it does not exist or\n     * returns an error otherwise.\n     *\n     * @param {string} sipAddress - The sip address to use.\n     * @param {string} displayName - The display name to use.\n     * @returns {JitsiVideoSIPGWSession|Error}\n     */\n    createVideoSIPGWSession(sipAddress, displayName) {\n        if (this.sessions[sipAddress]) {\n            logger.warn('There was already a Video SIP GW session for address',\n                sipAddress);\n\n            return new Error(Constants.ERROR_SESSION_EXISTS);\n        }\n\n        const session = new JitsiVideoSIPGWSession(\n            sipAddress, displayName, this.chatRoom);\n\n        session.addStateListener(this.sessionStateChangeListener);\n\n        this.sessions[sipAddress] = session;\n\n        return session;\n    }\n\n    /**\n     * Listener for session state changed. When a session goes to off or failed\n     * we delete its reference.\n     *\n     * @param {options} event - { address, oldState, newState, displayName }\n     */\n    sessionStateChanged(event) {\n        const address = event.address;\n\n        if (event.newState === Constants.STATE_OFF\n            || event.newState === Constants.STATE_FAILED) {\n            const session = this.sessions[address];\n\n            if (!session) {\n                logger.error('Missing Video SIP GW session with address:',\n                    address);\n\n                return;\n            }\n\n            session.removeStateListener(this.sessionStateChangeListener);\n            delete this.sessions[address];\n        }\n\n        this.eventEmitter.emit(\n            XMPPEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED,\n            event);\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport { Strophe } from 'strophe.js';\n\nimport { MediaType } from '../../service/RTC/MediaType';\nimport * as SignalingEvents from '../../service/RTC/SignalingEvents';\nimport SignalingLayer, { getMediaTypeFromSourceName } from '../../service/RTC/SignalingLayer';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\nimport FeatureFlags from '../flags/FeatureFlags';\n\nimport { filterNodeFromPresenceJSON } from './ChatRoom';\n\nconst logger = getLogger(__filename);\n\nexport const SOURCE_INFO_PRESENCE_ELEMENT = 'SourceInfo';\n\n/**\n * Default XMPP implementation of the {@link SignalingLayer} interface. Obtains\n * the data from the MUC presence.\n */\nexport default class SignalingLayerImpl extends SignalingLayer {\n    /**\n     * Creates new instance.\n     */\n    constructor() {\n        super();\n\n        /**\n         * A map that stores SSRCs of remote streams. And is used only locally\n         * We store the mapping when jingle is received, and later is used\n         * onaddstream webrtc event where we have only the ssrc\n         * FIXME: This map got filled and never cleaned and can grow during long\n         * conference\n         * @type {Map<number, string>} maps SSRC number to jid\n         */\n        this.ssrcOwners = new Map();\n\n        /**\n         *\n         * @type {ChatRoom|null}\n         */\n        this.chatRoom = null;\n\n        /**\n         * @type {Map<SourceName, SourceInfo>}\n         * @private\n         */\n        this._localSourceState = { };\n\n        /**\n         * @type {Map<EndpointId, Map<SourceName, SourceInfo>>}\n         * @private\n         */\n        this._remoteSourceState = { };\n\n        /**\n         * A map that stores the source name of a track identified by it's ssrc.\n         * We store the mapping when jingle is received, and later is used\n         * onaddstream webrtc event where we have only the ssrc\n         * FIXME: This map got filled and never cleaned and can grow during long\n         * conference\n         * @type {Map<number, string>} maps SSRC number to source name\n         */\n        this._sourceNames = new Map();\n    }\n\n    /**\n     * Adds <SourceInfo> element to the local presence.\n     *\n     * @returns {void}\n     * @private\n     */\n    _addLocalSourceInfoToPresence() {\n        if (this.chatRoom) {\n            return this.chatRoom.addOrReplaceInPresence(\n                SOURCE_INFO_PRESENCE_ELEMENT,\n                { value: JSON.stringify(this._localSourceState) });\n        }\n\n        return false;\n    }\n\n    /**\n     * Check is given endpoint has advertised <SourceInfo/> in it's presence which means that the source name signaling\n     * is used by this endpoint.\n     *\n     * @param {EndpointId} endpointId\n     * @returns {boolean}\n     */\n    _doesEndpointSendNewSourceInfo(endpointId) {\n        const presence = this.chatRoom?.getLastPresence(endpointId);\n\n        return Boolean(presence && presence.find(node => node.tagName === SOURCE_INFO_PRESENCE_ELEMENT));\n    }\n\n    /**\n     * Sets the <tt>ChatRoom</tt> instance used and binds presence listeners.\n     * @param {ChatRoom} room\n     */\n    setChatRoom(room) {\n        const oldChatRoom = this.chatRoom;\n\n        this.chatRoom = room;\n        if (oldChatRoom) {\n            oldChatRoom.removePresenceListener(\n                'audiomuted', this._audioMuteHandler);\n            oldChatRoom.removePresenceListener(\n                'videomuted', this._videoMuteHandler);\n            oldChatRoom.removePresenceListener(\n                'videoType', this._videoTypeHandler);\n            if (FeatureFlags.isSourceNameSignalingEnabled()) {\n                this._sourceInfoHandler\n                    && oldChatRoom.removePresenceListener(\n                        SOURCE_INFO_PRESENCE_ELEMENT, this._sourceInfoHandler);\n                this._memberLeftHandler\n                    && oldChatRoom.removeEventListener(\n                        XMPPEvents.MUC_MEMBER_LEFT, this._memberLeftHandler);\n            }\n        }\n        if (room) {\n            if (FeatureFlags.isSourceNameSignalingEnabled()) {\n                this._bindChatRoomEventHandlers(room);\n                this._addLocalSourceInfoToPresence();\n            } else {\n                // TODO the logic below has been duplicated in _bindChatRoomEventHandlers, clean this up once\n                //  the new impl has been tested well enough\n                // SignalingEvents\n                this._audioMuteHandler = (node, from) => {\n                    this.eventEmitter.emit(\n                        SignalingEvents.PEER_MUTED_CHANGED,\n                        from, MediaType.AUDIO, node.value === 'true');\n                };\n                room.addPresenceListener('audiomuted', this._audioMuteHandler);\n\n                this._videoMuteHandler = (node, from) => {\n                    this.eventEmitter.emit(\n                        SignalingEvents.PEER_MUTED_CHANGED,\n                        from, MediaType.VIDEO, node.value === 'true');\n                };\n                room.addPresenceListener('videomuted', this._videoMuteHandler);\n\n                this._videoTypeHandler = (node, from) => {\n                    this.eventEmitter.emit(\n                        SignalingEvents.PEER_VIDEO_TYPE_CHANGED,\n                        from, node.value);\n                };\n                room.addPresenceListener('videoType', this._videoTypeHandler);\n            }\n        }\n    }\n\n    /**\n     * Binds event listeners to the chat room instance.\n     * @param {ChatRoom} room\n     * @private\n     * @returns {void}\n     */\n    _bindChatRoomEventHandlers(room) {\n        const emitAudioMutedEvent = (endpointId, muted) => {\n            this.eventEmitter.emit(\n                SignalingEvents.PEER_MUTED_CHANGED,\n                endpointId,\n                MediaType.AUDIO,\n                muted);\n        };\n        const emitVideoMutedEvent = (endpointId, muted) => {\n            this.eventEmitter.emit(\n                SignalingEvents.PEER_MUTED_CHANGED,\n                endpointId,\n                MediaType.VIDEO,\n                muted);\n        };\n\n        // SignalingEvents\n        this._audioMuteHandler = (node, from) => {\n            if (!this._doesEndpointSendNewSourceInfo(from)) {\n                emitAudioMutedEvent(from, node.value === 'true');\n            }\n        };\n        room.addPresenceListener('audiomuted', this._audioMuteHandler);\n\n        this._videoMuteHandler = (node, from) => {\n            if (!this._doesEndpointSendNewSourceInfo(from)) {\n                emitVideoMutedEvent(from, node.value === 'true');\n            }\n        };\n        room.addPresenceListener('videomuted', this._videoMuteHandler);\n\n        const emitVideoTypeEvent = (endpointId, videoType) => {\n            this.eventEmitter.emit(\n                SignalingEvents.PEER_VIDEO_TYPE_CHANGED,\n                endpointId, videoType);\n        };\n\n        this._videoTypeHandler = (node, from) => {\n            if (!this._doesEndpointSendNewSourceInfo(from)) {\n                emitVideoTypeEvent(from, node.value);\n            }\n        };\n\n        if (!FeatureFlags.isMultiStreamSupportEnabled()) {\n            room.addPresenceListener('videoType', this._videoTypeHandler);\n        }\n\n        this._sourceInfoHandler = (node, mucNick) => {\n            const endpointId = mucNick;\n            const { value } = node;\n            const sourceInfoJSON = JSON.parse(value);\n            const emitEventsFromHere = this._doesEndpointSendNewSourceInfo(endpointId);\n            const endpointSourceState\n                = this._remoteSourceState[endpointId] || (this._remoteSourceState[endpointId] = {});\n\n            for (const sourceName of Object.keys(sourceInfoJSON)) {\n                const mediaType = getMediaTypeFromSourceName(sourceName);\n                const newMutedState = Boolean(sourceInfoJSON[sourceName].muted);\n                const oldSourceState = endpointSourceState[sourceName]\n                    || (endpointSourceState[sourceName] = { sourceName });\n\n                if (oldSourceState.muted !== newMutedState) {\n                    oldSourceState.muted = newMutedState;\n                    if (emitEventsFromHere && !this._localSourceState[sourceName]) {\n                        this.eventEmitter.emit(SignalingEvents.SOURCE_MUTED_CHANGED, sourceName, newMutedState);\n                    }\n                }\n\n                // Assume a default videoType of 'camera' for video sources.\n                const newVideoType = mediaType === MediaType.VIDEO\n                    ? sourceInfoJSON[sourceName].videoType ?? VideoType.CAMERA\n                    : undefined;\n\n                if (oldSourceState.videoType !== newVideoType) {\n                    oldSourceState.videoType = newVideoType;\n\n                    // Since having a mix of eps that do/don't support multi-stream in the same call is supported, emit\n                    // SOURCE_VIDEO_TYPE_CHANGED event when the remote source changes videoType.\n                    if (emitEventsFromHere && !this._localSourceState[sourceName]) {\n                        this.eventEmitter.emit(SignalingEvents.SOURCE_VIDEO_TYPE_CHANGED, sourceName, newVideoType);\n                    }\n                }\n            }\n\n            // Cleanup removed source names\n            const newSourceNames = Object.keys(sourceInfoJSON);\n\n            for (const sourceName of Object.keys(endpointSourceState)) {\n                if (newSourceNames.indexOf(sourceName) === -1) {\n                    delete endpointSourceState[sourceName];\n                }\n            }\n        };\n        room.addPresenceListener('SourceInfo', this._sourceInfoHandler);\n\n        // Cleanup when participant leaves\n        this._memberLeftHandler = jid => {\n            const endpointId = Strophe.getResourceFromJid(jid);\n\n            delete this._remoteSourceState[endpointId];\n\n            if (FeatureFlags.isSourceNameSignalingEnabled()) {\n                for (const [ key, value ] of this.ssrcOwners.entries()) {\n                    if (value === endpointId) {\n                        delete this._sourceNames[key];\n                    }\n                }\n            }\n        };\n\n        room.addEventListener(XMPPEvents.MUC_MEMBER_LEFT, this._memberLeftHandler);\n    }\n\n    /**\n     * Finds the first source of given media type for the given endpoint.\n     * @param endpointId\n     * @param mediaType\n     * @returns {SourceInfo|null}\n     * @private\n     */\n    _findEndpointSourceInfoForMediaType(endpointId, mediaType) {\n        const remoteSourceState = this._remoteSourceState[endpointId];\n\n        if (!remoteSourceState) {\n            return null;\n        }\n\n        for (const sourceInfo of Object.values(remoteSourceState)) {\n            const _mediaType = getMediaTypeFromSourceName(sourceInfo.sourceName);\n\n            if (_mediaType === mediaType) {\n                return sourceInfo;\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getPeerMediaInfo(owner, mediaType, sourceName) {\n        const legacyGetPeerMediaInfo = () => {\n            if (this.chatRoom) {\n                return this.chatRoom.getMediaPresenceInfo(owner, mediaType);\n            }\n            logger.warn('Requested peer media info, before room was set');\n        };\n\n        if (FeatureFlags.isSourceNameSignalingEnabled()) {\n            const lastPresence = this.chatRoom?.getLastPresence(owner);\n\n            if (!lastPresence) {\n                logger.warn(`getPeerMediaInfo - no presence stored for: ${owner}`);\n\n                return;\n            }\n            if (!this._doesEndpointSendNewSourceInfo(owner)) {\n                return legacyGetPeerMediaInfo();\n            }\n\n            if (sourceName) {\n                return this.getPeerSourceInfo(owner, sourceName);\n            }\n\n            /**\n             * @type {PeerMediaInfo}\n             */\n            const mediaInfo = {};\n            const endpointMediaSource = this._findEndpointSourceInfoForMediaType(owner, mediaType);\n\n            // The defaults are provided only, because getPeerMediaInfo is a legacy method. This will be eventually\n            // changed into a getSourceInfo method which returns undefined if there's no source. Also there will be\n            // no mediaType argument there.\n            if (mediaType === MediaType.AUDIO) {\n                mediaInfo.muted = endpointMediaSource ? endpointMediaSource.muted : true;\n            } else if (mediaType === MediaType.VIDEO) {\n                mediaInfo.muted = endpointMediaSource ? endpointMediaSource.muted : true;\n                mediaInfo.videoType = endpointMediaSource ? endpointMediaSource.videoType : undefined;\n\n                const codecTypeNode = filterNodeFromPresenceJSON(lastPresence, 'jitsi_participant_codecType');\n\n                if (codecTypeNode.length > 0) {\n                    mediaInfo.codecType = codecTypeNode[0].value;\n                }\n            } else {\n                throw new Error(`Unsupported media type: ${mediaType}`);\n            }\n\n            return mediaInfo;\n        }\n\n        return legacyGetPeerMediaInfo();\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getPeerSourceInfo(owner, sourceName) {\n        const mediaInfo = {\n            muted: true, // muted by default\n            videoType: VideoType.CAMERA // 'camera' by default\n        };\n\n        return this._remoteSourceState[owner]\n            ? this._remoteSourceState[owner][sourceName] ?? mediaInfo\n            : undefined;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getSSRCOwner(ssrc) {\n        return this.ssrcOwners.get(ssrc);\n    }\n\n    /**\n     * Set an SSRC owner.\n     * @param {number} ssrc an SSRC to be owned\n     * @param {string} endpointId owner's ID (MUC nickname)\n     * @throws TypeError if <tt>ssrc</tt> is not a number\n     */\n    setSSRCOwner(ssrc, endpointId) {\n        if (typeof ssrc !== 'number') {\n            throw new TypeError(`SSRC(${ssrc}) must be a number`);\n        }\n\n        // Now signaling layer instance is shared between different JingleSessionPC instances, so although very unlikely\n        // an SSRC conflict could potentially occur. Log a message to make debugging easier.\n        const existingOwner = this.ssrcOwners.get(ssrc);\n\n        if (existingOwner && existingOwner !== endpointId) {\n            logger.error(`SSRC owner re-assigned from ${existingOwner} to ${endpointId}`);\n        }\n        this.ssrcOwners.set(ssrc, endpointId);\n    }\n\n    /**\n     * Adjusts muted status of given track.\n     *\n     * @param {SourceName} sourceName - the name of the track's source.\n     * @param {boolean} muted - the new muted status.\n     * @returns {boolean}\n     */\n    setTrackMuteStatus(sourceName, muted) {\n        if (!this._localSourceState[sourceName]) {\n            this._localSourceState[sourceName] = {};\n        }\n\n        this._localSourceState[sourceName].muted = muted;\n\n        if (this.chatRoom) {\n            // FIXME This only adjusts the presence, but doesn't actually send it. Here we temporarily rely on\n            // the legacy signaling part to send the presence. Remember to add \"send presence\" here when the legacy\n            // signaling is removed.\n            return this._addLocalSourceInfoToPresence();\n        }\n\n        return false;\n    }\n\n    /**\n     * Sets track's video type.\n     * @param {SourceName} sourceName - the track's source name.\n     * @param {VideoType} videoType - the new video type.\n     * @returns {boolean}\n     */\n    setTrackVideoType(sourceName, videoType) {\n        if (!this._localSourceState[sourceName]) {\n            this._localSourceState[sourceName] = {};\n        }\n\n        if (this._localSourceState[sourceName].videoType !== videoType) {\n            // Include only if not a camera (default)\n            this._localSourceState[sourceName].videoType = videoType === VideoType.CAMERA ? undefined : videoType;\n\n            // NOTE this doesn't send the actual presence, because is called from the same place where the legacy video\n            // type is emitted which does the actual sending. A send presence statement needs to be added when\n            // the legacy part is removed.\n            return this._addLocalSourceInfoToPresence();\n        }\n\n        return false;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getTrackSourceName(ssrc) {\n        return this._sourceNames.get(ssrc);\n    }\n\n    /**\n     * Saves the source name for a track identified by it's ssrc.\n     * @param {number} ssrc the ssrc of the target track.\n     * @param {SourceName} sourceName the track's source name to save.\n     * @throws TypeError if <tt>ssrc</tt> is not a number\n     */\n    setTrackSourceName(ssrc, sourceName) {\n        if (typeof ssrc !== 'number') {\n            throw new TypeError(`SSRC(${ssrc}) must be a number`);\n        }\n\n        // Now signaling layer instance is shared between different JingleSessionPC instances, so although very unlikely\n        // an SSRC conflict could potentially occur. Log a message to make debugging easier.\n        const existingName = this._sourceNames.get(ssrc);\n\n        if (existingName && existingName !== sourceName) {\n            logger.error(`SSRC(${ssrc}) sourceName re-assigned from ${existingName} to ${sourceName}`);\n        }\n\n        this._sourceNames.set(ssrc, sourceName);\n    }\n\n}\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nimport Statistics from \"./statistics\";\n\n\nconst INITIAL_STATE = {\n    localTracksDuration: {\n        audio: {\n            startedTime: -1,\n            value: 0\n        },\n        video: {\n            camera: {\n                startedTime: -1,\n                value: 0\n            },\n            desktop: {\n                startedTime: -1,\n                value: 0\n            }\n        },\n        conference: {\n            startedTime: -1,\n            value: 0\n        }\n    }\n};\n\n\n\nlet FINAL_STATE = {\n    localTracksDuration: {\n        audio: {\n            startedTime: -1,\n            value: 0\n        },\n        video: {\n            camera: {\n                startedTime: -1,\n                value: 0\n            },\n            desktop: {\n                startedTime: -1,\n                value: 0\n            }\n        },\n        conference: {\n            startedTime: -1,\n            value: 0\n        }\n    }\n};\n\n\nfunction createLocalTracksDurationEvent(duration) {\n    const { audio, video, conference } = duration;\n    const { camera, desktop } = video;\n\n    return {\n        action: 'local.tracks.durations',\n        attributes: {\n            audio: audio.value,\n            camera: camera.value,\n            conference: conference.value,\n            desktop: desktop.value\n        }\n    };\n}\n\n\nfunction calculateLocalTrackDuration(state, conference) {\n\n    const now = Date.now();\n    const { localTracksDuration } = state;\n\n    const {\n        audio,\n        video\n    } = localTracksDuration;\n    const {\n        camera,\n        desktop\n    } = video;\n\n    const tracks = conference.getLocalTracks();\n    const audioTrack = tracks.find(track=>track.getType()===\"audio\");\n    const videoTrack = tracks.find(track=>track.getType()===\"video\");\n    const newDuration = { ...localTracksDuration };\n\n    if (!audioTrack || audioTrack.muted || !conference) {\n        newDuration.audio = {\n            startedTime: -1,\n            value: audio.value + (audio.startedTime === -1 ? 0 : now - audio.startedTime)\n        };\n    } else if (audio.startedTime === -1) {\n        newDuration.audio.startedTime = now;\n    }\n\n    if (!videoTrack || videoTrack.muted || !conference) {\n        newDuration.video = {\n            camera: {\n                startedTime: -1,\n                value: camera.value + (camera.startedTime === -1 ? 0 : now - camera.startedTime)\n            },\n            desktop: {\n                startedTime: -1,\n                value: desktop.value + (desktop.startedTime === -1 ? 0 : now - desktop.startedTime)\n            }\n        };\n    } else {\n        const { videoType } = videoTrack;\n\n        if (video[videoType].startedTime === -1) {\n            newDuration.video[videoType].startedTime = now;\n        }\n    }\n\n    return {\n        ...localTracksDuration,\n        ...newDuration\n    };\n}\n\n\nexport default class LocalTracksDuration {\n\n    constructor(conference) {\n\n        conference.addEventListener(JitsiConferenceEvents.CONFERENCE_JOINED, ()=>{\n            FINAL_STATE = {\n                localTracksDuration: {\n                    ...calculateLocalTrackDuration(INITIAL_STATE, conference),\n                    conference: {\n                        startedTime: Date.now(),\n                        value: 0\n                    }\n                }\n            };\n        });\n\n        conference.addEventListener(JitsiConferenceEvents.TRACK_UPDATED, ()=>{\n            const { localTracksDuration } = FINAL_STATE;\n\n            if (localTracksDuration.conference.startedTime === -1) {\n                return;\n            }\n            FINAL_STATE = {\n                localTracksDuration: {\n                    ...localTracksDuration,\n                    ...calculateLocalTrackDuration(FINAL_STATE, conference)\n                }\n            };\n        });\n\n        conference.addEventListener(JitsiConferenceEvents.TRACK_ADDED, ()=>{\n\n            const { localTracksDuration } = FINAL_STATE;\n\n            if (localTracksDuration.conference.startedTime === -1) {\n                // We don't want to track the media duration if the conference is not joined yet because otherwise we won't\n                // be able to compare them with the conference duration (from conference join to conference will leave).\n                // Also, do not track media duration for presenter tracks.\n                return;\n            }\n\n            FINAL_STATE = {\n                localTracksDuration: {\n                    ...localTracksDuration,\n                    ...calculateLocalTrackDuration(FINAL_STATE, conference)\n                }\n            };\n        });\n\n        conference.addEventListener(JitsiConferenceEvents.TRACK_REMOVED, ()=>{\n\n            const { localTracksDuration } = FINAL_STATE;\n\n            if (localTracksDuration.conference.startedTime === -1) {\n                // We don't want to track the media duration if the conference is not joined yet because otherwise we won't\n                // be able to compare them with the conference duration (from conference join to conference will leave).\n                // Also, do not track media duration for presenter tracks.\n                return;\n            }\n\n            FINAL_STATE = {\n                localTracksDuration: {\n                    ...localTracksDuration,\n                    ...calculateLocalTrackDuration(FINAL_STATE, conference)\n                }\n            };\n        });\n\n\n\n        conference.addEventListener(JitsiConferenceEvents.CONFERENCE_LEFT, ()=>{\n            const { localTracksDuration } = FINAL_STATE;\n            const newLocalTracksDuration = {\n                ...calculateLocalTrackDuration(FINAL_STATE, conference),\n                conference: {\n                    startedTime: -1,\n                    value: Date.now() - localTracksDuration.conference.startedTime\n                }\n            };\n            Statistics.sendAnalytics(createLocalTracksDurationEvent(newLocalTracksDuration));\n        });\n    }\n}\n","/* global $ */\n\nimport { getLogger } from '@jitsi/logger';\nimport EventEmitter from 'events';\nimport isEqual from 'lodash.isequal';\nimport { Strophe } from 'strophe.js';\n\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\nimport JitsiConferenceEventManager from './JitsiConferenceEventManager';\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport JitsiParticipant from './JitsiParticipant';\nimport JitsiTrackError from './JitsiTrackError';\nimport * as JitsiTrackErrors from './JitsiTrackErrors';\nimport * as JitsiTrackEvents from './JitsiTrackEvents';\nimport authenticateAndUpgradeRole from './authenticateAndUpgradeRole';\nimport { CodecSelection } from './modules/RTC/CodecSelection';\nimport RTC from './modules/RTC/RTC';\nimport { SS_DEFAULT_FRAME_RATE } from './modules/RTC/ScreenObtainer';\nimport browser from './modules/browser';\nimport ConnectionQuality from './modules/connectivity/ConnectionQuality';\nimport IceFailedHandling\n    from './modules/connectivity/IceFailedHandling';\nimport ParticipantConnectionStatusHandler\n    from './modules/connectivity/ParticipantConnectionStatus';\nimport * as DetectionEvents from './modules/detection/DetectionEvents';\nimport NoAudioSignalDetection from './modules/detection/NoAudioSignalDetection';\nimport P2PDominantSpeakerDetection from './modules/detection/P2PDominantSpeakerDetection';\nimport VADAudioAnalyser from './modules/detection/VADAudioAnalyser';\nimport VADNoiseDetection from './modules/detection/VADNoiseDetection';\nimport VADTalkMutedDetection from './modules/detection/VADTalkMutedDetection';\nimport { E2EEncryption } from './modules/e2ee/E2EEncryption';\nimport E2ePing from './modules/e2eping/e2eping';\nimport Jvb121EventGenerator from './modules/event/Jvb121EventGenerator';\nimport FeatureFlags from './modules/flags/FeatureFlags';\nimport { RecordingController } from './modules/local-recording';\nimport ReceiveVideoController from './modules/qualitycontrol/ReceiveVideoController';\nimport SendVideoController from './modules/qualitycontrol/SendVideoController';\nimport RecordingManager from './modules/recording/RecordingManager';\nimport Settings from './modules/settings/Settings';\nimport AudioOutputProblemDetector from './modules/statistics/AudioOutputProblemDetector';\nimport AvgRTPStatsReporter from './modules/statistics/AvgRTPStatsReporter';\nimport SpeakerStatsCollector from './modules/statistics/SpeakerStatsCollector';\nimport Statistics from './modules/statistics/statistics';\nimport Transcriber from './modules/transcription/transcriber';\nimport GlobalOnErrorHandler from './modules/util/GlobalOnErrorHandler';\nimport RandomUtil from './modules/util/RandomUtil';\nimport ComponentsVersions from './modules/version/ComponentsVersions';\nimport VideoSIPGW from './modules/videosipgw/VideoSIPGW';\nimport * as VideoSIPGWConstants from './modules/videosipgw/VideoSIPGWConstants';\nimport SignalingLayerImpl from './modules/xmpp/SignalingLayerImpl';\nimport LocalTracksDuration from './modules/statistics/LocalTracksDuration';\nimport {\n    FEATURE_E2EE,\n    FEATURE_JIGASI,\n    JITSI_MEET_MUC_TYPE\n} from './modules/xmpp/xmpp';\nimport BridgeVideoType from './service/RTC/BridgeVideoType';\nimport CodecMimeType from './service/RTC/CodecMimeType';\nimport { MediaType } from './service/RTC/MediaType';\nimport RTCEvents from './service/RTC/RTCEvents';\nimport { getSourceNameForJitsiTrack } from './service/RTC/SignalingLayer';\nimport { VideoType } from './service/RTC/VideoType';\nimport {\n    ACTION_JINGLE_RESTART,\n    ACTION_JINGLE_SI_RECEIVED,\n    ACTION_JINGLE_SI_TIMEOUT,\n    ACTION_JINGLE_TERMINATE,\n    ACTION_P2P_DECLINED,\n    ACTION_P2P_ESTABLISHED,\n    ACTION_P2P_FAILED,\n    ACTION_P2P_SWITCH_TO_JVB,\n    ICE_ESTABLISHMENT_DURATION_DIFF,\n    createConferenceEvent,\n    createJingleEvent,\n    createP2PEvent\n} from './service/statistics/AnalyticsEvents';\nwindow.APP = {\n    conference: {\n    }\n};\nimport { XMPPEvents } from './service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * How long since Jicofo is supposed to send a session-initiate, before\n * {@link ACTION_JINGLE_SI_TIMEOUT} analytics event is sent (in ms).\n * @type {number}\n */\nconst JINGLE_SI_TIMEOUT = 5000;\n\n/**\n * Creates a JitsiConference object with the given name and properties.\n * Note: this constructor is not a part of the public API (objects should be\n * created using JitsiConnection.createConference).\n * @param options.config properties / settings related to the conference that\n * will be created.\n * @param options.name the name of the conference\n * @param options.connection the JitsiConnection object for this\n * JitsiConference.\n * @param {number} [options.config.avgRtpStatsN=15] how many samples are to be\n * collected by {@link AvgRTPStatsReporter}, before arithmetic mean is\n * calculated and submitted to the analytics module.\n * @param {boolean} [options.config.enableIceRestart=false] - enables the ICE\n * restart logic.\n * @param {boolean} [options.config.p2p.enabled] when set to <tt>true</tt>\n * the peer to peer mode will be enabled. It means that when there are only 2\n * participants in the conference an attempt to make direct connection will be\n * made. If the connection succeeds the conference will stop sending data\n * through the JVB connection and will use the direct one instead.\n * @param {number} [options.config.p2p.backToP2PDelay=5] a delay given in\n * seconds, before the conference switches back to P2P, after the 3rd\n * participant has left the room.\n * @param {number} [options.config.channelLastN=-1] The requested amount of\n * videos are going to be delivered after the value is in effect. Set to -1 for\n * unlimited or all available videos.\n * @param {number} [options.config.forceJVB121Ratio]\n * \"Math.random() < forceJVB121Ratio\" will determine whether a 2 people\n * conference should be moved to the JVB instead of P2P. The decision is made on\n * the responder side, after ICE succeeds on the P2P connection.\n * @constructor\n *\n * FIXME Make all methods which are called from lib-internal classes\n *       to non-public (use _). To name a few:\n *       {@link JitsiConference.onLocalRoleChanged}\n *       {@link JitsiConference.onUserRoleChanged}\n *       {@link JitsiConference.onMemberLeft}\n *       and so on...\n */\nexport default function JitsiConference(options) {\n    if (!options.name || options.name.toLowerCase() !== options.name.toString()) {\n        const errmsg\n            = 'Invalid conference name (no conference name passed or it '\n                + 'contains invalid characters like capital letters)!';\n\n        logger.error(errmsg);\n        throw new Error(errmsg);\n    }\n    this.connection = options.connection;\n    this.xmpp = this.connection?.xmpp;\n\n    if (this.xmpp.isRoomCreated(options.name, options.customDomain)) {\n        const errmsg = 'A conference with the same name has already been created!';\n\n        delete this.connection;\n        delete this.xmpp;\n        logger.error(errmsg);\n        throw new Error(errmsg);\n    }\n    this.eventEmitter = new EventEmitter();\n    this.options = options;\n    this.eventManager = new JitsiConferenceEventManager(this);\n    this.participants = {};\n\n    /**\n     * The signaling layer instance.\n     * @type {SignalingLayerImpl}\n     * @private\n     */\n    this._signalingLayer = new SignalingLayerImpl();\n\n    this._init(options);\n    this.componentsVersions = new ComponentsVersions(this);\n\n    /**\n     * Jingle session instance for the JVB connection.\n     * @type {JingleSessionPC}\n     */\n    this.jvbJingleSession = null;\n    this.lastDominantSpeaker = null;\n    this.dtmfManager = null;\n    this.somebodySupportsDTMF = false;\n    this.authEnabled = false;\n    this.startAudioMuted = false;\n    this.startVideoMuted = false;\n    this.startMutedPolicy = {\n        audio: false,\n        video: false\n    };\n    this.isMutedByFocus = false;\n\n    // when muted by focus we receive the jid of the initiator of the mute\n    this.mutedByFocusActor = null;\n\n    this.isVideoMutedByFocus = false;\n\n    // when video muted by focus we receive the jid of the initiator of the mute\n    this.mutedVideoByFocusActor = null;\n\n    // Flag indicates if the 'onCallEnded' method was ever called on this\n    // instance. Used to log extra analytics event for debugging purpose.\n    // We need to know if the potential issue happened before or after\n    // the restart.\n    this.wasStopped = false;\n\n    // Conference properties, maintained by jicofo.\n    this.properties = {};\n\n    /**\n     * The object which monitors local and remote connection statistics (e.g.\n     * sending bitrate) and calculates a number which represents the connection\n     * quality.\n     */\n    this.connectionQuality\n        = new ConnectionQuality(this, this.eventEmitter, options);\n\n    /**\n     * Reports average RTP statistics to the analytics module.\n     * @type {AvgRTPStatsReporter}\n     */\n    this.avgRtpStatsReporter\n        = new AvgRTPStatsReporter(this, options.config.avgRtpStatsN || 15);\n\n    /**\n     * Detects issues with the audio of remote participants.\n     * @type {AudioOutputProblemDetector}\n     */\n    if (!options.config.disableAudioLevels) {\n        this._audioOutputProblemDetector = new AudioOutputProblemDetector(this);\n    }\n\n    /**\n     * Indicates whether the connection is interrupted or not.\n     */\n    this.isJvbConnectionInterrupted = false;\n\n    /**\n     * The object which tracks active speaker times\n     */\n    this.speakerStatsCollector = new SpeakerStatsCollector(this);\n\n    /* P2P related fields below: */\n\n    /**\n     * Stores reference to deferred start P2P task. It's created when 3rd\n     * participant leaves the room in order to avoid ping pong effect (it\n     * could be just a page reload).\n     * @type {number|null}\n     */\n    this.deferredStartP2PTask = null;\n\n    const delay\n        = parseInt(options.config.p2p && options.config.p2p.backToP2PDelay, 10);\n\n    /**\n     * A delay given in seconds, before the conference switches back to P2P\n     * after the 3rd participant has left.\n     * @type {number}\n     */\n    this.backToP2PDelay = isNaN(delay) ? 5 : delay;\n    logger.info(`backToP2PDelay: ${this.backToP2PDelay}`);\n\n    /**\n     * If set to <tt>true</tt> it means the P2P ICE is no longer connected.\n     * When <tt>false</tt> it means that P2P ICE (media) connection is up\n     * and running.\n     * @type {boolean}\n     */\n    this.isP2PConnectionInterrupted = false;\n\n    /**\n     * Flag set to <tt>true</tt> when P2P session has been established\n     * (ICE has been connected) and this conference is currently in the peer to\n     * peer mode (P2P connection is the active one).\n     * @type {boolean}\n     */\n    this.p2p = false;\n\n    /**\n     * A JingleSession for the direct peer to peer connection.\n     * @type {JingleSessionPC}\n     */\n    this.p2pJingleSession = null;\n\n    this.videoSIPGWHandler = new VideoSIPGW(this.room);\n    this.recordingManager = new RecordingManager(this.room);\n\n    /**\n     * If the conference.joined event has been sent this will store the timestamp when it happened.\n     *\n     * @type {undefined|number}\n     * @private\n     */\n    this._conferenceJoinAnalyticsEventSent = undefined;\n\n    /**\n     * End-to-End Encryption. Make it available if supported.\n     */\n    if (this.isE2EESupported()) {\n        logger.info('End-to-End Encryption is supported');\n\n        this._e2eEncryption = new E2EEncryption(this);\n    }\n\n    /**\n     * Flag set to <tt>true</tt> when Jicofo sends a presence message indicating that the max audio sender limit has\n     * been reached for the call. Once this is set, unmuting audio will be disabled from the client until it gets reset\n     * again by Jicofo.\n     */\n    this._audioSenderLimitReached = undefined;\n\n    /**\n     * Flag set to <tt>true</tt> when Jicofo sends a presence message indicating that the max video sender limit has\n     * been reached for the call. Once this is set, unmuting video will be disabled from the client until it gets reset\n     * again by Jicofo.\n     */\n    this._videoSenderLimitReached = undefined;\n\n\n\n    this.handleSubtitles();\n\n    if (options.config.enableLocalRecording) {\n        this.recordingController = new RecordingController();\n        this.recordingController.registerEvents(this);\n    }\n\n    if (options.config.enableAnalytics) {\n        this.enableAnalytics();\n    }\n\n    if (options.config.iAmRecorder) {\n        this.removeCommand('userinfo');\n        this.sendCommand(\n            'userinfo',\n            {\n                attributes: {\n                    xmlns: 'http://jitsi.org/jitmeet/userinfo',\n                    robot: true\n                }\n            });\n    }\n\n    const self = this;\n\n    window.APP = {\n        conference: {\n            _room: this,\n            get membersCount() {\n                return self.getParticipantsWithoutHidden().length + 1;\n            },\n            getStats() {\n                return self.connectionQuality.getStats();\n            },\n            getConnectionState() {\n                return self.getConnectionState();\n            }\n        }\n    };\n\n    this.localTracksDuration = new LocalTracksDuration(this);\n    this.sessions = {};\n    this.user = options.user;\n    this.setDisplayName(`${this.getLocalUser() && this.getLocalUser().name}(${this.options.connection.options.ownerId})`);\n}\n\n// FIXME convert JitsiConference to ES6 - ASAP !\nJitsiConference.prototype.constructor = JitsiConference;\n\n/**\n * Create a resource for the a jid. We use the room nickname (the resource part\n * of the occupant JID, see XEP-0045) as the endpoint ID in colibri. We require\n * endpoint IDs to be 8 hex digits because in some cases they get serialized\n * into a 32bit field.\n *\n * @param {string} jid - The id set onto the XMPP connection.\n * @param {boolean} isAuthenticatedUser - Whether or not the user has connected\n * to the XMPP service with a password.\n * @returns {string}\n * @static\n */\nJitsiConference.resourceCreator = function(jid) {\n    return Strophe.getNodeFromJid(jid);\n};\n\n/**\n * Initializes the conference object properties\n * @param options {object}\n * @param options.connection {JitsiConnection} overrides this.connection\n */\nJitsiConference.prototype._init = function(options = {}) {\n    this.eventManager.setupXMPPListeners();\n\n    const { config } = this.options;\n\n    // Get the codec preference settings from config.js.\n    // 'preferH264' and 'disableH264' settings have been deprecated for a while,\n    // 'preferredCodec' and 'disabledCodec' will have precedence over them.\n    const codecSettings = {\n        disabledCodec: config.videoQuality\n            ? config.videoQuality.disabledCodec\n            : config.p2p && config.p2p.disableH264 && CodecMimeType.H264,\n        enforcePreferredCodec: config.videoQuality && config.videoQuality.enforcePreferredCodec,\n        jvbCodec: (config.videoQuality && config.videoQuality.preferredCodec)\n            || (config.preferH264 && CodecMimeType.H264),\n        p2pCodec: config.p2p\n            ? config.p2p.preferredCodec || (config.p2p.preferH264 && CodecMimeType.H264)\n            : CodecMimeType.VP8\n    };\n\n    this.codecSelection = new CodecSelection(this, codecSettings);\n    this._statsCurrentId = config.statisticsId ? config.statisticsId : Settings.callStatsUserName;\n    this.room = this.xmpp.createRoom(\n        this.options.name, {\n            ...config,\n            statsId: this._statsCurrentId\n        },\n        JitsiConference.resourceCreator\n    );\n\n    this._signalingLayer.setChatRoom(this.room);\n\n    // Connection interrupted/restored listeners\n    this._onIceConnectionInterrupted\n        = this._onIceConnectionInterrupted.bind(this);\n    this.room.addListener(\n        XMPPEvents.CONNECTION_INTERRUPTED, this._onIceConnectionInterrupted);\n\n    this._onIceConnectionRestored = this._onIceConnectionRestored.bind(this);\n    this.room.addListener(\n        XMPPEvents.CONNECTION_RESTORED, this._onIceConnectionRestored);\n\n    this._onIceConnectionEstablished\n        = this._onIceConnectionEstablished.bind(this);\n    this.room.addListener(\n        XMPPEvents.CONNECTION_ESTABLISHED, this._onIceConnectionEstablished);\n\n    this._updateProperties = this._updateProperties.bind(this);\n    this.room.addListener(XMPPEvents.CONFERENCE_PROPERTIES_CHANGED,\n        this._updateProperties);\n\n    this._sendConferenceJoinAnalyticsEvent = this._sendConferenceJoinAnalyticsEvent.bind(this);\n    this.room.addListener(XMPPEvents.MEETING_ID_SET, this._sendConferenceJoinAnalyticsEvent);\n\n    this._removeLocalSourceOnReject = this._removeLocalSourceOnReject.bind(this);\n    this._updateRoomPresence = this._updateRoomPresence.bind(this);\n    this.room.addListener(XMPPEvents.SESSION_ACCEPT, this._updateRoomPresence);\n    this.room.addListener(XMPPEvents.SOURCE_ADD, this._updateRoomPresence);\n    this.room.addListener(XMPPEvents.SOURCE_ADD_ERROR, this._removeLocalSourceOnReject);\n    this.room.addListener(XMPPEvents.SOURCE_REMOVE, this._updateRoomPresence);\n\n    if (config.e2eping?.enabled) {\n        this.e2eping = new E2ePing(\n            this,\n            config,\n            (message, to) => {\n                try {\n                    this.sendMessage(message, to, true /* sendThroughVideobridge */);\n                } catch (error) {\n                    logger.warn('Failed to send E2E ping request or response.', error && error.msg);\n                }\n            });\n    }\n\n    if (!this.rtc) {\n        this.rtc = new RTC(this, options);\n        this.eventManager.setupRTCListeners();\n        if (FeatureFlags.isSourceNameSignalingEnabled()) {\n            this._registerRtcListeners(this.rtc);\n        }\n    }\n\n    this.receiveVideoController = new ReceiveVideoController(this, this.rtc);\n    this.sendVideoController = new SendVideoController(this, this.rtc);\n\n    // Do not initialize ParticipantConnectionStatusHandler when source-name signaling is enabled.\n    if (!FeatureFlags.isSourceNameSignalingEnabled()) {\n        this.participantConnectionStatus\n        = new ParticipantConnectionStatusHandler(\n            this.rtc,\n            this,\n            {\n                // These options are not public API, leaving it here only as an entry point through config for tuning\n                // up purposes. Default values should be adjusted as soon as optimal values are discovered.\n                p2pRtcMuteTimeout: config._p2pConnStatusRtcMuteTimeout,\n                rtcMuteTimeout: config._peerConnStatusRtcMuteTimeout,\n                outOfLastNTimeout: config._peerConnStatusOutOfLastNTimeout\n            });\n        this.participantConnectionStatus.init();\n    }\n\n    // Add the ability to enable callStats only on a percentage of users based on config.js settings.\n    let enableCallStats = true;\n\n    if (config.testing && config.testing.callStatsThreshold) {\n        enableCallStats = (Math.random() * 100) <= config.testing.callStatsThreshold;\n    }\n\n    if (!this.statistics) {\n        this.statistics = new Statistics(this.xmpp, {\n            aliasName: this._statsCurrentId,\n            userName: config.statisticsDisplayName ? config.statisticsDisplayName : this.myUserId(),\n            confID: config.confID || `${this.connection.options.hosts.domain}/${this.options.name}`,\n            siteID: config.siteID,\n            customScriptUrl: config.callStatsCustomScriptUrl,\n            callStatsID: config.callStatsID,\n            callStatsSecret: config.callStatsSecret,\n            callStatsApplicationLogsDisabled: config.callStatsApplicationLogsDisabled,\n            enableCallStats,\n            roomName: this.options.name,\n            applicationName: config.applicationName,\n            getWiFiStatsMethod: config.getWiFiStatsMethod,\n            configParams: config.callStatsConfigParams\n        });\n        Statistics.analytics.addPermanentProperties({\n            'callstats_name': this._statsCurrentId\n        });\n\n        // Start performance observer for monitoring long tasks\n        if (config.longTasksStatsInterval) {\n            this.statistics.attachLongTasksStats(this);\n        }\n    }\n\n    this.eventManager.setupChatRoomListeners();\n\n    // Always add listeners because on reload we are executing leave and the\n    // listeners are removed from statistics module.\n    this.eventManager.setupStatisticsListeners();\n\n    // Disable VAD processing on Safari since it causes audio input to\n    // fail on some of the mobile devices.\n    if (config.enableTalkWhileMuted && browser.supportsVADDetection()) {\n        // If VAD processor factory method is provided uses VAD based detection, otherwise fallback to audio level\n        // based detection.\n        if (config.createVADProcessor) {\n            logger.info('Using VAD detection for generating talk while muted events');\n\n            if (!this._audioAnalyser) {\n                this._audioAnalyser = new VADAudioAnalyser(this, config.createVADProcessor);\n            }\n\n            const vadTalkMutedDetection = new VADTalkMutedDetection();\n\n            vadTalkMutedDetection.on(DetectionEvents.VAD_TALK_WHILE_MUTED, () =>\n                this.eventEmitter.emit(JitsiConferenceEvents.TALK_WHILE_MUTED));\n\n            this._audioAnalyser.addVADDetectionService(vadTalkMutedDetection);\n        } else {\n            logger.warn('No VAD Processor was provided. Talk while muted detection service was not initialized!');\n        }\n    }\n\n    // Disable noisy mic detection on safari since it causes the audio input to\n    // fail on Safari on iPadOS.\n    if (config.enableNoisyMicDetection && browser.supportsVADDetection()) {\n        if (config.createVADProcessor) {\n            if (!this._audioAnalyser) {\n                this._audioAnalyser = new VADAudioAnalyser(this, config.createVADProcessor);\n            }\n\n            const vadNoiseDetection = new VADNoiseDetection();\n\n            vadNoiseDetection.on(DetectionEvents.VAD_NOISY_DEVICE, () =>\n                this.eventEmitter.emit(JitsiConferenceEvents.NOISY_MIC));\n\n            this._audioAnalyser.addVADDetectionService(vadNoiseDetection);\n        } else {\n            logger.warn('No VAD Processor was provided. Noisy microphone detection service was not initialized!');\n        }\n    }\n\n    // Generates events based on no audio input detector.\n    if (config.enableNoAudioDetection) {\n        this._noAudioSignalDetection = new NoAudioSignalDetection(this);\n        this._noAudioSignalDetection.on(DetectionEvents.NO_AUDIO_INPUT, () => {\n            this.eventEmitter.emit(JitsiConferenceEvents.NO_AUDIO_INPUT);\n        });\n        this._noAudioSignalDetection.on(DetectionEvents.AUDIO_INPUT_STATE_CHANGE, hasAudioSignal => {\n            this.eventEmitter.emit(JitsiConferenceEvents.AUDIO_INPUT_STATE_CHANGE, hasAudioSignal);\n        });\n    }\n\n\n    if ('channelLastN' in config) {\n        this.setLastN(config.channelLastN);\n    }\n\n    /**\n     * Emits {@link JitsiConferenceEvents.JVB121_STATUS}.\n     * @type {Jvb121EventGenerator}\n     */\n    this.jvb121Status = new Jvb121EventGenerator(this);\n\n    // creates dominant speaker detection that works only in p2p mode\n    this.p2pDominantSpeakerDetection = new P2PDominantSpeakerDetection(this);\n\n    if (config && config.deploymentInfo && config.deploymentInfo.userRegion) {\n        this.setLocalParticipantProperty(\n            'region', config.deploymentInfo.userRegion);\n    }\n\n    // Publish the codec type to presence.\n    this.setLocalParticipantProperty('codecType', this.codecSelection.getPreferredCodec());\n\n    // Set transcription language presence extension.\n    // In case the language config is undefined or has the default value that the transcriber uses\n    // (in our case Jigasi uses 'en-US'), don't set the participant property in order to avoid\n    // needlessly polluting the presence stanza.\n    if (config && config.transcriptionLanguage && config.transcriptionLanguage !== 'en-US') {\n        this.setLocalParticipantProperty('transcription_language', config.transcriptionLanguage);\n    }\n};\n\n/**\n * Joins the conference.\n * @param password {string} the password\n * @param replaceParticipant {boolean} whether the current join replaces\n * an existing participant with same jwt from the meeting.\n */\nJitsiConference.prototype.join = function(password, replaceParticipant = false) {\n    if (this.room) {\n        this.room.join(password, replaceParticipant).then(() => this._maybeSetSITimeout());\n    }\n};\n\n/**\n * Authenticates and upgrades the role of the local participant/user.\n *\n * @returns {Object} A <tt>thenable</tt> which (1) settles when the process of\n * authenticating and upgrading the role of the local participant/user finishes\n * and (2) has a <tt>cancel</tt> method that allows the caller to interrupt the\n * process.\n */\nJitsiConference.prototype.authenticateAndUpgradeRole = function(options) {\n    return authenticateAndUpgradeRole.call(this, {\n        ...options,\n        onCreateResource: JitsiConference.resourceCreator\n    });\n};\n\n/**\n * Check if joined to the conference.\n */\nJitsiConference.prototype.isJoined = function() {\n    return this.room && this.room.joined;\n};\n\n/**\n * Tells whether or not the P2P mode is enabled in the configuration.\n * @return {boolean}\n */\nJitsiConference.prototype.isP2PEnabled = function() {\n    return Boolean(this.options.config.p2p && this.options.config.p2p.enabled)\n\n        // FIXME: remove once we have a default config template. -saghul\n        || typeof this.options.config.p2p === 'undefined';\n};\n\n/**\n * When in P2P test mode, the conference will not automatically switch to P2P\n * when there 2 participants.\n * @return {boolean}\n */\nJitsiConference.prototype.isP2PTestModeEnabled = function() {\n    return Boolean(this.options.config.testing\n        && this.options.config.testing.p2pTestMode);\n};\n\n/**\n * Leaves the conference.\n * @param reason {string|undefined} The reason for leaving the conference.\n * @returns {Promise}\n */\nJitsiConference.prototype.leave = async function(reason) {\n    if (this.participantConnectionStatus) {\n        this.participantConnectionStatus.dispose();\n        this.participantConnectionStatus = null;\n    }\n    if (this.avgRtpStatsReporter) {\n        this.avgRtpStatsReporter.dispose();\n        this.avgRtpStatsReporter = null;\n    }\n\n    if (this._audioOutputProblemDetector) {\n        this._audioOutputProblemDetector.dispose();\n        this._audioOutputProblemDetector = null;\n    }\n\n    if (this.e2eping) {\n        this.e2eping.stop();\n        this.e2eping = null;\n    }\n\n    this.getLocalTracks().forEach(track => this.onLocalTrackRemoved(track));\n\n    this.rtc.closeBridgeChannel();\n\n    this._sendConferenceLeftAnalyticsEvent();\n\n    if (this.statistics) {\n        this.statistics.dispose();\n    }\n\n    this._delayedIceFailed && this._delayedIceFailed.cancel();\n\n    this._maybeClearSITimeout();\n\n    // Close both JVb and P2P JingleSessions\n    if (this.jvbJingleSession) {\n        this.jvbJingleSession.close();\n        this.jvbJingleSession = null;\n    }\n    if (this.p2pJingleSession) {\n        this.p2pJingleSession.close();\n        this.p2pJingleSession = null;\n    }\n\n    // Leave the conference. If this.room == null we are calling second time leave().\n    if (!this.room) {\n        throw new Error('You have already left the conference');\n    }\n\n    const room = this.room;\n\n    // Unregister connection state listeners\n    room.removeListener(\n        XMPPEvents.CONNECTION_INTERRUPTED,\n        this._onIceConnectionInterrupted);\n    room.removeListener(\n        XMPPEvents.CONNECTION_RESTORED,\n        this._onIceConnectionRestored);\n    room.removeListener(\n        XMPPEvents.CONNECTION_ESTABLISHED,\n        this._onIceConnectionEstablished);\n\n    room.removeListener(\n        XMPPEvents.CONFERENCE_PROPERTIES_CHANGED,\n        this._updateProperties);\n\n    room.removeListener(XMPPEvents.MEETING_ID_SET, this._sendConferenceJoinAnalyticsEvent);\n    room.removeListener(XMPPEvents.SESSION_ACCEPT, this._updateRoomPresence);\n    room.removeListener(XMPPEvents.SOURCE_ADD, this._updateRoomPresence);\n    room.removeListener(XMPPEvents.SOURCE_ADD_ERROR, this._removeLocalSourceOnReject);\n    room.removeListener(XMPPEvents.SOURCE_REMOVE, this._updateRoomPresence);\n\n    this.eventManager.removeXMPPListeners();\n\n    this._signalingLayer.setChatRoom(null);\n\n    this.room = null;\n\n    let leaveError;\n\n    try {\n        await room.leave(reason);\n    } catch (err) {\n        leaveError = err;\n\n        // Remove all participants because currently the conference\n        // won't be usable anyway. This is done on success automatically\n        // by the ChatRoom instance.\n        this.getParticipants().forEach(\n            participant => this.onMemberLeft(participant.getJid()));\n    }\n\n    if (this.rtc) {\n        this.rtc.destroy();\n    }\n\n    if (leaveError) {\n        throw leaveError;\n    }\n};\n\n/**\n * Returns the currently active media session if any.\n *\n * @returns {JingleSessionPC|undefined}\n */\nJitsiConference.prototype.getActiveMediaSession = function() {\n    return this.isP2PActive() ? this.p2pJingleSession : this.jvbJingleSession;\n};\n\n/**\n * Returns an array containing all media sessions existing in this conference.\n *\n * @returns {Array<JingleSessionPC>}\n */\nJitsiConference.prototype.getMediaSessions = function() {\n    const sessions = [];\n\n    this.jvbJingleSession && sessions.push(this.jvbJingleSession);\n    this.p2pJingleSession && sessions.push(this.p2pJingleSession);\n\n    return sessions;\n};\n\n/**\n * Registers event listeners on the RTC instance.\n * @param {RTC} rtc - the RTC module instance used by this conference.\n * @private\n * @returns {void}\n */\nJitsiConference.prototype._registerRtcListeners = function(rtc) {\n    rtc.addListener(RTCEvents.DATA_CHANNEL_OPEN, () => {\n        for (const localTrack of this.rtc.localTracks) {\n            localTrack.isVideoTrack() && this._sendBridgeVideoTypeMessage(localTrack);\n        }\n    });\n};\n\n/**\n * Sends the 'VideoTypeMessage' to the bridge on the bridge channel so that the bridge can make bitrate allocation\n * decisions based on the video type of the local source.\n *\n * @param {JitsiLocalTrack} localtrack - The track associated with the local source signaled to the bridge.\n * @returns {void}\n * @private\n */\nJitsiConference.prototype._sendBridgeVideoTypeMessage = function(localtrack) {\n    let videoType = !localtrack || localtrack.isMuted() ? BridgeVideoType.NONE : localtrack.getVideoType();\n\n    if (videoType === BridgeVideoType.DESKTOP && this._desktopSharingFrameRate > SS_DEFAULT_FRAME_RATE) {\n        videoType = BridgeVideoType.DESKTOP_HIGH_FPS;\n    }\n\n    if (FeatureFlags.isSourceNameSignalingEnabled() && localtrack) {\n        this.rtc.sendSourceVideoType(localtrack.getSourceName(), videoType);\n    } else if (!FeatureFlags.isSourceNameSignalingEnabled()) {\n        this.rtc.setVideoType(videoType);\n    }\n};\n\n/**\n * Returns name of this conference.\n */\nJitsiConference.prototype.getName = function() {\n    return this.options.name.toString();\n};\n\n/**\n * Returns the {@link JitsiConnection} used by this this conference.\n */\nJitsiConference.prototype.getConnection = function() {\n    return this.connection;\n};\n\n/**\n * Check if authentication is enabled for this conference.\n */\nJitsiConference.prototype.isAuthEnabled = function() {\n    return this.authEnabled;\n};\n\n/**\n * Check if user is logged in.\n */\nJitsiConference.prototype.isLoggedIn = function() {\n    return Boolean(this.authIdentity);\n};\n\n/**\n * Get authorized login.\n */\nJitsiConference.prototype.getAuthLogin = function() {\n    return this.authIdentity;\n};\n\n/**\n * Check if external authentication is enabled for this conference.\n */\nJitsiConference.prototype.isExternalAuthEnabled = function() {\n    return this.room && this.room.moderator.isExternalAuthEnabled();\n};\n\n/**\n * Get url for external authentication.\n * @param {boolean} [urlForPopup] if true then return url for login popup,\n *                                else url of login page.\n * @returns {Promise}\n */\nJitsiConference.prototype.getExternalAuthUrl = function(urlForPopup) {\n    return new Promise((resolve, reject) => {\n        if (!this.isExternalAuthEnabled()) {\n            reject();\n\n            return;\n        }\n        if (urlForPopup) {\n            this.room.moderator.getPopupLoginUrl(resolve, reject);\n        } else {\n            this.room.moderator.getLoginUrl(resolve, reject);\n        }\n    });\n};\n\n/**\n * Returns the local tracks of the given media type, or all local tracks if no\n * specific type is given.\n * @param {MediaType} [mediaType] Optional media type (audio or video).\n */\nJitsiConference.prototype.getLocalTracks = function(mediaType) {\n    let tracks = [];\n\n    if (this.rtc) {\n        tracks = this.rtc.getLocalTracks(mediaType);\n    }\n\n    return tracks;\n};\n\n/**\n * Obtains local audio track.\n * @return {JitsiLocalTrack|null}\n */\nJitsiConference.prototype.getLocalAudioTrack = function() {\n    return this.rtc ? this.rtc.getLocalAudioTrack() : null;\n};\n\n/**\n * Obtains local video track.\n * @return {JitsiLocalTrack|null}\n */\nJitsiConference.prototype.getLocalVideoTrack = function() {\n    return this.rtc ? this.rtc.getLocalVideoTrack() : null;\n};\n\n/**\n * Returns all the local video tracks.\n * @returns {Array<JitsiLocalTrack>}\n */\nJitsiConference.prototype.getLocalVideoTracks = function() {\n    return this.rtc ? this.rtc.getLocalVideoTracks() : null;\n};\n\n/**\n * Obtains the performance statistics.\n * @returns {Object|null}\n */\nJitsiConference.prototype.getPerformanceStats = function() {\n    return {\n        longTasksStats: this.statistics.getLongTasksStats()\n    };\n};\n\n/**\n * Attaches a handler for events(For example - \"participant joined\".) in the\n * conference. All possible event are defined in JitsiConferenceEvents.\n * @param eventId the event ID.\n * @param handler handler for the event.\n *\n * Note: consider adding eventing functionality by extending an EventEmitter\n * impl, instead of rolling ourselves\n */\nJitsiConference.prototype.on = function(eventId, handler) {\n    if (this.eventEmitter) {\n        this.eventEmitter.on(eventId, handler);\n    }\n};\n\n/**\n * Removes event listener\n * @param eventId the event ID.\n * @param [handler] optional, the specific handler to unbind\n *\n * Note: consider adding eventing functionality by extending an EventEmitter\n * impl, instead of rolling ourselves\n */\nJitsiConference.prototype.off = function(eventId, handler) {\n    if (this.eventEmitter) {\n        this.eventEmitter.removeListener(eventId, handler);\n    }\n};\n\n// Common aliases for event emitter\nJitsiConference.prototype.addEventListener = JitsiConference.prototype.on;\nJitsiConference.prototype.removeEventListener = JitsiConference.prototype.off;\n\n/**\n * Receives notifications from other participants about commands / custom events\n * (sent by sendCommand or sendCommandOnce methods).\n * @param command {String} the name of the command\n * @param handler {Function} handler for the command\n */\nJitsiConference.prototype.addCommandListener = function(command, handler) {\n    if (this.room) {\n        this.room.addPresenceListener(command, handler);\n    }\n};\n\n/**\n  * Removes command  listener\n  * @param command {String} the name of the command\n  * @param handler {Function} handler to remove for the command\n  */\nJitsiConference.prototype.removeCommandListener = function(command, handler) {\n    if (this.room) {\n        this.room.removePresenceListener(command, handler);\n    }\n};\n\n/**\n * Sends text message to the other participants in the conference\n * @param message the text message.\n * @param elementName the element name to encapsulate the message.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.sendTextMessage = function(message, elementName = 'body') {\n    if (this.room) {\n        this.room.sendMessage(message, elementName);\n    }\n};\n\n/**\n * Send private text message to another participant of the conference\n * @param id the id of the participant to send a private message.\n * @param message the text message.\n * @param elementName the element name to encapsulate the message.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.sendPrivateTextMessage = function(id, message, elementName = 'body') {\n    if (this.room) {\n        this.room.sendPrivateMessage(id, message, elementName);\n    }\n};\n\n/**\n * Send presence command.\n * @param name {String} the name of the command.\n * @param values {Object} with keys and values that will be sent.\n **/\nJitsiConference.prototype.sendCommand = function(name, values) {\n    if (this.room) {\n        this.room.addOrReplaceInPresence(name, values) && this.room.sendPresence();\n    } else {\n        logger.warn('Not sending a command, room not initialized.');\n    }\n\n};\n\n/**\n * Send presence command one time.\n * @param name {String} the name of the command.\n * @param values {Object} with keys and values that will be sent.\n **/\nJitsiConference.prototype.sendCommandOnce = function(name, values) {\n    this.sendCommand(name, values);\n    this.removeCommand(name);\n};\n\n/**\n * Removes presence command.\n * @param name {String} the name of the command.\n **/\nJitsiConference.prototype.removeCommand = function(name) {\n    if (this.room) {\n        this.room.removeFromPresence(name);\n    }\n};\n\n/**\n * Sets the display name for this conference.\n * @param name the display name to set\n */\nJitsiConference.prototype.setDisplayName = function(name) {\n    if (this.room) {\n        const nickKey = 'nick';\n\n        // if there is no display name already set, avoid setting an empty one\n        if (!name && !this.room.getFromPresence(nickKey)) {\n            return;\n        }\n\n        this.room.addOrReplaceInPresence(nickKey, {\n            attributes: { xmlns: 'http://jabber.org/protocol/nick' },\n            value: name\n        }) && this.room.sendPresence();\n    }\n};\n\n/**\n * Set new subject for this conference. (available only for moderator)\n * @param {string} subject new subject\n */\nJitsiConference.prototype.setSubject = function(subject) {\n    if (this.room && this.isModerator()) {\n        this.room.setSubject(subject);\n    } else {\n        logger.warn(`Failed to set subject, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator'}`);\n    }\n};\n\n/**\n * Get a transcriber object for all current participants in this conference\n * @return {Transcriber} the transcriber object\n */\nJitsiConference.prototype.getTranscriber = function() {\n    if (this.transcriber === undefined) {\n        this.transcriber = new Transcriber();\n\n        // add all existing local audio tracks to the transcriber\n        const localAudioTracks = this.getLocalTracks(MediaType.AUDIO);\n\n        for (const localAudio of localAudioTracks) {\n            this.transcriber.addTrack(localAudio);\n        }\n\n        // and all remote audio tracks\n        const remoteAudioTracks = this.rtc.getRemoteTracks(MediaType.AUDIO);\n\n        for (const remoteTrack of remoteAudioTracks) {\n            this.transcriber.addTrack(remoteTrack);\n        }\n    }\n\n    return this.transcriber;\n};\n\n/**\n * Returns the transcription status.\n *\n * @returns {String} \"on\" or \"off\".\n */\nJitsiConference.prototype.getTranscriptionStatus = function() {\n    return this.room.transcriptionStatus;\n};\n\n/**\n * Adds JitsiLocalTrack object to the conference.\n * @param {JitsiLocalTrack} track the JitsiLocalTrack object.\n * @returns {Promise<JitsiLocalTrack>}\n * @throws {Error} if the specified track is a video track and there is already\n * another video track in the conference.\n */\nJitsiConference.prototype.addTrack = function(track) {\n    if (!track) {\n        return;\n    }\n    if (track.isAudioTrack() && this.options.config.startAudioMuted) {\n        track.mute();\n    }\n    if (track.isVideoTrack() && this.options.config.startVideoMuted) {\n        track.mute();\n    }\n    const mediaType = track.getType();\n    const localTracks = this.rtc.getLocalTracks(mediaType);\n\n    // Ensure there's exactly 1 local track of each media type in the conference.\n    if (localTracks.length > 0) {\n        // Don't be excessively harsh and severe if the API client happens to attempt to add the same local track twice.\n        if (track === localTracks[0]) {\n            return Promise.resolve(track);\n        }\n\n        if (FeatureFlags.isMultiStreamSupportEnabled() && mediaType === MediaType.VIDEO) {\n            const sourceName = getSourceNameForJitsiTrack(\n                this.myUserId(),\n                mediaType,\n                this.getLocalTracks(mediaType)?.length);\n\n            track.setSourceName(sourceName);\n            const addTrackPromises = [];\n\n            this.p2pJingleSession && addTrackPromises.push(this.p2pJingleSession.addTracks([ track ]));\n            this.jvbJingleSession && addTrackPromises.push(this.jvbJingleSession.addTracks([ track ]));\n\n            return Promise.all(addTrackPromises)\n                .then(() => {\n                    this._setupNewTrack(track);\n                    this._sendBridgeVideoTypeMessage(track);\n                    this._updateRoomPresence(this.getActiveMediaSession());\n\n                    if (this.isMutedByFocus || this.isVideoMutedByFocus) {\n                        this._fireMuteChangeEvent(track);\n                    }\n                });\n        }\n\n        return Promise.reject(new Error(`Cannot add second ${mediaType} track to the conference`));\n    }\n\n    return this.replaceTrack(null, track)\n        .then(() => {\n            // Presence needs to be sent here for desktop track since we need the presence to reach the remote peer\n            // before signaling so that a fake participant tile is created for screenshare. Otherwise, presence will\n            // only be sent after a session-accept or source-add is ack'ed.\n            if (track.getVideoType() === VideoType.DESKTOP && FeatureFlags.isMultiStreamSupportEnabled()) {\n                this._updateRoomPresence(this.getActiveMediaSession());\n            }\n        });\n};\n\n/**\n * Fires TRACK_AUDIO_LEVEL_CHANGED change conference event (for local tracks).\n * @param {number} audioLevel the audio level\n * @param {TraceablePeerConnection} [tpc]\n */\nJitsiConference.prototype._fireAudioLevelChangeEvent = function(audioLevel, tpc) {\n    const activeTpc = this.getActivePeerConnection();\n\n    // There will be no TraceablePeerConnection if audio levels do not come from\n    // a peerconnection. LocalStatsCollector.js measures audio levels using Web\n    // Audio Analyser API and emits local audio levels events through\n    // JitsiTrack.setAudioLevel, but does not provide TPC instance which is\n    // optional.\n    if (!tpc || activeTpc === tpc) {\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED,\n            this.myUserId(), audioLevel);\n    }\n};\n\n/**\n * Fires TRACK_MUTE_CHANGED change conference event.\n * @param track the JitsiTrack object related to the event.\n */\nJitsiConference.prototype._fireMuteChangeEvent = function(track) {\n    // check if track was muted by focus and now is unmuted by user\n    if (this.isMutedByFocus && track.isAudioTrack() && !track.isMuted()) {\n        this.isMutedByFocus = false;\n\n        // unmute local user on server\n        this.room.muteParticipant(this.room.myroomjid, false, MediaType.AUDIO);\n    } else if (this.isVideoMutedByFocus && track.isVideoTrack() && !track.isMuted()) {\n        this.isVideoMutedByFocus = false;\n\n        // unmute local user on server\n        this.room.muteParticipant(this.room.myroomjid, false, MediaType.VIDEO);\n    }\n\n    let actorParticipant;\n\n    if (this.mutedByFocusActor && track.isAudioTrack()) {\n        const actorId = Strophe.getResourceFromJid(this.mutedByFocusActor);\n\n        actorParticipant = this.participants[actorId];\n    } else if (this.mutedVideoByFocusActor && track.isVideoTrack()) {\n        const actorId = Strophe.getResourceFromJid(this.mutedVideoByFocusActor);\n\n        actorParticipant = this.participants[actorId];\n    }\n\n    // Send the video type message to the bridge if the track is not removed/added to the pc as part of\n    // the mute/unmute operation. This currently happens only on Firefox.\n    if (track.isVideoTrack() && !browser.doesVideoMuteByStreamRemove()) {\n        this._sendBridgeVideoTypeMessage(track);\n    }\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_MUTE_CHANGED, track, actorParticipant);\n};\n\n/**\n * Returns the list of local tracks that need to be added to the peerconnection on join.\n * This takes the startAudioMuted/startVideoMuted flags into consideration since we do not\n * want to add the tracks if the user joins the call audio/video muted. The tracks will be\n * added when the user unmutes for the first time.\n * @returns {Array<JitsiLocalTrack>} - list of local tracks that are unmuted.\n */\nJitsiConference.prototype._getInitialLocalTracks = function() {\n    // Always add the audio track on certain platforms:\n    //  * Safari / WebKit: because of a known issue where audio playout doesn't happen\n    //    if the user joins audio and video muted.\n    //  * React Native: after iOS 15, if a user joins muted they won't be able to unmute.\n    return this.getLocalTracks()\n        .filter(track => {\n            const trackType = track.getType();\n\n            if (trackType === MediaType.AUDIO\n                    && (!this.isStartAudioMuted() || browser.isWebKitBased() || browser.isReactNative())) {\n                return true;\n            } else if (trackType === MediaType.VIDEO && !this.isStartVideoMuted()) {\n                return true;\n            }\n\n            return false;\n        });\n};\n\n/**\n * Clear JitsiLocalTrack properties and listeners.\n * @param track the JitsiLocalTrack object.\n */\nJitsiConference.prototype.onLocalTrackRemoved = function(track) {\n    track.setConference(null);\n    this.rtc.removeLocalTrack(track);\n    track.removeEventListener(JitsiTrackEvents.TRACK_MUTE_CHANGED, track.muteHandler);\n    if (track.isAudioTrack()) {\n        track.removeEventListener(JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED, track.audioLevelHandler);\n    }\n\n    // send event for stopping screen sharing\n    // FIXME: we assume we have only one screen sharing track\n    // if we change this we need to fix this check\n    if (track.isVideoTrack() && track.videoType === VideoType.DESKTOP) {\n        this.statistics.sendScreenSharingEvent(false);\n    }\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_REMOVED, track);\n};\n\n/**\n * Removes JitsiLocalTrack from the conference and performs\n * a new offer/answer cycle.\n * @param {JitsiLocalTrack} track\n * @returns {Promise}\n */\nJitsiConference.prototype.removeTrack = function(track) {\n    return this.replaceTrack(track, null);\n};\n\n/**\n * Replaces oldTrack with newTrack and performs a single offer/answer\n *  cycle after both operations are done.  Either oldTrack or newTrack\n *  can be null; replacing a valid 'oldTrack' with a null 'newTrack'\n *  effectively just removes 'oldTrack'\n * @param {JitsiLocalTrack} oldTrack the current stream in use to be replaced\n * @param {JitsiLocalTrack} newTrack the new stream to use\n * @returns {Promise} resolves when the replacement is finished\n */\nJitsiConference.prototype.replaceTrack = function(oldTrack, newTrack) {\n    const oldVideoType = oldTrack?.getVideoType();\n    const mediaType = oldTrack?.getType() || newTrack?.getType();\n    const newVideoType = newTrack?.getVideoType();\n\n    if (FeatureFlags.isMultiStreamSupportEnabled() && oldTrack && newTrack && oldVideoType !== newVideoType) {\n        throw new Error(`Replacing a track of videoType=${oldVideoType} with a track of videoType=${newVideoType} is`\n            + ' not supported in this mode.');\n    }\n\n    if (FeatureFlags.isSourceNameSignalingEnabled() && newTrack) {\n        if (oldTrack) {\n            newTrack.setSourceName(oldTrack.getSourceName());\n        } else {\n            const sourceName = getSourceNameForJitsiTrack(\n                this.myUserId(),\n                mediaType,\n                this.getLocalTracks(mediaType)?.length);\n\n            newTrack.setSourceName(sourceName);\n        }\n    }\n    const oldTrackBelongsToConference = this === oldTrack?.conference;\n\n    if (oldTrackBelongsToConference && oldTrack.disposed) {\n        return Promise.reject(new JitsiTrackError(JitsiTrackErrors.TRACK_IS_DISPOSED));\n    }\n    if (newTrack?.disposed) {\n        return Promise.reject(new JitsiTrackError(JitsiTrackErrors.TRACK_IS_DISPOSED));\n    }\n\n    if (oldTrack && !oldTrackBelongsToConference) {\n        logger.warn(`JitsiConference.replaceTrack oldTrack (${oldTrack} does not belong to this conference`);\n    }\n\n    // Now replace the stream at the lower levels\n    return this._doReplaceTrack(oldTrackBelongsToConference ? oldTrack : null, newTrack)\n        .then(() => {\n            oldTrackBelongsToConference && this.onLocalTrackRemoved(oldTrack);\n            newTrack && this._setupNewTrack(newTrack);\n\n            // Send 'VideoTypeMessage' on the bridge channel when a video track is added/removed.\n            if ((oldTrackBelongsToConference && oldTrack?.isVideoTrack()) || newTrack?.isVideoTrack()) {\n                this._sendBridgeVideoTypeMessage(newTrack);\n            }\n            this._updateRoomPresence(this.getActiveMediaSession());\n            if (newTrack !== null && (this.isMutedByFocus || this.isVideoMutedByFocus)) {\n                this._fireMuteChangeEvent(newTrack);\n            }\n\n            return Promise.resolve();\n        })\n        .catch(error => {\n            logger.error(`replaceTrack failed: ${error?.stack}`);\n\n            return Promise.reject(error);\n        });\n};\n\n/**\n * Replaces the tracks at the lower level by going through the Jingle session\n * and WebRTC peer connection. The method will resolve immediately if there is\n * currently no JingleSession started.\n * @param {JitsiLocalTrack|null} oldTrack the track to be removed during\n * the process or <tt>null</t> if the method should act as \"add track\"\n * @param {JitsiLocalTrack|null} newTrack the new track to be added or\n * <tt>null</tt> if the method should act as \"remove track\"\n * @return {Promise} resolved when the process is done or rejected with a string\n * which describes the error.\n * @private\n */\nJitsiConference.prototype._doReplaceTrack = function(oldTrack, newTrack) {\n    const replaceTrackPromises = [];\n\n    if (this.jvbJingleSession) {\n        replaceTrackPromises.push(this.jvbJingleSession.replaceTrack(oldTrack, newTrack));\n    } else {\n        logger.info('_doReplaceTrack - no JVB JingleSession');\n    }\n\n    if (this.p2pJingleSession) {\n        replaceTrackPromises.push(this.p2pJingleSession.replaceTrack(oldTrack, newTrack));\n    } else {\n        logger.info('_doReplaceTrack - no P2P JingleSession');\n    }\n\n    return Promise.all(replaceTrackPromises);\n};\n\n/**\n * Handler for when a source-add for a local source is rejected by Jicofo.\n *\n * @param {JingleSessionPC} jingleSession - The media session.\n * @param {Error} error - The error message.\n * @param {MediaType} mediaType - The media type of the track associated with the source that was rejected.\n * @returns {void}\n */\nJitsiConference.prototype._removeLocalSourceOnReject = function(jingleSession, error, mediaType) {\n    if (!jingleSession) {\n        return;\n    }\n    logger.warn(`Source-add rejected on ${jingleSession}, reason=\"${error?.reason}\", message=\"${error?.msg}\"`);\n    const track = this.getLocalTracks(mediaType)[0];\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_UNMUTE_REJECTED, track);\n};\n\n/**\n * Operations related to creating a new track\n * @param {JitsiLocalTrack} newTrack the new track being created\n */\nJitsiConference.prototype._setupNewTrack = function(newTrack) {\n    const mediaType = newTrack.getType();\n\n    if (newTrack.isAudioTrack() || (newTrack.isVideoTrack() && newTrack.videoType !== VideoType.DESKTOP)) {\n        // Report active device to statistics\n        const devices = RTC.getCurrentlyAvailableMediaDevices();\n        const device = devices\n            .find(d => d.kind === `${newTrack.getTrack().kind}input` && d.label === newTrack.getTrack().label);\n\n        if (device) {\n            Statistics.sendActiveDeviceListEvent(RTC.getEventDataForActiveDevice(device));\n        }\n    }\n\n    // Create a source name for this track if it doesn't exist.\n    if (FeatureFlags.isSourceNameSignalingEnabled() && !newTrack.getSourceName()) {\n        const sourceName = getSourceNameForJitsiTrack(\n            this.myUserId(),\n            mediaType,\n            this.getLocalTracks(mediaType)?.length);\n\n        newTrack.setSourceName(sourceName);\n    }\n\n    this.rtc.addLocalTrack(newTrack);\n    newTrack.setConference(this);\n\n    // Add event handlers.\n    newTrack.muteHandler = this._fireMuteChangeEvent.bind(this, newTrack);\n    newTrack.addEventListener(JitsiTrackEvents.TRACK_MUTE_CHANGED, newTrack.muteHandler);\n\n    if (newTrack.isAudioTrack()) {\n        newTrack.audioLevelHandler = this._fireAudioLevelChangeEvent.bind(this);\n        newTrack.addEventListener(JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED, newTrack.audioLevelHandler);\n    }\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_ADDED, newTrack);\n};\n\n/**\n * Sets the video type.\n * @param track\n * @return <tt>true</tt> if video type was changed in presence.\n * @private\n */\nJitsiConference.prototype._setNewVideoType = function(track) {\n    let videoTypeChanged = false;\n\n    if (FeatureFlags.isSourceNameSignalingEnabled() && track) {\n        videoTypeChanged = this._signalingLayer.setTrackVideoType(track.getSourceName(), track.videoType);\n    }\n\n    if (!FeatureFlags.isMultiStreamSupportEnabled()) {\n        const videoTypeTagName = 'videoType';\n\n        // If track is missing we revert to default type Camera, the case where we screenshare and\n        // we return to be video muted.\n        const trackVideoType = track ? track.videoType : VideoType.CAMERA;\n\n        // If video type is camera and there is no videoType in presence, we skip adding it, as this is the default one\n        if (trackVideoType !== VideoType.CAMERA || this.room.getFromPresence(videoTypeTagName)) {\n            // We will not use this.sendCommand here to avoid sending the presence immediately, as later we may also\n            // set the mute status.\n            const legacyTypeChanged = this.room.addOrReplaceInPresence(videoTypeTagName, { value: trackVideoType });\n\n            videoTypeChanged = videoTypeChanged || legacyTypeChanged;\n        }\n    }\n\n    return videoTypeChanged;\n};\n\n/**\n * Sets mute status.\n * @param mediaType\n * @param localTrack\n * @param isMuted\n * @param <tt>true</tt> when presence was changed, <tt>false</tt> otherwise.\n * @private\n */\nJitsiConference.prototype._setTrackMuteStatus = function(mediaType, localTrack, isMuted) {\n    let presenceChanged = false;\n\n    if (FeatureFlags.isSourceNameSignalingEnabled() && localTrack) {\n        presenceChanged = this._signalingLayer.setTrackMuteStatus(localTrack.getSourceName(), isMuted);\n    }\n\n    // Add the 'audioMuted' and 'videoMuted' tags when source name signaling is enabled for backward compatibility.\n    // It won't be used anymore when multiple stream support is enabled.\n    if (!FeatureFlags.isMultiStreamSupportEnabled()) {\n        let audioMuteChanged, videoMuteChanged;\n\n        if (!this.room) {\n            return false;\n        }\n\n        if (mediaType === MediaType.AUDIO) {\n            audioMuteChanged = this.room.addAudioInfoToPresence(isMuted);\n        } else {\n            videoMuteChanged = this.room.addVideoInfoToPresence(isMuted);\n        }\n\n        presenceChanged = presenceChanged || audioMuteChanged || videoMuteChanged;\n    }\n\n    return presenceChanged;\n};\n\n/**\n * Method called by the {@link JitsiLocalTrack} in order to add the underlying MediaStream to the RTCPeerConnection.\n *\n * @param {JitsiLocalTrack} track the local track that will be added to the pc.\n * @return {Promise} resolved when the process is done or rejected with a string which describes the error.\n */\nJitsiConference.prototype._addLocalTrackToPc = function(track) {\n    const addPromises = [];\n\n    if (this.jvbJingleSession) {\n        addPromises.push(this.jvbJingleSession.addTrackToPc(track));\n    } else {\n        logger.debug('Add local MediaStream - no JVB Jingle session started yet');\n    }\n\n    if (this.p2pJingleSession) {\n        addPromises.push(this.p2pJingleSession.addTrackToPc(track));\n    } else {\n        logger.debug('Add local MediaStream - no P2P Jingle session started yet');\n    }\n\n    return Promise.allSettled(addPromises);\n};\n\n/**\n * Method called by the {@link JitsiLocalTrack} in order to remove the underlying MediaStream from the\n * RTCPeerConnection.\n *\n * @param {JitsiLocalTrack} track the local track that will be removed.\n * @return {Promise} resolved when the process is done or rejected with a string which describes the error.\n */\nJitsiConference.prototype._removeLocalTrackFromPc = function(track) {\n    const removePromises = [];\n\n    if (this.jvbJingleSession) {\n        removePromises.push(this.jvbJingleSession.removeTrackFromPc(track));\n    } else {\n        logger.debug('Remove local MediaStream - no JVB JingleSession started yet');\n    }\n    if (this.p2pJingleSession) {\n        removePromises.push(this.p2pJingleSession.removeTrackFromPc(track));\n    } else {\n        logger.debug('Remove local MediaStream - no P2P JingleSession started yet');\n    }\n\n    return Promise.allSettled(removePromises);\n};\n\n/**\n * Get role of the local user.\n * @returns {string} user role: 'moderator' or 'none'\n */\nJitsiConference.prototype.getRole = function() {\n    return this.room.role;\n};\n\n/**\n * Returns whether or not the current conference has been joined as a hidden\n * user.\n *\n * @returns {boolean|null} True if hidden, false otherwise. Will return null if\n * no connection is active.\n */\nJitsiConference.prototype.isHidden = function() {\n    if (!this.connection) {\n        return null;\n    }\n\n    return Strophe.getDomainFromJid(this.connection.getJid())\n        === this.options.config.hiddenDomain;\n};\n\n/**\n * Check if local user is moderator.\n * @returns {boolean|null} true if local user is moderator, false otherwise. If\n * we're no longer in the conference room then <tt>null</tt> is returned.\n */\nJitsiConference.prototype.isModerator = function() {\n    return this.room ? this.room.isModerator() : null;\n};\n\n/**\n * Set password for the room.\n * @param {string} password new password for the room.\n * @returns {Promise}\n */\nJitsiConference.prototype.lock = function(password) {\n    if (!this.isModerator()) {\n        return Promise.reject(new Error('You are not moderator.'));\n    }\n\n    return new Promise((resolve, reject) => {\n        this.room.lockRoom(\n            password || '',\n            () => resolve(),\n            err => reject(err),\n            () => reject(JitsiConferenceErrors.PASSWORD_NOT_SUPPORTED));\n    });\n};\n\n/**\n * Remove password from the room.\n * @returns {Promise}\n */\nJitsiConference.prototype.unlock = function() {\n    return this.lock();\n};\n\n/**\n * Elects the participant with the given id to be the selected participant in\n * order to receive higher video quality (if simulcast is enabled).\n * Or cache it if channel is not created and send it once channel is available.\n * @param participantId the identifier of the participant\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\n * @returns {void}\n */\nJitsiConference.prototype.selectParticipant = function(participantId) {\n    this.selectParticipants([ participantId ]);\n};\n\n/*\n * Elects participants with given ids to be the selected participants in order\n * to receive higher video quality (if simulcast is enabled). The argument\n * should be an array of participant id strings or an empty array; an error will\n * be thrown if a non-array is passed in. The error is thrown as a layer of\n * protection against passing an invalid argument, as the error will happen in\n * the bridge and may not be visible in the client.\n *\n * @param {Array<strings>} participantIds - An array of identifiers for\n * participants.\n * @returns {void}\n */\nJitsiConference.prototype.selectParticipants = function(participantIds) {\n    if (!Array.isArray(participantIds)) {\n        throw new Error('Invalid argument; participantIds must be an array.');\n    }\n\n    this.receiveVideoController.selectEndpoints(participantIds);\n};\n\n/**\n * Obtains the current value for \"lastN\". See {@link setLastN} for more info.\n * @returns {number}\n */\nJitsiConference.prototype.getLastN = function() {\n    return this.receiveVideoController.getLastN();\n};\n\n/**\n * Obtains the forwarded sources list in this conference.\n * @return {Array<string>|null}\n */\nJitsiConference.prototype.getForwardedSources = function() {\n    return this.rtc.getForwardedSources();\n};\n\n/**\n * Selects a new value for \"lastN\". The requested amount of videos are going\n * to be delivered after the value is in effect. Set to -1 for unlimited or\n * all available videos.\n * @param lastN the new number of videos the user would like to receive.\n * @throws Error or RangeError if the given value is not a number or is smaller\n * than -1.\n */\nJitsiConference.prototype.setLastN = function(lastN) {\n    if (!Number.isInteger(lastN) && !Number.parseInt(lastN, 10)) {\n        throw new Error(`Invalid value for lastN: ${lastN}`);\n    }\n    const n = Number(lastN);\n\n    if (n < -1) {\n        throw new RangeError('lastN cannot be smaller than -1');\n    }\n    this.receiveVideoController.setLastN(n);\n\n    // If the P2P session is not fully established yet, we wait until it gets\n    // established.\n    if (this.p2pJingleSession) {\n        const isVideoActive = n !== 0;\n\n        this.p2pJingleSession\n            .setMediaTransferActive(true, isVideoActive)\n            .catch(error => {\n                logger.error(\n                    `Failed to adjust video transfer status (${isVideoActive})`,\n                    error);\n            });\n    }\n};\n\n/**\n * Checks if the participant given by participantId is currently included in\n * the last N.\n * @param {string} participantId the identifier of the participant we would\n * like to check.\n * @return {boolean} true if the participant with id is in the last N set or\n * if there's no last N set, false otherwise.\n * @deprecated this method should never be used to figure out the UI, but\n * {@link ParticipantConnectionStatus} should be used instead.\n */\nJitsiConference.prototype.isInLastN = function(participantId) {\n    return this.rtc.isInLastN(participantId);\n};\n\n/**\n * @return Array<JitsiParticipant> an array of all participants in this\n * conference.\n */\nJitsiConference.prototype.getParticipants = function() {\n    return Object.values(this.participants);\n};\n\n\n/**\n * @return Array<JitsiParticipant> an array of all participants in this\n * conference.\n */\n JitsiConference.prototype.getParticipantsWithoutHidden = function() {\n    let participants = this.getParticipants().filter(participant => !participant._hidden);\n\n    participants = participants.filter(participant => !participant?._properties?.features_jigasi);\n\n    return participants;\n};\n\n\n/**\n * Returns the number of participants in the conference, including the local\n * participant.\n * @param countHidden {boolean} Whether or not to include hidden participants\n * in the count. Default: false.\n **/\nJitsiConference.prototype.getParticipantCount = function(countHidden = false) {\n    let participants = this.getParticipants();\n\n    if (!countHidden) {\n        participants = participants.filter(p => !p.isHidden());\n    }\n\n    // Add one for the local participant.\n    return participants.length + 1;\n};\n\n/**\n * @returns {JitsiParticipant} the participant in this conference with the\n * specified id (or undefined if there isn't one).\n * @param id the id of the participant.\n */\nJitsiConference.prototype.getParticipantById = function(id) {\n    return this.participants[id];\n};\n\n/**\n * Grant owner rights to the participant.\n * @param {string} id id of the participant to grant owner rights to.\n */\nJitsiConference.prototype.grantOwner = function(id) {\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    this.room.setAffiliation(participant.getConnectionJid(), 'owner');\n};\n\n/**\n * Revoke owner rights to the participant or local Participant as\n * the user might want to refuse to be a moderator.\n * @param {string} id id of the participant to revoke owner rights to.\n */\nJitsiConference.prototype.revokeOwner = function(id) {\n    const participant = this.getParticipantById(id);\n    const isMyself = this.myUserId() === id;\n    const role = this.isMembersOnly() ? 'member' : 'none';\n\n    if (isMyself) {\n        this.room.setAffiliation(this.connection.getJid(), role);\n    } else if (participant) {\n        this.room.setAffiliation(participant.getConnectionJid(), role);\n    }\n};\n\n/**\n * Kick participant from this conference.\n * @param {string} id id of the participant to kick\n * @param {string} reason reason of the participant to kick\n */\nJitsiConference.prototype.kickParticipant = function(id, reason) {\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    this.room.kick(participant.getJid(), reason);\n};\n\n/**\n * Maybe clears the timeout which emits {@link ACTION_JINGLE_SI_TIMEOUT}\n * analytics event.\n * @private\n */\nJitsiConference.prototype._maybeClearSITimeout = function() {\n    if (this._sessionInitiateTimeout\n            && (this.jvbJingleSession || this.getParticipantCount() < 2)) {\n        window.clearTimeout(this._sessionInitiateTimeout);\n        this._sessionInitiateTimeout = null;\n    }\n};\n\n/**\n * Sets a timeout which will emit {@link ACTION_JINGLE_SI_TIMEOUT} analytics\n * event.\n * @private\n */\nJitsiConference.prototype._maybeSetSITimeout = function() {\n    // Jicofo is supposed to invite if there are at least 2 participants\n    if (!this.jvbJingleSession\n            && this.getParticipantCount() >= 2\n            && !this._sessionInitiateTimeout) {\n        this._sessionInitiateTimeout = window.setTimeout(() => {\n            this._sessionInitiateTimeout = null;\n            Statistics.sendAnalytics(createJingleEvent(\n                ACTION_JINGLE_SI_TIMEOUT,\n                {\n                    p2p: false,\n                    value: JINGLE_SI_TIMEOUT\n                }));\n        }, JINGLE_SI_TIMEOUT);\n    }\n};\n\n/**\n * Mutes a participant.\n * @param {string} id The id of the participant to mute.\n */\nJitsiConference.prototype.muteParticipant = function(id, mediaType) {\n    const muteMediaType = mediaType ? mediaType : MediaType.AUDIO;\n\n    if (muteMediaType !== MediaType.AUDIO && muteMediaType !== MediaType.VIDEO) {\n        logger.error(`Unsupported media type: ${muteMediaType}`);\n\n        return;\n    }\n\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    this.room.muteParticipant(participant.getJid(), true, muteMediaType);\n};\n\n/* eslint-disable max-params */\n\n/**\n * Notifies this JitsiConference that a new member has joined its chat room.\n *\n * FIXME This should NOT be exposed!\n *\n * @param jid the jid of the participant in the MUC\n * @param nick the display name of the participant\n * @param role the role of the participant in the MUC\n * @param isHidden indicates if this is a hidden participant (system\n * participant for example a recorder).\n * @param statsID the participant statsID (optional)\n * @param status the initial status if any\n * @param identity the member identity, if any\n * @param botType the member botType, if any\n * @param fullJid the member full jid, if any\n * @param features the member botType, if any\n * @param isReplaceParticipant whether this join replaces a participant with\n * the same jwt.\n */\nJitsiConference.prototype.onMemberJoined = function(\n        jid, nick, role, isHidden, statsID, status, identity, botType, fullJid, features, isReplaceParticipant) {\n    const id = Strophe.getResourceFromJid(jid);\n\n    if (id === 'focus' || this.myUserId() === id) {\n        return;\n    }\n\n    const participant\n        = new JitsiParticipant(jid, this, nick, isHidden, statsID, status, identity);\n\n    participant.setConnectionJid(fullJid);\n    participant.setRole(role);\n    participant.setBotType(botType);\n    participant.setFeatures(features);\n    participant.setIsReplacing(isReplaceParticipant);\n\n    this.participants[id] = participant;\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.USER_JOINED,\n        id,\n        participant);\n\n    this._updateFeatures(participant);\n\n    // maybeStart only if we had finished joining as then we will have information for the number of participants\n    if (this.isJoined()) {\n        this._maybeStartOrStopP2P();\n    }\n\n    this._maybeSetSITimeout();\n};\n\n/* eslint-enable max-params */\n\n/**\n * Get notified when we joined the room.\n *\n * FIXME This should NOT be exposed!\n *\n * @private\n */\nJitsiConference.prototype._onMucJoined = function() {\n    this._maybeStartOrStopP2P();\n};\n\n/**\n * Updates features for a participant.\n * @param {JitsiParticipant} participant - The participant to query for features.\n * @returns {void}\n * @private\n */\nJitsiConference.prototype._updateFeatures = function(participant) {\n    participant.getFeatures()\n        .then(features => {\n            participant._supportsDTMF = features.has('urn:xmpp:jingle:dtmf:0');\n            this.updateDTMFSupport();\n\n            if (features.has(FEATURE_JIGASI)) {\n                participant.setProperty('features_jigasi', true);\n            }\n\n            if (features.has(FEATURE_E2EE)) {\n                participant.setProperty('features_e2ee', true);\n            }\n        })\n        .catch(() => false);\n};\n\n/**\n * Get notified when member bot type had changed.\n * @param jid the member jid\n * @param botType the new botType value\n * @private\n */\nJitsiConference.prototype._onMemberBotTypeChanged = function(jid, botType) {\n\n    // find the participant and mark it as non bot, as the real one will join\n    // in a moment\n    const peers = this.getParticipants();\n    const botParticipant = peers.find(p => p.getJid() === jid);\n\n    if (botParticipant) {\n        botParticipant.setBotType(botType);\n        const id = Strophe.getResourceFromJid(jid);\n\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.BOT_TYPE_CHANGED,\n            id,\n            botType);\n    }\n\n    // if botType changed to undefined, botType was removed, in case of\n    // poltergeist mode this is the moment when the poltergeist had exited and\n    // the real participant had already replaced it.\n    // In this case we can check and try p2p\n    if (!botParticipant.getBotType()) {\n        this._maybeStartOrStopP2P();\n    }\n};\n\nJitsiConference.prototype.onMemberLeft = function(jid, reason) {\n    const id = Strophe.getResourceFromJid(jid);\n\n    if (id === 'focus' || this.myUserId() === id) {\n        return;\n    }\n\n    const participant = this.participants[id];\n    const mediaSessions = this.getMediaSessions();\n    let tracksToBeRemoved = [];\n\n    for (const session of mediaSessions) {\n        const remoteTracks = session.peerconnection.getRemoteTracks(id);\n\n        remoteTracks && (tracksToBeRemoved = [ ...tracksToBeRemoved, ...remoteTracks ]);\n\n        // Remove the ssrcs from the remote description and renegotiate.\n        session.removeRemoteStreamsOnLeave(id);\n    }\n\n    // Fire the event before renegotiation is done so that the thumbnails can be removed immediately.\n    tracksToBeRemoved.forEach(track => {\n        this.eventEmitter.emit(JitsiConferenceEvents.TRACK_REMOVED, track);\n    });\n\n    if (participant) {\n        delete this.participants[id];\n        this.eventEmitter.emit(JitsiConferenceEvents.USER_LEFT, id, participant, reason);\n    }\n\n    if (this.room !== null) { // Skip if we have left the room already.\n        this._maybeStartOrStopP2P(true /* triggered by user left event */);\n        this._maybeClearSITimeout();\n    }\n};\n\n/* eslint-disable max-params */\n\n/**\n * Designates an event indicating that we were kicked from the XMPP MUC.\n * @param {boolean} isSelfPresence - whether it is for local participant\n * or another participant.\n * @param {string} actorId - the id of the participant who was initiator\n * of the kick.\n * @param {string?} kickedParticipantId - when it is not a kick for local participant,\n * this is the id of the participant which was kicked.\n * @param {string} reason - reason of the participant to kick\n * @param {boolean?} isReplaceParticipant - whether this is a server initiated kick in order\n * to replace it with a participant with same jwt.\n */\nJitsiConference.prototype.onMemberKicked = function(\n        isSelfPresence,\n        actorId,\n        kickedParticipantId,\n        reason,\n        isReplaceParticipant) {\n    // This check which be true when we kick someone else. With the introduction of lobby\n    // the ChatRoom KICKED event is now also emitted for ourselves (the kicker) so we want to\n    // avoid emitting an event where `undefined` kicked someone.\n    if (actorId === this.myUserId()) {\n        return;\n    }\n\n    const actorParticipant = this.participants[actorId];\n\n    if (isSelfPresence) {\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.KICKED, actorParticipant, reason, isReplaceParticipant);\n\n        this.leave();\n\n        return;\n    }\n\n    const kickedParticipant = this.participants[kickedParticipantId];\n\n    kickedParticipant.setIsReplaced(isReplaceParticipant);\n\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.PARTICIPANT_KICKED, actorParticipant, kickedParticipant, reason);\n};\n\n/**\n * Method called on local MUC role change.\n * @param {string} role the name of new user's role as defined by XMPP MUC.\n */\nJitsiConference.prototype.onLocalRoleChanged = function(role) {\n    // Emit role changed for local  JID\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.USER_ROLE_CHANGED, this.myUserId(), role);\n};\n\nJitsiConference.prototype.onUserRoleChanged = function(jid, role) {\n    const id = Strophe.getResourceFromJid(jid);\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    participant.setRole(role);\n    this.eventEmitter.emit(JitsiConferenceEvents.USER_ROLE_CHANGED, id, role);\n};\n\nJitsiConference.prototype.onDisplayNameChanged = function(jid, displayName) {\n    const id = Strophe.getResourceFromJid(jid);\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n\n    if (participant._displayName === displayName) {\n        return;\n    }\n\n    participant._displayName = displayName;\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.DISPLAY_NAME_CHANGED,\n        id,\n        displayName);\n};\n\n/**\n * Notifies this JitsiConference that a JitsiRemoteTrack was added to the conference.\n *\n * @param {JitsiRemoteTrack} track the JitsiRemoteTrack which was added to this JitsiConference.\n */\nJitsiConference.prototype.onRemoteTrackAdded = function(track) {\n    if (track.isP2P && !this.isP2PActive()) {\n        logger.info('Trying to add remote P2P track, when not in P2P - IGNORED');\n\n        return;\n    } else if (!track.isP2P && this.isP2PActive()) {\n        logger.info('Trying to add remote JVB track, when in P2P - IGNORED');\n\n        return;\n    }\n\n    const id = track.getParticipantId();\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        logger.error(`No participant found for id: ${id}`);\n\n        return;\n    }\n\n    // Add track to JitsiParticipant.\n    participant._tracks.push(track);\n\n    if (this.transcriber) {\n        this.transcriber.addTrack(track);\n    }\n\n    const emitter = this.eventEmitter;\n\n    track.addEventListener(\n        JitsiTrackEvents.TRACK_MUTE_CHANGED,\n        () => emitter.emit(JitsiConferenceEvents.TRACK_MUTE_CHANGED, track));\n    track.isAudioTrack() && track.addEventListener(\n        JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n        (audioLevel, tpc) => {\n            const activeTPC = this.getActivePeerConnection();\n\n            if (activeTPC === tpc) {\n                emitter.emit(JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED, id, audioLevel);\n            }\n        }\n    );\n\n    emitter.emit(JitsiConferenceEvents.TRACK_ADDED, track);\n};\n\n/**\n * Callback called by the Jingle plugin when 'session-answer' is received.\n * @param {JingleSessionPC} session the Jingle session for which an answer was\n * received.\n * @param {jQuery} answer a jQuery selector pointing to 'jingle' IQ element\n */\n// eslint-disable-next-line no-unused-vars\nJitsiConference.prototype.onCallAccepted = function(session, answer) {\n    if (this.p2pJingleSession === session) {\n        logger.info('P2P setAnswer');\n\n        this.p2pJingleSession.setAnswer(answer);\n        this.eventEmitter.emit(JitsiConferenceEvents._MEDIA_SESSION_STARTED, this.p2pJingleSession);\n    }\n};\n\n/**\n * Callback called by the Jingle plugin when 'transport-info' is received.\n * @param {JingleSessionPC} session the Jingle session for which the IQ was\n * received\n * @param {jQuery} transportInfo a jQuery selector pointing to 'jingle' IQ\n * element\n */\n// eslint-disable-next-line no-unused-vars\nJitsiConference.prototype.onTransportInfo = function(session, transportInfo) {\n    if (this.p2pJingleSession === session) {\n        logger.info('P2P addIceCandidates');\n        this.p2pJingleSession.addIceCandidates(transportInfo);\n    }\n};\n\n/**\n * Notifies this JitsiConference that a JitsiRemoteTrack was removed from\n * the conference.\n *\n * @param {JitsiRemoteTrack} removedTrack\n */\nJitsiConference.prototype.onRemoteTrackRemoved = function(removedTrack) {\n    this.getParticipants().forEach(participant => {\n        const tracks = participant.getTracks();\n\n        for (let i = 0; i < tracks.length; i++) {\n            if (tracks[i] === removedTrack) {\n                // Since the tracks have been compared and are\n                // considered equal the result of splice can be ignored.\n                participant._tracks.splice(i, 1);\n\n                this.eventEmitter.emit(JitsiConferenceEvents.TRACK_REMOVED, removedTrack);\n\n                if (this.transcriber) {\n                    this.transcriber.removeTrack(removedTrack);\n                }\n\n                break;\n            }\n        }\n    }, this);\n};\n\n/**\n * Handles an incoming call event for the P2P jingle session.\n */\nJitsiConference.prototype._onIncomingCallP2P = function(jingleSession, jingleOffer) {\n    let rejectReason;\n    const usesUnifiedPlan = browser.supportsUnifiedPlan()\n        && (!browser.isChromiumBased() || (this.options.config.enableUnifiedOnChrome ?? true));\n    const contentName = jingleOffer.find('>content').attr('name');\n    const peerUsesUnifiedPlan = contentName === '0' || contentName === '1';\n\n    // Reject P2P between endpoints that are not running in the same mode w.r.t to SDPs (plan-b and unified plan).\n    if (usesUnifiedPlan !== peerUsesUnifiedPlan) {\n        rejectReason = {\n            reason: 'decline',\n            reasonDescription: 'P2P disabled',\n            errorMsg: 'P2P across two endpoints in different SDP modes is disabled'\n        };\n    } else if ((!this.isP2PEnabled() && !this.isP2PTestModeEnabled())\n        || browser.isFirefox()\n        || browser.isWebKitBased()) {\n        rejectReason = {\n            reason: 'decline',\n            reasonDescription: 'P2P disabled',\n            errorMsg: 'P2P mode disabled in the configuration or browser unsupported'\n        };\n    } else if (this.p2pJingleSession) {\n        // Reject incoming P2P call (already in progress)\n        rejectReason = {\n            reason: 'busy',\n            reasonDescription: 'P2P already in progress',\n            errorMsg: 'Duplicated P2P \"session-initiate\"'\n        };\n    } else if (!this._shouldBeInP2PMode()) {\n        rejectReason = {\n            reason: 'decline',\n            reasonDescription: 'P2P requirements not met',\n            errorMsg: 'Received P2P \"session-initiate\" when should not be in P2P mode'\n        };\n        Statistics.sendAnalytics(createJingleEvent(ACTION_P2P_DECLINED));\n    }\n\n    if (rejectReason) {\n        this._rejectIncomingCall(jingleSession, rejectReason);\n    } else {\n        this._acceptP2PIncomingCall(jingleSession, jingleOffer);\n    }\n};\n\n/**\n * Handles an incoming call event.\n */\nJitsiConference.prototype.onIncomingCall = function(jingleSession, jingleOffer, now) {\n    // Handle incoming P2P call\n    if (jingleSession.isP2P) {\n        this._onIncomingCallP2P(jingleSession, jingleOffer);\n    } else {\n        if (!this.isFocus(jingleSession.remoteJid)) {\n            const description = 'Rejecting session-initiate from non-focus.';\n\n            this._rejectIncomingCall(\n                jingleSession, {\n                    reason: 'security-error',\n                    reasonDescription: description,\n                    errorMsg: description\n                });\n\n            return;\n        }\n        this._acceptJvbIncomingCall(jingleSession, jingleOffer, now);\n    }\n};\n\n/**\n * Accepts an incoming call event for the JVB jingle session.\n */\nJitsiConference.prototype._acceptJvbIncomingCall = function(jingleSession, jingleOffer, now) {\n\n    // Accept incoming call\n    this.jvbJingleSession = jingleSession;\n    this.room.connectionTimes['session.initiate'] = now;\n    this._sendConferenceJoinAnalyticsEvent();\n\n    if (this.wasStopped) {\n        Statistics.sendAnalyticsAndLog(createJingleEvent(ACTION_JINGLE_RESTART, { p2p: false }));\n    }\n\n    const serverRegion\n        = $(jingleOffer)\n            .find('>bridge-session[xmlns=\"http://jitsi.org/protocol/focus\"]')\n            .attr('region');\n\n    this.eventEmitter.emit(JitsiConferenceEvents.SERVER_REGION_CHANGED, serverRegion);\n\n    this._maybeClearSITimeout();\n    Statistics.sendAnalytics(createJingleEvent(\n        ACTION_JINGLE_SI_RECEIVED,\n        {\n            p2p: false,\n            value: now\n        }));\n\n    try {\n        jingleSession.initialize(\n            this.room,\n            this.rtc,\n            this._signalingLayer,\n            {\n                ...this.options.config,\n                enableInsertableStreams: this.isE2EEEnabled()\n            });\n    } catch (error) {\n        GlobalOnErrorHandler.callErrorHandler(error);\n        logger.error(error);\n\n        return;\n    }\n\n    // Open a channel with the videobridge.\n    this._setBridgeChannel(jingleOffer, jingleSession.peerconnection);\n\n    const localTracks = this._getInitialLocalTracks();\n\n    try {\n        jingleSession.acceptOffer(\n            jingleOffer,\n            () => {\n                // If for any reason invite for the JVB session arrived after\n                // the P2P has been established already the media transfer needs\n                // to be turned off here.\n                if (this.isP2PActive() && this.jvbJingleSession) {\n                    this._suspendMediaTransferForJvbConnection();\n                }\n\n                this.eventEmitter.emit(JitsiConferenceEvents._MEDIA_SESSION_STARTED, jingleSession);\n                if (!this.isP2PActive()) {\n                    this.eventEmitter.emit(JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED, jingleSession);\n                }\n            },\n            error => {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error('Failed to accept incoming Jingle session', error);\n            },\n            localTracks\n        );\n\n        // Enable or disable simulcast for plan-b screensharing based on the capture fps if it is set through the UI.\n        this._desktopSharingFrameRate\n            && jingleSession.peerconnection.setDesktopSharingFrameRate(this._desktopSharingFrameRate);\n\n        // Start callstats as soon as peerconnection is initialized,\n        // do not wait for XMPPEvents.PEERCONNECTION_READY, as it may never\n        // happen in case if user doesn't have or denied permission to\n        // both camera and microphone.\n        logger.info('Starting CallStats for JVB connection...');\n        this.statistics.startCallStats(\n            this.jvbJingleSession.peerconnection,\n            'jitsi' /* Remote user ID for JVB is 'jitsi' */);\n        this.statistics.startRemoteStats(this.jvbJingleSession.peerconnection);\n    } catch (e) {\n        GlobalOnErrorHandler.callErrorHandler(e);\n        logger.error(e);\n    }\n};\n\n/**\n * Sets the BridgeChannel.\n *\n * @param {jQuery} offerIq a jQuery selector pointing to the jingle element of\n * the offer IQ which may carry the WebSocket URL for the 'websocket'\n * BridgeChannel mode.\n * @param {TraceablePeerConnection} pc the peer connection which will be used\n * to listen for new WebRTC Data Channels (in the 'datachannel' mode).\n */\nJitsiConference.prototype._setBridgeChannel = function(offerIq, pc) {\n    let wsUrl = null;\n    const webSocket\n        = $(offerIq)\n            .find('>content>transport>web-socket')\n            .first();\n\n    if (webSocket.length === 1) {\n        wsUrl = webSocket[0].getAttribute('url');\n    }\n\n    if (wsUrl) {\n        // If the offer contains a websocket use it.\n        this.rtc.initializeBridgeChannel(null, wsUrl);\n    } else {\n        // Otherwise, fall back to an attempt to use SCTP.\n        this.rtc.initializeBridgeChannel(pc, null);\n    }\n};\n\n/**\n * Rejects incoming Jingle call.\n * @param {JingleSessionPC} jingleSession the session instance to be rejected.\n * @param {object} [options]\n * @param {string} options.reason the name of the reason element as defined\n * by Jingle\n * @param {string} options.reasonDescription the reason description which will\n * be included in Jingle 'session-terminate' message.\n * @param {string} options.errorMsg an error message to be logged on global\n * error handler\n * @private\n */\nJitsiConference.prototype._rejectIncomingCall = function(jingleSession, options) {\n    if (options?.errorMsg) {\n        logger.warn(options.errorMsg);\n    }\n\n    // Terminate the jingle session with a reason\n    jingleSession.terminate(\n        null /* success callback => we don't care */,\n        error => {\n            logger.warn(\n                'An error occurred while trying to terminate'\n                    + ' invalid Jingle session', error);\n        }, {\n            reason: options && options.reason,\n            reasonDescription: options && options.reasonDescription,\n            sendSessionTerminate: true\n        });\n};\n\n/**\n * Handles the call ended event.\n * XXX is this due to the remote side terminating the Jingle session?\n *\n * @param {JingleSessionPC} jingleSession the jingle session which has been\n * terminated.\n * @param {String} reasonCondition the Jingle reason condition.\n * @param {String|null} reasonText human readable reason text which may provide\n * more details about why the call has been terminated.\n */\nJitsiConference.prototype.onCallEnded = function(jingleSession, reasonCondition, reasonText) {\n    logger.info(\n        `Call ended: ${reasonCondition} - ${reasonText} P2P ?${\n            jingleSession.isP2P}`);\n    if (jingleSession === this.jvbJingleSession) {\n        this.wasStopped = true;\n\n        Statistics.sendAnalytics(\n            createJingleEvent(ACTION_JINGLE_TERMINATE, { p2p: false }));\n\n        // Stop the stats\n        if (this.statistics) {\n            this.statistics.stopRemoteStats(\n                this.jvbJingleSession.peerconnection);\n            logger.info('Stopping JVB CallStats');\n            this.statistics.stopCallStats(\n                this.jvbJingleSession.peerconnection);\n        }\n\n        // Current JVB JingleSession is no longer valid, so set it to null\n        this.jvbJingleSession = null;\n\n        // Let the RTC service do any cleanups\n        this.rtc.onCallEnded();\n    } else if (jingleSession === this.p2pJingleSession) {\n        const stopOptions = {};\n\n        // It's the responder who decides to enforce JVB mode, so that both\n        // initiator and responder are aware if it was intentional.\n        if (reasonCondition === 'decline' && reasonText === 'force JVB121') {\n            logger.info('In forced JVB 121 mode...');\n            Statistics.analytics.addPermanentProperties({ forceJvb121: true });\n        } else if (reasonCondition === 'connectivity-error'\n            && reasonText === 'ICE FAILED') {\n            // It can happen that the other peer detects ICE failed and\n            // terminates the session, before we get the event on our side.\n            // But we are able to parse the reason and mark it here.\n            Statistics.analytics.addPermanentProperties({ p2pFailed: true });\n        } else if (reasonCondition === 'success' && reasonText === 'restart') {\n            // When we are restarting media sessions we don't want to switch the tracks\n            // to the JVB just yet.\n            stopOptions.requestRestart = true;\n        }\n        this._stopP2PSession(stopOptions);\n    } else {\n        logger.error(\n            'Received onCallEnded for invalid session',\n            jingleSession.sid,\n            jingleSession.remoteJid,\n            reasonCondition,\n            reasonText);\n    }\n};\n\n/**\n * Handles the suspend detected event. Leaves the room and fires suspended.\n * @param {JingleSessionPC} jingleSession\n */\nJitsiConference.prototype.onSuspendDetected = function(jingleSession) {\n    if (!jingleSession.isP2P) {\n        this.leave();\n        this.eventEmitter.emit(JitsiConferenceEvents.SUSPEND_DETECTED);\n    }\n};\n\nJitsiConference.prototype.updateDTMFSupport = function() {\n    let somebodySupportsDTMF = false;\n    const participants = this.getParticipants();\n\n    // check if at least 1 participant supports DTMF\n    for (let i = 0; i < participants.length; i += 1) {\n        if (participants[i].supportsDTMF()) {\n            somebodySupportsDTMF = true;\n            break;\n        }\n    }\n    if (somebodySupportsDTMF !== this.somebodySupportsDTMF) {\n        this.somebodySupportsDTMF = somebodySupportsDTMF;\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.DTMF_SUPPORT_CHANGED,\n            somebodySupportsDTMF);\n    }\n};\n\n/**\n * Allows to check if there is at least one user in the conference\n * that supports DTMF.\n * @returns {boolean} true if somebody supports DTMF, false otherwise\n */\nJitsiConference.prototype.isDTMFSupported = function() {\n    return this.somebodySupportsDTMF;\n};\n\n/**\n * Returns the local user's ID\n * @return {string} local user's ID\n */\nJitsiConference.prototype.myUserId = function() {\n    return (\n        this.room && this.room.myroomjid\n            ? Strophe.getResourceFromJid(this.room.myroomjid)\n            : null);\n};\n\nJitsiConference.prototype.sendTones = function(tones, duration, pause) {\n    const peerConnection = this.getActivePeerConnection();\n\n    if (peerConnection) {\n        peerConnection.sendTones(tones, duration, pause);\n    } else {\n        logger.warn('cannot sendTones: no peer connection');\n    }\n};\n\n/**\n * Starts recording the current conference.\n *\n * @param {Object} options - Configuration for the recording. See\n * {@link Chatroom#startRecording} for more info.\n * @returns {Promise} See {@link Chatroom#startRecording} for more info.\n */\nJitsiConference.prototype.startRecording = function(options) {\n    if (this.room) {\n        return this.recordingManager.startRecording(options);\n    }\n\n    return Promise.reject(new Error('The conference is not created yet!'));\n};\n\n/**\n * Stop a recording session.\n *\n * @param {string} sessionID - The ID of the recording session that\n * should be stopped.\n * @returns {Promise} See {@link Chatroom#stopRecording} for more info.\n */\nJitsiConference.prototype.stopRecording = function(sessionID) {\n    if (this.room) {\n        return this.recordingManager.stopRecording(sessionID);\n    }\n\n    return Promise.reject(new Error('The conference is not created yet!'));\n};\n\n/**\n * Returns true if the SIP calls are supported and false otherwise\n */\nJitsiConference.prototype.isSIPCallingSupported = function() {\n    if (this.room) {\n        return this.room.isSIPCallingSupported();\n    }\n\n    return false;\n};\n\n/**\n * Dials a number.\n * @param number the number\n */\nJitsiConference.prototype.dial = function(number) {\n    if (this.room) {\n        return this.room.dial(number);\n    }\n\n    return new Promise((resolve, reject) => {\n        reject(new Error('The conference is not created yet!'));\n    });\n};\n\n/**\n * Hangup an existing call\n */\nJitsiConference.prototype.hangup = function() {\n    if (this.room) {\n        return this.room.hangup();\n    }\n\n    return new Promise((resolve, reject) => {\n        reject(new Error('The conference is not created yet!'));\n    });\n};\n\n/**\n * Starts the transcription service.\n */\nJitsiConference.prototype.startTranscriber = function() {\n    return this.dial('jitsi_meet_transcribe');\n};\n\n\n/**\n * Stops the transcription service.\n */\nJitsiConference.prototype.stopTranscriber = JitsiConference.prototype.hangup;\n\n/**\n * Returns the phone number for joining the conference.\n */\nJitsiConference.prototype.getPhoneNumber = function() {\n    if (this.room) {\n        return this.room.getPhoneNumber();\n    }\n\n    return null;\n};\n\n/**\n * Returns the pin for joining the conference with phone.\n */\nJitsiConference.prototype.getPhonePin = function() {\n    if (this.room) {\n        return this.room.getPhonePin();\n    }\n\n    return null;\n};\n\n/**\n * Returns the meeting unique ID if any.\n *\n * @returns {string|undefined}\n */\nJitsiConference.prototype.getMeetingUniqueId = function() {\n    if (this.room) {\n        return this.room.getMeetingId();\n    }\n};\n\n/**\n * Will return P2P or JVB <tt>TraceablePeerConnection</tt> depending on\n * which connection is currently active.\n *\n * @return {TraceablePeerConnection|null} null if there isn't any active\n * <tt>TraceablePeerConnection</tt> currently available.\n * @public (FIXME how to make package local ?)\n */\nJitsiConference.prototype.getActivePeerConnection = function() {\n    const session = this.isP2PActive() ? this.p2pJingleSession : this.jvbJingleSession;\n\n    return session ? session.peerconnection : null;\n};\n\n/**\n * Returns the connection state for the current room. Its ice connection state\n * for its session.\n * NOTE that \"completed\" ICE state which can appear on the P2P connection will\n * be converted to \"connected\".\n * @return {string|null} ICE state name or <tt>null</tt> if there is no active\n * peer connection at this time.\n */\nJitsiConference.prototype.getConnectionState = function() {\n    const peerConnection = this.getActivePeerConnection();\n\n    return peerConnection ? peerConnection.getConnectionState() : null;\n};\n\n/**\n * Make all new participants mute their audio/video on join.\n * @param policy {Object} object with 2 boolean properties for video and audio:\n * @param {boolean} audio if audio should be muted.\n * @param {boolean} video if video should be muted.\n */\nJitsiConference.prototype.setStartMutedPolicy = function(policy) {\n    if (!this.isModerator()) {\n        logger.warn(`Failed to set start muted policy, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator'}`);\n\n        return;\n    }\n    this.startMutedPolicy = policy;\n    this.room.addOrReplaceInPresence('startmuted', {\n        attributes: {\n            audio: policy.audio,\n            video: policy.video,\n            xmlns: 'http://jitsi.org/jitmeet/start-muted'\n        }\n    }) && this.room.sendPresence();\n};\n\n/**\n * Returns current start muted policy\n * @returns {Object} with 2 properties - audio and video.\n */\nJitsiConference.prototype.getStartMutedPolicy = function() {\n    return this.startMutedPolicy;\n};\n\n/**\n * Check if audio is muted on join.\n */\nJitsiConference.prototype.isStartAudioMuted = function() {\n    return this.startAudioMuted;\n};\n\n/**\n * Check if video is muted on join.\n */\nJitsiConference.prototype.isStartVideoMuted = function() {\n    return this.startVideoMuted;\n};\n\n/**\n * Returns measured connectionTimes.\n */\nJitsiConference.prototype.getConnectionTimes = function() {\n    return this.room.connectionTimes;\n};\n\n/**\n * Sets a property for the local participant.\n */\nJitsiConference.prototype.setLocalParticipantProperty = function(name, value) {\n    this.sendCommand(`jitsi_participant_${name}`, { value });\n};\n\n/**\n *  Removes a property for the local participant and sends the updated presence.\n */\nJitsiConference.prototype.removeLocalParticipantProperty = function(name) {\n    this.removeCommand(`jitsi_participant_${name}`);\n    this.room.sendPresence();\n};\n\n/**\n * Gets a local participant property.\n *\n * @return value of the local participant property if the tagName exists in the\n * list of properties, otherwise returns undefined.\n */\nJitsiConference.prototype.getLocalParticipantProperty = function(name) {\n    const property = this.room.presMap.nodes.find(prop =>\n        prop.tagName === `jitsi_participant_${name}`\n    );\n\n    return property ? property.value : undefined;\n};\n\n/**\n * Sends the given feedback through CallStats if enabled.\n *\n * @param overallFeedback an integer between 1 and 5 indicating the\n * user feedback\n * @param detailedFeedback detailed feedback from the user. Not yet used\n * @returns {Promise} Resolves if feedback is submitted successfully.\n */\nJitsiConference.prototype.sendFeedback = function(overallFeedback, detailedFeedback) {\n    return this.statistics.sendFeedback(overallFeedback, detailedFeedback);\n};\n\n/**\n * Returns true if the callstats integration is enabled, otherwise returns\n * false.\n *\n * @returns true if the callstats integration is enabled, otherwise returns\n * false.\n */\nJitsiConference.prototype.isCallstatsEnabled = function() {\n    return this.statistics.isCallstatsEnabled();\n};\n\n/**\n * Finds the SSRC of a given track\n *\n * @param track\n * @returns {number|undefined} the SSRC of the specificed track, otherwise undefined.\n */\nJitsiConference.prototype.getSsrcByTrack = function(track) {\n    return track.isLocal() ? this.getActivePeerConnection()?.getLocalSSRC(track) : track.getSSRC();\n};\n\n/**\n * Handles track attached to container (Calls associateStreamWithVideoTag method\n * from statistics module)\n * @param {JitsiLocalTrack|JitsiRemoteTrack} track the track\n * @param container the container\n */\nJitsiConference.prototype._onTrackAttach = function(track, container) {\n    const isLocal = track.isLocal();\n    let ssrc = null;\n    const isP2P = track.isP2P;\n    const remoteUserId = isP2P ? track.getParticipantId() : 'jitsi';\n    const peerConnection\n        = isP2P\n            ? this.p2pJingleSession && this.p2pJingleSession.peerconnection\n            : this.jvbJingleSession && this.jvbJingleSession.peerconnection;\n\n    if (isLocal) {\n        // Local tracks have SSRC stored on per peer connection basis.\n        if (peerConnection) {\n            ssrc = peerConnection.getLocalSSRC(track);\n        }\n    } else {\n        ssrc = track.getSSRC();\n    }\n    if (!container.id || !ssrc || !peerConnection) {\n        return;\n    }\n\n    this.statistics.associateStreamWithVideoTag(\n        peerConnection,\n        ssrc,\n        isLocal,\n        remoteUserId,\n        track.getUsageLabel(),\n        container.id);\n};\n\n/**\n * Logs an \"application log\" message.\n * @param message {string} The message to log. Note that while this can be a\n * generic string, the convention used by lib-jitsi-meet and jitsi-meet is to\n * log valid JSON strings, with an \"id\" field used for distinguishing between\n * message types. E.g.: {id: \"recorder_status\", status: \"off\"}\n */\nJitsiConference.prototype.sendApplicationLog = function(message) {\n    Statistics.sendLog(message);\n};\n\n/**\n * Checks if the user identified by given <tt>mucJid</tt> is the conference focus.\n * @param mucJid the full MUC address of the user to be checked.\n * @returns {boolean|null} <tt>true</tt> if MUC user is the conference focus,\n * <tt>false</tt> when is not. <tt>null</tt> if we're not in the MUC anymore and\n * are unable to figure out the status or if given <tt>mucJid</tt> is invalid.\n */\nJitsiConference.prototype.isFocus = function(mucJid) {\n    return this.room ? this.room.isFocus(mucJid) : null;\n};\n\n/**\n * Fires CONFERENCE_FAILED event with INCOMPATIBLE_SERVER_VERSIONS parameter\n */\nJitsiConference.prototype._fireIncompatibleVersionsEvent = function() {\n    this.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.INCOMPATIBLE_SERVER_VERSIONS);\n};\n\n/**\n * Sends a message via the data channel.\n * @param to {string} the id of the endpoint that should receive the message.\n * If \"\" the message will be sent to all participants.\n * @param payload {object} the payload of the message.\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.sendEndpointMessage = function(to, payload) {\n    this.rtc.sendChannelMessage(to, payload);\n};\n\n/**\n * Sends local stats via the bridge channel which then forwards to other endpoints selectively.\n * @param {Object} payload The payload of the message.\n * @throws NetworkError/InvalidStateError/Error if the operation fails or if there is no data channel created.\n */\nJitsiConference.prototype.sendEndpointStatsMessage = function(payload) {\n    this.rtc.sendEndpointStatsMessage(payload);\n};\n\n/**\n * Sends a broadcast message via the data channel.\n * @param payload {object} the payload of the message.\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.broadcastEndpointMessage = function(payload) {\n    this.sendEndpointMessage('', payload);\n};\n\n/**\n * Sends a message to a given endpoint (if 'to' is a non-empty string), or\n * broadcasts it to all endpoints in the conference.\n * @param {string} to The ID of the endpoint/participant which is to receive\n * the message, or '' to broadcast the message to all endpoints in the\n * conference.\n * @param {string|object} message the message to send. If this is of type\n * 'string' it will be sent as a chat message. If it is of type 'object', it\n * will be encapsulated in a format recognized by jitsi-meet and converted to\n * JSON before being sent.\n * @param {boolean} sendThroughVideobridge Whether to send the message through\n * jitsi-videobridge (via the COLIBRI data channel or web socket), or through\n * the XMPP MUC. Currently only objects can be sent through jitsi-videobridge.\n */\nJitsiConference.prototype.sendMessage = function(message, to = '', sendThroughVideobridge = false) {\n    const messageType = typeof message;\n\n    // Through videobridge we support only objects. Through XMPP we support\n    // objects (encapsulated in a specific JSON format) and strings (i.e.\n    // regular chat messages).\n    if (messageType !== 'object'\n            && (sendThroughVideobridge || messageType !== 'string')) {\n        logger.error(`Can not send a message of type ${messageType}`);\n\n        return;\n    }\n\n    if (sendThroughVideobridge) {\n        this.sendEndpointMessage(to, message);\n    } else {\n        let messageToSend = message;\n\n        // Name of packet extension of message stanza to send the required\n        // message in.\n        let elementName = 'body';\n\n        if (messageType === 'object') {\n            elementName = 'json-message';\n\n            // Mark as valid JSON message if not already\n            if (!messageToSend.hasOwnProperty(JITSI_MEET_MUC_TYPE)) {\n                messageToSend[JITSI_MEET_MUC_TYPE] = '';\n            }\n\n            try {\n                messageToSend = JSON.stringify(messageToSend);\n            } catch (e) {\n                logger.error('Can not send a message, stringify failed: ', e);\n\n                return;\n            }\n        }\n\n        if (to) {\n            this.sendPrivateTextMessage(to, messageToSend, elementName);\n        } else {\n            // Broadcast\n            this.sendTextMessage(messageToSend, elementName);\n        }\n    }\n\n};\n\nJitsiConference.prototype.isConnectionInterrupted = function() {\n    return this.isP2PActive()\n        ? this.isP2PConnectionInterrupted : this.isJvbConnectionInterrupted;\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_RESTARTED} event. This happens when the bridge goes down\n * and Jicofo moves conferences away to a different bridge.\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onConferenceRestarted = function(session) {\n    if (!session.isP2P && this.options.config.enableForcedReload) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED, JitsiConferenceErrors.CONFERENCE_RESTARTED);\n    }\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_INTERRUPTED}\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onIceConnectionInterrupted = function(session) {\n    if (session.isP2P) {\n        this.isP2PConnectionInterrupted = true;\n    } else {\n        this.isJvbConnectionInterrupted = true;\n    }\n    if (session.isP2P === this.isP2PActive()) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_INTERRUPTED);\n    }\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_ICE_FAILED}\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onIceConnectionFailed = function(session) {\n    // We do nothing for the JVB connection, because it's up to the Jicofo to\n    // eventually come up with the new offer (at least for the time being).\n    if (session.isP2P) {\n        // Add p2pFailed property to analytics to distinguish, between \"good\"\n        // and \"bad\" connection\n        Statistics.analytics.addPermanentProperties({ p2pFailed: true });\n\n        if (this.p2pJingleSession) {\n            Statistics.sendAnalyticsAndLog(\n                createP2PEvent(\n                    ACTION_P2P_FAILED,\n                    {\n                        initiator: this.p2pJingleSession.isInitiator\n                    }));\n\n        }\n        this._stopP2PSession({\n            reason: 'connectivity-error',\n            reasonDescription: 'ICE FAILED'\n        });\n    } else if (session && this.jvbJingleSession === session) {\n        this._delayedIceFailed = new IceFailedHandling(this);\n        this._delayedIceFailed.start(session);\n    }\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_RESTORED}\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onIceConnectionRestored = function(session) {\n    if (session.isP2P) {\n        this.isP2PConnectionInterrupted = false;\n    } else {\n        this.isJvbConnectionInterrupted = false;\n        this._delayedIceFailed && this._delayedIceFailed.cancel();\n    }\n\n    if (session.isP2P === this.isP2PActive()) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_RESTORED);\n    }\n};\n\n/**\n * Accept incoming P2P Jingle call.\n * @param {JingleSessionPC} jingleSession the session instance\n * @param {jQuery} jingleOffer a jQuery selector pointing to 'jingle' IQ element\n * @private\n */\nJitsiConference.prototype._acceptP2PIncomingCall = function(jingleSession, jingleOffer) {\n    this.isP2PConnectionInterrupted = false;\n\n    // Accept the offer\n    this.p2pJingleSession = jingleSession;\n    this._sendConferenceJoinAnalyticsEvent();\n\n    this.p2pJingleSession.initialize(\n        this.room,\n        this.rtc,\n        this._signalingLayer,\n        {\n            ...this.options.config,\n            enableInsertableStreams: this.isE2EEEnabled()\n        });\n\n    logger.info('Starting CallStats for P2P connection...');\n\n    let remoteID = Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid);\n\n    const participant = this.participants[remoteID];\n\n    if (participant) {\n        remoteID = participant.getStatsID() || remoteID;\n    }\n\n    this.statistics.startCallStats(\n        this.p2pJingleSession.peerconnection,\n        remoteID);\n\n    const localTracks = this.getLocalTracks();\n\n    this.p2pJingleSession.acceptOffer(\n        jingleOffer,\n        () => {\n            logger.debug('Got RESULT for P2P \"session-accept\"');\n\n            this.eventEmitter.emit(\n                JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n                jingleSession);\n        },\n        error => {\n            logger.error(\n                'Failed to accept incoming P2P Jingle session', error);\n        },\n        localTracks);\n};\n\n/**\n * Adds remote tracks to the conference associated with the JVB session.\n * @private\n */\nJitsiConference.prototype._addRemoteJVBTracks = function() {\n    this._addRemoteTracks('JVB', this.jvbJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Adds remote tracks to the conference associated with the P2P session.\n * @private\n */\nJitsiConference.prototype._addRemoteP2PTracks = function() {\n    this._addRemoteTracks('P2P', this.p2pJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Generates fake \"remote track added\" events for given Jingle session.\n * @param {string} logName the session's nickname which will appear in log\n * messages.\n * @param {Array<JitsiRemoteTrack>} remoteTracks the tracks that will be added\n * @private\n */\nJitsiConference.prototype._addRemoteTracks = function(logName, remoteTracks) {\n    for (const track of remoteTracks) {\n        logger.info(`Adding remote ${logName} track: ${track}`);\n        this.onRemoteTrackAdded(track);\n    }\n};\n\n/**\n * Called when {@link XMPPEvents.CONNECTION_ESTABLISHED} event is\n * triggered for a {@link JingleSessionPC}. Switches the conference to use\n * the P2P connection if the event comes from the P2P session.\n * @param {JingleSessionPC} jingleSession the session instance.\n * @private\n */\nJitsiConference.prototype._onIceConnectionEstablished = function(jingleSession) {\n    this.setDisplayName(`${this.getLocalUser() && this.getLocalUser().name}(${this.options.connection.options.ownerId})`);\n    if (this.p2pJingleSession !== null) {\n        // store the establishment time of the p2p session as a field of the\n        // JitsiConference because the p2pJingleSession might get disposed (thus\n        // the value is lost).\n        this.p2pEstablishmentDuration\n            = this.p2pJingleSession.establishmentDuration;\n    }\n\n    if (this.jvbJingleSession !== null) {\n        this.jvbEstablishmentDuration\n            = this.jvbJingleSession.establishmentDuration;\n    }\n\n    let done = false;\n    const forceJVB121Ratio = this.options.config.forceJVB121Ratio;\n\n    // We don't care about the JVB case, there's nothing to be done\n    if (!jingleSession.isP2P) {\n        done = true;\n    } else if (this.p2pJingleSession !== jingleSession) {\n        logger.error('CONNECTION_ESTABLISHED - wrong P2P session instance ?!');\n\n        done = true;\n    } else if (!jingleSession.isInitiator\n        && typeof forceJVB121Ratio === 'number'\n        && Math.random() < forceJVB121Ratio) {\n        logger.info(`Forcing JVB 121 mode (ratio=${forceJVB121Ratio})...`);\n        Statistics.analytics.addPermanentProperties({ forceJvb121: true });\n        this._stopP2PSession({\n            reason: 'decline',\n            reasonDescription: 'force JVB121'\n        });\n\n        done = true;\n    }\n\n    if (!isNaN(this.p2pEstablishmentDuration)\n        && !isNaN(this.jvbEstablishmentDuration)) {\n        const establishmentDurationDiff\n            = this.p2pEstablishmentDuration - this.jvbEstablishmentDuration;\n\n        Statistics.sendAnalytics(\n            ICE_ESTABLISHMENT_DURATION_DIFF,\n            { value: establishmentDurationDiff });\n    }\n\n    if (jingleSession.isP2P === this.isP2PActive()) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_ESTABLISHED);\n    }\n\n    if (done) {\n\n        return;\n    }\n\n    // Update P2P status and emit events\n    this._setP2PStatus(true);\n\n    // Remove remote tracks\n    if (this.jvbJingleSession) {\n        this._removeRemoteJVBTracks();\n    } else {\n        logger.info('Not removing remote JVB tracks - no session yet');\n    }\n\n    this._addRemoteP2PTracks();\n\n    // Stop media transfer over the JVB connection\n    if (this.jvbJingleSession) {\n        this._suspendMediaTransferForJvbConnection();\n    }\n\n    logger.info('Starting remote stats with p2p connection');\n    this.statistics.startRemoteStats(this.p2pJingleSession.peerconnection);\n\n    Statistics.sendAnalyticsAndLog(\n        createP2PEvent(\n            ACTION_P2P_ESTABLISHED,\n            {\n                initiator: this.p2pJingleSession.isInitiator\n            }));\n\n};\n\n/**\n * Called when the chat room reads a new list of properties from jicofo's\n * presence. The properties may have changed, but they don't have to.\n *\n * @param {Object} properties - The properties keyed by the property name\n * ('key').\n * @private\n */\nJitsiConference.prototype._updateProperties = function(properties = {}) {\n    const changed = !isEqual(properties, this.properties);\n\n    this.properties = properties;\n    if (changed) {\n        this.eventEmitter.emit(JitsiConferenceEvents.PROPERTIES_CHANGED, this.properties);\n\n        const audioLimitReached = this.properties['audio-limit-reached'] === 'true';\n        const videoLimitReached = this.properties['video-limit-reached'] === 'true';\n\n        if (this._audioSenderLimitReached !== audioLimitReached) {\n            this._audioSenderLimitReached = audioLimitReached;\n            this.eventEmitter.emit(JitsiConferenceEvents.AUDIO_UNMUTE_PERMISSIONS_CHANGED, audioLimitReached);\n            logger.info(`Audio unmute permissions set by Jicofo to ${audioLimitReached}`);\n        }\n\n        if (this._videoSenderLimitReached !== videoLimitReached) {\n            this._videoSenderLimitReached = videoLimitReached;\n            this.eventEmitter.emit(JitsiConferenceEvents.VIDEO_UNMUTE_PERMISSIONS_CHANGED, videoLimitReached);\n            logger.info(`Video unmute permissions set by Jicofo to ${videoLimitReached}`);\n        }\n\n        // Some of the properties need to be added to analytics events.\n        const analyticsKeys = [\n\n            // The number of jitsi-videobridge instances currently used for the\n            // conference.\n            'bridge-count',\n\n            // The conference creation time (set by jicofo).\n            'created-ms'\n        ];\n\n        analyticsKeys.forEach(key => {\n            if (properties[key] !== undefined) {\n                Statistics.analytics.addPermanentProperties({\n                    [key.replace('-', '_')]: properties[key]\n                });\n            }\n        });\n    }\n};\n\n/**\n * Gets a conference property with a given key.\n *\n * @param {string} key - The key.\n * @returns {*} The value\n */\nJitsiConference.prototype.getProperty = function(key) {\n    return this.properties[key];\n};\n\n/**\n * Clears the deferred start P2P task if it has been scheduled.\n * @private\n */\nJitsiConference.prototype._maybeClearDeferredStartP2P = function() {\n    if (this.deferredStartP2PTask) {\n        logger.info('Cleared deferred start P2P task');\n        clearTimeout(this.deferredStartP2PTask);\n        this.deferredStartP2PTask = null;\n    }\n};\n\n/**\n * Removes from the conference remote tracks associated with the JVB\n * connection.\n * @private\n */\nJitsiConference.prototype._removeRemoteJVBTracks = function() {\n    this._removeRemoteTracks(\n        'JVB', this.jvbJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Removes from the conference remote tracks associated with the P2P\n * connection.\n * @private\n */\nJitsiConference.prototype._removeRemoteP2PTracks = function() {\n    this._removeRemoteTracks(\n        'P2P', this.p2pJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Generates fake \"remote track removed\" events for given Jingle session.\n * @param {string} sessionNickname the session's nickname which will appear in\n * log messages.\n * @param {Array<JitsiRemoteTrack>} remoteTracks the tracks that will be removed\n * @private\n */\nJitsiConference.prototype._removeRemoteTracks = function(sessionNickname, remoteTracks) {\n    for (const track of remoteTracks) {\n        logger.info(`Removing remote ${sessionNickname} track: ${track}`);\n        this.onRemoteTrackRemoved(track);\n    }\n};\n\n/**\n * Resumes media transfer over the JVB connection.\n * @private\n */\nJitsiConference.prototype._resumeMediaTransferForJvbConnection = function() {\n    logger.info('Resuming media transfer over the JVB connection...');\n    this.jvbJingleSession.setMediaTransferActive(true, true).then(\n        () => {\n            logger.info('Resumed media transfer over the JVB connection!');\n        },\n        error => {\n            logger.error(\n                'Failed to resume media transfer over the JVB connection:',\n                error);\n        });\n};\n\n/**\n * Sets new P2P status and updates some events/states hijacked from\n * the <tt>JitsiConference</tt>.\n * @param {boolean} newStatus the new P2P status value, <tt>true</tt> means that\n * P2P is now in use, <tt>false</tt> means that the JVB connection is now in use\n * @private\n */\nJitsiConference.prototype._setP2PStatus = function(newStatus) {\n    if (this.p2p === newStatus) {\n        logger.debug(`Called _setP2PStatus with the same status: ${newStatus}`);\n\n        return;\n    }\n    this.p2p = newStatus;\n    if (newStatus) {\n        logger.info('Peer to peer connection established!');\n\n        // When we end up in a valid P2P session need to reset the properties\n        // in case they have persisted, after session with another peer.\n        Statistics.analytics.addPermanentProperties({\n            p2pFailed: false,\n            forceJvb121: false\n        });\n\n        // Sync up video transfer active in case p2pJingleSession not existed\n        // when the lastN value was being adjusted.\n        const isVideoActive = this.getLastN() !== 0;\n\n        this.p2pJingleSession\n            .setMediaTransferActive(true, isVideoActive)\n            .catch(error => {\n                logger.error(\n                    'Failed to sync up P2P video transfer status'\n                        + `(${isVideoActive})`, error);\n            });\n    } else {\n        logger.info('Peer to peer connection closed!');\n    }\n\n    // Put the JVB connection on hold/resume\n    if (this.jvbJingleSession) {\n        this.statistics.sendConnectionResumeOrHoldEvent(\n            this.jvbJingleSession.peerconnection, !newStatus);\n    }\n\n    // Clear dtmfManager, so that it can be recreated with new connection\n    this.dtmfManager = null;\n\n    // Update P2P status\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.P2P_STATUS,\n        this,\n        this.p2p);\n    this.eventEmitter.emit(JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED, this.getActiveMediaSession());\n\n    // Refresh connection interrupted/restored\n    this.eventEmitter.emit(\n        this.isConnectionInterrupted()\n            ? JitsiConferenceEvents.CONNECTION_INTERRUPTED\n            : JitsiConferenceEvents.CONNECTION_RESTORED);\n};\n\n/**\n * Starts new P2P session.\n * @param {string} remoteJid the JID of the remote participant\n * @private\n */\nJitsiConference.prototype._startP2PSession = function(remoteJid) {\n    this._maybeClearDeferredStartP2P();\n    if (this.p2pJingleSession) {\n        logger.error('P2P session already started!');\n\n        return;\n    }\n\n    this.isP2PConnectionInterrupted = false;\n    this.p2pJingleSession\n        = this.xmpp.connection.jingle.newP2PJingleSession(\n            this.room.myroomjid,\n            remoteJid);\n    logger.info(\n        'Created new P2P JingleSession', this.room.myroomjid, remoteJid);\n    this._sendConferenceJoinAnalyticsEvent();\n\n    this.p2pJingleSession.initialize(\n        this.room,\n        this.rtc,\n        this._signalingLayer,\n        {\n            ...this.options.config,\n            enableInsertableStreams: this.isE2EEEnabled()\n        });\n\n    logger.info('Starting CallStats for P2P connection...');\n\n    let remoteID = Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid);\n\n    const participant = this.participants[remoteID];\n\n    if (participant) {\n        remoteID = participant.getStatsID() || remoteID;\n    }\n\n    this.statistics.startCallStats(\n        this.p2pJingleSession.peerconnection,\n        remoteID);\n\n    const localTracks = this.getLocalTracks();\n\n    this.p2pJingleSession.invite(localTracks);\n};\n\n/**\n * Suspends media transfer over the JVB connection.\n * @private\n */\nJitsiConference.prototype._suspendMediaTransferForJvbConnection = function() {\n    logger.info('Suspending media transfer over the JVB connection...');\n    this.jvbJingleSession.setMediaTransferActive(false, false).then(\n        () => {\n            logger.info('Suspended media transfer over the JVB connection !');\n        },\n        error => {\n            logger.error(\n                'Failed to suspend media transfer over the JVB connection:',\n                error);\n        });\n};\n\n/**\n * Method when called will decide whether it's the time to start or stop\n * the P2P session.\n * @param {boolean} userLeftEvent if <tt>true</tt> it means that the call\n * originates from the user left event.\n * @private\n */\nJitsiConference.prototype._maybeStartOrStopP2P = function(userLeftEvent) {\n    if (!this.isP2PEnabled()\n            || this.isP2PTestModeEnabled()\n            || browser.isFirefox()\n            || browser.isWebKitBased()\n            || this.isE2EEEnabled()) {\n        logger.info('Auto P2P disabled');\n\n        return;\n    }\n    const peers = this.getParticipants();\n    const peerCount = peers.length;\n\n    // FIXME 1 peer and it must *support* P2P switching\n    const shouldBeInP2P = this._shouldBeInP2PMode();\n\n    // Clear deferred \"start P2P\" task\n    if (!shouldBeInP2P && this.deferredStartP2PTask) {\n        this._maybeClearDeferredStartP2P();\n    }\n\n    // Start peer to peer session\n    if (!this.p2pJingleSession && shouldBeInP2P) {\n        const peer = peerCount && peers[0];\n\n\n        const myId = this.myUserId();\n        const peersId = peer.getId();\n\n        if (myId > peersId) {\n            logger.debug(\n                'I\\'m the bigger peersId - '\n                + 'the other peer should start P2P', myId, peersId);\n\n            return;\n        } else if (myId === peersId) {\n            logger.error('The same IDs ? ', myId, peersId);\n\n            return;\n        }\n\n        const jid = peer.getJid();\n\n        if (userLeftEvent) {\n            if (this.deferredStartP2PTask) {\n                logger.error('Deferred start P2P task\\'s been set already!');\n\n                return;\n            }\n            logger.info(\n                `Will start P2P with: ${jid} after ${\n                    this.backToP2PDelay} seconds...`);\n            this.deferredStartP2PTask = setTimeout(\n                this._startP2PSession.bind(this, jid),\n                this.backToP2PDelay * 1000);\n        } else {\n            logger.info(`Will start P2P with: ${jid}`);\n            this._startP2PSession(jid);\n        }\n    } else if (this.p2pJingleSession && !shouldBeInP2P) {\n        logger.info(`Will stop P2P with: ${this.p2pJingleSession.remoteJid}`);\n\n        // Log that there will be a switch back to the JVB connection\n        if (this.p2pJingleSession.isInitiator && peerCount > 1) {\n            Statistics.sendAnalyticsAndLog(\n                createP2PEvent(ACTION_P2P_SWITCH_TO_JVB));\n        }\n        this._stopP2PSession();\n    }\n};\n\n/**\n * Tells whether or not this conference should be currently in the P2P mode.\n *\n * @private\n * @returns {boolean}\n */\nJitsiConference.prototype._shouldBeInP2PMode = function() {\n    const peers = this.getParticipants();\n    const peerCount = peers.length;\n    const hasBotPeer = peers.find(p => p.getBotType() === 'poltergeist' || p.hasFeature(FEATURE_JIGASI)) !== undefined;\n    const shouldBeInP2P = peerCount === 1 && !hasBotPeer;\n\n    logger.debug(`P2P? peerCount: ${peerCount}, hasBotPeer: ${hasBotPeer} => ${shouldBeInP2P}`);\n\n    return shouldBeInP2P;\n};\n\n/**\n * Stops the current P2P session.\n * @param {Object} options - Options for stopping P2P.\n * @param {string} options.reason - One of the Jingle \"reason\" element\n * names as defined by https://xmpp.org/extensions/xep-0166.html#def-reason\n * @param {string} options.reasonDescription - Text\n * description that will be included in the session terminate message\n * @param {boolean} requestRestart - Whether this is due to a session restart, in which case\n * media will not be resumed on the JVB.\n * @private\n */\nJitsiConference.prototype._stopP2PSession = function(options = {}) {\n    const {\n        reason = 'success',\n        reasonDescription = 'Turning off P2P session',\n        requestRestart = false\n    } = options;\n\n    if (!this.p2pJingleSession) {\n        logger.error('No P2P session to be stopped!');\n\n        return;\n    }\n\n    const wasP2PEstablished = this.isP2PActive();\n\n    // Swap remote tracks, but only if the P2P has been fully established\n    if (wasP2PEstablished) {\n        if (this.jvbJingleSession && !requestRestart) {\n            this._resumeMediaTransferForJvbConnection();\n        }\n\n        // Remove remote P2P tracks\n        this._removeRemoteP2PTracks();\n    }\n\n    // Stop P2P stats\n    logger.info('Stopping remote stats for P2P connection');\n    this.statistics.stopRemoteStats(this.p2pJingleSession.peerconnection);\n    logger.info('Stopping CallStats for P2P connection');\n    this.statistics.stopCallStats(this.p2pJingleSession.peerconnection);\n\n    this.p2pJingleSession.terminate(\n        () => {\n            logger.info('P2P session terminate RESULT');\n        },\n        error => {\n            // Because both initiator and responder are simultaneously\n            // terminating their JingleSessions in case of the 'to JVB switch'\n            // when 3rd participant joins, both will dispose their sessions and\n            // reply with 'item-not-found' (see strophe.jingle.js). We don't\n            // want to log this as an error since it's expected behaviour.\n            //\n            // We want them both to terminate, because in case of initiator's\n            // crash the responder would stay in P2P mode until ICE fails which\n            // could take up to 20 seconds.\n            //\n            // NOTE: whilst this is an error callback,  'success' as a reason is\n            // considered as graceful session terminate\n            // where both initiator and responder terminate their sessions\n            // simultaneously.\n            if (reason !== 'success') {\n                logger.error('An error occurred while trying to terminate P2P Jingle session', error);\n            }\n        }, {\n            reason,\n            reasonDescription,\n            sendSessionTerminate: this.room\n                && this.getParticipantById(\n                    Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid))\n        });\n\n    this.p2pJingleSession = null;\n\n    // Update P2P status and other affected events/states\n    this._setP2PStatus(false);\n\n    if (wasP2PEstablished) {\n        // Add back remote JVB tracks\n        if (this.jvbJingleSession && !requestRestart) {\n            this._addRemoteJVBTracks();\n        } else {\n            logger.info('Not adding remote JVB tracks - no session yet');\n        }\n    }\n};\n\n/**\n * Updates room presence if needed and send the packet in case of a modification.\n * @param {JingleSessionPC} jingleSession the session firing the event, contains the peer connection which\n * tracks we will check.\n * @param {Object|null} ctx a context object we can distinguish multiple calls of the same pass of updating tracks.\n */\nJitsiConference.prototype._updateRoomPresence = function(jingleSession, ctx) {\n    if (!jingleSession) {\n        return;\n    }\n\n    // skips sending presence twice for the same pass of updating ssrcs\n    if (ctx) {\n        if (ctx.skip) {\n            return;\n        }\n        ctx.skip = true;\n    }\n\n    let presenceChanged = false;\n    let muteStatusChanged, videoTypeChanged;\n    const localTracks = jingleSession.peerconnection.getLocalTracks();\n    const localAudioTracks = localTracks.filter(track => track.getType() === MediaType.AUDIO);\n    const localVideoTracks = localTracks.filter(track => track.getType() === MediaType.VIDEO);\n\n    // Set presence for all the available local tracks.\n    for (const track of localTracks) {\n        muteStatusChanged = this._setTrackMuteStatus(track.getType(), track, track.isMuted());\n        if (track.getType() === MediaType.VIDEO) {\n            videoTypeChanged = this._setNewVideoType(track);\n        }\n        presenceChanged = presenceChanged || muteStatusChanged || videoTypeChanged;\n    }\n\n    // Set the presence in the legacy format if there are no local tracks and multi stream support is not enabled.\n    if (!FeatureFlags.isMultiStreamSupportEnabled()) {\n        let audioMuteStatusChanged, videoMuteStatusChanged;\n\n        if (!localAudioTracks?.length) {\n            audioMuteStatusChanged = this._setTrackMuteStatus(MediaType.AUDIO, undefined, true);\n        }\n        if (!localVideoTracks?.length) {\n            videoMuteStatusChanged = this._setTrackMuteStatus(MediaType.VIDEO, undefined, true);\n            videoTypeChanged = this._setNewVideoType();\n        }\n\n        presenceChanged = presenceChanged || audioMuteStatusChanged || videoMuteStatusChanged || videoTypeChanged;\n    }\n\n    presenceChanged && this.room.sendPresence();\n};\n\n/**\n * Checks whether or not the conference is currently in the peer to peer mode.\n * Being in peer to peer mode means that the direct connection has been\n * established and the P2P connection is being used for media transmission.\n * @return {boolean} <tt>true</tt> if in P2P mode or <tt>false</tt> otherwise.\n */\nJitsiConference.prototype.isP2PActive = function() {\n    return this.p2p;\n};\n\n/**\n * Returns the current ICE state of the P2P connection.\n * NOTE: method is used by the jitsi-meet-torture tests.\n * @return {string|null} an ICE state or <tt>null</tt> if there's currently\n * no P2P connection.\n */\nJitsiConference.prototype.getP2PConnectionState = function() {\n    if (this.isP2PActive()) {\n        return this.p2pJingleSession.peerconnection.getConnectionState();\n    }\n\n    return null;\n};\n\n/**\n * Configures the peerconnection so that a given framre rate can be achieved for desktop share.\n *\n * @param {number} maxFps The capture framerate to be used for desktop tracks.\n * @returns {boolean} true if the operation is successful, false otherwise.\n */\nJitsiConference.prototype.setDesktopSharingFrameRate = function(maxFps) {\n    if (typeof maxFps !== 'number' || isNaN(maxFps)) {\n        logger.error(`Invalid value ${maxFps} specified for desktop capture frame rate`);\n\n        return false;\n    }\n\n    this._desktopSharingFrameRate = maxFps;\n\n    // Enable or disable simulcast for plan-b screensharing based on the capture fps.\n    this.jvbJingleSession && this.jvbJingleSession.peerconnection.setDesktopSharingFrameRate(maxFps);\n\n    // Set the capture rate for desktop sharing.\n    this.rtc.setDesktopSharingFrameRate(maxFps);\n\n    return true;\n};\n\n/**\n * Manually starts new P2P session (should be used only in the tests).\n */\nJitsiConference.prototype.startP2PSession = function() {\n    const peers = this.getParticipants();\n\n    // Start peer to peer session\n    if (peers.length === 1) {\n        const peerJid = peers[0].getJid();\n\n        this._startP2PSession(peerJid);\n    } else {\n        throw new Error(\n            'There must be exactly 1 participant to start the P2P session !');\n    }\n};\n\n/**\n * Manually stops the current P2P session (should be used only in the tests).\n */\nJitsiConference.prototype.stopP2PSession = function(options) {\n    this._stopP2PSession(options);\n};\n\n/**\n * Get a summary of how long current participants have been the dominant speaker\n * @returns {object}\n */\nJitsiConference.prototype.getSpeakerStats = function() {\n    return this.speakerStatsCollector.getStats();\n};\n\n/**\n * Sends a face landmarks object to the xmpp server.\n * @param {Object} payload\n */\nJitsiConference.prototype.sendFaceLandmarks = function(payload) {\n    if (payload.faceExpression) {\n        this.xmpp.sendFaceExpressionEvent(this.room.roomjid, payload);\n    }\n};\n\n/**\n * Sets the constraints for the video that is requested from the bridge.\n *\n * @param {Object} videoConstraints The constraints which are specified in the\n * following format. The message updates the fields that are present and leaves the\n * rest unchanged on the bridge. Therefore, any field that is not applicable anymore\n * should be cleared by passing an empty object or list (whatever is applicable).\n * {\n *      'lastN': 20,\n *      'selectedEndpoints': ['A', 'B', 'C'],\n *      'onStageEndpoints': ['A'],\n *      'defaultConstraints': { 'maxHeight': 180 },\n *      'constraints': {\n *          'A': { 'maxHeight': 720 }\n *      }\n * }\n */\nJitsiConference.prototype.setReceiverConstraints = function(videoConstraints) {\n    this.receiveVideoController.setReceiverConstraints(videoConstraints);\n};\n\n/**\n * Sets the maximum video size the local participant should receive from remote\n * participants.\n *\n * @param {number} maxFrameHeight - the maximum frame height, in pixels,\n * this receiver is willing to receive.\n * @returns {void}\n */\nJitsiConference.prototype.setReceiverVideoConstraint = function(maxFrameHeight) {\n    this.receiveVideoController.setPreferredReceiveMaxFrameHeight(maxFrameHeight);\n};\n\n/**\n * Sets the maximum video size the local participant should send to remote\n * participants.\n * @param {number} maxFrameHeight - The user preferred max frame height.\n * @returns {Promise} promise that will be resolved when the operation is\n * successful and rejected otherwise.\n */\nJitsiConference.prototype.setSenderVideoConstraint = function(maxFrameHeight) {\n    return this.sendVideoController.setPreferredSendMaxFrameHeight(maxFrameHeight);\n};\n\n/**\n * Creates a video SIP GW session and returns it if service is enabled. Before\n * creating a session one need to check whether video SIP GW service is\n * available in the system {@link JitsiConference.isVideoSIPGWAvailable}. Even\n * if there are available nodes to serve this request, after creating the\n * session those nodes can be taken and the request about using the\n * created session can fail.\n *\n * @param {string} sipAddress - The sip address to be used.\n * @param {string} displayName - The display name to be used for this session.\n * @returns {JitsiVideoSIPGWSession|Error} Returns null if conference is not\n * initialised and there is no room.\n */\nJitsiConference.prototype.createVideoSIPGWSession = function(sipAddress, displayName) {\n    if (!this.room) {\n        return new Error(VideoSIPGWConstants.ERROR_NO_CONNECTION);\n    }\n\n    return this.videoSIPGWHandler\n        .createVideoSIPGWSession(sipAddress, displayName);\n};\n\n/**\n * Sends a conference.join analytics event.\n *\n * @returns {void}\n */\nJitsiConference.prototype._sendConferenceJoinAnalyticsEvent = function() {\n    const meetingId = this.getMeetingUniqueId();\n\n    if (this._conferenceJoinAnalyticsEventSent || !meetingId || this.getActivePeerConnection() === null) {\n        return;\n    }\n\n    Statistics.sendAnalytics(createConferenceEvent('joined', {\n        meetingId,\n        participantId: `${meetingId}.${this._statsCurrentId}`\n    }));\n    this._conferenceJoinAnalyticsEventSent = Date.now();\n};\n\n/**\n * Sends conference.left analytics event.\n * @private\n */\nJitsiConference.prototype._sendConferenceLeftAnalyticsEvent = function() {\n    const meetingId = this.getMeetingUniqueId();\n\n    if (!meetingId || !this._conferenceJoinAnalyticsEventSent) {\n\n        return;\n    }\n\n    Statistics.sendAnalytics(createConferenceEvent('left', {\n        meetingId,\n        participantId: `${meetingId}.${this._statsCurrentId}`,\n        stats: {\n            duration: Math.floor((Date.now() - this._conferenceJoinAnalyticsEventSent) / 1000),\n            perf: this.getPerformanceStats()\n        }\n    }));\n};\n\n/**\n * Restarts all active media sessions.\n *\n * @returns {void}\n */\nJitsiConference.prototype._restartMediaSessions = function() {\n    if (this.p2pJingleSession) {\n        this._stopP2PSession({\n            reasonDescription: 'restart',\n            requestRestart: true\n        });\n    }\n\n    if (this.jvbJingleSession) {\n        this.jvbJingleSession.terminate(\n            null /* success callback => we don't care */,\n            error => {\n                logger.warn('An error occurred while trying to terminate the JVB session', error);\n            }, {\n                reason: 'success',\n                reasonDescription: 'restart required',\n                requestRestart: true,\n                sendSessionTerminate: true\n            });\n    }\n\n    this._maybeStartOrStopP2P(false);\n};\n\n/**\n * Returns whether End-To-End encryption is enabled.\n *\n * @returns {boolean}\n */\nJitsiConference.prototype.isE2EEEnabled = function() {\n    return Boolean(this._e2eEncryption && this._e2eEncryption.isEnabled());\n};\n\n/**\n * Returns whether End-To-End encryption is supported. Note that not all participants\n * in the conference may support it.\n *\n * @returns {boolean}\n */\nJitsiConference.prototype.isE2EESupported = function() {\n    return E2EEncryption.isSupported(this.options.config);\n};\n\n/**\n * Enables / disables End-to-End encryption.\n *\n * @param {boolean} enabled whether to enable E2EE or not.\n * @returns {void}\n */\nJitsiConference.prototype.toggleE2EE = function(enabled) {\n    if (!this.isE2EESupported()) {\n        logger.warn('Cannot enable / disable E2EE: platform is not supported.');\n\n        return;\n    }\n\n    this._e2eEncryption.setEnabled(enabled);\n};\n\n/**\n * Sets the key and index for End-to-End encryption.\n *\n * @param {CryptoKey} [keyInfo.encryptionKey] - encryption key.\n * @param {Number} [keyInfo.index] - the index of the encryption key.\n * @returns {void}\n */\nJitsiConference.prototype.setMediaEncryptionKey = function(keyInfo) {\n    this._e2eEncryption.setEncryptionKey(keyInfo);\n};\n\n/**\n * Returns <tt>true</tt> if lobby support is enabled in the backend.\n *\n * @returns {boolean} whether lobby is supported in the backend.\n */\nJitsiConference.prototype.isLobbySupported = function() {\n    return Boolean(this.room && this.room.getLobby().isSupported());\n};\n\n/**\n * Returns <tt>true</tt> if the room has members only enabled.\n *\n * @returns {boolean} whether conference room is members only.\n */\nJitsiConference.prototype.isMembersOnly = function() {\n    return Boolean(this.room && this.room.membersOnlyEnabled);\n};\n\n/**\n * Enables lobby by moderators\n *\n * @returns {Promise} resolves when lobby room is joined or rejects with the error.\n */\nJitsiConference.prototype.enableLobby = function() {\n    if (this.room && this.isModerator()) {\n        return this.room.getLobby().enable();\n    }\n\n    return Promise.reject(\n        new Error('The conference not started or user is not moderator'));\n};\n\n/**\n * Disabled lobby by moderators\n *\n * @returns {void}\n */\nJitsiConference.prototype.disableLobby = function() {\n    if (this.room && this.isModerator()) {\n        this.room.getLobby().disable();\n    } else {\n        logger.warn(`Failed to disable lobby, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator'}`);\n    }\n};\n\n/**\n * Joins the lobby room with display name and optional email or with a shared password to skip waiting.\n *\n * @param {string} displayName Display name should be set to show it to moderators.\n * @param {string} email Optional email is used to present avatar to the moderator.\n * @returns {Promise<never>}\n */\nJitsiConference.prototype.joinLobby = function(displayName, email) {\n    if (this.room) {\n        return this.room.getLobby().join(displayName, email);\n    }\n\n    return Promise.reject(new Error('The conference not started'));\n};\n\n/**\n * Gets the local id for a participant in a lobby room.\n * Returns undefined when current participant is not in the lobby room.\n * This is used for lobby room private chat messages.\n *\n * @returns {string}\n */\nJitsiConference.prototype.myLobbyUserId = function() {\n    if (this.room) {\n        return this.room.getLobby().getLocalId();\n    }\n};\n\n/**\n * Sends a message to a lobby room.\n * When id is specified it sends a private message.\n * Otherwise it sends the message to all moderators.\n * @param {message} Object The message to send\n * @param {string} id The participant id.\n *\n * @returns {void}\n */\nJitsiConference.prototype.sendLobbyMessage = function(message, id) {\n    if (this.room) {\n        if (id) {\n            return this.room.getLobby().sendPrivateMessage(id, message);\n        }\n\n        return this.room.getLobby().sendMessage(message);\n    }\n};\n\n/**\n * Adds a message listener to the lobby room\n * @param {Function} listener The listener function,\n * called when a new message is received in the lobby room.\n *\n * @returns {Function} Handler returned to be able to remove it later.\n */\nJitsiConference.prototype.addLobbyMessageListener = function(listener) {\n    if (this.room) {\n        return this.room.getLobby().addMessageListener(listener);\n    }\n};\n\n/**\n * Removes a message handler from the lobby room\n * @param {Function} handler The handler function  to remove.\n *\n * @returns {void}\n */\nJitsiConference.prototype.removeLobbyMessageHandler = function(handler) {\n    if (this.room) {\n        return this.room.getLobby().removeMessageHandler(handler);\n    }\n};\n\n/**\n * Denies an occupant in the lobby room access to the conference.\n * @param {string} id The participant id.\n */\nJitsiConference.prototype.lobbyDenyAccess = function(id) {\n    if (this.room) {\n        this.room.getLobby().denyAccess(id);\n    }\n};\n\n/**\n * Approves the request to join the conference to a participant waiting in the lobby.\n *\n * @param {string} id The participant id.\n */\nJitsiConference.prototype.lobbyApproveAccess = function(id) {\n    if (this.room) {\n        this.room.getLobby().approveAccess(id);\n    }\n};\n\n/**\n * Returns <tt>true</tt> if AV Moderation support is enabled in the backend.\n *\n * @returns {boolean} whether AV Moderation is supported in the backend.\n */\nJitsiConference.prototype.isAVModerationSupported = function() {\n    return Boolean(this.room && this.room.getAVModeration().isSupported());\n};\n\n/**\n * Enables AV Moderation.\n * @param {MediaType} mediaType \"audio\" or \"video\"\n */\nJitsiConference.prototype.enableAVModeration = function(mediaType) {\n    if (this.room && this.isModerator()\n        && (mediaType === MediaType.AUDIO || mediaType === MediaType.VIDEO)) {\n        this.room.getAVModeration().enable(true, mediaType);\n    } else {\n        logger.warn(`Failed to enable AV moderation, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator, '}${\n            this.room && this.isModerator() ? 'wrong media type passed' : ''}`);\n    }\n};\n\n/**\n * Disables AV Moderation.\n * @param {MediaType} mediaType \"audio\" or \"video\"\n */\nJitsiConference.prototype.disableAVModeration = function(mediaType) {\n    if (this.room && this.isModerator()\n        && (mediaType === MediaType.AUDIO || mediaType === MediaType.VIDEO)) {\n        this.room.getAVModeration().enable(false, mediaType);\n    } else {\n        logger.warn(`Failed to disable AV moderation, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator, '}${\n            this.room && this.isModerator() ? 'wrong media type passed' : ''}`);\n    }\n};\n\n/**\n * Approve participant access to certain media, allows unmuting audio or video.\n *\n * @param {MediaType} mediaType \"audio\" or \"video\"\n * @param id the id of the participant.\n */\nJitsiConference.prototype.avModerationApprove = function(mediaType, id) {\n    if (this.room && this.isModerator()\n        && (mediaType === MediaType.AUDIO || mediaType === MediaType.VIDEO)) {\n\n        const participant = this.getParticipantById(id);\n\n        if (!participant) {\n            return;\n        }\n\n        this.room.getAVModeration().approve(mediaType, participant.getJid());\n    } else {\n        logger.warn(`AV moderation approve skipped , ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator, '}${\n            this.room && this.isModerator() ? 'wrong media type passed' : ''}`);\n    }\n};\n\n/**\n * Reject participant access to certain media, blocks unmuting audio or video.\n *\n * @param {MediaType} mediaType \"audio\" or \"video\"\n * @param id the id of the participant.\n */\nJitsiConference.prototype.avModerationReject = function(mediaType, id) {\n    if (this.room && this.isModerator()\n        && (mediaType === MediaType.AUDIO || mediaType === MediaType.VIDEO)) {\n\n        const participant = this.getParticipantById(id);\n\n        if (!participant) {\n            return;\n        }\n\n        this.room.getAVModeration().reject(mediaType, participant.getJid());\n    } else {\n        logger.warn(`AV moderation reject skipped , ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator, '}${\n            this.room && this.isModerator() ? 'wrong media type passed' : ''}`);\n    }\n};\n\n/**\n * Returns the breakout rooms manager object.\n *\n * @returns {Object} the breakout rooms manager.\n */\nJitsiConference.prototype.getBreakoutRooms = function() {\n    return this.room?.getBreakoutRooms();\n};\n\n\n\n/**\n * Gets the local user when joined\n */\n JitsiConference.prototype.getLocalUser = function() {\n    if (this.user) {\n        return this.user;\n    }\n};\n\n/**\n * Gets the local user when joined\n */\nJitsiConference.prototype.terminate = function() {\n    this.sendCommand('terminate', {});\n};\n\n\nJitsiConference.prototype.handleSubtitles = function() {\n\n    let pastMessage = {};\n    const JSON_TYPE_TRANSCRIPTION_RESULT = 'transcription-result';\n    const JSON_TYPE_TRANSLATION_RESULT = 'translation-result';\n    const P_NAME_REQUESTING_TRANSCRIPTION = 'requestingTranscription';\n    const P_NAME_TRANSLATION_LANGUAGE = 'translation_language';\n\n    this.on(JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED, (participant, json) => {\n\n        if (!(json && (json.type === JSON_TYPE_TRANSCRIPTION_RESULT || json.type === JSON_TYPE_TRANSLATION_RESULT))) {\n            return;\n        }\n\n        const translationLanguage = this.getLocalParticipantProperty('translation_language');\n\n        try {\n\n            const transcriptMessageID = json.message_id;\n            const participantName = json.participant.name;\n\n            let newTranscriptMessage = { transcriptMessageID };\n\n            if (json.type === JSON_TYPE_TRANSLATION_RESULT && json.language === translationLanguage) {\n\n                newTranscriptMessage.final = json.text;\n                newTranscriptMessage.participantName = participantName;\n\n            } else if (json.type === JSON_TYPE_TRANSCRIPTION_RESULT && !translationLanguage) {\n                // Displays interim and final results without any translation if\n                // translations are disabled.\n\n                const { text } = json.transcript[0];\n\n                // We update the previous transcript message with the same\n                // message ID or adds a new transcript message if it does not\n                // exist in the map.\n\n                if (pastMessage.transcriptMessageID === transcriptMessageID) {\n                    newTranscriptMessage = pastMessage;\n                } else {\n                    newTranscriptMessage.participantName = participantName;\n                }\n\n                // If this is final result, update the state as a final result\n                // and start a count down to remove the subtitle from the state\n                if (!json.is_interim) {\n                    newTranscriptMessage.final = text;\n\n                } else if (json.stability > 0.85) {\n                    // If the message has a high stability, we can update the\n                    // stable field of the state and remove the previously\n                    // unstable results\n                    newTranscriptMessage.stable = text;\n                    newTranscriptMessage.unstable = undefined;\n\n                } else {\n                    // Otherwise, this result has an unstable result, which we\n                    // add to the state. The unstable result will be appended\n                    // after the stable part.\n                    newTranscriptMessage.unstable = text;\n                }\n\n            }\n\n            let finalText = '';\n\n            if (newTranscriptMessage.final) {\n                finalText = newTranscriptMessage.final;\n            } else {\n                const stable = newTranscriptMessage.stable || '';\n                const unstable = newTranscriptMessage.unstable || '';\n\n                finalText = stable + unstable;\n            }\n            const fellowParticipantName =  this.participants[json?.participant?.id]?._identity?.user?.name ||  this?.getLocalUser()?.name;\n            this.eventEmitter.emit(JitsiConferenceEvents.SUBTITLES_RECEIVED, json?.participant?.id, fellowParticipantName, finalText);\n        } catch (error) {\n            logger.error('Error occurred while updating transcriptions\\n', error);\n        }\n    });\n};\n\n// enable analytics\nJitsiConference.prototype.enableAnalytics = function() {\n    this.statistics.addAnalyticsEventListener((eventName, payload) => {\n        let name = '', body = {};\n\n        if (typeof eventName === 'string') {\n            name = eventName;\n            body = payload;\n        } else if (typeof eventName === 'object') {\n            name = eventName.name;\n            body = eventName;\n        }\n\n        const finalPaylaod = {\n            name,\n            action: body.action ? body.action : '',\n            actionSubject: body.actionSubject ? body.actionSubject : '',\n            source: body.source ? body.source : '',\n            attributes: JSON.stringify(payload)\n        };\n\n        this.eventEmitter.emit(JitsiConferenceEvents.ANALYTICS_EVENT_RECEIVED, finalPaylaod);\n    });\n};\n\nJitsiConference.prototype.startLocalRecording = function(format = 'ogg') {\n    this.recordingController.startRecording(format);\n};\n\nJitsiConference.prototype.stopLocalRecording = function() {\n    this.recordingController.stopRecording();\n};\n\nJitsiConference.prototype.switchFormat = function() {\n    this.recordingController.switchFormat(format);\n};\n\nJitsiConference.prototype.setMuted = function(muted) {\n    this.recordingController.setMuted(muted);\n};\n\nJitsiConference.prototype.setMicDevice = function(micDeviceId) {\n    this.recordingController.setMicDevice(micDeviceId);\n};\n\nJitsiConference.prototype.startSIPVideoCall = function(sipAddress, displayName) {\n    if (this.sessions[sipAddress]) {\n        return;\n    }\n    const session = this.createVideoSIPGWSession(sipAddress, displayName);\n\n    this.sessions[sipAddress] = session;\n    session.start();\n};\n\nJitsiConference.prototype.stopSIPVideoCall = function(sipAddress) {\n    if (!this.sessions[sipAddress]) {\n        return;\n    }\n    this.sessions[sipAddress].stop();\n    delete this.sessions[sipAddress];\n};","import Bourne from '@hapi/bourne';\n\n/**\n * A list if keys to ignore when parsing.\n * @type {string[]}\n */\n\nconst blacklist = [ '__proto__', 'constructor', 'prototype' ];\n\n/**\n * Parses the query/search or fragment/hash parameters out of a specific URL and\n * returns them as a JS object.\n *\n * @param {URL} url - The URL to parse.\n * @param {boolean} dontParse - If falsy, some transformations (for parsing the\n * value as JSON) will be executed.\n * @param {string} source - If {@code 'search'}, the parameters will parsed out\n * of {@code url.search}; otherwise, out of {@code url.hash}.\n * @returns {Object}\n */\n\nexport function parseURLParams(dontParse = true) {\n    const paramStr = location.search ? location.search : location.hash;\n    const params = {};\n    const paramParts = paramStr && paramStr.substr(1)\n        .split('&') || []; // Detect and ignore hash params for hash routers.\n\n    if (location.hash && paramParts.length === 1) {\n        const firstParam = paramParts[0];\n\n        if (firstParam.startsWith('/') && firstParam.split('&').length === 1) {\n            return params;\n        }\n    }\n\n    paramParts.forEach(part => {\n        const param = part.split('=');\n        const key = param[0];\n\n        if (!key || blacklist.includes(key.split('.')[0])) {\n            return;\n        }\n\n        let value;\n\n        try {\n            value = param[1];\n\n            if (!dontParse) {\n                const decoded = decodeURIComponent(value)\n                    .replace(/\\\\&/, '&');\n                value = decoded === 'undefined' ? undefined : Bourne.parse(decoded);\n            }\n        } catch (e) {\n            console.log(`Failed to parse URL parameter value: ${String(value)}`);\n            return;\n        }\n\n        params[key] = value;\n    });\n    return params;\n}\n\n\nexport function syncWithURL(conferenceConfig) {\n    const params = parseURLParams();\n    Object.keys(params)\n        .forEach(param => {\n            const key = param.replace('config.', '');\n            switch (key) {\n            case 'analytics.disabled':\n                conferenceConfig.analytics.disabled = params[param];\n                break;\n            case 'startWithAudioMuted':\n                conferenceConfig.startAudioMuted = params[param];\n                break;\n            case 'startWithVideoMuted':\n                conferenceConfig.startVideoMuted = params[param];\n                break;\n            case 'p2p.enabled':\n                conferenceConfig.p2p.enabled = params[param];\n                break;\n            default:\n                conferenceConfig[key] = params[param];\n            }\n        });\n    console.log(\"conferenceConfig\",conferenceConfig);    \n    return conferenceConfig;\n}\n\n\n\n\n\n\n\n","// enable/disable different features by changing this configuration file\nexport const initSDKConfig = {\n    disableAudioLevels: false,\n    flags: {\n        sendMultipleVideoStreams: true,\n        sourceNameSignaling: true\n    }\n    // useIPv6 - boolean property\n    // disableSimulcast: true //boolean property. Enables/disables simulcast.\n    // enableWindowOnErrorHandler - boolean property (default false). Enables/disables attaching global onerror handler (window.onerror).\n    // disableThirdPartyRequests - if true - callstats will be disabled and the callstats API won't be included.\n    // enableAnalyticsLogging - boolean property (default false). Enables/disables analytics logging.\n    // externalStorage - Object that implements the Storage interface. If specified this object will be used for storing data instead of localStorage.\n    // callStatsCustomScriptUrl - (optional) custom url to access callstats client script\n    // disableRtx - (optional) boolean property (default to false). Enables/disable the use of RTX.\n    // disabledCodec - the mime type of the code that should not be negotiated on the peerconnection.\n    // preferredCodec the mime type of the codec that needs to be made the preferred codec for the connection.\n};\n\nexport const connectionConfig = {\n    hosts: {\n        domain: 'sariska.io',\n        muc: 'muc.sariska.io'\n    },\n    serviceUrl: 'wss://api.sariska.io/api/v1/media/websocket',\n    clientNode: 'https://www.sariska.io',\n    // enableLipSync - (optional) boolean property which enables the lipsync feature. Currently works only in Chrome and is disabled by default.\n};\n\n\nexport const devConnectionConfig = {\n    hosts: {\n        domain: 'dev.sariska.io',\n        muc: 'muc.dev.sariska.io'\n    },\n    serviceUrl: 'wss://api.dev.sariska.io/api/v1/media/websocket',\n    clientNode: 'https://www.sariska.io',\n    // enableLipSync - (optional) boolean property which enables the lipsync feature. Currently works only in Chrome and is disabled by default.\n};\n\n\nexport const conferenceConfig = {\n    enableLocalRecording: true,\n    enableVirtualBackground: false,\n    enableNoiseCancellation: false,\n    enableTalkWhileMuted: true,\n    enableNoAudioDetection: true,\n    enableNoisyMicDetection: true,\n    createVADProcessor: true,\n    openBridgeChannel: 'websocket',\n    //- Enables/disables bridge channel. Values can be \"datachannel\", \"websocket\", true (treat it as \"datachannel\"), undefined (treat it as \"datachannel\") and false (don't open any channel). NOTE: we recommend to set that option to true\n    // recordingType - the type of recording to be used\n    // callStatsID - callstats credentials\n    // callStatsSecret - callstats credentials\n    // enableTalkWhileMuted - boolean property. Enables/disables talk while muted detection, by default the value is false/disabled.\n    // ignoreStartMuted - ignores start muted events coming from jicofo.\n    // startSilent - enables silent mode, will mark audio as inactive will not send/receive audio\n    // confID - Used for statistics to identify conference, if tenants are supported will contain tenant and the non lower case variant for the room name.\n    // siteID - (optional) Used for statistics to identify the site where the user is coming from, if tenants are supported it will contain a unique identifier for that tenant. If not provided, the value will be infered from confID\n    // statisticsId - The id to be used as stats instead of default callStatsUsername.\n    // statisticsDisplayName - The display name to be used for stats, used for callstats.\n    // focusUserJid - The real JID of focus participant - can be overridden here\n    // enableNoAudioDetection\n    // enableNoisyMicDetection\n    // enableRemb\n    // enableTcc\n    // useRoomAsSharedDocumentName\n    // channelLastN\n    // startBitrate\n    // stereo\n    // forceJVB121Ratio - \"Math.random() < forceJVB121Ratio\" will determine whether a 2 people conference should be moved to the JVB instead of P2P. The decision is made on the responder side, after ICE succeeds on the P2P connection.\n    hiddenDomain: \"recorder.sariska.io\",\n    // startAudioMuted\n    // startVideoMuted\n    enableLayerSuspension: true, // - if set to 'true', we will cap the video send bitrate when we are told we have not been selected by any endpoints (and therefore the non-thumbnail streams are not in use).\n    // deploymentInfo\n    // shard\n    // userRegion\n    // rttMonitor\n    // enabled\n    // initialDelay\n    // getStatsInterval\n    // analyticsInterval\n    // stunServers\n    e2eping: {\n        pingInterval: -1 // analyticsInterval: 60000,\n    },\n    analytics: {\n        disabled: false\n        // rtcstatsEnabled: true,\n\n        // In order to enable rtcstats one needs to provide a endpoint url.\n        // rtcstatsEndpoint: wss://rtcstats-server-pilot.jitsi.net/,\n\n        // The interval at which rtcstats will poll getStats, defaults to 1000ms.\n        // If the value is set to 0 getStats won't be polled and the rtcstats client\n        // will only send data related to RTCPeerConnection events.\n        // rtcstatsPolIInterval: 1000,\n    },\n    // pingInterval\n    // abTesting - A/B testing related options\n    // enableSuspendVideoTest\n    // testing\n    // capScreenshareBitrate\n    // p2pTestMode\n    // octo\n    // probability\n    p2p: {\n        // Enables peer to peer mode. When enabled the system will try to\n        // establish a direct connection when there are exactly 2 participants\n        // in the room. If that succeeds the conference will stop sending data\n        // through the JVB and use the peer to peer connection instead. When a\n        // 3rd participant joins the conference will be moved back to the JVB\n        // connection.\n        enabled: false // The STUN servers that will be used in the peer to peer connections\n        // stunServers: [\n        //    { urls: 'stun.l.google.com:19302' }\n        //]\n        // Sets the ICE transport policy for the p2p connection. At the time\n        // of this writing the list of possible values are 'all' and 'relay',\n        // but that is subject to change in the future. The enum is defined in\n        // the WebRTC standard:\n        // https://www.w3.org/TR/webrtc/#rtcicetransportpolicy-enum.\n        // If not set, the effective value is 'all'.\n        // iceTransportPolicy: 'all',\n        // Provides a way to set the video codec preference on the p2p connection. Acceptable\n        // codec values are 'VP8', 'VP9' and 'H264'.\n        // preferredCodec: 'H264',\n        // Provides a way to prevent a video codec from being negotiated on the p2p connection.\n        // disabledCodec: '',\n        // How long we're going to wait, before going back to P2P after the 3rd\n        // participant has left the conference (to filter out page reload).\n        // backToP2PDelay: 5\n    }\n};\n","import JitsiConference from './JitsiConference';\nimport * as JitsiConnectionEvents from './JitsiConnectionEvents';\nimport Statistics from './modules/statistics/statistics';\nimport XMPP from './modules/xmpp/xmpp';\nimport {\n    CONNECTION_DISCONNECTED as ANALYTICS_CONNECTION_DISCONNECTED,\n    createConnectionFailedEvent\n} from './service/statistics/AnalyticsEvents';\nimport { jitsiLocalStorage } from '@jitsi/js-utils';\nimport { syncWithURL } from \"./modules/util/parseURLParams\";\nimport { connectionConfig, conferenceConfig, devConnectionConfig } from './config';\nexport const DISCO_JIBRI_FEATURE = 'http://jitsi.org/protocol/jibri';\n\n/**\n * Creates a new connection object for the Jitsi Meet server side video\n * conferencing service. Provides access to the JitsiConference interface.\n * @param appID identification for the provider of Jitsi Meet video conferencing\n * services.\n * @param token the JWT token used to authenticate with the server(optional)\n * @param options Object with properties / settings related to connection with\n * the server.\n * @constructor\n */\nexport default function JitsiConnection(token, roomName, isDev) {\n    let options;\n    const jwt = this.parseJwt(token);\n    this.name = roomName;\n    this.user = jwt.context.user;\n    options = isDev ? {...devConnectionConfig} : {...connectionConfig};\n    options.serviceUrl = `${options.serviceUrl}?room=${roomName}`;\n    options.ownerId = jwt.context.group;\n    this.options = options;\n    this.xmpp = new XMPP(options, token);\n    this.token = token;\n    this.isDev = isDev;\n\n    /* eslint-disable max-params */\n    this.addEventListener(JitsiConnectionEvents.CONNECTION_FAILED,\n        (errType, msg, credentials, details) => {\n            Statistics.sendAnalyticsAndLog(\n                createConnectionFailedEvent(errType, msg, details));\n        });\n    /* eslint-enable max-params */\n\n    this.addEventListener(JitsiConnectionEvents.CONNECTION_DISCONNECTED,\n        msg => {\n            // we can see disconnects from normal tab closing of the browser\n            // and then there are no msgs, but we want to log only disconnects\n            // when there is real error\n            // XXX Do we need the difference in handling between the log and\n            // analytics event here?\n            if (msg) {\n                Statistics.sendAnalytics(\n                    ANALYTICS_CONNECTION_DISCONNECTED,\n                    { message: msg });\n            }\n            Statistics.sendLog(\n                JSON.stringify(\n                    {\n                        id: ANALYTICS_CONNECTION_DISCONNECTED,\n                        msg\n                    }));\n        });\n}\n\nJitsiConnection.prototype.parseJwt = function (token) {\n    try {\n      return JSON.parse(atob(token.split('.')[1]));\n    } catch (e) {\n      return null;\n    }\n  };\n  \n/**\n * Connect the client with the server.\n * @param options {object} connecting options\n * (for example authentications parameters).\n */\nJitsiConnection.prototype.connect = function(options = {}) {\n    const usernameOverride = jitsiLocalStorage.getItem('xmpp_username_override');\n    const passwordOverride = jitsiLocalStorage.getItem('xmpp_password_override');\n  \n    if (usernameOverride && usernameOverride.length > 0) {\n      options.id = usernameOverride; // eslint-disable-line no-param-reassign\n    }\n  \n    if (passwordOverride && passwordOverride.length > 0) {\n      options.password = passwordOverride; // eslint-disable-line no-param-reassign\n    }\n  \n    this.xmpp.connect(options.id, options.password);\n};\n\n/**\n * Attach to existing connection. Can be used for optimizations. For example:\n * if the connection is created on the server we can attach to it and start\n * using it.\n *\n * @param options {object} connecting options - rid, sid and jid.\n */\nJitsiConnection.prototype.attach = function(options) {\n    this.xmpp.attach(options);\n};\n\n/**\n * Disconnect the client from the server.\n * @returns {Promise} - Resolves when the disconnect process is finished or rejects with an error.\n */\nJitsiConnection.prototype.disconnect = function(...args) {\n    // XXX Forward any arguments passed to JitsiConnection.disconnect to\n    // XMPP.disconnect. For example, the caller of JitsiConnection.disconnect\n    // may optionally pass the event which triggered the disconnect in order to\n    // provide the implementation with finer-grained context.\n    return this.xmpp.disconnect(...args);\n};\n\n/**\n * Returns the jid of the participant associated with the XMPP connection.\n *\n * @returns {string} The jid of the participant.\n */\nJitsiConnection.prototype.getJid = function() {\n    return this.xmpp.getJid();\n};\n\n/**\n * This method allows renewal of the tokens if they are expiring.\n * @param token the new token.\n */\nJitsiConnection.prototype.setToken = function(token) {\n    this.token = token;\n};\n\n/**\n * Creates and joins new conference.\n * @param name the name of the conference; if null - a generated name will be\n * provided from the api\n * @param options Object with properties / settings related to the conference\n * that will be created.\n * @returns {JitsiConference} returns the new conference object.\n */\nJitsiConnection.prototype.initJitsiConference = function(options={}) {\n    options = { ...conferenceConfig,\n        ...options\n    };\n    options = syncWithURL(options);\n    const name = this.name;\n    if (this.isDev) {\n        options = {...options, hiddenDomain: \"recorder.dev.sariska.io\"}\n    }\n    \n    if (options.iAmRecorder) {\n        this.addFeature(DISCO_JIBRI_FEATURE);\n    }\n\n    return new JitsiConference({\n        name,\n        config: options,\n        connection: this,\n        user: this.user\n    });\n};\n\n/**\n * Subscribes the passed listener to the event.\n * @param event {JitsiConnectionEvents} the connection event.\n * @param listener {Function} the function that will receive the event\n */\nJitsiConnection.prototype.addEventListener = function(event, listener) {\n    this.xmpp.addListener(event, listener);\n};\n\n/**\n * Unsubscribes the passed handler.\n * @param event {JitsiConnectionEvents} the connection event.\n * @param listener {Function} the function that will receive the event\n */\nJitsiConnection.prototype.removeEventListener = function(event, listener) {\n    this.xmpp.removeListener(event, listener);\n};\n\n/**\n * Returns measured connectionTimes.\n */\nJitsiConnection.prototype.getConnectionTimes = function() {\n    return this.xmpp.connectionTimes;\n};\n\n/**\n * Adds new feature to the list of supported features for the local\n * participant.\n * @param {String} feature the name of the feature.\n * @param {boolean} submit if true - the new list of features will be\n * immediately submitted to the others.\n */\nJitsiConnection.prototype.addFeature = function(feature, submit = false) {\n    this.xmpp.caps.addFeature(feature, submit, true);\n};\n\n/**\n * Removes a feature from the list of supported features for the local\n * participant\n * @param {String} feature the name of the feature.\n * @param {boolean} submit if true - the new list of features will be\n * immediately submitted to the others.\n */\nJitsiConnection.prototype.removeFeature = function(feature, submit = false) {\n    this.xmpp.caps.removeFeature(feature, submit, true);\n};\n\n/**\n * Get object with internal logs.\n */\nJitsiConnection.prototype.getLogs = function() {\n    const data = this.xmpp.getJingleLog();\n\n    const metadata = {};\n\n    metadata.time = new Date();\n    metadata.url = window.location.href;\n    metadata.ua = navigator.userAgent;\n\n    const log = this.xmpp.getXmppLog();\n\n    if (log) {\n        metadata.xmpp = log;\n    }\n\n    data.metadata = metadata;\n\n    return data;\n};\n","/**\n * The events for the media devices.\n */\n\nexport enum JitsiMediaDevicesEvents {\n    /**\n     * Indicates that the list of available media devices has been changed. The\n     * event provides the following parameters to its listeners:\n     *\n     * @param {MediaDeviceInfo[]} devices - array of MediaDeviceInfo or\n     *  MediaDeviceInfo-like objects that are currently connected.\n     *  @see https://developer.mozilla.org/en-US/docs/Web/API/MediaDeviceInfo\n     */\n    DEVICE_LIST_CHANGED = 'mediaDevices.devicechange',\n\n    /**\n     * Event emitted when the user granted/blocked a permission for the camera / mic.\n     * Used to keep track of the granted permissions on browsers which don't\n     * support the Permissions API.\n     */\n    PERMISSIONS_CHANGED = 'rtc.permissions_changed',\n\n    /**\n     * Indicates that the environment is currently showing permission prompt to\n     * access camera and/or microphone. The event provides the following\n     * parameters to its listeners:\n     *\n     * @param {'chrome'|'opera'|'firefox'|'safari'|'nwjs'\n     *  |'react-native'|'android'} environmentType - type of browser or\n     *  other execution environment.\n     */\n    PERMISSION_PROMPT_IS_SHOWN = 'mediaDevices.permissionPromptIsShown',\n\n    SLOW_GET_USER_MEDIA = 'mediaDevices.slowGetUserMedia'\n};\n\n// exported for backward compatibility\nexport const DEVICE_LIST_CHANGED = JitsiMediaDevicesEvents.DEVICE_LIST_CHANGED;\nexport const PERMISSIONS_CHANGED = JitsiMediaDevicesEvents.PERMISSIONS_CHANGED;\nexport const PERMISSION_PROMPT_IS_SHOWN = JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN;\nexport const SLOW_GET_USER_MEDIA = JitsiMediaDevicesEvents.SLOW_GET_USER_MEDIA;\n","import EventEmitter from 'events';\n\nimport * as JitsiMediaDevicesEvents from './JitsiMediaDevicesEvents';\nimport RTC from './modules/RTC/RTC';\nimport browser from './modules/browser';\nimport Statistics from './modules/statistics/statistics';\nimport { MediaType } from './service/RTC/MediaType';\nimport RTCEvents from './service/RTC/RTCEvents';\n\nconst AUDIO_PERMISSION_NAME = 'microphone';\nconst PERMISSION_GRANTED_STATUS = 'granted';\nconst VIDEO_PERMISSION_NAME = 'camera';\n\n/**\n * Media devices utilities for Jitsi.\n */\nclass JitsiMediaDevices {\n    /**\n     * Initializes a {@code JitsiMediaDevices} object. There will be a single\n     * instance of this class.\n     */\n    constructor() {\n        this._eventEmitter = new EventEmitter();\n        this._permissions = {};\n\n        RTC.addListener(\n            RTCEvents.DEVICE_LIST_CHANGED,\n            devices =>\n                this._eventEmitter.emit(\n                    JitsiMediaDevicesEvents.DEVICE_LIST_CHANGED,\n                    devices));\n        RTC.addListener(\n            RTCEvents.DEVICE_LIST_AVAILABLE,\n            devices =>\n                this._logOutputDevice(\n                    this.getAudioOutputDevice(),\n                    devices));\n\n        // We would still want to update the permissions cache in case the permissions API is not supported.\n        RTC.addListener(\n            RTCEvents.PERMISSIONS_CHANGED,\n            permissions => this._handlePermissionsChange(permissions));\n\n        // Test if the W3C Permissions API is implemented and the 'camera' and 'microphone' permissions are\n        // implemented. If supported add onchange listeners.\n        this._permissionsApiSupported = new Promise(resolve => {\n            if (!navigator.permissions) {\n                resolve(false);\n\n                return;\n            }\n\n            const self = this;\n\n            const promises = [];\n\n            promises.push(navigator.permissions.query({ name: VIDEO_PERMISSION_NAME })\n                .then(status => {\n                    this._handlePermissionsChange({\n                        [MediaType.VIDEO]: this._parsePermissionState(status)\n                    });\n                    status.onchange = function() {\n                        try {\n                            self._handlePermissionsChange({\n                                [MediaType.VIDEO]: self._parsePermissionState(this)\n                            });\n                        } catch (error) {\n                            // Nothing to do.\n                        }\n                    };\n\n                    return true;\n                })\n                .catch(() => false));\n\n            promises.push(navigator.permissions.query({ name: AUDIO_PERMISSION_NAME })\n                .then(status => {\n                    this._handlePermissionsChange({\n                        [MediaType.AUDIO]: this._parsePermissionState(status)\n                    });\n                    status.onchange = function() {\n                        try {\n                            self._handlePermissionsChange({\n                                [MediaType.AUDIO]: self._parsePermissionState(this)\n                            });\n                        } catch (error) {\n                            // Nothing to do.\n                        }\n                    };\n\n                    return true;\n                })\n                .catch(() => false));\n\n            Promise.all(promises).then(results => resolve(results.every(supported => supported)));\n\n        });\n    }\n\n\n    /**\n     * Parses a PermissionState object and returns true for granted and false otherwise.\n     *\n     * @param {PermissionState} permissionStatus - The PermissionState object retrieved from the Permissions API.\n     * @returns {boolean} - True for granted and false for denied.\n     * @throws {TypeError}\n     */\n    _parsePermissionState(permissionStatus = {}) {\n        // The status attribute is deprecated, and state\n        // should be used instead, but check both for now\n        // for backwards compatibility.\n        const status = permissionStatus.state || permissionStatus.status;\n\n        if (typeof status !== 'string') {\n            throw new TypeError();\n        }\n\n        return status === PERMISSION_GRANTED_STATUS;\n    }\n\n    /**\n     * Updates the local granted/denied permissions cache. A permissions might be\n     * granted, denied, or undefined. This is represented by having its media\n     * type key set to {@code true} or {@code false} respectively.\n     *\n     * @param {Object} permissions - Object with the permissions.\n     */\n    _handlePermissionsChange(permissions) {\n        const hasPermissionsChanged\n            = [ MediaType.AUDIO, MediaType.VIDEO ]\n                .some(type => type in permissions && permissions[type] !== this._permissions[type]);\n\n        if (hasPermissionsChanged) {\n            this._permissions = {\n                ...this._permissions,\n                ...permissions\n            };\n            this._eventEmitter.emit(JitsiMediaDevicesEvents.PERMISSIONS_CHANGED, this._permissions);\n\n            if (this._permissions[MediaType.AUDIO] || this._permissions[MediaType.VIDEO]) {\n                // Triggering device list update when the permissiions are granted in order to update\n                // the labels the devices.\n                // eslint-disable-next-line no-empty-function\n                this.enumerateDevices(() => {});\n            }\n        }\n    }\n\n    /**\n     * Gathers data and sends it to statistics.\n     * @param deviceID the device id to log\n     * @param devices list of devices\n     */\n    _logOutputDevice(deviceID, devices) {\n        const device\n            = devices.find(\n                d => d.kind === 'audiooutput' && d.deviceId === deviceID);\n\n        if (device) {\n            Statistics.sendActiveDeviceListEvent(\n                RTC.getEventDataForActiveDevice(device));\n        }\n    }\n\n    /**\n     * Executes callback with list of media devices connected.\n     * @param {function} callback\n     */\n    enumerateDevices(callback) {\n        RTC.enumerateDevices(callback);\n    }\n\n    /**\n     * Checks if its possible to enumerate available cameras/micropones.\n     * @returns {Promise<boolean>} a Promise which will be resolved only once\n     * the WebRTC stack is ready, either with true if the device listing is\n     * available available or with false otherwise.\n     */\n    isDeviceListAvailable() {\n        return RTC.isDeviceListAvailable();\n    }\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     * @param {string} [deviceType] - type of device to change. Default is\n     *      undefined or 'input', 'output' - for audio output device change.\n     * @returns {boolean} true if available, false otherwise.\n     */\n    isDeviceChangeAvailable(deviceType) {\n        return RTC.isDeviceChangeAvailable(deviceType);\n    }\n\n    /**\n     * Checks if the permission for the given device was granted.\n     *\n     * @param {'audio'|'video'} [type] - type of devices to check,\n     *      undefined stands for both 'audio' and 'video' together\n     * @returns {Promise<boolean>}\n     */\n    isDevicePermissionGranted(type) {\n        return new Promise(resolve => {\n            // Shortcut: first check if we already know the permission was\n            // granted.\n            if (type in this._permissions) {\n                resolve(this._permissions[type]);\n\n                return;\n            }\n\n            // Check using the Permissions API.\n            this._permissionsApiSupported.then(supported => {\n                if (!supported) {\n                    resolve(false);\n\n                    return;\n                }\n\n                const promises = [];\n\n                switch (type) {\n                case MediaType.VIDEO:\n                    promises.push(\n                        navigator.permissions.query({\n                            name: VIDEO_PERMISSION_NAME\n                        }));\n                    break;\n                case MediaType.AUDIO:\n                    promises.push(\n                        navigator.permissions.query({\n                            name: AUDIO_PERMISSION_NAME\n                        }));\n                    break;\n                default:\n                    promises.push(\n                        navigator.permissions.query({\n                            name: VIDEO_PERMISSION_NAME\n                        }));\n                    promises.push(\n                        navigator.permissions.query({\n                            name: AUDIO_PERMISSION_NAME\n                        }));\n                }\n\n                Promise.all(promises).then(\n                    results => resolve(results.every(permissionStatus => {\n                        try {\n                            return this._parsePermissionState(permissionStatus);\n                        } catch {\n                            return false;\n                        }\n                    })),\n                    () => resolve(false)\n                );\n            });\n        });\n    }\n\n    /**\n     * Returns true if it is possible to be simultaneously capturing audio from more than one device.\n     *\n     * @returns {boolean}\n     */\n    isMultipleAudioInputSupported() {\n        return !(\n            (browser.isFirefox() && browser.isVersionLessThan('101'))\n            || browser.isIosBrowser()\n        );\n    }\n\n    /**\n     * Returns currently used audio output device id, 'default' stands\n     * for default device\n     * @returns {string}\n     */\n    getAudioOutputDevice() {\n        return RTC.getAudioOutputDevice();\n    }\n\n    /**\n     * Sets current audio output device.\n     * @param {string} deviceId - id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices(), 'default' is for\n     *      default device\n     * @returns {Promise} - resolves when audio output is changed, is rejected\n     *      otherwise\n     */\n    setAudioOutputDevice(deviceId) {\n        const availableDevices = RTC.getCurrentlyAvailableMediaDevices();\n\n        if (availableDevices.length > 0) {\n            // if we have devices info report device to stats\n            // normally this will not happen on startup as this method is called\n            // too early. This will happen only on user selection of new device\n            this._logOutputDevice(\n                deviceId, RTC.getCurrentlyAvailableMediaDevices());\n        }\n\n        return RTC.setAudioOutputDevice(deviceId);\n    }\n\n    /**\n     * Adds an event handler.\n     * @param {string} event - event name\n     * @param {function} handler - event handler\n     */\n    addEventListener(event, handler) {\n        this._eventEmitter.addListener(event, handler);\n    }\n\n    /**\n     * Removes event handler.\n     * @param {string} event - event name\n     * @param {function} handler - event handler\n     */\n    removeEventListener(event, handler) {\n        this._eventEmitter.removeListener(event, handler);\n    }\n\n    /**\n     * Emits an event.\n     * @param {string} event - event name\n     */\n    emitEvent(event, ...args) {\n        this._eventEmitter.emit(event, ...args);\n    }\n}\n\nexport default new JitsiMediaDevices();\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport RTC from '../RTC/RTC';\nimport Statistics from '../statistics/statistics';\n\n\nconst logger = getLogger(__filename);\n\n// If after 3000 ms the detector did not find any active devices consider that there aren't any usable ones available\n// i.e. audioLevel > 0.008\nconst DETECTION_TIMEOUT = 3000;\n\n\n/**\n * Go through all audio devices on the system and return one that is active, i.e. has audio signal.\n *\n * @returns Promise<Object> - Object containing information about the found device.\n */\nexport default function getActiveAudioDevice() {\n\n    return new Promise(resolve => {\n        RTC.enumerateDevices(devices => {\n            const audioDevices = devices.filter(device => device.kind === 'audioinput');\n            const devicePromiseArray = [];\n\n\n            for (const micDevice of audioDevices) {\n                const devicePromise = RTC.obtainAudioAndVideoPermissions({ devices: [ 'audio' ],\n                    micDeviceId: micDevice.deviceId }).then(tracks => {\n\n                    // We expect a single device to be available when obtained from obtainAudioAndVideoPermissions\n                    // that's  why only take p.value[0].\n                    const track = tracks[0];\n\n                    Statistics.startLocalStats(track, track.setAudioLevel.bind(track));\n\n                    return track;\n                });\n\n                devicePromiseArray.push(devicePromise);\n            }\n\n            Promise.allSettled(devicePromiseArray).then(outcomeArray => {\n                const successfulPromises = outcomeArray.filter(p => p.status === 'fulfilled');\n                const rejectedPromises = outcomeArray.filter(p => p.status === 'rejected');\n\n\n                const availableDevices = successfulPromises.map(p => p.value);\n                const rejectReasons = rejectedPromises.map(p => p.value);\n\n                for (const reason of rejectReasons) {\n                    logger.error('Failed to acquire audio device with error: ', reason);\n                }\n\n                // Setup event handlers for monitored devices.\n                for (const device of availableDevices) {\n                    device.on(JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED, audioLevel => {\n                        // This is a very naive approach but works, a more accurate one would be to use rnnoise in\n                        // order to limit  the number of false positives. The 0.008 constant is due to how\n                        // LocalStatsCollector from lib-jitsi-meet publishes audio-levels, in this case 0.008 denotes //\n                        // no input.\n                        if (audioLevel > 0.008) {\n                            stopActiveDevices(availableDevices);\n                            resolve({ deviceId: device.deviceId,\n                                deviceLabel: device.track.label });\n                        }\n                    });\n                }\n\n                // Cancel the detection in case no devices was found with audioLevel > 0 in the set timeout.\n                setTimeout(() => {\n                    stopActiveDevices(availableDevices);\n                    resolve({\n                        deviceId: '',\n                        deviceLabel: '' }\n                    );\n                }, DETECTION_TIMEOUT);\n\n            });\n\n        });\n    });\n}\n\n/**\n * Stop the streams of the provided JitsiLocalTracks.\n *\n * @param {Array<JitsiLocalTrack>} deviceList - Array of JitsiLocalTracks to stop.\n * @returns {void}\n */\nfunction stopActiveDevices(deviceList) {\n    for (const device of deviceList) {\n        device.stopStream();\n    }\n}\n","/**\n * The know jingle actions that can be sent and should be acted upon by\n * {@code ProxyConnectionService} and {@code ProxyConnectionPC}.\n */\nexport enum ACTIONS {\n    ACCEPT = 'session-accept',\n    CONNECTION_ERROR = 'connection-error-encountered',\n    INITIATE = 'session-initiate',\n    TERMINATE = 'session-terminate',\n    TRANSPORT_INFO = 'transport-info',\n    UNAVAILABLE = 'unavailable'\n};\n","import { getLogger } from '@jitsi/logger';\n\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\nimport RTC from '../RTC/RTC';\nimport JingleSessionPC from '../xmpp/JingleSessionPC';\nimport SignalingLayerImpl from '../xmpp/SignalingLayerImpl';\nimport { DEFAULT_STUN_SERVERS } from '../xmpp/xmpp';\n\nimport { ACTIONS } from './constants';\n\nconst logger = getLogger(__filename);\n\n/**\n * An adapter around {@code JingleSessionPC} so its logic can be re-used without\n * an XMPP connection. It is being re-used for consistency with the rest of the\n * codebase and to leverage existing peer connection event handling. Also\n * this class provides a facade to hide most of the API for\n * {@code JingleSessionPC}.\n */\nexport default class ProxyConnectionPC {\n    /**\n     * Initializes a new {@code ProxyConnectionPC} instance.\n     *\n     * @param {Object} options - Values to initialize the instance with.\n     * @param {Object} [options.pcConfig] - The {@code RTCConfiguration} to use for the WebRTC peer connection.\n     * @param {boolean} [options.isInitiator] - If true, the local client should send offers. If false, the local\n     * client should send answers. Defaults to false.\n     * @param {Function} options.onRemoteStream - Callback to invoke when a remote media stream has been received\n     * through the peer connection.\n     * @param {string} options.peerJid - The jid of the remote client with which the peer connection is being establish\n     * and which should receive direct messages regarding peer connection updates.\n     * @param {boolean} [options.receiveVideo] - Whether or not the peer connection should accept incoming video\n     * streams. Defaults to false.\n     * @param {Function} options.onSendMessage - Callback to invoke when a message has to be sent (signaled) out.\n     */\n    constructor(options = {}) {\n        this._options = {\n            pcConfig: {},\n            isInitiator: false,\n            receiveAudio: false,\n            receiveVideo: false,\n            ...options\n        };\n\n        /**\n         * Instances of {@code JitsiTrack} associated with this instance of\n         * {@code ProxyConnectionPC}.\n         *\n         * @type {Array<JitsiTrack>}\n         */\n        this._tracks = [];\n\n        /**\n         * The active instance of {@code JingleSessionPC}.\n         *\n         * @type {JingleSessionPC|null}\n         */\n        this._peerConnection = null;\n\n        // Bind event handlers so they are only bound once for every instance.\n        this._onError = this._onError.bind(this);\n        this._onRemoteStream = this._onRemoteStream.bind(this);\n        this._onSendMessage = this._onSendMessage.bind(this);\n    }\n\n    /**\n     * Returns the jid of the remote peer with which this peer connection should\n     * be established with.\n     *\n     * @returns {string}\n     */\n    getPeerJid() {\n        return this._options.peerJid;\n    }\n\n    /**\n     * Updates the peer connection based on the passed in jingle.\n     *\n     * @param {Object} $jingle - An XML jingle element, wrapped in query,\n     * describing how the peer connection should be updated.\n     * @returns {void}\n     */\n    processMessage($jingle) {\n        switch ($jingle.attr('action')) {\n        case ACTIONS.ACCEPT:\n            this._onSessionAccept($jingle);\n            break;\n\n        case ACTIONS.INITIATE:\n            this._onSessionInitiate($jingle);\n            break;\n\n        case ACTIONS.TERMINATE:\n            this._onSessionTerminate($jingle);\n            break;\n\n        case ACTIONS.TRANSPORT_INFO:\n            this._onTransportInfo($jingle);\n            break;\n        }\n    }\n\n    /**\n     * Instantiates a peer connection and starts the offer/answer cycle to\n     * establish a connection with a remote peer.\n     *\n     * @param {Array<JitsiLocalTrack>} localTracks - Initial local tracks to add\n     * to add to the peer connection.\n     * @returns {void}\n     */\n    start(localTracks = []) {\n        if (this._peerConnection) {\n            return;\n        }\n\n        this._tracks = this._tracks.concat(localTracks);\n\n        this._peerConnection = this._createPeerConnection();\n\n        this._peerConnection.invite(localTracks);\n    }\n\n    /**\n     * Begins the process of disconnecting from a remote peer and cleaning up\n     * the peer connection.\n     *\n     * @returns {void}\n     */\n    stop() {\n        if (this._peerConnection) {\n            this._peerConnection.terminate();\n        }\n\n        this._onSessionTerminate();\n    }\n\n    /**\n     * Instantiates a new {@code JingleSessionPC} by stubbing out the various\n     * dependencies of {@code JingleSessionPC}.\n     *\n     * @private\n     * @returns {JingleSessionPC}\n     */\n    _createPeerConnection() {\n        /**\n         * {@code JingleSessionPC} takes in the entire jitsi-meet config.js\n         * object, which may not be accessible from the caller.\n         *\n         * @type {Object}\n         */\n        const configStub = {};\n\n        /**\n         * {@code JingleSessionPC} assumes an XMPP/Strophe connection object is\n         * passed through, which also has the jingle plugin initialized on it.\n         * This connection object is used to signal out peer connection updates\n         * via iqs, and those updates need to be piped back out to the remote\n         * peer.\n         *\n         * @type {Object}\n         */\n        const connectionStub = {\n            // At the time this is used for Spot and it's okay to say the connection is always connected, because if\n            // spot has no signalling it will not be in a meeting where this is used.\n            connected: true,\n            jingle: {\n                terminate: () => { /** no-op */ }\n            },\n            sendIQ: this._onSendMessage,\n\n            // Returns empty function, because it does not add any listeners for real\n            // eslint-disable-next-line no-empty-function\n            addEventListener: () => () => { }\n        };\n\n        /**\n         * {@code JingleSessionPC} can take in a custom ice configuration,\n         * depending on the peer connection type, peer-to-peer or other.\n         * However, {@code ProxyConnectionPC} always assume a peer-to-peer\n         * connection so the ice configuration is hard-coded with defaults.\n         *\n         * @type {Object}\n         */\n        const pcConfigStub = {\n            iceServers: DEFAULT_STUN_SERVERS,\n            ...this._options.pcConfig\n        };\n\n        /**\n         * {@code JingleSessionPC} expects an instance of\n         * {@code JitsiConference}, which has an event emitter that is used\n         * to signal various connection updates that the local client should\n         * act upon. The conference instance is not a dependency of a proxy\n         * connection, but the emitted events can be relevant to the proxy\n         * connection so the event emitter is stubbed.\n         *\n         * @param {string} event - The constant for the event type.\n         * @type {Function}\n         * @returns {void}\n         */\n        const emitter = event => {\n            switch (event) {\n            case XMPPEvents.CONNECTION_ICE_FAILED:\n            case XMPPEvents.CONNECTION_FAILED:\n                this._onError(ACTIONS.CONNECTION_ERROR, event);\n                break;\n            }\n        };\n\n        /**\n         * {@link JingleSessionPC} expects an instance of\n         * {@link ChatRoom} to be passed in. {@link ProxyConnectionPC}\n         * is instantiated outside of the {@code JitsiConference}, so it must be\n         * stubbed to prevent errors.\n         *\n         * @type {Object}\n         */\n        const roomStub = {\n            addEventListener: () => { /* no op */ },\n            addPresenceListener: () => { /* no-op */ },\n            connectionTimes: [],\n            eventEmitter: { emit: emitter },\n            getMediaPresenceInfo: () => {\n                // Errors occur if this function does not return an object\n\n                return {};\n            },\n            removeEventListener: () => { /* no op */ },\n            removePresenceListener: () => { /* no-op */ },\n            supportsRestartByTerminate: () => false\n        };\n\n        /**\n         * A {@code JitsiConference} stub passed to the {@link RTC} module.\n         * @type {Object}\n         */\n        const conferenceStub = {\n            myUserId: () => ''\n        };\n\n        /**\n         * Create an instance of {@code RTC} as it is required for peer\n         * connection creation by {@code JingleSessionPC}. An existing instance\n         * of {@code RTC} from elsewhere should not be re-used because it is\n         * a stateful grouping of utilities.\n         */\n        this._rtc = new RTC(conferenceStub, {});\n\n        /**\n         * Add the remote track listener here as {@code JingleSessionPC} has\n         * {@code TraceablePeerConnection} which uses {@code RTC}'s event\n         * emitter.\n         */\n        this._rtc.addListener(\n            RTCEvents.REMOTE_TRACK_ADDED,\n            this._onRemoteStream\n        );\n\n        const peerConnection = new JingleSessionPC(\n            undefined, // sid\n            undefined, // localJid\n            this._options.peerJid, // remoteJid\n            connectionStub, // connection\n            {\n                offerToReceiveAudio: this._options.receiveAudio,\n                offerToReceiveVideo: this._options.receiveVideo\n            }, // mediaConstraints\n            pcConfigStub, // pcConfig\n            true, // isP2P\n            this._options.isInitiator // isInitiator\n        );\n\n        const signalingLayer = new SignalingLayerImpl();\n\n        signalingLayer.setChatRoom(roomStub);\n\n        /**\n         * An additional initialize call is necessary to properly set instance\n         * variable for calling.\n         */\n        peerConnection.initialize(roomStub, this._rtc, signalingLayer, configStub);\n\n        return peerConnection;\n    }\n\n    /**\n     * Invoked when a connection related issue has been encountered.\n     *\n     * @param {string} errorType - The constant indicating the type of the error\n     * that occured.\n     * @param {string} details - Optional additional data about the error.\n     * @private\n     * @returns {void}\n     */\n    _onError(errorType, details = '') {\n        this._options.onError(this._options.peerJid, errorType, details);\n    }\n\n    /**\n     * Callback invoked when the peer connection has received a remote media\n     * stream.\n     *\n     * @param {JitsiRemoteTrack} jitsiRemoteTrack - The remote media stream\n     * wrapped in {@code JitsiRemoteTrack}.\n     * @private\n     * @returns {void}\n     */\n    _onRemoteStream(jitsiRemoteTrack) {\n        this._tracks.push(jitsiRemoteTrack);\n\n        this._options.onRemoteStream(jitsiRemoteTrack);\n    }\n\n    /**\n     * Callback invoked when {@code JingleSessionPC} needs to signal a message\n     * out to the remote peer.\n     *\n     * @param {XML} iq - The message to signal out.\n     * @private\n     * @returns {void}\n     */\n    _onSendMessage(iq) {\n        this._options.onSendMessage(this._options.peerJid, iq);\n    }\n\n    /**\n     * Callback invoked in response to an agreement to start a proxy connection.\n     * The passed in jingle element should contain an SDP answer to a previously\n     * sent SDP offer.\n     *\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\n     * @private\n     * @returns {void}\n     */\n    _onSessionAccept($jingle) {\n        if (!this._peerConnection) {\n            logger.error('Received an answer when no peer connection exists.');\n\n            return;\n        }\n\n        this._peerConnection.setAnswer($jingle);\n    }\n\n    /**\n     * Callback invoked in response to a request to start a proxy connection.\n     * The passed in jingle element should contain an SDP offer.\n     *\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\n     * @private\n     * @returns {void}\n     */\n    _onSessionInitiate($jingle) {\n        if (this._peerConnection) {\n            logger.error('Received an offer when an offer was already sent.');\n\n            return;\n        }\n\n        this._peerConnection = this._createPeerConnection();\n\n        this._peerConnection.acceptOffer(\n            $jingle,\n            () => { /** no-op */ },\n            () => this._onError(\n                this._options.peerJid,\n                ACTIONS.CONNECTION_ERROR,\n                'session initiate error'\n            )\n        );\n    }\n\n    /**\n     * Callback invoked in response to a request to disconnect an active proxy\n     * connection. Cleans up tracks and the peer connection.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onSessionTerminate() {\n        this._tracks.forEach(track => track.dispose());\n        this._tracks = [];\n\n        if (this._peerConnection) {\n            this._peerConnection.onTerminated();\n        }\n\n        if (this._rtc) {\n            this._rtc.removeListener(\n                RTCEvents.REMOTE_TRACK_ADDED,\n                this._onRemoteStream\n            );\n\n            this._rtc.destroy();\n        }\n    }\n\n    /**\n     * Callback invoked in response to ICE candidates from the remote peer.\n     * The passed in jingle element should contain an ICE candidate.\n     *\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\n     * @private\n     * @returns {void}\n     */\n    _onTransportInfo($jingle) {\n        this._peerConnection.addIceCandidates($jingle);\n    }\n}\n","/* globals $ */\n\nimport { getLogger } from '@jitsi/logger';\nimport { $iq } from 'strophe.js';\n\nimport { MediaType } from '../../service/RTC/MediaType';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport RTC from '../RTC/RTC';\n\nimport ProxyConnectionPC from './ProxyConnectionPC';\nimport { ACTIONS } from './constants';\n\nconst logger = getLogger(__filename);\n\n/**\n * Instantiates a new ProxyConnectionPC and ensures only one exists at a given\n * time. Currently it assumes ProxyConnectionPC is used only for screensharing\n * and assumes IQs to be used for communication.\n */\nexport default class ProxyConnectionService {\n    /**\n     * Initializes a new {@code ProxyConnectionService} instance.\n     *\n     * @param {Object} options - Values to initialize the instance with.\n     * @param {boolean} [options.convertVideoToDesktop] - Whether or not proxied video should be returned as a desktop\n     * stream. Defaults to false.\n     * @param {Object} [options.pcConfig] - The {@code RTCConfiguration} to use for the WebRTC peer connection.\n     * @param {JitsiConnection} [options.jitsiConnection] - The {@code JitsiConnection} which will be used to fetch\n     * TURN credentials for the P2P connection.\n     * @param {Function} options.onRemoteStream - Callback to invoke when a remote video stream has been received and\n     * converted to a {@code JitsiLocakTrack}. The {@code JitsiLocakTrack} will be passed in.\n     * @param {Function} options.onSendMessage - Callback to invoke when a message has to be sent (signaled) out. The\n     * arguments passed in are the jid to send the message to and the message.\n     */\n    constructor(options = {}) {\n        const {\n            jitsiConnection,\n            ...otherOptions\n        } = options;\n\n        /**\n         * Holds a reference to the collection of all callbacks.\n         *\n         * @type {Object}\n         */\n        this._options = {\n            pcConfig: jitsiConnection && jitsiConnection.xmpp.connection.jingle.p2pIceConfig,\n            ...otherOptions\n        };\n\n        /**\n         * The active instance of {@code ProxyConnectionService}.\n         *\n         * @type {ProxyConnectionPC|null}\n         */\n        this._peerConnection = null;\n\n        // Bind event handlers so they are only bound once for every instance.\n        this._onFatalError = this._onFatalError.bind(this);\n        this._onSendMessage = this._onSendMessage.bind(this);\n        this._onRemoteStream = this._onRemoteStream.bind(this);\n    }\n\n    /**\n     * Parses a message object regarding a proxy connection to create a new\n     * proxy connection or update and existing connection.\n     *\n     * @param {Object} message - A message object regarding establishing or\n     * updating a proxy connection.\n     * @param {Object} message.data - An object containing additional message\n     * details.\n     * @param {string} message.data.iq - The stringified iq which explains how\n     * and what to update regarding the proxy connection.\n     * @param {string} message.from - The message sender's full jid. Used for\n     * sending replies.\n     * @returns {void}\n     */\n    processMessage(message) {\n        const peerJid = message.from;\n\n        if (!peerJid) {\n            return;\n        }\n\n        // If a proxy connection has already been established and messages come\n        // from another peer jid then those messages should be replied to with\n        // a rejection.\n        if (this._peerConnection\n            && this._peerConnection.getPeerJid() !== peerJid) {\n            this._onFatalError(\n                peerJid,\n                ACTIONS.CONNECTION_ERROR,\n                'rejected'\n            );\n\n            return;\n        }\n\n        const iq = this._convertStringToXML(message.data.iq);\n        const $jingle = iq && iq.find('jingle');\n        const action = $jingle && $jingle.attr('action');\n\n        if (action === ACTIONS.INITIATE) {\n            this._peerConnection = this._createPeerConnection(peerJid, {\n                isInitiator: false,\n                receiveVideo: true\n            });\n        }\n\n        // Truthy check for peer connection added to protect against possibly\n        // receiving actions before an ACTIONS.INITIATE.\n        if (this._peerConnection) {\n            this._peerConnection.processMessage($jingle);\n        }\n\n        // Take additional steps to ensure the peer connection is cleaned up\n        // if it is to be closed.\n        if (action === ACTIONS.CONNECTION_ERROR\n            || action === ACTIONS.UNAVAILABLE\n            || action === ACTIONS.TERMINATE) {\n            this._selfCloseConnection();\n        }\n\n        return;\n    }\n\n    /**\n     * Instantiates and initiates a proxy peer connection.\n     *\n     * @param {string} peerJid - The jid of the remote client that should\n     * receive messages.\n     * @param {Array<JitsiLocalTrack>} localTracks - Initial media tracks to\n     * send through to the peer.\n     * @returns {void}\n     */\n    start(peerJid, localTracks = []) {\n        this._peerConnection = this._createPeerConnection(peerJid, {\n            isInitiator: true,\n            receiveVideo: false\n        });\n\n        this._peerConnection.start(localTracks);\n    }\n\n    /**\n     * Terminates any active proxy peer connection.\n     *\n     * @returns {void}\n     */\n    stop() {\n        if (this._peerConnection) {\n            this._peerConnection.stop();\n        }\n\n        this._peerConnection = null;\n    }\n\n    /**\n     * Transforms a stringified xML into a XML wrapped in jQuery.\n     *\n     * @param {string} xml - The XML in string form.\n     * @private\n     * @returns {Object|null} A jQuery version of the xml. Null will be returned\n     * if an error is encountered during transformation.\n     */\n    _convertStringToXML(xml) {\n        try {\n            const xmlDom = new DOMParser().parseFromString(xml, 'text/xml');\n\n            return $(xmlDom);\n        } catch (e) {\n            logger.error('Attempted to convert incorrectly formatted xml');\n\n            return null;\n        }\n    }\n\n    /**\n     * Helper for creating an instance of {@code ProxyConnectionPC}.\n     *\n     * @param {string} peerJid - The jid of the remote peer with which the\n     * {@code ProxyConnectionPC} will be established with.\n     * @param {Object} options - Additional defaults to instantiate the\n     * {@code ProxyConnectionPC} with. See the constructor of ProxyConnectionPC\n     * for more details.\n     * @private\n     * @returns {ProxyConnectionPC}\n     */\n    _createPeerConnection(peerJid, options = {}) {\n        if (!peerJid) {\n            throw new Error('Cannot create ProxyConnectionPC without a peer.');\n        }\n\n        const pcOptions = {\n            pcConfig: this._options.pcConfig,\n            onError: this._onFatalError,\n            onRemoteStream: this._onRemoteStream,\n            onSendMessage: this._onSendMessage,\n            peerJid,\n            ...options\n        };\n\n        return new ProxyConnectionPC(pcOptions);\n    }\n\n    /**\n     * Callback invoked when an error occurs that should cause\n     * {@code ProxyConnectionPC} to be closed if the peer is currently\n     * connected. Sends an error message/reply back to the peer.\n     *\n     * @param {string} peerJid - The peer jid with which the connection was\n     * attempted or started, and to which an iq with error details should be\n     * sent.\n     * @param {string} errorType - The constant indicating the type of the error\n     * that occured.\n     * @param {string} details - Optional additional data about the error.\n     * @private\n     * @returns {void}\n     */\n    _onFatalError(peerJid, errorType, details = '') {\n        logger.error(\n            'Received a proxy connection error', peerJid, errorType, details);\n\n        const iq = $iq({\n            to: peerJid,\n            type: 'set'\n        })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: errorType\n            })\n            .c('details')\n            .t(details)\n            .up();\n\n        this._onSendMessage(peerJid, iq);\n\n        if (this._peerConnection\n            && this._peerConnection.getPeerJid() === peerJid) {\n            this._selfCloseConnection();\n        }\n    }\n\n    /**\n     * Callback invoked when the remote peer of the {@code ProxyConnectionPC}\n     * has offered a media stream. The stream is converted into a\n     * {@code JitsiLocalTrack} for local usage if the {@code onRemoteStream}\n     * callback is defined.\n     *\n     * @param {JitsiRemoteTrack} jitsiRemoteTrack - The {@code JitsiRemoteTrack}\n     * for the peer's media stream.\n     * @private\n     * @returns {void}\n     */\n    _onRemoteStream(jitsiRemoteTrack) {\n        if (!this._options.onRemoteStream) {\n            logger.error('Remote track received without callback.');\n            jitsiRemoteTrack.dispose();\n\n            return;\n        }\n\n        const isVideo = jitsiRemoteTrack.isVideoTrack();\n        let videoType;\n\n        if (isVideo) {\n            videoType = this._options.convertVideoToDesktop\n                ? VideoType.DESKTOP : VideoType.CAMERA;\n        }\n\n        // Grab the webrtc media stream and pipe it through the same processing\n        // that would occur for a locally obtained media stream.\n        const mediaStream = jitsiRemoteTrack.getOriginalStream();\n        const jitsiLocalTracks = RTC.createLocalTracks(\n            [\n                {\n                    deviceId:\n                        `proxy:${this._peerConnection.getPeerJid()}`,\n                    mediaType: isVideo ? MediaType.VIDEO : MediaType.AUDIO,\n                    sourceType: 'proxy',\n                    stream: mediaStream,\n                    track: mediaStream.getVideoTracks()[0],\n                    videoType\n                }\n            ]);\n\n        this._options.onRemoteStream(jitsiLocalTracks[0]);\n    }\n\n    /**\n     * Formats and forwards a message an iq to be sent to a peer jid.\n     *\n     * @param {string} peerJid - The jid the iq should be sent to.\n     * @param {Object} iq - The iq which would be sent to the peer jid.\n     * @private\n     * @returns {void}\n     */\n    _onSendMessage(peerJid, iq) {\n        if (!this._options.onSendMessage) {\n            return;\n        }\n\n        try {\n            const stringifiedIq\n                = new XMLSerializer().serializeToString(iq.nodeTree || iq);\n\n            this._options.onSendMessage(peerJid, { iq: stringifiedIq });\n        } catch (e) {\n            logger.error('Attempted to send an incorrectly formatted iq.');\n        }\n    }\n\n    /**\n     * Invoked when preemptively closing the {@code ProxyConnectionPC}.\n     *\n     * @private\n     * @returns {void}\n     */\n    _selfCloseConnection() {\n        this.stop();\n\n        this._options.onConnectionClosed\n            && this._options.onConnectionClosed();\n    }\n}\n","import EventEmitter from 'events';\n\nimport browser from '../browser';\nimport Settings from '../settings/Settings';\nimport ScriptUtil from '../util/ScriptUtil';\n\nimport { CALLSTATS_SCRIPT_URL } from './constants';\n\nconst PRECALL_TEST_RESULTS = 'preCallTestResults';\nconst emitter = new EventEmitter();\nlet _initialized = false;\nlet api = null;\n\n/**\n * Loads the callstats io script.\n *\n * @returns {Promise<void>}\n */\nfunction _loadScript(options) {\n    if (browser.isReactNative()) {\n        return;\n    }\n\n    return new Promise(resolve => {\n        ScriptUtil.loadScript(\n            options.callStatsCustomScriptUrl || CALLSTATS_SCRIPT_URL,\n            /* async */ true,\n            /* prepend */ true,\n            /* relativeURL */ undefined,\n            /* loadCallback */ resolve);\n    });\n}\n\n/**\n * Initializes the callstats lib and registers a callback to be invoked\n * when there are 'preCallTestResults'.\n *\n * @typedef PrecallTestOptions\n * @type {Object}\n * @property {string} callStatsID - Callstats credentials - the id.\n * @property {string} callStatsSecret - Callstats credentials - the secret.\n * @property {string} statisticsId - The user name to use when initializing callstats.\n * @property {string} statisticsDisplayName - The user display name.\n *\n * @param { PrecallTestOptions} options - The init options.\n * @returns {Promise<void>}\n */\nfunction _initialize(options) {\n    return new Promise((resolve, reject) => {\n        const appId = options.callStatsID;\n        const appSecret = options.callStatsSecret;\n        const userId = options.statisticsId || options.statisticsDisplayName || Settings.callStatsUserName;\n\n        api.initialize(appId, appSecret, userId, (status, message) => {\n            if (status === 'success') {\n                api.on(PRECALL_TEST_RESULTS, (...args) => {\n                    emitter.emit(PRECALL_TEST_RESULTS, ...args);\n                });\n                _initialized = true;\n                resolve();\n            } else {\n                reject({\n                    status,\n                    message\n                });\n            }\n        }, null, { disablePrecalltest: true });\n    });\n}\n\n/**\n * Loads the callstats script and initializes the library.\n *\n * @param {Function} onResult - The callback to be invoked when results are received.\n * @returns {Promise<void>}\n */\nexport async function init(options) {\n    if (_initialized) {\n        throw new Error('Precall Test already initialized');\n    }\n\n    const { callStatsID, callStatsSecret, disableThirdPartyRequests } = options;\n\n    if (!callStatsID || !callStatsSecret || disableThirdPartyRequests) {\n        throw new Error('Callstats is disabled');\n    }\n\n    await _loadScript(options);\n    // eslint-disable-next-line new-cap\n    api = new window.callstats();\n\n    return _initialize(options);\n}\n\n/**\n * Executes a pre call test.\n *\n * @typedef PrecallTestResults\n * @type {Object}\n * @property {boolean} mediaConnectivity - If there is media connectivity or not.\n * @property {number} throughput  - The average throughput.\n * @property {number} fractionalLoss - The packet loss.\n * @property {number} rtt - The round trip time.\n * @property {string} provider - It is usually 'callstats'.\n *\n * @returns {Promise<{PrecallTestResults}>}\n */\nexport function execute() {\n    if (!_initialized) {\n        return Promise.reject('uninitialized');\n    }\n\n    return new Promise((resolve, reject) => {\n        emitter.on(PRECALL_TEST_RESULTS, (status, payload) => {\n            if (status === 'success') {\n                resolve(payload);\n            } else {\n                reject({\n                    status,\n                    payload\n                });\n            }\n\n        });\n\n        api.makePrecallTest();\n    });\n}\n\nexport default {\n    init,\n    execute\n};\n","import { getLogger } from '@jitsi/logger';\n\nimport { createAudioContext } from './WebAudioUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * The AudioMixer, as the name implies, mixes a number of MediaStreams containing audio tracks into a single\n * MediaStream.\n */\nexport default class AudioMixer {\n    /**\n     * Create AudioMixer instance.\n     */\n    constructor() {\n        this._started = false;\n        this._streamsToMix = [];\n        this._streamMSSArray = [];\n    }\n\n    /**\n     * Add audio MediaStream to be mixed, if the stream doesn't contain any audio tracks it will be ignored.\n     *\n     * @param {MediaStream} stream - MediaStream to be mixed.\n     */\n    addMediaStream(stream) {\n        if (!stream.getAudioTracks()) {\n            logger.warn('Added MediaStream doesn\\'t contain audio tracks.');\n        }\n\n        this._streamsToMix.push(stream);\n    }\n\n    /**\n     * At this point a WebAudio ChannelMergerNode is created and and the two associated MediaStreams are connected to\n     * it; the resulting mixed MediaStream is returned.\n     *\n     * @returns {MediaStream} - MediaStream containing added streams mixed together, or null if no MediaStream\n     * is added.\n     */\n    start() {\n        // If the mixer was already started just return the existing mixed stream.\n        if (this._started) {\n            return this._mixedMSD.stream;\n        }\n\n        this._audioContext = createAudioContext();\n\n        if (!this._streamsToMix.length) {\n            logger.warn('No MediaStream\\'s added to AudioMixer, nothing will happen.');\n\n            return null;\n        }\n\n        this._started = true;\n\n        this._mixedMSD = this._audioContext.createMediaStreamDestination();\n\n        for (const stream of this._streamsToMix) {\n            const streamMSS = this._audioContext.createMediaStreamSource(stream);\n\n            streamMSS.connect(this._mixedMSD);\n\n            // Maintain a list of MediaStreamAudioSourceNode so we can disconnect them on reset.\n            this._streamMSSArray.push(streamMSS);\n        }\n\n        return this._mixedMSD.stream;\n    }\n\n    /**\n     * Disconnect MediaStreamAudioSourceNode and clear references.\n     *\n     * @returns {void}\n     */\n    reset() {\n        this._started = false;\n        this._streamsToMix = [];\n\n        // Clean up created MediaStreamAudioSourceNode.\n        for (const streamMSS of this._streamMSSArray) {\n            streamMSS.disconnect();\n        }\n\n        this._streamMSSArray = [];\n\n        if (this._audioContext) {\n            this._audioContext = undefined;\n        }\n    }\n}\n","// @flow\n\n/**\n * SET_INTERVAL constant is used to set interval and it is set in\n * the id property of the request.data property. timeMs property must\n * also be set. request.data example:\n *\n * {\n *      id: SET_INTERVAL,\n *      timeMs: 33\n * }\n */\nexport const SET_INTERVAL = 1;\n\n/**\n * CLEAR_INTERVAL constant is used to clear the interval and it is set in\n * the id property of the request.data property.\n *\n * {\n *      id: CLEAR_INTERVAL\n * }\n */\nexport const CLEAR_INTERVAL = 2;\n\n/**\n * INTERVAL_TIMEOUT constant is used as response and it is set in the id\n * property.\n *\n * {\n *      id: INTERVAL_TIMEOUT\n * }\n */\nexport const INTERVAL_TIMEOUT = 3;\n\n/**\n * The following code is needed as string to create a URL from a Blob.\n * The URL is then passed to a WebWorker. Reason for this is to enable\n * use of setInterval that is not throttled when tab is inactive.\n */\nconst code = `\n    var timer;\n\n    onmessage = function(request) {\n        switch (request.data.id) {\n        case ${SET_INTERVAL}: {\n            timer = setInterval(() => {\n                postMessage({ id: ${INTERVAL_TIMEOUT} });\n            }, request.data.timeMs);\n            break;\n        }\n        case ${CLEAR_INTERVAL}: {\n            if (timer) {\n                clearInterval(timer);\n            }\n            break;\n        }\n        }\n    };\n`;\n\nexport const timerWorkerScript\n    = URL.createObjectURL(new Blob([ code ], { type: 'application/javascript' }));\n","// @flow\n\nimport {\n    CLEAR_INTERVAL,\n    INTERVAL_TIMEOUT,\n    SET_INTERVAL,\n    timerWorkerScript\n} from './TimeWorker';\n\n/**\n * Represents a modified MediaStream that adds video as pip on a desktop stream.\n * <tt>JitsiStreamPresenterEffect</tt> does the processing of the original\n * desktop stream.\n */\nexport default class JitsiStreamPresenterEffect {\n    /**\n     * Represents a modified MediaStream that adds a camera track at the\n     * bottom right corner of the desktop track using a HTML canvas.\n     * <tt>JitsiStreamPresenterEffect</tt> does the processing of the original\n     * video stream.\n     *\n     * @param {MediaStream} videoStream - The video stream which is user for\n     * creating the canvas.\n     */\n    constructor(videoStream) {\n        const videoDiv = document.createElement('div');\n        const firstVideoTrack = videoStream.getVideoTracks()[0];\n        const { height, width, frameRate } = firstVideoTrack.getSettings() ?? firstVideoTrack.getConstraints();\n\n        this._canvas = document.createElement('canvas');\n        this._ctx = this._canvas.getContext('2d');\n\n        this._desktopElement = document.createElement('video');\n        this._videoElement = document.createElement('video');\n        videoDiv.appendChild(this._videoElement);\n        videoDiv.appendChild(this._desktopElement);\n        if (document.body !== null) {\n            document.body.appendChild(videoDiv);\n        }\n\n        // Set the video element properties\n        this._frameRate = parseInt(frameRate, 10);\n        this._videoElement.width = parseInt(width, 10);\n        this._videoElement.height = parseInt(height, 10);\n        this._videoElement.autoplay = true;\n        this._videoElement.srcObject = videoStream;\n\n        // autoplay is not enough to start the video on Safari, it's fine to call play() on other platforms as well\n        this._videoElement.play();\n\n        // set the style attribute of the div to make it invisible\n        videoDiv.style.display = 'none';\n\n        // Bind event handler so it is only bound once for every instance.\n        this._onVideoFrameTimer = this._onVideoFrameTimer.bind(this);\n    }\n\n    /**\n     * EventHandler onmessage for the videoFrameTimerWorker WebWorker.\n     *\n     * @private\n     * @param {EventHandler} response - The onmessage EventHandler parameter.\n     * @returns {void}\n     */\n    _onVideoFrameTimer(response) {\n        if (response.data.id === INTERVAL_TIMEOUT) {\n            this._renderVideo();\n        }\n    }\n\n    /**\n     * Loop function to render the video frame input and draw presenter effect.\n     *\n     * @private\n     * @returns {void}\n     */\n    _renderVideo() {\n        // adjust the canvas width/height on every frame incase the window has been resized.\n        const [ track ] = this._desktopStream.getVideoTracks();\n        const { height, width } = track.getSettings() ?? track.getConstraints();\n\n        this._canvas.width = parseInt(width, 10);\n        this._canvas.height = parseInt(height, 10);\n        this._ctx.drawImage(this._desktopElement, 0, 0, this._canvas.width, this._canvas.height);\n        this._ctx.drawImage(this._videoElement, this._canvas.width - this._videoElement.width, this._canvas.height\n            - this._videoElement.height, this._videoElement.width, this._videoElement.height);\n\n        // draw a border around the video element.\n        this._ctx.beginPath();\n        this._ctx.lineWidth = 2;\n        this._ctx.strokeStyle = '#A9A9A9'; // dark grey\n        this._ctx.rect(this._canvas.width - this._videoElement.width, this._canvas.height - this._videoElement.height,\n            this._videoElement.width, this._videoElement.height);\n        this._ctx.stroke();\n    }\n\n    /**\n     * Checks if the local track supports this effect.\n     *\n     * @param {JitsiLocalTrack} jitsiLocalTrack - Track to apply effect.\n     * @returns {boolean} - Returns true if this effect can run on the\n     * specified track, false otherwise.\n     */\n    isEnabled(jitsiLocalTrack) {\n        return jitsiLocalTrack.isVideoTrack() && jitsiLocalTrack.videoType === 'desktop';\n    }\n\n    /**\n     * Starts loop to capture video frame and render presenter effect.\n     *\n     * @param {MediaStream} desktopStream - Stream to be used for processing.\n     * @returns {MediaStream} - The stream with the applied effect.\n     */\n    startEffect(desktopStream) {\n        const firstVideoTrack = desktopStream.getVideoTracks()[0];\n        const { height, width } = firstVideoTrack.getSettings() ?? firstVideoTrack.getConstraints();\n\n        // set the desktop element properties.\n        this._desktopStream = desktopStream;\n        this._desktopElement.width = parseInt(width, 10);\n        this._desktopElement.height = parseInt(height, 10);\n        this._desktopElement.autoplay = true;\n        this._desktopElement.srcObject = desktopStream;\n\n        // autoplay is not enough to start the video on Safari, it's fine to call play() on other platforms as well\n        this._desktopElement.play();\n\n        this._canvas.width = parseInt(width, 10);\n        this._canvas.height = parseInt(height, 10);\n        this._videoFrameTimerWorker = new Worker(timerWorkerScript, { name: 'Presenter effect worker' });\n        this._videoFrameTimerWorker.onmessage = this._onVideoFrameTimer;\n        this._videoFrameTimerWorker.postMessage({\n            id: SET_INTERVAL,\n            timeMs: 1000 / this._frameRate\n        });\n\n        return this._canvas.captureStream(this._frameRate);\n    }\n\n    /**\n     * Stops the capture and render loop.\n     *\n     * @returns {void}\n     */\n    stopEffect() {\n        this._videoFrameTimerWorker.postMessage({\n            id: CLEAR_INTERVAL\n        });\n        this._videoFrameTimerWorker.terminate();\n    }\n\n}\n","\nvar Module = (function() {\n  var _scriptDir = \"https://sdk.sariska.io/\";\n  \n  return (\nfunction(Module) {\n  Module = Module || {};\n\nnull;var Module=typeof Module!==\"undefined\"?Module:{};var readyPromiseResolve,readyPromiseReject;Module[\"ready\"]=new Promise(function(resolve,reject){readyPromiseResolve=resolve;readyPromiseReject=reject});var moduleOverrides={};var key;for(key in Module){if(Module.hasOwnProperty(key)){moduleOverrides[key]=Module[key]}}var arguments_=[];var thisProgram=\"./this.program\";var quit_=function(status,toThrow){throw toThrow};var ENVIRONMENT_IS_WEB=false;var ENVIRONMENT_IS_WORKER=false;var ENVIRONMENT_IS_NODE=false;var ENVIRONMENT_IS_SHELL=false;ENVIRONMENT_IS_WEB=typeof window===\"object\";ENVIRONMENT_IS_WORKER=typeof importScripts===\"function\";ENVIRONMENT_IS_NODE=typeof process===\"object\"&&typeof process.versions===\"object\"&&typeof process.versions.node===\"string\";ENVIRONMENT_IS_SHELL=!ENVIRONMENT_IS_WEB&&!ENVIRONMENT_IS_NODE&&!ENVIRONMENT_IS_WORKER;var scriptDirectory=\"\";function locateFile(path){if(Module[\"locateFile\"]){return Module[\"locateFile\"](path,scriptDirectory)}return scriptDirectory+path}var read_,readAsync,readBinary,setWindowTitle;if(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER){if(ENVIRONMENT_IS_WORKER){scriptDirectory=self.location.href}else if(document.currentScript){scriptDirectory=document.currentScript.src}if(_scriptDir){scriptDirectory=_scriptDir}if(scriptDirectory.indexOf(\"blob:\")!==0){scriptDirectory=scriptDirectory.substr(0,scriptDirectory.lastIndexOf(\"/\")+1)}else{scriptDirectory=\"\"}{read_=function shell_read(url){var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,false);xhr.send(null);return xhr.responseText};if(ENVIRONMENT_IS_WORKER){readBinary=function readBinary(url){var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,false);xhr.responseType=\"arraybuffer\";xhr.send(null);return new Uint8Array(xhr.response)}}readAsync=function readAsync(url,onload,onerror){var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,true);xhr.responseType=\"arraybuffer\";xhr.onload=function xhr_onload(){if(xhr.status==200||xhr.status==0&&xhr.response){onload(xhr.response);return}onerror()};xhr.onerror=onerror;xhr.send(null)}}setWindowTitle=function(title){document.title=title}}else{}var out=Module[\"print\"]||console.log.bind(console);var err=Module[\"printErr\"]||console.warn.bind(console);for(key in moduleOverrides){if(moduleOverrides.hasOwnProperty(key)){Module[key]=moduleOverrides[key]}}moduleOverrides=null;if(Module[\"arguments\"])arguments_=Module[\"arguments\"];if(Module[\"thisProgram\"])thisProgram=Module[\"thisProgram\"];if(Module[\"quit\"])quit_=Module[\"quit\"];var wasmBinary;if(Module[\"wasmBinary\"])wasmBinary=Module[\"wasmBinary\"];var noExitRuntime;if(Module[\"noExitRuntime\"])noExitRuntime=Module[\"noExitRuntime\"];if(typeof WebAssembly!==\"object\"){err(\"no native wasm support detected\")}var wasmMemory;var wasmTable=new WebAssembly.Table({\"initial\":1,\"maximum\":1+0,\"element\":\"anyfunc\"});var ABORT=false;var EXITSTATUS=0;var WASM_PAGE_SIZE=65536;function alignUp(x,multiple){if(x%multiple>0){x+=multiple-x%multiple}return x}var buffer,HEAP8,HEAPU8,HEAP16,HEAPU16,HEAP32,HEAPU32,HEAPF32,HEAPF64;function updateGlobalBufferAndViews(buf){buffer=buf;Module[\"HEAP8\"]=HEAP8=new Int8Array(buf);Module[\"HEAP16\"]=HEAP16=new Int16Array(buf);Module[\"HEAP32\"]=HEAP32=new Int32Array(buf);Module[\"HEAPU8\"]=HEAPU8=new Uint8Array(buf);Module[\"HEAPU16\"]=HEAPU16=new Uint16Array(buf);Module[\"HEAPU32\"]=HEAPU32=new Uint32Array(buf);Module[\"HEAPF32\"]=HEAPF32=new Float32Array(buf);Module[\"HEAPF64\"]=HEAPF64=new Float64Array(buf)}var DYNAMIC_BASE=5340496,DYNAMICTOP_PTR=97456;var INITIAL_INITIAL_MEMORY=Module[\"INITIAL_MEMORY\"]||16777216;if(Module[\"wasmMemory\"]){wasmMemory=Module[\"wasmMemory\"]}else{wasmMemory=new WebAssembly.Memory({\"initial\":INITIAL_INITIAL_MEMORY/WASM_PAGE_SIZE,\"maximum\":2147483648/WASM_PAGE_SIZE})}if(wasmMemory){buffer=wasmMemory.buffer}INITIAL_INITIAL_MEMORY=buffer.byteLength;updateGlobalBufferAndViews(buffer);HEAP32[DYNAMICTOP_PTR>>2]=DYNAMIC_BASE;function callRuntimeCallbacks(callbacks){while(callbacks.length>0){var callback=callbacks.shift();if(typeof callback==\"function\"){callback(Module);continue}var func=callback.func;if(typeof func===\"number\"){if(callback.arg===undefined){Module[\"dynCall_v\"](func)}else{Module[\"dynCall_vi\"](func,callback.arg)}}else{func(callback.arg===undefined?null:callback.arg)}}}var __ATPRERUN__=[];var __ATINIT__=[];var __ATMAIN__=[];var __ATPOSTRUN__=[];var runtimeInitialized=false;function preRun(){if(Module[\"preRun\"]){if(typeof Module[\"preRun\"]==\"function\")Module[\"preRun\"]=[Module[\"preRun\"]];while(Module[\"preRun\"].length){addOnPreRun(Module[\"preRun\"].shift())}}callRuntimeCallbacks(__ATPRERUN__)}function initRuntime(){runtimeInitialized=true;callRuntimeCallbacks(__ATINIT__)}function preMain(){callRuntimeCallbacks(__ATMAIN__)}function postRun(){if(Module[\"postRun\"]){if(typeof Module[\"postRun\"]==\"function\")Module[\"postRun\"]=[Module[\"postRun\"]];while(Module[\"postRun\"].length){addOnPostRun(Module[\"postRun\"].shift())}}callRuntimeCallbacks(__ATPOSTRUN__)}function addOnPreRun(cb){__ATPRERUN__.unshift(cb)}function addOnPostRun(cb){__ATPOSTRUN__.unshift(cb)}var runDependencies=0;var runDependencyWatcher=null;var dependenciesFulfilled=null;function addRunDependency(id){runDependencies++;if(Module[\"monitorRunDependencies\"]){Module[\"monitorRunDependencies\"](runDependencies)}}function removeRunDependency(id){runDependencies--;if(Module[\"monitorRunDependencies\"]){Module[\"monitorRunDependencies\"](runDependencies)}if(runDependencies==0){if(runDependencyWatcher!==null){clearInterval(runDependencyWatcher);runDependencyWatcher=null}if(dependenciesFulfilled){var callback=dependenciesFulfilled;dependenciesFulfilled=null;callback()}}}Module[\"preloadedImages\"]={};Module[\"preloadedAudios\"]={};function abort(what){if(Module[\"onAbort\"]){Module[\"onAbort\"](what)}what+=\"\";out(what);err(what);ABORT=true;EXITSTATUS=1;what=\"abort(\"+what+\"). Build with -s ASSERTIONS=1 for more info.\";throw new WebAssembly.RuntimeError(what)}function hasPrefix(str,prefix){return String.prototype.startsWith?str.startsWith(prefix):str.indexOf(prefix)===0}var dataURIPrefix=\"data:application/octet-stream;base64,\";function isDataURI(filename){return hasPrefix(filename,dataURIPrefix)}var wasmBinaryFile=\"rnnoise.wasm\";if(!isDataURI(wasmBinaryFile)){wasmBinaryFile=locateFile(wasmBinaryFile)}function getBinary(){try{if(wasmBinary){return new Uint8Array(wasmBinary)}if(readBinary){return readBinary(wasmBinaryFile)}else{throw\"both async and sync fetching of the wasm failed\"}}catch(err){abort(err)}}function getBinaryPromise(){if(!wasmBinary&&(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER)&&typeof fetch===\"function\"){return fetch(wasmBinaryFile,{credentials:\"same-origin\"}).then(function(response){if(!response[\"ok\"]){throw\"failed to load wasm binary file at '\"+wasmBinaryFile+\"'\"}return response[\"arrayBuffer\"]()}).catch(function(){return getBinary()})}return new Promise(function(resolve,reject){resolve(getBinary())})}function createWasm(){var info={\"a\":asmLibraryArg};function receiveInstance(instance,module){var exports=instance.exports;Module[\"asm\"]=exports;removeRunDependency(\"wasm-instantiate\")}addRunDependency(\"wasm-instantiate\");function receiveInstantiatedSource(output){receiveInstance(output[\"instance\"])}function instantiateArrayBuffer(receiver){return getBinaryPromise().then(function(binary){return WebAssembly.instantiate(binary,info)}).then(receiver,function(reason){err(\"failed to asynchronously prepare wasm: \"+reason);abort(reason)})}function instantiateAsync(){if(!wasmBinary&&typeof WebAssembly.instantiateStreaming===\"function\"&&!isDataURI(wasmBinaryFile)&&typeof fetch===\"function\"){fetch(wasmBinaryFile,{credentials:\"same-origin\"}).then(function(response){var result=WebAssembly.instantiateStreaming(response,info);return result.then(receiveInstantiatedSource,function(reason){err(\"wasm streaming compile failed: \"+reason);err(\"falling back to ArrayBuffer instantiation\");return instantiateArrayBuffer(receiveInstantiatedSource)})})}else{return instantiateArrayBuffer(receiveInstantiatedSource)}}if(Module[\"instantiateWasm\"]){try{var exports=Module[\"instantiateWasm\"](info,receiveInstance);return exports}catch(e){err(\"Module.instantiateWasm callback failed with error: \"+e);return false}}instantiateAsync();return{}}__ATINIT__.push({func:function(){___wasm_call_ctors()}});function _emscripten_memcpy_big(dest,src,num){HEAPU8.copyWithin(dest,src,src+num)}function _emscripten_get_heap_size(){return HEAPU8.length}function emscripten_realloc_buffer(size){try{wasmMemory.grow(size-buffer.byteLength+65535>>>16);updateGlobalBufferAndViews(wasmMemory.buffer);return 1}catch(e){}}function _emscripten_resize_heap(requestedSize){requestedSize=requestedSize>>>0;var oldSize=_emscripten_get_heap_size();var PAGE_MULTIPLE=65536;var maxHeapSize=2147483648;if(requestedSize>maxHeapSize){return false}var minHeapSize=16777216;for(var cutDown=1;cutDown<=4;cutDown*=2){var overGrownHeapSize=oldSize*(1+.2/cutDown);overGrownHeapSize=Math.min(overGrownHeapSize,requestedSize+100663296);var newSize=Math.min(maxHeapSize,alignUp(Math.max(minHeapSize,requestedSize,overGrownHeapSize),PAGE_MULTIPLE));var replacement=emscripten_realloc_buffer(newSize);if(replacement){return true}}return false}var asmLibraryArg={\"a\":_emscripten_memcpy_big,\"b\":_emscripten_resize_heap,\"memory\":wasmMemory,\"table\":wasmTable};var asm=createWasm();var ___wasm_call_ctors=Module[\"___wasm_call_ctors\"]=function(){return(___wasm_call_ctors=Module[\"___wasm_call_ctors\"]=Module[\"asm\"][\"c\"]).apply(null,arguments)};var _rnnoise_init=Module[\"_rnnoise_init\"]=function(){return(_rnnoise_init=Module[\"_rnnoise_init\"]=Module[\"asm\"][\"d\"]).apply(null,arguments)};var _rnnoise_create=Module[\"_rnnoise_create\"]=function(){return(_rnnoise_create=Module[\"_rnnoise_create\"]=Module[\"asm\"][\"e\"]).apply(null,arguments)};var _malloc=Module[\"_malloc\"]=function(){return(_malloc=Module[\"_malloc\"]=Module[\"asm\"][\"f\"]).apply(null,arguments)};var _rnnoise_destroy=Module[\"_rnnoise_destroy\"]=function(){return(_rnnoise_destroy=Module[\"_rnnoise_destroy\"]=Module[\"asm\"][\"g\"]).apply(null,arguments)};var _free=Module[\"_free\"]=function(){return(_free=Module[\"_free\"]=Module[\"asm\"][\"h\"]).apply(null,arguments)};var _rnnoise_process_frame=Module[\"_rnnoise_process_frame\"]=function(){return(_rnnoise_process_frame=Module[\"_rnnoise_process_frame\"]=Module[\"asm\"][\"i\"]).apply(null,arguments)};var calledRun;dependenciesFulfilled=function runCaller(){if(!calledRun)run();if(!calledRun)dependenciesFulfilled=runCaller};function run(args){args=args||arguments_;if(runDependencies>0){return}preRun();if(runDependencies>0)return;function doRun(){if(calledRun)return;calledRun=true;Module[\"calledRun\"]=true;if(ABORT)return;initRuntime();preMain();readyPromiseResolve(Module);if(Module[\"onRuntimeInitialized\"])Module[\"onRuntimeInitialized\"]();postRun()}if(Module[\"setStatus\"]){Module[\"setStatus\"](\"Running...\");setTimeout(function(){setTimeout(function(){Module[\"setStatus\"](\"\")},1);doRun()},1)}else{doRun()}}Module[\"run\"]=run;if(Module[\"preInit\"]){if(typeof Module[\"preInit\"]==\"function\")Module[\"preInit\"]=[Module[\"preInit\"]];while(Module[\"preInit\"].length>0){Module[\"preInit\"].pop()()}}noExitRuntime=true;run();\n\n\n  return Module.ready\n}\n);\n})();\nexport default Module;","// @flow\n\n/**\n * Constant. Rnnoise default sample size, samples of different size won't work.\n */\nexport const RNNOISE_SAMPLE_LENGTH = 480;\n\n/**\n *  Constant. Rnnoise only takes inputs of 480 PCM float32 samples thus 480*4.\n */\nconst RNNOISE_BUFFER_SIZE = RNNOISE_SAMPLE_LENGTH * 4;\n\n/**\n *  Constant. Rnnoise only takes operates on 44.1Khz float 32 little endian PCM.\n */\nconst PCM_FREQUENCY = 44100;\n\n/**\n * Represents an adaptor for the rnnoise library compiled to webassembly. The class takes care of webassembly\n * memory management and exposes rnnoise functionality such as PCM audio denoising and VAD (voice activity\n * detection) scores.\n */\nexport default class RnnoiseProcessor {\n    /**\n     * Constructor.\n     *\n     * @class\n     * @param {Object} wasmInterface - WebAssembly module interface that exposes rnnoise functionality.\n     */\n    constructor(wasmInterface) {\n        // Considering that we deal with dynamic allocated memory employ exception safety strong guarantee\n        // i.e. in case of exception there are no side effects.\n        try {\n            this._wasmInterface = wasmInterface;\n\n            // For VAD score purposes only allocate the buffers once and reuse them\n            this._wasmPcmInput = this._wasmInterface._malloc(RNNOISE_BUFFER_SIZE);\n\n            if (!this._wasmPcmInput) {\n                throw Error('Failed to create wasm input memory buffer!');\n            }\n\n            this._wasmPcmOutput = this._wasmInterface._malloc(RNNOISE_BUFFER_SIZE);\n\n            if (!this._wasmPcmOutput) {\n                wasmInterface._free(this._wasmPcmInput);\n                throw Error('Failed to create wasm output memory buffer!');\n            }\n\n            // The HEAPF32.set function requires an index relative to a Float32 array view of the wasm memory model\n            // which is an array of bytes. This means we have to divide it by the size of a float to get the index\n            // relative to a Float32 Array.\n            this._wasmPcmInputF32Index = this._wasmPcmInput / 4;\n\n            this._context = this._wasmInterface._rnnoise_create();\n        } catch (error) {\n            // release can be called even if not all the components were initialized.\n            this._releaseWasmResources();\n            throw error;\n        }\n    }\n\n    /**\n     * Copy the input PCM Audio Sample to the wasm input buffer.\n     *\n     * @param {Float32Array} pcmSample - Array containing 16 bit format PCM sample stored in 32 Floats .\n     * @returns {void}\n     */\n    _copyPCMSampleToWasmBuffer(pcmSample) {\n        this._wasmInterface.HEAPF32.set(pcmSample, this._wasmPcmInputF32Index);\n    }\n\n    /**\n     * Convert 32 bit Float PCM samples to 16 bit Float PCM samples and store them in 32 bit Floats.\n     *\n     * @param {Float32Array} f32Array - Array containing 32 bit PCM samples.\n     * @returns {void}\n     */\n    _convertTo16BitPCM(f32Array) {\n        for (const [ index, value ] of f32Array.entries()) {\n            f32Array[index] = value * 0x7fff;\n        }\n    }\n\n    /**\n     * Release resources associated with the wasm context. If something goes downhill here\n     * i.e. Exception is thrown, there is nothing much we can do.\n     *\n     * @returns {void}\n     */\n    _releaseWasmResources() {\n        // For VAD score purposes only allocate the buffers once and reuse them\n        if (this._wasmPcmInput) {\n            this._wasmInterface._free(this._wasmPcmInput);\n            this._wasmPcmInput = null;\n        }\n\n        if (this._wasmPcmOutput) {\n            this._wasmInterface._free(this._wasmPcmOutput);\n            this._wasmPcmOutput = null;\n        }\n\n        if (this._context) {\n            this._wasmInterface._rnnoise_destroy(this._context);\n            this._context = null;\n        }\n    }\n\n    /**\n     * Rnnoise can only operate on a certain PCM array size.\n     *\n     * @returns {number} - The PCM sample array size as required by rnnoise.\n     */\n    getSampleLength() {\n        return RNNOISE_SAMPLE_LENGTH;\n    }\n\n    /**\n     * Rnnoise can only operate on a certain format of PCM sample namely float 32 44.1Kz.\n     *\n     * @returns {number} - PCM sample frequency as required by rnnoise.\n     */\n    getRequiredPCMFrequency() {\n        return PCM_FREQUENCY;\n    }\n\n    /**\n     * Release any resources required by the rnnoise context this needs to be called\n     * before destroying any context that uses the processor.\n     *\n     * @returns {void}\n     */\n    destroy() {\n        // Attempting to release a non initialized processor, do nothing.\n        if (this._destroyed) {\n            return;\n        }\n\n        this._releaseWasmResources();\n\n        this._destroyed = true;\n    }\n\n    /**\n     * Calculate the Voice Activity Detection for a raw Float32 PCM sample Array.\n     * The size of the array must be of exactly 480 samples, this constraint comes from the rnnoise library.\n     *\n     * @param {Float32Array} pcmFrame - Array containing 32 bit PCM samples.\n     * @returns {Float} Contains VAD score in the interval 0 - 1 i.e. 0.90 .\n     */\n    calculateAudioFrameVAD(pcmFrame) {\n        if (this._destroyed) {\n            throw new Error('RnnoiseProcessor instance is destroyed, please create another one!');\n        }\n\n        const pcmFrameLength = pcmFrame.length;\n\n        if (pcmFrameLength !== RNNOISE_SAMPLE_LENGTH) {\n            throw new Error(`Rnnoise can only process PCM frames of 480 samples! Input sample was:${pcmFrameLength}`);\n        }\n\n        this._convertTo16BitPCM(pcmFrame);\n        this._copyPCMSampleToWasmBuffer(pcmFrame);\n\n        return this._wasmInterface._rnnoise_process_frame(this._context, this._wasmPcmOutput, this._wasmPcmInput);\n    }\n}\n","// @flow\n\n// Script expects to find rnnoise webassembly binary in the same public path root, otherwise it won't load\n// During the build phase this needs to be taken care of manually\nimport rnnoiseWasmInit from 'rnnoise-wasm';\n\nimport RnnoiseProcessor from './RnnoiseProcessor';\n\nexport { RNNOISE_SAMPLE_LENGTH } from './RnnoiseProcessor';\nexport { RnnoiseProcessor };\n\nlet rnnoiseModule;\n\n/**\n * Creates a new instance of RnnoiseProcessor.\n *\n * @returns {Promise<RnnoiseProcessor>}\n */\nexport function createRnnoiseProcessor() {\n    if (!rnnoiseModule) {\n        rnnoiseModule = rnnoiseWasmInit();\n    }\n\n    return rnnoiseModule.then(mod => new RnnoiseProcessor(mod));\n}\n","// @flow\n\n/**\n * Number of pixels that signal if two images should be considered different.\n */\nexport const PIXEL_LOWER_BOUND = 100000;\n\n/**\n * Number of milliseconds that represent how often screenshots should be taken.\n */\nexport const POLL_INTERVAL = 30000;\n\n/**\n * SET_INTERVAL constant is used to set interval and it is set in\n * the id property of the request.data property. timeMs property must\n * also be set. request.data example:\n *\n * {\n *      id: SET_INTERVAL,\n *      timeMs: 33\n * }\n */\nexport const SET_INTERVAL = 1;\n\n/**\n * CLEAR_INTERVAL constant is used to clear the interval and it is set in\n * the id property of the request.data property.\n *\n * {\n *      id: CLEAR_INTERVAL\n * }\n */\nexport const CLEAR_INTERVAL = 2;\n\n/**\n * INTERVAL_TIMEOUT constant is used as response and it is set in the id property.\n *\n * {\n *      id: INTERVAL_TIMEOUT\n * }\n */\nexport const INTERVAL_TIMEOUT = 3;\n","// @flow\n\nimport {\n    CLEAR_INTERVAL,\n    INTERVAL_TIMEOUT,\n    SET_INTERVAL\n} from './constants';\n\nconst code = `\n    var timer;\n\n    onmessage = function(request) {\n        switch (request.data.id) {\n        case ${SET_INTERVAL}: {\n            timer = setInterval(() => {\n                postMessage({ id: ${INTERVAL_TIMEOUT} });\n            }, request.data.timeMs);\n            break;\n        }\n        case ${CLEAR_INTERVAL}: {\n            if (timer) {\n                clearInterval(timer);\n            }\n            break;\n        }\n        }\n    };\n`;\n\nexport const timerWorkerScript = URL.createObjectURL(new Blob([ code ], { type: 'application/javascript' }));\n","// @flow\n\nimport pixelmatch from 'pixelmatch';\n\n\nimport {\n    CLEAR_INTERVAL,\n    INTERVAL_TIMEOUT,\n    PIXEL_LOWER_BOUND,\n    POLL_INTERVAL,\n    SET_INTERVAL\n} from './constants';\nimport { timerWorkerScript } from './worker';\n\n\n/**\n * Effect that wraps {@code MediaStream} adding periodic screenshot captures.\n * Manipulates the original desktop stream and performs custom processing operations, if implemented.\n */\nexport default class ScreenshotCaptureEffect {\n    /**\n     * Initializes a new {@code ScreenshotCaptureEffect} instance.\n     *\n     */\n    constructor(callback) {\n        this.callback = callback;\n        this._currentCanvas = document.createElement('canvas');\n        this._currentCanvasContext = this._currentCanvas.getContext('2d');\n        this._videoElement = document.createElement('video');\n\n        // Bind handlers such that they access the same instance.\n        this._handleWorkerAction = this._handleWorkerAction.bind(this);\n        this._initScreenshotCapture = this._initScreenshotCapture.bind(this);\n        this._streamWorker = new Worker(timerWorkerScript, { name: 'Screenshot capture worker' });\n        this._streamWorker.onmessage = this._handleWorkerAction;\n    }\n\n    /**\n     * Starts the screenshot capture event on a loop.\n     *\n     * @param {MediaStream} stream - The desktop stream from which screenshots are to be sent.\n     * @param {string} videoType - The type of the media stream.\n     * @returns {Promise} - Promise that resolves once effect has started or rejects if the\n     * videoType parameter is not desktop.\n     */\n    startEffect(stream, videoType) {\n        return new Promise((resolve, reject) => {\n            if (videoType !== 'desktop') {\n                reject();\n            }\n            const desktopTrack = stream.getVideoTracks()[0];\n            const { height, width }\n                = desktopTrack.getSettings() ?? desktopTrack.getConstraints();\n\n            this._streamHeight = height;\n            this._streamWidth = width;\n            this._currentCanvas.height = parseInt(height, 10);\n            this._currentCanvas.width = parseInt(width, 10);\n            this._videoElement.height = parseInt(height, 10);\n            this._videoElement.width = parseInt(width, 10);\n            this._videoElement.srcObject = stream;\n            this._videoElement.play();\n\n            // Store first capture for comparisons in {@code this._handleScreenshot}.\n            this._videoElement.addEventListener('loadeddata', this._initScreenshotCapture);\n            resolve();\n        });\n    }\n\n    /**\n     * Stops the ongoing {@code ScreenshotCaptureEffect} by clearing the {@code Worker} interval.\n     *\n     * @returns {void}\n     */\n    stopEffect() {\n        this._streamWorker.postMessage({ id: CLEAR_INTERVAL });\n        this._videoElement.removeEventListener('loadeddata', this._initScreenshotCapture);\n    }\n\n    /**\n     * Method that is called as soon as the first frame of the video loads from stream.\n     * The method is used to store the {@code ImageData} object from the first frames\n     * in order to use it for future comparisons based on which we can process only certain\n     * screenshots.\n     *\n     * @private\n     * @returns {void}\n     */\n    _initScreenshotCapture() {\n        const storedCanvas = document.createElement('canvas');\n        const storedCanvasContext = storedCanvas.getContext('2d');\n\n        storedCanvasContext.drawImage(this._videoElement, 0, 0, this._streamWidth, this._streamHeight);\n        const { data } = storedCanvasContext.getImageData(0, 0, this._streamWidth, this._streamHeight);\n\n        this._storedImageData = data;\n        this._streamWorker.postMessage({\n            id: SET_INTERVAL,\n            timeMs: POLL_INTERVAL\n        });\n    }\n\n    /**\n     * Handler of the {@code EventHandler} message that calls the appropriate method based on the parameter's id.\n     *\n     * @private\n     * @param {EventHandler} message - Message received from the Worker.\n     * @returns {void}\n     */\n    _handleWorkerAction(message) {\n        return message.data.id === INTERVAL_TIMEOUT && this._handleScreenshot();\n    }\n\n    /**\n     * Method that decides whether an image should be processed based on a preset pixel lower bound.\n     *\n     * @private\n     * @param {integer} nbPixels - The number of pixels of the candidate image.\n     * @returns {boolean} - Whether the image should be processed or not.\n     */\n    _shouldProcessScreenshot(nbPixels) {\n        return nbPixels >= PIXEL_LOWER_BOUND;\n    }\n\n    /**\n     * Screenshot handler.\n     *\n     * @private\n     * @returns {void}\n     */\n    _handleScreenshot() {\n        this._currentCanvasContext.drawImage(this._videoElement, 0, 0, this._streamWidth, this._streamHeight);\n        const { data } = this._currentCanvasContext.getImageData(0, 0, this._streamWidth, this._streamHeight);\n        const diffPixels = pixelmatch(data, this._storedImageData, null, this._streamWidth, this._streamHeight);\n\n        if (this._shouldProcessScreenshot(diffPixels)) {\n            this._storedImageData = data;\n            this.callback(this._currentCanvas);\n        }\n    }\n}\n","export const VIRTUAL_BACKGROUND_TYPE = {\n    IMAGE: 'image',\n    DESKTOP_SHARE: 'desktop-share',\n    BLUR: 'blur',\n    NONE: 'none'\n};","\n/**\n * SET_TIMEOUT constant is used to set interval and it is set in\n * the id property of the request.data property. timeMs property must\n * also be set. request.data example:\n *\n * {\n *      id: SET_TIMEOUT,\n *      timeMs: 33\n * }\n */\nexport const SET_TIMEOUT = 1;\n\n/**\n * CLEAR_TIMEOUT constant is used to clear the interval and it is set in\n * the id property of the request.data property.\n *\n * {\n *      id: CLEAR_TIMEOUT\n * }\n */\nexport const CLEAR_TIMEOUT = 2;\n\n/**\n * TIMEOUT_TICK constant is used as response and it is set in the id property.\n *\n * {\n *      id: TIMEOUT_TICK\n * }\n */\nexport const TIMEOUT_TICK = 3;\n\n/**\n * The following code is needed as string to create a URL from a Blob.\n * The URL is then passed to a WebWorker. Reason for this is to enable\n * use of setInterval that is not throttled when tab is inactive.\n */\nconst code = `\n    var timer;\n\n    onmessage = function(request) {\n        switch (request.data.id) {\n        case ${SET_TIMEOUT}: {\n            timer = setTimeout(() => {\n                postMessage({ id: ${TIMEOUT_TICK} });\n            }, request.data.timeMs);\n            break;\n        }\n        case ${CLEAR_TIMEOUT}: {\n            if (timer) {\n                clearTimeout(timer);\n            }\n            break;\n        }\n        }\n    };\n`;\n\nexport const timerWorkerScript = URL.createObjectURL(new Blob([ code ], { type: 'application/javascript' }));\n","// @flow\n\nimport { VIRTUAL_BACKGROUND_TYPE } from './constants';\n\nimport {\n    CLEAR_TIMEOUT,\n    TIMEOUT_TICK,\n    SET_TIMEOUT,\n    timerWorkerScript\n} from './TimerWorker';\n\n/**\n * Represents a modified MediaStream that adds effects to video background.\n * <tt>JitsiStreamBackgroundEffect</tt> does the processing of the original\n * video stream.\n */\nexport default class JitsiStreamBackgroundEffect {\n    /**\n     * Represents a modified video MediaStream track.\n     *\n     * @class\n     * @param {Object} model - Meet model.\n     * @param {Object} options - Segmentation dimensions.\n     */\n    constructor(model, options) {\n        this._options = options;\n\n        if (this._options.virtualBackground.backgroundType === VIRTUAL_BACKGROUND_TYPE.IMAGE) {\n            this._virtualImage = document.createElement('img');\n            this._virtualImage.crossOrigin = 'anonymous';\n            this._virtualImage.src = this._options.virtualBackground.virtualSource;\n        }\n        if (this._options.virtualBackground.backgroundType === VIRTUAL_BACKGROUND_TYPE.DESKTOP_SHARE) {\n            this._virtualVideo = document.createElement('video');\n            this._virtualVideo.autoplay = true;\n            this._virtualVideo.srcObject = this._options?.virtualBackground?.virtualSource?.stream;\n        }\n        this._model = model;\n        this._segmentationPixelCount = this._options.width * this._options.height;\n\n        // Bind event handler so it is only bound once for every instance.\n        this._onMaskFrameTimer = this._onMaskFrameTimer.bind(this);\n\n        // Workaround for FF issue https://bugzilla.mozilla.org/show_bug.cgi?id=1388974\n        this._outputCanvasElement = document.createElement('canvas');\n        this._outputCanvasElement.getContext('2d');\n        this._inputVideoElement = document.createElement('video');\n    }\n\n    /**\n     * EventHandler onmessage for the maskFrameTimerWorker WebWorker.\n     *\n     * @private\n     * @param {EventHandler} response - The onmessage EventHandler parameter.\n     * @returns {void}\n     */\n    _onMaskFrameTimer(response) {\n        if (response.data.id === TIMEOUT_TICK) {\n            this._renderMask();\n        }\n    }\n\n    /**\n     * Represents the run post processing.\n     *\n     * @returns {void}\n     */\n    runPostProcessing() {\n        this._outputCanvasCtx.globalCompositeOperation = 'copy';\n\n        // Draw segmentation mask.\n        //\n\n        // Smooth out the edges.\n        if (this._options.virtualBackground.backgroundType === VIRTUAL_BACKGROUND_TYPE.IMAGE) {\n            this._outputCanvasCtx.filter = 'blur(4px)';\n        } else {\n            this._outputCanvasCtx.filter = 'blur(8px)';\n        }\n\n        this._outputCanvasCtx.drawImage(\n            this._segmentationMaskCanvas,\n            0,\n            0,\n            this._options.width,\n            this._options.height,\n            0,\n            0,\n            this._inputVideoElement.width,\n            this._inputVideoElement.height\n        );\n        this._outputCanvasCtx.globalCompositeOperation = 'source-in';\n        this._outputCanvasCtx.filter = 'none';\n\n        // Draw the foreground video.\n        //\n\n        this._outputCanvasCtx.drawImage(this._inputVideoElement, 0, 0);\n\n        // Draw the background.\n        //\n\n        this._outputCanvasCtx.globalCompositeOperation = 'destination-over';\n        if (this._options.virtualBackground.backgroundType === VIRTUAL_BACKGROUND_TYPE.IMAGE) {\n            this._outputCanvasCtx.drawImage(\n                this._virtualImage,\n                0,\n                0,\n                this._inputVideoElement.width,\n                this._inputVideoElement.height\n            );\n        }\n        if (this._options.virtualBackground.backgroundType === VIRTUAL_BACKGROUND_TYPE.DESKTOP_SHARE) {\n            this._outputCanvasCtx.drawImage(\n                this._virtualVideo,\n                0,\n                0,\n                this._desktopShareDimensions.width,\n                this._desktopShareDimensions.height\n            );\n        } else {\n            this._outputCanvasCtx.filter = `blur(${this._options.virtualBackground.blurValue}px)`;\n            this._outputCanvasCtx.drawImage(this._inputVideoElement, 0, 0);\n        }\n    }\n\n    /**\n     * Represents the run Tensorflow Interference.\n     *\n     * @returns {void}\n     */\n    runInference() {\n        this._model._runInference();\n        const outputMemoryOffset = this._model._getOutputMemoryOffset() / 4;\n\n        for (let i = 0; i < this._segmentationPixelCount; i++) {\n            const background = this._model.HEAPF32[outputMemoryOffset + (i * 2)];\n            const person = this._model.HEAPF32[outputMemoryOffset + (i * 2) + 1];\n            const shift = Math.max(background, person);\n            const backgroundExp = Math.exp(background - shift);\n            const personExp = Math.exp(person - shift);\n\n            // Sets only the alpha component of each pixel.\n            this._segmentationMask.data[(i * 4) + 3] = (255 * personExp) / (backgroundExp + personExp);\n        }\n        this._segmentationMaskCtx.putImageData(this._segmentationMask, 0, 0);\n    }\n\n    /**\n     * Loop function to render the background mask.\n     *\n     * @private\n     * @returns {void}\n     */\n    _renderMask() {\n        const desktopShareTrack = this._options?.virtualBackground?.virtualSource?.track;\n\n        if (desktopShareTrack) {\n            this._desktopShareDimensions = desktopShareTrack.getSettings ? desktopShareTrack.getSettings()\n                : desktopShareTrack.getConstraints();\n        }\n        this.resizeSource();\n        this.runInference();\n        this.runPostProcessing();\n\n        this._maskFrameTimerWorker.postMessage({\n            id: SET_TIMEOUT,\n            timeMs: 1000 / 30\n        });\n    }\n\n    /**\n     * Represents the resize source process.\n     *\n     * @returns {void}\n     */\n    resizeSource() {\n        this._segmentationMaskCtx.drawImage(\n            this._inputVideoElement,\n            0,\n            0,\n            this._inputVideoElement.width,\n            this._inputVideoElement.height,\n            0,\n            0,\n            this._options.width,\n            this._options.height\n        );\n\n        const imageData = this._segmentationMaskCtx.getImageData(\n            0,\n            0,\n            this._options.width,\n            this._options.height\n        );\n        const inputMemoryOffset = this._model._getInputMemoryOffset() / 4;\n\n        for (let i = 0; i < this._segmentationPixelCount; i++) {\n            this._model.HEAPF32[inputMemoryOffset + (i * 3)] = imageData.data[i * 4] / 255;\n            this._model.HEAPF32[inputMemoryOffset + (i * 3) + 1] = imageData.data[(i * 4) + 1] / 255;\n            this._model.HEAPF32[inputMemoryOffset + (i * 3) + 2] = imageData.data[(i * 4) + 2] / 255;\n        }\n    }\n\n    /**\n     * Checks if the local track supports this effect.\n     *\n     * @param {JitsiLocalTrack} jitsiLocalTrack - Track to apply effect.\n     * @returns {boolean} - Returns true if this effect can run on the specified track\n     * false otherwise.\n     */\n    isEnabled(jitsiLocalTrack) {\n        return jitsiLocalTrack.isVideoTrack() && jitsiLocalTrack.videoType === 'camera';\n    }\n\n    /**\n     * Starts loop to capture video frame and render the segmentation mask.\n     *\n     * @param {MediaStream} stream - Stream to be used for processing.\n     * @returns {MediaStream} - The stream with the applied effect.\n     */\n    startEffect(stream) {\n        this._maskFrameTimerWorker = new Worker(timerWorkerScript, { name: 'Blur effect worker' });\n        this._maskFrameTimerWorker.onmessage = this._onMaskFrameTimer;\n        const firstVideoTrack = stream.getVideoTracks()[0];\n        const { height, frameRate, width }\n            = firstVideoTrack.getSettings ? firstVideoTrack.getSettings() : firstVideoTrack.getConstraints();\n\n        this._segmentationMask = new ImageData(this._options.width, this._options.height);\n        this._segmentationMaskCanvas = document.createElement('canvas');\n        this._segmentationMaskCanvas.width = this._options.width;\n        this._segmentationMaskCanvas.height = this._options.height;\n        this._segmentationMaskCtx = this._segmentationMaskCanvas.getContext('2d');\n\n        this._outputCanvasElement.width = parseInt(width, 10);\n        this._outputCanvasElement.height = parseInt(height, 10);\n        this._outputCanvasCtx = this._outputCanvasElement.getContext('2d');\n        this._inputVideoElement.width = parseInt(width, 10);\n        this._inputVideoElement.height = parseInt(height, 10);\n        this._inputVideoElement.autoplay = true;\n        this._inputVideoElement.srcObject = stream;\n        this._inputVideoElement.onloadeddata = () => {\n            this._maskFrameTimerWorker.postMessage({\n                id: SET_TIMEOUT,\n                timeMs: 1000 / 30\n            });\n        };\n\n        return this._outputCanvasElement.captureStream(parseInt(frameRate, 10));\n    }\n\n    /**\n     * Stops the capture and render loop.\n     *\n     * @returns {void}\n     */\n    stopEffect() {\n        this._maskFrameTimerWorker.postMessage({\n            id: CLEAR_TIMEOUT\n        });\n\n        this._maskFrameTimerWorker.terminate();\n    }\n}\n","// @flow\nimport JitsiStreamBackgroundEffect from './JitsiStreamBackgroundEffect';\nimport createTFLiteModule from './tflite';\nimport createTFLiteSIMDModule from './tflite-simd';\nconst models = {\n    model96: 'https://sdk.sariska.io/segm_lite_v681.tflite',\n    model144: 'https://sdk.sariska.io/segm_full_v679.tflite'\n};\n\nconst segmentationDimensions = {\n    model96: {\n        height: 96,\n        width: 160\n    },\n    model144: {\n        height: 144,\n        width: 256\n    }\n};\n\n/**\n * Creates a new instance of JitsiStreamBackgroundEffect. This loads the Meet background model that is used to\n * extract person segmentation.\n *\n * @param {Object} virtualBackground - The virtual object that contains the background image source and\n * the isVirtualBackground flag that indicates if virtual image is activated.\n * @param {Function} dispatch - The Redux dispatch function.\n * @returns {Promise<JitsiStreamBackgroundEffect>}\n */\nexport async function createVirtualBackgroundEffect(virtualBackground, dispatch) {\n    if (!MediaStreamTrack.prototype.getSettings && !MediaStreamTrack.prototype.getConstraints) {\n        throw new Error('JitsiStreamBackgroundEffect not supported!');\n    }\n    let tflite;\n    let wasmCheck;\n\n    // Checks if WebAssembly feature is supported or enabled by/in the browser.\n    // Conditional import of wasm-check package is done to prevent\n    // the browser from crashing when the user opens the app.\n\n    try {\n        wasmCheck = require('wasm-check');\n        if (wasmCheck?.feature?.simd) {\n            tflite = await createTFLiteSIMDModule();\n        } else {\n            tflite = await createTFLiteModule();\n        }\n    } catch (err) {\n        return;\n    }\n\n    const modelBufferOffset = tflite._getModelBufferMemoryOffset();\n    const modelResponse = await fetch(wasmCheck.feature.simd ? models.model144 : models.model96);\n\n    if (!modelResponse.ok) {\n        throw new Error('Failed to download tflite model!');\n    }\n\n    const model = await modelResponse.arrayBuffer();\n\n    tflite.HEAPU8.set(new Uint8Array(model), modelBufferOffset);\n\n    tflite._loadModel(model.byteLength);\n\n    const options = {\n        ...wasmCheck.feature.simd ? segmentationDimensions.model144 : segmentationDimensions.model96,\n        virtualBackground\n    };\n\n    return new JitsiStreamBackgroundEffect(tflite, options);\n}","import Logger from '@jitsi/logger';\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport JitsiConnection from './JitsiConnection';\nimport * as JitsiConnectionErrors from './JitsiConnectionErrors';\nimport * as JitsiConnectionEvents from './JitsiConnectionEvents';\nimport JitsiMediaDevices from './JitsiMediaDevices';\nimport * as JitsiMediaDevicesEvents from './JitsiMediaDevicesEvents';\nimport JitsiTrackError from './JitsiTrackError';\nimport * as JitsiTrackErrors from './JitsiTrackErrors';\nimport * as JitsiTrackEvents from './JitsiTrackEvents';\nimport * as JitsiTranscriptionStatus from './JitsiTranscriptionStatus';\nimport RTC from './modules/RTC/RTC';\nimport browser from './modules/browser';\nimport NetworkInfo from './modules/connectivity/NetworkInfo';\nimport { ParticipantConnectionStatus }\n    from './modules/connectivity/ParticipantConnectionStatus';\nimport { TrackStreamingStatus } from './modules/connectivity/TrackStreamingStatus';\nimport getActiveAudioDevice from './modules/detection/ActiveDeviceDetector';\nimport * as DetectionEvents from './modules/detection/DetectionEvents';\nimport TrackVADEmitter from './modules/detection/TrackVADEmitter';\nimport FeatureFlags from './modules/flags/FeatureFlags';\nimport ProxyConnectionService\n    from './modules/proxyconnection/ProxyConnectionService';\nimport recordingConstants from './modules/recording/recordingConstants';\nimport Settings from './modules/settings/Settings';\nimport LocalStatsCollector from './modules/statistics/LocalStatsCollector';\nimport precallTest from './modules/statistics/PrecallTest';\nimport Statistics from './modules/statistics/statistics';\nimport AuthUtil from './modules/util/AuthUtil';\nimport GlobalOnErrorHandler from './modules/util/GlobalOnErrorHandler';\nimport ScriptUtil from './modules/util/ScriptUtil';\nimport * as VideoSIPGWConstants from './modules/videosipgw/VideoSIPGWConstants';\nimport AudioMixer from './modules/webaudio/AudioMixer';\nimport { MediaType } from './service/RTC/MediaType';\nimport * as ConnectionQualityEvents\n    from './service/connectivity/ConnectionQualityEvents';\nimport * as E2ePingEvents from './service/e2eping/E2ePingEvents';\nimport { createGetUserMediaEvent } from './service/statistics/AnalyticsEvents';\nimport {createPresenterEffect, createRnnoiseProcessor, createScreenshotCaptureEffect, createVirtualBackgroundEffect} from \"./modules/stream-effects\";\nimport {initSDKConfig} from './config';\nimport * as createAnalyticsEvent from './modules/util/createAnalyticsEvent';\n\nconst logger = Logger.getLogger(__filename);\n\n/**\n * The amount of time to wait until firing\n * {@link JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN} event.\n */\nconst USER_MEDIA_SLOW_PROMISE_TIMEOUT = 1000;\n\n/**\n * Extracts from an 'options' objects with a specific format (TODO what IS the\n * format?) the attributes which are to be logged in analytics events.\n *\n * @param options gum options (???)\n * @returns {*} the attributes to attach to analytics events.\n */\nfunction getAnalyticsAttributesFromOptions(options) {\n    const attributes = {\n        'audio_requested':\n            options.devices.includes('audio'),\n        'video_requested':\n            options.devices.includes('video'),\n        'screen_sharing_requested':\n            options.devices.includes('desktop')\n    };\n\n    if (attributes.video_requested) {\n        attributes.resolution = options.resolution;\n    }\n\n    return attributes;\n}\n\n/**\n * Tries to deal with the following problem: {@code JitsiMeetJS} is not only\n * this module, it's also a global (i.e. attached to {@code window}) namespace\n * for all globals of the projects in the Jitsi Meet family. If lib-jitsi-meet\n * is loaded through an HTML {@code script} tag, {@code JitsiMeetJS} will\n * automatically be attached to {@code window} by webpack. Unfortunately,\n * webpack's source code does not check whether the global variable has already\n * been assigned and overwrites it. Which is OK for the module\n * {@code JitsiMeetJS} but is not OK for the namespace {@code JitsiMeetJS}\n * because it may already contain the values of other projects in the Jitsi Meet\n * family. The solution offered here works around webpack by merging all\n * existing values of the namespace {@code JitsiMeetJS} into the module\n * {@code JitsiMeetJS}.\n *\n * @param {Object} module - The module {@code JitsiMeetJS} (which will be\n * exported and may be attached to {@code window} by webpack later on).\n * @private\n * @returns {Object} - A {@code JitsiMeetJS} module which contains all existing\n * value of the namespace {@code JitsiMeetJS} (if any).\n */\nfunction _mergeNamespaceAndModule(module) {\n    return (\n        typeof window.SariskaMediaTransport === 'object'\n            ? Object.assign({}, window.SariskaMediaTransport, module)\n            : module);\n}\n\n/**\n * The public API of the Jitsi Meet library (a.k.a. {@code JitsiMeetJS}).\n */\nexport default _mergeNamespaceAndModule({\n\n    version: '{#COMMIT_HASH#}',\n\n    JitsiConnection,\n\n    /**\n     * {@code ProxyConnectionService} is used to connect a remote peer to a\n     * local Jitsi participant without going through a Jitsi conference. It is\n     * currently used for room integration development, specifically wireless\n     * screensharing. Its API is experimental and will likely change; usage of\n     * it is advised against.\n     */\n    ProxyConnectionService,\n    effects: {\n        createPresenterEffect,\n        createRnnoiseProcessor,\n        createScreenshotCaptureEffect,\n        createVirtualBackgroundEffect\n    },\n    constants: {\n        participantConnectionStatus: ParticipantConnectionStatus,\n        recording: recordingConstants,\n        sipVideoGW: VideoSIPGWConstants,\n        transcriptionStatus: JitsiTranscriptionStatus,\n        trackStreamingStatus: TrackStreamingStatus\n    },\n    events: {\n        conference: JitsiConferenceEvents,\n        connection: JitsiConnectionEvents,\n        detection: DetectionEvents,\n        track: JitsiTrackEvents,\n        mediaDevices: JitsiMediaDevicesEvents,\n        connectionQuality: ConnectionQualityEvents,\n        e2eping: E2ePingEvents\n    },\n    errors: {\n        conference: JitsiConferenceErrors,\n        connection: JitsiConnectionErrors,\n        track: JitsiTrackErrors\n    },\n    errorTypes: {\n        JitsiTrackError\n    },\n    logLevels: Logger.levels,\n    mediaDevices: JitsiMediaDevices,\n    analytics: Statistics.analytics,\n    initialize(options = {}) {\n        this.init(options); \n    },\n    init(options = {}) {\n        options = {...initSDKConfig, ...options};\n        Settings.init(options.externalStorage);\n        Statistics.init(options);\n\n        // Multi-stream is supported only on endpoints running in Unified plan mode and the flag to disable unified\n        // plan also needs to be taken into consideration.\n        if (typeof options.enableUnifiedOnChrome !== 'undefined' && options.flags) {\n            options.flags.enableUnifiedOnChrome = options.enableUnifiedOnChrome;\n        }\n\n        // Configure the feature flags.\n        FeatureFlags.init(options.flags || { });\n\n        // Initialize global window.connectionTimes\n        // FIXME do not use 'window'\n        if (!window.connectionTimes) {\n            window.connectionTimes = {};\n        }\n\n        if (options.enableAnalyticsLogging !== true) {\n            logger.warn('Analytics disabled, disposing.');\n            this.analytics.dispose();\n        }\n\n        if (options.enableWindowOnErrorHandler) {\n            GlobalOnErrorHandler.addHandler(\n                this.getGlobalOnErrorHandler.bind(this));\n        }\n\n        if (this.version) {\n            const logObject = {\n                id: 'component_version',\n                component: 'sariska-media-transport',\n                version: this.version\n            };\n\n            Statistics.sendLog(JSON.stringify(logObject));\n        }\n\n        return RTC.init(options);\n    },\n\n    /**\n     * Returns whether the desktop sharing is enabled or not.\n     *\n     * @returns {boolean}\n     */\n    isDesktopSharingEnabled() {\n        return RTC.isDesktopSharingEnabled();\n    },\n\n    /**\n     * Returns whether the current execution environment supports WebRTC (for\n     * use within this library).\n     *\n     * @returns {boolean} {@code true} if WebRTC is supported in the current\n     * execution environment (for use within this library); {@code false},\n     * otherwise.\n     */\n    isWebRtcSupported() {\n        return RTC.isWebRtcSupported();\n    },\n\n    setLogLevel(level) {\n        Logger.setLogLevel(level);\n    },\n\n    /**\n     * Sets the log level to the <tt>Logger</tt> instance with given id.\n     *\n     * @param {Logger.levels} level the logging level to be set\n     * @param {string} id the logger id to which new logging level will be set.\n     * Usually it's the name of the JavaScript source file including the path\n     * ex. \"modules/xmpp/ChatRoom.js\"\n     */\n    setLogLevelById(level, id) {\n        Logger.setLogLevelById(level, id);\n    },\n\n    /**\n     * Registers new global logger transport to the library logging framework.\n     *\n     * @param globalTransport\n     * @see Logger.addGlobalTransport\n     */\n    addGlobalLogTransport(globalTransport) {\n        Logger.addGlobalTransport(globalTransport);\n    },\n\n    /**\n     * Removes global logging transport from the library logging framework.\n     *\n     * @param globalTransport\n     * @see Logger.removeGlobalTransport\n     */\n    removeGlobalLogTransport(globalTransport) {\n        Logger.removeGlobalTransport(globalTransport);\n    },\n\n    /**\n    * Sets global options which will be used by all loggers. Changing these\n    * works even after other loggers are created.\n    *\n    * @param options\n    * @see Logger.setGlobalOptions\n    */\n    setGlobalLogOptions(options) {\n        Logger.setGlobalOptions(options);\n    },\n\n    /**\n     * Creates the media tracks and returns them trough the callback.\n     *\n     * @param options Object with properties / settings specifying the tracks\n     * which should be created. should be created or some additional\n     * configurations about resolution for example.\n     * @param {Array} options.effects optional effects array for the track\n     * @param {boolean} options.firePermissionPromptIsShownEvent - if event\n     * JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN should be fired\n     * @param {boolean} options.fireSlowPromiseEvent - if event\n     * JitsiMediaDevicesEvents.USER_MEDIA_SLOW_PROMISE_TIMEOUT should be fired\n     * @param {Array} options.devices the devices that will be requested\n     * @param {string} options.resolution resolution constraints\n     * @param {string} options.cameraDeviceId\n     * @param {string} options.micDeviceId\n     * @param {intiger} interval - the interval (in ms) for\n     * checking whether the desktop sharing extension is installed or not\n     * @param {Function} checkAgain - returns boolean. While checkAgain()==true\n     * createLocalTracks will wait and check on every \"interval\" ms for the\n     * extension. If the desktop extension is not install and checkAgain()==true\n     * createLocalTracks will finish with rejected Promise.\n     * @param {Function} listener - The listener will be called to notify the\n     * user of lib-jitsi-meet that createLocalTracks is starting external\n     * extension installation process.\n     * NOTE: If the inline installation process is not possible and external\n     * installation is enabled the listener property will be called to notify\n     * the start of external installation process. After that createLocalTracks\n     * will start to check for the extension on every interval ms until the\n     * plugin is installed or until checkAgain return false. If the extension\n     * is found createLocalTracks will try to get the desktop sharing track and\n     * will finish the execution. If checkAgain returns false, createLocalTracks\n     * will finish the execution with rejected Promise.\n     *\n     * @deprecated old firePermissionPromptIsShownEvent\n     * @returns {Promise.<{Array.<JitsiTrack>}, JitsiConferenceError>} A promise\n     * that returns an array of created JitsiTracks if resolved, or a\n     * JitsiConferenceError if rejected.\n     */\n    createLocalTracks(options = {}, oldfirePermissionPromptIsShownEvent) {\n        if (window.location.href.indexOf(\"iAmRecorder\") >= 0) {\n            return [];\n         }\n\n        let promiseFulfilled = false;\n\n        const { firePermissionPromptIsShownEvent, fireSlowPromiseEvent, ...restOptions } = options;\n        const firePermissionPrompt = firePermissionPromptIsShownEvent || oldfirePermissionPromptIsShownEvent;\n\n        if (firePermissionPrompt && !RTC.arePermissionsGrantedForAvailableDevices()) {\n            JitsiMediaDevices.emitEvent(\n                JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN,\n                browser.getName());\n        } else if (fireSlowPromiseEvent) {\n            window.setTimeout(() => {\n                if (!promiseFulfilled) {\n                    JitsiMediaDevices.emitEvent(JitsiMediaDevicesEvents.SLOW_GET_USER_MEDIA);\n                }\n            }, USER_MEDIA_SLOW_PROMISE_TIMEOUT);\n        }\n\n        if (!window.connectionTimes) {\n            window.connectionTimes = {};\n        }\n        window.connectionTimes['obtainPermissions.start']\n            = window.performance.now();\n\n        return RTC.obtainAudioAndVideoPermissions(restOptions)\n            .then(tracks => {\n                promiseFulfilled = true;\n\n                window.connectionTimes['obtainPermissions.end']\n                    = window.performance.now();\n\n                Statistics.sendAnalytics(\n                    createGetUserMediaEvent(\n                        'success',\n                        getAnalyticsAttributesFromOptions(restOptions)));\n\n                if (!RTC.options.disableAudioLevels) {\n                    for (let i = 0; i < tracks.length; i++) {\n                        const track = tracks[i];\n\n                        if (track.getType() === MediaType.AUDIO) {\n                            Statistics.startLocalStats(track,\n                                track.setAudioLevel.bind(track));\n                        }\n                    }\n                }\n\n                // set real device ids\n                const currentlyAvailableMediaDevices\n                    = RTC.getCurrentlyAvailableMediaDevices();\n\n                if (currentlyAvailableMediaDevices) {\n                    for (let i = 0; i < tracks.length; i++) {\n                        const track = tracks[i];\n\n                        track._setRealDeviceIdFromDeviceList(\n                            currentlyAvailableMediaDevices);\n                    }\n                }\n\n                // set the contentHint to \"detail\" for desktop tracks\n                // eslint-disable-next-line prefer-const\n                for (const track of tracks) {\n                    if (track.type === MediaType.VIDEO\n                        && track.videoType === 'desktop') {\n                        this.setVideoTrackContentHints(track.track, 'detail');\n                    }\n                }\n\n                return tracks;\n            })\n            .catch(error => {\n                promiseFulfilled = true;\n\n                if (error.name === JitsiTrackErrors.SCREENSHARING_USER_CANCELED) {\n                    // User cancelled action is not really an error, so only\n                    // log it as an event to avoid having conference classified\n                    // as partially failed\n                    const logObject = {\n                        id: 'screensharing_user_canceled',\n                        message: error.message\n                    };\n\n                    Statistics.sendLog(JSON.stringify(logObject));\n\n                    Statistics.sendAnalytics(\n                        createGetUserMediaEvent(\n                            'warning',\n                            {\n                                reason: 'extension install user canceled'\n                            }));\n                } else if (error.name === JitsiTrackErrors.NOT_FOUND) {\n                    // logs not found devices with just application log to cs\n                    const logObject = {\n                        id: 'usermedia_missing_device',\n                        status: error.gum.devices\n                    };\n\n                    Statistics.sendLog(JSON.stringify(logObject));\n\n                    const attributes\n                        = getAnalyticsAttributesFromOptions(options);\n\n                    attributes.reason = 'device not found';\n                    attributes.devices = error.gum.devices.join('.');\n                    Statistics.sendAnalytics(\n                        createGetUserMediaEvent('error', attributes));\n                } else {\n                    // Report gUM failed to the stats\n                    Statistics.sendGetUserMediaFailed(error);\n\n                    const attributes\n                        = getAnalyticsAttributesFromOptions(options);\n\n                    attributes.reason = error.name;\n                    Statistics.sendAnalytics(\n                        createGetUserMediaEvent('error', attributes));\n                }\n\n                window.connectionTimes['obtainPermissions.end']\n                    = window.performance.now();\n\n                return Promise.reject(error);\n            });\n    },\n\n    /**\n     * Create a TrackVADEmitter service that connects an audio track to an VAD (voice activity detection) processor in\n     * order to obtain VAD scores for individual PCM audio samples.\n     * @param {string} localAudioDeviceId - The target local audio device.\n     * @param {number} sampleRate - Sample rate at which the emitter will operate. Possible values  256, 512, 1024,\n     * 4096, 8192, 16384. Passing other values will default to closes neighbor.\n     * I.e. Providing a value of 4096 means that the emitter will process 4096 PCM samples at a time, higher values mean\n     * longer calls, lowers values mean more calls but shorter.\n     * @param {Object} vadProcessor - VAD Processors that does the actual compute on a PCM sample.The processor needs\n     * to implement the following functions:\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by calculateAudioFrameVAD.\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\n     * i.e. (16KHz, 44.1 KHz etc.)\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\n     * @returns {Promise<TrackVADEmitter>}\n     */\n    createTrackVADEmitter(localAudioDeviceId, sampleRate, vadProcessor) {\n        return TrackVADEmitter.create(localAudioDeviceId, sampleRate, vadProcessor);\n    },\n\n    /**\n     * Create AudioMixer, which is essentially a wrapper over web audio ChannelMergerNode. It essentially allows the\n     * user to mix multiple MediaStreams into a single one.\n     *\n     * @returns {AudioMixer}\n     */\n    createAudioMixer() {\n        return new AudioMixer();\n    },\n\n    /**\n     * Go through all audio devices on the system and return one that is active, i.e. has audio signal.\n     *\n     * @returns Promise<Object> - Object containing information about the found device.\n     */\n    getActiveAudioDevice() {\n        return getActiveAudioDevice();\n    },\n\n    /**\n     * Checks if its possible to enumerate available cameras/microphones.\n     *\n     * @returns {Promise<boolean>} a Promise which will be resolved only once\n     * the WebRTC stack is ready, either with true if the device listing is\n     * available available or with false otherwise.\n     * @deprecated use JitsiMeetJS.mediaDevices.isDeviceListAvailable instead\n     */\n    isDeviceListAvailable() {\n        logger.warn('This method is deprecated, use '\n            + 'JitsiMeetJS.mediaDevices.isDeviceListAvailable instead');\n\n        return this.mediaDevices.isDeviceListAvailable();\n    },\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     *\n     * @param {string} [deviceType] - type of device to change. Default is\n     * {@code undefined} or 'input', 'output' - for audio output device change.\n     * @returns {boolean} {@code true} if available; {@code false}, otherwise.\n     * @deprecated use JitsiMeetJS.mediaDevices.isDeviceChangeAvailable instead\n     */\n    isDeviceChangeAvailable(deviceType) {\n        logger.warn('This method is deprecated, use '\n            + 'JitsiMeetJS.mediaDevices.isDeviceChangeAvailable instead');\n\n        return this.mediaDevices.isDeviceChangeAvailable(deviceType);\n    },\n\n\n    /**\n     * Checks if the current environment supports having multiple audio\n     * input devices in use simultaneously.\n     *\n     * @returns {boolean} True if multiple audio input devices can be used.\n     */\n    isMultipleAudioInputSupported() {\n        return this.mediaDevices.isMultipleAudioInputSupported();\n    },\n\n    /**\n     * Checks if local tracks can collect stats and collection is enabled.\n     *\n     * @param {boolean} True if stats are being collected for local tracks.\n     */\n    isCollectingLocalStats() {\n        return Statistics.audioLevelsEnabled\n            && LocalStatsCollector.isLocalStatsSupported();\n    },\n\n    /**\n     * Executes callback with list of media devices connected.\n     *\n     * @param {function} callback\n     * @deprecated use JitsiMeetJS.mediaDevices.enumerateDevices instead\n     */\n    enumerateDevices(callback) {\n        logger.warn('This method is deprecated, use '\n            + 'JitsiMeetJS.mediaDevices.enumerateDevices instead');\n        this.mediaDevices.enumerateDevices(callback);\n    },\n\n    /* eslint-disable max-params */\n\n    /**\n     * @returns function that can be used to be attached to window.onerror and\n     * if options.enableWindowOnErrorHandler is enabled returns\n     * the function used by the lib.\n     * (function(message, source, lineno, colno, error)).\n     */\n    getGlobalOnErrorHandler(message, source, lineno, colno, error) {\n        logger.error(\n            `UnhandledError: ${message}`,\n            `Script: ${source}`,\n            `Line: ${lineno}`,\n            `Column: ${colno}`,\n            'StackTrace: ', error);\n        Statistics.reportGlobalError(error);\n    },\n\n    /**\n     * Informs lib-jitsi-meet about the current network status.\n     *\n     * @param {boolean} isOnline - {@code true} if the internet connectivity is online or {@code false}\n     * otherwise.\n     */\n    setNetworkInfo({ isOnline }) {\n        Statistics.sendAnalytics(\n            createAnalyticsEvent.createNetworkInfoEvent({\n                isOnline\n        }));\n        NetworkInfo.updateNetworkInfo({ isOnline });\n    },\n\n    /**\n     * Set the contentHint on the transmitted stream track to indicate\n     * charaterstics in the video stream, which informs PeerConnection\n     * on how to encode the track (to prefer motion or individual frame detail)\n     * @param {MediaStreamTrack} track - the track that is transmitted\n     * @param {String} hint - contentHint value that needs to be set on the track\n     */\n    setVideoTrackContentHints(track, hint) {\n        if ('contentHint' in track) {\n            track.contentHint = hint;\n            if (track.contentHint !== hint) {\n                logger.debug('Invalid video track contentHint');\n            }\n        } else {\n            logger.debug('MediaStreamTrack contentHint attribute not supported');\n        }\n    },\n\n    precallTest,\n\n    /* eslint-enable max-params */\n\n    /**\n     * Represents a hub/namespace for utility functionality which may be of\n     * interest to lib-jitsi-meet clients.\n     */\n    util: {\n        AuthUtil,\n        ScriptUtil,\n        browser\n    }\n});","// @flow\n\nimport JitsiStreamPresenterEffect from './JitsiStreamPresenterEffect';\n\n/**\n * Creates a new instance of JitsiStreamPresenterEffect.\n *\n * @param {MediaStream} stream - The video stream which will be used for\n * creating the presenter effect.\n * @returns {Promise<JitsiStreamPresenterEffect>}\n */\nexport function createPresenterEffect(stream) {\n    if (!MediaStreamTrack.prototype.getSettings\n        && !MediaStreamTrack.prototype.getConstraints) {\n        return Promise.reject(new Error('JitsiStreamPresenterEffect not supported!'));\n    }\n\n    return Promise.resolve(new JitsiStreamPresenterEffect(stream));\n}\n","// @flow\n\nimport ScreenshotCaptureEffect from './ScreenshotCaptureEffect';\n\n/**\n * Creates a new instance of ScreenshotCaptureEffect.\n *\n * @param {Object | Function} stateful - The redux store, state, or\n * {@code getState} function.\n * @returns {Promise<ScreenshotCaptureEffect>}\n */\nexport function createScreenshotCaptureEffect(callback) {\n    if (!MediaStreamTrack.prototype.getSettings && !MediaStreamTrack.prototype.getConstraints) {\n        return Promise.reject(new Error('ScreenshotCaptureEffect not supported!'));\n    }\n\n    return Promise.resolve(new ScreenshotCaptureEffect(callback));\n}\n","export default {\n    error: {\n        BUSY: 'busy',\n        ERROR: 'error',\n        RESOURCE_CONSTRAINT: 'resource-constraint',\n        UNEXPECTED_REQUEST: 'unexpected-request',\n        SERVICE_UNAVAILABLE: 'service-unavailable'\n    },\n    mode: {\n        FILE: 'file',\n        STREAM: 'stream'\n    },\n    status: {\n        OFF: 'off',\n        ON: 'on',\n        PENDING: 'pending'\n    }\n};\n","export function createNetworkInfoEvent({ isOnline, networkType, details }) {\n    const attributes = { isOnline };\n\n    // Do no include optional stuff or Amplitude handler will log warnings.\n    networkType && (attributes.networkType = networkType);\n    details && (attributes.details = details);\n\n    return {\n        action: 'network.info',\n        attributes\n    };\n}\n","// For legacy purposes, preserve the UMD of the public API of the Jitsi Meet\n// library (a.k.a. JitsiMeetJS).\nmodule.exports = require('./SariskaMediaTransport').default;\n","/**\n * A model for keeping track of each user's total\n * time as a dominant speaker. The model also\n * keeps track of the user's last known name\n * in case the user has left the meeting,\n * which is also tracked.\n */\nclass SpeakerStats {\n    /**\n     * Initializes a new SpeakerStats instance.\n     *\n     * @constructor\n     * @param {string} userId - The id of the user being tracked.\n     * @param {string} displayName - The name of the user being tracked.\n     * @param {boolean} isLocalStats - True if the stats model tracks\n     * the local user.\n     * @returns {void}\n     */\n    constructor(userId, displayName, isLocalStats) {\n        this._userId = userId;\n        this.setDisplayName(displayName);\n        this._isLocalStats = isLocalStats || false;\n        this.setDominantSpeaker(false);\n        this.totalDominantSpeakerTime = 0;\n        this._dominantSpeakerStart = 0;\n        this._hasLeft = false;\n        this._faceExpressions = {\n            happy: 0,\n            neutral: 0,\n            surprised: 0,\n            angry: 0,\n            fearful: 0,\n            disgusted: 0,\n            sad: 0\n        };\n    }\n\n    /**\n     * Get the user id being tracked.\n     *\n     * @returns {string} The user id.\n     */\n    getUserId() {\n        return this._userId;\n    }\n\n    /**\n     * Get the name of the user being tracked.\n     *\n     * @returns {string} The user name.\n     */\n    getDisplayName() {\n        return this.displayName;\n    }\n\n    /**\n     * Updates the last known name of the user being tracked.\n     *\n     * @param {string} - The user name.\n     * @returns {void}\n     */\n    setDisplayName(newName) {\n        this.displayName = newName;\n    }\n\n    /**\n     * Returns true if the stats are tracking the local user.\n     *\n     * @returns {boolean}\n     */\n    isLocalStats() {\n        return this._isLocalStats;\n    }\n\n    /**\n     * Returns true if the tracked user is currently a dominant speaker.\n     *\n     * @returns {boolean}\n     */\n    isDominantSpeaker() {\n        return this._dominantSpeakerStart > 0;\n    }\n\n    /**\n     * Returns true if the tracked user is currently a dominant speaker.\n     *\n     * @param {boolean} - If true, the user will being accumulating time\n     * as dominant speaker. If false, the user will not accumulate time\n     * and will record any time accumulated since starting as dominant speaker.\n     * @returns {void}\n     */\n    setDominantSpeaker(isNowDominantSpeaker) {\n        if (!this.isDominantSpeaker() && isNowDominantSpeaker) {\n            this._dominantSpeakerStart = Date.now();\n        } else if (this.isDominantSpeaker() && !isNowDominantSpeaker) {\n            const now = Date.now();\n            const timeElapsed = now - this._dominantSpeakerStart;\n\n            this.totalDominantSpeakerTime += timeElapsed;\n            this._dominantSpeakerStart = 0;\n        }\n    }\n\n    /**\n     * Get how long the tracked user has been dominant speaker.\n     *\n     * @returns {number} - The speaker time in milliseconds.\n     */\n    getTotalDominantSpeakerTime() {\n        let total = this.totalDominantSpeakerTime;\n\n        if (this.isDominantSpeaker()) {\n            total += Date.now() - this._dominantSpeakerStart;\n        }\n\n        return total;\n    }\n\n    /**\n     * Get whether or not the user is still in the meeting.\n     *\n     * @returns {boolean} True if the user is no longer in the meeting.\n     */\n    hasLeft() {\n        return this._hasLeft;\n    }\n\n    /**\n     * Set the user as having left the meeting.\n     *\n     * @returns {void}\n     */\n    markAsHasLeft() {\n        this._hasLeft = true;\n        this.setDominantSpeaker(false);\n    }\n\n    /**\n     * Gets the face expressions of the user.\n     *\n     * @returns {Object}\n     */\n    getFaceExpressions() {\n        return this._faceExpressions;\n    }\n\n    /**\n     * Sets the face expressions of the user.\n     *\n     * @param {Object} faceExpressions - object with face expressions.\n     * @returns {void}\n     */\n    setFaceExpressions(faceExpressions) {\n        this._faceExpressions = faceExpressions;\n    }\n\n    /**\n     * Adds a new face expression to speaker stats.\n     *\n     * @param  {string} faceExpression\n     * @param {number} duration\n     */\n    addFaceExpression(faceExpression, duration) {\n        this._faceExpressions[faceExpression] += duration;\n    }\n}\n\nmodule.exports = SpeakerStats;\n","var createTFLiteSIMDModule=function(){var e=\"undefined\"!=typeof document&&document.currentScript?document.currentScript.src:void 0;return\"undefined\"!=typeof __filename&&(e=e||__filename),function(n){var t,r,a=void 0!==(n=n||{})?n:{};a.ready=new Promise(function(e,n){t=e,r=n});var o,s={};for(o in a)a.hasOwnProperty(o)&&(s[o]=a[o]);var u,i=[],c=\"./this.program\",f=function(e,n){throw n},p=!1,l=!1;p=\"object\"==typeof window,l=\"function\"==typeof importScripts,u=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node;var d,m,y=\"\";!p&&!u&&!l?(\"undefined\"!=typeof read&&function(e){return read(e)},m=function(e){var n,t;return\"function\"==typeof readbuffer?new Uint8Array(readbuffer(e)):(n=read(e,\"binary\"),\"object\"==typeof n||k(\"Assertion failed: \"+t),n)},\"undefined\"!=typeof scriptArgs?i=scriptArgs:void 0!==arguments&&(i=arguments),\"function\"==typeof quit&&(f=function(e){quit(e)}),\"undefined\"!=typeof print&&(\"undefined\"==typeof console&&(console={}),console.log=print,console.warn=console.error=\"undefined\"!=typeof printErr?printErr:print)):(p||l)&&(l?y=self.location.href:\"undefined\"!=typeof document&&document.currentScript&&(y=document.currentScript.src),e&&(y=e),y=0!==y.indexOf(\"blob:\")?y.substr(0,y.lastIndexOf(\"/\")+1):\"\",function(e){var n=new XMLHttpRequest;return n.open(\"GET\",e,!1),n.send(null),n.responseText},l&&(m=function(e){var n=new XMLHttpRequest;return n.open(\"GET\",e,!1),n.responseType=\"arraybuffer\",n.send(null),new Uint8Array(n.response)}),d=function(e,n,t){var r=new XMLHttpRequest;r.open(\"GET\",e,!0),r.responseType=\"arraybuffer\",r.onload=function(){200==r.status||0==r.status&&r.response?n(r.response):t()},r.onerror=t,r.send(null)});var g,h,v,w=a.print||console.log.bind(console),b=a.printErr||console.warn.bind(console);for(o in s)s.hasOwnProperty(o)&&(a[o]=s[o]);s=null,a.arguments&&(i=a.arguments),a.thisProgram&&(c=a.thisProgram),a.quit&&(f=a.quit),a.wasmBinary&&(g=a.wasmBinary),a.noExitRuntime&&(h=a.noExitRuntime),\"object\"!=typeof WebAssembly&&k(\"no native wasm support detected\");var _=!1;var A,I,M,E,R=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0;function S(e,n,t){for(var r=n+t,a=n;e[a]&&!(a>=r);)++a;if(a-n>16&&e.subarray&&R)return R.decode(e.subarray(n,a));for(var o=\"\";n<a;){var s=e[n++];if(128&s){var u=63&e[n++];if(192!=(224&s)){var i=63&e[n++];if((s=224==(240&s)?(15&s)<<12|u<<6|i:(7&s)<<18|u<<12|i<<6|63&e[n++])<65536)o+=String.fromCharCode(s);else{var c=s-65536;o+=String.fromCharCode(55296|c>>10,56320|1023&c)}}else o+=String.fromCharCode((31&s)<<6|u)}else o+=String.fromCharCode(s)}return o}function O(e){A=e,a.HEAP8=I=new Int8Array(e),a.HEAP16=new Int16Array(e),a.HEAP32=E=new Int32Array(e),a.HEAPU8=M=new Uint8Array(e),a.HEAPU16=new Uint16Array(e),a.HEAPU32=new Uint32Array(e),a.HEAPF32=new Float32Array(e),a.HEAPF64=new Float64Array(e)}a.INITIAL_MEMORY;var C,T=[],x=[],P=[],H=[];x.push({func:function(){ne()}});var W=0,D=null,L=null;function k(e){a.onAbort&&a.onAbort(e),b(e+=\"\"),_=!0,1,e=\"abort(\"+e+\"). Build with -s ASSERTIONS=1 for more info.\";var n=new WebAssembly.RuntimeError(e);throw r(n),n}function U(e,n){return String.prototype.startsWith?e.startsWith(n):0===e.indexOf(n)}a.preloadedImages={},a.preloadedAudios={};var j=\"data:application/octet-stream;base64,\";function F(e){return U(e,j)}var q=\"file://\";function B(e){return U(e,q)}var N,G=\"https://sdk.sariska.io/tflite-simd.wasm\";function z(e){try{if(e==G&&g)return new Uint8Array(g);if(m)return m(e);throw\"both async and sync fetching of the wasm failed\"}catch(e){k(e)}}function X(e){for(;e.length>0;){var n=e.shift();if(\"function\"!=typeof n){var t=n.func;\"number\"==typeof t?void 0===n.arg?C.get(t)():C.get(t)(n.arg):t(void 0===n.arg?null:n.arg)}else n(a)}}F(G)||(G=G),N=u?function(){var e=process.hrtime();return 1e3*e[0]+e[1]/1e6}:\"undefined\"!=typeof dateNow?dateNow:function(){return performance.now()};var Y=!0;function J(e){return E[te()>>2]=e,e}function K(e){try{return v.grow(e-A.byteLength+65535>>>16),O(v.buffer),1}catch(e){}}var Q={};function V(){if(!V.strings){var e={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:c||\"./this.program\"};for(var n in Q)e[n]=Q[n];var t=[];for(var n in e)t.push(n+\"=\"+e[n]);V.strings=t}return V.strings}var Z={mappings:{},buffers:[null,[],[]],printChar:function(e,n){var t=Z.buffers[e];0===n||10===n?((1===e?w:b)(S(t,0)),t.length=0):t.push(n)},varargs:void 0,get:function(){return Z.varargs+=4,E[Z.varargs-4>>2]},getStr:function(e){return function(e,n){return e?S(M,e,n):\"\"}(e)},get64:function(e,n){return e}};var $,ee={a:function(){k()},n:function(e,n){var t;if(0===e)t=Date.now();else{if(1!==e&&4!==e||!Y)return J(28),-1;t=N()}return E[n>>2]=t/1e3|0,E[n+4>>2]=t%1e3*1e3*1e3|0,0},i:function(e,n){k(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},e:function(e,n){k(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},l:function(e,n,t){M.copyWithin(e,n,n+t)},m:function(e){e>>>=0;var n=M.length;if(e>2147483648)return!1;for(var t,r,a=1;a<=4;a*=2){var o=n*(1+.2/a);if(o=Math.min(o,e+100663296),K(Math.min(2147483648,((t=Math.max(16777216,e,o))%(r=65536)>0&&(t+=r-t%r),t))))return!0}return!1},o:function(e){for(var n=N();N()-n<e;);},p:function(e,n){var t=0;return V().forEach(function(r,a){var o=n+t;E[e+4*a>>2]=o,function(e,n,t){for(var r=0;r<e.length;++r)I[n++>>0]=e.charCodeAt(r);t||(I[n>>0]=0)}(r,o),t+=r.length+1}),0},g:function(e,n){var t=V();E[e>>2]=t.length;var r=0;return t.forEach(function(e){r+=e.length+1}),E[n>>2]=r,0},j:function(e){!function(e,n){n&&h&&0===e||(h||(e,!0,a.onExit&&a.onExit(e),_=!0),f(e,new re(e)))}(e)},h:function(e){return 0},k:function(e,n,t,r,a){},c:function(e,n,t,r){for(var a=0,o=0;o<t;o++){for(var s=E[n+8*o>>2],u=E[n+(8*o+4)>>2],i=0;i<u;i++)Z.printChar(e,M[s+i]);a+=u}return E[r>>2]=a,0},d:function(){return 6},f:function(){return 28},b:function(e){switch(e){case 30:return 16384;case 85:return 131072;case 132:case 133:case 12:case 137:case 138:case 15:case 235:case 16:case 17:case 18:case 19:case 20:case 149:case 13:case 10:case 236:case 153:case 9:case 21:case 22:case 159:case 154:case 14:case 77:case 78:case 139:case 82:case 68:case 67:case 164:case 11:case 29:case 47:case 48:case 95:case 52:case 51:case 46:return 200809;case 27:case 246:case 127:case 128:case 23:case 24:case 160:case 161:case 181:case 182:case 242:case 183:case 184:case 243:case 244:case 245:case 165:case 178:case 179:case 49:case 50:case 168:case 169:case 175:case 170:case 171:case 172:case 97:case 76:case 32:case 173:case 35:case 80:case 81:case 79:return-1;case 176:case 177:case 7:case 155:case 8:case 157:case 125:case 126:case 92:case 93:case 129:case 130:case 131:case 94:case 91:return 1;case 74:case 60:case 69:case 70:case 4:return 1024;case 31:case 42:case 72:return 32;case 87:case 26:case 33:return 2147483647;case 34:case 1:return 47839;case 38:case 36:return 99;case 43:case 37:return 2048;case 0:return 2097152;case 3:return 65536;case 28:return 32768;case 44:return 32767;case 75:return 16384;case 39:return 1e3;case 89:return 700;case 71:return 256;case 40:return 255;case 2:return 100;case 180:return 64;case 25:return 20;case 5:return 16;case 6:return 6;case 73:return 4;case 84:return\"object\"==typeof navigator&&navigator.hardwareConcurrency||1}return J(28),-1}},ne=(function(){var e={a:ee};function n(e,n){var t=e.exports;a.asm=t,O((v=a.asm.q).buffer),C=a.asm.D,function(e){if(W--,a.monitorRunDependencies&&a.monitorRunDependencies(W),0==W&&(null!==D&&(clearInterval(D),D=null),L)){var n=L;L=null,n()}}()}function t(e){n(e.instance)}function o(n){return function(){if(!g&&(p||l)){if(\"function\"==typeof fetch&&!B(G))return fetch(G,{credentials:\"same-origin\"}).then(function(e){if(!e.ok)throw\"failed to load wasm binary file at '\"+G+\"'\";return e.arrayBuffer()}).catch(function(){return z(G)});if(d)return new Promise(function(e,n){d(G,function(n){e(new Uint8Array(n))},n)})}return Promise.resolve().then(function(){return z(G)})}().then(function(n){return WebAssembly.instantiate(n,e)}).then(n,function(e){b(\"failed to asynchronously prepare wasm: \"+e),k(e)})}if(W++,a.monitorRunDependencies&&a.monitorRunDependencies(W),a.instantiateWasm)try{return a.instantiateWasm(e,n)}catch(e){return b(\"Module.instantiateWasm callback failed with error: \"+e),!1}(g||\"function\"!=typeof WebAssembly.instantiateStreaming||F(G)||B(G)||\"function\"!=typeof fetch?o(t):fetch(G,{credentials:\"same-origin\"}).then(function(n){return WebAssembly.instantiateStreaming(n,e).then(t,function(e){return b(\"wasm streaming compile failed: \"+e),b(\"falling back to ArrayBuffer instantiation\"),o(t)})})).catch(r)}(),a.___wasm_call_ctors=function(){return(ne=a.___wasm_call_ctors=a.asm.r).apply(null,arguments)}),te=(a._getModelBufferMemoryOffset=function(){return(a._getModelBufferMemoryOffset=a.asm.s).apply(null,arguments)},a._getInputMemoryOffset=function(){return(a._getInputMemoryOffset=a.asm.t).apply(null,arguments)},a._getInputHeight=function(){return(a._getInputHeight=a.asm.u).apply(null,arguments)},a._getInputWidth=function(){return(a._getInputWidth=a.asm.v).apply(null,arguments)},a._getInputChannelCount=function(){return(a._getInputChannelCount=a.asm.w).apply(null,arguments)},a._getOutputMemoryOffset=function(){return(a._getOutputMemoryOffset=a.asm.x).apply(null,arguments)},a._getOutputHeight=function(){return(a._getOutputHeight=a.asm.y).apply(null,arguments)},a._getOutputWidth=function(){return(a._getOutputWidth=a.asm.z).apply(null,arguments)},a._getOutputChannelCount=function(){return(a._getOutputChannelCount=a.asm.A).apply(null,arguments)},a._loadModel=function(){return(a._loadModel=a.asm.B).apply(null,arguments)},a._runInference=function(){return(a._runInference=a.asm.C).apply(null,arguments)},a.___errno_location=function(){return(te=a.___errno_location=a.asm.E).apply(null,arguments)});function re(e){this.name=\"ExitStatus\",this.message=\"Program terminated with exit(\"+e+\")\",this.status=e}function ae(e){function n(){$||($=!0,a.calledRun=!0,_||(!0,X(x),X(P),t(a),a.onRuntimeInitialized&&a.onRuntimeInitialized(),function(){if(a.postRun)for(\"function\"==typeof a.postRun&&(a.postRun=[a.postRun]);a.postRun.length;)e=a.postRun.shift(),H.unshift(e);var e;X(H)}()))}e=e||i,W>0||(!function(){if(a.preRun)for(\"function\"==typeof a.preRun&&(a.preRun=[a.preRun]);a.preRun.length;)e=a.preRun.shift(),T.unshift(e);var e;X(T)}(),W>0||(a.setStatus?(a.setStatus(\"Running...\"),setTimeout(function(){setTimeout(function(){a.setStatus(\"\")},1),n()},1)):n()))}if(L=function e(){$||ae(),$||(L=e)},a.run=ae,a.preInit)for(\"function\"==typeof a.preInit&&(a.preInit=[a.preInit]);a.preInit.length>0;)a.preInit.pop()();return h=!0,ae(),n.ready}}();\"object\"==typeof exports&&\"object\"==typeof module?module.exports=createTFLiteSIMDModule:\"function\"==typeof define&&define.amd?define([],function(){return createTFLiteSIMDModule}):\"object\"==typeof exports&&(exports.createTFLiteSIMDModule=createTFLiteSIMDModule);","var createTFLiteModule=function(){var e=\"undefined\"!=typeof document&&document.currentScript?document.currentScript.src:void 0;return\"undefined\"!=typeof __filename&&(e=e||__filename),function(n){var t,r,a=void 0!==(n=n||{})?n:{};a.ready=new Promise(function(e,n){t=e,r=n});var o,u={};for(o in a)a.hasOwnProperty(o)&&(u[o]=a[o]);var s,i=[],c=\"./this.program\",f=function(e,n){throw n},p=!1,l=!1;p=\"object\"==typeof window,l=\"function\"==typeof importScripts,s=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node;var d,m,y=\"\";!p&&!s&&!l?(\"undefined\"!=typeof read&&function(e){return read(e)},m=function(e){var n,t;return\"function\"==typeof readbuffer?new Uint8Array(readbuffer(e)):(n=read(e,\"binary\"),\"object\"==typeof n||U(\"Assertion failed: \"+t),n)},\"undefined\"!=typeof scriptArgs?i=scriptArgs:void 0!==arguments&&(i=arguments),\"function\"==typeof quit&&(f=function(e){quit(e)}),\"undefined\"!=typeof print&&(\"undefined\"==typeof console&&(console={}),console.log=print,console.warn=console.error=\"undefined\"!=typeof printErr?printErr:print)):(p||l)&&(l?y=self.location.href:\"undefined\"!=typeof document&&document.currentScript&&(y=document.currentScript.src),e&&(y=e),y=0!==y.indexOf(\"blob:\")?y.substr(0,y.lastIndexOf(\"/\")+1):\"\",function(e){var n=new XMLHttpRequest;return n.open(\"GET\",e,!1),n.send(null),n.responseText},l&&(m=function(e){var n=new XMLHttpRequest;return n.open(\"GET\",e,!1),n.responseType=\"arraybuffer\",n.send(null),new Uint8Array(n.response)}),d=function(e,n,t){var r=new XMLHttpRequest;r.open(\"GET\",e,!0),r.responseType=\"arraybuffer\",r.onload=function(){200==r.status||0==r.status&&r.response?n(r.response):t()},r.onerror=t,r.send(null)});var g,h,v,w=a.print||console.log.bind(console),b=a.printErr||console.warn.bind(console);for(o in u)u.hasOwnProperty(o)&&(a[o]=u[o]);u=null,a.arguments&&(i=a.arguments),a.thisProgram&&(c=a.thisProgram),a.quit&&(f=a.quit),a.wasmBinary&&(g=a.wasmBinary),a.noExitRuntime&&(h=a.noExitRuntime),\"object\"!=typeof WebAssembly&&U(\"no native wasm support detected\");var _=!1;var A,E,R,I,M=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0;function O(e,n,t){for(var r=n+t,a=n;e[a]&&!(a>=r);)++a;if(a-n>16&&e.subarray&&M)return M.decode(e.subarray(n,a));for(var o=\"\";n<a;){var u=e[n++];if(128&u){var s=63&e[n++];if(192!=(224&u)){var i=63&e[n++];if((u=224==(240&u)?(15&u)<<12|s<<6|i:(7&u)<<18|s<<12|i<<6|63&e[n++])<65536)o+=String.fromCharCode(u);else{var c=u-65536;o+=String.fromCharCode(55296|c>>10,56320|1023&c)}}else o+=String.fromCharCode((31&u)<<6|s)}else o+=String.fromCharCode(u)}return o}function C(e){A=e,a.HEAP8=E=new Int8Array(e),a.HEAP16=new Int16Array(e),a.HEAP32=I=new Int32Array(e),a.HEAPU8=R=new Uint8Array(e),a.HEAPU16=new Uint16Array(e),a.HEAPU32=new Uint32Array(e),a.HEAPF32=new Float32Array(e),a.HEAPF64=new Float64Array(e)}a.INITIAL_MEMORY;var S,T=[],x=[],P=[],H=[];x.push({func:function(){ne()}});var W=0,L=null,k=null;function U(e){a.onAbort&&a.onAbort(e),b(e+=\"\"),_=!0,1,e=\"abort(\"+e+\"). Build with -s ASSERTIONS=1 for more info.\";var n=new WebAssembly.RuntimeError(e);throw r(n),n}function j(e,n){return String.prototype.startsWith?e.startsWith(n):0===e.indexOf(n)}a.preloadedImages={},a.preloadedAudios={};var F=\"data:application/octet-stream;base64,\";function D(e){return j(e,F)}var q=\"file://\";function B(e){return j(e,q)}var N,G=\"https://sdk.sariska.io/tflite.wasm\";function z(e){try{if(e==G&&g)return new Uint8Array(g);if(m)return m(e);throw\"both async and sync fetching of the wasm failed\"}catch(e){U(e)}}function X(e){for(;e.length>0;){var n=e.shift();if(\"function\"!=typeof n){var t=n.func;\"number\"==typeof t?void 0===n.arg?S.get(t)():S.get(t)(n.arg):t(void 0===n.arg?null:n.arg)}else n(a)}}D(G)||(G=G),N=s?function(){var e=process.hrtime();return 1e3*e[0]+e[1]/1e6}:\"undefined\"!=typeof dateNow?dateNow:function(){return performance.now()};var Y=!0;function J(e){return I[te()>>2]=e,e}function K(e){try{return v.grow(e-A.byteLength+65535>>>16),C(v.buffer),1}catch(e){}}var Q={};function V(){if(!V.strings){var e={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:c||\"./this.program\"};for(var n in Q)e[n]=Q[n];var t=[];for(var n in e)t.push(n+\"=\"+e[n]);V.strings=t}return V.strings}var Z={mappings:{},buffers:[null,[],[]],printChar:function(e,n){var t=Z.buffers[e];0===n||10===n?((1===e?w:b)(O(t,0)),t.length=0):t.push(n)},varargs:void 0,get:function(){return Z.varargs+=4,I[Z.varargs-4>>2]},getStr:function(e){return function(e,n){return e?O(R,e,n):\"\"}(e)},get64:function(e,n){return e}};var $,ee={a:function(){U()},n:function(e,n){var t;if(0===e)t=Date.now();else{if(1!==e&&4!==e||!Y)return J(28),-1;t=N()}return I[n>>2]=t/1e3|0,I[n+4>>2]=t%1e3*1e3*1e3|0,0},i:function(e,n){U(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},e:function(e,n){U(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},l:function(e,n,t){R.copyWithin(e,n,n+t)},m:function(e){e>>>=0;var n=R.length;if(e>2147483648)return!1;for(var t,r,a=1;a<=4;a*=2){var o=n*(1+.2/a);if(o=Math.min(o,e+100663296),K(Math.min(2147483648,((t=Math.max(16777216,e,o))%(r=65536)>0&&(t+=r-t%r),t))))return!0}return!1},o:function(e){for(var n=N();N()-n<e;);},p:function(e,n){var t=0;return V().forEach(function(r,a){var o=n+t;I[e+4*a>>2]=o,function(e,n,t){for(var r=0;r<e.length;++r)E[n++>>0]=e.charCodeAt(r);t||(E[n>>0]=0)}(r,o),t+=r.length+1}),0},g:function(e,n){var t=V();I[e>>2]=t.length;var r=0;return t.forEach(function(e){r+=e.length+1}),I[n>>2]=r,0},j:function(e){!function(e,n){n&&h&&0===e||(h||(e,!0,a.onExit&&a.onExit(e),_=!0),f(e,new re(e)))}(e)},h:function(e){return 0},k:function(e,n,t,r,a){},c:function(e,n,t,r){for(var a=0,o=0;o<t;o++){for(var u=I[n+8*o>>2],s=I[n+(8*o+4)>>2],i=0;i<s;i++)Z.printChar(e,R[u+i]);a+=s}return I[r>>2]=a,0},d:function(){return 6},f:function(){return 28},b:function(e){switch(e){case 30:return 16384;case 85:return 131072;case 132:case 133:case 12:case 137:case 138:case 15:case 235:case 16:case 17:case 18:case 19:case 20:case 149:case 13:case 10:case 236:case 153:case 9:case 21:case 22:case 159:case 154:case 14:case 77:case 78:case 139:case 82:case 68:case 67:case 164:case 11:case 29:case 47:case 48:case 95:case 52:case 51:case 46:return 200809;case 27:case 246:case 127:case 128:case 23:case 24:case 160:case 161:case 181:case 182:case 242:case 183:case 184:case 243:case 244:case 245:case 165:case 178:case 179:case 49:case 50:case 168:case 169:case 175:case 170:case 171:case 172:case 97:case 76:case 32:case 173:case 35:case 80:case 81:case 79:return-1;case 176:case 177:case 7:case 155:case 8:case 157:case 125:case 126:case 92:case 93:case 129:case 130:case 131:case 94:case 91:return 1;case 74:case 60:case 69:case 70:case 4:return 1024;case 31:case 42:case 72:return 32;case 87:case 26:case 33:return 2147483647;case 34:case 1:return 47839;case 38:case 36:return 99;case 43:case 37:return 2048;case 0:return 2097152;case 3:return 65536;case 28:return 32768;case 44:return 32767;case 75:return 16384;case 39:return 1e3;case 89:return 700;case 71:return 256;case 40:return 255;case 2:return 100;case 180:return 64;case 25:return 20;case 5:return 16;case 6:return 6;case 73:return 4;case 84:return\"object\"==typeof navigator&&navigator.hardwareConcurrency||1}return J(28),-1}},ne=(function(){var e={a:ee};function n(e,n){var t=e.exports;a.asm=t,C((v=a.asm.q).buffer),S=a.asm.D,function(e){if(W--,a.monitorRunDependencies&&a.monitorRunDependencies(W),0==W&&(null!==L&&(clearInterval(L),L=null),k)){var n=k;k=null,n()}}()}function t(e){n(e.instance)}function o(n){return function(){if(!g&&(p||l)){if(\"function\"==typeof fetch&&!B(G))return fetch(G,{credentials:\"same-origin\"}).then(function(e){if(!e.ok)throw\"failed to load wasm binary file at '\"+G+\"'\";return e.arrayBuffer()}).catch(function(){return z(G)});if(d)return new Promise(function(e,n){d(G,function(n){e(new Uint8Array(n))},n)})}return Promise.resolve().then(function(){return z(G)})}().then(function(n){return WebAssembly.instantiate(n,e)}).then(n,function(e){b(\"failed to asynchronously prepare wasm: \"+e),U(e)})}if(W++,a.monitorRunDependencies&&a.monitorRunDependencies(W),a.instantiateWasm)try{return a.instantiateWasm(e,n)}catch(e){return b(\"Module.instantiateWasm callback failed with error: \"+e),!1}(g||\"function\"!=typeof WebAssembly.instantiateStreaming||D(G)||B(G)||\"function\"!=typeof fetch?o(t):fetch(G,{credentials:\"same-origin\"}).then(function(n){return WebAssembly.instantiateStreaming(n,e).then(t,function(e){return b(\"wasm streaming compile failed: \"+e),b(\"falling back to ArrayBuffer instantiation\"),o(t)})})).catch(r)}(),a.___wasm_call_ctors=function(){return(ne=a.___wasm_call_ctors=a.asm.r).apply(null,arguments)}),te=(a._getModelBufferMemoryOffset=function(){return(a._getModelBufferMemoryOffset=a.asm.s).apply(null,arguments)},a._getInputMemoryOffset=function(){return(a._getInputMemoryOffset=a.asm.t).apply(null,arguments)},a._getInputHeight=function(){return(a._getInputHeight=a.asm.u).apply(null,arguments)},a._getInputWidth=function(){return(a._getInputWidth=a.asm.v).apply(null,arguments)},a._getInputChannelCount=function(){return(a._getInputChannelCount=a.asm.w).apply(null,arguments)},a._getOutputMemoryOffset=function(){return(a._getOutputMemoryOffset=a.asm.x).apply(null,arguments)},a._getOutputHeight=function(){return(a._getOutputHeight=a.asm.y).apply(null,arguments)},a._getOutputWidth=function(){return(a._getOutputWidth=a.asm.z).apply(null,arguments)},a._getOutputChannelCount=function(){return(a._getOutputChannelCount=a.asm.A).apply(null,arguments)},a._loadModel=function(){return(a._loadModel=a.asm.B).apply(null,arguments)},a._runInference=function(){return(a._runInference=a.asm.C).apply(null,arguments)},a.___errno_location=function(){return(te=a.___errno_location=a.asm.E).apply(null,arguments)});function re(e){this.name=\"ExitStatus\",this.message=\"Program terminated with exit(\"+e+\")\",this.status=e}function ae(e){function n(){$||($=!0,a.calledRun=!0,_||(!0,X(x),X(P),t(a),a.onRuntimeInitialized&&a.onRuntimeInitialized(),function(){if(a.postRun)for(\"function\"==typeof a.postRun&&(a.postRun=[a.postRun]);a.postRun.length;)e=a.postRun.shift(),H.unshift(e);var e;X(H)}()))}e=e||i,W>0||(!function(){if(a.preRun)for(\"function\"==typeof a.preRun&&(a.preRun=[a.preRun]);a.preRun.length;)e=a.preRun.shift(),T.unshift(e);var e;X(T)}(),W>0||(a.setStatus?(a.setStatus(\"Running...\"),setTimeout(function(){setTimeout(function(){a.setStatus(\"\")},1),n()},1)):n()))}if(k=function e(){$||ae(),$||(k=e)},a.run=ae,a.preInit)for(\"function\"==typeof a.preInit&&(a.preInit=[a.preInit]);a.preInit.length>0;)a.preInit.pop()();return h=!0,ae(),n.ready}}();\"object\"==typeof exports&&\"object\"==typeof module?module.exports=createTFLiteModule:\"function\"==typeof define&&define.amd?define([],function(){return createTFLiteModule}):\"object\"==typeof exports&&(exports.createTFLiteModule=createTFLiteModule);","const AuthUtil = {\n    /**\n     * Creates the URL pointing to JWT token authentication service. It is\n     * formatted from the 'urlPattern' argument which can contain the following\n     * constants:\n     * '{room}' - name of the conference room passed as <tt>roomName</tt>\n     * argument to this method.\n     * '{roleUpgrade}' - will contain 'true' if the URL will be used for\n     * the role upgrade scenario, where user connects from anonymous domain and\n     * then gets upgraded to the moderator by logging-in from the popup window.\n     *\n     * @param urlPattern a URL pattern pointing to the login service\n     * @param roomName the name of the conference room for which the user will\n     * be authenticated\n     * @param {bool} roleUpgrade <tt>true</tt> if the URL will be used for role\n     * upgrade scenario, where the user logs-in from the popup window in order\n     * to have the moderator rights granted\n     *\n     * @returns {string|null} the URL pointing to JWT login service or\n     * <tt>null</tt> if 'urlPattern' is not a string and the URL can not be\n     * constructed.\n     */\n    getTokenAuthUrl(urlPattern, roomName, roleUpgrade) {\n        const url = urlPattern;\n\n        if (typeof url !== 'string') {\n            return null;\n        }\n\n        return url.replace('{room}', roomName)\n            .replace('{roleUpgrade}', roleUpgrade === true);\n    }\n};\n\nmodule.exports = AuthUtil;\n","/**\n * Implements utility to forward events from one eventEmitter to another.\n * @param src {object} instance of EventEmitter or another class that implements\n * addListener method which will register listener to EventEmitter instance.\n * @param dest {object} instance of EventEmitter or another class that\n * implements emit method which will emit an event.\n */\nfunction EventEmitterForwarder(src, dest) {\n    if (!src || !dest || typeof src.addListener !== 'function'\n        || typeof dest.emit !== 'function') {\n        throw new Error('Invalid arguments passed to EventEmitterForwarder');\n    }\n    this.src = src;\n    this.dest = dest;\n}\n\n/**\n * Adds event to be forwarded from src to dest.\n * @param srcEvent {string} the event that EventEmitterForwarder is listening\n * for.\n * @param dstEvent {string} the event that will be fired from dest.\n * @param arguments all other passed arguments are going to be fired with\n * dstEvent.\n */\nEventEmitterForwarder.prototype.forward = function(...args) {\n    const srcEvent = args[0];\n\n    // This will be the \"this\" value for emit function.\n\n    args[0] = this.dest;\n\n    // Using bind.apply to pass the arguments as Array-like object (\"arguments\")\n    this.src.addListener(\n        srcEvent,\n        Function.prototype.bind.apply(this.dest.emit, args));\n};\n\nmodule.exports = EventEmitterForwarder;\n","/**\n * This utility class defines custom onerror and onunhandledrejection functions.\n * The custom error handlers respect the previously-defined error handlers.\n * GlobalOnErrorHandler class provides utilities to add many custom error\n * handlers and to execute the error handlers directly.\n */\n\n\n/**\n * List with global error handlers that will be executed.\n */\nconst handlers = [];\n\n// If an old handler exists, also fire its events.\nconst oldOnErrorHandler = window.onerror;\n\n/**\n * Custom error handler that calls the old global error handler and executes\n * all handlers that were previously added.\n */\nfunction JitsiGlobalErrorHandler(...args) {\n    handlers.forEach(handler => handler(...args));\n    oldOnErrorHandler && oldOnErrorHandler(...args);\n}\n\n// If an old handler exists, also fire its events.\nconst oldOnUnhandledRejection = window.onunhandledrejection;\n\n/**\n * Custom handler that calls the old global handler and executes all handlers\n * that were previously added. This handler handles rejected Promises.\n */\nfunction JitsiGlobalUnhandledRejection(event) {\n    handlers.forEach(handler => handler(null, null, null, null, event.reason));\n    oldOnUnhandledRejection && oldOnUnhandledRejection(event);\n}\n\n// Setting the custom error handlers.\nwindow.onerror = JitsiGlobalErrorHandler;\nwindow.onunhandledrejection = JitsiGlobalUnhandledRejection;\n\nconst GlobalOnErrorHandler = {\n    /**\n     * Adds new error handlers.\n     * @param handler the new handler.\n     */\n    addHandler(handler) {\n        handlers.push(handler);\n    },\n\n    /**\n     * Calls the global error handler if there is one.\n     * @param error the error to pass to the error handler\n     */\n    callErrorHandler(error) {\n        const errHandler = window.onerror;\n\n        if (!errHandler) {\n            return;\n        }\n        errHandler(null, null, null, null, error);\n    },\n\n    /**\n     * Calls the global rejection handler if there is one.\n     * @param error the error to pass to the rejection handler.\n     */\n    callUnhandledRejectionHandler(error) {\n        const errHandler = window.onunhandledrejection;\n\n        if (!errHandler) {\n            return;\n        }\n        errHandler(error);\n    }\n};\n\n\nmodule.exports = GlobalOnErrorHandler;\n","/**\n * @const\n */\nconst ALPHANUM\n    = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\n/**\n * Hexadecimal digits.\n * @const\n */\nconst HEX_DIGITS = '0123456789abcdef';\n\n/**\n * Generates random int within the range [min, max]\n * @param min the minimum value for the generated number\n * @param max the maximum value for the generated number\n * @returns random int number\n */\nfunction randomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n/**\n * Get random element from array or string.\n * @param {Array|string} arr source\n * @returns array element or string character\n */\nfunction randomElement(arr) {\n    return arr[randomInt(0, arr.length - 1)];\n}\n\n/**\n * Generate random alphanumeric string.\n * @param {number} length expected string length\n * @returns {string} random string of specified length\n */\nfunction randomAlphanumStr(length) {\n    let result = '';\n\n    for (let i = 0; i < length; i += 1) {\n        result += randomElement(ALPHANUM);\n    }\n\n    return result;\n}\n\n/**\n * Exported interface.\n */\nconst RandomUtil = {\n    /**\n     * Returns a random hex digit.\n     * @returns {*}\n     */\n    randomHexDigit() {\n        return randomElement(HEX_DIGITS);\n    },\n\n    /**\n     * Returns a random string of hex digits with length 'len'.\n     * @param len the length.\n     */\n    randomHexString(len) {\n        let ret = '';\n\n        while (len--) { // eslint-disable-line no-param-reassign\n            ret += this.randomHexDigit();\n        }\n\n        return ret;\n    },\n    randomElement,\n    randomAlphanumStr,\n    randomInt\n};\n\nmodule.exports = RandomUtil;\n","const currentExecutingScript = require('current-executing-script');\n\n/* eslint-disable max-params */\n\n/**\n * Implements utility functions which facilitate the dealing with scripts such\n * as the download and execution of a JavaScript file.\n */\nconst ScriptUtil = {\n    /**\n     * Loads a script from a specific source.\n     *\n     * @param src the source from the which the script is to be (down)loaded\n     * @param async true to asynchronously load the script or false to\n     * synchronously load the script\n     * @param prepend true to schedule the loading of the script as soon as\n     * possible or false to schedule the loading of the script at the end of the\n     * scripts known at the time\n     * @param relativeURL whether we need load the library from url relative\n     * to the url that lib-jitsi-meet was loaded. Useful when sourcing the\n     * library from different location than the app that is using it\n     * @param loadCallback on load callback function\n     * @param errorCallback callback to be called on error loading the script\n     */\n    loadScript(\n            src,\n            async,\n            prepend,\n            relativeURL,\n            loadCallback,\n            errorCallback) {\n        const d = document;\n        const tagName = 'script';\n        const script = d.createElement(tagName);\n        const referenceNode = d.getElementsByTagName(tagName)[0];\n\n        script.async = async;\n\n        if (relativeURL) {\n            // finds the src url of the current loaded script\n            // and use it as base of the src supplied argument\n            const scriptEl = currentExecutingScript();\n\n            if (scriptEl) {\n                const scriptSrc = scriptEl.src;\n                const baseScriptSrc\n                    = scriptSrc.substring(0, scriptSrc.lastIndexOf('/') + 1);\n\n                if (scriptSrc && baseScriptSrc) {\n                    // eslint-disable-next-line no-param-reassign\n                    src = baseScriptSrc + src;\n                }\n            }\n        }\n\n        if (loadCallback) {\n            script.onload = loadCallback;\n        }\n        if (errorCallback) {\n            script.onerror = errorCallback;\n        }\n\n        script.src = src;\n        if (prepend) {\n            referenceNode.parentNode.insertBefore(script, referenceNode);\n        } else {\n            referenceNode.parentNode.appendChild(script);\n        }\n    }\n};\n\n/* eslint-enable max-params */\n\nmodule.exports = ScriptUtil;\n","/**\n * Implements a simple hash code for a string (see\n * https://en.wikipedia.org/wiki/Java_hashCode()).\n *\n * @param {string} The string to return a hash of.\n * @return {Number} the integer hash code of the string.\n */\nfunction integerHash(string) {\n    if (!string) {\n        return 0;\n    }\n\n    let char, hash = 0, i;\n\n    for (i = 0; i < string.length; i++) {\n        char = string.charCodeAt(i);\n        hash += char * Math.pow(31, string.length - 1 - i);\n        hash = Math.abs(hash | 0); // eslint-disable-line no-bitwise\n    }\n\n    return hash;\n}\n\nmodule.exports = { integerHash };\n","const RandomUtil = require('./RandomUtil');\n\n/**\n * from faker.js - Copyright (c) 2014-2015 Matthew Bergman & Marak Squires\n * MIT License\n * http://github.com/marak/faker.js/\n *\n * @const\n */\nconst names = [\n    'Aaliyah', 'Aaron', 'Abagail', 'Abbey', 'Abbie', 'Abbigail', 'Abby',\n    'Abdiel', 'Abdul', 'Abdullah', 'Abe', 'Abel', 'Abelardo', 'Abigail',\n    'Abigale', 'Abigayle', 'Abner', 'Abraham', 'Ada', 'Adah', 'Adalberto',\n    'Adaline', 'Adam', 'Adan', 'Addie', 'Addison', 'Adela', 'Adelbert', 'Adele',\n    'Adelia', 'Adeline', 'Adell', 'Adella', 'Adelle', 'Aditya', 'Adolf',\n    'Adolfo', 'Adolph', 'Adolphus', 'Adonis', 'Adrain', 'Adrian', 'Adriana',\n    'Adrianna', 'Adriel', 'Adrien', 'Adrienne', 'Afton', 'Aglae', 'Agnes',\n    'Agustin', 'Agustina', 'Ahmad', 'Ahmed', 'Aida', 'Aidan', 'Aiden', 'Aileen',\n    'Aisha', 'Aiyana', 'Akeem', 'Al', 'Alaina', 'Alan', 'Alana', 'Alanis',\n    'Alanna', 'Alayna', 'Alba', 'Albert', 'Alberta', 'Albertha', 'Alberto',\n    'Albin', 'Albina', 'Alda', 'Alden', 'Alec', 'Aleen', 'Alejandra',\n    'Alejandrin', 'Alek', 'Alena', 'Alene', 'Alessandra', 'Alessandro',\n    'Alessia', 'Aletha', 'Alex', 'Alexa', 'Alexander', 'Alexandra', 'Alexandre',\n    'Alexandrea', 'Alexandria', 'Alexandrine', 'Alexandro', 'Alexane',\n    'Alexanne', 'Alexie', 'Alexis', 'Alexys', 'Alexzander', 'Alf', 'Alfonso',\n    'Alfonzo', 'Alford', 'Alfred', 'Alfreda', 'Alfredo', 'Ali', 'Alia', 'Alice',\n    'Alicia', 'Alisa', 'Alisha', 'Alison', 'Alivia', 'Aliya', 'Aliyah', 'Aliza',\n    'Alize', 'Allan', 'Allen', 'Allene', 'Allie', 'Allison', 'Ally', 'Alphonso',\n    'Alta', 'Althea', 'Alva', 'Alvah', 'Alvena', 'Alvera', 'Alverta', 'Alvina',\n    'Alvis', 'Alyce', 'Alycia', 'Alysa', 'Alysha', 'Alyson', 'Alysson',\n    'Amalia', 'Amanda', 'Amani', 'Amara', 'Amari', 'Amaya', 'Amber', 'Ambrose',\n    'Amelia', 'Amelie', 'Amely', 'America', 'Americo', 'Amie', 'Amina', 'Amir',\n    'Amira', 'Amiya', 'Amos', 'Amparo', 'Amy', 'Amya', 'Ana', 'Anabel',\n    'Anabelle', 'Anahi', 'Anais', 'Anastacio', 'Anastasia', 'Anderson', 'Andre',\n    'Andreane', 'Andreanne', 'Andres', 'Andrew', 'Andy', 'Angel', 'Angela',\n    'Angelica', 'Angelina', 'Angeline', 'Angelita', 'Angelo', 'Angie', 'Angus',\n    'Anibal', 'Anika', 'Anissa', 'Anita', 'Aniya', 'Aniyah', 'Anjali', 'Anna',\n    'Annabel', 'Annabell', 'Annabelle', 'Annalise', 'Annamae', 'Annamarie',\n    'Anne', 'Annetta', 'Annette', 'Annie', 'Ansel', 'Ansley', 'Anthony',\n    'Antoinette', 'Antone', 'Antonetta', 'Antonette', 'Antonia', 'Antonietta',\n    'Antonina', 'Antonio', 'Antwan', 'Antwon', 'Anya', 'April', 'Ara',\n    'Araceli', 'Aracely', 'Arch', 'Archibald', 'Ardella', 'Arden', 'Ardith',\n    'Arely', 'Ari', 'Ariane', 'Arianna', 'Aric', 'Ariel', 'Arielle', 'Arjun',\n    'Arlene', 'Arlie', 'Arlo', 'Armand', 'Armando', 'Armani', 'Arnaldo', 'Arne',\n    'Arno', 'Arnold', 'Arnoldo', 'Arnulfo', 'Aron', 'Art', 'Arthur', 'Arturo',\n    'Arvel', 'Arvid', 'Arvilla', 'Aryanna', 'Asa', 'Asha', 'Ashlee', 'Ashleigh',\n    'Ashley', 'Ashly', 'Ashlynn', 'Ashton', 'Ashtyn', 'Asia', 'Assunta',\n    'Astrid', 'Athena', 'Aubree', 'Aubrey', 'Audie', 'Audra', 'Audreanne',\n    'Audrey', 'August', 'Augusta', 'Augustine', 'Augustus', 'Aurelia',\n    'Aurelie', 'Aurelio', 'Aurore', 'Austen', 'Austin', 'Austyn', 'Autumn',\n    'Ava', 'Avery', 'Avis', 'Axel', 'Ayana', 'Ayden', 'Ayla', 'Aylin', 'Baby',\n    'Bailee', 'Bailey', 'Barbara', 'Barney', 'Baron', 'Barrett', 'Barry',\n    'Bart', 'Bartholome', 'Barton', 'Baylee', 'Beatrice', 'Beau', 'Beaulah',\n    'Bell', 'Bella', 'Belle', 'Ben', 'Benedict', 'Benjamin', 'Bennett',\n    'Bennie', 'Benny', 'Benton', 'Berenice', 'Bernadette', 'Bernadine',\n    'Bernard', 'Bernardo', 'Berneice', 'Bernhard', 'Bernice', 'Bernie',\n    'Berniece', 'Bernita', 'Berry', 'Bert', 'Berta', 'Bertha', 'Bertram',\n    'Bertrand', 'Beryl', 'Bessie', 'Beth', 'Bethany', 'Bethel', 'Betsy',\n    'Bette', 'Bettie', 'Betty', 'Bettye', 'Beulah', 'Beverly', 'Bianka', 'Bill',\n    'Billie', 'Billy', 'Birdie', 'Blair', 'Blaise', 'Blake', 'Blanca',\n    'Blanche', 'Blaze', 'Bo', 'Bobbie', 'Bobby', 'Bonita', 'Bonnie', 'Boris',\n    'Boyd', 'Brad', 'Braden', 'Bradford', 'Bradley', 'Bradly', 'Brady',\n    'Braeden', 'Brain', 'Brandi', 'Brando', 'Brandon', 'Brandt', 'Brandy',\n    'Brandyn', 'Brannon', 'Branson', 'Brant', 'Braulio', 'Braxton', 'Brayan',\n    'Breana', 'Breanna', 'Breanne', 'Brenda', 'Brendan', 'Brenden', 'Brendon',\n    'Brenna', 'Brennan', 'Brennon', 'Brent', 'Bret', 'Brett', 'Bria', 'Brian',\n    'Briana', 'Brianne', 'Brice', 'Bridget', 'Bridgette', 'Bridie', 'Brielle',\n    'Brigitte', 'Brionna', 'Brisa', 'Britney', 'Brittany', 'Brock', 'Broderick',\n    'Brody', 'Brook', 'Brooke', 'Brooklyn', 'Brooks', 'Brown', 'Bruce',\n    'Bryana', 'Bryce', 'Brycen', 'Bryon', 'Buck', 'Bud', 'Buddy', 'Buford',\n    'Bulah', 'Burdette', 'Burley', 'Burnice', 'Buster', 'Cade', 'Caden',\n    'Caesar', 'Caitlyn', 'Cale', 'Caleb', 'Caleigh', 'Cali', 'Calista',\n    'Callie', 'Camden', 'Cameron', 'Camila', 'Camilla', 'Camille', 'Camren',\n    'Camron', 'Camryn', 'Camylle', 'Candace', 'Candelario', 'Candice',\n    'Candida', 'Candido', 'Cara', 'Carey', 'Carissa', 'Carlee', 'Carleton',\n    'Carley', 'Carli', 'Carlie', 'Carlo', 'Carlos', 'Carlotta', 'Carmel',\n    'Carmela', 'Carmella', 'Carmelo', 'Carmen', 'Carmine', 'Carol', 'Carolanne',\n    'Carole', 'Carolina', 'Caroline', 'Carolyn', 'Carolyne', 'Carrie',\n    'Carroll', 'Carson', 'Carter', 'Cary', 'Casandra', 'Casey', 'Casimer',\n    'Casimir', 'Casper', 'Cassandra', 'Cassandre', 'Cassidy', 'Cassie',\n    'Catalina', 'Caterina', 'Catharine', 'Catherine', 'Cathrine', 'Cathryn',\n    'Cathy', 'Cayla', 'Ceasar', 'Cecelia', 'Cecil', 'Cecile', 'Cecilia',\n    'Cedrick', 'Celestine', 'Celestino', 'Celia', 'Celine', 'Cesar', 'Chad',\n    'Chadd', 'Chadrick', 'Chaim', 'Chance', 'Chandler', 'Chanel', 'Chanelle',\n    'Charity', 'Charlene', 'Charles', 'Charley', 'Charlie', 'Charlotte',\n    'Chase', 'Chasity', 'Chauncey', 'Chaya', 'Chaz', 'Chelsea', 'Chelsey',\n    'Chelsie', 'Chesley', 'Chester', 'Chet', 'Cheyanne', 'Cheyenne', 'Chloe',\n    'Chris', 'Christ', 'Christa', 'Christelle', 'Christian', 'Christiana',\n    'Christina', 'Christine', 'Christop', 'Christophe', 'Christopher',\n    'Christy', 'Chyna', 'Ciara', 'Cicero', 'Cielo', 'Cierra', 'Cindy',\n    'Citlalli', 'Clair', 'Claire', 'Clara', 'Clarabelle', 'Clare', 'Clarissa',\n    'Clark', 'Claud', 'Claude', 'Claudia', 'Claudie', 'Claudine', 'Clay',\n    'Clemens', 'Clement', 'Clementina', 'Clementine', 'Clemmie', 'Cleo',\n    'Cleora', 'Cleta', 'Cletus', 'Cleve', 'Cleveland', 'Clifford', 'Clifton',\n    'Clint', 'Clinton', 'Clotilde', 'Clovis', 'Cloyd', 'Clyde', 'Coby', 'Cody',\n    'Colby', 'Cole', 'Coleman', 'Colin', 'Colleen', 'Collin', 'Colt', 'Colten',\n    'Colton', 'Columbus', 'Concepcion', 'Conner', 'Connie', 'Connor', 'Conor',\n    'Conrad', 'Constance', 'Constantin', 'Consuelo', 'Cooper', 'Cora',\n    'Coralie', 'Corbin', 'Cordelia', 'Cordell', 'Cordia', 'Cordie', 'Corene',\n    'Corine', 'Cornelius', 'Cornell', 'Corrine', 'Cortez', 'Cortney', 'Cory',\n    'Coty', 'Courtney', 'Coy', 'Craig', 'Crawford', 'Creola', 'Cristal',\n    'Cristian', 'Cristina', 'Cristobal', 'Cristopher', 'Cruz', 'Crystal',\n    'Crystel', 'Cullen', 'Curt', 'Curtis', 'Cydney', 'Cynthia', 'Cyril',\n    'Cyrus', 'Dagmar', 'Dahlia', 'Daija', 'Daisha', 'Daisy', 'Dakota', 'Dale',\n    'Dallas', 'Dallin', 'Dalton', 'Damaris', 'Dameon', 'Damian', 'Damien',\n    'Damion', 'Damon', 'Dan', 'Dana', 'Dandre', 'Dane', 'D\\'angelo', 'Dangelo',\n    'Danial', 'Daniela', 'Daniella', 'Danielle', 'Danika', 'Dannie', 'Danny',\n    'Dante', 'Danyka', 'Daphne', 'Daphnee', 'Daphney', 'Darby', 'Daren',\n    'Darian', 'Dariana', 'Darien', 'Dario', 'Darion', 'Darius', 'Darlene',\n    'Daron', 'Darrel', 'Darrell', 'Darren', 'Darrick', 'Darrin', 'Darrion',\n    'Darron', 'Darryl', 'Darwin', 'Daryl', 'Dashawn', 'Dasia', 'Dave', 'David',\n    'Davin', 'Davion', 'Davon', 'Davonte', 'Dawn', 'Dawson', 'Dax', 'Dayana',\n    'Dayna', 'Dayne', 'Dayton', 'Dean', 'Deangelo', 'Deanna', 'Deborah',\n    'Declan', 'Dedric', 'Dedrick', 'Dee', 'Deion', 'Deja', 'Dejah', 'Dejon',\n    'Dejuan', 'Delaney', 'Delbert', 'Delfina', 'Delia', 'Delilah', 'Dell',\n    'Della', 'Delmer', 'Delores', 'Delpha', 'Delphia', 'Delphine', 'Delta',\n    'Demarco', 'Demarcus', 'Demario', 'Demetris', 'Demetrius', 'Demond', 'Dena',\n    'Denis', 'Dennis', 'Deon', 'Deondre', 'Deontae', 'Deonte', 'Dereck',\n    'Derek', 'Derick', 'Deron', 'Derrick', 'Deshaun', 'Deshawn', 'Desiree',\n    'Desmond', 'Dessie', 'Destany', 'Destin', 'Destinee', 'Destiney', 'Destini',\n    'Destiny', 'Devan', 'Devante', 'Deven', 'Devin', 'Devon', 'Devonte',\n    'Devyn', 'Dewayne', 'Dewitt', 'Dexter', 'Diamond', 'Diana', 'Dianna',\n    'Diego', 'Dillan', 'Dillon', 'Dimitri', 'Dina', 'Dino', 'Dion', 'Dixie',\n    'Dock', 'Dolly', 'Dolores', 'Domenic', 'Domenica', 'Domenick', 'Domenico',\n    'Domingo', 'Dominic', 'Dominique', 'Don', 'Donald', 'Donato', 'Donavon',\n    'Donna', 'Donnell', 'Donnie', 'Donny', 'Dora', 'Dorcas', 'Dorian', 'Doris',\n    'Dorothea', 'Dorothy', 'Dorris', 'Dortha', 'Dorthy', 'Doug', 'Douglas',\n    'Dovie', 'Doyle', 'Drake', 'Drew', 'Duane', 'Dudley', 'Dulce', 'Duncan',\n    'Durward', 'Dustin', 'Dusty', 'Dwight', 'Dylan', 'Earl', 'Earlene',\n    'Earline', 'Earnest', 'Earnestine', 'Easter', 'Easton', 'Ebba', 'Ebony',\n    'Ed', 'Eda', 'Edd', 'Eddie', 'Eden', 'Edgar', 'Edgardo', 'Edison', 'Edmond',\n    'Edmund', 'Edna', 'Eduardo', 'Edward', 'Edwardo', 'Edwin', 'Edwina',\n    'Edyth', 'Edythe', 'Effie', 'Efrain', 'Efren', 'Eileen', 'Einar', 'Eino',\n    'Eladio', 'Elaina', 'Elbert', 'Elda', 'Eldon', 'Eldora', 'Eldred',\n    'Eldridge', 'Eleanora', 'Eleanore', 'Eleazar', 'Electa', 'Elena', 'Elenor',\n    'Elenora', 'Eleonore', 'Elfrieda', 'Eli', 'Elian', 'Eliane', 'Elias',\n    'Eliezer', 'Elijah', 'Elinor', 'Elinore', 'Elisa', 'Elisabeth', 'Elise',\n    'Eliseo', 'Elisha', 'Elissa', 'Eliza', 'Elizabeth', 'Ella', 'Ellen',\n    'Ellie', 'Elliot', 'Elliott', 'Ellis', 'Ellsworth', 'Elmer', 'Elmira',\n    'Elmo', 'Elmore', 'Elna', 'Elnora', 'Elody', 'Eloisa', 'Eloise', 'Elouise',\n    'Eloy', 'Elroy', 'Elsa', 'Else', 'Elsie', 'Elta', 'Elton', 'Elva', 'Elvera',\n    'Elvie', 'Elvis', 'Elwin', 'Elwyn', 'Elyse', 'Elyssa', 'Elza', 'Emanuel',\n    'Emelia', 'Emelie', 'Emely', 'Emerald', 'Emerson', 'Emery', 'Emie', 'Emil',\n    'Emile', 'Emilia', 'Emiliano', 'Emilie', 'Emilio', 'Emily', 'Emma',\n    'Emmalee', 'Emmanuel', 'Emmanuelle', 'Emmet', 'Emmett', 'Emmie', 'Emmitt',\n    'Emmy', 'Emory', 'Ena', 'Enid', 'Enoch', 'Enola', 'Enos', 'Enrico',\n    'Enrique', 'Ephraim', 'Era', 'Eriberto', 'Eric', 'Erica', 'Erich', 'Erick',\n    'Ericka', 'Erik', 'Erika', 'Erin', 'Erling', 'Erna', 'Ernest', 'Ernestina',\n    'Ernestine', 'Ernesto', 'Ernie', 'Ervin', 'Erwin', 'Eryn', 'Esmeralda',\n    'Esperanza', 'Esta', 'Esteban', 'Estefania', 'Estel', 'Estell', 'Estella',\n    'Estelle', 'Estevan', 'Esther', 'Estrella', 'Etha', 'Ethan', 'Ethel',\n    'Ethelyn', 'Ethyl', 'Ettie', 'Eudora', 'Eugene', 'Eugenia', 'Eula', 'Eulah',\n    'Eulalia', 'Euna', 'Eunice', 'Eusebio', 'Eva', 'Evalyn', 'Evan',\n    'Evangeline', 'Evans', 'Eve', 'Eveline', 'Evelyn', 'Everardo', 'Everett',\n    'Everette', 'Evert', 'Evie', 'Ewald', 'Ewell', 'Ezekiel', 'Ezequiel',\n    'Ezra', 'Fabian', 'Fabiola', 'Fae', 'Fannie', 'Fanny', 'Fatima', 'Faustino',\n    'Fausto', 'Favian', 'Fay', 'Faye', 'Federico', 'Felicia', 'Felicita',\n    'Felicity', 'Felipa', 'Felipe', 'Felix', 'Felton', 'Fermin', 'Fern',\n    'Fernando', 'Ferne', 'Fidel', 'Filiberto', 'Filomena', 'Finn', 'Fiona',\n    'Flavie', 'Flavio', 'Fleta', 'Fletcher', 'Flo', 'Florence', 'Florencio',\n    'Florian', 'Florida', 'Florine', 'Flossie', 'Floy', 'Floyd', 'Ford',\n    'Forest', 'Forrest', 'Foster', 'Frances', 'Francesca', 'Francesco',\n    'Francis', 'Francisca', 'Francisco', 'Franco', 'Frank', 'Frankie', 'Franz',\n    'Fred', 'Freda', 'Freddie', 'Freddy', 'Frederic', 'Frederick', 'Frederik',\n    'Frederique', 'Fredrick', 'Fredy', 'Freeda', 'Freeman', 'Freida', 'Frida',\n    'Frieda', 'Friedrich', 'Fritz', 'Furman', 'Gabe', 'Gabriel', 'Gabriella',\n    'Gabrielle', 'Gaetano', 'Gage', 'Gail', 'Gardner', 'Garett', 'Garfield',\n    'Garland', 'Garnet', 'Garnett', 'Garret', 'Garrett', 'Garrick', 'Garrison',\n    'Garry', 'Garth', 'Gaston', 'Gavin', 'Gay', 'Gayle', 'Gaylord', 'Gene',\n    'General', 'Genesis', 'Genevieve', 'Gennaro', 'Genoveva', 'Geo', 'Geoffrey',\n    'George', 'Georgette', 'Georgiana', 'Georgianna', 'Geovanni', 'Geovanny',\n    'Geovany', 'Gerald', 'Geraldine', 'Gerard', 'Gerardo', 'Gerda', 'Gerhard',\n    'Germaine', 'German', 'Gerry', 'Gerson', 'Gertrude', 'Gia', 'Gianni',\n    'Gideon', 'Gilbert', 'Gilberto', 'Gilda', 'Giles', 'Gillian', 'Gina',\n    'Gino', 'Giovani', 'Giovanna', 'Giovanni', 'Giovanny', 'Gisselle',\n    'Giuseppe', 'Gladyce', 'Gladys', 'Glen', 'Glenda', 'Glenna', 'Glennie',\n    'Gloria', 'Godfrey', 'Golda', 'Golden', 'Gonzalo', 'Gordon', 'Grace',\n    'Gracie', 'Graciela', 'Grady', 'Graham', 'Grant', 'Granville', 'Grayce',\n    'Grayson', 'Green', 'Greg', 'Gregg', 'Gregoria', 'Gregorio', 'Gregory',\n    'Greta', 'Gretchen', 'Greyson', 'Griffin', 'Grover', 'Guadalupe', 'Gudrun',\n    'Guido', 'Guillermo', 'Guiseppe', 'Gunnar', 'Gunner', 'Gus', 'Gussie',\n    'Gust', 'Gustave', 'Guy', 'Gwen', 'Gwendolyn', 'Hadley', 'Hailee', 'Hailey',\n    'Hailie', 'Hal', 'Haleigh', 'Haley', 'Halie', 'Halle', 'Hallie', 'Hank',\n    'Hanna', 'Hannah', 'Hans', 'Hardy', 'Harley', 'Harmon', 'Harmony', 'Harold',\n    'Harrison', 'Harry', 'Harvey', 'Haskell', 'Hassan', 'Hassie', 'Hattie',\n    'Haven', 'Hayden', 'Haylee', 'Hayley', 'Haylie', 'Hazel', 'Hazle', 'Heath',\n    'Heather', 'Heaven', 'Heber', 'Hector', 'Heidi', 'Helen', 'Helena',\n    'Helene', 'Helga', 'Hellen', 'Helmer', 'Heloise', 'Henderson', 'Henri',\n    'Henriette', 'Henry', 'Herbert', 'Herman', 'Hermann', 'Hermina', 'Herminia',\n    'Herminio', 'Hershel', 'Herta', 'Hertha', 'Hester', 'Hettie', 'Hilario',\n    'Hilbert', 'Hilda', 'Hildegard', 'Hillard', 'Hillary', 'Hilma', 'Hilton',\n    'Hipolito', 'Hiram', 'Hobart', 'Holden', 'Hollie', 'Hollis', 'Holly',\n    'Hope', 'Horace', 'Horacio', 'Hortense', 'Hosea', 'Houston', 'Howard',\n    'Howell', 'Hoyt', 'Hubert', 'Hudson', 'Hugh', 'Hulda', 'Humberto', 'Hunter',\n    'Hyman', 'Ian', 'Ibrahim', 'Icie', 'Ida', 'Idell', 'Idella', 'Ignacio',\n    'Ignatius', 'Ike', 'Ila', 'Ilene', 'Iliana', 'Ima', 'Imani', 'Imelda',\n    'Immanuel', 'Imogene', 'Ines', 'Irma', 'Irving', 'Irwin', 'Isaac', 'Isabel',\n    'Isabell', 'Isabella', 'Isabelle', 'Isac', 'Isadore', 'Isai', 'Isaiah',\n    'Isaias', 'Isidro', 'Ismael', 'Isobel', 'Isom', 'Israel', 'Issac', 'Itzel',\n    'Iva', 'Ivah', 'Ivory', 'Ivy', 'Izabella', 'Izaiah', 'Jabari', 'Jace',\n    'Jacey', 'Jacinthe', 'Jacinto', 'Jack', 'Jackeline', 'Jackie', 'Jacklyn',\n    'Jackson', 'Jacky', 'Jaclyn', 'Jacquelyn', 'Jacques', 'Jacynthe', 'Jada',\n    'Jade', 'Jaden', 'Jadon', 'Jadyn', 'Jaeden', 'Jaida', 'Jaiden', 'Jailyn',\n    'Jaime', 'Jairo', 'Jakayla', 'Jake', 'Jakob', 'Jaleel', 'Jalen', 'Jalon',\n    'Jalyn', 'Jamaal', 'Jamal', 'Jamar', 'Jamarcus', 'Jamel', 'Jameson',\n    'Jamey', 'Jamie', 'Jamil', 'Jamir', 'Jamison', 'Jammie', 'Jan', 'Jana',\n    'Janae', 'Jane', 'Janelle', 'Janessa', 'Janet', 'Janice', 'Janick', 'Janie',\n    'Janis', 'Janiya', 'Jannie', 'Jany', 'Jaquan', 'Jaquelin', 'Jaqueline',\n    'Jared', 'Jaren', 'Jarod', 'Jaron', 'Jarred', 'Jarrell', 'Jarret',\n    'Jarrett', 'Jarrod', 'Jarvis', 'Jasen', 'Jasmin', 'Jason', 'Jasper',\n    'Jaunita', 'Javier', 'Javon', 'Javonte', 'Jay', 'Jayce', 'Jaycee', 'Jayda',\n    'Jayde', 'Jayden', 'Jaydon', 'Jaylan', 'Jaylen', 'Jaylin', 'Jaylon',\n    'Jayme', 'Jayne', 'Jayson', 'Jazlyn', 'Jazmin', 'Jazmyn', 'Jazmyne', 'Jean',\n    'Jeanette', 'Jeanie', 'Jeanne', 'Jed', 'Jedediah', 'Jedidiah', 'Jeff',\n    'Jefferey', 'Jeffery', 'Jeffrey', 'Jeffry', 'Jena', 'Jenifer', 'Jennie',\n    'Jennifer', 'Jennings', 'Jennyfer', 'Jensen', 'Jerad', 'Jerald', 'Jeramie',\n    'Jeramy', 'Jerel', 'Jeremie', 'Jeremy', 'Jermain', 'Jermaine', 'Jermey',\n    'Jerod', 'Jerome', 'Jeromy', 'Jerrell', 'Jerrod', 'Jerrold', 'Jerry',\n    'Jess', 'Jesse', 'Jessica', 'Jessie', 'Jessika', 'Jessy', 'Jessyca',\n    'Jesus', 'Jett', 'Jettie', 'Jevon', 'Jewel', 'Jewell', 'Jillian', 'Jimmie',\n    'Jimmy', 'Jo', 'Joan', 'Joana', 'Joanie', 'Joanne', 'Joannie', 'Joanny',\n    'Joany', 'Joaquin', 'Jocelyn', 'Jodie', 'Jody', 'Joe', 'Joel', 'Joelle',\n    'Joesph', 'Joey', 'Johan', 'Johann', 'Johanna', 'Johathan', 'John',\n    'Johnathan', 'Johnathon', 'Johnnie', 'Johnny', 'Johnpaul', 'Johnson',\n    'Jolie', 'Jon', 'Jonas', 'Jonatan', 'Jonathan', 'Jonathon', 'Jordan',\n    'Jordane', 'Jordi', 'Jordon', 'Jordy', 'Jordyn', 'Jorge', 'Jose', 'Josefa',\n    'Josefina', 'Joseph', 'Josephine', 'Josh', 'Joshua', 'Joshuah', 'Josiah',\n    'Josiane', 'Josianne', 'Josie', 'Josue', 'Jovan', 'Jovani', 'Jovanny',\n    'Jovany', 'Joy', 'Joyce', 'Juana', 'Juanita', 'Judah', 'Judd', 'Jude',\n    'Judge', 'Judson', 'Judy', 'Jules', 'Julia', 'Julian', 'Juliana',\n    'Julianne', 'Julie', 'Julien', 'Juliet', 'Julio', 'Julius', 'June',\n    'Junior', 'Junius', 'Justen', 'Justice', 'Justina', 'Justine', 'Juston',\n    'Justus', 'Justyn', 'Juvenal', 'Juwan', 'Kacey', 'Kaci', 'Kacie', 'Kade',\n    'Kaden', 'Kadin', 'Kaela', 'Kaelyn', 'Kaia', 'Kailee', 'Kailey', 'Kailyn',\n    'Kaitlin', 'Kaitlyn', 'Kale', 'Kaleb', 'Kaleigh', 'Kaley', 'Kali', 'Kallie',\n    'Kameron', 'Kamille', 'Kamren', 'Kamron', 'Kamryn', 'Kane', 'Kara',\n    'Kareem', 'Karelle', 'Karen', 'Kari', 'Kariane', 'Karianne', 'Karina',\n    'Karine', 'Karl', 'Karlee', 'Karley', 'Karli', 'Karlie', 'Karolann',\n    'Karson', 'Kasandra', 'Kasey', 'Kassandra', 'Katarina', 'Katelin',\n    'Katelyn', 'Katelynn', 'Katharina', 'Katherine', 'Katheryn', 'Kathleen',\n    'Kathlyn', 'Kathryn', 'Kathryne', 'Katlyn', 'Katlynn', 'Katrina', 'Katrine',\n    'Kattie', 'Kavon', 'Kay', 'Kaya', 'Kaycee', 'Kayden', 'Kayla', 'Kaylah',\n    'Kaylee', 'Kayleigh', 'Kayley', 'Kayli', 'Kaylie', 'Kaylin', 'Keagan',\n    'Keanu', 'Keara', 'Keaton', 'Keegan', 'Keeley', 'Keely', 'Keenan', 'Keira',\n    'Keith', 'Kellen', 'Kelley', 'Kelli', 'Kellie', 'Kelly', 'Kelsi', 'Kelsie',\n    'Kelton', 'Kelvin', 'Ken', 'Kendall', 'Kendra', 'Kendrick', 'Kenna',\n    'Kennedi', 'Kennedy', 'Kenneth', 'Kennith', 'Kenny', 'Kenton', 'Kenya',\n    'Kenyatta', 'Kenyon', 'Keon', 'Keshaun', 'Keshawn', 'Keven', 'Kevin',\n    'Kevon', 'Keyon', 'Keyshawn', 'Khalid', 'Khalil', 'Kian', 'Kiana', 'Kianna',\n    'Kiara', 'Kiarra', 'Kiel', 'Kiera', 'Kieran', 'Kiley', 'Kim', 'Kimberly',\n    'King', 'Kip', 'Kira', 'Kirk', 'Kirsten', 'Kirstin', 'Kitty', 'Kobe',\n    'Koby', 'Kody', 'Kolby', 'Kole', 'Korbin', 'Korey', 'Kory', 'Kraig', 'Kris',\n    'Krista', 'Kristian', 'Kristin', 'Kristina', 'Kristofer', 'Kristoffer',\n    'Kristopher', 'Kristy', 'Krystal', 'Krystel', 'Krystina', 'Kurt', 'Kurtis',\n    'Kyla', 'Kyle', 'Kylee', 'Kyleigh', 'Kyler', 'Kylie', 'Kyra', 'Lacey',\n    'Lacy', 'Ladarius', 'Lafayette', 'Laila', 'Laisha', 'Lamar', 'Lambert',\n    'Lamont', 'Lance', 'Landen', 'Lane', 'Laney', 'Larissa', 'Laron', 'Larry',\n    'Larue', 'Laura', 'Laurel', 'Lauren', 'Laurence', 'Lauretta', 'Lauriane',\n    'Laurianne', 'Laurie', 'Laurine', 'Laury', 'Lauryn', 'Lavada', 'Lavern',\n    'Laverna', 'Laverne', 'Lavina', 'Lavinia', 'Lavon', 'Lavonne', 'Lawrence',\n    'Lawson', 'Layla', 'Layne', 'Lazaro', 'Lea', 'Leann', 'Leanna', 'Leanne',\n    'Leatha', 'Leda', 'Lee', 'Leif', 'Leila', 'Leilani', 'Lela', 'Lelah',\n    'Leland', 'Lelia', 'Lempi', 'Lemuel', 'Lenna', 'Lennie', 'Lenny', 'Lenora',\n    'Lenore', 'Leo', 'Leola', 'Leon', 'Leonard', 'Leonardo', 'Leone', 'Leonel',\n    'Leonie', 'Leonor', 'Leonora', 'Leopold', 'Leopoldo', 'Leora', 'Lera',\n    'Lesley', 'Leslie', 'Lesly', 'Lessie', 'Lester', 'Leta', 'Letha', 'Letitia',\n    'Levi', 'Lew', 'Lewis', 'Lexi', 'Lexie', 'Lexus', 'Lia', 'Liam', 'Liana',\n    'Libbie', 'Libby', 'Lila', 'Lilian', 'Liliana', 'Liliane', 'Lilla',\n    'Lillian', 'Lilliana', 'Lillie', 'Lilly', 'Lily', 'Lilyan', 'Lina',\n    'Lincoln', 'Linda', 'Lindsay', 'Lindsey', 'Linnea', 'Linnie', 'Linwood',\n    'Lionel', 'Lisa', 'Lisandro', 'Lisette', 'Litzy', 'Liza', 'Lizeth',\n    'Lizzie', 'Llewellyn', 'Lloyd', 'Logan', 'Lois', 'Lola', 'Lolita', 'Loma',\n    'Lon', 'London', 'Lonie', 'Lonnie', 'Lonny', 'Lonzo', 'Lora', 'Loraine',\n    'Loren', 'Lorena', 'Lorenz', 'Lorenza', 'Lorenzo', 'Lori', 'Lorine',\n    'Lorna', 'Lottie', 'Lou', 'Louie', 'Louisa', 'Lourdes', 'Louvenia',\n    'Lowell', 'Loy', 'Loyal', 'Loyce', 'Lucas', 'Luciano', 'Lucie', 'Lucienne',\n    'Lucile', 'Lucinda', 'Lucio', 'Lucious', 'Lucius', 'Lucy', 'Ludie',\n    'Ludwig', 'Lue', 'Luella', 'Luigi', 'Luis', 'Luisa', 'Lukas', 'Lula',\n    'Lulu', 'Luna', 'Lupe', 'Lura', 'Lurline', 'Luther', 'Luz', 'Lyda', 'Lydia',\n    'Lyla', 'Lynn', 'Lyric', 'Lysanne', 'Mabel', 'Mabelle', 'Mable', 'Mac',\n    'Macey', 'Maci', 'Macie', 'Mack', 'Mackenzie', 'Macy', 'Madaline',\n    'Madalyn', 'Maddison', 'Madeline', 'Madelyn', 'Madelynn', 'Madge', 'Madie',\n    'Madilyn', 'Madisen', 'Madison', 'Madisyn', 'Madonna', 'Madyson', 'Mae',\n    'Maegan', 'Maeve', 'Mafalda', 'Magali', 'Magdalen', 'Magdalena', 'Maggie',\n    'Magnolia', 'Magnus', 'Maia', 'Maida', 'Maiya', 'Major', 'Makayla',\n    'Makenna', 'Makenzie', 'Malachi', 'Malcolm', 'Malika', 'Malinda', 'Mallie',\n    'Mallory', 'Malvina', 'Mandy', 'Manley', 'Manuel', 'Manuela', 'Mara',\n    'Marc', 'Marcel', 'Marcelina', 'Marcelino', 'Marcella', 'Marcelle',\n    'Marcellus', 'Marcelo', 'Marcia', 'Marco', 'Marcos', 'Marcus', 'Margaret',\n    'Margarete', 'Margarett', 'Margaretta', 'Margarette', 'Margarita', 'Marge',\n    'Margie', 'Margot', 'Margret', 'Marguerite', 'Maria', 'Mariah', 'Mariam',\n    'Marian', 'Mariana', 'Mariane', 'Marianna', 'Marianne', 'Mariano',\n    'Maribel', 'Marie', 'Mariela', 'Marielle', 'Marietta', 'Marilie', 'Marilou',\n    'Marilyne', 'Marina', 'Mario', 'Marion', 'Marisa', 'Marisol', 'Maritza',\n    'Marjolaine', 'Marjorie', 'Marjory', 'Mark', 'Markus', 'Marlee', 'Marlen',\n    'Marlene', 'Marley', 'Marlin', 'Marlon', 'Marques', 'Marquis', 'Marquise',\n    'Marshall', 'Marta', 'Martin', 'Martina', 'Martine', 'Marty', 'Marvin',\n    'Mary', 'Maryam', 'Maryjane', 'Maryse', 'Mason', 'Mateo', 'Mathew',\n    'Mathias', 'Mathilde', 'Matilda', 'Matilde', 'Matt', 'Matteo', 'Mattie',\n    'Maud', 'Maude', 'Maudie', 'Maureen', 'Maurice', 'Mauricio', 'Maurine',\n    'Maverick', 'Mavis', 'Max', 'Maxie', 'Maxime', 'Maximilian', 'Maximillia',\n    'Maximillian', 'Maximo', 'Maximus', 'Maxine', 'Maxwell', 'May', 'Maya',\n    'Maybell', 'Maybelle', 'Maye', 'Maymie', 'Maynard', 'Mayra', 'Mazie',\n    'Mckayla', 'Mckenna', 'Mckenzie', 'Meagan', 'Meaghan', 'Meda', 'Megane',\n    'Meggie', 'Meghan', 'Mekhi', 'Melany', 'Melba', 'Melisa', 'Melissa',\n    'Mellie', 'Melody', 'Melvin', 'Melvina', 'Melyna', 'Melyssa', 'Mercedes',\n    'Meredith', 'Merl', 'Merle', 'Merlin', 'Merritt', 'Mertie', 'Mervin',\n    'Meta', 'Mia', 'Micaela', 'Micah', 'Michael', 'Michaela', 'Michale',\n    'Micheal', 'Michel', 'Michele', 'Michelle', 'Miguel', 'Mikayla', 'Mike',\n    'Mikel', 'Milan', 'Miles', 'Milford', 'Miller', 'Millie', 'Milo', 'Milton',\n    'Mina', 'Minerva', 'Minnie', 'Miracle', 'Mireille', 'Mireya', 'Misael',\n    'Missouri', 'Misty', 'Mitchel', 'Mitchell', 'Mittie', 'Modesta', 'Modesto',\n    'Mohamed', 'Mohammad', 'Mohammed', 'Moises', 'Mollie', 'Molly', 'Mona',\n    'Monica', 'Monique', 'Monroe', 'Monserrat', 'Monserrate', 'Montana',\n    'Monte', 'Monty', 'Morgan', 'Moriah', 'Morris', 'Mortimer', 'Morton',\n    'Mose', 'Moses', 'Moshe', 'Mossie', 'Mozell', 'Mozelle', 'Muhammad',\n    'Muriel', 'Murl', 'Murphy', 'Murray', 'Mustafa', 'Mya', 'Myah', 'Mylene',\n    'Myles', 'Myra', 'Myriam', 'Myrl', 'Myrna', 'Myron', 'Myrtice', 'Myrtie',\n    'Myrtis', 'Myrtle', 'Nadia', 'Nakia', 'Name', 'Nannie', 'Naomi', 'Naomie',\n    'Napoleon', 'Narciso', 'Nash', 'Nasir', 'Nat', 'Natalia', 'Natalie',\n    'Natasha', 'Nathan', 'Nathanael', 'Nathanial', 'Nathaniel', 'Nathen',\n    'Nayeli', 'Neal', 'Ned', 'Nedra', 'Neha', 'Neil', 'Nelda', 'Nella', 'Nelle',\n    'Nellie', 'Nels', 'Nelson', 'Neoma', 'Nestor', 'Nettie', 'Neva', 'Newell',\n    'Newton', 'Nia', 'Nicholas', 'Nicholaus', 'Nichole', 'Nick', 'Nicklaus',\n    'Nickolas', 'Nico', 'Nicola', 'Nicolas', 'Nicole', 'Nicolette', 'Nigel',\n    'Nikita', 'Nikki', 'Nikko', 'Niko', 'Nikolas', 'Nils', 'Nina', 'Noah',\n    'Noble', 'Noe', 'Noel', 'Noelia', 'Noemi', 'Noemie', 'Noemy', 'Nola',\n    'Nolan', 'Nona', 'Nora', 'Norbert', 'Norberto', 'Norene', 'Norma', 'Norris',\n    'Norval', 'Norwood', 'Nova', 'Novella', 'Nya', 'Nyah', 'Nyasia', 'Obie',\n    'Oceane', 'Ocie', 'Octavia', 'Oda', 'Odell', 'Odessa', 'Odie', 'Ofelia',\n    'Okey', 'Ola', 'Olaf', 'Ole', 'Olen', 'Oleta', 'Olga', 'Olin', 'Oliver',\n    'Ollie', 'Oma', 'Omari', 'Omer', 'Ona', 'Onie', 'Opal', 'Ophelia', 'Ora',\n    'Oral', 'Oran', 'Oren', 'Orie', 'Orin', 'Orion', 'Orland', 'Orlando',\n    'Orlo', 'Orpha', 'Orrin', 'Orval', 'Orville', 'Osbaldo', 'Osborne', 'Oscar',\n    'Osvaldo', 'Oswald', 'Oswaldo', 'Otha', 'Otho', 'Otilia', 'Otis', 'Ottilie',\n    'Ottis', 'Otto', 'Ova', 'Owen', 'Ozella', 'Pablo', 'Paige', 'Palma',\n    'Pamela', 'Pansy', 'Paolo', 'Paris', 'Parker', 'Pascale', 'Pasquale', 'Pat',\n    'Patience', 'Patricia', 'Patrick', 'Patsy', 'Pattie', 'Paul', 'Paula',\n    'Pauline', 'Paxton', 'Payton', 'Pearl', 'Pearlie', 'Pearline', 'Pedro',\n    'Peggie', 'Penelope', 'Percival', 'Percy', 'Perry', 'Pete', 'Peter',\n    'Petra', 'Peyton', 'Philip', 'Phoebe', 'Phyllis', 'Pierce', 'Pierre',\n    'Pietro', 'Pink', 'Pinkie', 'Piper', 'Polly', 'Porter', 'Precious',\n    'Presley', 'Preston', 'Price', 'Prince', 'Princess', 'Priscilla',\n    'Providenci', 'Prudence', 'Queen', 'Queenie', 'Quentin', 'Quincy', 'Quinn',\n    'Quinten', 'Quinton', 'Rachael', 'Rachel', 'Rachelle', 'Rae', 'Raegan',\n    'Rafael', 'Rafaela', 'Raheem', 'Rahsaan', 'Rahul', 'Raina', 'Raleigh',\n    'Ralph', 'Ramiro', 'Ramon', 'Ramona', 'Randal', 'Randall', 'Randi', 'Randy',\n    'Ransom', 'Raoul', 'Raphael', 'Raphaelle', 'Raquel', 'Rashad', 'Rashawn',\n    'Rasheed', 'Raul', 'Raven', 'Ray', 'Raymond', 'Raymundo', 'Reagan',\n    'Reanna', 'Reba', 'Rebeca', 'Rebecca', 'Rebeka', 'Rebekah', 'Reece', 'Reed',\n    'Reese', 'Regan', 'Reggie', 'Reginald', 'Reid', 'Reilly', 'Reina',\n    'Reinhold', 'Remington', 'Rene', 'Renee', 'Ressie', 'Reta', 'Retha',\n    'Retta', 'Reuben', 'Reva', 'Rex', 'Rey', 'Reyes', 'Reymundo', 'Reyna',\n    'Reynold', 'Rhea', 'Rhett', 'Rhianna', 'Rhiannon', 'Rhoda', 'Ricardo',\n    'Richard', 'Richie', 'Richmond', 'Rick', 'Rickey', 'Rickie', 'Ricky',\n    'Rico', 'Rigoberto', 'Riley', 'Rita', 'River', 'Robb', 'Robbie', 'Robert',\n    'Roberta', 'Roberto', 'Robin', 'Robyn', 'Rocio', 'Rocky', 'Rod', 'Roderick',\n    'Rodger', 'Rodolfo', 'Rodrick', 'Rodrigo', 'Roel', 'Rogelio', 'Roger',\n    'Rogers', 'Rolando', 'Rollin', 'Roma', 'Romaine', 'Roman', 'Ron', 'Ronaldo',\n    'Ronny', 'Roosevelt', 'Rory', 'Rosa', 'Rosalee', 'Rosalia', 'Rosalind',\n    'Rosalinda', 'Rosalyn', 'Rosamond', 'Rosanna', 'Rosario', 'Roscoe', 'Rose',\n    'Rosella', 'Roselyn', 'Rosemarie', 'Rosemary', 'Rosendo', 'Rosetta',\n    'Rosie', 'Rosina', 'Roslyn', 'Ross', 'Rossie', 'Rowan', 'Rowena', 'Rowland',\n    'Roxane', 'Roxanne', 'Roy', 'Royal', 'Royce', 'Rozella', 'Ruben', 'Rubie',\n    'Ruby', 'Rubye', 'Rudolph', 'Rudy', 'Rupert', 'Russ', 'Russel', 'Russell',\n    'Rusty', 'Ruth', 'Ruthe', 'Ruthie', 'Ryan', 'Ryann', 'Ryder', 'Rylan',\n    'Rylee', 'Ryleigh', 'Ryley', 'Sabina', 'Sabrina', 'Sabryna', 'Sadie',\n    'Sadye', 'Sage', 'Saige', 'Sallie', 'Sally', 'Salma', 'Salvador',\n    'Salvatore', 'Sam', 'Samanta', 'Samantha', 'Samara', 'Samir', 'Sammie',\n    'Sammy', 'Samson', 'Sandra', 'Sandrine', 'Sandy', 'Sanford', 'Santa',\n    'Santiago', 'Santina', 'Santino', 'Santos', 'Sarah', 'Sarai', 'Sarina',\n    'Sasha', 'Saul', 'Savanah', 'Savanna', 'Savannah', 'Savion', 'Scarlett',\n    'Schuyler', 'Scot', 'Scottie', 'Scotty', 'Seamus', 'Sean', 'Sebastian',\n    'Sedrick', 'Selena', 'Selina', 'Selmer', 'Serena', 'Serenity', 'Seth',\n    'Shad', 'Shaina', 'Shakira', 'Shana', 'Shane', 'Shanel', 'Shanelle',\n    'Shania', 'Shanie', 'Shaniya', 'Shanna', 'Shannon', 'Shanny', 'Shanon',\n    'Shany', 'Sharon', 'Shaun', 'Shawn', 'Shawna', 'Shaylee', 'Shayna',\n    'Shayne', 'Shea', 'Sheila', 'Sheldon', 'Shemar', 'Sheridan', 'Sherman',\n    'Sherwood', 'Shirley', 'Shyann', 'Shyanne', 'Sibyl', 'Sid', 'Sidney',\n    'Sienna', 'Sierra', 'Sigmund', 'Sigrid', 'Sigurd', 'Silas', 'Sim', 'Simeon',\n    'Simone', 'Sincere', 'Sister', 'Skye', 'Skyla', 'Skylar', 'Sofia',\n    'Soledad', 'Solon', 'Sonia', 'Sonny', 'Sonya', 'Sophia', 'Sophie',\n    'Spencer', 'Stacey', 'Stacy', 'Stan', 'Stanford', 'Stanley', 'Stanton',\n    'Stefan', 'Stefanie', 'Stella', 'Stephan', 'Stephania', 'Stephanie',\n    'Stephany', 'Stephen', 'Stephon', 'Sterling', 'Steve', 'Stevie', 'Stewart',\n    'Stone', 'Stuart', 'Summer', 'Sunny', 'Susan', 'Susana', 'Susanna', 'Susie',\n    'Suzanne', 'Sven', 'Syble', 'Sydnee', 'Sydney', 'Sydni', 'Sydnie', 'Sylvan',\n    'Sylvester', 'Sylvia', 'Tabitha', 'Tad', 'Talia', 'Talon', 'Tamara',\n    'Tamia', 'Tania', 'Tanner', 'Tanya', 'Tara', 'Taryn', 'Tate', 'Tatum',\n    'Tatyana', 'Taurean', 'Tavares', 'Taya', 'Taylor', 'Teagan', 'Ted', 'Telly',\n    'Terence', 'Teresa', 'Terrance', 'Terrell', 'Terrence', 'Terrill', 'Terry',\n    'Tess', 'Tessie', 'Tevin', 'Thad', 'Thaddeus', 'Thalia', 'Thea', 'Thelma',\n    'Theo', 'Theodora', 'Theodore', 'Theresa', 'Therese', 'Theresia', 'Theron',\n    'Thomas', 'Thora', 'Thurman', 'Tia', 'Tiana', 'Tianna', 'Tiara', 'Tierra',\n    'Tiffany', 'Tillman', 'Timmothy', 'Timmy', 'Timothy', 'Tina', 'Tito',\n    'Titus', 'Tobin', 'Toby', 'Tod', 'Tom', 'Tomas', 'Tomasa', 'Tommie',\n    'Toney', 'Toni', 'Tony', 'Torey', 'Torrance', 'Torrey', 'Toy', 'Trace',\n    'Tracey', 'Tracy', 'Travis', 'Travon', 'Tre', 'Tremaine', 'Tremayne',\n    'Trent', 'Trenton', 'Tressa', 'Tressie', 'Treva', 'Trever', 'Trevion',\n    'Trevor', 'Trey', 'Trinity', 'Trisha', 'Tristian', 'Tristin', 'Triston',\n    'Troy', 'Trudie', 'Trycia', 'Trystan', 'Turner', 'Twila', 'Tyler', 'Tyra',\n    'Tyree', 'Tyreek', 'Tyrel', 'Tyrell', 'Tyrese', 'Tyrique', 'Tyshawn',\n    'Tyson', 'Ubaldo', 'Ulices', 'Ulises', 'Una', 'Unique', 'Urban', 'Uriah',\n    'Uriel', 'Ursula', 'Vada', 'Valentin', 'Valentina', 'Valentine', 'Valerie',\n    'Vallie', 'Van', 'Vance', 'Vanessa', 'Vaughn', 'Veda', 'Velda', 'Vella',\n    'Velma', 'Velva', 'Vena', 'Verda', 'Verdie', 'Vergie', 'Verla', 'Verlie',\n    'Vern', 'Verna', 'Verner', 'Vernice', 'Vernie', 'Vernon', 'Verona',\n    'Veronica', 'Vesta', 'Vicenta', 'Vicente', 'Vickie', 'Vicky', 'Victor',\n    'Victoria', 'Vida', 'Vidal', 'Vilma', 'Vince', 'Vincent', 'Vincenza',\n    'Vincenzo', 'Vinnie', 'Viola', 'Violet', 'Violette', 'Virgie', 'Virgil',\n    'Virginia', 'Virginie', 'Vita', 'Vito', 'Viva', 'Vivian', 'Viviane',\n    'Vivianne', 'Vivien', 'Vivienne', 'Vladimir', 'Wade', 'Waino', 'Waldo',\n    'Walker', 'Wallace', 'Walter', 'Walton', 'Wanda', 'Ward', 'Warren',\n    'Watson', 'Wava', 'Waylon', 'Wayne', 'Webster', 'Weldon', 'Wellington',\n    'Wendell', 'Wendy', 'Werner', 'Westley', 'Weston', 'Whitney', 'Wilber',\n    'Wilbert', 'Wilburn', 'Wiley', 'Wilford', 'Wilfred', 'Wilfredo', 'Wilfrid',\n    'Wilhelm', 'Wilhelmine', 'Will', 'Willa', 'Willard', 'William', 'Willie',\n    'Willis', 'Willow', 'Willy', 'Wilma', 'Wilmer', 'Wilson', 'Wilton',\n    'Winfield', 'Winifred', 'Winnifred', 'Winona', 'Winston', 'Woodrow',\n    'Wyatt', 'Wyman', 'Xander', 'Xavier', 'Xzavier', 'Yadira', 'Yasmeen',\n    'Yasmin', 'Yasmine', 'Yazmin', 'Yesenia', 'Yessenia', 'Yolanda', 'Yoshiko',\n    'Yvette', 'Yvonne', 'Zachariah', 'Zachary', 'Zachery', 'Zack', 'Zackary',\n    'Zackery', 'Zakary', 'Zander', 'Zane', 'Zaria', 'Zechariah', 'Zelda',\n    'Zella', 'Zelma', 'Zena', 'Zetta', 'Zion', 'Zita', 'Zoe', 'Zoey', 'Zoie',\n    'Zoila', 'Zola', 'Zora', 'Zula'\n];\n\n/**\n * Generate random username.\n * @returns {string} random username\n */\nfunction generateUsername() {\n    const name = RandomUtil.randomElement(names);\n    const suffix = RandomUtil.randomAlphanumStr(3);\n\n    return `${name}-${suffix}`;\n}\n\nmodule.exports = {\n    generateUsername\n};\n","'use strict';\n\n\nconst internals = {\n    suspectRx: /\"(?:_|\\\\u005[Ff])(?:_|\\\\u005[Ff])(?:p|\\\\u0070)(?:r|\\\\u0072)(?:o|\\\\u006[Ff])(?:t|\\\\u0074)(?:o|\\\\u006[Ff])(?:_|\\\\u005[Ff])(?:_|\\\\u005[Ff])\"\\s*\\:/\n};\n\n\nexports.parse = function (text, ...args) {\n\n    // Normalize arguments\n\n    const firstOptions = typeof args[0] === 'object' && args[0];\n    const reviver = args.length > 1 || !firstOptions ? args[0] : undefined;\n    const options = (args.length > 1 && args[1]) || firstOptions || {};\n\n    // Parse normally, allowing exceptions\n\n    const obj = JSON.parse(text, reviver);\n\n    // options.protoAction: 'error' (default) / 'remove' / 'ignore'\n\n    if (options.protoAction === 'ignore') {\n        return obj;\n    }\n\n    // Ignore null and non-objects\n\n    if (!obj ||\n        typeof obj !== 'object') {\n\n        return obj;\n    }\n\n    // Check original string for potential exploit\n\n    if (!text.match(internals.suspectRx)) {\n        return obj;\n    }\n\n    // Scan result for proto keys\n\n    exports.scan(obj, options);\n\n    return obj;\n};\n\n\nexports.scan = function (obj, options = {}) {\n\n    let next = [obj];\n\n    while (next.length) {\n        const nodes = next;\n        next = [];\n\n        for (const node of nodes) {\n            if (Object.prototype.hasOwnProperty.call(node, '__proto__')) {      // Avoid calling node.hasOwnProperty directly\n                if (options.protoAction !== 'remove') {\n                    throw new SyntaxError('Object contains forbidden prototype property');\n                }\n\n                delete node.__proto__;\n            }\n\n            for (const key in node) {\n                const value = node[key];\n                if (value &&\n                    typeof value === 'object') {\n\n                    next.push(node[key]);\n                }\n            }\n        }\n    }\n};\n\n\nexports.safeParse = function (text, reviver) {\n\n    try {\n        return exports.parse(text, reviver);\n    }\n    catch (ignoreError) {\n        return null;\n    }\n};\n","/* Copyright @ 2016-present 8x8, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Logger = require('./Logger.js');\n\n/**\n * Creates new <tt>LogCollector</tt>. Class implements <tt>LoggerTransport</tt>\n * and thus can be added as global transport in order to capture all the logs.\n *\n * It captures subsequent log lines created whenever <tt>Logger</tt> logs\n * a message and stores them in a queue in order to batch log entries. There are\n * time and size limit constraints which determine how often batch entries are\n * stored. Whenever one of these limits is exceeded the <tt>LogCollector</tt>\n * will use the <tt>logStorage</tt> object given as an argument to save\n * the batch log entry.\n *\n * @param {Object} logStorage an object which allows to store the logs collected\n * @param {function(string|object[])} logStorage.storeLogs a method called when\n * this <tt>LogCollector</tt> requests log entry storage. The method's argument\n * is an array which can contain <tt>string</tt>s and <tt>object</tt>s. If given\n * item is an object it means that it's an aggregated message. That is a message\n * which is the same as the previous one and it's representation has\n * the following format:\n * {\n *   {string} text: 'the text of some duplicated message'\n *   {number} count: 3 // how many times the message appeared in a row\n * }\n * If a message \"B\" after an aggregated message \"A\" is different, then it breaks\n * the sequence of \"A\". Which means that even if the next message \"C\" is\n * the same as \"A\" it will start a new aggregated message \"C\".\n * @param {function()} logStorage.isReady a method which should return\n * a <tt>boolean</tt> to tell the collector that it's ready to store. During the\n * time storage is not ready log batches will be cached and stored on the next\n * occasion (flush or interval timeout).\n *\n * @param {Object} options the <tt>LogCollector</tt> configuration options.\n * @param {number} options.maxEntryLength the size limit for a single log entry\n * to be stored. The <tt>LogCollector</tt> will push the entry as soon as it\n * reaches or exceeds this limit given that <tt>logStorage.isReady</tt>\n * returns <tt>true</tt>. Otherwise the log entry will be cached until the log\n * storage becomes ready. Note that the \"is ready\" condition is checked every\n * <tt>options.storeInterval</tt> milliseconds.\n * @param {number} options.storeInterval how often the logs should be stored in\n * case <tt>maxEntryLength</tt> was not exceeded.\n * @param {boolean} options.stringifyObjects indicates whether or not object\n * arguments should be \"stringified\" with <tt>JSON.stringify</tt> when a log\n * message is composed. Note that objects logged on the error log level are\n * always stringified.\n *\n * @constructor\n */\nfunction LogCollector(logStorage, options) {\n    this.logStorage = logStorage;\n    this.stringifyObjects = options && options.stringifyObjects ? options.stringifyObjects : false;\n    this.storeInterval = options && options.storeInterval ? options.storeInterval: 30000;\n    this.maxEntryLength = options && options.maxEntryLength ? options.maxEntryLength : 10000;\n    // Bind the log method for each level to the corresponding method name\n    // in order to implement \"global log transport\" object.\n    Object.keys(Logger.levels).forEach(\n    function (logLevel) {\n        var methodName = Logger.levels[logLevel];\n        this[methodName] = function () {\n            this._log.apply(this, arguments);\n        }.bind(this, logLevel);\n    }.bind(this));\n    /**\n     * The ID of store logs interval if one is currently scheduled or\n     * <tt>null</tt> otherwise.\n     * @type {number|null}\n     */\n    this.storeLogsIntervalID = null;\n    /**\n     * The log messages that are to be batched into log entry when\n     * {@link LogCollector._flush} method is called.\n     * @type {string[]}\n     */\n    this.queue = [];\n    /**\n     * The total length of all messages currently stored in the {@link queue}.\n     * @type {number}\n     */\n    this.totalLen = 0;\n    /**\n     * An array used to temporarily store log batches, before the storage gets\n     * ready.\n     * @type {string[]}\n     */\n    this.outputCache = [];\n}\n\n/**\n * Method called inside of {@link formatLogMessage} in order to covert an\n * <tt>Object</tt> argument to string. The conversion will happen when either\n * 'stringifyObjects' option is enabled or on the {@link Logger.levels.ERROR}\n * log level. The default implementation uses <tt>JSON.stringify</tt> and\n * returns \"[object with circular refs?]\" instead of an object if it fails.\n *\n * @param {object} someObject the <tt>object</tt> to be stringified.\n *\n * @return {string} the result of <tt>JSON.stringify</tt> or\n * \"[object with circular refs?]\" if any error occurs during \"stringification\".\n *\n * @protected\n */\nLogCollector.prototype.stringify = function (someObject) {\n    try {\n        return JSON.stringify(someObject);\n    } catch (error) {\n        return '[object with circular refs?]';\n    }\n};\n\n/**\n * Formats log entry for the given logging level and arguments passed to the\n * <tt>Logger</tt>'s log method. The first argument is log level and the next\n * arguments have to be captured using JS built-in 'arguments' variable.\n *\n * @param {Logger.levels} logLevel provides the logging level of the message to\n * be logged.\n * @param {Date} timestamp - The {@code Date} when a message has been logged.\n *\n * @return {string|null} a non-empty string representation of the log entry\n * crafted from the log arguments. If the return value is <tt>null</tt> then\n * the message wil be discarded by this <tt>LogCollector</tt>.\n *\n * @protected\n */\nLogCollector.prototype.formatLogMessage = function (\nlogLevel /* timestamp, arg2, arg3, arg4... */) {\n    var msg = '';\n    for (var i = 1, len = arguments.length; i < len; i++) {\n        var arg = arguments[i];\n        // objects logged on error level are always converted to JSON\n        if ((this.stringifyObjects || logLevel === Logger.levels.ERROR) &&\n            typeof arg === 'object') {\n            arg = this.stringify(arg);\n        }\n        msg += arg;\n        if (i !== len - 1) {\n            msg += ' ';\n        }\n    }\n    return msg.length ? msg : null;\n};\n\n/**\n * The log method bound to each of the logging levels in order to implement\n * \"global log transport\" object.\n *\n * @private\n */\nLogCollector.prototype._log = function() {\n\n    // var logLevel = arguments[0]; first argument is the log level\n    var timestamp = arguments[1];\n    var msg = this.formatLogMessage.apply(this, arguments);\n    if (msg) {\n        // The same as the previous message aggregation logic\n        var prevMessage = this.queue[this.queue.length - 1];\n        var prevMessageText = prevMessage && prevMessage.text;\n        if (prevMessageText === msg) {\n            prevMessage.count += 1;\n        } else {\n            this.queue.push({\n                text: msg,\n                timestamp: timestamp,\n                count: 1\n            });\n            this.totalLen += msg.length;\n        }\n    }\n\n    if (this.totalLen >= this.maxEntryLength) {\n        this._flush(true /* force */, true /* reschedule */);\n    }\n};\n\n/**\n * Starts periodical \"store logs\" task which will be triggered at the interval\n * specified in the constructor options.\n */\nLogCollector.prototype.start = function () {\n    this._reschedulePublishInterval();\n};\n\n/**\n * Reschedules the periodical \"store logs\" task which will store the next batch\n * log entry in the storage.\n * @private\n */\nLogCollector.prototype._reschedulePublishInterval = function () {\n    if (this.storeLogsIntervalID) {\n        window.clearTimeout(this.storeLogsIntervalID);\n        this.storeLogsIntervalID = null;\n    }\n    // It's actually a timeout, because it is rescheduled on every flush\n    this.storeLogsIntervalID = window.setTimeout(\n        this._flush.bind(\n            this, false /* do not force */, true /* reschedule */),\n        this.storeInterval);\n};\n\n/**\n * Call this method to flush the log entry buffer and store it in the log\n * storage immediately (given that the storage is ready).\n */\nLogCollector.prototype.flush = function() {\n    this._flush(\n        false /* do not force, as it will not be stored anyway */,\n        true /* reschedule next update */ );\n};\n\n/**\n * Stores the next batch log entry in the log storage.\n * @param {boolean} force enforce current logs batch to be stored or cached if\n * there is anything to be logged, but the storage is not ready yet. One of\n * legitimate reasons to force is when the logs length exceeds size limit which\n * could result in truncation.\n * @param {boolean} reschedule <tt>true</tt> if the next periodic task should be\n * scheduled after the log entry is stored. <tt>false</tt> will end the periodic\n * task cycle.\n * @private\n */\nLogCollector.prototype._flush = function(force, reschedule) {\n    // Publish only if there's anything to be logged\n    if (this.totalLen > 0 && (this.logStorage.isReady() || force)) {\n        //FIXME avoid truncating\n        // right now we don't care if the message size is \"slightly\" exceeded\n        if (this.logStorage.isReady()) {\n            // Sends all cached logs\n            if (this.outputCache.length) {\n                this.outputCache.forEach(\n                    function (cachedQueue) {\n                        this.logStorage.storeLogs(cachedQueue);\n                    }.bind(this)\n                );\n                // Clear the cache\n                this.outputCache = [];\n            }\n            // Send current batch\n            this.logStorage.storeLogs(this.queue);\n        } else {\n            this.outputCache.push(this.queue);\n        }\n\n        this.queue = [];\n        this.totalLen = 0;\n    }\n\n    if (reschedule) {\n        this._reschedulePublishInterval();\n    }\n};\n\n/**\n * Stops the periodical \"store logs\" task and immediately stores any pending\n * log entries as a batch.\n */\nLogCollector.prototype.stop = function() {\n    // Flush and stop publishing logs\n    this._flush(false /* do not force */, false /* do not reschedule */);\n};\n\nmodule.exports = LogCollector;\n","/* Copyright @ 2015-present 8x8, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/*jslint latedef:false*/\n\n/**\n * Ordered log levels.\n */\nvar levels = {\n    \"trace\": 0,\n    \"debug\": 1,\n    \"info\": 2,\n    \"log\": 3,\n    \"warn\": 4,\n    \"error\": 5\n};\n\n/**\n * The default transport - console\n * @type LoggerTransport\n */\nLogger.consoleTransport = console;\n\n/**\n * The array which stores currently registered global transports.\n * @type {[LoggerTransport]}\n */\nvar globalTransports = [ Logger.consoleTransport ];\n\n/**\n * Adds given {@link LoggerTransport} instance to the list of global\n * transports which means that it'll be used by all {@link Logger}s\n * @param {LoggerTransport} transport\n */\nLogger.addGlobalTransport = function(transport) {\n    if (globalTransports.indexOf(transport) === -1) {\n        globalTransports.push(transport);\n    }\n};\n\n/**\n * Removes given {@link LoggerTransport} instance from the list of global\n * transports\n * @param {LoggerTransport} transport\n */\nLogger.removeGlobalTransport = function(transport) {\n    var transportIdx = globalTransports.indexOf(transport);\n    if (transportIdx !== -1) {\n        globalTransports.splice(transportIdx, 1);\n    }\n};\n\n/**\n * The global configuration options.\n */\nvar globalOptions = {};\n\n/**\n * Sets global options which will be used by all loggers. Changing these works\n * even after other loggers are created.\n */\nLogger.setGlobalOptions = function(options) {\n    globalOptions = options || {};\n};\n\n/**\n * Parses Error's object stack trace and extracts information about the last\n * caller before the log method was called.\n * @returns JS object with info about the caller - method name, file location,\n * line and column.\n */\nfunction getCallerInfo() {\n    var callerInfo = {\n        methodName: \"\",\n        fileLocation: \"\",\n        line: null,\n        column: null\n    };\n    //gets the part of the stack without the logger wrappers\n    var error = new Error();\n    var stack = error.stack? error.stack.split(\"\\n\") : [];\n    if(!stack || stack.length < 3) {\n        return callerInfo;\n    }\n    var m = null;\n    if(stack[3]) {\n        m = stack[3].match(/\\s*at\\s*(.+?)\\s*\\((\\S*)\\s*:(\\d*)\\s*:(\\d*)\\)/);\n    }\n    if(!m || m.length <= 4) {\n        //Firefox && Safari\n        if(stack[2].indexOf(\"log@\") === 0){\n            //Safari\n            callerInfo.methodName = stack[3].substr(0, stack[3].indexOf(\"@\"));\n        } else {\n            //Firefox\n            callerInfo.methodName = stack[2].substr(0, stack[2].indexOf(\"@\"));\n        }\n        return callerInfo;\n    }\n\n    callerInfo.methodName = m[1];\n    callerInfo.fileLocation = m[2];\n    callerInfo.line = m[3];\n    callerInfo.column = m[4];\n    return callerInfo;\n}\n\n/**\n * Logs messages using the transports and level from the logger.\n * @param logger a logger instance.\n * @param level the log level of the message. See the levels variable.\n * @param arguments array with arguments that will be logged.\n */\nfunction log() {\n    var logger = arguments[0], level = arguments[1],\n        args = Array.prototype.slice.call(arguments, 2);\n    if(levels[level] < logger.level) {\n        return;\n    }\n\n    var callerInfo\n        = !(logger.options.disableCallerInfo || globalOptions.disableCallerInfo) &&\n            getCallerInfo();\n    var transports = globalTransports.concat(logger.transports);\n    for(var i = 0; i < transports.length; i++) {\n        var t = transports[i];\n        var l = t[level];\n        if(l && typeof(l) === \"function\") {\n            var logPrefixes = [];\n\n            logPrefixes.push(new Date().toISOString());\n\n            if (logger.id) {\n                logPrefixes.push(\"[\" + logger.id + \"]\");\n            }\n\n            if (callerInfo && callerInfo.methodName.length > 1) {\n                logPrefixes.push(\"<\" + callerInfo.methodName + \">: \");\n            }\n\n            var fullLogParts = logPrefixes.concat(args);\n\n            l.bind(t).apply(t, fullLogParts);\n        }\n    }\n}\n\n/**\n *\n * Constructs new logger object.\n * @param level the logging level for the new logger\n * @param id optional identifier for the logger instance.\n * @param {LoggerTransport} transports optional list of handlers(objects) for\n * the logs. The handlers must support - log, warn, error, debug, info, trace.\n * @param options optional configuration file for how the logger should behave.\n * @param {boolean} options.disableCallerInfo Whether the call site of a logger\n * method invocation should be included in the log. Defaults to false, so the\n * call site will be included.\n */\nfunction Logger(level, id, transports, options) {\n    this.id = id;\n    this.options = options || {};\n    this.transports = transports;\n    if(!this.transports) {\n        this.transports = [];\n    }\n    this.level = levels[level];\n    var methods = Object.keys(levels);\n    for(var i = 0; i < methods.length; i++){\n        this[methods[i]] =\n            log.bind(null, this, methods[i]);\n    }\n}\n\n/**\n * Sets the log level for the logger.\n * @param level the new log level.\n */\nLogger.prototype.setLevel = function (level) {\n    this.level = levels[level];\n};\nmodule.exports = Logger;\n\n/**\n * Enum for the supported log levels.\n */\nLogger.levels = {\n    TRACE: \"trace\",\n    DEBUG: \"debug\",\n    INFO: \"info\",\n    LOG: \"log\",\n    WARN: \"warn\",\n    ERROR: \"error\"\n};\n","/* Copyright @ 2015-present 8x8, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Logger = require(\"./Logger\");\nvar LogCollector = require(\"./LogCollector\");\n\n/**\n * Definition of the log method\n * @name log_method\n * @function\n * @param {...*} log_args the arguments to be logged\n */\n/**\n * The logger's transport type definition.\n *\n * @typedef {object} LoggerTransport\n *\n * @property {log_method} trace method called to log on {@link Logger.levels.TRACE} logging level\n * @property {log_method} debug method called to log on {@link Logger.levels.DEBUG} logging level\n * @property {log_method} info method called to log on {@link Logger.levels.INFO} logging level\n * @property {log_method} log method called to log on {@link Logger.levels.LOG} logging level\n * @property {log_method} warn method called to log on {@link Logger.levels.WARN} logging level\n * @property {log_method} error method called to log on {@link Logger.levels.ERROR} logging level\n */\n\n/**\n * Map with the created loggers with ID.\n */\nvar idLoggers = {};\n\n/**\n * Array with the loggers without id.\n */\nvar loggers = [];\n\n/**\n * Log level for the lbrary.\n */\nvar curLevel = Logger.levels.TRACE;\n\n\nmodule.exports = {\n    /**\n     * Adds given {@link LoggerTransport} instance to the list of global\n     * transports which means that it'll be used by all {@link Logger}s\n     * @param {LoggerTransport} transport\n     */\n    addGlobalTransport: function(transport) {\n        Logger.addGlobalTransport(transport);\n    },\n    /**\n     * Removes given {@link LoggerTransport} instance from the list of global\n     * transports\n     * @param {LoggerTransport} transport\n     */\n    removeGlobalTransport: function(transport) {\n        Logger.removeGlobalTransport(transport);\n    },\n    /**\n    * Sets global options which will be used by all loggers. Changing these\n    * works even after other loggers are created.\n    */\n    setGlobalOptions: function(options) {\n        Logger.setGlobalOptions(options);\n    },\n    /**\n     * Creates new logger.\n     * @arguments the same as Logger constructor\n     */\n    getLogger: function(id, transports, options) {\n        var logger = new Logger(curLevel, id, transports, options);\n        if(id) {\n            idLoggers[id] = idLoggers[id] || [];\n            idLoggers[id].push(logger);\n        } else {\n            loggers.push(logger);\n        }\n        return logger;\n    },\n    /**\n     * Changes the log level for the existing loggers by id.\n     * @param level the new log level.\n     * @param id if specified the level will be changed only for loggers with the\n     * same id. Otherwise the operation will affect all loggers that don't\n     * have id.\n     */\n    setLogLevelById: function(level, id) {\n        var l = id? (idLoggers[id] || []) : loggers;\n        for(var i = 0; i < l.length; i++) {\n            l[i].setLevel(level);\n        }\n    },\n    /**\n     * Changes the log level for all existing loggers.\n     * @param level the new log level.\n     */\n    setLogLevel: function (level) {\n        curLevel = level;\n        var i = 0;\n        for(; i < loggers.length; i++) {\n            loggers[i].setLevel(level);\n        }\n\n        for(var id in idLoggers) {\n            var l = idLoggers[id] || [];\n            for(i = 0; i < l.length; i++) {\n                l[i].setLevel(level);\n            }\n        }\n    },\n    /**\n     * The supported log levels.\n     */\n    levels: Logger.levels,\n    /**\n     * Exports the <tt>LogCollector</tt>.\n     */\n    LogCollector: LogCollector\n};\n","var grammar = module.exports = {\n  v: [{\n    name: 'version',\n    reg: /^(\\d*)$/\n  }],\n  o: [{\n    // o=- 20518 0 IN IP4 203.0.113.1\n    // NB: sessionId will be a String in most cases because it is huge\n    name: 'origin',\n    reg: /^(\\S*) (\\d*) (\\d*) (\\S*) IP(\\d) (\\S*)/,\n    names: ['username', 'sessionId', 'sessionVersion', 'netType', 'ipVer', 'address'],\n    format: '%s %s %d %s IP%d %s'\n  }],\n  // default parsing of these only (though some of these feel outdated)\n  s: [{ name: 'name' }],\n  i: [{ name: 'description' }],\n  u: [{ name: 'uri' }],\n  e: [{ name: 'email' }],\n  p: [{ name: 'phone' }],\n  z: [{ name: 'timezones' }], // TODO: this one can actually be parsed properly...\n  r: [{ name: 'repeats' }],   // TODO: this one can also be parsed properly\n  // k: [{}], // outdated thing ignored\n  t: [{\n    // t=0 0\n    name: 'timing',\n    reg: /^(\\d*) (\\d*)/,\n    names: ['start', 'stop'],\n    format: '%d %d'\n  }],\n  c: [{\n    // c=IN IP4 10.47.197.26\n    name: 'connection',\n    reg: /^IN IP(\\d) (\\S*)/,\n    names: ['version', 'ip'],\n    format: 'IN IP%d %s'\n  }],\n  b: [{\n    // b=AS:4000\n    push: 'bandwidth',\n    reg: /^(TIAS|AS|CT|RR|RS):(\\d*)/,\n    names: ['type', 'limit'],\n    format: '%s:%s'\n  }],\n  m: [{\n    // m=video 51744 RTP/AVP 126 97 98 34 31\n    // NB: special - pushes to session\n    // TODO: rtp/fmtp should be filtered by the payloads found here?\n    reg: /^(\\w*) (\\d*) ([\\w/]*)(?: (.*))?/,\n    names: ['type', 'port', 'protocol', 'payloads'],\n    format: '%s %d %s %s'\n  }],\n  a: [\n    {\n      // a=rtpmap:110 opus/48000/2\n      push: 'rtp',\n      reg: /^rtpmap:(\\d*) ([\\w\\-.]*)(?:\\s*\\/(\\d*)(?:\\s*\\/(\\S*))?)?/,\n      names: ['payload', 'codec', 'rate', 'encoding'],\n      format: function (o) {\n        return (o.encoding)\n          ? 'rtpmap:%d %s/%s/%s'\n          : o.rate\n            ? 'rtpmap:%d %s/%s'\n            : 'rtpmap:%d %s';\n      }\n    },\n    {\n      // a=fmtp:108 profile-level-id=24;object=23;bitrate=64000\n      // a=fmtp:111 minptime=10; useinbandfec=1\n      push: 'fmtp',\n      reg: /^fmtp:(\\d*) ([\\S| ]*)/,\n      names: ['payload', 'config'],\n      format: 'fmtp:%d %s'\n    },\n    {\n      // a=control:streamid=0\n      name: 'control',\n      reg: /^control:(.*)/,\n      format: 'control:%s'\n    },\n    {\n      // a=rtcp:65179 IN IP4 193.84.77.194\n      name: 'rtcp',\n      reg: /^rtcp:(\\d*)(?: (\\S*) IP(\\d) (\\S*))?/,\n      names: ['port', 'netType', 'ipVer', 'address'],\n      format: function (o) {\n        return (o.address != null)\n          ? 'rtcp:%d %s IP%d %s'\n          : 'rtcp:%d';\n      }\n    },\n    {\n      // a=rtcp-fb:98 trr-int 100\n      push: 'rtcpFbTrrInt',\n      reg: /^rtcp-fb:(\\*|\\d*) trr-int (\\d*)/,\n      names: ['payload', 'value'],\n      format: 'rtcp-fb:%s trr-int %d'\n    },\n    {\n      // a=rtcp-fb:98 nack rpsi\n      push: 'rtcpFb',\n      reg: /^rtcp-fb:(\\*|\\d*) ([\\w-_]*)(?: ([\\w-_]*))?/,\n      names: ['payload', 'type', 'subtype'],\n      format: function (o) {\n        return (o.subtype != null)\n          ? 'rtcp-fb:%s %s %s'\n          : 'rtcp-fb:%s %s';\n      }\n    },\n    {\n      // a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n      // a=extmap:1/recvonly URI-gps-string\n      // a=extmap:3 urn:ietf:params:rtp-hdrext:encrypt urn:ietf:params:rtp-hdrext:smpte-tc 25@600/24\n      push: 'ext',\n      reg: /^extmap:(\\d+)(?:\\/(\\w+))?(?: (urn:ietf:params:rtp-hdrext:encrypt))? (\\S*)(?: (\\S*))?/,\n      names: ['value', 'direction', 'encrypt-uri', 'uri', 'config'],\n      format: function (o) {\n        return (\n          'extmap:%d' +\n          (o.direction ? '/%s' : '%v') +\n          (o['encrypt-uri'] ? ' %s' : '%v') +\n          ' %s' +\n          (o.config ? ' %s' : '')\n        );\n      }\n    },\n    {\n      // a=extmap-allow-mixed\n      name: 'extmapAllowMixed',\n      reg: /^(extmap-allow-mixed)/\n    },\n    {\n      // a=crypto:1 AES_CM_128_HMAC_SHA1_80 inline:PS1uQCVeeCFCanVmcjkpPywjNWhcYD0mXXtxaVBR|2^20|1:32\n      push: 'crypto',\n      reg: /^crypto:(\\d*) ([\\w_]*) (\\S*)(?: (\\S*))?/,\n      names: ['id', 'suite', 'config', 'sessionConfig'],\n      format: function (o) {\n        return (o.sessionConfig != null)\n          ? 'crypto:%d %s %s %s'\n          : 'crypto:%d %s %s';\n      }\n    },\n    {\n      // a=setup:actpass\n      name: 'setup',\n      reg: /^setup:(\\w*)/,\n      format: 'setup:%s'\n    },\n    {\n      // a=connection:new\n      name: 'connectionType',\n      reg: /^connection:(new|existing)/,\n      format: 'connection:%s'\n    },\n    {\n      // a=mid:1\n      name: 'mid',\n      reg: /^mid:([^\\s]*)/,\n      format: 'mid:%s'\n    },\n    {\n      // a=msid:0c8b064d-d807-43b4-b434-f92a889d8587 98178685-d409-46e0-8e16-7ef0db0db64a\n      name: 'msid',\n      reg: /^msid:(.*)/,\n      format: 'msid:%s'\n    },\n    {\n      // a=ptime:20\n      name: 'ptime',\n      reg: /^ptime:(\\d*(?:\\.\\d*)*)/,\n      format: 'ptime:%d'\n    },\n    {\n      // a=maxptime:60\n      name: 'maxptime',\n      reg: /^maxptime:(\\d*(?:\\.\\d*)*)/,\n      format: 'maxptime:%d'\n    },\n    {\n      // a=sendrecv\n      name: 'direction',\n      reg: /^(sendrecv|recvonly|sendonly|inactive)/\n    },\n    {\n      // a=ice-lite\n      name: 'icelite',\n      reg: /^(ice-lite)/\n    },\n    {\n      // a=ice-ufrag:F7gI\n      name: 'iceUfrag',\n      reg: /^ice-ufrag:(\\S*)/,\n      format: 'ice-ufrag:%s'\n    },\n    {\n      // a=ice-pwd:x9cml/YzichV2+XlhiMu8g\n      name: 'icePwd',\n      reg: /^ice-pwd:(\\S*)/,\n      format: 'ice-pwd:%s'\n    },\n    {\n      // a=fingerprint:SHA-1 00:11:22:33:44:55:66:77:88:99:AA:BB:CC:DD:EE:FF:00:11:22:33\n      name: 'fingerprint',\n      reg: /^fingerprint:(\\S*) (\\S*)/,\n      names: ['type', 'hash'],\n      format: 'fingerprint:%s %s'\n    },\n    {\n      // a=candidate:0 1 UDP 2113667327 203.0.113.1 54400 typ host\n      // a=candidate:1162875081 1 udp 2113937151 192.168.34.75 60017 typ host generation 0 network-id 3 network-cost 10\n      // a=candidate:3289912957 2 udp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 generation 0 network-id 3 network-cost 10\n      // a=candidate:229815620 1 tcp 1518280447 192.168.150.19 60017 typ host tcptype active generation 0 network-id 3 network-cost 10\n      // a=candidate:3289912957 2 tcp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 tcptype passive generation 0 network-id 3 network-cost 10\n      push:'candidates',\n      reg: /^candidate:(\\S*) (\\d*) (\\S*) (\\d*) (\\S*) (\\d*) typ (\\S*)(?: raddr (\\S*) rport (\\d*))?(?: tcptype (\\S*))?(?: generation (\\d*))?(?: network-id (\\d*))?(?: network-cost (\\d*))?/,\n      names: ['foundation', 'component', 'transport', 'priority', 'ip', 'port', 'type', 'raddr', 'rport', 'tcptype', 'generation', 'network-id', 'network-cost'],\n      format: function (o) {\n        var str = 'candidate:%s %d %s %d %s %d typ %s';\n\n        str += (o.raddr != null) ? ' raddr %s rport %d' : '%v%v';\n\n        // NB: candidate has three optional chunks, so %void middles one if it's missing\n        str += (o.tcptype != null) ? ' tcptype %s' : '%v';\n\n        if (o.generation != null) {\n          str += ' generation %d';\n        }\n\n        str += (o['network-id'] != null) ? ' network-id %d' : '%v';\n        str += (o['network-cost'] != null) ? ' network-cost %d' : '%v';\n        return str;\n      }\n    },\n    {\n      // a=end-of-candidates (keep after the candidates line for readability)\n      name: 'endOfCandidates',\n      reg: /^(end-of-candidates)/\n    },\n    {\n      // a=remote-candidates:1 203.0.113.1 54400 2 203.0.113.1 54401 ...\n      name: 'remoteCandidates',\n      reg: /^remote-candidates:(.*)/,\n      format: 'remote-candidates:%s'\n    },\n    {\n      // a=ice-options:google-ice\n      name: 'iceOptions',\n      reg: /^ice-options:(\\S*)/,\n      format: 'ice-options:%s'\n    },\n    {\n      // a=ssrc:2566107569 cname:t9YU8M1UxTF8Y1A1\n      push: 'ssrcs',\n      reg: /^ssrc:(\\d*) ([\\w_-]*)(?::(.*))?/,\n      names: ['id', 'attribute', 'value'],\n      format: function (o) {\n        var str = 'ssrc:%d';\n        if (o.attribute != null) {\n          str += ' %s';\n          if (o.value != null) {\n            str += ':%s';\n          }\n        }\n        return str;\n      }\n    },\n    {\n      // a=ssrc-group:FEC 1 2\n      // a=ssrc-group:FEC-FR 3004364195 1080772241\n      push: 'ssrcGroups',\n      // token-char = %x21 / %x23-27 / %x2A-2B / %x2D-2E / %x30-39 / %x41-5A / %x5E-7E\n      reg: /^ssrc-group:([\\x21\\x23\\x24\\x25\\x26\\x27\\x2A\\x2B\\x2D\\x2E\\w]*) (.*)/,\n      names: ['semantics', 'ssrcs'],\n      format: 'ssrc-group:%s %s'\n    },\n    {\n      // a=msid-semantic: WMS Jvlam5X3SX1OP6pn20zWogvaKJz5Hjf9OnlV\n      name: 'msidSemantic',\n      reg: /^msid-semantic:\\s?(\\w*) (\\S*)/,\n      names: ['semantic', 'token'],\n      format: 'msid-semantic: %s %s' // space after ':' is not accidental\n    },\n    {\n      // a=group:BUNDLE audio video\n      push: 'groups',\n      reg: /^group:(\\w*) (.*)/,\n      names: ['type', 'mids'],\n      format: 'group:%s %s'\n    },\n    {\n      // a=rtcp-mux\n      name: 'rtcpMux',\n      reg: /^(rtcp-mux)/\n    },\n    {\n      // a=rtcp-rsize\n      name: 'rtcpRsize',\n      reg: /^(rtcp-rsize)/\n    },\n    {\n      // a=sctpmap:5000 webrtc-datachannel 1024\n      name: 'sctpmap',\n      reg: /^sctpmap:([\\w_/]*) (\\S*)(?: (\\S*))?/,\n      names: ['sctpmapNumber', 'app', 'maxMessageSize'],\n      format: function (o) {\n        return (o.maxMessageSize != null)\n          ? 'sctpmap:%s %s %s'\n          : 'sctpmap:%s %s';\n      }\n    },\n    {\n      // a=x-google-flag:conference\n      name: 'xGoogleFlag',\n      reg: /^x-google-flag:([^\\s]*)/,\n      format: 'x-google-flag:%s'\n    },\n    {\n      // a=rid:1 send max-width=1280;max-height=720;max-fps=30;depend=0\n      push: 'rids',\n      reg: /^rid:([\\d\\w]+) (\\w+)(?: ([\\S| ]*))?/,\n      names: ['id', 'direction', 'params'],\n      format: function (o) {\n        return (o.params) ? 'rid:%s %s %s' : 'rid:%s %s';\n      }\n    },\n    {\n      // a=imageattr:97 send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320] recv [x=330,y=250]\n      // a=imageattr:* send [x=800,y=640] recv *\n      // a=imageattr:100 recv [x=320,y=240]\n      push: 'imageattrs',\n      reg: new RegExp(\n        // a=imageattr:97\n        '^imageattr:(\\\\d+|\\\\*)' +\n        // send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320]\n        '[\\\\s\\\\t]+(send|recv)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*)' +\n        // recv [x=330,y=250]\n        '(?:[\\\\s\\\\t]+(recv|send)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*))?'\n      ),\n      names: ['pt', 'dir1', 'attrs1', 'dir2', 'attrs2'],\n      format: function (o) {\n        return 'imageattr:%s %s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    {\n      // a=simulcast:send 1,2,3;~4,~5 recv 6;~7,~8\n      // a=simulcast:recv 1;4,5 send 6;7\n      name: 'simulcast',\n      reg: new RegExp(\n        // a=simulcast:\n        '^simulcast:' +\n        // send 1,2,3;~4,~5\n        '(send|recv) ([a-zA-Z0-9\\\\-_~;,]+)' +\n        // space + recv 6;~7,~8\n        '(?:\\\\s?(send|recv) ([a-zA-Z0-9\\\\-_~;,]+))?' +\n        // end\n        '$'\n      ),\n      names: ['dir1', 'list1', 'dir2', 'list2'],\n      format: function (o) {\n        return 'simulcast:%s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    {\n      // old simulcast draft 03 (implemented by Firefox)\n      //   https://tools.ietf.org/html/draft-ietf-mmusic-sdp-simulcast-03\n      // a=simulcast: recv pt=97;98 send pt=97\n      // a=simulcast: send rid=5;6;7 paused=6,7\n      name: 'simulcast_03',\n      reg: /^simulcast:[\\s\\t]+([\\S+\\s\\t]+)$/,\n      names: ['value'],\n      format: 'simulcast: %s'\n    },\n    {\n      // a=framerate:25\n      // a=framerate:29.97\n      name: 'framerate',\n      reg: /^framerate:(\\d+(?:$|\\.\\d+))/,\n      format: 'framerate:%s'\n    },\n    {\n      // RFC4570\n      // a=source-filter: incl IN IP4 239.5.2.31 10.1.15.5\n      name: 'sourceFilter',\n      reg: /^source-filter: *(excl|incl) (\\S*) (IP4|IP6|\\*) (\\S*) (.*)/,\n      names: ['filterMode', 'netType', 'addressTypes', 'destAddress', 'srcList'],\n      format: 'source-filter: %s %s %s %s %s'\n    },\n    {\n      // a=bundle-only\n      name: 'bundleOnly',\n      reg: /^(bundle-only)/\n    },\n    {\n      // a=label:1\n      name: 'label',\n      reg: /^label:(.+)/,\n      format: 'label:%s'\n    },\n    {\n      // RFC version 26 for SCTP over DTLS\n      // https://tools.ietf.org/html/draft-ietf-mmusic-sctp-sdp-26#section-5\n      name: 'sctpPort',\n      reg: /^sctp-port:(\\d+)$/,\n      format: 'sctp-port:%s'\n    },\n    {\n      // RFC version 26 for SCTP over DTLS\n      // https://tools.ietf.org/html/draft-ietf-mmusic-sctp-sdp-26#section-6\n      name: 'maxMessageSize',\n      reg: /^max-message-size:(\\d+)$/,\n      format: 'max-message-size:%s'\n    },\n    {\n      // RFC7273\n      // a=ts-refclk:ptp=IEEE1588-2008:39-A7-94-FF-FE-07-CB-D0:37\n      push:'tsRefClocks',\n      reg: /^ts-refclk:([^\\s=]*)(?:=(\\S*))?/,\n      names: ['clksrc', 'clksrcExt'],\n      format: function (o) {\n        return 'ts-refclk:%s' + (o.clksrcExt != null ? '=%s' : '');\n      }\n    },\n    {\n      // RFC7273\n      // a=mediaclk:direct=963214424\n      name:'mediaClk',\n      reg: /^mediaclk:(?:id=(\\S*))? *([^\\s=]*)(?:=(\\S*))?(?: *rate=(\\d+)\\/(\\d+))?/,\n      names: ['id', 'mediaClockName', 'mediaClockValue', 'rateNumerator', 'rateDenominator'],\n      format: function (o) {\n        var str = 'mediaclk:';\n        str += (o.id != null ? 'id=%s %s' : '%v%s');\n        str += (o.mediaClockValue != null ? '=%s' : '');\n        str += (o.rateNumerator != null ? ' rate=%s' : '');\n        str += (o.rateDenominator != null ? '/%s' : '');\n        return str;\n      }\n    },\n    {\n      // a=keywds:keywords\n      name: 'keywords',\n      reg: /^keywds:(.+)$/,\n      format: 'keywds:%s'\n    },\n    {\n      // a=content:main\n      name: 'content',\n      reg: /^content:(.+)/,\n      format: 'content:%s'\n    },\n    // BFCP https://tools.ietf.org/html/rfc4583\n    {\n      // a=floorctrl:c-s\n      name: 'bfcpFloorCtrl',\n      reg: /^floorctrl:(c-only|s-only|c-s)/,\n      format: 'floorctrl:%s'\n    },\n    {\n      // a=confid:1\n      name: 'bfcpConfId',\n      reg: /^confid:(\\d+)/,\n      format: 'confid:%s'\n    },\n    {\n      // a=userid:1\n      name: 'bfcpUserId',\n      reg: /^userid:(\\d+)/,\n      format: 'userid:%s'\n    },\n    {\n      // a=floorid:1\n      name: 'bfcpFloorId',\n      reg: /^floorid:(.+) (?:m-stream|mstrm):(.+)/,\n      names: ['id', 'mStream'],\n      format: 'floorid:%s mstrm:%s'\n    },\n    {\n      // any a= that we don't understand is kept verbatim on media.invalid\n      push: 'invalid',\n      names: ['value']\n    }\n  ]\n};\n\n// set sensible defaults to avoid polluting the grammar with boring details\nObject.keys(grammar).forEach(function (key) {\n  var objs = grammar[key];\n  objs.forEach(function (obj) {\n    if (!obj.reg) {\n      obj.reg = /(.*)/;\n    }\n    if (!obj.format) {\n      obj.format = '%s';\n    }\n  });\n});\n","var parser = require('./parser');\nvar writer = require('./writer');\n\nexports.write = writer;\nexports.parse = parser.parse;\nexports.parseParams = parser.parseParams;\nexports.parseFmtpConfig = parser.parseFmtpConfig; // Alias of parseParams().\nexports.parsePayloads = parser.parsePayloads;\nexports.parseRemoteCandidates = parser.parseRemoteCandidates;\nexports.parseImageAttributes = parser.parseImageAttributes;\nexports.parseSimulcastStreamList = parser.parseSimulcastStreamList;\n","var toIntIfInt = function (v) {\n  return String(Number(v)) === v ? Number(v) : v;\n};\n\nvar attachProperties = function (match, location, names, rawName) {\n  if (rawName && !names) {\n    location[rawName] = toIntIfInt(match[1]);\n  }\n  else {\n    for (var i = 0; i < names.length; i += 1) {\n      if (match[i+1] != null) {\n        location[names[i]] = toIntIfInt(match[i+1]);\n      }\n    }\n  }\n};\n\nvar parseReg = function (obj, location, content) {\n  var needsBlank = obj.name && obj.names;\n  if (obj.push && !location[obj.push]) {\n    location[obj.push] = [];\n  }\n  else if (needsBlank && !location[obj.name]) {\n    location[obj.name] = {};\n  }\n  var keyLocation = obj.push ?\n    {} :  // blank object that will be pushed\n    needsBlank ? location[obj.name] : location; // otherwise, named location or root\n\n  attachProperties(content.match(obj.reg), keyLocation, obj.names, obj.name);\n\n  if (obj.push) {\n    location[obj.push].push(keyLocation);\n  }\n};\n\nvar grammar = require('./grammar');\nvar validLine = RegExp.prototype.test.bind(/^([a-z])=(.*)/);\n\nexports.parse = function (sdp) {\n  var session = {}\n    , media = []\n    , location = session; // points at where properties go under (one of the above)\n\n  // parse lines we understand\n  sdp.split(/(\\r\\n|\\r|\\n)/).filter(validLine).forEach(function (l) {\n    var type = l[0];\n    var content = l.slice(2);\n    if (type === 'm') {\n      media.push({rtp: [], fmtp: []});\n      location = media[media.length-1]; // point at latest media line\n    }\n\n    for (var j = 0; j < (grammar[type] || []).length; j += 1) {\n      var obj = grammar[type][j];\n      if (obj.reg.test(content)) {\n        return parseReg(obj, location, content);\n      }\n    }\n  });\n\n  session.media = media; // link it up\n  return session;\n};\n\nvar paramReducer = function (acc, expr) {\n  var s = expr.split(/=(.+)/, 2);\n  if (s.length === 2) {\n    acc[s[0]] = toIntIfInt(s[1]);\n  } else if (s.length === 1 && expr.length > 1) {\n    acc[s[0]] = undefined;\n  }\n  return acc;\n};\n\nexports.parseParams = function (str) {\n  return str.split(/;\\s?/).reduce(paramReducer, {});\n};\n\n// For backward compatibility - alias will be removed in 3.0.0\nexports.parseFmtpConfig = exports.parseParams;\n\nexports.parsePayloads = function (str) {\n  return str.toString().split(' ').map(Number);\n};\n\nexports.parseRemoteCandidates = function (str) {\n  var candidates = [];\n  var parts = str.split(' ').map(toIntIfInt);\n  for (var i = 0; i < parts.length; i += 3) {\n    candidates.push({\n      component: parts[i],\n      ip: parts[i + 1],\n      port: parts[i + 2]\n    });\n  }\n  return candidates;\n};\n\nexports.parseImageAttributes = function (str) {\n  return str.split(' ').map(function (item) {\n    return item.substring(1, item.length-1).split(',').reduce(paramReducer, {});\n  });\n};\n\nexports.parseSimulcastStreamList = function (str) {\n  return str.split(';').map(function (stream) {\n    return stream.split(',').map(function (format) {\n      var scid, paused = false;\n\n      if (format[0] !== '~') {\n        scid = toIntIfInt(format);\n      } else {\n        scid = toIntIfInt(format.substring(1, format.length));\n        paused = true;\n      }\n\n      return {\n        scid: scid,\n        paused: paused\n      };\n    });\n  });\n};\n","var grammar = require('./grammar');\n\n// customized util.format - discards excess arguments and can void middle ones\nvar formatRegExp = /%[sdv%]/g;\nvar format = function (formatStr) {\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  return formatStr.replace(formatRegExp, function (x) {\n    if (i >= len) {\n      return x; // missing argument\n    }\n    var arg = args[i];\n    i += 1;\n    switch (x) {\n    case '%%':\n      return '%';\n    case '%s':\n      return String(arg);\n    case '%d':\n      return Number(arg);\n    case '%v':\n      return '';\n    }\n  });\n  // NB: we discard excess arguments - they are typically undefined from makeLine\n};\n\nvar makeLine = function (type, obj, location) {\n  var str = obj.format instanceof Function ?\n    (obj.format(obj.push ? location : location[obj.name])) :\n    obj.format;\n\n  var args = [type + '=' + str];\n  if (obj.names) {\n    for (var i = 0; i < obj.names.length; i += 1) {\n      var n = obj.names[i];\n      if (obj.name) {\n        args.push(location[obj.name][n]);\n      }\n      else { // for mLine and push attributes\n        args.push(location[obj.names[i]]);\n      }\n    }\n  }\n  else {\n    args.push(location[obj.name]);\n  }\n  return format.apply(null, args);\n};\n\n// RFC specified order\n// TODO: extend this with all the rest\nvar defaultOuterOrder = [\n  'v', 'o', 's', 'i',\n  'u', 'e', 'p', 'c',\n  'b', 't', 'r', 'z', 'a'\n];\nvar defaultInnerOrder = ['i', 'c', 'b', 'a'];\n\n\nmodule.exports = function (session, opts) {\n  opts = opts || {};\n  // ensure certain properties exist\n  if (session.version == null) {\n    session.version = 0; // 'v=0' must be there (only defined version atm)\n  }\n  if (session.name == null) {\n    session.name = ' '; // 's= ' must be there if no meaningful name set\n  }\n  session.media.forEach(function (mLine) {\n    if (mLine.payloads == null) {\n      mLine.payloads = '';\n    }\n  });\n\n  var outerOrder = opts.outerOrder || defaultOuterOrder;\n  var innerOrder = opts.innerOrder || defaultInnerOrder;\n  var sdp = [];\n\n  // loop through outerOrder for matching properties on session\n  outerOrder.forEach(function (type) {\n    grammar[type].forEach(function (obj) {\n      if (obj.name in session && session[obj.name] != null) {\n        sdp.push(makeLine(type, obj, session));\n      }\n      else if (obj.push in session && session[obj.push] != null) {\n        session[obj.push].forEach(function (el) {\n          sdp.push(makeLine(type, obj, el));\n        });\n      }\n    });\n  });\n\n  // then for each media line, follow the innerOrder\n  session.media.forEach(function (mLine) {\n    sdp.push(makeLine('m', grammar.m[0], mLine));\n\n    innerOrder.forEach(function (type) {\n      grammar[type].forEach(function (obj) {\n        if (obj.name in mLine && mLine[obj.name] != null) {\n          sdp.push(makeLine(type, obj, mLine));\n        }\n        else if (obj.push in mLine && mLine[obj.push] != null) {\n          mLine[obj.push].forEach(function (el) {\n            sdp.push(makeLine(type, obj, el));\n          });\n        }\n      });\n    });\n  });\n\n  return sdp.join('\\r\\n') + '\\r\\n';\n};\n","/* Copyright @ 2016 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar transform = require('sdp-transform');\nvar transformUtils = require('./transform-utils');\nvar parseSsrcs = transformUtils.parseSsrcs;\nvar writeSsrcs = transformUtils.writeSsrcs;\n\n//region Constants\n\nvar DEFAULT_NUM_OF_LAYERS = 3;\n\n//endregion\n\nfunction getSsrcAttribute (mLine, ssrc, attributeName) {\n    return mLine\n        .ssrcs\n        .filter(function(ssrcInfo) { return ssrcInfo.id === ssrc; })\n        .filter(function(ssrcInfo) { return ssrcInfo.attribute === attributeName; })\n        .map(function(ssrcInfo) { return ssrcInfo.value; })[0];\n}\n\n//region Ctor\n\nfunction Simulcast(options) {\n\n    this.options = options ? options : {};\n\n    if (!this.options.numOfLayers) {\n        this.options.numOfLayers = DEFAULT_NUM_OF_LAYERS;\n    }\n    console.log(\"SdpSimulcast: using \" + this.options.numOfLayers + \" layers\");\n\n    /**\n     * An IN-ORDER list of the simulcast ssrcs\n     * @type {list<number>}\n     */\n    this.ssrcCache = [];\n}\n\n//endregion\n\n//region Stateless private utility functions\n\n/**\n * Returns a random integer between min (included) and max (excluded)\n * Using Math.round() gives a non-uniform distribution!\n * @returns {number}\n */\nfunction generateSSRC() {\n    var min = 0, max = 0xffffffff;\n    return Math.floor(Math.random() * (max - min)) + min;\n};\n\nfunction processVideo(session, action) {\n    if (session == null || !Array.isArray(session.media)) {\n        return;\n    }\n\n    session.media.forEach(function (mLine) {\n        if (mLine.type === 'video') {\n            action(mLine);\n        }\n    });\n};\n\nfunction validateDescription(desc)\n{\n    return desc && desc != null\n        && desc.type && desc.type != ''\n        && desc.sdp && desc.sdp != '';\n}\n\nfunction explodeRemoteSimulcast(mLine) {\n\n    if (!mLine || !Array.isArray(mLine.ssrcGroups)) {\n        return;\n    }\n\n    var sources = parseSsrcs(mLine);\n    var order = [];\n\n    // Find the SIM group and explode its sources.\n    var j = mLine.ssrcGroups.length;\n    while (j--) {\n\n        if (mLine.ssrcGroups[j].semantics !== 'SIM') {\n            continue;\n        }\n\n        var simulcastSsrcs = mLine.ssrcGroups[j].ssrcs.split(' ');\n\n        for (var i = 0; i < simulcastSsrcs.length; i++) {\n\n            var ssrc = simulcastSsrcs[i];\n            order.push(ssrc);\n\n            var parts = sources[ssrc].msid.split(' ');\n            sources[ssrc].msid = [parts[0], '/', i, ' ', parts[1], '/', i].join('');\n            sources[ssrc].cname = [sources[ssrc].cname, '/', i].join('');\n\n            // Remove all the groups that this SSRC participates in.\n            mLine.ssrcGroups.forEach(function (relatedGroup) {\n                if (relatedGroup.semantics === 'SIM') {\n                    return;\n                }\n\n                var relatedSsrcs = relatedGroup.ssrcs.split(' ');\n                if (relatedSsrcs.indexOf(ssrc) === -1) {\n                    return;\n                }\n\n                // Nuke all the related SSRCs.\n                relatedSsrcs.forEach(function (relatedSSRC) {\n                    sources[relatedSSRC].msid = sources[ssrc].msid;\n                    sources[relatedSSRC].cname = sources[ssrc].cname;\n                    if (relatedSSRC !== ssrc) {\n                        order.push(relatedSSRC);\n                    }\n                });\n\n                // Schedule the related group for nuking.\n            })\n        }\n\n        mLine.ssrcs = writeSsrcs(sources, order);\n        mLine.ssrcGroups.splice(j, 1);\n    };\n}\n\nfunction implodeRemoteSimulcast(mLine) {\n\n    if (!mLine || !Array.isArray(mLine.ssrcGroups)) {\n        console.info('Halt: There are no SSRC groups in the remote ' +\n                'description.');\n        return;\n    }\n\n    var sources = parseSsrcs(mLine);\n\n    // Find the SIM group and nuke it.\n    mLine.ssrcGroups.forEach(function (simulcastGroup) {\n        if (simulcastGroup.semantics !== 'SIM') {\n            return;\n        }\n\n        console.info(\"Imploding SIM group: \" + simulcastGroup.ssrcs);\n        // Schedule the SIM group for nuking.\n        simulcastGroup.nuke = true;\n\n        var simulcastSsrcs = simulcastGroup.ssrcs.split(' ');\n\n        // Nuke all the higher layer SSRCs.\n        for (var i = 1; i < simulcastSsrcs.length; i++) {\n\n            var ssrc = simulcastSsrcs[i];\n            delete sources[ssrc];\n\n            // Remove all the groups that this SSRC participates in.\n            mLine.ssrcGroups.forEach(function (relatedGroup) {\n                if (relatedGroup.semantics === 'SIM') {\n                    return;\n                }\n\n                var relatedSsrcs = relatedGroup.ssrcs.split(' ');\n                if (relatedSsrcs.indexOf(ssrc) === -1) {\n                    return;\n                }\n\n                // Nuke all the related SSRCs.\n                relatedSsrcs.forEach(function (relatedSSRC) {\n                    delete sources[relatedSSRC];\n                });\n\n                // Schedule the related group for nuking.\n                relatedGroup.nuke = true;\n            })\n        }\n\n        return;\n    });\n\n    mLine.ssrcs = writeSsrcs(sources);\n\n    // Nuke all the scheduled groups.\n    var i = mLine.ssrcGroups.length;\n    while (i--) {\n        if (mLine.ssrcGroups[i].nuke) {\n            mLine.ssrcGroups.splice(i, 1);\n        }\n    }\n}\n\nfunction removeGoogConference(mLine) {\n    if (!mLine || typeof mLine.xGoogleFlag === 'undefined') {\n        return;\n    }\n\n    mLine.xGoogleFlag = undefined;\n}\n\nfunction assertGoogConference(mLine) {\n    if (!mLine) {\n        return;\n    }\n\n    if (!Array.isArray(mLine.invalid)) {\n        mLine.invalid = [];\n    }\n\n    if (!mLine.invalid.some(\n            function (i) { return i.value === 'x-google-flag:conference' })) {\n        mLine.invalid.push({'value': 'x-google-flag:conference'});\n    }\n}\n\nSimulcast.prototype.clearSsrcCache = function() {\n    this.ssrcCache = [];\n}\n\n/**\n * When we start as video muted, all of the video\n *  ssrcs get generated so we can include them as part\n *  of the original session-accept.  That means we\n *  need this library to restore to those same ssrcs\n *  the first time we unmute, so we need the ability to\n *  force its cache\n */\nSimulcast.prototype.setSsrcCache = function(ssrcs) {\n    this.ssrcCache = ssrcs;\n}\n\n//endregion\n\n//region \"Private\" functions\n\n/**\n * Given a video mLine, return a list of the video ssrcs\n *  in simulcast layer order (returns a list of just\n *  the primary ssrc if there are no simulcast layers)\n */\nSimulcast.prototype._parseSimLayers = function (mLine) {\n    var simGroup = mLine.ssrcGroups &&\n        mLine.ssrcGroups.find(function(group) { return group.semantics === \"SIM\"; });\n    if (simGroup) {\n        return simGroup.ssrcs\n            .split(\" \")\n            .map(function(ssrcStr) { return parseInt(ssrcStr) });\n    } else {\n        return [mLine.ssrcs[0].id];\n    }\n}\n\nSimulcast.prototype._buildNewToOldSsrcMap = function (newSsrcList, oldSsrcList) {\n    var ssrcMap = {};\n    for (var i = 0; i < newSsrcList.length; ++i) {\n        var newSsrc = newSsrcList[i];\n        var oldSsrc = oldSsrcList[i] || null;\n        ssrcMap[newSsrc] = oldSsrc;\n    }\n    return ssrcMap;\n}\n\nSimulcast.prototype._fillInSourceDataFromCache = function(mLine) {\n    console.log(\"SdpSimulcast restoring from cache: \", this.ssrcCache);\n    var newSimSsrcs = this._parseSimLayers(mLine);\n    console.log(\"SdpSimulcast Parsed new sim ssrcs: \", newSimSsrcs);\n    var newMsid = getSsrcAttribute(mLine, newSimSsrcs[0], \"msid\");\n    var newCname = getSsrcAttribute(mLine, newSimSsrcs[0], \"cname\");\n    var ssrcsToReplace = this._buildNewToOldSsrcMap(newSimSsrcs, this.ssrcCache);\n    console.log(\"SdpSimulcast built replacement map: \", ssrcsToReplace);\n    // New sdp might only have 1 layer, so not every cached ssrc will have a new one\n    //  to replace directly\n    var ssrcsToAdd = this.ssrcCache\n        .filter(function(ssrc) { return Object.values(ssrcsToReplace).indexOf(ssrc) === -1; });\n    console.log(\"SdpSimulcast built ssrcs to add: \", ssrcsToAdd);\n\n    // First do the replacements\n    mLine.ssrcs.forEach(function(ssrc) {\n        if (ssrcsToReplace[ssrc.id]) {\n            ssrc.id = ssrcsToReplace[ssrc.id];\n        }\n    });\n    // Now the adds\n    ssrcsToAdd.forEach(function(ssrc) {\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"msid\",\n            value: newMsid\n        });\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"cname\",\n            value: newCname\n        });\n    });\n    mLine.ssrcGroups = mLine.ssrcGroups || [];\n    mLine.ssrcGroups.push({\n        semantics: \"SIM\",\n        ssrcs: this.ssrcCache.join(\" \")\n    });\n    return mLine;\n}\n\nSimulcast.prototype._generateSourceData = function(mLine, primarySsrc) {\n    var addAssociatedStream = function(mLine, ssrc) {\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"cname\",\n            value: primarySsrcCname\n        });\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"msid\",\n            value: primarySsrcMsid\n        });\n    }\n    var primarySsrcMsid = getSsrcAttribute(mLine, primarySsrc, \"msid\");\n    var primarySsrcCname = getSsrcAttribute(mLine, primarySsrc, \"cname\");\n\n    // In Unified-plan mode, the a=ssrc lines with the msid attribute are not present\n    // in the answers that Chrome and Safari generate for an offer received from Jicofo.\n    // Generate these a=ssrc lines using the msid values from the a=msid line.\n    if (this.options.usesUnifiedPlan && !primarySsrcMsid) {\n        primarySsrcMsid = mLine.msid;\n        var primarySsrcs = mLine.ssrcs;\n        primarySsrcs.forEach(ssrc => {\n            mLine.ssrcs.push({\n                id: ssrc.id,\n                attribute: \"msid\",\n                value: primarySsrcMsid\n            });\n        });\n    }\n\n    // Generate sim layers\n    var simSsrcs = [];\n    for (var i = 0; i < this.options.numOfLayers - 1; ++i) {\n        var simSsrc = generateSSRC();\n        addAssociatedStream(mLine, simSsrc);\n        simSsrcs.push(simSsrc);\n    }\n    mLine.ssrcGroups = mLine.ssrcGroups || [];\n    mLine.ssrcGroups.push({\n        semantics: \"SIM\",\n        ssrcs: primarySsrc + \" \" + simSsrcs.join(\" \")\n    });\n    return mLine;\n}\n\n\n\n// Assumptions:\n//  1) 'mLine' contains only a single primary video source\n//   (i.e. it will not already have simulcast streams inserted)\n//  2) 'mLine' MAY already contain an RTX stream for its video source\n//  3) 'mLine' is in sendrecv or sendonly state\n// Guarantees:\n//  1) return mLine will contain 2 additional simulcast layers\n//   generated\n//  2) if the base video ssrc in mLine has been seen before,\n//   then the same generated simulcast streams from before will\n//   be used again\n//  3) if rtx is enabled for the mLine, all generated simulcast\n//   streams will have rtx streams generated as well\n//  4) if rtx has been generated for a src before, we will generate\n//   the same rtx stream again\nSimulcast.prototype._restoreSimulcast = function(mLine) {\n    // First, find the primary video source in the given\n    // mLine and see if we've seen it before.\n    var primarySsrc;\n    var numSsrcs = mLine.ssrcs && mLine.ssrcs\n        .map(function(ssrcInfo) { return ssrcInfo.id; })\n        .filter(function(ssrc, index, array) {\n            return array.indexOf(ssrc) === index;\n        })\n        .length || 0;\n    var numGroups = (mLine.ssrcGroups && mLine.ssrcGroups.length) || 0;\n\n    if (numSsrcs === 0 || numSsrcs > 2) {\n        // Unsupported scenario\n        return mLine;\n    }\n    if (numSsrcs == 2 && numGroups === 0) {\n        // Unsupported scenario\n        return mLine;\n    }\n\n    if (numSsrcs === 1) {\n        primarySsrc = mLine.ssrcs[0].id;\n    } else {\n        // There must be an FID group, so parse\n        //  that and pull the primary ssrc from there\n        var fidGroup = mLine.ssrcGroups.filter(function(group) { return group.semantics === \"FID\"; })[0];\n        if (fidGroup) {\n            primarySsrc = parseInt(fidGroup.ssrcs.split(\" \")[0]);\n        } else {\n            // Unsupported scenario\n            return mLine;\n        }\n    }\n    console.log(\"SdpSimulcast: current ssrc cache: \", this.ssrcCache);\n    console.log(\"SdpSimulcast: parsed primary ssrc \" + primarySsrc);\n\n    var seenPrimarySsrc = this.ssrcCache.indexOf(primarySsrc) !== -1;\n\n    if (seenPrimarySsrc) {\n        console.log(\"SdpSimulcast: Have seen primary ssrc before, \" +\n            \"filling in data from cache\");\n        mLine = this._fillInSourceDataFromCache(mLine);\n    } else {\n        console.log(\"SdpSimulcast: Have not seen primary ssrc before, \" +\n            \"generating source data\");\n        mLine = this._generateSourceData(mLine, primarySsrc);\n    }\n    // Now update the cache to match whatever we've just put into this sdp\n    this.ssrcCache = this._parseSimLayers(mLine);\n    return mLine;\n}\n\n//endregion\n\n//region \"Public\" functions\n\n/**\n *\n * @param desc\n * @param enableConferenceFlag\n * @returns {RTCSessionDescription}\n */\nSimulcast.prototype.mungeRemoteDescription = function (desc, enableConferenceFlag) {\n\n    if (!validateDescription(desc)) {\n        return desc;\n    }\n\n    var session = transform.parse(desc.sdp);\n\n    var self = this;\n    processVideo(session, function (mLine) {\n\n        // Handle simulcast reception.\n        if (self.options.explodeRemoteSimulcast) {\n            explodeRemoteSimulcast(mLine);\n        } else {\n            implodeRemoteSimulcast(mLine);\n        }\n\n        // Add or remove \"x-google-conference\" from the remote description based on whether the client\n        // has enabled simulcast for the local video source. For cases where we disable simulcast for desktop share,\n        // it is necessary to remove the flag so that Chrome stops sending T1 temporal layers. It also fixes other\n        // issues related to screensharing like https://bugs.chromium.org/p/chromium/issues/detail?id=1093819.\n        if (!self.options.usesUnifiedPlan && enableConferenceFlag) {\n            assertGoogConference(mLine);\n        } else {\n            removeGoogConference(mLine);\n        }\n    });\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: transform.write(session)\n    });\n};\n\n/**\n *\n * NOTE this method should be called only if simulcast is supported by\n * the current browser, otherwise local SDP should not be munged.\n * @param desc\n * @returns {RTCSessionDescription}\n */\nSimulcast.prototype.mungeLocalDescription = function (desc) {\n\n    if (!validateDescription(desc)) {\n        return desc;\n    }\n\n    var session = transform.parse(desc.sdp);\n\n    var self = this;\n    processVideo(session, function (mLine) {\n        if (mLine.direction == 'recvonly' || mLine.direction == 'inactive')\n        {\n            return;\n        }\n        self._restoreSimulcast(mLine);\n    });\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: transform.write(session)\n    });\n};\n\n//endregion\n\nmodule.exports = Simulcast;\n","/* Copyright @ 2015 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * FIXME\n * @param sources FIXME\n * @param order An array of SSRCs which will be used to order the entries in\n * the returned array. Sources whose SSRC appears in 'order' will be added first,\n * in the specified order, and all other sources will be added afterwards (in\n * no specific order).\n * @returns {Array} FIXME\n */\nexports.writeSsrcs = function(sources, order) {\n  var ssrcs = [];\n\n  // expand sources to ssrcs\n  if (typeof sources !== 'undefined' &&\n      Object.keys(sources).length !== 0) {\n\n    if (!Array.isArray(order)) {\n      order = []\n    }\n\n    // Add the sources that appear in 'order' first.\n    for (var i = 0; i < order.length; i++) {\n      var ssrc = order[i];\n      var source = sources[ssrc];\n      Object.keys(source).forEach(function (attribute) {\n        ssrcs.push({\n          id: ssrc,\n          attribute: attribute,\n          value: source[attribute]\n        });\n      });\n    }\n\n    // Now add the rest of the sources.\n    Object.keys(sources).forEach(function (ssrc) {\n      ssrc = parseInt(ssrc); // Object.keys() returns string\n      if (order.indexOf(ssrc) >= 0) {\n        // Already added.\n        return;\n      }\n\n      var source = sources[ssrc];\n      Object.keys(source).forEach(function (attribute) {\n        ssrcs.push({\n          id: ssrc,\n          attribute: attribute,\n          value: source[attribute]\n        });\n      });\n    });\n  }\n\n  return ssrcs;\n};\n\nexports.parseSsrcs = function (mLine) {\n  var sources = {};\n  // group sources attributes by ssrc.\n  if (typeof mLine.ssrcs !== 'undefined' && Array.isArray(mLine.ssrcs)) {\n    mLine.ssrcs.forEach(function (ssrc) {\n      if (!sources[ssrc.id])\n        sources[ssrc.id] = {};\n      sources[ssrc.id][ssrc.attribute] = ssrc.value;\n    });\n  }\n  return sources;\n};\n\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","!function(e,t){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define([],t):\"object\"==typeof exports?exports.bowser=t():e.bowser=t()}(this,(function(){return function(e){var t={};function r(i){if(t[i])return t[i].exports;var n=t[i]={i:i,l:!1,exports:{}};return e[i].call(n.exports,n,n.exports,r),n.l=!0,n.exports}return r.m=e,r.c=t,r.d=function(e,t,i){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},r.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(r.r(i),Object.defineProperty(i,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var n in e)r.d(i,n,function(t){return e[t]}.bind(null,n));return i},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,\"a\",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p=\"\",r(r.s=90)}({17:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i=r(18),n=function(){function e(){}return e.getFirstMatch=function(e,t){var r=t.match(e);return r&&r.length>0&&r[1]||\"\"},e.getSecondMatch=function(e,t){var r=t.match(e);return r&&r.length>1&&r[2]||\"\"},e.matchAndReturnConst=function(e,t,r){if(e.test(t))return r},e.getWindowsVersionName=function(e){switch(e){case\"NT\":return\"NT\";case\"XP\":return\"XP\";case\"NT 5.0\":return\"2000\";case\"NT 5.1\":return\"XP\";case\"NT 5.2\":return\"2003\";case\"NT 6.0\":return\"Vista\";case\"NT 6.1\":return\"7\";case\"NT 6.2\":return\"8\";case\"NT 6.3\":return\"8.1\";case\"NT 10.0\":return\"10\";default:return}},e.getMacOSVersionName=function(e){var t=e.split(\".\").splice(0,2).map((function(e){return parseInt(e,10)||0}));if(t.push(0),10===t[0])switch(t[1]){case 5:return\"Leopard\";case 6:return\"Snow Leopard\";case 7:return\"Lion\";case 8:return\"Mountain Lion\";case 9:return\"Mavericks\";case 10:return\"Yosemite\";case 11:return\"El Capitan\";case 12:return\"Sierra\";case 13:return\"High Sierra\";case 14:return\"Mojave\";case 15:return\"Catalina\";default:return}},e.getAndroidVersionName=function(e){var t=e.split(\".\").splice(0,2).map((function(e){return parseInt(e,10)||0}));if(t.push(0),!(1===t[0]&&t[1]<5))return 1===t[0]&&t[1]<6?\"Cupcake\":1===t[0]&&t[1]>=6?\"Donut\":2===t[0]&&t[1]<2?\"Eclair\":2===t[0]&&2===t[1]?\"Froyo\":2===t[0]&&t[1]>2?\"Gingerbread\":3===t[0]?\"Honeycomb\":4===t[0]&&t[1]<1?\"Ice Cream Sandwich\":4===t[0]&&t[1]<4?\"Jelly Bean\":4===t[0]&&t[1]>=4?\"KitKat\":5===t[0]?\"Lollipop\":6===t[0]?\"Marshmallow\":7===t[0]?\"Nougat\":8===t[0]?\"Oreo\":9===t[0]?\"Pie\":void 0},e.getVersionPrecision=function(e){return e.split(\".\").length},e.compareVersions=function(t,r,i){void 0===i&&(i=!1);var n=e.getVersionPrecision(t),s=e.getVersionPrecision(r),o=Math.max(n,s),a=0,u=e.map([t,r],(function(t){var r=o-e.getVersionPrecision(t),i=t+new Array(r+1).join(\".0\");return e.map(i.split(\".\"),(function(e){return new Array(20-e.length).join(\"0\")+e})).reverse()}));for(i&&(a=o-Math.min(n,s)),o-=1;o>=a;){if(u[0][o]>u[1][o])return 1;if(u[0][o]===u[1][o]){if(o===a)return 0;o-=1}else if(u[0][o]<u[1][o])return-1}},e.map=function(e,t){var r,i=[];if(Array.prototype.map)return Array.prototype.map.call(e,t);for(r=0;r<e.length;r+=1)i.push(t(e[r]));return i},e.getBrowserAlias=function(e){return i.BROWSER_ALIASES_MAP[e]},e.getBrowserTypeByAlias=function(e){return i.BROWSER_MAP[e]||\"\"},e}();t.default=n,e.exports=t.default},18:function(e,t,r){\"use strict\";t.__esModule=!0,t.ENGINE_MAP=t.OS_MAP=t.PLATFORMS_MAP=t.BROWSER_MAP=t.BROWSER_ALIASES_MAP=void 0;t.BROWSER_ALIASES_MAP={\"Amazon Silk\":\"amazon_silk\",\"Android Browser\":\"android\",Bada:\"bada\",BlackBerry:\"blackberry\",Chrome:\"chrome\",Chromium:\"chromium\",Epiphany:\"epiphany\",Firefox:\"firefox\",Focus:\"focus\",Generic:\"generic\",\"Google Search\":\"google_search\",Googlebot:\"googlebot\",\"Internet Explorer\":\"ie\",\"K-Meleon\":\"k_meleon\",Maxthon:\"maxthon\",\"Microsoft Edge\":\"edge\",\"MZ Browser\":\"mz\",\"NAVER Whale Browser\":\"naver\",Opera:\"opera\",\"Opera Coast\":\"opera_coast\",PhantomJS:\"phantomjs\",Puffin:\"puffin\",QupZilla:\"qupzilla\",QQ:\"qq\",QQLite:\"qqlite\",Safari:\"safari\",Sailfish:\"sailfish\",\"Samsung Internet for Android\":\"samsung_internet\",SeaMonkey:\"seamonkey\",Sleipnir:\"sleipnir\",Swing:\"swing\",Tizen:\"tizen\",\"UC Browser\":\"uc\",Vivaldi:\"vivaldi\",\"WebOS Browser\":\"webos\",WeChat:\"wechat\",\"Yandex Browser\":\"yandex\",Roku:\"roku\"};t.BROWSER_MAP={amazon_silk:\"Amazon Silk\",android:\"Android Browser\",bada:\"Bada\",blackberry:\"BlackBerry\",chrome:\"Chrome\",chromium:\"Chromium\",epiphany:\"Epiphany\",firefox:\"Firefox\",focus:\"Focus\",generic:\"Generic\",googlebot:\"Googlebot\",google_search:\"Google Search\",ie:\"Internet Explorer\",k_meleon:\"K-Meleon\",maxthon:\"Maxthon\",edge:\"Microsoft Edge\",mz:\"MZ Browser\",naver:\"NAVER Whale Browser\",opera:\"Opera\",opera_coast:\"Opera Coast\",phantomjs:\"PhantomJS\",puffin:\"Puffin\",qupzilla:\"QupZilla\",qq:\"QQ Browser\",qqlite:\"QQ Browser Lite\",safari:\"Safari\",sailfish:\"Sailfish\",samsung_internet:\"Samsung Internet for Android\",seamonkey:\"SeaMonkey\",sleipnir:\"Sleipnir\",swing:\"Swing\",tizen:\"Tizen\",uc:\"UC Browser\",vivaldi:\"Vivaldi\",webos:\"WebOS Browser\",wechat:\"WeChat\",yandex:\"Yandex Browser\"};t.PLATFORMS_MAP={tablet:\"tablet\",mobile:\"mobile\",desktop:\"desktop\",tv:\"tv\"};t.OS_MAP={WindowsPhone:\"Windows Phone\",Windows:\"Windows\",MacOS:\"macOS\",iOS:\"iOS\",Android:\"Android\",WebOS:\"WebOS\",BlackBerry:\"BlackBerry\",Bada:\"Bada\",Tizen:\"Tizen\",Linux:\"Linux\",ChromeOS:\"Chrome OS\",PlayStation4:\"PlayStation 4\",Roku:\"Roku\"};t.ENGINE_MAP={EdgeHTML:\"EdgeHTML\",Blink:\"Blink\",Trident:\"Trident\",Presto:\"Presto\",Gecko:\"Gecko\",WebKit:\"WebKit\"}},90:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(91))&&i.__esModule?i:{default:i},s=r(18);function o(e,t){for(var r=0;r<t.length;r++){var i=t[r];i.enumerable=i.enumerable||!1,i.configurable=!0,\"value\"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var a=function(){function e(){}var t,r,i;return e.getParser=function(e,t){if(void 0===t&&(t=!1),\"string\"!=typeof e)throw new Error(\"UserAgent should be a string\");return new n.default(e,t)},e.parse=function(e){return new n.default(e).getResult()},t=e,i=[{key:\"BROWSER_MAP\",get:function(){return s.BROWSER_MAP}},{key:\"ENGINE_MAP\",get:function(){return s.ENGINE_MAP}},{key:\"OS_MAP\",get:function(){return s.OS_MAP}},{key:\"PLATFORMS_MAP\",get:function(){return s.PLATFORMS_MAP}}],(r=null)&&o(t.prototype,r),i&&o(t,i),e}();t.default=a,e.exports=t.default},91:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i=u(r(92)),n=u(r(93)),s=u(r(94)),o=u(r(95)),a=u(r(17));function u(e){return e&&e.__esModule?e:{default:e}}var d=function(){function e(e,t){if(void 0===t&&(t=!1),null==e||\"\"===e)throw new Error(\"UserAgent parameter can't be empty\");this._ua=e,this.parsedResult={},!0!==t&&this.parse()}var t=e.prototype;return t.getUA=function(){return this._ua},t.test=function(e){return e.test(this._ua)},t.parseBrowser=function(){var e=this;this.parsedResult.browser={};var t=i.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.browser=t.describe(this.getUA())),this.parsedResult.browser},t.getBrowser=function(){return this.parsedResult.browser?this.parsedResult.browser:this.parseBrowser()},t.getBrowserName=function(e){return e?String(this.getBrowser().name).toLowerCase()||\"\":this.getBrowser().name||\"\"},t.getBrowserVersion=function(){return this.getBrowser().version},t.getOS=function(){return this.parsedResult.os?this.parsedResult.os:this.parseOS()},t.parseOS=function(){var e=this;this.parsedResult.os={};var t=n.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.os=t.describe(this.getUA())),this.parsedResult.os},t.getOSName=function(e){var t=this.getOS().name;return e?String(t).toLowerCase()||\"\":t||\"\"},t.getOSVersion=function(){return this.getOS().version},t.getPlatform=function(){return this.parsedResult.platform?this.parsedResult.platform:this.parsePlatform()},t.getPlatformType=function(e){void 0===e&&(e=!1);var t=this.getPlatform().type;return e?String(t).toLowerCase()||\"\":t||\"\"},t.parsePlatform=function(){var e=this;this.parsedResult.platform={};var t=s.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.platform=t.describe(this.getUA())),this.parsedResult.platform},t.getEngine=function(){return this.parsedResult.engine?this.parsedResult.engine:this.parseEngine()},t.getEngineName=function(e){return e?String(this.getEngine().name).toLowerCase()||\"\":this.getEngine().name||\"\"},t.parseEngine=function(){var e=this;this.parsedResult.engine={};var t=o.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.engine=t.describe(this.getUA())),this.parsedResult.engine},t.parse=function(){return this.parseBrowser(),this.parseOS(),this.parsePlatform(),this.parseEngine(),this},t.getResult=function(){return Object.assign({},this.parsedResult)},t.satisfies=function(e){var t=this,r={},i=0,n={},s=0;if(Object.keys(e).forEach((function(t){var o=e[t];\"string\"==typeof o?(n[t]=o,s+=1):\"object\"==typeof o&&(r[t]=o,i+=1)})),i>0){var o=Object.keys(r),a=o.find((function(e){return t.isOS(e)}));if(a){var u=this.satisfies(r[a]);if(void 0!==u)return u}var d=o.find((function(e){return t.isPlatform(e)}));if(d){var c=this.satisfies(r[d]);if(void 0!==c)return c}}if(s>0){var f=Object.keys(n).find((function(e){return t.isBrowser(e,!0)}));if(void 0!==f)return this.compareVersion(n[f])}},t.isBrowser=function(e,t){void 0===t&&(t=!1);var r=this.getBrowserName().toLowerCase(),i=e.toLowerCase(),n=a.default.getBrowserTypeByAlias(i);return t&&n&&(i=n.toLowerCase()),i===r},t.compareVersion=function(e){var t=[0],r=e,i=!1,n=this.getBrowserVersion();if(\"string\"==typeof n)return\">\"===e[0]||\"<\"===e[0]?(r=e.substr(1),\"=\"===e[1]?(i=!0,r=e.substr(2)):t=[],\">\"===e[0]?t.push(1):t.push(-1)):\"=\"===e[0]?r=e.substr(1):\"~\"===e[0]&&(i=!0,r=e.substr(1)),t.indexOf(a.default.compareVersions(n,r,i))>-1},t.isOS=function(e){return this.getOSName(!0)===String(e).toLowerCase()},t.isPlatform=function(e){return this.getPlatformType(!0)===String(e).toLowerCase()},t.isEngine=function(e){return this.getEngineName(!0)===String(e).toLowerCase()},t.is=function(e){return this.isBrowser(e)||this.isOS(e)||this.isPlatform(e)},t.some=function(e){var t=this;return void 0===e&&(e=[]),e.some((function(e){return t.is(e)}))},e}();t.default=d,e.exports=t.default},92:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i};var s=/version\\/(\\d+(\\.?_?\\d+)+)/i,o=[{test:[/googlebot/i],describe:function(e){var t={name:\"Googlebot\"},r=n.default.getFirstMatch(/googlebot\\/(\\d+(\\.\\d+))/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/opera/i],describe:function(e){var t={name:\"Opera\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:opera)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/opr\\/|opios/i],describe:function(e){var t={name:\"Opera\"},r=n.default.getFirstMatch(/(?:opr|opios)[\\s/](\\S+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/SamsungBrowser/i],describe:function(e){var t={name:\"Samsung Internet for Android\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:SamsungBrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/Whale/i],describe:function(e){var t={name:\"NAVER Whale Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:whale)[\\s/](\\d+(?:\\.\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/MZBrowser/i],describe:function(e){var t={name:\"MZ Browser\"},r=n.default.getFirstMatch(/(?:MZBrowser)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/focus/i],describe:function(e){var t={name:\"Focus\"},r=n.default.getFirstMatch(/(?:focus)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/swing/i],describe:function(e){var t={name:\"Swing\"},r=n.default.getFirstMatch(/(?:swing)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/coast/i],describe:function(e){var t={name:\"Opera Coast\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:coast)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/yabrowser/i],describe:function(e){var t={name:\"Yandex Browser\"},r=n.default.getFirstMatch(/(?:yabrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/ucbrowser/i],describe:function(e){var t={name:\"UC Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:ucbrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/Maxthon|mxios/i],describe:function(e){var t={name:\"Maxthon\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:Maxthon|mxios)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/epiphany/i],describe:function(e){var t={name:\"Epiphany\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:epiphany)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/puffin/i],describe:function(e){var t={name:\"Puffin\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:puffin)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/sleipnir/i],describe:function(e){var t={name:\"Sleipnir\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:sleipnir)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/k-meleon/i],describe:function(e){var t={name:\"K-Meleon\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:k-meleon)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/micromessenger/i],describe:function(e){var t={name:\"WeChat\"},r=n.default.getFirstMatch(/(?:micromessenger)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/qqbrowser/i],describe:function(e){var t={name:/qqbrowserlite/i.test(e)?\"QQ Browser Lite\":\"QQ Browser\"},r=n.default.getFirstMatch(/(?:qqbrowserlite|qqbrowser)[/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/msie|trident/i],describe:function(e){var t={name:\"Internet Explorer\"},r=n.default.getFirstMatch(/(?:msie |rv:)(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/\\sedg\\//i],describe:function(e){var t={name:\"Microsoft Edge\"},r=n.default.getFirstMatch(/\\sedg\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/edg([ea]|ios)/i],describe:function(e){var t={name:\"Microsoft Edge\"},r=n.default.getSecondMatch(/edg([ea]|ios)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/vivaldi/i],describe:function(e){var t={name:\"Vivaldi\"},r=n.default.getFirstMatch(/vivaldi\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/seamonkey/i],describe:function(e){var t={name:\"SeaMonkey\"},r=n.default.getFirstMatch(/seamonkey\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/sailfish/i],describe:function(e){var t={name:\"Sailfish\"},r=n.default.getFirstMatch(/sailfish\\s?browser\\/(\\d+(\\.\\d+)?)/i,e);return r&&(t.version=r),t}},{test:[/silk/i],describe:function(e){var t={name:\"Amazon Silk\"},r=n.default.getFirstMatch(/silk\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/phantom/i],describe:function(e){var t={name:\"PhantomJS\"},r=n.default.getFirstMatch(/phantomjs\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/slimerjs/i],describe:function(e){var t={name:\"SlimerJS\"},r=n.default.getFirstMatch(/slimerjs\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/blackberry|\\bbb\\d+/i,/rim\\stablet/i],describe:function(e){var t={name:\"BlackBerry\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/blackberry[\\d]+\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/(web|hpw)[o0]s/i],describe:function(e){var t={name:\"WebOS Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/w(?:eb)?[o0]sbrowser\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/bada/i],describe:function(e){var t={name:\"Bada\"},r=n.default.getFirstMatch(/dolfin\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/tizen/i],describe:function(e){var t={name:\"Tizen\"},r=n.default.getFirstMatch(/(?:tizen\\s?)?browser\\/(\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/qupzilla/i],describe:function(e){var t={name:\"QupZilla\"},r=n.default.getFirstMatch(/(?:qupzilla)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/firefox|iceweasel|fxios/i],describe:function(e){var t={name:\"Firefox\"},r=n.default.getFirstMatch(/(?:firefox|iceweasel|fxios)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/chromium/i],describe:function(e){var t={name:\"Chromium\"},r=n.default.getFirstMatch(/(?:chromium)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/chrome|crios|crmo/i],describe:function(e){var t={name:\"Chrome\"},r=n.default.getFirstMatch(/(?:chrome|crios|crmo)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/GSA/i],describe:function(e){var t={name:\"Google Search\"},r=n.default.getFirstMatch(/(?:GSA)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r},describe:function(e){var t={name:\"Android Browser\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/playstation 4/i],describe:function(e){var t={name:\"PlayStation 4\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/safari|applewebkit/i],describe:function(e){var t={name:\"Safari\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/.*/i],describe:function(e){var t=-1!==e.search(\"\\\\(\")?/^(.*)\\/(.*)[ \\t]\\((.*)/:/^(.*)\\/(.*) /;return{name:n.default.getFirstMatch(t,e),version:n.default.getSecondMatch(t,e)}}}];t.default=o,e.exports=t.default},93:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:[/Roku\\/DVP/],describe:function(e){var t=n.default.getFirstMatch(/Roku\\/DVP-(\\d+\\.\\d+)/i,e);return{name:s.OS_MAP.Roku,version:t}}},{test:[/windows phone/i],describe:function(e){var t=n.default.getFirstMatch(/windows phone (?:os)?\\s?(\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.WindowsPhone,version:t}}},{test:[/windows/i],describe:function(e){var t=n.default.getFirstMatch(/Windows ((NT|XP)( \\d\\d?.\\d)?)/i,e),r=n.default.getWindowsVersionName(t);return{name:s.OS_MAP.Windows,version:t,versionName:r}}},{test:[/macintosh/i],describe:function(e){var t=n.default.getFirstMatch(/mac os x (\\d+(\\.?_?\\d+)+)/i,e).replace(/[_\\s]/g,\".\"),r=n.default.getMacOSVersionName(t),i={name:s.OS_MAP.MacOS,version:t};return r&&(i.versionName=r),i}},{test:[/(ipod|iphone|ipad)/i],describe:function(e){var t=n.default.getFirstMatch(/os (\\d+([_\\s]\\d+)*) like mac os x/i,e).replace(/[_\\s]/g,\".\");return{name:s.OS_MAP.iOS,version:t}}},{test:function(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r},describe:function(e){var t=n.default.getFirstMatch(/android[\\s/-](\\d+(\\.\\d+)*)/i,e),r=n.default.getAndroidVersionName(t),i={name:s.OS_MAP.Android,version:t};return r&&(i.versionName=r),i}},{test:[/(web|hpw)[o0]s/i],describe:function(e){var t=n.default.getFirstMatch(/(?:web|hpw)[o0]s\\/(\\d+(\\.\\d+)*)/i,e),r={name:s.OS_MAP.WebOS};return t&&t.length&&(r.version=t),r}},{test:[/blackberry|\\bbb\\d+/i,/rim\\stablet/i],describe:function(e){var t=n.default.getFirstMatch(/rim\\stablet\\sos\\s(\\d+(\\.\\d+)*)/i,e)||n.default.getFirstMatch(/blackberry\\d+\\/(\\d+([_\\s]\\d+)*)/i,e)||n.default.getFirstMatch(/\\bbb(\\d+)/i,e);return{name:s.OS_MAP.BlackBerry,version:t}}},{test:[/bada/i],describe:function(e){var t=n.default.getFirstMatch(/bada\\/(\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.Bada,version:t}}},{test:[/tizen/i],describe:function(e){var t=n.default.getFirstMatch(/tizen[/\\s](\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.Tizen,version:t}}},{test:[/linux/i],describe:function(){return{name:s.OS_MAP.Linux}}},{test:[/CrOS/],describe:function(){return{name:s.OS_MAP.ChromeOS}}},{test:[/PlayStation 4/],describe:function(e){var t=n.default.getFirstMatch(/PlayStation 4[/\\s](\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.PlayStation4,version:t}}}];t.default=o,e.exports=t.default},94:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:[/googlebot/i],describe:function(){return{type:\"bot\",vendor:\"Google\"}}},{test:[/huawei/i],describe:function(e){var t=n.default.getFirstMatch(/(can-l01)/i,e)&&\"Nova\",r={type:s.PLATFORMS_MAP.mobile,vendor:\"Huawei\"};return t&&(r.model=t),r}},{test:[/nexus\\s*(?:7|8|9|10).*/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Nexus\"}}},{test:[/ipad/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Apple\",model:\"iPad\"}}},{test:[/kftt build/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Amazon\",model:\"Kindle Fire HD 7\"}}},{test:[/silk/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Amazon\"}}},{test:[/tablet(?! pc)/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet}}},{test:function(e){var t=e.test(/ipod|iphone/i),r=e.test(/like (ipod|iphone)/i);return t&&!r},describe:function(e){var t=n.default.getFirstMatch(/(ipod|iphone)/i,e);return{type:s.PLATFORMS_MAP.mobile,vendor:\"Apple\",model:t}}},{test:[/nexus\\s*[0-6].*/i,/galaxy nexus/i],describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"Nexus\"}}},{test:[/[^-]mobi/i],describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"blackberry\"===e.getBrowserName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"BlackBerry\"}}},{test:function(e){return\"bada\"===e.getBrowserName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"windows phone\"===e.getBrowserName()},describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"Microsoft\"}}},{test:function(e){var t=Number(String(e.getOSVersion()).split(\".\")[0]);return\"android\"===e.getOSName(!0)&&t>=3},describe:function(){return{type:s.PLATFORMS_MAP.tablet}}},{test:function(e){return\"android\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"macos\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop,vendor:\"Apple\"}}},{test:function(e){return\"windows\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop}}},{test:function(e){return\"linux\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop}}},{test:function(e){return\"playstation 4\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.tv}}},{test:function(e){return\"roku\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.tv}}}];t.default=o,e.exports=t.default},95:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:function(e){return\"microsoft edge\"===e.getBrowserName(!0)},describe:function(e){if(/\\sedg\\//i.test(e))return{name:s.ENGINE_MAP.Blink};var t=n.default.getFirstMatch(/edge\\/(\\d+(\\.?_?\\d+)+)/i,e);return{name:s.ENGINE_MAP.EdgeHTML,version:t}}},{test:[/trident/i],describe:function(e){var t={name:s.ENGINE_MAP.Trident},r=n.default.getFirstMatch(/trident\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){return e.test(/presto/i)},describe:function(e){var t={name:s.ENGINE_MAP.Presto},r=n.default.getFirstMatch(/presto\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){var t=e.test(/gecko/i),r=e.test(/like gecko/i);return t&&!r},describe:function(e){var t={name:s.ENGINE_MAP.Gecko},r=n.default.getFirstMatch(/gecko\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/(apple)?webkit\\/537\\.36/i],describe:function(){return{name:s.ENGINE_MAP.Blink}}},{test:[/(apple)?webkit/i],describe:function(e){var t={name:s.ENGINE_MAP.WebKit},r=n.default.getFirstMatch(/webkit\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}}];t.default=o,e.exports=t.default}})}));","/*!\n * currentExecutingScript\n * Get the currently executing script, regardless of its source/trigger/synchronicity. Similar to HTML5's `document.currentScript` but arguably much more useful!\n * Copyright (c) 2015 James M. Greene\n * Licensed MIT\n * https://github.com/JamesMGreene/currentExecutingScript\n * v0.1.3\n */\n(function(root, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([], factory);\n  } else if (typeof exports === \"object\") {\n    // CommonJS-like environments that support `module.exports`,\n    // like Node.js. Does not work with strict CommonJS!\n    module.exports = factory();\n  } else {\n    // Browser globals (`root` is `window`)\n    root.currentExecutingScript = factory();\n  }\n}(\n  // Current context/scope\n  this || window,\n\n  // Factory function to return the export\n  function() {\n\nvar scriptReadyRegex = /^(interactive|loaded|complete)$/;\n\n// This page's URL (minus query string and fragment identifer hash, if any)\nvar fullPageUrl = !!window.location ? window.location.href : null;\nvar pageUrl = fullPageUrl ? fullPageUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\") || null : null;\n\n// Live NodeList collection\nvar scripts = document.getElementsByTagName(\"script\");\n\n// Check if the browser supports the `readyState` property on `script` elements\nvar supportsScriptReadyState = \"readyState\" in (scripts[0] || document.createElement(\"script\"));\n\n// Lousy browser detection for [not] Opera\nvar isNotOpera = !window.opera || window.opera.toString() !== \"[object Opera]\";\n\n// Detect if `document.currentScript` is supported\nvar hasNativeCurrentScriptAccessor = \"currentScript\" in document;\n\nvar originalStackDepthConfig;\n// Detect if the V8 Error Stack Trace API is supported\nif (\"stackTraceLimit\" in Error && Error.stackTraceLimit !== Infinity) {\n  originalStackDepthConfig = Error.stackTraceLimit;\n  Error.stackTraceLimit = Infinity;\n}\n\n\n// In some browsers (e.g. Chrome), you can get the current stack from an Error\n// object instance without needing to throw it. Avoiding an unnecessary\n// use of `throw` saves time and performance.\nvar hasStackBeforeThrowing = false,\n    hasStackAfterThrowing = false;\n(function() {\n  try {\n    var err = new Error();\n    hasStackBeforeThrowing = typeof err.stack === \"string\" && !!err.stack;\n    throw err;\n  }\n  catch (thrownErr) {\n    hasStackAfterThrowing = typeof thrownErr.stack === \"string\" && !!thrownErr.stack;\n  }\n})();\n\n\n// Normalize whitespace within a string\nfunction normalizeWhitespace(str) {\n  return str ? str.replace(/^\\s+$|\\s+$/g, \"\").replace(/\\s\\s+/g, \" \") : \"\";\n}\n\n// Get script object based on the `src` URL\nfunction getScriptFromUrl(url, eligibleScripts) {\n  var i,\n      script = null;\n\n  eligibleScripts = eligibleScripts || scripts;\n\n  if (typeof url === \"string\" && url) {\n    for (i = eligibleScripts.length; i--; ) {\n      if (eligibleScripts[i].src === url) {\n        // NOTE: Could check if the same script URL is used by more than one `script` element\n        // here... but let's not. That would yield less useful results in \"loose\" detection. ;)\n        script = eligibleScripts[i];\n        break;\n      }\n    }\n  }\n  return script;\n}\n\n// Get script object based on the caller function's source code body (text)\nfunction getInlineScriptFromCallerSource(callerFnSource, eligibleScripts) {\n  var i, inlineScriptText,\n      script = null,\n      callerSourceText = normalizeWhitespace(callerFnSource);\n\n  eligibleScripts = eligibleScripts || scripts;\n\n  if (callerFnSource && callerSourceText) {\n    for (i = eligibleScripts.length; i--; ) {\n      // Only look at inline scripts\n      if (!eligibleScripts[i].hasAttribute(\"src\")) {\n        inlineScriptText = normalizeWhitespace(eligibleScripts[i].text);\n        if (inlineScriptText.indexOf(callerSourceText) !== -1) {\n          // If more than one match is found, don't return any\n          if (script) {\n            script = null;\n            break;\n          }\n          script = eligibleScripts[i];\n        }\n      }\n    }\n  }\n\n  return script;\n}\n\n// If there is only a single inline script on the page, return it; otherwise `null`\nfunction getSoleInlineScript(eligibleScripts) {\n  var i, len,\n      script = null;\n  eligibleScripts = eligibleScripts || scripts;\n  for (i = 0, len = eligibleScripts.length; i < len; i++) {\n    if (!eligibleScripts[i].hasAttribute(\"src\")) {\n      if (script) {\n        script = null;\n        break;\n      }\n      script = eligibleScripts[i];\n    }\n  }\n  return script;\n}\n\n// Get the currently executing script URL from an Error stack trace\nfunction getScriptUrlFromStack(stack, skipStackDepth) {\n  var matches, remainingStack,\n      url = null,\n      ignoreMessage = typeof skipStackDepth === \"number\";\n  skipStackDepth = ignoreMessage ? Math.round(skipStackDepth) : 0;\n  if (typeof stack === \"string\" && stack) {\n    if (ignoreMessage) {\n      matches = stack.match(/(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n    }\n    else {\n      matches = stack.match(/^(?:|[^:@]*@|.+\\)@(?=data:text\\/javascript|blob|http[s]?|file)|.+?\\s+(?: at |@)(?:[^:\\(]+ )*[\\(]?)(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n\n      if (!(matches && matches[1])) {\n        matches = stack.match(/\\)@(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n      }\n    }\n\n    if (matches && matches[1]) {\n      if (skipStackDepth > 0) {\n        remainingStack = stack.slice(stack.indexOf(matches[0]) + matches[0].length);\n        url = getScriptUrlFromStack(remainingStack, (skipStackDepth - 1));\n      }\n      else {\n        url = matches[1];\n      }\n    }\n\n    // TODO: Handle more edge cases!\n    // Fixes #1\n    // See https://github.com/JamesMGreene/currentExecutingScript/issues/1\n\n    // ???\n\n  }\n  return url;\n}\n\n\n// Get the farthest currently executing (i.e. yes, EXECUTING) `script` DOM\n// element for the caller function, regardless of whether it is that `script`\n// DOM element is currently being evaluated for the first time. The farthest\n// currently executing `script` DOM element would typically be considered the\n// originator of the current execution stack.\nfunction _farthestExecutingScript() {\n  /*jshint noarg:false */\n\n  // TODO: Implement!\n  // Fixes #3\n  // See https://github.com/JamesMGreene/currentExecutingScript/issues/3\n  return null;\n\n/*\n  // Yes, this IS possible, i.e. if a script removes other scripts (or itself)\n  if (scripts.length === 0) {\n    return null;\n  }\n\n  // Guaranteed accurate in IE 6-10.\n  // Not accurate/supported in any other browsers.\n  if (isNotOpera && supportsScriptReadyState) {\n    for (var i = scripts.length; i--; ) {\n      if (scripts[i].readyState === \"interactive\") {\n        return scripts[i];\n      }\n    }\n  }\n\n  var stack,\n      e = new Error();\n  if (hasStackBeforeThrowing) {\n    stack = e.stack;\n  }\n  if (!stack && hasStackAfterThrowing) {\n    try {\n      throw e;\n    }\n    catch (err) {\n      // NOTE: Cannot use `err.sourceURL` or `err.fileName` as they will always be THIS script\n      stack = err.stack;\n    }\n  }\n  if (stack) {\n    var url = getScriptUrlFromStack(stack, skipStackDepth);\n    var script = getScriptFromUrl(url, scripts );\n    if (!script && pageUrl && url === pageUrl) {\n      // Try to find the correct inline script by searching through\n      // inline scripts' text content for the caller function's source\n      // code to be present. If the caller function's source code is\n      // not available, see if there is only one inline script element\n      // in the DOM and return that (even though it may be wrong)\n\n      // TODO: Implement!\n      // Fixes #4 in part\n      // See https://github.com/JamesMGreene/currentExecutingScript/issues/4\n\n      var callerFn = _farthestExecutingScript.caller || null,\n          callerFnStack = [],\n          callerFnSource = null;\n\n      while (callerFn) {\n        callerFnStack.push(callerFn);\n        callerFn = callerFn.caller || null;\n      }\n      callerFn = callerFnStack.slice(-1)[0];\n      callerFnSource = callerFn ? (\"\" + callerFn) : null;\n\n\n      if (callerFnSource) {\n        script = getInlineScriptFromCallerSource(callerFnSource);\n      }\n      else {\n        // NOTE: This is a loose assumption that could be inaccurate!\n        //\n        // Inaccuracies:\n        //  - If the inline script that initiated the call was also removed from the DOM.\n        //  - If the call was initiated by an element's inline event handler,\n        //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n        script = getSoleInlineScript();\n      }\n    }\n    return script;\n  }\n\n  // NOTE: This is a loose assumption that could be inaccurate!\n  //\n  // Inaccuracies:\n  //  - If a script is created dynamically and appended to some position\n  //    other than the very end of the document.\n  //  - If multiple scripts are created dynamically and all appended to the\n  //    same position within the document (and do not have their `async` attributes\n  //    set to `false`, at least in browsers that support async script evaluation.\n  //    other than the very end of the document.\n  //  - If any scripts are added with the `async` attribute set to `true` in a browser\n  //    that supports it.\n  //  - May get confused by `script` elements within `svg` elements\n  return scripts[scripts.length - 1] || null;\n*/\n}\n\n\n// Get the originating currently executing (i.e. yes, EXECUTING) `script` DOM\n// element or attribute node (e.g. `onclick`) for the caller function,\n// regardless of whether it is that `script` DOM element is currently being\n// evaluated for the first time. The originating currently executing `script`\n// DOM element [or attribute node] is the originator of the current execution stack.\nfunction _originatingExecutingScript() {\n  // TODO: Implement!\n  // Fixes #2\n  // See https://github.com/JamesMGreene/currentExecutingScript/issues/2\n  return null;\n}\n\n// Get the nearest currently executing (i.e. yes, EXECUTING) `script` DOM\n// element for the caller function, regardless of whether it is that `script`\n// DOM element is currently being evaluated for the first time.\nfunction _nearestExecutingScript() {\n  /*jshint noarg:false */\n\n  // Yes, this IS possible, i.e. if a script removes other scripts (or itself)\n  if (scripts.length === 0) {\n    return null;\n  }\n\n  var i, e, stack, url, script,\n      eligibleScripts = [],\n      skipStackDepth = _nearestExecutingScript.skipStackDepth || 1,\n\n      // TODO: Implement!\n      // Fixes #4 in part\n      // See https://github.com/JamesMGreene/currentExecutingScript/issues/4\n      callerFnSource = null;  //(\"\" + (_nearestExecutingScript.caller || \"\")) || null;\n\n  // This part will only help in IE 6-10.\n  for (i = 0; i < scripts.length; i++) {\n    if (isNotOpera && supportsScriptReadyState) {\n      if (scriptReadyRegex.test(scripts[i].readyState)) {\n        eligibleScripts.push(scripts[i]);\n      }\n    }\n    else {\n      eligibleScripts.push(scripts[i]);\n    }\n  }\n\n  e = new Error();\n  if (hasStackBeforeThrowing) {\n    stack = e.stack;\n  }\n  if (!stack && hasStackAfterThrowing) {\n    try {\n      throw e;\n    }\n    catch (err) {\n      // NOTE: Cannot use `err.sourceURL` or `err.fileName` as they will always be THIS script\n      stack = err.stack;\n    }\n  }\n\n  if (stack) {\n    url = getScriptUrlFromStack(stack, skipStackDepth);\n    script = getScriptFromUrl(url, eligibleScripts);\n\n    if (!script && pageUrl && url === pageUrl) {\n      // Try to find the correct inline script by searching through\n      // inline scripts' text content for the caller function's source\n      // code to be present.\n      if (callerFnSource) {\n        script = getInlineScriptFromCallerSource(callerFnSource, eligibleScripts);\n      }\n      // If the caller function's source code is not available, see if\n      // there is only one inline script element in the DOM and return\n      // that (even though it may be wrong)...\n      else {\n        // NOTE: This is a loose assumption that could be inaccurate!\n        //\n        // Inaccuracies:\n        //  - If the inline script that initiated the call was also removed from the DOM.\n        //  - If the call was initiated by an element's inline event handler,\n        //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n        script = getSoleInlineScript(eligibleScripts);\n      }\n    }\n  }\n\n  //\n  // Welcome to the Island of Inaccurate Assumptions!\n  // NOTE: ALL of the following are loose assumptions that could be inaccurate!\n  //\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If the inline script that initiated the call was also removed from the DOM.\n    //  - If the call was initiated by an element's inline event handler,\n    //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n    if (eligibleScripts.length === 1) {\n      script = eligibleScripts[0];\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    if (hasNativeCurrentScriptAccessor) {\n      script = document.currentScript;\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    if (isNotOpera && supportsScriptReadyState) {\n      for (i = eligibleScripts.length; i--; ) {\n        if (eligibleScripts[i].readyState === \"interactive\") {\n          script = eligibleScripts[i];\n          break;\n        }\n      }\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If a script is created dynamically and appended to some position\n    //    other than the very end of the document.\n    //  - If multiple scripts are created dynamically and all appended to the\n    //    same position within the document (and do not have their `async` attributes\n    //    set to `false`, at least in browsers that support async script evaluation.\n    //    other than the very end of the document.\n    //  - If any scripts are added with the `async` attribute set to `true` in a browser\n    //    that supports it.\n    //  - May get confused by `script` elements within `svg` elements\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    //    ```\n    script = eligibleScripts[eligibleScripts.length - 1] || null;\n  }\n\n  return script;\n}\n\n// Default stack depth to skip over when analyzing call stack frames\n_nearestExecutingScript.skipStackDepth = 1;\n\n\n\n    //\n    // Export the API\n    //\n    var currentExecutingScript    = _nearestExecutingScript;      // default\n    currentExecutingScript.near   = _nearestExecutingScript;\n    currentExecutingScript.far    = _farthestExecutingScript;\n    currentExecutingScript.origin = _originatingExecutingScript;\n\n\n    // Just return a value to define the module export.\n    // This example returns an object, but the module\n    // can return a function as the exported value.\n    return currentExecutingScript;\n  })\n);\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function errorListener(err) {\n      emitter.removeListener(name, resolver);\n      reject(err);\n    }\n\n    function resolver() {\n      if (typeof emitter.removeListener === 'function') {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n\n    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\n    if (name !== 'error') {\n      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\n    }\n  });\n}\n\nfunction addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n  if (typeof emitter.on === 'function') {\n    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);\n  }\n}\n\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n  if (typeof emitter.on === 'function') {\n    if (flags.once) {\n      emitter.once(name, listener);\n    } else {\n      emitter.on(name, listener);\n    }\n  } else if (typeof emitter.addEventListener === 'function') {\n    // EventTarget does not have `error` event semantics like Node\n    // EventEmitters, we do not listen for `error` events here.\n    emitter.addEventListener(name, function wrapListener(arg) {\n      // IE does not have builtin `{ once: true }` support so we\n      // have to do it manually.\n      if (flags.once) {\n        emitter.removeEventListener(name, wrapListener);\n      }\n      listener(arg);\n    });\n  } else {\n    throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n  }\n}\n","/**\n * [js-md5]{@link https://github.com/emn178/js-md5}\n *\n * @namespace md5\n * @version 0.7.3\n * @author Chen, Yi-Cyuan [emn178@gmail.com]\n * @copyright Chen, Yi-Cyuan 2014-2017\n * @license MIT\n */\n(function () {\n  'use strict';\n\n  var ERROR = 'input is invalid type';\n  var WINDOW = typeof window === 'object';\n  var root = WINDOW ? window : {};\n  if (root.JS_MD5_NO_WINDOW) {\n    WINDOW = false;\n  }\n  var WEB_WORKER = !WINDOW && typeof self === 'object';\n  var NODE_JS = !root.JS_MD5_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;\n  if (NODE_JS) {\n    root = global;\n  } else if (WEB_WORKER) {\n    root = self;\n  }\n  var COMMON_JS = !root.JS_MD5_NO_COMMON_JS && typeof module === 'object' && module.exports;\n  var AMD = typeof define === 'function' && define.amd;\n  var ARRAY_BUFFER = !root.JS_MD5_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';\n  var HEX_CHARS = '0123456789abcdef'.split('');\n  var EXTRA = [128, 32768, 8388608, -2147483648];\n  var SHIFT = [0, 8, 16, 24];\n  var OUTPUT_TYPES = ['hex', 'array', 'digest', 'buffer', 'arrayBuffer', 'base64'];\n  var BASE64_ENCODE_CHAR = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');\n\n  var blocks = [], buffer8;\n  if (ARRAY_BUFFER) {\n    var buffer = new ArrayBuffer(68);\n    buffer8 = new Uint8Array(buffer);\n    blocks = new Uint32Array(buffer);\n  }\n\n  if (root.JS_MD5_NO_NODE_JS || !Array.isArray) {\n    Array.isArray = function (obj) {\n      return Object.prototype.toString.call(obj) === '[object Array]';\n    };\n  }\n\n  if (ARRAY_BUFFER && (root.JS_MD5_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {\n    ArrayBuffer.isView = function (obj) {\n      return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;\n    };\n  }\n\n  /**\n   * @method hex\n   * @memberof md5\n   * @description Output hash as hex string\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {String} Hex string\n   * @example\n   * md5.hex('The quick brown fox jumps over the lazy dog');\n   * // equal to\n   * md5('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method digest\n   * @memberof md5\n   * @description Output hash as bytes array\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Array} Bytes array\n   * @example\n   * md5.digest('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method array\n   * @memberof md5\n   * @description Output hash as bytes array\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Array} Bytes array\n   * @example\n   * md5.array('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method arrayBuffer\n   * @memberof md5\n   * @description Output hash as ArrayBuffer\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @example\n   * md5.arrayBuffer('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method buffer\n   * @deprecated This maybe confuse with Buffer in node.js. Please use arrayBuffer instead.\n   * @memberof md5\n   * @description Output hash as ArrayBuffer\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @example\n   * md5.buffer('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method base64\n   * @memberof md5\n   * @description Output hash as base64 string\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {String} base64 string\n   * @example\n   * md5.base64('The quick brown fox jumps over the lazy dog');\n   */\n  var createOutputMethod = function (outputType) {\n    return function (message) {\n      return new Md5(true).update(message)[outputType]();\n    };\n  };\n\n  /**\n   * @method create\n   * @memberof md5\n   * @description Create Md5 object\n   * @returns {Md5} Md5 object.\n   * @example\n   * var hash = md5.create();\n   */\n  /**\n   * @method update\n   * @memberof md5\n   * @description Create and update Md5 object\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Md5} Md5 object.\n   * @example\n   * var hash = md5.update('The quick brown fox jumps over the lazy dog');\n   * // equal to\n   * var hash = md5.create();\n   * hash.update('The quick brown fox jumps over the lazy dog');\n   */\n  var createMethod = function () {\n    var method = createOutputMethod('hex');\n    if (NODE_JS) {\n      method = nodeWrap(method);\n    }\n    method.create = function () {\n      return new Md5();\n    };\n    method.update = function (message) {\n      return method.create().update(message);\n    };\n    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {\n      var type = OUTPUT_TYPES[i];\n      method[type] = createOutputMethod(type);\n    }\n    return method;\n  };\n\n  var nodeWrap = function (method) {\n    var crypto = eval(\"require('crypto')\");\n    var Buffer = eval(\"require('buffer').Buffer\");\n    var nodeMethod = function (message) {\n      if (typeof message === 'string') {\n        return crypto.createHash('md5').update(message, 'utf8').digest('hex');\n      } else {\n        if (message === null || message === undefined) {\n          throw ERROR;\n        } else if (message.constructor === ArrayBuffer) {\n          message = new Uint8Array(message);\n        }\n      }\n      if (Array.isArray(message) || ArrayBuffer.isView(message) ||\n        message.constructor === Buffer) {\n        return crypto.createHash('md5').update(new Buffer(message)).digest('hex');\n      } else {\n        return method(message);\n      }\n    };\n    return nodeMethod;\n  };\n\n  /**\n   * Md5 class\n   * @class Md5\n   * @description This is internal class.\n   * @see {@link md5.create}\n   */\n  function Md5(sharedMemory) {\n    if (sharedMemory) {\n      blocks[0] = blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n      blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n      blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n      blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n      this.blocks = blocks;\n      this.buffer8 = buffer8;\n    } else {\n      if (ARRAY_BUFFER) {\n        var buffer = new ArrayBuffer(68);\n        this.buffer8 = new Uint8Array(buffer);\n        this.blocks = new Uint32Array(buffer);\n      } else {\n        this.blocks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n      }\n    }\n    this.h0 = this.h1 = this.h2 = this.h3 = this.start = this.bytes = this.hBytes = 0;\n    this.finalized = this.hashed = false;\n    this.first = true;\n  }\n\n  /**\n   * @method update\n   * @memberof Md5\n   * @instance\n   * @description Update hash\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Md5} Md5 object.\n   * @see {@link md5.update}\n   */\n  Md5.prototype.update = function (message) {\n    if (this.finalized) {\n      return;\n    }\n\n    var notString, type = typeof message;\n    if (type !== 'string') {\n      if (type === 'object') {\n        if (message === null) {\n          throw ERROR;\n        } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {\n          message = new Uint8Array(message);\n        } else if (!Array.isArray(message)) {\n          if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {\n            throw ERROR;\n          }\n        }\n      } else {\n        throw ERROR;\n      }\n      notString = true;\n    }\n    var code, index = 0, i, length = message.length, blocks = this.blocks;\n    var buffer8 = this.buffer8;\n\n    while (index < length) {\n      if (this.hashed) {\n        this.hashed = false;\n        blocks[0] = blocks[16];\n        blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n        blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n        blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n        blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n      }\n\n      if (notString) {\n        if (ARRAY_BUFFER) {\n          for (i = this.start; index < length && i < 64; ++index) {\n            buffer8[i++] = message[index];\n          }\n        } else {\n          for (i = this.start; index < length && i < 64; ++index) {\n            blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];\n          }\n        }\n      } else {\n        if (ARRAY_BUFFER) {\n          for (i = this.start; index < length && i < 64; ++index) {\n            code = message.charCodeAt(index);\n            if (code < 0x80) {\n              buffer8[i++] = code;\n            } else if (code < 0x800) {\n              buffer8[i++] = 0xc0 | (code >> 6);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            } else if (code < 0xd800 || code >= 0xe000) {\n              buffer8[i++] = 0xe0 | (code >> 12);\n              buffer8[i++] = 0x80 | ((code >> 6) & 0x3f);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            } else {\n              code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\n              buffer8[i++] = 0xf0 | (code >> 18);\n              buffer8[i++] = 0x80 | ((code >> 12) & 0x3f);\n              buffer8[i++] = 0x80 | ((code >> 6) & 0x3f);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            }\n          }\n        } else {\n          for (i = this.start; index < length && i < 64; ++index) {\n            code = message.charCodeAt(index);\n            if (code < 0x80) {\n              blocks[i >> 2] |= code << SHIFT[i++ & 3];\n            } else if (code < 0x800) {\n              blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            } else if (code < 0xd800 || code >= 0xe000) {\n              blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            } else {\n              code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\n              blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            }\n          }\n        }\n      }\n      this.lastByteIndex = i;\n      this.bytes += i - this.start;\n      if (i >= 64) {\n        this.start = i - 64;\n        this.hash();\n        this.hashed = true;\n      } else {\n        this.start = i;\n      }\n    }\n    if (this.bytes > 4294967295) {\n      this.hBytes += this.bytes / 4294967296 << 0;\n      this.bytes = this.bytes % 4294967296;\n    }\n    return this;\n  };\n\n  Md5.prototype.finalize = function () {\n    if (this.finalized) {\n      return;\n    }\n    this.finalized = true;\n    var blocks = this.blocks, i = this.lastByteIndex;\n    blocks[i >> 2] |= EXTRA[i & 3];\n    if (i >= 56) {\n      if (!this.hashed) {\n        this.hash();\n      }\n      blocks[0] = blocks[16];\n      blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n      blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n      blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n      blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n    }\n    blocks[14] = this.bytes << 3;\n    blocks[15] = this.hBytes << 3 | this.bytes >>> 29;\n    this.hash();\n  };\n\n  Md5.prototype.hash = function () {\n    var a, b, c, d, bc, da, blocks = this.blocks;\n\n    if (this.first) {\n      a = blocks[0] - 680876937;\n      a = (a << 7 | a >>> 25) - 271733879 << 0;\n      d = (-1732584194 ^ a & 2004318071) + blocks[1] - 117830708;\n      d = (d << 12 | d >>> 20) + a << 0;\n      c = (-271733879 ^ (d & (a ^ -271733879))) + blocks[2] - 1126478375;\n      c = (c << 17 | c >>> 15) + d << 0;\n      b = (a ^ (c & (d ^ a))) + blocks[3] - 1316259209;\n      b = (b << 22 | b >>> 10) + c << 0;\n    } else {\n      a = this.h0;\n      b = this.h1;\n      c = this.h2;\n      d = this.h3;\n      a += (d ^ (b & (c ^ d))) + blocks[0] - 680876936;\n      a = (a << 7 | a >>> 25) + b << 0;\n      d += (c ^ (a & (b ^ c))) + blocks[1] - 389564586;\n      d = (d << 12 | d >>> 20) + a << 0;\n      c += (b ^ (d & (a ^ b))) + blocks[2] + 606105819;\n      c = (c << 17 | c >>> 15) + d << 0;\n      b += (a ^ (c & (d ^ a))) + blocks[3] - 1044525330;\n      b = (b << 22 | b >>> 10) + c << 0;\n    }\n\n    a += (d ^ (b & (c ^ d))) + blocks[4] - 176418897;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[5] + 1200080426;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[6] - 1473231341;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[7] - 45705983;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (d ^ (b & (c ^ d))) + blocks[8] + 1770035416;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[9] - 1958414417;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[10] - 42063;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[11] - 1990404162;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (d ^ (b & (c ^ d))) + blocks[12] + 1804603682;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[13] - 40341101;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[14] - 1502002290;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[15] + 1236535329;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[1] - 165796510;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[6] - 1069501632;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[11] + 643717713;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[0] - 373897302;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[5] - 701558691;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[10] + 38016083;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[15] - 660478335;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[4] - 405537848;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[9] + 568446438;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[14] - 1019803690;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[3] - 187363961;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[8] + 1163531501;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[13] - 1444681467;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[2] - 51403784;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[7] + 1735328473;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[12] - 1926607734;\n    b = (b << 20 | b >>> 12) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[5] - 378558;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[8] - 2022574463;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[11] + 1839030562;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[14] - 35309556;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[1] - 1530992060;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[4] + 1272893353;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[7] - 155497632;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[10] - 1094730640;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[13] + 681279174;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[0] - 358537222;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[3] - 722521979;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[6] + 76029189;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[9] - 640364487;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[12] - 421815835;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[15] + 530742520;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[2] - 995338651;\n    b = (b << 23 | b >>> 9) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[0] - 198630844;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[7] + 1126891415;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[14] - 1416354905;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[5] - 57434055;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[12] + 1700485571;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[3] - 1894986606;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[10] - 1051523;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[1] - 2054922799;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[8] + 1873313359;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[15] - 30611744;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[6] - 1560198380;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[13] + 1309151649;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[4] - 145523070;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[11] - 1120210379;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[2] + 718787259;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[9] - 343485551;\n    b = (b << 21 | b >>> 11) + c << 0;\n\n    if (this.first) {\n      this.h0 = a + 1732584193 << 0;\n      this.h1 = b - 271733879 << 0;\n      this.h2 = c - 1732584194 << 0;\n      this.h3 = d + 271733878 << 0;\n      this.first = false;\n    } else {\n      this.h0 = this.h0 + a << 0;\n      this.h1 = this.h1 + b << 0;\n      this.h2 = this.h2 + c << 0;\n      this.h3 = this.h3 + d << 0;\n    }\n  };\n\n  /**\n   * @method hex\n   * @memberof Md5\n   * @instance\n   * @description Output hash as hex string\n   * @returns {String} Hex string\n   * @see {@link md5.hex}\n   * @example\n   * hash.hex();\n   */\n  Md5.prototype.hex = function () {\n    this.finalize();\n\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3;\n\n    return HEX_CHARS[(h0 >> 4) & 0x0F] + HEX_CHARS[h0 & 0x0F] +\n      HEX_CHARS[(h0 >> 12) & 0x0F] + HEX_CHARS[(h0 >> 8) & 0x0F] +\n      HEX_CHARS[(h0 >> 20) & 0x0F] + HEX_CHARS[(h0 >> 16) & 0x0F] +\n      HEX_CHARS[(h0 >> 28) & 0x0F] + HEX_CHARS[(h0 >> 24) & 0x0F] +\n      HEX_CHARS[(h1 >> 4) & 0x0F] + HEX_CHARS[h1 & 0x0F] +\n      HEX_CHARS[(h1 >> 12) & 0x0F] + HEX_CHARS[(h1 >> 8) & 0x0F] +\n      HEX_CHARS[(h1 >> 20) & 0x0F] + HEX_CHARS[(h1 >> 16) & 0x0F] +\n      HEX_CHARS[(h1 >> 28) & 0x0F] + HEX_CHARS[(h1 >> 24) & 0x0F] +\n      HEX_CHARS[(h2 >> 4) & 0x0F] + HEX_CHARS[h2 & 0x0F] +\n      HEX_CHARS[(h2 >> 12) & 0x0F] + HEX_CHARS[(h2 >> 8) & 0x0F] +\n      HEX_CHARS[(h2 >> 20) & 0x0F] + HEX_CHARS[(h2 >> 16) & 0x0F] +\n      HEX_CHARS[(h2 >> 28) & 0x0F] + HEX_CHARS[(h2 >> 24) & 0x0F] +\n      HEX_CHARS[(h3 >> 4) & 0x0F] + HEX_CHARS[h3 & 0x0F] +\n      HEX_CHARS[(h3 >> 12) & 0x0F] + HEX_CHARS[(h3 >> 8) & 0x0F] +\n      HEX_CHARS[(h3 >> 20) & 0x0F] + HEX_CHARS[(h3 >> 16) & 0x0F] +\n      HEX_CHARS[(h3 >> 28) & 0x0F] + HEX_CHARS[(h3 >> 24) & 0x0F];\n  };\n\n  /**\n   * @method toString\n   * @memberof Md5\n   * @instance\n   * @description Output hash as hex string\n   * @returns {String} Hex string\n   * @see {@link md5.hex}\n   * @example\n   * hash.toString();\n   */\n  Md5.prototype.toString = Md5.prototype.hex;\n\n  /**\n   * @method digest\n   * @memberof Md5\n   * @instance\n   * @description Output hash as bytes array\n   * @returns {Array} Bytes array\n   * @see {@link md5.digest}\n   * @example\n   * hash.digest();\n   */\n  Md5.prototype.digest = function () {\n    this.finalize();\n\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3;\n    return [\n      h0 & 0xFF, (h0 >> 8) & 0xFF, (h0 >> 16) & 0xFF, (h0 >> 24) & 0xFF,\n      h1 & 0xFF, (h1 >> 8) & 0xFF, (h1 >> 16) & 0xFF, (h1 >> 24) & 0xFF,\n      h2 & 0xFF, (h2 >> 8) & 0xFF, (h2 >> 16) & 0xFF, (h2 >> 24) & 0xFF,\n      h3 & 0xFF, (h3 >> 8) & 0xFF, (h3 >> 16) & 0xFF, (h3 >> 24) & 0xFF\n    ];\n  };\n\n  /**\n   * @method array\n   * @memberof Md5\n   * @instance\n   * @description Output hash as bytes array\n   * @returns {Array} Bytes array\n   * @see {@link md5.array}\n   * @example\n   * hash.array();\n   */\n  Md5.prototype.array = Md5.prototype.digest;\n\n  /**\n   * @method arrayBuffer\n   * @memberof Md5\n   * @instance\n   * @description Output hash as ArrayBuffer\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @see {@link md5.arrayBuffer}\n   * @example\n   * hash.arrayBuffer();\n   */\n  Md5.prototype.arrayBuffer = function () {\n    this.finalize();\n\n    var buffer = new ArrayBuffer(16);\n    var blocks = new Uint32Array(buffer);\n    blocks[0] = this.h0;\n    blocks[1] = this.h1;\n    blocks[2] = this.h2;\n    blocks[3] = this.h3;\n    return buffer;\n  };\n\n  /**\n   * @method buffer\n   * @deprecated This maybe confuse with Buffer in node.js. Please use arrayBuffer instead.\n   * @memberof Md5\n   * @instance\n   * @description Output hash as ArrayBuffer\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @see {@link md5.buffer}\n   * @example\n   * hash.buffer();\n   */\n  Md5.prototype.buffer = Md5.prototype.arrayBuffer;\n\n  /**\n   * @method base64\n   * @memberof Md5\n   * @instance\n   * @description Output hash as base64 string\n   * @returns {String} base64 string\n   * @see {@link md5.base64}\n   * @example\n   * hash.base64();\n   */\n  Md5.prototype.base64 = function () {\n    var v1, v2, v3, base64Str = '', bytes = this.array();\n    for (var i = 0; i < 15;) {\n      v1 = bytes[i++];\n      v2 = bytes[i++];\n      v3 = bytes[i++];\n      base64Str += BASE64_ENCODE_CHAR[v1 >>> 2] +\n        BASE64_ENCODE_CHAR[(v1 << 4 | v2 >>> 4) & 63] +\n        BASE64_ENCODE_CHAR[(v2 << 2 | v3 >>> 6) & 63] +\n        BASE64_ENCODE_CHAR[v3 & 63];\n    }\n    v1 = bytes[i];\n    base64Str += BASE64_ENCODE_CHAR[v1 >>> 2] +\n      BASE64_ENCODE_CHAR[(v1 << 4) & 63] +\n      '==';\n    return base64Str;\n  };\n\n  var exports = createMethod();\n\n  if (COMMON_JS) {\n    module.exports = exports;\n  } else {\n    /**\n     * @method md5\b\n     * @description Md5 hash function, export to global in browsers.\n     * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n     * @returns {String} md5 hashes\n     * @example\n     * md5(''); // d41d8cd98f00b204e9800998ecf8427e\n     * md5('The quick brown fox jumps over the lazy dog'); // 9e107d9d372bb6826bd81d3542a419d6\n     * md5('The quick brown fox jumps over the lazy dog.'); // e4d909c290d0fb1ca068ffaddf22cbd0\n     *\n     * // It also supports UTF-8 encoding\n     * md5('中文'); // a7bac2239fcdcb3a067903d8077c4a07\n     *\n     * // It also supports byte `Array`, `Uint8Array`, `ArrayBuffer`\n     * md5([]); // d41d8cd98f00b204e9800998ecf8427e\n     * md5(new Uint8Array([])); // d41d8cd98f00b204e9800998ecf8427e\n     */\n    root.md5 = exports;\n    if (AMD) {\n      define(function () {\n        return exports;\n      });\n    }\n  }\n})();\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match `RegExp` flags from their coerced string values. */\nvar reFlags = /\\w*$/;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values supported by `_.clone`. */\nvar cloneableTags = {};\ncloneableTags[argsTag] = cloneableTags[arrayTag] =\ncloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\ncloneableTags[boolTag] = cloneableTags[dateTag] =\ncloneableTags[float32Tag] = cloneableTags[float64Tag] =\ncloneableTags[int8Tag] = cloneableTags[int16Tag] =\ncloneableTags[int32Tag] = cloneableTags[mapTag] =\ncloneableTags[numberTag] = cloneableTags[objectTag] =\ncloneableTags[regexpTag] = cloneableTags[setTag] =\ncloneableTags[stringTag] = cloneableTags[symbolTag] =\ncloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\ncloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\ncloneableTags[errorTag] = cloneableTags[funcTag] =\ncloneableTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/**\n * Adds the key-value `pair` to `map`.\n *\n * @private\n * @param {Object} map The map to modify.\n * @param {Array} pair The key-value pair to add.\n * @returns {Object} Returns `map`.\n */\nfunction addMapEntry(map, pair) {\n  // Don't return `map.set` because it's not chainable in IE 11.\n  map.set(pair[0], pair[1]);\n  return map;\n}\n\n/**\n * Adds `value` to `set`.\n *\n * @private\n * @param {Object} set The set to modify.\n * @param {*} value The value to add.\n * @returns {Object} Returns `set`.\n */\nfunction addSetEntry(set, value) {\n  // Don't return `set.add` because it's not chainable in IE 11.\n  set.add(value);\n  return set;\n}\n\n/**\n * A specialized version of `_.forEach` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nfunction arrayEach(array, iteratee) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  while (++index < length) {\n    if (iteratee(array[index], index, array) === false) {\n      break;\n    }\n  }\n  return array;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.reduce` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {*} [accumulator] The initial value.\n * @param {boolean} [initAccum] Specify using the first element of `array` as\n *  the initial value.\n * @returns {*} Returns the accumulated value.\n */\nfunction arrayReduce(array, iteratee, accumulator, initAccum) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  if (initAccum && length) {\n    accumulator = array[++index];\n  }\n  while (++index < length) {\n    accumulator = iteratee(accumulator, array[index], index, array);\n  }\n  return accumulator;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    getPrototype = overArg(Object.getPrototypeOf, Object),\n    objectCreate = Object.create,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  return getMapData(this, key)['delete'](key);\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  getMapData(this, key).set(key, value);\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  this.__data__ = new ListCache(entries);\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  return this.__data__['delete'](key);\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var cache = this.__data__;\n  if (cache instanceof ListCache) {\n    var pairs = cache.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      return this;\n    }\n    cache = this.__data__ = new MapCache(pairs);\n  }\n  cache.set(key, value);\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  // Safari 9 makes `arguments.length` enumerable in strict mode.\n  var result = (isArray(value) || isArguments(value))\n    ? baseTimes(value.length, String)\n    : [];\n\n  var length = result.length,\n      skipIndexes = !!length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n      (value === undefined && !(key in object))) {\n    object[key] = value;\n  }\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.assign` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssign(object, source) {\n  return object && copyObject(source, keys(source), object);\n}\n\n/**\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n * traversed objects.\n *\n * @private\n * @param {*} value The value to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @param {boolean} [isFull] Specify a clone including symbols.\n * @param {Function} [customizer] The function to customize cloning.\n * @param {string} [key] The key of `value`.\n * @param {Object} [object] The parent object of `value`.\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n * @returns {*} Returns the cloned value.\n */\nfunction baseClone(value, isDeep, isFull, customizer, key, object, stack) {\n  var result;\n  if (customizer) {\n    result = object ? customizer(value, key, object, stack) : customizer(value);\n  }\n  if (result !== undefined) {\n    return result;\n  }\n  if (!isObject(value)) {\n    return value;\n  }\n  var isArr = isArray(value);\n  if (isArr) {\n    result = initCloneArray(value);\n    if (!isDeep) {\n      return copyArray(value, result);\n    }\n  } else {\n    var tag = getTag(value),\n        isFunc = tag == funcTag || tag == genTag;\n\n    if (isBuffer(value)) {\n      return cloneBuffer(value, isDeep);\n    }\n    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n      if (isHostObject(value)) {\n        return object ? value : {};\n      }\n      result = initCloneObject(isFunc ? {} : value);\n      if (!isDeep) {\n        return copySymbols(value, baseAssign(result, value));\n      }\n    } else {\n      if (!cloneableTags[tag]) {\n        return object ? value : {};\n      }\n      result = initCloneByTag(value, tag, baseClone, isDeep);\n    }\n  }\n  // Check for circular references and return its corresponding clone.\n  stack || (stack = new Stack);\n  var stacked = stack.get(value);\n  if (stacked) {\n    return stacked;\n  }\n  stack.set(value, result);\n\n  if (!isArr) {\n    var props = isFull ? getAllKeys(value) : keys(value);\n  }\n  arrayEach(props || value, function(subValue, key) {\n    if (props) {\n      key = subValue;\n      subValue = value[key];\n    }\n    // Recursively populate clone (susceptible to call stack limits).\n    assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));\n  });\n  return result;\n}\n\n/**\n * The base implementation of `_.create` without support for assigning\n * properties to the created object.\n *\n * @private\n * @param {Object} prototype The object to inherit from.\n * @returns {Object} Returns the new object.\n */\nfunction baseCreate(proto) {\n  return isObject(proto) ? objectCreate(proto) : {};\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  return objectToString.call(value);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Creates a clone of  `buffer`.\n *\n * @private\n * @param {Buffer} buffer The buffer to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Buffer} Returns the cloned buffer.\n */\nfunction cloneBuffer(buffer, isDeep) {\n  if (isDeep) {\n    return buffer.slice();\n  }\n  var result = new buffer.constructor(buffer.length);\n  buffer.copy(result);\n  return result;\n}\n\n/**\n * Creates a clone of `arrayBuffer`.\n *\n * @private\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n * @returns {ArrayBuffer} Returns the cloned array buffer.\n */\nfunction cloneArrayBuffer(arrayBuffer) {\n  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n  new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n  return result;\n}\n\n/**\n * Creates a clone of `dataView`.\n *\n * @private\n * @param {Object} dataView The data view to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned data view.\n */\nfunction cloneDataView(dataView, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n}\n\n/**\n * Creates a clone of `map`.\n *\n * @private\n * @param {Object} map The map to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned map.\n */\nfunction cloneMap(map, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);\n  return arrayReduce(array, addMapEntry, new map.constructor);\n}\n\n/**\n * Creates a clone of `regexp`.\n *\n * @private\n * @param {Object} regexp The regexp to clone.\n * @returns {Object} Returns the cloned regexp.\n */\nfunction cloneRegExp(regexp) {\n  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n  result.lastIndex = regexp.lastIndex;\n  return result;\n}\n\n/**\n * Creates a clone of `set`.\n *\n * @private\n * @param {Object} set The set to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned set.\n */\nfunction cloneSet(set, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);\n  return arrayReduce(array, addSetEntry, new set.constructor);\n}\n\n/**\n * Creates a clone of the `symbol` object.\n *\n * @private\n * @param {Object} symbol The symbol object to clone.\n * @returns {Object} Returns the cloned symbol object.\n */\nfunction cloneSymbol(symbol) {\n  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n}\n\n/**\n * Creates a clone of `typedArray`.\n *\n * @private\n * @param {Object} typedArray The typed array to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned typed array.\n */\nfunction cloneTypedArray(typedArray, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n}\n\n/**\n * Copies the values of `source` to `array`.\n *\n * @private\n * @param {Array} source The array to copy values from.\n * @param {Array} [array=[]] The array to copy values to.\n * @returns {Array} Returns `array`.\n */\nfunction copyArray(source, array) {\n  var index = -1,\n      length = source.length;\n\n  array || (array = Array(length));\n  while (++index < length) {\n    array[index] = source[index];\n  }\n  return array;\n}\n\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n */\nfunction copyObject(source, props, object, customizer) {\n  object || (object = {});\n\n  var index = -1,\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index];\n\n    var newValue = customizer\n      ? customizer(object[key], source[key], key, object, source)\n      : undefined;\n\n    assignValue(object, key, newValue === undefined ? source[key] : newValue);\n  }\n  return object;\n}\n\n/**\n * Copies own symbol properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbols(source, object) {\n  return copyObject(source, getSymbols(source), object);\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * Creates an array of the own enumerable symbol properties of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11,\n// for data views in Edge < 14, and promises in Node.js.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = objectToString.call(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : undefined;\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Initializes an array clone.\n *\n * @private\n * @param {Array} array The array to clone.\n * @returns {Array} Returns the initialized clone.\n */\nfunction initCloneArray(array) {\n  var length = array.length,\n      result = array.constructor(length);\n\n  // Add properties assigned by `RegExp#exec`.\n  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n    result.index = array.index;\n    result.input = array.input;\n  }\n  return result;\n}\n\n/**\n * Initializes an object clone.\n *\n * @private\n * @param {Object} object The object to clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneObject(object) {\n  return (typeof object.constructor == 'function' && !isPrototype(object))\n    ? baseCreate(getPrototype(object))\n    : {};\n}\n\n/**\n * Initializes an object clone based on its `toStringTag`.\n *\n * **Note:** This function only supports cloning values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to clone.\n * @param {string} tag The `toStringTag` of the object to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneByTag(object, tag, cloneFunc, isDeep) {\n  var Ctor = object.constructor;\n  switch (tag) {\n    case arrayBufferTag:\n      return cloneArrayBuffer(object);\n\n    case boolTag:\n    case dateTag:\n      return new Ctor(+object);\n\n    case dataViewTag:\n      return cloneDataView(object, isDeep);\n\n    case float32Tag: case float64Tag:\n    case int8Tag: case int16Tag: case int32Tag:\n    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n      return cloneTypedArray(object, isDeep);\n\n    case mapTag:\n      return cloneMap(object, isDeep, cloneFunc);\n\n    case numberTag:\n    case stringTag:\n      return new Ctor(object);\n\n    case regexpTag:\n      return cloneRegExp(object);\n\n    case setTag:\n      return cloneSet(object, isDeep, cloneFunc);\n\n    case symbolTag:\n      return cloneSymbol(object);\n  }\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * This method is like `_.clone` except that it recursively clones `value`.\n *\n * @static\n * @memberOf _\n * @since 1.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @returns {*} Returns the deep cloned value.\n * @see _.clone\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var deep = _.cloneDeep(objects);\n * console.log(deep[0] === objects[0]);\n * // => false\n */\nfunction cloneDeep(value) {\n  return baseClone(value, true, true);\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nfunction isArguments(value) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = cloneDeep;\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        result = wait - timeSinceLastCall;\n\n    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = debounce;\n","/**\n * Lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright JS Foundation and other contributors <https://js.foundation/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    asyncTag = '[object AsyncFunction]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    nullTag = '[object Null]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    proxyTag = '[object Proxy]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    undefinedTag = '[object Undefined]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\n/**\n * Checks if a `cache` value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction cacheHas(cache, key) {\n  return cache.has(key);\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice,\n    symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values == null ? 0 : values.length;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\n/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  var data = this.__data__ = new ListCache(entries);\n  this.size = data.size;\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  var data = this.__data__,\n      result = data['delete'](key);\n\n  this.size = data.size;\n  return result;\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var data = this.__data__;\n  if (data instanceof ListCache) {\n    var pairs = data.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n    data = this.__data__ = new MapCache(pairs);\n  }\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n}\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = objIsArr ? arrayTag : getTag(object),\n      othTag = othIsArr ? arrayTag : getTag(other);\n\n  objTag = objTag == argsTag ? objectTag : objTag;\n  othTag = othTag == argsTag ? objectTag : othTag;\n\n  var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && isBuffer(object)) {\n    if (!isBuffer(other)) {\n      return false;\n    }\n    objIsArr = true;\n    objIsObj = false;\n  }\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  }\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(array);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(object);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\n/**\n * Creates an array of the own enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n  if (object == null) {\n    return [];\n  }\n  object = Object(object);\n  return arrayFilter(nativeGetSymbols(object), function(symbol) {\n    return propertyIsEnumerable.call(object, symbol);\n  });\n};\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = baseGetTag(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : '';\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are compared by strict equality, i.e. `===`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.isEqual(object, other);\n * // => true\n *\n * object === other;\n * // => false\n */\nfunction isEqual(value, other) {\n  return baseIsEqual(value, other);\n}\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = isEqual;\n","'use strict';\n\nmodule.exports = pixelmatch;\n\nconst defaultOptions = {\n    threshold: 0.1,         // matching threshold (0 to 1); smaller is more sensitive\n    includeAA: false,       // whether to skip anti-aliasing detection\n    alpha: 0.1,             // opacity of original image in diff output\n    aaColor: [255, 255, 0], // color of anti-aliased pixels in diff output\n    diffColor: [255, 0, 0], // color of different pixels in diff output\n    diffColorAlt: null,     // whether to detect dark on light differences between img1 and img2 and set an alternative color to differentiate between the two\n    diffMask: false         // draw the diff over a transparent background (a mask)\n};\n\nfunction pixelmatch(img1, img2, output, width, height, options) {\n\n    if (!isPixelData(img1) || !isPixelData(img2) || (output && !isPixelData(output)))\n        throw new Error('Image data: Uint8Array, Uint8ClampedArray or Buffer expected.');\n\n    if (img1.length !== img2.length || (output && output.length !== img1.length))\n        throw new Error('Image sizes do not match.');\n\n    if (img1.length !== width * height * 4) throw new Error('Image data size does not match width/height.');\n\n    options = Object.assign({}, defaultOptions, options);\n\n    // check if images are identical\n    const len = width * height;\n    const a32 = new Uint32Array(img1.buffer, img1.byteOffset, len);\n    const b32 = new Uint32Array(img2.buffer, img2.byteOffset, len);\n    let identical = true;\n\n    for (let i = 0; i < len; i++) {\n        if (a32[i] !== b32[i]) { identical = false; break; }\n    }\n    if (identical) { // fast path if identical\n        if (output && !options.diffMask) {\n            for (let i = 0; i < len; i++) drawGrayPixel(img1, 4 * i, options.alpha, output);\n        }\n        return 0;\n    }\n\n    // maximum acceptable square distance between two colors;\n    // 35215 is the maximum possible value for the YIQ difference metric\n    const maxDelta = 35215 * options.threshold * options.threshold;\n    let diff = 0;\n\n    // compare each pixel of one image against the other one\n    for (let y = 0; y < height; y++) {\n        for (let x = 0; x < width; x++) {\n\n            const pos = (y * width + x) * 4;\n\n            // squared YUV distance between colors at this pixel position, negative if the img2 pixel is darker\n            const delta = colorDelta(img1, img2, pos, pos);\n\n            // the color difference is above the threshold\n            if (Math.abs(delta) > maxDelta) {\n                // check it's a real rendering difference or just anti-aliasing\n                if (!options.includeAA && (antialiased(img1, x, y, width, height, img2) ||\n                                           antialiased(img2, x, y, width, height, img1))) {\n                    // one of the pixels is anti-aliasing; draw as yellow and do not count as difference\n                    // note that we do not include such pixels in a mask\n                    if (output && !options.diffMask) drawPixel(output, pos, ...options.aaColor);\n\n                } else {\n                    // found substantial difference not caused by anti-aliasing; draw it as such\n                    if (output) {\n                        drawPixel(output, pos, ...(delta < 0 && options.diffColorAlt || options.diffColor));\n                    }\n                    diff++;\n                }\n\n            } else if (output) {\n                // pixels are similar; draw background as grayscale image blended with white\n                if (!options.diffMask) drawGrayPixel(img1, pos, options.alpha, output);\n            }\n        }\n    }\n\n    // return the number of different pixels\n    return diff;\n}\n\nfunction isPixelData(arr) {\n    // work around instanceof Uint8Array not working properly in some Jest environments\n    return ArrayBuffer.isView(arr) && arr.constructor.BYTES_PER_ELEMENT === 1;\n}\n\n// check if a pixel is likely a part of anti-aliasing;\n// based on \"Anti-aliased Pixel and Intensity Slope Detector\" paper by V. Vysniauskas, 2009\n\nfunction antialiased(img, x1, y1, width, height, img2) {\n    const x0 = Math.max(x1 - 1, 0);\n    const y0 = Math.max(y1 - 1, 0);\n    const x2 = Math.min(x1 + 1, width - 1);\n    const y2 = Math.min(y1 + 1, height - 1);\n    const pos = (y1 * width + x1) * 4;\n    let zeroes = x1 === x0 || x1 === x2 || y1 === y0 || y1 === y2 ? 1 : 0;\n    let min = 0;\n    let max = 0;\n    let minX, minY, maxX, maxY;\n\n    // go through 8 adjacent pixels\n    for (let x = x0; x <= x2; x++) {\n        for (let y = y0; y <= y2; y++) {\n            if (x === x1 && y === y1) continue;\n\n            // brightness delta between the center pixel and adjacent one\n            const delta = colorDelta(img, img, pos, (y * width + x) * 4, true);\n\n            // count the number of equal, darker and brighter adjacent pixels\n            if (delta === 0) {\n                zeroes++;\n                // if found more than 2 equal siblings, it's definitely not anti-aliasing\n                if (zeroes > 2) return false;\n\n            // remember the darkest pixel\n            } else if (delta < min) {\n                min = delta;\n                minX = x;\n                minY = y;\n\n            // remember the brightest pixel\n            } else if (delta > max) {\n                max = delta;\n                maxX = x;\n                maxY = y;\n            }\n        }\n    }\n\n    // if there are no both darker and brighter pixels among siblings, it's not anti-aliasing\n    if (min === 0 || max === 0) return false;\n\n    // if either the darkest or the brightest pixel has 3+ equal siblings in both images\n    // (definitely not anti-aliased), this pixel is anti-aliased\n    return (hasManySiblings(img, minX, minY, width, height) && hasManySiblings(img2, minX, minY, width, height)) ||\n           (hasManySiblings(img, maxX, maxY, width, height) && hasManySiblings(img2, maxX, maxY, width, height));\n}\n\n// check if a pixel has 3+ adjacent pixels of the same color.\nfunction hasManySiblings(img, x1, y1, width, height) {\n    const x0 = Math.max(x1 - 1, 0);\n    const y0 = Math.max(y1 - 1, 0);\n    const x2 = Math.min(x1 + 1, width - 1);\n    const y2 = Math.min(y1 + 1, height - 1);\n    const pos = (y1 * width + x1) * 4;\n    let zeroes = x1 === x0 || x1 === x2 || y1 === y0 || y1 === y2 ? 1 : 0;\n\n    // go through 8 adjacent pixels\n    for (let x = x0; x <= x2; x++) {\n        for (let y = y0; y <= y2; y++) {\n            if (x === x1 && y === y1) continue;\n\n            const pos2 = (y * width + x) * 4;\n            if (img[pos] === img[pos2] &&\n                img[pos + 1] === img[pos2 + 1] &&\n                img[pos + 2] === img[pos2 + 2] &&\n                img[pos + 3] === img[pos2 + 3]) zeroes++;\n\n            if (zeroes > 2) return true;\n        }\n    }\n\n    return false;\n}\n\n// calculate color difference according to the paper \"Measuring perceived color difference\n// using YIQ NTSC transmission color space in mobile applications\" by Y. Kotsarenko and F. Ramos\n\nfunction colorDelta(img1, img2, k, m, yOnly) {\n    let r1 = img1[k + 0];\n    let g1 = img1[k + 1];\n    let b1 = img1[k + 2];\n    let a1 = img1[k + 3];\n\n    let r2 = img2[m + 0];\n    let g2 = img2[m + 1];\n    let b2 = img2[m + 2];\n    let a2 = img2[m + 3];\n\n    if (a1 === a2 && r1 === r2 && g1 === g2 && b1 === b2) return 0;\n\n    if (a1 < 255) {\n        a1 /= 255;\n        r1 = blend(r1, a1);\n        g1 = blend(g1, a1);\n        b1 = blend(b1, a1);\n    }\n\n    if (a2 < 255) {\n        a2 /= 255;\n        r2 = blend(r2, a2);\n        g2 = blend(g2, a2);\n        b2 = blend(b2, a2);\n    }\n\n    const y1 = rgb2y(r1, g1, b1);\n    const y2 = rgb2y(r2, g2, b2);\n    const y = y1 - y2;\n\n    if (yOnly) return y; // brightness difference only\n\n    const i = rgb2i(r1, g1, b1) - rgb2i(r2, g2, b2);\n    const q = rgb2q(r1, g1, b1) - rgb2q(r2, g2, b2);\n\n    const delta = 0.5053 * y * y + 0.299 * i * i + 0.1957 * q * q;\n\n    // encode whether the pixel lightens or darkens in the sign\n    return y1 > y2 ? -delta : delta;\n}\n\nfunction rgb2y(r, g, b) { return r * 0.29889531 + g * 0.58662247 + b * 0.11448223; }\nfunction rgb2i(r, g, b) { return r * 0.59597799 - g * 0.27417610 - b * 0.32180189; }\nfunction rgb2q(r, g, b) { return r * 0.21147017 - g * 0.52261711 + b * 0.31114694; }\n\n// blend semi-transparent color with white\nfunction blend(c, a) {\n    return 255 + (c - 255) * a;\n}\n\nfunction drawPixel(output, pos, r, g, b) {\n    output[pos + 0] = r;\n    output[pos + 1] = g;\n    output[pos + 2] = b;\n    output[pos + 3] = 255;\n}\n\nfunction drawGrayPixel(img, i, alpha, output) {\n    const r = img[i + 0];\n    const g = img[i + 1];\n    const b = img[i + 2];\n    const val = blend(rgb2y(r, g, b), alpha * img[i + 3] / 255);\n    drawPixel(output, i, val, val, val);\n}\n","var grammar = module.exports = {\n  v: [{\n    name: 'version',\n    reg: /^(\\d*)$/\n  }],\n  o: [{ //o=- 20518 0 IN IP4 203.0.113.1\n    // NB: sessionId will be a String in most cases because it is huge\n    name: 'origin',\n    reg: /^(\\S*) (\\d*) (\\d*) (\\S*) IP(\\d) (\\S*)/,\n    names: ['username', 'sessionId', 'sessionVersion', 'netType', 'ipVer', 'address'],\n    format: '%s %s %d %s IP%d %s'\n  }],\n  // default parsing of these only (though some of these feel outdated)\n  s: [{ name: 'name' }],\n  i: [{ name: 'description' }],\n  u: [{ name: 'uri' }],\n  e: [{ name: 'email' }],\n  p: [{ name: 'phone' }],\n  z: [{ name: 'timezones' }], // TODO: this one can actually be parsed properly..\n  r: [{ name: 'repeats' }],   // TODO: this one can also be parsed properly\n  //k: [{}], // outdated thing ignored\n  t: [{ //t=0 0\n    name: 'timing',\n    reg: /^(\\d*) (\\d*)/,\n    names: ['start', 'stop'],\n    format: '%d %d'\n  }],\n  c: [{ //c=IN IP4 10.47.197.26\n    name: 'connection',\n    reg: /^IN IP(\\d) (\\S*)/,\n    names: ['version', 'ip'],\n    format: 'IN IP%d %s'\n  }],\n  b: [{ //b=AS:4000\n    push: 'bandwidth',\n    reg: /^(TIAS|AS|CT|RR|RS):(\\d*)/,\n    names: ['type', 'limit'],\n    format: '%s:%s'\n  }],\n  m: [{ //m=video 51744 RTP/AVP 126 97 98 34 31\n    // NB: special - pushes to session\n    // TODO: rtp/fmtp should be filtered by the payloads found here?\n    reg: /^(\\w*) (\\d*) ([\\w\\/]*)(?: (.*))?/,\n    names: ['type', 'port', 'protocol', 'payloads'],\n    format: '%s %d %s %s'\n  }],\n  a: [\n    { //a=rtpmap:110 opus/48000/2\n      push: 'rtp',\n      reg: /^rtpmap:(\\d*) ([\\w\\-\\.]*)(?:\\s*\\/(\\d*)(?:\\s*\\/(\\S*))?)?/,\n      names: ['payload', 'codec', 'rate', 'encoding'],\n      format: function (o) {\n        return (o.encoding) ?\n          'rtpmap:%d %s/%s/%s':\n          o.rate ?\n          'rtpmap:%d %s/%s':\n          'rtpmap:%d %s';\n      }\n    },\n    { //a=fmtp:108 profile-level-id=24;object=23;bitrate=64000\n      //a=fmtp:111 minptime=10; useinbandfec=1\n      push: 'fmtp',\n      reg: /^fmtp:(\\d*) ([\\S| ]*)/,\n      names: ['payload', 'config'],\n      format: 'fmtp:%d %s'\n    },\n    { //a=control:streamid=0\n      name: 'control',\n      reg: /^control:(.*)/,\n      format: 'control:%s'\n    },\n    { //a=rtcp:65179 IN IP4 193.84.77.194\n      name: 'rtcp',\n      reg: /^rtcp:(\\d*)(?: (\\S*) IP(\\d) (\\S*))?/,\n      names: ['port', 'netType', 'ipVer', 'address'],\n      format: function (o) {\n        return (o.address != null) ?\n          'rtcp:%d %s IP%d %s':\n          'rtcp:%d';\n      }\n    },\n    { //a=rtcp-fb:98 trr-int 100\n      push: 'rtcpFbTrrInt',\n      reg: /^rtcp-fb:(\\*|\\d*) trr-int (\\d*)/,\n      names: ['payload', 'value'],\n      format: 'rtcp-fb:%d trr-int %d'\n    },\n    { //a=rtcp-fb:98 nack rpsi\n      push: 'rtcpFb',\n      reg: /^rtcp-fb:(\\*|\\d*) ([\\w-_]*)(?: ([\\w-_]*))?/,\n      names: ['payload', 'type', 'subtype'],\n      format: function (o) {\n        return (o.subtype != null) ?\n          'rtcp-fb:%s %s %s':\n          'rtcp-fb:%s %s';\n      }\n    },\n    { //a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n      //a=extmap:1/recvonly URI-gps-string\n      push: 'ext',\n      reg: /^extmap:(\\d+)(?:\\/(\\w+))? (\\S*)(?: (\\S*))?/,\n      names: ['value', 'direction', 'uri', 'config'],\n      format: function (o) {\n        return 'extmap:%d' + (o.direction ? '/%s' : '%v') + ' %s' + (o.config ? ' %s' : '');\n      }\n    },\n    { //a=crypto:1 AES_CM_128_HMAC_SHA1_80 inline:PS1uQCVeeCFCanVmcjkpPywjNWhcYD0mXXtxaVBR|2^20|1:32\n      push: 'crypto',\n      reg: /^crypto:(\\d*) ([\\w_]*) (\\S*)(?: (\\S*))?/,\n      names: ['id', 'suite', 'config', 'sessionConfig'],\n      format: function (o) {\n        return (o.sessionConfig != null) ?\n          'crypto:%d %s %s %s':\n          'crypto:%d %s %s';\n      }\n    },\n    { //a=setup:actpass\n      name: 'setup',\n      reg: /^setup:(\\w*)/,\n      format: 'setup:%s'\n    },\n    { //a=mid:1\n      name: 'mid',\n      reg: /^mid:([^\\s]*)/,\n      format: 'mid:%s'\n    },\n    { //a=msid:0c8b064d-d807-43b4-b434-f92a889d8587 98178685-d409-46e0-8e16-7ef0db0db64a\n      name: 'msid',\n      reg: /^msid:(.*)/,\n      format: 'msid:%s'\n    },\n    { //a=ptime:20\n      name: 'ptime',\n      reg: /^ptime:(\\d*)/,\n      format: 'ptime:%d'\n    },\n    { //a=maxptime:60\n      name: 'maxptime',\n      reg: /^maxptime:(\\d*)/,\n      format: 'maxptime:%d'\n    },\n    { //a=sendrecv\n      name: 'direction',\n      reg: /^(sendrecv|recvonly|sendonly|inactive)/\n    },\n    { //a=ice-lite\n      name: 'icelite',\n      reg: /^(ice-lite)/\n    },\n    { //a=ice-ufrag:F7gI\n      name: 'iceUfrag',\n      reg: /^ice-ufrag:(\\S*)/,\n      format: 'ice-ufrag:%s'\n    },\n    { //a=ice-pwd:x9cml/YzichV2+XlhiMu8g\n      name: 'icePwd',\n      reg: /^ice-pwd:(\\S*)/,\n      format: 'ice-pwd:%s'\n    },\n    { //a=fingerprint:SHA-1 00:11:22:33:44:55:66:77:88:99:AA:BB:CC:DD:EE:FF:00:11:22:33\n      name: 'fingerprint',\n      reg: /^fingerprint:(\\S*) (\\S*)/,\n      names: ['type', 'hash'],\n      format: 'fingerprint:%s %s'\n    },\n    { //a=candidate:0 1 UDP 2113667327 203.0.113.1 54400 typ host\n      //a=candidate:1162875081 1 udp 2113937151 192.168.34.75 60017 typ host generation 0 network-id 3 network-cost 10\n      //a=candidate:3289912957 2 udp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 generation 0 network-id 3 network-cost 10\n      //a=candidate:229815620 1 tcp 1518280447 192.168.150.19 60017 typ host tcptype active generation 0 network-id 3 network-cost 10\n      //a=candidate:3289912957 2 tcp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 tcptype passive generation 0 network-id 3 network-cost 10\n      push:'candidates',\n      reg: /^candidate:(\\S*) (\\d*) (\\S*) (\\d*) (\\S*) (\\d*) typ (\\S*)(?: raddr (\\S*) rport (\\d*))?(?: tcptype (\\S*))?(?: generation (\\d*))?(?: network-id (\\d*))?(?: network-cost (\\d*))?/,\n      names: ['foundation', 'component', 'transport', 'priority', 'ip', 'port', 'type', 'raddr', 'rport', 'tcptype', 'generation', 'network-id', 'network-cost'],\n      format: function (o) {\n        var str = 'candidate:%s %d %s %d %s %d typ %s';\n\n        str += (o.raddr != null) ? ' raddr %s rport %d' : '%v%v';\n\n        // NB: candidate has three optional chunks, so %void middles one if it's missing\n        str += (o.tcptype != null) ? ' tcptype %s' : '%v';\n\n        if (o.generation != null) {\n          str += ' generation %d';\n        }\n\n        str += (o['network-id'] != null) ? ' network-id %d' : '%v';\n        str += (o['network-cost'] != null) ? ' network-cost %d' : '%v';\n        return str;\n      }\n    },\n    { //a=end-of-candidates (keep after the candidates line for readability)\n      name: 'endOfCandidates',\n      reg: /^(end-of-candidates)/\n    },\n    { //a=remote-candidates:1 203.0.113.1 54400 2 203.0.113.1 54401 ...\n      name: 'remoteCandidates',\n      reg: /^remote-candidates:(.*)/,\n      format: 'remote-candidates:%s'\n    },\n    { //a=ice-options:google-ice\n      name: 'iceOptions',\n      reg: /^ice-options:(\\S*)/,\n      format: 'ice-options:%s'\n    },\n    { //a=ssrc:2566107569 cname:t9YU8M1UxTF8Y1A1\n      push: 'ssrcs',\n      reg: /^ssrc:(\\d*) ([\\w_]*)(?::(.*))?/,\n      names: ['id', 'attribute', 'value'],\n      format: function (o) {\n        var str = 'ssrc:%d';\n        if (o.attribute != null) {\n          str += ' %s';\n          if (o.value != null) {\n            str += ':%s';\n          }\n        }\n        return str;\n      }\n    },\n    { //a=ssrc-group:FEC 1 2\n      //a=ssrc-group:FEC-FR 3004364195 1080772241\n      push: 'ssrcGroups',\n      // token-char = %x21 / %x23-27 / %x2A-2B / %x2D-2E / %x30-39 / %x41-5A / %x5E-7E\n      reg: /^ssrc-group:([\\x21\\x23\\x24\\x25\\x26\\x27\\x2A\\x2B\\x2D\\x2E\\w]*) (.*)/,\n      names: ['semantics', 'ssrcs'],\n      format: 'ssrc-group:%s %s'\n    },\n    { //a=msid-semantic: WMS Jvlam5X3SX1OP6pn20zWogvaKJz5Hjf9OnlV\n      name: 'msidSemantic',\n      reg: /^msid-semantic:\\s?(\\w*) (\\S*)/,\n      names: ['semantic', 'token'],\n      format: 'msid-semantic: %s %s' // space after ':' is not accidental\n    },\n    { //a=group:BUNDLE audio video\n      push: 'groups',\n      reg: /^group:(\\w*) (.*)/,\n      names: ['type', 'mids'],\n      format: 'group:%s %s'\n    },\n    { //a=rtcp-mux\n      name: 'rtcpMux',\n      reg: /^(rtcp-mux)/\n    },\n    { //a=rtcp-rsize\n      name: 'rtcpRsize',\n      reg: /^(rtcp-rsize)/\n    },\n    { //a=sctpmap:5000 webrtc-datachannel 1024\n      name: 'sctpmap',\n      reg: /^sctpmap:([\\w_\\/]*) (\\S*)(?: (\\S*))?/,\n      names: ['sctpmapNumber', 'app', 'maxMessageSize'],\n      format: function (o) {\n        return (o.maxMessageSize != null) ?\n          'sctpmap:%s %s %s' :\n          'sctpmap:%s %s';\n      }\n    },\n    { //a=x-google-flag:conference\n      name: 'xGoogleFlag',\n      reg: /^x-google-flag:([^\\s]*)/,\n      format: 'x-google-flag:%s'\n    },\n    { //a=rid:1 send max-width=1280;max-height=720;max-fps=30;depend=0\n      push: 'rids',\n      reg: /^rid:([\\d\\w]+) (\\w+)(?: ([\\S| ]*))?/,\n      names: ['id', 'direction', 'params'],\n      format: function (o) {\n        return (o.params) ? 'rid:%s %s %s' : 'rid:%s %s';\n      }\n    },\n    { //a=imageattr:97 send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320] recv [x=330,y=250]\n      //a=imageattr:* send [x=800,y=640] recv *\n      //a=imageattr:100 recv [x=320,y=240]\n      push: 'imageattrs',\n      reg: new RegExp(\n        //a=imageattr:97\n        '^imageattr:(\\\\d+|\\\\*)' +\n        //send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320]\n        '[\\\\s\\\\t]+(send|recv)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*)' +\n        //recv [x=330,y=250]\n        '(?:[\\\\s\\\\t]+(recv|send)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*))?'\n      ),\n      names: ['pt', 'dir1', 'attrs1', 'dir2', 'attrs2'],\n      format: function (o) {\n        return 'imageattr:%s %s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    { //a=simulcast:send 1,2,3;~4,~5 recv 6;~7,~8\n      //a=simulcast:recv 1;4,5 send 6;7\n      name: 'simulcast',\n      reg: new RegExp(\n        //a=simulcast:\n        '^simulcast:' +\n        //send 1,2,3;~4,~5\n        '(send|recv) ([a-zA-Z0-9\\\\-_~;,]+)' +\n        //space + recv 6;~7,~8\n        '(?:\\\\s?(send|recv) ([a-zA-Z0-9\\\\-_~;,]+))?' +\n        //end\n        '$'\n      ),\n      names: ['dir1', 'list1', 'dir2', 'list2'],\n      format: function (o) {\n        return 'simulcast:%s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    { //Old simulcast draft 03 (implemented by Firefox)\n      //  https://tools.ietf.org/html/draft-ietf-mmusic-sdp-simulcast-03\n      //a=simulcast: recv pt=97;98 send pt=97\n      //a=simulcast: send rid=5;6;7 paused=6,7\n      name: 'simulcast_03',\n      reg: /^simulcast:[\\s\\t]+([\\S+\\s\\t]+)$/,\n      names: ['value'],\n      format: 'simulcast: %s'\n    },\n    {\n      //a=framerate:25\n      //a=framerate:29.97\n      name: 'framerate',\n      reg: /^framerate:(\\d+(?:$|\\.\\d+))/,\n      format: 'framerate:%s'\n    },\n    { // any a= that we don't understand is kepts verbatim on media.invalid\n      push: 'invalid',\n      names: ['value']\n    }\n  ]\n};\n\n// set sensible defaults to avoid polluting the grammar with boring details\nObject.keys(grammar).forEach(function (key) {\n  var objs = grammar[key];\n  objs.forEach(function (obj) {\n    if (!obj.reg) {\n      obj.reg = /(.*)/;\n    }\n    if (!obj.format) {\n      obj.format = '%s';\n    }\n  });\n});\n","var parser = require('./parser');\nvar writer = require('./writer');\n\nexports.write = writer;\nexports.parse = parser.parse;\nexports.parseFmtpConfig = parser.parseFmtpConfig;\nexports.parseParams = parser.parseParams;\nexports.parsePayloads = parser.parsePayloads;\nexports.parseRemoteCandidates = parser.parseRemoteCandidates;\nexports.parseImageAttributes = parser.parseImageAttributes;\nexports.parseSimulcastStreamList = parser.parseSimulcastStreamList;\n","var toIntIfInt = function (v) {\n  return String(Number(v)) === v ? Number(v) : v;\n};\n\nvar attachProperties = function (match, location, names, rawName) {\n  if (rawName && !names) {\n    location[rawName] = toIntIfInt(match[1]);\n  }\n  else {\n    for (var i = 0; i < names.length; i += 1) {\n      if (match[i+1] != null) {\n        location[names[i]] = toIntIfInt(match[i+1]);\n      }\n    }\n  }\n};\n\nvar parseReg = function (obj, location, content) {\n  var needsBlank = obj.name && obj.names;\n  if (obj.push && !location[obj.push]) {\n    location[obj.push] = [];\n  }\n  else if (needsBlank && !location[obj.name]) {\n    location[obj.name] = {};\n  }\n  var keyLocation = obj.push ?\n    {} :  // blank object that will be pushed\n    needsBlank ? location[obj.name] : location; // otherwise, named location or root\n\n  attachProperties(content.match(obj.reg), keyLocation, obj.names, obj.name);\n\n  if (obj.push) {\n    location[obj.push].push(keyLocation);\n  }\n};\n\nvar grammar = require('./grammar');\nvar validLine = RegExp.prototype.test.bind(/^([a-z])=(.*)/);\n\nexports.parse = function (sdp) {\n  var session = {}\n    , media = []\n    , location = session; // points at where properties go under (one of the above)\n\n  // parse lines we understand\n  sdp.split(/(\\r\\n|\\r|\\n)/).filter(validLine).forEach(function (l) {\n    var type = l[0];\n    var content = l.slice(2);\n    if (type === 'm') {\n      media.push({rtp: [], fmtp: []});\n      location = media[media.length-1]; // point at latest media line\n    }\n\n    for (var j = 0; j < (grammar[type] || []).length; j += 1) {\n      var obj = grammar[type][j];\n      if (obj.reg.test(content)) {\n        return parseReg(obj, location, content);\n      }\n    }\n  });\n\n  session.media = media; // link it up\n  return session;\n};\n\nvar paramReducer = function (acc, expr) {\n  var s = expr.split(/=(.+)/, 2);\n  if (s.length === 2) {\n    acc[s[0]] = toIntIfInt(s[1]);\n  }\n  return acc;\n};\n\nexports.parseParams = function (str) {\n  return str.split(/\\;\\s?/).reduce(paramReducer, {});\n};\n\n// For backward compatibility - alias will be removed in 3.0.0\nexports.parseFmtpConfig = exports.parseParams;\n\nexports.parsePayloads = function (str) {\n  return str.split(' ').map(Number);\n};\n\nexports.parseRemoteCandidates = function (str) {\n  var candidates = [];\n  var parts = str.split(' ').map(toIntIfInt);\n  for (var i = 0; i < parts.length; i += 3) {\n    candidates.push({\n      component: parts[i],\n      ip: parts[i + 1],\n      port: parts[i + 2]\n    });\n  }\n  return candidates;\n};\n\nexports.parseImageAttributes = function (str) {\n  return str.split(' ').map(function (item) {\n    return item.substring(1, item.length-1).split(',').reduce(paramReducer, {});\n  });\n};\n\nexports.parseSimulcastStreamList = function (str) {\n  return str.split(';').map(function (stream) {\n    return stream.split(',').map(function (format) {\n      var scid, paused = false;\n\n      if (format[0] !== '~') {\n        scid = toIntIfInt(format);\n      } else {\n        scid = toIntIfInt(format.substring(1, format.length));\n        paused = true;\n      }\n\n      return {\n        scid: scid,\n        paused: paused\n      };\n    });\n  });\n};\n","var grammar = require('./grammar');\n\n// customized util.format - discards excess arguments and can void middle ones\nvar formatRegExp = /%[sdv%]/g;\nvar format = function (formatStr) {\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  return formatStr.replace(formatRegExp, function (x) {\n    if (i >= len) {\n      return x; // missing argument\n    }\n    var arg = args[i];\n    i += 1;\n    switch (x) {\n    case '%%':\n      return '%';\n    case '%s':\n      return String(arg);\n    case '%d':\n      return Number(arg);\n    case '%v':\n      return '';\n    }\n  });\n  // NB: we discard excess arguments - they are typically undefined from makeLine\n};\n\nvar makeLine = function (type, obj, location) {\n  var str = obj.format instanceof Function ?\n    (obj.format(obj.push ? location : location[obj.name])) :\n    obj.format;\n\n  var args = [type + '=' + str];\n  if (obj.names) {\n    for (var i = 0; i < obj.names.length; i += 1) {\n      var n = obj.names[i];\n      if (obj.name) {\n        args.push(location[obj.name][n]);\n      }\n      else { // for mLine and push attributes\n        args.push(location[obj.names[i]]);\n      }\n    }\n  }\n  else {\n    args.push(location[obj.name]);\n  }\n  return format.apply(null, args);\n};\n\n// RFC specified order\n// TODO: extend this with all the rest\nvar defaultOuterOrder = [\n  'v', 'o', 's', 'i',\n  'u', 'e', 'p', 'c',\n  'b', 't', 'r', 'z', 'a'\n];\nvar defaultInnerOrder = ['i', 'c', 'b', 'a'];\n\n\nmodule.exports = function (session, opts) {\n  opts = opts || {};\n  // ensure certain properties exist\n  if (session.version == null) {\n    session.version = 0; // 'v=0' must be there (only defined version atm)\n  }\n  if (session.name == null) {\n    session.name = ' '; // 's= ' must be there if no meaningful name set\n  }\n  session.media.forEach(function (mLine) {\n    if (mLine.payloads == null) {\n      mLine.payloads = '';\n    }\n  });\n\n  var outerOrder = opts.outerOrder || defaultOuterOrder;\n  var innerOrder = opts.innerOrder || defaultInnerOrder;\n  var sdp = [];\n\n  // loop through outerOrder for matching properties on session\n  outerOrder.forEach(function (type) {\n    grammar[type].forEach(function (obj) {\n      if (obj.name in session && session[obj.name] != null) {\n        sdp.push(makeLine(type, obj, session));\n      }\n      else if (obj.push in session && session[obj.push] != null) {\n        session[obj.push].forEach(function (el) {\n          sdp.push(makeLine(type, obj, el));\n        });\n      }\n    });\n  });\n\n  // then for each media line, follow the innerOrder\n  session.media.forEach(function (mLine) {\n    sdp.push(makeLine('m', grammar.m[0], mLine));\n\n    innerOrder.forEach(function (type) {\n      grammar[type].forEach(function (obj) {\n        if (obj.name in mLine && mLine[obj.name] != null) {\n          sdp.push(makeLine(type, obj, mLine));\n        }\n        else if (obj.push in mLine && mLine[obj.push] != null) {\n          mLine[obj.push].forEach(function (el) {\n            sdp.push(makeLine(type, obj, el));\n          });\n        }\n      });\n    });\n  });\n\n  return sdp.join('\\r\\n') + '\\r\\n';\n};\n","/* eslint-env node */\n'use strict';\n\n// SDP helpers.\nconst SDPUtils = {};\n\n// Generate an alphanumeric identifier for cname or mids.\n// TODO: use UUIDs instead? https://gist.github.com/jed/982883\nSDPUtils.generateIdentifier = function() {\n  return Math.random().toString(36).substr(2, 10);\n};\n\n// The RTCP CNAME used by all peerconnections from the same JS.\nSDPUtils.localCName = SDPUtils.generateIdentifier();\n\n// Splits SDP into lines, dealing with both CRLF and LF.\nSDPUtils.splitLines = function(blob) {\n  return blob.trim().split('\\n').map(line => line.trim());\n};\n// Splits SDP into sessionpart and mediasections. Ensures CRLF.\nSDPUtils.splitSections = function(blob) {\n  const parts = blob.split('\\nm=');\n  return parts.map((part, index) => (index > 0 ?\n    'm=' + part : part).trim() + '\\r\\n');\n};\n\n// Returns the session description.\nSDPUtils.getDescription = function(blob) {\n  const sections = SDPUtils.splitSections(blob);\n  return sections && sections[0];\n};\n\n// Returns the individual media sections.\nSDPUtils.getMediaSections = function(blob) {\n  const sections = SDPUtils.splitSections(blob);\n  sections.shift();\n  return sections;\n};\n\n// Returns lines that start with a certain prefix.\nSDPUtils.matchPrefix = function(blob, prefix) {\n  return SDPUtils.splitLines(blob).filter(line => line.indexOf(prefix) === 0);\n};\n\n// Parses an ICE candidate line. Sample input:\n// candidate:702786350 2 udp 41819902 8.8.8.8 60769 typ relay raddr 8.8.8.8\n// rport 55996\"\n// Input can be prefixed with a=.\nSDPUtils.parseCandidate = function(line) {\n  let parts;\n  // Parse both variants.\n  if (line.indexOf('a=candidate:') === 0) {\n    parts = line.substring(12).split(' ');\n  } else {\n    parts = line.substring(10).split(' ');\n  }\n\n  const candidate = {\n    foundation: parts[0],\n    component: {1: 'rtp', 2: 'rtcp'}[parts[1]] || parts[1],\n    protocol: parts[2].toLowerCase(),\n    priority: parseInt(parts[3], 10),\n    ip: parts[4],\n    address: parts[4], // address is an alias for ip.\n    port: parseInt(parts[5], 10),\n    // skip parts[6] == 'typ'\n    type: parts[7],\n  };\n\n  for (let i = 8; i < parts.length; i += 2) {\n    switch (parts[i]) {\n      case 'raddr':\n        candidate.relatedAddress = parts[i + 1];\n        break;\n      case 'rport':\n        candidate.relatedPort = parseInt(parts[i + 1], 10);\n        break;\n      case 'tcptype':\n        candidate.tcpType = parts[i + 1];\n        break;\n      case 'ufrag':\n        candidate.ufrag = parts[i + 1]; // for backward compatibility.\n        candidate.usernameFragment = parts[i + 1];\n        break;\n      default: // extension handling, in particular ufrag. Don't overwrite.\n        if (candidate[parts[i]] === undefined) {\n          candidate[parts[i]] = parts[i + 1];\n        }\n        break;\n    }\n  }\n  return candidate;\n};\n\n// Translates a candidate object into SDP candidate attribute.\n// This does not include the a= prefix!\nSDPUtils.writeCandidate = function(candidate) {\n  const sdp = [];\n  sdp.push(candidate.foundation);\n\n  const component = candidate.component;\n  if (component === 'rtp') {\n    sdp.push(1);\n  } else if (component === 'rtcp') {\n    sdp.push(2);\n  } else {\n    sdp.push(component);\n  }\n  sdp.push(candidate.protocol.toUpperCase());\n  sdp.push(candidate.priority);\n  sdp.push(candidate.address || candidate.ip);\n  sdp.push(candidate.port);\n\n  const type = candidate.type;\n  sdp.push('typ');\n  sdp.push(type);\n  if (type !== 'host' && candidate.relatedAddress &&\n      candidate.relatedPort) {\n    sdp.push('raddr');\n    sdp.push(candidate.relatedAddress);\n    sdp.push('rport');\n    sdp.push(candidate.relatedPort);\n  }\n  if (candidate.tcpType && candidate.protocol.toLowerCase() === 'tcp') {\n    sdp.push('tcptype');\n    sdp.push(candidate.tcpType);\n  }\n  if (candidate.usernameFragment || candidate.ufrag) {\n    sdp.push('ufrag');\n    sdp.push(candidate.usernameFragment || candidate.ufrag);\n  }\n  return 'candidate:' + sdp.join(' ');\n};\n\n// Parses an ice-options line, returns an array of option tags.\n// Sample input:\n// a=ice-options:foo bar\nSDPUtils.parseIceOptions = function(line) {\n  return line.substr(14).split(' ');\n};\n\n// Parses a rtpmap line, returns RTCRtpCoddecParameters. Sample input:\n// a=rtpmap:111 opus/48000/2\nSDPUtils.parseRtpMap = function(line) {\n  let parts = line.substr(9).split(' ');\n  const parsed = {\n    payloadType: parseInt(parts.shift(), 10), // was: id\n  };\n\n  parts = parts[0].split('/');\n\n  parsed.name = parts[0];\n  parsed.clockRate = parseInt(parts[1], 10); // was: clockrate\n  parsed.channels = parts.length === 3 ? parseInt(parts[2], 10) : 1;\n  // legacy alias, got renamed back to channels in ORTC.\n  parsed.numChannels = parsed.channels;\n  return parsed;\n};\n\n// Generates a rtpmap line from RTCRtpCodecCapability or\n// RTCRtpCodecParameters.\nSDPUtils.writeRtpMap = function(codec) {\n  let pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  const channels = codec.channels || codec.numChannels || 1;\n  return 'a=rtpmap:' + pt + ' ' + codec.name + '/' + codec.clockRate +\n      (channels !== 1 ? '/' + channels : '') + '\\r\\n';\n};\n\n// Parses a extmap line (headerextension from RFC 5285). Sample input:\n// a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n// a=extmap:2/sendonly urn:ietf:params:rtp-hdrext:toffset\nSDPUtils.parseExtmap = function(line) {\n  const parts = line.substr(9).split(' ');\n  return {\n    id: parseInt(parts[0], 10),\n    direction: parts[0].indexOf('/') > 0 ? parts[0].split('/')[1] : 'sendrecv',\n    uri: parts[1],\n  };\n};\n\n// Generates an extmap line from RTCRtpHeaderExtensionParameters or\n// RTCRtpHeaderExtension.\nSDPUtils.writeExtmap = function(headerExtension) {\n  return 'a=extmap:' + (headerExtension.id || headerExtension.preferredId) +\n      (headerExtension.direction && headerExtension.direction !== 'sendrecv'\n        ? '/' + headerExtension.direction\n        : '') +\n      ' ' + headerExtension.uri + '\\r\\n';\n};\n\n// Parses a fmtp line, returns dictionary. Sample input:\n// a=fmtp:96 vbr=on;cng=on\n// Also deals with vbr=on; cng=on\nSDPUtils.parseFmtp = function(line) {\n  const parsed = {};\n  let kv;\n  const parts = line.substr(line.indexOf(' ') + 1).split(';');\n  for (let j = 0; j < parts.length; j++) {\n    kv = parts[j].trim().split('=');\n    parsed[kv[0].trim()] = kv[1];\n  }\n  return parsed;\n};\n\n// Generates a fmtp line from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeFmtp = function(codec) {\n  let line = '';\n  let pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  if (codec.parameters && Object.keys(codec.parameters).length) {\n    const params = [];\n    Object.keys(codec.parameters).forEach(param => {\n      if (codec.parameters[param] !== undefined) {\n        params.push(param + '=' + codec.parameters[param]);\n      } else {\n        params.push(param);\n      }\n    });\n    line += 'a=fmtp:' + pt + ' ' + params.join(';') + '\\r\\n';\n  }\n  return line;\n};\n\n// Parses a rtcp-fb line, returns RTCPRtcpFeedback object. Sample input:\n// a=rtcp-fb:98 nack rpsi\nSDPUtils.parseRtcpFb = function(line) {\n  const parts = line.substr(line.indexOf(' ') + 1).split(' ');\n  return {\n    type: parts.shift(),\n    parameter: parts.join(' '),\n  };\n};\n\n// Generate a=rtcp-fb lines from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeRtcpFb = function(codec) {\n  let lines = '';\n  let pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  if (codec.rtcpFeedback && codec.rtcpFeedback.length) {\n    // FIXME: special handling for trr-int?\n    codec.rtcpFeedback.forEach(fb => {\n      lines += 'a=rtcp-fb:' + pt + ' ' + fb.type +\n      (fb.parameter && fb.parameter.length ? ' ' + fb.parameter : '') +\n          '\\r\\n';\n    });\n  }\n  return lines;\n};\n\n// Parses a RFC 5576 ssrc media attribute. Sample input:\n// a=ssrc:3735928559 cname:something\nSDPUtils.parseSsrcMedia = function(line) {\n  const sp = line.indexOf(' ');\n  const parts = {\n    ssrc: parseInt(line.substr(7, sp - 7), 10),\n  };\n  const colon = line.indexOf(':', sp);\n  if (colon > -1) {\n    parts.attribute = line.substr(sp + 1, colon - sp - 1);\n    parts.value = line.substr(colon + 1);\n  } else {\n    parts.attribute = line.substr(sp + 1);\n  }\n  return parts;\n};\n\n// Parse a ssrc-group line (see RFC 5576). Sample input:\n// a=ssrc-group:semantics 12 34\nSDPUtils.parseSsrcGroup = function(line) {\n  const parts = line.substr(13).split(' ');\n  return {\n    semantics: parts.shift(),\n    ssrcs: parts.map(ssrc => parseInt(ssrc, 10)),\n  };\n};\n\n// Extracts the MID (RFC 5888) from a media section.\n// Returns the MID or undefined if no mid line was found.\nSDPUtils.getMid = function(mediaSection) {\n  const mid = SDPUtils.matchPrefix(mediaSection, 'a=mid:')[0];\n  if (mid) {\n    return mid.substr(6);\n  }\n};\n\n// Parses a fingerprint line for DTLS-SRTP.\nSDPUtils.parseFingerprint = function(line) {\n  const parts = line.substr(14).split(' ');\n  return {\n    algorithm: parts[0].toLowerCase(), // algorithm is case-sensitive in Edge.\n    value: parts[1].toUpperCase(), // the definition is upper-case in RFC 4572.\n  };\n};\n\n// Extracts DTLS parameters from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the fingerprint line as input. See also getIceParameters.\nSDPUtils.getDtlsParameters = function(mediaSection, sessionpart) {\n  const lines = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=fingerprint:');\n  // Note: a=setup line is ignored since we use the 'auto' role in Edge.\n  return {\n    role: 'auto',\n    fingerprints: lines.map(SDPUtils.parseFingerprint),\n  };\n};\n\n// Serializes DTLS parameters to SDP.\nSDPUtils.writeDtlsParameters = function(params, setupType) {\n  let sdp = 'a=setup:' + setupType + '\\r\\n';\n  params.fingerprints.forEach(fp => {\n    sdp += 'a=fingerprint:' + fp.algorithm + ' ' + fp.value + '\\r\\n';\n  });\n  return sdp;\n};\n\n// Parses a=crypto lines into\n//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#dictionary-rtcsrtpsdesparameters-members\nSDPUtils.parseCryptoLine = function(line) {\n  const parts = line.substr(9).split(' ');\n  return {\n    tag: parseInt(parts[0], 10),\n    cryptoSuite: parts[1],\n    keyParams: parts[2],\n    sessionParams: parts.slice(3),\n  };\n};\n\nSDPUtils.writeCryptoLine = function(parameters) {\n  return 'a=crypto:' + parameters.tag + ' ' +\n    parameters.cryptoSuite + ' ' +\n    (typeof parameters.keyParams === 'object'\n      ? SDPUtils.writeCryptoKeyParams(parameters.keyParams)\n      : parameters.keyParams) +\n    (parameters.sessionParams ? ' ' + parameters.sessionParams.join(' ') : '') +\n    '\\r\\n';\n};\n\n// Parses the crypto key parameters into\n//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#rtcsrtpkeyparam*\nSDPUtils.parseCryptoKeyParams = function(keyParams) {\n  if (keyParams.indexOf('inline:') !== 0) {\n    return null;\n  }\n  const parts = keyParams.substr(7).split('|');\n  return {\n    keyMethod: 'inline',\n    keySalt: parts[0],\n    lifeTime: parts[1],\n    mkiValue: parts[2] ? parts[2].split(':')[0] : undefined,\n    mkiLength: parts[2] ? parts[2].split(':')[1] : undefined,\n  };\n};\n\nSDPUtils.writeCryptoKeyParams = function(keyParams) {\n  return keyParams.keyMethod + ':'\n    + keyParams.keySalt +\n    (keyParams.lifeTime ? '|' + keyParams.lifeTime : '') +\n    (keyParams.mkiValue && keyParams.mkiLength\n      ? '|' + keyParams.mkiValue + ':' + keyParams.mkiLength\n      : '');\n};\n\n// Extracts all SDES parameters.\nSDPUtils.getCryptoParameters = function(mediaSection, sessionpart) {\n  const lines = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=crypto:');\n  return lines.map(SDPUtils.parseCryptoLine);\n};\n\n// Parses ICE information from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the ice-ufrag and ice-pwd lines as input.\nSDPUtils.getIceParameters = function(mediaSection, sessionpart) {\n  const ufrag = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=ice-ufrag:')[0];\n  const pwd = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=ice-pwd:')[0];\n  if (!(ufrag && pwd)) {\n    return null;\n  }\n  return {\n    usernameFragment: ufrag.substr(12),\n    password: pwd.substr(10),\n  };\n};\n\n// Serializes ICE parameters to SDP.\nSDPUtils.writeIceParameters = function(params) {\n  let sdp = 'a=ice-ufrag:' + params.usernameFragment + '\\r\\n' +\n      'a=ice-pwd:' + params.password + '\\r\\n';\n  if (params.iceLite) {\n    sdp += 'a=ice-lite\\r\\n';\n  }\n  return sdp;\n};\n\n// Parses the SDP media section and returns RTCRtpParameters.\nSDPUtils.parseRtpParameters = function(mediaSection) {\n  const description = {\n    codecs: [],\n    headerExtensions: [],\n    fecMechanisms: [],\n    rtcp: [],\n  };\n  const lines = SDPUtils.splitLines(mediaSection);\n  const mline = lines[0].split(' ');\n  for (let i = 3; i < mline.length; i++) { // find all codecs from mline[3..]\n    const pt = mline[i];\n    const rtpmapline = SDPUtils.matchPrefix(\n      mediaSection, 'a=rtpmap:' + pt + ' ')[0];\n    if (rtpmapline) {\n      const codec = SDPUtils.parseRtpMap(rtpmapline);\n      const fmtps = SDPUtils.matchPrefix(\n        mediaSection, 'a=fmtp:' + pt + ' ');\n      // Only the first a=fmtp:<pt> is considered.\n      codec.parameters = fmtps.length ? SDPUtils.parseFmtp(fmtps[0]) : {};\n      codec.rtcpFeedback = SDPUtils.matchPrefix(\n        mediaSection, 'a=rtcp-fb:' + pt + ' ')\n        .map(SDPUtils.parseRtcpFb);\n      description.codecs.push(codec);\n      // parse FEC mechanisms from rtpmap lines.\n      switch (codec.name.toUpperCase()) {\n        case 'RED':\n        case 'ULPFEC':\n          description.fecMechanisms.push(codec.name.toUpperCase());\n          break;\n        default: // only RED and ULPFEC are recognized as FEC mechanisms.\n          break;\n      }\n    }\n  }\n  SDPUtils.matchPrefix(mediaSection, 'a=extmap:').forEach(line => {\n    description.headerExtensions.push(SDPUtils.parseExtmap(line));\n  });\n  // FIXME: parse rtcp.\n  return description;\n};\n\n// Generates parts of the SDP media section describing the capabilities /\n// parameters.\nSDPUtils.writeRtpDescription = function(kind, caps) {\n  let sdp = '';\n\n  // Build the mline.\n  sdp += 'm=' + kind + ' ';\n  sdp += caps.codecs.length > 0 ? '9' : '0'; // reject if no codecs.\n  sdp += ' UDP/TLS/RTP/SAVPF ';\n  sdp += caps.codecs.map(codec => {\n    if (codec.preferredPayloadType !== undefined) {\n      return codec.preferredPayloadType;\n    }\n    return codec.payloadType;\n  }).join(' ') + '\\r\\n';\n\n  sdp += 'c=IN IP4 0.0.0.0\\r\\n';\n  sdp += 'a=rtcp:9 IN IP4 0.0.0.0\\r\\n';\n\n  // Add a=rtpmap lines for each codec. Also fmtp and rtcp-fb.\n  caps.codecs.forEach(codec => {\n    sdp += SDPUtils.writeRtpMap(codec);\n    sdp += SDPUtils.writeFmtp(codec);\n    sdp += SDPUtils.writeRtcpFb(codec);\n  });\n  let maxptime = 0;\n  caps.codecs.forEach(codec => {\n    if (codec.maxptime > maxptime) {\n      maxptime = codec.maxptime;\n    }\n  });\n  if (maxptime > 0) {\n    sdp += 'a=maxptime:' + maxptime + '\\r\\n';\n  }\n\n  if (caps.headerExtensions) {\n    caps.headerExtensions.forEach(extension => {\n      sdp += SDPUtils.writeExtmap(extension);\n    });\n  }\n  // FIXME: write fecMechanisms.\n  return sdp;\n};\n\n// Parses the SDP media section and returns an array of\n// RTCRtpEncodingParameters.\nSDPUtils.parseRtpEncodingParameters = function(mediaSection) {\n  const encodingParameters = [];\n  const description = SDPUtils.parseRtpParameters(mediaSection);\n  const hasRed = description.fecMechanisms.indexOf('RED') !== -1;\n  const hasUlpfec = description.fecMechanisms.indexOf('ULPFEC') !== -1;\n\n  // filter a=ssrc:... cname:, ignore PlanB-msid\n  const ssrcs = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(line => SDPUtils.parseSsrcMedia(line))\n    .filter(parts => parts.attribute === 'cname');\n  const primarySsrc = ssrcs.length > 0 && ssrcs[0].ssrc;\n  let secondarySsrc;\n\n  const flows = SDPUtils.matchPrefix(mediaSection, 'a=ssrc-group:FID')\n    .map(line => {\n      const parts = line.substr(17).split(' ');\n      return parts.map(part => parseInt(part, 10));\n    });\n  if (flows.length > 0 && flows[0].length > 1 && flows[0][0] === primarySsrc) {\n    secondarySsrc = flows[0][1];\n  }\n\n  description.codecs.forEach(codec => {\n    if (codec.name.toUpperCase() === 'RTX' && codec.parameters.apt) {\n      let encParam = {\n        ssrc: primarySsrc,\n        codecPayloadType: parseInt(codec.parameters.apt, 10),\n      };\n      if (primarySsrc && secondarySsrc) {\n        encParam.rtx = {ssrc: secondarySsrc};\n      }\n      encodingParameters.push(encParam);\n      if (hasRed) {\n        encParam = JSON.parse(JSON.stringify(encParam));\n        encParam.fec = {\n          ssrc: primarySsrc,\n          mechanism: hasUlpfec ? 'red+ulpfec' : 'red',\n        };\n        encodingParameters.push(encParam);\n      }\n    }\n  });\n  if (encodingParameters.length === 0 && primarySsrc) {\n    encodingParameters.push({\n      ssrc: primarySsrc,\n    });\n  }\n\n  // we support both b=AS and b=TIAS but interpret AS as TIAS.\n  let bandwidth = SDPUtils.matchPrefix(mediaSection, 'b=');\n  if (bandwidth.length) {\n    if (bandwidth[0].indexOf('b=TIAS:') === 0) {\n      bandwidth = parseInt(bandwidth[0].substr(7), 10);\n    } else if (bandwidth[0].indexOf('b=AS:') === 0) {\n      // use formula from JSEP to convert b=AS to TIAS value.\n      bandwidth = parseInt(bandwidth[0].substr(5), 10) * 1000 * 0.95\n          - (50 * 40 * 8);\n    } else {\n      bandwidth = undefined;\n    }\n    encodingParameters.forEach(params => {\n      params.maxBitrate = bandwidth;\n    });\n  }\n  return encodingParameters;\n};\n\n// parses http://draft.ortc.org/#rtcrtcpparameters*\nSDPUtils.parseRtcpParameters = function(mediaSection) {\n  const rtcpParameters = {};\n\n  // Gets the first SSRC. Note that with RTX there might be multiple\n  // SSRCs.\n  const remoteSsrc = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(line => SDPUtils.parseSsrcMedia(line))\n    .filter(obj => obj.attribute === 'cname')[0];\n  if (remoteSsrc) {\n    rtcpParameters.cname = remoteSsrc.value;\n    rtcpParameters.ssrc = remoteSsrc.ssrc;\n  }\n\n  // Edge uses the compound attribute instead of reducedSize\n  // compound is !reducedSize\n  const rsize = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-rsize');\n  rtcpParameters.reducedSize = rsize.length > 0;\n  rtcpParameters.compound = rsize.length === 0;\n\n  // parses the rtcp-mux attrіbute.\n  // Note that Edge does not support unmuxed RTCP.\n  const mux = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-mux');\n  rtcpParameters.mux = mux.length > 0;\n\n  return rtcpParameters;\n};\n\nSDPUtils.writeRtcpParameters = function(rtcpParameters) {\n  let sdp = '';\n  if (rtcpParameters.reducedSize) {\n    sdp += 'a=rtcp-rsize\\r\\n';\n  }\n  if (rtcpParameters.mux) {\n    sdp += 'a=rtcp-mux\\r\\n';\n  }\n  if (rtcpParameters.ssrc !== undefined && rtcpParameters.cname) {\n    sdp += 'a=ssrc:' + rtcpParameters.ssrc +\n      ' cname:' + rtcpParameters.cname + '\\r\\n';\n  }\n  return sdp;\n};\n\n\n// parses either a=msid: or a=ssrc:... msid lines and returns\n// the id of the MediaStream and MediaStreamTrack.\nSDPUtils.parseMsid = function(mediaSection) {\n  let parts;\n  const spec = SDPUtils.matchPrefix(mediaSection, 'a=msid:');\n  if (spec.length === 1) {\n    parts = spec[0].substr(7).split(' ');\n    return {stream: parts[0], track: parts[1]};\n  }\n  const planB = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(line => SDPUtils.parseSsrcMedia(line))\n    .filter(msidParts => msidParts.attribute === 'msid');\n  if (planB.length > 0) {\n    parts = planB[0].value.split(' ');\n    return {stream: parts[0], track: parts[1]};\n  }\n};\n\n// SCTP\n// parses draft-ietf-mmusic-sctp-sdp-26 first and falls back\n// to draft-ietf-mmusic-sctp-sdp-05\nSDPUtils.parseSctpDescription = function(mediaSection) {\n  const mline = SDPUtils.parseMLine(mediaSection);\n  const maxSizeLine = SDPUtils.matchPrefix(mediaSection, 'a=max-message-size:');\n  let maxMessageSize;\n  if (maxSizeLine.length > 0) {\n    maxMessageSize = parseInt(maxSizeLine[0].substr(19), 10);\n  }\n  if (isNaN(maxMessageSize)) {\n    maxMessageSize = 65536;\n  }\n  const sctpPort = SDPUtils.matchPrefix(mediaSection, 'a=sctp-port:');\n  if (sctpPort.length > 0) {\n    return {\n      port: parseInt(sctpPort[0].substr(12), 10),\n      protocol: mline.fmt,\n      maxMessageSize,\n    };\n  }\n  const sctpMapLines = SDPUtils.matchPrefix(mediaSection, 'a=sctpmap:');\n  if (sctpMapLines.length > 0) {\n    const parts = sctpMapLines[0]\n      .substr(10)\n      .split(' ');\n    return {\n      port: parseInt(parts[0], 10),\n      protocol: parts[1],\n      maxMessageSize,\n    };\n  }\n};\n\n// SCTP\n// outputs the draft-ietf-mmusic-sctp-sdp-26 version that all browsers\n// support by now receiving in this format, unless we originally parsed\n// as the draft-ietf-mmusic-sctp-sdp-05 format (indicated by the m-line\n// protocol of DTLS/SCTP -- without UDP/ or TCP/)\nSDPUtils.writeSctpDescription = function(media, sctp) {\n  let output = [];\n  if (media.protocol !== 'DTLS/SCTP') {\n    output = [\n      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.protocol + '\\r\\n',\n      'c=IN IP4 0.0.0.0\\r\\n',\n      'a=sctp-port:' + sctp.port + '\\r\\n',\n    ];\n  } else {\n    output = [\n      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.port + '\\r\\n',\n      'c=IN IP4 0.0.0.0\\r\\n',\n      'a=sctpmap:' + sctp.port + ' ' + sctp.protocol + ' 65535\\r\\n',\n    ];\n  }\n  if (sctp.maxMessageSize !== undefined) {\n    output.push('a=max-message-size:' + sctp.maxMessageSize + '\\r\\n');\n  }\n  return output.join('');\n};\n\n// Generate a session ID for SDP.\n// https://tools.ietf.org/html/draft-ietf-rtcweb-jsep-20#section-5.2.1\n// recommends using a cryptographically random +ve 64-bit value\n// but right now this should be acceptable and within the right range\nSDPUtils.generateSessionId = function() {\n  return Math.random().toString().substr(2, 21);\n};\n\n// Write boiler plate for start of SDP\n// sessId argument is optional - if not supplied it will\n// be generated randomly\n// sessVersion is optional and defaults to 2\n// sessUser is optional and defaults to 'thisisadapterortc'\nSDPUtils.writeSessionBoilerplate = function(sessId, sessVer, sessUser) {\n  let sessionId;\n  const version = sessVer !== undefined ? sessVer : 2;\n  if (sessId) {\n    sessionId = sessId;\n  } else {\n    sessionId = SDPUtils.generateSessionId();\n  }\n  const user = sessUser || 'thisisadapterortc';\n  // FIXME: sess-id should be an NTP timestamp.\n  return 'v=0\\r\\n' +\n      'o=' + user + ' ' + sessionId + ' ' + version +\n        ' IN IP4 127.0.0.1\\r\\n' +\n      's=-\\r\\n' +\n      't=0 0\\r\\n';\n};\n\n// Gets the direction from the mediaSection or the sessionpart.\nSDPUtils.getDirection = function(mediaSection, sessionpart) {\n  // Look for sendrecv, sendonly, recvonly, inactive, default to sendrecv.\n  const lines = SDPUtils.splitLines(mediaSection);\n  for (let i = 0; i < lines.length; i++) {\n    switch (lines[i]) {\n      case 'a=sendrecv':\n      case 'a=sendonly':\n      case 'a=recvonly':\n      case 'a=inactive':\n        return lines[i].substr(2);\n      default:\n        // FIXME: What should happen here?\n    }\n  }\n  if (sessionpart) {\n    return SDPUtils.getDirection(sessionpart);\n  }\n  return 'sendrecv';\n};\n\nSDPUtils.getKind = function(mediaSection) {\n  const lines = SDPUtils.splitLines(mediaSection);\n  const mline = lines[0].split(' ');\n  return mline[0].substr(2);\n};\n\nSDPUtils.isRejected = function(mediaSection) {\n  return mediaSection.split(' ', 2)[1] === '0';\n};\n\nSDPUtils.parseMLine = function(mediaSection) {\n  const lines = SDPUtils.splitLines(mediaSection);\n  const parts = lines[0].substr(2).split(' ');\n  return {\n    kind: parts[0],\n    port: parseInt(parts[1], 10),\n    protocol: parts[2],\n    fmt: parts.slice(3).join(' '),\n  };\n};\n\nSDPUtils.parseOLine = function(mediaSection) {\n  const line = SDPUtils.matchPrefix(mediaSection, 'o=')[0];\n  const parts = line.substr(2).split(' ');\n  return {\n    username: parts[0],\n    sessionId: parts[1],\n    sessionVersion: parseInt(parts[2], 10),\n    netType: parts[3],\n    addressType: parts[4],\n    address: parts[5],\n  };\n};\n\n// a very naive interpretation of a valid SDP.\nSDPUtils.isValidSDP = function(blob) {\n  if (typeof blob !== 'string' || blob.length === 0) {\n    return false;\n  }\n  const lines = SDPUtils.splitLines(blob);\n  for (let i = 0; i < lines.length; i++) {\n    if (lines[i].length < 2 || lines[i].charAt(1) !== '=') {\n      return false;\n    }\n    // TODO: check the modifier a bit more.\n  }\n  return true;\n};\n\n// Expose public methods.\nif (typeof module === 'object') {\n  module.exports = SDPUtils;\n}\n","(function (global, factory) {\n            typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n            typeof define === 'function' && define.amd ? define(factory) :\n            (global = global || self, global.strophe = factory());\n}(this, function () { 'use strict';\n\n            var global$1 = (typeof global !== \"undefined\" ? global :\n                        typeof self !== \"undefined\" ? self :\n                        typeof window !== \"undefined\" ? window : {});\n\n            function _typeof(obj) {\n              if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n                _typeof = function (obj) {\n                  return typeof obj;\n                };\n              } else {\n                _typeof = function (obj) {\n                  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n                };\n              }\n\n              return _typeof(obj);\n            }\n\n            function _toConsumableArray(arr) {\n              return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n            }\n\n            function _arrayWithoutHoles(arr) {\n              if (Array.isArray(arr)) {\n                for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n                return arr2;\n              }\n            }\n\n            function _iterableToArray(iter) {\n              if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n            }\n\n            function _nonIterableSpread() {\n              throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n            }\n\n            /*\n             * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n             * Digest Algorithm, as defined in RFC 1321.\n             * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.\n             * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n             * Distributed under the BSD License\n             * See http://pajhome.org.uk/crypt/md5 for more info.\n             */\n\n            /*\n             * Everything that isn't used by Strophe has been stripped here!\n             */\n\n            /*\n             * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n             * to work around bugs in some JS interpreters.\n             */\n            var safe_add = function safe_add(x, y) {\n              var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n              var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n              return msw << 16 | lsw & 0xFFFF;\n            };\n            /*\n             * Bitwise rotate a 32-bit number to the left.\n             */\n\n\n            var bit_rol = function bit_rol(num, cnt) {\n              return num << cnt | num >>> 32 - cnt;\n            };\n            /*\n             * Convert a string to an array of little-endian words\n             */\n\n\n            var str2binl = function str2binl(str) {\n              if (typeof str !== \"string\") {\n                throw new Error(\"str2binl was passed a non-string\");\n              }\n\n              var bin = [];\n\n              for (var i = 0; i < str.length * 8; i += 8) {\n                bin[i >> 5] |= (str.charCodeAt(i / 8) & 255) << i % 32;\n              }\n\n              return bin;\n            };\n            /*\n             * Convert an array of little-endian words to a string\n             */\n\n\n            var binl2str = function binl2str(bin) {\n              var str = \"\";\n\n              for (var i = 0; i < bin.length * 32; i += 8) {\n                str += String.fromCharCode(bin[i >> 5] >>> i % 32 & 255);\n              }\n\n              return str;\n            };\n            /*\n             * Convert an array of little-endian words to a hex string.\n             */\n\n\n            var binl2hex = function binl2hex(binarray) {\n              var hex_tab = \"0123456789abcdef\";\n              var str = \"\";\n\n              for (var i = 0; i < binarray.length * 4; i++) {\n                str += hex_tab.charAt(binarray[i >> 2] >> i % 4 * 8 + 4 & 0xF) + hex_tab.charAt(binarray[i >> 2] >> i % 4 * 8 & 0xF);\n              }\n\n              return str;\n            };\n            /*\n             * These functions implement the four basic operations the algorithm uses.\n             */\n\n\n            var md5_cmn = function md5_cmn(q, a, b, x, s, t) {\n              return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s), b);\n            };\n\n            var md5_ff = function md5_ff(a, b, c, d, x, s, t) {\n              return md5_cmn(b & c | ~b & d, a, b, x, s, t);\n            };\n\n            var md5_gg = function md5_gg(a, b, c, d, x, s, t) {\n              return md5_cmn(b & d | c & ~d, a, b, x, s, t);\n            };\n\n            var md5_hh = function md5_hh(a, b, c, d, x, s, t) {\n              return md5_cmn(b ^ c ^ d, a, b, x, s, t);\n            };\n\n            var md5_ii = function md5_ii(a, b, c, d, x, s, t) {\n              return md5_cmn(c ^ (b | ~d), a, b, x, s, t);\n            };\n            /*\n             * Calculate the MD5 of an array of little-endian words, and a bit length\n             */\n\n\n            var core_md5 = function core_md5(x, len) {\n              /* append padding */\n              x[len >> 5] |= 0x80 << len % 32;\n              x[(len + 64 >>> 9 << 4) + 14] = len;\n              var a = 1732584193;\n              var b = -271733879;\n              var c = -1732584194;\n              var d = 271733878;\n              var olda, oldb, oldc, oldd;\n\n              for (var i = 0; i < x.length; i += 16) {\n                olda = a;\n                oldb = b;\n                oldc = c;\n                oldd = d;\n                a = md5_ff(a, b, c, d, x[i + 0], 7, -680876936);\n                d = md5_ff(d, a, b, c, x[i + 1], 12, -389564586);\n                c = md5_ff(c, d, a, b, x[i + 2], 17, 606105819);\n                b = md5_ff(b, c, d, a, x[i + 3], 22, -1044525330);\n                a = md5_ff(a, b, c, d, x[i + 4], 7, -176418897);\n                d = md5_ff(d, a, b, c, x[i + 5], 12, 1200080426);\n                c = md5_ff(c, d, a, b, x[i + 6], 17, -1473231341);\n                b = md5_ff(b, c, d, a, x[i + 7], 22, -45705983);\n                a = md5_ff(a, b, c, d, x[i + 8], 7, 1770035416);\n                d = md5_ff(d, a, b, c, x[i + 9], 12, -1958414417);\n                c = md5_ff(c, d, a, b, x[i + 10], 17, -42063);\n                b = md5_ff(b, c, d, a, x[i + 11], 22, -1990404162);\n                a = md5_ff(a, b, c, d, x[i + 12], 7, 1804603682);\n                d = md5_ff(d, a, b, c, x[i + 13], 12, -40341101);\n                c = md5_ff(c, d, a, b, x[i + 14], 17, -1502002290);\n                b = md5_ff(b, c, d, a, x[i + 15], 22, 1236535329);\n                a = md5_gg(a, b, c, d, x[i + 1], 5, -165796510);\n                d = md5_gg(d, a, b, c, x[i + 6], 9, -1069501632);\n                c = md5_gg(c, d, a, b, x[i + 11], 14, 643717713);\n                b = md5_gg(b, c, d, a, x[i + 0], 20, -373897302);\n                a = md5_gg(a, b, c, d, x[i + 5], 5, -701558691);\n                d = md5_gg(d, a, b, c, x[i + 10], 9, 38016083);\n                c = md5_gg(c, d, a, b, x[i + 15], 14, -660478335);\n                b = md5_gg(b, c, d, a, x[i + 4], 20, -405537848);\n                a = md5_gg(a, b, c, d, x[i + 9], 5, 568446438);\n                d = md5_gg(d, a, b, c, x[i + 14], 9, -1019803690);\n                c = md5_gg(c, d, a, b, x[i + 3], 14, -187363961);\n                b = md5_gg(b, c, d, a, x[i + 8], 20, 1163531501);\n                a = md5_gg(a, b, c, d, x[i + 13], 5, -1444681467);\n                d = md5_gg(d, a, b, c, x[i + 2], 9, -51403784);\n                c = md5_gg(c, d, a, b, x[i + 7], 14, 1735328473);\n                b = md5_gg(b, c, d, a, x[i + 12], 20, -1926607734);\n                a = md5_hh(a, b, c, d, x[i + 5], 4, -378558);\n                d = md5_hh(d, a, b, c, x[i + 8], 11, -2022574463);\n                c = md5_hh(c, d, a, b, x[i + 11], 16, 1839030562);\n                b = md5_hh(b, c, d, a, x[i + 14], 23, -35309556);\n                a = md5_hh(a, b, c, d, x[i + 1], 4, -1530992060);\n                d = md5_hh(d, a, b, c, x[i + 4], 11, 1272893353);\n                c = md5_hh(c, d, a, b, x[i + 7], 16, -155497632);\n                b = md5_hh(b, c, d, a, x[i + 10], 23, -1094730640);\n                a = md5_hh(a, b, c, d, x[i + 13], 4, 681279174);\n                d = md5_hh(d, a, b, c, x[i + 0], 11, -358537222);\n                c = md5_hh(c, d, a, b, x[i + 3], 16, -722521979);\n                b = md5_hh(b, c, d, a, x[i + 6], 23, 76029189);\n                a = md5_hh(a, b, c, d, x[i + 9], 4, -640364487);\n                d = md5_hh(d, a, b, c, x[i + 12], 11, -421815835);\n                c = md5_hh(c, d, a, b, x[i + 15], 16, 530742520);\n                b = md5_hh(b, c, d, a, x[i + 2], 23, -995338651);\n                a = md5_ii(a, b, c, d, x[i + 0], 6, -198630844);\n                d = md5_ii(d, a, b, c, x[i + 7], 10, 1126891415);\n                c = md5_ii(c, d, a, b, x[i + 14], 15, -1416354905);\n                b = md5_ii(b, c, d, a, x[i + 5], 21, -57434055);\n                a = md5_ii(a, b, c, d, x[i + 12], 6, 1700485571);\n                d = md5_ii(d, a, b, c, x[i + 3], 10, -1894986606);\n                c = md5_ii(c, d, a, b, x[i + 10], 15, -1051523);\n                b = md5_ii(b, c, d, a, x[i + 1], 21, -2054922799);\n                a = md5_ii(a, b, c, d, x[i + 8], 6, 1873313359);\n                d = md5_ii(d, a, b, c, x[i + 15], 10, -30611744);\n                c = md5_ii(c, d, a, b, x[i + 6], 15, -1560198380);\n                b = md5_ii(b, c, d, a, x[i + 13], 21, 1309151649);\n                a = md5_ii(a, b, c, d, x[i + 4], 6, -145523070);\n                d = md5_ii(d, a, b, c, x[i + 11], 10, -1120210379);\n                c = md5_ii(c, d, a, b, x[i + 2], 15, 718787259);\n                b = md5_ii(b, c, d, a, x[i + 9], 21, -343485551);\n                a = safe_add(a, olda);\n                b = safe_add(b, oldb);\n                c = safe_add(c, oldc);\n                d = safe_add(d, oldd);\n              }\n\n              return [a, b, c, d];\n            };\n            /*\n             * These are the functions you'll usually want to call.\n             * They take string arguments and return either hex or base-64 encoded\n             * strings.\n             */\n\n\n            var MD5 = {\n              hexdigest: function hexdigest(s) {\n                return binl2hex(core_md5(str2binl(s), s.length * 8));\n              },\n              hash: function hash(s) {\n                return binl2str(core_md5(str2binl(s), s.length * 8));\n              }\n            };\n\n            /*\n             * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined\n             * in FIPS PUB 180-1\n             * Version 2.1a Copyright Paul Johnston 2000 - 2002.\n             * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n             * Distributed under the BSD License\n             * See http://pajhome.org.uk/crypt/md5 for details.\n             */\n\n            /* global define */\n\n            /* Some functions and variables have been stripped for use with Strophe */\n\n            /*\n             * Calculate the SHA-1 of an array of big-endian words, and a bit length\n             */\n            function core_sha1(x, len) {\n              /* append padding */\n              x[len >> 5] |= 0x80 << 24 - len % 32;\n              x[(len + 64 >> 9 << 4) + 15] = len;\n              var w = new Array(80);\n              var a = 1732584193;\n              var b = -271733879;\n              var c = -1732584194;\n              var d = 271733878;\n              var e = -1009589776;\n              var i, j, t, olda, oldb, oldc, oldd, olde;\n\n              for (i = 0; i < x.length; i += 16) {\n                olda = a;\n                oldb = b;\n                oldc = c;\n                oldd = d;\n                olde = e;\n\n                for (j = 0; j < 80; j++) {\n                  if (j < 16) {\n                    w[j] = x[i + j];\n                  } else {\n                    w[j] = rol(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);\n                  }\n\n                  t = safe_add$1(safe_add$1(rol(a, 5), sha1_ft(j, b, c, d)), safe_add$1(safe_add$1(e, w[j]), sha1_kt(j)));\n                  e = d;\n                  d = c;\n                  c = rol(b, 30);\n                  b = a;\n                  a = t;\n                }\n\n                a = safe_add$1(a, olda);\n                b = safe_add$1(b, oldb);\n                c = safe_add$1(c, oldc);\n                d = safe_add$1(d, oldd);\n                e = safe_add$1(e, olde);\n              }\n\n              return [a, b, c, d, e];\n            }\n            /*\n             * Perform the appropriate triplet combination function for the current\n             * iteration\n             */\n\n\n            function sha1_ft(t, b, c, d) {\n              if (t < 20) {\n                return b & c | ~b & d;\n              }\n\n              if (t < 40) {\n                return b ^ c ^ d;\n              }\n\n              if (t < 60) {\n                return b & c | b & d | c & d;\n              }\n\n              return b ^ c ^ d;\n            }\n            /*\n             * Determine the appropriate additive constant for the current iteration\n             */\n\n\n            function sha1_kt(t) {\n              return t < 20 ? 1518500249 : t < 40 ? 1859775393 : t < 60 ? -1894007588 : -899497514;\n            }\n            /*\n             * Calculate the HMAC-SHA1 of a key and some data\n             */\n\n\n            function core_hmac_sha1(key, data) {\n              var bkey = str2binb(key);\n\n              if (bkey.length > 16) {\n                bkey = core_sha1(bkey, key.length * 8);\n              }\n\n              var ipad = new Array(16),\n                  opad = new Array(16);\n\n              for (var i = 0; i < 16; i++) {\n                ipad[i] = bkey[i] ^ 0x36363636;\n                opad[i] = bkey[i] ^ 0x5C5C5C5C;\n              }\n\n              var hash = core_sha1(ipad.concat(str2binb(data)), 512 + data.length * 8);\n              return core_sha1(opad.concat(hash), 512 + 160);\n            }\n            /*\n             * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n             * to work around bugs in some JS interpreters.\n             */\n\n\n            function safe_add$1(x, y) {\n              var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n              var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n              return msw << 16 | lsw & 0xFFFF;\n            }\n            /*\n             * Bitwise rotate a 32-bit number to the left.\n             */\n\n\n            function rol(num, cnt) {\n              return num << cnt | num >>> 32 - cnt;\n            }\n            /*\n             * Convert an 8-bit or 16-bit string to an array of big-endian words\n             * In 8-bit function, characters >255 have their hi-byte silently ignored.\n             */\n\n\n            function str2binb(str) {\n              var bin = [];\n              var mask = 255;\n\n              for (var i = 0; i < str.length * 8; i += 8) {\n                bin[i >> 5] |= (str.charCodeAt(i / 8) & mask) << 24 - i % 32;\n              }\n\n              return bin;\n            }\n            /*\n             * Convert an array of big-endian words to a base-64 string\n             */\n\n\n            function binb2b64(binarray) {\n              var tab = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n              var str = \"\";\n              var triplet, j;\n\n              for (var i = 0; i < binarray.length * 4; i += 3) {\n                triplet = (binarray[i >> 2] >> 8 * (3 - i % 4) & 0xFF) << 16 | (binarray[i + 1 >> 2] >> 8 * (3 - (i + 1) % 4) & 0xFF) << 8 | binarray[i + 2 >> 2] >> 8 * (3 - (i + 2) % 4) & 0xFF;\n\n                for (j = 0; j < 4; j++) {\n                  if (i * 8 + j * 6 > binarray.length * 32) {\n                    str += \"=\";\n                  } else {\n                    str += tab.charAt(triplet >> 6 * (3 - j) & 0x3F);\n                  }\n                }\n              }\n\n              return str;\n            }\n            /*\n             * Convert an array of big-endian words to a string\n             */\n\n\n            function binb2str(bin) {\n              var str = \"\";\n              var mask = 255;\n\n              for (var i = 0; i < bin.length * 32; i += 8) {\n                str += String.fromCharCode(bin[i >> 5] >>> 24 - i % 32 & mask);\n              }\n\n              return str;\n            }\n            /*\n             * These are the functions you'll usually want to call\n             * They take string arguments and return either hex or base-64 encoded strings\n             */\n\n\n            var SHA1 = {\n              b64_hmac_sha1: function b64_hmac_sha1(key, data) {\n                return binb2b64(core_hmac_sha1(key, data));\n              },\n              b64_sha1: function b64_sha1(s) {\n                return binb2b64(core_sha1(str2binb(s), s.length * 8));\n              },\n              binb2str: binb2str,\n              core_hmac_sha1: core_hmac_sha1,\n              str_hmac_sha1: function str_hmac_sha1(key, data) {\n                return binb2str(core_hmac_sha1(key, data));\n              },\n              str_sha1: function str_sha1(s) {\n                return binb2str(core_sha1(str2binb(s), s.length * 8));\n              }\n            };\n\n            var utils = {\n              utf16to8: function utf16to8(str) {\n                var i, c;\n                var out = \"\";\n                var len = str.length;\n\n                for (i = 0; i < len; i++) {\n                  c = str.charCodeAt(i);\n\n                  if (c >= 0x0000 && c <= 0x007F) {\n                    out += str.charAt(i);\n                  } else if (c > 0x07FF) {\n                    out += String.fromCharCode(0xE0 | c >> 12 & 0x0F);\n                    out += String.fromCharCode(0x80 | c >> 6 & 0x3F);\n                    out += String.fromCharCode(0x80 | c >> 0 & 0x3F);\n                  } else {\n                    out += String.fromCharCode(0xC0 | c >> 6 & 0x1F);\n                    out += String.fromCharCode(0x80 | c >> 0 & 0x3F);\n                  }\n                }\n\n                return out;\n              },\n              addCookies: function addCookies(cookies) {\n                /* Parameters:\n                 *  (Object) cookies - either a map of cookie names\n                 *    to string values or to maps of cookie values.\n                 *\n                 * For example:\n                 * { \"myCookie\": \"1234\" }\n                 *\n                 * or:\n                 * { \"myCookie\": {\n                 *      \"value\": \"1234\",\n                 *      \"domain\": \".example.org\",\n                 *      \"path\": \"/\",\n                 *      \"expires\": expirationDate\n                 *      }\n                 *  }\n                 *\n                 *  These values get passed to Strophe.Connection via\n                 *   options.cookies\n                 */\n                cookies = cookies || {};\n\n                for (var cookieName in cookies) {\n                  if (Object.prototype.hasOwnProperty.call(cookies, cookieName)) {\n                    var expires = '';\n                    var domain = '';\n                    var path = '';\n                    var cookieObj = cookies[cookieName];\n                    var isObj = _typeof(cookieObj) === \"object\";\n                    var cookieValue = escape(unescape(isObj ? cookieObj.value : cookieObj));\n\n                    if (isObj) {\n                      expires = cookieObj.expires ? \";expires=\" + cookieObj.expires : '';\n                      domain = cookieObj.domain ? \";domain=\" + cookieObj.domain : '';\n                      path = cookieObj.path ? \";path=\" + cookieObj.path : '';\n                    }\n\n                    document.cookie = cookieName + '=' + cookieValue + expires + domain + path;\n                  }\n                }\n              }\n            };\n\n            /** Function: $build\n             *  Create a Strophe.Builder.\n             *  This is an alias for 'new Strophe.Builder(name, attrs)'.\n             *\n             *  Parameters:\n             *    (String) name - The root element name.\n             *    (Object) attrs - The attributes for the root element in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n            function $build(name, attrs) {\n              return new Strophe.Builder(name, attrs);\n            }\n            /** Function: $msg\n             *  Create a Strophe.Builder with a <message/> element as the root.\n             *\n             *  Parameters:\n             *    (Object) attrs - The <message/> element attributes in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n\n            function $msg(attrs) {\n              return new Strophe.Builder(\"message\", attrs);\n            }\n            /** Function: $iq\n             *  Create a Strophe.Builder with an <iq/> element as the root.\n             *\n             *  Parameters:\n             *    (Object) attrs - The <iq/> element attributes in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n\n            function $iq(attrs) {\n              return new Strophe.Builder(\"iq\", attrs);\n            }\n            /** Function: $pres\n             *  Create a Strophe.Builder with a <presence/> element as the root.\n             *\n             *  Parameters:\n             *    (Object) attrs - The <presence/> element attributes in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n\n            function $pres(attrs) {\n              return new Strophe.Builder(\"presence\", attrs);\n            }\n            /** Class: Strophe\n             *  An object container for all Strophe library functions.\n             *\n             *  This class is just a container for all the objects and constants\n             *  used in the library.  It is not meant to be instantiated, but to\n             *  provide a namespace for library objects, constants, and functions.\n             */\n\n\n            var Strophe = {\n              /** Constant: VERSION */\n              VERSION: \"@VERSION@\",\n\n              /** Constants: XMPP Namespace Constants\n               *  Common namespace constants from the XMPP RFCs and XEPs.\n               *\n               *  NS.HTTPBIND - HTTP BIND namespace from XEP 124.\n               *  NS.BOSH - BOSH namespace from XEP 206.\n               *  NS.CLIENT - Main XMPP client namespace.\n               *  NS.AUTH - Legacy authentication namespace.\n               *  NS.ROSTER - Roster operations namespace.\n               *  NS.PROFILE - Profile namespace.\n               *  NS.DISCO_INFO - Service discovery info namespace from XEP 30.\n               *  NS.DISCO_ITEMS - Service discovery items namespace from XEP 30.\n               *  NS.MUC - Multi-User Chat namespace from XEP 45.\n               *  NS.SASL - XMPP SASL namespace from RFC 3920.\n               *  NS.STREAM - XMPP Streams namespace from RFC 3920.\n               *  NS.BIND - XMPP Binding namespace from RFC 3920 and RFC 6120.\n               *  NS.SESSION - XMPP Session namespace from RFC 3920.\n               *  NS.XHTML_IM - XHTML-IM namespace from XEP 71.\n               *  NS.XHTML - XHTML body namespace from XEP 71.\n               */\n              NS: {\n                HTTPBIND: \"http://jabber.org/protocol/httpbind\",\n                BOSH: \"urn:xmpp:xbosh\",\n                CLIENT: \"jabber:client\",\n                AUTH: \"jabber:iq:auth\",\n                ROSTER: \"jabber:iq:roster\",\n                PROFILE: \"jabber:iq:profile\",\n                DISCO_INFO: \"http://jabber.org/protocol/disco#info\",\n                DISCO_ITEMS: \"http://jabber.org/protocol/disco#items\",\n                MUC: \"http://jabber.org/protocol/muc\",\n                SASL: \"urn:ietf:params:xml:ns:xmpp-sasl\",\n                STREAM: \"http://etherx.jabber.org/streams\",\n                FRAMING: \"urn:ietf:params:xml:ns:xmpp-framing\",\n                BIND: \"urn:ietf:params:xml:ns:xmpp-bind\",\n                SESSION: \"urn:ietf:params:xml:ns:xmpp-session\",\n                VERSION: \"jabber:iq:version\",\n                STANZAS: \"urn:ietf:params:xml:ns:xmpp-stanzas\",\n                XHTML_IM: \"http://jabber.org/protocol/xhtml-im\",\n                XHTML: \"http://www.w3.org/1999/xhtml\"\n              },\n\n              /** Constants: XHTML_IM Namespace\n               *  contains allowed tags, tag attributes, and css properties.\n               *  Used in the createHtml function to filter incoming html into the allowed XHTML-IM subset.\n               *  See http://xmpp.org/extensions/xep-0071.html#profile-summary for the list of recommended\n               *  allowed tags and their attributes.\n               */\n              XHTML: {\n                tags: ['a', 'blockquote', 'br', 'cite', 'em', 'img', 'li', 'ol', 'p', 'span', 'strong', 'ul', 'body'],\n                attributes: {\n                  'a': ['href'],\n                  'blockquote': ['style'],\n                  'br': [],\n                  'cite': ['style'],\n                  'em': [],\n                  'img': ['src', 'alt', 'style', 'height', 'width'],\n                  'li': ['style'],\n                  'ol': ['style'],\n                  'p': ['style'],\n                  'span': ['style'],\n                  'strong': [],\n                  'ul': ['style'],\n                  'body': []\n                },\n                css: ['background-color', 'color', 'font-family', 'font-size', 'font-style', 'font-weight', 'margin-left', 'margin-right', 'text-align', 'text-decoration'],\n\n                /** Function: XHTML.validTag\n                 *\n                 * Utility method to determine whether a tag is allowed\n                 * in the XHTML_IM namespace.\n                 *\n                 * XHTML tag names are case sensitive and must be lower case.\n                 */\n                validTag: function validTag(tag) {\n                  for (var i = 0; i < Strophe.XHTML.tags.length; i++) {\n                    if (tag === Strophe.XHTML.tags[i]) {\n                      return true;\n                    }\n                  }\n\n                  return false;\n                },\n\n                /** Function: XHTML.validAttribute\n                 *\n                 * Utility method to determine whether an attribute is allowed\n                 * as recommended per XEP-0071\n                 *\n                 * XHTML attribute names are case sensitive and must be lower case.\n                 */\n                validAttribute: function validAttribute(tag, attribute) {\n                  if (typeof Strophe.XHTML.attributes[tag] !== 'undefined' && Strophe.XHTML.attributes[tag].length > 0) {\n                    for (var i = 0; i < Strophe.XHTML.attributes[tag].length; i++) {\n                      if (attribute === Strophe.XHTML.attributes[tag][i]) {\n                        return true;\n                      }\n                    }\n                  }\n\n                  return false;\n                },\n                validCSS: function validCSS(style) {\n                  for (var i = 0; i < Strophe.XHTML.css.length; i++) {\n                    if (style === Strophe.XHTML.css[i]) {\n                      return true;\n                    }\n                  }\n\n                  return false;\n                }\n              },\n\n              /** Constants: Connection Status Constants\n               *  Connection status constants for use by the connection handler\n               *  callback.\n               *\n               *  Status.ERROR - An error has occurred\n               *  Status.CONNECTING - The connection is currently being made\n               *  Status.CONNFAIL - The connection attempt failed\n               *  Status.AUTHENTICATING - The connection is authenticating\n               *  Status.AUTHFAIL - The authentication attempt failed\n               *  Status.CONNECTED - The connection has succeeded\n               *  Status.DISCONNECTED - The connection has been terminated\n               *  Status.DISCONNECTING - The connection is currently being terminated\n               *  Status.ATTACHED - The connection has been attached\n               *  Status.REDIRECT - The connection has been redirected\n               *  Status.CONNTIMEOUT - The connection has timed out\n               */\n              Status: {\n                ERROR: 0,\n                CONNECTING: 1,\n                CONNFAIL: 2,\n                AUTHENTICATING: 3,\n                AUTHFAIL: 4,\n                CONNECTED: 5,\n                DISCONNECTED: 6,\n                DISCONNECTING: 7,\n                ATTACHED: 8,\n                REDIRECT: 9,\n                CONNTIMEOUT: 10,\n                BINDREQUIRED: 11\n              },\n              ErrorCondition: {\n                BAD_FORMAT: \"bad-format\",\n                CONFLICT: \"conflict\",\n                MISSING_JID_NODE: \"x-strophe-bad-non-anon-jid\",\n                NO_AUTH_MECH: \"no-auth-mech\",\n                UNKNOWN_REASON: \"unknown\"\n              },\n\n              /** Constants: Log Level Constants\n               *  Logging level indicators.\n               *\n               *  LogLevel.DEBUG - Debug output\n               *  LogLevel.INFO - Informational output\n               *  LogLevel.WARN - Warnings\n               *  LogLevel.ERROR - Errors\n               *  LogLevel.FATAL - Fatal errors\n               */\n              LogLevel: {\n                DEBUG: 0,\n                INFO: 1,\n                WARN: 2,\n                ERROR: 3,\n                FATAL: 4\n              },\n\n              /** PrivateConstants: DOM Element Type Constants\n               *  DOM element types.\n               *\n               *  ElementType.NORMAL - Normal element.\n               *  ElementType.TEXT - Text data element.\n               *  ElementType.FRAGMENT - XHTML fragment element.\n               */\n              ElementType: {\n                NORMAL: 1,\n                TEXT: 3,\n                CDATA: 4,\n                FRAGMENT: 11\n              },\n\n              /** PrivateConstants: Timeout Values\n               *  Timeout values for error states.  These values are in seconds.\n               *  These should not be changed unless you know exactly what you are\n               *  doing.\n               *\n               *  TIMEOUT - Timeout multiplier. A waiting request will be considered\n               *      failed after Math.floor(TIMEOUT * wait) seconds have elapsed.\n               *      This defaults to 1.1, and with default wait, 66 seconds.\n               *  SECONDARY_TIMEOUT - Secondary timeout multiplier. In cases where\n               *      Strophe can detect early failure, it will consider the request\n               *      failed if it doesn't return after\n               *      Math.floor(SECONDARY_TIMEOUT * wait) seconds have elapsed.\n               *      This defaults to 0.1, and with default wait, 6 seconds.\n               */\n              TIMEOUT: 1.1,\n              SECONDARY_TIMEOUT: 0.1,\n\n              /** Function: addNamespace\n               *  This function is used to extend the current namespaces in\n               *  Strophe.NS.  It takes a key and a value with the key being the\n               *  name of the new namespace, with its actual value.\n               *  For example:\n               *  Strophe.addNamespace('PUBSUB', \"http://jabber.org/protocol/pubsub\");\n               *\n               *  Parameters:\n               *    (String) name - The name under which the namespace will be\n               *      referenced under Strophe.NS\n               *    (String) value - The actual namespace.\n               */\n              addNamespace: function addNamespace(name, value) {\n                Strophe.NS[name] = value;\n              },\n\n              /** Function: forEachChild\n               *  Map a function over some or all child elements of a given element.\n               *\n               *  This is a small convenience function for mapping a function over\n               *  some or all of the children of an element.  If elemName is null, all\n               *  children will be passed to the function, otherwise only children\n               *  whose tag names match elemName will be passed.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The element to operate on.\n               *    (String) elemName - The child element tag name filter.\n               *    (Function) func - The function to apply to each child.  This\n               *      function should take a single argument, a DOM element.\n               */\n              forEachChild: function forEachChild(elem, elemName, func) {\n                for (var i = 0; i < elem.childNodes.length; i++) {\n                  var childNode = elem.childNodes[i];\n\n                  if (childNode.nodeType === Strophe.ElementType.NORMAL && (!elemName || this.isTagEqual(childNode, elemName))) {\n                    func(childNode);\n                  }\n                }\n              },\n\n              /** Function: isTagEqual\n               *  Compare an element's tag name with a string.\n               *\n               *  This function is case sensitive.\n               *\n               *  Parameters:\n               *    (XMLElement) el - A DOM element.\n               *    (String) name - The element name.\n               *\n               *  Returns:\n               *    true if the element's tag name matches _el_, and false\n               *    otherwise.\n               */\n              isTagEqual: function isTagEqual(el, name) {\n                return el.tagName === name;\n              },\n\n              /** PrivateVariable: _xmlGenerator\n               *  _Private_ variable that caches a DOM document to\n               *  generate elements.\n               */\n              _xmlGenerator: null,\n\n              /** PrivateFunction: _makeGenerator\n               *  _Private_ function that creates a dummy XML DOM document to serve as\n               *  an element and text node generator.\n               */\n              _makeGenerator: function _makeGenerator() {\n                var doc; // IE9 does implement createDocument(); however, using it will cause the browser to leak memory on page unload.\n                // Here, we test for presence of createDocument() plus IE's proprietary documentMode attribute, which would be\n                // less than 10 in the case of IE9 and below.\n\n                if (document.implementation.createDocument === undefined || document.implementation.createDocument && document.documentMode && document.documentMode < 10) {\n                  doc = this._getIEXmlDom();\n                  doc.appendChild(doc.createElement('strophe'));\n                } else {\n                  doc = document.implementation.createDocument('jabber:client', 'strophe', null);\n                }\n\n                return doc;\n              },\n\n              /** Function: xmlGenerator\n               *  Get the DOM document to generate elements.\n               *\n               *  Returns:\n               *    The currently used DOM document.\n               */\n              xmlGenerator: function xmlGenerator() {\n                if (!Strophe._xmlGenerator) {\n                  Strophe._xmlGenerator = Strophe._makeGenerator();\n                }\n\n                return Strophe._xmlGenerator;\n              },\n\n              /** PrivateFunction: _getIEXmlDom\n               *  Gets IE xml doc object\n               *\n               *  Returns:\n               *    A Microsoft XML DOM Object\n               *  See Also:\n               *    http://msdn.microsoft.com/en-us/library/ms757837%28VS.85%29.aspx\n               */\n              _getIEXmlDom: function _getIEXmlDom() {\n                var doc = null;\n                var docStrings = [\"Msxml2.DOMDocument.6.0\", \"Msxml2.DOMDocument.5.0\", \"Msxml2.DOMDocument.4.0\", \"MSXML2.DOMDocument.3.0\", \"MSXML2.DOMDocument\", \"MSXML.DOMDocument\", \"Microsoft.XMLDOM\"];\n\n                for (var d = 0; d < docStrings.length; d++) {\n                  if (doc === null) {\n                    try {\n                      doc = new ActiveXObject(docStrings[d]);\n                    } catch (e) {\n                      doc = null;\n                    }\n                  } else {\n                    break;\n                  }\n                }\n\n                return doc;\n              },\n\n              /** Function: xmlElement\n               *  Create an XML DOM element.\n               *\n               *  This function creates an XML DOM element correctly across all\n               *  implementations. Note that these are not HTML DOM elements, which\n               *  aren't appropriate for XMPP stanzas.\n               *\n               *  Parameters:\n               *    (String) name - The name for the element.\n               *    (Array|Object) attrs - An optional array or object containing\n               *      key/value pairs to use as element attributes. The object should\n               *      be in the format {'key': 'value'} or {key: 'value'}. The array\n               *      should have the format [['key1', 'value1'], ['key2', 'value2']].\n               *    (String) text - The text child data for the element.\n               *\n               *  Returns:\n               *    A new XML DOM element.\n               */\n              xmlElement: function xmlElement(name) {\n                if (!name) {\n                  return null;\n                }\n\n                var node = Strophe.xmlGenerator().createElement(name); // FIXME: this should throw errors if args are the wrong type or\n                // there are more than two optional args\n\n                for (var a = 1; a < arguments.length; a++) {\n                  var arg = arguments[a];\n\n                  if (!arg) {\n                    continue;\n                  }\n\n                  if (typeof arg === \"string\" || typeof arg === \"number\") {\n                    node.appendChild(Strophe.xmlTextNode(arg));\n                  } else if (_typeof(arg) === \"object\" && typeof arg.sort === \"function\") {\n                    for (var i = 0; i < arg.length; i++) {\n                      var attr = arg[i];\n\n                      if (_typeof(attr) === \"object\" && typeof attr.sort === \"function\" && attr[1] !== undefined && attr[1] !== null) {\n                        node.setAttribute(attr[0], attr[1]);\n                      }\n                    }\n                  } else if (_typeof(arg) === \"object\") {\n                    for (var k in arg) {\n                      if (Object.prototype.hasOwnProperty.call(arg, k) && arg[k] !== undefined && arg[k] !== null) {\n                        node.setAttribute(k, arg[k]);\n                      }\n                    }\n                  }\n                }\n\n                return node;\n              },\n\n              /*  Function: xmlescape\n               *  Excapes invalid xml characters.\n               *\n               *  Parameters:\n               *     (String) text - text to escape.\n               *\n               *  Returns:\n               *      Escaped text.\n               */\n              xmlescape: function xmlescape(text) {\n                text = text.replace(/\\&/g, \"&amp;\");\n                text = text.replace(/</g, \"&lt;\");\n                text = text.replace(/>/g, \"&gt;\");\n                text = text.replace(/'/g, \"&apos;\");\n                text = text.replace(/\"/g, \"&quot;\");\n                return text;\n              },\n\n              /*  Function: xmlunescape\n              *  Unexcapes invalid xml characters.\n              *\n              *  Parameters:\n              *     (String) text - text to unescape.\n              *\n              *  Returns:\n              *      Unescaped text.\n              */\n              xmlunescape: function xmlunescape(text) {\n                text = text.replace(/\\&amp;/g, \"&\");\n                text = text.replace(/&lt;/g, \"<\");\n                text = text.replace(/&gt;/g, \">\");\n                text = text.replace(/&apos;/g, \"'\");\n                text = text.replace(/&quot;/g, \"\\\"\");\n                return text;\n              },\n\n              /** Function: xmlTextNode\n               *  Creates an XML DOM text node.\n               *\n               *  Provides a cross implementation version of document.createTextNode.\n               *\n               *  Parameters:\n               *    (String) text - The content of the text node.\n               *\n               *  Returns:\n               *    A new XML DOM text node.\n               */\n              xmlTextNode: function xmlTextNode(text) {\n                return Strophe.xmlGenerator().createTextNode(text);\n              },\n\n              /** Function: xmlHtmlNode\n               *  Creates an XML DOM html node.\n               *\n               *  Parameters:\n               *    (String) html - The content of the html node.\n               *\n               *  Returns:\n               *    A new XML DOM text node.\n               */\n              xmlHtmlNode: function xmlHtmlNode(html) {\n                var node; //ensure text is escaped\n\n                if (DOMParser) {\n                  var parser = new DOMParser();\n                  node = parser.parseFromString(html, \"text/xml\");\n                } else {\n                  node = new ActiveXObject(\"Microsoft.XMLDOM\");\n                  node.async = \"false\";\n                  node.loadXML(html);\n                }\n\n                return node;\n              },\n\n              /** Function: getText\n               *  Get the concatenation of all text children of an element.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    A String with the concatenated text of all text element children.\n               */\n              getText: function getText(elem) {\n                if (!elem) {\n                  return null;\n                }\n\n                var str = \"\";\n\n                if (elem.childNodes.length === 0 && elem.nodeType === Strophe.ElementType.TEXT) {\n                  str += elem.nodeValue;\n                }\n\n                for (var i = 0; i < elem.childNodes.length; i++) {\n                  if (elem.childNodes[i].nodeType === Strophe.ElementType.TEXT) {\n                    str += elem.childNodes[i].nodeValue;\n                  }\n                }\n\n                return Strophe.xmlescape(str);\n              },\n\n              /** Function: copyElement\n               *  Copy an XML DOM element.\n               *\n               *  This function copies a DOM element and all its descendants and returns\n               *  the new copy.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    A new, copied DOM element tree.\n               */\n              copyElement: function copyElement(elem) {\n                var el;\n\n                if (elem.nodeType === Strophe.ElementType.NORMAL) {\n                  el = Strophe.xmlElement(elem.tagName);\n\n                  for (var i = 0; i < elem.attributes.length; i++) {\n                    el.setAttribute(elem.attributes[i].nodeName, elem.attributes[i].value);\n                  }\n\n                  for (var _i = 0; _i < elem.childNodes.length; _i++) {\n                    el.appendChild(Strophe.copyElement(elem.childNodes[_i]));\n                  }\n                } else if (elem.nodeType === Strophe.ElementType.TEXT) {\n                  el = Strophe.xmlGenerator().createTextNode(elem.nodeValue);\n                }\n\n                return el;\n              },\n\n              /** Function: createHtml\n               *  Copy an HTML DOM element into an XML DOM.\n               *\n               *  This function copies a DOM element and all its descendants and returns\n               *  the new copy.\n               *\n               *  Parameters:\n               *    (HTMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    A new, copied DOM element tree.\n               */\n              createHtml: function createHtml(elem) {\n                var el;\n\n                if (elem.nodeType === Strophe.ElementType.NORMAL) {\n                  var tag = elem.nodeName.toLowerCase(); // XHTML tags must be lower case.\n\n                  if (Strophe.XHTML.validTag(tag)) {\n                    try {\n                      el = Strophe.xmlElement(tag);\n\n                      for (var i = 0; i < Strophe.XHTML.attributes[tag].length; i++) {\n                        var attribute = Strophe.XHTML.attributes[tag][i];\n                        var value = elem.getAttribute(attribute);\n\n                        if (typeof value === 'undefined' || value === null || value === '' || value === false || value === 0) {\n                          continue;\n                        }\n\n                        if (attribute === 'style' && _typeof(value) === 'object' && typeof value.cssText !== 'undefined') {\n                          value = value.cssText; // we're dealing with IE, need to get CSS out\n                        } // filter out invalid css styles\n\n\n                        if (attribute === 'style') {\n                          var css = [];\n                          var cssAttrs = value.split(';');\n\n                          for (var j = 0; j < cssAttrs.length; j++) {\n                            var attr = cssAttrs[j].split(':');\n                            var cssName = attr[0].replace(/^\\s*/, \"\").replace(/\\s*$/, \"\").toLowerCase();\n\n                            if (Strophe.XHTML.validCSS(cssName)) {\n                              var cssValue = attr[1].replace(/^\\s*/, \"\").replace(/\\s*$/, \"\");\n                              css.push(cssName + ': ' + cssValue);\n                            }\n                          }\n\n                          if (css.length > 0) {\n                            value = css.join('; ');\n                            el.setAttribute(attribute, value);\n                          }\n                        } else {\n                          el.setAttribute(attribute, value);\n                        }\n                      }\n\n                      for (var _i2 = 0; _i2 < elem.childNodes.length; _i2++) {\n                        el.appendChild(Strophe.createHtml(elem.childNodes[_i2]));\n                      }\n                    } catch (e) {\n                      // invalid elements\n                      el = Strophe.xmlTextNode('');\n                    }\n                  } else {\n                    el = Strophe.xmlGenerator().createDocumentFragment();\n\n                    for (var _i3 = 0; _i3 < elem.childNodes.length; _i3++) {\n                      el.appendChild(Strophe.createHtml(elem.childNodes[_i3]));\n                    }\n                  }\n                } else if (elem.nodeType === Strophe.ElementType.FRAGMENT) {\n                  el = Strophe.xmlGenerator().createDocumentFragment();\n\n                  for (var _i4 = 0; _i4 < elem.childNodes.length; _i4++) {\n                    el.appendChild(Strophe.createHtml(elem.childNodes[_i4]));\n                  }\n                } else if (elem.nodeType === Strophe.ElementType.TEXT) {\n                  el = Strophe.xmlTextNode(elem.nodeValue);\n                }\n\n                return el;\n              },\n\n              /** Function: escapeNode\n               *  Escape the node part (also called local part) of a JID.\n               *\n               *  Parameters:\n               *    (String) node - A node (or local part).\n               *\n               *  Returns:\n               *    An escaped node (or local part).\n               */\n              escapeNode: function escapeNode(node) {\n                if (typeof node !== \"string\") {\n                  return node;\n                }\n\n                return node.replace(/^\\s+|\\s+$/g, '').replace(/\\\\/g, \"\\\\5c\").replace(/ /g, \"\\\\20\").replace(/\\\"/g, \"\\\\22\").replace(/\\&/g, \"\\\\26\").replace(/\\'/g, \"\\\\27\").replace(/\\//g, \"\\\\2f\").replace(/:/g, \"\\\\3a\").replace(/</g, \"\\\\3c\").replace(/>/g, \"\\\\3e\").replace(/@/g, \"\\\\40\");\n              },\n\n              /** Function: unescapeNode\n               *  Unescape a node part (also called local part) of a JID.\n               *\n               *  Parameters:\n               *    (String) node - A node (or local part).\n               *\n               *  Returns:\n               *    An unescaped node (or local part).\n               */\n              unescapeNode: function unescapeNode(node) {\n                if (typeof node !== \"string\") {\n                  return node;\n                }\n\n                return node.replace(/\\\\20/g, \" \").replace(/\\\\22/g, '\"').replace(/\\\\26/g, \"&\").replace(/\\\\27/g, \"'\").replace(/\\\\2f/g, \"/\").replace(/\\\\3a/g, \":\").replace(/\\\\3c/g, \"<\").replace(/\\\\3e/g, \">\").replace(/\\\\40/g, \"@\").replace(/\\\\5c/g, \"\\\\\");\n              },\n\n              /** Function: getNodeFromJid\n               *  Get the node portion of a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the node.\n               */\n              getNodeFromJid: function getNodeFromJid(jid) {\n                if (jid.indexOf(\"@\") < 0) {\n                  return null;\n                }\n\n                return jid.split(\"@\")[0];\n              },\n\n              /** Function: getDomainFromJid\n               *  Get the domain portion of a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the domain.\n               */\n              getDomainFromJid: function getDomainFromJid(jid) {\n                var bare = Strophe.getBareJidFromJid(jid);\n\n                if (bare.indexOf(\"@\") < 0) {\n                  return bare;\n                } else {\n                  var parts = bare.split(\"@\");\n                  parts.splice(0, 1);\n                  return parts.join('@');\n                }\n              },\n\n              /** Function: getResourceFromJid\n               *  Get the resource portion of a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the resource.\n               */\n              getResourceFromJid: function getResourceFromJid(jid) {\n                if (!jid) {\n                  return null;\n                }\n\n                var s = jid.split(\"/\");\n\n                if (s.length < 2) {\n                  return null;\n                }\n\n                s.splice(0, 1);\n                return s.join('/');\n              },\n\n              /** Function: getBareJidFromJid\n               *  Get the bare JID from a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the bare JID.\n               */\n              getBareJidFromJid: function getBareJidFromJid(jid) {\n                return jid ? jid.split(\"/\")[0] : null;\n              },\n\n              /** PrivateFunction: _handleError\n               *  _Private_ function that properly logs an error to the console\n               */\n              _handleError: function _handleError(e) {\n                if (typeof e.stack !== \"undefined\") {\n                  Strophe.fatal(e.stack);\n                }\n\n                if (e.sourceURL) {\n                  Strophe.fatal(\"error: \" + this.handler + \" \" + e.sourceURL + \":\" + e.line + \" - \" + e.name + \": \" + e.message);\n                } else if (e.fileName) {\n                  Strophe.fatal(\"error: \" + this.handler + \" \" + e.fileName + \":\" + e.lineNumber + \" - \" + e.name + \": \" + e.message);\n                } else {\n                  Strophe.fatal(\"error: \" + e.message);\n                }\n              },\n\n              /** Function: log\n               *  User overrideable logging function.\n               *\n               *  This function is called whenever the Strophe library calls any\n               *  of the logging functions.  The default implementation of this\n               *  function logs only fatal errors.  If client code wishes to handle the logging\n               *  messages, it should override this with\n               *  > Strophe.log = function (level, msg) {\n               *  >   (user code here)\n               *  > };\n               *\n               *  Please note that data sent and received over the wire is logged\n               *  via Strophe.Connection.rawInput() and Strophe.Connection.rawOutput().\n               *\n               *  The different levels and their meanings are\n               *\n               *    DEBUG - Messages useful for debugging purposes.\n               *    INFO - Informational messages.  This is mostly information like\n               *      'disconnect was called' or 'SASL auth succeeded'.\n               *    WARN - Warnings about potential problems.  This is mostly used\n               *      to report transient connection errors like request timeouts.\n               *    ERROR - Some error occurred.\n               *    FATAL - A non-recoverable fatal error occurred.\n               *\n               *  Parameters:\n               *    (Integer) level - The log level of the log message.  This will\n               *      be one of the values in Strophe.LogLevel.\n               *    (String) msg - The log message.\n               */\n              log: function log(level, msg) {\n                if (level === this.LogLevel.FATAL && _typeof(window.console) === 'object' && typeof window.console.error === 'function') {\n                  window.console.error(msg);\n                }\n              },\n\n              /** Function: debug\n               *  Log a message at the Strophe.LogLevel.DEBUG level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              debug: function debug(msg) {\n                this.log(this.LogLevel.DEBUG, msg);\n              },\n\n              /** Function: info\n               *  Log a message at the Strophe.LogLevel.INFO level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              info: function info(msg) {\n                this.log(this.LogLevel.INFO, msg);\n              },\n\n              /** Function: warn\n               *  Log a message at the Strophe.LogLevel.WARN level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              warn: function warn(msg) {\n                this.log(this.LogLevel.WARN, msg);\n              },\n\n              /** Function: error\n               *  Log a message at the Strophe.LogLevel.ERROR level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              error: function error(msg) {\n                this.log(this.LogLevel.ERROR, msg);\n              },\n\n              /** Function: fatal\n               *  Log a message at the Strophe.LogLevel.FATAL level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              fatal: function fatal(msg) {\n                this.log(this.LogLevel.FATAL, msg);\n              },\n\n              /** Function: serialize\n               *  Render a DOM element and all descendants to a String.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    The serialized element tree as a String.\n               */\n              serialize: function serialize(elem) {\n                if (!elem) {\n                  return null;\n                }\n\n                if (typeof elem.tree === \"function\") {\n                  elem = elem.tree();\n                }\n\n                var names = _toConsumableArray(Array(elem.attributes.length).keys()).map(function (i) {\n                  return elem.attributes[i].nodeName;\n                });\n\n                names.sort();\n                var result = names.reduce(function (a, n) {\n                  return \"\".concat(a, \" \").concat(n, \"=\\\"\").concat(Strophe.xmlescape(elem.attributes.getNamedItem(n).value), \"\\\"\");\n                }, \"<\".concat(elem.nodeName));\n\n                if (elem.childNodes.length > 0) {\n                  result += \">\";\n\n                  for (var i = 0; i < elem.childNodes.length; i++) {\n                    var child = elem.childNodes[i];\n\n                    switch (child.nodeType) {\n                      case Strophe.ElementType.NORMAL:\n                        // normal element, so recurse\n                        result += Strophe.serialize(child);\n                        break;\n\n                      case Strophe.ElementType.TEXT:\n                        // text element to escape values\n                        result += Strophe.xmlescape(child.nodeValue);\n                        break;\n\n                      case Strophe.ElementType.CDATA:\n                        // cdata section so don't escape values\n                        result += \"<![CDATA[\" + child.nodeValue + \"]]>\";\n                    }\n                  }\n\n                  result += \"</\" + elem.nodeName + \">\";\n                } else {\n                  result += \"/>\";\n                }\n\n                return result;\n              },\n\n              /** PrivateVariable: _requestId\n               *  _Private_ variable that keeps track of the request ids for\n               *  connections.\n               */\n              _requestId: 0,\n\n              /** PrivateVariable: Strophe.connectionPlugins\n               *  _Private_ variable Used to store plugin names that need\n               *  initialization on Strophe.Connection construction.\n               */\n              _connectionPlugins: {},\n\n              /** Function: addConnectionPlugin\n               *  Extends the Strophe.Connection object with the given plugin.\n               *\n               *  Parameters:\n               *    (String) name - The name of the extension.\n               *    (Object) ptype - The plugin's prototype.\n               */\n              addConnectionPlugin: function addConnectionPlugin(name, ptype) {\n                Strophe._connectionPlugins[name] = ptype;\n              }\n            };\n            /** Class: Strophe.Builder\n             *  XML DOM builder.\n             *\n             *  This object provides an interface similar to JQuery but for building\n             *  DOM elements easily and rapidly.  All the functions except for toString()\n             *  and tree() return the object, so calls can be chained.  Here's an\n             *  example using the $iq() builder helper.\n             *  > $iq({to: 'you', from: 'me', type: 'get', id: '1'})\n             *  >     .c('query', {xmlns: 'strophe:example'})\n             *  >     .c('example')\n             *  >     .toString()\n             *\n             *  The above generates this XML fragment\n             *  > <iq to='you' from='me' type='get' id='1'>\n             *  >   <query xmlns='strophe:example'>\n             *  >     <example/>\n             *  >   </query>\n             *  > </iq>\n             *  The corresponding DOM manipulations to get a similar fragment would be\n             *  a lot more tedious and probably involve several helper variables.\n             *\n             *  Since adding children makes new operations operate on the child, up()\n             *  is provided to traverse up the tree.  To add two children, do\n             *  > builder.c('child1', ...).up().c('child2', ...)\n             *  The next operation on the Builder will be relative to the second child.\n             */\n\n            /** Constructor: Strophe.Builder\n             *  Create a Strophe.Builder object.\n             *\n             *  The attributes should be passed in object notation.  For example\n             *  > let b = new Builder('message', {to: 'you', from: 'me'});\n             *  or\n             *  > let b = new Builder('messsage', {'xml:lang': 'en'});\n             *\n             *  Parameters:\n             *    (String) name - The name of the root element.\n             *    (Object) attrs - The attributes for the root element in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder.\n             */\n\n            Strophe.Builder = function (name, attrs) {\n              // Set correct namespace for jabber:client elements\n              if (name === \"presence\" || name === \"message\" || name === \"iq\") {\n                if (attrs && !attrs.xmlns) {\n                  attrs.xmlns = Strophe.NS.CLIENT;\n                } else if (!attrs) {\n                  attrs = {\n                    xmlns: Strophe.NS.CLIENT\n                  };\n                }\n              } // Holds the tree being built.\n\n\n              this.nodeTree = Strophe.xmlElement(name, attrs); // Points to the current operation node.\n\n              this.node = this.nodeTree;\n            };\n\n            Strophe.Builder.prototype = {\n              /** Function: tree\n               *  Return the DOM tree.\n               *\n               *  This function returns the current DOM tree as an element object.  This\n               *  is suitable for passing to functions like Strophe.Connection.send().\n               *\n               *  Returns:\n               *    The DOM tree as a element object.\n               */\n              tree: function tree() {\n                return this.nodeTree;\n              },\n\n              /** Function: toString\n               *  Serialize the DOM tree to a String.\n               *\n               *  This function returns a string serialization of the current DOM\n               *  tree.  It is often used internally to pass data to a\n               *  Strophe.Request object.\n               *\n               *  Returns:\n               *    The serialized DOM tree in a String.\n               */\n              toString: function toString() {\n                return Strophe.serialize(this.nodeTree);\n              },\n\n              /** Function: up\n               *  Make the current parent element the new current element.\n               *\n               *  This function is often used after c() to traverse back up the tree.\n               *  For example, to add two children to the same element\n               *  > builder.c('child1', {}).up().c('child2', {});\n               *\n               *  Returns:\n               *    The Stophe.Builder object.\n               */\n              up: function up() {\n                this.node = this.node.parentNode;\n                return this;\n              },\n\n              /** Function: root\n               *  Make the root element the new current element.\n               *\n               *  When at a deeply nested element in the tree, this function can be used\n               *  to jump back to the root of the tree, instead of having to repeatedly\n               *  call up().\n               *\n               *  Returns:\n               *    The Stophe.Builder object.\n               */\n              root: function root() {\n                this.node = this.nodeTree;\n                return this;\n              },\n\n              /** Function: attrs\n               *  Add or modify attributes of the current element.\n               *\n               *  The attributes should be passed in object notation.  This function\n               *  does not move the current element pointer.\n               *\n               *  Parameters:\n               *    (Object) moreattrs - The attributes to add/modify in object notation.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              attrs: function attrs(moreattrs) {\n                for (var k in moreattrs) {\n                  if (Object.prototype.hasOwnProperty.call(moreattrs, k)) {\n                    if (moreattrs[k] === undefined) {\n                      this.node.removeAttribute(k);\n                    } else {\n                      this.node.setAttribute(k, moreattrs[k]);\n                    }\n                  }\n                }\n\n                return this;\n              },\n\n              /** Function: c\n               *  Add a child to the current element and make it the new current\n               *  element.\n               *\n               *  This function moves the current element pointer to the child,\n               *  unless text is provided.  If you need to add another child, it\n               *  is necessary to use up() to go back to the parent in the tree.\n               *\n               *  Parameters:\n               *    (String) name - The name of the child.\n               *    (Object) attrs - The attributes of the child in object notation.\n               *    (String) text - The text to add to the child.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              c: function c(name, attrs, text) {\n                var child = Strophe.xmlElement(name, attrs, text);\n                this.node.appendChild(child);\n\n                if (typeof text !== \"string\" && typeof text !== \"number\") {\n                  this.node = child;\n                }\n\n                return this;\n              },\n\n              /** Function: cnode\n               *  Add a child to the current element and make it the new current\n               *  element.\n               *\n               *  This function is the same as c() except that instead of using a\n               *  name and an attributes object to create the child it uses an\n               *  existing DOM element object.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              cnode: function cnode(elem) {\n                var impNode;\n                var xmlGen = Strophe.xmlGenerator();\n\n                try {\n                  impNode = xmlGen.importNode !== undefined;\n                } catch (e) {\n                  impNode = false;\n                }\n\n                var newElem = impNode ? xmlGen.importNode(elem, true) : Strophe.copyElement(elem);\n                this.node.appendChild(newElem);\n                this.node = newElem;\n                return this;\n              },\n\n              /** Function: t\n               *  Add a child text element.\n               *\n               *  This *does not* make the child the new current element since there\n               *  are no children of text elements.\n               *\n               *  Parameters:\n               *    (String) text - The text data to append to the current element.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              t: function t(text) {\n                var child = Strophe.xmlTextNode(text);\n                this.node.appendChild(child);\n                return this;\n              },\n\n              /** Function: h\n               *  Replace current element contents with the HTML passed in.\n               *\n               *  This *does not* make the child the new current element\n               *\n               *  Parameters:\n               *    (String) html - The html to insert as contents of current element.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              h: function h(html) {\n                var fragment = document.createElement('body'); // force the browser to try and fix any invalid HTML tags\n\n                fragment.innerHTML = html; // copy cleaned html into an xml dom\n\n                var xhtml = Strophe.createHtml(fragment);\n\n                while (xhtml.childNodes.length > 0) {\n                  this.node.appendChild(xhtml.childNodes[0]);\n                }\n\n                return this;\n              }\n            };\n            /** PrivateClass: Strophe.Handler\n             *  _Private_ helper class for managing stanza handlers.\n             *\n             *  A Strophe.Handler encapsulates a user provided callback function to be\n             *  executed when matching stanzas are received by the connection.\n             *  Handlers can be either one-off or persistant depending on their\n             *  return value. Returning true will cause a Handler to remain active, and\n             *  returning false will remove the Handler.\n             *\n             *  Users will not use Strophe.Handler objects directly, but instead they\n             *  will use Strophe.Connection.addHandler() and\n             *  Strophe.Connection.deleteHandler().\n             */\n\n            /** PrivateConstructor: Strophe.Handler\n             *  Create and initialize a new Strophe.Handler.\n             *\n             *  Parameters:\n             *    (Function) handler - A function to be executed when the handler is run.\n             *    (String) ns - The namespace to match.\n             *    (String) name - The element name to match.\n             *    (String) type - The element type to match.\n             *    (String) id - The element id attribute to match.\n             *    (String) from - The element from attribute to match.\n             *    (Object) options - Handler options\n             *\n             *  Returns:\n             *    A new Strophe.Handler object.\n             */\n\n            Strophe.Handler = function (handler, ns, name, type, id, from, options) {\n              this.handler = handler;\n              this.ns = ns;\n              this.name = name;\n              this.type = type;\n              this.id = id;\n              this.options = options || {\n                'matchBareFromJid': false,\n                'ignoreNamespaceFragment': false\n              }; // BBB: Maintain backward compatibility with old `matchBare` option\n\n              if (this.options.matchBare) {\n                Strophe.warn('The \"matchBare\" option is deprecated, use \"matchBareFromJid\" instead.');\n                this.options.matchBareFromJid = this.options.matchBare;\n                delete this.options.matchBare;\n              }\n\n              if (this.options.matchBareFromJid) {\n                this.from = from ? Strophe.getBareJidFromJid(from) : null;\n              } else {\n                this.from = from;\n              } // whether the handler is a user handler or a system handler\n\n\n              this.user = true;\n            };\n\n            Strophe.Handler.prototype = {\n              /** PrivateFunction: getNamespace\n               *  Returns the XML namespace attribute on an element.\n               *  If `ignoreNamespaceFragment` was passed in for this handler, then the\n               *  URL fragment will be stripped.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML element with the namespace.\n               *\n               *  Returns:\n               *    The namespace, with optionally the fragment stripped.\n               */\n              getNamespace: function getNamespace(elem) {\n                var elNamespace = elem.getAttribute(\"xmlns\");\n\n                if (elNamespace && this.options.ignoreNamespaceFragment) {\n                  elNamespace = elNamespace.split('#')[0];\n                }\n\n                return elNamespace;\n              },\n\n              /** PrivateFunction: namespaceMatch\n               *  Tests if a stanza matches the namespace set for this Strophe.Handler.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML element to test.\n               *\n               *  Returns:\n               *    true if the stanza matches and false otherwise.\n               */\n              namespaceMatch: function namespaceMatch(elem) {\n                var _this = this;\n\n                var nsMatch = false;\n\n                if (!this.ns) {\n                  return true;\n                } else {\n                  Strophe.forEachChild(elem, null, function (elem) {\n                    if (_this.getNamespace(elem) === _this.ns) {\n                      nsMatch = true;\n                    }\n                  });\n                  return nsMatch || this.getNamespace(elem) === this.ns;\n                }\n              },\n\n              /** PrivateFunction: isMatch\n               *  Tests if a stanza matches the Strophe.Handler.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML element to test.\n               *\n               *  Returns:\n               *    true if the stanza matches and false otherwise.\n               */\n              isMatch: function isMatch(elem) {\n                var from = elem.getAttribute('from');\n\n                if (this.options.matchBareFromJid) {\n                  from = Strophe.getBareJidFromJid(from);\n                }\n\n                var elem_type = elem.getAttribute(\"type\");\n\n                if (this.namespaceMatch(elem) && (!this.name || Strophe.isTagEqual(elem, this.name)) && (!this.type || (Array.isArray(this.type) ? this.type.indexOf(elem_type) !== -1 : elem_type === this.type)) && (!this.id || elem.getAttribute(\"id\") === this.id) && (!this.from || from === this.from)) {\n                  return true;\n                }\n\n                return false;\n              },\n\n              /** PrivateFunction: run\n               *  Run the callback on a matching stanza.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The DOM element that triggered the\n               *      Strophe.Handler.\n               *\n               *  Returns:\n               *    A boolean indicating if the handler should remain active.\n               */\n              run: function run(elem) {\n                var result = null;\n\n                try {\n                  result = this.handler(elem);\n                } catch (e) {\n                  Strophe._handleError(e);\n\n                  throw e;\n                }\n\n                return result;\n              },\n\n              /** PrivateFunction: toString\n               *  Get a String representation of the Strophe.Handler object.\n               *\n               *  Returns:\n               *    A String.\n               */\n              toString: function toString() {\n                return \"{Handler: \" + this.handler + \"(\" + this.name + \",\" + this.id + \",\" + this.ns + \")}\";\n              }\n            };\n            /** PrivateClass: Strophe.TimedHandler\n             *  _Private_ helper class for managing timed handlers.\n             *\n             *  A Strophe.TimedHandler encapsulates a user provided callback that\n             *  should be called after a certain period of time or at regular\n             *  intervals.  The return value of the callback determines whether the\n             *  Strophe.TimedHandler will continue to fire.\n             *\n             *  Users will not use Strophe.TimedHandler objects directly, but instead\n             *  they will use Strophe.Connection.addTimedHandler() and\n             *  Strophe.Connection.deleteTimedHandler().\n             */\n\n            /** PrivateConstructor: Strophe.TimedHandler\n             *  Create and initialize a new Strophe.TimedHandler object.\n             *\n             *  Parameters:\n             *    (Integer) period - The number of milliseconds to wait before the\n             *      handler is called.\n             *    (Function) handler - The callback to run when the handler fires.  This\n             *      function should take no arguments.\n             *\n             *  Returns:\n             *    A new Strophe.TimedHandler object.\n             */\n\n            Strophe.TimedHandler = function (period, handler) {\n              this.period = period;\n              this.handler = handler;\n              this.lastCalled = new Date().getTime();\n              this.user = true;\n            };\n\n            Strophe.TimedHandler.prototype = {\n              /** PrivateFunction: run\n               *  Run the callback for the Strophe.TimedHandler.\n               *\n               *  Returns:\n               *    true if the Strophe.TimedHandler should be called again, and false\n               *      otherwise.\n               */\n              run: function run() {\n                this.lastCalled = new Date().getTime();\n                return this.handler();\n              },\n\n              /** PrivateFunction: reset\n               *  Reset the last called time for the Strophe.TimedHandler.\n               */\n              reset: function reset() {\n                this.lastCalled = new Date().getTime();\n              },\n\n              /** PrivateFunction: toString\n               *  Get a string representation of the Strophe.TimedHandler object.\n               *\n               *  Returns:\n               *    The string representation.\n               */\n              toString: function toString() {\n                return \"{TimedHandler: \" + this.handler + \"(\" + this.period + \")}\";\n              }\n            };\n            /** Class: Strophe.Connection\n             *  XMPP Connection manager.\n             *\n             *  This class is the main part of Strophe.  It manages a BOSH or websocket\n             *  connection to an XMPP server and dispatches events to the user callbacks\n             *  as data arrives. It supports SASL PLAIN, SASL DIGEST-MD5, SASL SCRAM-SHA1\n             *  and legacy authentication.\n             *\n             *  After creating a Strophe.Connection object, the user will typically\n             *  call connect() with a user supplied callback to handle connection level\n             *  events like authentication failure, disconnection, or connection\n             *  complete.\n             *\n             *  The user will also have several event handlers defined by using\n             *  addHandler() and addTimedHandler().  These will allow the user code to\n             *  respond to interesting stanzas or do something periodically with the\n             *  connection. These handlers will be active once authentication is\n             *  finished.\n             *\n             *  To send data to the connection, use send().\n             */\n\n            /** Constructor: Strophe.Connection\n             *  Create and initialize a Strophe.Connection object.\n             *\n             *  The transport-protocol for this connection will be chosen automatically\n             *  based on the given service parameter. URLs starting with \"ws://\" or\n             *  \"wss://\" will use WebSockets, URLs starting with \"http://\", \"https://\"\n             *  or without a protocol will use BOSH.\n             *\n             *  To make Strophe connect to the current host you can leave out the protocol\n             *  and host part and just pass the path, e.g.\n             *\n             *  > let conn = new Strophe.Connection(\"/http-bind/\");\n             *\n             *  Options common to both Websocket and BOSH:\n             *  ------------------------------------------\n             *\n             *  cookies:\n             *\n             *  The *cookies* option allows you to pass in cookies to be added to the\n             *  document. These cookies will then be included in the BOSH XMLHttpRequest\n             *  or in the websocket connection.\n             *\n             *  The passed in value must be a map of cookie names and string values.\n             *\n             *  > { \"myCookie\": {\n             *  >     \"value\": \"1234\",\n             *  >     \"domain\": \".example.org\",\n             *  >     \"path\": \"/\",\n             *  >     \"expires\": expirationDate\n             *  >     }\n             *  > }\n             *\n             *  Note that cookies can't be set in this way for other domains (i.e. cross-domain).\n             *  Those cookies need to be set under those domains, for example they can be\n             *  set server-side by making a XHR call to that domain to ask it to set any\n             *  necessary cookies.\n             *\n             *  mechanisms:\n             *\n             *  The *mechanisms* option allows you to specify the SASL mechanisms that this\n             *  instance of Strophe.Connection (and therefore your XMPP client) will\n             *  support.\n             *\n             *  The value must be an array of objects with Strophe.SASLMechanism\n             *  prototypes.\n             *\n             *  If nothing is specified, then the following mechanisms (and their\n             *  priorities) are registered:\n             *\n             *      SCRAM-SHA1 - 70\n             *      DIGEST-MD5 - 60\n             *      PLAIN - 50\n             *      OAUTH-BEARER - 40\n             *      OAUTH-2 - 30\n             *      ANONYMOUS - 20\n             *      EXTERNAL - 10\n             *\n             *  explicitResourceBinding:\n             *\n             *  If `explicitResourceBinding` is set to a truthy value, then the XMPP client\n             *  needs to explicitly call `Strophe.Connection.prototype.bind` once the XMPP\n             *  server has advertised the \"urn:ietf:params:xml:ns:xmpp-bind\" feature.\n             *\n             *  Making this step explicit allows client authors to first finish other\n             *  stream related tasks, such as setting up an XEP-0198 Stream Management\n             *  session, before binding the JID resource for this session.\n             *\n             *  WebSocket options:\n             *  ------------------\n             *\n             *  If you want to connect to the current host with a WebSocket connection you\n             *  can tell Strophe to use WebSockets through a \"protocol\" attribute in the\n             *  optional options parameter. Valid values are \"ws\" for WebSocket and \"wss\"\n             *  for Secure WebSocket.\n             *  So to connect to \"wss://CURRENT_HOSTNAME/xmpp-websocket\" you would call\n             *\n             *  > let conn = new Strophe.Connection(\"/xmpp-websocket/\", {protocol: \"wss\"});\n             *\n             *  Note that relative URLs _NOT_ starting with a \"/\" will also include the path\n             *  of the current site.\n             *\n             *  Also because downgrading security is not permitted by browsers, when using\n             *  relative URLs both BOSH and WebSocket connections will use their secure\n             *  variants if the current connection to the site is also secure (https).\n             *\n             *  BOSH options:\n             *  -------------\n             *\n             *  By adding \"sync\" to the options, you can control if requests will\n             *  be made synchronously or not. The default behaviour is asynchronous.\n             *  If you want to make requests synchronous, make \"sync\" evaluate to true.\n             *  > let conn = new Strophe.Connection(\"/http-bind/\", {sync: true});\n             *\n             *  You can also toggle this on an already established connection.\n             *  > conn.options.sync = true;\n             *\n             *  The *customHeaders* option can be used to provide custom HTTP headers to be\n             *  included in the XMLHttpRequests made.\n             *\n             *  The *keepalive* option can be used to instruct Strophe to maintain the\n             *  current BOSH session across interruptions such as webpage reloads.\n             *\n             *  It will do this by caching the sessions tokens in sessionStorage, and when\n             *  \"restore\" is called it will check whether there are cached tokens with\n             *  which it can resume an existing session.\n             *\n             *  The *withCredentials* option should receive a Boolean value and is used to\n             *  indicate wether cookies should be included in ajax requests (by default\n             *  they're not).\n             *  Set this value to true if you are connecting to a BOSH service\n             *  and for some reason need to send cookies to it.\n             *  In order for this to work cross-domain, the server must also enable\n             *  credentials by setting the Access-Control-Allow-Credentials response header\n             *  to \"true\". For most usecases however this setting should be false (which\n             *  is the default).\n             *  Additionally, when using Access-Control-Allow-Credentials, the\n             *  Access-Control-Allow-Origin header can't be set to the wildcard \"*\", but\n             *  instead must be restricted to actual domains.\n             *\n             *  The *contentType* option can be set to change the default Content-Type\n             *  of \"text/xml; charset=utf-8\", which can be useful to reduce the amount of\n             *  CORS preflight requests that are sent to the server.\n             *\n             *  Parameters:\n             *    (String) service - The BOSH or WebSocket service URL.\n             *    (Object) options - A hash of configuration options\n             *\n             *  Returns:\n             *    A new Strophe.Connection object.\n             */\n\n            Strophe.Connection = function (service, options) {\n              var _this2 = this;\n\n              // The service URL\n              this.service = service; // Configuration options\n\n              this.options = options || {};\n              var proto = this.options.protocol || \"\"; // Select protocal based on service or options\n\n              if (service.indexOf(\"ws:\") === 0 || service.indexOf(\"wss:\") === 0 || proto.indexOf(\"ws\") === 0) {\n                this._proto = new Strophe.Websocket(this);\n              } else {\n                this._proto = new Strophe.Bosh(this);\n              }\n              /* The connected JID. */\n\n\n              this.jid = \"\";\n              /* the JIDs domain */\n\n              this.domain = null;\n              /* stream:features */\n\n              this.features = null; // SASL\n\n              this._sasl_data = {};\n              this.do_session = false;\n              this.do_bind = false; // handler lists\n\n              this.timedHandlers = [];\n              this.handlers = [];\n              this.removeTimeds = [];\n              this.removeHandlers = [];\n              this.addTimeds = [];\n              this.addHandlers = [];\n              this.protocolErrorHandlers = {\n                'HTTP': {},\n                'websocket': {}\n              };\n              this._idleTimeout = null;\n              this._disconnectTimeout = null;\n              this.authenticated = false;\n              this.connected = false;\n              this.disconnecting = false;\n              this.do_authentication = true;\n              this.paused = false;\n              this.restored = false;\n              this._data = [];\n              this._uniqueId = 0;\n              this._sasl_success_handler = null;\n              this._sasl_failure_handler = null;\n              this._sasl_challenge_handler = null; // Max retries before disconnecting\n\n              this.maxRetries = 5; // Call onIdle callback every 1/10th of a second\n\n              this._idleTimeout = setTimeout(function () {\n                return _this2._onIdle();\n              }, 100);\n              utils.addCookies(this.options.cookies);\n              this.registerSASLMechanisms(this.options.mechanisms); // initialize plugins\n\n              for (var k in Strophe._connectionPlugins) {\n                if (Object.prototype.hasOwnProperty.call(Strophe._connectionPlugins, k)) {\n                  var F = function F() {};\n\n                  F.prototype = Strophe._connectionPlugins[k];\n                  this[k] = new F();\n                  this[k].init(this);\n                }\n              }\n            };\n\n            Strophe.Connection.prototype = {\n              /** Function: reset\n               *  Reset the connection.\n               *\n               *  This function should be called after a connection is disconnected\n               *  before that connection is reused.\n               */\n              reset: function reset() {\n                this._proto._reset(); // SASL\n\n\n                this.do_session = false;\n                this.do_bind = false; // handler lists\n\n                this.timedHandlers = [];\n                this.handlers = [];\n                this.removeTimeds = [];\n                this.removeHandlers = [];\n                this.addTimeds = [];\n                this.addHandlers = [];\n                this.authenticated = false;\n                this.connected = false;\n                this.disconnecting = false;\n                this.restored = false;\n                this._data = [];\n                this._requests = [];\n                this._uniqueId = 0;\n              },\n\n              /** Function: pause\n               *  Pause the request manager.\n               *\n               *  This will prevent Strophe from sending any more requests to the\n               *  server.  This is very useful for temporarily pausing\n               *  BOSH-Connections while a lot of send() calls are happening quickly.\n               *  This causes Strophe to send the data in a single request, saving\n               *  many request trips.\n               */\n              pause: function pause() {\n                this.paused = true;\n              },\n\n              /** Function: resume\n               *  Resume the request manager.\n               *\n               *  This resumes after pause() has been called.\n               */\n              resume: function resume() {\n                this.paused = false;\n              },\n\n              /** Function: getUniqueId\n               *  Generate a unique ID for use in <iq/> elements.\n               *\n               *  All <iq/> stanzas are required to have unique id attributes.  This\n               *  function makes creating these easy.  Each connection instance has\n               *  a counter which starts from zero, and the value of this counter\n               *  plus a colon followed by the suffix becomes the unique id. If no\n               *  suffix is supplied, the counter is used as the unique id.\n               *\n               *  Suffixes are used to make debugging easier when reading the stream\n               *  data, and their use is recommended.  The counter resets to 0 for\n               *  every new connection for the same reason.  For connections to the\n               *  same server that authenticate the same way, all the ids should be\n               *  the same, which makes it easy to see changes.  This is useful for\n               *  automated testing as well.\n               *\n               *  Parameters:\n               *    (String) suffix - A optional suffix to append to the id.\n               *\n               *  Returns:\n               *    A unique string to be used for the id attribute.\n               */\n              getUniqueId: function getUniqueId(suffix) {\n                var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n                  var r = Math.random() * 16 | 0,\n                      v = c === 'x' ? r : r & 0x3 | 0x8;\n                  return v.toString(16);\n                });\n\n                if (typeof suffix === \"string\" || typeof suffix === \"number\") {\n                  return uuid + \":\" + suffix;\n                } else {\n                  return uuid + \"\";\n                }\n              },\n\n              /** Function: addProtocolErrorHandler\n               *  Register a handler function for when a protocol (websocker or HTTP)\n               *  error occurs.\n               *\n               *  NOTE: Currently only HTTP errors for BOSH requests are handled.\n               *  Patches that handle websocket errors would be very welcome.\n               *\n               *  Parameters:\n               *    (String) protocol - 'HTTP' or 'websocket'\n               *    (Integer) status_code - Error status code (e.g 500, 400 or 404)\n               *    (Function) callback - Function that will fire on Http error\n               *\n               *  Example:\n               *  function onError(err_code){\n               *    //do stuff\n               *  }\n               *\n               *  let conn = Strophe.connect('http://example.com/http-bind');\n               *  conn.addProtocolErrorHandler('HTTP', 500, onError);\n               *  // Triggers HTTP 500 error and onError handler will be called\n               *  conn.connect('user_jid@incorrect_jabber_host', 'secret', onConnect);\n               */\n              addProtocolErrorHandler: function addProtocolErrorHandler(protocol, status_code, callback) {\n                this.protocolErrorHandlers[protocol][status_code] = callback;\n              },\n\n              /** Function: connect\n               *  Starts the connection process.\n               *\n               *  As the connection process proceeds, the user supplied callback will\n               *  be triggered multiple times with status updates.  The callback\n               *  should take two arguments - the status code and the error condition.\n               *\n               *  The status code will be one of the values in the Strophe.Status\n               *  constants.  The error condition will be one of the conditions\n               *  defined in RFC 3920 or the condition 'strophe-parsererror'.\n               *\n               *  The Parameters _wait_, _hold_ and _route_ are optional and only relevant\n               *  for BOSH connections. Please see XEP 124 for a more detailed explanation\n               *  of the optional parameters.\n               *\n               *  Parameters:\n               *    (String) jid - The user's JID.  This may be a bare JID,\n               *      or a full JID.  If a node is not supplied, SASL OAUTHBEARER or\n               *      SASL ANONYMOUS authentication will be attempted (OAUTHBEARER will\n               *      process the provided password value as an access token).\n               *    (String) pass - The user's password.\n               *    (Function) callback - The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (String) route - The optional route value.\n               *    (String) authcid - The optional alternative authentication identity\n               *      (username) if intending to impersonate another user.\n               *      When using the SASL-EXTERNAL authentication mechanism, for example\n               *      with client certificates, then the authcid value is used to\n               *      determine whether an authorization JID (authzid) should be sent to\n               *      the server. The authzid should not be sent to the server if the\n               *      authzid and authcid are the same. So to prevent it from being sent\n               *      (for example when the JID is already contained in the client\n               *      certificate), set authcid to that same JID. See XEP-178 for more\n               *      details.\n               */\n              connect: function connect(jid, pass, callback, wait, hold, route, authcid) {\n                this.jid = jid;\n                /** Variable: authzid\n                 *  Authorization identity.\n                 */\n\n                this.authzid = Strophe.getBareJidFromJid(this.jid);\n                /** Variable: authcid\n                 *  Authentication identity (User name).\n                 */\n\n                this.authcid = authcid || Strophe.getNodeFromJid(this.jid);\n                /** Variable: pass\n                 *  Authentication identity (User password).\n                 */\n\n                this.pass = pass;\n                /** Variable: servtype\n                 *  Digest MD5 compatibility.\n                 */\n\n                this.servtype = \"xmpp\";\n                this.connect_callback = callback;\n                this.disconnecting = false;\n                this.connected = false;\n                this.authenticated = false;\n                this.restored = false; // parse jid for domain\n\n                this.domain = Strophe.getDomainFromJid(this.jid);\n\n                this._changeConnectStatus(Strophe.Status.CONNECTING, null);\n\n                this._proto._connect(wait, hold, route);\n              },\n\n              /** Function: attach\n               *  Attach to an already created and authenticated BOSH session.\n               *\n               *  This function is provided to allow Strophe to attach to BOSH\n               *  sessions which have been created externally, perhaps by a Web\n               *  application.  This is often used to support auto-login type features\n               *  without putting user credentials into the page.\n               *\n               *  Parameters:\n               *    (String) jid - The full JID that is bound by the session.\n               *    (String) sid - The SID of the BOSH session.\n               *    (String) rid - The current RID of the BOSH session.  This RID\n               *      will be used by the next request.\n               *    (Function) callback The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              attach: function attach(jid, sid, rid, callback, wait, hold, wind) {\n                if (this._proto instanceof Strophe.Bosh) {\n                  this._proto._attach(jid, sid, rid, callback, wait, hold, wind);\n                } else {\n                  var error = new Error('The \"attach\" method can only be used with a BOSH connection.');\n                  error.name = 'StropheSessionError';\n                  throw error;\n                }\n              },\n\n              /** Function: restore\n               *  Attempt to restore a cached BOSH session.\n               *\n               *  This function is only useful in conjunction with providing the\n               *  \"keepalive\":true option when instantiating a new Strophe.Connection.\n               *\n               *  When \"keepalive\" is set to true, Strophe will cache the BOSH tokens\n               *  RID (Request ID) and SID (Session ID) and then when this function is\n               *  called, it will attempt to restore the session from those cached\n               *  tokens.\n               *\n               *  This function must therefore be called instead of connect or attach.\n               *\n               *  For an example on how to use it, please see examples/restore.js\n               *\n               *  Parameters:\n               *    (String) jid - The user's JID.  This may be a bare JID or a full JID.\n               *    (Function) callback - The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              restore: function restore(jid, callback, wait, hold, wind) {\n                if (this._sessionCachingSupported()) {\n                  this._proto._restore(jid, callback, wait, hold, wind);\n                } else {\n                  var error = new Error('The \"restore\" method can only be used with a BOSH connection.');\n                  error.name = 'StropheSessionError';\n                  throw error;\n                }\n              },\n\n              /** PrivateFunction: _sessionCachingSupported\n               * Checks whether sessionStorage and JSON are supported and whether we're\n               * using BOSH.\n               */\n              _sessionCachingSupported: function _sessionCachingSupported() {\n                if (this._proto instanceof Strophe.Bosh) {\n                  if (!JSON) {\n                    return false;\n                  }\n\n                  try {\n                    sessionStorage.setItem('_strophe_', '_strophe_');\n                    sessionStorage.removeItem('_strophe_');\n                  } catch (e) {\n                    return false;\n                  }\n\n                  return true;\n                }\n\n                return false;\n              },\n\n              /** Function: xmlInput\n               *  User overrideable function that receives XML data coming into the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.xmlInput = function (elem) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Due to limitations of current Browsers' XML-Parsers the opening and closing\n               *  <stream> tag for WebSocket-Connoctions will be passed as selfclosing here.\n               *\n               *  BOSH-Connections will have all stanzas wrapped in a <body> tag. See\n               *  <Strophe.Bosh.strip> if you want to strip this tag.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML data received by the connection.\n               */\n              xmlInput: function xmlInput(elem) {\n                return;\n              },\n\n              /** Function: xmlOutput\n               *  User overrideable function that receives XML data sent to the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.xmlOutput = function (elem) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Due to limitations of current Browsers' XML-Parsers the opening and closing\n               *  <stream> tag for WebSocket-Connoctions will be passed as selfclosing here.\n               *\n               *  BOSH-Connections will have all stanzas wrapped in a <body> tag. See\n               *  <Strophe.Bosh.strip> if you want to strip this tag.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XMLdata sent by the connection.\n               */\n              xmlOutput: function xmlOutput(elem) {\n                return;\n              },\n\n              /** Function: rawInput\n               *  User overrideable function that receives raw data coming into the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.rawInput = function (data) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Parameters:\n               *    (String) data - The data received by the connection.\n               */\n              rawInput: function rawInput(data) {\n                return;\n              },\n\n              /** Function: rawOutput\n               *  User overrideable function that receives raw data sent to the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.rawOutput = function (data) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Parameters:\n               *    (String) data - The data sent by the connection.\n               */\n              rawOutput: function rawOutput(data) {\n                return;\n              },\n\n              /** Function: nextValidRid\n               *  User overrideable function that receives the new valid rid.\n               *\n               *  The default function does nothing. User code can override this with\n               *  > Strophe.Connection.nextValidRid = function (rid) {\n               *  >    (user code)\n               *  > };\n               *\n               *  Parameters:\n               *    (Number) rid - The next valid rid\n               */\n              nextValidRid: function nextValidRid(rid) {\n                return;\n              },\n\n              /** Function: send\n               *  Send a stanza.\n               *\n               *  This function is called to push data onto the send queue to\n               *  go out over the wire.  Whenever a request is sent to the BOSH\n               *  server, all pending data is sent and the queue is flushed.\n               *\n               *  Parameters:\n               *    (XMLElement |\n               *     [XMLElement] |\n               *     Strophe.Builder) elem - The stanza to send.\n               */\n              send: function send(elem) {\n                if (elem === null) {\n                  return;\n                }\n\n                if (typeof elem.sort === \"function\") {\n                  for (var i = 0; i < elem.length; i++) {\n                    this._queueData(elem[i]);\n                  }\n                } else if (typeof elem.tree === \"function\") {\n                  this._queueData(elem.tree());\n                } else {\n                  this._queueData(elem);\n                }\n\n                this._proto._send();\n              },\n\n              /** Function: flush\n               *  Immediately send any pending outgoing data.\n               *\n               *  Normally send() queues outgoing data until the next idle period\n               *  (100ms), which optimizes network use in the common cases when\n               *  several send()s are called in succession. flush() can be used to\n               *  immediately send all pending data.\n               */\n              flush: function flush() {\n                // cancel the pending idle period and run the idle function\n                // immediately\n                clearTimeout(this._idleTimeout);\n\n                this._onIdle();\n              },\n\n              /** Function: sendPresence\n               *  Helper function to send presence stanzas. The main benefit is for\n               *  sending presence stanzas for which you expect a responding presence\n               *  stanza with the same id (for example when leaving a chat room).\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza to send.\n               *    (Function) callback - The callback function for a successful request.\n               *    (Function) errback - The callback function for a failed or timed\n               *      out request.  On timeout, the stanza will be null.\n               *    (Integer) timeout - The time specified in milliseconds for a\n               *      timeout to occur.\n               *\n               *  Returns:\n               *    The id used to send the presence.\n               */\n              sendPresence: function sendPresence(elem, callback, errback, timeout) {\n                var _this3 = this;\n\n                var timeoutHandler = null;\n\n                if (typeof elem.tree === \"function\") {\n                  elem = elem.tree();\n                }\n\n                var id = elem.getAttribute('id');\n\n                if (!id) {\n                  // inject id if not found\n                  id = this.getUniqueId(\"sendPresence\");\n                  elem.setAttribute(\"id\", id);\n                }\n\n                if (typeof callback === \"function\" || typeof errback === \"function\") {\n                  var handler = this.addHandler(function (stanza) {\n                    // remove timeout handler if there is one\n                    if (timeoutHandler) {\n                      _this3.deleteTimedHandler(timeoutHandler);\n                    }\n\n                    if (stanza.getAttribute('type') === 'error') {\n                      if (errback) {\n                        errback(stanza);\n                      }\n                    } else if (callback) {\n                      callback(stanza);\n                    }\n                  }, null, 'presence', null, id); // if timeout specified, set up a timeout handler.\n\n                  if (timeout) {\n                    timeoutHandler = this.addTimedHandler(timeout, function () {\n                      // get rid of normal handler\n                      _this3.deleteHandler(handler); // call errback on timeout with null stanza\n\n\n                      if (errback) {\n                        errback(null);\n                      }\n\n                      return false;\n                    });\n                  }\n                }\n\n                this.send(elem);\n                return id;\n              },\n\n              /** Function: sendIQ\n               *  Helper function to send IQ stanzas.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza to send.\n               *    (Function) callback - The callback function for a successful request.\n               *    (Function) errback - The callback function for a failed or timed\n               *      out request.  On timeout, the stanza will be null.\n               *    (Integer) timeout - The time specified in milliseconds for a\n               *      timeout to occur.\n               *\n               *  Returns:\n               *    The id used to send the IQ.\n              */\n              sendIQ: function sendIQ(elem, callback, errback, timeout) {\n                var _this4 = this;\n\n                var timeoutHandler = null;\n\n                if (typeof elem.tree === \"function\") {\n                  elem = elem.tree();\n                }\n\n                var id = elem.getAttribute('id');\n\n                if (!id) {\n                  // inject id if not found\n                  id = this.getUniqueId(\"sendIQ\");\n                  elem.setAttribute(\"id\", id);\n                }\n\n                if (typeof callback === \"function\" || typeof errback === \"function\") {\n                  var handler = this.addHandler(function (stanza) {\n                    // remove timeout handler if there is one\n                    if (timeoutHandler) {\n                      _this4.deleteTimedHandler(timeoutHandler);\n                    }\n\n                    var iqtype = stanza.getAttribute('type');\n\n                    if (iqtype === 'result') {\n                      if (callback) {\n                        callback(stanza);\n                      }\n                    } else if (iqtype === 'error') {\n                      if (errback) {\n                        errback(stanza);\n                      }\n                    } else {\n                      var error = new Error(\"Got bad IQ type of \".concat(iqtype));\n                      error.name = \"StropheError\";\n                      throw error;\n                    }\n                  }, null, 'iq', ['error', 'result'], id); // if timeout specified, set up a timeout handler.\n\n                  if (timeout) {\n                    timeoutHandler = this.addTimedHandler(timeout, function () {\n                      // get rid of normal handler\n                      _this4.deleteHandler(handler); // call errback on timeout with null stanza\n\n\n                      if (errback) {\n                        errback(null);\n                      }\n\n                      return false;\n                    });\n                  }\n                }\n\n                this.send(elem);\n                return id;\n              },\n\n              /** PrivateFunction: _queueData\n               *  Queue outgoing data for later sending.  Also ensures that the data\n               *  is a DOMElement.\n               */\n              _queueData: function _queueData(element) {\n                if (element === null || !element.tagName || !element.childNodes) {\n                  var error = new Error(\"Cannot queue non-DOMElement.\");\n                  error.name = \"StropheError\";\n                  throw error;\n                }\n\n                this._data.push(element);\n              },\n\n              /** PrivateFunction: _sendRestart\n               *  Send an xmpp:restart stanza.\n               */\n              _sendRestart: function _sendRestart() {\n                var _this5 = this;\n\n                this._data.push(\"restart\");\n\n                this._proto._sendRestart();\n\n                this._idleTimeout = setTimeout(function () {\n                  return _this5._onIdle();\n                }, 100);\n              },\n\n              /** Function: addTimedHandler\n               *  Add a timed handler to the connection.\n               *\n               *  This function adds a timed handler.  The provided handler will\n               *  be called every period milliseconds until it returns false,\n               *  the connection is terminated, or the handler is removed.  Handlers\n               *  that wish to continue being invoked should return true.\n               *\n               *  Because of method binding it is necessary to save the result of\n               *  this function if you wish to remove a handler with\n               *  deleteTimedHandler().\n               *\n               *  Note that user handlers are not active until authentication is\n               *  successful.\n               *\n               *  Parameters:\n               *    (Integer) period - The period of the handler.\n               *    (Function) handler - The callback function.\n               *\n               *  Returns:\n               *    A reference to the handler that can be used to remove it.\n               */\n              addTimedHandler: function addTimedHandler(period, handler) {\n                var thand = new Strophe.TimedHandler(period, handler);\n                this.addTimeds.push(thand);\n                return thand;\n              },\n\n              /** Function: deleteTimedHandler\n               *  Delete a timed handler for a connection.\n               *\n               *  This function removes a timed handler from the connection.  The\n               *  handRef parameter is *not* the function passed to addTimedHandler(),\n               *  but is the reference returned from addTimedHandler().\n               *\n               *  Parameters:\n               *    (Strophe.TimedHandler) handRef - The handler reference.\n               */\n              deleteTimedHandler: function deleteTimedHandler(handRef) {\n                // this must be done in the Idle loop so that we don't change\n                // the handlers during iteration\n                this.removeTimeds.push(handRef);\n              },\n\n              /** Function: addHandler\n               *  Add a stanza handler for the connection.\n               *\n               *  This function adds a stanza handler to the connection.  The\n               *  handler callback will be called for any stanza that matches\n               *  the parameters.  Note that if multiple parameters are supplied,\n               *  they must all match for the handler to be invoked.\n               *\n               *  The handler will receive the stanza that triggered it as its argument.\n               *  *The handler should return true if it is to be invoked again;\n               *  returning false will remove the handler after it returns.*\n               *\n               *  As a convenience, the ns parameters applies to the top level element\n               *  and also any of its immediate children.  This is primarily to make\n               *  matching /iq/query elements easy.\n               *\n               *  Options\n               *  ~~~~~~~\n               *  With the options argument, you can specify boolean flags that affect how\n               *  matches are being done.\n               *\n               *  Currently two flags exist:\n               *\n               *  - matchBareFromJid:\n               *      When set to true, the from parameter and the\n               *      from attribute on the stanza will be matched as bare JIDs instead\n               *      of full JIDs. To use this, pass {matchBareFromJid: true} as the\n               *      value of options. The default value for matchBareFromJid is false.\n               *\n               *  - ignoreNamespaceFragment:\n               *      When set to true, a fragment specified on the stanza's namespace\n               *      URL will be ignored when it's matched with the one configured for\n               *      the handler.\n               *\n               *      This means that if you register like this:\n               *      >   connection.addHandler(\n               *      >       handler,\n               *      >       'http://jabber.org/protocol/muc',\n               *      >       null, null, null, null,\n               *      >       {'ignoreNamespaceFragment': true}\n               *      >   );\n               *\n               *      Then a stanza with XML namespace of\n               *      'http://jabber.org/protocol/muc#user' will also be matched. If\n               *      'ignoreNamespaceFragment' is false, then only stanzas with\n               *      'http://jabber.org/protocol/muc' will be matched.\n               *\n               *  Deleting the handler\n               *  ~~~~~~~~~~~~~~~~~~~~\n               *  The return value should be saved if you wish to remove the handler\n               *  with deleteHandler().\n               *\n               *  Parameters:\n               *    (Function) handler - The user callback.\n               *    (String) ns - The namespace to match.\n               *    (String) name - The stanza name to match.\n               *    (String|Array) type - The stanza type (or types if an array) to match.\n               *    (String) id - The stanza id attribute to match.\n               *    (String) from - The stanza from attribute to match.\n               *    (String) options - The handler options\n               *\n               *  Returns:\n               *    A reference to the handler that can be used to remove it.\n               */\n              addHandler: function addHandler(handler, ns, name, type, id, from, options) {\n                var hand = new Strophe.Handler(handler, ns, name, type, id, from, options);\n                this.addHandlers.push(hand);\n                return hand;\n              },\n\n              /** Function: deleteHandler\n               *  Delete a stanza handler for a connection.\n               *\n               *  This function removes a stanza handler from the connection.  The\n               *  handRef parameter is *not* the function passed to addHandler(),\n               *  but is the reference returned from addHandler().\n               *\n               *  Parameters:\n               *    (Strophe.Handler) handRef - The handler reference.\n               */\n              deleteHandler: function deleteHandler(handRef) {\n                // this must be done in the Idle loop so that we don't change\n                // the handlers during iteration\n                this.removeHandlers.push(handRef); // If a handler is being deleted while it is being added,\n                // prevent it from getting added\n\n                var i = this.addHandlers.indexOf(handRef);\n\n                if (i >= 0) {\n                  this.addHandlers.splice(i, 1);\n                }\n              },\n\n              /** Function: registerSASLMechanisms\n               *\n               * Register the SASL mechanisms which will be supported by this instance of\n               * Strophe.Connection (i.e. which this XMPP client will support).\n               *\n               *  Parameters:\n               *    (Array) mechanisms - Array of objects with Strophe.SASLMechanism prototypes\n               *\n               */\n              registerSASLMechanisms: function registerSASLMechanisms(mechanisms) {\n                this.mechanisms = {};\n                mechanisms = mechanisms || [Strophe.SASLAnonymous, Strophe.SASLExternal, Strophe.SASLMD5, Strophe.SASLOAuthBearer, Strophe.SASLXOAuth2, Strophe.SASLPlain, Strophe.SASLSHA1];\n                mechanisms.forEach(this.registerSASLMechanism.bind(this));\n              },\n\n              /** Function: registerSASLMechanism\n               *\n               * Register a single SASL mechanism, to be supported by this client.\n               *\n               *  Parameters:\n               *    (Object) mechanism - Object with a Strophe.SASLMechanism prototype\n               *\n               */\n              registerSASLMechanism: function registerSASLMechanism(mechanism) {\n                this.mechanisms[mechanism.prototype.name] = mechanism;\n              },\n\n              /** Function: disconnect\n               *  Start the graceful disconnection process.\n               *\n               *  This function starts the disconnection process.  This process starts\n               *  by sending unavailable presence and sending BOSH body of type\n               *  terminate.  A timeout handler makes sure that disconnection happens\n               *  even if the BOSH server does not respond.\n               *  If the Connection object isn't connected, at least tries to abort all pending requests\n               *  so the connection object won't generate successful requests (which were already opened).\n               *\n               *  The user supplied connection callback will be notified of the\n               *  progress as this process happens.\n               *\n               *  Parameters:\n               *    (String) reason - The reason the disconnect is occuring.\n               */\n              disconnect: function disconnect(reason) {\n                this._changeConnectStatus(Strophe.Status.DISCONNECTING, reason);\n\n                Strophe.warn(\"Disconnect was called because: \" + reason);\n\n                if (this.connected) {\n                  var pres = false;\n                  this.disconnecting = true;\n\n                  if (this.authenticated) {\n                    pres = $pres({\n                      'xmlns': Strophe.NS.CLIENT,\n                      'type': 'unavailable'\n                    });\n                  } // setup timeout handler\n\n\n                  this._disconnectTimeout = this._addSysTimedHandler(3000, this._onDisconnectTimeout.bind(this));\n\n                  this._proto._disconnect(pres);\n                } else {\n                  Strophe.warn(\"Disconnect was called before Strophe connected to the server\");\n\n                  this._proto._abortAllRequests();\n\n                  this._doDisconnect();\n                }\n              },\n\n              /** PrivateFunction: _changeConnectStatus\n               *  _Private_ helper function that makes sure plugins and the user's\n               *  callback are notified of connection status changes.\n               *\n               *  Parameters:\n               *    (Integer) status - the new connection status, one of the values\n               *      in Strophe.Status\n               *    (String) condition - the error condition or null\n               *    (XMLElement) elem - The triggering stanza.\n               */\n              _changeConnectStatus: function _changeConnectStatus(status, condition, elem) {\n                // notify all plugins listening for status changes\n                for (var k in Strophe._connectionPlugins) {\n                  if (Object.prototype.hasOwnProperty.call(Strophe._connectionPlugins, k)) {\n                    var plugin = this[k];\n\n                    if (plugin.statusChanged) {\n                      try {\n                        plugin.statusChanged(status, condition);\n                      } catch (err) {\n                        Strophe.error(\"\".concat(k, \" plugin caused an exception changing status: \").concat(err));\n                      }\n                    }\n                  }\n                } // notify the user's callback\n\n\n                if (this.connect_callback) {\n                  try {\n                    this.connect_callback(status, condition, elem);\n                  } catch (e) {\n                    Strophe._handleError(e);\n\n                    Strophe.error(\"User connection callback caused an exception: \".concat(e));\n                  }\n                }\n              },\n\n              /** PrivateFunction: _doDisconnect\n               *  _Private_ function to disconnect.\n               *\n               *  This is the last piece of the disconnection logic.  This resets the\n               *  connection and alerts the user's connection callback.\n               */\n              _doDisconnect: function _doDisconnect(condition) {\n                if (typeof this._idleTimeout === \"number\") {\n                  clearTimeout(this._idleTimeout);\n                } // Cancel Disconnect Timeout\n\n\n                if (this._disconnectTimeout !== null) {\n                  this.deleteTimedHandler(this._disconnectTimeout);\n                  this._disconnectTimeout = null;\n                }\n\n                Strophe.debug(\"_doDisconnect was called\");\n\n                this._proto._doDisconnect();\n\n                this.authenticated = false;\n                this.disconnecting = false;\n                this.restored = false; // delete handlers\n\n                this.handlers = [];\n                this.timedHandlers = [];\n                this.removeTimeds = [];\n                this.removeHandlers = [];\n                this.addTimeds = [];\n                this.addHandlers = []; // tell the parent we disconnected\n\n                this._changeConnectStatus(Strophe.Status.DISCONNECTED, condition);\n\n                this.connected = false;\n              },\n\n              /** PrivateFunction: _dataRecv\n               *  _Private_ handler to processes incoming data from the the connection.\n               *\n               *  Except for _connect_cb handling the initial connection request,\n               *  this function handles the incoming data for all requests.  This\n               *  function also fires stanza handlers that match each incoming\n               *  stanza.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The request that has data ready.\n               *    (string) req - The stanza a raw string (optiona).\n               */\n              _dataRecv: function _dataRecv(req, raw) {\n                var _this6 = this;\n\n                Strophe.debug(\"_dataRecv called\");\n\n                var elem = this._proto._reqToData(req);\n\n                if (elem === null) {\n                  return;\n                }\n\n                if (this.xmlInput !== Strophe.Connection.prototype.xmlInput) {\n                  if (elem.nodeName === this._proto.strip && elem.childNodes.length) {\n                    this.xmlInput(elem.childNodes[0]);\n                  } else {\n                    this.xmlInput(elem);\n                  }\n                }\n\n                if (this.rawInput !== Strophe.Connection.prototype.rawInput) {\n                  if (raw) {\n                    this.rawInput(raw);\n                  } else {\n                    this.rawInput(Strophe.serialize(elem));\n                  }\n                } // remove handlers scheduled for deletion\n\n\n                while (this.removeHandlers.length > 0) {\n                  var hand = this.removeHandlers.pop();\n                  var i = this.handlers.indexOf(hand);\n\n                  if (i >= 0) {\n                    this.handlers.splice(i, 1);\n                  }\n                } // add handlers scheduled for addition\n\n\n                while (this.addHandlers.length > 0) {\n                  this.handlers.push(this.addHandlers.pop());\n                } // handle graceful disconnect\n\n\n                if (this.disconnecting && this._proto._emptyQueue()) {\n                  this._doDisconnect();\n\n                  return;\n                }\n\n                var type = elem.getAttribute(\"type\");\n\n                if (type !== null && type === \"terminate\") {\n                  // Don't process stanzas that come in after disconnect\n                  if (this.disconnecting) {\n                    return;\n                  } // an error occurred\n\n\n                  var cond = elem.getAttribute(\"condition\");\n                  var conflict = elem.getElementsByTagName(\"conflict\");\n\n                  if (cond !== null) {\n                    if (cond === \"remote-stream-error\" && conflict.length > 0) {\n                      cond = \"conflict\";\n                    }\n\n                    this._changeConnectStatus(Strophe.Status.CONNFAIL, cond);\n                  } else {\n                    this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.UNKOWN_REASON);\n                  }\n\n                  this._doDisconnect(cond);\n\n                  return;\n                } // send each incoming stanza through the handler chain\n\n\n                Strophe.forEachChild(elem, null, function (child) {\n                  // process handlers\n                  var newList = _this6.handlers;\n                  _this6.handlers = [];\n\n                  for (var _i5 = 0; _i5 < newList.length; _i5++) {\n                    var _hand = newList[_i5]; // encapsulate 'handler.run' not to lose the whole handler list if\n                    // one of the handlers throws an exception\n\n                    try {\n                      if (_hand.isMatch(child) && (_this6.authenticated || !_hand.user)) {\n                        if (_hand.run(child)) {\n                          _this6.handlers.push(_hand);\n                        }\n                      } else {\n                        _this6.handlers.push(_hand);\n                      }\n                    } catch (e) {\n                      // if the handler throws an exception, we consider it as false\n                      Strophe.warn('Removing Strophe handlers due to uncaught exception: ' + e.message);\n                    }\n                  }\n                });\n              },\n\n              /** Attribute: mechanisms\n               *  SASL Mechanisms available for Connection.\n               */\n              mechanisms: {},\n\n              /** PrivateFunction: _connect_cb\n               *  _Private_ handler for initial connection request.\n               *\n               *  This handler is used to process the initial connection request\n               *  response from the BOSH server. It is used to set up authentication\n               *  handlers and start the authentication process.\n               *\n               *  SASL authentication will be attempted if available, otherwise\n               *  the code will fall back to legacy authentication.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The current request.\n               *    (Function) _callback - low level (xmpp) connect callback function.\n               *      Useful for plugins with their own xmpp connect callback (when they\n               *      want to do something special).\n               */\n              _connect_cb: function _connect_cb(req, _callback, raw) {\n                Strophe.debug(\"_connect_cb was called\");\n                this.connected = true;\n                var bodyWrap;\n\n                try {\n                  bodyWrap = this._proto._reqToData(req);\n                } catch (e) {\n                  if (e.name !== Strophe.ErrorCondition.BAD_FORMAT) {\n                    throw e;\n                  }\n\n                  this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.BAD_FORMAT);\n\n                  this._doDisconnect(Strophe.ErrorCondition.BAD_FORMAT);\n                }\n\n                if (!bodyWrap) {\n                  return;\n                }\n\n                if (this.xmlInput !== Strophe.Connection.prototype.xmlInput) {\n                  if (bodyWrap.nodeName === this._proto.strip && bodyWrap.childNodes.length) {\n                    this.xmlInput(bodyWrap.childNodes[0]);\n                  } else {\n                    this.xmlInput(bodyWrap);\n                  }\n                }\n\n                if (this.rawInput !== Strophe.Connection.prototype.rawInput) {\n                  if (raw) {\n                    this.rawInput(raw);\n                  } else {\n                    this.rawInput(Strophe.serialize(bodyWrap));\n                  }\n                }\n\n                var conncheck = this._proto._connect_cb(bodyWrap);\n\n                if (conncheck === Strophe.Status.CONNFAIL) {\n                  return;\n                } // Check for the stream:features tag\n\n\n                var hasFeatures;\n\n                if (bodyWrap.getElementsByTagNameNS) {\n                  hasFeatures = bodyWrap.getElementsByTagNameNS(Strophe.NS.STREAM, \"features\").length > 0;\n                } else {\n                  hasFeatures = bodyWrap.getElementsByTagName(\"stream:features\").length > 0 || bodyWrap.getElementsByTagName(\"features\").length > 0;\n                }\n\n                if (!hasFeatures) {\n                  this._proto._no_auth_received(_callback);\n\n                  return;\n                }\n\n                var matched = [];\n                var mechanisms = bodyWrap.getElementsByTagName(\"mechanism\");\n\n                if (mechanisms.length > 0) {\n                  for (var i = 0; i < mechanisms.length; i++) {\n                    var mech = Strophe.getText(mechanisms[i]);\n                    if (this.mechanisms[mech]) matched.push(this.mechanisms[mech]);\n                  }\n                }\n\n                if (matched.length === 0) {\n                  if (bodyWrap.getElementsByTagName(\"auth\").length === 0) {\n                    // There are no matching SASL mechanisms and also no legacy\n                    // auth available.\n                    this._proto._no_auth_received(_callback);\n\n                    return;\n                  }\n                }\n\n                if (this.do_authentication !== false) {\n                  this.authenticate(matched);\n                }\n              },\n\n              /** Function: sortMechanismsByPriority\n               *\n               *  Sorts an array of objects with prototype SASLMechanism according to\n               *  their priorities.\n               *\n               *  Parameters:\n               *    (Array) mechanisms - Array of SASL mechanisms.\n               *\n               */\n              sortMechanismsByPriority: function sortMechanismsByPriority(mechanisms) {\n                // Sorting mechanisms according to priority.\n                for (var i = 0; i < mechanisms.length - 1; ++i) {\n                  var higher = i;\n\n                  for (var j = i + 1; j < mechanisms.length; ++j) {\n                    if (mechanisms[j].prototype.priority > mechanisms[higher].prototype.priority) {\n                      higher = j;\n                    }\n                  }\n\n                  if (higher !== i) {\n                    var swap = mechanisms[i];\n                    mechanisms[i] = mechanisms[higher];\n                    mechanisms[higher] = swap;\n                  }\n                }\n\n                return mechanisms;\n              },\n\n              /** Function: authenticate\n               * Set up authentication\n               *\n               *  Continues the initial connection request by setting up authentication\n               *  handlers and starting the authentication process.\n               *\n               *  SASL authentication will be attempted if available, otherwise\n               *  the code will fall back to legacy authentication.\n               *\n               *  Parameters:\n               *    (Array) matched - Array of SASL mechanisms supported.\n               *\n               */\n              authenticate: function authenticate(matched) {\n                if (!this._attemptSASLAuth(matched)) {\n                  this._attemptLegacyAuth();\n                }\n              },\n\n              /** PrivateFunction: _attemptSASLAuth\n               *\n               *  Iterate through an array of SASL mechanisms and attempt authentication\n               *  with the highest priority (enabled) mechanism.\n               *\n               *  Parameters:\n               *    (Array) mechanisms - Array of SASL mechanisms.\n               *\n               *  Returns:\n               *    (Boolean) mechanism_found - true or false, depending on whether a\n               *          valid SASL mechanism was found with which authentication could be\n               *          started.\n               */\n              _attemptSASLAuth: function _attemptSASLAuth(mechanisms) {\n                mechanisms = this.sortMechanismsByPriority(mechanisms || []);\n                var mechanism_found = false;\n\n                for (var i = 0; i < mechanisms.length; ++i) {\n                  if (!mechanisms[i].prototype.test(this)) {\n                    continue;\n                  }\n\n                  this._sasl_success_handler = this._addSysHandler(this._sasl_success_cb.bind(this), null, \"success\", null, null);\n                  this._sasl_failure_handler = this._addSysHandler(this._sasl_failure_cb.bind(this), null, \"failure\", null, null);\n                  this._sasl_challenge_handler = this._addSysHandler(this._sasl_challenge_cb.bind(this), null, \"challenge\", null, null);\n                  this._sasl_mechanism = new mechanisms[i]();\n\n                  this._sasl_mechanism.onStart(this);\n\n                  var request_auth_exchange = $build(\"auth\", {\n                    'xmlns': Strophe.NS.SASL,\n                    'mechanism': this._sasl_mechanism.name\n                  });\n\n                  if (this._sasl_mechanism.isClientFirst) {\n                    var response = this._sasl_mechanism.onChallenge(this, null);\n\n                    request_auth_exchange.t(btoa(response));\n                  }\n\n                  this.send(request_auth_exchange.tree());\n                  mechanism_found = true;\n                  break;\n                }\n\n                return mechanism_found;\n              },\n\n              /** PrivateFunction: _sasl_challenge_cb\n               *  _Private_ handler for the SASL challenge\n               *\n               */\n              _sasl_challenge_cb: function _sasl_challenge_cb(elem) {\n                var challenge = atob(Strophe.getText(elem));\n\n                var response = this._sasl_mechanism.onChallenge(this, challenge);\n\n                var stanza = $build('response', {\n                  'xmlns': Strophe.NS.SASL\n                });\n\n                if (response !== \"\") {\n                  stanza.t(btoa(response));\n                }\n\n                this.send(stanza.tree());\n                return true;\n              },\n\n              /** PrivateFunction: _attemptLegacyAuth\n               *\n               *  Attempt legacy (i.e. non-SASL) authentication.\n               */\n              _attemptLegacyAuth: function _attemptLegacyAuth() {\n                if (Strophe.getNodeFromJid(this.jid) === null) {\n                  // we don't have a node, which is required for non-anonymous\n                  // client connections\n                  this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.MISSING_JID_NODE);\n\n                  this.disconnect(Strophe.ErrorCondition.MISSING_JID_NODE);\n                } else {\n                  // Fall back to legacy authentication\n                  this._changeConnectStatus(Strophe.Status.AUTHENTICATING, null);\n\n                  this._addSysHandler(this._onLegacyAuthIQResult.bind(this), null, null, null, \"_auth_1\");\n\n                  this.send($iq({\n                    'type': \"get\",\n                    'to': this.domain,\n                    'id': \"_auth_1\"\n                  }).c(\"query\", {\n                    xmlns: Strophe.NS.AUTH\n                  }).c(\"username\", {}).t(Strophe.getNodeFromJid(this.jid)).tree());\n                }\n              },\n\n              /** PrivateFunction: _onLegacyAuthIQResult\n               *  _Private_ handler for legacy authentication.\n               *\n               *  This handler is called in response to the initial <iq type='get'/>\n               *  for legacy authentication.  It builds an authentication <iq/> and\n               *  sends it, creating a handler (calling back to _auth2_cb()) to\n               *  handle the result\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza that triggered the callback.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onLegacyAuthIQResult: function _onLegacyAuthIQResult(elem) {\n                // build plaintext auth iq\n                var iq = $iq({\n                  type: \"set\",\n                  id: \"_auth_2\"\n                }).c('query', {\n                  xmlns: Strophe.NS.AUTH\n                }).c('username', {}).t(Strophe.getNodeFromJid(this.jid)).up().c('password').t(this.pass);\n\n                if (!Strophe.getResourceFromJid(this.jid)) {\n                  // since the user has not supplied a resource, we pick\n                  // a default one here.  unlike other auth methods, the server\n                  // cannot do this for us.\n                  this.jid = Strophe.getBareJidFromJid(this.jid) + '/strophe';\n                }\n\n                iq.up().c('resource', {}).t(Strophe.getResourceFromJid(this.jid));\n\n                this._addSysHandler(this._auth2_cb.bind(this), null, null, null, \"_auth_2\");\n\n                this.send(iq.tree());\n                return false;\n              },\n\n              /** PrivateFunction: _sasl_success_cb\n               *  _Private_ handler for succesful SASL authentication.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _sasl_success_cb: function _sasl_success_cb(elem) {\n                var _this7 = this;\n\n                if (this._sasl_data[\"server-signature\"]) {\n                  var serverSignature;\n                  var success = atob(Strophe.getText(elem));\n                  var attribMatch = /([a-z]+)=([^,]+)(,|$)/;\n                  var matches = success.match(attribMatch);\n\n                  if (matches[1] === \"v\") {\n                    serverSignature = matches[2];\n                  }\n\n                  if (serverSignature !== this._sasl_data[\"server-signature\"]) {\n                    // remove old handlers\n                    this.deleteHandler(this._sasl_failure_handler);\n                    this._sasl_failure_handler = null;\n\n                    if (this._sasl_challenge_handler) {\n                      this.deleteHandler(this._sasl_challenge_handler);\n                      this._sasl_challenge_handler = null;\n                    }\n\n                    this._sasl_data = {};\n                    return this._sasl_failure_cb(null);\n                  }\n                }\n\n                Strophe.info(\"SASL authentication succeeded.\");\n\n                if (this._sasl_mechanism) {\n                  this._sasl_mechanism.onSuccess();\n                } // remove old handlers\n\n\n                this.deleteHandler(this._sasl_failure_handler);\n                this._sasl_failure_handler = null;\n\n                if (this._sasl_challenge_handler) {\n                  this.deleteHandler(this._sasl_challenge_handler);\n                  this._sasl_challenge_handler = null;\n                }\n\n                var streamfeature_handlers = [];\n\n                var wrapper = function wrapper(handlers, elem) {\n                  while (handlers.length) {\n                    _this7.deleteHandler(handlers.pop());\n                  }\n\n                  _this7._onStreamFeaturesAfterSASL(elem);\n\n                  return false;\n                };\n\n                streamfeature_handlers.push(this._addSysHandler(function (elem) {\n                  return wrapper(streamfeature_handlers, elem);\n                }, null, \"stream:features\", null, null));\n                streamfeature_handlers.push(this._addSysHandler(function (elem) {\n                  return wrapper(streamfeature_handlers, elem);\n                }, Strophe.NS.STREAM, \"features\", null, null)); // we must send an xmpp:restart now\n\n                this._sendRestart();\n\n                return false;\n              },\n\n              /** PrivateFunction: _onStreamFeaturesAfterSASL\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onStreamFeaturesAfterSASL: function _onStreamFeaturesAfterSASL(elem) {\n                // save stream:features for future usage\n                this.features = elem;\n\n                for (var i = 0; i < elem.childNodes.length; i++) {\n                  var child = elem.childNodes[i];\n\n                  if (child.nodeName === 'bind') {\n                    this.do_bind = true;\n                  }\n\n                  if (child.nodeName === 'session') {\n                    this.do_session = true;\n                  }\n                }\n\n                if (!this.do_bind) {\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null);\n\n                  return false;\n                } else if (!this.options.explicitResourceBinding) {\n                  this.bind();\n                } else {\n                  this._changeConnectStatus(Strophe.Status.BINDREQUIRED, null);\n                }\n\n                return false;\n              },\n\n              /** Function: bind\n               *\n               *  Sends an IQ to the XMPP server to bind a JID resource for this session.\n               *\n               *  https://tools.ietf.org/html/rfc6120#section-7.5\n               *\n               *  If `explicitResourceBinding` was set to a truthy value in the options\n               *  passed to the Strophe.Connection constructor, then this function needs\n               *  to be called explicitly by the client author.\n               *\n               *  Otherwise it'll be called automatically as soon as the XMPP server\n               *  advertises the \"urn:ietf:params:xml:ns:xmpp-bind\" stream feature.\n               */\n              bind: function bind() {\n                if (!this.do_bind) {\n                  Strophe.log(Strophe.LogLevel.INFO, \"Strophe.Connection.prototype.bind called but \\\"do_bind\\\" is false\");\n                  return;\n                }\n\n                this._addSysHandler(this._onResourceBindResultIQ.bind(this), null, null, null, \"_bind_auth_2\");\n\n                var resource = Strophe.getResourceFromJid(this.jid);\n\n                if (resource) {\n                  this.send($iq({\n                    type: \"set\",\n                    id: \"_bind_auth_2\"\n                  }).c('bind', {\n                    xmlns: Strophe.NS.BIND\n                  }).c('resource', {}).t(resource).tree());\n                } else {\n                  this.send($iq({\n                    type: \"set\",\n                    id: \"_bind_auth_2\"\n                  }).c('bind', {\n                    xmlns: Strophe.NS.BIND\n                  }).tree());\n                }\n              },\n\n              /** PrivateFunction: _onResourceBindIQ\n               *  _Private_ handler for binding result and session start.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onResourceBindResultIQ: function _onResourceBindResultIQ(elem) {\n                if (elem.getAttribute(\"type\") === \"error\") {\n                  Strophe.warn(\"Resource binding failed.\");\n                  var conflict = elem.getElementsByTagName(\"conflict\");\n                  var condition;\n\n                  if (conflict.length > 0) {\n                    condition = Strophe.ErrorCondition.CONFLICT;\n                  }\n\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, condition, elem);\n\n                  return false;\n                } // TODO - need to grab errors\n\n\n                var bind = elem.getElementsByTagName(\"bind\");\n\n                if (bind.length > 0) {\n                  var jidNode = bind[0].getElementsByTagName(\"jid\");\n\n                  if (jidNode.length > 0) {\n                    this.jid = Strophe.getText(jidNode[0]);\n\n                    if (this.do_session) {\n                      this._establishSession();\n                    } else {\n                      this.authenticated = true;\n\n                      this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n                    }\n                  }\n                } else {\n                  Strophe.warn(\"Resource binding failed.\");\n\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                  return false;\n                }\n              },\n\n              /** PrivateFunction: _establishSession\n               *  Send IQ request to establish a session with the XMPP server.\n               *\n               *  See https://xmpp.org/rfcs/rfc3921.html#session\n               *\n               *  Note: The protocol for session establishment has been determined as\n               *  unnecessary and removed in RFC-6121.\n               */\n              _establishSession: function _establishSession() {\n                if (!this.do_session) {\n                  throw new Error(\"Strophe.Connection.prototype._establishSession \" + \"called but apparently \".concat(Strophe.NS.SESSION, \" wasn't advertised by the server\"));\n                }\n\n                this._addSysHandler(this._onSessionResultIQ.bind(this), null, null, null, \"_session_auth_2\");\n\n                this.send($iq({\n                  type: \"set\",\n                  id: \"_session_auth_2\"\n                }).c('session', {\n                  xmlns: Strophe.NS.SESSION\n                }).tree());\n              },\n\n              /** PrivateFunction: _onSessionResultIQ\n               *  _Private_ handler for the server's IQ response to a client's session\n               *  request.\n               *\n               *  This sets Connection.authenticated to true on success, which\n               *  starts the processing of user handlers.\n               *\n               *  See https://xmpp.org/rfcs/rfc3921.html#session\n               *\n               *  Note: The protocol for session establishment has been determined as\n               *  unnecessary and removed in RFC-6121.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onSessionResultIQ: function _onSessionResultIQ(elem) {\n                if (elem.getAttribute(\"type\") === \"result\") {\n                  this.authenticated = true;\n\n                  this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n                } else if (elem.getAttribute(\"type\") === \"error\") {\n                  Strophe.warn(\"Session creation failed.\");\n\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                  return false;\n                }\n\n                return false;\n              },\n\n              /** PrivateFunction: _sasl_failure_cb\n               *  _Private_ handler for SASL authentication failure.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _sasl_failure_cb: function _sasl_failure_cb(elem) {\n                // delete unneeded handlers\n                if (this._sasl_success_handler) {\n                  this.deleteHandler(this._sasl_success_handler);\n                  this._sasl_success_handler = null;\n                }\n\n                if (this._sasl_challenge_handler) {\n                  this.deleteHandler(this._sasl_challenge_handler);\n                  this._sasl_challenge_handler = null;\n                }\n\n                if (this._sasl_mechanism) this._sasl_mechanism.onFailure();\n\n                this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                return false;\n              },\n\n              /** PrivateFunction: _auth2_cb\n               *  _Private_ handler to finish legacy authentication.\n               *\n               *  This handler is called when the result from the jabber:iq:auth\n               *  <iq/> stanza is returned.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza that triggered the callback.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _auth2_cb: function _auth2_cb(elem) {\n                if (elem.getAttribute(\"type\") === \"result\") {\n                  this.authenticated = true;\n\n                  this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n                } else if (elem.getAttribute(\"type\") === \"error\") {\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                  this.disconnect('authentication failed');\n                }\n\n                return false;\n              },\n\n              /** PrivateFunction: _addSysTimedHandler\n               *  _Private_ function to add a system level timed handler.\n               *\n               *  This function is used to add a Strophe.TimedHandler for the\n               *  library code.  System timed handlers are allowed to run before\n               *  authentication is complete.\n               *\n               *  Parameters:\n               *    (Integer) period - The period of the handler.\n               *    (Function) handler - The callback function.\n               */\n              _addSysTimedHandler: function _addSysTimedHandler(period, handler) {\n                var thand = new Strophe.TimedHandler(period, handler);\n                thand.user = false;\n                this.addTimeds.push(thand);\n                return thand;\n              },\n\n              /** PrivateFunction: _addSysHandler\n               *  _Private_ function to add a system level stanza handler.\n               *\n               *  This function is used to add a Strophe.Handler for the\n               *  library code.  System stanza handlers are allowed to run before\n               *  authentication is complete.\n               *\n               *  Parameters:\n               *    (Function) handler - The callback function.\n               *    (String) ns - The namespace to match.\n               *    (String) name - The stanza name to match.\n               *    (String) type - The stanza type attribute to match.\n               *    (String) id - The stanza id attribute to match.\n               */\n              _addSysHandler: function _addSysHandler(handler, ns, name, type, id) {\n                var hand = new Strophe.Handler(handler, ns, name, type, id);\n                hand.user = false;\n                this.addHandlers.push(hand);\n                return hand;\n              },\n\n              /** PrivateFunction: _onDisconnectTimeout\n               *  _Private_ timeout handler for handling non-graceful disconnection.\n               *\n               *  If the graceful disconnect process does not complete within the\n               *  time allotted, this handler finishes the disconnect anyway.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onDisconnectTimeout: function _onDisconnectTimeout() {\n                Strophe.debug(\"_onDisconnectTimeout was called\");\n\n                this._changeConnectStatus(Strophe.Status.CONNTIMEOUT, null);\n\n                this._proto._onDisconnectTimeout(); // actually disconnect\n\n\n                this._doDisconnect();\n\n                return false;\n              },\n\n              /** PrivateFunction: _onIdle\n               *  _Private_ handler to process events during idle cycle.\n               *\n               *  This handler is called every 100ms to fire timed handlers that\n               *  are ready and keep poll requests going.\n               */\n              _onIdle: function _onIdle() {\n                var _this8 = this;\n\n                // add timed handlers scheduled for addition\n                // NOTE: we add before remove in the case a timed handler is\n                // added and then deleted before the next _onIdle() call.\n                while (this.addTimeds.length > 0) {\n                  this.timedHandlers.push(this.addTimeds.pop());\n                } // remove timed handlers that have been scheduled for deletion\n\n\n                while (this.removeTimeds.length > 0) {\n                  var thand = this.removeTimeds.pop();\n                  var i = this.timedHandlers.indexOf(thand);\n\n                  if (i >= 0) {\n                    this.timedHandlers.splice(i, 1);\n                  }\n                } // call ready timed handlers\n\n\n                var now = new Date().getTime();\n                var newList = [];\n\n                for (var _i6 = 0; _i6 < this.timedHandlers.length; _i6++) {\n                  var _thand = this.timedHandlers[_i6];\n\n                  if (this.authenticated || !_thand.user) {\n                    var since = _thand.lastCalled + _thand.period;\n\n                    if (since - now <= 0) {\n                      if (_thand.run()) {\n                        newList.push(_thand);\n                      }\n                    } else {\n                      newList.push(_thand);\n                    }\n                  }\n                }\n\n                this.timedHandlers = newList;\n                clearTimeout(this._idleTimeout);\n\n                this._proto._onIdle(); // reactivate the timer only if connected\n\n\n                if (this.connected) {\n                  this._idleTimeout = setTimeout(function () {\n                    return _this8._onIdle();\n                  }, 100);\n                }\n              }\n            };\n            /** Class: Strophe.SASLMechanism\n             *\n             *  encapsulates SASL authentication mechanisms.\n             *\n             *  User code may override the priority for each mechanism or disable it completely.\n             *  See <priority> for information about changing priority and <test> for informatian on\n             *  how to disable a mechanism.\n             *\n             *  By default, all mechanisms are enabled and the priorities are\n             *\n             *      OAUTHBEARER - 60\n             *      SCRAM-SHA1 - 50\n             *      DIGEST-MD5 - 40\n             *      PLAIN - 30\n             *      ANONYMOUS - 20\n             *      EXTERNAL - 10\n             *\n             *  See: Strophe.Connection.addSupportedSASLMechanisms\n             */\n\n            /**\n             * PrivateConstructor: Strophe.SASLMechanism\n             * SASL auth mechanism abstraction.\n             *\n             *  Parameters:\n             *    (String) name - SASL Mechanism name.\n             *    (Boolean) isClientFirst - If client should send response first without challenge.\n             *    (Number) priority - Priority.\n             *\n             *  Returns:\n             *    A new Strophe.SASLMechanism object.\n             */\n\n            Strophe.SASLMechanism = function (name, isClientFirst, priority) {\n              /** PrivateVariable: name\n               *  Mechanism name.\n               */\n              this.name = name;\n              /** PrivateVariable: isClientFirst\n               *  If client sends response without initial server challenge.\n               */\n\n              this.isClientFirst = isClientFirst;\n              /** Variable: priority\n               *  Determines which <SASLMechanism> is chosen for authentication (Higher is better).\n               *  Users may override this to prioritize mechanisms differently.\n               *\n               *  In the default configuration the priorities are\n               *\n               *  SCRAM-SHA1 - 40\n               *  DIGEST-MD5 - 30\n               *  Plain - 20\n               *\n               *  Example: (This will cause Strophe to choose the mechanism that the server sent first)\n               *\n               *  > Strophe.SASLMD5.priority = Strophe.SASLSHA1.priority;\n               *\n               *  See <SASL mechanisms> for a list of available mechanisms.\n               *\n               */\n\n              this.priority = priority;\n            };\n\n            Strophe.SASLMechanism.prototype = {\n              /**\n               *  Function: test\n               *  Checks if mechanism able to run.\n               *  To disable a mechanism, make this return false;\n               *\n               *  To disable plain authentication run\n               *  > Strophe.SASLPlain.test = function() {\n               *  >   return false;\n               *  > }\n               *\n               *  See <SASL mechanisms> for a list of available mechanisms.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - Target Connection.\n               *\n               *  Returns:\n               *    (Boolean) If mechanism was able to run.\n               */\n              test: function test(connection) {\n                return true;\n              },\n\n              /** PrivateFunction: onStart\n               *  Called before starting mechanism on some connection.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - Target Connection.\n               */\n              onStart: function onStart(connection) {\n                this._connection = connection;\n              },\n\n              /** PrivateFunction: onChallenge\n               *  Called by protocol implementation on incoming challenge. If client is\n               *  first (isClientFirst === true) challenge will be null on the first call.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - Target Connection.\n               *    (String) challenge - current challenge to handle.\n               *\n               *  Returns:\n               *    (String) Mechanism response.\n               */\n              onChallenge: function onChallenge(connection, challenge) {\n                throw new Error(\"You should implement challenge handling!\");\n              },\n\n              /** PrivateFunction: onFailure\n               *  Protocol informs mechanism implementation about SASL failure.\n               */\n              onFailure: function onFailure() {\n                this._connection = null;\n              },\n\n              /** PrivateFunction: onSuccess\n               *  Protocol informs mechanism implementation about SASL success.\n               */\n              onSuccess: function onSuccess() {\n                this._connection = null;\n              }\n            };\n            /** Constants: SASL mechanisms\n             *  Available authentication mechanisms\n             *\n             *  Strophe.SASLAnonymous - SASL ANONYMOUS authentication.\n             *  Strophe.SASLPlain - SASL PLAIN authentication.\n             *  Strophe.SASLMD5 - SASL DIGEST-MD5 authentication\n             *  Strophe.SASLSHA1 - SASL SCRAM-SHA1 authentication\n             *  Strophe.SASLOAuthBearer - SASL OAuth Bearer authentication\n             *  Strophe.SASLExternal - SASL EXTERNAL authentication\n             *  Strophe.SASLXOAuth2 - SASL X-OAuth2 authentication\n             */\n            // Building SASL callbacks\n\n            /** PrivateConstructor: SASLAnonymous\n             *  SASL ANONYMOUS authentication.\n             */\n\n            Strophe.SASLAnonymous = function () {};\n\n            Strophe.SASLAnonymous.prototype = new Strophe.SASLMechanism(\"ANONYMOUS\", false, 20);\n\n            Strophe.SASLAnonymous.prototype.test = function (connection) {\n              return connection.authcid === null;\n            };\n            /** PrivateConstructor: SASLPlain\n             *  SASL PLAIN authentication.\n             */\n\n\n            Strophe.SASLPlain = function () {};\n\n            Strophe.SASLPlain.prototype = new Strophe.SASLMechanism(\"PLAIN\", true, 50);\n\n            Strophe.SASLPlain.prototype.test = function (connection) {\n              return connection.authcid !== null;\n            };\n\n            Strophe.SASLPlain.prototype.onChallenge = function (connection) {\n              var auth_str = connection.authzid;\n              auth_str = auth_str + \"\\0\";\n              auth_str = auth_str + connection.authcid;\n              auth_str = auth_str + \"\\0\";\n              auth_str = auth_str + connection.pass;\n              return utils.utf16to8(auth_str);\n            };\n            /** PrivateConstructor: SASLSHA1\n             *  SASL SCRAM SHA 1 authentication.\n             */\n\n\n            Strophe.SASLSHA1 = function () {};\n\n            Strophe.SASLSHA1.prototype = new Strophe.SASLMechanism(\"SCRAM-SHA-1\", true, 70);\n\n            Strophe.SASLSHA1.prototype.test = function (connection) {\n              return connection.authcid !== null;\n            };\n\n            Strophe.SASLSHA1.prototype.onChallenge = function (connection, challenge, test_cnonce) {\n              var cnonce = test_cnonce || MD5.hexdigest(\"\" + Math.random() * 1234567890);\n              var auth_str = \"n=\" + utils.utf16to8(connection.authcid);\n              auth_str += \",r=\";\n              auth_str += cnonce;\n              connection._sasl_data.cnonce = cnonce;\n              connection._sasl_data[\"client-first-message-bare\"] = auth_str;\n              auth_str = \"n,,\" + auth_str;\n\n              this.onChallenge = function (connection, challenge) {\n                var nonce, salt, iter, Hi, U, U_old, i, k;\n                var responseText = \"c=biws,\";\n                var authMessage = \"\".concat(connection._sasl_data[\"client-first-message-bare\"], \",\").concat(challenge, \",\");\n                var cnonce = connection._sasl_data.cnonce;\n                var attribMatch = /([a-z]+)=([^,]+)(,|$)/;\n\n                while (challenge.match(attribMatch)) {\n                  var matches = challenge.match(attribMatch);\n                  challenge = challenge.replace(matches[0], \"\");\n\n                  switch (matches[1]) {\n                    case \"r\":\n                      nonce = matches[2];\n                      break;\n\n                    case \"s\":\n                      salt = matches[2];\n                      break;\n\n                    case \"i\":\n                      iter = matches[2];\n                      break;\n                  }\n                }\n\n                if (nonce.substr(0, cnonce.length) !== cnonce) {\n                  connection._sasl_data = {};\n                  return connection._sasl_failure_cb();\n                }\n\n                responseText += \"r=\" + nonce;\n                authMessage += responseText;\n                salt = atob(salt);\n                salt += \"\\x00\\x00\\x00\\x01\";\n                var pass = utils.utf16to8(connection.pass);\n                Hi = U_old = SHA1.core_hmac_sha1(pass, salt);\n\n                for (i = 1; i < iter; i++) {\n                  U = SHA1.core_hmac_sha1(pass, SHA1.binb2str(U_old));\n\n                  for (k = 0; k < 5; k++) {\n                    Hi[k] ^= U[k];\n                  }\n\n                  U_old = U;\n                }\n\n                Hi = SHA1.binb2str(Hi);\n                var clientKey = SHA1.core_hmac_sha1(Hi, \"Client Key\");\n                var serverKey = SHA1.str_hmac_sha1(Hi, \"Server Key\");\n                var clientSignature = SHA1.core_hmac_sha1(SHA1.str_sha1(SHA1.binb2str(clientKey)), authMessage);\n                connection._sasl_data[\"server-signature\"] = SHA1.b64_hmac_sha1(serverKey, authMessage);\n\n                for (k = 0; k < 5; k++) {\n                  clientKey[k] ^= clientSignature[k];\n                }\n\n                responseText += \",p=\" + btoa(SHA1.binb2str(clientKey));\n                return responseText;\n              };\n\n              return auth_str;\n            };\n            /** PrivateConstructor: SASLMD5\n             *  SASL DIGEST MD5 authentication.\n             */\n\n\n            Strophe.SASLMD5 = function () {};\n\n            Strophe.SASLMD5.prototype = new Strophe.SASLMechanism(\"DIGEST-MD5\", false, 60);\n\n            Strophe.SASLMD5.prototype.test = function (connection) {\n              return connection.authcid !== null;\n            };\n            /** PrivateFunction: _quote\n             *  _Private_ utility function to backslash escape and quote strings.\n             *\n             *  Parameters:\n             *    (String) str - The string to be quoted.\n             *\n             *  Returns:\n             *    quoted string\n             */\n\n\n            Strophe.SASLMD5.prototype._quote = function (str) {\n              return '\"' + str.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, '\\\\\"') + '\"'; //\" end string workaround for emacs\n            };\n\n            Strophe.SASLMD5.prototype.onChallenge = function (connection, challenge, test_cnonce) {\n              var attribMatch = /([a-z]+)=(\"[^\"]+\"|[^,\"]+)(?:,|$)/;\n              var cnonce = test_cnonce || MD5.hexdigest(\"\" + Math.random() * 1234567890);\n              var realm = \"\";\n              var host = null;\n              var nonce = \"\";\n              var qop = \"\";\n\n              while (challenge.match(attribMatch)) {\n                var matches = challenge.match(attribMatch);\n                challenge = challenge.replace(matches[0], \"\");\n                matches[2] = matches[2].replace(/^\"(.+)\"$/, \"$1\");\n\n                switch (matches[1]) {\n                  case \"realm\":\n                    realm = matches[2];\n                    break;\n\n                  case \"nonce\":\n                    nonce = matches[2];\n                    break;\n\n                  case \"qop\":\n                    qop = matches[2];\n                    break;\n\n                  case \"host\":\n                    host = matches[2];\n                    break;\n                }\n              }\n\n              var digest_uri = connection.servtype + \"/\" + connection.domain;\n\n              if (host !== null) {\n                digest_uri = digest_uri + \"/\" + host;\n              }\n\n              var cred = utils.utf16to8(connection.authcid + \":\" + realm + \":\" + this._connection.pass);\n              var A1 = MD5.hash(cred) + \":\" + nonce + \":\" + cnonce;\n              var A2 = 'AUTHENTICATE:' + digest_uri;\n              var responseText = \"\";\n              responseText += 'charset=utf-8,';\n              responseText += 'username=' + this._quote(utils.utf16to8(connection.authcid)) + ',';\n              responseText += 'realm=' + this._quote(realm) + ',';\n              responseText += 'nonce=' + this._quote(nonce) + ',';\n              responseText += 'nc=00000001,';\n              responseText += 'cnonce=' + this._quote(cnonce) + ',';\n              responseText += 'digest-uri=' + this._quote(digest_uri) + ',';\n              responseText += 'response=' + MD5.hexdigest(MD5.hexdigest(A1) + \":\" + nonce + \":00000001:\" + cnonce + \":auth:\" + MD5.hexdigest(A2)) + \",\";\n              responseText += 'qop=auth';\n\n              this.onChallenge = function () {\n                return \"\";\n              };\n\n              return responseText;\n            };\n            /** PrivateConstructor: SASLOAuthBearer\n             *  SASL OAuth Bearer authentication.\n             */\n\n\n            Strophe.SASLOAuthBearer = function () {};\n\n            Strophe.SASLOAuthBearer.prototype = new Strophe.SASLMechanism(\"OAUTHBEARER\", true, 40);\n\n            Strophe.SASLOAuthBearer.prototype.test = function (connection) {\n              return connection.pass !== null;\n            };\n\n            Strophe.SASLOAuthBearer.prototype.onChallenge = function (connection) {\n              var auth_str = 'n,';\n\n              if (connection.authcid !== null) {\n                auth_str = auth_str + 'a=' + connection.authzid;\n              }\n\n              auth_str = auth_str + ',';\n              auth_str = auth_str + \"\\x01\";\n              auth_str = auth_str + 'auth=Bearer ';\n              auth_str = auth_str + connection.pass;\n              auth_str = auth_str + \"\\x01\";\n              auth_str = auth_str + \"\\x01\";\n              return utils.utf16to8(auth_str);\n            };\n            /** PrivateConstructor: SASLExternal\n             *  SASL EXTERNAL authentication.\n             *\n             *  The EXTERNAL mechanism allows a client to request the server to use\n             *  credentials established by means external to the mechanism to\n             *  authenticate the client. The external means may be, for instance,\n             *  TLS services.\n             */\n\n\n            Strophe.SASLExternal = function () {};\n\n            Strophe.SASLExternal.prototype = new Strophe.SASLMechanism(\"EXTERNAL\", true, 10);\n\n            Strophe.SASLExternal.prototype.onChallenge = function (connection) {\n              /** According to XEP-178, an authzid SHOULD NOT be presented when the\n               * authcid contained or implied in the client certificate is the JID (i.e.\n               * authzid) with which the user wants to log in as.\n               *\n               * To NOT send the authzid, the user should therefore set the authcid equal\n               * to the JID when instantiating a new Strophe.Connection object.\n               */\n              return connection.authcid === connection.authzid ? '' : connection.authzid;\n            };\n            /** PrivateConstructor: SASLXOAuth2\n             *  SASL X-OAuth2 authentication.\n             */\n\n\n            Strophe.SASLXOAuth2 = function () {};\n\n            Strophe.SASLXOAuth2.prototype = new Strophe.SASLMechanism(\"X-OAUTH2\", true, 30);\n\n            Strophe.SASLXOAuth2.prototype.test = function (connection) {\n              return connection.pass !== null;\n            };\n\n            Strophe.SASLXOAuth2.prototype.onChallenge = function (connection) {\n              var auth_str = \"\\0\";\n\n              if (connection.authcid !== null) {\n                auth_str = auth_str + connection.authzid;\n              }\n\n              auth_str = auth_str + \"\\0\";\n              auth_str = auth_str + connection.pass;\n              return utils.utf16to8(auth_str);\n            };\n            var core = {\n              'Strophe': Strophe,\n              '$build': $build,\n              '$iq': $iq,\n              '$msg': $msg,\n              '$pres': $pres,\n              'SHA1': SHA1,\n              'MD5': MD5,\n              'b64_hmac_sha1': SHA1.b64_hmac_sha1,\n              'b64_sha1': SHA1.b64_sha1,\n              'str_hmac_sha1': SHA1.str_hmac_sha1,\n              'str_sha1': SHA1.str_sha1\n            };\n\n            /*\n                This program is distributed under the terms of the MIT license.\n                Please see the LICENSE file for details.\n\n                Copyright 2006-2008, OGG, LLC\n            */\n            var Strophe$1 = core.Strophe;\n            var $build$1 = core.$build;\n            /** PrivateClass: Strophe.Request\n             *  _Private_ helper class that provides a cross implementation abstraction\n             *  for a BOSH related XMLHttpRequest.\n             *\n             *  The Strophe.Request class is used internally to encapsulate BOSH request\n             *  information.  It is not meant to be used from user's code.\n             */\n\n            /** PrivateConstructor: Strophe.Request\n             *  Create and initialize a new Strophe.Request object.\n             *\n             *  Parameters:\n             *    (XMLElement) elem - The XML data to be sent in the request.\n             *    (Function) func - The function that will be called when the\n             *      XMLHttpRequest readyState changes.\n             *    (Integer) rid - The BOSH rid attribute associated with this request.\n             *    (Integer) sends - The number of times this same request has been sent.\n             */\n\n            Strophe$1.Request = function (elem, func, rid, sends) {\n              this.id = ++Strophe$1._requestId;\n              this.xmlData = elem;\n              this.data = Strophe$1.serialize(elem); // save original function in case we need to make a new request\n              // from this one.\n\n              this.origFunc = func;\n              this.func = func;\n              this.rid = rid;\n              this.date = NaN;\n              this.sends = sends || 0;\n              this.abort = false;\n              this.dead = null;\n\n              this.age = function () {\n                if (!this.date) {\n                  return 0;\n                }\n\n                var now = new Date();\n                return (now - this.date) / 1000;\n              };\n\n              this.timeDead = function () {\n                if (!this.dead) {\n                  return 0;\n                }\n\n                var now = new Date();\n                return (now - this.dead) / 1000;\n              };\n\n              this.xhr = this._newXHR();\n            };\n\n            Strophe$1.Request.prototype = {\n              /** PrivateFunction: getResponse\n               *  Get a response from the underlying XMLHttpRequest.\n               *\n               *  This function attempts to get a response from the request and checks\n               *  for errors.\n               *\n               *  Throws:\n               *    \"parsererror\" - A parser error occured.\n               *    \"bad-format\" - The entity has sent XML that cannot be processed.\n               *\n               *  Returns:\n               *    The DOM element tree of the response.\n               */\n              getResponse: function getResponse() {\n                var node = null;\n\n                if (this.xhr.responseXML && this.xhr.responseXML.documentElement) {\n                  node = this.xhr.responseXML.documentElement;\n\n                  if (node.tagName === \"parsererror\") {\n                    Strophe$1.error(\"invalid response received\");\n                    Strophe$1.error(\"responseText: \" + this.xhr.responseText);\n                    Strophe$1.error(\"responseXML: \" + Strophe$1.serialize(this.xhr.responseXML));\n                    throw new Error(\"parsererror\");\n                  }\n                } else if (this.xhr.responseText) {\n                  // In React Native, we may get responseText but no responseXML.  We can try to parse it manually.\n                  Strophe$1.debug(\"Got responseText but no responseXML; attempting to parse it with DOMParser...\");\n                  node = new DOMParser().parseFromString(this.xhr.responseText, 'application/xml').documentElement;\n\n                  if (!node) {\n                    throw new Error('Parsing produced null node');\n                  } else if (node.querySelector('parsererror')) {\n                    Strophe$1.error(\"invalid response received: \" + node.querySelector('parsererror').textContent);\n                    Strophe$1.error(\"responseText: \" + this.xhr.responseText);\n                    var error = new Error();\n                    error.name = Strophe$1.ErrorCondition.BAD_FORMAT;\n                    throw error;\n                  }\n                }\n\n                return node;\n              },\n\n              /** PrivateFunction: _newXHR\n               *  _Private_ helper function to create XMLHttpRequests.\n               *\n               *  This function creates XMLHttpRequests across all implementations.\n               *\n               *  Returns:\n               *    A new XMLHttpRequest.\n               */\n              _newXHR: function _newXHR() {\n                var xhr = null;\n\n                if (window.XMLHttpRequest) {\n                  xhr = new XMLHttpRequest();\n\n                  if (xhr.overrideMimeType) {\n                    xhr.overrideMimeType(\"text/xml; charset=utf-8\");\n                  }\n                } else if (window.ActiveXObject) {\n                  xhr = new ActiveXObject(\"Microsoft.XMLHTTP\");\n                } // use Function.bind() to prepend ourselves as an argument\n\n\n                xhr.onreadystatechange = this.func.bind(null, this);\n                return xhr;\n              }\n            };\n            /** Class: Strophe.Bosh\n             *  _Private_ helper class that handles BOSH Connections\n             *\n             *  The Strophe.Bosh class is used internally by Strophe.Connection\n             *  to encapsulate BOSH sessions. It is not meant to be used from user's code.\n             */\n\n            /** File: bosh.js\n             *  A JavaScript library to enable BOSH in Strophejs.\n             *\n             *  this library uses Bidirectional-streams Over Synchronous HTTP (BOSH)\n             *  to emulate a persistent, stateful, two-way connection to an XMPP server.\n             *  More information on BOSH can be found in XEP 124.\n             */\n\n            /** PrivateConstructor: Strophe.Bosh\n             *  Create and initialize a Strophe.Bosh object.\n             *\n             *  Parameters:\n             *    (Strophe.Connection) connection - The Strophe.Connection that will use BOSH.\n             *\n             *  Returns:\n             *    A new Strophe.Bosh object.\n             */\n\n            Strophe$1.Bosh = function (connection) {\n              this._conn = connection;\n              /* request id for body tags */\n\n              this.rid = Math.floor(Math.random() * 4294967295);\n              /* The current session ID. */\n\n              this.sid = null; // default BOSH values\n\n              this.hold = 1;\n              this.wait = 60;\n              this.window = 5;\n              this.errors = 0;\n              this.inactivity = null;\n              this.lastResponseHeaders = null;\n              this._requests = [];\n            };\n\n            Strophe$1.Bosh.prototype = {\n              /** Variable: strip\n               *\n               *  BOSH-Connections will have all stanzas wrapped in a <body> tag when\n               *  passed to <Strophe.Connection.xmlInput> or <Strophe.Connection.xmlOutput>.\n               *  To strip this tag, User code can set <Strophe.Bosh.strip> to \"body\":\n               *\n               *  > Strophe.Bosh.prototype.strip = \"body\";\n               *\n               *  This will enable stripping of the body tag in both\n               *  <Strophe.Connection.xmlInput> and <Strophe.Connection.xmlOutput>.\n               */\n              strip: null,\n\n              /** PrivateFunction: _buildBody\n               *  _Private_ helper function to generate the <body/> wrapper for BOSH.\n               *\n               *  Returns:\n               *    A Strophe.Builder with a <body/> element.\n               */\n              _buildBody: function _buildBody() {\n                var bodyWrap = $build$1('body', {\n                  'rid': this.rid++,\n                  'xmlns': Strophe$1.NS.HTTPBIND\n                });\n\n                if (this.sid !== null) {\n                  bodyWrap.attrs({\n                    'sid': this.sid\n                  });\n                }\n\n                if (this._conn.options.keepalive && this._conn._sessionCachingSupported()) {\n                  this._cacheSession();\n                }\n\n                return bodyWrap;\n              },\n\n              /** PrivateFunction: _reset\n               *  Reset the connection.\n               *\n               *  This function is called by the reset function of the Strophe Connection\n               */\n              _reset: function _reset() {\n                this.rid = Math.floor(Math.random() * 4294967295);\n                this.sid = null;\n                this.errors = 0;\n\n                if (this._conn._sessionCachingSupported()) {\n                  window.sessionStorage.removeItem('strophe-bosh-session');\n                }\n\n                this._conn.nextValidRid(this.rid);\n              },\n\n              /** PrivateFunction: _connect\n               *  _Private_ function that initializes the BOSH connection.\n               *\n               *  Creates and sends the Request that initializes the BOSH connection.\n               */\n              _connect: function _connect(wait, hold, route) {\n                this.wait = wait || this.wait;\n                this.hold = hold || this.hold;\n                this.errors = 0;\n\n                var body = this._buildBody().attrs({\n                  \"to\": this._conn.domain,\n                  \"xml:lang\": \"en\",\n                  \"wait\": this.wait,\n                  \"hold\": this.hold,\n                  \"content\": \"text/xml; charset=utf-8\",\n                  \"ver\": \"1.6\",\n                  \"xmpp:version\": \"1.0\",\n                  \"xmlns:xmpp\": Strophe$1.NS.BOSH\n                });\n\n                if (route) {\n                  body.attrs({\n                    'route': route\n                  });\n                }\n\n                var _connect_cb = this._conn._connect_cb;\n\n                this._requests.push(new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, _connect_cb.bind(this._conn)), body.tree().getAttribute(\"rid\")));\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _attach\n               *  Attach to an already created and authenticated BOSH session.\n               *\n               *  This function is provided to allow Strophe to attach to BOSH\n               *  sessions which have been created externally, perhaps by a Web\n               *  application.  This is often used to support auto-login type features\n               *  without putting user credentials into the page.\n               *\n               *  Parameters:\n               *    (String) jid - The full JID that is bound by the session.\n               *    (String) sid - The SID of the BOSH session.\n               *    (String) rid - The current RID of the BOSH session.  This RID\n               *      will be used by the next request.\n               *    (Function) callback The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              _attach: function _attach(jid, sid, rid, callback, wait, hold, wind) {\n                this._conn.jid = jid;\n                this.sid = sid;\n                this.rid = rid;\n                this._conn.connect_callback = callback;\n                this._conn.domain = Strophe$1.getDomainFromJid(this._conn.jid);\n                this._conn.authenticated = true;\n                this._conn.connected = true;\n                this.wait = wait || this.wait;\n                this.hold = hold || this.hold;\n                this.window = wind || this.window;\n\n                this._conn._changeConnectStatus(Strophe$1.Status.ATTACHED, null);\n              },\n\n              /** PrivateFunction: _restore\n               *  Attempt to restore a cached BOSH session\n               *\n               *  Parameters:\n               *    (String) jid - The full JID that is bound by the session.\n               *      This parameter is optional but recommended, specifically in cases\n               *      where prebinded BOSH sessions are used where it's important to know\n               *      that the right session is being restored.\n               *    (Function) callback The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              _restore: function _restore(jid, callback, wait, hold, wind) {\n                var session = JSON.parse(window.sessionStorage.getItem('strophe-bosh-session'));\n\n                if (typeof session !== \"undefined\" && session !== null && session.rid && session.sid && session.jid && (typeof jid === \"undefined\" || jid === null || Strophe$1.getBareJidFromJid(session.jid) === Strophe$1.getBareJidFromJid(jid) || // If authcid is null, then it's an anonymous login, so\n                // we compare only the domains:\n                Strophe$1.getNodeFromJid(jid) === null && Strophe$1.getDomainFromJid(session.jid) === jid)) {\n                  this._conn.restored = true;\n\n                  this._attach(session.jid, session.sid, session.rid, callback, wait, hold, wind);\n                } else {\n                  var error = new Error(\"_restore: no restoreable session.\");\n                  error.name = \"StropheSessionError\";\n                  throw error;\n                }\n              },\n\n              /** PrivateFunction: _cacheSession\n               *  _Private_ handler for the beforeunload event.\n               *\n               *  This handler is used to process the Bosh-part of the initial request.\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               */\n              _cacheSession: function _cacheSession() {\n                if (this._conn.authenticated) {\n                  if (this._conn.jid && this.rid && this.sid) {\n                    window.sessionStorage.setItem('strophe-bosh-session', JSON.stringify({\n                      'jid': this._conn.jid,\n                      'rid': this.rid,\n                      'sid': this.sid\n                    }));\n                  }\n                } else {\n                  window.sessionStorage.removeItem('strophe-bosh-session');\n                }\n              },\n\n              /** PrivateFunction: _connect_cb\n               *  _Private_ handler for initial connection request.\n               *\n               *  This handler is used to process the Bosh-part of the initial request.\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               */\n              _connect_cb: function _connect_cb(bodyWrap) {\n                var typ = bodyWrap.getAttribute(\"type\");\n\n                if (typ !== null && typ === \"terminate\") {\n                  // an error occurred\n                  var cond = bodyWrap.getAttribute(\"condition\");\n                  Strophe$1.error(\"BOSH-Connection failed: \" + cond);\n                  var conflict = bodyWrap.getElementsByTagName(\"conflict\");\n\n                  if (cond !== null) {\n                    if (cond === \"remote-stream-error\" && conflict.length > 0) {\n                      cond = \"conflict\";\n                    }\n\n                    this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, cond);\n                  } else {\n                    this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, \"unknown\");\n                  }\n\n                  this._conn._doDisconnect(cond);\n\n                  return Strophe$1.Status.CONNFAIL;\n                } // check to make sure we don't overwrite these if _connect_cb is\n                // called multiple times in the case of missing stream:features\n\n\n                if (!this.sid) {\n                  this.sid = bodyWrap.getAttribute(\"sid\");\n                }\n\n                var wind = bodyWrap.getAttribute('requests');\n\n                if (wind) {\n                  this.window = parseInt(wind, 10);\n                }\n\n                var hold = bodyWrap.getAttribute('hold');\n\n                if (hold) {\n                  this.hold = parseInt(hold, 10);\n                }\n\n                var wait = bodyWrap.getAttribute('wait');\n\n                if (wait) {\n                  this.wait = parseInt(wait, 10);\n                }\n\n                var inactivity = bodyWrap.getAttribute('inactivity');\n\n                if (inactivity) {\n                  this.inactivity = parseInt(inactivity, 10);\n                }\n              },\n\n              /** PrivateFunction: _disconnect\n               *  _Private_ part of Connection.disconnect for Bosh\n               *\n               *  Parameters:\n               *    (Request) pres - This stanza will be sent before disconnecting.\n               */\n              _disconnect: function _disconnect(pres) {\n                this._sendTerminate(pres);\n              },\n\n              /** PrivateFunction: _doDisconnect\n               *  _Private_ function to disconnect.\n               *\n               *  Resets the SID and RID.\n               */\n              _doDisconnect: function _doDisconnect() {\n                this.sid = null;\n                this.rid = Math.floor(Math.random() * 4294967295);\n\n                if (this._conn._sessionCachingSupported()) {\n                  window.sessionStorage.removeItem('strophe-bosh-session');\n                }\n\n                this._conn.nextValidRid(this.rid);\n              },\n\n              /** PrivateFunction: _emptyQueue\n               * _Private_ function to check if the Request queue is empty.\n               *\n               *  Returns:\n               *    True, if there are no Requests queued, False otherwise.\n               */\n              _emptyQueue: function _emptyQueue() {\n                return this._requests.length === 0;\n              },\n\n              /** PrivateFunction: _callProtocolErrorHandlers\n               *  _Private_ function to call error handlers registered for HTTP errors.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The request that is changing readyState.\n               */\n              _callProtocolErrorHandlers: function _callProtocolErrorHandlers(req) {\n                var reqStatus = this._getRequestStatus(req);\n\n                var err_callback = this._conn.protocolErrorHandlers.HTTP[reqStatus];\n\n                if (err_callback) {\n                  err_callback.call(this, reqStatus);\n                }\n              },\n\n              /** PrivateFunction: _hitError\n               *  _Private_ function to handle the error count.\n               *\n               *  Requests are resent automatically until their error count reaches\n               *  5.  Each time an error is encountered, this function is called to\n               *  increment the count and disconnect if the count is too high.\n               *\n               *  Parameters:\n               *    (Integer) reqStatus - The request status.\n               */\n              _hitError: function _hitError(reqStatus) {\n                this.errors++;\n                Strophe$1.warn(\"request errored, status: \" + reqStatus + \", number of errors: \" + this.errors);\n\n                if (this.errors > 4) {\n                  this._conn._onDisconnectTimeout();\n                }\n              },\n\n              /** PrivateFunction: _no_auth_received\n               *\n               * Called on stream start/restart when no stream:features\n               * has been received and sends a blank poll request.\n               */\n              _no_auth_received: function _no_auth_received(callback) {\n                Strophe$1.warn(\"Server did not yet offer a supported authentication \" + \"mechanism. Sending a blank poll request.\");\n\n                if (callback) {\n                  callback = callback.bind(this._conn);\n                } else {\n                  callback = this._conn._connect_cb.bind(this._conn);\n                }\n\n                var body = this._buildBody();\n\n                this._requests.push(new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, callback), body.tree().getAttribute(\"rid\")));\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _onDisconnectTimeout\n               *  _Private_ timeout handler for handling non-graceful disconnection.\n               *\n               *  Cancels all remaining Requests and clears the queue.\n               */\n              _onDisconnectTimeout: function _onDisconnectTimeout() {\n                this._abortAllRequests();\n              },\n\n              /** PrivateFunction: _abortAllRequests\n               *  _Private_ helper function that makes sure all pending requests are aborted.\n               */\n              _abortAllRequests: function _abortAllRequests() {\n                while (this._requests.length > 0) {\n                  var req = this._requests.pop();\n\n                  req.abort = true;\n                  req.xhr.abort();\n\n                  req.xhr.onreadystatechange = function () {};\n                }\n              },\n\n              /** PrivateFunction: _onIdle\n               *  _Private_ handler called by Strophe.Connection._onIdle\n               *\n               *  Sends all queued Requests or polls with empty Request if there are none.\n               */\n              _onIdle: function _onIdle() {\n                var data = this._conn._data; // if no requests are in progress, poll\n\n                if (this._conn.authenticated && this._requests.length === 0 && data.length === 0 && !this._conn.disconnecting) {\n                  Strophe$1.debug(\"no requests during idle cycle, sending blank request\");\n                  data.push(null);\n                }\n\n                if (this._conn.paused) {\n                  return;\n                }\n\n                if (this._requests.length < 2 && data.length > 0) {\n                  var body = this._buildBody();\n\n                  for (var i = 0; i < data.length; i++) {\n                    if (data[i] !== null) {\n                      if (data[i] === \"restart\") {\n                        body.attrs({\n                          \"to\": this._conn.domain,\n                          \"xml:lang\": \"en\",\n                          \"xmpp:restart\": \"true\",\n                          \"xmlns:xmpp\": Strophe$1.NS.BOSH\n                        });\n                      } else {\n                        body.cnode(data[i]).up();\n                      }\n                    }\n                  }\n\n                  delete this._conn._data;\n                  this._conn._data = [];\n\n                  this._requests.push(new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, this._conn._dataRecv.bind(this._conn)), body.tree().getAttribute(\"rid\")));\n\n                  this._throttledRequestHandler();\n                }\n\n                if (this._requests.length > 0) {\n                  var time_elapsed = this._requests[0].age();\n\n                  if (this._requests[0].dead !== null) {\n                    if (this._requests[0].timeDead() > Math.floor(Strophe$1.SECONDARY_TIMEOUT * this.wait)) {\n                      this._throttledRequestHandler();\n                    }\n                  }\n\n                  if (time_elapsed > Math.floor(Strophe$1.TIMEOUT * this.wait)) {\n                    Strophe$1.warn(\"Request \" + this._requests[0].id + \" timed out, over \" + Math.floor(Strophe$1.TIMEOUT * this.wait) + \" seconds since last activity\");\n\n                    this._throttledRequestHandler();\n                  }\n                }\n              },\n\n              /** PrivateFunction: _getRequestStatus\n               *\n               *  Returns the HTTP status code from a Strophe.Request\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The Strophe.Request instance.\n               *    (Integer) def - The default value that should be returned if no\n               *          status value was found.\n               */\n              _getRequestStatus: function _getRequestStatus(req, def) {\n                var reqStatus;\n\n                if (req.xhr.readyState === 4) {\n                  try {\n                    reqStatus = req.xhr.status;\n                  } catch (e) {\n                    // ignore errors from undefined status attribute. Works\n                    // around a browser bug\n                    Strophe$1.error(\"Caught an error while retrieving a request's status, \" + \"reqStatus: \" + reqStatus);\n                  }\n                }\n\n                if (typeof reqStatus === \"undefined\") {\n                  reqStatus = typeof def === 'number' ? def : 0;\n                }\n\n                return reqStatus;\n              },\n\n              /** PrivateFunction: _onRequestStateChange\n               *  _Private_ handler for Strophe.Request state changes.\n               *\n               *  This function is called when the XMLHttpRequest readyState changes.\n               *  It contains a lot of error handling logic for the many ways that\n               *  requests can fail, and calls the request callback when requests\n               *  succeed.\n               *\n               *  Parameters:\n               *    (Function) func - The handler for the request.\n               *    (Strophe.Request) req - The request that is changing readyState.\n               */\n              _onRequestStateChange: function _onRequestStateChange(func, req) {\n                Strophe$1.debug(\"request id \" + req.id + \".\" + req.sends + \" state changed to \" + req.xhr.readyState);\n\n                if (req.abort) {\n                  req.abort = false;\n                  return;\n                }\n\n                if (req.xhr.readyState !== 4) {\n                  // The request is not yet complete\n                  return;\n                }\n\n                var reqStatus = this._getRequestStatus(req);\n\n                this.lastResponseHeaders = req.xhr.getAllResponseHeaders();\n\n                if (this.disconnecting && reqStatus >= 400) {\n                  this._hitError(reqStatus);\n\n                  this._callProtocolErrorHandlers(req);\n\n                  return;\n                }\n\n                var valid_request = reqStatus > 0 && reqStatus < 500;\n                var too_many_retries = req.sends > this._conn.maxRetries;\n\n                if (valid_request || too_many_retries) {\n                  // remove from internal queue\n                  this._removeRequest(req);\n\n                  Strophe$1.debug(\"request id \" + req.id + \" should now be removed\");\n                }\n\n                if (reqStatus === 200) {\n                  // request succeeded\n                  var reqIs0 = this._requests[0] === req;\n                  var reqIs1 = this._requests[1] === req; // if request 1 finished, or request 0 finished and request\n                  // 1 is over Strophe.SECONDARY_TIMEOUT seconds old, we need to\n                  // restart the other - both will be in the first spot, as the\n                  // completed request has been removed from the queue already\n\n                  if (reqIs1 || reqIs0 && this._requests.length > 0 && this._requests[0].age() > Math.floor(Strophe$1.SECONDARY_TIMEOUT * this.wait)) {\n                    this._restartRequest(0);\n                  }\n\n                  this._conn.nextValidRid(Number(req.rid) + 1);\n\n                  Strophe$1.debug(\"request id \" + req.id + \".\" + req.sends + \" got 200\");\n                  func(req); // call handler\n\n                  this.errors = 0;\n                } else if (reqStatus === 0 || reqStatus >= 400 && reqStatus < 600 || reqStatus >= 12000) {\n                  // request failed\n                  Strophe$1.error(\"request id \" + req.id + \".\" + req.sends + \" error \" + reqStatus + \" happened\");\n\n                  this._hitError(reqStatus);\n\n                  this._callProtocolErrorHandlers(req);\n\n                  if (reqStatus >= 400 && reqStatus < 500) {\n                    this._conn._changeConnectStatus(Strophe$1.Status.DISCONNECTING, null);\n\n                    this._conn._doDisconnect();\n                  }\n                } else {\n                  Strophe$1.error(\"request id \" + req.id + \".\" + req.sends + \" error \" + reqStatus + \" happened\");\n                }\n\n                if (!valid_request && !too_many_retries) {\n                  this._throttledRequestHandler();\n                } else if (too_many_retries && !this._conn.connected) {\n                  this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, \"giving-up\");\n                }\n              },\n\n              /** PrivateFunction: _processRequest\n               *  _Private_ function to process a request in the queue.\n               *\n               *  This function takes requests off the queue and sends them and\n               *  restarts dead requests.\n               *\n               *  Parameters:\n               *    (Integer) i - The index of the request in the queue.\n               */\n              _processRequest: function _processRequest(i) {\n                var _this = this;\n\n                var req = this._requests[i];\n\n                var reqStatus = this._getRequestStatus(req, -1); // make sure we limit the number of retries\n\n\n                if (req.sends > this._conn.maxRetries) {\n                  this._conn._onDisconnectTimeout();\n\n                  return;\n                }\n\n                var time_elapsed = req.age();\n                var primary_timeout = !isNaN(time_elapsed) && time_elapsed > Math.floor(Strophe$1.TIMEOUT * this.wait);\n                var secondary_timeout = req.dead !== null && req.timeDead() > Math.floor(Strophe$1.SECONDARY_TIMEOUT * this.wait);\n                var server_error = req.xhr.readyState === 4 && (reqStatus < 1 || reqStatus >= 500);\n\n                if (primary_timeout || secondary_timeout || server_error) {\n                  if (secondary_timeout) {\n                    Strophe$1.error(\"Request \".concat(this._requests[i].id, \" timed out (secondary), restarting\"));\n                  }\n\n                  req.abort = true;\n                  req.xhr.abort(); // setting to null fails on IE6, so set to empty function\n\n                  req.xhr.onreadystatechange = function () {};\n\n                  this._requests[i] = new Strophe$1.Request(req.xmlData, req.origFunc, req.rid, req.sends);\n                  req = this._requests[i];\n                }\n\n                if (req.xhr.readyState === 0) {\n                  Strophe$1.debug(\"request id \" + req.id + \".\" + req.sends + \" posting\");\n\n                  try {\n                    var content_type = this._conn.options.contentType || \"text/xml; charset=utf-8\";\n                    req.xhr.open(\"POST\", this._conn.service, this._conn.options.sync ? false : true);\n\n                    if (typeof req.xhr.setRequestHeader !== 'undefined') {\n                      // IE9 doesn't have setRequestHeader\n                      req.xhr.setRequestHeader(\"Content-Type\", content_type);\n                    }\n\n                    if (this._conn.options.withCredentials) {\n                      req.xhr.withCredentials = true;\n                    }\n                  } catch (e2) {\n                    Strophe$1.error(\"XHR open failed: \" + e2.toString());\n\n                    if (!this._conn.connected) {\n                      this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, \"bad-service\");\n                    }\n\n                    this._conn.disconnect();\n\n                    return;\n                  } // Fires the XHR request -- may be invoked immediately\n                  // or on a gradually expanding retry window for reconnects\n\n\n                  var sendFunc = function sendFunc() {\n                    req.date = new Date();\n\n                    if (_this._conn.options.customHeaders) {\n                      var headers = _this._conn.options.customHeaders;\n\n                      for (var header in headers) {\n                        if (Object.prototype.hasOwnProperty.call(headers, header)) {\n                          req.xhr.setRequestHeader(header, headers[header]);\n                        }\n                      }\n                    }\n\n                    req.xhr.send(req.data);\n                  }; // Implement progressive backoff for reconnects --\n                  // First retry (send === 1) should also be instantaneous\n\n\n                  if (req.sends > 1) {\n                    // Using a cube of the retry number creates a nicely\n                    // expanding retry window\n                    var backoff = Math.min(Math.floor(Strophe$1.TIMEOUT * this.wait), Math.pow(req.sends, 3)) * 1000;\n                    setTimeout(function () {\n                      // XXX: setTimeout should be called only with function expressions (23974bc1)\n                      sendFunc();\n                    }, backoff);\n                  } else {\n                    sendFunc();\n                  }\n\n                  req.sends++;\n\n                  if (this._conn.xmlOutput !== Strophe$1.Connection.prototype.xmlOutput) {\n                    if (req.xmlData.nodeName === this.strip && req.xmlData.childNodes.length) {\n                      this._conn.xmlOutput(req.xmlData.childNodes[0]);\n                    } else {\n                      this._conn.xmlOutput(req.xmlData);\n                    }\n                  }\n\n                  if (this._conn.rawOutput !== Strophe$1.Connection.prototype.rawOutput) {\n                    this._conn.rawOutput(req.data);\n                  }\n                } else {\n                  Strophe$1.debug(\"_processRequest: \" + (i === 0 ? \"first\" : \"second\") + \" request has readyState of \" + req.xhr.readyState);\n                }\n              },\n\n              /** PrivateFunction: _removeRequest\n               *  _Private_ function to remove a request from the queue.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The request to remove.\n               */\n              _removeRequest: function _removeRequest(req) {\n                Strophe$1.debug(\"removing request\");\n\n                for (var i = this._requests.length - 1; i >= 0; i--) {\n                  if (req === this._requests[i]) {\n                    this._requests.splice(i, 1);\n                  }\n                } // IE6 fails on setting to null, so set to empty function\n\n\n                req.xhr.onreadystatechange = function () {};\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _restartRequest\n               *  _Private_ function to restart a request that is presumed dead.\n               *\n               *  Parameters:\n               *    (Integer) i - The index of the request in the queue.\n               */\n              _restartRequest: function _restartRequest(i) {\n                var req = this._requests[i];\n\n                if (req.dead === null) {\n                  req.dead = new Date();\n                }\n\n                this._processRequest(i);\n              },\n\n              /** PrivateFunction: _reqToData\n               * _Private_ function to get a stanza out of a request.\n               *\n               * Tries to extract a stanza out of a Request Object.\n               * When this fails the current connection will be disconnected.\n               *\n               *  Parameters:\n               *    (Object) req - The Request.\n               *\n               *  Returns:\n               *    The stanza that was passed.\n               */\n              _reqToData: function _reqToData(req) {\n                try {\n                  return req.getResponse();\n                } catch (e) {\n                  if (e.message !== \"parsererror\") {\n                    throw e;\n                  }\n\n                  this._conn.disconnect(\"strophe-parsererror\");\n                }\n              },\n\n              /** PrivateFunction: _sendTerminate\n               *  _Private_ function to send initial disconnect sequence.\n               *\n               *  This is the first step in a graceful disconnect.  It sends\n               *  the BOSH server a terminate body and includes an unavailable\n               *  presence if authentication has completed.\n               */\n              _sendTerminate: function _sendTerminate(pres) {\n                Strophe$1.debug(\"_sendTerminate was called\");\n\n                var body = this._buildBody().attrs({\n                  type: \"terminate\"\n                });\n\n                if (pres) {\n                  body.cnode(pres.tree());\n                }\n\n                var req = new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, this._conn._dataRecv.bind(this._conn)), body.tree().getAttribute(\"rid\"));\n\n                this._requests.push(req);\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _send\n               *  _Private_ part of the Connection.send function for BOSH\n               *\n               * Just triggers the RequestHandler to send the messages that are in the queue\n               */\n              _send: function _send() {\n                var _this2 = this;\n\n                clearTimeout(this._conn._idleTimeout);\n\n                this._throttledRequestHandler();\n\n                this._conn._idleTimeout = setTimeout(function () {\n                  return _this2._conn._onIdle();\n                }, 100);\n              },\n\n              /** PrivateFunction: _sendRestart\n               *\n               *  Send an xmpp:restart stanza.\n               */\n              _sendRestart: function _sendRestart() {\n                this._throttledRequestHandler();\n\n                clearTimeout(this._conn._idleTimeout);\n              },\n\n              /** PrivateFunction: _throttledRequestHandler\n               *  _Private_ function to throttle requests to the connection window.\n               *\n               *  This function makes sure we don't send requests so fast that the\n               *  request ids overflow the connection window in the case that one\n               *  request died.\n               */\n              _throttledRequestHandler: function _throttledRequestHandler() {\n                if (!this._requests) {\n                  Strophe$1.debug(\"_throttledRequestHandler called with \" + \"undefined requests\");\n                } else {\n                  Strophe$1.debug(\"_throttledRequestHandler called with \" + this._requests.length + \" requests\");\n                }\n\n                if (!this._requests || this._requests.length === 0) {\n                  return;\n                }\n\n                if (this._requests.length > 0) {\n                  this._processRequest(0);\n                }\n\n                if (this._requests.length > 1 && Math.abs(this._requests[0].rid - this._requests[1].rid) < this.window) {\n                  this._processRequest(1);\n                }\n              }\n            };\n\n            /*\n                This program is distributed under the terms of the MIT license.\n                Please see the LICENSE file for details.\n\n                Copyright 2006-2008, OGG, LLC\n            */\n            var Strophe$2 = core.Strophe;\n            var $build$2 = core.$build;\n            /** Class: Strophe.WebSocket\n             *  _Private_ helper class that handles WebSocket Connections\n             *\n             *  The Strophe.WebSocket class is used internally by Strophe.Connection\n             *  to encapsulate WebSocket sessions. It is not meant to be used from user's code.\n             */\n\n            /** File: websocket.js\n             *  A JavaScript library to enable XMPP over Websocket in Strophejs.\n             *\n             *  This file implements XMPP over WebSockets for Strophejs.\n             *  If a Connection is established with a Websocket url (ws://...)\n             *  Strophe will use WebSockets.\n             *  For more information on XMPP-over-WebSocket see RFC 7395:\n             *  http://tools.ietf.org/html/rfc7395\n             *\n             *  WebSocket support implemented by Andreas Guth (andreas.guth@rwth-aachen.de)\n             */\n\n            /** PrivateConstructor: Strophe.Websocket\n             *  Create and initialize a Strophe.WebSocket object.\n             *  Currently only sets the connection Object.\n             *\n             *  Parameters:\n             *    (Strophe.Connection) connection - The Strophe.Connection that will use WebSockets.\n             *\n             *  Returns:\n             *    A new Strophe.WebSocket object.\n             */\n\n            Strophe$2.Websocket = function (connection) {\n              this._conn = connection;\n              this.strip = \"wrapper\";\n              var service = connection.service;\n\n              if (service.indexOf(\"ws:\") !== 0 && service.indexOf(\"wss:\") !== 0) {\n                // If the service is not an absolute URL, assume it is a path and put the absolute\n                // URL together from options, current URL and the path.\n                var new_service = \"\";\n\n                if (connection.options.protocol === \"ws\" && window.location.protocol !== \"https:\") {\n                  new_service += \"ws\";\n                } else {\n                  new_service += \"wss\";\n                }\n\n                new_service += \"://\" + window.location.host;\n\n                if (service.indexOf(\"/\") !== 0) {\n                  new_service += window.location.pathname + service;\n                } else {\n                  new_service += service;\n                }\n\n                connection.service = new_service;\n              }\n            };\n\n            Strophe$2.Websocket.prototype = {\n              /** PrivateFunction: _buildStream\n               *  _Private_ helper function to generate the <stream> start tag for WebSockets\n               *\n               *  Returns:\n               *    A Strophe.Builder with a <stream> element.\n               */\n              _buildStream: function _buildStream() {\n                return $build$2(\"open\", {\n                  \"xmlns\": Strophe$2.NS.FRAMING,\n                  \"to\": this._conn.domain,\n                  \"version\": '1.0'\n                });\n              },\n\n              /** PrivateFunction: _check_streamerror\n               * _Private_ checks a message for stream:error\n               *\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               *    connectstatus - The ConnectStatus that will be set on error.\n               *  Returns:\n               *     true if there was a streamerror, false otherwise.\n               */\n              _check_streamerror: function _check_streamerror(bodyWrap, connectstatus) {\n                var errors;\n\n                if (bodyWrap.getElementsByTagNameNS) {\n                  errors = bodyWrap.getElementsByTagNameNS(Strophe$2.NS.STREAM, \"error\");\n                } else {\n                  errors = bodyWrap.getElementsByTagName(\"stream:error\");\n                }\n\n                if (errors.length === 0) {\n                  return false;\n                }\n\n                var error = errors[0];\n                var condition = \"\";\n                var text = \"\";\n                var ns = \"urn:ietf:params:xml:ns:xmpp-streams\";\n\n                for (var i = 0; i < error.childNodes.length; i++) {\n                  var e = error.childNodes[i];\n\n                  if (e.getAttribute(\"xmlns\") !== ns) {\n                    break;\n                  }\n\n                  if (e.nodeName === \"text\") {\n                    text = e.textContent;\n                  } else {\n                    condition = e.nodeName;\n                  }\n                }\n\n                var errorString = \"WebSocket stream error: \";\n\n                if (condition) {\n                  errorString += condition;\n                } else {\n                  errorString += \"unknown\";\n                }\n\n                if (text) {\n                  errorString += \" - \" + text;\n                }\n\n                Strophe$2.error(errorString); // close the connection on stream_error\n\n                this._conn._changeConnectStatus(connectstatus, condition);\n\n                this._conn._doDisconnect();\n\n                return true;\n              },\n\n              /** PrivateFunction: _reset\n               *  Reset the connection.\n               *\n               *  This function is called by the reset function of the Strophe Connection.\n               *  Is not needed by WebSockets.\n               */\n              _reset: function _reset() {\n                return;\n              },\n\n              /** PrivateFunction: _connect\n               *  _Private_ function called by Strophe.Connection.connect\n               *\n               *  Creates a WebSocket for a connection and assigns Callbacks to it.\n               *  Does nothing if there already is a WebSocket.\n               */\n              _connect: function _connect() {\n                // Ensure that there is no open WebSocket from a previous Connection.\n                this._closeSocket(); // Create the new WobSocket\n\n\n                this.socket = new WebSocket(this._conn.service, \"xmpp\");\n                this.socket.onopen = this._onOpen.bind(this);\n                this.socket.onerror = this._onError.bind(this);\n                this.socket.onclose = this._onClose.bind(this);\n                this.socket.onmessage = this._connect_cb_wrapper.bind(this);\n              },\n\n              /** PrivateFunction: _connect_cb\n               *  _Private_ function called by Strophe.Connection._connect_cb\n               *\n               * checks for stream:error\n               *\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               */\n              _connect_cb: function _connect_cb(bodyWrap) {\n                var error = this._check_streamerror(bodyWrap, Strophe$2.Status.CONNFAIL);\n\n                if (error) {\n                  return Strophe$2.Status.CONNFAIL;\n                }\n              },\n\n              /** PrivateFunction: _handleStreamStart\n               * _Private_ function that checks the opening <open /> tag for errors.\n               *\n               * Disconnects if there is an error and returns false, true otherwise.\n               *\n               *  Parameters:\n               *    (Node) message - Stanza containing the <open /> tag.\n               */\n              _handleStreamStart: function _handleStreamStart(message) {\n                var error = false; // Check for errors in the <open /> tag\n\n                var ns = message.getAttribute(\"xmlns\");\n\n                if (typeof ns !== \"string\") {\n                  error = \"Missing xmlns in <open />\";\n                } else if (ns !== Strophe$2.NS.FRAMING) {\n                  error = \"Wrong xmlns in <open />: \" + ns;\n                }\n\n                var ver = message.getAttribute(\"version\");\n\n                if (typeof ver !== \"string\") {\n                  error = \"Missing version in <open />\";\n                } else if (ver !== \"1.0\") {\n                  error = \"Wrong version in <open />: \" + ver;\n                }\n\n                if (error) {\n                  this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, error);\n\n                  this._conn._doDisconnect();\n\n                  return false;\n                }\n\n                return true;\n              },\n\n              /** PrivateFunction: _connect_cb_wrapper\n               * _Private_ function that handles the first connection messages.\n               *\n               * On receiving an opening stream tag this callback replaces itself with the real\n               * message handler. On receiving a stream error the connection is terminated.\n               */\n              _connect_cb_wrapper: function _connect_cb_wrapper(message) {\n                if (message.data.indexOf(\"<open \") === 0 || message.data.indexOf(\"<?xml\") === 0) {\n                  // Strip the XML Declaration, if there is one\n                  var data = message.data.replace(/^(<\\?.*?\\?>\\s*)*/, \"\");\n                  if (data === '') return;\n                  var streamStart = new DOMParser().parseFromString(data, \"text/xml\").documentElement;\n\n                  this._conn.xmlInput(streamStart);\n\n                  this._conn.rawInput(message.data); //_handleStreamSteart will check for XML errors and disconnect on error\n\n\n                  if (this._handleStreamStart(streamStart)) {\n                    //_connect_cb will check for stream:error and disconnect on error\n                    this._connect_cb(streamStart);\n                  }\n                } else if (message.data.indexOf(\"<close \") === 0) {\n                  // <close xmlns=\"urn:ietf:params:xml:ns:xmpp-framing />\n                  // Parse the raw string to an XML element\n                  var parsedMessage = new DOMParser().parseFromString(message.data, \"text/xml\").documentElement; // Report this input to the raw and xml handlers\n\n                  this._conn.xmlInput(parsedMessage);\n\n                  this._conn.rawInput(message.data);\n\n                  var see_uri = parsedMessage.getAttribute(\"see-other-uri\");\n\n                  if (see_uri) {\n                    var service = this._conn.service; // Valid scenarios: WSS->WSS, WS->ANY\n\n                    var isSecureRedirect = service.indexOf(\"wss:\") >= 0 && see_uri.indexOf(\"wss:\") >= 0 || service.indexOf(\"ws:\") >= 0;\n\n                    if (isSecureRedirect) {\n                      this._conn._changeConnectStatus(Strophe$2.Status.REDIRECT, \"Received see-other-uri, resetting connection\");\n\n                      this._conn.reset();\n\n                      this._conn.service = see_uri;\n\n                      this._connect();\n                    }\n                  } else {\n                    this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, \"Received closing stream\");\n\n                    this._conn._doDisconnect();\n                  }\n                } else {\n                  var string = this._streamWrap(message.data);\n\n                  var elem = new DOMParser().parseFromString(string, \"text/xml\").documentElement;\n                  this.socket.onmessage = this._onMessage.bind(this);\n\n                  this._conn._connect_cb(elem, null, message.data);\n                }\n              },\n\n              /** PrivateFunction: _disconnect\n               *  _Private_ function called by Strophe.Connection.disconnect\n               *\n               *  Disconnects and sends a last stanza if one is given\n               *\n               *  Parameters:\n               *    (Request) pres - This stanza will be sent before disconnecting.\n               */\n              _disconnect: function _disconnect(pres) {\n                if (this.socket && this.socket.readyState !== WebSocket.CLOSED) {\n                  if (pres) {\n                    this._conn.send(pres);\n                  }\n\n                  var close = $build$2(\"close\", {\n                    \"xmlns\": Strophe$2.NS.FRAMING\n                  });\n\n                  this._conn.xmlOutput(close.tree());\n\n                  var closeString = Strophe$2.serialize(close);\n\n                  this._conn.rawOutput(closeString);\n\n                  try {\n                    this.socket.send(closeString);\n                  } catch (e) {\n                    Strophe$2.warn(\"Couldn't send <close /> tag.\");\n                  }\n                }\n\n                this._conn._doDisconnect();\n              },\n\n              /** PrivateFunction: _doDisconnect\n               *  _Private_ function to disconnect.\n               *\n               *  Just closes the Socket for WebSockets\n               */\n              _doDisconnect: function _doDisconnect() {\n                Strophe$2.debug(\"WebSockets _doDisconnect was called\");\n\n                this._closeSocket();\n              },\n\n              /** PrivateFunction _streamWrap\n               *  _Private_ helper function to wrap a stanza in a <stream> tag.\n               *  This is used so Strophe can process stanzas from WebSockets like BOSH\n               */\n              _streamWrap: function _streamWrap(stanza) {\n                return \"<wrapper>\" + stanza + '</wrapper>';\n              },\n\n              /** PrivateFunction: _closeSocket\n               *  _Private_ function to close the WebSocket.\n               *\n               *  Closes the socket if it is still open and deletes it\n               */\n              _closeSocket: function _closeSocket() {\n                if (this.socket) {\n                  try {\n                    this.socket.onclose = null;\n                    this.socket.onerror = null;\n                    this.socket.onmessage = null;\n                    this.socket.close();\n                  } catch (e) {\n                    Strophe$2.debug(e.message);\n                  }\n                }\n\n                this.socket = null;\n              },\n\n              /** PrivateFunction: _emptyQueue\n               * _Private_ function to check if the message queue is empty.\n               *\n               *  Returns:\n               *    True, because WebSocket messages are send immediately after queueing.\n               */\n              _emptyQueue: function _emptyQueue() {\n                return true;\n              },\n\n              /** PrivateFunction: _onClose\n               * _Private_ function to handle websockets closing.\n               *\n               * Nothing to do here for WebSockets\n               */\n              _onClose: function _onClose(e) {\n                if (this._conn.connected && !this._conn.disconnecting) {\n                  Strophe$2.error(\"Websocket closed unexpectedly\");\n\n                  this._conn._doDisconnect();\n                } else if (e && e.code === 1006 && !this._conn.connected && this.socket) {\n                  // in case the onError callback was not called (Safari 10 does not\n                  // call onerror when the initial connection fails) we need to\n                  // dispatch a CONNFAIL status update to be consistent with the\n                  // behavior on other browsers.\n                  Strophe$2.error(\"Websocket closed unexcectedly\");\n\n                  this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, \"The WebSocket connection could not be established or was disconnected.\");\n\n                  this._conn._doDisconnect();\n                } else {\n                  Strophe$2.debug(\"Websocket closed\");\n                }\n              },\n\n              /** PrivateFunction: _no_auth_received\n               *\n               * Called on stream start/restart when no stream:features\n               * has been received.\n               */\n              _no_auth_received: function _no_auth_received(callback) {\n                Strophe$2.error(\"Server did not offer a supported authentication mechanism\");\n\n                this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, Strophe$2.ErrorCondition.NO_AUTH_MECH);\n\n                if (callback) {\n                  callback.call(this._conn);\n                }\n\n                this._conn._doDisconnect();\n              },\n\n              /** PrivateFunction: _onDisconnectTimeout\n               *  _Private_ timeout handler for handling non-graceful disconnection.\n               *\n               *  This does nothing for WebSockets\n               */\n              _onDisconnectTimeout: function _onDisconnectTimeout() {},\n\n              /** PrivateFunction: _abortAllRequests\n               *  _Private_ helper function that makes sure all pending requests are aborted.\n               */\n              _abortAllRequests: function _abortAllRequests() {},\n\n              /** PrivateFunction: _onError\n               * _Private_ function to handle websockets errors.\n               *\n               * Parameters:\n               * (Object) error - The websocket error.\n               */\n              _onError: function _onError(error) {\n                Strophe$2.error(\"Websocket error \" + error);\n\n                this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, \"The WebSocket connection could not be established or was disconnected.\");\n\n                this._disconnect();\n              },\n\n              /** PrivateFunction: _onIdle\n               *  _Private_ function called by Strophe.Connection._onIdle\n               *\n               *  sends all queued stanzas\n               */\n              _onIdle: function _onIdle() {\n                var data = this._conn._data;\n\n                if (data.length > 0 && !this._conn.paused) {\n                  for (var i = 0; i < data.length; i++) {\n                    if (data[i] !== null) {\n                      var stanza = void 0;\n\n                      if (data[i] === \"restart\") {\n                        stanza = this._buildStream().tree();\n                      } else {\n                        stanza = data[i];\n                      }\n\n                      var rawStanza = Strophe$2.serialize(stanza);\n\n                      this._conn.xmlOutput(stanza);\n\n                      this._conn.rawOutput(rawStanza);\n\n                      this.socket.send(rawStanza);\n                    }\n                  }\n\n                  this._conn._data = [];\n                }\n              },\n\n              /** PrivateFunction: _onMessage\n               * _Private_ function to handle websockets messages.\n               *\n               * This function parses each of the messages as if they are full documents.\n               * [TODO : We may actually want to use a SAX Push parser].\n               *\n               * Since all XMPP traffic starts with\n               *  <stream:stream version='1.0'\n               *                 xml:lang='en'\n               *                 xmlns='jabber:client'\n               *                 xmlns:stream='http://etherx.jabber.org/streams'\n               *                 id='3697395463'\n               *                 from='SERVER'>\n               *\n               * The first stanza will always fail to be parsed.\n               *\n               * Additionally, the seconds stanza will always be <stream:features> with\n               * the stream NS defined in the previous stanza, so we need to 'force'\n               * the inclusion of the NS in this stanza.\n               *\n               * Parameters:\n               * (string) message - The websocket message.\n               */\n              _onMessage: function _onMessage(message) {\n                var elem; // check for closing stream\n\n                var close = '<close xmlns=\"urn:ietf:params:xml:ns:xmpp-framing\" />';\n\n                if (message.data === close) {\n                  this._conn.rawInput(close);\n\n                  this._conn.xmlInput(message);\n\n                  if (!this._conn.disconnecting) {\n                    this._conn._doDisconnect();\n                  }\n\n                  return;\n                } else if (message.data.search(\"<open \") === 0) {\n                  // This handles stream restarts\n                  elem = new DOMParser().parseFromString(message.data, \"text/xml\").documentElement;\n\n                  if (!this._handleStreamStart(elem)) {\n                    return;\n                  }\n                } else {\n                  var data = this._streamWrap(message.data);\n\n                  elem = new DOMParser().parseFromString(data, \"text/xml\").documentElement;\n                }\n\n                if (this._check_streamerror(elem, Strophe$2.Status.ERROR)) {\n                  return;\n                } //handle unavailable presence stanza before disconnecting\n\n\n                if (this._conn.disconnecting && elem.firstChild.nodeName === \"presence\" && elem.firstChild.getAttribute(\"type\") === \"unavailable\") {\n                  this._conn.xmlInput(elem);\n\n                  this._conn.rawInput(Strophe$2.serialize(elem)); // if we are already disconnecting we will ignore the unavailable stanza and\n                  // wait for the </stream:stream> tag before we close the connection\n\n\n                  return;\n                }\n\n                this._conn._dataRecv(elem, message.data);\n              },\n\n              /** PrivateFunction: _onOpen\n               * _Private_ function to handle websockets connection setup.\n               *\n               * The opening stream tag is sent here.\n               */\n              _onOpen: function _onOpen() {\n                Strophe$2.debug(\"Websocket open\");\n\n                var start = this._buildStream();\n\n                this._conn.xmlOutput(start.tree());\n\n                var startString = Strophe$2.serialize(start);\n\n                this._conn.rawOutput(startString);\n\n                this.socket.send(startString);\n              },\n\n              /** PrivateFunction: _reqToData\n               * _Private_ function to get a stanza out of a request.\n               *\n               * WebSockets don't use requests, so the passed argument is just returned.\n               *\n               *  Parameters:\n               *    (Object) stanza - The stanza.\n               *\n               *  Returns:\n               *    The stanza that was passed.\n               */\n              _reqToData: function _reqToData(stanza) {\n                return stanza;\n              },\n\n              /** PrivateFunction: _send\n               *  _Private_ part of the Connection.send function for WebSocket\n               *\n               * Just flushes the messages that are in the queue\n               */\n              _send: function _send() {\n                this._conn.flush();\n              },\n\n              /** PrivateFunction: _sendRestart\n               *\n               *  Send an xmpp:restart stanza.\n               */\n              _sendRestart: function _sendRestart() {\n                clearTimeout(this._conn._idleTimeout);\n\n                this._conn._onIdle.bind(this._conn)();\n              }\n            };\n\n            global$1.Strophe = core.Strophe;\n            global$1.$build = core.$build;\n            global$1.$iq = core.$iq;\n            global$1.$msg = core.$msg;\n            global$1.$pres = core.$pres;\n\n            return core;\n\n}));\n","import { $iq, Strophe } from 'strophe.js';\n\nStrophe.addConnectionPlugin('disco',\n{\n    _connection: null,\n    _identities : [],\n    _features : [],\n    _items : [],\n    /** Function: init\n     * Plugin init\n     *\n     * Parameters:\n     *   (Strophe.Connection) conn - Strophe connection\n     */\n    init: function(conn)\n    {\n    this._connection = conn;\n        this._identities = [];\n        this._features   = [];\n        this._items      = [];\n        // disco info\n        conn.addHandler(this._onDiscoInfo.bind(this), Strophe.NS.DISCO_INFO, 'iq', 'get', null, null);\n        // disco items\n        conn.addHandler(this._onDiscoItems.bind(this), Strophe.NS.DISCO_ITEMS, 'iq', 'get', null, null);\n    },\n    /** Function: addIdentity\n     * See http://xmpp.org/registrar/disco-categories.html\n     * Parameters:\n     *   (String) category - category of identity (like client, automation, etc ...)\n     *   (String) type - type of identity (like pc, web, bot , etc ...)\n     *   (String) name - name of identity in natural language\n     *   (String) lang - lang of name parameter\n     *\n     * Returns:\n     *   Boolean\n     */\n    addIdentity: function(category, type, name, lang)\n    {\n        for (var i=0; i<this._identities.length; i++)\n        {\n            if (this._identities[i].category == category &&\n                this._identities[i].type == type &&\n                this._identities[i].name == name &&\n                this._identities[i].lang == lang)\n            {\n                return false;\n            }\n        }\n        this._identities.push({category: category, type: type, name: name, lang: lang});\n        return true;\n    },\n    /** Function: addFeature\n     *\n     * Parameters:\n     *   (String) var_name - feature name (like jabber:iq:version)\n     *\n     * Returns:\n     *   boolean\n     */\n    addFeature: function(var_name)\n    {\n        for (var i=0; i<this._features.length; i++)\n        {\n             if (this._features[i] == var_name)\n                 return false;\n        }\n        this._features.push(var_name);\n        return true;\n    },\n    /** Function: removeFeature\n     *\n     * Parameters:\n     *   (String) var_name - feature name (like jabber:iq:version)\n     *\n     * Returns:\n     *   boolean\n     */\n    removeFeature: function(var_name)\n    {\n        for (var i=0; i<this._features.length; i++)\n        {\n             if (this._features[i] === var_name){\n                 this._features.splice(i,1);\n                 return true;\n             }\n        }\n        return false;\n    },\n    /** Function: addItem\n     *\n     * Parameters:\n     *   (String) jid\n     *   (String) name\n     *   (String) node\n     *   (Function) call_back\n     *\n     * Returns:\n     *   boolean\n     */\n    addItem: function(jid, name, node, call_back)\n    {\n        if (node && !call_back)\n            return false;\n        this._items.push({jid: jid, name: name, node: node, call_back: call_back});\n        return true;\n    },\n    /** Function: info\n     * Info query\n     *\n     * Parameters:\n     *   (Function) call_back\n     *   (String) jid\n     *   (String) node\n     */\n    info: function(jid, node, success, error, timeout)\n    {\n        var attrs = {xmlns: Strophe.NS.DISCO_INFO};\n        if (node)\n            attrs.node = node;\n\n        var info = $iq({from:this._connection.jid,\n                         to:jid, type:'get'}).c('query', attrs);\n        this._connection.sendIQ(info, success, error, timeout);\n    },\n    /** Function: items\n     * Items query\n     *\n     * Parameters:\n     *   (Function) call_back\n     *   (String) jid\n     *   (String) node\n     */\n    items: function(jid, node, success, error, timeout)\n    {\n        var attrs = {xmlns: Strophe.NS.DISCO_ITEMS};\n        if (node)\n            attrs.node = node;\n\n        var items = $iq({from:this._connection.jid,\n                         to:jid, type:'get'}).c('query', attrs);\n        this._connection.sendIQ(items, success, error, timeout);\n    },\n\n    /** PrivateFunction: _buildIQResult\n     */\n    _buildIQResult: function(stanza, query_attrs)\n    {\n        var id   =  stanza.getAttribute('id');\n        var from = stanza.getAttribute('from');\n        var iqresult = $iq({type: 'result', id: id});\n\n        if (from !== null) {\n            iqresult.attrs({to: from});\n        }\n\n        return iqresult.c('query', query_attrs);\n    },\n\n    /** PrivateFunction: _onDiscoInfo\n     * Called when receive info request\n     */\n    _onDiscoInfo: function(stanza)\n    {\n        var node = stanza.getElementsByTagName('query')[0].getAttribute('node');\n        var attrs = {xmlns: Strophe.NS.DISCO_INFO};\n        var i;\n        if (node)\n        {\n            attrs.node = node;\n        }\n        var iqresult = this._buildIQResult(stanza, attrs);\n        for (i=0; i<this._identities.length; i++)\n        {\n            attrs = {category: this._identities[i].category,\n                         type    : this._identities[i].type};\n            if (this._identities[i].name)\n                attrs.name = this._identities[i].name;\n            if (this._identities[i].lang)\n                attrs['xml:lang'] = this._identities[i].lang;\n            iqresult.c('identity', attrs).up();\n        }\n        for (i=0; i<this._features.length; i++)\n        {\n            iqresult.c('feature', {'var':this._features[i]}).up();\n        }\n        this._connection.send(iqresult.tree());\n        return true;\n    },\n    /** PrivateFunction: _onDiscoItems\n     * Called when receive items request\n     */\n    _onDiscoItems: function(stanza)\n    {\n        var query_attrs = {xmlns: Strophe.NS.DISCO_ITEMS};\n        var node = stanza.getElementsByTagName('query')[0].getAttribute('node');\n        var items, i;\n        if (node)\n        {\n            query_attrs.node = node;\n            items = [];\n            for (i = 0; i < this._items.length; i++)\n            {\n                if (this._items[i].node == node)\n                {\n                    items = this._items[i].call_back(stanza);\n                    break;\n                }\n            }\n        }\n        else\n        {\n            items = this._items;\n        }\n        var iqresult = this._buildIQResult(stanza, query_attrs);\n        for (i = 0; i < items.length; i++)\n        {\n            var attrs = {jid:  items[i].jid};\n            if (items[i].name)\n                attrs.name = items[i].name;\n            if (items[i].node)\n                attrs.node = items[i].node;\n            iqresult.c('item', attrs).up();\n        }\n        this._connection.send(iqresult.tree());\n        return true;\n    }\n});\n","import { $build, Strophe } from 'strophe.js';\n\n/**\n* StropheJS - Stream Management XEP-0198\n*\n* This plugin implements stream management ACK capabilities of the specs XEP-0198.\n* Note: Resumption is not supported in this current implementation.\n*\n* Reference: http://xmpp.org/extensions/xep-0198.html\n*\n* @class streamManagement\n*/\nStrophe.addConnectionPlugin('streamManagement', {\n\n\t/**\n\t* @property {Boolean} logging: Set to true to enable logging regarding out of sync stanzas.\n\t*/\n\tlogging: false,\n\n\t/**\n\t* @property {Boolean} autoSendCountOnEveryIncomingStanza: Set to true to send an 'a' response after every stanza.\n\t* @default false\n\t* @public\n\t*/\n\tautoSendCountOnEveryIncomingStanza: false,\n\n\t/**\n\t* @property {Integer} requestResponseInterval: Set this value to send a request for counter on very interval\n\t* number of stanzas sent. Set to 0 to disable.\n\t* @default 5\n\t* @public\n\t*/\n\trequestResponseInterval: 5,\n\n\t/**\n\t* @property {Pointer} _c: Strophe connection instance.\n\t* @private\n\t*/\n\t_c: null,\n\n\t/**\n\t* @property {String} _NS XMPP Namespace.\n\t* @private\n\t*/\n\t_NS: 'urn:xmpp:sm:3',\n\n\t/**\n\t* @property {Boolean} _isStreamManagementEnabled\n\t* @private\n\t*/\n\t_isStreamManagementEnabled: false,\n\n\t/**\n\t* @property {Integer} _serverProcesssedStanzasCounter: Keeps count of stanzas confirmed processed by the server.\n\t* The server is the source of truth of this value. It is the 'h' attribute on the latest 'a' element received\n\t* from the server.\n\t* @private\n\t*/\n\t_serverProcesssedStanzasCounter: null,\n\n\t/**\n\t* @property {Integer} _clientProcessedStanzasCounter: Counter of stanzas received by the client from the server.\n\t* Client is the source of truth of this value. It is the 'h' attribute in the 'a' sent from the client to\n\t* the server.\n\t* @private\n\t*/\n\t_clientProcessedStanzasCounter: null,\n\n\t/**\n\t* @property {Integer} _clientSentStanzasCounter\n\t* @private\n\t*/\n\t_clientSentStanzasCounter: null,\n\n\t/**\n\t* Stores a reference to Strophe connection xmlOutput function to wrap counting functionality.\n\t* @method _originalXMLOutput\n\t* @type {Handler}\n\t* @private\n\t*/\n\t_originalXMLOutput: null,\n\n\t/**\n\t* @property {Handler} _requestHandler: Stores reference to handler that process count request from server.\n\t* @private\n\t*/\n\t_requestHandler: null,\n\n\t/**\n\t* @property {Handler} _incomingHandler: Stores reference to handler that processes incoming stanzas count.\n\t* @private\n\t*/\n\t_incomingHandler: null,\n\n\t/**\n\t* @property {Integer} _requestResponseIntervalCount: Counts sent stanzas since last response request.\n\t*/\n\t_requestResponseIntervalCount: 0,\n\n\t/**\n\t * @property {boolean} _isSupported: indicates whether or not the server has advertised support for the stream\n\t * management namespace.\n\t */\n\t_isSupported: false,\n\n\t/**\n\t* @property {Queue} _unacknowledgedStanzas: Maintains a list of packet ids for stanzas which have yet to be acknowledged.\n\t*/\n\t_unacknowledgedStanzas: [],\n\n\t/**\n\t* @property {Array} _acknowledgedStanzaListeners: Stores callbacks for each stanza acknowledged by the server.\n\t* Provides the packet id of the stanza as a parameter.\n\t* @private\n\t*/\n\t_acknowledgedStanzaListeners: [],\n\n\taddAcknowledgedStanzaListener: function(listener) {\n\t\tthis._acknowledgedStanzaListeners.push(listener);\n\t},\n\n\tenable: function(resume) {\n\t\tif (!this._isSupported) {\n\t\t\tthrow new Error('The server doesn\\'t support urn:xmpp:sm:3 namespace');\n\t\t} else if (this._connectionStatus !== Strophe.Status.CONNECTED) {\n\t\t\tthrow new Error('enable() can only be called in the CONNECTED state');\n\t\t}\n\t\tthis._c.send($build('enable', { xmlns: this._NS, resume }));\n\t\tthis._c.flush();\n\t\tthis._c.pause();\n\t},\n\n\tgetResumeToken: function() {\n\t\treturn this._resumeToken;\n\t},\n\n\tisSupported() {\n\t\treturn this._isSupported;\n\t},\n\n\tresume: function() {\n\t\tif (!this.getResumeToken()) {\n\t\t\tthrow new Error('No resume token');\n\t\t}\n\t\tif (this._connectionStatus !== Strophe.Status.DISCONNECTED) {\n\t\t\tthrow new Error('resume() can only be called in the DISCONNECTED state');\n\t\t}\n\n\t\tthis._c.options.explicitResourceBinding = true;\n\t\tthis._resuming = true;\n\n\t\tthis._originalConnect.apply(this._c, this._connectArgs);\n\t},\n\n\trequestAcknowledgement: function() {\n\t\tif (this._connectionStatus !== Strophe.Status.CONNECTED) {\n\t\t\tthrow new Error('requestAcknowledgement() can only be called in the CONNECTED state');\n\t\t}\n\t\tthis._requestResponseIntervalCount = 0;\n\t\tthis._c.send($build('r', { xmlns: this._NS }));\n\t},\n\n\tgetOutgoingCounter: function() {\n\t\treturn this._clientSentStanzasCounter;\n\t},\n\n\tgetIncomingCounter: function() {\n\t\treturn this._clientProcessedStanzasCounter;\n\t},\n\n\tinit: function(conn) {\n\t\tthis._c = conn;\n\t\tStrophe.addNamespace('SM', this._NS);\n\n\t\t// Storing original xmlOutput function to use additional logic\n\t\tthis._originalXMLOutput = this._c.xmlOutput;\n\t\tthis._c.xmlOutput = this.xmlOutput.bind(this);\n\n\t\tthis._originalConnect = this._c.connect;\n\t\tthis._c.connect = this._interceptConnectArgs.bind(this);\n\n\t\tthis._originalOnStreamFeaturesAfterSASL = this._c._onStreamFeaturesAfterSASL;\n\t\tthis._c._onStreamFeaturesAfterSASL = this._onStreamFeaturesAfterSASL.bind(this);\n\n\t\tthis._originalDoDisconnect = this._c._doDisconnect;\n\t\tthis._c._doDisconnect = this._interceptDoDisconnect.bind(this);\n\n\t\tthis._originalDisconnect = this._c.disconnect;\n\t\tthis._c.disconnect = this._interceptDisconnect.bind(this);\n\t},\n\n\t_interceptDisconnect: function() {\n\t\tthis._resumeToken = undefined;\n\t\tthis._originalDisconnect.apply(this._c, arguments);\n\t},\n\n\t_interceptDoDisconnect: function() {\n\t\tif (this.getResumeToken()\n\t\t\t\t&& !this._resuming\n\t\t\t\t&& this._c.connected && !this._c.disconnecting) {\n\t\t\tthis._resumeState = {\n\t\t\t\thandlers: this._c.handlers,\n\t\t\t\ttimedHandlers: this._c.timedHandlers,\n\t\t\t\tremoveTimeds: this._c.removeTimeds,\n\t\t\t\tremoveHandlers: this._c.removeHandlers,\n\t\t\t\taddTimeds: this._c.addTimeds,\n\t\t\t\taddHandlers: this._c.addHandlers\n\t\t\t};\n\t\t\tthis._storedJid = this._c.jid;\n\n\t\t\tthis.logging && Strophe.debug('SM stored resume state, handler count: ' + this._resumeState.handlers.length);\n\t\t}\n\n\t\t// Remove any queued stanzas from the buffer that have failed to send while the socket was closed,\n\t\t// as they would interfere with the resume flow. They will be resent anyway.\n\t\tthis._c._data = [];\n\n\t\tthis._originalDoDisconnect.apply(this._c, arguments);\n\t},\n\n\t_interceptConnectArgs: function() {\n\t\tthis._connectArgs = arguments;\n\n\t\tthis._originalConnect.apply(this._c, arguments);\n\t},\n\n\t_onStreamFeaturesAfterSASL: function(elem) {\n\t\tthis._isSupported = elem.getElementsByTagNameNS(this._NS, \"sm\").length > 0;\n\n\t\treturn this._originalOnStreamFeaturesAfterSASL.apply(this._c, arguments);\n\t},\n\n\tstatusChanged: function (status) {\n\t\tthis._connectionStatus = status;\n\t\tif (!this.getResumeToken()\n\t\t\t&& (status === Strophe.Status.CONNECTED || status === Strophe.Status.DISCONNECTED)) {\n\t\t\tthis.logging && Strophe.debug('SM reset state');\n\n\t\t\tthis._serverProcesssedStanzasCounter = 0;\n\t\t\tthis._clientProcessedStanzasCounter = 0;\n\n\t\t\tthis._clientSentStanzasCounter = 0;\n\n\t\t\tthis._isStreamManagementEnabled = false;\n\t\t\tthis._requestResponseIntervalCount = 0;\n\n\t\t\t// FIXME not described in JSDocs\n\t\t\tthis._resuming = false;\n\n\t\t\tif (status === Strophe.Status.DISCONNECTED) {\n\t\t\t\tthis._isSupported = false;\n\t\t\t}\n\n\t\t\tthis._unacknowledgedStanzas = [];\n\n\t\t\tif (this._requestHandler) {\n\t\t\t\tthis._c.deleteHandler(this._requestHandler);\n\t\t\t}\n\n\t\t\tif (this._incomingHandler) {\n\t\t\t\tthis._c.deleteHandler(this._incomingHandler);\n\t\t\t}\n\n\t\t\tthis._requestHandler = this._c.addHandler(this._handleServerRequestHandler.bind(this), this._NS, 'r');\n\t\t\tthis._ackHandler = this._c.addHandler(this._handleServerAck.bind(this), this._NS, 'a');\n\t\t\tthis._incomingHandler = this._c.addHandler(this._incomingStanzaHandler.bind(this));\n\n\t\t\t// FIXME handler instances stored, but never used\n\t\t\tthis._enabledHandler = this._c._addSysHandler(this._handleEnabled.bind(this), this._NS, 'enabled');\n\t\t\tthis._resumeFailedHandler = this._c._addSysHandler(this._handleResumeFailed.bind(this), this._NS, 'failed');\n\t\t\tthis._resumedHandler =  this._c._addSysHandler(this._handleResumed.bind(this), this._NS,'resumed');\n\n\t\t} else if (status === Strophe.Status.BINDREQUIRED)  {\n\t\t\tthis._c.jid = this._storedJid;\n\n\t\t\t// Restore Strophe handlers\n\t\t\tfor (const property in this._resumeState) {\n\t\t\t\tthis._c[property] = this._resumeState[property];\n\t\t\t}\n\n\t\t\t// FIXME check conditions if there's session ID and if enabled\n\t\t\tthis._c.send($build('resume', {\n\t\t\t\txmlns: this._NS,\n\t\t\t\th: this._clientProcessedStanzasCounter,\n\t\t\t\tprevid: this._resumeToken\n\t\t\t}));\n\t\t\tthis._c.flush();\n\t\t} else if (status === Strophe.Status.ERROR) {\n\t\t\tthis.logging && Strophe.debug('SM cleared resume token on error');\n\t\t\tthis._resumeToken = undefined;\n\t\t}\n\t},\n\n\t/**\n\t* This method overrides the send method implemented by Strophe.Connection\n\t* to count outgoing stanzas\n\t*\n\t* @method Send\n\t* @public\n\t*/\n\txmlOutput: function(elem) {\n\t\tif (Strophe.isTagEqual(elem, 'iq') ||\n\t\t\tStrophe.isTagEqual(elem, 'presence') ||\n\t\t\tStrophe.isTagEqual(elem, 'message')) {\n\t\t\tthis._increaseSentStanzasCounter(elem);\n\t\t}\n\n\t\treturn this._originalXMLOutput.call(this._c, elem);\n\t},\n\n\t_handleEnabled: function(elem) {\n\t\tthis._isStreamManagementEnabled = true;\n\t\t// FIXME fail if requested, but not enabled\n\t\tthis._resumeToken = elem.getAttribute('resume') === 'true' && elem.getAttribute('id');\n\n\t\tthis._c.resume();\n\n\t\treturn true;\n\t},\n\n\t_handleResumeFailed: function(elem) {\n\t\tconst error = elem && elem.firstElementChild && elem.firstElementChild.tagName;\n\n\t\tthis._c._changeConnectStatus(Strophe.Status.ERROR, error, elem);\n\t\tthis._c._doDisconnect();\n\n\t\treturn true;\n\t},\n\n\t_handleResumed: function(elem) {\n\t\t// FIXME check if in the correct state\n\t\tvar handledCount = parseInt(elem.getAttribute('h'));\n\t\tthis._handleAcknowledgedStanzas(handledCount, this._serverProcesssedStanzasCounter);\n\n\t\tthis._resuming = false;\n\t\tthis._c.do_bind = false; // No need to bind our resource anymore\n\t\tthis._c.authenticated = true;\n\t\tthis._c.restored = true;\n\n\t\tif (this._unacknowledgedStanzas.length > 0) {\n\t\t\tthis.logging && Strophe.debug('SM Sending unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t\tfor(const stanza of this._unacknowledgedStanzas) {\n\t\t\t\tthis._c.send(stanza);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.logging && Strophe.debug('SM No unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t}\n\n\t\tthis._c._changeConnectStatus(Strophe.Status.CONNECTED, null);\n\n\t\treturn true;\n\t},\n\n\t_incomingStanzaHandler: function(elem) {\n\t\tif (Strophe.isTagEqual(elem, 'iq') || Strophe.isTagEqual(elem, 'presence') || Strophe.isTagEqual(elem, 'message'))  {\n\t\t\tthis._increaseReceivedStanzasCounter();\n\n\t\t\tif (this.autoSendCountOnEveryIncomingStanza) {\n\t\t\t\tthis._answerProcessedStanzas();\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t},\n\n\t_handleAcknowledgedStanzas: function(reportedHandledCount, lastKnownHandledCount) {\n\t\tvar delta = reportedHandledCount - lastKnownHandledCount;\n\n\t\tif (delta < 0) {\n\t\t\tthis._throwError('New reported stanza count lower than previous. New: ' + reportedHandledCount + ' - Previous: ' + lastKnownHandledCount);\n\t\t}\n\n\t\tif (delta > this._unacknowledgedStanzas.length) {\n\t\t\tthis._throwError('Higher reported acknowledge count than unacknowledged stanzas. Reported Acknowledge Count: ' + delta + ' - Unacknowledge Stanza Count: ' + this._unacknowledgedStanzas.length + ' - New: ' + reportedHandledCount + ' - Previous: ' + lastKnownHandledCount);\n\t\t}\n\n\t\tfor(var i = 0; i < delta; i++) {\n\t\t\tvar stanza = this._unacknowledgedStanzas.shift();\n\t\t\tfor (var j = 0; j < this._acknowledgedStanzaListeners.length; j++) {\n\t\t\t\tthis._acknowledgedStanzaListeners[j](stanza);\n\t\t\t}\n\t\t}\n\n\t\tif (this.logging && this._unacknowledgedStanzas.length > 0) {\n\t\t\tStrophe.warn('SM Unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t}\n\n\t\tthis._serverProcesssedStanzasCounter = reportedHandledCount;\n\n\t\tif (this.requestResponseInterval > 0) {\n\t\t\tthis._requestResponseIntervalCount = 0;\n\t\t}\n\t},\n\n\t_handleServerRequestHandler: function() {\n\t\tthis._answerProcessedStanzas();\n\n\t\treturn true;\n\t},\n\n\t_handleServerAck: function(elem){\n\t\tvar handledCount = parseInt(elem.getAttribute('h'));\n\t\tthis._handleAcknowledgedStanzas(handledCount, this._serverProcesssedStanzasCounter);\n\n\t\treturn true;\n\t},\n\n\t_answerProcessedStanzas: function() {\n\t\tif (this._isStreamManagementEnabled) {\n\t\t\tthis._c.send($build('a', { xmlns: this._NS, h: this._clientProcessedStanzasCounter }));\n\t\t}\n\t},\n\n\t_increaseSentStanzasCounter: function(elem) {\n\t\tif (this._isStreamManagementEnabled) {\n\t\t\tif (this._unacknowledgedStanzas.indexOf(elem) !== -1) {\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._unacknowledgedStanzas.push(elem);\n\t\t\tthis._clientSentStanzasCounter++;\n\n\t\t\tif (this.requestResponseInterval > 0) {\n\t\t\t\tthis._requestResponseIntervalCount++;\n\n\t\t\t\tif (this._requestResponseIntervalCount === this.requestResponseInterval) {\n\t\t\t\t\t// FIXME Can not call send from onIdle.\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tif (this._connectionStatus === Strophe.Status.CONNECTED) {\n\t\t\t\t\t\t\tthis.requestAcknowledgement();\n\t\t\t\t\t\t}\n\t\t\t\t\t}, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t_increaseReceivedStanzasCounter: function() {\n\t\tif (this._isStreamManagementEnabled) {\n\t\t\tthis._clientProcessedStanzasCounter++;\n\t\t}\n\t},\n\n\t_throwError: function(msg) {\n\t\tStrophe.error(msg);\n\t\tthrow new Error(msg);\n\t}\n\n});\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction bytesToUuid(buf, offset) {\n  const i = offset || 0;\n  const bth = byteToHex; // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n\n  return (bth[buf[i + 0]] + bth[buf[i + 1]] + bth[buf[i + 2]] + bth[buf[i + 3]] + '-' + bth[buf[i + 4]] + bth[buf[i + 5]] + '-' + bth[buf[i + 6]] + bth[buf[i + 7]] + '-' + bth[buf[i + 8]] + bth[buf[i + 9]] + '-' + bth[buf[i + 10]] + bth[buf[i + 11]] + bth[buf[i + 12]] + bth[buf[i + 13]] + bth[buf[i + 14]] + bth[buf[i + 15]]).toLowerCase();\n}\n\nvar _default = bytesToUuid;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"v1\", {\n  enumerable: true,\n  get: function () {\n    return _v.default;\n  }\n});\nObject.defineProperty(exports, \"v3\", {\n  enumerable: true,\n  get: function () {\n    return _v2.default;\n  }\n});\nObject.defineProperty(exports, \"v4\", {\n  enumerable: true,\n  get: function () {\n    return _v3.default;\n  }\n});\nObject.defineProperty(exports, \"v5\", {\n  enumerable: true,\n  get: function () {\n    return _v4.default;\n  }\n});\n\nvar _v = _interopRequireDefault(require(\"./v1.js\"));\n\nvar _v2 = _interopRequireDefault(require(\"./v3.js\"));\n\nvar _v3 = _interopRequireDefault(require(\"./v4.js\"));\n\nvar _v4 = _interopRequireDefault(require(\"./v5.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n/*\n * Browser-compatible JavaScript MD5\n *\n * Modification of JavaScript MD5\n * https://github.com/blueimp/JavaScript-MD5\n *\n * Copyright 2011, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n *\n * Based on\n * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n * Digest Algorithm, as defined in RFC 1321.\n * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n * Distributed under the BSD License\n * See http://pajhome.org.uk/crypt/md5 for more info.\n */\nfunction md5(bytes) {\n  if (typeof bytes === 'string') {\n    const msg = unescape(encodeURIComponent(bytes)); // UTF8 escape\n\n    bytes = new Uint8Array(msg.length);\n\n    for (let i = 0; i < msg.length; ++i) {\n      bytes[i] = msg.charCodeAt(i);\n    }\n  }\n\n  return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));\n}\n/*\n * Convert an array of little-endian words to an array of bytes\n */\n\n\nfunction md5ToHexEncodedArray(input) {\n  const output = [];\n  const length32 = input.length * 32;\n  const hexTab = '0123456789abcdef';\n\n  for (let i = 0; i < length32; i += 8) {\n    const x = input[i >> 5] >>> i % 32 & 0xff;\n    const hex = parseInt(hexTab.charAt(x >>> 4 & 0x0f) + hexTab.charAt(x & 0x0f), 16);\n    output.push(hex);\n  }\n\n  return output;\n}\n/**\n * Calculate output length with padding and bit length\n */\n\n\nfunction getOutputLength(inputLength8) {\n  return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;\n}\n/*\n * Calculate the MD5 of an array of little-endian words, and a bit length.\n */\n\n\nfunction wordsToMd5(x, len) {\n  /* append padding */\n  x[len >> 5] |= 0x80 << len % 32;\n  x[getOutputLength(len) - 1] = len;\n  let a = 1732584193;\n  let b = -271733879;\n  let c = -1732584194;\n  let d = 271733878;\n\n  for (let i = 0; i < x.length; i += 16) {\n    const olda = a;\n    const oldb = b;\n    const oldc = c;\n    const oldd = d;\n    a = md5ff(a, b, c, d, x[i], 7, -680876936);\n    d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);\n    c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);\n    b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);\n    a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);\n    d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);\n    c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);\n    b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);\n    a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);\n    d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);\n    c = md5ff(c, d, a, b, x[i + 10], 17, -42063);\n    b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);\n    a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);\n    d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);\n    c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);\n    b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);\n    a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);\n    d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);\n    c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);\n    b = md5gg(b, c, d, a, x[i], 20, -373897302);\n    a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);\n    d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);\n    c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);\n    b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);\n    a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);\n    d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);\n    c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);\n    b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);\n    a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);\n    d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);\n    c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);\n    b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);\n    a = md5hh(a, b, c, d, x[i + 5], 4, -378558);\n    d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);\n    c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);\n    b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);\n    a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);\n    d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);\n    c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);\n    b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);\n    a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);\n    d = md5hh(d, a, b, c, x[i], 11, -358537222);\n    c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);\n    b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);\n    a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);\n    d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);\n    c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);\n    b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);\n    a = md5ii(a, b, c, d, x[i], 6, -198630844);\n    d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);\n    c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);\n    b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);\n    a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);\n    d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);\n    c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);\n    b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);\n    a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);\n    d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);\n    c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);\n    b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);\n    a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);\n    d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);\n    c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);\n    b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);\n    a = safeAdd(a, olda);\n    b = safeAdd(b, oldb);\n    c = safeAdd(c, oldc);\n    d = safeAdd(d, oldd);\n  }\n\n  return [a, b, c, d];\n}\n/*\n * Convert an array bytes to an array of little-endian words\n * Characters >255 have their high-byte silently ignored.\n */\n\n\nfunction bytesToWords(input) {\n  if (input.length === 0) {\n    return [];\n  }\n\n  const length8 = input.length * 8;\n  const output = new Uint32Array(getOutputLength(length8));\n\n  for (let i = 0; i < length8; i += 8) {\n    output[i >> 5] |= (input[i / 8] & 0xff) << i % 32;\n  }\n\n  return output;\n}\n/*\n * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n * to work around bugs in some JS interpreters.\n */\n\n\nfunction safeAdd(x, y) {\n  const lsw = (x & 0xffff) + (y & 0xffff);\n  const msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n  return msw << 16 | lsw & 0xffff;\n}\n/*\n * Bitwise rotate a 32-bit number to the left.\n */\n\n\nfunction bitRotateLeft(num, cnt) {\n  return num << cnt | num >>> 32 - cnt;\n}\n/*\n * These functions implement the four basic operations the algorithm uses.\n */\n\n\nfunction md5cmn(q, a, b, x, s, t) {\n  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);\n}\n\nfunction md5ff(a, b, c, d, x, s, t) {\n  return md5cmn(b & c | ~b & d, a, b, x, s, t);\n}\n\nfunction md5gg(a, b, c, d, x, s, t) {\n  return md5cmn(b & d | c & ~d, a, b, x, s, t);\n}\n\nfunction md5hh(a, b, c, d, x, s, t) {\n  return md5cmn(b ^ c ^ d, a, b, x, s, t);\n}\n\nfunction md5ii(a, b, c, d, x, s, t) {\n  return md5cmn(c ^ (b | ~d), a, b, x, s, t);\n}\n\nvar _default = md5;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = rng;\n// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\n// getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n// find the complete implementation of crypto (msCrypto) on IE11.\nconst getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\nconst rnds8 = new Uint8Array(16);\n\nfunction rng() {\n  if (!getRandomValues) {\n    throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n  }\n\n  return getRandomValues(rnds8);\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n// Adapted from Chris Veness' SHA1 code at\n// http://www.movable-type.co.uk/scripts/sha1.html\nfunction f(s, x, y, z) {\n  switch (s) {\n    case 0:\n      return x & y ^ ~x & z;\n\n    case 1:\n      return x ^ y ^ z;\n\n    case 2:\n      return x & y ^ x & z ^ y & z;\n\n    case 3:\n      return x ^ y ^ z;\n  }\n}\n\nfunction ROTL(x, n) {\n  return x << n | x >>> 32 - n;\n}\n\nfunction sha1(bytes) {\n  const K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6];\n  const H = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];\n\n  if (typeof bytes === 'string') {\n    const msg = unescape(encodeURIComponent(bytes)); // UTF8 escape\n\n    bytes = [];\n\n    for (let i = 0; i < msg.length; ++i) {\n      bytes.push(msg.charCodeAt(i));\n    }\n  }\n\n  bytes.push(0x80);\n  const l = bytes.length / 4 + 2;\n  const N = Math.ceil(l / 16);\n  const M = new Array(N);\n\n  for (let i = 0; i < N; ++i) {\n    const arr = new Uint32Array(16);\n\n    for (let j = 0; j < 16; ++j) {\n      arr[j] = bytes[i * 64 + j * 4] << 24 | bytes[i * 64 + j * 4 + 1] << 16 | bytes[i * 64 + j * 4 + 2] << 8 | bytes[i * 64 + j * 4 + 3];\n    }\n\n    M[i] = arr;\n  }\n\n  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);\n  M[N - 1][14] = Math.floor(M[N - 1][14]);\n  M[N - 1][15] = (bytes.length - 1) * 8 & 0xffffffff;\n\n  for (let i = 0; i < N; ++i) {\n    const W = new Uint32Array(80);\n\n    for (let t = 0; t < 16; ++t) {\n      W[t] = M[i][t];\n    }\n\n    for (let t = 16; t < 80; ++t) {\n      W[t] = ROTL(W[t - 3] ^ W[t - 8] ^ W[t - 14] ^ W[t - 16], 1);\n    }\n\n    let a = H[0];\n    let b = H[1];\n    let c = H[2];\n    let d = H[3];\n    let e = H[4];\n\n    for (let t = 0; t < 80; ++t) {\n      const s = Math.floor(t / 20);\n      const T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[t] >>> 0;\n      e = d;\n      d = c;\n      c = ROTL(b, 30) >>> 0;\n      b = a;\n      a = T;\n    }\n\n    H[0] = H[0] + a >>> 0;\n    H[1] = H[1] + b >>> 0;\n    H[2] = H[2] + c >>> 0;\n    H[3] = H[3] + d >>> 0;\n    H[4] = H[4] + e >>> 0;\n  }\n\n  return [H[0] >> 24 & 0xff, H[0] >> 16 & 0xff, H[0] >> 8 & 0xff, H[0] & 0xff, H[1] >> 24 & 0xff, H[1] >> 16 & 0xff, H[1] >> 8 & 0xff, H[1] & 0xff, H[2] >> 24 & 0xff, H[2] >> 16 & 0xff, H[2] >> 8 & 0xff, H[2] & 0xff, H[3] >> 24 & 0xff, H[3] >> 16 & 0xff, H[3] >> 8 & 0xff, H[3] & 0xff, H[4] >> 24 & 0xff, H[4] >> 16 & 0xff, H[4] >> 8 & 0xff, H[4] & 0xff];\n}\n\nvar _default = sha1;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _rng = _interopRequireDefault(require(\"./rng.js\"));\n\nvar _bytesToUuid = _interopRequireDefault(require(\"./bytesToUuid.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\nlet _nodeId;\n\nlet _clockseq; // Previous uuid creation time\n\n\nlet _lastMSecs = 0;\nlet _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details\n\nfunction v1(options, buf, offset) {\n  let i = buf && offset || 0;\n  const b = buf || [];\n  options = options || {};\n  let node = options.node || _nodeId;\n  let clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not\n  // specified.  We do this lazily to minimize issues related to insufficient\n  // system entropy.  See #189\n\n  if (node == null || clockseq == null) {\n    const seedBytes = options.random || (options.rng || _rng.default)();\n\n    if (node == null) {\n      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];\n    }\n\n    if (clockseq == null) {\n      // Per 4.2.2, randomize (14 bit) clockseq\n      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;\n    }\n  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n\n\n  let msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n\n  let nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)\n\n  const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression\n\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n\n\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  } // Per 4.2.1.2 Throw error if too many uuids are requested\n\n\n  if (nsecs >= 10000) {\n    throw new Error(\"uuid.v1(): Can't create more than 10M uuids/sec\");\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n\n  msecs += 12219292800000; // `time_low`\n\n  const tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff; // `time_mid`\n\n  const tmh = msecs / 0x100000000 * 10000 & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff; // `time_high_and_version`\n\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n\n  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n\n  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`\n\n  b[i++] = clockseq & 0xff; // `node`\n\n  for (let n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf || (0, _bytesToUuid.default)(b);\n}\n\nvar _default = v1;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _v = _interopRequireDefault(require(\"./v35.js\"));\n\nvar _md = _interopRequireDefault(require(\"./md5.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst v3 = (0, _v.default)('v3', 0x30, _md.default);\nvar _default = v3;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\nexports.URL = exports.DNS = void 0;\n\nvar _bytesToUuid = _interopRequireDefault(require(\"./bytesToUuid.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction uuidToBytes(uuid) {\n  // Note: We assume we're being passed a valid uuid string\n  const bytes = [];\n  uuid.replace(/[a-fA-F0-9]{2}/g, function (hex) {\n    bytes.push(parseInt(hex, 16));\n  });\n  return bytes;\n}\n\nfunction stringToBytes(str) {\n  str = unescape(encodeURIComponent(str)); // UTF8 escape\n\n  const bytes = [];\n\n  for (let i = 0; i < str.length; ++i) {\n    bytes.push(str.charCodeAt(i));\n  }\n\n  return bytes;\n}\n\nconst DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';\nexports.DNS = DNS;\nconst URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';\nexports.URL = URL;\n\nfunction _default(name, version, hashfunc) {\n  function generateUUID(value, namespace, buf, offset) {\n    const off = buf && offset || 0;\n    if (typeof value === 'string') value = stringToBytes(value);\n    if (typeof namespace === 'string') namespace = uuidToBytes(namespace);\n\n    if (!Array.isArray(value)) {\n      throw TypeError('value must be an array of bytes');\n    }\n\n    if (!Array.isArray(namespace) || namespace.length !== 16) {\n      throw TypeError('namespace must be uuid string or an Array of 16 byte values');\n    } // Per 4.3\n\n\n    const bytes = hashfunc(namespace.concat(value));\n    bytes[6] = bytes[6] & 0x0f | version;\n    bytes[8] = bytes[8] & 0x3f | 0x80;\n\n    if (buf) {\n      for (let idx = 0; idx < 16; ++idx) {\n        buf[off + idx] = bytes[idx];\n      }\n    }\n\n    return buf || (0, _bytesToUuid.default)(bytes);\n  } // Function#name is not settable on some platforms (#270)\n\n\n  try {\n    generateUUID.name = name; // eslint-disable-next-line no-empty\n  } catch (err) {} // For CommonJS default export support\n\n\n  generateUUID.DNS = DNS;\n  generateUUID.URL = URL;\n  return generateUUID;\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _rng = _interopRequireDefault(require(\"./rng.js\"));\n\nvar _bytesToUuid = _interopRequireDefault(require(\"./bytesToUuid.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction v4(options, buf, offset) {\n  if (typeof options === 'string') {\n    buf = options === 'binary' ? new Uint8Array(16) : null;\n    options = null;\n  }\n\n  options = options || {};\n\n  const rnds = options.random || (options.rng || _rng.default)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    const start = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[start + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return (0, _bytesToUuid.default)(rnds);\n}\n\nvar _default = v4;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _v = _interopRequireDefault(require(\"./v35.js\"));\n\nvar _sha = _interopRequireDefault(require(\"./sha1.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst v5 = (0, _v.default)('v5', 0x50, _sha.default);\nvar _default = v5;\nexports.default = _default;","\"use strict\";function e(e,n){if(!r)return!1;const u=e.buffer;let i=l.get(u);if(null==i){if((i=t.validate(u))&&n)try{new t.Instance(new t.Module(u)).exports[0]()}catch(e){i=!1}l.set(u,i)}return i}const t=globalThis.WebAssembly,r=\"object\"==typeof t,n=e=>void 0!==e,u=(...e)=>Uint8Array.of(0,97,115,109,1,0,0,0,...e),i=(...e)=>Uint32Array.of(1836278016,1,...e),o=(...e)=>i(1610679297,33751040,...e,40239360,259),a=(...e)=>u(1,4,1,96,0,0,3,2,1,0,...e,11,0,10,4,110,97,109,101,2,3,1,0,0),s=(...e)=>Uint16Array.of(24832,28019,1,0,1025,24577,0,515,1,...e),g=(...e)=>s(...e,2842,4096,28164,28001,357,260,256,560,259,0),l=new WeakMap,f=i(1610679553,58589440,117440770,805372165,101318656,1107297281,268438272,1835101700,17039717,36700416,259),c=u(5,3,1,4,1,0,8,4,110,97,109,101,2,1,0),y=s(773,1,2561,269,11,65,65,65,3068,2816,2560,28164,28001,613,259,0),p=i(1610679297,33751040,134873089,100664833,185276736),m=u(2,8,1,1,97,1,98,3,127,1,6,6,1,127,1,65,0,11,7,5,1,1,97,3,1,0,8,4,110,97,109,101,2,1,0),b=Uint16Array.of(24832,28019,1,0,1537,24577,512,32639,515,1,2058,1537,16640,16640,2816,2560,28164,28001,613,259,0),d=g(3082,2561,17152,0,0,252),A=g(2058,1537,16640,49152),U=o(101318657,301990913,268438272,1835101700,17039717),x=a(5,4,1,3,1,1,10,7,1,5,0,254,3,0),h=o(84344833,6357249,17369600,4259847,186257917,1845758464),v=a(10,7,1,5,0,208,112,26);module.exports={support:(t=1)=>r&&e(Uint32Array.of(1836278016,t)),get supportStreaming(){return r&&n(t.instantiateStreaming)},feature:{get bigInt(){return e(f,!0)},get bulk(){return e(y)},get exceptions(){return e(p)},get memory64(){return e(c)},get mutableGlobal(){return e(m)},get multiValue(){return e(b)},get saturateConversions(){return e(d)},get signExtensions(){return e(A)},get tailCall(){return e(U)},get threads(){return e(x)},get simd(){return e(h)},get references(){return e(v)},get typeReflection(){return r&&n(t.Memory.type)},get funcReferences(){return r&&n(t.Function)}}};","/**\n * Enumeration of the video types that are signaled to the bridge\n * @type {{CAMERA: string, DESKTOP: string, DESKTOP_HIGH_FPS: string, NONE: string}}\n */\nconst BridgeVideoType = {\n    /**\n     * The camera video type.\n     */\n    CAMERA: 'camera',\n\n    /**\n     * The low fps desktop video type.\n     */\n    DESKTOP: 'desktop',\n\n    /**\n     * The high fps desktop video type.\n     */\n    DESKTOP_HIGH_FPS: 'desktop_high_fps',\n\n    /**\n     * Video type when no local source is present.\n     */\n    NONE: 'none'\n};\n\nmodule.exports = BridgeVideoType;\n","/**\n * The possible camera facing modes. For now support only 'user' and\n * 'environment' because 'left' and 'right' are not used anywhere in our\n * projects at the time of this writing. For more information please refer to\n * https://w3c.github.io/mediacapture-main/getusermedia.html\n * #def-constraint-facingMode.\n *\n * @enum {string}\n */\nconst CameraFacingMode = {\n    /**\n     * The mode which specifies the environment-facing camera.\n     */\n    ENVIRONMENT: 'environment',\n\n    /**\n     * The mode which specifies the user-facing camera.\n     */\n    USER: 'user'\n};\n\nmodule.exports = CameraFacingMode;\n","/**\n * Enumeration of the codec mime types\n * @type {{H264: string, OPUS: string, ULPFEC: string, VP8: string, VP9: string}}\n */\nconst CodecMimeType = {\n    /**\n     * AV1 codec mime type.\n     */\n    AV1: 'av1',\n\n    /**\n     * The h264 codec mime type.\n     */\n    H264: 'h264',\n\n    /**\n     * The opus codec mime type.\n     */\n    OPUS: 'opus',\n\n    /**\n     * The ulpfec codec mime type.\n     */\n    ULPFEC: 'ulpfec',\n\n    /**\n     * The vp8 codec mime type.\n     */\n    VP8: 'vp8',\n\n    /**\n     * The vp9 codec mime type.\n     */\n    VP9: 'vp9'\n\n};\n\nmodule.exports = CodecMimeType;\n","export enum RTCEvents {\n    /**\n     * Indicates error while create answer call.\n     */\n    CREATE_ANSWER_FAILED = 'rtc.create_answer_failed',\n\n    /**\n     * Indicates error while create offer call.\n     */\n    CREATE_OFFER_FAILED = 'rtc.create_offer_failed',\n    DATA_CHANNEL_OPEN = 'rtc.data_channel_open',\n    ENDPOINT_CONN_STATUS_CHANGED = 'rtc.endpoint_conn_status_changed',\n    DOMINANT_SPEAKER_CHANGED = 'rtc.dominant_speaker_changed',\n    LASTN_ENDPOINT_CHANGED = 'rtc.lastn_endpoint_changed',\n    FORWARDED_SOURCES_CHANGED = 'rtc.forwarded_sources_changed',\n\n    /**\n     * Event emitted when the user granted/blocked a permission for the camera / mic.\n     * Used to keep track of the granted permissions on browsers which don't\n     * support the Permissions API.\n     */\n    PERMISSIONS_CHANGED = 'rtc.permissions_changed',\n\n    SENDER_VIDEO_CONSTRAINTS_CHANGED = 'rtc.sender_video_constraints_changed',\n\n    /**\n     * Event emitted when {@link RTC.setLastN} method is called to update with\n     * the new value set.\n     * The first argument is the value passed to {@link RTC.setLastN}.\n     */\n    LASTN_VALUE_CHANGED = 'rtc.lastn_value_changed',\n\n    /**\n     * Event emitted when ssrc for a local track is extracted and stored\n     * in {@link TraceablePeerConnection}.\n     * @param {JitsiLocalTrack} track which ssrc was updated\n     * @param {string} ssrc that was stored\n     */\n    LOCAL_TRACK_SSRC_UPDATED = 'rtc.local_track_ssrc_updated',\n\n    /**\n     * The max enabled resolution of a local video track was changed.\n     */\n    LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED = 'rtc.local_track_max_enabled_resolution_changed',\n\n    TRACK_ATTACHED = 'rtc.track_attached',\n\n    /**\n     * Event fired when we remote track is added to the conference.\n     * 1st event argument is the added <tt>JitsiRemoteTrack</tt> instance.\n     **/\n    REMOTE_TRACK_ADDED = 'rtc.remote_track_added',\n\n    // FIXME get rid of this event in favour of NO_DATA_FROM_SOURCE event\n    // (currently implemented for local tracks only)\n    REMOTE_TRACK_MUTE = 'rtc.remote_track_mute',\n\n    /**\n     * Indicates that the remote track has been removed from the conference.\n     * 1st event argument is the removed {@link JitsiRemoteTrack} instance.\n     */\n    REMOTE_TRACK_REMOVED = 'rtc.remote_track_removed',\n\n    // FIXME get rid of this event in favour of NO_DATA_FROM_SOURCE event\n    // (currently implemented for local tracks only)\n    REMOTE_TRACK_UNMUTE = 'rtc.remote_track_unmute',\n\n    /**\n     * Indicates error while set local description.\n     */\n    SET_LOCAL_DESCRIPTION_FAILED = 'rtc.set_local_description_failed',\n\n    /**\n     * Indicates error while set remote description.\n     */\n    SET_REMOTE_DESCRIPTION_FAILED = 'rtc.set_remote_description_failed',\n    AUDIO_OUTPUT_DEVICE_CHANGED = 'rtc.audio_output_device_changed',\n    DEVICE_LIST_CHANGED = 'rtc.device_list_changed',\n\n    /**\n     * Indicates that the list with available devices will change.\n     */\n    DEVICE_LIST_WILL_CHANGE = 'rtc.device_list_will_change',\n    DEVICE_LIST_AVAILABLE = 'rtc.device_list_available',\n\n    /**\n     * Indicates that a message from another participant is received on\n     * data channel.\n     */\n    ENDPOINT_MESSAGE_RECEIVED = 'rtc.endpoint_message_received',\n\n    /**\n     * Indicates that the remote endpoint stats have been received on data channel.\n     */\n    ENDPOINT_STATS_RECEIVED = 'rtc.endpoint_stats_received',\n\n    /**\n     * Designates an event indicating that the local ICE username fragment of\n     * the jingle session has changed.\n     * The first argument of the vent is <tt>TraceablePeerConnection</tt> which\n     * is the source of the event.\n     * The second argument is the actual \"ufrag\" string.\n     */\n    LOCAL_UFRAG_CHANGED = 'rtc.local_ufrag_changed',\n\n    /**\n     * Designates an event indicating that the local ICE username fragment of\n     * the jingle session has changed.\n     * The first argument of the vent is <tt>TraceablePeerConnection</tt> which\n     * is the source of the event.\n     * The second argument is the actual \"ufrag\" string.\n     */\n    REMOTE_UFRAG_CHANGED = 'rtc.remote_ufrag_changed'\n};\n\nexport const CREATE_ANSWER_FAILED = RTCEvents.CREATE_ANSWER_FAILED;\nexport const CREATE_OFFER_FAILED = RTCEvents.CREATE_OFFER_FAILED;\nexport const DATA_CHANNEL_OPEN = RTCEvents.DATA_CHANNEL_OPEN;\nexport const ENDPOINT_CONN_STATUS_CHANGED = RTCEvents.ENDPOINT_CONN_STATUS_CHANGED;\nexport const DOMINANT_SPEAKER_CHANGED = RTCEvents.DOMINANT_SPEAKER_CHANGED;\nexport const LASTN_ENDPOINT_CHANGED = RTCEvents.LASTN_ENDPOINT_CHANGED;\nexport const FORWARDED_SOURCES_CHANGED = RTCEvents.FORWARDED_SOURCES_CHANGED;\nexport const PERMISSIONS_CHANGED = RTCEvents.PERMISSIONS_CHANGED;\nexport const SENDER_VIDEO_CONSTRAINTS_CHANGED = RTCEvents.SENDER_VIDEO_CONSTRAINTS_CHANGED;\nexport const LASTN_VALUE_CHANGED = RTCEvents.LASTN_VALUE_CHANGED;\nexport const LOCAL_TRACK_SSRC_UPDATED = RTCEvents.LOCAL_TRACK_SSRC_UPDATED;\nexport const LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED = RTCEvents.LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED;\nexport const TRACK_ATTACHED = RTCEvents.TRACK_ATTACHED;\nexport const REMOTE_TRACK_ADDED = RTCEvents.REMOTE_TRACK_ADDED;\nexport const REMOTE_TRACK_MUTE = RTCEvents.REMOTE_TRACK_MUTE;\nexport const REMOTE_TRACK_REMOVED = RTCEvents.REMOTE_TRACK_REMOVED;\nexport const REMOTE_TRACK_UNMUTE = RTCEvents.REMOTE_TRACK_UNMUTE;\nexport const SET_LOCAL_DESCRIPTION_FAILED = RTCEvents.SET_LOCAL_DESCRIPTION_FAILED;\nexport const SET_REMOTE_DESCRIPTION_FAILED = RTCEvents.SET_REMOTE_DESCRIPTION_FAILED;\nexport const AUDIO_OUTPUT_DEVICE_CHANGED = RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED;\nexport const DEVICE_LIST_CHANGED = RTCEvents.DEVICE_LIST_CHANGED;\nexport const DEVICE_LIST_WILL_CHANGE = RTCEvents.DEVICE_LIST_WILL_CHANGE;\nexport const DEVICE_LIST_AVAILABLE = RTCEvents.DEVICE_LIST_AVAILABLE;\nexport const ENDPOINT_MESSAGE_RECEIVED = RTCEvents.ENDPOINT_MESSAGE_RECEIVED;\nexport const ENDPOINT_STATS_RECEIVED = RTCEvents.ENDPOINT_STATS_RECEIVED;\nexport const LOCAL_UFRAG_CHANGED = RTCEvents.LOCAL_UFRAG_CHANGED;\nexport const REMOTE_UFRAG_CHANGED = RTCEvents.REMOTE_UFRAG_CHANGED;\n\n// TODO: this was a pre-ES6 module using module.exports = RTCEvents which doesn't translate well\n// it is used in a number of places and should be updated to use the named export\n\nexport default RTCEvents;","const Resolutions = {\n    '2160': {\n        width: 3840,\n        height: 2160\n    },\n    '4k': {\n        width: 3840,\n        height: 2160\n    },\n    '1080': {\n        width: 1920,\n        height: 1080\n    },\n    'fullhd': {\n        width: 1920,\n        height: 1080\n    },\n    '720': {\n        width: 1280,\n        height: 720\n    },\n    'hd': {\n        width: 1280,\n        height: 720\n    },\n    '540': {\n        width: 960,\n        height: 540\n    },\n    'qhd': {\n        width: 960,\n        height: 540\n    },\n    '480': {\n        width: 640,\n        height: 480\n    },\n    'vga': {\n        width: 640,\n        height: 480\n    },\n    '360': {\n        width: 640,\n        height: 360\n    },\n    '240': {\n        width: 320,\n        height: 240\n    },\n    '180': {\n        width: 320,\n        height: 180\n    }\n};\n\nmodule.exports = Resolutions;\n","/**\n * Enumeration of the video types\n */\nexport enum VideoType {\n    /**\n     * The camera video type.\n     */\n    CAMERA = 'camera',\n\n    /**\n     * The desktop video type.\n     */\n    DESKTOP = 'desktop'\n};\n","const AuthenticationEvents = {\n    /**\n     * Event callback arguments:\n     * function(authenticationEnabled, userIdentity)\n     * authenticationEnabled - indicates whether authentication has been enabled\n     *                         in this session\n     * userIdentity - if user has been logged in then it contains user name. If\n     *                contains 'null' or 'undefined' then user is not logged in.\n     */\n    IDENTITY_UPDATED: 'authentication.identity_updated'\n};\n\nmodule.exports = AuthenticationEvents;\n","export const LOCAL_JID = 'local'\n","export enum XMPPEvents {\n    /**\n     * Indicates error while adding ice candidate.\n     */\n    ADD_ICE_CANDIDATE_FAILED = 'xmpp.add_ice_candidate_failed',\n\n    // Designates an event indicating that the focus has asked us to mute our\n    // audio.\n    AUDIO_MUTED_BY_FOCUS = 'xmpp.audio_muted_by_focus',\n\n    // Designates an event indicating that the focus has asked us to disable our\n    // camera.\n    VIDEO_MUTED_BY_FOCUS = 'xmpp.video_muted_by_focus',\n    AUTHENTICATION_REQUIRED = 'xmpp.authentication_required',\n    BRIDGE_DOWN = 'xmpp.bridge_down',\n\n    /**\n     * Triggered when 'session-accept' is received from the responder.\n     */\n    CALL_ACCEPTED = 'xmpp.callaccepted.jingle',\n\n    // Designates an event indicating that an offer (e.g. Jingle\n    // session-initiate) was received.\n    CALL_INCOMING = 'xmpp.callincoming.jingle',\n\n    // Triggered when Jicofo kills our media session, this can happen while\n    // we're still in the MUC, when it decides to terminate the media session.\n    // For example when the session is idle for too long, because we're the only\n    // person in the conference room.\n    CALL_ENDED = 'xmpp.callended.jingle',\n    CHAT_ERROR_RECEIVED = 'xmpp.chat_error_received',\n    SETTINGS_ERROR_RECEIVED = 'xmpp.settings_error_received',\n\n    // The conference properties (as advertised by jicofo) have changed\n    CONFERENCE_PROPERTIES_CHANGED = 'xmpp.conference_properties_changed',\n\n    /**\n     * This event is triggered when the ICE connects for the first time.\n     */\n    CONNECTION_ESTABLISHED = 'xmpp.connection.connected',\n\n    // Designates an event indicating that the connection to the XMPP server\n    // failed.\n    CONNECTION_FAILED = 'xmpp.connection.failed',\n\n    // Designates an event indicating that the media (ICE) connection was\n    // interrupted. This should go to the RTC module.\n    CONNECTION_INTERRUPTED = 'xmpp.connection.interrupted',\n\n    // Designates an event indicating that the media (ICE) connection was\n    // restored. This should go to the RTC module.\n    CONNECTION_RESTORED = 'xmpp.connection.restored',\n\n    // Designates an event indicating that the media (ICE) connection failed.\n    // This should go to the RTC module.\n    CONNECTION_ICE_FAILED = 'xmpp.connection.ice.failed',\n\n    // Designates an event indicating that the call has been migrated to a different\n    // bridge and that the client needs to be restarted for a successful transition.\n    CONNECTION_RESTARTED = 'xmpp.connection.restart',\n\n    /**\n     * Designates an event indicating connection status changes.\n     */\n    CONNECTION_STATUS_CHANGED = 'xmpp.connection.status.changed',\n\n    // Designates an event indicating that the display name of a participant\n    // has changed.\n    DISPLAY_NAME_CHANGED = 'xmpp.display_name_changed',\n\n    /**\n     * Chat room instance have been added to Strophe.emuc plugin.\n     */\n    EMUC_ROOM_ADDED = 'xmpp.emuc_room_added',\n\n    /**\n     * Chat room instance have been removed from Strophe.emuc plugin.\n     */\n    EMUC_ROOM_REMOVED = 'xmpp.emuc_room_removed',\n    ETHERPAD = 'xmpp.etherpad',\n    FOCUS_DISCONNECTED = 'xmpp.focus_disconnected',\n    FOCUS_LEFT = 'xmpp.focus_left',\n    GRACEFUL_SHUTDOWN = 'xmpp.graceful_shutdown',\n\n    /**\n     * Event fired when 'transport-replace' Jingle message has been received,\n     * before the new offer is set on the PeerConnection.\n     */\n    ICE_RESTARTING = 'rtc.ice_restarting',\n\n    /**\n     * Event fired after the 'transport-replace' message has been processed\n     * and the new offer has been set successfully.\n     */\n    ICE_RESTART_SUCCESS = 'rtc.ice_restart_success',\n\n    /**\n     * Designates an event indicating that we were kicked from the XMPP MUC.\n     * @param {boolean} isSelfPresence - whether it is for local participant\n     * or another participant.\n     * @param {string} actorJid - the jid of the participant who was initiator\n     * of the kick.\n     * @param {?string} participantJid - when it is not a kick for local participant,\n     * this is the jid of the participant which was kicked.\n     */\n    KICKED = 'xmpp.kicked',\n\n    // Designates an event indicating that our role in the XMPP MUC has changed.\n    LOCAL_ROLE_CHANGED = 'xmpp.localrole_changed',\n\n    /**\n     * Event fired when the unique meeting id is set.\n     */\n    MEETING_ID_SET = 'xmpp.meeting_id_set',\n\n    // Designates an event indicating that an XMPP message in the MUC was\n    // received.\n    MESSAGE_RECEIVED = 'xmpp.message_received',\n\n    // Designates an event indicating that an invite XMPP message in the MUC was\n    // received.\n    INVITE_MESSAGE_RECEIVED = 'xmpp.invite_message_received',\n\n    // Designates an event indicating that a private XMPP message in the MUC was\n    // received.\n    PRIVATE_MESSAGE_RECEIVED = 'xmpp.private_message_received',\n\n    // Designates an event indicating that a bot participant type had changed\n    MUC_MEMBER_BOT_TYPE_CHANGED = 'xmpp.muc_member_bot_type_changed',\n\n    // Designates an event indicating that the XMPP MUC was destroyed.\n    MUC_DESTROYED = 'xmpp.muc_destroyed',\n\n    // Designates an event indicating that we are currently in process of joining the XMPP MUC.\n    MUC_JOIN_IN_PROGRESS = 'xmpp.muc_join_in_progress',\n\n    // Designates an event indicating that we have joined the XMPP MUC.\n    MUC_JOINED = 'xmpp.muc_joined',\n\n    // Designates an event indicating that a participant joined the XMPP MUC.\n    MUC_MEMBER_JOINED = 'xmpp.muc_member_joined',\n\n    // Designates an event indicating that a participant left the XMPP MUC.\n    MUC_MEMBER_LEFT = 'xmpp.muc_member_left',\n\n    // Designates an event indicating that a participant joined the lobby XMPP MUC.\n    MUC_LOBBY_MEMBER_JOINED = 'xmpp.muc_lobby_member_joined',\n\n    // Designates an event indicating that a participant in the lobby XMPP MUC has been updated\n    MUC_LOBBY_MEMBER_UPDATED = 'xmpp.muc_lobby_member_updated',\n\n    // Designates an event indicating that a participant left the XMPP MUC.\n    MUC_LOBBY_MEMBER_LEFT = 'xmpp.muc_lobby_member_left',\n\n    // Designates an event indicating that a participant was denied access to a conference from the lobby XMPP MUC.\n    MUC_DENIED_ACCESS = 'xmpp.muc_denied access',\n\n    // Designates an event indicating that local participant left the muc\n    MUC_LEFT = 'xmpp.muc_left',\n\n    // Designates an event indicating that the MUC role of a participant has\n    // changed.\n    MUC_ROLE_CHANGED = 'xmpp.muc_role_changed',\n\n    // Designates an event indicating that the MUC has been locked or unlocked.\n    MUC_LOCK_CHANGED = 'xmpp.muc_lock_changed',\n\n    // Designates an event indicating that the MUC members only config has changed.\n    MUC_MEMBERS_ONLY_CHANGED = 'xmpp.muc_members_only_changed',\n\n    // Designates an event indicating that a participant in the XMPP MUC has\n    // advertised that they have audio muted (or unmuted).\n    PARTICIPANT_AUDIO_MUTED = 'xmpp.audio_muted',\n\n    // Designates an event indicating that a participant in the XMPP MUC has\n    // advertised that they have video muted (or unmuted).\n    PARTICIPANT_VIDEO_MUTED = 'xmpp.video_muted',\n\n    // Designates an event indicating that the video type (e.g. 'camera' or\n    // 'screen') for a participant has changed.\n    // Note = currently this event fires every time we receive presence from\n    // someone (regardless of whether or not the \"video type\" changed).\n    PARTICIPANT_VIDEO_TYPE_CHANGED = 'xmpp.video_type',\n\n    /**\n     * Indicates that the features of the participant has been changed.\n     */\n    PARTICIPANT_FEATURES_CHANGED = 'xmpp.participant_features_changed',\n    PASSWORD_REQUIRED = 'xmpp.password_required',\n\n    /**\n     * Indicates that phone number changed.\n     */\n    PHONE_NUMBER_CHANGED = 'conference.phoneNumberChanged',\n    PRESENCE_RECEIVED = 'xmpp.presence_received',\n    PRESENCE_STATUS = 'xmpp.presence_status',\n    PROMPT_FOR_LOGIN = 'xmpp.prompt_for_login',\n\n    // xmpp is connected and obtained user media\n    READY_TO_JOIN = 'xmpp.ready_to_join',\n\n    /**\n     * Indicates that recording state changed.\n     */\n    RECORDER_STATE_CHANGED = 'xmpp.recorderStateChanged',\n\n    // Designates an event indicating that we received statistics from a\n    // participant in the MUC.\n    REMOTE_STATS = 'xmpp.remote_stats',\n\n    /**\n     * Indicates that the offer / answer renegotiation has failed.\n     */\n    RENEGOTIATION_FAILED = 'xmpp.renegotiation_failed',\n    RESERVATION_ERROR = 'xmpp.room_reservation_error',\n    ROOM_CONNECT_ERROR = 'xmpp.room_connect_error',\n    ROOM_CONNECT_NOT_ALLOWED_ERROR = 'xmpp.room_connect_error.not_allowed',\n    ROOM_JOIN_ERROR = 'xmpp.room_join_error',\n    ROOM_CONNECT_MEMBERS_ONLY_ERROR = 'xmpp.room_connect_error.members_only',\n\n    /**\n     * Indicates that max users limit has been reached.\n     */\n    ROOM_MAX_USERS_ERROR = 'xmpp.room_max_users_error',\n\n    // Designates an event indicating that we sent an XMPP message to the MUC.\n    SENDING_CHAT_MESSAGE = 'xmpp.sending_chat_message',\n\n    // Designates an event indicating that we sent a private XMPP message to\n    // a specific user of the muc.\n    SENDING_PRIVATE_CHAT_MESSAGE = 'xmpp.sending_private_chat_message',\n\n    /**\n     * Event fired after receiving the confirmation about session accept.\n     */\n    SESSION_ACCEPT = 'xmpp.session_accept',\n\n    /**\n     * Event fired if we receive an error after sending the session accept.\n     */\n    SESSION_ACCEPT_ERROR = 'xmpp.session_accept_error',\n\n    /**\n     * Event fired when we do not get our 'session-accept' acknowledged by\n     * Jicofo. It most likely means that there is serious problem with our\n     * connection or XMPP server and we should reload the conference.\n     *\n     * We have seen that to happen in BOSH requests race condition when the BOSH\n     * request table containing the 'session-accept' was discarded by Prosody.\n     * Jicofo does send the RESULT immediately without any condition, so missing\n     * packets means that most likely it has never seen our IQ.\n     */\n    SESSION_ACCEPT_TIMEOUT = 'xmpp.session_accept_timeout',\n\n    /**\n     * Event fired after successful sending of jingle source-add.\n     */\n    SOURCE_ADD = 'xmpp.source_add',\n\n    /**\n     * Event fired after receiving an error sending of jingle source-add.\n     */\n    SOURCE_ADD_ERROR = 'xmpp.source_add_error',\n\n    /**\n     * Event fired after successful sending of jingle source-remove.\n     */\n    SOURCE_REMOVE = 'xmpp.source_remove',\n\n    /**\n     * Event fired after receiving an error sending of jingle source-remove.\n     */\n    SOURCE_REMOVE_ERROR = 'xmpp.source_remove_error',\n\n    /**\n     * Event fired when speaker stats update message is received.\n     */\n    SPEAKER_STATS_RECEIVED = 'xmpp.speaker_stats_received',\n\n    /**\n     * Event fired when conference creation timestamp is received.\n     */\n    CONFERENCE_TIMESTAMP_RECEIVED = 'xmpp.conference_timestamp_received',\n\n    /**\n     * Event fired when we receive a message for AV moderation approved for the local participant.\n     */\n    AV_MODERATION_APPROVED = 'xmpp.av_moderation.approved',\n\n    /**\n    * Event fired when we receive a message for AV moderation rejected for the local participant.\n    */\n    AV_MODERATION_REJECTED = 'xmpp.av_moderation.rejected',\n\n    /**\n     * Event fired when we receive a message for AV moderation.\n     */\n    AV_MODERATION_RECEIVED = 'xmpp.av_moderation.received',\n\n    /**\n     * Event fired when the moderation enable/disable changes.\n     */\n    AV_MODERATION_CHANGED = 'xmpp.av_moderation.changed',\n\n    /**\n     * Event fired when we receive message that a new jid was approved.\n     */\n    AV_MODERATION_PARTICIPANT_APPROVED = 'xmpp.av_moderation.participant.approved',\n\n    /**\n     * Event fired when we receive message that a new jid was approved.\n     */\n    AV_MODERATION_PARTICIPANT_REJECTED = 'xmpp.av_moderation.participant.rejected',\n\n    /**\n     * Event fired when a participant is requested to join a given (breakout) room.\n     */\n    BREAKOUT_ROOMS_MOVE_TO_ROOM = 'xmpp.breakout-rooms.move-to-room',\n\n    /**\n     * Event fired when we receive a message for breakout rooms.\n     */\n    BREAKOUT_ROOMS_EVENT = 'xmpp.breakout-rooms.event',\n\n    /**\n     * Event fired when the breakout rooms data was updated.\n     */\n    BREAKOUT_ROOMS_UPDATED = 'xmpp.breakout-rooms.updated',\n\n    // Designates an event indicating that we should join the conference with\n    // audio and/or video muted.\n    START_MUTED_FROM_FOCUS = 'xmpp.start_muted_from_focus',\n\n    // Designates an event indicating that the subject of the XMPP MUC has\n    // changed.\n    SUBJECT_CHANGED = 'xmpp.subject_changed',\n\n    // FIXME: how does it belong to XMPP ? - it's detected by the PeerConnection\n    // suspending detected\n    SUSPEND_DETECTED = 'xmpp.suspend_detected',\n\n    /**\n     * Notifies for transcription status changes. The event provides the\n     * following parameters to its listeners:\n     *\n     * @param {String} status - The new status.\n     */\n    TRANSCRIPTION_STATUS_CHANGED = 'xmpp.transcription_status_changed',\n\n    /**\n     * Event fired when 'transport-info' with new ICE candidates is received.\n     */\n    TRANSPORT_INFO = 'xmpp.transportinfo.jingle',\n\n    /**\n     * Indicates that video SIP GW state changed.\n     *\n     * @param {VideoSIPGWStatusConstants} status - Any of the following statuses:\n     * STATUS_BUSY, STATUS_AVAILABLE or STATUS_UNDEFINED.\n     */\n    VIDEO_SIP_GW_AVAILABILITY_CHANGED = 'xmpp.videoSIPGWAvailabilityChanged',\n\n    /**\n     * Indicates that video SIP GW Session state changed.\n     * The statuses are any of the following statuses:\n     * STATE_ON, STATE_OFF, STATE_PENDING, STATE_RETRYING, STATE_FAILED.\n     * {@see VideoSIPGWStateConstants}\n     *\n     * @param {options} event - {address, oldState, newState, displayName}.\n     */\n    VIDEO_SIP_GW_SESSION_STATE_CHANGED = 'xmpp.videoSIPGWSessionStateChanged',\n\n    // Designates an event indicating that the local ICE connection state has\n    // changed.\n    ICE_CONNECTION_STATE_CHANGED = 'xmpp.ice_connection_state_changed',\n\n    /**\n     * Event which is emitted when the body in an XMPP message in the MUC\n     * contains JSON\n     * TODO: this event contains a typo (xmmp vs xmpp) but it's unlikely this can be changed now\n     */\n    JSON_MESSAGE_RECEIVED = 'xmmp.json_message_received'\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.amdO = {};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","// startup\n// Load entry module and return exports\n// This entry module used 'module' so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(4449);\n"],"names":["root","factory","exports","module","define","amd","self","JitsiConferenceErrors","AUTHENTICATION_REQUIRED","CHAT_ERROR","SETTINGS_ERROR","CONFERENCE_DESTROYED","CONFERENCE_MAX_USERS","CONNECTION_ERROR","CONFERENCE_RESTARTED","NOT_ALLOWED_ERROR","MEMBERS_ONLY_ERROR","CONFERENCE_ACCESS_DENIED","FOCUS_DISCONNECTED","FOCUS_LEFT","GRACEFUL_SHUTDOWN","ICE_FAILED","INCOMPATIBLE_SERVER_VERSIONS","OFFER_ANSWER_FAILED","PASSWORD_NOT_SUPPORTED","PASSWORD_REQUIRED","RESERVATION_ERROR","VIDEOBRIDGE_NOT_AVAILABLE","JitsiConferenceEvents","AUDIO_INPUT_STATE_CHANGE","AUDIO_UNMUTE_PERMISSIONS_CHANGED","AUTH_STATUS_CHANGED","BEFORE_STATISTICS_DISPOSED","CONFERENCE_ERROR","CONFERENCE_FAILED","CONFERENCE_JOIN_IN_PROGRESS","CONFERENCE_JOINED","CONFERENCE_LEFT","CONFERENCE_UNIQUE_ID_SET","CONNECTION_ESTABLISHED","CONNECTION_INTERRUPTED","CONNECTION_RESTORED","DATA_CHANNEL_OPENED","DISPLAY_NAME_CHANGED","DOMINANT_SPEAKER_CHANGED","CONFERENCE_CREATED_TIMESTAMP","DTMF_SUPPORT_CHANGED","ENDPOINT_MESSAGE_RECEIVED","ENDPOINT_STATS_RECEIVED","JVB121_STATUS","KICKED","PARTICIPANT_KICKED","LAST_N_ENDPOINTS_CHANGED","FORWARDED_SOURCES_CHANGED","LOCK_STATE_CHANGED","SERVER_REGION_CHANGED","_MEDIA_SESSION_STARTED","_MEDIA_SESSION_ACTIVE_CHANGED","MEMBERS_ONLY_CHANGED","MESSAGE_RECEIVED","NO_AUDIO_INPUT","NOISY_MIC","NON_PARTICIPANT_MESSAGE_RECEIVED","PRIVATE_MESSAGE_RECEIVED","PARTICIPANT_CONN_STATUS_CHANGED","PARTCIPANT_FEATURES_CHANGED","PARTICIPANT_PROPERTY_CHANGED","P2P_STATUS","PHONE_NUMBER_CHANGED","PROPERTIES_CHANGED","RECORDER_STATE_CHANGED","VIDEO_SIP_GW_AVAILABILITY_CHANGED","VIDEO_SIP_GW_SESSION_STATE_CHANGED","START_MUTED_POLICY_CHANGED","STARTED_MUTED","SUBJECT_CHANGED","SUSPEND_DETECTED","TALK_WHILE_MUTED","TRACK_ADDED","TRACK_AUDIO_LEVEL_CHANGED","TRACK_MUTE_CHANGED","TRACK_REMOVED","TRACK_UNMUTE_REJECTED","TRANSCRIPTION_STATUS_CHANGED","USER_JOINED","USER_LEFT","USER_ROLE_CHANGED","USER_STATUS_CHANGED","VIDEO_UNMUTE_PERMISSIONS_CHANGED","BOT_TYPE_CHANGED","LOBBY_USER_JOINED","LOBBY_USER_UPDATED","LOBBY_USER_LEFT","AV_MODERATION_APPROVED","AV_MODERATION_REJECTED","AV_MODERATION_CHANGED","AV_MODERATION_PARTICIPANT_APPROVED","AV_MODERATION_PARTICIPANT_REJECTED","FACE_LANDMARK_ADDED","BREAKOUT_ROOMS_MOVE_TO_ROOM","BREAKOUT_ROOMS_UPDATED","SUBTITLES_RECEIVED","ANALYTICS_EVENT_RECEIVED","TRACK_UPDATED","CALLSTATS_SCRIPT_URL","JitsiTrackErrors","CONSTRAINT_FAILED","ELECTRON_DESKTOP_PICKER_ERROR","ELECTRON_DESKTOP_PICKER_NOT_FOUND","GENERAL","NOT_FOUND","PERMISSION_DENIED","SCREENSHARING_GENERIC_ERROR","SCREENSHARING_USER_CANCELED","TIMEOUT","TRACK_IS_DISPOSED","TRACK_NO_STREAM_FOUND","UNSUPPORTED_RESOLUTION","TRACK_ERROR_TO_MESSAGE_MAP","JitsiTrackError","error","options","devices","name","this","gum","constraints","Array","isArray","slice","undefined","message","join","constraintName","constraint","video","indexOf","failedConstraintName","mandatory","minWidth","minHeight","getResolutionFromFailedConstraint","Error","stack","prototype","Object","create","constructor","JitsiTrackEvents","LOCAL_TRACK_STOPPED","TRACK_AUDIO_OUTPUT_CHANGED","TRACK_VIDEOTYPE_CHANGED","NO_DATA_FROM_SOURCE","TRACK_STREAMING_STATUS_CHANGED","AnalyticsEvents","TYPE_OPERATIONAL","TYPE_PAGE","TYPE_TRACK","TYPE_UI","ACTION_JINGLE_RESTART","ACTION_JINGLE_SA_TIMEOUT","ACTION_JINGLE_SI_RECEIVED","ACTION_JINGLE_SI_TIMEOUT","ACTION_JINGLE_TERMINATE","ACTION_JINGLE_TR_RECEIVED","ACTION_JINGLE_TR_SUCCESS","ACTION_P2P_DECLINED","ACTION_P2P_ESTABLISHED","ACTION_P2P_FAILED","ACTION_P2P_SWITCH_TO_JVB","AVAILABLE_DEVICE","CONNECTION_DISCONNECTED","FEEDBACK","ICE_DURATION","ICE_ESTABLISHMENT_DURATION_DIFF","ICE_STATE_CHANGED","NO_BYTES_SENT","TRACK_UNMUTED","createConferenceEvent","action","attributes","source","type","createConnectionStageReachedEvent","stage","actionSubject","createGetUserMediaEvent","createJingleEvent","createP2PEvent","createRemotelyMutedEvent","mediaType","createRtpStatsEvent","Events","AUDIO_LEVEL","BEFORE_DISPOSED","BYTE_SENT_STATS","CONNECTION_STATS","LONG_TASKS_STATS","CHROME","OPERA","FIREFOX","INTERNET_EXPLORER","SAFARI","NWJS","ELECTRON","REACT_NATIVE","UNKNOWN","bowserNameToJitsiName","_detectElectron","userAgent","navigator","match","version","_detectNWJS","_detectReactNative","product","length","DummyLocalStorage","EventEmitter","key","value","super","defineProperty","enumerable","configurable","writable","clear","_storage","keys","getItem","keyName","setItem","keyValue","removeItem","n","serialize","JSON","stringify","JitsiLocalStorage","window","localStorage","_localStorageDisabled","ignore","console","warn","isLocalStorageDisabled","emit","dontEmitChangedEvent","i","localStorageContent","jitsiLocalStorage","logger","getLogger","browserInfo","_bowser","Bowser","detectedBrowserInfo","bowser","detectors","getBrowserName","getBrowserVersion","Number","parseInt","_detectChromiumBased","_detect","_name","_version","getName","isChrome","isOpera","isFirefox","isIExplorer","isSafari","isNWJS","isElectron","isReactNative","getVersion","_checkCondition","checkTree","satisfies","isVersionGreaterThan","isVersionLessThan","isVersionEqualTo","info","doesVideoMuteByStreamRemove","isChromiumBased","isWebKitBased","isIosBrowser","maxTouchPoints","platform","Boolean","test","isEngine","mediaDevices","getUserMedia","RTCRtpTransceiver","isTwa","matchMedia","matches","isSupported","_getSafariVersion","_getChromiumBasedVersion","isSupportedAndroidBrowser","isSupportedIOSBrowser","_getIOSVersion","isUserInteractionRequiredForUnmute","supportsVideoMuteOnConnInterrupted","supportsBandwidthStatistics","supportsCodecPreferences","RTCRtpReceiver","getCapabilities","supportsDeviceChangeEvent","ondevicechange","addEventListener","supportsPerformanceObserver","PerformanceObserver","supportedEntryTypes","supportsReceiverStats","supportsRTTStatistics","supportsVP9","usesSdpMungingForSimulcast","usesRidsForSimulcast","supportsGetDisplayMedia","getDisplayMedia","supportsEncodedTransform","RTCRtpScriptTransform","supportsInsertableStreams","RTCRtpSender","createEncodedStreams","stream","ReadableStream","postMessage","supportsAudioRed","codecs","some","codec","mimeType","supportsUnifiedPlan","supportsVADDetection","supportsRTX","process","versions","chromium","ua","reset","disposed","analyticsHandlers","Set","cache","permanentProperties","conferenceName","addPermanentProperties","browser","dispose","size","forEach","handler","setAnalyticsHandlers","handlers","_setUserProperties","event","_sendEvent","setUserProperties","properties","setConferenceName","sendEvent","eventName","_verifyRequiredFields","objectType","containerType","containerId","objectId","_maybeCacheEvent","push","splice","e","require","wrtcFuncNames","reportType","_fabrics","CallStats","msg","backend","log","backendInitialized","atLeastOneFabric","defaultInstance","callStatsInstance","fabrics","values","hasFabric","debug","_addNewFabric","_emptyReportQueue","csInstance","defaultConfID","confID","defaultPC","peerconnection","report","reportsQueue","errorData","data","_reportError","pc","eventData","sendFabricEvent","associateMstWithUserID","callStatsId","ssrc","usageLabel","cs","_error","reportError","theBackend","tryCatchMethods","methodName","originalMethod","theArguments","apply","GlobalOnErrorHandler","debugMethods","originalReportError","args","call","exception","CallStatsBackend","callstats","_traceAndCatchBackendCalls","userID","aliasName","userName","callStatsID","callStatsSecret","configParams","applicationName","applicationVersion","siteID","initialize","_initCallback","getWiFiStatsMethod","attachWifiStatsHandler","then","result","parse","addresses","catch","devicesData","_reportEvent","conferenceID","overall","comment","Promise","resolve","reject","sendUserFeedback","status","reason","mute","tpc","remoteUserID","add","fabricAttributes","remoteEndpointType","isP2P","endpointType","peer","server","ret","addNewFabric","fabricUsage","multiplex","_addNewFabricCallback","success","associateStreamWithVideoTag","isLocal","streamEndpointId","sendDominantSpeakerEvent","sendTerminateEvent","fabricEvent","fabricTerminated","delete","sendIceConnectionFailedEvent","sendCreateOfferFailed","sendCreateAnswerFailed","sendResumeOrHoldEvent","isResume","sendScreenSharingEvent","start","sendSetLocalDescFailed","sendSetRemoteDescFailed","sendAddIceCandidateFailed","AudioContext","webkitAudioContext","context","LocalStatsCollector","interval","callback","intervalId","intervalMilis","audioLevel","analyser","safeCounterIncrement","number","nextValue","MAX_SAFE_INTEGER","calculateAverage","valueArray","reduce","a","b","filterPositiveValues","filter","isLocalStatsSupported","resume","createAnalyser","smoothingTimeConstant","fftSize","createMediaStreamSource","connect","setInterval","array","Uint8Array","frequencyBinCount","getByteTimeDomainData","samples","maxVolume","parseFloat","toFixed","timeDomainDataToAudioLevel","newLevel","lastLevel","diff","animateLevel","stop","clearInterval","disconnect","disconnectAudioContext","async","close","connectAudioContext","suspend","RunningAverage","average","addNext","getAverage","PerformanceObserverStats","emitter","statsInterval","eventEmitter","longTasks","maxDuration","performanceStatsInterval","stats","getLongTasksStats","avgRatePerMinute","maxDurationMs","startObserver","longTaskEventHandler","list","entries","getEntries","task","Math","max","duration","observer","observe","buffered","startTime","Date","now","longTasksIntervalId","_lastTimeStamp","rate","StatisticsEvents","stopObserver","MediaType","init","flags","_runInLiteMode","runInLiteMode","_sourceNameSignaling","sourceNameSignaling","_receiveMultipleVideoStreams","receiveMultipleVideoStreams","_sendMultipleVideoStreams","sendMultipleVideoStreams","_ssrcRewriting","ssrcRewritingOnBridgeSupported","_usesUnifiedPlan","enableUnifiedOnChrome","isMultiStreamSupportEnabled","isReceiveMultipleVideoStreamsSupported","isRunInLiteModeEnabled","isSourceNameSignalingEnabled","isSsrcRewritingSupported","calculatePacketLoss","lostPackets","totalPackets","round","SsrcStats","loss","bitrate","download","upload","resolution","framerate","ConferenceStats","bandwidth","packetLoss","transport","StatsCollector","audioLevelsInterval","baselineAudioLevelsReport","currentAudioLevelsReport","currentStatsReport","previousStatsReport","audioLevelReportHistory","audioLevelsIntervalId","conferenceStats","audioLevelsIntervalMilis","speakerList","statsIntervalId","statsIntervalMilis","ssrc2stats","Map","setLoss","setResolution","addBitrate","resetBitrate","setFramerate","setCodec","setSpeakerList","errorCallback","callErrorHandler","startAudioLevelStats","audioLevels","getAudioLevels","hasOwnProperty","getStats","processAudioLevelReport","processStats","processStatsReport","_processAndEmitReport","bitrateDownload","bitrateUpload","resolutions","framerates","audioCodec","videoCodec","audioBitrateDownload","audioBitrateUpload","videoBitrateDownload","videoBitrateUpload","ssrcStats","isDownloadStream","packetsTotal","packetsLost","track","getTrackBySSRC","isAudioTrack","FeatureFlags","sourceName","getSourceName","width","height","codecDesc","participantId","getParticipantId","userResolutions","userFramerates","userCodecs","audio","total","avgAudioLevels","localAvgAudioLevels","avgAudioLevel","sum","currentValue","getNonNegativeValue","v","isNaN","_calculateBitrate","before","fieldName","bytesNow","bytesBefore","bytesProcessed","timeMs","timestamp","bitrateKbps","byteSentStats","nominated","state","availableIncomingBitrate","availableOutgoingBitrate","remoteUsedCandidate","get","remoteCandidateId","localUsedCandidate","localCandidateId","ip","address","port","localip","protocol","conferenceStatsTransport","t","p2p","localCandidateType","candidateType","remoteCandidateType","networkType","rtt","currentRoundTripTime","id","set","packetsNow","packetsBefore","packetsDiff","packetsLostNow","packetsLostBefore","packetsLostDiff","frameHeight","frameWidth","frameRate","framesPerSecond","bytesSent","codecId","codecShortType","split","kind","VIDEO","remoteSource","localVideoTracks","getLocalTracks","getSsrcByTrackId","trackIdentifier","framesSent","numberOfActiveStreams","getActiveSimulcastStreams","getLocalSSRC","AUDIO","_instances","isCallstatsLoaded","_initCallStatsBackend","isBackendInitialized","initBackend","Statistics","xmpp","rtpStatsMap","callStatsIntegrationEnabled","enableCallStats","disableThirdPartyRequests","callStatsApplicationLogsDisabled","ScriptUtil","customScriptUrl","loadCallStatsAPI","callsStatsInstances","instances","audioLevelsEnabled","disableAudioLevels","pcStatsInterval","longTasksStatsInterval","analytics","analyticsEventEmitter","startRemoteStats","stopRemoteStats","rtpStats","RTPStats","localStats","startLocalStats","localStat","LocalStats","stopLocalStats","getOriginalStream","addAudioLevelListener","listener","on","removeAudioLevelListener","removeListener","addBeforeDisposedListener","removeBeforeDisposedListener","addConnectionStatsListener","removeConnectionStatsListener","addByteSentStatsListener","removeByteSentStatsListener","addLongTasksStatsListener","attachLongTasksStats","conference","performanceObserverStats","removeLongTasksStatsListener","from","callStats","stopCallStats","tpcId","_stopRemoteStats","removeAllListeners","startCallStats","has","endsWith","roomName","lastIndexOf","newInstance","_getAllCallStatsInstances","csInstances","statistics","isCallstatsEnabled","sendConnectionResumeOrHoldEvent","instance","sendMuteEvent","muted","roomJid","sendActiveDeviceListEvent","globalSet","userId","sendGetUserMediaFailed","err","formatJitsiTrackErrorForCallStats","sendLog","m","globalSubSet","next","csPerStats","sendApplicationLog","sendFeedback","rating","LOCAL_JID","reportGlobalError","sendAnalyticsAndLog","eventToLog","sendAnalytics","addAnalyticsEventListener","removeAnalyticsEventListener","JitsiConferenceEventManager","xmppListeners","session","p2pJingleSession","jvbJingleSession","isMuted","getType","setupChatRoomListeners","chatRoom","room","chatRoomForwarder","EventEmitterForwarder","addListener","XMPPEvents","jingleSession","rtc","closeBridgeChannel","features","participant","getParticipantById","Strophe","setFeatures","offerIq","_setBridgeChannel","actor","mutedByFocusActor","setAudioMute","isMutedByFocus","mutedVideoByFocusActor","setVideoMute","isVideoMutedByFocus","forward","_onMucJoined","isJvbConnectionInterrupted","connectionTimes","leave","_onConferenceRestarted","_onIceConnectionFailed","jid","resource","getStatus","setTerminator","setInitiator","setParticipantPropertyListener","node","setProperty","tagName","substring","onMemberKicked","bind","onSuspendDetected","onMemberJoined","_onMemberBotTypeChanged","onMemberLeft","onDisplayNameChanged","role","onLocalRoleChanged","isModerator","recorderSession","logObject","getError","onUserRoleChanged","AuthenticationEvents","authEnabled","authIdentity","txt","myJid","ts","_status","payload","addPresenceListener","myUserId","startAudioMuted","startVideoMuted","updated","startMutedPolicy","setupRTCListeners","RTCEvents","onRemoteTrackAdded","onRemoteTrackRemoved","dominant","previous","participants","_hidden","lastDominantSpeaker","roomjid","performance","ufrag","isVideoTrack","videoType","VideoType","removeXMPPListeners","setupXMPPListeners","_addConferenceXMPPListener","onIncomingCall","onCallAccepted","onTransportInfo","onCallEnded","audioMuted","videoMuted","config","ignoreStartMuted","createdTimestamp","actorJid","actorParticipant","getParticipants","find","p","getJid","enabled","setupStatisticsListeners","level","setAudioLevel","startSilent","onByteSentStatsReceived","ParticipantConnectionStatus","ACTIVE","INACTIVE","INTERRUPTED","RESTORING","ParticipantConnectionStatusHandler","isConnectionActiveByJvb","isInLastN","isRestoringTimedout","isVideoMuted","isVideoTrackFrozen","trackTimers","connStatusFromJvb","outOfLastNTimeout","p2pRtcMuteTimeout","rtcMuteTimeout","rtcMutedTimestamp","enteredLastNTimestamp","restoringTimers","connectionStatusMap","_getVideoFrozenTimeout","isP2PActive","_onEndpointConnStatusChanged","onEndpointConnStatusChanged","_onP2PStatus","refreshConnectionStatusForAll","_onUserLeft","onUserLeft","_onTrackRtcMuted","onTrackRtcMuted","_onTrackRtcUnmuted","onTrackRtcUnmuted","_onRemoteTrackAdded","_onRemoteTrackRemoved","_onSignallingMuteChanged","onSignallingMuteChanged","_onTrackVideoTypeChanged","onTrackVideoTypeChanged","_onLastNChanged","_onLastNValueChanged","off","participantIds","clearTimeout","clearRtcMutedTimestamp","endpointId","isActive","figureOutConnectionStatus","_changeConnectionStatus","newStatus","getConnectionStatus","getId","_setConnectionStatus","remoteTrack","hasAnyVideoRTCMuted","hasAnyVideoTrackWebRTCMuted","timeout","inP2PMode","isRestoringTimedOut","_isRestoringTimedout","audioOnlyMode","getLastN","isConnActiveByJvb","newState","_getNewStateForP2PMode","_getNewStateForJvbMode","_clearRestoringTimer","oldConnectionStatus","connectionStatus","nowMs","maybeSendParticipantConnectionStatusEvent","startedMs","videoTracks","getTracksByMediaType","participantConnectionStatus","createParticipantConnectionStatusEvent","leavingLastN","enteringLastN","rTimer","setTimeout","JitsiParticipant","displayName","hidden","statsID","identity","isReplacing","isReplaced","_jid","_id","_conference","_displayName","_supportsDTMF","_tracks","_role","_statsID","_connectionStatus","_properties","_identity","_isReplacing","_isReplaced","_features","getConference","getProperty","getTracks","jitsiTrack","isWebRTCTrackMuted","oldValue","getDisplayName","getStatsID","isHidden","isHiddenFromRecorder","user","isAudioMuted","_isMediaTypeMuted","getRole","setRole","newRole","setIsReplacing","newIsReplacing","setIsReplaced","newIsReplaced","supportsDTMF","getFeatures","hasFeature","feature","newFeatures","getBotType","_botType","setBotType","newBotType","getConnectionJid","_connectionJid","setConnectionJid","newJid","JitsiConnectionEvents","CONNECTION_FAILED","WRONG_STATE","DISPLAY_NAME_REQUIRED","JitsiConnectionErrors","CONNECTION_DROPPED_ERROR","OTHER_ERROR","SERVER_ERROR","Deferred","promise","clearRejectTimeout","_timeout","setRejectTimeout","ms","Listenable","removeEventListener","kJitsiE2EE","Symbol","E2EEcontext","sharedKey","baseUrl","ljm","document","querySelector","idx","src","workerUrl","workerBlob","Blob","URL","createObjectURL","_worker","Worker","onerror","operation","cleanup","cleanupAll","handleReceiver","receiver","transform","receiverStreams","readableStream","readable","writableStream","handleSender","sender","senderStreams","setKey","keyIndex","KeyHandler","e2eeCtx","E2EEContext","_enabling","_onMediaSessionStarted","_onLocalTrackAdded","_setupReceiverE2EEForTrack","_trackMuteChanged","isEnabled","_setEnabled","setLocalParticipantProperty","_restartMediaSessions","setEncryptionKey","getMediaSessions","_setupSenderE2EEForTrack","localTracks","findReceiverForTrack","findSenderForTrack","ExternallyManagedKeyHandler","keyInfo","encryptionKey","index","v4","REQ_TIMEOUT","OLM_MESSAGE_TYPE","OLM_MESSAGE_TYPES","kOlmData","OlmAdapterEvents","OLM_ID_KEY_READY","PARTICIPANT_E2EE_CHANNEL_READY","PARTICIPANT_KEY_UPDATED","OlmAdapter","_conf","_init","_key","_keyIndex","_reqs","_sessionInitialization","_bootstrapOlm","_onEndpointMessageReceived","_onConferenceLeft","_onParticipantLeft","_onParticipantPropertyChanged","promises","localParticipantId","FEATURE_E2EE","_sendSessionInit","allSettled","Olm","pId","olmData","_getParticipantOlmData","uuid","uuidv4","JITSI_MEET_MUC_TYPE","olm","ciphertext","_encryptKeyInfo","d","_sendMessage","updateCurrentKey","clearParticipantSession","free","clearAllParticipantsSessions","_olmAccount","Account","idKeys","identity_keys","_idKey","curve25519","get_library_version","_onIdKeyReady","idKey","_onParticipantE2EEChannelReady","base64js","encrypt","_sendError","Session","create_outbound","otKey","ack","pendingSessionUuid","create_inbound","body","remove_one_time_keys","decrypt","json","safeJsonParse","lastKey","isEqual","newValue","isE2EEEnabled","sendMessage","generate_one_time_keys","otKeys","one_time_keys","mark_keys_as_published","events","ManagedKeyHandler","_conferenceJoined","_olmAdapter","_rotateKey","debounce","_rotateKeyImpl","_ratchetKey","_ratchetKeyImpl","_onParticipantKeyUpdated","_onParticipantJoined","initSessions","_generateKey","updateKey","material","keyBytes","crypto","subtle","importKey","newKey","textEncoder","TextEncoder","deriveBits","salt","encode","hash","ArrayBuffer","ratchet","getRandomValues","E2EEncryption","e2ee","_externallyManaged","externallyManagedKey","_keyHandler","testing","disableE2EE","enableEncodedTransformSupport","setEnabled","IDENTITY_PROPERTIES","IDENTITY_PROPERTIES_FOR_COMPARE","compareIdentities","res","parseDiscoInfo","identities","$","each","_","el","getAttribute","category","Caps","connection","disco","rooms","externalFeatures","emuc","_addChatRoom","_removeChatRoom","addFeature","submit","external","_generateVersion","_updateRoomWithExternalFeatures","removeFeature","sendPresence","removeFromPresence","children","f","addOrReplaceInPresence","getFeaturesAndIdentities","_getDiscoInfo","response","_fixChatRoomPresenceMap","xmlns","ver","_notifyVersionChanged","sortedIdentities","sort","accumulatedValue","tmp","sortedFeatures","b64_sha1","generateSha","_identities","NETWORK_INFO_EVENT","_current","isOnline","updateNetworkInfo","ResumeTask","stropheConnection","_stropheConn","_resumeRetryN","_retryDelay","retryDelay","schedule","_cancelResume","_networkOnlineListener","NetworkInfo","_scheduleResume","_resumeTimeout","min","retry","minDelay","base","floor","random","pow","getJitterDelay","_resumeConnection","streamManagement","resumeToken","getResumeToken","url","service","search","pattern","oldToken","replace","toString","cancel","LastRequestTracker","_lastSuccess","_lastFailedMessage","startTracking","xmppConnection","originalRawInput","rawInput","rawMessage","includes","connected","getLastFailedMessage","getTimeSinceLastSuccess","getConnectionPluginDefinition","ConnectionPluginListenable","PingConnectionPlugin","ConnectionPlugin","getTimeSinceLastServerResponse","onPingThresholdExceeded","pingOptions","failedPings","_onPingThresholdExceeded","_getTimeSinceLastServerResponse","pingInterval","pingTimeout","pingThreshold","threshold","pingTimestampsToKeep","pingExecIntervals","ping","_addPingExecutionTimestamp","iq","$iq","to","c","sendIQ2","startInterval","remoteJid","_lastServerCheck","errmsg","stopInterval","getTime","shift","getPingSuspendTime","pingIntervals","maxInterval","previousTS","currentInterval","XmppConnection","CONN_STATUS_CHANGED","CONN_SHARD_CHANGED","Status","enableWebsocketResume","websocketKeepAlive","websocketKeepAliveUrl","serviceUrl","shard","xmppPing","_options","_usesWebsocket","startsWith","maxRetries","_rawInputTracker","LastSuccessTracker","_resumeTask","_deferredIQs","addConnectionPlugin","_onPingErrorThresholdExceeded","_oneSuccessfulConnect","websocket","_proto","socket","isUsingWebSocket","readyState","WebSocket","OPEN","disconnecting","domain","lastResponseHeaders","pingDomain","_maybeStartWSKeepAlive","plugin","addHandler","attach","sid","rid","_stropheConnectionCb","pass","targetCallback","blockCallback","_maybeEnableStreamResume","_keepAliveAndCheckShard","_processDeferredIQs","_tryResumingConnection","_wsKeepAlive","_clearDeferredIQs","deferred","closeWebsocket","_closeSocket","_onClose","flush","enable","intervalWithJitter","fetch","responseShard","headers","timeLeft","sendIQ","send","stanza","elem","errback","sendUnavailableBeacon","sendBeacon","_changeConnectStatus","_buildBody","attrs","pres","$pres","cnode","tree","_abortAllRequests","_doDisconnect","JitsiTranscriptionStatus","ON","OFF","AVModeration","_xmpp","_mainRoom","_moderationEnabledByType","_whitelistAudio","_whitelistVideo","_onMessage","avModerationComponentAddress","$msg","up","approve","jidToWhitelist","jidToBlacklist","obj","removed","media","approved","whitelists","newWhitelists","oldList","newList","x","FEATURE_KEY","BREAKOUT_ROOM_ACTIONS","ADD","REMOVE","MOVE_TO_ROOM","BREAKOUT_ROOM_EVENTS","BreakoutRooms","_handleMessages","_rooms","createBreakoutRoom","subject","removeBreakoutRoom","breakoutRoomJid","sendParticipantToRoom","participantJid","getComponentAddress","breakoutRoomsComponentAddress","_setIsBreakoutRoom","isBreakoutRoom","_isBreakoutRoom","myroomjid","_setMainRoomJid","_mainRoomJid","getMainRoomJid","EMAIL_COMMAND","Lobby","mainRoom","maybeJoinLobbyRoom","_maybeJoinLobbyRoom","lobbyRoomJid","lobbySupported","setMembersOnly","disable","lobbyRoom","membersOnlyEnabled","sendPrivateMessage","getLocalId","addMessageListener","removeMessageHandler","setLobbyRoomJid","joined","email","customDomain","createRoom","disableDiscoInfo","disableFocus","enableLobby","nick","isHiddenDomain","botType","members","getBreakoutRooms","avatar","j","clean","isSelfPresence","invitePassword","denyAccess","kick","approveAccess","mainRoomJid","memberRoomJid","msgToSend","_callStatsUserName","_machineId","externalStorage","callStatsUserName","username","UsernameGenerator","generateCallStatsUserName","machineId","amDid","jitsiMeetId","_p8","generateJitsiMeetId","sessionId","substr","createExpBackoffTimer","step","count","Moderator","origin","location","Settings","xmppService","getNextTimeout","getNextErrorTimeout","externalAuthEnabled","sipGatewayEnabled","attachEvent","isExternalAuthEnabled","isSipGatewayEnabled","onMucMemberLeft","setFocusUserJid","focusJid","focusUserJid","getFocusUserJid","getFocusComponent","focusComponent","hosts","focus","createConferenceIq","machineUID","disableRtx","audioPacketDelay","startBitrate","minBitrate","rtcstatsEnabled","callstatsDisabled","parseSessionId","resultIq","attr","parseConfigOptions","authenticationEnabled","IDENTITY_UPDATED","allocateConferenceFocus","_allocateConferenceFocusSuccess","_allocateConferenceFocusError","invalidSession","reservationErr","errorCode","errorTextNode","errorMsg","text","anonymousdomain","waitMs","retrySec","authenticate","errorIq","prop","getLoginUrl","urlCallback","failureCallback","_getLoginUrl","popup","urlCb","failureCb","str","decodeURIComponent","getPopupLoginUrl","logout","logoutUrl","parser","packet2JSON","xmlElement","nodes","child","json2packet","packet","filterNodeFromPresenceJSON","nodeName","MEMBERS_AFFILIATIONS","ChatRoom","password","XMPP","replaceParticipant","presMap","presHandlers","_removeConnListeners","inProgressEmitted","focusMucJid","noBridgeAvailable","moderator","lobby","avModeration","breakoutRooms","initPresenceMap","lastPresences","phoneNumber","phonePin","participantPropertyListener","locked","transcriptionStatus","xns","statsId","presenceUpdateTime","onConnStatusChanged","fromJoin","billingId","presenceSyncTime","doLeave","discoRoomInfo","getInfo","meetingIdValEl","setMeetingId","membersOnly","lobbyRoomField","isBreakoutField","breakoutMainRoomField","meetingId","createNonAnonymousRoom","getForm","form","formSubmit","CONNECTED","onPresence","member","statusEl","getElementsByTagName","textContent","hasStatusUpdate","hasVersionUpdate","xElement","getElementsByTagNameNS","mucUserItem","isReplaceParticipant","affiliation","isFocus","hiddenDomain","isTranscriber","innerHTML","toLowerCase","fromHiddenDomain","presence","xEl","remove","extractIdentityInformation","userInfo","tags","hiddenFromRecorderFeatureEnabled","tag","groupInfo","group","_extractFeatures","_initFocus","memberOfThis","displayJids","restartByTerminateSupported","supportsRestartByTerminate","att","phone","pin","processNode","var","focusFeatures","tagHandlers","elementName","setSubject","onParticipantLeft","skipEvents","onPresenceUnavailable","destroySelect","reasonSelect","isKick","membersKeys","actorSelect","actorNick","onMessage","settingsErrorMsg","subjectText","stamp","dateParts","invite","passwordSelect","jsonMessage","parsedJson","tryParseJSONAndVerify","onPresenceError","lobbyRoomNode","lobbyRoomOldNode","setAffiliation","grantIQ","kickIQ","lockRoom","onSuccess","onError","onNotSupported","formsubmit","formToSubmit","addToPresence","matchingNodes","getFromPresence","removePresenceListener","handlerIdx","mucJid","getMemberRole","peerJid","addAudioInfoToPresence","audioMutedTagName","addVideoInfoToPresence","videoMutedTagName","getMediaPresenceInfo","mutedNode","codecTypeNode","videoTypeNode","codecType","getLastPresence","mucNick","isSIPCallingSupported","dial","rayo","hangup","getLobby","getAVModeration","getPhoneNumber","getPhonePin","getMeetingId","muteParticipant","iqToFocus","onMute","onMuteVideo","onMucLeft","doReject","MucConnectionPlugin","isRoomCreated","_createSourceExtension","owner","sourceCompactJson","$build","s","_createSsrcGroupExtension","ssrcGroupCompactJson","semantics","_getOrCreateRtpDescription","jingle","description","content","appendChild","expandSourcesFromJson","jsonMessageXml","sources","audioRtpDescription","videoRtpDescription","ssrcMap","ssrcs","ownerSources","videoSources","videoSsrcGroups","audioSources","audioSsrcGroups","MediaDirection","ScreenObtainer","obtainStream","_createObtainStreamMethod","onFailure","JitsiMeetNW","obtainDesktopStream","jitsiError","obtainScreenOnElectron","obtainScreenFromGetDisplayMediaRN","obtainScreenFromGetDisplayMedia","_getAudioConstraints","audioQuality","stereo","autoGainControl","channelCount","echoCancellation","noiseSuppression","JitsiMeetScreenObtainer","openDesktopPicker","desktopSharingFrameRate","desktopSharingSources","streamId","streamType","screenShareAudio","audioConstraints","optionalConstraints","optional","chromeMediaSource","chromeMediaSourceId","minFrameRate","maxFrameRate","maxWidth","screen","maxHeight","sourceId","sourceType","setScreenSharingResolutionConstraints","cursor","errorDetails","errorName","errorStack","setDesktopSharingFrameRate","maxFps","SDPUtil","filterSpecialChars","iceparams","mediadesc","sessiondesc","pwd","findLine","parseICEUfrag","parseICEPwd","line","buildICEUfrag","frag","buildICEPwd","parseMID","parseMSIDAttribute","ssrcLines","msidLine","parseMLine","parts","proto","pop","fmt","buildMLine","mline","parseRTPMap","clockrate","channels","parseSCTPMap","parseSCTPPort","buildRTPMap","parseCrypto","parseFingerprint","fingerprint","parseFmtp","parseICECandidate","candidate","elems","foundation","component","priority","generation","tcptype","network","buildICECandidate","cand","hasOwnAttribute","parseSSRC","desc","lines","parseSourceNameLine","sourceNameLine","ssrcSdpLine","parseVideoTypeLine","videoTypeLine","parseRTCPFB","pt","params","parseExtmap","direction","uri","haystack","needle","sessionpart","findLines","needles","candidateToJingle","candidateFromJingle","parsePrimaryVideoSsrc","videoMLine","numSsrcs","map","ssrcInfo","numGroups","ssrcGroups","primarySsrc","fidGroup","simGroup","generateSsrc","RandomUtil","getSsrcAttribute","mLine","attributeName","ssrcLine","attribute","parseGroupSsrcs","ssrcGroup","ssrcStr","getMedia","sdp","getUfrag","ufragLines","preferCodec","codecName","matchingPayloadTypes","rtp","payloadTypes","payloads","reverse","payloadIndex","unshift","stripCodec","highProfile","h264Pts","removePts","stripH264HighCodec","CodecMimeType","fmtp","item","rtxApts","rtxPts","keepPts","rtcpFb","SDP","mediaI","raw","arrayEquals","array1","array2","l","equals","SDPDiffer","mySDP","otherSDP","failICE","removeTcpCandidates","removeUdpCandidates","addMlineForNewLocalSource","mid","clonedeep","RECVONLY","msid","concat","groups","mids","getMediaSsrcMap","mediaSSRCs","mediaindex","linessrc","containsSSRC","medias","toJingle","thecreator","assrcline","creator","amidline","rtpmap","afmtpline","fmtpParameters","k","rtcpFbToJingle","availableSsrc","ssrcParameters","ridLines","rids","ridLine","ridInfo","extmapLines","extmap","SENDONLY","senders","SENDRECV","transportToJingle","sctpport","sctpmap","sctpAttrs","streams","setupLine","setup","iceParameters","payloadtype","feedback","rtcpFbFromJingle","feedbackElementTrrInt","fb","hasAttribute","fromJingle","contents","jingle2media","sctp","payloadType","setAttribute","__","parameter","hdrExt","userSources","nonUserSources","isUserSource","sourceStr","getNewMedia","myMedias","othersMedias","newMedia","othersMediaIdx","myMedia","othersMedia","otherSsrcGroup","matched","mySsrcGroup","modify","sdpMediaSsrcs","modified","ssrcNum","mediaSsrc","hasQueueMicrotask","queueMicrotask","hasSetImmediate","setImmediate","hasNextTick","nextTick","fallback","fn","wrap","defer","setImmediate$1","handlePromise","invokeCallback","isAsync","toStringTag","wrapAsync","asyncFn","func","awaitify","arity","cbArgs","applyEach","eachfn","fns","callArgs","that","cb","_asyncMap","arr","iteratee","results","counter","_iteratee","iterCb","isArrayLike","breakLoop","once","wrapper","callFn","assign","onlyOnce","asyncEachOfLimit","generator","limit","done","canceled","awaiting","running","replenish","iterDone","iterateeCallback","handleError","eachOfLimit","RangeError","asyncIterator","isAsyncIterable","nextElem","coll","len","createArrayIterator","okeys","iterator","getIterator","createES2015Iterator","createIterator","looping","eachOfLimit$2","eachOfArrayLike","completed","iteratorCallback","eachOfGeneric","Infinity","eachOf$1","map$1","eachOfSeries$1","DLL","head","tail","removeLink","prev","empty","insertAfter","newNode","insertBefore","setInitial","toArray","cur","testFn","curr","dll","queue","worker","concurrency","numRunning","workersList","drain","saturated","unsaturated","ev","trigger","processingScheduled","_insert","insertAtFront","rejectOnError","rej","promiseCallback","q","started","_tasks","_createCB","tasks","buffer","idle","_maybeDrain","eventMethod","handleAndRemove","isProcessing","paused","datum","pushAsync","kill","unshiftAsync","pause","defineProperties","memo","mapLimit$1","concatLimit$1","val","mapResults","_createTester","check","getResult","testResult","testPassed","consoleFunc","resultArgs","_withoutIndex","bool","_fn","_test","truth","eachLimit$2","eachSeries$1","filterArray","truthValues","filterGeneric","_filter","sync","innerArgs","ensureAsync","newObj","taskCb","TypeError","criteria","comparator","left","right","rest","taskIndex","nextTask","AsyncQueue","_queue","_processQueueTasks","items","_stopped","finishedCallback","shutdown","JingleSessionState","PENDING","ENDED","JingleSession","localJid","mediaConstraints","pcConfig","isInitiator","usedrip","dripContainer","_signalingLayer","initiatorJid","responderJid","signalingLayer","doInitialize","addIceCandidates","getState","addSources","removeSources","terminate","failure","acceptOffer","_getInitiatorJid","MediaSessionEvents","IQ_TIMEOUT","JingleSessionPC","jingleContents","videoContents","maxFrameHeightSel","receiverConstraints","sourceFrameHeightSel","_bridgeSessionId","_cachedOldLocalSdp","_cachedNewLocalSdp","_iceCheckingStartedTimestamp","_gatheringStartedTimestamp","localRecvMaxFrameHeight","_sourceReceiverConstraints","_localVideoActive","_remoteVideoActive","_gatheringReported","lasticecandidate","closed","remoteRecvMaxFrameHeight","remoteSourceMaxFrameHeights","modificationQueue","wasConnected","establishmentDuration","_xmppListeners","onXmppStatusChanged","_removeSenderVideoConstraintsChangeListener","_assertNotEnded","isReconnect","wasstable","webrtcIceUdpDisable","webrtcIceTcpDisable","pcOptions","gatherStats","maxstats","capScreenshareBitrate","enableInsertableStreams","videoQuality","forceTurnRelay","usesUnifiedPlan","disableSimulcast","abtestSuspendVideo","_abtestSuspendVideoEnabled","preferH264","disableH264","preferredCodec","H264","createPeerConnection","onicecandidate","phase","initiator","sendIceCandidate","onsignalingstatechange","signalingState","connectionState","oniceconnectionstatechange","isStable","iceConnectionState","reconnect","usesTerminateForRestart","enableIceRestart","iceStarted","onconnectionstatechange","icestate","onnegotiationneeded","remoteDescription","workFunction","oldSdp","localDescription","_renegotiate","configureSenderVideoEncodings","newSdp","notifyMySSRCUpdate","getRemoteRecvMaxFrameHeight","getRemoteSourcesRecvMaxFrameHeight","localSDP","ice","sdpMLineIndex","jcand","errorMesssage","sendIceCandidates","candidates","cands","sdpMid","fingerprintLine","required","newJingleErrorHandler","sendIceFailedNotification","sessionInfo","iceCandidates","rtcCandidate","RTCIceCandidate","iceCandidate","addIceCandidate","outerHTML","readSsrcInfo","ssrcElement","setTrackSourceName","setSSRCOwner","i3","ssrcInfoElement","jidOrEndpointId","generateRecvonlySsrc","getConfiguredVideoCodec","jingleOffer","setOfferAnswerCycle","sendSessionAccept","addTracks","addTrack","all","createOffer","offerSdp","setLocalDescription","sendSessionInitiate","setAnswer","jingleAnswer","newRemoteSdp","_processNewJingleOfferIq","oldLocalSdp","RTCSessionDescription","setRemoteDescription","newLocalSdp","sendContentModify","jingleOfferAnswerIq","audioTracks","tracks","bridgeSessionId","_responderRenegotiate","setVideoCodecs","preferred","disabled","current","replaceTransport","jingleOfferElem","enableForcedReload","sendTransportAccept","originalOffer","clone","newFingerprint","accept","responder","maxFrameHeight","sessionModify","setReceiverVideoConstraint","sourceReceiverConstraints","transportAccept","medialines","sendTransportReject","transportReject","setSenderVideoConstraint","jitsiLocalTrack","getLocalVideoTracks","getLocalVideoTrack","setSenderVideoConstraints","sendSessionTerminate","sessionTerminate","reasonDescription","restart","requestRestart","onTerminated","reasonCondition","reasonText","_parseSsrcInfoFromSourceAdd","sourceAddElem","currentRemoteSdp","addSsrcInfo","i1","midFound","i2","addRemoteStream","_addOrRemoveRemoteStream","removeRemoteStream","removeRemoteStreamsOnLeave","finishCallback","removeSsrcInfo","getRemoteSourceInfoByParticipant","_processRemoteRemoveSource","newLocalSDP","isAdd","logPrefix","errMsg","addOrRemoveSsrcInfo","_parseSsrcInfoFromSourceRemove","_processRemoteAddSource","remoteSdp","findIndex","desiredDirection","getDesiredMediaDirection","optionalRemoteSdp","_initiatorRenegotiate","createAnswer","answer","offer","replaceTracks","oldLocalSDP","replaceTrack","oldTrack","newTrack","clearRecvonlySsrc","shouldRenegotiate","setSourceName","sourceRemoveElem","_verifyNoSSRCChanged","operationName","oldSDP","currentLocalSDP","sdpDiff","addedMedia","removedMedia","addTrackToPc","_addRemoveTrack","removeTrackFromPc","isRemove","setMediaTransferActive","audioActive","videoActive","logAudioStr","logVideoStr","isSessionActive","audioActiveChanged","setAudioTransferActive","pcVideoActiveChanged","setVideoTransferActive","modifyContents","newVideoSenders","parseVideoSenders","newMaxFrameHeight","parseMaxFrameHeight","sourceMaxFrameHeights","parseSourceMaxFrameHeight","_modifyRemoteVideoActive","remoteVideoSenders","isRemoteVideoActive","newSDP","getSignaledSourceInfo","sdpDiffer","mediaIndex","signaledSsrcs","ctx","removedSsrcInfo","addedSsrcInfo","request","errResponse","errorElSel","code","errorReasonSel","errorMsgSel","getIceConnectionState","getConnectionState","abTesting","enableSuspendVideoTest","integerHash","_parseIceCandidates","parseCandidates","candidateAttrs","JingleConnectionPlugin","iceConfig","sessions","jvbIceConfig","jvb","p2pIceConfig","offerToReceiveAudio","offerToReceiveVideo","onJingle","fromJid","sess","jsonMessages","audioVideoSsrcs","logMessage","endpoint","startMuted","iceUfrag","icePwd","dtlsFingerprint","successTime","newP2PJingleSession","me","getStunAndTurnCredentials","v2Res","onReceiveStunAndTurnCredentials","v1Res","iceservers","dict","urls","credential","temp","useTurnUdp","iceServers","getLog","updateLog","href","StropheLogger","logIncoming","rawOutput","logOutgoing","RAYO_XMLNS","RayoConnectionPlugin","onRayo","roomPass","req","callResource","lastErrorStatus","resetLastErrorStatusRegExpr","lastErrorStatusRegExpr","FAILURE_REGEX","DEFAULT_STUN_SERVERS","FEATURE_JIGASI","token","disconnectInProgress","authenticatedUser","deploymentInfo","trace","errStatusCapture","exec","createConnection","bosh","details","shard_changed","suspend_time","time_since_last_success","_initStrophePlugins","caps","initFeaturesList","enableOpusRed","enableRemb","enableTcc","enableLipSync","getConnection","connectionHandler","credentials","statusStr","_maybeSendDeploymentInfoStat","_sysMessageHandler","deleteHandler","sendDiscoInfo","_resetState","sendDeploymentInfo","_processDiscoInfoIdentities","anonymousConnectionFailed","connectionFailed","lastErrorMsg","wasIntentionalDisconnect","_getConnectionFailedReasonDetails","lastFailedRawMessage","_parseConnectionFailedMessage","speakerStatsComponentAddress","conferenceDurationComponentAddress","processLobbyFeatures","fr","region","backendRelease","_onPrivateMessage","_connect","_addSysHandler","_onSystemMessage","foundIceServers","attaching","configDomain","hostname","onCreateResource","getRoomJid","mucNickname","muc","getJingleLog","getXmppLog","getSessions","disconnectListener","_cleanupXmppConnection","evType","p2pStunServers","stunServers","iceTransportPolicy","headersArr","trim","header","sendFaceExpressionEvent","expression","faceExpression","jsonString","users","created_timestamp","force","acceptedStatuses","aprops","authenticateAndUpgradeRole","rejectPromise","onLoginSuccessful","authenticationError","connectionError","CodecSelection","disabledCodec","_getCodecMimeType","jvbCodec","p2pCodec","jvbPreferredCodec","_isCodecSupported","p2pPreferredCodec","_selectPreferredCodec","mediaSession","currentCodec","selectedCodec","enforcePreferredCodec","remoteParticipants","remote","peerMediaInfo","getPeerMediaInfo","peerCodec","getPreferredCodec","BridgeChannel","wsUrl","_channel","_eventEmitter","_mode","_areRetriesEnabled","_closedFromClient","datachannel","createDataChannel","_handleChannel","_wsUrl","_initWebSocket","ws","_startConnectionRetries","timeoutS","reload","isOpen","_retryTimeout","_stopConnectionRetries","_retryWebSocketConnection","closeEvent","createBridgeChannelClosedEvent","mode","sendEndpointStatsMessage","_send","colibriClass","msgPayload","sendSetLastNMessage","lastN","sendSelectedEndpointsMessage","endpointIds","selectedEndpoints","sendReceiverVideoConstraintMessage","maxFrameHeightPixels","sendNewReceiverVideoConstraintsMessage","sendVideoTypeMessage","sendSourceVideoTypeMessage","channel","onopen","onmessage","dominantSpeakerEndpoint","previousSpeakers","active","lastNEndpoints","forwardedSources","videoConstraints","onclose","jsonObject","logDisabled_","deprecationWarnings_","extractVersion","uastring","expr","pos","wrapPeerConnectionEvent","eventNameToWrap","RTCPeerConnection","nativeAddEventListener","nativeEventName","arguments","wrappedCallback","modifiedEvent","handleEvent","_eventMap","nativeRemoveEventListener","unwrappedCb","disableLog","disableWarnings","deprecated","oldMethod","newMethod","detectBrowser","mozGetUserMedia","webkitGetUserMedia","isSecureContext","webkitRTCPeerConnection","RTCIceGatherer","isObject","compactObject","accumulator","isObj","isEmptyObject","walkStats","resultSet","filterStats","outbound","streamStatsType","filteredResult","trackStats","trackStat","trackId","logging","utils","shimGetUserMedia","browserDetails","constraintsToChrome_","cc","r","ideal","exact","oldname_","prefix","charAt","toUpperCase","oc","mix","advanced","shimConstraints_","remap","face","facingMode","getSupportedFacingModeLies","getSupportedConstraints","enumerateDevices","dev","label","deviceId","shimError_","PermissionDeniedError","PermissionDismissedError","InvalidStateError","DevicesNotFoundError","ConstraintNotSatisfiedError","TrackStartError","MediaDeviceFailedDueToShutdown","MediaDeviceKillSwitchOn","TabCaptureError","ScreenCaptureError","DeviceCaptureError","origGetUserMedia","getAudioTracks","getVideoTracks","DOMException","shimGetDisplayMedia","getSourceId","widthSpecified","heightSpecified","frameRateSpecified","shimMediaStream","MediaStream","webkitMediaStream","shimOnTrack","_ontrack","origSetRemoteDescription","_ontrackpoly","te","getReceivers","Event","transceiver","dispatchEvent","shimGetSendersWithDtmf","shimSenderWithDtmf","dtmf","_dtmf","createDTMFSender","_pc","getSenders","_senders","origAddTrack","origRemoveTrack","removeTrack","origAddStream","addStream","origRemoveStream","removeStream","origGetSenders","shimGetStats","origGetStats","selector","onSucc","onErr","fixChromeStats_","standardReport","standardStats","localcandidate","remotecandidate","names","stat","makeMapStats","successCallbackWrapper_","shimSenderReceiverGetStats","origGetReceivers","receivers","srcElement","MediaStreamTrack","shimAddTrackRemoveTrackWithNative","getLocalStreams","_shimmedLocalStreams","existingSenders","newSenders","newSender","shimAddTrackRemoveTrack","origGetLocalStreams","nativeStreams","_reverseStreams","_streams","newStream","replaceInternalStreamId","internalId","externalStream","internalStream","RegExp","replaceExternalStreamId","alreadyExists","oldStream","method","nativeMethod","methodObj","origSetLocalDescription","origLocalDescription","getOwnPropertyDescriptor","streamid","shimPeerConnection","fixNegotiationNeeded","target","getConfiguration","sdpSemantics","nativeGetUserMedia","getSettings","nativeGetSettings","applyConstraints","nativeApplyConstraints","preferredMediaSource","mediaSource","RTCTrackEvent","mozRTCPeerConnection","modernStatsTypes","inboundrtp","outboundrtp","candidatepair","nativeGetStats","shimSenderGetStats","shimReceiverGetStats","shimRemoveStream","shimRTCDataChannel","DataChannel","RTCDataChannel","shimAddTransceiver","origAddTransceiver","addTransceiver","setParametersPromises","initParameters","shouldPerformCheck","sendEncodings","encodingParam","scaleResolutionDownBy","maxFramerate","getParameters","encodings","setParameters","shimGetParameters","origGetParameters","shimCreateOffer","origCreateOffer","finally","shimCreateAnswer","origCreateAnswer","shimLocalStreamsAPI","_localStreams","_addTrack","shimRemoteStreamsAPI","getRemoteStreams","_remoteStreams","_onaddstream","_onaddstreampoly","shimCallbacksAPI","successCallback","withCallback","_getUserMedia","shimConstraints","errcb","shimRTCIceServerUrls","OrigPeerConnection","pcConstraints","newIceServers","generateCertificate","shimTrackEventTransceiver","shimCreateOfferLegacy","offerOptions","audioTransceiver","getTransceivers","setDirection","videoTransceiver","shimAudioContext","shimRTCIceCandidate","NativeRTCIceCandidate","nativeCandidate","parsedCandidate","SDPUtils","augmentedCandidate","toJSON","usernameFragment","shimMaxMessageSize","_sctp","sctpInDescription","sections","mediaSection","getRemoteFirefoxVersion","getCanSendMaxMessageSize","remoteIsFirefox","canSendMaxMessageSize","getMaxMessageSize","maxMessageSize","canSendMMS","remoteMMS","POSITIVE_INFINITY","shimSendThrowTypeError","wrapDcSend","dc","origDataChannelSend","byteLength","origCreateDataChannel","dataChannel","shimConnectionState","checking","_onconnectionstatechange","origMethod","_connectionstatechangepoly","_lastConnectionState","newEvent","removeExtmapAllowMixed","nativeSRD","shimAddIceCandidateNullOrEmpty","nativeAddIceCandidate","shimChrome","shimFirefox","shimSafari","adapter","commonShim","chromeShim","browserShim","firefoxShim","safariShim","adapterFactory","DEFAULT_CONSTRAINTS","audioOutputDeviceId","audioOutputChanged","disableAP","disableAEC","disableNS","disableAGC","featureDetectionAudioEl","createElement","isAudioOutputDeviceChangeAvailable","setSinkId","availableDevicesPollTimer","availableDevices","emptyFuncton","updateGrantedPermissions","um","audioTracksReceived","videoTracksReceived","grantedPermissions","sendDeviceListToAnalytics","deviceList","audioInputDeviceCount","audioOutputDeviceCount","videoInputDeviceCount","videoOutputDeviceCount","device","groupId","updateKnownDevices","pds","newDevices","mediaDeviceInfoToJSON","facing","compareAvailableMediaDevices","rtcUtils","origAttachMediaStream","attachMediaStream","element","srcObject","isDeviceChangeAvailable","getAudioOutputDevice","ex","screenObtainer","isDeviceListAvailable","ds","umDevices","gumTimeout","timeoutExpired","_getDesktopMedia","_getMissingTracks","requestedDevices","missingDevices","audioDeviceRequested","videoDeviceRequested","obtainAudioAndVideoPermissions","otherOptions","mediaStreamsMetaData","maybeRequestDesktopDevice","desktopSharingSourceDevice","matchingDevice","maybeRequestCaptureDevices","requestedCaptureDevices","Resolutions","cameraDeviceId","CameraFacingMode","micDeviceId","getConstraints","desktopStream","desktopAudioTracks","desktopAudioStream","desktopVideoTracks","desktopVideoStream","avStream","audioStream","effects","videoStream","stopMediaStream","deviceType","mediaStream","release","isDesktopSharingEnabled","setAudioOutputDevice","getCurrentlyAvailableMediaDevices","arePermissionsGrantedForAvailableDevices","getEventDataForActiveDevice","deviceData","trackHandler2Prop","JitsiTrack","streamInactiveHandler","trackMediaType","containers","_streamInactiveHandler","_setStream","_addMediaStreamInactiveHandler","onended","oninactive","_setHandler","_unregisterHandlers","videoTrack","getVideoType","isLocalAudioTrack","getStreamId","getTrack","getTrackLabel","getTrackId","getUsageLabel","_maybeFireTrackAttached","container","_onTrackAttach","RTCUtils","_attachTTFMTracker","detach","_onTrackDetach","newAudioLevel","getMSID","setAudioOutput","JitsiLocalTrack","rtcId","_setEffectInProgress","effect","_startStreamEffect","displaySurface","metadata","maxEnabledResolution","_constraints","_prevSetMuted","_facingMode","_trackEnded","_hasSentData","_testDataSent","_realDeviceId","_sourceName","_trackMutedTS","_onDeviceListWillChange","oldRealDeviceId","_setRealDeviceIdFromDeviceList","_onAudioOutputDeviceChanged","_initNoDataFromSourceHandlers","_addStreamToConferenceAsUnmute","_addLocalTrackToPc","_fireNoDataFromSourceEvent","isReceivingData","createNoDataFromSourceEvent","_isNoDataFromSourceEventsEnabled","_queueSetMuted","setMuted","_setMuted","_removeStreamFromConferenceAsMute","_removeLocalTrackFromPc","_sendMuteStatus","_setTrackMuteStatus","logMuteInfo","_streamEffect","_stopStreamEffect","stopStream","streamOptions","getDeviceId","getCameraFacingMode","streamsInfo","PRESENTER","streamInfo","cont","_sendBridgeVideoTypeMessage","storedMSID","_originalStream","startEffect","stopEffect","_switchCamera","_switchStreamEffect","setEffect","removeTrackPromise","trackSettings","getDuration","isEnded","_stopStreamInProgress","_effectEnabled","setConference","unmute","opts","found","PLAN_B_MIDS","findSimGroup","grp","findFidGroup","addSimGroupSources","sourceGroups","sourceList","findSourcebyId","relatedFidGroup","relatedSsrc","addSourcesToMline","otherSsrc","simGroup2","checkIfMlineForSsrcExists","mlines","Interop","toPlanB","every","sessionMedia","bLine","bundle","msidSemantic","semantic","resStr","toUnifiedPlan","currentDesc","iceRestart","newDesc","oldDesc","newMLine","oldMLine","checkForIceRestart","newIceUfrag","newIcePwd","newMline","mLineForData","ssrc2group","createSourceGroupMap","bundleOnly","sessionVersion","resultSdp","SignalingEvents","PEER_MUTED_CHANGED","PEER_VIDEO_TYPE_CHANGED","SOURCE_MUTED_CHANGED","SOURCE_VIDEO_TYPE_CHANGED","getSourceNameForJitsiTrack","trackIdx","getMediaTypeFromSourceName","firstLetterOfMediaTypeIdx","firstLetterOfMediaType","SignalingLayer","getSSRCOwner","getPeerSourceInfo","getTrackSourceName","parsePrimarySSRC","parseSecondarySSRC","_getSSRCCount","MLineWrap","getSSRCAttrValue","ssrcNumber","attrName","ssrcObj","removeSSRC","addSSRCAttribute","findGroup","findGroups","findGroupByPrimarySSRC","primarySSRC","findSSRCByMSID","getSSRCCount","containsAnySSRCGroups","getPrimaryVideoSsrc","fecGroup","getRtxSSRC","getSSRCs","getPrimaryVideoSSRCs","videoSSRCs","ssrcGroupInfo","secondarySsrc","dumpSSRCGroups","removeGroupsWithSSRC","removeGroupsBySemantics","replaceSSRC","oldSSRC","newSSRC","addSSRCGroup","SdpTransformWrap","rawSDP","parsedSDP","selectMedia","selectedMLines","toRawSDP","LocalSdpMunger","localEndpointId","audioSourcesToMsidMap","videoSourcesToMsidMap","_addMutedLocalVideoTracksToSDP","transformer","localVideos","isCamera","isInPeerConnection","isMediaStreamInPc","requiredSSRCs","isSimulcastOn","simulcast","ssrcCache","sdpConsistency","cachedPrimarySsrc","primaryCname","rtxModifier","modifyRtxSsrcs2","_generateMsidAttribute","pcId","_transformMediaIdentifiers","streamAndTrackIDs","mediaDirection","_hasHadVideoTrack","_hasHadAudioTrack","generatedMsid","maybeAddMutedLocalVideoTracksToSDP","transformStreamIdentifiers","sessionDesc","audioMLine","_injectSourceNames","videoMlines","nameExists","trackIndex","updateAssociatedRtxStream","primarySsrcInfo","rtxSsrc","primarySsrcMsid","primarySsrcCname","cname","previousRtxSSRC","RtxModifier","correspondingRtxSsrcs","clearSsrcCache","setSsrcCache","ssrcMapping","modifyRtxSsrcs","sdpStr","sdpTransformer","videoMLines","primaryVideoSsrcs","correspondingRtxSsrc","stripRtx","fidGroups","SdpConsistency","clearVideoSsrcCache","injectRecvOnly","setPrimarySsrc","hasPrimarySsrcCached","makeVideoPrimarySsrcsConsistent","newPrimarySsrc","SdpSimulcast","_ssrcCache","numOfLayers","_fillSsrcsFromCache","cachedSsrcs","newSsrcs","_parseSimLayers","newMsid","_getSsrcAttribute","newCname","_generateNewSsrcsForSimulcast","addAssociatedAttributes","simSsrcs","simSsrc","_generateSsrc","mungeLocalDescription","simulcastSsrcs","TrackStreamingStatus","TrackStreamingStatusImpl","isInForwardedSources","restoringTimer","streamingStatusMap","trackTimer","outOfForwardedSourcesTimeout","figureOutStreamingStatus","_onForwardedSourcesChanged","onForwardedSourcesChanged","maybeSendTrackStreamingStatusEvent","_changeStreamingStatus","getTrackStreamingStatus","_setTrackStreamingStatus","isVideoRTCMuted","oldStreamingStatus","streamingStatus","trackStreamingStatus","createTrackStreamingStatusEvent","leavingForwardedSources","enteringForwardedSources","_clearEnteredForwardedSourcesTimestamp","_setEnteredForwardedSourcesTimestamp","enteredForwardedSourcesTimestamp","_getEnteredForwardedSourcesTimestamp","_isCurrentTrack","ttfmTrackerAudioAttached","ttfmTrackerVideoAttached","containerEvents","JitsiRemoteTrack","ownerEndpointId","_trackStreamingStatus","_trackStreamingStatusImpl","_enteredForwardedSourcesTimestamp","_addEventListener","_removeEventListener","hasBeenMuted","_bindTrackHandlers","_containerHandlers","_containerEventHandler","_onTrackMute","_onTrackUnmute","listenerCount","_initTrackStreamingStatus","_disposeTrackStreamingStatus","REMOTE_TRACK_MUTE","REMOTE_TRACK_UNMUTE","setMute","getSSRC","_setVideoType","_playCallback","getConnectionTimes","gumStart","gumEnd","gumDuration","ttfm","_getStatus","_p2pConnStatusRtcMuteTimeout","_peerConnStatusRtcMuteTimeout","_peerConnStatusOutOfLastNTimeout","HD_BITRATE","SIM_LAYER_RIDS","TPCUtils","bitrateSettings","maxBitratesVideo","standardBitrates","low","standard","high","videoBitrates","encodingBitrates","VP8","localStreamEncodingsConfig","maxBitrate","_getStreamEncodings","localTrack","ensureCorrectOrderOfSsrcs","parsedSdp","reorderedSsrcs","findTransceiver","insertUnifiedPlanSimulcastReceive","simulcast_03","simulcastLine","transceiverInit","calculateEncodingsActiveState","localVideoTrack","newHeight","encoding","_capScreenshareBitrate","calculateEncodingsBitrates","desktopShareBitrate","desktopBitrate","presenterEnabled","lowFpsScreenshare","isNewLocalSource","currentDirection","setEncodings","parameters","transceivers","updateEncodingsResolution","TraceablePeerConnection","audioTransferActive","_dtmfSender","_dtmfTonesQueue","videoTransferActive","remoteTracks","_addedStreams","localSSRCs","localUfrag","remoteUfrag","_dtlsTransport","_peerVideoTypeChanged","_peerMutedChanged","_sourceMutedChanged","_sourceVideoTypeChanged","safeConstraints","rtcStatsSFUP2P","tpcUtils","statsinterval","_usesTransceiverCodecPreferences","interop","Simulcast","explodeRemoteSimulcast","localSdpMunger","getLocalEndpointId","_senderVideoMaxHeight","_senderMaxHeights","what","time","onTrack","evt","_remoteTrackAdded","_remoteTrackRemoved","onaddstream","_remoteStreamAdded","onremovestream","_remoteStreamRemoved","ondatachannel","_processStat","statValue","endTime","times","dumpSDP","isAddOperation","hasLocalSource","hasAnyTracksOfType","mediaTransferActive","_getReceiversByEndpointIds","endpoints","getRemoteTracks","remoteTrackIds","audioReceivers","getSynchronizationSources","endpointTracksByMediaType","primarySsrcs","fidLines","getTargetVideoBitrates","findTrackById","RTC","isUserStreamById","onaddtrack","onremovetrack","streamAudioTracks","audioTrack","streamVideoTracks","remoteSDP","mediaLines","mls","trackSsrc","_createRemoteTrack","remoteTracksMap","userTracksByMediaType","existingTrack","isUserStream","toBeRemoved","_removeRemoteTrack","removeRemoteTracks","removedTracks","remoteTracksByMedia","_extractSSRCMap","groupsMap","groupSSRCs","_getSSRC","_injectSsrcGroupForUnifiedSimulcast","getters","audioMedia","changed","videoMedia","enforceSendRecv","_adjustRemoteMediaDirection","isSharingLowFpsScreen","_isSharingScreen","_mungeCodecOrder","codecPreference","webrtcStream","_addStream","generateNewStreamSSRCInfo","rtxSsrcMapping","promiseChain","_assertTrackBelongs","webRtcStream","_removeStream","doesBelong","defaultCodec","lowFps","findSenderByKind","negotiationNeeded","oldTrackSSRC","mediaActive","_ensureSimulcastGroupIsLast","localSdp","videoStartIndex","simStartIndex","otherStartIndex","simEndIndex","simStr","otherEndIndex","sdpHead","simStrTrimmed","sdpTail","_adjustLocalMediaDirection","modifiedDirection","desiredAudioDirection","desiredVideoDirection","hasRemoteSource","_mungeOpus","opusMaxAverageBitrate","mLines","OPUS","fmtpOpus","fmtpConfig","sdpChanged","maxaveragebitrate","mungedConfig","_mungeInactive","_initializeDtlsTransport","onstatechange","_setVp9MaxBitrates","isLocalSdp","getDesktopTrackMid","desktopTrack","VP9","bitrates","hdBitrate","isSharingScreen","currentDescription","mungeRemoteDescription","firstSsrcs","newSsrcLines","filteredLines","ssrcId","cnameLine","replaceDefaultUnifiedPlanMsid","write","normalizePlanB","videoSender","preference","degradationPreference","encodingsEnabledState","maxBitrates","scaleFactor","layer","sendTones","tones","interToneGap","rtpSender","localAudioTrack","ontonechange","_onToneChange","toneBuffer","insertDTMF","tone","peerTracks","_removePeerConnection","_createOfferOrAnswer","isOffer","logName","handleSuccess","resolveFn","rejectFn","_processLocalSSRCsMap","handleFailure","eventType","capabilities","ULPFEC","setCodecPreferences","oaPromise","_extractPrimarySSRC","sourceIndex","sourceIdentifier","newSSRCNum","oldSSRCNum","activeStreams","currNumSsrcs","ConnectionQualityEvents","peerConnectionIdCounter","rtcTrackIdCounter","_createLocalTracks","mediaStreamMetaData","metaData","peerConnections","_lastN","_lastNEndpoints","_forwardedSources","_maxFrameHeight","_selectedEndpoints","_lastNChangeListener","_forwardedSourcesChangeListener","_onDeviceListChanged","_updateAudioOutputForAudioTracks","_videoType","BridgeVideoType","destroy","_channelOpenListener","tracksInfo","initializeBridgeChannel","logError","msgType","_receiverVideoConstraints","oldLastNEndpoints","leavingLastNEndpoints","enteringLastNEndpoints","oldForwardedSources","setNewReceiverVideoConstraints","setVideoType","sendSourceVideoType","selectEndpoints","ids","signaling","encodedInsertableStreams","bundlePolicy","newConnection","traceablePeerConnection","addLocalTrack","getForwardedSources","localVideo","getLocalAudioTrack","localAudio","pcRemoteTracks","mutePromises","removeLocalTrack","elSelector","sendChannelMessage","setLastN","remoteAudioTracks","LOCAL_STATS_UPDATED","REMOTE_STATS_UPDATED","kSimulcastFormats","layers","targetRN","ConnectionQuality","_localStats","connectionQuality","jvbRTT","_lastConnectionQualityUpdate","_remoteStats","_timeIceConnected","_timeVideoUnmuted","ConferenceEvents","_updateLocalConnectionQuality","_broadcastLocalStats","ICE_CONNECTION_STATE_CHANGED","_updateRemoteStats","_updateLocalStats","_maybeUpdateUnmuteTime","LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED","serverRegion","bridgeCount","_calculateConnectionQuality","resolutionName","quality","DESKTOP","activeTPC","getActivePeerConnection","videoQualitySettings","millisSinceStart","simulcastFormat","targetHeight","rampUp","getTarget","maxIncreasePerSecond","prevConnectionQuality","diffSeconds","updateLocalConnectionQuality","isConnectionInterrupted","IceFailedHandling","_actOnIceFailed","explicitlyDisabled","useTerminateForRestart","jvbConnection","jvbConnIceState","_canceled","_iceFailedTimeout","DetectionEvents","DETECTOR_STATE_CHANGE","VAD_NOISY_DEVICE","VAD_REPORT_PUBLISHED","VAD_SCORE_PUBLISHED","VAD_TALK_WHILE_MUTED","NoAudioSignalDetection","_timeoutTrigger","_hasAudioInput","_audioLevel","_trackAdded","_clearTriggerTimeout","_handleAudioInputStateChange","_handleNoAudioInputDetection","_eventFired","_audioTrack","P2PDominantSpeakerDetection","myUserID","createAudioContext","AudioContextImpl","TrackVADEmitter","procNodeSampleRate","vadProcessor","_procNodeSampleRate","_vadProcessor","_localTrack","_bufferResidue","Float32Array","_audioContext","sampleRate","getRequiredPCMFrequency","_vadSampleSize","getSampleLength","_onAudioProcess","_initializeAudioContext","_audioSource","_audioProcessingNode","createScriptProcessor","audioEvent","inData","inputBuffer","getChannelData","completeInData","sampleTimestamp","pcmSample","vadScore","calculateAudioFrameVAD","score","pcmData","_connectAudioGraph","onaudioprocess","destination","_disconnectAudioGraph","_cleanupResources","getDeviceLabel","_destroyed","VADAudioAnalyser","createVADProcessor","_createVADProcessor","_vadEmitter","_isVADEmitterRunning","_detectionServices","_vadInitTracker","_processVADScore","_trackRemoved","addVADDetectionService","vadService","detector","_stopVADEmitter","_startVADEmitter","processVADScore","_changeDetectorsMuteState","changeMuteState","vadEmitter","VADNoiseDetection","_processing","_scoreArray","_audioLvlArray","_active","_calculateNoisyScore","scoreAvg","audioLevelAvg","_setActiveState","_recordValues","avgAudioLvl","_processTimeout","posAudioLevels","VADTalkMutedDetection","_calculateVADScore","E2ePingEvents","E2E_RTT_CHANGED","E2E_PING_REQUEST","E2E_PING_RESPONSE","ParticipantWrapper","e2eping","requests","lastRequestId","sendRequest","handleResponse","maybeLogRttAndStop","scheduleNext","getDelay","removeParticipant","conferenceSize","totalSeconds","numRequests","maxMessagesPerSecond","requestId","requestMessage","timeSent","numRequestsWithResponses","totalNumRequests","JitsiE2EPingEvents","E2ePing","maxConferenceSize","participantJoined","participantLeft","messageReceived","conferenceJoined","handleRequest","participantWrapper","Jvb121EventGenerator","_jvb121","evaluateStatus","oldStatus","getParticipantCount","RecordingAdapter","exportRecordedData","setMicDevice","_getAudioStream","SariskaMediaTransport","OggAdapter","_initPromise","_initialize","_mediaRecorder","onstop","_recordedData","format","shouldEnable","_stream","MediaRecorder","ondataavailable","_saveMediaData","AbstractAudioContextAdapter","_sampleRate","_replaceMic","newSource","WavAdapter","_wavBuffers","_wavLength","_data","_exportMonoWAV","_isInitialized","_createWavHeader","dataLength","view","DataView","writeUTFBytes","setUint32","setUint16","channelLeft","buffers","setUint8","output","offset","inputBuffers","input","sampleCount","bufferCount","o","setInt16","floatTo16BitPCM","string","lng","charCodeAt","FlacAdapter","_onWorkerMessage","_encoder","_stopPromiseResolver","command","promiseInitWorker","_loadWebWorker","_initWorkerPromiseResolver","bps","buf","blob","blobUrl","webkitURL","revokeObjectURL","highPrecisionTime","timing","navigationStart","SessionEventType","freeze","SESSION_STARTED","SEGMENT_STARTED","SEGMENT_ENDED","LOCAL_STORAGE_KEY","sessionManager","_loadMetadata","dataStr","dataObject","Bourne","_sessionsMetadata","_saveMetadata","createSession","sessionToken","sessionTokens","thisSession","newSessionInfo","segments","getSegments","removeSession","_constructSegments","beginSegment","getCurrentSegmentIndex","end","endSegment","sessionStartTime","currentSegment","commit","gapBefore","lastSegment","currentEvent","COMMAND_START","COMMAND_STOP","COMMAND_PING","PROPERTY_STATS","RECORDING_FORMATS","ControllerState","IDLE","STARTING","RECORDING","STOPPING","FAILED","RecordingController","registerEvents","getParticipantsStats","_onStartCommand","_onStopCommand","_onPingCommand","_doStartRecording","_doStopRecording","_updateStats","_switchToNewSession","_registered","addCommandListener","sendCommandOnce","onStateChanged","delegate","_onStateChanged","onNotify","_onNotify","onWarning","_onWarning","startRecording","switchFormat","removeCommand","sendCommand","_getRandomToken","_format","stopRecording","_currentSessionToken","downloadRecordedData","_adapters","fileName","base64Url","style","click","removeChild","downloadBlob","_micDeviceId","String","_state","_isMuted","newFormat","getLocalStats","currentSessionToken","isRecording","recordedBytes","recordedLength","recordingStats","isSelf","localId","_changeState","messageKey","messageParams","_createRecordingAdapter","ReceiverVideoConstraints","_defaultConstraints","defaultConstraints","onStageEndpoints","updateLastN","updateReceiveResolution","updateReceiverVideoConstraints","updateSelectedEndpoints","ReceiveVideoController","_rtc","startLastN","channelLastN","useNewBandwidthAllocationStrategy","_getDefaultSourceReceiverConstraints","remoteVideoTracks","remoteEndpointIds","oldConstraints","newConstraints","setPreferredReceiveMaxFrameHeight","setReceiverConstraints","isEndpointsFormat","isSourcesFormat","p2pSession","mappedConstraints","SendVideoController","_preferredSendMaxFrameHeight","_sourceSenderConstraints","_configureConstraintsForLocalSources","_onSenderConstraintsReceived","_propagateSendMaxFrameHeight","sourceConstraints","getActiveMediaSession","_senderVideoConstraints","idealHeight","sendMaxFrameHeight","_selectSendMaxFrameHeight","activeMediaSession","setPreferredSendMaxFrameHeight","getFocusRecordingUpdate","jibriStatus","recordingMode","sessionID","getHiddenDomainUpdate","liveStreamViewURLContainer","liveStreamViewURL","modeContainer","sessionIDContainer","getSessionIdFromIq","jibri","getSessionId","sessionIdContainer","isFromFocus","JibriSession","_connection","_setSessionID","setStatus","getID","_sessionID","getInitiator","_initiator","getLiveStreamViewURL","_liveStreamViewURL","getTerminator","_terminator","getMode","setError","setLiveStreamViewURL","appData","broadcastId","_createIQ","recordingXMLUtils","_setErrorFromIq","pathname","AudioOutputProblemDetector","_localAudioLevelCache","_reportedParticipants","_audioProblemCandidates","_numberOfRemoteAudioLevelsReceived","_onLocalAudioLevelsReport","_onRemoteAudioLevelReceived","_clearUserData","numberOfReports","localAudioLevels","remoteAudioLevels","localAudioLevelsString","createAudioOutputProblemEvent","AverageStatReport","calculate","appendReport","ConnectionAvgStats","avgRtpStatsReporter","_n","_sampleIdx","_avgRTT","_avgRemoteRTTMap","_avgRtpStatsReporter","_avgEnd2EndRTT","_onConnectionStats","_calculateAvgStats","_onRemoteStatsUpdated","_processRemoteStats","batchReport","jvbEnd2EndRTT","jvbStatsMonitor","avgRemoteRTT","_calculateAvgRemoteRTT","avgLocalRTT","_resetAvgStats","remoteAvg","avg","validData","rttAvg","AvgRTPStatsReporter","_avgAudioBitrateUp","_avgAudioBitrateDown","_avgVideoBitrateUp","_avgVideoBitrateDown","_avgBandwidthUp","_avgBandwidthDown","_avgPacketLossTotal","_avgPacketLossUp","_avgPacketLossDown","_avgRemoteFPS","_avgRemoteScreenFPS","_avgLocalFPS","_avgLocalScreenFPS","_avgRemoteCameraPixels","_avgRemoteScreenPixels","_avgLocalCameraPixels","_avgLocalScreenPixels","_avgCQ","_cachedTransportStats","_onLocalStatsUpdated","_maybeSendTransportAnalyticsEvent","_onP2PStatusChanged","p2pStatsMonitor","_onJvb121StatusChanged","_resetAvgJvbStats","confSize","_calculateAvgVideoFps","_calculateAvgVideoPixels","peerResolutions","peerPixelsSum","peerCount","myID","peerID","videosResolution","peerAvgPixels","_calculatePeerAvgVideoPixels","videos","peerSsrcCount","peerSsrcPixels","peerFpsSum","videosFps","peerAvgFPS","_calculatePeerAvgVideoFps","peerSsrcFps","transportStats","SpeakerStatsCollector","dominantSpeakerId","SpeakerStats","_onDominantSpeaker","_onUserJoin","_onUserLeave","_onDisplayNameChange","_onFaceLandmarkAdd","oldDominantSpeaker","newDominantSpeaker","setDominantSpeaker","savedUser","markAsHasLeft","newName","setDisplayName","addFaceExpression","newStats","speakerStatsToUpdate","newParticipant","totalDominantSpeakerTime","setFaceExpressions","faceExpressions","RecordingResult","wordArray","TrackRecorder","recorder","AUDIO_WEBM","AUDIO_OGG","startRecorder","trackRecorder","stopRecorder","determineCorrectFileType","isTypeSupported","AudioRecorder","jitsiConference","recorders","fileType","instantiateTrackRecorder","updateNames","originalStream","dataEvent","recorderToRemove","getRecordingResults","getFileType","Word","word","begin","getWord","getBeginTime","getEndTime","SphinxService","recordingResult","verify","formatResponse","audioBlob","sphinxURL","toReturn","getURL","audioFileBlob","XMLHttpRequest","onreadystatechange","DONE","responseText","open","setRequestHeader","audioRecorder","objects","filler","BEFORE_STATE","RECORDING_STATE","TRANSCRIBING_STATE","FINISHED_STATE","Transcriber","transcriptionService","transcription","lineLength","blobCallBack","transcriber","getUTCMilliseconds","wordObject","maybeMerge","hasPopulatedArrays","twoDimensionalArray","callBack","merge","arrays","potentialWords","pushWordToSortedArray","lowestWordArray","wordToAdd","updateTranscription","foundSmaller","wordToCompare","getTranscription","ComponentsVersions","processVersions","VideoSIPGWStatusConstants","VideoSIPGWStateConstants","VideoSIPGWErrorConstants","mucResource","getComponentVersion","componentName","STATUS_AVAILABLE","STATUS_UNDEFINED","STATUS_BUSY","STATE_ON","STATE_OFF","STATE_PENDING","STATE_RETRYING","STATE_FAILED","ERROR_NO_CONNECTION","ERROR_SESSION_EXISTS","STATE_CHANGED","JitsiVideoSIPGWSession","sipAddress","VideoSIPGWConstants","_sendJibriIQ","setState","failureReason","oldState","addStateListener","removeStateListener","sipaddress","displayname","nodeTree","VideoSIPGW","sessionStateChangeListener","sessionStateChanged","handleJibriSIPState","Constants","failure_reason","createVideoSIPGWSession","SOURCE_INFO_PRESENCE_ELEMENT","SignalingLayerImpl","ssrcOwners","_localSourceState","_remoteSourceState","_sourceNames","_addLocalSourceInfoToPresence","_doesEndpointSendNewSourceInfo","setChatRoom","oldChatRoom","_audioMuteHandler","_videoMuteHandler","_videoTypeHandler","_sourceInfoHandler","_memberLeftHandler","_bindChatRoomEventHandlers","emitAudioMutedEvent","emitVideoMutedEvent","emitVideoTypeEvent","sourceInfoJSON","emitEventsFromHere","endpointSourceState","newMutedState","oldSourceState","newVideoType","newSourceNames","_findEndpointSourceInfoForMediaType","remoteSourceState","sourceInfo","legacyGetPeerMediaInfo","lastPresence","mediaInfo","endpointMediaSource","existingOwner","setTrackMuteStatus","setTrackVideoType","existingName","INITIAL_STATE","localTracksDuration","startedTime","camera","desktop","FINAL_STATE","calculateLocalTrackDuration","newDuration","LocalTracksDuration","newLocalTracksDuration","createLocalTracksDurationEvent","APP","JitsiConference","eventManager","componentsVersions","dtmfManager","somebodySupportsDTMF","wasStopped","avgRtpStatsN","_audioOutputProblemDetector","speakerStatsCollector","deferredStartP2PTask","delay","backToP2PDelay","isP2PConnectionInterrupted","videoSIPGWHandler","recordingManager","_sessions","_chatRoom","getSession","_handleFocusPresence","_handleJibriPresence","_addSession","_emitSessionUpdate","_createSession","_conferenceJoinAnalyticsEventSent","isE2EESupported","_e2eEncryption","_audioSenderLimitReached","_videoSenderLimitReached","handleSubtitles","enableLocalRecording","recordingController","enableAnalytics","iAmRecorder","robot","_room","membersCount","getParticipantsWithoutHidden","getLocalUser","ownerId","resourceCreator","codecSettings","codecSelection","_statsCurrentId","statisticsId","_onIceConnectionInterrupted","_onIceConnectionRestored","_onIceConnectionEstablished","_updateProperties","_sendConferenceJoinAnalyticsEvent","_removeLocalSourceOnReject","_updateRoomPresence","_registerRtcListeners","receiveVideoController","sendVideoController","callStatsThreshold","statisticsDisplayName","callStatsCustomScriptUrl","callStatsConfigParams","enableTalkWhileMuted","_audioAnalyser","vadTalkMutedDetection","enableNoisyMicDetection","vadNoiseDetection","enableNoAudioDetection","_noAudioSignalDetection","hasAudioSignal","jvb121Status","p2pDominantSpeakerDetection","userRegion","transcriptionLanguage","_maybeSetSITimeout","isJoined","isP2PEnabled","isP2PTestModeEnabled","p2pTestMode","onLocalTrackRemoved","_sendConferenceLeftAnalyticsEvent","_delayedIceFailed","_maybeClearSITimeout","leaveError","localtrack","_desktopSharingFrameRate","isAuthEnabled","isLoggedIn","getAuthLogin","getExternalAuthUrl","urlForPopup","getPerformanceStats","longTasksStats","eventId","removeCommandListener","sendTextMessage","sendPrivateTextMessage","nickKey","getTranscriber","localAudioTracks","getTranscriptionStatus","addTrackPromises","_setupNewTrack","_fireMuteChangeEvent","_fireAudioLevelChangeEvent","activeTpc","actorId","_getInitialLocalTracks","trackType","isStartAudioMuted","isStartVideoMuted","muteHandler","audioLevelHandler","oldVideoType","oldTrackBelongsToConference","_doReplaceTrack","replaceTrackPromises","_setNewVideoType","videoTypeChanged","videoTypeTagName","trackVideoType","legacyTypeChanged","presenceChanged","audioMuteChanged","videoMuteChanged","addPromises","removePromises","lock","unlock","selectParticipant","selectParticipants","isInteger","isVideoActive","features_jigasi","countHidden","grantOwner","revokeOwner","isMyself","isMembersOnly","kickParticipant","_sessionInitiateTimeout","muteMediaType","fullJid","_updateFeatures","_maybeStartOrStopP2P","updateDTMFSupport","botParticipant","mediaSessions","tracksToBeRemoved","kickedParticipantId","kickedParticipant","transportInfo","removedTrack","_onIncomingCallP2P","rejectReason","contentName","_shouldBeInP2PMode","_rejectIncomingCall","_acceptP2PIncomingCall","_acceptJvbIncomingCall","_suspendMediaTransferForJvbConnection","webSocket","first","stopOptions","forceJvb121","p2pFailed","_stopP2PSession","isDTMFSupported","peerConnection","startTranscriber","stopTranscriber","getMeetingUniqueId","setStartMutedPolicy","policy","getStartMutedPolicy","removeLocalParticipantProperty","getLocalParticipantProperty","property","overallFeedback","detailedFeedback","getSsrcByTrack","remoteUserId","_fireIncompatibleVersionsEvent","sendEndpointMessage","broadcastEndpointMessage","sendThroughVideobridge","messageType","messageToSend","remoteID","_addRemoteJVBTracks","_addRemoteTracks","_addRemoteP2PTracks","p2pEstablishmentDuration","jvbEstablishmentDuration","forceJVB121Ratio","establishmentDurationDiff","_setP2PStatus","_removeRemoteJVBTracks","audioLimitReached","videoLimitReached","_maybeClearDeferredStartP2P","_removeRemoteTracks","_removeRemoteP2PTracks","sessionNickname","_resumeMediaTransferForJvbConnection","_startP2PSession","userLeftEvent","peers","shouldBeInP2P","myId","peersId","hasBotPeer","wasP2PEstablished","skip","muteStatusChanged","audioMuteStatusChanged","videoMuteStatusChanged","getP2PConnectionState","startP2PSession","stopP2PSession","getSpeakerStats","sendFaceLandmarks","perf","toggleE2EE","setMediaEncryptionKey","isLobbySupported","disableLobby","joinLobby","myLobbyUserId","sendLobbyMessage","addLobbyMessageListener","removeLobbyMessageHandler","lobbyDenyAccess","lobbyApproveAccess","isAVModerationSupported","enableAVModeration","disableAVModeration","avModerationApprove","avModerationReject","pastMessage","JSON_TYPE_TRANSCRIPTION_RESULT","JSON_TYPE_TRANSLATION_RESULT","translationLanguage","transcriptMessageID","message_id","participantName","newTranscriptMessage","language","final","transcript","is_interim","stability","stable","unstable","finalText","fellowParticipantName","finalPaylaod","startLocalRecording","stopLocalRecording","startSIPVideoCall","stopSIPVideoCall","blacklist","syncWithURL","conferenceConfig","dontParse","paramStr","paramParts","firstParam","part","param","decoded","parseURLParams","initSDKConfig","connectionConfig","clientNode","devConnectionConfig","enableVirtualBackground","enableNoiseCancellation","openBridgeChannel","enableLayerSuspension","DISCO_JIBRI_FEATURE","JitsiConnection","isDev","jwt","parseJwt","errType","errorType","errorMessage","createConnectionFailedEvent","ANALYTICS_CONNECTION_DISCONNECTED","JitsiMediaDevicesEvents","atob","usernameOverride","passwordOverride","setToken","initJitsiConference","getLogs","DEVICE_LIST_CHANGED","PERMISSIONS_CHANGED","PERMISSION_PROMPT_IS_SHOWN","SLOW_GET_USER_MEDIA","AUDIO_PERMISSION_NAME","VIDEO_PERMISSION_NAME","_permissions","_logOutputDevice","permissions","_handlePermissionsChange","_permissionsApiSupported","query","_parsePermissionState","onchange","supported","permissionStatus","deviceID","isDevicePermissionGranted","isMultipleAudioInputSupported","emitEvent","stopActiveDevices","ACTIONS","ProxyConnectionPC","receiveAudio","receiveVideo","_peerConnection","_onError","_onRemoteStream","_onSendMessage","getPeerJid","processMessage","$jingle","ACCEPT","_onSessionAccept","INITIATE","_onSessionInitiate","TERMINATE","_onSessionTerminate","TRANSPORT_INFO","_onTransportInfo","_createPeerConnection","connectionStub","pcConfigStub","roomStub","jitsiRemoteTrack","onRemoteStream","onSendMessage","PRECALL_TEST_RESULTS","_initialized","api","_loadScript","appId","appSecret","disablePrecalltest","execute","makePrecallTest","AudioMixer","_started","_streamsToMix","_streamMSSArray","addMediaStream","_mixedMSD","createMediaStreamDestination","streamMSS","timerWorkerScript","JitsiStreamPresenterEffect","videoDiv","firstVideoTrack","_canvas","_ctx","getContext","_desktopElement","_videoElement","_frameRate","autoplay","play","display","_onVideoFrameTimer","_renderVideo","_desktopStream","drawImage","beginPath","lineWidth","strokeStyle","rect","stroke","_videoFrameTimerWorker","captureStream","Module","readyPromiseResolve","moduleOverrides","ENVIRONMENT_IS_WEB","ENVIRONMENT_IS_WORKER","arguments_","importScripts","readBinary","scriptDirectory","currentScript","xhr","responseType","wasmBinary","wasmMemory","out","WebAssembly","HEAPU8","HEAP32","wasmTable","Table","ABORT","updateGlobalBufferAndViews","Int8Array","Int16Array","Int32Array","Uint16Array","Uint32Array","Float64Array","INITIAL_INITIAL_MEMORY","callRuntimeCallbacks","callbacks","arg","Memory","DYNAMICTOP_PTR","__ATPRERUN__","__ATINIT__","__ATMAIN__","__ATPOSTRUN__","runDependencies","runDependencyWatcher","dependenciesFulfilled","abort","RuntimeError","isDataURI","filename","path","wasmBinaryFile","getBinary","emscripten_realloc_buffer","grow","___wasm_call_ctors","calledRun","asmLibraryArg","dest","num","copyWithin","requestedSize","oldSize","maxHeapSize","cutDown","overGrownHeapSize","receiveInstance","removeRunDependency","receiveInstantiatedSource","instantiateArrayBuffer","binary","instantiate","instantiateStreaming","instantiateAsync","createWasm","run","doRun","postRun","preRun","runCaller","ready","RnnoiseProcessor","wasmInterface","_wasmInterface","_wasmPcmInput","_malloc","RNNOISE_SAMPLE_LENGTH","_wasmPcmOutput","_free","_wasmPcmInputF32Index","_context","_rnnoise_create","_releaseWasmResources","_copyPCMSampleToWasmBuffer","HEAPF32","_convertTo16BitPCM","f32Array","_rnnoise_destroy","pcmFrame","pcmFrameLength","_rnnoise_process_frame","rnnoiseModule","ScreenshotCaptureEffect","_currentCanvas","_currentCanvasContext","_handleWorkerAction","_initScreenshotCapture","_streamWorker","_streamHeight","_streamWidth","storedCanvasContext","getImageData","_storedImageData","_handleScreenshot","_shouldProcessScreenshot","nbPixels","diffPixels","pixelmatch","VIRTUAL_BACKGROUND_TYPE","JitsiStreamBackgroundEffect","model","virtualBackground","backgroundType","_virtualImage","crossOrigin","virtualSource","_virtualVideo","_model","_segmentationPixelCount","_onMaskFrameTimer","_outputCanvasElement","_inputVideoElement","_renderMask","runPostProcessing","_outputCanvasCtx","globalCompositeOperation","_segmentationMaskCanvas","_desktopShareDimensions","blurValue","runInference","_runInference","outputMemoryOffset","_getOutputMemoryOffset","background","person","backgroundExp","exp","personExp","_segmentationMask","_segmentationMaskCtx","putImageData","desktopShareTrack","resizeSource","_maskFrameTimerWorker","imageData","inputMemoryOffset","_getInputMemoryOffset","ImageData","onloadeddata","segmentationDimensions","Logger","getAnalyticsAttributesFromOptions","video_requested","ProxyConnectionService","jitsiConnection","_onFatalError","_convertStringToXML","UNAVAILABLE","_selfCloseConnection","xml","xmlDom","DOMParser","parseFromString","isVideo","convertVideoToDesktop","jitsiLocalTracks","createLocalTracks","stringifiedIq","XMLSerializer","serializeToString","onConnectionClosed","createPresenterEffect","createRnnoiseProcessor","rnnoiseWasmInit","mod","createScreenshotCaptureEffect","createVirtualBackgroundEffect","dispatch","tflite","wasmCheck","simd","createTFLiteSIMDModule","createTFLiteModule","modelBufferOffset","_getModelBufferMemoryOffset","modelResponse","ok","arrayBuffer","_loadModel","constants","recording","BUSY","ERROR","RESOURCE_CONSTRAINT","UNEXPECTED_REQUEST","SERVICE_UNAVAILABLE","FILE","STREAM","sipVideoGW","detection","errors","errorTypes","logLevels","JitsiMediaDevices","enableAnalyticsLogging","enableWindowOnErrorHandler","getGlobalOnErrorHandler","isWebRtcSupported","setLogLevel","setLogLevelById","addGlobalLogTransport","globalTransport","removeGlobalLogTransport","setGlobalLogOptions","oldfirePermissionPromptIsShownEvent","promiseFulfilled","firePermissionPromptIsShownEvent","fireSlowPromiseEvent","restOptions","currentlyAvailableMediaDevices","setVideoTrackContentHints","createTrackVADEmitter","localAudioDeviceId","createAudioMixer","getActiveAudioDevice","audioDevices","devicePromiseArray","micDevice","devicePromise","outcomeArray","successfulPromises","rejectedPromises","rejectReasons","deviceLabel","isCollectingLocalStats","lineno","colno","setNetworkInfo","createAnalyticsEvent","hint","contentHint","precallTest","util","AuthUtil","isLocalStats","_userId","_isLocalStats","_dominantSpeakerStart","_hasLeft","_faceExpressions","happy","neutral","surprised","angry","fearful","disgusted","sad","getUserId","isDominantSpeaker","isNowDominantSpeaker","timeElapsed","getTotalDominantSpeakerTime","hasLeft","getFaceExpressions","u","y","onload","readbuffer","read","scriptArgs","quit","print","printErr","g","h","w","thisProgram","noExitRuntime","A","I","M","E","R","TextDecoder","S","subarray","decode","fromCharCode","O","HEAP8","HEAP16","HEAPU16","HEAPU32","HEAPF64","INITIAL_MEMORY","C","T","P","H","ne","W","D","L","onAbort","U","preloadedImages","preloadedAudios","F","B","N","G","z","X","hrtime","dateNow","Y","J","K","Q","V","strings","USER","LOGNAME","PATH","PWD","HOME","LANG","languages","Z","mappings","printChar","varargs","getStr","get64","ee","onExit","re","hardwareConcurrency","asm","monitorRunDependencies","instantiateWasm","_getInputHeight","_getInputWidth","_getInputChannelCount","_getOutputHeight","_getOutputWidth","_getOutputChannelCount","___errno_location","ae","onRuntimeInitialized","preInit","getTokenAuthUrl","urlPattern","roleUpgrade","srcEvent","Function","oldOnErrorHandler","oldOnUnhandledRejection","onunhandledrejection","errHandler","callUnhandledRejectionHandler","randomInt","randomElement","randomHexDigit","randomHexString","randomAlphanumStr","currentExecutingScript","loadScript","prepend","relativeURL","loadCallback","script","referenceNode","scriptEl","scriptSrc","baseScriptSrc","parentNode","char","abs","generateUsername","internals","firstOptions","reviver","protoAction","scan","SyntaxError","__proto__","safeParse","ignoreError","LogCollector","logStorage","stringifyObjects","storeInterval","maxEntryLength","levels","logLevel","_log","storeLogsIntervalID","totalLen","outputCache","someObject","formatLogMessage","prevMessage","prevMessageText","_flush","_reschedulePublishInterval","reschedule","isReady","cachedQueue","storeLogs","consoleTransport","globalTransports","addGlobalTransport","removeGlobalTransport","transportIdx","globalOptions","getCallerInfo","callerInfo","fileLocation","column","disableCallerInfo","transports","logPrefixes","toISOString","fullLogParts","methods","setGlobalOptions","setLevel","TRACE","DEBUG","INFO","LOG","WARN","idLoggers","loggers","curLevel","grammar","reg","subtype","sessionConfig","raddr","dir2","clksrcExt","mediaClockValue","rateNumerator","rateDenominator","writer","parseParams","parseFmtpConfig","parsePayloads","parseRemoteCandidates","parseImageAttributes","parseSimulcastStreamList","toIntIfInt","parseReg","needsBlank","keyLocation","rawName","attachProperties","validLine","paramReducer","acc","scid","formatRegExp","formatStr","makeLine","defaultOuterOrder","defaultInnerOrder","outerOrder","innerOrder","transformUtils","parseSsrcs","writeSsrcs","processVideo","validateDescription","_buildNewToOldSsrcMap","newSsrcList","oldSsrcList","newSsrc","oldSsrc","_fillInSourceDataFromCache","newSimSsrcs","ssrcsToReplace","ssrcsToAdd","_generateSourceData","addAssociatedStream","_restoreSimulcast","enableConferenceFlag","order","relatedGroup","relatedSsrcs","relatedSSRC","simulcastGroup","nuke","implodeRemoteSimulcast","invalid","assertGoogConference","xGoogleFlag","removeGoogConference","b64","lens","getLens","validLen","placeHoldersLen","toByteArray","Arr","_byteLength","curByte","revLookup","fromByteArray","uint8","extraBytes","maxChunkLength","len2","encodeChunk","lookup","__esModule","default","getFirstMatch","getSecondMatch","matchAndReturnConst","getWindowsVersionName","getMacOSVersionName","getAndroidVersionName","getVersionPrecision","compareVersions","getBrowserAlias","BROWSER_ALIASES_MAP","getBrowserTypeByAlias","BROWSER_MAP","ENGINE_MAP","OS_MAP","PLATFORMS_MAP","Bada","BlackBerry","Chrome","Chromium","Epiphany","Firefox","Focus","Generic","Googlebot","Maxthon","Opera","PhantomJS","Puffin","QupZilla","QQ","QQLite","Safari","Sailfish","SeaMonkey","Sleipnir","Swing","Tizen","Vivaldi","WeChat","Roku","amazon_silk","android","bada","blackberry","chrome","epiphany","firefox","generic","googlebot","google_search","ie","k_meleon","maxthon","edge","mz","naver","opera","opera_coast","phantomjs","puffin","qupzilla","qq","qqlite","safari","sailfish","samsung_internet","seamonkey","sleipnir","swing","tizen","uc","vivaldi","webos","wechat","yandex","tablet","mobile","tv","WindowsPhone","Windows","MacOS","iOS","Android","WebOS","Linux","ChromeOS","PlayStation4","EdgeHTML","Blink","Trident","Presto","Gecko","WebKit","getParser","_ua","parsedResult","getUA","parseBrowser","describe","getBrowser","getOS","os","parseOS","getOSName","getOSVersion","getPlatform","parsePlatform","getPlatformType","getEngine","engine","parseEngine","getEngineName","isOS","isPlatform","isBrowser","compareVersion","is","versionName","vendor","scriptReadyRegex","fullPageUrl","pageUrl","scripts","supportsScriptReadyState","isNotOpera","hasNativeCurrentScriptAccessor","stackTraceLimit","hasStackBeforeThrowing","hasStackAfterThrowing","getScriptUrlFromStack","skipStackDepth","ignoreMessage","_nearestExecutingScript","eligibleScripts","getScriptFromUrl","getSoleInlineScript","thrownErr","near","far","ReflectOwnKeys","Reflect","ReflectApply","ownKeys","getOwnPropertySymbols","getOwnPropertyNames","NumberIsNaN","errorListener","resolver","eventTargetAgnosticAddListener","addErrorHandlerIfEventEmitter","_events","_eventsCount","_maxListeners","defaultMaxListeners","checkListener","_getMaxListeners","_addListener","existing","warning","newListener","warned","onceWrapper","fired","wrapFn","_onceWrap","wrapped","_listeners","unwrap","evlistener","unwrapListeners","arrayClone","copy","wrapListener","getPrototypeOf","setMaxListeners","getMaxListeners","doError","er","listeners","prependListener","prependOnceListener","position","originalListener","spliceOne","rawListeners","eventNames","WINDOW","JS_MD5_NO_WINDOW","WEB_WORKER","NODE_JS","JS_MD5_NO_NODE_JS","global","COMMON_JS","JS_MD5_NO_COMMON_JS","AMD","ARRAY_BUFFER","JS_MD5_NO_ARRAY_BUFFER","HEX_CHARS","EXTRA","SHIFT","OUTPUT_TYPES","BASE64_ENCODE_CHAR","blocks","buffer8","JS_MD5_NO_ARRAY_BUFFER_IS_VIEW","isView","createOutputMethod","outputType","Md5","update","createMethod","nodeWrap","eval","Buffer","nodeMethod","createHash","digest","sharedMemory","h0","h1","h2","h3","bytes","hBytes","finalized","hashed","notString","lastByteIndex","finalize","bc","da","hex","base64","v1","v2","v3","base64Str","md5","HASH_UNDEFINED","argsTag","boolTag","dateTag","funcTag","genTag","mapTag","numberTag","objectTag","promiseTag","regexpTag","setTag","stringTag","symbolTag","weakMapTag","arrayBufferTag","dataViewTag","float32Tag","float64Tag","int8Tag","int16Tag","int32Tag","uint8Tag","uint8ClampedTag","uint16Tag","uint32Tag","reFlags","reIsHostCtor","reIsUint","cloneableTags","freeGlobal","freeSelf","freeExports","nodeType","freeModule","moduleExports","addMapEntry","pair","addSetEntry","arrayReduce","initAccum","isHostObject","mapToArray","overArg","setToArray","uid","arrayProto","funcProto","objectProto","coreJsData","maskSrcKey","IE_PROTO","funcToString","objectToString","reIsNative","getPrototype","objectCreate","propertyIsEnumerable","nativeGetSymbols","nativeIsBuffer","isBuffer","nativeKeys","getNative","WeakMap","nativeCreate","dataViewCtorString","toSource","mapCtorString","promiseCtorString","setCtorString","weakMapCtorString","symbolProto","symbolValueOf","valueOf","Hash","entry","ListCache","MapCache","Stack","__data__","assignValue","object","objValue","eq","assocIndexOf","baseClone","isDeep","isFull","customizer","isArr","initCloneArray","copyArray","getTag","isFunc","cloneBuffer","isPrototype","initCloneObject","copyObject","getSymbols","copySymbols","baseAssign","cloneFunc","symbol","Ctor","cloneArrayBuffer","dataView","byteOffset","cloneDataView","typedArray","cloneTypedArray","cloneMap","regexp","lastIndex","cloneRegExp","cloneSet","initCloneByTag","stacked","props","keysFunc","symbolsFunc","arrayPush","baseGetAllKeys","getAllKeys","arrayEach","subValue","getMapData","getValue","isFunction","baseIsNative","pairs","LARGE_ARRAY_SIZE","isIndex","other","ctorString","isLength","inherited","isObjectLike","isArrayLikeObject","isArguments","baseTimes","skipIndexes","arrayLikeKeys","baseKeys","reTrim","reIsBadHex","reIsBinary","reIsOctal","freeParseInt","nativeMax","nativeMin","toNumber","isSymbol","isBinary","wait","lastArgs","lastThis","maxWait","timerId","lastCallTime","lastInvokeTime","leading","maxing","trailing","invokeFunc","thisArg","leadingEdge","timerExpired","shouldInvoke","timeSinceLastCall","trailingEdge","remainingWait","debounced","isInvoking","arrayTag","errorTag","typedArrayTags","freeProcess","nodeUtil","binding","nodeIsTypedArray","isTypedArray","arraySome","predicate","nativeObjectToString","symToStringTag","SetCache","baseGetTag","isOwn","unmasked","getRawTag","baseIsArguments","baseIsEqual","bitmask","equalFunc","objIsArr","othIsArr","objTag","othTag","objIsObj","othIsObj","isSameTag","equalArrays","convert","isPartial","equalByTag","objIsWrapped","othIsWrapped","objUnwrapped","othUnwrapped","objProps","objLength","skipCtor","othValue","compared","objCtor","othCtor","equalObjects","baseIsEqualDeep","arrLength","othLength","seen","arrValue","othIndex","isMasked","resIndex","arrayFilter","baseUnary","isArg","isBuff","isType","img1","img2","isPixelData","defaultOptions","a32","b32","identical","diffMask","drawGrayPixel","alpha","maxDelta","delta","colorDelta","includeAA","antialiased","drawPixel","diffColorAlt","diffColor","aaColor","BYTES_PER_ELEMENT","img","x1","y1","x0","y0","x2","y2","minX","minY","maxX","maxY","zeroes","hasManySiblings","pos2","yOnly","r1","g1","b1","a1","r2","g2","b2","a2","blend","rgb2y","rgb2i","rgb2q","localCName","generateIdentifier","splitLines","splitSections","getDescription","getMediaSections","matchPrefix","parseCandidate","relatedAddress","relatedPort","tcpType","writeCandidate","parseIceOptions","parseRtpMap","parsed","clockRate","numChannels","writeRtpMap","preferredPayloadType","writeExtmap","headerExtension","preferredId","kv","writeFmtp","parseRtcpFb","writeRtcpFb","rtcpFeedback","parseSsrcMedia","sp","colon","parseSsrcGroup","getMid","algorithm","getDtlsParameters","fingerprints","writeDtlsParameters","setupType","fp","parseCryptoLine","cryptoSuite","keyParams","sessionParams","writeCryptoLine","writeCryptoKeyParams","parseCryptoKeyParams","keyMethod","keySalt","lifeTime","mkiValue","mkiLength","getCryptoParameters","getIceParameters","writeIceParameters","iceLite","parseRtpParameters","headerExtensions","fecMechanisms","rtcp","rtpmapline","fmtps","writeRtpDescription","maxptime","extension","parseRtpEncodingParameters","encodingParameters","hasRed","hasUlpfec","flows","apt","encParam","codecPayloadType","rtx","fec","mechanism","parseRtcpParameters","rtcpParameters","remoteSsrc","rsize","reducedSize","compound","mux","writeRtcpParameters","parseMsid","spec","planB","msidParts","parseSctpDescription","maxSizeLine","sctpPort","sctpMapLines","writeSctpDescription","generateSessionId","writeSessionBoilerplate","sessId","sessVer","sessUser","getDirection","getKind","isRejected","parseOLine","netType","addressType","isValidSDP","global$1","_typeof","_toConsumableArray","arr2","_arrayWithoutHoles","iter","_iterableToArray","_nonIterableSpread","safe_add","lsw","str2binl","bin","md5_cmn","cnt","md5_ff","md5_gg","md5_hh","md5_ii","core_md5","olda","oldb","oldc","oldd","MD5","hexdigest","binarray","hex_tab","binl2hex","binl2str","core_sha1","olde","rol","safe_add$1","sha1_ft","sha1_kt","core_hmac_sha1","bkey","str2binb","ipad","opad","binb2b64","triplet","binb2str","SHA1","b64_hmac_sha1","str_hmac_sha1","str_sha1","cookies","cookieName","expires","cookieObj","cookieValue","escape","unescape","cookie","Builder","VERSION","NS","HTTPBIND","BOSH","CLIENT","AUTH","ROSTER","PROFILE","DISCO_INFO","DISCO_ITEMS","MUC","SASL","FRAMING","BIND","SESSION","STANZAS","XHTML_IM","XHTML","css","validTag","validAttribute","validCSS","CONNECTING","CONNFAIL","AUTHENTICATING","AUTHFAIL","DISCONNECTED","DISCONNECTING","ATTACHED","REDIRECT","CONNTIMEOUT","BINDREQUIRED","ErrorCondition","BAD_FORMAT","CONFLICT","MISSING_JID_NODE","NO_AUTH_MECH","UNKNOWN_REASON","LogLevel","FATAL","ElementType","NORMAL","TEXT","CDATA","FRAGMENT","SECONDARY_TIMEOUT","addNamespace","forEachChild","elemName","childNodes","childNode","isTagEqual","_xmlGenerator","_makeGenerator","doc","implementation","createDocument","documentMode","_getIEXmlDom","xmlGenerator","docStrings","ActiveXObject","xmlTextNode","xmlescape","xmlunescape","createTextNode","xmlHtmlNode","html","loadXML","getText","nodeValue","copyElement","_i","createHtml","cssText","cssAttrs","cssName","cssValue","_i2","createDocumentFragment","_i3","_i4","escapeNode","unescapeNode","getNodeFromJid","getDomainFromJid","bare","getBareJidFromJid","getResourceFromJid","_handleError","fatal","sourceURL","lineNumber","getNamedItem","_requestId","_connectionPlugins","ptype","moreattrs","removeAttribute","impNode","xmlGen","importNode","newElem","fragment","xhtml","Handler","ns","matchBare","matchBareFromJid","getNamespace","elNamespace","ignoreNamespaceFragment","namespaceMatch","_this","nsMatch","isMatch","elem_type","TimedHandler","period","lastCalled","Connection","_this2","Websocket","Bosh","_sasl_data","do_session","do_bind","timedHandlers","removeTimeds","removeHandlers","addTimeds","addHandlers","protocolErrorHandlers","_idleTimeout","_disconnectTimeout","authenticated","do_authentication","restored","_uniqueId","_sasl_success_handler","_sasl_failure_handler","_sasl_challenge_handler","_onIdle","registerSASLMechanisms","mechanisms","_reset","_requests","getUniqueId","suffix","addProtocolErrorHandler","status_code","hold","route","authcid","authzid","servtype","connect_callback","wind","_attach","restore","_sessionCachingSupported","_restore","sessionStorage","xmlInput","xmlOutput","nextValidRid","_queueData","_this3","timeoutHandler","deleteTimedHandler","addTimedHandler","_this4","iqtype","_sendRestart","_this5","thand","handRef","hand","SASLAnonymous","SASLExternal","SASLMD5","SASLOAuthBearer","SASLXOAuth2","SASLPlain","SASLSHA1","registerSASLMechanism","_addSysTimedHandler","_onDisconnectTimeout","_disconnect","condition","statusChanged","_dataRecv","_this6","_reqToData","strip","_emptyQueue","cond","conflict","UNKOWN_REASON","_i5","_hand","_connect_cb","_callback","bodyWrap","mech","_no_auth_received","sortMechanismsByPriority","higher","swap","_attemptSASLAuth","_attemptLegacyAuth","mechanism_found","_sasl_success_cb","_sasl_failure_cb","_sasl_challenge_cb","_sasl_mechanism","onStart","request_auth_exchange","isClientFirst","onChallenge","btoa","challenge","_onLegacyAuthIQResult","_auth2_cb","_this7","serverSignature","streamfeature_handlers","_onStreamFeaturesAfterSASL","explicitResourceBinding","_onResourceBindResultIQ","jidNode","_establishSession","_onSessionResultIQ","_this8","_i6","_thand","SASLMechanism","auth_str","test_cnonce","cnonce","nonce","Hi","U_old","authMessage","attribMatch","clientKey","serverKey","clientSignature","_quote","realm","host","digest_uri","cred","A1","A2","core","Strophe$1","$build$1","Request","sends","xmlData","origFunc","date","NaN","dead","age","timeDead","_newXHR","getResponse","responseXML","documentElement","overrideMimeType","_conn","inactivity","keepalive","_cacheSession","_onRequestStateChange","_throttledRequestHandler","typ","_sendTerminate","_callProtocolErrorHandlers","reqStatus","_getRequestStatus","err_callback","HTTP","_hitError","time_elapsed","def","getAllResponseHeaders","valid_request","too_many_retries","_removeRequest","reqIs0","_restartRequest","_processRequest","primary_timeout","secondary_timeout","server_error","content_type","contentType","withCredentials","e2","sendFunc","customHeaders","backoff","Strophe$2","$build$2","new_service","_buildStream","_check_streamerror","connectstatus","errorString","_onOpen","_connect_cb_wrapper","_handleStreamStart","streamStart","parsedMessage","see_uri","_streamWrap","CLOSED","closeString","rawStanza","firstChild","startString","_items","conn","_onDiscoInfo","_onDiscoItems","addIdentity","lang","var_name","addItem","call_back","_buildIQResult","query_attrs","iqresult","autoSendCountOnEveryIncomingStanza","requestResponseInterval","_c","_NS","_isStreamManagementEnabled","_serverProcesssedStanzasCounter","_clientProcessedStanzasCounter","_clientSentStanzasCounter","_originalXMLOutput","_requestHandler","_incomingHandler","_requestResponseIntervalCount","_isSupported","_unacknowledgedStanzas","_acknowledgedStanzaListeners","addAcknowledgedStanzaListener","_resumeToken","_resuming","_originalConnect","_connectArgs","requestAcknowledgement","getOutgoingCounter","getIncomingCounter","_interceptConnectArgs","_originalOnStreamFeaturesAfterSASL","_originalDoDisconnect","_interceptDoDisconnect","_originalDisconnect","_interceptDisconnect","_resumeState","_storedJid","previd","_handleServerRequestHandler","_ackHandler","_handleServerAck","_incomingStanzaHandler","_enabledHandler","_handleEnabled","_resumeFailedHandler","_handleResumeFailed","_resumedHandler","_handleResumed","_increaseSentStanzasCounter","firstElementChild","handledCount","_handleAcknowledgedStanzas","_increaseReceivedStanzasCounter","_answerProcessedStanzas","reportedHandledCount","lastKnownHandledCount","_throwError","byteToHex","bth","_v","_v2","_v3","_v4","_interopRequireDefault","getOutputLength","inputLength8","safeAdd","md5cmn","md5ff","md5gg","md5hh","md5ii","encodeURIComponent","length32","hexTab","md5ToHexEncodedArray","wordsToMd5","length8","bytesToWords","rnds8","msCrypto","ROTL","ceil","_rng","_bytesToUuid","_nodeId","_clockseq","_lastMSecs","_lastNSecs","clockseq","seedBytes","rng","msecs","nsecs","dt","tl","tmh","_md","_default","hashfunc","generateUUID","namespace","stringToBytes","uuidToBytes","DNS","rnds","_sha","validate","Instance","globalThis","of","support","supportStreaming","bigInt","bulk","exceptions","memory64","mutableGlobal","multiValue","saturateConversions","signExtensions","tailCall","threads","references","typeReflection","funcReferences","CAMERA","DESKTOP_HIGH_FPS","NONE","ENVIRONMENT","AV1","CREATE_ANSWER_FAILED","CREATE_OFFER_FAILED","DATA_CHANNEL_OPEN","ENDPOINT_CONN_STATUS_CHANGED","LASTN_ENDPOINT_CHANGED","SENDER_VIDEO_CONSTRAINTS_CHANGED","LASTN_VALUE_CHANGED","LOCAL_TRACK_SSRC_UPDATED","TRACK_ATTACHED","REMOTE_TRACK_ADDED","REMOTE_TRACK_REMOVED","SET_LOCAL_DESCRIPTION_FAILED","SET_REMOTE_DESCRIPTION_FAILED","AUDIO_OUTPUT_DEVICE_CHANGED","DEVICE_LIST_WILL_CHANGE","DEVICE_LIST_AVAILABLE","LOCAL_UFRAG_CHANGED","REMOTE_UFRAG_CHANGED","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","loaded","__webpack_modules__","amdO","getter","definition","nmd","paths","__webpack_exports__"],"sourceRoot":""}