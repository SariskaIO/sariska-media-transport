{"version":3,"file":"sariska-media-transport.min.js","mappings":"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KAAK,IAAI,KAAK,IAAI,KAAK,GAAG,KAAK,IAAI,KAAK,IAAI,KAAK,GAAG,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,IAAI,KAAK,EAAE,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,OAAO,OAAO,KAAK,GAAG,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,OAAO,EAAE,KAAK,IAAI,KAAK,IAAI,KAAK,EAAE,KAAK,IAAI,KAAK,EAAE,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,OAAO,EAAE,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,EAAE,OAAO,KAAK,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,OAAO,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,OAAO,WAAW,KAAK,GAAG,KAAK,EAAE,OAAO,MAAM,KAAK,GAAG,KAAK,GAAG,OAAO,GAAG,KAAK,GAAG,KAAK,GAAG,OAAO,KAAK,KAAK,EAAE,OAAO,QAAQ,KAAK,EAAE,OAAO,MAAM,KAAK,GAAG,OAAO,MAAM,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","sources":["webpack://SariskaMediaTransport/webpack/universalModuleDefinition","webpack://SariskaMediaTransport/./JitsiConferenceErrors.ts","webpack://SariskaMediaTransport/./JitsiConferenceEvents.ts","webpack://SariskaMediaTransport/./modules/statistics/constants.js","webpack://SariskaMediaTransport/./JitsiTrackErrors.ts","webpack://SariskaMediaTransport/./JitsiTrackError.js","webpack://SariskaMediaTransport/./service/statistics/AnalyticsEvents.ts","webpack://SariskaMediaTransport/./service/statistics/Events.ts","webpack://SariskaMediaTransport/./node_modules/@jitsi/js-utils/build/browser-detection/browsers.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/js-utils/build/browser-detection/BrowserDetection.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/js-utils/build/jitsi-local-storage/index.js","webpack://SariskaMediaTransport/./modules/browser/BrowserCapabilities.js","webpack://SariskaMediaTransport/./modules/browser/index.js","webpack://SariskaMediaTransport/./modules/statistics/AnalyticsAdapter.js","webpack://SariskaMediaTransport/./modules/statistics/CallStats.js","webpack://SariskaMediaTransport/./modules/statistics/LocalStatsCollector.js","webpack://SariskaMediaTransport/./modules/util/MathUtil.js","webpack://SariskaMediaTransport/./modules/statistics/PerformanceObserverStats.js","webpack://SariskaMediaTransport/./service/RTC/MediaType.ts","webpack://SariskaMediaTransport/./modules/statistics/RTPStatsCollector.js","webpack://SariskaMediaTransport/./modules/statistics/statistics.js","webpack://SariskaMediaTransport/./JitsiConferenceEventManager.js","webpack://SariskaMediaTransport/./JitsiTrackEvents.ts","webpack://SariskaMediaTransport/./modules/connectivity/ParticipantConnectionStatus.js","webpack://SariskaMediaTransport/./JitsiParticipant.js","webpack://SariskaMediaTransport/./JitsiConnectionEvents.ts","webpack://SariskaMediaTransport/./JitsiConnectionErrors.ts","webpack://SariskaMediaTransport/./modules/util/Deferred.js","webpack://SariskaMediaTransport/./modules/util/Listenable.js","webpack://SariskaMediaTransport/./modules/e2ee/E2EEContext.js","webpack://SariskaMediaTransport/./modules/e2ee/KeyHandler.js","webpack://SariskaMediaTransport/./modules/e2ee/ExternallyManagedKeyHandler.js","webpack://SariskaMediaTransport/./node_modules/uuid/wrapper.mjs","webpack://SariskaMediaTransport/./modules/e2ee/OlmAdapter.js","webpack://SariskaMediaTransport/./modules/e2ee/ManagedKeyHandler.js","webpack://SariskaMediaTransport/./modules/e2ee/crypto-utils.js","webpack://SariskaMediaTransport/./modules/e2ee/E2EEncryption.js","webpack://SariskaMediaTransport/./modules/flags/FeatureFlags.js","webpack://SariskaMediaTransport/./modules/xmpp/Caps.js","webpack://SariskaMediaTransport/./modules/connectivity/NetworkInfo.js","webpack://SariskaMediaTransport/./modules/xmpp/ResumeTask.js","webpack://SariskaMediaTransport/./modules/util/Retry.js","webpack://SariskaMediaTransport/./modules/xmpp/StropheLastSuccess.js","webpack://SariskaMediaTransport/./modules/xmpp/ConnectionPlugin.js","webpack://SariskaMediaTransport/./modules/xmpp/strophe.ping.js","webpack://SariskaMediaTransport/./modules/xmpp/XmppConnection.js","webpack://SariskaMediaTransport/./JitsiTranscriptionStatus.ts","webpack://SariskaMediaTransport/./modules/xmpp/AVModeration.js","webpack://SariskaMediaTransport/./modules/xmpp/BreakoutRooms.js","webpack://SariskaMediaTransport/./modules/xmpp/Lobby.js","webpack://SariskaMediaTransport/./modules/settings/Settings.js","webpack://SariskaMediaTransport/./modules/xmpp/moderator.js","webpack://SariskaMediaTransport/./modules/xmpp/ChatRoom.js","webpack://SariskaMediaTransport/./modules/xmpp/strophe.emuc.js","webpack://SariskaMediaTransport/./modules/xmpp/JingleHelperFunctions.js","webpack://SariskaMediaTransport/./service/RTC/MediaDirection.ts","webpack://SariskaMediaTransport/./modules/RTC/ScreenObtainer.js","webpack://SariskaMediaTransport/./modules/sdp/SDPUtil.js","webpack://SariskaMediaTransport/./modules/sdp/SDP.js","webpack://SariskaMediaTransport/./modules/sdp/SDPDiffer.js","webpack://SariskaMediaTransport/./modules/util/AsyncQueue.js","webpack://SariskaMediaTransport/./modules/xmpp/JingleSessionState.ts","webpack://SariskaMediaTransport/./modules/xmpp/JingleSession.js","webpack://SariskaMediaTransport/./modules/xmpp/MediaSessionEvents.ts","webpack://SariskaMediaTransport/./modules/xmpp/JingleSessionPC.js","webpack://SariskaMediaTransport/./modules/xmpp/strophe.jingle.js","webpack://SariskaMediaTransport/./modules/xmpp/strophe.logger.js","webpack://SariskaMediaTransport/./modules/xmpp/strophe.rayo.js","webpack://SariskaMediaTransport/./modules/xmpp/strophe.util.js","webpack://SariskaMediaTransport/./modules/xmpp/xmpp.js","webpack://SariskaMediaTransport/./authenticateAndUpgradeRole.js","webpack://SariskaMediaTransport/./modules/RTC/CodecSelection.js","webpack://SariskaMediaTransport/./modules/RTC/BridgeChannel.js","webpack://SariskaMediaTransport/./modules/RTC/RTCUtils.js","webpack://SariskaMediaTransport/./modules/RTC/JitsiTrack.js","webpack://SariskaMediaTransport/./modules/RTC/JitsiLocalTrack.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/sdp-interop/lib/transform.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/sdp-interop/lib/interop.js","webpack://SariskaMediaTransport/./service/RTC/SignalingEvents.ts","webpack://SariskaMediaTransport/./service/RTC/SignalingLayer.js","webpack://SariskaMediaTransport/./modules/sdp/SdpTransformUtil.js","webpack://SariskaMediaTransport/./modules/sdp/LocalSdpMunger.js","webpack://SariskaMediaTransport/./modules/sdp/RtxModifier.js","webpack://SariskaMediaTransport/./modules/sdp/SdpConsistency.js","webpack://SariskaMediaTransport/./modules/sdp/SdpSimulcast.ts","webpack://SariskaMediaTransport/./modules/connectivity/TrackStreamingStatus.ts","webpack://SariskaMediaTransport/./modules/RTC/JitsiRemoteTrack.js","webpack://SariskaMediaTransport/./modules/RTC/TPCUtils.js","webpack://SariskaMediaTransport/./modules/RTC/TraceablePeerConnection.js","webpack://SariskaMediaTransport/./modules/RTC/RTC.js","webpack://SariskaMediaTransport/./service/connectivity/ConnectionQualityEvents.ts","webpack://SariskaMediaTransport/./modules/connectivity/ConnectionQuality.js","webpack://SariskaMediaTransport/./modules/connectivity/IceFailedHandling.js","webpack://SariskaMediaTransport/./modules/detection/DetectionEvents.ts","webpack://SariskaMediaTransport/./modules/detection/NoAudioSignalDetection.js","webpack://SariskaMediaTransport/./modules/detection/P2PDominantSpeakerDetection.js","webpack://SariskaMediaTransport/./modules/webaudio/WebAudioUtils.js","webpack://SariskaMediaTransport/./modules/detection/TrackVADEmitter.js","webpack://SariskaMediaTransport/./modules/detection/VADAudioAnalyser.js","webpack://SariskaMediaTransport/./modules/detection/VADNoiseDetection.js","webpack://SariskaMediaTransport/./modules/detection/VADTalkMutedDetection.js","webpack://SariskaMediaTransport/./modules/e2eping/e2eping.js","webpack://SariskaMediaTransport/./modules/event/Jvb121EventGenerator.js","webpack://SariskaMediaTransport/./modules/local-recording/recording/RecordingAdapter.js","webpack://SariskaMediaTransport/./modules/local-recording/recording/OggAdapter.js","webpack://SariskaMediaTransport/./modules/local-recording/recording/AbstractAudioContextAdapter.js","webpack://SariskaMediaTransport/./modules/local-recording/recording/WavAdapter.js","webpack://SariskaMediaTransport/./modules/local-recording/recording/flac/FlacAdapter.js","webpack://SariskaMediaTransport/./modules/local-recording/recording/flac/messageTypes.js","webpack://SariskaMediaTransport/./modules/local-recording/session/SessionManager.js","webpack://SariskaMediaTransport/./modules/local-recording/controller/RecordingController.js","webpack://SariskaMediaTransport/./modules/local-recording/recording/Utils.js","webpack://SariskaMediaTransport/./modules/qualitycontrol/ReceiveVideoController.js","webpack://SariskaMediaTransport/./modules/qualitycontrol/SendVideoController.js","webpack://SariskaMediaTransport/./modules/recording/recordingXMLUtils.js","webpack://SariskaMediaTransport/./modules/recording/JibriSession.js","webpack://SariskaMediaTransport/./modules/recording/RecordingManager.js","webpack://SariskaMediaTransport/./modules/statistics/AudioOutputProblemDetector.js","webpack://SariskaMediaTransport/./modules/statistics/AvgRTPStatsReporter.js","webpack://SariskaMediaTransport/./modules/statistics/SpeakerStatsCollector.js","webpack://SariskaMediaTransport/./modules/transcription/recordingResult.js","webpack://SariskaMediaTransport/./modules/transcription/trackRecorder.js","webpack://SariskaMediaTransport/./modules/transcription/audioRecorder.js","webpack://SariskaMediaTransport/./modules/transcription/word.js","webpack://SariskaMediaTransport/./modules/transcription/transcriptionServices/SphinxTranscriptionService.js","webpack://SariskaMediaTransport/./modules/transcription/transcriptionServices/AbstractTranscriptionService.js","webpack://SariskaMediaTransport/./modules/transcription/transcriber.js","webpack://SariskaMediaTransport/./modules/version/ComponentsVersions.js","webpack://SariskaMediaTransport/./modules/videosipgw/VideoSIPGWConstants.ts","webpack://SariskaMediaTransport/./modules/videosipgw/JitsiVideoSIPGWSession.js","webpack://SariskaMediaTransport/./modules/videosipgw/VideoSIPGW.js","webpack://SariskaMediaTransport/./modules/xmpp/SignalingLayerImpl.js","webpack://SariskaMediaTransport/./modules/statistics/LocalTracksDuration.js","webpack://SariskaMediaTransport/./JitsiConference.js","webpack://SariskaMediaTransport/./modules/util/parseURLParams.js","webpack://SariskaMediaTransport/./config/index.js","webpack://SariskaMediaTransport/./JitsiConnection.js","webpack://SariskaMediaTransport/./JitsiMediaDevicesEvents.ts","webpack://SariskaMediaTransport/./JitsiMediaDevices.js","webpack://SariskaMediaTransport/./modules/detection/ActiveDeviceDetector.js","webpack://SariskaMediaTransport/./modules/proxyconnection/constants.ts","webpack://SariskaMediaTransport/./modules/proxyconnection/ProxyConnectionPC.js","webpack://SariskaMediaTransport/./modules/proxyconnection/ProxyConnectionService.js","webpack://SariskaMediaTransport/./modules/statistics/PrecallTest.js","webpack://SariskaMediaTransport/./modules/webaudio/AudioMixer.js","webpack://SariskaMediaTransport/./service/e2eping/E2ePingEvents.ts","webpack://SariskaMediaTransport/./modules/stream-effects/presenter/TimeWorker.js","webpack://SariskaMediaTransport/./modules/stream-effects/presenter/JitsiStreamPresenterEffect.js","webpack://SariskaMediaTransport/./node_modules/rnnoise-wasm/dist/index.js","webpack://SariskaMediaTransport/./modules/stream-effects/rnnoise/RnnoiseProcessor.js","webpack://SariskaMediaTransport/./modules/stream-effects/rnnoise/index.js","webpack://SariskaMediaTransport/./modules/stream-effects/screenshot-capture/constants.js","webpack://SariskaMediaTransport/./modules/stream-effects/screenshot-capture/worker.js","webpack://SariskaMediaTransport/./modules/stream-effects/screenshot-capture/ScreenshotCaptureEffect.js","webpack://SariskaMediaTransport/./modules/stream-effects/virtual-background/constants.js","webpack://SariskaMediaTransport/./modules/stream-effects/virtual-background/TimerWorker.js","webpack://SariskaMediaTransport/./modules/stream-effects/virtual-background/JitsiStreamBackgroundEffect.js","webpack://SariskaMediaTransport/./modules/stream-effects/virtual-background/index.js","webpack://SariskaMediaTransport/./SariskaMediaTransport.js","webpack://SariskaMediaTransport/./modules/stream-effects/presenter/index.js","webpack://SariskaMediaTransport/./modules/stream-effects/screenshot-capture/index.js","webpack://SariskaMediaTransport/./modules/recording/recordingConstants.js","webpack://SariskaMediaTransport/./modules/util/createAnalyticsEvent.js","webpack://SariskaMediaTransport/./index.js","webpack://SariskaMediaTransport/./modules/statistics/SpeakerStats.js","webpack://SariskaMediaTransport/./modules/stream-effects/virtual-background/tflite-simd.js","webpack://SariskaMediaTransport/./modules/stream-effects/virtual-background/tflite.js","webpack://SariskaMediaTransport/./modules/util/AuthUtil.js","webpack://SariskaMediaTransport/./modules/util/EventEmitterForwarder.js","webpack://SariskaMediaTransport/./modules/util/GlobalOnErrorHandler.js","webpack://SariskaMediaTransport/./modules/util/RandomUtil.js","webpack://SariskaMediaTransport/./modules/util/ScriptUtil.js","webpack://SariskaMediaTransport/./modules/util/StringUtils.js","webpack://SariskaMediaTransport/./modules/util/UsernameGenerator.js","webpack://SariskaMediaTransport/./node_modules/@hapi/bourne/lib/index.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/logger/lib/LogCollector.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/logger/lib/Logger.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/logger/lib/index.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/sdp-interop/node_modules/sdp-transform/lib/grammar.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/sdp-interop/node_modules/sdp-transform/lib/index.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/sdp-interop/node_modules/sdp-transform/lib/parser.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/sdp-interop/node_modules/sdp-transform/lib/writer.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/sdp-simulcast/lib/index.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/sdp-simulcast/lib/transform-utils.js","webpack://SariskaMediaTransport/./node_modules/async/lib/async.js","webpack://SariskaMediaTransport/./node_modules/base64-js/index.js","webpack://SariskaMediaTransport/./node_modules/bowser/es5.js","webpack://SariskaMediaTransport/./node_modules/current-executing-script/dist/currentExecutingScript.js","webpack://SariskaMediaTransport/./node_modules/events/events.js","webpack://SariskaMediaTransport/./node_modules/js-md5/src/md5.js","webpack://SariskaMediaTransport/./node_modules/lodash.clonedeep/index.js","webpack://SariskaMediaTransport/./node_modules/lodash.debounce/index.js","webpack://SariskaMediaTransport/./node_modules/lodash.isequal/index.js","webpack://SariskaMediaTransport/./node_modules/pixelmatch/index.js","webpack://SariskaMediaTransport/./node_modules/sdp-transform/lib/grammar.js","webpack://SariskaMediaTransport/./node_modules/sdp-transform/lib/index.js","webpack://SariskaMediaTransport/./node_modules/sdp-transform/lib/parser.js","webpack://SariskaMediaTransport/./node_modules/sdp-transform/lib/writer.js","webpack://SariskaMediaTransport/./node_modules/sdp/sdp.js","webpack://SariskaMediaTransport/./node_modules/strophe.js/dist/strophe.umd.js","webpack://SariskaMediaTransport/../src/strophe.disco.js","webpack://SariskaMediaTransport/../src/strophe.stream-management.js","webpack://SariskaMediaTransport/./node_modules/uuid/dist/bytesToUuid.js","webpack://SariskaMediaTransport/./node_modules/uuid/dist/index.js","webpack://SariskaMediaTransport/./node_modules/uuid/dist/md5-browser.js","webpack://SariskaMediaTransport/./node_modules/uuid/dist/rng-browser.js","webpack://SariskaMediaTransport/./node_modules/uuid/dist/sha1-browser.js","webpack://SariskaMediaTransport/./node_modules/uuid/dist/v1.js","webpack://SariskaMediaTransport/./node_modules/uuid/dist/v3.js","webpack://SariskaMediaTransport/./node_modules/uuid/dist/v35.js","webpack://SariskaMediaTransport/./node_modules/uuid/dist/v4.js","webpack://SariskaMediaTransport/./node_modules/uuid/dist/v5.js","webpack://SariskaMediaTransport/./node_modules/wasm-check/dist/wasm-check.min.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/utils.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/chrome/getusermedia.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/chrome/getdisplaymedia.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/chrome/chrome_shim.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/firefox/getusermedia.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/firefox/getdisplaymedia.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/firefox/firefox_shim.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/safari/safari_shim.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/common_shim.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/adapter_core.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/adapter_factory.js","webpack://SariskaMediaTransport/./service/RTC/BridgeVideoType.js","webpack://SariskaMediaTransport/./service/RTC/CameraFacingMode.js","webpack://SariskaMediaTransport/./service/RTC/CodecMimeType.js","webpack://SariskaMediaTransport/./service/RTC/RTCEvents.ts","webpack://SariskaMediaTransport/./service/RTC/Resolutions.js","webpack://SariskaMediaTransport/./service/RTC/VideoType.ts","webpack://SariskaMediaTransport/./service/authentication/AuthenticationEvents.js","webpack://SariskaMediaTransport/./service/statistics/constants.ts","webpack://SariskaMediaTransport/./service/xmpp/XMPPEvents.ts","webpack://SariskaMediaTransport/webpack/bootstrap","webpack://SariskaMediaTransport/webpack/runtime/amd options","webpack://SariskaMediaTransport/webpack/runtime/compat get default export","webpack://SariskaMediaTransport/webpack/runtime/define property getters","webpack://SariskaMediaTransport/webpack/runtime/global","webpack://SariskaMediaTransport/webpack/runtime/hasOwnProperty shorthand","webpack://SariskaMediaTransport/webpack/runtime/make namespace object","webpack://SariskaMediaTransport/webpack/runtime/node module decorator","webpack://SariskaMediaTransport/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SariskaMediaTransport\"] = factory();\n\telse\n\t\troot[\"SariskaMediaTransport\"] = factory();\n})(self, function() {\nreturn ","/**\n * The errors for the conference.\n */\n\nexport enum JitsiConferenceErrors {\n    /**\n     * Indicates that client must be authenticated to create the conference.\n     */\n    AUTHENTICATION_REQUIRED = 'conference.authenticationRequired',\n\n    /**\n     * Indicates that chat error occurred.\n     */\n    CHAT_ERROR = 'conference.chatError',\n\n    /**\n     * Indicates that a settings error occurred.\n     */\n    SETTINGS_ERROR = 'conference.settingsError',\n\n    /**\n     * Indicates that conference has been destroyed.\n     */\n    CONFERENCE_DESTROYED = 'conference.destroyed',\n\n    /**\n     * Indicates that max users limit has been reached.\n     */\n    CONFERENCE_MAX_USERS = 'conference.max_users',\n\n    /**\n     * Indicates that a connection error occurred when trying to join a conference.\n     */\n    CONNECTION_ERROR = 'conference.connectionError',\n\n    /**\n     * Indicates that the client has been forced to restart by jicofo when the\n     * conference was migrated from one bridge to another.\n     */\n    CONFERENCE_RESTARTED = 'conference.restarted',\n\n    /**\n     * Indicates that a connection error is due to not allowed,\n     * occurred when trying to join a conference.\n     */\n    NOT_ALLOWED_ERROR = 'conference.connectionError.notAllowed',\n\n    /**\n     * Indicates that a connection error is due to not allowed,\n     * occurred when trying to join a conference, only approved members are allowed to join.\n     */\n    MEMBERS_ONLY_ERROR = 'conference.connectionError.membersOnly',\n\n    /**\n     * Indicates that a connection error is due to denied access to the room,\n     * occurred after joining a lobby room and access is denied by the room moderators.\n     */\n    CONFERENCE_ACCESS_DENIED = 'conference.connectionError.accessDenied',\n\n    /**\n     * Indicates that focus error happened.\n     */\n    FOCUS_DISCONNECTED = 'conference.focusDisconnected',\n\n    /**\n     * Indicates that focus left the conference.\n     */\n    FOCUS_LEFT = 'conference.focusLeft',\n\n    /**\n     * Indicates that graceful shutdown happened.\n     */\n    GRACEFUL_SHUTDOWN = 'conference.gracefulShutdown',\n\n    /**\n     * Indicates that the media connection has failed.\n     */\n    ICE_FAILED = 'conference.iceFailed',\n\n    /**\n     * Indicates that the versions of the server side components are incompatible\n     * with the client side.\n     */\n    INCOMPATIBLE_SERVER_VERSIONS = 'conference.incompatible_server_versions',\n\n    /**\n     * Indicates that offer/answer had failed.\n     */\n    OFFER_ANSWER_FAILED = 'conference.offerAnswerFailed',\n\n    /**\n     * Indicates that password cannot be set for this conference.\n     */\n    PASSWORD_NOT_SUPPORTED = 'conference.passwordNotSupported',\n\n    /**\n     * Indicates that a password is required in order to join the conference.\n     */\n    PASSWORD_REQUIRED = 'conference.passwordRequired',\n\n    /**\n     * Indicates that reservation system returned error.\n     */\n    RESERVATION_ERROR = 'conference.reservationError',\n\n    /**\n     * Indicates that there is no available videobridge.\n     */\n    VIDEOBRIDGE_NOT_AVAILABLE = 'conference.videobridgeNotAvailable'\n};\n\n// exported for backward compatibility\nexport const AUTHENTICATION_REQUIRED = JitsiConferenceErrors.AUTHENTICATION_REQUIRED;\nexport const CHAT_ERROR = JitsiConferenceErrors.CHAT_ERROR;\nexport const SETTINGS_ERROR = JitsiConferenceErrors.SETTINGS_ERROR;\nexport const CONFERENCE_DESTROYED = JitsiConferenceErrors.CONFERENCE_DESTROYED;\nexport const CONFERENCE_MAX_USERS = JitsiConferenceErrors.CONFERENCE_MAX_USERS;\nexport const CONNECTION_ERROR = JitsiConferenceErrors.CONNECTION_ERROR;\nexport const CONFERENCE_RESTARTED = JitsiConferenceErrors.CONFERENCE_RESTARTED;\nexport const NOT_ALLOWED_ERROR = JitsiConferenceErrors.NOT_ALLOWED_ERROR;\nexport const MEMBERS_ONLY_ERROR = JitsiConferenceErrors.MEMBERS_ONLY_ERROR;\nexport const CONFERENCE_ACCESS_DENIED = JitsiConferenceErrors.CONFERENCE_ACCESS_DENIED;\nexport const FOCUS_DISCONNECTED = JitsiConferenceErrors.FOCUS_DISCONNECTED;\nexport const FOCUS_LEFT = JitsiConferenceErrors.FOCUS_LEFT;\nexport const GRACEFUL_SHUTDOWN = JitsiConferenceErrors.GRACEFUL_SHUTDOWN;\nexport const ICE_FAILED = JitsiConferenceErrors.ICE_FAILED;\nexport const INCOMPATIBLE_SERVER_VERSIONS = JitsiConferenceErrors.INCOMPATIBLE_SERVER_VERSIONS;\nexport const OFFER_ANSWER_FAILED = JitsiConferenceErrors.OFFER_ANSWER_FAILED;\nexport const PASSWORD_NOT_SUPPORTED = JitsiConferenceErrors.PASSWORD_NOT_SUPPORTED;\nexport const PASSWORD_REQUIRED = JitsiConferenceErrors.PASSWORD_REQUIRED;\nexport const RESERVATION_ERROR = JitsiConferenceErrors.RESERVATION_ERROR;\nexport const VIDEOBRIDGE_NOT_AVAILABLE = JitsiConferenceErrors.VIDEOBRIDGE_NOT_AVAILABLE;\n","/**\n * The events for the conference.\n */\n\nexport enum JitsiConferenceEvents {\n    /**\n     * Event indicates that the current conference audio input switched between audio\n     * input states,i.e. with or without audio input.\n     */\n    AUDIO_INPUT_STATE_CHANGE = 'conference.audio_input_state_changed',\n\n    /**\n     * Event indicates that the permission for unmuting audio has changed based on the number of audio senders in the call\n     * and the audio sender limit configured in Jicofo.\n     */\n    AUDIO_UNMUTE_PERMISSIONS_CHANGED = 'conference.audio_unmute_permissions_changed',\n\n    /**\n     * Indicates that authentication status changed.\n     */\n    AUTH_STATUS_CHANGED = 'conference.auth_status_changed',\n\n    /**\n     * Fired just before the statistics module is disposed and it's the last chance\n     * to submit some logs to the statistics service (ex. CallStats if enabled),\n     * before it's disconnected.\n     */\n    BEFORE_STATISTICS_DISPOSED = 'conference.beforeStatisticsDisposed',\n\n    /**\n     * Indicates that an error occurred.\n     */\n    CONFERENCE_ERROR = 'conference.error',\n\n    /**\n     * Indicates that conference failed.\n     */\n    CONFERENCE_FAILED = 'conference.failed',\n\n    /**\n     * Indicates that conference is in progress of joining.\n     */\n    CONFERENCE_JOIN_IN_PROGRESS = 'conference.join_in_progress',\n\n    /**\n     * Indicates that conference has been joined. The event does NOT provide any\n     * parameters to its listeners.\n     */\n    CONFERENCE_JOINED = 'conference.joined',\n\n    /**\n     * Indicates that conference has been left.\n     */\n    CONFERENCE_LEFT = 'conference.left',\n\n    /**\n     * Indicates that the conference unique identifier has been set.\n     */\n    CONFERENCE_UNIQUE_ID_SET = 'conference.unique_id_set',\n\n    /**\n     * Indicates that the connection to the conference has been established\n     * XXX This is currently fired when the *ICE* connection enters 'connected'\n     * state for the first time.\n     */\n    CONNECTION_ESTABLISHED = 'conference.connectionEstablished',\n\n    /**\n     * Indicates that the connection to the conference has been interrupted for some\n     * reason.\n     * XXX This is currently fired when the *ICE* connection is interrupted.\n     */\n    CONNECTION_INTERRUPTED = 'conference.connectionInterrupted',\n\n    /**\n     * Indicates that the connection to the conference has been restored.\n     * XXX This is currently fired when the *ICE* connection is restored.\n     */\n    CONNECTION_RESTORED = 'conference.connectionRestored',\n\n    /**\n     * A connection to the video bridge's data channel has been established.\n     */\n    DATA_CHANNEL_OPENED = 'conference.dataChannelOpened',\n\n    /**\n     * A user has changed it display name\n     */\n    DISPLAY_NAME_CHANGED = 'conference.displayNameChanged',\n\n    /**\n     * The dominant speaker was changed.\n     */\n    DOMINANT_SPEAKER_CHANGED = 'conference.dominantSpeaker',\n\n    /**\n     * UTC conference timestamp when first participant joined.\n     */\n    CONFERENCE_CREATED_TIMESTAMP = 'conference.createdTimestamp',\n\n    /**\n     * Indicates that DTMF support changed.\n     */\n    DTMF_SUPPORT_CHANGED = 'conference.dtmfSupportChanged',\n\n    /**\n     * Indicates that a message from another participant is received on data\n     * channel.\n     */\n    ENDPOINT_MESSAGE_RECEIVED = 'conference.endpoint_message_received',\n\n    /**\n     * Indicates that a message for the remote endpoint statistics has been received on the bridge channel.\n     */\n    ENDPOINT_STATS_RECEIVED = 'conference.endpoint_stats_received',\n\n    /**\n     * NOTE This is lib-jitsi-meet internal event and can be removed at any time !\n     *\n     * Event emitted when conference transits, between one to one and multiparty JVB\n     * conference. If the conference switches to P2P it's neither one to one nor\n     * a multiparty JVB conference, but P2P (the status argument of this event will\n     * be <tt>false</tt>).\n     *\n     * The first argument is a boolean which carries the previous value and\n     * the seconds argument is a boolean with the new status. The event is emitted\n     * only if the previous and the new values are different.\n     *\n     * @type {string}\n     */\n    JVB121_STATUS = 'conference.jvb121Status',\n\n    /**\n     * You are kicked from the conference.\n     * @param {JitsiParticipant} the participant that initiated the kick.\n     */\n    KICKED = 'conference.kicked',\n\n    /**\n     * Participant was kicked from the conference.\n     * @param {JitsiParticipant} the participant that initiated the kick.\n     * @param {JitsiParticipant} the participant that was kicked.\n     */\n    PARTICIPANT_KICKED = 'conference.participant_kicked',\n\n    /**\n     * The Last N set is changed.\n     *\n     * @param {Array<string>|null} leavingEndpointIds the ids of all the endpoints\n     * which are leaving Last N\n     * @param {Array<string>|null} enteringEndpointIds the ids of all the endpoints\n     * which are entering Last N\n     */\n    LAST_N_ENDPOINTS_CHANGED = 'conference.lastNEndpointsChanged',\n\n    /**\n     * The forwarded sources set is changed.\n     *\n     * @param {Array<string>} leavingForwardedSources the sourceNames of all the tracks which are leaving forwarded\n     * sources\n     * @param {Array<string>} enteringForwardedSources the sourceNames of all the tracks which are entering forwarded\n     * sources\n     */\n    FORWARDED_SOURCES_CHANGED = 'conference.forwardedSourcesChanged',\n\n    /**\n     * Indicates that the room has been locked or unlocked.\n     */\n    LOCK_STATE_CHANGED = 'conference.lock_state_changed',\n\n    /**\n     * Indicates that the region of the media server (jitsi-videobridge) that we\n     * are connected to changed (or was initially set).\n     * @type {string} the region.\n     */\n    SERVER_REGION_CHANGED = 'conference.server_region_changed',\n\n    /**\n     * An event(library-private) fired when a new media session is added to the conference.\n     * @type {string}\n     * @private\n     */\n    _MEDIA_SESSION_STARTED = 'conference.media_session.started',\n\n    /**\n     * An event(library-private) fired when the conference switches the currently active media session.\n     * @type {string}\n     * @private\n     */\n    _MEDIA_SESSION_ACTIVE_CHANGED = 'conference.media_session.active_changed',\n\n    /**\n     * Indicates that the conference had changed to members only enabled/disabled.\n     * The first argument of this event is a <tt>boolean</tt> which when set to\n     * <tt>true</tt> means that the conference is running in members only mode.\n     * You may need to use Lobby if supported to ask for permissions to enter the conference.\n     */\n    MEMBERS_ONLY_CHANGED = 'conference.membersOnlyChanged',\n\n    /**\n     * New text message was received.\n     */\n    MESSAGE_RECEIVED = 'conference.messageReceived',\n\n    /**\n     * Event indicates that the current selected input device has no signal\n     */\n    NO_AUDIO_INPUT = 'conference.no_audio_input',\n\n    /**\n     * Event indicates that the current microphone used by the conference is noisy.\n     */\n    NOISY_MIC = 'conference.noisy_mic',\n\n    /**\n     * Indicates that a message from the local user or from the Prosody backend\n     * was received on the data channel.\n     */\n    NON_PARTICIPANT_MESSAGE_RECEIVED = 'conference.non_participant_message_received',\n\n    /**\n     * New private text message was received.\n     */\n    PRIVATE_MESSAGE_RECEIVED = 'conference.privateMessageReceived',\n\n    /**\n     * Event fired when JVB sends notification about interrupted/restored user's\n     * ICE connection status or we detect local problem with the video track.\n     * First argument is the ID of the participant and\n     * the seconds is a string indicating if the connection is currently\n     * - active - the connection is active\n     * - inactive - the connection is inactive, was intentionally interrupted by\n     * the bridge\n     * - interrupted - a network problem occurred\n     * - restoring - the connection was inactive and is restoring now\n     *\n     * The current status value can be obtained by calling\n     * JitsiParticipant.getConnectionStatus().\n     */\n    PARTICIPANT_CONN_STATUS_CHANGED = 'conference.participant_conn_status_changed',\n\n    /**\n     * Indicates that the features of the participant has been changed.\n     * TODO: there is a spelling mistake in this event name and associated constants\n     */\n    PARTCIPANT_FEATURES_CHANGED = 'conference.partcipant_features_changed',\n\n    /**\n     * Indicates that a the value of a specific property of a specific participant\n     * has changed.\n     */\n    PARTICIPANT_PROPERTY_CHANGED = 'conference.participant_property_changed',\n\n    /**\n     * Indicates that the conference has switched between JVB and P2P connections.\n     * The first argument of this event is a <tt>boolean</tt> which when set to\n     * <tt>true</tt> means that the conference is running on the P2P connection.\n     */\n    P2P_STATUS = 'conference.p2pStatus',\n\n    /**\n     * Indicates that phone number changed.\n     */\n    PHONE_NUMBER_CHANGED = 'conference.phoneNumberChanged',\n\n    /**\n     * The conference properties changed.\n     * @type {string}\n     */\n    PROPERTIES_CHANGED = 'conference.propertiesChanged',\n\n    /**\n     * Indicates that recording state changed.\n     */\n    RECORDER_STATE_CHANGED = 'conference.recorderStateChanged',\n\n    /**\n     * Indicates that video SIP GW state changed.\n     * @param {VideoSIPGWConstants} status.\n     */\n    VIDEO_SIP_GW_AVAILABILITY_CHANGED = 'conference.videoSIPGWAvailabilityChanged',\n\n    /**\n     * Indicates that video SIP GW Session state changed.\n     * @param {options} event - {\n     *     {string} address,\n     *     {VideoSIPGWConstants} oldState,\n     *     {VideoSIPGWConstants} newState,\n     *     {string} displayName}\n     * }.\n     */\n    VIDEO_SIP_GW_SESSION_STATE_CHANGED = 'conference.videoSIPGWSessionStateChanged',\n\n    /**\n     * Indicates that start muted settings changed.\n     */\n    START_MUTED_POLICY_CHANGED = 'conference.start_muted_policy_changed',\n\n    /**\n     * Indicates that the local user has started muted.\n     */\n    STARTED_MUTED = 'conference.started_muted',\n\n    /**\n     * Indicates that subject of the conference has changed.\n     */\n    SUBJECT_CHANGED = 'conference.subjectChanged',\n\n    /**\n     * Indicates that DTMF support changed.\n     */\n    SUSPEND_DETECTED = 'conference.suspendDetected',\n\n    /**\n     * Event indicates that local user is talking while he muted himself\n     */\n    TALK_WHILE_MUTED = 'conference.talk_while_muted',\n\n    /**\n     * A new media track was added to the conference. The event provides the\n     * following parameters to its listeners:\n     *\n     * @param {JitsiTrack} track the added JitsiTrack\n     */\n    TRACK_ADDED = 'conference.trackAdded',\n\n    /**\n     * Audio levels of a media track ( attached to the conference) was changed.\n     */\n    TRACK_AUDIO_LEVEL_CHANGED = 'conference.audioLevelsChanged',\n\n    /**\n     * A media track ( attached to the conference) mute status was changed.\n     * @param {JitsiParticipant|null} the participant that initiated the mute\n     * if it is a remote mute.\n     */\n    TRACK_MUTE_CHANGED = 'conference.trackMuteChanged',\n\n    /**\n     * The media track was removed from the conference. The event provides the\n     * following parameters to its listeners:\n     *\n     * @param {JitsiTrack} track the removed JitsiTrack\n     */\n    TRACK_REMOVED = 'conference.trackRemoved',\n\n    /**\n     * The source-add for unmuting of a media track was rejected by Jicofo.\n     *\n     */\n    TRACK_UNMUTE_REJECTED = 'conference.trackUnmuteRejected',\n\n    /**\n     * Notifies for transcription status changes. The event provides the\n     * following parameters to its listeners:\n     *\n     * @param {String} status - The new status.\n     */\n    TRANSCRIPTION_STATUS_CHANGED = 'conference.transcriptionStatusChanged',\n\n    /**\n     * A new user joined the conference.\n     */\n    USER_JOINED = 'conference.userJoined',\n\n    /**\n     * A user has left the conference.\n     */\n    USER_LEFT = 'conference.userLeft',\n\n    /**\n     * User role changed.\n     */\n    USER_ROLE_CHANGED = 'conference.roleChanged',\n\n    /**\n     * User status changed.\n     */\n    USER_STATUS_CHANGED = 'conference.statusChanged',\n\n    /**\n     * Event indicates that the permission for unmuting video has changed based on the number of video senders in the call\n     * and the video sender limit configured in Jicofo.\n     */\n    VIDEO_UNMUTE_PERMISSIONS_CHANGED = 'conference.video_unmute_permissions_changed',\n\n    /**\n     * Event indicates that the bot participant type changed.\n     */\n    BOT_TYPE_CHANGED = 'conference.bot_type_changed',\n\n    /**\n     * A new user joined the lobby room.\n     */\n    LOBBY_USER_JOINED = 'conference.lobby.userJoined',\n\n    /**\n     * A user from the lobby room has been update.\n     */\n    LOBBY_USER_UPDATED = 'conference.lobby.userUpdated',\n\n    /**\n     * A user left the lobby room.\n     */\n    LOBBY_USER_LEFT = 'conference.lobby.userLeft',\n\n    /**\n     * The local participant was approved to be able to unmute.\n     * @param {options} event - {\n     *     {MediaType} mediaType\n     * }.\n     */\n    AV_MODERATION_APPROVED = 'conference.av_moderation.approved',\n\n    /**\n     * The local participant was blocked to be able to unmute.\n     * @param {options} event - {\n     *     {MediaType} mediaType\n     * }.\n     */\n    AV_MODERATION_REJECTED = 'conference.av_moderation.rejected',\n\n    /**\n     * AV Moderation was enabled/disabled. The actor is the participant that is currently in the meeting,\n     * or undefined if that participant has left the meeting.\n     *\n     * @param {options} event - {\n     *     {boolean} enabled,\n     *     {MediaType} mediaType,\n     *     {JitsiParticipant} actor\n     * }.\n     */\n    AV_MODERATION_CHANGED = 'conference.av_moderation.changed',\n\n    /**\n     * AV Moderation, report for user being approved to unmute.\n     * @param {options} event - {\n     *     {JitsiParticipant} participant,\n     *     {MediaType} mediaType\n     * }.\n     */\n    AV_MODERATION_PARTICIPANT_APPROVED = 'conference.av_moderation.participant.approved',\n\n    /**\n     * AV Moderation, report for user being blocked to unmute.\n     * @param {options} event - {\n     *     {JitsiParticipant} participant,\n     *     {MediaType} mediaType\n     * }.\n     */\n    AV_MODERATION_PARTICIPANT_REJECTED = 'conference.av_moderation.participant.rejected',\n\n    /**\n     * A new facial expression is added with its duration for a participant\n     */\n    FACIAL_EXPRESSION_ADDED = 'conference.facial_expression.added',\n\n    /**\n     * Event fired when a participant is requested to join a given (breakout) room.\n     */\n    BREAKOUT_ROOMS_MOVE_TO_ROOM = 'conference.breakout-rooms.move-to-room',\n\n    /**\n     * Event fired when the breakout rooms data was updated.\n     */\n    BREAKOUT_ROOMS_UPDATED = 'conference.breakout-rooms.updated',\n\n    SUBTITLES_RECEIVED = 'conference.subtitles.received',\n\n    ANALYTICS_EVENT_RECEIVED = 'analytics.event.received',\n\n    TRACK_UPDATED = 'conference.track.updated'\n\n};\n\n// exported for backward compatibility\nexport const AUDIO_INPUT_STATE_CHANGE = JitsiConferenceEvents.AUDIO_INPUT_STATE_CHANGE;\nexport const AUDIO_UNMUTE_PERMISSIONS_CHANGED = JitsiConferenceEvents.AUDIO_UNMUTE_PERMISSIONS_CHANGED;\nexport const AUTH_STATUS_CHANGED = JitsiConferenceEvents.AUTH_STATUS_CHANGED;\nexport const BEFORE_STATISTICS_DISPOSED = JitsiConferenceEvents.BEFORE_STATISTICS_DISPOSED;\nexport const CONFERENCE_ERROR = JitsiConferenceEvents.CONFERENCE_ERROR;\nexport const CONFERENCE_FAILED = JitsiConferenceEvents.CONFERENCE_FAILED;\nexport const CONFERENCE_JOIN_IN_PROGRESS = JitsiConferenceEvents.CONFERENCE_JOIN_IN_PROGRESS;\nexport const CONFERENCE_JOINED = JitsiConferenceEvents.CONFERENCE_JOINED;\nexport const CONFERENCE_LEFT = JitsiConferenceEvents.CONFERENCE_LEFT;\nexport const CONFERENCE_UNIQUE_ID_SET = JitsiConferenceEvents.CONFERENCE_UNIQUE_ID_SET;\nexport const CONNECTION_ESTABLISHED = JitsiConferenceEvents.CONNECTION_ESTABLISHED;\nexport const CONNECTION_INTERRUPTED = JitsiConferenceEvents.CONNECTION_INTERRUPTED;\nexport const CONNECTION_RESTORED = JitsiConferenceEvents.CONNECTION_RESTORED;\nexport const DATA_CHANNEL_OPENED = JitsiConferenceEvents.DATA_CHANNEL_OPENED;\nexport const DISPLAY_NAME_CHANGED = JitsiConferenceEvents.DISPLAY_NAME_CHANGED;\nexport const DOMINANT_SPEAKER_CHANGED = JitsiConferenceEvents.DOMINANT_SPEAKER_CHANGED;\nexport const CONFERENCE_CREATED_TIMESTAMP = JitsiConferenceEvents.CONFERENCE_CREATED_TIMESTAMP;\nexport const DTMF_SUPPORT_CHANGED = JitsiConferenceEvents.DTMF_SUPPORT_CHANGED;\nexport const ENDPOINT_MESSAGE_RECEIVED = JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED;\nexport const ENDPOINT_STATS_RECEIVED = JitsiConferenceEvents.ENDPOINT_STATS_RECEIVED;\nexport const JVB121_STATUS = JitsiConferenceEvents.JVB121_STATUS;\nexport const KICKED = JitsiConferenceEvents.KICKED;\nexport const PARTICIPANT_KICKED = JitsiConferenceEvents.PARTICIPANT_KICKED;\nexport const LAST_N_ENDPOINTS_CHANGED = JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED;\nexport const FORWARDED_SOURCES_CHANGED = JitsiConferenceEvents.FORWARDED_SOURCES_CHANGED;\nexport const LOCK_STATE_CHANGED = JitsiConferenceEvents.LOCK_STATE_CHANGED;\nexport const SERVER_REGION_CHANGED = JitsiConferenceEvents.SERVER_REGION_CHANGED;\nexport const _MEDIA_SESSION_STARTED = JitsiConferenceEvents._MEDIA_SESSION_STARTED;\nexport const _MEDIA_SESSION_ACTIVE_CHANGED = JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED;\nexport const MEMBERS_ONLY_CHANGED = JitsiConferenceEvents.MEMBERS_ONLY_CHANGED;\nexport const MESSAGE_RECEIVED = JitsiConferenceEvents.MESSAGE_RECEIVED;\nexport const NO_AUDIO_INPUT = JitsiConferenceEvents.NO_AUDIO_INPUT;\nexport const NOISY_MIC = JitsiConferenceEvents.NOISY_MIC;\nexport const NON_PARTICIPANT_MESSAGE_RECEIVED = JitsiConferenceEvents.NON_PARTICIPANT_MESSAGE_RECEIVED;\nexport const PRIVATE_MESSAGE_RECEIVED = JitsiConferenceEvents.PRIVATE_MESSAGE_RECEIVED;\nexport const PARTICIPANT_CONN_STATUS_CHANGED = JitsiConferenceEvents.PARTICIPANT_CONN_STATUS_CHANGED;\nexport const PARTCIPANT_FEATURES_CHANGED = JitsiConferenceEvents.PARTCIPANT_FEATURES_CHANGED;\nexport const PARTICIPANT_PROPERTY_CHANGED = JitsiConferenceEvents.PARTICIPANT_PROPERTY_CHANGED;\nexport const P2P_STATUS = JitsiConferenceEvents.P2P_STATUS;\nexport const PHONE_NUMBER_CHANGED = JitsiConferenceEvents.PHONE_NUMBER_CHANGED;\nexport const PROPERTIES_CHANGED = JitsiConferenceEvents.PROPERTIES_CHANGED;\nexport const RECORDER_STATE_CHANGED = JitsiConferenceEvents.RECORDER_STATE_CHANGED;\nexport const VIDEO_SIP_GW_AVAILABILITY_CHANGED = JitsiConferenceEvents.VIDEO_SIP_GW_AVAILABILITY_CHANGED;\nexport const VIDEO_SIP_GW_SESSION_STATE_CHANGED = JitsiConferenceEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED;\nexport const START_MUTED_POLICY_CHANGED = JitsiConferenceEvents.START_MUTED_POLICY_CHANGED;\nexport const STARTED_MUTED = JitsiConferenceEvents.STARTED_MUTED;\nexport const SUBJECT_CHANGED = JitsiConferenceEvents.SUBJECT_CHANGED;\nexport const SUSPEND_DETECTED = JitsiConferenceEvents.SUSPEND_DETECTED;\nexport const TALK_WHILE_MUTED = JitsiConferenceEvents.TALK_WHILE_MUTED;\nexport const TRACK_ADDED = JitsiConferenceEvents.TRACK_ADDED;\nexport const TRACK_AUDIO_LEVEL_CHANGED = JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED;\nexport const TRACK_MUTE_CHANGED = JitsiConferenceEvents.TRACK_MUTE_CHANGED;\nexport const TRACK_REMOVED = JitsiConferenceEvents.TRACK_REMOVED;\nexport const TRACK_UNMUTE_REJECTED = JitsiConferenceEvents.TRACK_UNMUTE_REJECTED;\nexport const TRANSCRIPTION_STATUS_CHANGED = JitsiConferenceEvents.TRANSCRIPTION_STATUS_CHANGED;\nexport const USER_JOINED = JitsiConferenceEvents.USER_JOINED;\nexport const USER_LEFT = JitsiConferenceEvents.USER_LEFT;\nexport const USER_ROLE_CHANGED = JitsiConferenceEvents.USER_ROLE_CHANGED;\nexport const USER_STATUS_CHANGED = JitsiConferenceEvents.USER_STATUS_CHANGED;\nexport const VIDEO_UNMUTE_PERMISSIONS_CHANGED = JitsiConferenceEvents.VIDEO_UNMUTE_PERMISSIONS_CHANGED;\nexport const BOT_TYPE_CHANGED = JitsiConferenceEvents.BOT_TYPE_CHANGED;\nexport const LOBBY_USER_JOINED = JitsiConferenceEvents.LOBBY_USER_JOINED;\nexport const LOBBY_USER_UPDATED = JitsiConferenceEvents.LOBBY_USER_UPDATED;\nexport const LOBBY_USER_LEFT = JitsiConferenceEvents.LOBBY_USER_LEFT;\nexport const AV_MODERATION_APPROVED = JitsiConferenceEvents.AV_MODERATION_APPROVED;\nexport const AV_MODERATION_REJECTED = JitsiConferenceEvents.AV_MODERATION_REJECTED;\nexport const AV_MODERATION_CHANGED = JitsiConferenceEvents.AV_MODERATION_CHANGED;\nexport const AV_MODERATION_PARTICIPANT_APPROVED = JitsiConferenceEvents.AV_MODERATION_PARTICIPANT_APPROVED;\nexport const AV_MODERATION_PARTICIPANT_REJECTED = JitsiConferenceEvents.AV_MODERATION_PARTICIPANT_REJECTED;\nexport const FACIAL_EXPRESSION_ADDED = JitsiConferenceEvents.FACIAL_EXPRESSION_ADDED;\nexport const BREAKOUT_ROOMS_MOVE_TO_ROOM = JitsiConferenceEvents.BREAKOUT_ROOMS_MOVE_TO_ROOM;\nexport const BREAKOUT_ROOMS_UPDATED = JitsiConferenceEvents.BREAKOUT_ROOMS_UPDATED;\nexport const SUBTITLES_RECEIVED = JitsiConferenceEvents.SUBTITLES_RECEIVED;\nexport const ANALYTICS_EVENT_RECEIVED = JitsiConferenceEvents.ANALYTICS_EVENT_RECEIVED;\nexport const TRACK_UPDATED = JitsiConferenceEvents.TRACK_UPDATED;","export const CALLSTATS_SCRIPT_URL = 'https://api.callstats.io/static/callstats-ws.min.js';\n\n/**\n * The number of remote speakers for which the audio levels will be calculated using\n * RTCRtpReceiver#getSynchronizationSources. Limit the number of endpoints to save cpu on the client as this API call\n * is known to take longer to execute when there are many audio receivers.\n */\nexport const SPEAKERS_AUDIO_LEVELS = 5;\n","/**\n * The errors for the JitsiTrack objects.\n */\n\nexport enum JitsiTrackErrors {\n    /**\n     * An error which indicates that some of requested constraints in\n     * getUserMedia call were not satisfied.\n     */\n    CONSTRAINT_FAILED = 'gum.constraint_failed',\n\n    /**\n     * A generic error which indicates an error occurred while selecting\n     * a DesktopCapturerSource from the electron app.\n     */\n    ELECTRON_DESKTOP_PICKER_ERROR = 'gum.electron_desktop_picker_error',\n\n    /**\n     * An error which indicates a custom desktop picker could not be detected\n     * for the electron app.\n     */\n    ELECTRON_DESKTOP_PICKER_NOT_FOUND = 'gum.electron_desktop_picker_not_found',\n\n    /**\n     * Generic getUserMedia error.\n     */\n    GENERAL = 'gum.general',\n\n    /**\n     * An error which indicates that requested device was not found.\n     */\n    NOT_FOUND = 'gum.not_found',\n\n    /**\n     * An error which indicates that user denied permission to share requested\n     * device.\n     */\n    PERMISSION_DENIED = 'gum.permission_denied',\n\n    /**\n     * Generic error for screensharing failure.\n     */\n    SCREENSHARING_GENERIC_ERROR = 'gum.screensharing_generic_error',\n\n    /**\n     * An error which indicates that user canceled screen sharing window\n     * selection dialog.\n     */\n    SCREENSHARING_USER_CANCELED = 'gum.screensharing_user_canceled',\n\n    /**\n     * Indicates that the timeout passed to the obtainAudioAndVideoPermissions has expired without GUM resolving.\n     */\n    TIMEOUT = 'gum.timeout',\n\n    /**\n     * An error which indicates that track has been already disposed and cannot\n     * be longer used.\n     */\n    TRACK_IS_DISPOSED = 'track.track_is_disposed',\n\n    /**\n     * An error which indicates that track has no MediaStream associated.\n     */\n    TRACK_NO_STREAM_FOUND = 'track.no_stream_found',\n\n    /**\n     * An error which indicates that requested video resolution is not supported\n     * by a webcam.\n     */\n    UNSUPPORTED_RESOLUTION = 'gum.unsupported_resolution'\n}\n\n// exported for backward compatibility\nexport const CONSTRAINT_FAILED = JitsiTrackErrors.CONSTRAINT_FAILED;\nexport const ELECTRON_DESKTOP_PICKER_ERROR = JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_ERROR;\nexport const ELECTRON_DESKTOP_PICKER_NOT_FOUND = JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_NOT_FOUND;\nexport const GENERAL = JitsiTrackErrors.GENERAL;\nexport const NOT_FOUND = JitsiTrackErrors.NOT_FOUND;\nexport const PERMISSION_DENIED = JitsiTrackErrors.PERMISSION_DENIED;\nexport const SCREENSHARING_GENERIC_ERROR = JitsiTrackErrors.SCREENSHARING_GENERIC_ERROR;\nexport const SCREENSHARING_USER_CANCELED = JitsiTrackErrors.SCREENSHARING_USER_CANCELED;\nexport const TIMEOUT = JitsiTrackErrors.TIMEOUT;\nexport const TRACK_IS_DISPOSED = JitsiTrackErrors.TRACK_IS_DISPOSED;\nexport const TRACK_NO_STREAM_FOUND = JitsiTrackErrors.TRACK_NO_STREAM_FOUND;\nexport const UNSUPPORTED_RESOLUTION = JitsiTrackErrors.UNSUPPORTED_RESOLUTION;\n","import * as JitsiTrackErrors from './JitsiTrackErrors';\n\nconst TRACK_ERROR_TO_MESSAGE_MAP = {};\n\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.UNSUPPORTED_RESOLUTION]\n    = 'Video resolution is not supported: ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.SCREENSHARING_USER_CANCELED]\n    = 'User canceled screen sharing prompt';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.SCREENSHARING_GENERIC_ERROR]\n    = 'Unknown error from screensharing';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_ERROR]\n    = 'Unkown error from desktop picker';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_NOT_FOUND]\n    = 'Failed to detect desktop picker';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.GENERAL]\n    = 'Generic getUserMedia error';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.PERMISSION_DENIED]\n    = 'User denied permission to use device(s): ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.NOT_FOUND]\n    = 'Requested device(s) was/were not found: ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.CONSTRAINT_FAILED]\n    = 'Constraint could not be satisfied: ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.TIMEOUT]\n    = 'Could not start media source. Timeout occured!';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.TRACK_IS_DISPOSED]\n    = 'Track has been already disposed';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.TRACK_NO_STREAM_FOUND]\n    = 'Track does not have an associated Media Stream';\n\n// FIXME: Using prototype inheritance because otherwise instanceof is not\n// working properly (see https://github.com/babel/babel/issues/3083)\n\n/**\n *\n * Represents an error that occurred to a JitsiTrack. Can represent various\n * types of errors. For error descriptions (@see JitsiTrackErrors).\n *\n * @extends Error\n *\n *\n * @constructor\n * @param {Object|string} error - error object or error name\n * @param {Object|string} (options) - getUserMedia constraints object or\n * error message\n * @param {('audio'|'video'|'desktop'|'screen'|'audiooutput')[]} (devices) -\n * list of getUserMedia requested devices\n */\nfunction JitsiTrackError(error, options, devices) {\n    if (typeof error === 'object' && typeof error.name !== 'undefined') {\n        /**\n         * Additional information about original getUserMedia error\n         * and constraints.\n         * @type {{\n         *     error: Object,\n         *     constraints: Object,\n         *     devices: Array.<'audio'|'video'|'desktop'|'screen'>\n         * }}\n         */\n        this.gum = {\n            error,\n            constraints: options,\n            devices: devices && Array.isArray(devices)\n                ? devices.slice(0)\n                : undefined\n        };\n\n        switch (error.name) {\n        case 'NotAllowedError':\n        case 'PermissionDeniedError':\n        case 'SecurityError':\n            this.name = JitsiTrackErrors.PERMISSION_DENIED;\n            this.message\n                = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                    + (this.gum.devices || []).join(', ');\n            break;\n        case 'DevicesNotFoundError':\n        case 'NotFoundError':\n            this.name = JitsiTrackErrors.NOT_FOUND;\n            this.message\n                = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                    + (this.gum.devices || []).join(', ');\n            break;\n        case 'ConstraintNotSatisfiedError':\n        case 'OverconstrainedError': {\n            const constraintName = error.constraintName || error.constraint;\n\n            // we treat deviceId as unsupported resolution, as we want to\n            // retry and finally if everything fails to remove deviceId from\n            // mandatory constraints\n            if (options\n                    && options.video\n                    && (!devices || devices.indexOf('video') > -1)\n                    && (constraintName === 'minWidth'\n                        || constraintName === 'maxWidth'\n                        || constraintName === 'minHeight'\n                        || constraintName === 'maxHeight'\n                        || constraintName === 'width'\n                        || constraintName === 'height'\n                        || constraintName === 'deviceId')) {\n                this.name = JitsiTrackErrors.UNSUPPORTED_RESOLUTION;\n                this.message\n                    = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                        + getResolutionFromFailedConstraint(\n                            constraintName,\n                            options);\n            } else {\n                this.name = JitsiTrackErrors.CONSTRAINT_FAILED;\n                this.message\n                    = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                        + error.constraintName;\n            }\n            break;\n        }\n\n        default:\n            this.name = JitsiTrackErrors.GENERAL;\n            this.message\n                = error.message || TRACK_ERROR_TO_MESSAGE_MAP[this.name];\n            break;\n        }\n    } else if (typeof error === 'string') {\n        if (TRACK_ERROR_TO_MESSAGE_MAP[error]) {\n            this.name = error;\n            this.message = options || TRACK_ERROR_TO_MESSAGE_MAP[error];\n        } else {\n            // this is some generic error that do not fit any of our\n            // pre-defined errors, so don't give it any specific name, just\n            // store message\n            this.message = error;\n        }\n    } else {\n        throw new Error('Invalid arguments');\n    }\n\n    this.stack = error.stack || new Error().stack;\n}\n\nJitsiTrackError.prototype = Object.create(Error.prototype);\nJitsiTrackError.prototype.constructor = JitsiTrackError;\n\n/**\n * Gets failed resolution constraint from corresponding object.\n * @param {string} failedConstraintName\n * @param {Object} constraints\n * @returns {string|number}\n */\nfunction getResolutionFromFailedConstraint(failedConstraintName, constraints) {\n    if (constraints && constraints.video && constraints.video.mandatory) {\n        switch (failedConstraintName) {\n        case 'width':\n            return constraints.video.mandatory.minWidth;\n        case 'height':\n            return constraints.video.mandatory.minHeight;\n        default:\n            return constraints.video.mandatory[failedConstraintName] || '';\n        }\n    }\n\n    return '';\n}\n\nexport default JitsiTrackError;\n","/**\n * This class exports constants and factory methods related to the analytics\n * API provided by AnalyticsAdapter. In order for entries in a database to be\n * somewhat easily traceable back to the code which produced them, events sent\n * through analytics should be defined here.\n *\n * Since the AnalyticsAdapter API can be used in different ways, for some events\n * it is more convenient to just define the event name as a constant. For other\n * events a factory function is easier.\n *\n * A general approach for adding a new event:\n * 1. Determine the event type: track, UI, page, or operational. If in doubt use\n * operational.\n * 2. Determine whether the event is related to other existing events, and\n * which fields are desired to be set: name, action, actionSubject, source.\n * 3. If the name is sufficient (the other fields are not important), use a\n * constant. Otherwise use a factory function.\n *\n * Note that the AnalyticsAdapter uses the events passed to its functions for\n * its own purposes, and might modify them. Because of this, factory functions\n * should create new objects.\n *\n */\n\nexport enum AnalyticsEvents {\n    /**\n     * The constant which identifies an event of type \"operational\".\n     */\n    TYPE_OPERATIONAL = 'operational',\n\n    /**\n     * The constant which identifies an event of type \"page\".\n     */\n    TYPE_PAGE = 'page',\n\n    /**\n     * The constant which identifies an event of type \"track\".\n     */\n    TYPE_TRACK = 'track',\n\n    /**\n     * The constant which identifies an event of type \"ui\".\n     */\n    TYPE_UI = 'ui',\n\n    /**\n     * The \"action\" value for Jingle events which indicates that the Jingle session\n     * was restarted (TODO: verify/fix the documentation)\n     */\n    ACTION_JINGLE_RESTART = 'restart',\n\n    /**\n     * The \"action\" value for Jingle events which indicates that a session-accept\n     * timed out (TODO: verify/fix the documentation)\n     */\n    ACTION_JINGLE_SA_TIMEOUT = 'session-accept.timeout',\n\n    /**\n     * The \"action\" value for Jingle events which indicates that a session-initiate\n     * was received.\n     */\n    ACTION_JINGLE_SI_RECEIVED = 'session-initiate.received',\n\n    /**\n     * The \"action\" value for Jingle events which indicates that a session-initiate\n     * not arrived within a timeout (the value is specified in\n     * the {@link JingleSessionPC}.\n     */\n    ACTION_JINGLE_SI_TIMEOUT = 'session-initiate.timeout',\n\n    /**\n     * A constant for the \"terminate\" action for Jingle events. TODO: verify/fix\n     * the documentation)\n     */\n    ACTION_JINGLE_TERMINATE = 'terminate',\n\n    /**\n     * The \"action\" value for Jingle events which indicates that a transport-replace\n     * was received.\n     */\n    ACTION_JINGLE_TR_RECEIVED = 'transport-replace.received',\n\n    /**\n     * The \"action\" value for Jingle events which indicates that a transport-replace\n     * succeeded (TODO: verify/fix the documentation)\n     */\n    ACTION_JINGLE_TR_SUCCESS = 'transport-replace.success',\n\n    /**\n     * The \"action\" value for P2P events which indicates that P2P session initiate message has been rejected by the client\n     * because the mandatory requirements were not met.\n     */\n    ACTION_P2P_DECLINED = 'decline',\n\n    /**\n     * The \"action\" value for P2P events which indicates that a connection was\n     * established (TODO: verify/fix the documentation)\n     */\n    ACTION_P2P_ESTABLISHED = 'established',\n\n    /**\n     * The \"action\" value for P2P events which indicates that something failed.\n     */\n    ACTION_P2P_FAILED = 'failed',\n\n    /**\n     * The \"action\" value for P2P events which indicates that a switch to\n     * jitsi-videobridge happened.\n     */\n    ACTION_P2P_SWITCH_TO_JVB = 'switch.to.jvb',\n\n    /**\n     * The name of an event which indicates an available device. We send one such\n     * event per available device once when the available devices are first known,\n     * and every time that they change\n     *\n     * Properties:\n     *      audio_input_device_count: the number of audio input devices available at\n     *          the time the event was sent.\n     *      audio_output_device_count: the number of audio output devices available\n     *          at the time the event was sent.\n     *      video_input_device_count: the number of video input devices available at\n     *          the time the event was sent.\n     *      video_output_device_count: the number of video output devices available\n     *          at the time the event was sent.\n     *      device_id: an identifier of the device described in this event.\n     *      device_group_id:\n     *      device_kind: one of 'audioinput', 'audiooutput', 'videoinput' or\n     *          'videooutput'.\n     *      device_label: a string which describes the device.\n     */\n    AVAILABLE_DEVICE = 'available.device',\n\n    /**\n     * This appears to be fired only in certain cases when the XMPP connection\n     * disconnects (and it was intentional?). It is currently never observed to\n     * fire in production.\n     *\n     * TODO: document\n     *\n     * Properties:\n     *      message: an error message\n     */\n    CONNECTION_DISCONNECTED = 'connection.disconnected',\n\n    /**\n     * Indicates that the user of the application provided feedback in terms of a\n     * rating (an integer from 1 to 5) and an optional comment.\n     * Properties:\n     *      value: the user's rating (an integer from 1 to 5)\n     *      comment: the user's comment\n     */\n    FEEDBACK = 'feedback',\n\n    /**\n     * Indicates the duration of a particular phase of the ICE connectivity\n     * establishment.\n     *\n     * Properties:\n     *      phase: the ICE phase (e.g. 'gathering', 'checking', 'establishment')\n     *      value: the duration in milliseconds.\n     *      p2p: whether the associated ICE connection is p2p or towards a\n     *          jitsi-videobridge\n     *      initiator: whether the local Jingle peer is the initiator or responder\n     *          in the Jingle session. XXX we probably actually care about the ICE\n     *          role (controlling vs controlled), and we assume that this correlates\n     *          with the Jingle initiator.\n     */\n    ICE_DURATION = 'ice.duration',\n\n    /**\n     * Indicates the difference in milliseconds between the ICE establishment time\n     * for the P2P and JVB connections (e.g. a value of 10 would indicate that the\n     * P2P connection took 10ms more than JVB connection to establish).\n     *\n     * Properties:\n     *      value: the difference in establishment durations in milliseconds.\n     *\n     */\n    ICE_ESTABLISHMENT_DURATION_DIFF = 'ice.establishment.duration.diff',\n\n    /**\n     * Indicates that the ICE state has changed.\n     *\n     * Properties:\n     *      state: the ICE state which was entered (e.g. 'checking', 'connected',\n     *          'completed', etc).\n     *      value: the time in milliseconds (as reported by\n     *          window.performance.now()) that the state change occurred.\n     *      p2p: whether the associated ICE connection is p2p or towards a\n     *          jitsi-videobridge\n     *      signalingState: The signaling state of the associated PeerConnection\n     *      reconnect: whether the associated Jingle session is in the process of\n     *          reconnecting (or is it ICE? TODO: verify/fix the documentation)\n     */\n    ICE_STATE_CHANGED = 'ice.state.changed',\n\n    /**\n     * Indicates that no bytes have been sent for the track.\n     *\n     * Properties:\n     *      mediaType: the media type of the local track ('audio' or 'video').\n     */\n    NO_BYTES_SENT = 'track.no-bytes-sent',\n\n    /**\n     * Indicates that a track was unmuted (?).\n     *\n     * Properties:\n     *      mediaType: the media type of the local track ('audio' or 'video').\n     *      trackType: the type of the track ('local' or 'remote').\n     *      value: TODO: document\n     */\n    TRACK_UNMUTED = 'track.unmuted'\n}\n\n// exported for backward compatibility\nexport const TYPE_OPERATIONAL = AnalyticsEvents.TYPE_OPERATIONAL;\nexport const TYPE_PAGE = AnalyticsEvents.TYPE_PAGE;\nexport const TYPE_TRACK = AnalyticsEvents.TYPE_TRACK;\nexport const TYPE_UI = AnalyticsEvents.TYPE_UI;\nexport const ACTION_JINGLE_RESTART = AnalyticsEvents.ACTION_JINGLE_RESTART;\nexport const ACTION_JINGLE_SA_TIMEOUT = AnalyticsEvents.ACTION_JINGLE_SA_TIMEOUT;\nexport const ACTION_JINGLE_SI_RECEIVED = AnalyticsEvents.ACTION_JINGLE_SI_RECEIVED;\nexport const ACTION_JINGLE_SI_TIMEOUT = AnalyticsEvents.ACTION_JINGLE_SI_TIMEOUT;\nexport const ACTION_JINGLE_TERMINATE = AnalyticsEvents.ACTION_JINGLE_TERMINATE;\nexport const ACTION_JINGLE_TR_RECEIVED = AnalyticsEvents.ACTION_JINGLE_TR_RECEIVED;\nexport const ACTION_JINGLE_TR_SUCCESS = AnalyticsEvents.ACTION_JINGLE_TR_SUCCESS;\nexport const ACTION_P2P_DECLINED = AnalyticsEvents.ACTION_P2P_DECLINED;\nexport const ACTION_P2P_ESTABLISHED = AnalyticsEvents.ACTION_P2P_ESTABLISHED;\nexport const ACTION_P2P_FAILED = AnalyticsEvents.ACTION_P2P_FAILED;\nexport const ACTION_P2P_SWITCH_TO_JVB = AnalyticsEvents.ACTION_P2P_SWITCH_TO_JVB;\nexport const AVAILABLE_DEVICE = AnalyticsEvents.AVAILABLE_DEVICE;\nexport const CONNECTION_DISCONNECTED = AnalyticsEvents.CONNECTION_DISCONNECTED;\nexport const FEEDBACK = AnalyticsEvents.FEEDBACK;\nexport const ICE_DURATION = AnalyticsEvents.ICE_DURATION;\nexport const ICE_ESTABLISHMENT_DURATION_DIFF = AnalyticsEvents.ICE_ESTABLISHMENT_DURATION_DIFF;\nexport const ICE_STATE_CHANGED = AnalyticsEvents.ICE_STATE_CHANGED;\nexport const NO_BYTES_SENT = AnalyticsEvents.NO_BYTES_SENT;\nexport const TRACK_UNMUTED = AnalyticsEvents.TRACK_UNMUTED;\n\n/**\n * Creates an operational event which indicates that we have received a\n * \"bridge down\" event from jicofo.\n */\nexport const createBridgeDownEvent = () => ( {\n    action: 'bridge.down',\n    actionSubject: 'bridge.down',\n    type: TYPE_OPERATIONAL\n} );\n\n/**\n * Creates an event which indicates that the XMPP connection failed\n * @param errorType TODO\n * @param errorMessage TODO\n * @param detail connection failed details.\n */\nexport const createConnectionFailedEvent = ( errorType: unknown, errorMessage: unknown, details: object ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    action: 'connection.failed',\n    attributes: {\n        'error_type': errorType,\n        'error_message': errorMessage,\n        ...details\n    }\n} );\n\n/**\n * Creates a conference event.\n *\n * @param action - The action of the event.\n * @param attributes - The attributes to be added to the event.\n */\nexport const createConferenceEvent = ( action: string, attributes: object ) => ( {\n    action,\n    attributes,\n    source: 'conference',\n    type: AnalyticsEvents.TYPE_OPERATIONAL\n} );\n\n/**\n * Creates an operational event which indicates that a particular connection\n * stage was reached (i.e. the XMPP connection transitioned to the \"connected\"\n * state).\n *\n * @param stage the stage which was reached\n * @param attributes additional attributes for the event. This should be an\n * object with a \"value\" property indicating a timestamp in milliseconds\n * relative to the beginning of the document's lifetime.\n *\n */\nexport const createConnectionStageReachedEvent = ( stage: unknown, attributes: object ) => ( {\n    action: 'connection.stage.reached',\n    actionSubject: stage,\n    attributes,\n    source: 'connection.stage.reached',\n    type: AnalyticsEvents.TYPE_OPERATIONAL\n} );\n\n/**\n * Creates an operational event for the end-to-end round trip time to a\n * specific remote participant.\n * @param participantId the ID of the remote participant.\n * @param region the region of the remote participant\n * @param rtt the rtt\n */\nexport const createE2eRttEvent = ( participantId: unknown, region: unknown, rtt: unknown ) => ( {\n    attributes: {\n        'participant_id': participantId,\n        region,\n        rtt\n    },\n    name: 'e2e_rtt',\n    type: AnalyticsEvents.TYPE_OPERATIONAL\n} );\n\n/**\n * Creates an event which indicates that the focus has left the MUC.\n */\nexport const createFocusLeftEvent = () => ( {\n    action: 'focus.left',\n    actionSubject: 'focus.left',\n    type: AnalyticsEvents.TYPE_OPERATIONAL\n} );\n\n/**\n * Creates an event related to a getUserMedia call.\n *\n * @param action the type of the result that the event represents: 'error',\n * 'success', 'warning', etc.\n * @param attributes the attributes to attach to the event.\n */\nexport const createGetUserMediaEvent = ( action: 'error' | 'success' | 'warning' | string, attributes: object = {} ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    source: 'get.user.media',\n    action,\n    attributes\n} );\n\n/**\n * Creates an event related to remote participant connection status changes.\n *\n * @param attributes the attributes to attach to the event.\n */\nexport const createParticipantConnectionStatusEvent = ( attributes: object = {} ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    source: 'peer.conn.status',\n    action: 'duration',\n    attributes\n} );\n\n/**\n * Creates an event related to remote track streaming status changes.\n *\n * @param attributes the attributes to attach to the event.\n */\nexport const createTrackStreamingStatusEvent = ( attributes: object = {} ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    source: 'track.streaming.status',\n    action: 'duration',\n    attributes\n} );\n\n/**\n * Creates an event for a Jingle-related event.\n * @param action the action of the event\n * @param attributes attributes to add to the event.\n */\nexport const createJingleEvent = ( action: unknown, attributes: object = {} ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    action,\n    source: 'jingle',\n    attributes\n} );\n\n/**\n * Creates an event which indicates that a local track was not able to read\n * data from its source (a camera or a microphone).\n *\n * @param mediaType the media type of the local track ('audio' or\n * 'video').\n */\nexport const createNoDataFromSourceEvent = ( mediaType: 'audio' | 'video' | string, value: unknown ) => ( {\n    attributes: {\n        'media_type': mediaType,\n        value\n    },\n    action: 'track.no.data.from.source',\n    type: AnalyticsEvents.TYPE_OPERATIONAL\n} );\n\n/**\n * Creates an event for a p2p-related event.\n * @param action the action of the event\n * @param attributes attributes to add to the event.\n */\nexport const createP2PEvent = ( action: unknown, attributes: object = {} ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    action,\n    source: 'p2p',\n    attributes\n} )\n\n/**\n * Indicates that we received a remote command to mute.\n */\nexport const createRemotelyMutedEvent = ( mediaType: unknown ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    action: 'remotely.muted',\n    mediaType\n} );\n\n/**\n * Creates an event which contains RTP statistics such as RTT and packet loss.\n *\n * All average RTP stats are currently reported under 1 event name, but with\n * different properties that allows to distinguish between a P2P call, a\n * call relayed through TURN or the JVB, and multiparty vs 1:1.\n *\n * The structure of the event is:\n *\n * {\n *      p2p: true,\n *      conferenceSize: 2,\n *      localCandidateType: \"relay\",\n *      remoteCandidateType: \"relay\",\n *      transportType: \"udp\",\n *\n *      // Average RTT of 200ms\n *      \"rtt.avg\": 200,\n *      \"rtt.samples\": \"[100, 200, 300]\",\n *\n *      // Average packet loss of 10%\n *      \"packet.loss.avg\": 10,\n *      \"packet.loss.samples\": '[5, 10, 15]'\n *\n *      // Difference in milliseconds in the end-to-end RTT between p2p and jvb.\n *      // The e2e RTT through jvb is 15ms shorter:\n *      \"rtt.diff\": 15,\n *\n *      // End-to-end RTT through JVB is ms.\n *      \"end2end.rtt.avg\" = 100\n * }\n *\n * Note that the value of the \"samples\" properties are (JSON encoded) strings,\n * and not JSON arrays, as events' attributes can not be nested. The samples are\n * currently included for debug purposes only and can be removed anytime soon\n * from the structure.\n *\n * Also note that not all of values are present in each event, as values are\n * obtained and calculated as part of different process/event pipe. For example\n * {@link ConnectionAvgStats} instances are doing the reports for each\n * {@link TraceablePeerConnection} and work independently from the main stats\n * pipe.\n */\nexport const createRtpStatsEvent = ( attributes: object ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    action: 'rtp.stats',\n    attributes\n} );\n\n/**\n * Creates an event which contains the round trip time (RTT) to a set of\n * regions.\n *\n * @param attributes\n */\nexport const createRttByRegionEvent = ( attributes: object ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    action: 'rtt.by.region',\n    attributes\n} );\n\n/**\n * Creates an event which contains the local and remote ICE candidate types\n * for the transport that is currently selected.\n *\n * @param attributes\n */\nexport const createTransportStatsEvent = ( attributes: object ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    action: 'transport.stats',\n    attributes\n} );\n\n/**\n * Creates an event which contains information about the audio output problem (the user id of the affected participant,\n * the local audio levels and the remote audio levels that triggered the event).\n *\n * @param userID - The user id of the affected participant.\n * @param localAudioLevels - The local audio levels.\n * @param remoteAudioLevels - The audio levels received from the participant.\n */\nexport const createAudioOutputProblemEvent = ( userID: string, localAudioLevels: unknown, remoteAudioLevels: unknown ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    action: 'audio.output.problem',\n    attributes: {\n        userID,\n        localAudioLevels,\n        remoteAudioLevels\n    }\n} );\n\n/**\n * Creates an event which contains an information related to the bridge channel close event.\n *\n * @param code - A code from {@link https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent}\n * @param reason - A string which describes the reason for closing the bridge channel.\n */\nexport const createBridgeChannelClosedEvent = ( code: string, reason: string ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    action: 'bridge-channel.error',\n    attributes: {\n        code,\n        reason\n    }\n} );\n\n/**\n * Creates an event which indicates the Time To First Media (TTFM).\n * It is measured in milliseconds relative to the beginning of the document's\n * lifetime (i.e. the origin used by window.performance.now()), and it excludes\n * the following:\n * 1. The delay due to getUserMedia()\n * 2. The period between the MUC being joined and the reception of the Jingle\n * session-initiate from jicofo. This is because jicofo will not start a Jingle\n * session until there are at least 2 participants in the room.\n *\n * @param attributes the attributes to add to the event. Currently used fields:\n *      mediaType: the media type of the local track ('audio' or 'video').\n *      muted: whether the track has ever been muted (?)\n *      value: the TTMF in milliseconds.\n */\nexport const createTtfmEvent = ( attributes: object ) => createConnectionStageReachedEvent( 'ttfm', attributes );\n","export enum Events {\n    /**\n     * Notifies about audio level in RTP statistics by SSRC.\n     *\n     * @param ssrc - The synchronization source identifier (SSRC) of the\n     * endpoint/participant whose audio level is being reported.\n     * @param {number} audioLevel - The audio level of <tt>ssrc</tt> according to\n     * RTP statistics.\n     * @param {boolean} isLocal - <tt>true</tt> if <tt>ssrc</tt> identifies the\n     * local endpoint/participant; otherwise, <tt>false</tt>.\n     */\n    AUDIO_LEVEL = 'statistics.audioLevel',\n\n    /**\n     * An event fired just before the statistics module gets disposes and it's\n     * the last chance to submit some logs that will end up in stats services like\n     * CallStats (if enabled).\n     */\n    BEFORE_DISPOSED = 'statistics.before_disposed',\n\n    /**\n     * An event carrying all statistics by ssrc.\n     */\n    BYTE_SENT_STATS = 'statistics.byte_sent_stats',\n\n    /**\n     * An event carrying connection statistics.\n     *\n     * @param {object} connectionStats - The connection statistics carried by the\n     * event such as <tt>bandwidth</tt>, <tt>bitrate</tt>, <tt>packetLoss</tt>,\n     * <tt>resolution</tt>, and <tt>transport</tt>.\n     */\n    CONNECTION_STATS = 'statistics.connectionstats',\n\n    /**\n     * An event carrying performance stats.\n     */\n    LONG_TASKS_STATS = 'statistics.long_tasks_stats'\n};\n\n// exported for backward compatibility\nexport const AUDIO_LEVEL = Events.AUDIO_LEVEL;\nexport const BEFORE_DISPOSED = Events.BEFORE_DISPOSED;\nexport const BYTE_SENT_STATS = Events.BYTE_SENT_STATS;\nexport const CONNECTION_STATS = Events.CONNECTION_STATS;\nexport const LONG_TASKS_STATS = Events.LONG_TASKS_STATS;\n","// TODO: Maybe fix the values to 'Chrome', 'Internet Explorer', etc. Currently\n// this values needs to be as they are becuse they are going to analytics,\n// callstats, etc.\nexport const CHROME = 'chrome';\nexport const OPERA = 'opera';\nexport const FIREFOX = 'firefox';\nexport const INTERNET_EXPLORER = 'iexplorer';\nexport const SAFARI = 'safari';\nexport const NWJS = 'nwjs';\nexport const ELECTRON = 'electron';\nexport const REACT_NATIVE = 'react-native';\nexport const UNKNOWN = 'unknown';","import Bowser from 'bowser';\nimport { CHROME, OPERA, FIREFOX, INTERNET_EXPLORER, SAFARI, NWJS, ELECTRON, REACT_NATIVE, UNKNOWN } from './browsers';\n/**\n * Maps the names of the browsers from bowser to the internal names defined in\n * ./browsers.js\n */\n\nconst bowserNameToJitsiName = {\n  'Chrome': CHROME,\n  'Chromium': CHROME,\n  'Opera': OPERA,\n  'Firefox': FIREFOX,\n  'Internet Explorer': INTERNET_EXPLORER,\n  'Safari': SAFARI\n};\n/**\n * Detects a Chromium based environent.\n *\n * NOTE: Here we cannot check solely for \"Chrome\" in the UA, because Edge has\n * it too. We need to check explicitly for chromium based Edge first and then\n * detect other chromium based browsers.\n *\n * @returns {Object|undefined} - The name (CHROME) and version.\n */\n\nfunction _detectChromiumBased() {\n  const userAgent = navigator.userAgent;\n  const browserInfo = {\n    name: UNKNOWN,\n    version: undefined\n  };\n\n  if (userAgent.match(/Chrome/) && !userAgent.match(/Edge/)) {\n    // Edge is currenly supported only on desktop and android.\n    if (userAgent.match(/Edg(A?)/)) {\n      // Compare the underlying chromium version.\n      const version = userAgent.match(/Chrome\\/([\\d.]+)/)[1];\n\n      if (Number.parseInt(version, 10) > 72) {\n        browserInfo.name = CHROME;\n        browserInfo.version = version;\n      }\n    } else {\n      browserInfo.name = CHROME;\n      browserInfo.version = userAgent.match(/Chrome\\/([\\d.]+)/)[1];\n    }\n  }\n\n  return browserInfo;\n}\n/**\n * Detects Electron environment.\n *\n * @returns {Object|undefined} - The name (ELECTRON) and version.\n */\n\n\nfunction _detectElectron() {\n  const userAgent = navigator.userAgent;\n\n  if (userAgent.match(/Electron/)) {\n    const version = userAgent.match(/Electron(?:\\s|\\/)([\\d.]+)/)[1];\n    return {\n      name: ELECTRON,\n      version\n    };\n  }\n}\n/**\n * Detects NWJS environment.\n *\n * @returns {Object|undefined} - The name (NWJS) and version.\n */\n\n\nfunction _detectNWJS() {\n  const userAgent = navigator.userAgent;\n\n  if (userAgent.match(/JitsiMeetNW/)) {\n    const version = userAgent.match(/JitsiMeetNW\\/([\\d.]+)/)[1];\n    return {\n      name: NWJS,\n      version\n    };\n  }\n}\n/**\n * Detects React Native environment.\n * @returns {Object|undefined} - The name (REACT_NATIVE) and version.\n */\n\n\nfunction _detectReactNative() {\n  const match = navigator.userAgent.match(/\\b(react[ \\t_-]*native)(?:\\/(\\S+))?/i);\n  let version; // If we're remote debugging a React Native app, it may be treated as\n  // Chrome. Check navigator.product as well and always return some version\n  // even if we can't get the real one.\n\n  if (match || navigator.product === 'ReactNative') {\n    let name;\n\n    if (match && match.length > 2) {\n      name = match[1];\n      version = match[2];\n    }\n\n    name || (name = 'react-native');\n    version || (version = 'unknown');\n    return {\n      name: REACT_NATIVE,\n      version\n    };\n  }\n}\n/**\n * Returns information about the current browser.\n * @param {Object} - The bowser instance.\n * @returns {Object} - The name and version of the browser.\n */\n\n\nfunction _detect(bowser) {\n  let browserInfo;\n  const detectors = [_detectReactNative, _detectElectron, _detectNWJS]; // Try all browser detectors\n\n  for (let i = 0; i < detectors.length; i++) {\n    browserInfo = detectors[i]();\n\n    if (browserInfo) {\n      return browserInfo;\n    }\n  }\n\n  const name = bowser.getBrowserName();\n\n  if (name in bowserNameToJitsiName) {\n    return {\n      name: bowserNameToJitsiName[name],\n      version: bowser.getBrowserVersion()\n    };\n  } // Detect other browsers with the Chrome engine, such as Vivaldi and Brave.\n\n\n  browserInfo = _detectChromiumBased();\n\n  if (browserInfo) {\n    return browserInfo;\n  }\n\n  return {\n    name: UNKNOWN,\n    version: undefined\n  };\n}\n/**\n * Implements browser detection.\n */\n\n\nexport default class BrowserDetection {\n  /**\n   * Creates new BrowserDetection instance.\n   *\n   * @param {Object} [browserInfo] - Information about the browser.\n   * @param {string} browserInfo.name - The name of the browser.\n   * @param {string} browserInfo.version - The version of the browser.\n   */\n  constructor(browserInfo) {\n    let name, version;\n    this._bowser = Bowser.getParser(navigator.userAgent);\n\n    if (typeof browserInfo === 'undefined') {\n      const detectedBrowserInfo = _detect(this._bowser);\n\n      name = detectedBrowserInfo.name;\n      version = detectedBrowserInfo.version;\n    } else if (browserInfo.name in bowserNameToJitsiName) {\n      name = bowserNameToJitsiName[browserInfo.name];\n      version = browserInfo.version;\n    } else {\n      name = UNKNOWN;\n      version = undefined;\n    }\n\n    this._name = name;\n    this._version = version;\n  }\n  /**\n   * Gets current browser name.\n   * @returns {string}\n   */\n\n\n  getName() {\n    return this._name;\n  }\n  /**\n   * Checks if current browser is Chrome.\n   * @returns {boolean}\n   */\n\n\n  isChrome() {\n    return this._name === CHROME;\n  }\n  /**\n   * Checks if current browser is Opera.\n   * @returns {boolean}\n   */\n\n\n  isOpera() {\n    return this._name === OPERA;\n  }\n  /**\n   * Checks if current browser is Firefox.\n   * @returns {boolean}\n   */\n\n\n  isFirefox() {\n    return this._name === FIREFOX;\n  }\n  /**\n   * Checks if current browser is Internet Explorer.\n   * @returns {boolean}\n   */\n\n\n  isIExplorer() {\n    return this._name === INTERNET_EXPLORER;\n  }\n  /**\n   * Checks if current browser is Safari.\n   * @returns {boolean}\n   */\n\n\n  isSafari() {\n    return this._name === SAFARI;\n  }\n  /**\n   * Checks if current environment is NWJS.\n   * @returns {boolean}\n   */\n\n\n  isNWJS() {\n    return this._name === NWJS;\n  }\n  /**\n   * Checks if current environment is Electron.\n   * @returns {boolean}\n   */\n\n\n  isElectron() {\n    return this._name === ELECTRON;\n  }\n  /**\n   * Checks if current environment is React Native.\n   * @returns {boolean}\n   */\n\n\n  isReactNative() {\n    return this._name === REACT_NATIVE;\n  }\n  /**\n   * Returns the version of the current browser.\n   * @returns {string}\n   */\n\n\n  getVersion() {\n    return this._version;\n  }\n  /**\n   * Check if the parsed browser matches the passed condition.\n   *\n   * @param {Object} checkTree - It's one or two layered object, which can include a\n   * platform or an OS on the first layer and should have browsers specs on the\n   * bottom layer.\n   * Eg. { chrome: '>71.1.0' }\n   *     { windows: { chrome: '<70.2' } }\n   * @returns {boolean | undefined} - Returns true if the browser satisfies the set\n   * conditions, false if not and undefined when the browser is not defined in the\n   * checktree object or when the current browser's version is unknown.\n   * @private\n   */\n\n\n  _checkCondition(checkTree) {\n    if (this._version) {\n      return this._bowser.satisfies(checkTree);\n    }\n  }\n  /**\n   * Compares the passed version with the current browser version.\n   *\n   * @param {*} version - The version to compare with. Anything different\n   * than string will be converted to string.\n   * @returns {boolean|undefined} - Returns true if the current version is\n   * greater than the passed version and false otherwise. Returns undefined if\n   * the current browser version is unknown.\n   */\n\n\n  isVersionGreaterThan(version) {\n    return this._checkCondition({\n      [this._name]: `>${version}`\n    });\n  }\n  /**\n   * Compares the passed version with the current browser version.\n   *\n   * @param {*} version - The version to compare with. Anything different\n   * than string will be converted to string.\n   * @returns {boolean|undefined} - Returns true if the current version is\n   * lower than the passed version and false otherwise. Returns undefined if\n   * the current browser version is unknown.\n   */\n\n\n  isVersionLessThan(version) {\n    return this._checkCondition({\n      [this._name]: `<${version}`\n    });\n  }\n  /**\n   * Compares the passed version with the current browser version.\n   *\n   * @param {*} version - The version to compare with. Anything different\n   * than string will be converted to string.\n   * @returns {boolean|undefined} - Returns true if the current version is\n   * equal to the passed version and false otherwise. Returns undefined if\n   * the current browser version is unknown.\n   * A loose-equality operator is used here so that it matches the sub-versions as well.\n   */\n\n\n  isVersionEqualTo(version) {\n    return this._checkCondition({\n      [this._name]: `~${version}`\n    });\n  }\n\n}","function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport EventEmitter from 'events';\n/**\n * Dummy implementation of Storage interface.\n */\n\nclass DummyLocalStorage extends EventEmitter {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"_storage\", {});\n  }\n\n  /**\n   * Empties all keys out of the storage.\n   *\n   * @returns {void}\n   */\n  clear() {\n    this._storage = {};\n  }\n  /**\n   * Returns the number of data items stored in the Storage object.\n   *\n   * @returns {number} - The number of data items stored in the Storage object.\n   */\n\n\n  get length() {\n    return Object.keys(this._storage).length;\n  }\n  /**\n   * Will return that key's value associated to the passed key name.\n   *\n   * @param {string} keyName - The key name.\n   * @returns {*} - The key value.\n   */\n\n\n  getItem(keyName) {\n    return this._storage[keyName];\n  }\n  /**\n   * When passed a key name and value, will add that key to the storage,\n   * or update that key's value if it already exists.\n   *\n   * @param {string} keyName - The key name.\n   * @param {*} keyValue - The key value.\n   * @returns {void}\n   */\n\n\n  setItem(keyName, keyValue) {\n    this._storage[keyName] = keyValue;\n  }\n  /**\n   * When passed a key name, will remove that key from the storage.\n   *\n   * @param {string} keyName - The key name.\n   * @returns {void}\n   */\n\n\n  removeItem(keyName) {\n    delete this._storage[keyName];\n  }\n  /**\n   * When passed a number n, this method will return the name of the nth key in the storage.\n   *\n   * @param {number} idx - The index of the key.\n   * @returns {string} - The nth key name.\n   */\n\n\n  key(n) {\n    const keys = Object.keys(this._storage);\n\n    if (keys.length <= n) {\n      return undefined;\n    }\n\n    return keys[n];\n  }\n  /**\n   * Serializes the content of the storage.\n   *\n   * @returns {string} - The serialized content.\n   */\n\n\n  serialize() {\n    return JSON.stringify(this._storage);\n  }\n\n}\n/**\n * Wrapper class for browser's local storage object.\n */\n\n\nclass JitsiLocalStorage extends EventEmitter {\n  /**\n   * @constructor\n   * @param {Storage} storage browser's local storage object.\n   */\n  constructor() {\n    super();\n\n    try {\n      this._storage = window.localStorage;\n      this._localStorageDisabled = false;\n    } catch (ignore) {// localStorage throws an exception.\n    }\n\n    if (!this._storage) {\n      // Handles the case when window.localStorage is undefined or throws an exception.\n      console.warn('Local storage is disabled.');\n      this._storage = new DummyLocalStorage();\n      this._localStorageDisabled = true;\n    }\n  }\n  /**\n   * Returns true if window.localStorage is disabled and false otherwise.\n   *\n   * @returns {boolean} - True if window.localStorage is disabled and false otherwise.\n   */\n\n\n  isLocalStorageDisabled() {\n    return this._localStorageDisabled;\n  }\n  /**\n   * Empties all keys out of the storage.\n   *\n   * @returns {void}\n   */\n\n\n  clear() {\n    this._storage.clear();\n\n    this.emit('changed');\n  }\n  /**\n   * Returns the number of data items stored in the Storage object.\n   *\n   * @returns {number} - The number of data items stored in the Storage object.\n   */\n\n\n  get length() {\n    return this._storage.length;\n  }\n  /**\n   * Returns that passed key's value.\n   * @param {string} keyName the name of the key you want to retrieve\n   * the value of.\n   * @returns {String|null} the value of the key. If the key does not exist,\n   * null is returned.\n   */\n\n\n  getItem(keyName) {\n    return this._storage.getItem(keyName);\n  }\n  /**\n   * Adds a key to the storage, or update key's value if it already exists.\n   * @param {string} keyName - the name of the key you want to create/update.\n   * @param {string} keyValue - the value you want to give the key you are\n   * creating/updating.\n   * @param {boolean} dontEmitChangedEvent - If true a changed event won't be emitted.\n   */\n\n\n  setItem(keyName, keyValue, dontEmitChangedEvent = false) {\n    this._storage.setItem(keyName, keyValue);\n\n    if (!dontEmitChangedEvent) {\n      this.emit('changed');\n    }\n  }\n  /**\n   * Remove a key from the storage.\n   * @param {string} keyName the name of the key you want to remove.\n   */\n\n\n  removeItem(keyName) {\n    this._storage.removeItem(keyName);\n\n    this.emit('changed');\n  }\n  /**\n   * Returns the name of the nth key in the list, or null if n is greater\n   * than or equal to the number of key/value pairs in the object.\n   *\n   * @param {number} i - The index of the key in the list.\n   * @returns {string}\n   */\n\n\n  key(i) {\n    return this._storage.key(i);\n  }\n  /**\n   * Serializes the content of the storage.\n   *\n   * @returns {string} - The serialized content.\n   */\n\n\n  serialize() {\n    if (this.isLocalStorageDisabled()) {\n      return this._storage.serialize();\n    }\n\n    const length = this._storage.length;\n    const localStorageContent = {};\n\n    for (let i = 0; i < length; i++) {\n      const key = this._storage.key(i);\n\n      localStorageContent[key] = this._storage.getItem(key);\n    }\n\n    return JSON.stringify(localStorageContent);\n  }\n\n}\n\nexport const jitsiLocalStorage = new JitsiLocalStorage();","import { BrowserDetection } from '@jitsi/js-utils';\nimport { getLogger } from '@jitsi/logger';\n\nconst logger = getLogger(__filename);\n\n/* Minimum required Chrome / Chromium version. This applies also to derivatives. */\nconst MIN_REQUIRED_CHROME_VERSION = 72;\nconst MIN_REQUIRED_SAFARI_VERSION = 14;\nconst MIN_REQUIRED_IOS_VERSION = 14;\n\n// TODO: Move this code to js-utils.\n\n// NOTE: Now we are extending BrowserDetection in order to preserve\n// RTCBrowserType interface but maybe it worth exporting BrowserCapabilities\n// and BrowserDetection as separate objects in future.\n\n/**\n * Implements browser capabilities for lib-jitsi-meet.\n */\nexport default class BrowserCapabilities extends BrowserDetection {\n    /**\n     * Creates new BrowserCapabilities instance.\n     */\n    constructor() {\n        super();\n        logger.info(\n            `This appears to be ${this.getName()}, ver: ${this.getVersion()}`);\n    }\n\n    /**\n     * Tells whether or not the <tt>MediaStream/tt> is removed from the <tt>PeerConnection</tt> and disposed on video\n     * mute (in order to turn off the camera device). This is needed on Firefox because of the following bug\n     * https://bugzilla.mozilla.org/show_bug.cgi?id=1735951\n     *\n     * @return {boolean} <tt>true</tt> if the current browser supports this strategy or <tt>false</tt> otherwise.\n     */\n    doesVideoMuteByStreamRemove() {\n        return this.isChromiumBased() || this.isWebKitBased() || this.isFirefox();\n    }\n\n    /**\n     * Checks if the current browser is Chromium based, i.e., it's either Chrome / Chromium or uses it as its engine,\n     * but doesn't identify as Chrome.\n     *\n     * This includes the following browsers:\n     * - Chrome and Chromium.\n     * - Other browsers which use the Chrome engine, but are detected as Chrome, such as Brave and Vivaldi.\n     * - Browsers which are NOT Chrome but use it as their engine, and have custom detection code: Opera, Electron\n     *   and NW.JS.\n     * This excludes\n     * - Chrome on iOS since it uses WKWebView.\n     */\n    isChromiumBased() {\n        return (this.isChrome()\n            || this.isElectron()\n            || this.isNWJS()\n            || this.isOpera())\n            && !this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current platform is iOS.\n     *\n     * @returns {boolean}\n     */\n    isIosBrowser() {\n        const { userAgent, maxTouchPoints, platform } = navigator;\n\n        return Boolean(userAgent.match(/iP(ad|hone|od)/i))\n            || (maxTouchPoints && maxTouchPoints > 2 && /MacIntel/.test(platform));\n    }\n\n    /**\n     * Checks if the current browser is WebKit based. It's either\n     * Safari or uses WebKit as its engine.\n     *\n     * This includes Chrome and Firefox on iOS\n     *\n     * @returns {boolean}\n     */\n    isWebKitBased() {\n        // https://trac.webkit.org/changeset/236144/webkit/trunk/LayoutTests/webrtc/video-addLegacyTransceiver.html\n        return this._bowser.isEngine('webkit')\n            && typeof navigator.mediaDevices !== 'undefined'\n            && typeof navigator.mediaDevices.getUserMedia !== 'undefined'\n            && typeof window.RTCRtpTransceiver !== 'undefined'\n            // eslint-disable-next-line no-undef\n            && Object.keys(RTCRtpTransceiver.prototype).indexOf('currentDirection') > -1;\n    }\n\n    /**\n     * Checks whether current running context is a Trusted Web Application.\n     *\n     * @returns {boolean} Whether the current context is a TWA.\n     */\n    isTwa() {\n        return 'matchMedia' in window && window.matchMedia('(display-mode:standalone)').matches;\n    }\n\n    /**\n     * Checks if the current browser is supported.\n     *\n     * @returns {boolean} true if the browser is supported, false otherwise.\n     */\n    isSupported() {\n        if (this.isSafari() && this._getSafariVersion() < MIN_REQUIRED_SAFARI_VERSION) {\n            return false;\n        }\n\n        return (this.isChromiumBased() && this._getChromiumBasedVersion() >= MIN_REQUIRED_CHROME_VERSION)\n            || this.isFirefox()\n            || this.isReactNative()\n            || this.isWebKitBased();\n    }\n\n    /**\n     * Returns whether the browser is supported for Android\n     * @returns {boolean} true if the browser is supported for Android devices\n     */\n    isSupportedAndroidBrowser() {\n        return this.isChromiumBased() || this.isFirefox();\n    }\n\n    /**\n     * Returns whether the browser is supported for iOS\n     * @returns {boolean} true if the browser is supported for iOS devices\n     */\n    isSupportedIOSBrowser() {\n        return this._getIOSVersion() >= MIN_REQUIRED_IOS_VERSION;\n    }\n\n    /**\n     * Returns whether or not the current environment needs a user interaction\n     * with the page before any unmute can occur.\n     *\n     * @returns {boolean}\n     */\n    isUserInteractionRequiredForUnmute() {\n        return this.isFirefox() && this.isVersionLessThan('68');\n    }\n\n    /**\n     * Checks if the current browser triggers 'onmute'/'onunmute' events when\n     * user's connection is interrupted and the video stops playback.\n     * @returns {*|boolean} 'true' if the event is supported or 'false'\n     * otherwise.\n     */\n    supportsVideoMuteOnConnInterrupted() {\n        return this.isChromiumBased() || this.isReactNative();\n    }\n\n    /**\n     * Checks if the current browser reports upload and download bandwidth\n     * statistics.\n     * @return {boolean}\n     */\n    supportsBandwidthStatistics() {\n        // FIXME bandwidth stats are currently not implemented for FF on our\n        // side, but not sure if not possible ?\n        return !this.isFirefox() && !this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current browser supports setting codec preferences on the transceiver.\n     * @returns {boolean}\n     */\n    supportsCodecPreferences() {\n        return Boolean(window.RTCRtpTransceiver\n            && 'setCodecPreferences' in window.RTCRtpTransceiver.prototype\n            && window.RTCRtpReceiver\n            && typeof window.RTCRtpReceiver.getCapabilities !== 'undefined')\n\n            // this is not working on Safari because of the following bug\n            // https://bugs.webkit.org/show_bug.cgi?id=215567\n            && !this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current browser support the device change event.\n     * @return {boolean}\n     */\n    supportsDeviceChangeEvent() {\n        return navigator.mediaDevices\n            && typeof navigator.mediaDevices.ondevicechange !== 'undefined'\n            && typeof navigator.mediaDevices.addEventListener !== 'undefined';\n    }\n\n    /**\n     * Checks if the current browser supports RTT statistics for srflx local\n     * candidates through the legacy getStats() API.\n     */\n    supportsLocalCandidateRttStatistics() {\n        return this.isChromiumBased() || this.isReactNative() || this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current browser supports the Long Tasks API that lets us observe\n     * performance measurement events and be notified of tasks that take longer than\n     * 50ms to execute on the main thread.\n     */\n    supportsPerformanceObserver() {\n        return typeof window.PerformanceObserver !== 'undefined'\n            && PerformanceObserver.supportedEntryTypes.indexOf('longtask') > -1;\n    }\n\n    /**\n     * Checks if the current browser supports audio level stats on the receivers.\n     */\n    supportsReceiverStats() {\n        return typeof window.RTCRtpReceiver !== 'undefined'\n            && Object.keys(RTCRtpReceiver.prototype).indexOf('getSynchronizationSources') > -1\n\n            // Disable this on Safari because it is reporting 0.000001 as the audio levels for all\n            // remote audio tracks.\n            && !this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current browser reports round trip time statistics for\n     * the ICE candidate pair.\n     * @return {boolean}\n     */\n    supportsRTTStatistics() {\n        // Firefox does not seem to report RTT for ICE candidate pair:\n        // eslint-disable-next-line max-len\n        // https://www.w3.org/TR/webrtc-stats/#dom-rtcicecandidatepairstats-currentroundtriptime\n        // It does report mozRTT for RTP streams, but at the time of this\n        // writing it's value does not make sense most of the time\n        // (is reported as 1):\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=1241066\n        // For Chrome and others we rely on 'googRtt'.\n        return !this.isFirefox();\n    }\n\n    /**\n     * Returns true if VP9 is supported by the client on the browser. VP9 is currently disabled on Firefox and Safari\n     * because of issues with rendering. Please check https://bugzilla.mozilla.org/show_bug.cgi?id=1492500,\n     * https://bugs.webkit.org/show_bug.cgi?id=231071 and https://bugs.webkit.org/show_bug.cgi?id=231074 for details.\n     */\n    supportsVP9() {\n        return this.isChromiumBased() || this.isReactNative();\n    }\n\n    /**\n     * Checks if the browser uses SDP munging for turning on simulcast.\n     *\n     * @returns {boolean}\n     */\n    usesSdpMungingForSimulcast() {\n        return this.isChromiumBased() || this.isReactNative() || this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the browser uses webrtc-adapter. All browsers except React Native do.\n     *\n     * @returns {boolean}\n     */\n    usesAdapter() {\n        return !this.isReactNative();\n    }\n\n    /**\n     * Checks if the browser uses RIDs/MIDs for siganling the simulcast streams\n     * to the bridge instead of the ssrcs.\n     */\n    usesRidsForSimulcast() {\n        return false;\n    }\n\n    /**\n     * Checks if the browser supports getDisplayMedia.\n     * @returns {boolean} {@code true} if the browser supports getDisplayMedia.\n     */\n    supportsGetDisplayMedia() {\n        return typeof navigator.getDisplayMedia !== 'undefined'\n            || (typeof navigator.mediaDevices !== 'undefined'\n                && typeof navigator.mediaDevices.getDisplayMedia\n                    !== 'undefined');\n    }\n\n    /**\n     * Checks if the browser supports WebRTC Encoded Transform, an alternative\n     * to insertable streams.\n     *\n     * NOTE: At the time of this writing the only browser supporting this is\n     * Safari / WebKit, behind a flag.\n     *\n     * @returns {boolean} {@code true} if the browser supports it.\n     */\n    supportsEncodedTransform() {\n        return Boolean(window.RTCRtpScriptTransform);\n    }\n\n    /**\n     * Checks if the browser supports insertable streams, needed for E2EE.\n     * @returns {boolean} {@code true} if the browser supports insertable streams.\n     */\n    supportsInsertableStreams() {\n        if (!(typeof window.RTCRtpSender !== 'undefined'\n            && window.RTCRtpSender.prototype.createEncodedStreams)) {\n            return false;\n        }\n\n        // Feature-detect transferable streams which we need to operate in a worker.\n        // See https://groups.google.com/a/chromium.org/g/blink-dev/c/1LStSgBt6AM/m/hj0odB8pCAAJ\n        const stream = new ReadableStream();\n\n        try {\n            window.postMessage(stream, '*', [ stream ]);\n\n            return true;\n        } catch {\n            return false;\n        }\n    }\n\n    /**\n     * Whether the browser supports the RED format for audio.\n     */\n    supportsAudioRed() {\n        return Boolean(window.RTCRtpSender\n            && window.RTCRtpSender.getCapabilities\n            && window.RTCRtpSender.getCapabilities('audio').codecs.some(codec => codec.mimeType === 'audio/red')\n            && window.RTCRtpReceiver\n            && window.RTCRtpReceiver.getCapabilities\n            && window.RTCRtpReceiver.getCapabilities('audio').codecs.some(codec => codec.mimeType === 'audio/red'));\n    }\n\n    /**\n     * Checks if the browser supports unified plan.\n     *\n     * @returns {boolean}\n     */\n    supportsUnifiedPlan() {\n        return !this.isReactNative();\n    }\n\n    /**\n     * Checks if the browser supports voice activity detection via the @type {VADAudioAnalyser} service.\n     *\n     * @returns {boolean}\n     */\n    supportsVADDetection() {\n        return this.isChromiumBased();\n    }\n\n    /**\n     * Check if the browser supports the RTP RTX feature (and it is usable).\n     *\n     * @returns {boolean}\n     */\n    supportsRTX() {\n        // Disable RTX on Firefox up to 96 because we prefer simulcast over RTX\n        // see https://bugzilla.mozilla.org/show_bug.cgi?id=1738504\n        return !(this.isFirefox() && this.isVersionLessThan('96'));\n    }\n\n    /**\n     * Returns the version of a Chromium based browser.\n     *\n     * @returns {Number}\n     */\n    _getChromiumBasedVersion() {\n        if (this.isChromiumBased()) {\n            // NW.JS doesn't expose the Chrome version in the UA string.\n            if (this.isNWJS()) {\n                // eslint-disable-next-line no-undef\n                return Number.parseInt(process.versions.chromium, 10);\n            }\n\n            // Here we process all browsers which use the Chrome engine but\n            // don't necessarily identify as Chrome. We cannot use the version\n            // comparing functions because the Electron, Opera and NW.JS\n            // versions are inconsequential here, as we need to know the actual\n            // Chrome engine version.\n            const ua = navigator.userAgent;\n\n            if (ua.match(/Chrome/)) {\n                const version\n                    = Number.parseInt(ua.match(/Chrome\\/([\\d.]+)/)[1], 10);\n\n                return version;\n            }\n        }\n\n        return -1;\n    }\n\n    /**\n     * Returns the version of a Safari browser.\n     *\n     * @returns {Number}\n     */\n    _getSafariVersion() {\n        if (this.isSafari()) {\n            return Number.parseInt(this.getVersion(), 10);\n        }\n\n        return -1;\n    }\n\n    /**\n     * Returns the version of an ios browser.\n     *\n     * @returns {Number}\n     */\n    _getIOSVersion() {\n        if (this.isWebKitBased()) {\n            return Number.parseInt(this.getVersion(), 10);\n        }\n\n        return -1;\n    }\n}\n","import BrowserCapabilities from './BrowserCapabilities';\n\nexport default new BrowserCapabilities();\n","import { getLogger } from '@jitsi/logger';\n\nimport {\n    TYPE_OPERATIONAL,\n    TYPE_PAGE,\n    TYPE_TRACK,\n    TYPE_UI\n} from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\n\nconst MAX_CACHE_SIZE = 100;\n\n// eslist-disable-line no-undef\nconst logger = getLogger(__filename);\n\n/**\n * This class provides an API to lib-jitsi-meet and its users for sending\n * analytics events. It serves as a bridge to different backend implementations\n * (\"analytics handlers\") and a cache for events attempted to be sent before\n * the analytics handlers were enabled.\n *\n * The API is designed to be an easy replacement for the previous version of\n * this adapter, and is meant to be extended with more convenience methods.\n *\n *\n * The API calls are translated to objects with the following structure, which\n * are then passed to the sendEvent(event) function of the underlying handlers:\n *\n * {\n *    type,\n *\n *    action,\n *    actionSubject,\n *    actionSubjectId,\n *    attributes,\n *    categories,\n *    containerId,\n *    containerType,\n *    name,\n *    objectId,\n *    objectType,\n *    source,\n *    tags\n * }\n *\n * The 'type' is one of 'operational', 'page', 'track' or 'ui', and some of the\n * other properties are considered required according to the type.\n *\n * For events with type 'page', the required properties are: name.\n *\n * For events with type 'operational' and 'ui', the required properties are:\n * action, actionSubject, source\n *\n * For events with type 'page', the required properties are:\n * action, actionSubject, source, containerType, containerId, objectType,\n * objectId\n */\nclass AnalyticsAdapter {\n    /**\n     * Creates new AnalyticsAdapter instance.\n     */\n    constructor() {\n        this.reset();\n    }\n\n    /**\n     * Reset the state to the initial one.\n     *\n     * @returns {void}\n     */\n    reset() {\n        /**\n         * Whether this AnalyticsAdapter has been disposed of or not. Once this\n         * is set to true, the AnalyticsAdapter is disabled and does not accept\n         * any more events, and it can not be re-enabled.\n         * @type {boolean}\n         */\n        this.disposed = false;\n\n        /**\n         * The set of handlers to which events will be sent.\n         * @type {Set<any>}\n         */\n        this.analyticsHandlers = new Set();\n\n        /**\n         * The cache of events which are not sent yet. The cache is enabled\n         * while this field is truthy, and disabled otherwise.\n         * @type {Array}\n         */\n        this.cache = [];\n\n        /**\n         * Map of properties that will be added to every event. Note that the\n         * keys will be prefixed with \"permanent.\".\n         */\n        this.permanentProperties = {};\n\n        /**\n         * The name of the conference that this AnalyticsAdapter is associated\n         * with.\n         * @type {null}\n         */\n        this.conferenceName = '';\n\n        this.addPermanentProperties({\n            'user_agent': navigator.userAgent,\n            'browser_name': browser.getName()\n        });\n    }\n\n    /**\n     * Dispose analytics. Clears all handlers.\n     */\n    dispose() {\n        logger.warn('Disposing of analytics adapter.');\n\n        if (this.analyticsHandlers && this.analyticsHandlers.size > 0) {\n            this.analyticsHandlers.forEach(handler => {\n                if (typeof handler.dispose === 'function') {\n                    handler.dispose();\n                }\n            });\n        }\n\n        this.setAnalyticsHandlers([]);\n        this.disposed = true;\n    }\n\n    /**\n     * Sets the handlers that are going to be used to send analytics. Sends any\n     * cached events.\n     * @param {Array} handlers the handlers\n     */\n    setAnalyticsHandlers(handlers) {\n        if (this.disposed) {\n            return;\n        }\n\n        this.analyticsHandlers = new Set(handlers);\n\n        this._setUserProperties();\n\n        // Note that we disable the cache even if the set of handlers is empty.\n        const cache = this.cache;\n\n        this.cache = null;\n        if (cache) {\n            cache.forEach(event => this._sendEvent(event));\n        }\n    }\n\n    /**\n     * Set the user properties to the analytics handlers.\n     *\n     * @returns {void}\n     */\n    _setUserProperties() {\n        this.analyticsHandlers.forEach(handler => {\n            try {\n                handler.setUserProperties(this.permanentProperties);\n            } catch (error) {\n                logger.warn('Error in setUserProperties method of one of the '\n                    + `analytics handlers: ${error}`);\n            }\n        });\n    }\n\n    /**\n     * Adds a set of permanent properties to this this AnalyticsAdapter.\n     * Permanent properties will be added as \"attributes\" to events sent to\n     * the underlying \"analytics handlers\", and their keys will be prefixed\n     * by \"permanent_\", i.e. adding a permanent property {key: \"value\"} will\n     * result in {\"permanent_key\": \"value\"} object to be added to the\n     * \"attributes\" field of events.\n     *\n     * @param {Object} properties the properties to add\n     */\n    addPermanentProperties(properties) {\n        this.permanentProperties = {\n            ...this.permanentProperties,\n            ...properties\n        };\n\n        this._setUserProperties();\n    }\n\n    /**\n     * Sets the name of the conference that this AnalyticsAdapter is associated\n     * with.\n     * @param name the name to set.\n     */\n    setConferenceName(name) {\n        this.conferenceName = name;\n        this.addPermanentProperties({ 'conference_name': name });\n    }\n\n    /**\n     * Sends an event with a given name and given properties. The first\n     * parameter is either a string or an object. If it is a string, it is used\n     * as the event name and the second parameter is used at the attributes to\n     * attach to the event. If it is an object, it represents the whole event,\n     * including any desired attributes, and the second parameter is ignored.\n     *\n     * @param {String|Object} eventName either a string to be used as the name\n     * of the event, or an event object. If an event object is passed, the\n     * properties parameters is ignored.\n     * @param {Object} properties the properties/attributes to attach to the\n     * event, if eventName is a string.\n     */\n    sendEvent(eventName, properties = {}) {\n        if (this.disposed) {\n            return;\n        }\n\n        let event = null;\n\n        if (typeof eventName === 'string') {\n            event = {\n                type: TYPE_OPERATIONAL,\n                action: eventName,\n                actionSubject: eventName,\n                source: eventName,\n                attributes: properties\n            };\n        } else if (typeof eventName === 'object') {\n            event = eventName;\n        }\n\n        if (!this._verifyRequiredFields(event)) {\n            logger.error(\n                `Dropping a mis-formatted event: ${JSON.stringify(event)}`);\n\n            return;\n        }\n\n        this._sendEvent(event);\n    }\n\n    /**\n     * Checks whether an event has all of the required fields set, and tries\n     * to fill in some of the missing fields with reasonable default values.\n     * Returns true if after this operation the event has all of the required\n     * fields set, and false otherwise (if some of the required fields were not\n     * set and the attempt to fill them in with a default failed).\n     *\n     * @param event the event object.\n     * @return {boolean} true if the event (after the call to this function)\n     * contains all of the required fields, and false otherwise.\n     * @private\n     */\n    _verifyRequiredFields(event) {\n        if (!event) {\n            return false;\n        }\n\n        if (!event.type) {\n            event.type = TYPE_OPERATIONAL;\n        }\n\n        const type = event.type;\n\n        if (type !== TYPE_OPERATIONAL && type !== TYPE_PAGE\n            && type !== TYPE_UI && type !== TYPE_TRACK) {\n            logger.error(`Unknown event type: ${type}`);\n\n            return false;\n        }\n\n        if (type === TYPE_PAGE) {\n            return Boolean(event.name);\n        }\n\n        // Try to set some reasonable default values in case some of the\n        // parameters required by the handler API are missing.\n        event.action = event.action || event.name || event.actionSubject;\n        event.actionSubject = event.actionSubject || event.name || event.action;\n        event.source = event.source || event.name || event.action\n            || event.actionSubject;\n\n        if (!event.action || !event.actionSubject || !event.source) {\n            logger.error(\n                'Required field missing (action, actionSubject or source)');\n\n            return false;\n        }\n\n        // Track events have additional required fields.\n        if (type === TYPE_TRACK) {\n            event.objectType = event.objectType || 'generic-object-type';\n            event.containerType = event.containerType || 'conference';\n            if (event.containerType === 'conference' && !event.containerId) {\n                event.containerId = this.conferenceName;\n            }\n\n\n            if (!event.objectType || !event.objectId\n                || !event.containerType || !event.containerId) {\n                logger.error(\n                    'Required field missing (containerId, containerType, '\n                        + 'objectId or objectType)');\n\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Saves an event to the cache, if the cache is enabled.\n     * @param event the event to save.\n     * @returns {boolean} true if the event was saved, and false otherwise (i.e.\n     * if the cache was disabled).\n     * @private\n     */\n    _maybeCacheEvent(event) {\n        if (this.cache) {\n            this.cache.push(event);\n\n            // We limit the size of the cache, in case the user fails to ever\n            // set the analytics handlers.\n            if (this.cache.length > MAX_CACHE_SIZE) {\n                this.cache.splice(0, 1);\n            }\n\n            return true;\n        }\n\n        return false;\n\n    }\n\n    /**\n     *\n     * @param event\n     * @private\n     */\n    _sendEvent(event) {\n        if (this._maybeCacheEvent(event)) {\n            // The event was consumed by the cache.\n        } else {\n            this.analyticsHandlers.forEach(handler => {\n                try {\n                    handler.sendEvent(event);\n                } catch (e) {\n                    logger.warn(`Error sending analytics event: ${e}`);\n                }\n            });\n        }\n    }\n}\n\nexport default new AnalyticsAdapter();\n","/* global callstats */\n\nimport browser from '../browser';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nconst logger = require('@jitsi/logger').getLogger(__filename);\n\n/**\n * We define enumeration of wrtcFuncNames as we need them before\n * callstats is initialized to queue events.\n * @const\n * @see http://www.callstats.io/api/#enumeration-of-wrtcfuncnames\n */\nconst wrtcFuncNames = {\n    createOffer: 'createOffer',\n    createAnswer: 'createAnswer',\n    setLocalDescription: 'setLocalDescription',\n    setRemoteDescription: 'setRemoteDescription',\n    addIceCandidate: 'addIceCandidate',\n    getUserMedia: 'getUserMedia',\n    iceConnectionFailure: 'iceConnectionFailure',\n    signalingError: 'signalingError',\n    applicationLog: 'applicationLog'\n};\n\n/**\n * We define enumeration of fabricEvent as we need them before\n * callstats is initialized to queue events.\n * @const\n * @see http://www.callstats.io/api/#enumeration-of-fabricevent\n */\nconst fabricEvent = {\n    fabricHold: 'fabricHold',\n    fabricResume: 'fabricResume',\n    audioMute: 'audioMute',\n    audioUnmute: 'audioUnmute',\n    videoPause: 'videoPause',\n    videoResume: 'videoResume',\n    fabricUsageEvent: 'fabricUsageEvent',\n    fabricStats: 'fabricStats',\n    fabricTerminated: 'fabricTerminated',\n    screenShareStart: 'screenShareStart',\n    screenShareStop: 'screenShareStop',\n    dominantSpeaker: 'dominantSpeaker',\n    activeDeviceList: 'activeDeviceList'\n};\n\n/**\n * The user id to report to callstats as destination.\n * @type {string}\n */\nconst DEFAULT_REMOTE_USER = 'jitsi';\n\n/**\n * Type of pending reports, can be event or an error.\n * @type {{ERROR: string, EVENT: string}}\n */\nconst reportType = {\n    ERROR: 'error',\n    EVENT: 'event',\n    MST_WITH_USERID: 'mstWithUserID'\n};\n\n/**\n * Set of currently existing {@link CallStats} instances.\n * @type {Set<CallStats>}\n */\nlet _fabrics;\n\n/**\n * An instance of this class is a wrapper for the CallStats API fabric. A fabric\n * reports one peer connection to the CallStats backend and is allocated with\n * {@link callstats.addNewFabric}. It has a bunch of instance methods for\n * reporting various events. A fabric is considered disposed when\n * {@link CallStats.sendTerminateEvent} is executed.\n *\n * Currently only one backend instance can be created ever and it's done using\n * {@link CallStats.initBackend}. At the time of this writing there is no way to\n * explicitly shutdown the backend, but it's supposed to close it's connection\n * automatically, after all fabrics have been terminated.\n */\nexport default class CallStats {\n    /**\n     * A callback passed to {@link callstats.addNewFabric}.\n     * @param {string} error 'success' means ok\n     * @param {string} msg some more details\n     * @private\n     */\n    static _addNewFabricCallback(error, msg) {\n        if (CallStats.backend && error !== 'success') {\n            logger.error(`Monitoring status: ${error} msg: ${msg}`);\n        }\n    }\n\n    /**\n     * Callback passed to {@link callstats.initialize} (backend initialization)\n     * @param {string} error 'success' means ok\n     * @param {String} msg\n     * @private\n     */\n    static _initCallback(error, msg) {\n        logger.log(`CallStats Status: err=${error} msg=${msg}`);\n\n        // there is no lib, nothing to report to\n        if (error !== 'success') {\n            return;\n        }\n\n        CallStats.backendInitialized = true;\n\n        // I hate that\n        let atLeastOneFabric = false;\n        let defaultInstance = null;\n\n        for (const callStatsInstance of CallStats.fabrics.values()) {\n            if (!callStatsInstance.hasFabric) {\n                logger.debug('addNewFabric - initCallback');\n                if (callStatsInstance._addNewFabric()) {\n                    atLeastOneFabric = true;\n                    if (!defaultInstance) {\n                        defaultInstance = callStatsInstance;\n                    }\n                }\n            }\n        }\n\n        if (!atLeastOneFabric) {\n            return;\n        }\n\n        CallStats._emptyReportQueue(defaultInstance);\n    }\n\n    /**\n     * Empties report queue.\n     *\n     * @param {CallStats} csInstance - The callstats instance.\n     * @private\n     */\n    static _emptyReportQueue(csInstance) {\n        // There is no conference ID nor a PeerConnection available when some of\n        // the events are scheduled on the reportsQueue, so those will be\n        // reported on the first initialized fabric.\n        const defaultConfID = csInstance.confID;\n        const defaultPC = csInstance.peerconnection;\n\n        // notify callstats about failures if there were any\n        for (const report of CallStats.reportsQueue) {\n            if (report.type === reportType.ERROR) {\n                const errorData = report.data;\n\n                CallStats._reportError(\n                    csInstance,\n                    errorData.type,\n                    errorData.error,\n                    errorData.pc || defaultPC);\n            } else if (report.type === reportType.EVENT) {\n                // if we have and event to report and we failed to add\n                // fabric this event will not be reported anyway, returning\n                // an error\n                const eventData = report.data;\n\n                CallStats.backend.sendFabricEvent(\n                    report.pc || defaultPC,\n                    eventData.event,\n                    defaultConfID,\n                    eventData.eventData);\n            } else if (report.type === reportType.MST_WITH_USERID) {\n                const data = report.data;\n\n                CallStats.backend.associateMstWithUserID(\n                    report.pc || defaultPC,\n                    data.callStatsId,\n                    defaultConfID,\n                    data.ssrc,\n                    data.usageLabel,\n                    data.containerId\n                );\n            }\n        }\n        CallStats.reportsQueue.length = 0;\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Reports an error to callstats.\n     *\n     * @param {CallStats} [cs]\n     * @param type the type of the error, which will be one of the wrtcFuncNames\n     * @param error the error\n     * @param pc the peerconnection\n     * @private\n     */\n    static _reportError(cs, type, error, pc) {\n        let _error = error;\n\n        if (!_error) {\n            logger.warn('No error is passed!');\n            _error = new Error('Unknown error');\n        }\n        if (CallStats.backendInitialized && cs) {\n            CallStats.backend.reportError(pc, cs.confID, type, _error);\n        } else {\n            CallStats.reportsQueue.push({\n                type: reportType.ERROR,\n                data: {\n                    error: _error,\n                    pc,\n                    type\n                }\n            });\n        }\n\n        // else just ignore it\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Reports an error to callstats.\n     *\n     * @param {CallStats} cs\n     * @param event the type of the event, which will be one of the fabricEvent\n     * @param eventData additional data to pass to event\n     * @private\n     */\n    static _reportEvent(cs, event, eventData) {\n        const pc = cs && cs.peerconnection;\n        const confID = cs && cs.confID;\n\n        if (CallStats.backendInitialized && cs) {\n            CallStats.backend.sendFabricEvent(pc, event, confID, eventData);\n        } else {\n            CallStats.reportsQueue.push({\n                confID,\n                pc,\n                type: reportType.EVENT,\n                data: { event,\n                    eventData }\n            });\n        }\n    }\n\n    /**\n     * Wraps some of the CallStats API method and logs their calls with\n     * arguments on the debug logging level. Also wraps some of the backend\n     * methods execution into try catch blocks to not crash the app in case\n     * there is a problem with the backend itself.\n     * @param {callstats} theBackend\n     * @private\n     */\n    static _traceAndCatchBackendCalls(theBackend) {\n        const tryCatchMethods = [\n            'associateMstWithUserID',\n            'sendFabricEvent',\n            'sendUserFeedback'\n\n            // 'reportError', - this one needs special handling - see code below\n        ];\n\n        for (const methodName of tryCatchMethods) {\n            const originalMethod = theBackend[methodName];\n\n            theBackend[methodName] = function(...theArguments) {\n                try {\n                    return originalMethod.apply(theBackend, theArguments);\n                } catch (e) {\n                    GlobalOnErrorHandler.callErrorHandler(e);\n                }\n            };\n        }\n        const debugMethods = [\n            'associateMstWithUserID',\n            'sendFabricEvent',\n            'sendUserFeedback'\n\n            // 'reportError', - this one needs special handling - see code below\n        ];\n\n        for (const methodName of debugMethods) {\n            const originalMethod = theBackend[methodName];\n\n            theBackend[methodName] = function(...theArguments) {\n                logger.debug(methodName, theArguments);\n                originalMethod.apply(theBackend, theArguments);\n            };\n        }\n        const originalReportError = theBackend.reportError;\n\n        /* eslint-disable max-params */\n        theBackend.reportError = function(pc, cs, type, ...args) {\n            // Logs from the logger are submitted on the applicationLog event\n            // \"type\". Logging the arguments on the logger will create endless\n            // loop, because it will put all the logs to the logger queue again.\n            if (type === wrtcFuncNames.applicationLog) {\n                // NOTE otherArguments are not logged to the console on purpose\n                // to not log the whole log batch\n                // FIXME check the current logging level (currently not exposed\n                // by the logger implementation)\n                // NOTE it is not safe to log whole objects on react-native as\n                // those contain too many circular references and may crash\n                // the app.\n                if (!browser.isReactNative()) {\n                    console && console.debug('reportError', pc, cs, type);\n                }\n            } else {\n                logger.debug('reportError', pc, cs, type, ...args);\n            }\n            try {\n                originalReportError.call(theBackend, pc, cs, type, ...args);\n            } catch (exception) {\n                if (type === wrtcFuncNames.applicationLog) {\n                    console && console.error('reportError', exception);\n                } else {\n                    GlobalOnErrorHandler.callErrorHandler(exception);\n                }\n            }\n        };\n\n        /* eslint-enable max-params */\n    }\n\n    /**\n     * Returns the Set with the currently existing {@link CallStats} instances.\n     * Lazily initializes the Set to allow any Set polyfills to be applied.\n     * @type {Set<CallStats>}\n     */\n    static get fabrics() {\n        if (!_fabrics) {\n            _fabrics = new Set();\n        }\n\n        return _fabrics;\n    }\n\n    /**\n     * Initializes the CallStats backend. Should be called only if\n     * {@link CallStats.isBackendInitialized} returns <tt>false</tt>.\n     * @param {object} options\n     * @param {String} options.callStatsID CallStats credentials - ID\n     * @param {String} options.callStatsSecret CallStats credentials - secret\n     * @param {string} options.aliasName the <tt>aliasName</tt> part of\n     * the <tt>userID</tt> aka endpoint ID, see CallStats docs for more info.\n     * @param {string} options.userName the <tt>userName</tt> part of\n     * the <tt>userID</tt> aka display name, see CallStats docs for more info.\n     * @param {object} options.configParams the set of parameters\n     * to enable/disable certain features in the library. See CallStats docs for more info.\n     *\n     */\n    static initBackend(options) {\n        if (CallStats.backend) {\n            throw new Error('CallStats backend has been initialized already!');\n        }\n        try {\n            const CallStatsBackend = callstats;\n\n            CallStats.backend = new CallStatsBackend();\n            CallStats._traceAndCatchBackendCalls(CallStats.backend);\n            CallStats.userID = {\n                aliasName: options.aliasName,\n                userName: options.userName\n            };\n            CallStats.callStatsID = options.callStatsID;\n            CallStats.callStatsSecret = options.callStatsSecret;\n\n            const configParams = { ...options.configParams };\n\n            if (options.applicationName) {\n                configParams.applicationVersion = `${options.applicationName} (${browser.getName()})`;\n            }\n\n            if (options.confID) {\n                // we first check is there a tenant in the confID\n                const match = options.confID.match(/.*\\/(.*)\\/.*/);\n\n                // if there is no tenant, we will just set '/'\n                configParams.siteID = options.siteID || (match && match[1]) || '/';\n            }\n\n            // userID is generated or given by the origin server\n            CallStats.backend.initialize(\n                CallStats.callStatsID,\n                CallStats.callStatsSecret,\n                CallStats.userID,\n                CallStats._initCallback,\n                undefined,\n                configParams);\n\n            const getWiFiStatsMethod = options.getWiFiStatsMethod;\n\n            if (getWiFiStatsMethod) {\n                CallStats.backend.attachWifiStatsHandler(getWiFiStatsMethod);\n\n                getWiFiStatsMethod().then(result => {\n                    if (result) {\n                        logger.info('Reported wifi addresses:'\n                            , JSON.parse(result).addresses);\n                    }\n                })\n                .catch(() => {});// eslint-disable-line no-empty-function\n            }\n\n            return true;\n        } catch (e) {\n            // The callstats.io API failed to initialize (e.g. because its\n            // download did not succeed in general or on time). Further attempts\n            // to utilize it cannot possibly succeed.\n            GlobalOnErrorHandler.callErrorHandler(e);\n            CallStats.backend = null;\n            logger.error(e);\n\n            return false;\n        }\n    }\n\n    /**\n     * Checks if the CallStats backend has been created. It does not mean that\n     * it has been initialized, but only that the API instance has been\n     * allocated successfully.\n     * @return {boolean} <tt>true</tt> if backend exists or <tt>false</tt>\n     * otherwise\n     */\n    static isBackendInitialized() {\n        return Boolean(CallStats.backend);\n    }\n\n    /**\n     * Notifies CallStats about active device.\n     * @param {{deviceList: {String:String}}} devicesData list of devices with\n     * their data\n     * @param {CallStats} cs callstats instance related to the event\n     */\n    static sendActiveDeviceListEvent(devicesData, cs) {\n        CallStats._reportEvent(cs, fabricEvent.activeDeviceList, devicesData);\n    }\n\n    /**\n     * Notifies CallStats that there is a log we want to report.\n     *\n     * @param {Error} e error to send or {String} message\n     * @param {CallStats} cs callstats instance related to the error (optional)\n     */\n    static sendApplicationLog(e, cs) {\n        try {\n            CallStats._reportError(\n                cs,\n                wrtcFuncNames.applicationLog,\n                e,\n                cs && cs.peerconnection);\n        } catch (error) {\n            // If sendApplicationLog fails it should not be printed to\n            // the logger, because it will try to push the logs again\n            // (through sendApplicationLog) and an endless loop is created.\n            if (console && (typeof console.error === 'function')) {\n                // FIXME send analytics event as well\n                console.error('sendApplicationLog failed', error);\n            }\n        }\n    }\n\n    /**\n     * Sends the given feedback through CallStats.\n     *\n     * @param {string} conferenceID the conference ID for which the feedback\n     * will be reported.\n     * @param overall an integer between 1 and 5 indicating the\n     * user feedback\n     * @param comment detailed feedback from the user.\n     */\n    static sendFeedback(conferenceID, overall, comment) {\n        return new Promise((resolve, reject) => {\n            if (CallStats.backend) {\n                CallStats.backend.sendUserFeedback(\n                    conferenceID,\n                    {\n                        userID: CallStats.userID,\n                        overall,\n                        comment\n                    },\n                    (status, message) => {\n                        if (status === 'success') {\n                            resolve(message);\n                        } else {\n                            reject(message);\n                        }\n                    });\n            } else {\n                const reason = 'Failed to submit feedback to CallStats - no backend';\n\n                logger.error(reason);\n                reject(reason);\n            }\n        });\n    }\n\n    /**\n     * Notifies CallStats that getUserMedia failed.\n     *\n     * @param {Error} e error to send\n     * @param {CallStats} cs callstats instance related to the error (optional)\n     */\n    static sendGetUserMediaFailed(e, cs) {\n        CallStats._reportError(cs, wrtcFuncNames.getUserMedia, e, null);\n    }\n\n    /**\n     * Notifies CallStats for mute events\n     * @param mute {boolean} true for muted and false for not muted\n     * @param type {String} \"audio\"/\"video\"\n     * @param {CallStats} cs callstats instance related to the event\n     */\n    static sendMuteEvent(mute, type, cs) {\n        let event;\n\n        if (type === 'video') {\n            event = mute ? fabricEvent.videoPause : fabricEvent.videoResume;\n        } else {\n            event = mute ? fabricEvent.audioMute : fabricEvent.audioUnmute;\n        }\n\n        CallStats._reportEvent(cs, event);\n    }\n\n    /**\n     * Creates new CallStats instance that handles all callstats API calls for\n     * given {@link TraceablePeerConnection}. Each instance is meant to handle\n     * one CallStats fabric added with 'addFabric' API method for the\n     * {@link TraceablePeerConnection} instance passed in the constructor.\n     * @param {TraceablePeerConnection} tpc\n     * @param {Object} options\n     * @param {string} options.confID the conference ID that wil be used to\n     * report the session.\n     * @param {string} [options.remoteUserID='jitsi'] the remote user ID to\n     * which given <tt>tpc</tt> is connected.\n     */\n    constructor(tpc, options) {\n        this.confID = options.confID;\n        this.tpc = tpc;\n        this.peerconnection = tpc.peerconnection;\n        this.remoteUserID = options.remoteUserID || DEFAULT_REMOTE_USER;\n        this.hasFabric = false;\n\n        CallStats.fabrics.add(this);\n\n        if (CallStats.backendInitialized) {\n            this._addNewFabric();\n\n            // if this is the first fabric let's try to empty the\n            // report queue. Reports all events that we recorded between\n            // backend initialization and receiving the first fabric\n            if (CallStats.fabrics.size === 1) {\n                CallStats._emptyReportQueue(this);\n            }\n        }\n    }\n\n    /**\n     * Initializes CallStats fabric by calling \"addNewFabric\" for\n     * the peer connection associated with this instance.\n     * @return {boolean} true if the call was successful or false otherwise.\n     */\n    _addNewFabric() {\n        logger.info('addNewFabric', this.remoteUserID);\n        try {\n            const fabricAttributes = {\n                remoteEndpointType:\n                    this.tpc.isP2P\n                        ? CallStats.backend.endpointType.peer\n                        : CallStats.backend.endpointType.server\n            };\n            const ret\n                = CallStats.backend.addNewFabric(\n                    this.peerconnection,\n                    this.remoteUserID,\n                    CallStats.backend.fabricUsage.multiplex,\n                    this.confID,\n                    fabricAttributes,\n                    CallStats._addNewFabricCallback);\n\n            this.hasFabric = true;\n\n            const success = ret.status === 'success';\n\n            if (!success) {\n                logger.error('callstats fabric not initilized', ret.message);\n            }\n\n            return success;\n\n        } catch (error) {\n            GlobalOnErrorHandler.callErrorHandler(error);\n\n            return false;\n        }\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Lets CallStats module know where is given SSRC rendered by providing\n     * renderer tag ID.\n     * If the lib is not initialized yet queue the call for later, when it's\n     * ready.\n     * @param {number} ssrc the SSRC of the stream\n     * @param {boolean} isLocal indicates whether this the stream is local\n     * @param {string|null} streamEndpointId if the stream is not local the it\n     * needs to contain the stream owner's ID\n     * @param {string} usageLabel meaningful usage label of this stream like\n     *        'microphone', 'camera' or 'screen'.\n     * @param {string} containerId  the id of media 'audio' or 'video' tag which\n     *        renders the stream.\n     */\n    associateStreamWithVideoTag(\n            ssrc,\n            isLocal,\n            streamEndpointId,\n            usageLabel,\n            containerId) {\n        if (!CallStats.backend) {\n            return;\n        }\n\n        const callStatsId = isLocal ? CallStats.userID : streamEndpointId;\n\n        if (CallStats.backendInitialized) {\n            CallStats.backend.associateMstWithUserID(\n                this.peerconnection,\n                callStatsId,\n                this.confID,\n                ssrc,\n                usageLabel,\n                containerId);\n        } else {\n            CallStats.reportsQueue.push({\n                type: reportType.MST_WITH_USERID,\n                pc: this.peerconnection,\n                data: {\n                    callStatsId,\n                    containerId,\n                    ssrc,\n                    usageLabel\n                }\n            });\n        }\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Notifies CallStats that we are the new dominant speaker in the\n     * conference.\n     */\n    sendDominantSpeakerEvent() {\n        CallStats._reportEvent(this, fabricEvent.dominantSpeaker);\n    }\n\n    /**\n     * Notifies CallStats that the fabric for the underlying peerconnection was\n     * closed and no evens should be reported, after this call.\n     */\n    sendTerminateEvent() {\n        if (CallStats.backendInitialized) {\n            CallStats.backend.sendFabricEvent(\n                this.peerconnection,\n                CallStats.backend.fabricEvent.fabricTerminated,\n                this.confID);\n        }\n        CallStats.fabrics.delete(this);\n    }\n\n    /**\n     * Notifies CallStats for ice connection failed\n     */\n    sendIceConnectionFailedEvent() {\n        CallStats._reportError(\n            this,\n            wrtcFuncNames.iceConnectionFailure,\n            null,\n            this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to create offer.\n     *\n     * @param {Error} e error to send\n     */\n    sendCreateOfferFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.createOffer, e, this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to create answer.\n     *\n     * @param {Error} e error to send\n     */\n    sendCreateAnswerFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.createAnswer, e, this.peerconnection);\n    }\n\n    /**\n     * Sends either resume or hold event for the fabric associated with\n     * the underlying peerconnection.\n     * @param {boolean} isResume true to resume or false to hold\n     */\n    sendResumeOrHoldEvent(isResume) {\n        CallStats._reportEvent(\n            this,\n            isResume ? fabricEvent.fabricResume : fabricEvent.fabricHold);\n    }\n\n    /**\n     * Notifies CallStats for screen sharing events\n     * @param {boolean} start true for starting screen sharing and\n     * false for not stopping\n     * @param {string|null} ssrc - optional ssrc value, used only when\n     * starting screen sharing.\n     */\n    sendScreenSharingEvent(start, ssrc) {\n        let eventData;\n\n        if (ssrc) {\n            eventData = { ssrc };\n        }\n\n        CallStats._reportEvent(\n            this,\n            start ? fabricEvent.screenShareStart : fabricEvent.screenShareStop,\n            eventData);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to set local description.\n     *\n     * @param {Error} e error to send\n     */\n    sendSetLocalDescFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.setLocalDescription, e, this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to set remote description.\n     *\n     * @param {Error} e error to send\n     */\n    sendSetRemoteDescFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.setRemoteDescription, e, this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to add ICE candidate.\n     *\n     * @param {Error} e error to send\n     */\n    sendAddIceCandidateFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.addIceCandidate, e, this.peerconnection);\n    }\n}\n\n/**\n * The CallStats API backend instance\n * @type {callstats}\n */\nCallStats.backend = null;\n\n// some errors/events may happen before CallStats init\n// in this case we accumulate them in this array\n// and send them to callstats on init\nCallStats.reportsQueue = [];\n\n/**\n * Whether the library was successfully initialized(the backend) using its\n * initialize method.\n * @type {boolean}\n */\nCallStats.backendInitialized = false;\n\n/**\n * Part of the CallStats credentials - application ID\n * @type {string}\n */\nCallStats.callStatsID = null;\n\n/**\n * Part of the CallStats credentials - application secret\n * @type {string}\n */\nCallStats.callStatsSecret = null;\n\n/**\n * Local CallStats user ID structure. Can be set only once when\n * {@link backend} is initialized, so it's static for the time being.\n * See CallStats API for more info:\n * https://www.callstats.io/api/#userid\n * @type {object}\n */\nCallStats.userID = null;\n","/**\n * Provides statistics for the local stream.\n */\n\n/**\n * Size of the webaudio analyzer buffer.\n * @type {number}\n */\nconst WEBAUDIO_ANALYZER_FFT_SIZE = 2048;\n\n/**\n * Value of the webaudio analyzer smoothing time parameter.\n * @type {number}\n */\nconst WEBAUDIO_ANALYZER_SMOOTING_TIME = 0.8;\n\nwindow.AudioContext = window.AudioContext || window.webkitAudioContext;\n\nlet context = null;\n\nif (window.AudioContext) {\n    context = new AudioContext();\n\n    // XXX Not all browsers define a suspend method on AudioContext. As the\n    // invocation is at the (ES6 module) global execution level, it breaks the\n    // loading of the lib-jitsi-meet library in such browsers and, consequently,\n    // the loading of the very Web app that uses the lib-jitsi-meet library. For\n    // example, Google Chrome 40 on Android does not define the method but we\n    // still want to be able to load the lib-jitsi-meet library there and\n    // display a page which notifies the user that the Web app is not supported\n    // there.\n    context.suspend && context.suspend();\n}\n\n/**\n * Converts time domain data array to audio level.\n * @param samples the time domain data array.\n * @returns {number} the audio level\n */\nfunction timeDomainDataToAudioLevel(samples) {\n\n    let maxVolume = 0;\n\n    const length = samples.length;\n\n    for (let i = 0; i < length; i++) {\n        if (maxVolume < samples[i]) {\n            maxVolume = samples[i];\n        }\n    }\n\n    return parseFloat(((maxVolume - 127) / 128).toFixed(3));\n}\n\n/**\n * Animates audio level change\n * @param newLevel the new audio level\n * @param lastLevel the last audio level\n * @returns {Number} the audio level to be set\n */\nfunction animateLevel(newLevel, lastLevel) {\n    let value = 0;\n    const diff = lastLevel - newLevel;\n\n    if (diff > 0.2) {\n        value = lastLevel - 0.2;\n    } else if (diff < -0.4) {\n        value = lastLevel + 0.4;\n    } else {\n        value = newLevel;\n    }\n\n    return parseFloat(value.toFixed(3));\n}\n\n\n/**\n * <tt>LocalStatsCollector</tt> calculates statistics for the local stream.\n *\n * @param stream the local stream\n * @param interval stats refresh interval given in ms.\n * @param callback function that receives the audio levels.\n * @constructor\n */\nexport default function LocalStatsCollector(stream, interval, callback) {\n    this.stream = stream;\n    this.intervalId = null;\n    this.intervalMilis = interval;\n    this.audioLevel = 0;\n    this.callback = callback;\n}\n\n/**\n * Starts the collecting the statistics.\n */\nLocalStatsCollector.prototype.start = function() {\n    if (!LocalStatsCollector.isLocalStatsSupported()) {\n        return;\n    }\n    context.resume();\n    const analyser = context.createAnalyser();\n\n    analyser.smoothingTimeConstant = WEBAUDIO_ANALYZER_SMOOTING_TIME;\n    analyser.fftSize = WEBAUDIO_ANALYZER_FFT_SIZE;\n\n    const source = context.createMediaStreamSource(this.stream);\n\n    source.connect(analyser);\n\n    this.intervalId = setInterval(\n        () => {\n            const array = new Uint8Array(analyser.frequencyBinCount);\n\n            analyser.getByteTimeDomainData(array);\n            const audioLevel = timeDomainDataToAudioLevel(array);\n\n            // Set the audio levels always as NoAudioSignalDetection now\n            // uses audio levels from LocalStatsCollector and waits for\n            // atleast 4 secs for a no audio signal before displaying the\n            // notification on the UI.\n            this.audioLevel = animateLevel(audioLevel, this.audioLevel);\n            this.callback(this.audioLevel);\n        },\n        this.intervalMilis\n    );\n};\n\n/**\n * Stops collecting the statistics.\n */\nLocalStatsCollector.prototype.stop = function() {\n    if (this.intervalId) {\n        clearInterval(this.intervalId);\n        this.intervalId = null;\n    }\n};\n\n/**\n * Checks if the environment has the necessary conditions to support\n * collecting stats from local streams.\n *\n * @returns {boolean}\n */\nLocalStatsCollector.isLocalStatsSupported = function() {\n    return Boolean(context);\n};\n","\n/**\n * The method will increase the given number by 1. If the given counter is equal\n * or greater to {@link Number.MAX_SAFE_INTEGER} then it will be rolled back to\n * 1.\n * @param {number} number - An integer counter value to be incremented.\n * @return {number} the next counter value increased by 1 (see the description\n * above for exception).\n */\nexport function safeCounterIncrement(number) {\n    let nextValue = number;\n\n    if (number >= Number.MAX_SAFE_INTEGER) {\n        nextValue = 0;\n    }\n\n    return nextValue + 1;\n}\n\n/**\n * Calculates the average value of am Array of numbers.\n *\n * @param {Float32Array} valueArray - Array of numbers.\n * @returns {number} - Number array average.\n */\nexport function calculateAverage(valueArray) {\n    return valueArray.length > 0 ? valueArray.reduce((a, b) => a + b) / valueArray.length : 0;\n}\n\n/**\n * Calculates a unique hash for a given string similar to Java's\n * implementation of String.hashCode()\n *\n * @param {String} string - String whose hash has to be calculated.\n * @returns {number} - Unique hash code calculated.\n */\nexport function hashString(string) {\n    let hash = 0;\n\n    for (let i = 0; i < string.length; i++) {\n        hash += Math.pow(string.charCodeAt(i) * 31, string.length - i);\n\n        /* eslint-disable no-bitwise */\n        hash = hash & hash; // Convert to 32bit integer\n    }\n\n    return Math.abs(hash);\n}\n\n/**\n * Returns only the positive values from an array of numbers.\n *\n * @param {Float32Array} valueArray - Array of vad scores.\n * @returns {Array} - Array of positive numbers.\n */\nexport function filterPositiveValues(valueArray) {\n    return valueArray.filter(value => value >= 0);\n}\n\n/**\n * This class calculates a simple running average that continually changes\n * as more data points are collected and added.\n */\nexport class RunningAverage {\n    /**\n     * Creates an instance of the running average calculator.\n     */\n    constructor() {\n        this.average = 0;\n        this.n = 0;\n    }\n\n    /**\n     * Adds a new data point to the existing set of values and recomputes\n     * the running average.\n     * @param {number} value\n     * @returns {void}\n     */\n    addNext(value) {\n        if (typeof value !== 'number') {\n            return;\n        }\n        this.n += 1;\n        this.average = this.average + ((value - this.average) / this.n);\n    }\n\n    /**\n     * Obtains the average value for the current subset of values.\n     * @returns {number} - computed average.\n     */\n    getAverage() {\n        return this.average;\n    }\n}\n","\nimport { getLogger } from '@jitsi/logger';\n\nimport * as StatisticsEvents from '../../service/statistics/Events';\nimport { RunningAverage } from '../util/MathUtil';\n\nconst logger = getLogger(__filename);\nconst MILLI_SECONDS = 1000;\nconst SECONDS = 60;\n\n/**\n * This class creates an observer that monitors browser's performance measurement events\n * as they are recorded in the browser's performance timeline and computes an average and\n * a maximum value for the long task events. Tasks are classified as long tasks if they take\n * longer than 50ms to execute on the main thread.\n */\nexport class PerformanceObserverStats {\n    /**\n     * Creates a new instance of Performance observer statistics.\n     *\n     * @param {*} emitter Event emitter for emitting stats periodically\n     * @param {*} statsInterval interval for calculating the stats\n     */\n    constructor(emitter, statsInterval) {\n        this.eventEmitter = emitter;\n        this.longTasks = 0;\n        this.maxDuration = 0;\n        this.performanceStatsInterval = statsInterval;\n        this.stats = new RunningAverage();\n    }\n\n    /**\n     * Obtains the average rate of long tasks observed per min and the\n     * duration of the longest task recorded by the observer.\n     * @returns {Object}\n     */\n    getLongTasksStats() {\n        return {\n            avgRatePerMinute: (this.stats.getAverage() * SECONDS).toFixed(2), // calc rate per min\n            maxDurationMs: this.maxDuration\n        };\n    }\n\n    /**\n     * Starts the performance observer by registering the callback function\n     * that calculates the performance statistics periodically.\n     * @returns {void}\n     */\n    startObserver() {\n        // Create a handler for when the long task event is fired.\n        this.longTaskEventHandler = list => {\n            const entries = list.getEntries();\n\n            for (const task of entries) {\n                this.longTasks++;\n                this.maxDuration = Math.max(this.maxDuration, task.duration).toFixed(3);\n            }\n        };\n\n        // Create an observer for monitoring long tasks.\n        logger.info('Creating a Performance Observer for monitoring Long Tasks');\n        this.observer = new PerformanceObserver(this.longTaskEventHandler);\n        this.observer.observe({ type: 'longtask',\n            buffered: true });\n        const startTime = Date.now();\n\n        // Calculate the average # of events/sec and emit a stats event.\n        this.longTasksIntervalId = setInterval(() => {\n            const now = Date.now();\n            const interval = this._lastTimeStamp\n                ? (now - this._lastTimeStamp) / MILLI_SECONDS\n                : (now - startTime) / MILLI_SECONDS;\n            const rate = this.longTasks / interval;\n\n            this.stats.addNext(rate);\n            this.eventEmitter.emit(\n                StatisticsEvents.LONG_TASKS_STATS, this.getLongTasksStats());\n\n            // Reset the counter and start counting events again.\n            this.longTasks = 0;\n            this._lastTimeStamp = Date.now();\n        }, this.performanceStatsInterval);\n    }\n\n    /**\n     * Stops the performance observer.\n     * @returns {void}\n     */\n    stopObserver() {\n        this.observer && this.observer.disconnect();\n        this.longTaskEventHandler = null;\n        if (this.longTasksIntervalId) {\n            clearInterval(this.longTasksIntervalId);\n            this.longTasksIntervalId = null;\n        }\n    }\n}\n","export enum MediaType {\n    /**\n     * The audio type.\n     */\n    AUDIO = 'audio',\n\n    /**\n     * The presenter type.\n     */\n    PRESENTER = 'presenter',\n\n    /**\n     * The video type.\n     */\n    VIDEO = 'video'\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport { MediaType } from '../../service/RTC/MediaType';\nimport * as StatisticsEvents from '../../service/statistics/Events';\nimport browser from '../browser';\n\nconst GlobalOnErrorHandler = require('../util/GlobalOnErrorHandler');\n\nconst logger = getLogger(__filename);\n\n/**\n * Calculates packet lost percent using the number of lost packets and the\n * number of all packet.\n * @param lostPackets the number of lost packets\n * @param totalPackets the number of all packets.\n * @returns {number} packet loss percent\n */\nfunction calculatePacketLoss(lostPackets, totalPackets) {\n    if (!totalPackets || totalPackets <= 0\n            || !lostPackets || lostPackets <= 0) {\n        return 0;\n    }\n\n    return Math.round((lostPackets / totalPackets) * 100);\n}\n\n/**\n * Holds \"statistics\" for a single SSRC.\n * @constructor\n */\nfunction SsrcStats() {\n    this.loss = {};\n    this.bitrate = {\n        download: 0,\n        upload: 0\n    };\n    this.resolution = {};\n    this.framerate = 0;\n    this.codec = '';\n}\n\n/**\n * Sets the \"loss\" object.\n * @param loss the value to set.\n */\nSsrcStats.prototype.setLoss = function(loss) {\n    this.loss = loss || {};\n};\n\n/**\n * Sets resolution that belong to the ssrc represented by this instance.\n * @param resolution new resolution value to be set.\n */\nSsrcStats.prototype.setResolution = function(resolution) {\n    this.resolution = resolution || {};\n};\n\n/**\n * Adds the \"download\" and \"upload\" fields from the \"bitrate\" parameter to\n * the respective fields of the \"bitrate\" field of this object.\n * @param bitrate an object holding the values to add.\n */\nSsrcStats.prototype.addBitrate = function(bitrate) {\n    this.bitrate.download += bitrate.download;\n    this.bitrate.upload += bitrate.upload;\n};\n\n/**\n * Resets the bit rate for given <tt>ssrc</tt> that belong to the peer\n * represented by this instance.\n */\nSsrcStats.prototype.resetBitrate = function() {\n    this.bitrate.download = 0;\n    this.bitrate.upload = 0;\n};\n\n/**\n * Sets the \"framerate\".\n * @param framerate the value to set.\n */\nSsrcStats.prototype.setFramerate = function(framerate) {\n    this.framerate = framerate || 0;\n};\n\nSsrcStats.prototype.setCodec = function(codec) {\n    this.codec = codec || '';\n};\n\n/**\n *\n */\nfunction ConferenceStats() {\n\n    /**\n     * The bandwidth\n     * @type {{}}\n     */\n    this.bandwidth = {};\n\n    /**\n     * The bit rate\n     * @type {{}}\n     */\n    this.bitrate = {};\n\n    /**\n     * The packet loss rate\n     * @type {{}}\n     */\n    this.packetLoss = null;\n\n    /**\n     * Array with the transport information.\n     * @type {Array}\n     */\n    this.transport = [];\n}\n\n/* eslint-disable max-params */\n\n/**\n * <tt>StatsCollector</tt> registers for stats updates of given\n * <tt>peerconnection</tt> in given <tt>interval</tt>. On each update particular\n * stats are extracted and put in {@link SsrcStats} objects. Once the processing\n * is done <tt>audioLevelsUpdateCallback</tt> is called with <tt>this</tt>\n * instance as an event source.\n *\n * @param peerconnection WebRTC PeerConnection object.\n * @param audioLevelsInterval\n * @param statsInterval stats refresh interval given in ms.\n * @param eventEmitter\n * @constructor\n */\nexport default function StatsCollector(peerconnection, audioLevelsInterval, statsInterval, eventEmitter) {\n    this.peerconnection = peerconnection;\n    this.baselineAudioLevelsReport = null;\n    this.currentAudioLevelsReport = null;\n    this.currentStatsReport = null;\n    this.previousStatsReport = null;\n    this.audioLevelReportHistory = {};\n    this.audioLevelsIntervalId = null;\n    this.eventEmitter = eventEmitter;\n    this.conferenceStats = new ConferenceStats();\n\n    // Updates stats interval\n    this.audioLevelsIntervalMilis = audioLevelsInterval;\n\n    this.speakerList = [];\n    this.statsIntervalId = null;\n    this.statsIntervalMilis = statsInterval;\n\n    /**\n     * Maps SSRC numbers to {@link SsrcStats}.\n     * @type {Map<number,SsrcStats}\n     */\n    this.ssrc2stats = new Map();\n}\n\n/**\n * Set the list of the remote speakers for which audio levels are to be calculated.\n *\n * @param {Array<string>} speakerList - Endpoint ids.\n * @returns {void}\n */\nStatsCollector.prototype.setSpeakerList = function(speakerList) {\n    this.speakerList = speakerList;\n};\n\n/**\n * Stops stats updates.\n */\nStatsCollector.prototype.stop = function() {\n    if (this.audioLevelsIntervalId) {\n        clearInterval(this.audioLevelsIntervalId);\n        this.audioLevelsIntervalId = null;\n    }\n\n    if (this.statsIntervalId) {\n        clearInterval(this.statsIntervalId);\n        this.statsIntervalId = null;\n    }\n};\n\n/**\n * Callback passed to <tt>getStats</tt> method.\n * @param error an error that occurred on <tt>getStats</tt> call.\n */\nStatsCollector.prototype.errorCallback = function(error) {\n    GlobalOnErrorHandler.callErrorHandler(error);\n    logger.error('Get stats error', error);\n    this.stop();\n};\n\n/**\n * Starts stats updates.\n */\nStatsCollector.prototype.start = function(startAudioLevelStats) {\n    if (startAudioLevelStats) {\n        if (browser.supportsReceiverStats()) {\n            logger.info('Using RTCRtpSynchronizationSource for remote audio levels');\n        }\n        this.audioLevelsIntervalId = setInterval(\n            () => {\n                if (browser.supportsReceiverStats()) {\n                    const audioLevels = this.peerconnection.getAudioLevels(this.speakerList);\n\n                    for (const ssrc in audioLevels) {\n                        if (audioLevels.hasOwnProperty(ssrc)) {\n                            // Use a scaling factor of 2.5 to report the same\n                            // audio levels that getStats reports.\n                            const audioLevel = audioLevels[ssrc] * 2.5;\n\n                            this.eventEmitter.emit(\n                                StatisticsEvents.AUDIO_LEVEL,\n                                this.peerconnection,\n                                Number.parseInt(ssrc, 10),\n                                audioLevel,\n                                false /* isLocal */);\n                        }\n                    }\n                } else {\n                    // Interval updates\n                    this.peerconnection.getStats()\n                        .then(report => {\n                            this.currentAudioLevelsReport = typeof report?.result === 'function'\n                                ? report.result()\n                                : report;\n                            this.processAudioLevelReport();\n                            this.baselineAudioLevelsReport = this.currentAudioLevelsReport;\n                        })\n                        .catch(error => this.errorCallback(error));\n                }\n            },\n            this.audioLevelsIntervalMilis\n        );\n    }\n\n    const processStats = () => {\n        // Interval updates\n        this.peerconnection.getStats()\n            .then(report => {\n                this.currentStatsReport = typeof report?.result === 'function'\n                    ? report.result()\n                    : report;\n\n                try {\n                    this.processStatsReport();\n                } catch (error) {\n                    GlobalOnErrorHandler.callErrorHandler(error);\n                    logger.error('Processing of RTP stats failed:', error);\n                }\n                this.previousStatsReport = this.currentStatsReport;\n            })\n            .catch(error => this.errorCallback(error));\n    };\n\n    processStats();\n    this.statsIntervalId = setInterval(processStats, this.statsIntervalMilis);\n};\n\n/**\n *\n */\nStatsCollector.prototype._processAndEmitReport = function() {\n    // process stats\n    const totalPackets = {\n        download: 0,\n        upload: 0\n    };\n    const lostPackets = {\n        download: 0,\n        upload: 0\n    };\n    let bitrateDownload = 0;\n    let bitrateUpload = 0;\n    const resolutions = {};\n    const framerates = {};\n    const codecs = {};\n    let audioBitrateDownload = 0;\n    let audioBitrateUpload = 0;\n    let audioCodec;\n    let videoBitrateDownload = 0;\n    let videoBitrateUpload = 0;\n    let videoCodec;\n\n    for (const [ ssrc, ssrcStats ] of this.ssrc2stats) {\n        // process packet loss stats\n        const loss = ssrcStats.loss;\n        const type = loss.isDownloadStream ? 'download' : 'upload';\n\n        totalPackets[type] += loss.packetsTotal;\n        lostPackets[type] += loss.packetsLost;\n\n        // process bitrate stats\n        bitrateDownload += ssrcStats.bitrate.download;\n        bitrateUpload += ssrcStats.bitrate.upload;\n\n        // collect resolutions and framerates\n        const track = this.peerconnection.getTrackBySSRC(ssrc);\n\n        if (track) {\n            if (track.isAudioTrack()) {\n                audioBitrateDownload += ssrcStats.bitrate.download;\n                audioBitrateUpload += ssrcStats.bitrate.upload;\n                audioCodec = ssrcStats.codec;\n            } else {\n                videoBitrateDownload += ssrcStats.bitrate.download;\n                videoBitrateUpload += ssrcStats.bitrate.upload;\n                videoCodec = ssrcStats.codec;\n            }\n\n            const participantId = track.getParticipantId();\n\n            if (participantId) {\n                const resolution = ssrcStats.resolution;\n\n                if (resolution.width\n                        && resolution.height\n                        && resolution.width !== -1\n                        && resolution.height !== -1) {\n                    const userResolutions = resolutions[participantId] || {};\n\n                    userResolutions[ssrc] = resolution;\n                    resolutions[participantId] = userResolutions;\n                }\n                if (ssrcStats.framerate !== 0) {\n                    const userFramerates = framerates[participantId] || {};\n\n                    userFramerates[ssrc] = ssrcStats.framerate;\n                    framerates[participantId] = userFramerates;\n                }\n                if (audioCodec && videoCodec) {\n                    const codecDesc = {\n                        'audio': audioCodec,\n                        'video': videoCodec\n                    };\n\n                    const userCodecs = codecs[participantId] || {};\n\n                    userCodecs[ssrc] = codecDesc;\n                    codecs[participantId] = userCodecs;\n                }\n            } else {\n                logger.error(`No participant ID returned by ${track}`);\n            }\n        }\n\n        ssrcStats.resetBitrate();\n    }\n\n    this.conferenceStats.bitrate = {\n        'upload': bitrateUpload,\n        'download': bitrateDownload\n    };\n\n    this.conferenceStats.bitrate.audio = {\n        'upload': audioBitrateUpload,\n        'download': audioBitrateDownload\n    };\n\n    this.conferenceStats.bitrate.video = {\n        'upload': videoBitrateUpload,\n        'download': videoBitrateDownload\n    };\n\n    this.conferenceStats.packetLoss = {\n        total:\n            calculatePacketLoss(\n                lostPackets.download + lostPackets.upload,\n                totalPackets.download + totalPackets.upload),\n        download:\n            calculatePacketLoss(lostPackets.download, totalPackets.download),\n        upload:\n            calculatePacketLoss(lostPackets.upload, totalPackets.upload)\n    };\n\n    const avgAudioLevels = {};\n    let localAvgAudioLevels;\n\n    Object.keys(this.audioLevelReportHistory).forEach(ssrc => {\n        const { data, isLocal } = this.audioLevelReportHistory[ssrc];\n        const avgAudioLevel = data.reduce((sum, currentValue) => sum + currentValue) / data.length;\n\n        if (isLocal) {\n            localAvgAudioLevels = avgAudioLevel;\n        } else {\n            const track = this.peerconnection.getTrackBySSRC(Number(ssrc));\n\n            if (track) {\n                const participantId = track.getParticipantId();\n\n                if (participantId) {\n                    avgAudioLevels[participantId] = avgAudioLevel;\n                }\n            }\n        }\n    });\n    this.audioLevelReportHistory = {};\n\n    this.eventEmitter.emit(\n        StatisticsEvents.CONNECTION_STATS,\n        this.peerconnection,\n        {\n            'bandwidth': this.conferenceStats.bandwidth,\n            'bitrate': this.conferenceStats.bitrate,\n            'packetLoss': this.conferenceStats.packetLoss,\n            'resolution': resolutions,\n            'framerate': framerates,\n            'codec': codecs,\n            'transport': this.conferenceStats.transport,\n            localAvgAudioLevels,\n            avgAudioLevels\n        });\n    this.conferenceStats.transport = [];\n};\n\n/**\n * Converts the value to a non-negative number.\n * If the value is either invalid or negative then 0 will be returned.\n * @param {*} v\n * @return {number}\n * @private\n */\nStatsCollector.prototype.getNonNegativeValue = function(v) {\n    let value = v;\n\n    if (typeof value !== 'number') {\n        value = Number(value);\n    }\n\n    if (isNaN(value)) {\n        return 0;\n    }\n\n    return Math.max(0, value);\n};\n\n/**\n * Calculates bitrate between before and now using a supplied field name and its\n * value in the stats.\n * @param {RTCInboundRtpStreamStats|RTCSentRtpStreamStats} now the current stats\n * @param {RTCInboundRtpStreamStats|RTCSentRtpStreamStats} before the\n * previous stats.\n * @param fieldName the field to use for calculations.\n * @return {number} the calculated bitrate between now and before.\n * @private\n */\nStatsCollector.prototype._calculateBitrate = function(now, before, fieldName) {\n    const bytesNow = this.getNonNegativeValue(now[fieldName]);\n    const bytesBefore = this.getNonNegativeValue(before[fieldName]);\n    const bytesProcessed = Math.max(0, bytesNow - bytesBefore);\n\n    const timeMs = now.timestamp - before.timestamp;\n    let bitrateKbps = 0;\n\n    if (timeMs > 0) {\n        // TODO is there any reason to round here?\n        bitrateKbps = Math.round((bytesProcessed * 8) / timeMs);\n    }\n\n    return bitrateKbps;\n};\n\n/**\n * Stats processing for spec-compliant RTCPeerConnection#getStats.\n */\nStatsCollector.prototype.processStatsReport = function() {\n    if (!this.previousStatsReport) {\n        return;\n    }\n    const byteSentStats = {};\n\n    this.currentStatsReport.forEach(now => {\n        // RTCIceCandidatePairStats - https://w3c.github.io/webrtc-stats/#candidatepair-dict*\n        if (now.type === 'candidate-pair' && now.nominated && now.state === 'succeeded') {\n            const availableIncomingBitrate = now.availableIncomingBitrate;\n            const availableOutgoingBitrate = now.availableOutgoingBitrate;\n\n            if (availableIncomingBitrate || availableOutgoingBitrate) {\n                this.conferenceStats.bandwidth = {\n                    'download': Math.round(availableIncomingBitrate / 1000),\n                    'upload': Math.round(availableOutgoingBitrate / 1000)\n                };\n            }\n\n            const remoteUsedCandidate = this.currentStatsReport.get(now.remoteCandidateId);\n            const localUsedCandidate = this.currentStatsReport.get(now.localCandidateId);\n\n            // RTCIceCandidateStats\n            // https://w3c.github.io/webrtc-stats/#icecandidate-dict*\n            if (remoteUsedCandidate && localUsedCandidate) {\n                const remoteIpAddress = browser.isChromiumBased()\n                    ? remoteUsedCandidate.ip\n                    : remoteUsedCandidate.address;\n                const remotePort = remoteUsedCandidate.port;\n                const ip = `${remoteIpAddress}:${remotePort}`;\n\n                const localIpAddress = browser.isChromiumBased()\n                    ? localUsedCandidate.ip\n                    : localUsedCandidate.address;\n                const localPort = localUsedCandidate.port;\n                const localip = `${localIpAddress}:${localPort}`;\n                const type = remoteUsedCandidate.protocol;\n\n                // Save the address unless it has been saved already.\n                const conferenceStatsTransport = this.conferenceStats.transport;\n\n                if (!conferenceStatsTransport.some(t =>\n                    t.ip === ip\n                    && t.type === type\n                    && t.localip === localip)) {\n                    conferenceStatsTransport.push({\n                        ip,\n                        type,\n                        localip,\n                        p2p: this.peerconnection.isP2P,\n                        localCandidateType: localUsedCandidate.candidateType,\n                        remoteCandidateType: remoteUsedCandidate.candidateType,\n                        networkType: localUsedCandidate.networkType,\n                        rtt: now.currentRoundTripTime * 1000\n                    });\n                }\n            }\n\n        // RTCReceivedRtpStreamStats\n        // https://w3c.github.io/webrtc-stats/#receivedrtpstats-dict*\n        // RTCSentRtpStreamStats\n        // https://w3c.github.io/webrtc-stats/#sentrtpstats-dict*\n        } else if (now.type === 'inbound-rtp' || now.type === 'outbound-rtp') {\n            const before = this.previousStatsReport.get(now.id);\n            const ssrc = this.getNonNegativeValue(now.ssrc);\n\n            if (!before || !ssrc) {\n                return;\n            }\n\n            let ssrcStats = this.ssrc2stats.get(ssrc);\n\n            if (!ssrcStats) {\n                ssrcStats = new SsrcStats();\n                this.ssrc2stats.set(ssrc, ssrcStats);\n            }\n\n            let isDownloadStream = true;\n            let key = 'packetsReceived';\n\n            if (now.type === 'outbound-rtp') {\n                isDownloadStream = false;\n                key = 'packetsSent';\n            }\n\n            let packetsNow = now[key];\n\n            if (!packetsNow || packetsNow < 0) {\n                packetsNow = 0;\n            }\n\n            const packetsBefore = this.getNonNegativeValue(before[key]);\n            const packetsDiff = Math.max(0, packetsNow - packetsBefore);\n\n            const packetsLostNow = this.getNonNegativeValue(now.packetsLost);\n            const packetsLostBefore = this.getNonNegativeValue(before.packetsLost);\n            const packetsLostDiff = Math.max(0, packetsLostNow - packetsLostBefore);\n\n            ssrcStats.setLoss({\n                packetsTotal: packetsDiff + packetsLostDiff,\n                packetsLost: packetsLostDiff,\n                isDownloadStream\n            });\n\n            // Get the resolution and framerate for only remote video sources here. For the local video sources,\n            // 'track' stats will be used since they have the updated resolution based on the simulcast streams\n            // currently being sent. Promise based getStats reports three 'outbound-rtp' streams and there will be\n            // more calculations needed to determine what is the highest resolution stream sent by the client if the\n            // 'outbound-rtp' stats are used.\n            if (now.type === 'inbound-rtp') {\n                const resolution = {\n                    height: now.frameHeight,\n                    width: now.frameWidth\n                };\n                const frameRate = now.framesPerSecond;\n\n                if (resolution.height && resolution.width) {\n                    ssrcStats.setResolution(resolution);\n                }\n                ssrcStats.setFramerate(Math.round(frameRate || 0));\n\n                ssrcStats.addBitrate({\n                    'download': this._calculateBitrate(now, before, 'bytesReceived'),\n                    'upload': 0\n                });\n            } else {\n                byteSentStats[ssrc] = this.getNonNegativeValue(now.bytesSent);\n                ssrcStats.addBitrate({\n                    'download': 0,\n                    'upload': this._calculateBitrate(now, before, 'bytesSent')\n                });\n            }\n\n            const codec = this.currentStatsReport.get(now.codecId);\n\n            if (codec) {\n                /**\n                 * The mime type has the following form: video/VP8 or audio/ISAC,\n                 * so we what to keep just the type after the '/', audio and video\n                 * keys will be added on the processing side.\n                 */\n                const codecShortType = codec.mimeType.split('/')[1];\n\n                codecShortType && ssrcStats.setCodec(codecShortType);\n            }\n\n        // Use track stats for resolution and framerate of the local video source.\n        // RTCVideoHandlerStats - https://w3c.github.io/webrtc-stats/#vststats-dict*\n        // RTCMediaHandlerStats - https://w3c.github.io/webrtc-stats/#mststats-dict*\n        } else if (now.type === 'track' && now.kind === MediaType.VIDEO && !now.remoteSource) {\n            const resolution = {\n                height: now.frameHeight,\n                width: now.frameWidth\n            };\n            const localVideoTracks = this.peerconnection.getLocalTracks(MediaType.VIDEO);\n\n            if (!localVideoTracks?.length) {\n                return;\n            }\n\n            const ssrc = this.peerconnection.getLocalSSRC(localVideoTracks[0]);\n\n            if (!ssrc) {\n                return;\n            }\n            let ssrcStats = this.ssrc2stats.get(ssrc);\n\n            if (!ssrcStats) {\n                ssrcStats = new SsrcStats();\n                this.ssrc2stats.set(ssrc, ssrcStats);\n            }\n            if (resolution.height && resolution.width) {\n                ssrcStats.setResolution(resolution);\n            }\n\n            // Calculate the frame rate. 'framesSent' is the total aggregate value for all the simulcast streams.\n            // Therefore, it needs to be divided by the total number of active simulcast streams.\n            let frameRate = now.framesPerSecond;\n\n            if (!frameRate) {\n                const before = this.previousStatsReport.get(now.id);\n\n                if (before) {\n                    const timeMs = now.timestamp - before.timestamp;\n\n                    if (timeMs > 0 && now.framesSent) {\n                        const numberOfFramesSinceBefore = now.framesSent - before.framesSent;\n\n                        frameRate = (numberOfFramesSinceBefore / timeMs) * 1000;\n                    }\n                }\n\n                if (!frameRate) {\n                    return;\n                }\n            }\n\n            // Get the number of simulcast streams currently enabled from TPC.\n            const numberOfActiveStreams = this.peerconnection.getActiveSimulcastStreams();\n\n            // Reset frame rate to 0 when video is suspended as a result of endpoint falling out of last-n.\n            frameRate = numberOfActiveStreams ? Math.round(frameRate / numberOfActiveStreams) : 0;\n            ssrcStats.setFramerate(frameRate);\n        }\n    });\n\n    this.eventEmitter.emit(StatisticsEvents.BYTE_SENT_STATS, this.peerconnection, byteSentStats);\n    this._processAndEmitReport();\n};\n\n/**\n * Stats processing logic.\n */\nStatsCollector.prototype.processAudioLevelReport = function() {\n    if (!this.baselineAudioLevelsReport) {\n        return;\n    }\n\n    this.currentAudioLevelsReport.forEach(now => {\n        if (now.type !== 'track') {\n            return;\n        }\n\n        // Audio level\n        const audioLevel = now.audioLevel;\n\n        if (!audioLevel) {\n            return;\n        }\n\n        const trackIdentifier = now.trackIdentifier;\n        const ssrc = this.peerconnection.getSsrcByTrackId(trackIdentifier);\n\n        if (ssrc) {\n            const isLocal\n                = ssrc === this.peerconnection.getLocalSSRC(\n                this.peerconnection.getLocalTracks(MediaType.AUDIO));\n\n            this.eventEmitter.emit(\n                StatisticsEvents.AUDIO_LEVEL,\n                this.peerconnection,\n                ssrc,\n                audioLevel,\n                isLocal);\n        }\n    });\n};\n\n","import EventEmitter from 'events';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport JitsiTrackError from '../../JitsiTrackError';\nimport { FEEDBACK } from '../../service/statistics/AnalyticsEvents';\nimport * as StatisticsEvents from '../../service/statistics/Events';\nimport browser from '../browser';\nimport ScriptUtil from '../util/ScriptUtil';\n\nimport analytics from './AnalyticsAdapter';\nimport CallStats from './CallStats';\nimport LocalStats from './LocalStatsCollector';\nimport { PerformanceObserverStats } from './PerformanceObserverStats';\nimport RTPStats from './RTPStatsCollector';\nimport { CALLSTATS_SCRIPT_URL } from './constants';\n\nconst logger = require('@jitsi/logger').getLogger(__filename);\n\n/**\n * Stores all active {@link Statistics} instances.\n * @type {Set<Statistics>}\n */\nlet _instances;\n\n/**\n * True if callstats API is loaded\n */\nlet isCallstatsLoaded = false;\n\n/**\n * Since callstats.io is a third party, we cannot guarantee the quality of their\n * service. More specifically, their server may take noticeably long time to\n * respond. Consequently, it is in our best interest (in the sense that the\n * intergration of callstats.io is pretty important to us but not enough to\n * allow it to prevent people from joining a conference) to (1) start\n * downloading their API as soon as possible and (2) do the downloading\n * asynchronously.\n *\n * @param {StatisticsOptions} options - Options to use for downloading and\n * initializing callstats backend.\n */\nfunction loadCallStatsAPI(options) {\n    if (!isCallstatsLoaded) {\n        ScriptUtil.loadScript(\n            options.customScriptUrl || CALLSTATS_SCRIPT_URL,\n            /* async */ true,\n            /* prepend */ true,\n            /* relativeURL */ undefined,\n            /* loadCallback */ () => _initCallStatsBackend(options)\n        );\n        isCallstatsLoaded = true;\n    }\n}\n\n/**\n * Initializes Callstats backend.\n *\n * @param {StatisticsOptions} options - The options to use for initializing\n * callstats backend.\n * @private\n */\nfunction _initCallStatsBackend(options) {\n    if (CallStats.isBackendInitialized()) {\n        return;\n    }\n\n    if (!CallStats.initBackend({\n        callStatsID: options.callStatsID,\n        callStatsSecret: options.callStatsSecret,\n        userName: options.userName,\n        aliasName: options.aliasName,\n        applicationName: options.applicationName,\n        getWiFiStatsMethod: options.getWiFiStatsMethod,\n        confID: options.confID,\n        siteID: options.siteID,\n        configParams: options.configParams\n    })) {\n        logger.error('CallStats Backend initialization failed bad');\n    }\n}\n\n/**\n * callstats strips any additional fields from Error except for \"name\", \"stack\",\n * \"message\" and \"constraintName\". So we need to bundle additional information\n * from JitsiTrackError into error passed to callstats to preserve valuable\n * information about error.\n * @param {JitsiTrackError} error\n */\nfunction formatJitsiTrackErrorForCallStats(error) {\n    const err = new Error();\n\n    // Just copy original stack from error\n    err.stack = error.stack;\n\n    // Combine name from error's name plus (possibly) name of original GUM error\n    err.name = (error.name || 'Unknown error') + (error.gum && error.gum.error\n        && error.gum.error.name ? ` - ${error.gum.error.name}` : '');\n\n    // Put all constraints into this field. For constraint failed errors we will\n    // still know which exactly constraint failed as it will be a part of\n    // message.\n    err.constraintName = error.gum && error.gum.constraints\n        ? JSON.stringify(error.gum.constraints) : '';\n\n    // Just copy error's message.\n    err.message = error.message;\n\n    return err;\n}\n\n/**\n * Init statistic options\n * @param options\n */\nStatistics.init = function(options) {\n    Statistics.audioLevelsEnabled = !options.disableAudioLevels;\n    if (typeof options.pcStatsInterval === 'number') {\n        Statistics.pcStatsInterval = options.pcStatsInterval;\n    }\n\n    if (typeof options.audioLevelsInterval === 'number') {\n        Statistics.audioLevelsInterval = options.audioLevelsInterval;\n    }\n\n    if (typeof options.longTasksStatsInterval === 'number') {\n        Statistics.longTasksStatsInterval = options.longTasksStatsInterval;\n    }\n\n    Statistics.disableThirdPartyRequests = options.disableThirdPartyRequests;\n};\n\n/**\n * The options to configure Statistics.\n * @typedef {Object} StatisticsOptions\n * @property {string} applicationName - The application name to pass to\n * callstats.\n * @property {string} aliasName - The alias name to use when initializing callstats.\n * @property {string} userName - The user name to use when initializing callstats.\n * @property {string} confID - The callstats conference ID to use.\n * @property {string} callStatsID - Callstats credentials - the id.\n * @property {string} callStatsSecret - Callstats credentials - the secret.\n * @property {string} customScriptUrl - A custom lib url to use when downloading\n * callstats library.\n * @property {string} roomName - The room name we are currently in.\n * @property {string} configParams - The set of parameters\n * to enable/disable certain features in the library. See CallStats docs for more info.\n */\n/**\n *\n * @param xmpp\n * @param {StatisticsOptions} options - The options to use creating the\n * Statistics.\n */\nexport default function Statistics(xmpp, options) {\n    /**\n     * {@link RTPStats} mapped by {@link TraceablePeerConnection.id} which\n     * collect RTP statistics for each peerconnection.\n     * @type {Map<string, RTPStats}\n     */\n    this.rtpStatsMap = new Map();\n    this.eventEmitter = new EventEmitter();\n    this.xmpp = xmpp;\n    this.options = options || {};\n\n    this.callStatsIntegrationEnabled\n        = this.options.callStatsID && this.options.callStatsSecret && this.options.enableCallStats\n\n            // Even though AppID and AppSecret may be specified, the integration\n            // of callstats.io may be disabled because of globally-disallowed\n            // requests to any third parties.\n            && (Statistics.disableThirdPartyRequests !== true);\n    if (this.callStatsIntegrationEnabled) {\n        this.callStatsApplicationLogsDisabled\n            = this.options.callStatsApplicationLogsDisabled;\n        if (browser.isReactNative()) {\n            _initCallStatsBackend(this.options);\n        } else {\n            loadCallStatsAPI(this.options);\n        }\n\n        if (!this.options.confID) {\n            logger.warn('\"confID\" is not defined');\n        }\n    }\n\n    /**\n     * Stores {@link CallStats} instances for each\n     * {@link TraceablePeerConnection} (one {@link CallStats} instance serves\n     * one TPC). The instances are mapped by {@link TraceablePeerConnection.id}.\n     * @type {Map<number, CallStats>}\n     */\n    this.callsStatsInstances = new Map();\n\n    Statistics.instances.add(this);\n}\nStatistics.audioLevelsEnabled = false;\nStatistics.audioLevelsInterval = 200;\nStatistics.pcStatsInterval = 10000;\nStatistics.disableThirdPartyRequests = false;\nStatistics.analytics = analytics;\nStatistics.analyticsEventEmitter = new EventEmitter();\n\nObject.defineProperty(Statistics, 'instances', {\n    /**\n     * Returns the Set holding all active {@link Statistics} instances. Lazily\n     * initializes the Set to allow any Set polyfills to be applied.\n     * @type {Set<Statistics>}\n     */\n    get() {\n        if (!_instances) {\n            _instances = new Set();\n        }\n\n        return _instances;\n    }\n});\n\n/**\n * Starts collecting RTP stats for given peerconnection.\n * @param {TraceablePeerConnection} peerconnection\n */\nStatistics.prototype.startRemoteStats = function(peerconnection) {\n    this.stopRemoteStats(peerconnection);\n\n    try {\n        const rtpStats\n            = new RTPStats(\n                peerconnection,\n                Statistics.audioLevelsInterval,\n                Statistics.pcStatsInterval,\n                this.eventEmitter);\n\n        rtpStats.start(Statistics.audioLevelsEnabled);\n        this.rtpStatsMap.set(peerconnection.id, rtpStats);\n    } catch (e) {\n        logger.error(`Failed to start collecting remote statistics: ${e}`);\n    }\n};\n\nStatistics.localStats = [];\n\nStatistics.startLocalStats = function(stream, callback) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n    const localStats = new LocalStats(stream, Statistics.audioLevelsInterval,\n        callback);\n\n    this.localStats.push(localStats);\n    localStats.start();\n};\n\nStatistics.prototype.addAudioLevelListener = function(listener) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n    this.eventEmitter.on(StatisticsEvents.AUDIO_LEVEL, listener);\n};\n\nStatistics.prototype.removeAudioLevelListener = function(listener) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n    this.eventEmitter.removeListener(StatisticsEvents.AUDIO_LEVEL, listener);\n};\n\nStatistics.prototype.addBeforeDisposedListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.BEFORE_DISPOSED, listener);\n};\n\nStatistics.prototype.removeBeforeDisposedListener = function(listener) {\n    this.eventEmitter.removeListener(\n        StatisticsEvents.BEFORE_DISPOSED, listener);\n};\n\nStatistics.prototype.addConnectionStatsListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.CONNECTION_STATS, listener);\n};\n\nStatistics.prototype.removeConnectionStatsListener = function(listener) {\n    this.eventEmitter.removeListener(\n        StatisticsEvents.CONNECTION_STATS,\n        listener);\n};\n\nStatistics.prototype.addByteSentStatsListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.BYTE_SENT_STATS, listener);\n};\n\nStatistics.prototype.removeByteSentStatsListener = function(listener) {\n    this.eventEmitter.removeListener(StatisticsEvents.BYTE_SENT_STATS,\n        listener);\n};\n\n/**\n * Add a listener that would be notified on a LONG_TASKS_STATS event.\n *\n * @param {Function} listener a function that would be called when notified.\n * @returns {void}\n */\nStatistics.prototype.addLongTasksStatsListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.LONG_TASKS_STATS, listener);\n};\n\n/**\n * Creates an instance of {@link PerformanceObserverStats} and starts the\n * observer that records the stats periodically.\n *\n * @returns {void}\n */\nStatistics.prototype.attachLongTasksStats = function(conference) {\n    if (!browser.supportsPerformanceObserver()) {\n        logger.warn('Performance observer for long tasks not supported by browser!');\n\n        return;\n    }\n\n    this.performanceObserverStats = new PerformanceObserverStats(\n        this.eventEmitter,\n        Statistics.longTasksStatsInterval);\n\n    conference.on(\n        JitsiConferenceEvents.CONFERENCE_JOINED,\n        () => this.performanceObserverStats.startObserver());\n    conference.on(\n        JitsiConferenceEvents.CONFERENCE_LEFT,\n        () => this.performanceObserverStats.stopObserver());\n};\n\n/**\n * Obtains the current value of the LongTasks event statistics.\n *\n * @returns {Object|null} stats object if the observer has been\n * created, null otherwise.\n */\nStatistics.prototype.getLongTasksStats = function() {\n    return this.performanceObserverStats\n        ? this.performanceObserverStats.getLongTasksStats()\n        : null;\n};\n\n/**\n * Removes the given listener for the LONG_TASKS_STATS event.\n *\n * @param {Function} listener the listener we want to remove.\n * @returns {void}\n */\nStatistics.prototype.removeLongTasksStatsListener = function(listener) {\n    this.eventEmitter.removeListener(StatisticsEvents.LONG_TASKS_STATS, listener);\n};\n\n/**\n * Updates the list of speakers for which the audio levels are to be calculated. This is needed for the jvb pc only.\n *\n * @param {Array<string>} speakerList The list of remote endpoint ids.\n * @returns {void}\n */\nStatistics.prototype.setSpeakerList = function(speakerList) {\n    for (const rtpStats of Array.from(this.rtpStatsMap.values())) {\n        if (!rtpStats.peerconnection.isP2P) {\n            rtpStats.setSpeakerList(speakerList);\n        }\n    }\n};\n\nStatistics.prototype.dispose = function() {\n    try {\n        // NOTE Before reading this please see the comment in stopCallStats...\n        //\n        // Here we prevent from emitting the event twice in case it will be\n        // triggered from stopCallStats.\n        // If the event is triggered from here it means that the logs will not\n        // be submitted anyway (because there is no CallStats instance), but\n        // we're doing that for the sake of some kind of consistency.\n        if (!this.callsStatsInstances.size) {\n            this.eventEmitter.emit(StatisticsEvents.BEFORE_DISPOSED);\n        }\n        for (const callStats of this.callsStatsInstances.values()) {\n            this.stopCallStats(callStats.tpc);\n        }\n        for (const tpcId of this.rtpStatsMap.keys()) {\n            this._stopRemoteStats(tpcId);\n        }\n        if (this.eventEmitter) {\n            this.eventEmitter.removeAllListeners();\n        }\n    } finally {\n        Statistics.instances.delete(this);\n    }\n};\n\nStatistics.stopLocalStats = function(stream) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n\n    for (let i = 0; i < Statistics.localStats.length; i++) {\n        if (Statistics.localStats[i].stream === stream) {\n            const localStats = Statistics.localStats.splice(i, 1);\n\n            localStats[0].stop();\n            break;\n        }\n    }\n};\n\n/**\n * Stops remote RTP stats for given peerconnection ID.\n * @param {string} tpcId {@link TraceablePeerConnection.id}\n * @private\n */\nStatistics.prototype._stopRemoteStats = function(tpcId) {\n    const rtpStats = this.rtpStatsMap.get(tpcId);\n\n    if (rtpStats) {\n        rtpStats.stop();\n        this.rtpStatsMap.delete(tpcId);\n    }\n};\n\n/**\n * Stops collecting RTP stats for given peerconnection\n * @param {TraceablePeerConnection} tpc\n */\nStatistics.prototype.stopRemoteStats = function(tpc) {\n    this._stopRemoteStats(tpc.id);\n};\n\n// CALSTATS METHODS\n\n/**\n * Initializes the callstats.io API.\n * @param {TraceablePeerConnection} tpc the {@link TraceablePeerConnection}\n * instance for which CalStats will be started.\n * @param {string} remoteUserID\n */\nStatistics.prototype.startCallStats = function(tpc, remoteUserID) {\n    if (!this.callStatsIntegrationEnabled) {\n        return;\n    } else if (this.callsStatsInstances.has(tpc.id)) {\n        logger.error('CallStats instance for ${tpc} exists already');\n\n        return;\n    }\n\n    logger.info(`Starting CallStats for ${tpc}...`);\n\n    const newInstance\n        = new CallStats(\n            tpc,\n            {\n                confID: this.options.confID,\n                remoteUserID\n            });\n\n    this.callsStatsInstances.set(tpc.id, newInstance);\n};\n\n/**\n * Obtains the list of *all* {@link CallStats} instances collected from every\n * valid {@link Statistics} instance.\n * @return {Set<CallStats>}\n * @private\n */\nStatistics._getAllCallStatsInstances = function() {\n    const csInstances = new Set();\n\n    for (const statistics of Statistics.instances) {\n        for (const cs of statistics.callsStatsInstances.values()) {\n            csInstances.add(cs);\n        }\n    }\n\n    return csInstances;\n};\n\n/**\n * Removes the callstats.io instances.\n */\nStatistics.prototype.stopCallStats = function(tpc) {\n    const callStatsInstance = this.callsStatsInstances.get(tpc.id);\n\n    if (callStatsInstance) {\n        // FIXME the original purpose of adding BEFORE_DISPOSED event was to be\n        // able to submit the last log batch from jitsi-meet to CallStats. After\n        // recent changes we dispose the CallStats earlier\n        // (before Statistics.dispose), so we need to emit this event here to\n        // give this last chance for final log batch submission.\n        //\n        // Eventually there should be a separate module called \"log storage\"\n        // which should emit proper events when it's underlying\n        // CallStats instance is going away.\n        if (this.callsStatsInstances.size === 1) {\n            this.eventEmitter.emit(StatisticsEvents.BEFORE_DISPOSED);\n        }\n        this.callsStatsInstances.delete(tpc.id);\n\n        // The fabric needs to be terminated when being stopped\n        callStatsInstance.sendTerminateEvent();\n    }\n};\n\n/**\n * Returns true if the callstats integration is enabled, otherwise returns\n * false.\n *\n * @returns true if the callstats integration is enabled, otherwise returns\n * false.\n */\nStatistics.prototype.isCallstatsEnabled = function() {\n    return this.callStatsIntegrationEnabled;\n};\n\n/**\n * Logs either resume or hold event for the given peer connection.\n * @param {TraceablePeerConnection} tpc the connection for which event will be\n * reported\n * @param {boolean} isResume true for resume or false for hold\n */\nStatistics.prototype.sendConnectionResumeOrHoldEvent = function(tpc, isResume) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendResumeOrHoldEvent(isResume);\n    }\n};\n\n/**\n * Notifies CallStats and analytics (if present) for ice connection failed\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendIceConnectionFailedEvent = function(tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendIceConnectionFailedEvent();\n    }\n};\n\n/**\n * Notifies CallStats for mute events\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n * @param {boolean} muted true for muted and false for not muted\n * @param {String} type \"audio\"/\"video\"\n */\nStatistics.prototype.sendMuteEvent = function(tpc, muted, type) {\n    const instance = tpc && this.callsStatsInstances.get(tpc.id);\n\n    CallStats.sendMuteEvent(muted, type, instance);\n};\n\n/**\n * Notifies CallStats for screen sharing events\n * @param start {boolean} true for starting screen sharing and\n * false for not stopping\n * @param {string|null} ssrc - optional ssrc value, used only when\n * starting screen sharing.\n */\nStatistics.prototype.sendScreenSharingEvent\n    = function(start, ssrc) {\n        for (const cs of this.callsStatsInstances.values()) {\n            cs.sendScreenSharingEvent(start, ssrc);\n        }\n    };\n\n/**\n * Notifies the statistics module that we are now the dominant speaker of the\n * conference.\n * @param {String} roomJid - The room jid where the speaker event occurred.\n */\nStatistics.prototype.sendDominantSpeakerEvent = function(roomJid) {\n    for (const cs of this.callsStatsInstances.values()) {\n        cs.sendDominantSpeakerEvent();\n    }\n\n    // xmpp send dominant speaker event\n    this.xmpp.sendDominantSpeakerEvent(roomJid);\n};\n\n/**\n * Notifies about active device.\n * @param {{deviceList: {String:String}}} devicesData - list of devices with\n *      their data\n */\nStatistics.sendActiveDeviceListEvent = function(devicesData) {\n    const globalSet = Statistics._getAllCallStatsInstances();\n\n    if (globalSet.size) {\n        for (const cs of globalSet) {\n            CallStats.sendActiveDeviceListEvent(devicesData, cs);\n        }\n    } else {\n        CallStats.sendActiveDeviceListEvent(devicesData, null);\n    }\n};\n\n/* eslint-disable max-params */\n\n/**\n * Lets the underlying statistics module know where is given SSRC rendered by\n * providing renderer tag ID.\n * @param {TraceablePeerConnection} tpc the connection to which the stream\n * belongs to\n * @param {number} ssrc the SSRC of the stream\n * @param {boolean} isLocal\n * @param {string} userId\n * @param {string} usageLabel  meaningful usage label of this stream like\n *        'microphone', 'camera' or 'screen'.\n * @param {string} containerId the id of media 'audio' or 'video' tag which\n *        renders the stream.\n */\nStatistics.prototype.associateStreamWithVideoTag = function(\n        tpc,\n        ssrc,\n        isLocal,\n        userId,\n        usageLabel,\n        containerId) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.associateStreamWithVideoTag(\n            ssrc,\n            isLocal,\n            userId,\n            usageLabel,\n            containerId);\n    }\n};\n\n/* eslint-enable max-params */\n\n/**\n * Notifies CallStats that getUserMedia failed.\n *\n * @param {Error} e error to send\n */\nStatistics.sendGetUserMediaFailed = function(e) {\n    const error\n        = e instanceof JitsiTrackError\n            ? formatJitsiTrackErrorForCallStats(e) : e;\n    const globalSet = Statistics._getAllCallStatsInstances();\n\n    if (globalSet.size) {\n        for (const cs of globalSet) {\n            CallStats.sendGetUserMediaFailed(error, cs);\n        }\n    } else {\n        CallStats.sendGetUserMediaFailed(error, null);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to create offer.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendCreateOfferFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendCreateOfferFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to create answer.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occured.\n */\nStatistics.prototype.sendCreateAnswerFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendCreateAnswerFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to set local description.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendSetLocalDescFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendSetLocalDescFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to set remote description.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendSetRemoteDescFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendSetRemoteDescFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to add ICE candidate.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendAddIceCandidateFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendAddIceCandidateFailed(e);\n    }\n};\n\n/**\n * Adds to CallStats an application log.\n *\n * @param {String} m a log message to send or an {Error} object to be reported\n */\nStatistics.sendLog = function(m) {\n    const globalSubSet = new Set();\n\n    // FIXME we don't want to duplicate logs over P2P instance, but\n    // here we should go over instances and call this method for each\n    // unique conference ID rather than selecting the first one.\n    // We don't have such use case though, so leaving as is for now.\n    for (const stats of Statistics.instances) {\n        if (stats.callStatsApplicationLogsDisabled) {\n            return;\n        }\n\n        if (stats.callsStatsInstances.size) {\n            globalSubSet.add(stats.callsStatsInstances.values().next().value);\n        }\n    }\n\n    if (globalSubSet.size) {\n        for (const csPerStats of globalSubSet) {\n            CallStats.sendApplicationLog(m, csPerStats);\n        }\n    } else {\n        CallStats.sendApplicationLog(m, null);\n    }\n};\n\n/**\n * Sends the given feedback through CallStats.\n *\n * @param overall an integer between 1 and 5 indicating the user's rating.\n * @param comment the comment from the user.\n * @returns {Promise} Resolves when callstats feedback has been submitted\n * successfully.\n */\nStatistics.prototype.sendFeedback = function(overall, comment) {\n    // Statistics.analytics.sendEvent is currently fire and forget, without\n    // confirmation of successful send.\n    Statistics.analytics.sendEvent(\n        FEEDBACK,\n        {\n            rating: overall,\n            comment\n        });\n\n    return CallStats.sendFeedback(this.options.confID, overall, comment);\n};\n\nStatistics.LOCAL_JID = require('../../service/statistics/constants').LOCAL_JID;\n\n/**\n * Reports global error to CallStats.\n *\n * @param {Error} error\n */\nStatistics.reportGlobalError = function(error) {\n    if (error instanceof JitsiTrackError && error.gum) {\n        Statistics.sendGetUserMediaFailed(error);\n    } else {\n        Statistics.sendLog(error);\n    }\n};\n\n/**\n * Sends event to analytics and logs a message to the logger/console. Console\n * messages might also be logged to callstats automatically.\n *\n * @param {string | Object} event the event name, or an object which\n * represents the entire event.\n * @param {Object} properties properties to attach to the event (if an event\n * name as opposed to an event object is provided).\n */\nStatistics.sendAnalyticsAndLog = function(event, properties = {}) {\n    if (!event) {\n        logger.warn('No event or event name given.');\n\n        return;\n    }\n\n    let eventToLog;\n\n    // Also support an API with a single object as an event.\n    if (typeof event === 'object') {\n        eventToLog = event;\n    } else {\n        eventToLog = {\n            name: event,\n            properties\n        };\n    }\n\n    logger.log(JSON.stringify(eventToLog));\n\n    // We do this last, because it may modify the object which is passed.\n    this.analytics.sendEvent(event, properties);\n};\n\n/**\n * Sends event to analytics.\n *\n * @param {string | Object} eventName the event name, or an object which\n * represents the entire event.\n * @param {Object} properties properties to attach to the event\n */\n\nStatistics.sendAnalytics = function(eventName, properties = {}) {\n    this.analytics.sendEvent(eventName, properties);\n    Statistics.analyticsEventEmitter.emit(JitsiConferenceEvents.ANALYTICS_EVENT_RECEIVED, eventName, properties);\n};\n\n\nStatistics.prototype.addAnalyticsEventListener = function(listener) {\n    Statistics.analyticsEventEmitter.on(JitsiConferenceEvents.ANALYTICS_EVENT_RECEIVED, listener);\n};\n\n\nStatistics.prototype.removeAnalyticsEventListener = function(listener) {\n    Statistics.analyticsEventEmitter.removeListener(JitsiConferenceEvents.ANALYTICS_EVENT_RECEIVED, listener);\n};\n\n\n\n\n\n","import { getLogger } from '@jitsi/logger';\nimport { Strophe } from 'strophe.js';\n\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport { SPEAKERS_AUDIO_LEVELS } from './modules/statistics/constants';\nimport Statistics from './modules/statistics/statistics';\nimport EventEmitterForwarder from './modules/util/EventEmitterForwarder';\nimport { MediaType } from './service/RTC/MediaType';\nimport RTCEvents from './service/RTC/RTCEvents';\nimport { VideoType } from './service/RTC/VideoType';\nimport AuthenticationEvents\n    from './service/authentication/AuthenticationEvents';\nimport {\n    ACTION_JINGLE_SA_TIMEOUT,\n    createBridgeDownEvent,\n    createConnectionStageReachedEvent,\n    createFocusLeftEvent,\n    createJingleEvent,\n    createRemotelyMutedEvent\n} from './service/statistics/AnalyticsEvents';\nimport { XMPPEvents } from './service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * Setups all event listeners related to conference\n * @param conference {JitsiConference} the conference\n */\nexport default function JitsiConferenceEventManager(conference) {\n    this.conference = conference;\n    this.xmppListeners = {};\n\n    // Listeners related to the conference only\n    conference.on(JitsiConferenceEvents.TRACK_MUTE_CHANGED,\n        track => {\n            if (!track.isLocal() || !conference.statistics) {\n                return;\n            }\n            const session\n                = track.isP2P\n                    ? conference.p2pJingleSession : conference.jvbJingleSession;\n\n            // TPC will be null, before the conference starts, but the event\n            // still should be queued\n            const tpc = (session && session.peerconnection) || null;\n\n            conference.statistics.sendMuteEvent(\n                tpc,\n                track.isMuted(),\n                track.getType());\n        });\n}\n\n/**\n * Setups event listeners related to conference.chatRoom\n */\nJitsiConferenceEventManager.prototype.setupChatRoomListeners = function() {\n    const conference = this.conference;\n    const chatRoom = conference.room;\n\n    this.chatRoomForwarder = new EventEmitterForwarder(chatRoom,\n        this.conference.eventEmitter);\n\n    chatRoom.addListener(XMPPEvents.ICE_RESTARTING, jingleSession => {\n        if (!jingleSession.isP2P) {\n            // If using DataChannel as bridge channel, it must be closed\n            // before ICE restart, otherwise Chrome will not trigger \"opened\"\n            // event for the channel established with the new bridge.\n            // TODO: This may be bypassed when using a WebSocket as bridge\n            // channel.\n            conference.rtc.closeBridgeChannel();\n        }\n\n        // else: there are no DataChannels in P2P session (at least for now)\n    });\n\n    chatRoom.addListener(XMPPEvents.PARTICIPANT_FEATURES_CHANGED, (from, features) => {\n        const participant = conference.getParticipantById(Strophe.getResourceFromJid(from));\n\n        if (participant) {\n            participant.setFeatures(features);\n            conference.eventEmitter.emit(JitsiConferenceEvents.PARTCIPANT_FEATURES_CHANGED, participant);\n        }\n    });\n\n    chatRoom.addListener(\n        XMPPEvents.ICE_RESTART_SUCCESS,\n        (jingleSession, offerIq) => {\n            // The JVB data chanel needs to be reopened in case the conference\n            // has been moved to a new bridge.\n            !jingleSession.isP2P\n                && conference._setBridgeChannel(\n                    offerIq, jingleSession.peerconnection);\n        });\n\n\n    chatRoom.addListener(XMPPEvents.AUDIO_MUTED_BY_FOCUS,\n        actor => {\n            // TODO: Add a way to differentiate between commands which caused\n            // us to mute and those that did not change our state (i.e. we were\n            // already muted).\n            Statistics.sendAnalytics(createRemotelyMutedEvent(MediaType.AUDIO));\n\n            conference.mutedByFocusActor = actor;\n\n            // set isMutedByFocus when setAudioMute Promise ends\n            conference.rtc.setAudioMute(true).then(\n                () => {\n                    conference.isMutedByFocus = true;\n                    conference.mutedByFocusActor = null;\n                })\n                .catch(\n                    error => {\n                        conference.mutedByFocusActor = null;\n                        logger.warn(\n                            'Error while audio muting due to focus request', error);\n                    });\n        }\n    );\n\n    chatRoom.addListener(XMPPEvents.VIDEO_MUTED_BY_FOCUS,\n        actor => {\n            // TODO: Add a way to differentiate between commands which caused\n            // us to mute and those that did not change our state (i.e. we were\n            // already muted).\n            Statistics.sendAnalytics(createRemotelyMutedEvent(MediaType.VIDEO));\n\n            conference.mutedVideoByFocusActor = actor;\n\n            // set isVideoMutedByFocus when setVideoMute Promise ends\n            conference.rtc.setVideoMute(true).then(\n                () => {\n                    conference.isVideoMutedByFocus = true;\n                    conference.mutedVideoByFocusActor = null;\n                })\n                .catch(\n                    error => {\n                        conference.mutedVideoByFocusActor = null;\n                        logger.warn(\n                            'Error while video muting due to focus request', error);\n                    });\n        }\n    );\n\n    this.chatRoomForwarder.forward(XMPPEvents.SUBJECT_CHANGED,\n        JitsiConferenceEvents.SUBJECT_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_JOINED,\n        JitsiConferenceEvents.CONFERENCE_JOINED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_JOIN_IN_PROGRESS,\n        JitsiConferenceEvents.CONFERENCE_JOIN_IN_PROGRESS);\n\n    this.chatRoomForwarder.forward(XMPPEvents.MEETING_ID_SET,\n        JitsiConferenceEvents.CONFERENCE_UNIQUE_ID_SET);\n\n    // send some analytics events\n    chatRoom.addListener(XMPPEvents.MUC_JOINED,\n        () => {\n            this.conference._onMucJoined();\n\n            this.conference.isJvbConnectionInterrupted = false;\n\n            // TODO: Move all of the 'connectionTimes' logic to its own module.\n            Object.keys(chatRoom.connectionTimes).forEach(key => {\n                const event\n                    = createConnectionStageReachedEvent(\n                        `conference_${key}`,\n                        { value: chatRoom.connectionTimes[key] });\n\n                Statistics.sendAnalytics(event);\n            });\n\n            // TODO: Move all of the 'connectionTimes' logic to its own module.\n            Object.keys(chatRoom.xmpp.connectionTimes).forEach(key => {\n                const event\n                    = createConnectionStageReachedEvent(\n                        `xmpp_${key}`,\n                        { value: chatRoom.xmpp.connectionTimes[key] });\n\n                Statistics.sendAnalytics(event);\n            });\n        });\n\n    chatRoom.addListener(XMPPEvents.RENEGOTIATION_FAILED, (e, session) => {\n        if (!session.isP2P) {\n            conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n        }\n    });\n\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_JOIN_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONNECTION_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONNECTION_ERROR);\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.NOT_ALLOWED_ERROR);\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_MEMBERS_ONLY_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.MEMBERS_ONLY_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_MAX_USERS_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONFERENCE_MAX_USERS);\n\n    this.chatRoomForwarder.forward(XMPPEvents.PASSWORD_REQUIRED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.PASSWORD_REQUIRED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.AUTHENTICATION_REQUIRED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.AUTHENTICATION_REQUIRED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.BRIDGE_DOWN,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.VIDEOBRIDGE_NOT_AVAILABLE);\n    chatRoom.addListener(\n        XMPPEvents.BRIDGE_DOWN,\n        () => Statistics.sendAnalytics(createBridgeDownEvent()));\n\n    chatRoom.addListener(XMPPEvents.CONNECTION_RESTARTED,\n        jingleSession => {\n            conference._onConferenceRestarted(jingleSession);\n        });\n\n    this.chatRoomForwarder.forward(XMPPEvents.RESERVATION_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.RESERVATION_ERROR);\n    chatRoom.addListener(XMPPEvents.RESERVATION_ERROR,\n        () => {\n            conference.xmpp.connection.emuc.doLeave(conference.room.roomjid);\n        });\n\n    this.chatRoomForwarder.forward(XMPPEvents.GRACEFUL_SHUTDOWN,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.GRACEFUL_SHUTDOWN);\n\n    chatRoom.addListener(XMPPEvents.CONNECTION_ICE_FAILED,\n        jingleSession => {\n            conference._onIceConnectionFailed(jingleSession);\n        });\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_DESTROYED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONFERENCE_DESTROYED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.CHAT_ERROR_RECEIVED,\n        JitsiConferenceEvents.CONFERENCE_ERROR,\n        JitsiConferenceErrors.CHAT_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.SETTINGS_ERROR_RECEIVED,\n        JitsiConferenceEvents.CONFERENCE_ERROR,\n        JitsiConferenceErrors.SETTINGS_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.FOCUS_DISCONNECTED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.FOCUS_DISCONNECTED);\n\n    chatRoom.addListener(XMPPEvents.FOCUS_LEFT,\n        () => {\n            Statistics.sendAnalytics(createFocusLeftEvent());\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.CONFERENCE_FAILED,\n                JitsiConferenceErrors.FOCUS_LEFT);\n        });\n\n    chatRoom.addListener(XMPPEvents.SESSION_ACCEPT_TIMEOUT,\n        jingleSession => {\n            Statistics.sendAnalyticsAndLog(\n                createJingleEvent(\n                    ACTION_JINGLE_SA_TIMEOUT,\n                    { p2p: jingleSession.isP2P }));\n        });\n\n    chatRoom.addListener(XMPPEvents.RECORDER_STATE_CHANGED,\n        (session, jid) => {\n\n            if (jid) {\n                const resource = Strophe.getResourceFromJid(jid);\n                const participant = conference.getParticipantById(resource) || resource;\n\n                if (session.getStatus() === 'off') {\n                    session.setTerminator(participant);\n                } else if (session.getStatus() === 'on') {\n                    session.setInitiator(participant);\n                }\n            }\n\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.RECORDER_STATE_CHANGED,\n                session);\n        });\n\n    this.chatRoomForwarder.forward(XMPPEvents.TRANSCRIPTION_STATUS_CHANGED,\n        JitsiConferenceEvents.TRANSCRIPTION_STATUS_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.VIDEO_SIP_GW_AVAILABILITY_CHANGED,\n        JitsiConferenceEvents.VIDEO_SIP_GW_AVAILABILITY_CHANGED);\n\n    this.chatRoomForwarder.forward(\n        XMPPEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED,\n        JitsiConferenceEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.PHONE_NUMBER_CHANGED,\n        JitsiConferenceEvents.PHONE_NUMBER_CHANGED);\n\n    chatRoom.setParticipantPropertyListener((node, from) => {\n        const participant = conference.getParticipantById(from);\n\n        if (!participant) {\n            return;\n        }\n\n        participant.setProperty(\n            node.tagName.substring('jitsi_participant_'.length),\n            node.value);\n    });\n\n    chatRoom.addListener(XMPPEvents.KICKED,\n        conference.onMemberKicked.bind(conference));\n    chatRoom.addListener(XMPPEvents.SUSPEND_DETECTED,\n        conference.onSuspendDetected.bind(conference));\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOCK_CHANGED,\n        JitsiConferenceEvents.LOCK_STATE_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_MEMBERS_ONLY_CHANGED,\n        JitsiConferenceEvents.MEMBERS_ONLY_CHANGED);\n\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_JOINED,\n        conference.onMemberJoined.bind(conference));\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOBBY_MEMBER_JOINED,\n        JitsiConferenceEvents.LOBBY_USER_JOINED);\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOBBY_MEMBER_UPDATED,\n        JitsiConferenceEvents.LOBBY_USER_UPDATED);\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOBBY_MEMBER_LEFT,\n        JitsiConferenceEvents.LOBBY_USER_LEFT);\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_BOT_TYPE_CHANGED,\n        conference._onMemberBotTypeChanged.bind(conference));\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_LEFT,\n        conference.onMemberLeft.bind(conference));\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LEFT,\n        JitsiConferenceEvents.CONFERENCE_LEFT);\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_DENIED_ACCESS,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONFERENCE_ACCESS_DENIED);\n\n    chatRoom.addListener(XMPPEvents.DISPLAY_NAME_CHANGED,\n        conference.onDisplayNameChanged.bind(conference));\n\n    chatRoom.addListener(XMPPEvents.LOCAL_ROLE_CHANGED, role => {\n        conference.onLocalRoleChanged(role);\n\n        // log all events for the recorder operated by the moderator\n        if (conference.statistics && conference.isModerator()) {\n            conference.on(JitsiConferenceEvents.RECORDER_STATE_CHANGED,\n                recorderSession => {\n                    const logObject = {\n                        error: recorderSession.getError(),\n                        id: 'recorder_status',\n                        status: recorderSession.getStatus()\n                    };\n\n                    Statistics.sendLog(JSON.stringify(logObject));\n                });\n        }\n    });\n\n    chatRoom.addListener(XMPPEvents.MUC_ROLE_CHANGED,\n        conference.onUserRoleChanged.bind(conference));\n\n    chatRoom.addListener(AuthenticationEvents.IDENTITY_UPDATED,\n        (authEnabled, authIdentity) => {\n            conference.authEnabled = authEnabled;\n            conference.authIdentity = authIdentity;\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.AUTH_STATUS_CHANGED, authEnabled,\n                authIdentity);\n        });\n\n    chatRoom.addListener(\n        XMPPEvents.MESSAGE_RECEIVED,\n\n        // eslint-disable-next-line max-params\n        (jid, txt, myJid, ts) => {\n            const id = Strophe.getResourceFromJid(jid);\n            if (txt.indexOf(\"Transcript\") !== -1 || txt.indexOf(\"Fellow Jitser\") !== -1) {\n                return;\n            }\n          \n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.MESSAGE_RECEIVED,\n                id, txt, ts);\n        });\n\n    chatRoom.addListener(\n        XMPPEvents.PRIVATE_MESSAGE_RECEIVED,\n\n        // eslint-disable-next-line max-params\n        (jid, txt, myJid, ts) => {\n            const id = Strophe.getResourceFromJid(jid);\n\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.PRIVATE_MESSAGE_RECEIVED,\n                id, txt, ts);\n        });\n\n    chatRoom.addListener(XMPPEvents.PRESENCE_STATUS,\n        (jid, status) => {\n            const id = Strophe.getResourceFromJid(jid);\n            const participant = conference.getParticipantById(id);\n\n            if (!participant || participant._status === status) {\n                return;\n            }\n            participant._status = status;\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.USER_STATUS_CHANGED, id, status);\n        });\n\n    chatRoom.addListener(XMPPEvents.JSON_MESSAGE_RECEIVED,\n        (from, payload) => {\n            const id = Strophe.getResourceFromJid(from);\n            const participant = conference.getParticipantById(id);\n\n            if (participant) {\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n                    participant, payload);\n            } else {\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.NON_PARTICIPANT_MESSAGE_RECEIVED,\n                    id, payload);\n            }\n        });\n\n    chatRoom.addPresenceListener('startmuted', (data, from) => {\n        let isModerator = false;\n\n        if (conference.myUserId() === from && conference.isModerator()) {\n            isModerator = true;\n        } else {\n            const participant = conference.getParticipantById(from);\n\n            if (participant && participant.isModerator()) {\n                isModerator = true;\n            }\n        }\n\n        if (!isModerator) {\n            return;\n        }\n\n        const startAudioMuted = data.attributes.audio === 'true';\n        const startVideoMuted = data.attributes.video === 'true';\n\n        let updated = false;\n\n        if (startAudioMuted !== conference.startMutedPolicy.audio) {\n            conference.startMutedPolicy.audio = startAudioMuted;\n            updated = true;\n        }\n\n        if (startVideoMuted !== conference.startMutedPolicy.video) {\n            conference.startMutedPolicy.video = startVideoMuted;\n            updated = true;\n        }\n\n        if (updated) {\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.START_MUTED_POLICY_CHANGED,\n                conference.startMutedPolicy\n            );\n        }\n    });\n\n    if (conference.statistics) {\n        // FIXME ICE related events should end up in RTCEvents eventually\n        chatRoom.addListener(XMPPEvents.CONNECTION_ICE_FAILED,\n            session => {\n                conference.statistics.sendIceConnectionFailedEvent(\n                    session.peerconnection);\n            });\n\n        // FIXME XMPPEvents.ADD_ICE_CANDIDATE_FAILED is never emitted\n        chatRoom.addListener(XMPPEvents.ADD_ICE_CANDIDATE_FAILED,\n            (e, pc) => {\n                conference.statistics.sendAddIceCandidateFailed(e, pc);\n            });\n    }\n\n    // Breakout rooms.\n    this.chatRoomForwarder.forward(XMPPEvents.BREAKOUT_ROOMS_MOVE_TO_ROOM,\n        JitsiConferenceEvents.BREAKOUT_ROOMS_MOVE_TO_ROOM);\n    this.chatRoomForwarder.forward(XMPPEvents.BREAKOUT_ROOMS_UPDATED,\n        JitsiConferenceEvents.BREAKOUT_ROOMS_UPDATED);\n};\n\n/**\n * Setups event listeners related to conference.rtc\n */\nJitsiConferenceEventManager.prototype.setupRTCListeners = function() {\n    const conference = this.conference;\n    const rtc = conference.rtc;\n\n    rtc.addListener(\n        RTCEvents.REMOTE_TRACK_ADDED,\n        conference.onRemoteTrackAdded.bind(conference));\n\n    rtc.addListener(\n        RTCEvents.REMOTE_TRACK_REMOVED,\n        conference.onRemoteTrackRemoved.bind(conference));\n\n    rtc.addListener(RTCEvents.DOMINANT_SPEAKER_CHANGED,\n        (dominant, previous) => {\n            if (conference.participants[dominant]?._hidden) {\n                return;\n            } \n            if (conference.lastDominantSpeaker !== dominant && conference.room) {\n                conference.lastDominantSpeaker = dominant;\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.DOMINANT_SPEAKER_CHANGED, dominant, previous);\n\n                if (previous && previous.length) {\n                    const speakerList = previous.slice(0);\n\n                    // Add the dominant speaker to the top of the list (exclude self).\n                    if (conference.myUserId !== dominant) {\n                        speakerList.splice(0, 0, dominant);\n                    }\n\n                    // Trim the list to the top 5 speakers only.\n                    if (speakerList.length > SPEAKERS_AUDIO_LEVELS) {\n                        speakerList.splice(SPEAKERS_AUDIO_LEVELS, speakerList.length - SPEAKERS_AUDIO_LEVELS);\n                    }\n                    conference.statistics && conference.statistics.setSpeakerList(speakerList);\n                }\n                if (conference.statistics && conference.myUserId() === dominant) {\n                    // We are the new dominant speaker.\n                    conference.statistics.sendDominantSpeakerEvent(conference.room.roomjid);\n                }\n            }\n        });\n\n    rtc.addListener(RTCEvents.DATA_CHANNEL_OPEN, () => {\n        const now = window.performance.now();\n        const key = 'data.channel.opened';\n\n        // TODO: Move all of the 'connectionTimes' logic to its own module.\n        logger.log(`(TIME) ${key}:\\t`, now);\n        conference.room.connectionTimes[key] = now;\n        Statistics.sendAnalytics(\n            createConnectionStageReachedEvent(key, { value: now }));\n\n        conference.eventEmitter.emit(JitsiConferenceEvents.DATA_CHANNEL_OPENED);\n    });\n\n    rtc.addListener(RTCEvents.ENDPOINT_MESSAGE_RECEIVED,\n        (from, payload) => {\n            const participant = conference.getParticipantById(from);\n\n            if (participant) {\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n                    participant, payload);\n            } else {\n                logger.warn(\n                    'Ignored ENDPOINT_MESSAGE_RECEIVED for not existing '\n                        + `participant: ${from}`,\n                    payload);\n            }\n        });\n\n    rtc.addListener(RTCEvents.ENDPOINT_STATS_RECEIVED,\n        (from, payload) => {\n            const participant = conference.getParticipantById(from);\n\n            if (participant) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.ENDPOINT_STATS_RECEIVED, participant, payload);\n            } else {\n                logger.warn(`Ignoring ENDPOINT_STATS_RECEIVED for a non-existant participant: ${from}`);\n            }\n        });\n\n    rtc.addListener(RTCEvents.LOCAL_UFRAG_CHANGED,\n        (tpc, ufrag) => {\n            if (!tpc.isP2P) {\n                Statistics.sendLog(\n                    JSON.stringify({\n                        id: 'local_ufrag',\n                        value: ufrag\n                    }));\n            }\n        });\n    rtc.addListener(RTCEvents.REMOTE_UFRAG_CHANGED,\n        (tpc, ufrag) => {\n            if (!tpc.isP2P) {\n                Statistics.sendLog(\n                    JSON.stringify({\n                        id: 'remote_ufrag',\n                        value: ufrag\n                    }));\n            }\n        });\n\n    rtc.addListener(RTCEvents.CREATE_ANSWER_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendCreateAnswerFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.CREATE_OFFER_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendCreateOfferFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.SET_LOCAL_DESCRIPTION_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendSetLocalDescFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.SET_REMOTE_DESCRIPTION_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendSetRemoteDescFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.LOCAL_TRACK_SSRC_UPDATED,\n        (track, ssrc) => {\n            // when starting screen sharing, the track is created and when\n            // we do set local description and we process the ssrc we\n            // will be notified for it and we will report it with the event\n            // for screen sharing\n            if (track.isVideoTrack() && track.videoType === VideoType.DESKTOP) {\n                conference.statistics.sendScreenSharingEvent(true, ssrc);\n            }\n        });\n};\n\n/**\n * Removes event listeners related to conference.xmpp\n */\nJitsiConferenceEventManager.prototype.removeXMPPListeners = function() {\n    const conference = this.conference;\n\n    Object.keys(this.xmppListeners).forEach(eventName => {\n        conference.xmpp.removeListener(\n            eventName,\n            this.xmppListeners[eventName]);\n    });\n    this.xmppListeners = {};\n};\n\n\n/**\n * Setups event listeners related to conference.xmpp\n */\nJitsiConferenceEventManager.prototype.setupXMPPListeners = function() {\n    const conference = this.conference;\n\n    this._addConferenceXMPPListener(\n        XMPPEvents.CALL_INCOMING,\n        conference.onIncomingCall.bind(conference));\n    this._addConferenceXMPPListener(\n        XMPPEvents.CALL_ACCEPTED,\n        conference.onCallAccepted.bind(conference));\n    this._addConferenceXMPPListener(\n        XMPPEvents.TRANSPORT_INFO,\n        conference.onTransportInfo.bind(conference));\n    this._addConferenceXMPPListener(\n        XMPPEvents.CALL_ENDED,\n        conference.onCallEnded.bind(conference));\n\n    this._addConferenceXMPPListener(XMPPEvents.START_MUTED_FROM_FOCUS,\n        (audioMuted, videoMuted) => {\n            if (conference.options.config.ignoreStartMuted) {\n                return;\n            }\n\n            conference.startAudioMuted = audioMuted;\n            conference.startVideoMuted = videoMuted;\n\n            // mute existing local tracks because this is initial mute from\n            // Jicofo\n            conference.getLocalTracks().forEach(track => {\n                switch (track.getType()) {\n                case MediaType.AUDIO:\n                    conference.startAudioMuted && track.mute();\n                    break;\n                case MediaType.VIDEO:\n                    conference.startVideoMuted && track.mute();\n                    break;\n                }\n            });\n\n            conference.eventEmitter.emit(JitsiConferenceEvents.STARTED_MUTED);\n        });\n\n    this._addConferenceXMPPListener(XMPPEvents.CONFERENCE_TIMESTAMP_RECEIVED,\n        createdTimestamp => {\n            conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_CREATED_TIMESTAMP, createdTimestamp);\n        });\n\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_CHANGED,\n        (value, mediaType, actorJid) => {\n            const actorParticipant = conference.getParticipants().find(p => p.getJid() === actorJid);\n\n            conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_CHANGED, {\n                enabled: value,\n                mediaType,\n                actor: actorParticipant\n            });\n        });\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_PARTICIPANT_APPROVED,\n        (mediaType, jid) => {\n            const participant = conference.getParticipantById(Strophe.getResourceFromJid(jid));\n\n            if (participant) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_PARTICIPANT_APPROVED, {\n                    participant,\n                    mediaType\n                });\n            }\n        });\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_PARTICIPANT_REJECTED,\n        (mediaType, jid) => {\n            const participant = conference.getParticipantById(Strophe.getResourceFromJid(jid));\n\n            if (participant) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_PARTICIPANT_REJECTED, {\n                    participant,\n                    mediaType\n                });\n            }\n        });\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_APPROVED,\n        value => conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_APPROVED, { mediaType: value }));\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_REJECTED,\n        value => {\n            conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_REJECTED, { mediaType: value });\n        });\n};\n\n/**\n * Add XMPP listener and save its reference for remove on leave conference.\n */\nJitsiConferenceEventManager.prototype._addConferenceXMPPListener = function(\n        eventName, listener) {\n    this.xmppListeners[eventName] = listener;\n    this.conference.xmpp.addListener(eventName, listener);\n};\n\n/**\n * Setups event listeners related to conference.statistics\n */\nJitsiConferenceEventManager.prototype.setupStatisticsListeners = function() {\n    const conference = this.conference;\n\n    if (!conference.statistics) {\n        return;\n    }\n\n    /* eslint-disable max-params */\n    conference.statistics.addAudioLevelListener((tpc, ssrc, level, isLocal) => {\n        conference.rtc.setAudioLevel(tpc, ssrc, level, isLocal);\n    });\n\n    /* eslint-enable max-params */\n\n    // Forward the \"before stats disposed\" event\n    conference.statistics.addBeforeDisposedListener(() => {\n        conference.eventEmitter.emit(\n            JitsiConferenceEvents.BEFORE_STATISTICS_DISPOSED);\n    });\n\n    // if we are in startSilent mode we will not be sending/receiving so nothing to detect\n    if (!conference.options.config.startSilent) {\n        conference.statistics.addByteSentStatsListener((tpc, stats) => {\n            conference.getLocalTracks(MediaType.AUDIO).forEach(track => {\n                const ssrc = tpc.getLocalSSRC(track);\n\n                if (!ssrc || !stats.hasOwnProperty(ssrc)) {\n                    return;\n                }\n\n                track.onByteSentStatsReceived(tpc, stats[ssrc]);\n            });\n        });\n    }\n};\n","export enum JitsiTrackEvents {\n    /**\n     * The media track was removed to the conference.\n     */\n    LOCAL_TRACK_STOPPED = 'track.stopped',\n\n    /**\n     * Audio levels of a this track was changed.\n     * The first argument is a number with audio level value in range [0, 1].\n     * The second argument is a <tt>TraceablePeerConnection</tt> which is the peer\n     * connection which measured the audio level (one audio track can be added\n     * to multiple peer connection at the same time). This argument is optional for\n     * local tracks for which we can measure audio level without the peer\n     * connection (the value will be <tt>undefined</tt>).\n     *\n     * NOTE The second argument should be treated as library internal and can be\n     * removed at any time.\n     */\n    TRACK_AUDIO_LEVEL_CHANGED = 'track.audioLevelsChanged',\n\n    /**\n     * The audio output of the track was changed.\n     */\n    TRACK_AUDIO_OUTPUT_CHANGED = 'track.audioOutputChanged',\n\n    /**\n     * A media track mute status was changed.\n     */\n    TRACK_MUTE_CHANGED = 'track.trackMuteChanged',\n\n    /**\n     * The video type(\"camera\" or \"desktop\") of the track was changed.\n     */\n    TRACK_VIDEOTYPE_CHANGED = 'track.videoTypeChanged',\n\n    /**\n     * Indicates that the track is not receiving any data even though we expect it\n     * to receive data (i.e. the stream is not stopped).\n     */\n    NO_DATA_FROM_SOURCE = 'track.no_data_from_source',\n\n    /**\n     * Indicates that the local audio track is not receiving any audio input from\n     * the microphone that is currently selected.\n     */\n    NO_AUDIO_INPUT = 'track.no_audio_input',\n\n    /**\n     * Event fired whenever video track's streaming changes.\n     * First argument is the sourceName of the track and the second is a string indicating if the connection is currently\n     * - active - the connection is active.\n     * - inactive - the connection is inactive, was intentionally interrupted by the bridge because of low BWE or because\n     *   of the endpoint falling out of last N.\n     * - interrupted - a network problem occurred.\n     * - restoring - the connection was inactive and is restoring now.\n     *\n     * The current status value can be obtained by calling JitsiRemoteTrack.getTrackStreamingStatus().\n     */\n    TRACK_STREAMING_STATUS_CHANGED = 'track.streaming_status_changed'\n};\n\n// exported for backward compatibility\nexport const LOCAL_TRACK_STOPPED = JitsiTrackEvents.LOCAL_TRACK_STOPPED;\nexport const TRACK_AUDIO_LEVEL_CHANGED = JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED;\nexport const TRACK_AUDIO_OUTPUT_CHANGED = JitsiTrackEvents.TRACK_AUDIO_OUTPUT_CHANGED;\nexport const TRACK_MUTE_CHANGED = JitsiTrackEvents.TRACK_MUTE_CHANGED;\nexport const TRACK_VIDEOTYPE_CHANGED = JitsiTrackEvents.TRACK_VIDEOTYPE_CHANGED;\nexport const NO_DATA_FROM_SOURCE = JitsiTrackEvents.NO_DATA_FROM_SOURCE;\nexport const NO_AUDIO_INPUT = JitsiTrackEvents.NO_AUDIO_INPUT;\nexport const TRACK_STREAMING_STATUS_CHANGED = JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED;\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport { createParticipantConnectionStatusEvent } from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\nimport Statistics from '../statistics/statistics';\n\nconst logger = getLogger(__filename);\n\n/**\n * Default value of 500 milliseconds for {@link ParticipantConnectionStatus.outOfLastNTimeout}.\n *\n * @type {number}\n */\nconst DEFAULT_NOT_IN_LAST_N_TIMEOUT = 500;\n\n/**\n * Default value of 2500 milliseconds for {@link ParticipantConnectionStatus.p2pRtcMuteTimeout}.\n */\nconst DEFAULT_P2P_RTC_MUTE_TIMEOUT = 2500;\n\n/**\n * Default value of 10000 milliseconds for {@link ParticipantConnectionStatus.rtcMuteTimeout}.\n *\n * @type {number}\n */\nconst DEFAULT_RTC_MUTE_TIMEOUT = 10000;\n\n/**\n * The time to wait a track to be restored. Track which was out of lastN\n * should be inactive and when entering lastN it becomes restoring and when\n * data is received from bridge it will become active, but if no data is\n * received for some time we set status of that participant connection to\n * interrupted.\n * @type {number}\n */\nconst DEFAULT_RESTORING_TIMEOUT = 10000;\n\n/**\n * Participant connection statuses.\n *\n * @type {{\n *      ACTIVE: string,\n *      INACTIVE: string,\n *      INTERRUPTED: string,\n *      RESTORING: string\n * }}\n */\nexport const ParticipantConnectionStatus = {\n    /**\n     * Status indicating that connection is currently active.\n     */\n    ACTIVE: 'active',\n\n    /**\n     * Status indicating that connection is currently inactive.\n     * Inactive means the connection was stopped on purpose from the bridge,\n     * like exiting lastN or adaptivity decided to drop video because of not\n     * enough bandwidth.\n     */\n    INACTIVE: 'inactive',\n\n    /**\n     * Status indicating that connection is currently interrupted.\n     */\n    INTERRUPTED: 'interrupted',\n\n    /**\n     * Status indicating that connection is currently restoring.\n     */\n    RESTORING: 'restoring'\n};\n\n/**\n * Class is responsible for emitting\n * JitsiConferenceEvents.PARTICIPANT_CONN_STATUS_CHANGED events.\n */\nexport default class ParticipantConnectionStatusHandler {\n    /* eslint-disable max-params*/\n    /**\n     * Calculates the new {@link ParticipantConnectionStatus} based on\n     * the values given for some specific remote user. It is assumed that\n     * the conference is currently in the JVB mode (in contrary to the P2P mode)\n     * @param {boolean} isConnectionActiveByJvb true if the JVB did not get any\n     * data from the user for the last 15 seconds.\n     * @param {boolean} isInLastN indicates whether the user is in the last N\n     * set. When set to false it means that JVB is not sending any video for\n     * the user.\n     * @param {boolean} isRestoringTimedout if true it means that the user has\n     * been outside of last N too long to be considered\n     * {@link ParticipantConnectionStatus.RESTORING}.\n     * @param {boolean} isVideoMuted true if the user is video muted and we\n     * should not expect to receive any video.\n     * @param {boolean} isVideoTrackFrozen if the current browser support video\n     * frozen detection then it will be set to true when the video track is\n     * frozen. If the current browser does not support frozen detection the it's\n     * always false.\n     * @return {ParticipantConnectionStatus} the new connection status for\n     * the user for whom the values above were provided.\n     * @private\n     */\n    static _getNewStateForJvbMode(\n            isConnectionActiveByJvb,\n            isInLastN,\n            isRestoringTimedout,\n            isVideoMuted,\n            isVideoTrackFrozen) {\n        if (!isConnectionActiveByJvb) {\n            // when there is a connection problem signaled from jvb\n            // it means no media was flowing for at least 15secs, so both audio\n            // and video are most likely interrupted\n            return ParticipantConnectionStatus.INTERRUPTED;\n        } else if (isVideoMuted) {\n            // If the connection is active according to JVB and the user is\n            // video muted there is no way for the connection to be inactive,\n            // because the detection logic below only makes sense for video.\n            return ParticipantConnectionStatus.ACTIVE;\n        }\n\n        // Logic when isVideoTrackFrozen is supported\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n            if (!isVideoTrackFrozen) {\n                // If the video is playing we're good\n                return ParticipantConnectionStatus.ACTIVE;\n            } else if (isInLastN) {\n                return isRestoringTimedout\n                    ? ParticipantConnectionStatus.INTERRUPTED\n                    : ParticipantConnectionStatus.RESTORING;\n            }\n\n            return ParticipantConnectionStatus.INACTIVE;\n        }\n\n        // Because this browser is incapable of detecting frozen video we must\n        // rely on the lastN value\n        return isInLastN\n            ? ParticipantConnectionStatus.ACTIVE\n            : ParticipantConnectionStatus.INACTIVE;\n    }\n\n    /* eslint-enable max-params*/\n\n    /**\n     * In P2P mode we don't care about any values coming from the JVB and\n     * the connection status can be only active or interrupted.\n     * @param {boolean} isVideoMuted the user if video muted\n     * @param {boolean} isVideoTrackFrozen true if the video track for\n     * the remote user is currently frozen. If the current browser does not\n     * support video frozen detection then it's always false.\n     * @return {ParticipantConnectionStatus}\n     * @private\n     */\n    static _getNewStateForP2PMode(isVideoMuted, isVideoTrackFrozen) {\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            // There's no way to detect problems in P2P when there's no video\n            // track frozen detection...\n            return ParticipantConnectionStatus.ACTIVE;\n        }\n\n        return isVideoMuted || !isVideoTrackFrozen\n            ? ParticipantConnectionStatus.ACTIVE\n            : ParticipantConnectionStatus.INTERRUPTED;\n    }\n\n    /**\n     * Creates new instance of <tt>ParticipantConnectionStatus</tt>.\n     *\n     * @constructor\n     * @param {RTC} rtc the RTC service instance\n     * @param {JitsiConference} conference parent conference instance\n     * @param {Object} options\n     * @param {number} [options.p2pRtcMuteTimeout=2500] custom value for\n     * {@link ParticipantConnectionStatus.p2pRtcMuteTimeout}.\n     * @param {number} [options.rtcMuteTimeout=2000] custom value for\n     * {@link ParticipantConnectionStatus.rtcMuteTimeout}.\n     * @param {number} [options.outOfLastNTimeout=500] custom value for\n     * {@link ParticipantConnectionStatus.outOfLastNTimeout}.\n     */\n    constructor(rtc, conference, options) {\n        this.rtc = rtc;\n        this.conference = conference;\n\n        /**\n         * A map of the \"endpoint ID\"(which corresponds to the resource part\n         * of MUC JID(nickname)) to the timeout callback IDs scheduled using\n         * window.setTimeout.\n         * @type {Object.<string, number>}\n         */\n        this.trackTimers = {};\n\n        /**\n         * This map holds the endpoint connection status received from the JVB\n         * (as it might be different than the one stored in JitsiParticipant).\n         * Required for getting back in sync when remote video track is removed.\n         * @type {Object.<string, boolean>}\n         */\n        this.connStatusFromJvb = { };\n\n        /**\n         * If video track frozen detection through RTC mute event is supported,\n         * we wait some time until video track is considered frozen. But because\n         * when the user falls out of last N it is expected for the video to\n         * freeze this timeout must be significantly reduced in \"out of last N\"\n         * case.\n         *\n         * Basically this value is used instead of {@link rtcMuteTimeout} when\n         * user is not in last N.\n         * @type {number}\n         */\n        this.outOfLastNTimeout\n            = typeof options.outOfLastNTimeout === 'number'\n                ? options.outOfLastNTimeout : DEFAULT_NOT_IN_LAST_N_TIMEOUT;\n\n        /**\n         * How long we are going to wait for the corresponding signaling mute event after the RTC video track muted\n         * event is fired on the Media stream, before the connection interrupted is fired. The default value is\n         * {@link DEFAULT_P2P_RTC_MUTE_TIMEOUT}.\n         *\n         * @type {number} amount of time in milliseconds.\n         */\n        this.p2pRtcMuteTimeout = typeof options.p2pRtcMuteTimeout === 'number'\n            ? options.p2pRtcMuteTimeout : DEFAULT_P2P_RTC_MUTE_TIMEOUT;\n\n        /**\n         * How long we're going to wait after the RTC video track muted event\n         * for the corresponding signalling mute event, before the connection\n         * interrupted is fired. The default value is\n         * {@link DEFAULT_RTC_MUTE_TIMEOUT}.\n         *\n         * @type {number} amount of time in milliseconds\n         */\n        this.rtcMuteTimeout\n            = typeof options.rtcMuteTimeout === 'number'\n                ? options.rtcMuteTimeout : DEFAULT_RTC_MUTE_TIMEOUT;\n\n        /**\n         * This map holds a timestamp indicating  when participant's video track\n         * was RTC muted (it is assumed that each participant can have only 1\n         * video track at a time). The purpose of storing the timestamp is to\n         * avoid the transition to disconnected status in case of legitimate\n         * video mute operation where the signalling video muted event can\n         * arrive shortly after RTC muted event.\n         *\n         * The key is participant's ID which is the same as endpoint id in\n         * the Colibri conference allocated on the JVB.\n         *\n         * The value is a timestamp measured in milliseconds obtained with\n         * <tt>Date.now()</tt>.\n         *\n         * FIXME merge this logic with NO_DATA_FROM_SOURCE event\n         *       implemented in JitsiLocalTrack by extending the event to\n         *       the remote track and allowing to set different timeout for\n         *       local and remote tracks.\n         *\n         * @type {Object.<string, number>}\n         */\n        this.rtcMutedTimestamp = { };\n        logger.info(`RtcMuteTimeout set to: ${this.rtcMuteTimeout}`);\n\n        /**\n         * This map holds the timestamps indicating when participant's video\n         * entered lastN set. Participants entering lastN will have connection\n         * status restoring and when we start receiving video will become\n         * active, but if video is not received for certain time\n         * {@link DEFAULT_RESTORING_TIMEOUT} that participant connection status\n         * will become interrupted.\n         *\n         * @type {Map<string, number>}\n         */\n        this.enteredLastNTimestamp = new Map();\n\n        /**\n         * A map of the \"endpoint ID\"(which corresponds to the resource part\n         * of MUC JID(nickname)) to the restoring timeout callback IDs\n         * scheduled using window.setTimeout.\n         *\n         * @type {Map<string, number>}\n         */\n        this.restoringTimers = new Map();\n\n        /**\n         * A map that holds the current connection status (along with all the internal events that happen\n         * while in that state).\n         *\n         * The goal is to send this information to the analytics backend for post-mortem analysis.\n         */\n        this.connectionStatusMap = new Map();\n    }\n\n    /**\n     * Gets the video frozen timeout for given user.\n     * @param {string} id endpoint/participant ID\n     * @return {number} how long are we going to wait since RTC video muted\n     * even, before a video track is considered frozen.\n     * @private\n     */\n    _getVideoFrozenTimeout(id) {\n        return this.rtc.isInLastN(id)\n            ? this.rtcMuteTimeout\n            : this.conference.isP2PActive() ? this.p2pRtcMuteTimeout : this.outOfLastNTimeout;\n    }\n\n    /**\n     * Initializes <tt>ParticipantConnectionStatus</tt> and bind required event\n     * listeners.\n     */\n    init() {\n\n        this._onEndpointConnStatusChanged\n            = this.onEndpointConnStatusChanged.bind(this);\n\n        this.rtc.addListener(\n            RTCEvents.ENDPOINT_CONN_STATUS_CHANGED,\n            this._onEndpointConnStatusChanged);\n\n        // Handles P2P status changes\n        this._onP2PStatus = this.refreshConnectionStatusForAll.bind(this);\n        this.conference.on(JitsiConferenceEvents.P2P_STATUS, this._onP2PStatus);\n\n        // Used to send analytics events for the participant that left the call.\n        this._onUserLeft = this.onUserLeft.bind(this);\n        this.conference.on(JitsiConferenceEvents.USER_LEFT, this._onUserLeft);\n\n        // On some browsers MediaStreamTrack trigger \"onmute\"/\"onunmute\"\n        // events for video type tracks when they stop receiving data which is\n        // often a sign that remote user is having connectivity issues\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n\n            this._onTrackRtcMuted = this.onTrackRtcMuted.bind(this);\n            this.rtc.addListener(\n                RTCEvents.REMOTE_TRACK_MUTE, this._onTrackRtcMuted);\n\n            this._onTrackRtcUnmuted = this.onTrackRtcUnmuted.bind(this);\n            this.rtc.addListener(\n                RTCEvents.REMOTE_TRACK_UNMUTE, this._onTrackRtcUnmuted);\n\n            // Track added/removed listeners are used to bind \"mute\"/\"unmute\"\n            // event handlers\n            this._onRemoteTrackAdded = this.onRemoteTrackAdded.bind(this);\n            this.conference.on(\n                JitsiConferenceEvents.TRACK_ADDED,\n                this._onRemoteTrackAdded);\n\n            this._onRemoteTrackRemoved = this.onRemoteTrackRemoved.bind(this);\n            this.conference.on(\n                JitsiConferenceEvents.TRACK_REMOVED,\n                this._onRemoteTrackRemoved);\n\n            // Listened which will be bound to JitsiRemoteTrack to listen for\n            // signalling mute/unmute events.\n            this._onSignallingMuteChanged\n                = this.onSignallingMuteChanged.bind(this);\n\n            // Used to send an analytics event when the video type changes.\n            this._onTrackVideoTypeChanged\n                = this.onTrackVideoTypeChanged.bind(this);\n        }\n\n        this._onLastNChanged = this._onLastNChanged.bind(this);\n        this.conference.on(\n            JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED,\n            this._onLastNChanged);\n\n        this._onLastNValueChanged\n            = this.refreshConnectionStatusForAll.bind(this);\n        this.rtc.on(\n            RTCEvents.LASTN_VALUE_CHANGED, this._onLastNValueChanged);\n    }\n\n    /**\n     * Removes all event listeners and disposes of all resources held by this\n     * instance.\n     */\n    dispose() {\n\n        this.rtc.removeListener(\n            RTCEvents.ENDPOINT_CONN_STATUS_CHANGED,\n            this._onEndpointConnStatusChanged);\n\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n            this.rtc.removeListener(\n                RTCEvents.REMOTE_TRACK_MUTE,\n                this._onTrackRtcMuted);\n            this.rtc.removeListener(\n                RTCEvents.REMOTE_TRACK_UNMUTE,\n                this._onTrackRtcUnmuted);\n\n            this.conference.off(\n                JitsiConferenceEvents.TRACK_ADDED,\n                this._onRemoteTrackAdded);\n            this.conference.off(\n                JitsiConferenceEvents.TRACK_REMOVED,\n                this._onRemoteTrackRemoved);\n        }\n\n        this.conference.off(\n            JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED,\n            this._onLastNChanged);\n\n        this.rtc.removeListener(\n            RTCEvents.LASTN_VALUE_CHANGED, this._onLastNValueChanged);\n\n        this.conference.off(\n            JitsiConferenceEvents.P2P_STATUS, this._onP2PStatus);\n\n        this.conference.off(\n            JitsiConferenceEvents.USER_LEFT, this._onUserLeft);\n\n        const participantIds = Object.keys(this.trackTimers);\n\n        for (const participantId of participantIds) {\n            this.clearTimeout(participantId);\n            this.clearRtcMutedTimestamp(participantId);\n        }\n\n        for (const id in this.connectionStatusMap) {\n            if (this.connectionStatusMap.hasOwnProperty(id)) {\n                this.onUserLeft(id);\n            }\n        }\n\n        // Clear RTC connection status cache\n        this.connStatusFromJvb = {};\n    }\n\n    /**\n     * Handles RTCEvents.ENDPOINT_CONN_STATUS_CHANGED triggered when we receive\n     * notification over the data channel from the bridge about endpoint's\n     * connection status update.\n     * @param {string} endpointId - The endpoint ID(MUC nickname/resource JID).\n     * @param {boolean} isActive - true if the connection is OK or false otherwise.\n     */\n    onEndpointConnStatusChanged(endpointId, isActive) {\n\n        logger.debug(\n            `Detector RTCEvents.ENDPOINT_CONN_STATUS_CHANGED(${Date.now()}): ${\n                endpointId}: ${isActive}`);\n\n        // Filter out events for the local JID for now\n        if (endpointId !== this.conference.myUserId()) {\n            // Store the status received over the data channels\n            this.connStatusFromJvb[endpointId] = isActive;\n            this.figureOutConnectionStatus(endpointId);\n        }\n    }\n\n    /**\n     * Changes connection status.\n     * @param {JitsiParticipant} participant\n     * @param newStatus\n     */\n    _changeConnectionStatus(participant, newStatus) {\n        if (participant.getConnectionStatus() !== newStatus) {\n\n            const endpointId = participant.getId();\n\n            participant._setConnectionStatus(newStatus);\n\n            logger.debug(\n                `Emit endpoint conn status(${Date.now()}) ${endpointId}: ${\n                    newStatus}`);\n\n            // Log the event on CallStats\n            Statistics.sendLog(\n                JSON.stringify({\n                    id: 'peer.conn.status',\n                    participant: endpointId,\n                    status: newStatus\n                }));\n\n\n            this.conference.eventEmitter.emit(\n                JitsiConferenceEvents.PARTICIPANT_CONN_STATUS_CHANGED,\n                endpointId, newStatus);\n        }\n    }\n\n    /**\n     * Reset the postponed \"connection interrupted\" event which was previously\n     * scheduled as a timeout on RTC 'onmute' event.\n     *\n     * @param {string} participantId - The participant for which the \"connection\n     * interrupted\" timeout was scheduled.\n     */\n    clearTimeout(participantId) {\n        if (this.trackTimers[participantId]) {\n            window.clearTimeout(this.trackTimers[participantId]);\n            this.trackTimers[participantId] = null;\n        }\n    }\n\n    /**\n     * Clears the timestamp of the RTC muted event for participant's video track\n     * @param {string} participantId the id of the conference participant which\n     * is the same as the Colibri endpoint ID of the video channel allocated for\n     * the user on the videobridge.\n     */\n    clearRtcMutedTimestamp(participantId) {\n        this.rtcMutedTimestamp[participantId] = null;\n    }\n\n    /**\n     * Bind signalling mute event listeners for video {JitsiRemoteTrack} when\n     * a new one is added to the conference.\n     *\n     * @param {JitsiTrack} remoteTrack - The {JitsiTrack} which is being added to\n     * the conference.\n     */\n    onRemoteTrackAdded(remoteTrack) {\n        if (!remoteTrack.isLocal()\n                && remoteTrack.getType() === MediaType.VIDEO) {\n\n            logger.debug(\n                `Detector on remote track added for: ${\n                    remoteTrack.getParticipantId()}`);\n\n            remoteTrack.on(\n                JitsiTrackEvents.TRACK_MUTE_CHANGED,\n                this._onSignallingMuteChanged);\n            remoteTrack.on(\n                JitsiTrackEvents.TRACK_VIDEOTYPE_CHANGED,\n                videoType => this._onTrackVideoTypeChanged(remoteTrack, videoType));\n        }\n    }\n\n    /**\n     * Removes all event listeners bound to the remote video track and clears\n     * any related timeouts.\n     *\n     * @param {JitsiRemoteTrack} remoteTrack - The remote track which is being\n     * removed from the conference.\n     */\n    onRemoteTrackRemoved(remoteTrack) {\n        if (!remoteTrack.isLocal()\n                && remoteTrack.getType() === MediaType.VIDEO) {\n\n            const endpointId = remoteTrack.getParticipantId();\n\n            logger.debug(`Detector on remote track removed: ${endpointId}`);\n\n            remoteTrack.off(\n                JitsiTrackEvents.TRACK_MUTE_CHANGED,\n                this._onSignallingMuteChanged);\n\n            this.clearTimeout(endpointId);\n            this.clearRtcMutedTimestamp(endpointId);\n\n            this.figureOutConnectionStatus(endpointId);\n        }\n    }\n\n    /**\n     * Checks if given participant's video is considered frozen.\n     * @param {JitsiParticipant} participant - The participant.\n     * @return {boolean} <tt>true</tt> if the video has frozen for given\n     * participant or <tt>false</tt> when it's either not considered frozen\n     * (yet) or if freeze detection is not supported by the current browser.\n     *\n     * FIXME merge this logic with NO_DATA_FROM_SOURCE event\n     *       implemented in JitsiLocalTrack by extending the event to\n     *       the remote track and allowing to set different timeout for\n     *       local and remote tracks.\n     *\n     */\n    isVideoTrackFrozen(participant) {\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            return false;\n        }\n\n        const id = participant.getId();\n        const hasAnyVideoRTCMuted = participant.hasAnyVideoTrackWebRTCMuted();\n        const rtcMutedTimestamp = this.rtcMutedTimestamp[id];\n        const timeout = this._getVideoFrozenTimeout(id);\n\n        return hasAnyVideoRTCMuted\n            && typeof rtcMutedTimestamp === 'number'\n            && (Date.now() - rtcMutedTimestamp) >= timeout;\n    }\n\n    /**\n     * Goes over every participant and updates connectivity status.\n     * Should be called when a parameter which affects all of the participants\n     * is changed (P2P for example).\n     */\n    refreshConnectionStatusForAll() {\n        const participants = this.conference.getParticipants();\n\n        for (const participant of participants) {\n            this.figureOutConnectionStatus(participant.getId());\n        }\n    }\n\n    /**\n     * Figures out (and updates) the current connectivity status for\n     * the participant identified by the given id.\n     *\n     * @param {string} id - The participant's id (MUC nickname or Colibri endpoint ID).\n     */\n    figureOutConnectionStatus(id) {\n        const participant = this.conference.getParticipantById(id);\n\n        if (!participant) {\n            // Probably the participant is no longer in the conference\n            // (at the time of writing this code, participant is\n            // detached from the conference and TRACK_REMOVED events are\n            // fired),\n            // so we don't care, but let's print a log message for debugging purposes.\n            logger.debug(`figure out conn status - no participant for: ${id}`);\n\n            return;\n        }\n\n        const inP2PMode = this.conference.isP2PActive();\n        const isRestoringTimedOut = this._isRestoringTimedout(id);\n        const audioOnlyMode = this.conference.getLastN() === 0;\n\n        // NOTE Overriding videoMuted to true for audioOnlyMode should disable\n        // any detection based on video playback or the last N.\n        const isVideoMuted = participant.isVideoMuted() || audioOnlyMode;\n        const isVideoTrackFrozen = this.isVideoTrackFrozen(participant);\n        const isInLastN = this.rtc.isInLastN(id);\n        let isConnActiveByJvb = this.connStatusFromJvb[id];\n\n        if (typeof isConnActiveByJvb !== 'boolean') {\n            // If no status was received from the JVB it means that it's active\n            // (the bridge does not send notification unless there is a problem)\n            isConnActiveByJvb = true;\n        }\n\n        const newState\n            = inP2PMode\n                ? ParticipantConnectionStatusHandler._getNewStateForP2PMode(\n                    isVideoMuted,\n                    isVideoTrackFrozen)\n                : ParticipantConnectionStatusHandler._getNewStateForJvbMode(\n                    isConnActiveByJvb,\n                    isInLastN,\n                    isRestoringTimedOut,\n                    isVideoMuted,\n                    isVideoTrackFrozen);\n\n        // if the new state is not restoring clear timers and timestamps\n        // that we use to track the restoring state\n        if (newState !== ParticipantConnectionStatus.RESTORING) {\n            this._clearRestoringTimer(id);\n        }\n\n        logger.debug(\n            `Figure out conn status for ${id}, is video muted: ${\n                isVideoMuted} is active(jvb): ${\n                isConnActiveByJvb} video track frozen: ${\n                isVideoTrackFrozen} p2p mode: ${\n                inP2PMode} is in last N: ${\n                isInLastN} currentStatus => newStatus: ${\n                participant.getConnectionStatus()} => ${newState}`);\n\n        const oldConnectionStatus = this.connectionStatusMap[id] || {};\n\n        // Send an analytics event (guard on either the p2p flag or the connection status has changed\n        // since the last time this code block run).\n        if (!('p2p' in oldConnectionStatus)\n            || !('connectionStatus' in oldConnectionStatus)\n            || oldConnectionStatus.p2p !== inP2PMode\n            || oldConnectionStatus.connectionStatus !== newState) {\n\n            const nowMs = Date.now();\n\n            this.maybeSendParticipantConnectionStatusEvent(id, nowMs);\n\n            this.connectionStatusMap[id] = {\n                ...oldConnectionStatus,\n                connectionStatus: newState,\n                p2p: inP2PMode,\n                startedMs: nowMs\n            };\n\n            // sometimes (always?) we're late to hook the TRACK_VIDEOTYPE_CHANGED event and the\n            // video type is not in oldConnectionStatus.\n            if (!('videoType' in this.connectionStatusMap[id])) {\n                const videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\n\n                if (Array.isArray(videoTracks) && videoTracks.length !== 0) {\n                    this.connectionStatusMap[id].videoType = videoTracks[0].videoType;\n                }\n            }\n        }\n        this._changeConnectionStatus(participant, newState);\n    }\n\n    /**\n     * Computes the duration of the current connection status for the participant with the specified id (i.e. 15 seconds\n     * in the INTERRUPTED state) and sends a participant connection status event.\n     * @param {string} id - The jid of the participant.\n     * @param {Number} nowMs - The current time (in millis).\n     * @returns {void}\n     */\n    maybeSendParticipantConnectionStatusEvent(id, nowMs) {\n        const participantConnectionStatus = this.connectionStatusMap[id];\n\n        if (participantConnectionStatus\n            && 'startedMs' in participantConnectionStatus\n            && 'videoType' in participantConnectionStatus\n            && 'connectionStatus' in participantConnectionStatus\n            && 'p2p' in participantConnectionStatus) {\n            participantConnectionStatus.value = nowMs - participantConnectionStatus.startedMs;\n            Statistics.sendAnalytics(\n                createParticipantConnectionStatusEvent(participantConnectionStatus));\n        }\n    }\n\n    /**\n     * On change in Last N set check all leaving and entering participants to\n     * change their corresponding statuses.\n     *\n     * @param {Array<string>} leavingLastN - The array of ids leaving lastN.\n     * @param {Array<string>} enteringLastN - The array of ids entering lastN.\n     * @private\n     */\n    _onLastNChanged(leavingLastN = [], enteringLastN = []) {\n        const now = Date.now();\n\n        logger.debug(`LastN endpoints changed leaving=${leavingLastN}, entering=${enteringLastN} at ${now}`);\n\n        // If the browser doesn't fire the mute/onmute events when the remote peer stops/starts sending media,\n        // calculate the connection status for all the endpoints since it won't get triggered automatically on\n        // the endpoint that has started/stopped receiving media.\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            this.refreshConnectionStatusForAll();\n        }\n\n        for (const id of leavingLastN) {\n            this.enteredLastNTimestamp.delete(id);\n            this._clearRestoringTimer(id);\n            browser.supportsVideoMuteOnConnInterrupted() && this.figureOutConnectionStatus(id);\n        }\n        for (const id of enteringLastN) {\n            // store the timestamp this id is entering lastN\n            this.enteredLastNTimestamp.set(id, now);\n            browser.supportsVideoMuteOnConnInterrupted() && this.figureOutConnectionStatus(id);\n        }\n    }\n\n    /**\n     * Clears the restoring timer for participant's video track and the\n     * timestamp for entering lastN.\n     *\n     * @param {string} participantId - The id of the conference participant which\n     * is the same as the Colibri endpoint ID of the video channel allocated for\n     * the user on the videobridge.\n     */\n    _clearRestoringTimer(participantId) {\n        const rTimer = this.restoringTimers.get(participantId);\n\n        if (rTimer) {\n            clearTimeout(rTimer);\n            this.restoringTimers.delete(participantId);\n        }\n    }\n\n    /**\n     * Checks whether a track had stayed enough in restoring state, compares\n     * current time and the time the track entered in lastN. If it hasn't\n     * timedout and there is no timer added, add new timer in order to give it\n     * more time to become active or mark it as interrupted on next check.\n     *\n     * @param {string} participantId - The id of the conference participant which\n     * is the same as the Colibri endpoint ID of the video channel allocated for\n     * the user on the videobridge.\n     * @returns {boolean} <tt>true</tt> if the track was in restoring state\n     * more than the timeout ({@link DEFAULT_RESTORING_TIMEOUT}.) in order to\n     * set its status to interrupted.\n     * @private\n     */\n    _isRestoringTimedout(participantId) {\n        const enteredLastNTimestamp\n            = this.enteredLastNTimestamp.get(participantId);\n\n        if (enteredLastNTimestamp\n            && (Date.now() - enteredLastNTimestamp)\n                >= DEFAULT_RESTORING_TIMEOUT) {\n            return true;\n        }\n\n        // still haven't reached timeout, if there is no timer scheduled,\n        // schedule one so we can track the restoring state and change it after\n        // reaching the timeout\n        const rTimer = this.restoringTimers.get(participantId);\n\n        if (!rTimer) {\n            this.restoringTimers.set(participantId, setTimeout(\n                () => this.figureOutConnectionStatus(participantId),\n                DEFAULT_RESTORING_TIMEOUT));\n        }\n\n        return false;\n    }\n\n    /**\n     * Sends a last/final participant connection status event for the participant that left the conference.\n     * @param {string} id - The id of the participant that left the conference.\n     * @returns {void}\n     */\n    onUserLeft(id) {\n        this.maybeSendParticipantConnectionStatusEvent(id, Date.now());\n        delete this.connectionStatusMap[id];\n    }\n\n    /**\n     * Handles RTC 'onmute' event for the video track.\n     *\n     * @param {JitsiRemoteTrack} track - The video track for which 'onmute' event\n     * will be processed.\n     */\n    onTrackRtcMuted(track) {\n        const participantId = track.getParticipantId();\n        const participant = this.conference.getParticipantById(participantId);\n\n        logger.debug(`Detector track RTC muted: ${participantId}`, Date.now());\n        if (!participant) {\n            logger.error(`No participant for id: ${participantId}`);\n\n            return;\n        }\n        this.rtcMutedTimestamp[participantId] = Date.now();\n        if (!participant.isVideoMuted()) {\n            // If the user is not muted according to the signalling we'll give\n            // it some time, before the connection interrupted event is\n            // triggered.\n            this.clearTimeout(participantId);\n\n            // The timeout is reduced when user is not in the last N\n            const timeout = this._getVideoFrozenTimeout(participantId);\n\n            this.trackTimers[participantId] = window.setTimeout(() => {\n                logger.debug(\n                    `Set RTC mute timeout for: ${participantId}\\\n                     of ${timeout} ms`);\n                this.clearTimeout(participantId);\n                this.figureOutConnectionStatus(participantId);\n            }, timeout);\n        }\n    }\n\n    /**\n     * Handles RTC 'onunmute' event for the video track.\n     *\n     * @param {JitsiRemoteTrack} track - The video track for which 'onunmute'\n     * event will be processed.\n     */\n    onTrackRtcUnmuted(track) {\n        const participantId = track.getParticipantId();\n\n        logger.debug(\n            `Detector track RTC unmuted: ${participantId}`, Date.now());\n\n        this.clearTimeout(participantId);\n        this.clearRtcMutedTimestamp(participantId);\n\n        this.figureOutConnectionStatus(participantId);\n    }\n\n    /**\n     * Here the signalling \"mute\"/\"unmute\" events are processed.\n     *\n     * @param {JitsiRemoteTrack} track - The remote video track for which\n     * the signalling mute/unmute event will be processed.\n     */\n    onSignallingMuteChanged(track) {\n        const participantId = track.getParticipantId();\n\n        logger.debug(\n            `Detector on track signalling mute changed: ${participantId}`,\n            track.isMuted());\n\n        this.figureOutConnectionStatus(participantId);\n    }\n\n    /**\n     * Sends a participant connection status event as a result of the video type\n     * changing.\n     * @param {JitsiRemoteTrack} track - The track.\n     * @param {VideoType} type - The video type.\n     * @returns {void}\n     */\n    onTrackVideoTypeChanged(track, type) {\n        const id = track.getParticipantId();\n        const nowMs = Date.now();\n\n        this.maybeSendParticipantConnectionStatusEvent(id, nowMs);\n\n        this.connectionStatusMap[id] = {\n            ...this.connectionStatusMap[id] || {},\n            videoType: type,\n            startedMs: nowMs\n        };\n    }\n}\n","\nimport { Strophe } from 'strophe.js';\n\n\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport { ParticipantConnectionStatus }\n    from './modules/connectivity/ParticipantConnectionStatus';\nimport { MediaType } from './service/RTC/MediaType';\n\n/**\n * Represents a participant in (i.e. a member of) a conference.\n */\nexport default class JitsiParticipant {\n\n    /* eslint-disable max-params */\n\n    /**\n     * Initializes a new JitsiParticipant instance.\n     *\n     * @constructor\n     * @param jid the conference XMPP jid\n     * @param conference\n     * @param displayName\n     * @param {Boolean} hidden - True if the new JitsiParticipant instance is to\n     * represent a hidden participant; otherwise, false.\n     * @param {string} statsID - optional participant statsID\n     * @param {string} status - the initial status if any.\n     * @param {object} identity - the xmpp identity\n     * @param {boolean?} isReplacing - whether this is a participant replacing another into the meeting.\n     * @param {boolean?} isReplaced - whether this is a participant to be kicked and replaced into the meeting.\n     */\n    constructor(jid, conference, displayName, hidden, statsID, status, identity, isReplacing, isReplaced) {\n        this._jid = jid;\n        this._id = Strophe.getResourceFromJid(jid);\n        this._conference = conference;\n        this._displayName = displayName;\n        this._supportsDTMF = false;\n        this._tracks = [];\n        this._role = 'none';\n        this._status = status;\n        this._hidden = hidden;\n        this._statsID = statsID;\n        this._connectionStatus = ParticipantConnectionStatus.ACTIVE;\n        this._properties = {};\n        this._identity = identity;\n        this._isReplacing = isReplacing;\n        this._isReplaced = isReplaced;\n        this._features = new Set();\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * @returns {JitsiConference} The conference that this participant belongs\n     * to.\n     */\n    getConference() {\n        return this._conference;\n    }\n\n    /**\n     * Gets the value of a property of this participant.\n     */\n    getProperty(name) {\n        return this._properties[name];\n    }\n\n    /**\n     * Checks whether this <tt>JitsiParticipant</tt> has any video tracks which\n     * are muted according to their underlying WebRTC <tt>MediaStreamTrack</tt>\n     * muted status.\n     * @return {boolean} <tt>true</tt> if this <tt>participant</tt> contains any\n     * video <tt>JitsiTrack</tt>s which are muted as defined in\n     * {@link JitsiTrack.isWebRTCTrackMuted}.\n     */\n    hasAnyVideoTrackWebRTCMuted() {\n        return (\n            this.getTracks().some(\n                jitsiTrack =>\n                    jitsiTrack.getType() === MediaType.VIDEO\n                        && jitsiTrack.isWebRTCTrackMuted()));\n    }\n\n    /**\n     * Updates participant's connection status.\n     * @param {string} state the current participant connection state.\n     * {@link ParticipantConnectionStatus}.\n     * @private\n     */\n    _setConnectionStatus(status) {\n        this._connectionStatus = status;\n    }\n\n    /**\n     * Return participant's connectivity status.\n     *\n     * @returns {string} the connection status\n     * <tt>ParticipantConnectionStatus</tt> of the user.\n     * {@link ParticipantConnectionStatus}.\n     */\n    getConnectionStatus() {\n        return this._connectionStatus;\n    }\n\n    /**\n     * Sets the value of a property of this participant, and fires an event if\n     * the value has changed.\n     * @name the name of the property.\n     * @value the value to set.\n     */\n    setProperty(name, value) {\n        const oldValue = this._properties[name];\n\n        if (value !== oldValue) {\n            this._properties[name] = value;\n            this._conference.eventEmitter.emit(\n                JitsiConferenceEvents.PARTICIPANT_PROPERTY_CHANGED,\n                this,\n                name,\n                oldValue,\n                value);\n        }\n    }\n\n    /**\n     * @returns {Array.<JitsiTrack>} The list of media tracks for this\n     * participant.\n     */\n    getTracks() {\n        return this._tracks.slice();\n    }\n\n    /**\n     * @param {MediaType} mediaType\n     * @returns {Array.<JitsiTrack>} an array of media tracks for this\n     * participant, for given media type.\n     */\n    getTracksByMediaType(mediaType) {\n        return this.getTracks().filter(track => track.getType() === mediaType);\n    }\n\n    /**\n     * @returns {String} The ID of this participant.\n     */\n    getId() {\n        return this._id;\n    }\n\n    /**\n     * @returns {String} The JID of this participant.\n     */\n    getJid() {\n        return this._jid;\n    }\n\n    /**\n     * @returns {String} The human-readable display name of this participant.\n     */\n    getDisplayName() {\n        return this._displayName;\n    }\n\n    /**\n     * @returns {String} The stats ID of this participant.\n     */\n    getStatsID() {\n        return this._statsID;\n    }\n\n    /**\n     * @returns {String} The status of the participant.\n     */\n    getStatus() {\n        return this._status;\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant is a moderator or not.\n     */\n    isModerator() {\n        return this._role === 'moderator';\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant is a hidden participant. Some\n     * special system participants may want to join hidden (like for example the\n     * recorder).\n     */\n    isHidden() {\n        return this._hidden;\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant is a hidden participant. Some\n     * special system participants may want to join hidden (like for example the\n     * recorder).\n     */\n    isHiddenFromRecorder() {\n        return Boolean(this._identity?.user?.['hidden-from-recorder']);\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant replaces another participant\n     * from the meeting.\n     */\n    isReplacing() {\n        return this._isReplacing;\n    }\n\n    /**\n     * @returns {Boolean} Wheter this participants will be replaced by another\n     * participant in the meeting.\n     */\n    isReplaced() {\n        return this._isReplaced;\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant has muted their audio.\n     */\n    isAudioMuted() {\n        return this._isMediaTypeMuted(MediaType.AUDIO);\n    }\n\n    /**\n     * Determines whether all JitsiTracks which are of a specific MediaType and\n     * which belong to this JitsiParticipant are muted.\n     *\n     * @param {MediaType} mediaType - The MediaType of the JitsiTracks to be\n     * checked.\n     * @private\n     * @returns {Boolean} True if all JitsiTracks which are of the specified\n     * mediaType and which belong to this JitsiParticipant are muted; otherwise,\n     * false.\n     */\n    _isMediaTypeMuted(mediaType) {\n        return this.getTracks().reduce(\n            (muted, track) =>\n                muted && (track.getType() !== mediaType || track.isMuted()),\n            true);\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant has muted their video.\n     */\n    isVideoMuted() {\n        return this._isMediaTypeMuted(MediaType.VIDEO);\n    }\n\n    /**\n     * @returns {String} The role of this participant.\n     */\n    getRole() {\n        return this._role;\n    }\n\n    /**\n     * Sets a new participant role.\n     * @param {String} newRole - the new role.\n     */\n    setRole(newRole) {\n        this._role = newRole;\n    }\n\n    /**\n     * Sets whether participant is replacing another based on jwt.\n     * @param {String} newIsReplacing - whether is replacing.\n     */\n    setIsReplacing(newIsReplacing) {\n        this._isReplacing = newIsReplacing;\n    }\n\n    /**\n     * Sets whether participant is being replaced by another based on jwt.\n     * @param {boolean} newIsReplaced - whether is being replaced.\n     */\n    setIsReplaced(newIsReplaced) {\n        this._isReplaced = newIsReplaced;\n    }\n\n    /**\n     *\n     */\n    supportsDTMF() {\n        return this._supportsDTMF;\n    }\n\n    /**\n     * Returns a set with the features for the participant.\n     * @returns {Promise<Set<String>, Error>}\n     */\n    getFeatures() {\n        return Promise.resolve(this._features);\n    }\n\n    /**\n     * Checks current set features.\n     * @param {String} feature - the feature to check.\n     * @return {boolean} <tt>true</tt> if this <tt>participant</tt> contains the\n     * <tt>feature</tt>.\n     */\n    hasFeature(feature) {\n        return this._features.has(feature);\n    }\n\n    /**\n     * Set new features.\n     * @param {Set<String>|undefined} newFeatures - Sets new features.\n     */\n    setFeatures(newFeatures) {\n        this._features = newFeatures || new Set();\n    }\n\n    /**\n     * Returns the bot type for the participant.\n     *\n     * @returns {string|undefined} - The bot type of the participant.\n     */\n    getBotType() {\n        return this._botType;\n    }\n\n    /**\n     * Sets the bot type for the participant.\n     * @param {String} newBotType - The new bot type to set.\n     */\n    setBotType(newBotType) {\n        this._botType = newBotType;\n    }\n}\n","/**\n * The events for the connection.\n */\n\nexport enum JitsiConnectionEvents {\n    /**\n     * Indicates that the connection has been disconnected. The event provides\n     * the following parameters to its listeners:\n     *\n     * @param msg {string} a message associated with the disconnect such as the\n     * last (known) error message\n     */\n    CONNECTION_DISCONNECTED = 'connection.connectionDisconnected',\n\n    /**\n     * Indicates that the connection has been established. The event provides\n     * the following parameters to its listeners:\n     *\n     * @param id {string} the ID of the local endpoint/participant/peer (within\n     * the context of the established connection)\n     */\n    CONNECTION_ESTABLISHED = 'connection.connectionEstablished',\n\n    /**\n     * Indicates that the connection has been failed for some reason. The event\n     * provides the following parameters to its listeners:\n     *\n     * @param errType {JitsiConnectionErrors} the type of error associated with\n     * the failure\n     * @param errReason {string} the error (message) associated with the failure\n     * @param credentials {object} the credentials used to connect (if any)\n     * @param errReasonDetails {object} an optional object with details about\n     * the error, like shard moving, suspending. Used for analytics purposes.\n     */\n    CONNECTION_FAILED = 'connection.connectionFailed',\n\n    /**\n     * Indicates that the performed action cannot be executed because the\n     * connection is not in the correct state(connected, disconnected, etc.)\n     */\n    WRONG_STATE = 'connection.wrongState',\n\n    /**\n     * Indicates that the display name is required over this connection and need to be supplied when\n     * joining the room.\n     * There are cases like lobby room where display name is required.\n     */\n    DISPLAY_NAME_REQUIRED = 'connection.display_name_required'\n};\n\n// exported for backward compatibility\nexport const CONNECTION_DISCONNECTED = JitsiConnectionEvents.CONNECTION_DISCONNECTED;\nexport const CONNECTION_ESTABLISHED = JitsiConnectionEvents.CONNECTION_ESTABLISHED;\nexport const CONNECTION_FAILED = JitsiConnectionEvents.CONNECTION_FAILED;\nexport const WRONG_STATE = JitsiConnectionEvents.WRONG_STATE;\nexport const DISPLAY_NAME_REQUIRED = JitsiConnectionEvents.DISPLAY_NAME_REQUIRED;\n","/**\n * The errors for the connection.\n */\n\nexport enum JitsiConnectionErrors {\n    /**\n     * Indicates that the connection was dropped with an error which was most likely\n     * caused by some networking issues. The dropped term in this context means that\n     * the connection was closed unexpectedly (not on user's request).\n     *\n     * One example is 'item-not-found' error thrown by Prosody when the BOSH session\n     * times out after 60 seconds of inactivity. On the other hand 'item-not-found'\n     * could also happen when BOSH request is sent to the server with the session-id\n     * that is not know to the server. But this should not happen in lib-jitsi-meet\n     * case as long as the service is configured correctly (there is no bug).\n     */\n    CONNECTION_DROPPED_ERROR = 'connection.droppedError',\n\n    /**\n     * Not specified errors.\n     */\n    OTHER_ERROR = 'connection.otherError',\n\n    /**\n     * Indicates that a password is required in order to join the conference.\n     */\n    PASSWORD_REQUIRED = 'connection.passwordRequired',\n\n    /**\n     * Indicates that the connection was dropped, because of too many 5xx HTTP\n     * errors on BOSH requests.\n     */\n    SERVER_ERROR = 'connection.serverError'\n};\n\n// exported for backward compatibility\nexport const CONNECTION_DROPPED_ERROR = JitsiConnectionErrors.CONNECTION_DROPPED_ERROR;\nexport const OTHER_ERROR = JitsiConnectionErrors.OTHER_ERROR;\nexport const PASSWORD_REQUIRED = JitsiConnectionErrors.PASSWORD_REQUIRED;\nexport const SERVER_ERROR = JitsiConnectionErrors.SERVER_ERROR;\n","\n/**\n * Promise-like object which can be passed around for resolving it later. It\n * implements the \"thenable\" interface, so it can be used wherever a Promise\n * could be used.\n *\n * In addition a \"reject on timeout\" functionality is provided.\n */\nexport default class Deferred {\n    /**\n     * Instantiates a Deferred object.\n     */\n    constructor() {\n        this.promise = new Promise((resolve, reject) => {\n            this.resolve = (...args) => {\n                this.clearRejectTimeout();\n                resolve(...args);\n            };\n            this.reject = (...args) => {\n                this.clearRejectTimeout();\n                reject(...args);\n            };\n        });\n        this.then = this.promise.then.bind(this.promise);\n        this.catch = this.promise.catch.bind(this.promise);\n    }\n\n    /**\n     * Clears the reject timeout.\n     */\n    clearRejectTimeout() {\n        clearTimeout(this._timeout);\n    }\n\n    /**\n     * Rejects the promise after the given timeout.\n     */\n    setRejectTimeout(ms) {\n        this._timeout = setTimeout(() => {\n            this.reject(new Error('timeout'));\n        }, ms);\n    }\n}\n","import EventEmitter from 'events';\n\n/**\n * The class implements basic event operations - add/remove listener.\n * NOTE: The purpose of the class is to be extended in order to add\n * this functionality to other classes.\n */\nexport default class Listenable {\n    /**\n     * Creates new instance.\n     * @param {EventEmitter} eventEmitter\n     * @constructor\n     */\n    constructor(eventEmitter = new EventEmitter()) {\n        this.eventEmitter = eventEmitter;\n\n        // aliases for addListener/removeListener\n        this.addEventListener = this.on = this.addListener;\n        this.removeEventListener = this.off = this.removeListener;\n    }\n\n    /**\n     * Adds new listener.\n     * @param {String} eventName the name of the event\n     * @param {Function} listener the listener.\n     * @returns {Function} - The unsubscribe function.\n     */\n    addListener(eventName, listener) {\n        this.eventEmitter.addListener(eventName, listener);\n\n        return () => this.removeEventListener(eventName, listener);\n    }\n\n    /**\n     * Removes listener.\n     * @param {String} eventName the name of the event that triggers the\n     * listener\n     * @param {Function} listener the listener.\n     */\n    removeListener(eventName, listener) {\n        this.eventEmitter.removeListener(eventName, listener);\n    }\n}\n","/* global RTCRtpScriptTransform */\n\nimport { getLogger } from '@jitsi/logger';\n\nconst logger = getLogger(__filename);\n\n// Flag to set on senders / receivers to avoid setting up the encryption transform\n// more than once.\nconst kJitsiE2EE = Symbol('kJitsiE2EE');\n\n/**\n * Context encapsulating the cryptography bits required for E2EE.\n * This uses the WebRTC Insertable Streams API which is explained in\n *   https://github.com/alvestrand/webrtc-media-streams/blob/master/explainer.md\n * that provides access to the encoded frames and allows them to be transformed.\n *\n * The encoded frame format is explained below in the _encodeFunction method.\n * High level design goals were:\n * - do not require changes to existing SFUs and retain (VP8) metadata.\n * - allow the SFU to rewrite SSRCs, timestamp, pictureId.\n * - allow for the key to be rotated frequently.\n */\nexport default class E2EEcontext {\n    /**\n     * Build a new E2EE context instance, which will be used in a given conference.\n     * @param {boolean} [options.sharedKey] - whether there is a uniques key shared amoung all participants.\n     */\n    constructor({ sharedKey } = {}) {\n        // Determine the URL for the worker script. Relative URLs are relative to\n        // the entry point, not the script that launches the worker.\n        let baseUrl = '';\n        const ljm = document.querySelector('script[src*=\"lib-jitsi-meet\"]');\n\n        if (ljm) {\n            const idx = ljm.src.lastIndexOf('/');\n\n            baseUrl = `${ljm.src.substring(0, idx)}/`;\n        }\n\n        let workerUrl = `${baseUrl}lib-jitsi-meet.e2ee-worker.js`;\n\n        // If there is no baseUrl then we create the worker in a normal way\n        // as you cant load scripts inside blobs from relative paths.\n        // See: https://www.html5rocks.com/en/tutorials/workers/basics/#toc-inlineworkers-loadingscripts\n        if (baseUrl && baseUrl !== '/') {\n            // Initialize the E2EE worker. In order to avoid CORS issues, start the worker and have it\n            // synchronously load the JS.\n            const workerBlob\n                = new Blob([ `importScripts(\"${workerUrl}\");` ], { type: 'application/javascript' });\n\n            workerUrl = window.URL.createObjectURL(workerBlob);\n        }\n\n        this._worker = new Worker(workerUrl, { name: 'E2EE Worker' });\n\n        this._worker.onerror = e => logger.error(e);\n\n        this._worker.postMessage({\n            operation: 'initialize',\n            sharedKey\n        });\n    }\n\n    /**\n     * Cleans up all state associated with the given participant. This is needed when a\n     * participant leaves the current conference.\n     *\n     * @param {string} participantId - The participant that just left.\n     */\n    cleanup(participantId) {\n        this._worker.postMessage({\n            operation: 'cleanup',\n            participantId\n        });\n    }\n\n    /**\n     * Cleans up all state associated with all participants in the conference. This is needed when disabling e2ee.\n     *\n     */\n    cleanupAll() {\n        this._worker.postMessage({\n            operation: 'cleanupAll'\n        });\n    }\n\n    /**\n     * Handles the given {@code RTCRtpReceiver} by creating a {@code TransformStream} which will inject\n     * a frame decoder.\n     *\n     * @param {RTCRtpReceiver} receiver - The receiver which will get the decoding function injected.\n     * @param {string} kind - The kind of track this receiver belongs to.\n     * @param {string} participantId - The participant id that this receiver belongs to.\n     */\n    handleReceiver(receiver, kind, participantId) {\n        if (receiver[kJitsiE2EE]) {\n            return;\n        }\n        receiver[kJitsiE2EE] = true;\n\n        if (window.RTCRtpScriptTransform) {\n            const options = {\n                operation: 'decode',\n                participantId\n            };\n\n            receiver.transform = new RTCRtpScriptTransform(this._worker, options);\n        } else {\n            const receiverStreams = receiver.createEncodedStreams();\n\n            this._worker.postMessage({\n                operation: 'decode',\n                readableStream: receiverStreams.readable,\n                writableStream: receiverStreams.writable,\n                participantId\n            }, [ receiverStreams.readable, receiverStreams.writable ]);\n        }\n    }\n\n    /**\n     * Handles the given {@code RTCRtpSender} by creating a {@code TransformStream} which will inject\n     * a frame encoder.\n     *\n     * @param {RTCRtpSender} sender - The sender which will get the encoding function injected.\n     * @param {string} kind - The kind of track this sender belongs to.\n     * @param {string} participantId - The participant id that this sender belongs to.\n     */\n    handleSender(sender, kind, participantId) {\n        if (sender[kJitsiE2EE]) {\n            return;\n        }\n        sender[kJitsiE2EE] = true;\n\n        if (window.RTCRtpScriptTransform) {\n            const options = {\n                operation: 'encode',\n                participantId\n            };\n\n            sender.transform = new RTCRtpScriptTransform(this._worker, options);\n        } else {\n            const senderStreams = sender.createEncodedStreams();\n\n            this._worker.postMessage({\n                operation: 'encode',\n                readableStream: senderStreams.readable,\n                writableStream: senderStreams.writable,\n                participantId\n            }, [ senderStreams.readable, senderStreams.writable ]);\n        }\n    }\n\n    /**\n     * Set the E2EE key for the specified participant.\n     *\n     * @param {string} participantId - the ID of the participant who's key we are setting.\n     * @param {Uint8Array | boolean} key - they key for the given participant.\n     * @param {Number} keyIndex - the key index.\n     */\n    setKey(participantId, key, keyIndex) {\n        this._worker.postMessage({\n            operation: 'setKey',\n            key,\n            keyIndex,\n            participantId\n        });\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport browser from '../browser';\nimport Deferred from '../util/Deferred';\nimport Listenable from '../util/Listenable';\n\nimport E2EEContext from './E2EEContext';\n\nconst logger = getLogger(__filename);\n\n/**\n * Abstract class that integrates {@link E2EEContext} with a key management system.\n */\nexport class KeyHandler extends Listenable {\n    /**\n     * Build a new KeyHandler instance, which will be used in a given conference.\n     * @param {JitsiConference} conference - the current conference.\n     * @param {object} options - the options passed to {E2EEContext}, see implemention.\n     */\n    constructor(conference, options = {}) {\n        super();\n\n        this.conference = conference;\n        this.e2eeCtx = new E2EEContext(options);\n\n        this.enabled = false;\n        this._enabling = undefined;\n\n        // Conference media events in order to attach the encryptor / decryptor.\n        // FIXME add events to TraceablePeerConnection which will allow to see when there's new receiver or sender\n        // added instead of shenanigans around conference track events and track muted.\n        //\n\n        this.conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n            this._onMediaSessionStarted.bind(this));\n        this.conference.on(\n            JitsiConferenceEvents.TRACK_ADDED,\n            track => track.isLocal() && this._onLocalTrackAdded(track));\n        this.conference.rtc.on(\n            RTCEvents.REMOTE_TRACK_ADDED,\n            (track, tpc) => this._setupReceiverE2EEForTrack(tpc, track));\n        this.conference.on(\n            JitsiConferenceEvents.TRACK_MUTE_CHANGED,\n            this._trackMuteChanged.bind(this));\n    }\n\n    /**\n     * Indicates whether E2EE is currently enabled or not.\n     *\n     * @returns {boolean}\n     */\n    isEnabled() {\n        return this.enabled;\n    }\n\n    /**\n     * Enables / disables End-To-End encryption.\n     *\n     * @param {boolean} enabled - whether E2EE should be enabled or not.\n     * @returns {void}\n     */\n    async setEnabled(enabled) {\n        if (enabled === this.enabled) {\n            return;\n        }\n\n        this._enabling && await this._enabling;\n\n        this._enabling = new Deferred();\n\n        this.enabled = enabled;\n\n        if (!enabled) {\n            this.e2eeCtx.cleanupAll();\n        }\n\n        this._setEnabled && await this._setEnabled(enabled);\n\n        this.conference.setLocalParticipantProperty('e2ee.enabled', enabled);\n\n        this.conference._restartMediaSessions();\n\n        this._enabling.resolve();\n    }\n\n    /**\n     * Sets the key for End-to-End encryption.\n     *\n     * @returns {void}\n     */\n    setEncryptionKey() {\n        throw new Error('Not implemented by subclass');\n    }\n\n    /**\n     * Setup E2EE on the new track that has been added to the conference, apply it on all the open peerconnections.\n     * @param {JitsiLocalTrack} track - the new track that's being added to the conference.\n     * @private\n     */\n    _onLocalTrackAdded(track) {\n        for (const session of this.conference.getMediaSessions()) {\n            this._setupSenderE2EEForTrack(session, track);\n        }\n    }\n\n    /**\n     * Setups E2E encryption for the new session.\n     * @param {JingleSessionPC} session - the new media session.\n     * @private\n     */\n    _onMediaSessionStarted(session) {\n        const localTracks = this.conference.getLocalTracks();\n\n        for (const track of localTracks) {\n            this._setupSenderE2EEForTrack(session, track);\n        }\n    }\n\n    /**\n     * Setup E2EE for the receiving side.\n     *\n     * @private\n     */\n    _setupReceiverE2EEForTrack(tpc, track) {\n        if (!this.enabled) {\n            return;\n        }\n\n        const receiver = tpc.findReceiverForTrack(track.track);\n\n        if (receiver) {\n            this.e2eeCtx.handleReceiver(receiver, track.getType(), track.getParticipantId());\n        } else {\n            logger.warn(`Could not handle E2EE for ${track}: receiver not found in: ${tpc}`);\n        }\n    }\n\n    /**\n     * Setup E2EE for the sending side.\n     *\n     * @param {JingleSessionPC} session - the session which sends the media produced by the track.\n     * @param {JitsiLocalTrack} track - the local track for which e2e encoder will be configured.\n     * @private\n     */\n    _setupSenderE2EEForTrack(session, track) {\n        if (!this.enabled) {\n            return;\n        }\n\n        const pc = session.peerconnection;\n        const sender = pc && pc.findSenderForTrack(track.track);\n\n        if (sender) {\n            this.e2eeCtx.handleSender(sender, track.getType(), track.getParticipantId());\n        } else {\n            logger.warn(`Could not handle E2EE for ${track}: sender not found in ${pc}`);\n        }\n    }\n\n    /**\n     * Setup E2EE on the sender that is created for the unmuted local video track.\n     * @param {JitsiLocalTrack} track - the track for which muted status has changed.\n     * @private\n     */\n    _trackMuteChanged(track) {\n        if (browser.doesVideoMuteByStreamRemove() && track.isLocal() && track.isVideoTrack() && !track.isMuted()) {\n            for (const session of this.conference.getMediaSessions()) {\n                this._setupSenderE2EEForTrack(session, track);\n            }\n        }\n    }\n}\n","import { KeyHandler } from './KeyHandler';\n\n/**\n * This module integrates {@link E2EEContext} with {external} in order to set the keys for encryption.\n */\nexport class ExternallyManagedKeyHandler extends KeyHandler {\n    /**\n     * Build a new ExternallyManagedKeyHandler instance, which will be used in a given conference.\n     * @param conference - the current conference.\n     */\n    constructor(conference) {\n        super(conference, { sharedKey: true });\n    }\n\n    /**\n     * Sets the key and index for End-to-End encryption.\n     *\n     * @param {CryptoKey} [keyInfo.encryptionKey] - encryption key.\n     * @param {Number} [keyInfo.index] - the index of the encryption key.\n     * @returns {void}\n     */\n    setKey(keyInfo) {\n        this.e2eeCtx.setKey(undefined, { encryptionKey: keyInfo.encryptionKey }, keyInfo.index);\n    }\n}\n","import uuid from './dist/index.js';\nexport const v1 = uuid.v1;\nexport const v3 = uuid.v3;\nexport const v4 = uuid.v4;\nexport const v5 = uuid.v5;\n","/* global Olm */\n\nimport { getLogger } from '@jitsi/logger';\nimport base64js from 'base64-js';\nimport isEqual from 'lodash.isequal';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport Deferred from '../util/Deferred';\nimport Listenable from '../util/Listenable';\nimport { FEATURE_E2EE, JITSI_MEET_MUC_TYPE } from '../xmpp/xmpp';\n\nconst logger = getLogger(__filename);\n\nconst REQ_TIMEOUT = 5 * 1000;\nconst OLM_MESSAGE_TYPE = 'olm';\nconst OLM_MESSAGE_TYPES = {\n    ERROR: 'error',\n    KEY_INFO: 'key-info',\n    KEY_INFO_ACK: 'key-info-ack',\n    SESSION_ACK: 'session-ack',\n    SESSION_INIT: 'session-init'\n};\n\nconst kOlmData = Symbol('OlmData');\n\nconst OlmAdapterEvents = {\n    OLM_ID_KEY_READY: 'olm.id_key_ready',\n    PARTICIPANT_E2EE_CHANNEL_READY: 'olm.participant_e2ee_channel_ready',\n    PARTICIPANT_KEY_UPDATED: 'olm.partitipant_key_updated'\n};\n\n/**\n * This class implements an End-to-End Encrypted communication channel between every two peers\n * in the conference. This channel uses libolm to achieve E2EE.\n *\n * The created channel is then used to exchange the secret key that each participant will use\n * to encrypt the actual media (see {@link E2EEContext}).\n *\n * A simple JSON message based protocol is implemented, which follows a request - response model:\n * - session-init: Initiates an olm session establishment procedure. This message will be sent\n *                 by the participant who just joined, to everyone else.\n * - session-ack: Completes the olm session etablishment. This messsage may contain ancilliary\n *                encrypted data, more specifically the sender's current key.\n * - key-info: Includes the sender's most up to date key information.\n * - key-info-ack: Acknowledges the reception of a key-info request. In addition, it may contain\n *                 the sender's key information, if available.\n * - error: Indicates a request processing error has occurred.\n *\n * These requessts and responses are transport independent. Currently they are sent using XMPP\n * MUC private messages.\n */\nexport class OlmAdapter extends Listenable {\n    /**\n     * Creates an adapter instance for the given conference.\n     */\n    constructor(conference) {\n        super();\n\n        this._conf = conference;\n        this._init = new Deferred();\n        this._key = undefined;\n        this._keyIndex = -1;\n        this._reqs = new Map();\n        this._sessionInitialization = undefined;\n\n        if (OlmAdapter.isSupported()) {\n            this._bootstrapOlm();\n\n            this._conf.on(JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED, this._onEndpointMessageReceived.bind(this));\n            this._conf.on(JitsiConferenceEvents.CONFERENCE_LEFT, this._onConferenceLeft.bind(this));\n            this._conf.on(JitsiConferenceEvents.USER_LEFT, this._onParticipantLeft.bind(this));\n            this._conf.on(JitsiConferenceEvents.PARTICIPANT_PROPERTY_CHANGED,\n                this._onParticipantPropertyChanged.bind(this));\n        } else {\n            this._init.reject(new Error('Olm not supported'));\n        }\n    }\n\n    /**\n     * Starts new olm sessions with every other participant that has the participantId \"smaller\" the localParticipantId.\n     */\n    async initSessions() {\n        if (this._sessionInitialization) {\n            throw new Error('OlmAdapter initSessions called multiple times');\n        } else {\n            this._sessionInitialization = new Deferred();\n\n            await this._init;\n\n            const promises = [];\n            const localParticipantId = this._conf.myUserId();\n\n            for (const participant of this._conf.getParticipants()) {\n                if (participant.hasFeature(FEATURE_E2EE) && localParticipantId < participant.getId()) {\n                    promises.push(this._sendSessionInit(participant));\n                }\n            }\n\n            await Promise.allSettled(promises);\n\n            // TODO: retry failed ones.\n\n            this._sessionInitialization.resolve();\n            this._sessionInitialization = undefined;\n        }\n    }\n\n    /**\n     * Indicates if olm is supported on the current platform.\n     *\n     * @returns {boolean}\n     */\n    static isSupported() {\n        return typeof window.Olm !== 'undefined';\n    }\n\n    /**\n     * Updates the current participant key and distributes it to all participants in the conference\n     * by sending a key-info message.\n     *\n     * @param {Uint8Array|boolean} key - The new key.\n     * @retrns {Promise<Number>}\n     */\n    async updateKey(key) {\n        // Store it locally for new sessions.\n        this._key = key;\n        this._keyIndex++;\n\n        // Broadcast it.\n        const promises = [];\n\n        for (const participant of this._conf.getParticipants()) {\n            const pId = participant.getId();\n            const olmData = this._getParticipantOlmData(participant);\n\n            // TODO: skip those who don't support E2EE.\n            if (!olmData.session) {\n                logger.warn(`Tried to send key to participant ${pId} but we have no session`);\n\n                // eslint-disable-next-line no-continue\n                continue;\n            }\n\n            const uuid = uuidv4();\n            const data = {\n                [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                olm: {\n                    type: OLM_MESSAGE_TYPES.KEY_INFO,\n                    data: {\n                        ciphertext: this._encryptKeyInfo(olmData.session),\n                        uuid\n                    }\n                }\n            };\n            const d = new Deferred();\n\n            d.setRejectTimeout(REQ_TIMEOUT);\n            d.catch(() => {\n                this._reqs.delete(uuid);\n            });\n            this._reqs.set(uuid, d);\n            promises.push(d);\n\n            this._sendMessage(data, pId);\n        }\n\n        await Promise.allSettled(promises);\n\n        // TODO: retry failed ones?\n\n        return this._keyIndex;\n    }\n\n    /**\n     * Updates the current participant key.\n     * @param {Uint8Array|boolean} key - The new key.\n     * @returns {number}\n    */\n    updateCurrentKey(key) {\n        this._key = key;\n\n        return this._keyIndex;\n    }\n\n    /**\n     * Frees the olmData session for the given participant.\n     *\n     */\n    clearParticipantSession(participant) {\n        const olmData = this._getParticipantOlmData(participant);\n\n        if (olmData.session) {\n            olmData.session.free();\n            olmData.session = undefined;\n        }\n    }\n\n\n    /**\n     * Frees the olmData sessions for all participants.\n     *\n     */\n    clearAllParticipantsSessions() {\n        for (const participant of this._conf.getParticipants()) {\n            this.clearParticipantSession(participant);\n        }\n    }\n\n    /**\n     * Internal helper to bootstrap the olm library.\n     *\n     * @returns {Promise<void>}\n     * @private\n     */\n    async _bootstrapOlm() {\n        logger.debug('Initializing Olm...');\n\n        try {\n            await Olm.init();\n\n            this._olmAccount = new Olm.Account();\n            this._olmAccount.create();\n\n            const idKeys = JSON.parse(this._olmAccount.identity_keys());\n\n            this._idKey = idKeys.curve25519;\n\n            logger.debug(`Olm ${Olm.get_library_version().join('.')} initialized`);\n            this._init.resolve();\n            this._onIdKeyReady(this._idKey);\n        } catch (e) {\n            logger.error('Failed to initialize Olm', e);\n            this._init.reject(e);\n        }\n\n    }\n\n    /**\n     * Publishes our own Olmn id key in presence.\n     * @private\n     */\n    _onIdKeyReady(idKey) {\n        logger.debug(`Olm id key ready: ${idKey}`);\n\n        // Publish it in presence.\n        this._conf.setLocalParticipantProperty('e2ee.idKey', idKey);\n    }\n\n    /**\n     * Event posted when the E2EE signalling channel has been established with the given participant.\n     * @private\n     */\n    _onParticipantE2EEChannelReady(id) {\n        logger.debug(`E2EE channel with participant ${id} is ready`);\n    }\n\n    /**\n     * Internal helper for encrypting the current key information for a given participant.\n     *\n     * @param {Olm.Session} session - Participant's session.\n     * @returns {string} - The encrypted text with the key information.\n     * @private\n     */\n    _encryptKeyInfo(session) {\n        const keyInfo = {};\n\n        if (this._key !== undefined) {\n            keyInfo.key = this._key ? base64js.fromByteArray(this._key) : false;\n            keyInfo.keyIndex = this._keyIndex;\n        }\n\n        return session.encrypt(JSON.stringify(keyInfo));\n    }\n\n    /**\n     * Internal helper for getting the olm related data associated with a participant.\n     *\n     * @param {JitsiParticipant} participant - Participant whose data wants to be extracted.\n     * @returns {Object}\n     * @private\n     */\n    _getParticipantOlmData(participant) {\n        participant[kOlmData] = participant[kOlmData] || {};\n\n        return participant[kOlmData];\n    }\n\n    /**\n     * Handles leaving the conference, cleaning up olm sessions.\n     *\n     * @private\n     */\n    async _onConferenceLeft() {\n        logger.debug('Conference left');\n\n        await this._init;\n\n        for (const participant of this._conf.getParticipants()) {\n            this._onParticipantLeft(participant.getId(), participant);\n        }\n\n        if (this._olmAccount) {\n            this._olmAccount.free();\n            this._olmAccount = undefined;\n        }\n    }\n\n    /**\n     * Main message handler. Handles 1-to-1 messages received from other participants\n     * and send the appropriate replies.\n     *\n     * @private\n     */\n    async _onEndpointMessageReceived(participant, payload) {\n        if (payload[JITSI_MEET_MUC_TYPE] !== OLM_MESSAGE_TYPE) {\n            return;\n        }\n\n        if (!payload.olm) {\n            logger.warn('Incorrectly formatted message');\n\n            return;\n        }\n\n        await this._init;\n\n        const msg = payload.olm;\n        const pId = participant.getId();\n        const olmData = this._getParticipantOlmData(participant);\n\n        switch (msg.type) {\n        case OLM_MESSAGE_TYPES.SESSION_INIT: {\n            if (olmData.session) {\n                logger.warn(`Participant ${pId} already has a session`);\n\n                this._sendError(participant, 'Session already established');\n            } else {\n                // Create a session for communicating with this participant.\n\n                const session = new Olm.Session();\n\n                session.create_outbound(this._olmAccount, msg.data.idKey, msg.data.otKey);\n                olmData.session = session;\n\n                // Send ACK\n                const ack = {\n                    [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                    olm: {\n                        type: OLM_MESSAGE_TYPES.SESSION_ACK,\n                        data: {\n                            ciphertext: this._encryptKeyInfo(session),\n                            uuid: msg.data.uuid\n                        }\n                    }\n                };\n\n                this._sendMessage(ack, pId);\n                this._onParticipantE2EEChannelReady(pId);\n            }\n            break;\n        }\n        case OLM_MESSAGE_TYPES.SESSION_ACK: {\n            if (olmData.session) {\n                logger.warn(`Participant ${pId} already has a session`);\n\n                this._sendError(participant, 'No session found');\n            } else if (msg.data.uuid === olmData.pendingSessionUuid) {\n                const { ciphertext } = msg.data;\n                const d = this._reqs.get(msg.data.uuid);\n                const session = new Olm.Session();\n\n                session.create_inbound(this._olmAccount, ciphertext.body);\n\n                // Remove OT keys that have been used to setup this session.\n                this._olmAccount.remove_one_time_keys(session);\n\n                // Decrypt first message.\n                const data = session.decrypt(ciphertext.type, ciphertext.body);\n\n                olmData.session = session;\n                olmData.pendingSessionUuid = undefined;\n\n                this._onParticipantE2EEChannelReady(pId);\n\n                this._reqs.delete(msg.data.uuid);\n                d.resolve();\n\n                const json = safeJsonParse(data);\n\n                if (json.key) {\n                    const key = base64js.toByteArray(json.key);\n                    const keyIndex = json.keyIndex;\n\n                    olmData.lastKey = key;\n                    this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_KEY_UPDATED, pId, key, keyIndex);\n                }\n            } else {\n                logger.warn('Received ACK with the wrong UUID');\n\n                this._sendError(participant, 'Invalid UUID');\n            }\n            break;\n        }\n        case OLM_MESSAGE_TYPES.ERROR: {\n            logger.error(msg.data.error);\n\n            break;\n        }\n        case OLM_MESSAGE_TYPES.KEY_INFO: {\n            if (olmData.session) {\n                const { ciphertext } = msg.data;\n                const data = olmData.session.decrypt(ciphertext.type, ciphertext.body);\n                const json = safeJsonParse(data);\n\n                if (json.key !== undefined && json.keyIndex !== undefined) {\n                    const key = json.key ? base64js.toByteArray(json.key) : false;\n                    const keyIndex = json.keyIndex;\n\n                    if (!isEqual(olmData.lastKey, key)) {\n                        olmData.lastKey = key;\n                        this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_KEY_UPDATED, pId, key, keyIndex);\n                    }\n\n                    // Send ACK.\n                    const ack = {\n                        [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                        olm: {\n                            type: OLM_MESSAGE_TYPES.KEY_INFO_ACK,\n                            data: {\n                                ciphertext: this._encryptKeyInfo(olmData.session),\n                                uuid: msg.data.uuid\n                            }\n                        }\n                    };\n\n                    this._sendMessage(ack, pId);\n                }\n            } else {\n                logger.debug(`Received key info message from ${pId} but we have no session for them!`);\n\n                this._sendError(participant, 'No session found while processing key-info');\n            }\n            break;\n        }\n        case OLM_MESSAGE_TYPES.KEY_INFO_ACK: {\n            if (olmData.session) {\n                const { ciphertext } = msg.data;\n                const data = olmData.session.decrypt(ciphertext.type, ciphertext.body);\n                const json = safeJsonParse(data);\n\n                if (json.key !== undefined && json.keyIndex !== undefined) {\n                    const key = json.key ? base64js.toByteArray(json.key) : false;\n                    const keyIndex = json.keyIndex;\n\n                    if (!isEqual(olmData.lastKey, key)) {\n                        olmData.lastKey = key;\n                        this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_KEY_UPDATED, pId, key, keyIndex);\n                    }\n                }\n\n                const d = this._reqs.get(msg.data.uuid);\n\n                this._reqs.delete(msg.data.uuid);\n                d.resolve();\n            } else {\n                logger.debug(`Received key info ack message from ${pId} but we have no session for them!`);\n\n                this._sendError(participant, 'No session found while processing key-info-ack');\n            }\n            break;\n        }\n        }\n    }\n\n    /**\n     * Handles a participant leaving. When a participant leaves their olm session is destroyed.\n     *\n     * @private\n     */\n    _onParticipantLeft(id, participant) {\n        logger.debug(`Participant ${id} left`);\n\n        this.clearParticipantSession(participant);\n    }\n\n    /**\n    * Handles an update in a participant's presence property.\n    *\n    * @param {JitsiParticipant} participant - The participant.\n    * @param {string} name - The name of the property that changed.\n    * @param {*} oldValue - The property's previous value.\n    * @param {*} newValue - The property's new value.\n    * @private\n    */\n    async _onParticipantPropertyChanged(participant, name, oldValue, newValue) {\n        switch (name) {\n        case 'e2ee.enabled':\n            if (newValue && this._conf.isE2EEEnabled()) {\n                const localParticipantId = this._conf.myUserId();\n                const participantId = participant.getId();\n                const participantFeatures = await participant.getFeatures();\n\n                if (participantFeatures.has(FEATURE_E2EE) && localParticipantId < participantId) {\n                    if (this._sessionInitialization) {\n                        await this._sessionInitialization;\n                    }\n                    await this._sendSessionInit(participant);\n\n                    const olmData = this._getParticipantOlmData(participant);\n                    const uuid = uuidv4();\n                    const data = {\n                        [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                        olm: {\n                            type: OLM_MESSAGE_TYPES.KEY_INFO,\n                            data: {\n                                ciphertext: this._encryptKeyInfo(olmData.session),\n                                uuid\n                            }\n                        }\n                    };\n\n                    this._sendMessage(data, participantId);\n                }\n            }\n            break;\n        }\n    }\n\n    /**\n     * Builds and sends an error message to the target participant.\n     *\n     * @param {JitsiParticipant} participant - The target participant.\n     * @param {string} error - The error message.\n     * @returns {void}\n     */\n    _sendError(participant, error) {\n        const pId = participant.getId();\n        const err = {\n            [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n            olm: {\n                type: OLM_MESSAGE_TYPES.ERROR,\n                data: {\n                    error\n                }\n            }\n        };\n\n        this._sendMessage(err, pId);\n    }\n\n    /**\n     * Internal helper to send the given object to the given participant ID.\n     * This function merely exists so the transport can be easily swapped.\n     * Currently messages are transmitted via XMPP MUC private messages.\n     *\n     * @param {object} data - The data that will be sent to the target participant.\n     * @param {string} participantId - ID of the target participant.\n     */\n    _sendMessage(data, participantId) {\n        this._conf.sendMessage(data, participantId);\n    }\n\n    /**\n     * Builds and sends the session-init request to the target participant.\n     *\n     * @param {JitsiParticipant} participant - Participant to whom we'll send the request.\n     * @returns {Promise} - The promise will be resolved when the session-ack is received.\n     * @private\n     */\n    _sendSessionInit(participant) {\n        const pId = participant.getId();\n        const olmData = this._getParticipantOlmData(participant);\n\n        if (olmData.session) {\n            logger.warn(`Tried to send session-init to ${pId} but we already have a session`);\n\n            return Promise.reject();\n        }\n\n        if (olmData.pendingSessionUuid !== undefined) {\n            logger.warn(`Tried to send session-init to ${pId} but we already have a pending session`);\n\n            return Promise.reject();\n        }\n\n        // Generate a One Time Key.\n        this._olmAccount.generate_one_time_keys(1);\n\n        const otKeys = JSON.parse(this._olmAccount.one_time_keys());\n        const otKey = Object.values(otKeys.curve25519)[0];\n\n        if (!otKey) {\n            return Promise.reject(new Error('No one-time-keys generated'));\n        }\n\n        // Mark the OT keys (one really) as published so they are not reused.\n        this._olmAccount.mark_keys_as_published();\n\n        const uuid = uuidv4();\n        const init = {\n            [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n            olm: {\n                type: OLM_MESSAGE_TYPES.SESSION_INIT,\n                data: {\n                    idKey: this._idKey,\n                    otKey,\n                    uuid\n                }\n            }\n        };\n\n        const d = new Deferred();\n\n        d.setRejectTimeout(REQ_TIMEOUT);\n        d.catch(() => {\n            this._reqs.delete(uuid);\n            olmData.pendingSessionUuid = undefined;\n        });\n        this._reqs.set(uuid, d);\n\n        this._sendMessage(init, pId);\n\n        // Store the UUID for matching with the ACK.\n        olmData.pendingSessionUuid = uuid;\n\n        return d;\n    }\n}\n\n/**\n * Helper to ensure JSON parsing always returns an object.\n *\n * @param {string} data - The data that needs to be parsed.\n * @returns {object} - Parsed data or empty object in case of failure.\n */\nfunction safeJsonParse(data) {\n    try {\n        return JSON.parse(data);\n    } catch (e) {\n        return {};\n    }\n}\n\nOlmAdapter.events = OlmAdapterEvents;\n","import { getLogger } from '@jitsi/logger';\nimport debounce from 'lodash.debounce';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nimport { KeyHandler } from './KeyHandler';\nimport { OlmAdapter } from './OlmAdapter';\nimport { importKey, ratchet } from './crypto-utils';\n\nconst logger = getLogger(__filename);\n\n// Period which we'll wait before updating / rotating our keys when a participant\n// joins or leaves.\nconst DEBOUNCE_PERIOD = 5000;\n\n/**\n * This module integrates {@link E2EEContext} with {@link OlmAdapter} in order to distribute the keys for encryption.\n */\nexport class ManagedKeyHandler extends KeyHandler {\n    /**\n     * Build a new AutomaticKeyHandler instance, which will be used in a given conference.\n     */\n    constructor(conference) {\n        super(conference);\n\n        this._key = undefined;\n        this._conferenceJoined = false;\n\n        this._olmAdapter = new OlmAdapter(conference);\n\n        this._rotateKey = debounce(this._rotateKeyImpl, DEBOUNCE_PERIOD);\n        this._ratchetKey = debounce(this._ratchetKeyImpl, DEBOUNCE_PERIOD);\n\n        // Olm signalling events.\n        this._olmAdapter.on(\n            OlmAdapter.events.PARTICIPANT_KEY_UPDATED,\n            this._onParticipantKeyUpdated.bind(this));\n\n        this.conference.on(\n            JitsiConferenceEvents.PARTICIPANT_PROPERTY_CHANGED,\n            this._onParticipantPropertyChanged.bind(this));\n        this.conference.on(\n            JitsiConferenceEvents.USER_JOINED,\n            this._onParticipantJoined.bind(this));\n        this.conference.on(\n            JitsiConferenceEvents.USER_LEFT,\n            this._onParticipantLeft.bind(this));\n        this.conference.on(\n                JitsiConferenceEvents.CONFERENCE_JOINED,\n                () => {\n                    this._conferenceJoined = true;\n                });\n    }\n\n    /**\n     * When E2EE is enabled it initializes sessions and sets the key.\n     * Cleans up the sessions when disabled.\n     *\n     * @param {boolean} enabled - whether E2EE should be enabled or not.\n     * @returns {void}\n     */\n    async _setEnabled(enabled) {\n        if (enabled) {\n            await this._olmAdapter.initSessions();\n        } else {\n            this._olmAdapter.clearAllParticipantsSessions();\n        }\n\n        // Generate a random key in case we are enabling.\n        this._key = enabled ? this._generateKey() : false;\n\n        // Send it to others using the E2EE olm channel.\n        const index = await this._olmAdapter.updateKey(this._key);\n\n        // Set our key so we begin encrypting.\n        this.e2eeCtx.setKey(this.conference.myUserId(), this._key, index);\n    }\n\n    /**\n     * Handles an update in a participant's presence property.\n     *\n     * @param {JitsiParticipant} participant - The participant.\n     * @param {string} name - The name of the property that changed.\n     * @param {*} oldValue - The property's previous value.\n     * @param {*} newValue - The property's new value.\n     * @private\n     */\n    async _onParticipantPropertyChanged(participant, name, oldValue, newValue) {\n        switch (name) {\n        case 'e2ee.idKey':\n            logger.debug(`Participant ${participant.getId()} updated their id key: ${newValue}`);\n            break;\n        case 'e2ee.enabled':\n            if (!newValue && this.enabled) {\n                this._olmAdapter.clearParticipantSession(participant);\n            }\n            break;\n        }\n    }\n\n    /**\n     * Advances (using ratcheting) the current key when a new participant joins the conference.\n     * @private\n     */\n    _onParticipantJoined() {\n        if (this._conferenceJoined && this.enabled) {\n            this._ratchetKey();\n        }\n    }\n\n    /**\n     * Rotates the current key when a participant leaves the conference.\n     * @private\n     */\n    _onParticipantLeft(id) {\n        this.e2eeCtx.cleanup(id);\n\n        if (this.enabled) {\n            this._rotateKey();\n        }\n    }\n\n    /**\n     * Rotates the local key. Rotating the key implies creating a new one, then distributing it\n     * to all participants and once they all received it, start using it.\n     *\n     * @private\n     */\n    async _rotateKeyImpl() {\n        logger.debug('Rotating key');\n\n        this._key = this._generateKey();\n        const index = await this._olmAdapter.updateKey(this._key);\n\n        this.e2eeCtx.setKey(this.conference.myUserId(), this._key, index);\n    }\n\n    /**\n     * Advances the current key by using ratcheting.\n     *\n     * @private\n     */\n    async _ratchetKeyImpl() {\n        logger.debug('Ratchetting key');\n\n        const material = await importKey(this._key);\n        const newKey = await ratchet(material);\n\n        this._key = new Uint8Array(newKey);\n\n        const index = this._olmAdapter.updateCurrentKey(this._key);\n\n        this.e2eeCtx.setKey(this.conference.myUserId(), this._key, index);\n    }\n\n    /**\n     * Handles an update in a participant's key.\n     *\n     * @param {string} id - The participant ID.\n     * @param {Uint8Array | boolean} key - The new key for the participant.\n     * @param {Number} index - The new key's index.\n     * @private\n     */\n    _onParticipantKeyUpdated(id, key, index) {\n        logger.debug(`Participant ${id} updated their key`);\n\n        this.e2eeCtx.setKey(id, key, index);\n    }\n\n    /**\n     * Generates a new 256 bit random key.\n     *\n     * @returns {Uint8Array}\n     * @private\n     */\n    _generateKey() {\n        return window.crypto.getRandomValues(new Uint8Array(32));\n    }\n}\n","/**\n * Derives a set of keys from the master key.\n * @param {CryptoKey} material - master key to derive from\n *\n * See https://tools.ietf.org/html/draft-omara-sframe-00#section-4.3.1\n */\nexport async function deriveKeys(material) {\n    const info = new ArrayBuffer();\n    const textEncoder = new TextEncoder();\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/deriveKey#HKDF\n    // https://developer.mozilla.org/en-US/docs/Web/API/HkdfParams\n    const encryptionKey = await crypto.subtle.deriveKey({\n        name: 'HKDF',\n        salt: textEncoder.encode('JFrameEncryptionKey'),\n        hash: 'SHA-256',\n        info\n    }, material, {\n        name: 'AES-GCM',\n        length: 128\n    }, false, [ 'encrypt', 'decrypt' ]);\n\n    return {\n        material,\n        encryptionKey\n    };\n}\n\n/**\n * Ratchets a key. See\n * https://tools.ietf.org/html/draft-omara-sframe-00#section-4.3.5.1\n * @param {CryptoKey} material - base key material\n * @returns {ArrayBuffer} - ratcheted key material\n */\nexport async function ratchet(material) {\n    const textEncoder = new TextEncoder();\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/deriveBits\n    return crypto.subtle.deriveBits({\n        name: 'HKDF',\n        salt: textEncoder.encode('JFrameRatchetKey'),\n        hash: 'SHA-256',\n        info: new ArrayBuffer()\n    }, material, 256);\n}\n\n/**\n * Converts a raw key into a WebCrypto key object with default options\n * suitable for our usage.\n * @param {ArrayBuffer} keyBytes - raw key\n * @param {Array} keyUsages - key usages, see importKey documentation\n * @returns {CryptoKey} - the WebCrypto key.\n */\nexport async function importKey(keyBytes) {\n    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey\n    return crypto.subtle.importKey('raw', keyBytes, 'HKDF', false, [ 'deriveBits', 'deriveKey' ]);\n}\n","import browser from '../browser';\n\nimport { ExternallyManagedKeyHandler } from './ExternallyManagedKeyHandler';\nimport { ManagedKeyHandler } from './ManagedKeyHandler';\nimport { OlmAdapter } from './OlmAdapter';\n\n/**\n * This module integrates {@link KeyHandler} with {@link JitsiConference} in order to enable E2E encryption.\n */\nexport class E2EEncryption {\n    /**\n     * A constructor.\n     * @param {JitsiConference} conference - The conference instance for which E2E encryption is to be enabled.\n     */\n    constructor(conference) {\n        const { e2ee = {} } = conference.options.config;\n\n        this._externallyManaged = e2ee.externallyManagedKey;\n\n        if (this._externallyManaged) {\n            this._keyHandler = new ExternallyManagedKeyHandler(conference);\n        } else {\n            this._keyHandler = new ManagedKeyHandler(conference);\n        }\n    }\n\n    /**\n     * Indicates if E2EE is supported in the current platform.\n     *\n     * @param {object} config - Global configuration.\n     * @returns {boolean}\n     */\n    static isSupported(config) {\n        const { e2ee = {} } = config;\n\n        if (!e2ee.externallyManagedKey && !OlmAdapter.isSupported()) {\n            return false;\n        }\n\n        return !(config.testing && config.testing.disableE2EE)\n            && (browser.supportsInsertableStreams()\n                || (config.enableEncodedTransformSupport && browser.supportsEncodedTransform()));\n    }\n\n    /**\n     * Indicates whether E2EE is currently enabled or not.\n     *\n     * @returns {boolean}\n     */\n    isEnabled() {\n        return this._keyHandler.isEnabled();\n    }\n\n    /**\n     * Enables / disables End-To-End encryption.\n     *\n     * @param {boolean} enabled - whether E2EE should be enabled or not.\n     * @returns {void}\n     */\n    async setEnabled(enabled) {\n        await this._keyHandler.setEnabled(enabled);\n    }\n\n    /**\n     * Sets the key and index for End-to-End encryption.\n     *\n     * @param {CryptoKey} [keyInfo.encryptionKey] - encryption key.\n     * @param {Number} [keyInfo.index] - the index of the encryption key.\n     * @returns {void}\n     */\n    setEncryptionKey(keyInfo) {\n        this._keyHandler.setKey(keyInfo);\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport browser from '../browser';\n\nconst logger = getLogger('FeatureFlags');\n\n/**\n * A global module for accessing information about different feature flags state.\n */\nclass FeatureFlags {\n    /**\n     * Configures the module.\n     *\n     * @param {boolean} flags.sourceNameSignaling - Enables source names in the signaling.\n     */\n    init(flags) {\n        this._sourceNameSignaling = Boolean(flags.sourceNameSignaling);\n        this._sendMultipleVideoStreams = Boolean(flags.sendMultipleVideoStreams);\n\n        // For Chromium, check if Unified plan is enabled.\n        this._usesUnifiedPlan = browser.supportsUnifiedPlan()\n            && (!browser.isChromiumBased() || (flags.enableUnifiedOnChrome ?? true));\n\n        logger.info(`Source name signaling: ${this._sourceNameSignaling},`\n            + ` Send multiple video streams: ${this._sendMultipleVideoStreams},`\n            + ` uses Unified plan: ${this._usesUnifiedPlan}`);\n    }\n\n    /**\n     * Checks if multiple local video streams support is enabled.\n     *\n     * @returns {boolean}\n     */\n    isMultiStreamSupportEnabled() {\n        return this._sourceNameSignaling && this._sendMultipleVideoStreams && this._usesUnifiedPlan;\n    }\n\n    /**\n     * Checks if the source name signaling is enabled.\n     *\n     * @returns {boolean}\n     */\n    isSourceNameSignalingEnabled() {\n        return this._sourceNameSignaling;\n    }\n}\n\nexport default new FeatureFlags();\n","/* global $ */\n\nimport { b64_sha1, Strophe } from 'strophe.js'; // eslint-disable-line camelcase\n\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\nimport Listenable from '../util/Listenable';\n\n/**\n * The property\n */\nconst IDENTITY_PROPERTIES = [ 'category', 'type', 'lang', 'name' ];\nconst IDENTITY_PROPERTIES_FOR_COMPARE = [ 'category', 'type', 'lang' ];\nconst HASH = 'sha-1';\n\n/**\n *\n * @param a\n * @param b\n */\nfunction compareIdentities(a, b) {\n    let res = 0;\n\n    IDENTITY_PROPERTIES_FOR_COMPARE.some(key =>\n        (res = ((a[key] > b[key]) && 1) || ((a[key] < b[key]) && -1)) !== 0\n    );\n\n    return res;\n}\n\n/**\n * Produces a sha-1 from provided identity and features values.\n *\n * @param {Array<Object>} identities - The identity objects.\n * @param {Array<string>} features - The features.\n * @returns {string}\n */\nfunction generateSha(identities, features) {\n    const sortedIdentities = identities.sort(compareIdentities).reduce(\n        (accumulatedValue, identity) => `${\n            IDENTITY_PROPERTIES.reduce(\n                (tmp, key, idx) =>\n                    tmp\n                        + (idx === 0 ? '' : '/')\n                        + (identity[key] ? identity[key] : ''),\n                '')\n        }<`, '');\n    const sortedFeatures = features.sort().reduce(\n        (tmp, feature) => `${tmp + feature}<`, '');\n\n    return b64_sha1(sortedIdentities + sortedFeatures);\n}\n\n/**\n * Parses the disco-info node and returns the sets of features and identities.\n * @param {String} node The node with results to parse.\n * @returns {{features: Set<any>, identities: Set<any>}}\n */\nexport function parseDiscoInfo(node) {\n    const features = new Set();\n    const identities = new Set();\n\n    $(node).find('>query>feature')\n        .each((_, el) => features.add(el.getAttribute('var')));\n    $(node).find('>query>identity')\n        .each((_, el) => identities.add({\n            type: el.getAttribute('type'),\n            name: el.getAttribute('name'),\n            category: el.getAttribute('category')\n        }));\n\n    return {\n        features,\n        identities\n    };\n}\n\n/**\n * Implements xep-0115 ( http://xmpp.org/extensions/xep-0115.html )\n */\nexport default class Caps extends Listenable {\n    /**\n     * Constructs new Caps instance.\n     * @param {Strophe.Connection} connection the strophe connection object\n     * @param {String} node the value of the node attribute of the \"c\" xml node\n     * that will be sent to the other participants\n     */\n    constructor(connection = {}, node = 'http://jitsi.org/jitsimeet') {\n        super();\n        this.node = node;\n        this.disco = connection.disco;\n        if (!this.disco) {\n            throw new Error(\n                'Missing strophe-plugins '\n                + '(disco plugin is required)!');\n        }\n\n        this.version = '';\n        this.rooms = new Set();\n\n        // We keep track of features added outside the library and we publish them\n        // in the presence of the participant for simplicity, avoiding the disco info request-response.\n        this.externalFeatures = new Set();\n\n        const emuc = connection.emuc;\n\n        emuc.addListener(XMPPEvents.EMUC_ROOM_ADDED,\n            room => this._addChatRoom(room));\n        emuc.addListener(XMPPEvents.EMUC_ROOM_REMOVED,\n            room => this._removeChatRoom(room));\n        Object.keys(emuc.rooms).forEach(jid => {\n            this._addChatRoom(emuc.rooms[jid]);\n        });\n\n        Strophe.addNamespace('CAPS', 'http://jabber.org/protocol/caps');\n        this.disco.addFeature(Strophe.NS.CAPS);\n    }\n\n    /**\n     * Adds new feature to the list of supported features for the local\n     * participant\n     * @param {String} feature the name of the feature.\n     * @param {boolean} submit if true - new presence with updated \"c\" node\n     * will be sent.\n     * @param {boolean} external whether this feature was added externally to the library.\n     * We put features used directly by the clients (is jibri, remote-control enabled etc.) in the presence\n     * to avoid additional disco-info queries by those clients.\n     */\n    addFeature(feature, submit = false, external = false) {\n        this.disco.addFeature(feature);\n        this._generateVersion();\n\n        if (external && !this.externalFeatures.has(feature)) {\n            this.externalFeatures.add(feature);\n            this.rooms.forEach(room => this._updateRoomWithExternalFeatures(room));\n        }\n\n        if (submit) {\n            this.submit();\n        }\n    }\n\n    /**\n     * Removes a feature from the list of supported features for the local\n     * participant\n     * @param {String} feature the name of the feature.\n     * @param {boolean} submit if true - new presence with updated \"c\" node\n     * will be sent.\n     * @param {boolean} external whether this feature was added externally to the library.\n     */\n    removeFeature(feature, submit = false, external = false) {\n        this.disco.removeFeature(feature);\n        this._generateVersion();\n\n        if (external && this.externalFeatures.has(feature)) {\n            this.externalFeatures.delete(feature);\n            this.rooms.forEach(room => this._updateRoomWithExternalFeatures(room));\n        }\n\n        if (submit) {\n            this.submit();\n        }\n    }\n\n    /**\n     * Sends new presence stanza for every room from the list of rooms.\n     */\n    submit() {\n        this.rooms.forEach(room => room.sendPresence());\n    }\n\n    /**\n     * Updates the presences in the room based on the current values in externalFeatures.\n     * @param {ChatRoom} room the room to update.\n     * @private\n     */\n    _updateRoomWithExternalFeatures(room) {\n        if (this.externalFeatures.size === 0) {\n            room.removeFromPresence('features');\n        } else {\n            const children = [];\n\n            this.externalFeatures.forEach(f => {\n                children.push({\n                    'tagName': 'feature',\n                    attributes: { 'var': f }\n                });\n            });\n\n            room.addOrReplaceInPresence('features', { children });\n        }\n    }\n\n    /**\n     * Returns a set with the features for a host.\n     * @param {String} jid the jid of the host\n     * @param {int} timeout the timeout in ms for reply from the host.\n     * @returns {Promise<Set<String>, Error>}\n     */\n    getFeaturesAndIdentities(jid, node, timeout = 5000) {\n        return this._getDiscoInfo(jid, node, timeout);\n    }\n\n    /**\n     * Returns a set with the features and identities for a host.\n     * @param {String} jid the jid of the host\n     * @param {String|null} node the node to query\n     * @param {int} timeout the timeout in ms for reply from the host.\n     * @returns {Promise<Object>}\n     * @private\n     */\n    _getDiscoInfo(jid, node, timeout) {\n        return new Promise((resolve, reject) =>\n            this.disco.info(jid, node, response => {\n                resolve(parseDiscoInfo(response));\n            }, reject, timeout)\n        );\n    }\n\n    /**\n     * Adds ChatRoom instance to the list of rooms. Adds listeners to the room\n     * and adds \"c\" element to the presences of the room.\n     * @param {ChatRoom} room the room.\n     */\n    _addChatRoom(room) {\n        this.rooms.add(room);\n        this._fixChatRoomPresenceMap(room);\n\n        this._updateRoomWithExternalFeatures(room);\n    }\n\n    /**\n     * Removes ChatRoom instance from the list of rooms. Removes listeners\n     * added from the Caps class.\n     * @param {ChatRoom} room the room.\n     */\n    _removeChatRoom(room) {\n        this.rooms.delete(room);\n    }\n\n    /**\n     * Creates/updates the \"c\" xml node into the presence of the passed room.\n     * @param {ChatRoom} room the room.\n     */\n    _fixChatRoomPresenceMap(room) {\n        room.addOrReplaceInPresence('c', {\n            attributes: {\n                xmlns: Strophe.NS.CAPS,\n                hash: HASH,\n                node: this.node,\n                ver: this.version\n            }\n        });\n    }\n\n    /**\n     * Handles this.version changes.\n     */\n    _notifyVersionChanged() {\n        // update the version for all rooms\n        this.rooms.forEach(room => this._fixChatRoomPresenceMap(room));\n    }\n\n    /**\n     * Generates the value for the \"ver\" attribute.\n     */\n    _generateVersion() {\n        this.version\n            = generateSha(this.disco._identities, this.disco._features);\n\n        this._notifyVersionChanged();\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport Listenable from '../util/Listenable';\n\nexport const NETWORK_INFO_EVENT = 'NETWORK_INFO_CHANGED';\n\nconst logger = getLogger(__filename);\n\n/**\n * Module provides information about the current status of the internet\n * connection. Lib-jitsi-meet doesn't have any logic for detecting internet\n * online/offline, but rather it relies on the information supplied by the app\n * that uses it. By default the online state is assumed and the lib acts as if\n * it was connected. See {@link JitsiMeetJS.setNetworkInfo}.\n */\nexport class NetworkInfo extends Listenable {\n    /**\n     * Creates new {@link NetworkInfo} instance.\n     */\n    constructor() {\n        super();\n        this._current = {\n            isOnline: true\n        };\n    }\n\n    /**\n     * Updates the network info state.\n     * @param {boolean} isOnline - {@code true} if internet is online or {@code false} otherwise.\n     */\n    updateNetworkInfo({ isOnline }) {\n        logger.debug('updateNetworkInfo', { isOnline });\n        this._current = {\n            isOnline: isOnline === true\n        };\n        this.eventEmitter.emit(NETWORK_INFO_EVENT, this._current);\n    }\n\n    /**\n     * Returns the online/offline internet status. By default the value is {@code true} and changes only if\n     * the lib's user wires the state through {@link JitsiMeetJS.setNetworkInfo} like the jitsi-meet does. Because of\n     * that any logic should still assume that the internet may be offline and should handle the failure gracefully.\n     * It's only a good hint in the other way around: to pause internet operations until it comes back online.\n     * @returns {boolean}\n     */\n    isOnline() {\n        return this._current.isOnline === true;\n    }\n}\n\nconst networkInfo = new NetworkInfo();\n\nexport default networkInfo;\n","import { getLogger } from '@jitsi/logger';\n\nimport {\n    default as NetworkInfo,\n    NETWORK_INFO_EVENT\n} from '../connectivity/NetworkInfo';\nimport { getJitterDelay } from '../util/Retry';\n\nconst logger = getLogger(__filename);\n\n/**\n * The class contains the logic for triggering connection resume via XEP-0198 stream management.\n * It does two things, the first one is it tracks the internet online/offline status and it makes sure that\n * the reconnect is attempted only while online. The seconds thing is that it tracks the retry attempts and extends\n * the retry interval using the full jitter pattern.\n */\nexport default class ResumeTask {\n    /**\n     * Initializes new {@code RetryTask}.\n     * @param {Strophe.Connection} stropheConnection - The Strophe connection instance.\n     */\n    constructor(stropheConnection) {\n        this._stropheConn = stropheConnection;\n\n        /**\n         * The counter increased before each resume retry attempt, used to calculate exponential backoff.\n         * @type {number}\n         * @private\n         */\n        this._resumeRetryN = 0;\n\n        this._retryDelay = undefined;\n    }\n\n    /**\n     * @returns {number|undefined} - How much the app will wait before trying to resume the XMPP connection. When\n     * 'undefined' it means that no resume task was not scheduled.\n     */\n    get retryDelay() {\n        return this._retryDelay;\n    }\n\n    /**\n     * Called by {@link XmppConnection} when the connection drops and it's a signal it wants to schedule a reconnect.\n     *\n     * @returns {void}\n     */\n    schedule() {\n        this._cancelResume();\n\n        this._resumeRetryN += 1;\n\n        this._networkOnlineListener\n            = NetworkInfo.addEventListener(\n                NETWORK_INFO_EVENT,\n                ({ isOnline }) => {\n                    if (isOnline) {\n                        this._scheduleResume();\n                    } else {\n                        this._cancelResume();\n                    }\n                });\n\n        NetworkInfo.isOnline() && this._scheduleResume();\n    }\n\n    /**\n     * Schedules a delayed timeout which will execute the resume action.\n     * @private\n     * @returns {void}\n     */\n    _scheduleResume() {\n        if (this._resumeTimeout) {\n\n            // NO-OP\n            return;\n        }\n\n        // The retry delay will be:\n        //   1st retry: 1.5s - 3s\n        //   2nd retry: 3s - 9s\n        //   3rd and next retry: 4.5s - 27s\n        this._resumeRetryN = Math.min(3, this._resumeRetryN);\n        this._retryDelay = getJitterDelay(\n            /* retry */ this._resumeRetryN,\n            /* minDelay */ this._resumeRetryN * 1500,\n            3);\n\n        logger.info(`Will try to resume the XMPP connection in ${this.retryDelay}ms`);\n\n        this._resumeTimeout = setTimeout(() => this._resumeConnection(), this.retryDelay);\n    }\n\n    /**\n     * Cancels the delayed resume task.\n     *\n     * @private\n     * @returns {void}\n     */\n    _cancelResume() {\n        if (this._resumeTimeout) {\n            logger.info('Canceling connection resume task');\n            clearTimeout(this._resumeTimeout);\n            this._resumeTimeout = undefined;\n            this._retryDelay = undefined;\n        }\n    }\n\n    /**\n     * Resumes the XMPP connection using the stream management plugin.\n     *\n     * @private\n     * @returns {void}\n     */\n    _resumeConnection() {\n        const { streamManagement } = this._stropheConn;\n        const resumeToken = streamManagement.getResumeToken();\n\n        // Things may have changed since when the task was scheduled\n        if (!resumeToken) {\n            return;\n        }\n\n        logger.info('Trying to resume the XMPP connection');\n\n        const url = new URL(this._stropheConn.service);\n        let { search } = url;\n        const pattern = /(previd=)([\\w-]+)/;\n        const oldToken = search.match(pattern);\n\n        // Replace previd if the previd value has changed.\n        if (oldToken && oldToken.indexOf(resumeToken) === -1) {\n            search = search.replace(pattern, `$1${resumeToken}`);\n\n        // Append previd if it doesn't exist.\n        } else if (!oldToken) {\n            search += search.indexOf('?') === -1 ? `?previd=${resumeToken}` : `&previd=${resumeToken}`;\n        }\n\n        url.search = search;\n\n        this._stropheConn.service = url.toString();\n\n        streamManagement.resume();\n    }\n\n    /**\n     * Cancels the retry task. It's called by {@link XmppConnection} when it's no longer interested in reconnecting for\n     * example when the disconnect method is called.\n     *\n     * @returns {void}\n     */\n    cancel() {\n        this._cancelResume();\n        this._resumeRetryN = 0;\n        if (this._networkOnlineListener) {\n            this._networkOnlineListener();\n            this._networkOnlineListener = null;\n        }\n    }\n}\n","/**\n* Gets next timeout using the full jitter pattern.\n*\n* NOTE that there are no checks for argument correctness, so either do the math or use defaults.\n*\n* @param {number} retry - The retry number.\n* @param {number} minDelay - The minimal delay in milliseconds.\n* @param {number} base - The exponent base.\n* @returns {number} - The amount of waiting before trying another time given in milliseconds.\n* @private\n*/\nexport function getJitterDelay(retry, minDelay = 500, base = 2) {\n    return Math.floor((Math.random() * ((Math.pow(base, retry) * 1000) - minDelay)) + minDelay);\n}\n","/**\n * Attaches to the {@link Strophe.Connection.rawInput} which is called whenever any data is received from the server.\n */\nexport default class LastRequestTracker {\n    /**\n     * Initializes new instance.\n     */\n    constructor() {\n        this._lastSuccess = null;\n        this._lastFailedMessage = null;\n    }\n\n    /**\n     * Starts tracking requests on the given connection.\n     *\n     * @param {XmppConnection} xmppConnection - The XMPP connection which manages the given {@code stropheConnection}.\n     * @param {Object} stropheConnection - Strophe connection instance.\n     */\n    startTracking(xmppConnection, stropheConnection) {\n        const originalRawInput = stropheConnection.rawInput;\n\n        stropheConnection.rawInput = (...args) => {\n            const rawMessage = args[0];\n\n            if (rawMessage.includes('failure')) {\n                this._lastFailedMessage = rawMessage;\n            }\n\n            // It's okay to use rawInput callback only once the connection has been established, otherwise it will\n            // treat 'item-not-found' or other connection error on websocket reconnect as successful stanza received.\n            if (xmppConnection.connected) {\n                this._lastSuccess = Date.now();\n            }\n            originalRawInput.apply(stropheConnection, args);\n        };\n    }\n\n    /**\n     * Returns the last raw failed incoming message on the xmpp connection.\n     *\n     * @returns {string|null}\n     */\n    getLastFailedMessage() {\n        return this._lastFailedMessage;\n    }\n\n    /**\n     * Returns how many milliseconds have passed since the last successful BOSH request.\n     *\n     * @returns {number|null}\n     */\n    getTimeSinceLastSuccess() {\n        return this._lastSuccess\n            ? Date.now() - this._lastSuccess\n            : null;\n    }\n}\n","import Listenable from '../util/Listenable';\n\n/**\n * Creates ConnectionPlugin class that extends the passed class.\n * @param {Class} base the definition of the class that will be extended by\n * ConnectionPlugin\n */\nfunction getConnectionPluginDefinition(base = class {}) {\n    /**\n     * Base class for strophe connection plugins.\n     */\n    return class extends base {\n        /**\n         *\n         */\n        constructor(...args) {\n            super(...args);\n            this.connection = null;\n        }\n\n        /**\n         *\n         * @param connection\n         */\n        init(connection) {\n            this.connection = connection;\n        }\n    };\n}\n\n/**\n * ConnectionPlugin class.\n */\nexport default getConnectionPluginDefinition();\n\n/**\n * ConnectionPlugin class that extends Listenable.\n */\nexport const ConnectionPluginListenable\n    = getConnectionPluginDefinition(Listenable);\n","import { getLogger } from '@jitsi/logger';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nimport ConnectionPlugin from './ConnectionPlugin';\n\n\nconst logger = getLogger(__filename);\n\n/**\n * Default ping every 10 sec\n */\nconst PING_DEFAULT_INTERVAL = 10000;\n\n/**\n * Default ping timeout error after 5 sec of waiting.\n */\nconst PING_DEFAULT_TIMEOUT = 5000;\n\n/**\n * Default value for how many ping failures will be tolerated before the WebSocket connection is killed.\n * The worst case scenario in case of ping timing out without a response is (25 seconds at the time of this writing):\n * PING_THRESHOLD * PING_INTERVAL + PING_TIMEOUT\n */\nconst PING_DEFAULT_THRESHOLD = 2;\n\n/**\n * XEP-0199 ping plugin.\n *\n * Registers \"urn:xmpp:ping\" namespace under Strophe.NS.PING.\n */\nexport default class PingConnectionPlugin extends ConnectionPlugin {\n    /**\n     * Constructs new object\n     * @param {Object} options\n     * @param {Function} options.onPingThresholdExceeded - Callback called when ping fails too many times (controlled\n     * by the {@link PING_THRESHOLD} constant).\n     * @param {Function} options._getTimeSinceLastServerResponse - A function to obtain the last seen\n     * response from the server.\n     * @param {Object} options.pingOptions - The ping options if any.\n     * @constructor\n     */\n    constructor({ getTimeSinceLastServerResponse, onPingThresholdExceeded, pingOptions = {} }) {\n        super();\n        this.failedPings = 0;\n        this._onPingThresholdExceeded = onPingThresholdExceeded;\n        this._getTimeSinceLastServerResponse = getTimeSinceLastServerResponse;\n\n        this.pingInterval = typeof pingOptions.interval === 'number' ? pingOptions.interval : PING_DEFAULT_INTERVAL;\n        this.pingTimeout = typeof pingOptions.timeout === 'number' ? pingOptions.timeout : PING_DEFAULT_TIMEOUT;\n        this.pingThreshold = typeof pingOptions.threshold === 'number'\n            ? pingOptions.threshold : PING_DEFAULT_THRESHOLD;\n\n        // The number of timestamps of send pings to keep.\n        // The current value is 2 minutes.\n        this.pingTimestampsToKeep = Math.round(120000 / this.pingInterval);\n        this.pingExecIntervals = new Array(this.pingTimestampsToKeep);\n    }\n\n    /**\n     * Initializes the plugin. Method called by Strophe.\n     * @param connection Strophe connection instance.\n     */\n    init(connection) {\n        super.init(connection);\n        Strophe.addNamespace('PING', 'urn:xmpp:ping');\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Sends \"ping\" to given <tt>jid</tt>\n     * @param jid the JID to which ping request will be sent.\n     * @param success callback called on success.\n     * @param error callback called on error.\n     * @param timeout ms how long are we going to wait for the response. On\n     * timeout <tt>error<//t> callback is called with undefined error argument.\n     */\n    ping(jid, success, error, timeout) {\n        this._addPingExecutionTimestamp();\n\n        const iq = $iq({\n            type: 'get',\n            to: jid\n        });\n\n        iq.c('ping', { xmlns: Strophe.NS.PING });\n        this.connection.sendIQ2(iq, { timeout })\n            .then(success, error);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Starts to send ping in given interval to specified remote JID.\n     * This plugin supports only one such task and <tt>stopInterval</tt>\n     * must be called before starting a new one.\n     * @param remoteJid remote JID to which ping requests will be sent to.\n     */\n    startInterval(remoteJid) {\n        clearInterval(this.intervalId);\n        this.intervalId = window.setInterval(() => {\n\n            // when there were some server responses in the interval since the last time we checked (_lastServerCheck)\n            // let's skip the ping\n\n            const now = Date.now();\n\n            if (this._getTimeSinceLastServerResponse() < now - this._lastServerCheck) {\n                // do this just to keep in sync the intervals so we can detect suspended device\n                this._addPingExecutionTimestamp();\n\n                this._lastServerCheck = now;\n                this.failedPings = 0;\n\n                return;\n            }\n\n            this.ping(remoteJid, () => {\n                // server response is measured on raw input and ping response time is measured after all the xmpp\n                // processing is done in js, so there can be some misalignment when we do the check above.\n                // That's why we store the last time we got the response\n                this._lastServerCheck = this._getTimeSinceLastServerResponse() + Date.now();\n\n                this.failedPings = 0;\n            }, error => {\n                this.failedPings += 1;\n                const errmsg = `Ping ${error ? 'error' : 'timeout'}`;\n\n                if (this.failedPings >= this.pingThreshold) {\n                    GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n                    logger.error(errmsg, error);\n                    this._onPingThresholdExceeded && this._onPingThresholdExceeded();\n                } else {\n                    logger.warn(errmsg, error);\n                }\n            }, this.pingTimeout);\n        }, this.pingInterval);\n        logger.info(`XMPP pings will be sent every ${this.pingInterval} ms`);\n    }\n\n    /**\n     * Stops current \"ping\"  interval task.\n     */\n    stopInterval() {\n        if (this.intervalId) {\n            window.clearInterval(this.intervalId);\n            this.intervalId = null;\n            this.failedPings = 0;\n            logger.info('Ping interval cleared');\n        }\n    }\n\n    /**\n     * Adds the current time to the array of send ping timestamps.\n     * @private\n     */\n    _addPingExecutionTimestamp() {\n        this.pingExecIntervals.push(new Date().getTime());\n\n        // keep array length to PING_TIMESTAMPS_TO_KEEP\n        if (this.pingExecIntervals.length > this.pingTimestampsToKeep) {\n            this.pingExecIntervals.shift();\n        }\n    }\n\n    /**\n     * Returns the maximum time between the recent sent pings, if there is a\n     * big value it means the computer was inactive for some time(suspended).\n     * Checks the maximum gap between sending pings, considering and the\n     * current time. Trying to detect computer inactivity (sleep).\n     *\n     * @returns {int} the time ping was suspended, if it was not 0 is returned.\n     */\n    getPingSuspendTime() {\n        const pingIntervals = this.pingExecIntervals.slice();\n\n        // we need current time, as if ping was sent now\n        // if computer sleeps we will get correct interval after next\n        // scheduled ping, bet we sometimes need that interval before waiting\n        // for the next ping, on closing the connection on error.\n        pingIntervals.push(new Date().getTime());\n\n        let maxInterval = 0;\n        let previousTS = pingIntervals[0];\n\n        pingIntervals.forEach(e => {\n            const currentInterval = e - previousTS;\n\n            if (currentInterval > maxInterval) {\n                maxInterval = currentInterval;\n            }\n\n            previousTS = e;\n        });\n\n        // remove the interval between the ping sent\n        // this way in normal execution there is no suspend and the return\n        // will be 0 or close to 0.\n        maxInterval -= this.pingInterval;\n\n        // make sure we do not return less than 0\n        return Math.max(maxInterval, 0);\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport { $pres, Strophe } from 'strophe.js';\nimport 'strophejs-plugin-stream-management';\n\nimport Listenable from '../util/Listenable';\n\nimport ResumeTask from './ResumeTask';\nimport LastSuccessTracker from './StropheLastSuccess';\nimport PingConnectionPlugin from './strophe.ping';\n\nconst logger = getLogger(__filename);\n\n/**\n * The lib-jitsi-meet layer for {@link Strophe.Connection}.\n */\nexport default class XmppConnection extends Listenable {\n    /**\n     * The list of {@link XmppConnection} events.\n     *\n     * @returns {Object}\n     */\n    static get Events() {\n        return {\n            CONN_STATUS_CHANGED: 'CONN_STATUS_CHANGED',\n            CONN_SHARD_CHANGED: 'CONN_SHARD_CHANGED'\n        };\n    }\n\n    /**\n     * The list of Xmpp connection statuses.\n     *\n     * @returns {Strophe.Status}\n     */\n    static get Status() {\n        return Strophe.Status;\n    }\n\n    /**\n     * Initializes new connection instance.\n     *\n     * @param {Object} options\n     * @param {String} options.serviceUrl - The BOSH or WebSocket service URL.\n     * @param {String} options.shard - The BOSH or WebSocket is connecting to this shard.\n     * Useful for detecting when shard changes.\n     * @param {String} [options.enableWebsocketResume=true] - True/false to control the stream resumption functionality.\n     * It will enable automatically by default if supported by the XMPP server.\n     * @param {Number} [options.websocketKeepAlive=60000] - The websocket keep alive interval.\n     * It's the interval + a up to a minute of jitter. Pass -1 to disable.\n     * The keep alive is HTTP GET request to {@link options.serviceUrl} or to {@link options.websocketKeepAliveUrl}.\n     * @param {Number} [options.websocketKeepAliveUrl] - The websocket keep alive url to use if any,\n     * if missing the serviceUrl url will be used.\n     * @param {Object} [options.xmppPing] - The xmpp ping settings.\n     */\n    constructor({ enableWebsocketResume, websocketKeepAlive, websocketKeepAliveUrl, serviceUrl, shard, xmppPing }) {\n        super();\n        this._options = {\n            enableWebsocketResume: typeof enableWebsocketResume === 'undefined' ? true : enableWebsocketResume,\n            pingOptions: xmppPing,\n            shard,\n            websocketKeepAlive: typeof websocketKeepAlive === 'undefined' ? 60 * 1000 : Number(websocketKeepAlive),\n            websocketKeepAliveUrl\n        };\n\n        this._stropheConn = new Strophe.Connection(serviceUrl);\n        this._usesWebsocket = serviceUrl.startsWith('ws:') || serviceUrl.startsWith('wss:');\n\n        // The default maxRetries is 5, which is too long.\n        this._stropheConn.maxRetries = 3;\n\n        this._rawInputTracker = new LastSuccessTracker();\n        this._rawInputTracker.startTracking(this, this._stropheConn);\n\n        this._resumeTask = new ResumeTask(this._stropheConn);\n\n        /**\n         * @typedef DeferredSendIQ Object\n         * @property {Element} iq - The IQ to send.\n         * @property {function} resolve - The resolve method of the deferred Promise.\n         * @property {function} reject - The reject method of the deferred Promise.\n         * @property {number} timeout - The ID of the timeout task that needs to be cleared, before sending the IQ.\n         */\n        /**\n         * Deferred IQs to be sent upon reconnect.\n         * @type {Array<DeferredSendIQ>}\n         * @private\n         */\n        this._deferredIQs = [];\n\n        // Ping plugin is mandatory for the Websocket mode to work correctly. It's used to detect when the connection\n        // is broken (WebSocket/TCP connection not closed gracefully).\n        this.addConnectionPlugin(\n            'ping',\n            new PingConnectionPlugin({\n                getTimeSinceLastServerResponse: () => this.getTimeSinceLastSuccess(),\n                onPingThresholdExceeded: () => this._onPingErrorThresholdExceeded(),\n                pingOptions: xmppPing\n            }));\n\n        // tracks whether this is the initial connection or a reconnect\n        this._oneSuccessfulConnect = false;\n    }\n\n    /**\n     * A getter for the connected state.\n     *\n     * @returns {boolean}\n     */\n    get connected() {\n        const websocket = this._stropheConn && this._stropheConn._proto && this._stropheConn._proto.socket;\n\n        return (this._status === Strophe.Status.CONNECTED || this._status === Strophe.Status.ATTACHED)\n            && (!this.isUsingWebSocket || (websocket && websocket.readyState === WebSocket.OPEN));\n    }\n\n    /**\n     * Retrieves the feature discovery plugin instance.\n     *\n     * @returns {Strophe.Connection.disco}\n     */\n    get disco() {\n        return this._stropheConn.disco;\n    }\n\n    /**\n     * A getter for the disconnecting state.\n     *\n     * @returns {boolean}\n     */\n    get disconnecting() {\n        return this._stropheConn.disconnecting === true;\n    }\n\n    /**\n     * A getter for the domain.\n     *\n     * @returns {string|null}\n     */\n    get domain() {\n        return this._stropheConn.domain;\n    }\n\n    /**\n     * Tells if Websocket is used as the transport for the current XMPP connection. Returns true for Websocket or false\n     * for BOSH.\n     * @returns {boolean}\n     */\n    get isUsingWebSocket() {\n        return this._usesWebsocket;\n    }\n\n    /**\n     * A getter for the JID.\n     *\n     * @returns {string|null}\n     */\n    get jid() {\n        return this._stropheConn.jid;\n    }\n\n    /**\n     * Returns headers for the last BOSH response received.\n     *\n     * @returns {string}\n     */\n    get lastResponseHeaders() {\n        return this._stropheConn._proto && this._stropheConn._proto.lastResponseHeaders;\n    }\n\n    /**\n     * A getter for the logger plugin instance.\n     *\n     * @returns {*}\n     */\n    get logger() {\n        return this._stropheConn.logger;\n    }\n\n    /**\n     * A getter for the connection options.\n     *\n     * @returns {*}\n     */\n    get options() {\n        return this._stropheConn.options;\n    }\n\n    /**\n     * A getter for the domain to be used for ping.\n     */\n    get pingDomain() {\n        return this._options.pingOptions?.domain || this.domain;\n    }\n\n    /**\n     * A getter for the service URL.\n     *\n     * @returns {string}\n     */\n    get service() {\n        return this._stropheConn.service;\n    }\n\n    /**\n     * Sets new value for shard.\n     * @param value the new shard value.\n     */\n    set shard(value) {\n        this._options.shard = value;\n\n        // shard setting changed so let's schedule a new keep-alive check if connected\n        if (this._oneSuccessfulConnect) {\n            this._maybeStartWSKeepAlive();\n        }\n    }\n\n    /**\n     * Returns the current connection status.\n     *\n     * @returns {Strophe.Status}\n     */\n    get status() {\n        return this._status;\n    }\n\n    /**\n     * Adds a connection plugin to this instance.\n     *\n     * @param {string} name - The name of the plugin or rather a key under which it will be stored on this connection\n     * instance.\n     * @param {ConnectionPluginListenable} plugin - The plugin to add.\n     */\n    addConnectionPlugin(name, plugin) {\n        this[name] = plugin;\n        plugin.init(this);\n    }\n\n    /**\n     * See {@link Strophe.Connection.addHandler}\n     *\n     * @returns {void}\n     */\n    addHandler(...args) {\n        this._stropheConn.addHandler(...args);\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Wraps {@link Strophe.Connection.attach} method in order to intercept the connection status updates.\n     * See {@link Strophe.Connection.attach} for the params description.\n     *\n     * @returns {void}\n     */\n    attach(jid, sid, rid, callback, ...args) {\n        this._stropheConn.attach(jid, sid, rid, this._stropheConnectionCb.bind(this, callback), ...args);\n    }\n\n    /**\n     * Wraps Strophe.Connection.connect method in order to intercept the connection status updates.\n     * See {@link Strophe.Connection.connect} for the params description.\n     *\n     * @returns {void}\n     */\n    connect(jid, pass, callback, ...args) {\n        this._stropheConn.connect(jid, pass, this._stropheConnectionCb.bind(this, callback), ...args);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Handles {@link Strophe.Status} updates for the current connection.\n     *\n     * @param {function} targetCallback - The callback passed by the {@link XmppConnection} consumer to one of\n     * the connect methods.\n     * @param {Strophe.Status} status - The new connection status.\n     * @param {*} args - The rest of the arguments passed by Strophe.\n     * @private\n     */\n    _stropheConnectionCb(targetCallback, status, ...args) {\n        this._status = status;\n\n        let blockCallback = false;\n\n        if (status === Strophe.Status.CONNECTED || status === Strophe.Status.ATTACHED) {\n            this._maybeEnableStreamResume();\n\n            // after connecting - immediately check whether shard changed,\n            // we need this only when using websockets as bosh checks headers from every response\n            if (this._usesWebsocket && this._oneSuccessfulConnect) {\n                this._keepAliveAndCheckShard();\n            }\n            this._oneSuccessfulConnect = true;\n\n            this._maybeStartWSKeepAlive();\n            this._processDeferredIQs();\n            this._resumeTask.cancel();\n            this.ping.startInterval(this._options.pingOptions?.domain || this.domain);\n        } else if (status === Strophe.Status.DISCONNECTED) {\n            this.ping.stopInterval();\n\n            // FIXME add RECONNECTING state instead of blocking the DISCONNECTED update\n            blockCallback = this._tryResumingConnection();\n            if (!blockCallback) {\n                clearTimeout(this._wsKeepAlive);\n            }\n        }\n\n        if (!blockCallback) {\n            targetCallback(status, ...args);\n            this.eventEmitter.emit(XmppConnection.Events.CONN_STATUS_CHANGED, status);\n        }\n    }\n\n    /**\n     * Clears the list of IQs and rejects deferred Promises with an error.\n     *\n     * @private\n     */\n    _clearDeferredIQs() {\n        for (const deferred of this._deferredIQs) {\n            deferred.reject(new Error('disconnect'));\n        }\n        this._deferredIQs = [];\n    }\n\n    /**\n     * The method is meant to be used for testing. It's a shortcut for closing the WebSocket.\n     *\n     * @returns {void}\n     */\n    closeWebsocket() {\n        if (this._stropheConn && this._stropheConn._proto) {\n            this._stropheConn._proto._closeSocket();\n            this._stropheConn._proto._onClose(null);\n        }\n    }\n\n    /**\n     * See {@link Strophe.Connection.disconnect}.\n     *\n     * @returns {void}\n     */\n    disconnect(...args) {\n        this._resumeTask.cancel();\n        clearTimeout(this._wsKeepAlive);\n        this._clearDeferredIQs();\n        this._stropheConn.disconnect(...args);\n    }\n\n    /**\n     * See {@link Strophe.Connection.flush}.\n     *\n     * @returns {void}\n     */\n    flush(...args) {\n        this._stropheConn.flush(...args);\n    }\n\n    /**\n     * See {@link LastRequestTracker.getTimeSinceLastSuccess}.\n     *\n     * @returns {number|null}\n     */\n    getTimeSinceLastSuccess() {\n        return this._rawInputTracker.getTimeSinceLastSuccess();\n    }\n\n    /**\n     * See {@link LastRequestTracker.getLastFailedMessage}.\n     *\n     * @returns {string|null}\n     */\n    getLastFailedMessage() {\n        return this._rawInputTracker.getLastFailedMessage();\n    }\n\n    /**\n     * Requests a resume token from the server if enabled and all requirements are met.\n     *\n     * @private\n     */\n    _maybeEnableStreamResume() {\n        if (!this._options.enableWebsocketResume) {\n\n            return;\n        }\n\n        const { streamManagement } = this._stropheConn;\n\n        if (!this.isUsingWebSocket) {\n            logger.warn('Stream resume enabled, but WebSockets are not enabled');\n        } else if (!streamManagement) {\n            logger.warn('Stream resume enabled, but Strophe streamManagement plugin is not installed');\n        } else if (!streamManagement.isSupported()) {\n            logger.warn('Stream resume enabled, but XEP-0198 is not supported by the server');\n        } else if (!streamManagement.getResumeToken()) {\n            logger.info('Enabling XEP-0198 stream management');\n            streamManagement.enable(/* resume */ true);\n        }\n    }\n\n    /**\n     * Starts the Websocket keep alive if enabled.\n     *\n     * @private\n     * @returns {void}\n     */\n    _maybeStartWSKeepAlive() {\n        const { websocketKeepAlive } = this._options;\n\n        if (this._usesWebsocket && websocketKeepAlive > 0) {\n            this._wsKeepAlive || logger.info(`WebSocket keep alive interval: ${websocketKeepAlive}ms`);\n            clearTimeout(this._wsKeepAlive);\n\n            const intervalWithJitter = /* base */ websocketKeepAlive + /* jitter */ (Math.random() * 60 * 1000);\n\n            logger.debug(`Scheduling next WebSocket keep-alive in ${intervalWithJitter}ms`);\n\n            this._wsKeepAlive = setTimeout(\n                () => this._keepAliveAndCheckShard()\n                    .then(() => this._maybeStartWSKeepAlive()),\n                intervalWithJitter);\n        }\n    }\n\n    /**\n     * Do a http GET to the shard and if shard change will throw an event.\n     *\n     * @private\n     * @returns {Promise}\n     */\n    _keepAliveAndCheckShard() {\n        const { shard, websocketKeepAliveUrl } = this._options;\n        const url = websocketKeepAliveUrl ? websocketKeepAliveUrl\n            : this.service.replace('wss://', 'https://').replace('ws://', 'http://');\n\n        return fetch(url)\n            .then(response => {\n\n                // skips header checking if there is no info in options\n                if (!shard) {\n                    return;\n                }\n\n                const responseShard = response.headers.get('x-jitsi-shard');\n\n                if (responseShard !== shard) {\n                    logger.error(\n                        `Detected that shard changed from ${shard} to ${responseShard}`);\n                    this.eventEmitter.emit(XmppConnection.Events.CONN_SHARD_CHANGED);\n                }\n            })\n            .catch(error => {\n                logger.error(`Websocket Keep alive failed for url: ${url}`, { error });\n            });\n    }\n\n    /**\n     * Goes over the list of {@link DeferredSendIQ} tasks and sends them.\n     *\n     * @private\n     * @returns {void}\n     */\n    _processDeferredIQs() {\n        for (const deferred of this._deferredIQs) {\n            if (deferred.iq) {\n                clearTimeout(deferred.timeout);\n\n                const timeLeft = Date.now() - deferred.start;\n\n                this.sendIQ(\n                    deferred.iq,\n                    result => deferred.resolve(result),\n                    error => deferred.reject(error),\n                    timeLeft);\n            }\n        }\n\n        this._deferredIQs = [];\n    }\n\n    /**\n     * Send a stanza. This function is called to push data onto the send queue to go out over the wire.\n     *\n     * @param {Element|Strophe.Builder} stanza - The stanza to send.\n     * @returns {void}\n     */\n    send(stanza) {\n        if (!this.connected) {\n            throw new Error('Not connected');\n        }\n        this._stropheConn.send(stanza);\n    }\n\n    /**\n     * Helper function to send IQ stanzas.\n     *\n     * @param {Element} elem - The stanza to send.\n     * @param {Function} callback - The callback function for a successful request.\n     * @param {Function} errback - The callback function for a failed or timed out request.  On timeout, the stanza will\n     * be null.\n     * @param {number} timeout - The time specified in milliseconds for a timeout to occur.\n     * @returns {number} - The id used to send the IQ.\n     */\n    sendIQ(elem, callback, errback, timeout) {\n        if (!this.connected) {\n            errback('Not connected');\n\n            return;\n        }\n\n        return this._stropheConn.sendIQ(elem, callback, errback, timeout);\n    }\n\n    /**\n     * Sends an IQ immediately if connected or puts it on the send queue otherwise(in contrary to other send methods\n     * which would fail immediately if disconnected).\n     *\n     * @param {Element} iq - The IQ to send.\n     * @param {number} timeout - How long to wait for the response. The time when the connection is reconnecting is\n     * included, which means that the IQ may never be sent and still fail with a timeout.\n     */\n    sendIQ2(iq, { timeout }) {\n        return new Promise((resolve, reject) => {\n            if (this.connected) {\n                this.sendIQ(\n                    iq,\n                    result => resolve(result),\n                    error => reject(error),\n                    timeout);\n            } else {\n                const deferred = {\n                    iq,\n                    resolve,\n                    reject,\n                    start: Date.now(),\n                    timeout: setTimeout(() => {\n                        // clears the IQ on timeout and invalidates the deferred task\n                        deferred.iq = undefined;\n\n                        // Strophe calls with undefined on timeout\n                        reject(undefined);\n                    }, timeout)\n                };\n\n                this._deferredIQs.push(deferred);\n            }\n        });\n    }\n\n    /**\n     * Called by the ping plugin when ping fails too many times.\n     *\n     * @returns {void}\n     */\n    _onPingErrorThresholdExceeded() {\n        if (this.isUsingWebSocket) {\n            logger.warn('Ping error threshold exceeded - killing the WebSocket');\n            this.closeWebsocket();\n        }\n    }\n\n    /**\n     *  Helper function to send presence stanzas. The main benefit is for sending presence stanzas for which you expect\n     *  a responding presence stanza with the same id (for example when leaving a chat room).\n     *\n     * @param {Element} elem - The stanza to send.\n     * @param {Function} callback - The callback function for a successful request.\n     * @param {Function} errback - The callback function for a failed or timed out request. On timeout, the stanza will\n     * be null.\n     * @param {number} timeout - The time specified in milliseconds for a timeout to occur.\n     * @returns {number} - The id used to send the presence.\n     */\n    sendPresence(elem, callback, errback, timeout) {\n        if (!this.connected) {\n            errback('Not connected');\n\n            return;\n        }\n        this._stropheConn.sendPresence(elem, callback, errback, timeout);\n    }\n\n    /**\n     * The method gracefully closes the BOSH connection by using 'navigator.sendBeacon'.\n     *\n     * @returns {boolean} - true if the beacon was sent.\n     */\n    sendUnavailableBeacon() {\n        if (!navigator.sendBeacon || this._stropheConn.disconnecting || !this._stropheConn.connected) {\n            return false;\n        }\n\n        this._stropheConn._changeConnectStatus(Strophe.Status.DISCONNECTING);\n        this._stropheConn.disconnecting = true;\n\n        const body = this._stropheConn._proto._buildBody()\n            .attrs({\n                type: 'terminate'\n            });\n        const pres = $pres({\n            xmlns: Strophe.NS.CLIENT,\n            type: 'unavailable'\n        });\n\n        body.cnode(pres.tree());\n\n        const res = navigator.sendBeacon(\n            this.service.indexOf('https://') === -1 ? `https:${this.service}` : this.service,\n            Strophe.serialize(body.tree()));\n\n        logger.info(`Successfully send unavailable beacon ${res}`);\n\n        this._stropheConn._proto._abortAllRequests();\n        this._stropheConn._doDisconnect();\n\n        return true;\n    }\n\n    /**\n     * Tries to use stream management plugin to resume dropped XMPP connection. The streamManagement plugin clears\n     * the resume token if any connection error occurs which would put it in unrecoverable state, so as long as\n     * the token is present it means the connection can be resumed.\n     *\n     * @private\n     * @returns {boolean}\n     */\n    _tryResumingConnection() {\n        const { streamManagement } = this._stropheConn;\n        const resumeToken = streamManagement && streamManagement.getResumeToken();\n\n        if (resumeToken) {\n            this._resumeTask.schedule();\n\n            return true;\n        }\n\n        return false;\n    }\n}\n","export enum JitsiTranscriptionStatus {\n    /**\n     * The transcription is on.\n     */\n    ON = 'on',\n\n    /**\n     * The transcription is off.\n     */\n    OFF = 'off'\n}\n\n// exported for backward compatibility\nexport const ON = JitsiTranscriptionStatus.ON;\nexport const OFF = JitsiTranscriptionStatus.OFF;\n","import { getLogger } from '@jitsi/logger';\nimport { $msg } from 'strophe.js';\n\nimport { MediaType } from '../../service/RTC/MediaType';\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * The AVModeration logic.\n */\nexport default class AVModeration {\n\n    /**\n     * Constructs AV moderation room.\n     *\n     * @param {ChatRoom} room the main room.\n     */\n    constructor(room) {\n        this._xmpp = room.xmpp;\n\n        this._mainRoom = room;\n\n        this._moderationEnabledByType = {\n            [MediaType.AUDIO]: false,\n            [MediaType.VIDEO]: false\n        };\n\n        this._whitelistAudio = [];\n        this._whitelistVideo = [];\n\n        this._onMessage = this._onMessage.bind(this);\n        this._xmpp.addListener(XMPPEvents.AV_MODERATION_RECEIVED, this._onMessage);\n    }\n\n    /**\n     * Stops listening for events.\n     */\n    dispose() {\n        this._xmpp.removeListener(XMPPEvents.AV_MODERATION_RECEIVED, this._onMessage);\n    }\n\n    /**\n     * Whether AV moderation is supported on backend.\n     *\n     * @returns {boolean} whether AV moderation is supported on backend.\n     */\n    isSupported() {\n        return Boolean(this._xmpp.avModerationComponentAddress);\n    }\n\n    /**\n     * Enables or disables AV Moderation by sending a msg with command to the component.\n     */\n    enable(state, mediaType) {\n        if (!this.isSupported() || !this._mainRoom.isModerator()) {\n            logger.error(`Cannot enable:${state} AV moderation supported:${this.isSupported()},\n                moderator:${this._mainRoom.isModerator()}`);\n\n            return;\n        }\n\n        if (state === this._moderationEnabledByType[mediaType]) {\n            logger.warn(`Moderation already in state:${state} for mediaType:${mediaType}`);\n\n            return;\n        }\n\n        // send the enable/disable message\n        const msg = $msg({ to: this._xmpp.avModerationComponentAddress });\n\n        msg.c('av_moderation', {\n            enable: state,\n            mediaType\n        }).up();\n\n        this._xmpp.connection.send(msg);\n    }\n\n    /**\n     * Approves that a participant can unmute by sending a msg with its jid to the component.\n     */\n    approve(mediaType, jid) {\n        if (!this.isSupported() || !this._mainRoom.isModerator()) {\n            logger.error(`Cannot approve in AV moderation supported:${this.isSupported()},\n                moderator:${this._mainRoom.isModerator()}`);\n\n            return;\n        }\n\n        // send a message to whitelist the jid and approve it to unmute\n        const msg = $msg({ to: this._xmpp.avModerationComponentAddress });\n\n        msg.c('av_moderation', {\n            mediaType,\n            jidToWhitelist: jid }).up();\n\n        this._xmpp.connection.send(msg);\n    }\n\n    /**\n     * Rejects that a participant can unmute by sending a msg with its jid to the component.\n     */\n    reject(mediaType, jid) {\n        if (!this.isSupported() || !this._mainRoom.isModerator()) {\n            logger.error(`Cannot reject in AV moderation supported:${this.isSupported()},\n                moderator:${this._mainRoom.isModerator()}`);\n\n            return;\n        }\n\n        // send a message to remove from whitelist the jid and reject it to unmute\n        const msg = $msg({ to: this._xmpp.avModerationComponentAddress });\n\n        msg.c('av_moderation', {\n            mediaType,\n            jidToBlacklist: jid\n        }).up();\n\n        this._xmpp.connection.send(msg);\n    }\n\n    /**\n     * Receives av_moderation parsed messages as json.\n     * @param obj the parsed json content of the message to process.\n     * @private\n     */\n    _onMessage(obj) {\n        const { removed, mediaType: media, enabled, approved, actor, whitelists: newWhitelists } = obj;\n\n        if (newWhitelists) {\n            const oldList = media === MediaType.AUDIO\n                ? this._whitelistAudio\n                : this._whitelistVideo;\n            const newList = Array.isArray(newWhitelists[media]) ? newWhitelists[media] : [];\n\n            if (removed) {\n                oldList.filter(x => !newList.includes(x))\n                    .forEach(jid => this._xmpp.eventEmitter\n                        .emit(XMPPEvents.AV_MODERATION_PARTICIPANT_REJECTED, media, jid));\n            } else {\n                newList.filter(x => !oldList.includes(x))\n                    .forEach(jid => this._xmpp.eventEmitter\n                        .emit(XMPPEvents.AV_MODERATION_PARTICIPANT_APPROVED, media, jid));\n            }\n\n            if (media === MediaType.AUDIO) {\n                this._whitelistAudio = newList;\n            } else {\n                this._whitelistVideo = newList;\n            }\n        } else if (enabled !== undefined && this._moderationEnabledByType[media] !== enabled) {\n            this._moderationEnabledByType[media] = enabled;\n\n            this._xmpp.eventEmitter.emit(XMPPEvents.AV_MODERATION_CHANGED, enabled, media, actor);\n        } else if (removed) {\n            this._xmpp.eventEmitter.emit(XMPPEvents.AV_MODERATION_REJECTED, media);\n        } else if (approved) {\n            this._xmpp.eventEmitter.emit(XMPPEvents.AV_MODERATION_APPROVED, media);\n        }\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport { $msg } from 'strophe.js';\n\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\n\nconst FEATURE_KEY = 'features/breakout-rooms';\nconst BREAKOUT_ROOM_ACTIONS = {\n    ADD: `${FEATURE_KEY}/add`,\n    REMOVE: `${FEATURE_KEY}/remove`,\n    MOVE_TO_ROOM: `${FEATURE_KEY}/move-to-room`\n};\nconst BREAKOUT_ROOM_EVENTS = {\n    MOVE_TO_ROOM: `${FEATURE_KEY}/move-to-room`,\n    UPDATE: `${FEATURE_KEY}/update`\n};\n\nconst logger = getLogger(__filename);\n\n/**\n * Helper class for handling breakout rooms.\n */\nexport default class BreakoutRooms {\n\n    /**\n     * Constructs lobby room.\n     *\n     * @param {ChatRoom} room the room we are in.\n     */\n    constructor(room) {\n        this.room = room;\n\n        this._handleMessages = this._handleMessages.bind(this);\n        this.room.xmpp.addListener(XMPPEvents.BREAKOUT_ROOMS_EVENT, this._handleMessages);\n\n        this._rooms = {};\n    }\n\n    /**\n     * Stops listening for events.\n     */\n    dispose() {\n        this.room.xmpp.removeListener(XMPPEvents.BREAKOUT_ROOMS_EVENT, this._handleMessages);\n    }\n\n    /**\n     * Creates a breakout room with the given subject.\n     *\n     * @param {string} subject - A subject for the breakout room.\n     */\n    createBreakoutRoom(subject) {\n        if (!this.isSupported() || !this.room.isModerator()) {\n            logger.error(`Cannot create breakout room - supported:${this.isSupported()},\n                moderator:${this.room.isModerator()}`);\n\n            return;\n        }\n\n        const message = {\n            type: BREAKOUT_ROOM_ACTIONS.ADD,\n            subject\n        };\n\n        this._sendMessage(message);\n    }\n\n    /**\n     * Removes a breakout room.\n     *\n     * @param {string} breakoutRoomJid - JID of the room to be removed.\n     */\n    removeBreakoutRoom(breakoutRoomJid) {\n        if (!this.isSupported() || !this.room.isModerator()) {\n            logger.error(`Cannot remove breakout room - supported:${this.isSupported()},\n                moderator:${this.room.isModerator()}`);\n\n            return;\n        }\n\n        const message = {\n            type: BREAKOUT_ROOM_ACTIONS.REMOVE,\n            breakoutRoomJid\n        };\n\n        this._sendMessage(message);\n    }\n\n    /**\n     * Sends the given participant to the given room.\n     *\n     * @param {string} participantJid - JID of the participant to be sent to a room.\n     * @param {string} roomJid - JID of the target room.\n     */\n    sendParticipantToRoom(participantJid, roomJid) {\n        if (!this.isSupported() || !this.room.isModerator()) {\n            logger.error(`Cannot send participant to room - supported:${this.isSupported()},\n                moderator:${this.room.isModerator()}`);\n\n            return;\n        }\n\n        const message = {\n            type: BREAKOUT_ROOM_ACTIONS.MOVE_TO_ROOM,\n            participantJid,\n            roomJid\n        };\n\n        this._sendMessage(message);\n    }\n\n    /**\n     * Whether Breakout Rooms support is enabled in the backend or not.\n     */\n    isSupported() {\n        return Boolean(this.getComponentAddress());\n    }\n\n    /**\n     * Gets the address of the Breakout Rooms XMPP component.\n     *\n     * @returns The address of the component.\n     */\n    getComponentAddress() {\n        return this.room.xmpp.breakoutRoomsComponentAddress;\n    }\n\n    /**\n     * Stores if the current room is a breakout room.\n     *\n     * @param {boolean} isBreakoutRoom - Whether this room is a breakout room.\n     */\n    _setIsBreakoutRoom(isBreakoutRoom) {\n        this._isBreakoutRoom = isBreakoutRoom;\n    }\n\n    /**\n     * Checks whether this room is a breakout room.\n     *\n     * @returns True if the room is a breakout room, false otherwise.\n     */\n    isBreakoutRoom() {\n        return this._isBreakoutRoom;\n    }\n\n    /**\n     * Sets the main room JID associated with this breakout room. Only applies when\n     * in a breakout room.\n     *\n     * @param {string} jid - The main room JID.\n     */\n    _setMainRoomJid(jid) {\n        this._mainRoomJid = jid;\n    }\n\n    /**\n     * Gets the main room's JID associated with this breakout room.\n     *\n     * @returns The main room JID.\n     */\n    getMainRoomJid() {\n        return this._mainRoomJid;\n    }\n\n    /**\n     * Handles a message for managing breakout rooms.\n     *\n     * @param {object} payload - Arbitrary data.\n     */\n    _handleMessages(payload) {\n        switch (payload.event) {\n        case BREAKOUT_ROOM_EVENTS.MOVE_TO_ROOM:\n            this.room.eventEmitter.emit(XMPPEvents.BREAKOUT_ROOMS_MOVE_TO_ROOM, payload.roomJid);\n            break;\n        case BREAKOUT_ROOM_EVENTS.UPDATE: {\n            this._rooms = payload.rooms;\n            this.room.eventEmitter.emit(XMPPEvents.BREAKOUT_ROOMS_UPDATED, payload);\n            break;\n        }\n        }\n    }\n\n    /**\n     * Helper to send a breakout rooms message to the component.\n     *\n     * @param {Object} message - Command that needs to be sent.\n     */\n    _sendMessage(message) {\n        const msg = $msg({ to: this.getComponentAddress() });\n\n        msg.c('breakout_rooms', message).up();\n\n        this.room.xmpp.connection.send(msg);\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport { $msg, Strophe } from 'strophe.js';\n\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * The command type for updating a lobby participant's e-mail address.\n *\n * @type {string}\n */\nconst EMAIL_COMMAND = 'email';\n\n/**\n * The Lobby room implementation. Setting a room to members only, joining the lobby room\n * approving or denying access to participants from the lobby room.\n */\nexport default class Lobby {\n\n    /**\n     * Constructs lobby room.\n     *\n     * @param {ChatRoom} room the main room.\n     */\n    constructor(room) {\n        this.xmpp = room.xmpp;\n        this.mainRoom = room;\n\n        const maybeJoinLobbyRoom = this._maybeJoinLobbyRoom.bind(this);\n\n        this.mainRoom.addEventListener(\n            XMPPEvents.LOCAL_ROLE_CHANGED,\n            maybeJoinLobbyRoom);\n\n        this.mainRoom.addEventListener(\n            XMPPEvents.MUC_MEMBERS_ONLY_CHANGED,\n            maybeJoinLobbyRoom);\n\n        this.mainRoom.addEventListener(\n            XMPPEvents.ROOM_CONNECT_MEMBERS_ONLY_ERROR,\n            jid => {\n                this.lobbyRoomJid = jid;\n            });\n    }\n\n    /**\n     * Whether lobby is supported on backend.\n     *\n     * @returns {boolean} whether lobby is supported on backend.\n     */\n    isSupported() {\n        return this.xmpp.lobbySupported;\n    }\n\n    /**\n     * Enables lobby by setting the main room to be members only and joins the lobby chat room.\n     *\n     * @returns {Promise}\n     */\n    enable() {\n        if (!this.isSupported()) {\n            return Promise.reject(new Error('Lobby not supported!'));\n        }\n\n        return new Promise((resolve, reject) => {\n            this.mainRoom.setMembersOnly(true, resolve, reject);\n        });\n    }\n\n    /**\n     * Disable lobby by setting the main room to be non members only and levaes the lobby chat room if joined.\n     *\n     * @returns {void}\n     */\n    disable() {\n        if (!this.isSupported() || !this.mainRoom.isModerator()\n                || !this.lobbyRoom || !this.mainRoom.membersOnlyEnabled) {\n            return;\n        }\n\n        this.mainRoom.setMembersOnly(false);\n    }\n\n    /**\n     * Broadcast a message to all participants in the lobby room\n     * @param {Object} message The message to send\n     *\n     * @returns {void}\n     */\n    sendMessage(message) {\n        if (this.lobbyRoom) {\n            this.lobbyRoom.sendMessage(JSON.stringify(message), 'json-message');\n        }\n    }\n\n    /**\n     * Sends a private message to a participant in a lobby room.\n     * @param {string} id The message to send\n     * @param {Object} message The message to send\n     *\n     * @returns {void}\n     */\n    sendPrivateMessage(id, message) {\n        if (this.lobbyRoom) {\n            this.lobbyRoom.sendPrivateMessage(id, JSON.stringify(message), 'json-message');\n        }\n    }\n\n    /**\n     * Gets the local id for a participant in a lobby room.\n     * This is used for lobby room private chat messages.\n     *\n     * @returns {string}\n     */\n    getLocalId() {\n        if (this.lobbyRoom) {\n            return Strophe.getResourceFromJid(this.lobbyRoom.myroomjid);\n        }\n    }\n\n    /**\n     * Adds a message listener to the lobby room.\n     * @param {Function} listener The listener function,\n     * called when a new message is received in the lobby room.\n     *\n     * @returns {Function} Handler returned to be able to remove it later.\n     */\n    addMessageListener(listener) {\n        if (this.lobbyRoom) {\n            const handler = (participantId, message) => {\n                listener(message, Strophe.getResourceFromJid(participantId));\n            };\n\n            this.lobbyRoom.on(XMPPEvents.JSON_MESSAGE_RECEIVED, handler);\n\n            return handler;\n        }\n    }\n\n    /**\n     * Remove a message handler from the lobby room.\n     * @param {Function} handler The handler function to remove.\n     *\n     * @returns {void}\n     */\n    removeMessageHandler(handler) {\n        if (this.lobbyRoom) {\n            this.lobbyRoom.off(XMPPEvents.JSON_MESSAGE_RECEIVED, handler);\n        }\n    }\n\n    /**\n     * Leaves the lobby room.\n     *\n     * @returns {Promise}\n     */\n    leave() {\n        if (this.lobbyRoom) {\n            return this.lobbyRoom.leave()\n                .then(() => {\n                    this.lobbyRoom = undefined;\n                    logger.info('Lobby room left!');\n                })\n                .catch(() => {}); // eslint-disable-line no-empty-function\n        }\n\n        return Promise.reject(\n                new Error('The lobby has already been left'));\n    }\n\n    /**\n     * We had received a jid for the lobby room.\n     *\n     * @param jid the lobby room jid to join.\n     */\n    setLobbyRoomJid(jid) {\n        this.lobbyRoomJid = jid;\n    }\n\n    /**\n     * Checks the state of mainRoom, lobbyRoom and current user role to decide whether to join lobby room.\n     * @private\n     */\n    _maybeJoinLobbyRoom() {\n        if (!this.isSupported()) {\n            return;\n        }\n\n        const isModerator = this.mainRoom.joined && this.mainRoom.isModerator();\n\n        if (isModerator && this.mainRoom.membersOnlyEnabled && !this.lobbyRoom) {\n            // join the lobby\n            this.join()\n                .then(() => logger.info('Joined lobby room'))\n                .catch(e => logger.error('Failed joining lobby', e));\n        }\n    }\n\n    /**\n     * Joins a lobby room setting display name and eventually avatar(using the email provided).\n     *\n     * @param {string} username is required.\n     * @param {string} email is optional.\n     * @returns {Promise} resolves once we join the room.\n     */\n    join(displayName, email) {\n        const isModerator = this.mainRoom.joined && this.mainRoom.isModerator();\n\n        if (!this.lobbyRoomJid) {\n            return Promise.reject(new Error('Missing lobbyRoomJid, cannot join lobby room.'));\n        }\n\n        const roomName = Strophe.getNodeFromJid(this.lobbyRoomJid);\n        const customDomain = Strophe.getDomainFromJid(this.lobbyRoomJid);\n\n        this.lobbyRoom = this.xmpp.createRoom(\n            roomName, {\n                customDomain,\n                disableDiscoInfo: true,\n                disableFocus: true,\n                enableLobby: false\n            }\n        );\n\n        if (displayName) {\n            // remove previously set nickname\n            this.lobbyRoom.addOrReplaceInPresence('nick', {\n                attributes: { xmlns: 'http://jabber.org/protocol/nick' },\n                value: displayName\n            });\n        }\n\n        if (isModerator) {\n            this.lobbyRoom.addPresenceListener(EMAIL_COMMAND, (node, from) => {\n                this.mainRoom.eventEmitter.emit(XMPPEvents.MUC_LOBBY_MEMBER_UPDATED, from, { email: node.value });\n            });\n            this.lobbyRoom.addEventListener(\n                XMPPEvents.MUC_MEMBER_JOINED,\n                // eslint-disable-next-line max-params\n                (from, nick, role, isHiddenDomain, statsID, status, identity, botType, jid) => {\n                    // we need to ignore joins on lobby for participants that are already in the main room\n                    if (Object.values(this.mainRoom.members).find(m => m.jid === jid)) {\n                        return;\n                    }\n\n                    // Check if the user is a member if any breakout room.\n                    for (const room of Object.values(this.mainRoom.getBreakoutRooms()._rooms)) {\n                        if (Object.values(room.participants).find(p => p.jid === jid)) {\n                            return;\n                        }\n                    }\n\n                    // we emit the new event on the main room so we can propagate\n                    // events to the conference\n                    this.mainRoom.eventEmitter.emit(\n                        XMPPEvents.MUC_LOBBY_MEMBER_JOINED,\n                        Strophe.getResourceFromJid(from),\n                        nick,\n                        identity ? identity.avatar : undefined\n                    );\n                });\n            this.lobbyRoom.addEventListener(\n                XMPPEvents.MUC_MEMBER_LEFT, from => {\n                    // we emit the new event on the main room so we can propagate\n                    // events to the conference\n                    this.mainRoom.eventEmitter.emit(\n                        XMPPEvents.MUC_LOBBY_MEMBER_LEFT,\n                        Strophe.getResourceFromJid(from)\n                    );\n                });\n            this.lobbyRoom.addEventListener(\n                XMPPEvents.MUC_DESTROYED,\n                () => {\n                    // let's make sure we emit that all lobby users had left\n                    Object.keys(this.lobbyRoom.members)\n                        .forEach(j => this.mainRoom.eventEmitter.emit(\n                            XMPPEvents.MUC_LOBBY_MEMBER_LEFT, Strophe.getResourceFromJid(j)));\n\n                    this.lobbyRoom.clean();\n\n                    this.lobbyRoom = undefined;\n                    logger.info('Lobby room left(destroyed)!');\n                });\n        } else {\n            // this should only be handled by those waiting in lobby\n            this.lobbyRoom.addEventListener(XMPPEvents.KICKED, isSelfPresence => {\n                if (isSelfPresence) {\n                    this.mainRoom.eventEmitter.emit(XMPPEvents.MUC_DENIED_ACCESS);\n\n                    this.lobbyRoom.clean();\n\n                    return;\n                }\n            });\n\n            // As there is still reference of the main room\n            // the invite will be detected and addressed to its eventEmitter, even though we are not in it\n            // the invite message should be received directly to the xmpp conn in general\n            this.mainRoom.addEventListener(\n                XMPPEvents.INVITE_MESSAGE_RECEIVED,\n                (roomJid, from, txt, invitePassword) => {\n                    logger.debug(`Received approval to join ${roomJid} ${from} ${txt}`);\n                    if (roomJid === this.mainRoom.roomjid) {\n                        // we are now allowed, so let's join\n                        this.mainRoom.join(invitePassword);\n                    }\n                });\n            this.lobbyRoom.addEventListener(\n                XMPPEvents.MUC_DESTROYED,\n                (reason, jid) => {\n                    // we are receiving the jid of the main room\n                    // means we are invited to join, maybe lobby was disabled\n                    if (jid) {\n                        this.mainRoom.join();\n\n                        return;\n                    }\n\n                    this.lobbyRoom.clean();\n\n                    this.mainRoom.eventEmitter.emit(XMPPEvents.MUC_DESTROYED, reason);\n                });\n\n            // If participant retries joining shared password while waiting in the lobby\n            // and succeeds make sure we leave lobby\n            this.mainRoom.addEventListener(\n                XMPPEvents.MUC_JOINED,\n                () => {\n                    this.leave();\n                });\n        }\n\n        return new Promise((resolve, reject) => {\n            this.lobbyRoom.addEventListener(XMPPEvents.MUC_JOINED, () => {\n                resolve();\n\n                // send our email, as we do not handle this on initial presence we need a second one\n                if (email && !isModerator) {\n                    this.lobbyRoom.addOrReplaceInPresence(EMAIL_COMMAND, { value: email })\n                        && this.lobbyRoom.sendPresence();\n                }\n            });\n            this.lobbyRoom.addEventListener(XMPPEvents.ROOM_JOIN_ERROR, reject);\n            this.lobbyRoom.addEventListener(XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR, reject);\n            this.lobbyRoom.addEventListener(XMPPEvents.ROOM_CONNECT_ERROR, reject);\n\n            this.lobbyRoom.join();\n        });\n\n    }\n\n    /**\n     * Should be possible only for moderators.\n     * @param id\n     */\n    denyAccess(id) {\n        if (!this.isSupported() || !this.mainRoom.isModerator()) {\n            return;\n        }\n\n        const jid = Object.keys(this.lobbyRoom.members)\n            .find(j => Strophe.getResourceFromJid(j) === id);\n\n        if (jid) {\n            this.lobbyRoom.kick(jid);\n        } else {\n            logger.error(`Not found member for ${id} in lobby room.`);\n        }\n    }\n\n    /**\n     * Should be possible only for moderators.\n     * @param id\n     */\n    approveAccess(id) {\n        if (!this.isSupported() || !this.mainRoom.isModerator()) {\n            return;\n        }\n\n        // Get the main room JID. If we are in a breakout room we'll use the main\n        // room's lobby.\n        let mainRoomJid = this.mainRoom.roomjid;\n\n        if (this.mainRoom.getBreakoutRooms().isBreakoutRoom()) {\n            mainRoomJid = this.mainRoom.getBreakoutRooms().getMainRoomJid();\n        }\n\n        const memberRoomJid = Object.keys(this.lobbyRoom.members)\n            .find(j => Strophe.getResourceFromJid(j) === id);\n\n        if (memberRoomJid) {\n            const jid = this.lobbyRoom.members[memberRoomJid].jid;\n            const msgToSend\n                = $msg({ to: mainRoomJid })\n                    .c('x', { xmlns: 'http://jabber.org/protocol/muc#user' })\n                    .c('invite', { to: jid });\n\n            this.xmpp.connection.sendIQ(msgToSend,\n                () => { }, // eslint-disable-line no-empty-function\n                e => {\n                    logger.error(`Error sending invite for ${jid}`, e);\n                });\n        } else {\n            logger.error(`Not found member for ${memberRoomJid} in lobby room.`);\n        }\n    }\n}\n","import { jitsiLocalStorage } from '@jitsi/js-utils';\nimport { getLogger } from '@jitsi/logger';\n\nconst logger = getLogger(__filename);\n\nimport UsernameGenerator from '../util/UsernameGenerator';\n\nlet _callStatsUserName;\n\nlet _machineId;\n\n/**\n *\n */\nexport default {\n\n    /**\n     * The storage used to store the settings.\n     */\n    _storage: jitsiLocalStorage,\n\n    /**\n     * Initializes the Settings class.\n     *\n     * @param {Storage|undefined} externalStorage - Object that implements the Storage interface. This object will be\n     * used for storing data instead of jitsiLocalStorage if specified.\n     */\n    init(externalStorage) {\n        this._storage = externalStorage || jitsiLocalStorage;\n    },\n\n    /**\n     * Returns fake username for callstats\n     * @returns {string} fake username for callstats\n     */\n    get callStatsUserName() {\n        if (!_callStatsUserName) {\n            _callStatsUserName = this._storage.getItem('callStatsUserName');\n            if (!_callStatsUserName) {\n                _callStatsUserName = generateCallStatsUserName();\n                this._storage.setItem('callStatsUserName', _callStatsUserName);\n            }\n        }\n\n        return _callStatsUserName;\n    },\n\n    /**\n     * Returns current machine id.\n     * @returns {string} machine id\n     */\n    get machineId() {\n        if (!_machineId) {\n            const amDid = this._storage.getItem('billingId');\n\n            _machineId = amDid || this._storage.getItem('jitsiMeetId');\n\n            if (amDid) {\n                this._storage.setItem('jitsiMeetId', amDid);\n            } else if (!_machineId) {\n                _machineId = generateJitsiMeetId();\n                this._storage.setItem('jitsiMeetId', _machineId);\n            }\n        }\n\n        return _machineId;\n    },\n\n    /**\n     * Returns current session id.\n     * @returns {string} current session id\n     */\n    get sessionId() {\n        // We may update sessionId in localStorage from another JitsiConference\n        // instance and that's why we should always re-read it.\n        return this._storage.getItem('sessionId');\n    },\n\n    /**\n     * Save current session id.\n     * @param {string} sessionId session id\n     */\n    set sessionId(sessionId) {\n        if (sessionId) {\n            this._storage.setItem('sessionId', sessionId);\n        } else {\n            this._storage.removeItem('sessionId');\n        }\n    }\n};\n\n/**\n * Generate fake username for callstats.\n * @returns {string} fake random username\n */\nfunction generateCallStatsUserName() {\n    const username = UsernameGenerator.generateUsername();\n\n    logger.log('generated callstats uid', username);\n\n    return username;\n}\n\n/**\n * Generate unique id.\n * @returns {string} random unique id\n */\nfunction generateJitsiMeetId() {\n    const jitsiMeetId = generateUniqueId();\n\n    logger.log('generated id', jitsiMeetId);\n\n    return jitsiMeetId;\n}\n\n/**\n *\n */\nfunction generateUniqueId() {\n    return _p8() + _p8() + _p8() + _p8();\n}\n\n/**\n *\n */\nfunction _p8() {\n    return `${Math.random().toString(16)}000000000`.substr(2, 8);\n}\n","/* global $ */\n\nimport { getLogger } from '@jitsi/logger';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport Settings from '../settings/Settings';\n\nconst AuthenticationEvents\n    = require('../../service/authentication/AuthenticationEvents');\nconst { XMPPEvents } = require('../../service/xmpp/XMPPEvents');\nconst GlobalOnErrorHandler = require('../util/GlobalOnErrorHandler');\n\nconst logger = getLogger(__filename);\n\n/**\n *\n * @param step\n */\nfunction createExpBackoffTimer(step) {\n    let count = 1;\n\n    return function(reset) {\n        // Reset call\n        if (reset) {\n            count = 1;\n\n            return;\n        }\n\n        // Calculate next timeout\n        const timeout = Math.pow(2, count - 1);\n\n        count += 1;\n\n        return timeout * step;\n    };\n}\n\n/* eslint-disable max-params */\n\n/**\n *\n * @param roomName\n * @param xmpp\n * @param emitter\n * @param options\n */\nexport default function Moderator(roomName, xmpp, emitter, options) {\n    this.roomName = roomName;\n    this.xmppService = xmpp;\n    this.getNextTimeout = createExpBackoffTimer(1000);\n    this.getNextErrorTimeout = createExpBackoffTimer(1000);\n\n    // External authentication stuff\n    this.externalAuthEnabled = false;\n    this.options = options;\n\n    // Whether SIP gateway (jigasi) support is enabled. This is set\n    // based on conference properties received in presence.\n    this.sipGatewayEnabled = false;\n\n    this.eventEmitter = emitter;\n\n    this.connection = this.xmppService.connection;\n\n    // FIXME: Message listener that talks to POPUP window\n    /**\n     *\n     * @param event\n     */\n    function listener(event) {\n        if (event.data && event.data.sessionId) {\n            if (event.origin !== window.location.origin) {\n                logger.warn(\n                    `Ignoring sessionId from different origin: ${\n                        event.origin}`);\n\n                return;\n            }\n            Settings.sessionId = event.data.sessionId;\n\n            // After popup is closed we will authenticate\n        }\n    }\n\n    // Register\n    if (window.addEventListener) {\n        window.addEventListener('message', listener, false);\n    } else {\n        window.attachEvent('onmessage', listener);\n    }\n}\n\n/* eslint-enable max-params */\n\nModerator.prototype.isExternalAuthEnabled = function() {\n    return this.externalAuthEnabled;\n};\n\nModerator.prototype.isSipGatewayEnabled = function() {\n    return this.sipGatewayEnabled;\n};\n\nModerator.prototype.onMucMemberLeft = function(jid) {\n    const resource = Strophe.getResourceFromJid(jid);\n\n    if (resource === 'focus') {\n        logger.info(\n            'Focus has left the room - leaving conference');\n        this.eventEmitter.emit(XMPPEvents.FOCUS_LEFT);\n    }\n};\n\nModerator.prototype.setFocusUserJid = function(focusJid) {\n    if (!this.focusUserJid) {\n        this.focusUserJid = focusJid;\n        logger.info(`Focus jid set to:  ${this.focusUserJid}`);\n    }\n};\n\nModerator.prototype.getFocusUserJid = function() {\n    return this.focusUserJid;\n};\n\nModerator.prototype.getFocusComponent = function() {\n    // Get focus component address\n    let focusComponent = this.options.connection.hosts.focus;\n\n    // If not specified use default:  'focus.domain'\n\n    if (!focusComponent) {\n        focusComponent = `focus.${this.options.connection.hosts.domain}`;\n    }\n\n    return focusComponent;\n};\n\nModerator.prototype.createConferenceIq = function() {\n    // Generate create conference IQ\n    const elem = $iq({ to: this.getFocusComponent(),\n        type: 'set' });\n\n    // Session Id used for authentication\n    const { sessionId } = Settings;\n    const machineUID = Settings.machineId;\n    const config = this.options.conference;\n\n    logger.info(`Session ID: ${sessionId} machine UID: ${machineUID}`);\n\n    elem.c('conference', {\n        xmlns: 'http://jitsi.org/protocol/focus',\n        room: this.roomName,\n        'machine-uid': machineUID\n    });\n\n    if (sessionId) {\n        elem.attrs({ 'session-id': sessionId });\n    }\n\n    elem.c(\n        'property', {\n            name: 'disableRtx',\n            value: Boolean(config.disableRtx)\n        }).up();\n\n    if (config.audioPacketDelay !== undefined) {\n        elem.c(\n            'property', {\n                name: 'audioPacketDelay',\n                value: config.audioPacketDelay\n            }).up();\n    }\n    if (config.startBitrate) {\n        elem.c(\n            'property', {\n                name: 'startBitrate',\n                value: config.startBitrate\n            }).up();\n    }\n    if (config.minBitrate) {\n        elem.c(\n            'property', {\n                name: 'minBitrate',\n                value: config.minBitrate\n            }).up();\n    }\n\n    if (this.options.conference.startAudioMuted !== undefined) {\n        elem.c(\n            'property', {\n                name: 'startAudioMuted',\n                value: this.options.conference.startAudioMuted\n            }).up();\n    }\n    if (this.options.conference.startVideoMuted !== undefined) {\n        elem.c(\n            'property', {\n                name: 'startVideoMuted',\n                value: this.options.conference.startVideoMuted\n            }).up();\n    }\n\n    // this flag determines whether the bridge will include this call in its\n    // rtcstats reporting or not. If the site admin hasn't set the flag in\n    // config.js, then the client defaults to false (see\n    // react/features/rtcstats/functions.js in jitsi-meet). The server-side\n    // components default to true to match the pre-existing behavior so we only\n    // signal if false.\n    const rtcstatsEnabled = this.options.conference?.analytics?.rtcstatsEnabled ?? false;\n\n    if (!rtcstatsEnabled) {\n        elem.c(\n            'property', {\n                name: 'rtcstatsEnabled',\n                value: rtcstatsEnabled\n            }).up();\n    }\n\n    const { callStatsID, callStatsSecret, disableThirdPartyRequests, enableCallStats } = this.options.conference;\n    const callstatsDisabled = !callStatsID || !callStatsSecret || !enableCallStats\n\n        // Even though AppID and AppSecret may be specified, the integration\n        // of callstats.io may be disabled because of globally-disallowed\n        // requests to any third parties.\n        || disableThirdPartyRequests === true;\n\n    // since the default is true across all the server-side components, only signal if false.\n    if (callstatsDisabled) {\n        elem.c(\n            'property', {\n                name: 'callstatsEnabled',\n                value: !callstatsDisabled\n            }).up();\n    }\n    elem.up();\n\n    return elem;\n};\n\n\nModerator.prototype.parseSessionId = function(resultIq) {\n    // eslint-disable-next-line newline-per-chained-call\n    const sessionId = $(resultIq).find('conference').attr('session-id');\n\n    if (sessionId) {\n        logger.info(`Received sessionId:  ${sessionId}`);\n        Settings.sessionId = sessionId;\n    }\n};\n\nModerator.prototype.parseConfigOptions = function(resultIq) {\n    // eslint-disable-next-line newline-per-chained-call\n    this.setFocusUserJid($(resultIq).find('conference').attr('focusjid'));\n\n    const authenticationEnabled\n        = $(resultIq).find(\n            '>conference>property'\n            + '[name=\\'authentication\\'][value=\\'true\\']').length > 0;\n\n    logger.info(`Authentication enabled: ${authenticationEnabled}`);\n\n    this.externalAuthEnabled = $(resultIq).find(\n        '>conference>property'\n            + '[name=\\'externalAuth\\'][value=\\'true\\']').length > 0;\n\n    logger.info(\n        `External authentication enabled: ${this.externalAuthEnabled}`);\n\n    if (!this.externalAuthEnabled) {\n        // We expect to receive sessionId in 'internal' authentication mode\n        this.parseSessionId(resultIq);\n    }\n\n    // eslint-disable-next-line newline-per-chained-call\n    const authIdentity = $(resultIq).find('>conference').attr('identity');\n\n    this.eventEmitter.emit(AuthenticationEvents.IDENTITY_UPDATED,\n        authenticationEnabled, authIdentity);\n\n    // Check if jicofo has jigasi support enabled.\n    if ($(resultIq).find(\n        '>conference>property'\n        + '[name=\\'sipGatewayEnabled\\'][value=\\'true\\']').length) {\n        this.sipGatewayEnabled = true;\n    }\n\n    logger.info(`Sip gateway enabled:  ${this.sipGatewayEnabled}`);\n};\n\n// FIXME We need to show the fact that we're waiting for the focus to the user\n// (or that the focus is not available)\n/**\n * Allocates the conference focus.\n *\n * @param {Function} callback - the function to be called back upon the\n * successful allocation of the conference focus\n * @returns {Promise} - Resolved when Jicofo allows to join the room. It's never\n * rejected and it'll keep on pinging Jicofo forever.\n */\nModerator.prototype.allocateConferenceFocus = function() {\n    return new Promise(resolve => {\n        // Try to use focus user JID from the config\n        this.setFocusUserJid(this.options.connection.focusUserJid);\n\n        // Send create conference IQ\n        this.connection.sendIQ(\n            this.createConferenceIq(),\n            result => this._allocateConferenceFocusSuccess(result, resolve),\n            error => this._allocateConferenceFocusError(error, resolve));\n\n        // XXX We're pressed for time here because we're beginning a complex\n        // and/or lengthy conference-establishment process which supposedly\n        // involves multiple RTTs. We don't have the time to wait for Strophe to\n        // decide to send our IQ.\n        this.connection.flush();\n    });\n};\n\n/**\n * Invoked by {@link #allocateConferenceFocus} upon its request receiving an\n * error result.\n *\n * @param error - the error result of the request that\n * {@link #allocateConferenceFocus} sent\n * @param {Function} callback - the function to be called back upon the\n * successful allocation of the conference focus\n */\nModerator.prototype._allocateConferenceFocusError = function(error, callback) {\n    // If the session is invalid, remove and try again without session ID to get\n    // a new one\n    const invalidSession\n        = $(error).find('>error>session-invalid').length\n            || $(error).find('>error>not-acceptable').length;\n\n    if (invalidSession) {\n        logger.info('Session expired! - removing');\n        Settings.sessionId = undefined;\n    }\n    if ($(error).find('>error>graceful-shutdown').length) {\n        this.eventEmitter.emit(XMPPEvents.GRACEFUL_SHUTDOWN);\n\n        return;\n    }\n\n    // Check for error returned by the reservation system\n    const reservationErr = $(error).find('>error>reservation-error');\n\n    if (reservationErr.length) {\n        // Trigger error event\n        const errorCode = reservationErr.attr('error-code');\n        const errorTextNode = $(error).find('>error>text');\n        let errorMsg;\n\n        if (errorTextNode) {\n            errorMsg = errorTextNode.text();\n        }\n        this.eventEmitter.emit(\n            XMPPEvents.RESERVATION_ERROR,\n            errorCode,\n            errorMsg);\n\n        return;\n    }\n\n    // Not authorized to create new room\n    if ($(error).find('>error>not-authorized').length) {\n        logger.warn('Unauthorized to start the conference', error);\n        const toDomain = Strophe.getDomainFromJid(error.getAttribute('to'));\n\n        if (toDomain !== this.options.connection.hosts.anonymousdomain) {\n            // FIXME \"is external\" should come either from the focus or\n            // config.js\n            this.externalAuthEnabled = true;\n        }\n        this.eventEmitter.emit(XMPPEvents.AUTHENTICATION_REQUIRED);\n\n        return;\n    }\n    const waitMs = this.getNextErrorTimeout();\n    const errmsg = `Focus error, retry after ${waitMs}`;\n\n    GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n    logger.error(errmsg, error);\n\n    // Show message\n    const focusComponent = this.getFocusComponent();\n    const retrySec = waitMs / 1000;\n\n    // FIXME: message is duplicated ? Do not show in case of session invalid\n    // which means just a retry\n\n    if (!invalidSession) {\n        this.eventEmitter.emit(\n            XMPPEvents.FOCUS_DISCONNECTED,\n            focusComponent,\n            retrySec);\n    }\n\n    // Reset response timeout\n    this.getNextTimeout(true);\n    window.setTimeout(\n        () => this.allocateConferenceFocus().then(callback),\n        waitMs);\n};\n\n/**\n * Invoked by {@link #allocateConferenceFocus} upon its request receiving a\n * success (i.e. non-error) result.\n *\n * @param result - the success (i.e. non-error) result of the request that\n * {@link #allocateConferenceFocus} sent\n * @param {Function} callback - the function to be called back upon the\n * successful allocation of the conference focus\n */\nModerator.prototype._allocateConferenceFocusSuccess = function(\n        result,\n        callback) {\n    // Setup config options\n    this.parseConfigOptions(result);\n\n    // Reset the error timeout (because we haven't failed here).\n    this.getNextErrorTimeout(true);\n\n    // eslint-disable-next-line newline-per-chained-call\n    if ($(result).find('conference').attr('ready') === 'true') {\n        // Reset the non-error timeout (because we've succeeded here).\n        this.getNextTimeout(true);\n\n        // Exec callback\n        callback();\n    } else {\n        const waitMs = this.getNextTimeout();\n\n        logger.info(`Waiting for the focus... ${waitMs}`);\n        window.setTimeout(\n            () => this.allocateConferenceFocus().then(callback),\n            waitMs);\n    }\n};\n\nModerator.prototype.authenticate = function() {\n    return new Promise((resolve, reject) => {\n        this.connection.sendIQ(\n            this.createConferenceIq(),\n            result => {\n                this.parseSessionId(result);\n                resolve();\n            },\n            errorIq => reject({\n                error: $(errorIq).find('iq>error :first')\n                    .prop('tagName'),\n                message: $(errorIq).find('iq>error>text')\n                    .text()\n            })\n        );\n    });\n};\n\nModerator.prototype.getLoginUrl = function(urlCallback, failureCallback) {\n    this._getLoginUrl(/* popup */ false, urlCallback, failureCallback);\n};\n\n/**\n *\n * @param {boolean} popup false for {@link Moderator#getLoginUrl} or true for\n * {@link Moderator#getPopupLoginUrl}\n * @param urlCb\n * @param failureCb\n */\nModerator.prototype._getLoginUrl = function(popup, urlCb, failureCb) {\n    const iq = $iq({ to: this.getFocusComponent(),\n        type: 'get' });\n    const attrs = {\n        xmlns: 'http://jitsi.org/protocol/focus',\n        room: this.roomName,\n        'machine-uid': Settings.machineId\n    };\n    let str = 'auth url'; // for logger\n\n    if (popup) {\n        attrs.popup = true;\n        str = `POPUP ${str}`;\n    }\n    iq.c('login-url', attrs);\n\n    /**\n     * Implements a failure callback which reports an error message and an error\n     * through (1) GlobalOnErrorHandler, (2) logger, and (3) failureCb.\n     *\n     * @param {string} errmsg the error messsage to report\n     * @param {*} error the error to report (in addition to errmsg)\n     */\n    function reportError(errmsg, err) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n        logger.error(errmsg, err);\n        failureCb(err);\n    }\n    this.connection.sendIQ(\n        iq,\n        result => {\n            // eslint-disable-next-line newline-per-chained-call\n            let url = $(result).find('login-url').attr('url');\n\n            url = decodeURIComponent(url);\n            if (url) {\n                logger.info(`Got ${str}: ${url}`);\n                urlCb(url);\n            } else {\n                reportError(`Failed to get ${str} from the focus`, result);\n            }\n        },\n        reportError.bind(undefined, `Get ${str} error`)\n    );\n};\n\nModerator.prototype.getPopupLoginUrl = function(urlCallback, failureCallback) {\n    this._getLoginUrl(/* popup */ true, urlCallback, failureCallback);\n};\n\nModerator.prototype.logout = function(callback) {\n    const iq = $iq({ to: this.getFocusComponent(),\n        type: 'set' });\n    const { sessionId } = Settings;\n\n    if (!sessionId) {\n        callback();\n\n        return;\n    }\n    iq.c('logout', {\n        xmlns: 'http://jitsi.org/protocol/focus',\n        'session-id': sessionId\n    });\n    this.connection.sendIQ(\n        iq,\n        result => {\n            // eslint-disable-next-line newline-per-chained-call\n            let logoutUrl = $(result).find('logout').attr('logout-url');\n\n            if (logoutUrl) {\n                logoutUrl = decodeURIComponent(logoutUrl);\n            }\n            logger.info(`Log out OK, url: ${logoutUrl}`, result);\n            Settings.sessionId = undefined;\n            callback(logoutUrl);\n        },\n        error => {\n            const errmsg = 'Logout error';\n\n            GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n            logger.error(errmsg, error);\n        }\n    );\n};\n","/* global $ */\n\nimport { getLogger } from '@jitsi/logger';\nimport isEqual from 'lodash.isequal';\nimport { $iq, $msg, $pres, Strophe } from 'strophe.js';\n\nimport * as JitsiTranscriptionStatus from '../../JitsiTranscriptionStatus';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport Listenable from '../util/Listenable';\n\nimport AVModeration from './AVModeration';\nimport BreakoutRooms from './BreakoutRooms';\nimport Lobby from './Lobby';\nimport XmppConnection from './XmppConnection';\nimport Moderator from './moderator';\n\nconst logger = getLogger(__filename);\n\nexport const parser = {\n    packet2JSON(xmlElement, nodes) {\n        for (const child of Array.from(xmlElement.children)) {\n            const node = {\n                attributes: {},\n                children: [],\n                tagName: child.tagName\n            };\n\n            for (const attr of Array.from(child.attributes)) {\n                node.attributes[attr.name] = attr.value;\n            }\n            const text = Strophe.getText(child);\n\n            if (text) {\n                // Using Strophe.getText will do work for traversing all direct\n                // child text nodes but returns an escaped value, which is not\n                // desirable at this point.\n                node.value = Strophe.xmlunescape(text);\n            }\n            nodes.push(node);\n            this.packet2JSON(child, node.children);\n        }\n    },\n    json2packet(nodes, packet) {\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n\n            if (node) {\n                packet.c(node.tagName, node.attributes);\n                if (node.value) {\n                    packet.t(node.value);\n                }\n                if (node.children) {\n                    this.json2packet(node.children, packet);\n                }\n                packet.up();\n            }\n        }\n\n        // packet.up();\n    }\n};\n\n/**\n * Returns array of JS objects from the presence JSON associated with the passed\n / nodeName\n * @param pres the presence JSON\n * @param nodeName the name of the node (videomuted, audiomuted, etc)\n */\nexport function filterNodeFromPresenceJSON(pres, nodeName) {\n    const res = [];\n\n    for (let i = 0; i < pres.length; i++) {\n        if (pres[i].tagName === nodeName) {\n            res.push(pres[i]);\n        }\n    }\n\n    return res;\n}\n\n// XXX As ChatRoom constructs XMPP stanzas and Strophe is build around the idea\n// of chaining function calls, allow long function call chains.\n/* eslint-disable newline-per-chained-call */\n\n/**\n * Array of affiliations that are allowed in members only room.\n * @type {string[]}\n */\nconst MEMBERS_AFFILIATIONS = [ 'owner', 'admin', 'member' ];\n\n/**\n *\n */\nexport default class ChatRoom extends Listenable {\n\n    /* eslint-disable max-params */\n\n    /**\n     *\n     * @param {XmppConnection} connection - The XMPP connection instance.\n     * @param jid\n     * @param password\n     * @param XMPP\n     * @param options\n     * @param {boolean} options.disableFocus - when set to {@code false} will\n     * not invite Jicofo into the room.\n     * @param {boolean} options.disableDiscoInfo - when set to {@code false} will skip disco info.\n     * This is intended to be used only for lobby rooms.\n     * @param {boolean} options.enableLobby - when set to {@code false} will skip creating lobby room.\n     * @param {boolean} options.hiddenFromRecorderFeatureEnabled - when set to {@code true} we will check identity tag\n     * for node presence.\n     */\n    constructor(connection, jid, password, XMPP, options) {\n        super();\n        this.xmpp = XMPP;\n        this.connection = connection;\n        this.roomjid = Strophe.getBareJidFromJid(jid);\n        this.myroomjid = jid;\n        this.password = password;\n        this.replaceParticipant = false;\n        logger.info(`Joined MUC as ${this.myroomjid}`);\n        this.members = {};\n        this.presMap = {};\n        this.presHandlers = {};\n        this._removeConnListeners = [];\n        this.joined = false;\n        this.inProgressEmitted = false;\n        this.role = null;\n        this.focusMucJid = null;\n        this.noBridgeAvailable = false;\n        this.options = options || {};\n        this.moderator\n            = new Moderator(this.roomjid, this.xmpp, this.eventEmitter, {\n                connection: this.xmpp.options,\n                conference: this.options\n            });\n        if (typeof this.options.enableLobby === 'undefined' || this.options.enableLobby) {\n            this.lobby = new Lobby(this);\n        }\n        this.avModeration = new AVModeration(this);\n        this.breakoutRooms = new BreakoutRooms(this);\n        this.initPresenceMap(options);\n        this.lastPresences = {};\n        this.phoneNumber = null;\n        this.phonePin = null;\n        this.connectionTimes = {};\n        this.participantPropertyListener = null;\n\n        this.locked = false;\n        this.transcriptionStatus = JitsiTranscriptionStatus.OFF;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     *\n     */\n    initPresenceMap(options = {}) {\n        this.presMap.to = this.myroomjid;\n        this.presMap.xns = 'http://jabber.org/protocol/muc';\n        this.presMap.nodes = [];\n\n        if (options.statsId) {\n            this.presMap.nodes.push({\n                'tagName': 'stats-id',\n                'value': options.statsId\n            });\n        }\n\n        this.presenceUpdateTime = Date.now();\n    }\n\n    /**\n     * Joins the chat room.\n     * @param {string} password - Password to unlock room on joining.\n     * @returns {Promise} - resolved when join completes. At the time of this\n     * writing it's never rejected.\n     */\n    join(password, replaceParticipant) {\n        this.password = password;\n        this.replaceParticipant = replaceParticipant;\n\n        return new Promise(resolve => {\n            this.options.disableFocus\n                && logger.info(`Conference focus disabled for ${this.roomjid}`);\n\n            const preJoin\n                = this.options.disableFocus\n                    ? Promise.resolve()\n                    : this.moderator.allocateConferenceFocus();\n\n            preJoin.then(() => {\n                this.sendPresence(true);\n                this._removeConnListeners.push(\n                    this.connection.addEventListener(\n                        XmppConnection.Events.CONN_STATUS_CHANGED,\n                        this.onConnStatusChanged.bind(this))\n                );\n                resolve();\n            });\n        });\n    }\n\n    /**\n     *\n     * @param fromJoin - Whether this is initial presence to join the room.\n     */\n    sendPresence(fromJoin) {\n        const to = this.presMap.to;\n\n        if (!this.connection || !this.connection.connected || !to || (!this.joined && !fromJoin)) {\n            // Too early to send presence - not initialized\n            return;\n        }\n\n        const pres = $pres({ to });\n\n        // xep-0045 defines: \"including in the initial presence stanza an empty\n        // <x/> element qualified by the 'http://jabber.org/protocol/muc'\n        // namespace\" and subsequent presences should not include that or it can\n        // be considered as joining, and server can send us the message history\n        // for the room on every presence\n        if (fromJoin) {\n            if (this.replaceParticipant) {\n                pres.c('flip_device').up();\n            }\n\n            pres.c('x', { xmlns: this.presMap.xns });\n\n            if (this.password) {\n                pres.c('password').t(this.password).up();\n            }\n            if (this.options.billingId) {\n                pres.c('billingid').t(this.options.billingId).up();\n            }\n\n            pres.up();\n        }\n\n        parser.json2packet(this.presMap.nodes, pres);\n\n        // we store time we last synced presence state\n        this.presenceSyncTime = Date.now();\n\n        this.connection.send(pres);\n        if (fromJoin) {\n            // XXX We're pressed for time here because we're beginning a complex\n            // and/or lengthy conference-establishment process which supposedly\n            // involves multiple RTTs. We don't have the time to wait for\n            // Strophe to decide to send our IQ.\n            this.connection.flush();\n        }\n    }\n\n    /**\n     * Sends the presence unavailable, signaling the server\n     * we want to leave the room.\n     */\n    doLeave() {\n        logger.log('do leave', this.myroomjid);\n        const pres = $pres({ to: this.myroomjid,\n            type: 'unavailable' });\n\n        this.presMap.length = 0;\n\n        // XXX Strophe is asynchronously sending by default. Unfortunately, that\n        // means that there may not be enough time to send the unavailable\n        // presence. Switching Strophe to synchronous sending is not much of an\n        // option because it may lead to a noticeable delay in navigating away\n        // from the current location. As a compromise, we will try to increase\n        // the chances of sending the unavailable presence within the short time\n        // span that we have upon unloading by invoking flush() on the\n        // connection. We flush() once before sending/queuing the unavailable\n        // presence in order to attemtp to have the unavailable presence at the\n        // top of the send queue. We flush() once more after sending/queuing the\n        // unavailable presence in order to attempt to have it sent as soon as\n        // possible.\n        // FIXME do not use Strophe.Connection in the ChatRoom directly\n        !this.connection.isUsingWebSocket && this.connection.flush();\n        this.connection.send(pres);\n        this.connection.flush();\n    }\n\n    /**\n     *\n     */\n    discoRoomInfo() {\n        // https://xmpp.org/extensions/xep-0045.html#disco-roominfo\n\n        const getInfo\n            = $iq({\n                type: 'get',\n                to: this.roomjid\n            })\n                .c('query', { xmlns: Strophe.NS.DISCO_INFO });\n\n        this.connection.sendIQ(getInfo, result => {\n            const locked\n                = $(result).find('>query>feature[var=\"muc_passwordprotected\"]')\n                    .length\n                    === 1;\n\n            if (locked !== this.locked) {\n                this.eventEmitter.emit(XMPPEvents.MUC_LOCK_CHANGED, locked);\n                this.locked = locked;\n            }\n\n            const meetingIdValEl\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_meetingId\"]>value');\n\n            if (meetingIdValEl.length) {\n                this.setMeetingId(meetingIdValEl.text());\n            } else {\n                logger.warn('No meeting ID from backend');\n            }\n\n            const membersOnly = $(result).find('>query>feature[var=\"muc_membersonly\"]').length === 1;\n\n            const lobbyRoomField\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_lobbyroom\"]>value');\n\n            if (this.lobby) {\n                this.lobby.setLobbyRoomJid(lobbyRoomField && lobbyRoomField.length ? lobbyRoomField.text() : undefined);\n            }\n\n            const isBreakoutField\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_isbreakout\"]>value');\n            const isBreakoutRoom = Boolean(isBreakoutField?.text());\n\n            this.breakoutRooms._setIsBreakoutRoom(isBreakoutRoom);\n\n            const breakoutMainRoomField\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_breakout_main_room\"]>value');\n\n            if (breakoutMainRoomField?.length) {\n                this.breakoutRooms._setMainRoomJid(breakoutMainRoomField.text());\n            }\n\n            if (membersOnly !== this.membersOnlyEnabled) {\n                this.membersOnlyEnabled = membersOnly;\n                this.eventEmitter.emit(XMPPEvents.MUC_MEMBERS_ONLY_CHANGED, membersOnly);\n            }\n\n        }, error => {\n            GlobalOnErrorHandler.callErrorHandler(error);\n            logger.error('Error getting room info: ', error);\n        });\n    }\n\n    /**\n     * Sets the meeting unique Id (received from the backend).\n     *\n     * @param {string} meetingId - The new meetings id.\n     * @returns {void}\n     */\n    setMeetingId(meetingId) {\n        if (this.meetingId !== meetingId) {\n            if (this.meetingId) {\n                logger.warn(`Meeting Id changed from:${this.meetingId} to:${meetingId}`);\n            }\n            this.meetingId = meetingId;\n            this.eventEmitter.emit(XMPPEvents.MEETING_ID_SET, meetingId);\n        }\n    }\n\n    /**\n     *\n     */\n    createNonAnonymousRoom() {\n        // http://xmpp.org/extensions/xep-0045.html#createroom-reserved\n\n        if (this.options.disableDiscoInfo) {\n            return;\n        }\n\n        const getForm = $iq({ type: 'get',\n            to: this.roomjid })\n            .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' })\n            .c('x', { xmlns: 'jabber:x:data',\n                type: 'submit' });\n\n        this.connection.sendIQ(getForm, form => {\n            if (!$(form).find(\n                    '>query>x[xmlns=\"jabber:x:data\"]'\n                    + '>field[var=\"muc#roomconfig_whois\"]').length) {\n                const errmsg = 'non-anonymous rooms not supported';\n\n                GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n                logger.error(errmsg);\n\n                return;\n            }\n\n            const formSubmit = $iq({ to: this.roomjid,\n                type: 'set' })\n                .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' });\n\n            formSubmit.c('x', { xmlns: 'jabber:x:data',\n                type: 'submit' });\n\n            formSubmit.c('field', { 'var': 'FORM_TYPE' })\n                .c('value')\n                .t('http://jabber.org/protocol/muc#roomconfig').up().up();\n\n            formSubmit.c('field', { 'var': 'muc#roomconfig_whois' })\n                .c('value').t('anyone').up().up();\n\n            this.connection.sendIQ(formSubmit);\n\n        }, error => {\n            GlobalOnErrorHandler.callErrorHandler(error);\n            logger.error('Error getting room configuration form: ', error);\n        });\n    }\n\n    /**\n     * Handles Xmpp Connection status updates.\n     *\n     * @param {Strophe.Status} status - The Strophe connection status.\n     */\n    onConnStatusChanged(status) {\n        // Send cached presence when the XMPP connection is re-established.\n        if (status === XmppConnection.Status.CONNECTED) {\n            this.sendPresence();\n        }\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresence(pres) {\n        const from = pres.getAttribute('from');\n        const member = {};\n        const statusEl = pres.getElementsByTagName('status')[0];\n\n        if (statusEl) {\n            member.status = statusEl.textContent || '';\n        }\n        let hasStatusUpdate = false;\n        let hasVersionUpdate = false;\n        const xElement\n            = pres.getElementsByTagNameNS(\n                'http://jabber.org/protocol/muc#user', 'x')[0];\n        const mucUserItem\n            = xElement && xElement.getElementsByTagName('item')[0];\n\n        member.isReplaceParticipant\n            = pres.getElementsByTagName('flip_device').length;\n\n        member.affiliation\n            = mucUserItem && mucUserItem.getAttribute('affiliation');\n        member.role = mucUserItem && mucUserItem.getAttribute('role');\n\n        // Focus recognition\n        const jid = mucUserItem && mucUserItem.getAttribute('jid');\n\n        member.jid = jid;\n        member.isFocus\n            = jid && jid.indexOf(`${this.moderator.getFocusUserJid()}/`) === 0;\n        member.isHiddenDomain\n            = jid && jid.indexOf('@') > 0\n                && this.options.hiddenDomain\n                    === jid.substring(jid.indexOf('@') + 1, jid.indexOf('/'));\n\n        const isTranscriber = pres.getElementsByTagName('nick');\n\n        if (isTranscriber[0] && isTranscriber[0].innerHTML.toLowerCase() === \"transcriber\") {\n              member.isHiddenDomain = true;\n        }\n        \n        this.eventEmitter.emit(XMPPEvents.PRESENCE_RECEIVED, {\n            fromHiddenDomain: member.isHiddenDomain,\n            presence: pres\n        });\n\n        const xEl = pres.querySelector('x');\n\n        if (xEl) {\n            xEl.remove();\n        }\n\n        const nodes = [];\n\n        parser.packet2JSON(pres, nodes);\n        this.lastPresences[from] = nodes;\n\n        // process nodes to extract data needed for MUC_JOINED and\n        // MUC_MEMBER_JOINED events\n        const extractIdentityInformation = node => {\n            const identity = {};\n            const userInfo = node.children.find(c => c.tagName === 'user');\n\n            if (userInfo) {\n                identity.user = {};\n                const tags = [ 'id', 'name', 'avatar' ];\n\n                if (this.options.hiddenFromRecorderFeatureEnabled) {\n                    tags.push('hidden-from-recorder');\n                }\n\n                for (const tag of tags) {\n                    const child\n                        = userInfo.children.find(c => c.tagName === tag);\n\n                    if (child) {\n                        identity.user[tag] = child.value;\n                    }\n                }\n            }\n            const groupInfo = node.children.find(c => c.tagName === 'group');\n\n            if (groupInfo) {\n                identity.group = groupInfo.value;\n            }\n\n            return identity;\n        };\n\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n\n            switch (node.tagName) {\n            case 'bot': {\n                const { attributes } = node;\n\n                if (!attributes) {\n                    break;\n                }\n                const { type } = attributes;\n\n                member.botType = type;\n                break;\n            }\n            case 'nick':\n                member.nick = node.value;\n                break;\n            case 'userId':\n                member.id = node.value;\n                break;\n            case 'stats-id':\n                member.statsID = node.value;\n                break;\n            case 'identity':\n                member.identity = extractIdentityInformation(node);\n                break;\n            case 'features': {\n                member.features = this._extractFeatures(node);\n                break;\n            }\n            case 'stat': {\n                const { attributes } = node;\n\n                if (!attributes) {\n                    break;\n                }\n                const { name } = attributes;\n\n                if (name === 'version') {\n                    member.version = attributes.value;\n                }\n                break;\n            }\n            }\n        }\n\n        if (!this.joined && !this.inProgressEmitted) {\n            const now = this.connectionTimes['muc.join.started'] = window.performance.now();\n\n            logger.log('(TIME) MUC join started:\\t', now);\n\n            this.eventEmitter.emit(XMPPEvents.MUC_JOIN_IN_PROGRESS);\n            this.inProgressEmitted = true;\n        }\n\n        if (from === this.myroomjid) {\n            const newRole\n                = member.affiliation === 'owner' ? member.role : 'none';\n\n            if (this.role !== newRole) {\n                this.role = newRole;\n                this.eventEmitter.emit(\n                    XMPPEvents.LOCAL_ROLE_CHANGED,\n                    this.role);\n            }\n            if (!this.joined) {\n                this.joined = true;\n                const now = this.connectionTimes['muc.joined']\n                    = window.performance.now();\n\n                logger.log('(TIME) MUC joined:\\t', now);\n\n                // set correct initial state of locked\n                if (this.password) {\n                    this.locked = true;\n                }\n\n                // Re-send presence in case any presence updates were added,\n                // but blocked from sending, during the join process.\n                // send the presence only if there was a modification after we had synced it\n                if (this.presenceUpdateTime >= this.presenceSyncTime) {\n                    this.sendPresence();\n                }\n\n                this.eventEmitter.emit(XMPPEvents.MUC_JOINED);\n\n                // Now let's check the disco-info to retrieve the\n                // meeting Id if any\n                !this.options.disableDiscoInfo && this.discoRoomInfo();\n            }\n        } else if (jid === undefined) {\n            logger.info('Ignoring member with undefined JID');\n        } else if (this.members[from] === undefined) {\n            // new participant\n            this.members[from] = member;\n            logger.log('entered', from, member);\n            hasStatusUpdate = member.status !== undefined;\n            hasVersionUpdate = member.version !== undefined;\n            if (member.isFocus) {\n                this._initFocus(from, member.features);\n            } else {\n                // identity is being added to member joined, so external\n                // services can be notified for that (currently identity is\n                // not used inside library)\n                this.eventEmitter.emit(\n                    XMPPEvents.MUC_MEMBER_JOINED,\n                    from,\n                    member.nick,\n                    member.role,\n                    member.isHiddenDomain,\n                    member.statsID,\n                    member.status,\n                    member.identity,\n                    member.botType,\n                    member.jid,\n                    member.features,\n                    member.isReplaceParticipant);\n\n                // we are reporting the status with the join\n                // so we do not want a second event about status update\n                hasStatusUpdate = false;\n            }\n        } else {\n            // Presence update for existing participant\n            // Watch role change:\n            const memberOfThis = this.members[from];\n\n            if (memberOfThis.role !== member.role) {\n                memberOfThis.role = member.role;\n                this.eventEmitter.emit(\n                    XMPPEvents.MUC_ROLE_CHANGED, from, member.role);\n            }\n\n            // affiliation changed\n            if (memberOfThis.affiliation !== member.affiliation) {\n                memberOfThis.affiliation = member.affiliation;\n            }\n\n            // fire event that botType had changed\n            if (memberOfThis.botType !== member.botType) {\n                memberOfThis.botType = member.botType;\n                this.eventEmitter.emit(\n                    XMPPEvents.MUC_MEMBER_BOT_TYPE_CHANGED,\n                    from,\n                    member.botType);\n            }\n\n            if (member.isFocus) {\n                // From time to time first few presences of the focus are not\n                // containing it's jid. That way we can mark later the focus\n                // member instead of not marking it at all and not starting the\n                // conference.\n                // FIXME: Maybe there is a better way to handle this issue. It\n                // seems there is some period of time in prosody that the\n                // configuration form is received but not applied. And if any\n                // participant joins during that period of time the first\n                // presence from the focus won't contain\n                // <item jid=\"focus...\" />.\n                // By default we are disabling the waiting for form submission in order to use the room\n                // and we had enabled by default that jids are public in the room ,\n                // so this case should not happen, if public jid is turned off we will receive the jid\n                // when we become moderator in the room\n                memberOfThis.isFocus = true;\n                this._initFocus(from, member.features);\n            }\n\n            // store the new display name\n            if (member.displayName) {\n                memberOfThis.displayName = member.displayName;\n            }\n\n            // update stored status message to be able to detect changes\n            if (memberOfThis.status !== member.status) {\n                hasStatusUpdate = true;\n                memberOfThis.status = member.status;\n            }\n\n            if (memberOfThis.version !== member.version) {\n                hasVersionUpdate = true;\n                memberOfThis.version = member.version;\n            }\n\n            if (!isEqual(memberOfThis.features, member.features)) {\n                memberOfThis.features = member.features;\n                this.eventEmitter.emit(XMPPEvents.PARTICIPANT_FEATURES_CHANGED, from, member.features);\n            }\n        }\n\n        // after we had fired member or room joined events, lets fire events\n        // for the rest info we got in presence\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n\n            switch (node.tagName) {\n            case 'nick':\n                if (!member.isFocus) {\n                    const displayName\n                        = this.xmpp.options.displayJids\n                            ? Strophe.getResourceFromJid(from)\n                            : member.nick;\n\n                    this.eventEmitter.emit(\n                        XMPPEvents.DISPLAY_NAME_CHANGED,\n                        from,\n                        displayName);\n                }\n                break;\n            case 'bridgeNotAvailable':\n                if (member.isFocus && !this.noBridgeAvailable) {\n                    this.noBridgeAvailable = true;\n                    this.eventEmitter.emit(XMPPEvents.BRIDGE_DOWN);\n                }\n                break;\n            case 'conference-properties':\n                if (member.isFocus) {\n                    const properties = {};\n\n                    for (let j = 0; j < node.children.length; j++) {\n                        const { attributes } = node.children[j];\n\n                        if (attributes && attributes.key) {\n                            properties[attributes.key] = attributes.value;\n                        }\n                    }\n\n                    this.eventEmitter.emit(XMPPEvents.CONFERENCE_PROPERTIES_CHANGED, properties);\n\n                    // Log if Jicofo supports restart by terminate only once. This conference property does not change\n                    // during the call.\n                    if (typeof this.restartByTerminateSupported === 'undefined') {\n                        this.restartByTerminateSupported = properties['support-terminate-restart'] === 'true';\n                        logger.info(`Jicofo supports restart by terminate: ${this.supportsRestartByTerminate()}`);\n                    }\n                }\n                break;\n            case 'transcription-status': {\n                const { attributes } = node;\n\n                if (!attributes) {\n                    break;\n                }\n\n                const { status } = attributes;\n\n                if (status && status !== this.transcriptionStatus) {\n                    this.transcriptionStatus = status;\n                    this.eventEmitter.emit(\n                        XMPPEvents.TRANSCRIPTION_STATUS_CHANGED,\n                        status\n                    );\n                }\n\n\n                break;\n            }\n            case 'call-control': {\n                const att = node.attributes;\n\n                if (!att) {\n                    break;\n                }\n                this.phoneNumber = att.phone || null;\n                this.phonePin = att.pin || null;\n                this.eventEmitter.emit(XMPPEvents.PHONE_NUMBER_CHANGED);\n                break;\n            }\n            default:\n                this.processNode(node, from);\n            }\n        }\n\n        // Trigger status message update if necessary\n        if (hasStatusUpdate) {\n            this.eventEmitter.emit(\n                XMPPEvents.PRESENCE_STATUS,\n                from,\n                member.status);\n        }\n\n        if (hasVersionUpdate) {\n            logger.info(`Received version for ${jid}: ${member.version}`);\n        }\n    }\n\n    /**\n     * Extracts the features from the presence.\n     * @param node the node to process.\n     * @return features the Set of features where extracted data is added.\n     * @private\n     */\n    _extractFeatures(node) {\n        const features = new Set();\n\n        for (let j = 0; j < node.children.length; j++) {\n            const { attributes } = node.children[j];\n\n            if (attributes && attributes.var) {\n                features.add(attributes.var);\n            }\n        }\n\n        return features;\n    }\n\n    /**\n     * Initialize some properties when the focus participant is verified.\n     * @param from jid of the focus\n     * @param features the features reported in jicofo presence\n     */\n    _initFocus(from, features) {\n        this.focusMucJid = from;\n        this.focusFeatures = features;\n    }\n\n    /**\n     * Sets the special listener to be used for \"command\"s whose name starts\n     * with \"jitsi_participant_\".\n     */\n    setParticipantPropertyListener(listener) {\n        this.participantPropertyListener = listener;\n    }\n\n    /**\n     * Checks if Jicofo supports restarting Jingle session after 'session-terminate'.\n     * @returns {boolean}\n     */\n    supportsRestartByTerminate() {\n        return this.restartByTerminateSupported;\n    }\n\n    /**\n     *\n     * @param node\n     * @param from\n     */\n    processNode(node, from) {\n        // make sure we catch all errors coming from any handler\n        // otherwise we can remove the presence handler from strophe\n        try {\n            let tagHandlers = this.presHandlers[node.tagName];\n\n            if (node.tagName.startsWith('jitsi_participant_')) {\n                tagHandlers = [ this.participantPropertyListener ];\n            }\n\n            if (tagHandlers) {\n                tagHandlers.forEach(handler => {\n                    handler(node, Strophe.getResourceFromJid(from), from);\n                });\n            }\n        } catch (e) {\n            GlobalOnErrorHandler.callErrorHandler(e);\n            logger.error(`Error processing:${node.tagName} node.`, e);\n        }\n    }\n\n    /**\n     * Send text message to the other participants in the conference\n     * @param message\n     * @param elementName\n     */\n    sendMessage(message, elementName) {\n        const msg = $msg({ to: this.roomjid,\n            type: 'groupchat' });\n\n        // We are adding the message in a packet extension. If this element\n        // is different from 'body', we add a custom namespace.\n        // e.g. for 'json-message' extension of message stanza.\n        if (elementName === 'body') {\n            msg.c(elementName, {}, message);\n        } else {\n            msg.c(elementName, { xmlns: 'http://jitsi.org/jitmeet' }, message);\n        }\n\n        this.connection.send(msg);\n        this.eventEmitter.emit(XMPPEvents.SENDING_CHAT_MESSAGE, message);\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Send private text message to another participant of the conference\n     * @param id id/muc resource of the receiver\n     * @param message\n     * @param elementName\n     */\n    sendPrivateMessage(id, message, elementName) {\n        const msg = $msg({ to: `${this.roomjid}/${id}`,\n            type: 'chat' });\n\n        // We are adding the message in packet. If this element is different\n        // from 'body', we add our custom namespace for the same.\n        // e.g. for 'json-message' message extension.\n        if (elementName === 'body') {\n            msg.c(elementName, message).up();\n        } else {\n            msg.c(elementName, { xmlns: 'http://jitsi.org/jitmeet' }, message)\n                .up();\n        }\n\n        this.connection.send(msg);\n        this.eventEmitter.emit(\n            XMPPEvents.SENDING_PRIVATE_CHAT_MESSAGE, message);\n    }\n    /* eslint-enable max-params */\n\n    /**\n     *\n     * @param subject\n     */\n    setSubject(subject) {\n        const msg = $msg({ to: this.roomjid,\n            type: 'groupchat' });\n\n        msg.c('subject', subject);\n        this.connection.send(msg);\n    }\n\n    /**\n     * Called when participant leaves.\n     * @param jid the jid of the participant that leaves\n     * @param skipEvents optional params to skip any events, including check\n     * whether this is the focus that left\n     */\n    onParticipantLeft(jid, skipEvents) {\n        delete this.lastPresences[jid];\n\n        if (skipEvents) {\n            return;\n        }\n\n        this.eventEmitter.emit(XMPPEvents.MUC_MEMBER_LEFT, jid);\n\n        this.moderator.onMucMemberLeft(jid);\n    }\n\n    /**\n     *\n     * @param pres\n     * @param from\n     */\n    onPresenceUnavailable(pres, from) {\n        // ignore presence\n        if ($(pres).find('>ignore[xmlns=\"http://jitsi.org/jitmeet/\"]').length) {\n            return true;\n        }\n\n        // room destroyed ?\n        const destroySelect = $(pres).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>destroy');\n\n        if (destroySelect.length) {\n            let reason;\n            const reasonSelect\n                = $(pres).find(\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n                        + '>destroy>reason');\n\n            if (reasonSelect.length) {\n                reason = reasonSelect.text();\n            }\n\n            this.eventEmitter.emit(XMPPEvents.MUC_DESTROYED, reason, destroySelect.attr('jid'));\n            this.connection.emuc.doLeave(this.roomjid);\n\n            return true;\n        }\n\n        // Status code 110 indicates that this notification is \"self-presence\".\n        const isSelfPresence\n            = $(pres)\n                .find(\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>'\n                        + 'status[code=\"110\"]')\n                .length;\n        const isKick\n            = $(pres)\n                .find(\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n                        + '>status[code=\"307\"]')\n                .length;\n        const membersKeys = Object.keys(this.members);\n        const isReplaceParticipant = $(pres).find('flip_device').length;\n\n        if (isKick) {\n            const actorSelect\n                = $(pres)\n                .find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>item>actor');\n            let actorNick;\n\n            if (actorSelect.length) {\n                actorNick = actorSelect.attr('nick');\n            }\n\n            let reason;\n            const reasonSelect\n                = $(pres).find(\n                '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n                + '>item>reason');\n\n            if (reasonSelect.length) {\n                reason = reasonSelect.text();\n            }\n\n            // we first fire the kicked so we can show the participant\n            // who kicked, before notifying that participant left\n            // we fire kicked for us and for any participant kicked\n            this.eventEmitter.emit(\n                XMPPEvents.KICKED,\n                isSelfPresence,\n                actorNick,\n                Strophe.getResourceFromJid(from),\n                reason,\n                isReplaceParticipant);\n        }\n\n        if (isSelfPresence) {\n            // If the status code is 110 this means we're leaving and we would\n            // like to remove everyone else from our view, so we trigger the\n            // event.\n            membersKeys.forEach(jid => {\n                const member = this.members[jid];\n\n                delete this.members[jid];\n                this.onParticipantLeft(jid, member.isFocus);\n            });\n            this.connection.emuc.doLeave(this.roomjid);\n\n            // we fire muc_left only if this is not a kick,\n            // kick has both statuses 110 and 307.\n            if (!isKick) {\n                this.eventEmitter.emit(XMPPEvents.MUC_LEFT);\n            }\n        } else {\n            delete this.members[from];\n            this.onParticipantLeft(from, false);\n        }\n    }\n\n    /**\n     *\n     * @param msg\n     * @param from\n     */\n    onMessage(msg, from) {\n        const type = msg.getAttribute('type');\n\n        if (type === 'error') {\n            const settingsErrorMsg = $(msg).find('>settings-error>text').text();\n\n            if (settingsErrorMsg.length) {\n                this.eventEmitter.emit(XMPPEvents.SETTINGS_ERROR_RECEIVED, settingsErrorMsg);\n\n                return true;\n            }\n            const errorMsg = $(msg).find('>error>text').text();\n\n            this.eventEmitter.emit(XMPPEvents.CHAT_ERROR_RECEIVED, errorMsg);\n\n            return true;\n        }\n\n        const txt = $(msg).find('>body').text();\n        const subject = $(msg).find('>subject');\n\n        if (subject.length) {\n            const subjectText = subject.text();\n\n            if (subjectText || subjectText === '') {\n                this.eventEmitter.emit(XMPPEvents.SUBJECT_CHANGED, subjectText);\n                logger.log(`Subject is changed to ${subjectText}`);\n            }\n        }\n\n        // xep-0203 delay\n        let stamp = $(msg).find('>delay').attr('stamp');\n\n        if (!stamp) {\n            // or xep-0091 delay, UTC timestamp\n            stamp = $(msg).find('>[xmlns=\"jabber:x:delay\"]').attr('stamp');\n\n            if (stamp) {\n                // the format is CCYYMMDDThh:mm:ss\n                const dateParts\n                    = stamp.match(/(\\d{4})(\\d{2})(\\d{2}T\\d{2}:\\d{2}:\\d{2})/);\n\n                stamp = `${dateParts[1]}-${dateParts[2]}-${dateParts[3]}Z`;\n            }\n        }\n\n        if (from === this.roomjid) {\n            let invite;\n\n            if ($(msg).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>status[code=\"104\"]').length) {\n                this.discoRoomInfo();\n            } else if ((invite = $(msg).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>invite'))\n                        && invite.length) {\n                const passwordSelect = $(msg).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>password');\n                let password;\n\n                if (passwordSelect && passwordSelect.length) {\n                    password = passwordSelect.text();\n                }\n\n                this.eventEmitter.emit(XMPPEvents.INVITE_MESSAGE_RECEIVED,\n                    from, invite.attr('from'), txt, password);\n            }\n        }\n\n        const jsonMessage = $(msg).find('>json-message').text();\n\n        if (jsonMessage) {\n            const parsedJson = this.xmpp.tryParseJSONAndVerify(jsonMessage);\n\n            // We emit this event if the message is a valid json, and is not\n            // delivered after a delay, i.e. stamp is undefined.\n            // e.g. - subtitles should not be displayed if delayed.\n            if (parsedJson && stamp === undefined) {\n                this.eventEmitter.emit(XMPPEvents.JSON_MESSAGE_RECEIVED,\n                    from, parsedJson);\n\n                return;\n            }\n        }\n\n        if (txt) {\n            if (type === 'chat') {\n                this.eventEmitter.emit(XMPPEvents.PRIVATE_MESSAGE_RECEIVED,\n                        from, txt, this.myroomjid, stamp);\n            } else if (type === 'groupchat') {\n                this.eventEmitter.emit(XMPPEvents.MESSAGE_RECEIVED,\n                        from, txt, this.myroomjid, stamp);\n            }\n        }\n    }\n\n    /**\n     *\n     * @param pres\n     * @param from\n     */\n    onPresenceError(pres, from) {\n        if ($(pres)\n                .find(\n                    '>error[type=\"auth\"]'\n                        + '>not-authorized['\n                        + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]')\n                .length) {\n            logger.log('on password required', from);\n            this.eventEmitter.emit(XMPPEvents.PASSWORD_REQUIRED);\n        } else if ($(pres)\n                .find(\n                    '>error[type=\"cancel\"]'\n                        + '>not-allowed['\n                        + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]')\n                .length) {\n            const toDomain = Strophe.getDomainFromJid(pres.getAttribute('to'));\n\n            if (toDomain === this.xmpp.options.hosts.anonymousdomain) {\n                // enter the room by replying with 'not-authorized'. This would\n                // result in reconnection from authorized domain.\n                // We're either missing Jicofo/Prosody config for anonymous\n                // domains or something is wrong.\n                this.eventEmitter.emit(XMPPEvents.ROOM_JOIN_ERROR);\n\n            } else {\n                logger.warn('onPresError ', pres);\n                this.eventEmitter.emit(\n                    XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR);\n            }\n        } else if ($(pres).find('>error>service-unavailable').length) {\n            logger.warn('Maximum users limit for the room has been reached',\n                pres);\n            this.eventEmitter.emit(XMPPEvents.ROOM_MAX_USERS_ERROR);\n            this.connection.emuc.doLeave(this.roomjid);\n        } else if ($(pres)\n            .find(\n                '>error[type=\"auth\"]'\n                + '>registration-required['\n                + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]').length) {\n\n            // let's extract the lobby jid from the custom field\n            const lobbyRoomNode = $(pres).find('>error[type=\"auth\"]>lobbyroom');\n            let lobbyRoomJid;\n\n            if (lobbyRoomNode.length) {\n                lobbyRoomJid = lobbyRoomNode.text();\n            } else {\n                // let's fallback to old location of lobbyroom node, TODO: to be removed in the future once\n                // everything is updated\n                const lobbyRoomOldNode = $(pres).find('>lobbyroom');\n\n                if (lobbyRoomOldNode.length) {\n                    lobbyRoomJid = lobbyRoomOldNode.text();\n                }\n            }\n\n            this.eventEmitter.emit(XMPPEvents.ROOM_CONNECT_MEMBERS_ONLY_ERROR, lobbyRoomJid);\n        } else {\n            logger.warn('onPresError ', pres);\n            this.eventEmitter.emit(XMPPEvents.ROOM_CONNECT_ERROR);\n        }\n    }\n\n    /**\n     *\n     * @param jid\n     * @param affiliation\n     */\n    setAffiliation(jid, affiliation) {\n        const grantIQ = $iq({\n            to: this.roomjid,\n            type: 'set'\n        })\n        .c('query', { xmlns: 'http://jabber.org/protocol/muc#admin' })\n        .c('item', {\n            affiliation,\n            nick: Strophe.getResourceFromJid(jid)\n        })\n        .c('reason').t(`Your affiliation has been changed to '${affiliation}'.`)\n        .up().up().up();\n\n        this.connection.sendIQ(\n            grantIQ,\n            result => logger.log('Set affiliation of participant with jid: ', jid, 'to', affiliation, result),\n            error => logger.log('Set affiliation of participant error: ', error));\n    }\n\n    /**\n     *\n     * @param jid\n     * @param reason\n     */\n    kick(jid, reason = 'You have been kicked.') {\n        const kickIQ = $iq({ to: this.roomjid,\n            type: 'set' })\n            .c('query', { xmlns: 'http://jabber.org/protocol/muc#admin' })\n            .c('item', { nick: Strophe.getResourceFromJid(jid),\n                role: 'none' })\n            .c('reason').t(reason).up().up().up();\n\n        this.connection.sendIQ(\n            kickIQ,\n            result => logger.log('Kick participant with jid: ', jid, result),\n            error => logger.log('Kick participant error: ', error));\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     *\n     * @param key\n     * @param onSuccess\n     * @param onError\n     * @param onNotSupported\n     */\n    lockRoom(key, onSuccess, onError, onNotSupported) {\n        // http://xmpp.org/extensions/xep-0045.html#roomconfig\n        this.connection.sendIQ(\n            $iq({\n                to: this.roomjid,\n                type: 'get'\n            })\n                .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' }),\n            res => {\n                if ($(res)\n                        .find(\n                            '>query>x[xmlns=\"jabber:x:data\"]'\n                                + '>field[var=\"muc#roomconfig_roomsecret\"]')\n                        .length) {\n                    const formsubmit\n                        = $iq({\n                            to: this.roomjid,\n                            type: 'set'\n                        })\n                            .c('query', {\n                                xmlns: 'http://jabber.org/protocol/muc#owner'\n                            });\n\n                    formsubmit.c('x', {\n                        xmlns: 'jabber:x:data',\n                        type: 'submit'\n                    });\n                    formsubmit\n                        .c('field', { 'var': 'FORM_TYPE' })\n                        .c('value')\n                        .t('http://jabber.org/protocol/muc#roomconfig')\n                        .up()\n                        .up();\n                    formsubmit\n                        .c('field', { 'var': 'muc#roomconfig_roomsecret' })\n                        .c('value')\n                        .t(key)\n                        .up()\n                        .up();\n                    formsubmit\n                        .c('field',\n                             { 'var': 'muc#roomconfig_passwordprotectedroom' })\n                        .c('value')\n                        .t(key === null || key.length === 0 ? '0' : '1')\n                        .up()\n                        .up();\n\n                    // if members only enabled\n                    if (this.membersOnlyEnabled) {\n                        formsubmit\n                            .c('field', { 'var': 'muc#roomconfig_membersonly' })\n                            .c('value')\n                            .t('true')\n                            .up()\n                            .up();\n                    }\n\n                    // Fixes a bug in prosody 0.9.+\n                    // https://prosody.im/issues/issue/373\n                    formsubmit\n                        .c('field', { 'var': 'muc#roomconfig_whois' })\n                        .c('value')\n                        .t('anyone')\n                        .up()\n                        .up();\n\n                    this.connection.sendIQ(\n                        formsubmit,\n                        () => {\n\n                            // we set the password in chat room so we can use it\n                            // later when dialing out\n                            this.password = key;\n                            onSuccess();\n                        },\n                        onError);\n                } else {\n                    onNotSupported();\n                }\n            },\n            onError);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Turns off or on the members only config for the main room.\n     *\n     * @param {boolean} enabled - Whether to turn it on or off.\n     * @param onSuccess - optional callback.\n     * @param onError - optional callback.\n     */\n    setMembersOnly(enabled, onSuccess, onError) {\n        if (enabled && Object.values(this.members).filter(m => !m.isFocus).length) {\n            // first grant membership to all that are in the room\n            // currently there is a bug in prosody where it handles only the first item\n            // that's why we will send iq per member\n            Object.values(this.members).forEach(m => {\n                if (m.jid && !MEMBERS_AFFILIATIONS.includes(m.affiliation)) {\n                    this.xmpp.connection.sendIQ(\n                        $iq({\n                            to: this.roomjid,\n                            type: 'set' })\n                        .c('query', {\n                            xmlns: 'http://jabber.org/protocol/muc#admin' })\n                        .c('item', {\n                            'affiliation': 'member',\n                            'jid': m.jid\n                        }).up().up());\n                }\n            });\n        }\n\n        const errorCallback = onError ? onError : () => {}; // eslint-disable-line no-empty-function\n\n        this.xmpp.connection.sendIQ(\n            $iq({\n                to: this.roomjid,\n                type: 'get'\n            }).c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' }),\n            res => {\n                if ($(res).find('>query>x[xmlns=\"jabber:x:data\"]>field[var=\"muc#roomconfig_membersonly\"]').length) {\n                    const formToSubmit\n                        = $iq({\n                            to: this.roomjid,\n                            type: 'set'\n                        }).c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' });\n\n                    formToSubmit.c('x', {\n                        xmlns: 'jabber:x:data',\n                        type: 'submit'\n                    });\n                    formToSubmit\n                        .c('field', { 'var': 'FORM_TYPE' })\n                        .c('value')\n                        .t('http://jabber.org/protocol/muc#roomconfig')\n                        .up()\n                        .up();\n                    formToSubmit\n                        .c('field', { 'var': 'muc#roomconfig_membersonly' })\n                        .c('value')\n                        .t(enabled ? 'true' : 'false')\n                        .up()\n                        .up();\n\n                    // if room is locked from other participant or we are locking it\n                    if (this.locked) {\n                        formToSubmit\n                            .c('field',\n                                { 'var': 'muc#roomconfig_passwordprotectedroom' })\n                            .c('value')\n                            .t('1')\n                            .up()\n                            .up();\n                    }\n\n                    this.xmpp.connection.sendIQ(formToSubmit, onSuccess, errorCallback);\n                } else {\n                    errorCallback(new Error('Setting members only room not supported!'));\n                }\n            },\n            errorCallback);\n    }\n\n    /**\n     * Adds the key to the presence map, overriding any previous value.\n     * This method is used by jibri.\n     *\n     * @param key The key to add or replace.\n     * @param values The new values.\n     * @returns {boolean|null} <tt>true</tt> if the operation succeeded or <tt>false</tt> when no add or replce was\n     * performed as the value was already there.\n     * @deprecated Use 'addOrReplaceInPresence' instead. TODO: remove it from here and jibri.\n     */\n    addToPresence(key, values) {\n        return this.addOrReplaceInPresence(key, values);\n    }\n\n    /**\n     * Adds the key to the presence map, overriding any previous value.\n     * @param key The key to add or replace.\n     * @param values The new values.\n     * @returns {boolean|null} <tt>true</tt> if the operation succeeded or <tt>false</tt> when no add or replace was\n     * performed as the value was already there.\n     */\n    addOrReplaceInPresence(key, values) {\n        values.tagName = key;\n\n        const matchingNodes = this.presMap.nodes.filter(node => key === node.tagName);\n\n        // if we have found just one, let's check is it the same\n        if (matchingNodes.length === 1 && isEqual(matchingNodes[0], values)) {\n            return false;\n        }\n\n        this.removeFromPresence(key);\n        this.presMap.nodes.push(values);\n        this.presenceUpdateTime = Date.now();\n\n        return true;\n    }\n\n    /**\n     * Retrieves a value from the presence map.\n     *\n     * @param {string} key - The key to find the value for.\n     * @returns {Object?}\n     */\n    getFromPresence(key) {\n        return this.presMap.nodes.find(node => key === node.tagName);\n    }\n\n    /**\n     * Removes a key from the presence map.\n     * @param key\n     */\n    removeFromPresence(key) {\n        const nodes = this.presMap.nodes.filter(node => key !== node.tagName);\n\n        this.presMap.nodes = nodes;\n        this.presenceUpdateTime = Date.now();\n    }\n\n    /**\n     *\n     * @param name\n     * @param handler\n     */\n    addPresenceListener(name, handler) {\n        if (typeof handler !== 'function') {\n            throw new Error('\"handler\" is not a function');\n        }\n        let tagHandlers = this.presHandlers[name];\n\n        if (!tagHandlers) {\n            this.presHandlers[name] = tagHandlers = [];\n        }\n        if (tagHandlers.indexOf(handler) === -1) {\n            tagHandlers.push(handler);\n        } else {\n            logger.warn(\n                `Trying to add the same handler more than once for: ${name}`);\n        }\n    }\n\n    /**\n     *\n     * @param name\n     * @param handler\n     */\n    removePresenceListener(name, handler) {\n        const tagHandlers = this.presHandlers[name];\n        const handlerIdx = tagHandlers ? tagHandlers.indexOf(handler) : -1;\n\n        // eslint-disable-next-line no-negated-condition\n        if (handlerIdx !== -1) {\n            tagHandlers.splice(handlerIdx, 1);\n        } else {\n            logger.warn(`Handler for: ${name} was not registered`);\n        }\n    }\n\n    /**\n     * Checks if the user identified by given <tt>mucJid</tt> is the conference\n     * focus.\n     * @param mucJid the full MUC address of the user to be checked.\n     * @returns {boolean|null} <tt>true</tt> if MUC user is the conference focus\n     * or <tt>false</tt> if is not. When given <tt>mucJid</tt> does not exist in\n     * the MUC then <tt>null</tt> is returned.\n     */\n    isFocus(mucJid) {\n        const member = this.members[mucJid];\n\n        if (member) {\n            return member.isFocus;\n        }\n\n        return null;\n    }\n\n    /**\n     *\n     */\n    isModerator() {\n        return this.role === 'moderator';\n    }\n\n    /**\n     *\n     * @param peerJid\n     */\n    getMemberRole(peerJid) {\n        if (this.members[peerJid]) {\n            return this.members[peerJid].role;\n        }\n\n        return null;\n    }\n\n    /**\n     *\n     * @param mute\n     */\n    addAudioInfoToPresence(mute) {\n        const audioMutedTagName = 'audiomuted';\n\n        // we skip adding it as muted is default value\n        if (mute && !this.getFromPresence(audioMutedTagName)) {\n            return false;\n        }\n\n        return this.addOrReplaceInPresence(\n            audioMutedTagName,\n            {\n                value: mute.toString()\n            });\n    }\n\n    /**\n     *\n     * @param mute\n     */\n    addVideoInfoToPresence(mute) {\n        const videoMutedTagName = 'videomuted';\n\n        // we skip adding it as muted is default value\n        if (mute && !this.getFromPresence(videoMutedTagName)) {\n            return false;\n        }\n\n        return this.addOrReplaceInPresence(\n            videoMutedTagName,\n            {\n                value: mute.toString()\n            });\n    }\n\n    /**\n     * Obtains the info about given media advertised in the MUC presence of\n     * the participant identified by the given endpoint JID.\n     * @param {string} endpointId the endpoint ID mapped to the participant\n     * which corresponds to MUC nickname.\n     * @param {MediaType} mediaType the type of the media for which presence\n     * info will be obtained.\n     * @return {PeerMediaInfo} presenceInfo an object with media presence\n     * info or <tt>null</tt> either if there is no presence available or if\n     * the media type given is invalid.\n     */\n    getMediaPresenceInfo(endpointId, mediaType) {\n        // Will figure out current muted status by looking up owner's presence\n        const pres = this.lastPresences[`${this.roomjid}/${endpointId}`];\n\n        if (!pres) {\n            // No presence available\n            return null;\n        }\n        const data = {\n            muted: true, // muted by default\n            videoType: VideoType.CAMERA // 'camera' by default\n        };\n        let mutedNode = null;\n\n        if (mediaType === MediaType.AUDIO) {\n            mutedNode = filterNodeFromPresenceJSON(pres, 'audiomuted');\n        } else if (mediaType === MediaType.VIDEO) {\n            mutedNode = filterNodeFromPresenceJSON(pres, 'videomuted');\n            const codecTypeNode = filterNodeFromPresenceJSON(pres, 'jitsi_participant_codecType');\n            const videoTypeNode = filterNodeFromPresenceJSON(pres, 'videoType');\n\n            if (videoTypeNode.length > 0) {\n                data.videoType = videoTypeNode[0].value;\n            }\n            if (codecTypeNode.length > 0) {\n                data.codecType = codecTypeNode[0].value;\n            }\n        } else {\n            logger.error(`Unsupported media type: ${mediaType}`);\n\n            return null;\n        }\n\n        if (mutedNode.length > 0) {\n            data.muted = mutedNode[0].value === 'true';\n        }\n\n        return data;\n    }\n\n    /**\n     * Returns the last presence advertised by a MUC member.\n     * @param {string} mucNick\n     * @returns {*}\n     */\n    getLastPresence(mucNick) {\n        return this.lastPresences[`${this.roomjid}/${mucNick}`];\n    }\n\n    /**\n     * Returns true if the SIP calls are supported and false otherwise\n     */\n    isSIPCallingSupported() {\n        if (this.moderator) {\n            return this.moderator.isSipGatewayEnabled();\n        }\n\n        return false;\n    }\n\n    /**\n     * Dials a number.\n     * @param number the number\n     */\n    dial(number) {\n        return this.connection.rayo.dial(number, 'fromnumber',\n            Strophe.getBareJidFromJid(this.myroomjid), this.password,\n            this.focusMucJid);\n    }\n\n    /**\n     * Hangup an existing call\n     */\n    hangup() {\n        return this.connection.rayo.hangup();\n    }\n\n    /**\n     *\n     * @returns {Lobby}\n     */\n    getLobby() {\n        return this.lobby;\n    }\n\n    /**\n     * @returns {AVModeration}\n     */\n    getAVModeration() {\n        return this.avModeration;\n    }\n\n    /**\n     * @returns {BreakoutRooms}\n     */\n    getBreakoutRooms() {\n        return this.breakoutRooms;\n    }\n\n    /**\n     * Returns the phone number for joining the conference.\n     */\n    getPhoneNumber() {\n        return this.phoneNumber;\n    }\n\n    /**\n     * Returns the pin for joining the conference with phone.\n     */\n    getPhonePin() {\n        return this.phonePin;\n    }\n\n    /**\n     * Returns the meeting unique ID if any came from backend.\n     *\n     * @returns {string} - The meeting ID.\n     */\n    getMeetingId() {\n        return this.meetingId;\n    }\n\n    /**\n     * Mutes remote participant.\n     * @param jid of the participant\n     * @param mute\n     * @param mediaType\n     */\n    muteParticipant(jid, mute, mediaType) {\n        logger.info('set mute', mute, jid);\n        const iqToFocus = $iq(\n            { to: this.focusMucJid,\n                type: 'set' })\n            .c('mute', {\n                xmlns: `http://jitsi.org/jitmeet/${mediaType}`,\n                jid\n            })\n            .t(mute.toString())\n            .up();\n\n        this.connection.sendIQ(\n            iqToFocus,\n            result => logger.log('set mute', result),\n            error => logger.log('set mute error', error));\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMute(iq) {\n        const from = iq.getAttribute('from');\n\n        if (from !== this.focusMucJid) {\n            logger.warn('Ignored mute from non focus peer');\n\n            return;\n        }\n        const mute = $(iq).find('mute');\n\n        if (mute.length && mute.text() === 'true') {\n            this.eventEmitter.emit(XMPPEvents.AUDIO_MUTED_BY_FOCUS, mute.attr('actor'));\n        } else {\n            // XXX Why do we support anything but muting? Why do we encode the\n            // value in the text of the element? Why do we use a separate XML\n            // namespace?\n            logger.warn('Ignoring a mute request which does not explicitly '\n                + 'specify a positive mute command.');\n        }\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMuteVideo(iq) {\n        const from = iq.getAttribute('from');\n\n        if (from !== this.focusMucJid) {\n            logger.warn('Ignored mute from non focus peer');\n\n            return;\n        }\n        const mute = $(iq).find('mute');\n\n        if (mute.length && mute.text() === 'true') {\n            this.eventEmitter.emit(XMPPEvents.VIDEO_MUTED_BY_FOCUS, mute.attr('actor'));\n        } else {\n            // XXX Why do we support anything but muting? Why do we encode the\n            // value in the text of the element? Why do we use a separate XML\n            // namespace?\n            logger.warn('Ignoring a mute request which does not explicitly '\n                + 'specify a positive mute command.');\n        }\n    }\n\n    /**\n     * Clean any listeners or resources, executed on leaving.\n     */\n    clean() {\n        this._removeConnListeners.forEach(remove => remove());\n        this._removeConnListeners = [];\n\n        this.joined = false;\n        this.inProgressEmitted = false;\n    }\n\n    /**\n     * Leaves the room. Closes the jingle session.\n     * @returns {Promise} which is resolved if XMPPEvents.MUC_LEFT is received\n     * less than 5s after sending presence unavailable. Otherwise the promise is\n     * rejected.\n     */\n    leave() {\n        this.avModeration.dispose();\n        this.breakoutRooms.dispose();\n\n        const promises = [];\n\n        this.lobby?.lobbyRoom && promises.push(this.lobby.leave());\n\n        promises.push(new Promise((resolve, reject) => {\n            let timeout = -1;\n\n            const onMucLeft = (doReject = false) => {\n                this.eventEmitter.removeListener(XMPPEvents.MUC_LEFT, onMucLeft);\n                clearTimeout(timeout);\n                if (doReject) {\n                    // The timeout expired. Make sure we clean the EMUC state.\n                    this.connection.emuc.doLeave(this.roomjid);\n                    reject(new Error('The timeout for the confirmation about leaving the room expired.'));\n                } else {\n                    resolve();\n                }\n            };\n\n            timeout = setTimeout(() => onMucLeft(true), 5000);\n\n            this.clean();\n            this.eventEmitter.on(XMPPEvents.MUC_LEFT, onMucLeft);\n            this.doLeave();\n        }));\n\n        return Promise.allSettled(promises);\n    }\n}\n\n/* eslint-enable newline-per-chained-call */\n","/* global $ */\n\nimport { getLogger } from '@jitsi/logger';\nimport { Strophe } from 'strophe.js';\n\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\n\nimport ChatRoom from './ChatRoom';\nimport { ConnectionPluginListenable } from './ConnectionPlugin';\n\nconst logger = getLogger(__filename);\n\n/**\n * MUC connection plugin.\n */\nexport default class MucConnectionPlugin extends ConnectionPluginListenable {\n    /**\n     *\n     * @param xmpp\n     */\n    constructor(xmpp) {\n        super();\n        this.xmpp = xmpp;\n        this.rooms = {};\n    }\n\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n\n        // add handlers (just once)\n        this.connection.addHandler(this.onPresence.bind(this), null,\n            'presence', null, null, null, null);\n        this.connection.addHandler(this.onPresenceUnavailable.bind(this),\n            null, 'presence', 'unavailable', null);\n        this.connection.addHandler(this.onPresenceError.bind(this), null,\n            'presence', 'error', null);\n        this.connection.addHandler(this.onMessage.bind(this), null,\n            'message', null, null);\n        this.connection.addHandler(this.onMute.bind(this),\n            'http://jitsi.org/jitmeet/audio', 'iq', 'set', null, null);\n        this.connection.addHandler(this.onMuteVideo.bind(this),\n            'http://jitsi.org/jitmeet/video', 'iq', 'set', null, null);\n    }\n\n    /**\n     *\n     * @param jid\n     * @param password\n     * @param options\n     */\n    createRoom(jid, password, options) {\n        const roomJid = Strophe.getBareJidFromJid(jid);\n\n        if (this.isRoomCreated(roomJid)) {\n            const errmsg = 'You are already in the room!';\n\n            logger.error(errmsg);\n            throw new Error(errmsg);\n        }\n        this.rooms[roomJid] = new ChatRoom(this.connection, jid,\n            password, this.xmpp, options);\n        this.eventEmitter.emit(\n            XMPPEvents.EMUC_ROOM_ADDED, this.rooms[roomJid]);\n\n        return this.rooms[roomJid];\n    }\n\n    /**\n     *  Check if a room with the passed JID is already created.\n     *\n     * @param {string} roomJid - The JID of the room.\n     * @returns {boolean}\n     */\n    isRoomCreated(roomJid) {\n        return roomJid in this.rooms;\n    }\n\n    /**\n     *\n     * @param jid\n     */\n    doLeave(jid) {\n        this.eventEmitter.emit(\n            XMPPEvents.EMUC_ROOM_REMOVED, this.rooms[jid]);\n        delete this.rooms[jid];\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresence(pres) {\n        const from = pres.getAttribute('from');\n\n        // What is this for? A workaround for something?\n        if (pres.getAttribute('type')) {\n            return true;\n        }\n\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        // Parse status.\n        if ($(pres).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n            + '>status[code=\"201\"]').length) {\n            room.createNonAnonymousRoom();\n        }\n\n        room.onPresence(pres);\n\n        return true;\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresenceUnavailable(pres) {\n        const from = pres.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        room.onPresenceUnavailable(pres, from);\n\n        return true;\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresenceError(pres) {\n        const from = pres.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        room.onPresenceError(pres, from);\n\n        return true;\n    }\n\n    /**\n     *\n     * @param msg\n     */\n    onMessage(msg) {\n        // FIXME: this is a hack. but jingle on muc makes nickchanges hard\n        const from = msg.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        room.onMessage(msg, from);\n\n        return true;\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMute(iq) {\n        const from = iq.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        // Returning false would result in the listener being deregistered by Strophe\n        if (!room) {\n            return true;\n        }\n\n        room.onMute(iq);\n\n        return true;\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMuteVideo(iq) {\n        const from = iq.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        // Returning false would result in the listener being deregistered by Strophe\n        if (!room) {\n            return true;\n        }\n\n        room.onMuteVideo(iq);\n\n        return true;\n    }\n}\n","/* global $ */\n\nimport { getLogger } from '@jitsi/logger';\nimport { $build } from 'strophe.js';\n\nimport { MediaType } from '../../service/RTC/MediaType';\nimport FeatureFlags from '../flags/FeatureFlags';\n\nconst logger = getLogger(__filename);\n\n/**\n * Creates a \"source\" XML element for the source described in compact JSON format in [sourceCompactJson].\n * @param {*} owner the endpoint ID of the owner of the source.\n * @param {*} sourceCompactJson the compact JSON representation of the source.\n * @returns the created \"source\" XML element.\n */\nfunction _createSourceExtension(owner, sourceCompactJson) {\n    const node = $build('source', {\n        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0',\n        ssrc: sourceCompactJson.s,\n        name: FeatureFlags.isSourceNameSignalingEnabled() ? sourceCompactJson.n : undefined\n    });\n\n    if (sourceCompactJson.m) {\n        node.c('parameter', {\n            name: 'msid',\n            value: sourceCompactJson.m\n        }).up();\n    }\n    node.c('ssrc-info', {\n        xmlns: 'http://jitsi.org/jitmeet',\n        owner\n    }).up();\n\n    return node.node;\n}\n\n/**\n * Creates an \"ssrc-group\" XML element for the SSRC group described in compact JSON format in [ssrcGroupCompactJson].\n * @param {*} ssrcGroupCompactJson the compact JSON representation of the SSRC group.\n * @returns the created \"ssrc-group\" element.\n */\nfunction _createSsrcGroupExtension(ssrcGroupCompactJson) {\n    const node = $build('ssrc-group', {\n        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0',\n        semantics: _getSemantics(ssrcGroupCompactJson[0])\n    });\n\n    for (let i = 1; i < ssrcGroupCompactJson.length; i++) {\n        node.c('source', {\n            xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0',\n            ssrc: ssrcGroupCompactJson[i]\n        }).up();\n    }\n\n    return node.node;\n}\n\n/**\n * Finds in a Jingle IQ the RTP description element with the given media type. If one does not exists, create it (as\n *  well as the required  \"content\" parent element) and adds it to the IQ.\n * @param {*} iq\n * @param {*} mediaType The media type, \"audio\" or \"video\".\n * @returns the RTP description element with the given media type.\n */\nfunction _getOrCreateRtpDescription(iq, mediaType) {\n    const jingle = $(iq).find('jingle')[0];\n    let content = $(jingle).find(`content[name=\"${mediaType}\"]`);\n    let description;\n\n    if (content.length) {\n        content = content[0];\n    } else {\n        // I'm not suree if \"creator\" and \"senders\" are required.\n        content = $build('content', {\n            name: mediaType\n        }).node;\n        jingle.appendChild(content);\n    }\n\n    description = $(content).find('description');\n\n    if (description.length) {\n        description = description[0];\n    } else {\n        description = $build('description', {\n            xmlns: 'urn:xmpp:jingle:apps:rtp:1',\n            media: mediaType\n        }).node;\n        content.appendChild(description);\n    }\n\n    return description;\n}\n\n/**\n * Converts the short string representing SSRC group semantics in compact JSON format to the standard representation\n * (i.e. convert \"f\" to \"FID\" and \"s\" to \"SIM\").\n * @param {*} str the compact JSON format representation of an SSRC group's semantics.\n * @returns the SSRC group semantics corresponding to [str].\n */\nfunction _getSemantics(str) {\n    if (str === 'f') {\n        return 'FID';\n    } else if (str === 's') {\n        return 'SIM';\n    }\n\n    return null;\n}\n\n/**\n * Reads a JSON-encoded message (from a \"json-message\" element) and extracts source descriptions. Adds the extracted\n * source descriptions to the given Jingle IQ in the standard Jingle format.\n *\n * Encoding sources in this compact JSON format instead of standard Jingle was introduced in order to reduce the\n * network traffic and load on the XMPP server. The format is described in Jicofo [TODO: insert link].\n *\n * @param {*} iq the IQ to which source descriptions will be added.\n * @param {*} jsonMessageXml The XML node for the \"json-message\" element.\n * @returns {Map<string, Array<string>} The audio and video ssrcs extracted from the JSON-encoded message with remote\n * endpoint id as the key.\n */\nexport function expandSourcesFromJson(iq, jsonMessageXml) {\n    let json;\n\n    try {\n        json = JSON.parse(jsonMessageXml.textContent);\n    } catch (error) {\n        logger.error(`json-message XML contained invalid JSON, ignoring: ${jsonMessageXml.textContent}`);\n\n        return null;\n    }\n\n    if (!json?.sources) {\n        // It might be a message of a different type, no need to log.\n        return null;\n    }\n\n    // This is where we'll add \"source\" and \"ssrc-group\" elements. Create them elements if they don't exist.\n    const audioRtpDescription = _getOrCreateRtpDescription(iq, MediaType.AUDIO);\n    const videoRtpDescription = _getOrCreateRtpDescription(iq, MediaType.VIDEO);\n    const ssrcMap = new Map();\n\n    for (const owner in json.sources) {\n        if (json.sources.hasOwnProperty(owner)) {\n            const ssrcs = [];\n            const ownerSources = json.sources[owner];\n\n            // The video sources, video ssrc-groups, audio sources and audio ssrc-groups are encoded in that order in\n            // the elements of the array.\n            const videoSources = ownerSources?.length && ownerSources[0];\n            const videoSsrcGroups = ownerSources?.length > 1 && ownerSources[1];\n            const audioSources = ownerSources?.length > 2 && ownerSources[2];\n            const audioSsrcGroups = ownerSources?.length > 3 && ownerSources[3];\n\n            if (videoSources?.length) {\n                for (let i = 0; i < videoSources.length; i++) {\n                    videoRtpDescription.appendChild(_createSourceExtension(owner, videoSources[i]));\n                    ssrcs.push(videoSources[i]?.s);\n                }\n            }\n\n            if (videoSsrcGroups?.length) {\n                for (let i = 0; i < videoSsrcGroups.length; i++) {\n                    videoRtpDescription.appendChild(_createSsrcGroupExtension(videoSsrcGroups[i]));\n                }\n            }\n            if (audioSources?.length) {\n                for (let i = 0; i < audioSources.length; i++) {\n                    audioRtpDescription.appendChild(_createSourceExtension(owner, audioSources[i]));\n                    ssrcs.push(audioSources[i]?.s);\n                }\n            }\n\n            if (audioSsrcGroups?.length) {\n                for (let i = 0; i < audioSsrcGroups.length; i++) {\n                    audioRtpDescription.appendChild(_createSsrcGroupExtension(audioSsrcGroups[i]));\n                }\n            }\n            ssrcMap.set(owner, ssrcs);\n        }\n    }\n\n    return ssrcMap;\n}\n","/**\n * Enumeration of the media direction types.\n */\nexport enum MediaDirection {\n    /**\n     * Media is send and receive is suspended.\n     */\n    INACTIVE = 'inactive',\n\n    /**\n     * Media is only received from remote peer.\n     */\n    RECVONLY = 'recvonly',\n\n    /**\n     * Media is only sent to the remote peer.\n     */\n    SENDONLY = 'sendonly',\n\n    /**\n     * Media is sent and received.\n     */\n    SENDRECV = 'sendrecv'\n};\n","\nimport JitsiTrackError from '../../JitsiTrackError';\nimport * as JitsiTrackErrors from '../../JitsiTrackErrors';\nimport browser from '../browser';\n\nconst logger = require('@jitsi/logger').getLogger(__filename);\n\n/**\n * The default frame rate for Screen Sharing.\n */\nexport const SS_DEFAULT_FRAME_RATE = 5;\n\n/**\n * Handles obtaining a stream from a screen capture on different browsers.\n */\nconst ScreenObtainer = {\n    /**\n     * If not <tt>null</tt> it means that the initialization process is still in\n     * progress. It is used to make desktop stream request wait and continue\n     * after it's done.\n     * {@type Promise|null}\n     */\n\n    obtainStream: null,\n\n    /**\n     * Initializes the function used to obtain a screen capture\n     * (this.obtainStream).\n     *\n     * @param {object} options\n     */\n    init(options = {}) {\n        this.options = options;\n        this.obtainStream = this._createObtainStreamMethod();\n\n        if (!this.obtainStream) {\n            logger.info('Desktop sharing disabled');\n        }\n    },\n\n    /**\n     * Returns a method which will be used to obtain the screen sharing stream\n     * (based on the browser type).\n     *\n     * @returns {Function}\n     * @private\n     */\n    _createObtainStreamMethod() {\n        if (browser.isNWJS()) {\n            return (onSuccess, onFailure) => {\n                window.JitsiMeetNW.obtainDesktopStream(\n                    onSuccess,\n                    (error, constraints) => {\n                        let jitsiError;\n\n                        // FIXME:\n                        // This is very very dirty fix for recognising that the\n                        // user have clicked the cancel button from the Desktop\n                        // sharing pick window. The proper solution would be to\n                        // detect this in the NWJS application by checking the\n                        // streamId === \"\". Even better solution would be to\n                        // stop calling GUM from the NWJS app and just pass the\n                        // streamId to lib-jitsi-meet. This way the desktop\n                        // sharing implementation for NWJS and chrome extension\n                        // will be the same and lib-jitsi-meet will be able to\n                        // control the constraints, check the streamId, etc.\n                        //\n                        // I cannot find documentation about \"InvalidStateError\"\n                        // but this is what we are receiving from GUM when the\n                        // streamId for the desktop sharing is \"\".\n\n                        if (error && error.name === 'InvalidStateError') {\n                            jitsiError = new JitsiTrackError(\n                                JitsiTrackErrors.SCREENSHARING_USER_CANCELED\n                            );\n                        } else {\n                            jitsiError = new JitsiTrackError(\n                                error, constraints, [ 'desktop' ]);\n                        }\n                        (typeof onFailure === 'function')\n                            && onFailure(jitsiError);\n                    });\n            };\n        } else if (browser.isElectron()) {\n            return this.obtainScreenOnElectron;\n        } else if (browser.isReactNative() && browser.supportsGetDisplayMedia()) {\n            return this.obtainScreenFromGetDisplayMediaRN;\n        } else if (browser.supportsGetDisplayMedia()) {\n            return this.obtainScreenFromGetDisplayMedia;\n        }\n        logger.log('Screen sharing not supported on ', browser.getName());\n\n        return null;\n    },\n\n    /**\n     * Gets the appropriate constraints for audio sharing.\n     *\n     * @returns {Object|boolean}\n     */\n    _getAudioConstraints() {\n        const { audioQuality } = this.options;\n        const audio = audioQuality?.stereo ? {\n            autoGainControl: false,\n            channelCount: 2,\n            echoCancellation: false,\n            noiseSuppression: false\n        } : true;\n\n        return audio;\n    },\n\n    /**\n     * Checks whether obtaining a screen capture is supported in the current\n     * environment.\n     * @returns {boolean}\n     */\n    isSupported() {\n        return this.obtainStream !== null;\n    },\n\n    /**\n     * Obtains a screen capture stream on Electron.\n     *\n     * @param onSuccess - Success callback.\n     * @param onFailure - Failure callback.\n     */\n    obtainScreenOnElectron(onSuccess, onFailure) {\n        if (window.JitsiMeetScreenObtainer && window.JitsiMeetScreenObtainer.openDesktopPicker) {\n            const { desktopSharingFrameRate, desktopSharingSources } = this.options;\n\n            window.JitsiMeetScreenObtainer.openDesktopPicker(\n                {\n                    desktopSharingSources: desktopSharingSources || [ 'screen', 'window' ]\n                },\n                (streamId, streamType, screenShareAudio = false) => {\n                    if (streamId) {\n                        let audioConstraints = false;\n\n                        if (screenShareAudio) {\n                            audioConstraints = {};\n                            const optionalConstraints = this._getAudioConstraints();\n\n                            if (typeof optionalConstraints !== 'boolean') {\n                                audioConstraints = {\n                                    optional: optionalConstraints\n                                };\n                            }\n\n                            // Audio screen sharing for electron only works for screen type devices.\n                            // i.e. when the user shares the whole desktop.\n                            // Note. The documentation specifies that chromeMediaSourceId should not be present\n                            // which, in the case a users has multiple monitors, leads to them being shared all\n                            // at once. However we tested with chromeMediaSourceId present and it seems to be\n                            // working properly.\n                            if (streamType === 'screen') {\n                                audioConstraints.mandatory = {\n                                    chromeMediaSource: 'desktop'\n                                };\n                            }\n                        }\n\n                        const constraints = {\n                            audio: audioConstraints,\n                            video: {\n                                mandatory: {\n                                    chromeMediaSource: 'desktop',\n                                    chromeMediaSourceId: streamId,\n                                    minFrameRate: desktopSharingFrameRate?.min ?? SS_DEFAULT_FRAME_RATE,\n                                    maxFrameRate: desktopSharingFrameRate?.max ?? SS_DEFAULT_FRAME_RATE,\n                                    maxWidth: window.screen.width,\n                                    maxHeight: window.screen.height\n                                }\n                            }\n                        };\n\n                        // We have to use the old API on Electron to get a desktop stream.\n                        navigator.mediaDevices.getUserMedia(constraints)\n                            .then(stream => onSuccess({\n                                stream,\n                                sourceId: streamId,\n                                sourceType: streamType\n                            }), onFailure);\n                    } else {\n                        // As noted in Chrome Desktop Capture API:\n                        // If user didn't select any source (i.e. canceled the prompt)\n                        // then the callback is called with an empty streamId.\n                        onFailure(new JitsiTrackError(JitsiTrackErrors.SCREENSHARING_USER_CANCELED));\n                    }\n                },\n                err => onFailure(new JitsiTrackError(\n                    JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_ERROR,\n                    err\n                ))\n            );\n        } else {\n            onFailure(new JitsiTrackError(JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_NOT_FOUND));\n        }\n    },\n\n    /**\n     * Obtains a screen capture stream using getDisplayMedia.\n     *\n     * @param callback - The success callback.\n     * @param errorCallback - The error callback.\n     */\n    obtainScreenFromGetDisplayMedia(callback, errorCallback) {\n        let getDisplayMedia;\n\n        if (navigator.getDisplayMedia) {\n            getDisplayMedia = navigator.getDisplayMedia.bind(navigator);\n        } else {\n            // eslint-disable-next-line max-len\n            getDisplayMedia = navigator.mediaDevices.getDisplayMedia.bind(navigator.mediaDevices);\n        }\n\n        const { desktopSharingFrameRate } = this.options;\n        const video = typeof desktopSharingFrameRate === 'object' ? { frameRate: desktopSharingFrameRate } : true;\n        const audio = this._getAudioConstraints();\n\n        // At the time of this writing 'min' constraint for fps is not supported by getDisplayMedia.\n        video.frameRate && delete video.frameRate.min;\n\n        const constraints = {\n            video,\n            audio,\n            cursor: 'always'\n        };\n\n        logger.info('Using getDisplayMedia for screen sharing', constraints);\n\n        getDisplayMedia(constraints)\n            .then(stream => {\n                callback({\n                    stream,\n                    sourceId: stream.id\n                });\n            })\n            .catch(error => {\n                const errorDetails = {\n                    errorName: error && error.name,\n                    errorMsg: error && error.message,\n                    errorStack: error && error.stack\n                };\n\n                logger.error('getDisplayMedia error', constraints, errorDetails);\n\n                if (errorDetails.errorMsg && errorDetails.errorMsg.indexOf('denied by system') !== -1) {\n                    // On Chrome this is the only thing different between error returned when user cancels\n                    // and when no permission was given on the OS level.\n                    errorCallback(new JitsiTrackError(JitsiTrackErrors.PERMISSION_DENIED));\n\n                    return;\n                }\n\n                errorCallback(new JitsiTrackError(JitsiTrackErrors.SCREENSHARING_USER_CANCELED));\n            });\n    },\n\n    /**\n     * Obtains a screen capture stream using getDisplayMedia.\n     *\n     * @param callback - The success callback.\n     * @param errorCallback - The error callback.\n     */\n    obtainScreenFromGetDisplayMediaRN(callback, errorCallback) {\n        logger.info('Using getDisplayMedia for screen sharing');\n\n        navigator.mediaDevices.getDisplayMedia({ video: true })\n            .then(stream => {\n                callback({\n                    stream,\n                    sourceId: stream.id });\n            })\n            .catch(() => {\n                errorCallback(new JitsiTrackError(JitsiTrackErrors\n                    .SCREENSHARING_USER_CANCELED));\n            });\n    },\n\n    /**\n     * Sets the max frame rate to be used for a desktop track capture.\n     *\n     * @param {number} maxFps capture frame rate to be used for desktop tracks.\n     * @returns {void}\n     */\n    setDesktopSharingFrameRate(maxFps) {\n        logger.info(`Setting the desktop capture rate to ${maxFps}`);\n\n        this.options.desktopSharingFrameRate = {\n            min: SS_DEFAULT_FRAME_RATE,\n            max: maxFps\n        };\n    }\n};\n\nexport default ScreenObtainer;\n","import { getLogger } from '@jitsi/logger';\nconst logger = getLogger(__filename);\n\nimport CodecMimeType from '../../service/RTC/CodecMimeType';\nimport { MediaDirection } from '../../service/RTC/MediaDirection';\nimport browser from '../browser';\nimport RandomUtil from '../util/RandomUtil';\n\nconst SDPUtil = {\n    filterSpecialChars(text) {\n        // XXX Neither one of the falsy values (e.g. null, undefined, false,\n        // \"\", etc.) \"contain\" special chars.\n        // eslint-disable-next-line no-useless-escape\n        return text ? text.replace(/[\\\\\\/\\{,\\}\\+]/g, '') : text;\n    },\n    iceparams(mediadesc, sessiondesc) {\n        let data = null;\n        let pwd, ufrag;\n\n        if ((ufrag = SDPUtil.findLine(mediadesc, 'a=ice-ufrag:', sessiondesc))\n                && (pwd\n                    = SDPUtil.findLine(\n                        mediadesc,\n                        'a=ice-pwd:',\n                        sessiondesc))) {\n            data = {\n                ufrag: SDPUtil.parseICEUfrag(ufrag),\n                pwd: SDPUtil.parseICEPwd(pwd)\n            };\n        }\n\n        return data;\n    },\n    parseICEUfrag(line) {\n        return line.substring(12);\n    },\n    buildICEUfrag(frag) {\n        return `a=ice-ufrag:${frag}`;\n    },\n    parseICEPwd(line) {\n        return line.substring(10);\n    },\n    buildICEPwd(pwd) {\n        return `a=ice-pwd:${pwd}`;\n    },\n    parseMID(line) {\n        return line.substring(6);\n    },\n\n    /**\n     * Finds the MSID attribute in the given array of SSRC attribute lines and returns the value.\n     *\n     * @param {string[]} ssrcLines - an array of lines similar to 'a:213123 msid:stream-id track-id'.\n     * @returns {undefined|string}\n     */\n    parseMSIDAttribute(ssrcLines) {\n        const msidLine = ssrcLines.find(line => line.indexOf(' msid:') > 0);\n\n        if (!msidLine) {\n            return undefined;\n        }\n\n        const v = msidLine.substring(msidLine.indexOf(' msid:') + 6 /* the length of ' msid:' */);\n\n        return SDPUtil.filterSpecialChars(v);\n    },\n    parseMLine(line) {\n        const data = {};\n        const parts = line.substring(2).split(' ');\n\n        data.media = parts.shift();\n        data.port = parts.shift();\n        data.proto = parts.shift();\n        if (parts[parts.length - 1] === '') { // trailing whitespace\n            parts.pop();\n        }\n        data.fmt = parts;\n\n        return data;\n    },\n    buildMLine(mline) {\n        return (\n            `m=${mline.media} ${mline.port} ${mline.proto} ${\n                mline.fmt.join(' ')}`);\n    },\n    parseRTPMap(line) {\n        const data = {};\n        let parts = line.substring(9).split(' ');\n\n        data.id = parts.shift();\n        parts = parts[0].split('/');\n        data.name = parts.shift();\n        data.clockrate = parts.shift();\n        data.channels = parts.length ? parts.shift() : '1';\n\n        return data;\n    },\n\n    /**\n     * Parses SDP line \"a=sctpmap:...\" and extracts SCTP port from it.\n     * @param line eg. \"a=sctpmap:5000 webrtc-datachannel\"\n     * @returns [SCTP port number, protocol, streams]\n     */\n    parseSCTPMap(line) {\n        const parts = line.substring(10).split(' ');\n        const sctpPort = parts[0];\n        const protocol = parts[1];\n\n        // Stream count is optional\n        const streamCount = parts.length > 2 ? parts[2] : null;\n\n\n        return [ sctpPort, protocol, streamCount ];// SCTP port\n    },\n    parseSCTPPort(line) {\n        return line.substring(12);\n    },\n    buildRTPMap(el) {\n        let line\n            = `a=rtpmap:${el.getAttribute('id')} ${el.getAttribute('name')}/${\n                el.getAttribute('clockrate')}`;\n\n        if (el.getAttribute('channels')\n            && el.getAttribute('channels') !== '1') {\n            line += `/${el.getAttribute('channels')}`;\n        }\n\n        return line;\n    },\n    parseCrypto(line) {\n        const data = {};\n        const parts = line.substring(9).split(' ');\n\n        data.tag = parts.shift();\n        data['crypto-suite'] = parts.shift();\n        data['key-params'] = parts.shift();\n        if (parts.length) {\n            data['session-params'] = parts.join(' ');\n        }\n\n        return data;\n    },\n    parseFingerprint(line) { // RFC 4572\n        const data = {};\n        const parts = line.substring(14).split(' ');\n\n        data.hash = parts.shift();\n        data.fingerprint = parts.shift();\n\n        // TODO assert that fingerprint satisfies 2UHEX *(\":\" 2UHEX) ?\n        return data;\n    },\n    parseFmtp(line) {\n        const data = [];\n        let parts = line.split(' ');\n\n        parts.shift();\n        parts = parts.join(' ').split(';');\n        for (let i = 0; i < parts.length; i++) {\n            let key = parts[i].split('=')[0];\n\n            while (key.length && key[0] === ' ') {\n                key = key.substring(1);\n            }\n            const value = parts[i].split('=')[1];\n\n            if (key && value) {\n                data.push({ name: key,\n                    value });\n            } else if (key) {\n                // rfc 4733 (DTMF) style stuff\n                data.push({ name: '',\n                    value: key });\n            }\n        }\n\n        return data;\n    },\n    parseICECandidate(line) {\n        const candidate = {};\n        const elems = line.split(' ');\n\n        candidate.foundation = elems[0].substring(12);\n        candidate.component = elems[1];\n        candidate.protocol = elems[2].toLowerCase();\n        candidate.priority = elems[3];\n        candidate.ip = elems[4];\n        candidate.port = elems[5];\n\n        // elems[6] => \"typ\"\n        candidate.type = elems[7];\n        candidate.generation = 0; // default value, may be overwritten below\n        for (let i = 8; i < elems.length; i += 2) {\n            switch (elems[i]) {\n            case 'raddr':\n                candidate['rel-addr'] = elems[i + 1];\n                break;\n            case 'rport':\n                candidate['rel-port'] = elems[i + 1];\n                break;\n            case 'generation':\n                candidate.generation = elems[i + 1];\n                break;\n            case 'tcptype':\n                candidate.tcptype = elems[i + 1];\n                break;\n            default: // TODO\n                logger.debug(\n                    `parseICECandidate not translating \"${\n                        elems[i]}\" = \"${elems[i + 1]}\"`);\n            }\n        }\n        candidate.network = '1';\n\n        // not applicable to SDP -- FIXME: should be unique, not just random\n        // eslint-disable-next-line newline-per-chained-call\n        candidate.id = Math.random().toString(36).substr(2, 10);\n\n        return candidate;\n    },\n    buildICECandidate(cand) {\n        let line = [\n            `a=candidate:${cand.foundation}`,\n            cand.component,\n            cand.protocol,\n            cand.priority,\n            cand.ip,\n            cand.port,\n            'typ',\n            cand.type\n        ].join(' ');\n\n        line += ' ';\n        switch (cand.type) {\n        case 'srflx':\n        case 'prflx':\n        case 'relay':\n            if (cand.hasOwnAttribute('rel-addr')\n                    && cand.hasOwnAttribute('rel-port')) {\n                line += 'raddr';\n                line += ' ';\n                line += cand['rel-addr'];\n                line += ' ';\n                line += 'rport';\n                line += ' ';\n                line += cand['rel-port'];\n                line += ' ';\n            }\n            break;\n        }\n        if (cand.hasOwnAttribute('tcptype')) {\n            line += 'tcptype';\n            line += ' ';\n            line += cand.tcptype;\n            line += ' ';\n        }\n        line += 'generation';\n        line += ' ';\n        line += cand.hasOwnAttribute('generation') ? cand.generation : '0';\n\n        return line;\n    },\n    parseSSRC(desc) {\n        // proprietary mapping of a=ssrc lines\n        // TODO: see \"Jingle RTP Source Description\" by Juberti and P. Thatcher\n        // on google docs and parse according to that\n        const data = new Map();\n        const lines = desc.split('\\r\\n');\n\n        for (let i = 0; i < lines.length; i++) {\n            if (lines[i].substring(0, 7) === 'a=ssrc:') {\n                // FIXME: Use regex to smartly find the ssrc.\n                const ssrc = lines[i].split('a=ssrc:')[1].split(' ')[0];\n\n                if (!data.get(ssrc)) {\n                    data.set(ssrc, []);\n                }\n\n                data.get(ssrc).push(lines[i]);\n            }\n        }\n\n        return data;\n    },\n\n    /**\n     * Gets the source name out of the name attribute \"a=ssrc:254321 name:name1\".\n     *\n     * @param {string[]} ssrcLines\n     * @returns {string | undefined}\n     */\n    parseSourceNameLine(ssrcLines) {\n        const sourceNameLine = ssrcLines.find(ssrcSdpLine => ssrcSdpLine.indexOf(' name:') > 0);\n\n        // Everything past the \"name:\" part\n        return sourceNameLine?.substring(sourceNameLine.indexOf(' name:') + 6);\n    },\n    parseRTCPFB(line) {\n        const parts = line.substr(10).split(' ');\n        const data = {};\n\n        data.pt = parts.shift();\n        data.type = parts.shift();\n        data.params = parts;\n\n        return data;\n    },\n    parseExtmap(line) {\n        const parts = line.substr(9).split(' ');\n        const data = {};\n\n        data.value = parts.shift();\n        if (data.value.indexOf('/') === -1) {\n            data.direction = 'both';\n        } else {\n            data.direction = data.value.substr(data.value.indexOf('/') + 1);\n            data.value = data.value.substr(0, data.value.indexOf('/'));\n        }\n        data.uri = parts.shift();\n        data.params = parts;\n\n        return data;\n    },\n    findLine(haystack, needle, sessionpart) {\n        let lines = haystack.split('\\r\\n');\n\n        for (let i = 0; i < lines.length; i++) {\n            if (lines[i].substring(0, needle.length) === needle) {\n                return lines[i];\n            }\n        }\n        if (!sessionpart) {\n            return false;\n        }\n\n        // search session part\n        lines = sessionpart.split('\\r\\n');\n        for (let j = 0; j < lines.length; j++) {\n            if (lines[j].substring(0, needle.length) === needle) {\n                return lines[j];\n            }\n        }\n\n        return false;\n    },\n    findLines(haystack, needle, sessionpart) {\n        let lines = haystack.split('\\r\\n');\n        const needles = [];\n\n        for (let i = 0; i < lines.length; i++) {\n            if (lines[i].substring(0, needle.length) === needle) {\n                needles.push(lines[i]);\n            }\n        }\n        if (needles.length || !sessionpart) {\n            return needles;\n        }\n\n        // search session part\n        lines = sessionpart.split('\\r\\n');\n        for (let j = 0; j < lines.length; j++) {\n            if (lines[j].substring(0, needle.length) === needle) {\n                needles.push(lines[j]);\n            }\n        }\n\n        return needles;\n    },\n    candidateToJingle(line) {\n        // a=candidate:2979166662 1 udp 2113937151 192.168.2.100 57698 typ host\n        // generation 0\n        //      <candidate component=... foundation=... generation=... id=...\n        // ip=... network=... port=... priority=... protocol=... type=.../>\n        if (line.indexOf('candidate:') === 0) {\n            // eslint-disable-next-line no-param-reassign\n            line = `a=${line}`;\n        } else if (line.substring(0, 12) !== 'a=candidate:') {\n            logger.warn(\n                'parseCandidate called with a line that is not a candidate'\n                    + ' line');\n            logger.warn(line);\n\n            return null;\n        }\n        if (line.substring(line.length - 2) === '\\r\\n') { // chomp it\n            // eslint-disable-next-line no-param-reassign\n            line = line.substring(0, line.length - 2);\n        }\n        const candidate = {};\n        const elems = line.split(' ');\n\n        if (elems[6] !== 'typ') {\n            logger.warn('did not find typ in the right place');\n            logger.warn(line);\n\n            return null;\n        }\n        candidate.foundation = elems[0].substring(12);\n        candidate.component = elems[1];\n        candidate.protocol = elems[2].toLowerCase();\n        candidate.priority = elems[3];\n        candidate.ip = elems[4];\n        candidate.port = elems[5];\n\n        // elems[6] => \"typ\"\n        candidate.type = elems[7];\n\n        candidate.generation = '0'; // default, may be overwritten below\n        for (let i = 8; i < elems.length; i += 2) {\n            switch (elems[i]) {\n            case 'raddr':\n                candidate['rel-addr'] = elems[i + 1];\n                break;\n            case 'rport':\n                candidate['rel-port'] = elems[i + 1];\n                break;\n            case 'generation':\n                candidate.generation = elems[i + 1];\n                break;\n            case 'tcptype':\n                candidate.tcptype = elems[i + 1];\n                break;\n            default: // TODO\n                logger.debug(`not translating \"${elems[i]}\" = \"${elems[i + 1]}\"`);\n            }\n        }\n        candidate.network = '1';\n\n        // not applicable to SDP -- FIXME: should be unique, not just random\n        // eslint-disable-next-line newline-per-chained-call\n        candidate.id = Math.random().toString(36).substr(2, 10);\n\n        return candidate;\n    },\n    candidateFromJingle(cand) {\n        let line = 'a=candidate:';\n\n        line += cand.getAttribute('foundation');\n        line += ' ';\n        line += cand.getAttribute('component');\n        line += ' ';\n\n        let protocol = cand.getAttribute('protocol');\n\n        // use tcp candidates for FF\n\n        if (browser.isFirefox() && protocol.toLowerCase() === 'ssltcp') {\n            protocol = 'tcp';\n        }\n\n        line += protocol; // .toUpperCase(); // chrome M23 doesn't like this\n        line += ' ';\n        line += cand.getAttribute('priority');\n        line += ' ';\n        line += cand.getAttribute('ip');\n        line += ' ';\n        line += cand.getAttribute('port');\n        line += ' ';\n        line += 'typ';\n        line += ` ${cand.getAttribute('type')}`;\n        line += ' ';\n        switch (cand.getAttribute('type')) {\n        case 'srflx':\n        case 'prflx':\n        case 'relay':\n            if (cand.getAttribute('rel-addr')\n                    && cand.getAttribute('rel-port')) {\n                line += 'raddr';\n                line += ' ';\n                line += cand.getAttribute('rel-addr');\n                line += ' ';\n                line += 'rport';\n                line += ' ';\n                line += cand.getAttribute('rel-port');\n                line += ' ';\n            }\n            break;\n        }\n        if (protocol.toLowerCase() === 'tcp') {\n            line += 'tcptype';\n            line += ' ';\n            line += cand.getAttribute('tcptype');\n            line += ' ';\n        }\n        line += 'generation';\n        line += ' ';\n        line += cand.getAttribute('generation') || '0';\n\n        return `${line}\\r\\n`;\n    },\n\n    /**\n     * Parse the 'most' primary video ssrc from the given m line\n     * @param {object} mLine object as parsed from transform.parse\n     * @return {number} the primary video ssrc from the given m line\n     */\n    parsePrimaryVideoSsrc(videoMLine) {\n        const numSsrcs = videoMLine.ssrcs\n            .map(ssrcInfo => ssrcInfo.id)\n            .filter((ssrc, index, array) => array.indexOf(ssrc) === index)\n            .length;\n        const numGroups\n            = (videoMLine.ssrcGroups && videoMLine.ssrcGroups.length) || 0;\n\n        if (numSsrcs > 1 && numGroups === 0) {\n            // Ambiguous, can't figure out the primary\n            return;\n        }\n        let primarySsrc = null;\n\n        if (numSsrcs === 1) {\n            primarySsrc = videoMLine.ssrcs[0].id;\n        } else if (numSsrcs === 2) {\n            // Can figure it out if there's an FID group\n            const fidGroup\n                = videoMLine.ssrcGroups.find(\n                    group => group.semantics === 'FID');\n\n            if (fidGroup) {\n                primarySsrc = fidGroup.ssrcs.split(' ')[0];\n            }\n        } else if (numSsrcs >= 3) {\n            // Can figure it out if there's a sim group\n            const simGroup\n                = videoMLine.ssrcGroups.find(\n                    group => group.semantics === 'SIM');\n\n            if (simGroup) {\n                primarySsrc = simGroup.ssrcs.split(' ')[0];\n            }\n        }\n\n        return primarySsrc;\n    },\n\n    /**\n     * Generate an ssrc\n     * @returns {number} an ssrc\n     */\n    generateSsrc() {\n        return RandomUtil.randomInt(1, 0xffffffff);\n    },\n\n    /**\n     * Get an attribute for the given ssrc with the given attributeName\n     *  from the given mline\n     * @param {object} mLine an mLine object as parsed from transform.parse\n     * @param {number} ssrc the ssrc for which an attribute is desired\n     * @param {string} attributeName the name of the desired attribute\n     * @returns {string} the value corresponding to the given ssrc\n     *  and attributeName\n     */\n    getSsrcAttribute(mLine, ssrc, attributeName) {\n        for (let i = 0; i < mLine.ssrcs.length; ++i) {\n            const ssrcLine = mLine.ssrcs[i];\n\n            if (ssrcLine.id === ssrc\n                && ssrcLine.attribute === attributeName) {\n                return ssrcLine.value;\n            }\n        }\n    },\n\n    /**\n     * Parses the ssrcs from the group sdp line and\n     *  returns them as a list of numbers\n     * @param {object} the ssrcGroup object as parsed from\n     *  sdp-transform\n     * @returns {list<number>} a list of the ssrcs in the group\n     *  parsed as numbers\n     */\n    parseGroupSsrcs(ssrcGroup) {\n        return ssrcGroup\n            .ssrcs\n            .split(' ')\n            .map(ssrcStr => parseInt(ssrcStr, 10));\n    },\n\n    /**\n     * Get the mline of the given type from the given sdp\n     * @param {object} sdp sdp as parsed from transform.parse\n     * @param {string} type the type of the desired mline (e.g. \"video\")\n     * @returns {object} a media object\n     */\n    getMedia(sdp, type) {\n        return sdp.media.find(m => m.type === type);\n    },\n\n    /**\n     * Extracts the ICE username fragment from an SDP string.\n     * @param {string} sdp the SDP in raw text format\n     */\n    getUfrag(sdp) {\n        const ufragLines\n            = sdp.split('\\n').filter(line => line.startsWith('a=ice-ufrag:'));\n\n        if (ufragLines.length > 0) {\n            return ufragLines[0].substr('a=ice-ufrag:'.length);\n        }\n    },\n\n    /**\n     * Sets the given codecName as the preferred codec by moving it to the beginning\n     * of the payload types list (modifies the given mline in place). All instances\n     * of the codec are moved up.\n     * @param {object} mLine the mline object from an sdp as parsed by transform.parse\n     * @param {string} codecName the name of the preferred codec\n     */\n    preferCodec(mline, codecName) {\n        if (!mline || !codecName) {\n            return;\n        }\n\n        const matchingPayloadTypes = mline.rtp\n            .filter(rtp => rtp.codec && rtp.codec.toLowerCase() === codecName.toLowerCase())\n            .map(rtp => rtp.payload);\n\n        if (matchingPayloadTypes) {\n            // Call toString() on payloads to get around an issue within SDPTransform that sets\n            // payloads as a number, instead of a string, when there is only one payload.\n            const payloadTypes\n                = mline.payloads\n                .toString()\n                .split(' ')\n                .map(p => parseInt(p, 10));\n\n            for (const pt of matchingPayloadTypes.reverse()) {\n                const payloadIndex = payloadTypes.indexOf(pt);\n\n                payloadTypes.splice(payloadIndex, 1);\n                payloadTypes.unshift(pt);\n            }\n            mline.payloads = payloadTypes.join(' ');\n        }\n    },\n\n    /**\n     * Strips the given codec from the given mline. All related RTX payload\n     * types are also stripped. If the resulting mline would have no codecs,\n     * it's disabled.\n     *\n     * @param {object} mLine the mline object from an sdp as parsed by transform.parse.\n     * @param {string} codecName the name of the codec which will be stripped.\n     * @param {boolean} highProfile determines if only the high profile H264 codec needs to be\n     * stripped from the sdp when the passed codecName is H264.\n     */\n    stripCodec(mLine, codecName, highProfile = false) {\n        if (!mLine || !codecName) {\n            return;\n        }\n\n        const h264Pts = [];\n        let removePts = [];\n        const stripH264HighCodec = codecName.toLowerCase() === CodecMimeType.H264 && highProfile;\n\n        for (const rtp of mLine.rtp) {\n            if (rtp.codec\n                && rtp.codec.toLowerCase() === codecName.toLowerCase()) {\n                if (stripH264HighCodec) {\n                    h264Pts.push(rtp.payload);\n                } else {\n                    removePts.push(rtp.payload);\n                }\n            }\n        }\n\n        // high profile H264 codecs have 64 as the first two bytes of the profile-level-id.\n        if (stripH264HighCodec) {\n            removePts = mLine.fmtp\n                .filter(item => h264Pts.indexOf(item.payload) > -1 && item.config.includes('profile-level-id=64'))\n                .map(item => item.payload);\n        }\n\n        if (removePts.length > 0) {\n            // We also need to remove the payload types that are related to RTX\n            // for the codecs we want to disable.\n            const rtxApts = removePts.map(item => `apt=${item}`);\n            const rtxPts = mLine.fmtp.filter(\n                item => rtxApts.indexOf(item.config) !== -1);\n\n            removePts.push(...rtxPts.map(item => item.payload));\n\n            // Call toString() on payloads to get around an issue within\n            // SDPTransform that sets payloads as a number, instead of a string,\n            // when there is only one payload.\n            const allPts = mLine.payloads\n                .toString()\n                .split(' ')\n                .map(Number);\n            const keepPts = allPts.filter(pt => removePts.indexOf(pt) === -1);\n\n            if (keepPts.length === 0) {\n                // There are no other codecs, disable the stream.\n                mLine.port = 0;\n                mLine.direction = MediaDirection.INACTIVE;\n                mLine.payloads = '*';\n            } else {\n                mLine.payloads = keepPts.join(' ');\n            }\n\n            mLine.rtp = mLine.rtp.filter(\n                item => keepPts.indexOf(item.payload) !== -1);\n            mLine.fmtp = mLine.fmtp.filter(\n                item => keepPts.indexOf(item.payload) !== -1);\n            if (mLine.rtcpFb) {\n                mLine.rtcpFb = mLine.rtcpFb.filter(\n                    item => keepPts.indexOf(item.payload) !== -1);\n            }\n        }\n    }\n};\n\nexport default SDPUtil;\n","/* global $ */\n\nimport clonedeep from 'lodash.clonedeep';\nimport transform from 'sdp-transform';\n\nimport { MediaDirection } from '../../service/RTC/MediaDirection';\nimport browser from '../browser';\nimport FeatureFlags from '../flags/FeatureFlags';\n\nimport SDPUtil from './SDPUtil';\n\n/**\n *\n * @param sdp\n */\nexport default function SDP(sdp) {\n    const media = sdp.split('\\r\\nm=');\n\n    for (let i = 1, length = media.length; i < length; i++) {\n        let mediaI = `m=${media[i]}`;\n\n        if (i !== length - 1) {\n            mediaI += '\\r\\n';\n        }\n        media[i] = mediaI;\n    }\n    const session = `${media.shift()}\\r\\n`;\n\n    this.media = media;\n    this.raw = session + media.join('');\n    this.session = session;\n}\n\n/**\n * A flag will make {@link transportToJingle} and {@link jingle2media} replace\n * ICE candidates IPs with invalid value of '1.1.1.1' which will cause ICE\n * failure. The flag is used in the automated testing.\n * @type {boolean}\n */\nSDP.prototype.failICE = false;\n\n/**\n * Whether or not to remove TCP ice candidates when translating from/to jingle.\n * @type {boolean}\n */\nSDP.prototype.removeTcpCandidates = false;\n\n/**\n * Whether or not to remove UDP ice candidates when translating from/to jingle.\n * @type {boolean}\n */\nSDP.prototype.removeUdpCandidates = false;\n\n/**\n * Adds a new m-line to the description so that a new local source can then be attached to the transceiver that gets\n * added after a reneogtiation cycle.\n *\n * @param {Mediatype} mediaType media type of the new source that is being added.\n */\nSDP.prototype.addMlineForNewLocalSource = function(mediaType) {\n    const mid = this.media.length;\n    const sdp = transform.parse(this.raw);\n    const mline = clonedeep(sdp.media.find(m => m.type === mediaType));\n\n    // Edit media direction, mid and remove the existing ssrc lines in the m-line.\n    mline.mid = mid;\n    mline.direction = MediaDirection.RECVONLY;\n\n    // Remove the ssrcs and source groups.\n    mline.msid = undefined;\n    mline.ssrcs = undefined;\n    mline.ssrcGroups = undefined;\n\n    sdp.media = sdp.media.concat(mline);\n\n    // We regenerate the BUNDLE group (since we added a new m-line)\n    sdp.groups.forEach(group => {\n        if (group.type === 'BUNDLE') {\n            const mids = group.mids.split(' ');\n\n            mids.push(mid);\n            group.mids = mids.join(' ');\n        }\n    });\n    this.raw = transform.write(sdp);\n};\n\n/**\n * Returns map of MediaChannel mapped per channel idx.\n */\nSDP.prototype.getMediaSsrcMap = function() {\n    const mediaSSRCs = {};\n\n    for (let mediaindex = 0; mediaindex < this.media.length; mediaindex++) {\n        const mid\n            = SDPUtil.parseMID(\n                SDPUtil.findLine(this.media[mediaindex], 'a=mid:'));\n        const media = {\n            mediaindex,\n            mid,\n            ssrcs: {},\n            ssrcGroups: []\n        };\n\n        mediaSSRCs[mediaindex] = media;\n\n        SDPUtil.findLines(this.media[mediaindex], 'a=ssrc:').forEach(line => {\n            const linessrc = line.substring(7).split(' ')[0];\n\n            // allocate new ChannelSsrc\n\n            if (!media.ssrcs[linessrc]) {\n                media.ssrcs[linessrc] = {\n                    ssrc: linessrc,\n                    lines: []\n                };\n            }\n            media.ssrcs[linessrc].lines.push(line);\n        });\n        SDPUtil.findLines(this.media[mediaindex], 'a=ssrc-group:').forEach(line => {\n            const idx = line.indexOf(' ');\n            const semantics = line.substr(0, idx).substr(13);\n            const ssrcs = line.substr(14 + semantics.length).split(' ');\n\n            if (ssrcs.length) {\n                media.ssrcGroups.push({\n                    semantics,\n                    ssrcs\n                });\n            }\n        });\n    }\n\n    return mediaSSRCs;\n};\n\n/**\n * Returns <tt>true</tt> if this SDP contains given SSRC.\n * @param ssrc the ssrc to check.\n * @returns {boolean} <tt>true</tt> if this SDP contains given SSRC.\n */\nSDP.prototype.containsSSRC = function(ssrc) {\n    // FIXME this code is really strange - improve it if you can\n    const medias = this.getMediaSsrcMap();\n    let result = false;\n\n    Object.keys(medias).forEach(mediaindex => {\n        if (result) {\n            return;\n        }\n        if (medias[mediaindex].ssrcs[ssrc]) {\n            result = true;\n        }\n    });\n\n    return result;\n};\n\n// add content's to a jingle element\nSDP.prototype.toJingle = function(elem, thecreator) {\n    // https://xmpp.org/extensions/xep-0338.html\n    SDPUtil.findLines(this.session, 'a=group:').forEach(line => {\n        const parts = line.split(' ');\n        const semantics = parts.shift().substr(8);\n\n        elem.c('group', { xmlns: 'urn:xmpp:jingle:apps:grouping:0',\n            semantics });\n        for (let j = 0; j < parts.length; j++) {\n            elem.c('content', { name: parts[j] }).up();\n        }\n        elem.up();\n    });\n\n    for (let i = 0; i < this.media.length; i++) {\n        const mline = SDPUtil.parseMLine(this.media[i].split('\\r\\n')[0]);\n\n        if (!(mline.media === 'audio'\n              || mline.media === 'video'\n              || mline.media === 'application')) {\n            continue; // eslint-disable-line no-continue\n        }\n\n        let ssrc;\n        const assrcline = SDPUtil.findLine(this.media[i], 'a=ssrc:');\n\n        if (assrcline) {\n            ssrc = assrcline.substring(7).split(' ')[0]; // take the first\n        } else {\n            ssrc = false;\n        }\n\n        elem.c('content', { creator: thecreator,\n            name: mline.media });\n        const amidline = SDPUtil.findLine(this.media[i], 'a=mid:');\n\n        if (amidline) {\n            // prefer identifier from a=mid if present\n            const mid = SDPUtil.parseMID(amidline);\n\n            elem.attrs({ name: mid });\n        }\n\n        if (mline.media === 'audio' || mline.media === 'video') {\n            elem.c('description',\n                { xmlns: 'urn:xmpp:jingle:apps:rtp:1',\n                    media: mline.media });\n            if (ssrc) {\n                elem.attrs({ ssrc });\n            }\n            for (let j = 0; j < mline.fmt.length; j++) {\n                const rtpmap\n                    = SDPUtil.findLine(\n                        this.media[i],\n                        `a=rtpmap:${mline.fmt[j]}`);\n\n                elem.c('payload-type', SDPUtil.parseRTPMap(rtpmap));\n\n                // put any 'a=fmtp:' + mline.fmt[j] lines into <param name=foo\n                // value=bar/>\n                const afmtpline\n                    = SDPUtil.findLine(\n                        this.media[i],\n                        `a=fmtp:${mline.fmt[j]}`);\n\n                if (afmtpline) {\n                    const fmtpParameters = SDPUtil.parseFmtp(afmtpline);\n\n                    // eslint-disable-next-line max-depth\n                    for (let k = 0; k < fmtpParameters.length; k++) {\n                        elem.c('parameter', fmtpParameters[k]).up();\n                    }\n                }\n\n                // XEP-0293 -- map a=rtcp-fb\n                this.rtcpFbToJingle(i, elem, mline.fmt[j]);\n\n                elem.up();\n            }\n\n            if (ssrc) {\n                const ssrcMap = SDPUtil.parseSSRC(this.media[i]);\n\n                for (const [ availableSsrc, ssrcParameters ] of ssrcMap) {\n                    const sourceName = SDPUtil.parseSourceNameLine(ssrcParameters);\n\n                    elem.c('source', {\n                        ssrc: availableSsrc,\n                        name: FeatureFlags.isSourceNameSignalingEnabled() ? sourceName : undefined,\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                    });\n\n                    const msid = SDPUtil.parseMSIDAttribute(ssrcParameters);\n\n                    // eslint-disable-next-line max-depth\n                    if (msid) {\n                        elem.c('parameter');\n                        elem.attrs({ name: 'msid' });\n                        elem.attrs({ value: msid });\n                        elem.up();\n                    }\n\n                    elem.up();\n                }\n\n                // XEP-0339 handle ssrc-group attributes\n                const ssrcGroupLines\n                    = SDPUtil.findLines(this.media[i], 'a=ssrc-group:');\n\n                ssrcGroupLines.forEach(line => {\n                    const idx = line.indexOf(' ');\n                    const semantics = line.substr(0, idx).substr(13);\n                    const ssrcs = line.substr(14 + semantics.length).split(' ');\n\n                    if (ssrcs.length) {\n                        elem.c('ssrc-group', { semantics,\n                            xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0' });\n                        ssrcs.forEach(s => elem.c('source', { ssrc: s }).up());\n                        elem.up();\n                    }\n                });\n            }\n\n            const ridLines = SDPUtil.findLines(this.media[i], 'a=rid:');\n\n            if (ridLines.length && browser.usesRidsForSimulcast()) {\n                // Map a line which looks like \"a=rid:2 send\" to just\n                // the rid (\"2\")\n                const rids = ridLines\n                    .map(ridLine => ridLine.split(':')[1])\n                    .map(ridInfo => ridInfo.split(' ')[0]);\n\n                rids.forEach(rid => {\n                    elem.c('source', {\n                        rid,\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                    });\n                    elem.up();\n                });\n                const unifiedSimulcast\n                    = SDPUtil.findLine(this.media[i], 'a=simulcast:');\n\n                if (unifiedSimulcast) {\n                    elem.c('rid-group', {\n                        semantics: 'SIM',\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                    });\n                    rids.forEach(rid => {\n                        elem.c('source', { rid }).up();\n                    });\n                    elem.up();\n                }\n            }\n\n            if (SDPUtil.findLine(this.media[i], 'a=rtcp-mux')) {\n                elem.c('rtcp-mux').up();\n            }\n\n            // XEP-0293 -- map a=rtcp-fb:*\n            this.rtcpFbToJingle(i, elem, '*');\n\n            // XEP-0294\n            const extmapLines = SDPUtil.findLines(this.media[i], 'a=extmap:');\n\n            for (let j = 0; j < extmapLines.length; j++) {\n                const extmap = SDPUtil.parseExtmap(extmapLines[j]);\n\n                elem.c('rtp-hdrext', {\n                    xmlns: 'urn:xmpp:jingle:apps:rtp:rtp-hdrext:0',\n                    uri: extmap.uri,\n                    id: extmap.value\n                });\n\n                // eslint-disable-next-line max-depth\n                if (extmap.hasOwnProperty('direction')) {\n\n                    // eslint-disable-next-line max-depth\n                    switch (extmap.direction) {\n                    case MediaDirection.SENDONLY:\n                        elem.attrs({ senders: 'responder' });\n                        break;\n                    case MediaDirection.RECVONLY:\n                        elem.attrs({ senders: 'initiator' });\n                        break;\n                    case MediaDirection.SENDRECV:\n                        elem.attrs({ senders: 'both' });\n                        break;\n                    case MediaDirection.INACTIVE:\n                        elem.attrs({ senders: 'none' });\n                        break;\n                    }\n                }\n\n                // TODO: handle params\n                elem.up();\n            }\n            elem.up(); // end of description\n        }\n\n        // map ice-ufrag/pwd, dtls fingerprint, candidates\n        this.transportToJingle(i, elem);\n\n        const m = this.media[i];\n\n        if (SDPUtil.findLine(m, `a=${MediaDirection.SENDRECV}`, this.session)) {\n            elem.attrs({ senders: 'both' });\n        } else if (SDPUtil.findLine(m, `a=${MediaDirection.SENDONLY}`, this.session)) {\n            elem.attrs({ senders: 'initiator' });\n        } else if (SDPUtil.findLine(m, `a=${MediaDirection.RECVONLY}`, this.session)) {\n            elem.attrs({ senders: 'responder' });\n        } else if (SDPUtil.findLine(m, `a=${MediaDirection.INACTIVE}`, this.session)) {\n            elem.attrs({ senders: 'none' });\n        }\n\n        // Reject an m-line only when port is 0 and a=bundle-only is not present in the section.\n        // The port is automatically set to 0 when bundle-only is used.\n        if (mline.port === '0' && !SDPUtil.findLine(m, 'a=bundle-only', this.session)) {\n            // estos hack to reject an m-line\n            elem.attrs({ senders: 'rejected' });\n        }\n        elem.up(); // end of content\n    }\n    elem.up();\n\n    return elem;\n};\n\nSDP.prototype.transportToJingle = function(mediaindex, elem) {\n    elem.c('transport');\n\n    // XEP-0343 DTLS/SCTP\n    const sctpport\n        = SDPUtil.findLine(this.media[mediaindex], 'a=sctp-port:', this.session);\n    const sctpmap\n        = SDPUtil.findLine(this.media[mediaindex], 'a=sctpmap:', this.session);\n\n    if (sctpport) {\n        const sctpAttrs = SDPUtil.parseSCTPPort(sctpport);\n\n        elem.c('sctpmap', {\n            xmlns: 'urn:xmpp:jingle:transports:dtls-sctp:1',\n            number: sctpAttrs, /* SCTP port */\n            protocol: 'webrtc-datachannel' /* protocol */\n        });\n\n        // The parser currently requires streams to be present\n        elem.attrs({ streams: 0 });\n        elem.up();\n    } else if (sctpmap) {\n        const sctpAttrs = SDPUtil.parseSCTPMap(sctpmap);\n\n        elem.c('sctpmap', {\n            xmlns: 'urn:xmpp:jingle:transports:dtls-sctp:1',\n            number: sctpAttrs[0], /* SCTP port */\n            protocol: sctpAttrs[1] /* protocol */\n        });\n\n        // Optional stream count attribute\n        if (sctpAttrs.length > 2) {\n            elem.attrs({ streams: sctpAttrs[2] });\n        } else {\n            elem.attrs({ streams: 0 });\n        }\n        elem.up();\n    }\n\n    // XEP-0320\n    const fingerprints\n        = SDPUtil.findLines(\n            this.media[mediaindex],\n            'a=fingerprint:',\n            this.session);\n\n    fingerprints.forEach(line => {\n        const fingerprint = SDPUtil.parseFingerprint(line);\n\n        fingerprint.xmlns = 'urn:xmpp:jingle:apps:dtls:0';\n        elem.c('fingerprint').t(fingerprint.fingerprint);\n        delete fingerprint.fingerprint;\n\n        const setupLine\n            = SDPUtil.findLine(\n                this.media[mediaindex],\n                'a=setup:',\n                this.session);\n\n        if (setupLine) {\n            fingerprint.setup = setupLine.substr(8);\n        }\n        elem.attrs(fingerprint);\n        elem.up(); // end of fingerprint\n    });\n    const iceParameters = SDPUtil.iceparams(this.media[mediaindex], this.session);\n\n    if (iceParameters) {\n        iceParameters.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\n        elem.attrs(iceParameters);\n\n        // XEP-0176\n        const candidateLines\n            = SDPUtil.findLines(\n                this.media[mediaindex],\n                'a=candidate:',\n                this.session);\n\n        candidateLines.forEach(line => { // add any a=candidate lines\n            const candidate = SDPUtil.candidateToJingle(line);\n\n            if (this.failICE) {\n                candidate.ip = '1.1.1.1';\n            }\n            const protocol\n                = candidate && typeof candidate.protocol === 'string'\n                    ? candidate.protocol.toLowerCase()\n                    : '';\n\n            if ((this.removeTcpCandidates\n                    && (protocol === 'tcp' || protocol === 'ssltcp'))\n                || (this.removeUdpCandidates && protocol === 'udp')) {\n                return;\n            }\n            elem.c('candidate', candidate).up();\n        });\n    }\n    elem.up(); // end of transport\n};\n\n// XEP-0293\nSDP.prototype.rtcpFbToJingle = function(mediaindex, elem, payloadtype) {\n    const lines\n        = SDPUtil.findLines(\n            this.media[mediaindex],\n            `a=rtcp-fb:${payloadtype}`);\n\n    lines.forEach(line => {\n        const feedback = SDPUtil.parseRTCPFB(line);\n\n        if (feedback.type === 'trr-int') {\n            elem.c('rtcp-fb-trr-int', {\n                xmlns: 'urn:xmpp:jingle:apps:rtp:rtcp-fb:0',\n                value: feedback.params[0]\n            });\n            elem.up();\n        } else {\n            elem.c('rtcp-fb', {\n                xmlns: 'urn:xmpp:jingle:apps:rtp:rtcp-fb:0',\n                type: feedback.type\n            });\n            if (feedback.params.length > 0) {\n                elem.attrs({ 'subtype': feedback.params[0] });\n            }\n            elem.up();\n        }\n    });\n};\n\nSDP.prototype.rtcpFbFromJingle = function(elem, payloadtype) { // XEP-0293\n    let sdp = '';\n    const feedbackElementTrrInt\n        = elem.find(\n            '>rtcp-fb-trr-int[xmlns=\"urn:xmpp:jingle:apps:rtp:rtcp-fb:0\"]');\n\n    if (feedbackElementTrrInt.length) {\n        sdp += 'a=rtcp-fb:* trr-int ';\n        if (feedbackElementTrrInt.attr('value')) {\n            sdp += feedbackElementTrrInt.attr('value');\n        } else {\n            sdp += '0';\n        }\n        sdp += '\\r\\n';\n    }\n\n    const feedbackElements = elem.find('>rtcp-fb[xmlns=\"urn:xmpp:jingle:apps:rtp:rtcp-fb:0\"]');\n\n    feedbackElements.each((_, fb) => {\n        sdp += `a=rtcp-fb:${payloadtype} ${fb.getAttribute('type')}`;\n        if (fb.hasAttribute('subtype')) {\n            sdp += ` ${fb.getAttribute('subtype')}`;\n        }\n        sdp += '\\r\\n';\n    });\n\n    return sdp;\n};\n\n// construct an SDP from a jingle stanza\nSDP.prototype.fromJingle = function(jingle) {\n    const sessionId = Date.now();\n\n    // Use a unique session id for every TPC.\n    this.raw = 'v=0\\r\\n'\n        + `o=- ${sessionId} 2 IN IP4 0.0.0.0\\r\\n`\n        + 's=-\\r\\n'\n        + 't=0 0\\r\\n';\n\n    // http://tools.ietf.org/html/draft-ietf-mmusic-sdp-bundle-negotiation-04\n    // #section-8\n    const groups\n        = $(jingle).find('>group[xmlns=\"urn:xmpp:jingle:apps:grouping:0\"]');\n\n    if (groups.length) {\n        groups.each((idx, group) => {\n            const contents\n                = $(group)\n                    .find('>content')\n                    .map((_, content) => content.getAttribute('name'))\n                    .get();\n\n            if (contents.length > 0) {\n                this.raw\n                    += `a=group:${\n                        group.getAttribute('semantics')\n                            || group.getAttribute('type')} ${\n                        contents.join(' ')}\\r\\n`;\n            }\n        });\n    }\n\n    this.session = this.raw;\n    jingle.find('>content').each((_, content) => {\n        const m = this.jingle2media($(content));\n\n        this.media.push(m);\n    });\n\n    // reconstruct msid-semantic -- apparently not necessary\n    /*\n     var msid = SDPUtil.parseSSRC(this.raw);\n     if (msid.hasOwnProperty('mslabel')) {\n     this.session += \"a=msid-semantic: WMS \" + msid.mslabel + \"\\r\\n\";\n     }\n     */\n\n    this.raw = this.session + this.media.join('');\n};\n\n// translate a jingle content element into an an SDP media part\nSDP.prototype.jingle2media = function(content) {\n    const desc = content.find('>description');\n    const transport = content.find('>transport[xmlns=\"urn:xmpp:jingle:transports:ice-udp:1\"]');\n    let sdp = '';\n    const sctp = transport.find(\n        '>sctpmap[xmlns=\"urn:xmpp:jingle:transports:dtls-sctp:1\"]');\n\n    const media = { media: desc.attr('media') };\n\n    media.port = '9';\n    if (content.attr('senders') === 'rejected') {\n        // estos hack to reject an m-line.\n        media.port = '0';\n    }\n    if (transport.find('>fingerprint[xmlns=\"urn:xmpp:jingle:apps:dtls:0\"]').length) {\n        media.proto = sctp.length ? 'UDP/DTLS/SCTP' : 'UDP/TLS/RTP/SAVPF';\n    } else {\n        media.proto = 'UDP/TLS/RTP/SAVPF';\n    }\n    if (sctp.length) {\n        sdp += `m=application ${media.port} UDP/DTLS/SCTP webrtc-datachannel\\r\\n`;\n        sdp += `a=sctp-port:${sctp.attr('number')}\\r\\n`;\n        sdp += 'a=max-message-size:262144\\r\\n';\n    } else {\n        media.fmt\n            = desc\n                .find('>payload-type')\n                .map((_, payloadType) => payloadType.getAttribute('id'))\n                .get();\n        sdp += `${SDPUtil.buildMLine(media)}\\r\\n`;\n    }\n\n    sdp += 'c=IN IP4 0.0.0.0\\r\\n';\n    if (!sctp.length) {\n        sdp += 'a=rtcp:1 IN IP4 0.0.0.0\\r\\n';\n    }\n\n    // XEP-0176 ICE parameters\n    if (transport.length) {\n        if (transport.attr('ufrag')) {\n            sdp += `${SDPUtil.buildICEUfrag(transport.attr('ufrag'))}\\r\\n`;\n        }\n        if (transport.attr('pwd')) {\n            sdp += `${SDPUtil.buildICEPwd(transport.attr('pwd'))}\\r\\n`;\n        }\n        transport.find('>fingerprint[xmlns=\"urn:xmpp:jingle:apps:dtls:0\"]').each((_, fingerprint) => {\n            sdp += `a=fingerprint:${fingerprint.getAttribute('hash')}`;\n            sdp += ` ${$(fingerprint).text()}`;\n            sdp += '\\r\\n';\n            if (fingerprint.hasAttribute('setup')) {\n                sdp += `a=setup:${fingerprint.getAttribute('setup')}\\r\\n`;\n            }\n        });\n    }\n\n    // XEP-0176 ICE candidates\n    transport.find('>candidate')\n        .each((_, candidate) => {\n            let protocol = candidate.getAttribute('protocol');\n\n            protocol\n                = typeof protocol === 'string' ? protocol.toLowerCase() : '';\n\n            if ((this.removeTcpCandidates\n                    && (protocol === 'tcp' || protocol === 'ssltcp'))\n                || (this.removeUdpCandidates && protocol === 'udp')) {\n                return;\n            } else if (this.failICE) {\n                candidate.setAttribute('ip', '1.1.1.1');\n            }\n\n            sdp += SDPUtil.candidateFromJingle(candidate);\n        });\n\n    switch (content.attr('senders')) {\n    case 'initiator':\n        sdp += `a=${MediaDirection.SENDONLY}\\r\\n`;\n        break;\n    case 'responder':\n        sdp += `a=${MediaDirection.RECVONLY}\\r\\n`;\n        break;\n    case 'none':\n        sdp += `a=${MediaDirection.INACTIVE}\\r\\n`;\n        break;\n    case 'both':\n        sdp += `a=${MediaDirection.SENDRECV}\\r\\n`;\n        break;\n    }\n    sdp += `a=mid:${content.attr('name')}\\r\\n`;\n\n    // <description><rtcp-mux/></description>\n    // see http://code.google.com/p/libjingle/issues/detail?id=309 -- no spec\n    // though\n    // and http://mail.jabber.org/pipermail/jingle/2011-December/001761.html\n    if (desc.find('>rtcp-mux').length) {\n        sdp += 'a=rtcp-mux\\r\\n';\n    }\n\n    desc.find('>payload-type').each((_, payloadType) => {\n        sdp += `${SDPUtil.buildRTPMap(payloadType)}\\r\\n`;\n        if ($(payloadType).find('>parameter').length) {\n            sdp += `a=fmtp:${payloadType.getAttribute('id')} `;\n            sdp\n                += $(payloadType)\n                    .find('>parameter')\n                    .map((__, parameter) => {\n                        const name = parameter.getAttribute('name');\n\n                        return (\n                            (name ? `${name}=` : '')\n                                + parameter.getAttribute('value'));\n                    })\n                    .get()\n                    .join('; ');\n            sdp += '\\r\\n';\n        }\n\n        // xep-0293\n        sdp += this.rtcpFbFromJingle($(payloadType), payloadType.getAttribute('id'));\n    });\n\n    // xep-0293\n    sdp += this.rtcpFbFromJingle(desc, '*');\n\n    // xep-0294\n    desc\n        .find('>rtp-hdrext[xmlns=\"urn:xmpp:jingle:apps:rtp:rtp-hdrext:0\"]')\n        .each((_, hdrExt) => {\n            sdp\n                += `a=extmap:${hdrExt.getAttribute('id')} ${\n                    hdrExt.getAttribute('uri')}\\r\\n`;\n        });\n\n    // XEP-0339 handle ssrc-group attributes\n    desc\n        .find('>ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n        .each((_, ssrcGroup) => {\n            const semantics = ssrcGroup.getAttribute('semantics');\n            const ssrcs\n                = $(ssrcGroup)\n                    .find('>source')\n                    .map((__, source) => source.getAttribute('ssrc'))\n                    .get();\n\n            if (ssrcs.length) {\n                sdp += `a=ssrc-group:${semantics} ${ssrcs.join(' ')}\\r\\n`;\n            }\n        });\n\n    // XEP-0339 handle source attributes\n    let userSources = '';\n    let nonUserSources = '';\n\n    desc\n        .find('>source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n        .each((_, source) => {\n            const ssrc = source.getAttribute('ssrc');\n            let isUserSource = true;\n            let sourceStr = '';\n\n            $(source)\n                .find('>parameter')\n                .each((__, parameter) => {\n                    const name = parameter.getAttribute('name');\n                    let value = parameter.getAttribute('value');\n\n                    value = SDPUtil.filterSpecialChars(value);\n                    sourceStr += `a=ssrc:${ssrc} ${name}`;\n\n                    if (value && value.length) {\n                        sourceStr += `:${value}`;\n                    }\n\n                    sourceStr += '\\r\\n';\n\n                    if (value?.includes('mixedmslabel')) {\n                        isUserSource = false;\n                    }\n                });\n\n            if (isUserSource) {\n                userSources += sourceStr;\n            } else {\n                nonUserSources += sourceStr;\n            }\n        });\n\n    // The sdp-interop package is relying the mixedmslabel m line to be the first one in order to set the direction\n    // to sendrecv.\n    sdp += nonUserSources + userSources;\n\n    return sdp;\n};\n","import FeatureFlags from '../flags/FeatureFlags';\n\nimport SDPUtil from './SDPUtil';\n\n// this could be useful in Array.prototype.\n/**\n *\n * @param array1\n * @param array2\n */\nfunction arrayEquals(array1, array2) {\n    // if the other array is a falsy value, return\n    if (!array2) {\n        return false;\n    }\n\n    // compare lengths - can save a lot of time\n    if (array1.length !== array2.length) {\n        return false;\n    }\n\n    for (let i = 0, l = array1.length; i < l; i++) {\n        // Check if we have nested arrays\n        if (array1[i] instanceof Array && array2[i] instanceof Array) {\n            // recurse into the nested arrays\n            if (!array1[i].equals(array2[i])) {\n                return false;\n            }\n        } else if (array1[i] !== array2[i]) {\n            // Warning - two different object instances will never be\n            // equal: {x:20} != {x:20}\n            return false;\n        }\n    }\n\n    return true;\n}\n\n/**\n *\n * @param mySDP\n * @param otherSDP\n */\nexport default function SDPDiffer(mySDP, otherSDP) {\n    this.mySDP = mySDP;\n    this.otherSDP = otherSDP;\n    if (!mySDP) {\n        throw new Error('\"mySDP\" is undefined!');\n    } else if (!otherSDP) {\n        throw new Error('\"otherSDP\" is undefined!');\n    }\n}\n\n/**\n * Returns map of MediaChannel that contains media contained in\n * 'mySDP', but not contained in 'otherSdp'. Mapped by channel idx.\n */\nSDPDiffer.prototype.getNewMedia = function() {\n\n    const myMedias = this.mySDP.getMediaSsrcMap();\n    const othersMedias = this.otherSDP.getMediaSsrcMap();\n    const newMedia = {};\n\n    Object.keys(othersMedias).forEach(othersMediaIdx => {\n        const myMedia = myMedias[othersMediaIdx];\n        const othersMedia = othersMedias[othersMediaIdx];\n\n        if (!myMedia && othersMedia) {\n            // Add whole channel\n            newMedia[othersMediaIdx] = othersMedia;\n\n            return;\n        }\n\n        // Look for new ssrcs across the channel\n        Object.keys(othersMedia.ssrcs).forEach(ssrc => {\n            if (Object.keys(myMedia.ssrcs).indexOf(ssrc) === -1) {\n                // Allocate channel if we've found ssrc that doesn't exist in\n                // our channel\n                if (!newMedia[othersMediaIdx]) {\n                    newMedia[othersMediaIdx] = {\n                        mediaindex: othersMedia.mediaindex,\n                        mid: othersMedia.mid,\n                        ssrcs: {},\n                        ssrcGroups: []\n                    };\n                }\n                newMedia[othersMediaIdx].ssrcs[ssrc] = othersMedia.ssrcs[ssrc];\n            } else if (othersMedia.ssrcs[ssrc].lines\n                        && myMedia.ssrcs[ssrc].lines) {\n                // we want to detect just changes in adding/removing msid\n                const myContainMsid = myMedia.ssrcs[ssrc].lines.find(\n                    line => line.indexOf('msid') !== -1) !== undefined;\n                const newContainMsid = othersMedia.ssrcs[ssrc].lines.find(\n                    line => line.indexOf('msid') !== -1) !== undefined;\n\n                if (myContainMsid !== newContainMsid) {\n                    if (!newMedia[othersMediaIdx]) {\n                        newMedia[othersMediaIdx] = {\n                            mediaindex: othersMedia.mediaindex,\n                            mid: othersMedia.mid,\n                            ssrcs: {},\n                            ssrcGroups: []\n                        };\n                    }\n                    newMedia[othersMediaIdx].ssrcs[ssrc]\n                        = othersMedia.ssrcs[ssrc];\n                }\n            }\n        });\n\n        // Look for new ssrc groups across the channels\n        othersMedia.ssrcGroups.forEach(otherSsrcGroup => {\n\n            // try to match the other ssrc-group with an ssrc-group of ours\n            let matched = false;\n\n            for (let i = 0; i < myMedia.ssrcGroups.length; i++) {\n                const mySsrcGroup = myMedia.ssrcGroups[i];\n\n                if (otherSsrcGroup.semantics === mySsrcGroup.semantics\n                    && arrayEquals(otherSsrcGroup.ssrcs, mySsrcGroup.ssrcs)) {\n\n                    matched = true;\n                    break;\n                }\n            }\n\n            if (!matched) {\n                // Allocate channel if we've found an ssrc-group that doesn't\n                // exist in our channel\n\n                if (!newMedia[othersMediaIdx]) {\n                    newMedia[othersMediaIdx] = {\n                        mediaindex: othersMedia.mediaindex,\n                        mid: othersMedia.mid,\n                        ssrcs: {},\n                        ssrcGroups: []\n                    };\n                }\n                newMedia[othersMediaIdx].ssrcGroups.push(otherSsrcGroup);\n            }\n        });\n    });\n\n    return newMedia;\n};\n\n/**\n * TODO: document!\n */\nSDPDiffer.prototype.toJingle = function(modify) {\n    const sdpMediaSsrcs = this.getNewMedia();\n\n    let modified = false;\n\n    Object.keys(sdpMediaSsrcs).forEach(mediaindex => {\n        modified = true;\n        const media = sdpMediaSsrcs[mediaindex];\n\n        modify.c('content', { name: media.mid });\n\n        modify.c('description',\n            { xmlns: 'urn:xmpp:jingle:apps:rtp:1',\n                media: media.mid });\n\n        // FIXME: not completely sure this operates on blocks and / or handles\n        // different ssrcs correctly\n        // generate sources from lines\n        Object.keys(media.ssrcs).forEach(ssrcNum => {\n            const mediaSsrc = media.ssrcs[ssrcNum];\n            const ssrcLines = mediaSsrc.lines;\n            const sourceName = SDPUtil.parseSourceNameLine(ssrcLines);\n\n            modify.c('source', { xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0' });\n            modify.attrs({\n                name: FeatureFlags.isSourceNameSignalingEnabled() ? sourceName : undefined,\n                ssrc: mediaSsrc.ssrc\n            });\n\n            // Only MSID attribute is sent\n            const msid = SDPUtil.parseMSIDAttribute(ssrcLines);\n\n            if (msid) {\n                modify.c('parameter');\n                modify.attrs({ name: 'msid' });\n                modify.attrs({ value: msid });\n                modify.up();\n            }\n\n            modify.up(); // end of source\n        });\n\n        // generate source groups from lines\n        media.ssrcGroups.forEach(ssrcGroup => {\n            if (ssrcGroup.ssrcs.length) {\n\n                modify.c('ssrc-group', {\n                    semantics: ssrcGroup.semantics,\n                    xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                });\n\n                ssrcGroup.ssrcs.forEach(ssrc => {\n                    modify.c('source', { ssrc })\n                        .up(); // end of source\n                });\n                modify.up(); // end of ssrc-group\n            }\n        });\n\n        modify.up(); // end of description\n        modify.up(); // end of content\n    });\n\n    return modified;\n};\n","import { getLogger } from '@jitsi/logger';\nimport async from 'async';\n\nconst logger = getLogger(__filename);\n\n/**\n * A queue for async task execution.\n */\nexport default class AsyncQueue {\n    /**\n     * Creates new instance.\n     */\n    constructor() {\n        this._queue = async.queue(this._processQueueTasks.bind(this), 1);\n        this._stopped = false;\n    }\n\n    /**\n     * Removes any pending tasks from the queue.\n     */\n    clear() {\n        this._queue.kill();\n    }\n\n    /**\n     * Internal task processing implementation which makes things work.\n     */\n    _processQueueTasks(task, finishedCallback) {\n        try {\n            task(finishedCallback);\n        } catch (error) {\n            logger.error(`Task failed: ${error?.stack}`);\n            finishedCallback(error);\n        }\n    }\n\n    /**\n     * The 'task' function will be given a callback it MUST call with either:\n     *  1) No arguments if it was successful or\n     *  2) An error argument if there was an error\n     * If the task wants to process the success or failure of the task, it\n     * should pass the {@code callback} to the push function, e.g.:\n     * queue.push(task, (err) => {\n     *     if (err) {\n     *         // error handling\n     *     } else {\n     *         // success handling\n     *     }\n     * });\n     *\n     * @param {function} task - The task to be executed. See the description above.\n     * @param {function} [callback] - Optional callback to be called after the task has been executed.\n     */\n    push(task, callback) {\n        if (this._stopped) {\n            callback && callback(new Error('The queue has been stopped'));\n\n            return;\n        }\n        this._queue.push(task, callback);\n    }\n\n    /**\n     * Shutdowns the queue. All already queued tasks will execute, but no future tasks can be added. If a task is added\n     * after the queue has been shutdown then the callback will be called with an error.\n     */\n    shutdown() {\n        this._stopped = true;\n    }\n}\n","export enum JingleSessionState {\n    /**\n     * The pending Jingle session state which means the session as defined in\n     * XEP-0166(before 'session-invite/session-accept' took place).\n     */\n    PENDING = 'pending',\n\n    /**\n     * The active Jingle session state as defined in XEP-0166\n     * (after 'session-invite'/'session-accept').\n     */\n    ACTIVE = 'active',\n\n    /**\n     * The ended Jingle session state as defined in XEP-0166\n     * (after 'session-terminate').\n     */\n    ENDED = 'ended'\n};\n\n// exported for backward compatibility\nexport const PENDING = JingleSessionState.PENDING;\nexport const ACTIVE = JingleSessionState.ACTIVE;\nexport const ENDED = JingleSessionState.ENDED;\n","import { getLogger } from '@jitsi/logger';\n\nimport Listenable from '../util/Listenable';\n\nimport * as JingleSessionState from './JingleSessionState';\n\nconst logger = getLogger(__filename);\n\n/**\n * JingleSession provides an API to manage a single Jingle session. We will\n * have different implementations depending on the underlying interface used\n * (i.e. WebRTC and ORTC) and here we hold the code common to all of them.\n */\nexport default class JingleSession extends Listenable {\n\n    /* eslint-disable max-params */\n\n    /**\n     * Creates new <tt>JingleSession</tt>.\n     * @param {string} sid the Jingle session identifier\n     * @param {string} localJid our JID\n     * @param {string} remoteJid the JID of the remote peer\n     * @param {XmppConnection} connection the XMPP connection\n     * @param {Object} mediaConstraints the media constraints object passed to the PeerConnection onCreateAnswer/Offer.\n     * @param {Object} pcConfig The {@code RTCConfiguration} object passed to the PeerConnection's constructor.\n     * @param {boolean} isInitiator indicates if it will be the side which initiates the session.\n     */\n    constructor(\n            sid,\n            localJid,\n            remoteJid,\n            connection,\n            mediaConstraints,\n            pcConfig,\n            isInitiator) {\n        super();\n        this.sid = sid;\n        this.localJid = localJid;\n        this.remoteJid = remoteJid;\n        this.connection = connection;\n        this.mediaConstraints = mediaConstraints;\n        this.pcConfig = pcConfig;\n\n        /**\n         * Indicates whether this instance is an initiator or an answerer of\n         * the Jingle session.\n         * @type {boolean}\n         */\n        this.isInitiator = isInitiator;\n\n        /**\n         * Whether to use dripping or not. Dripping is sending trickle\n         * candidates not one-by-one.\n         */\n        this.usedrip = true;\n\n        /**\n         *  When dripping is used, stores ICE candidates which are to be sent.\n         */\n        this.dripContainer = [];\n\n        /**\n         * The chat room instance associated with the session.\n         * @type {ChatRoom}\n         */\n        this.room = null;\n\n        /**\n         * The signaling layer.\n         * @type {SignalingLayerImpl | null}\n         * @private\n         */\n        this._signalingLayer = null;\n\n        /**\n         * Jingle session state - uninitialized until {@link initialize} is\n         * called @type {JingleSessionState}\n         */\n        this.state = null;\n\n        /**\n         * The RTC service instance\n         * @type {RTC}\n         */\n        this.rtc = null;\n    }\n\n    /**\n     * Returns XMPP address of this session's initiator.\n     * @return {string}\n     */\n    get initiatorJid() {\n        return this.isInitiator ? this.localJid : this.remoteJid;\n    }\n\n    /**\n     * Returns XMPP address of this session's responder.\n     * @return {string}\n     */\n    get responderJid() {\n        return this.isInitiator ? this.remoteJid : this.localJid;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Prepares this object to initiate a session.\n     * @param {ChatRoom} room the chat room for the conference associated with\n     * this session\n     * @param {RTC} rtc the RTC service instance\n     * @param {SignalingLayerImpl} signalingLayer - The signaling layer instance.\n     * @param {object} options - the options, see implementing class's\n     * {@link #doInitialize} description for more details.\n     */\n    initialize(room, rtc, signalingLayer, options) {\n        if (this.state !== null) {\n            const errmsg\n                = `attempt to initiate on session ${this.sid}\n                   in state ${this.state}`;\n\n            logger.error(errmsg);\n            throw new Error(errmsg);\n        }\n\n        // TODO decouple from room\n        this.room = room;\n        this.rtc = rtc;\n        this._signalingLayer = signalingLayer;\n        this.state = JingleSessionState.PENDING;\n        this.doInitialize(options);\n    }\n\n    /**\n     * The implementing class finishes initialization here. Called at the end of\n     * {@link initialize}.\n     * @param {Object} options - The options specific to the implementing class.\n     * @protected\n     */\n    doInitialize(options) { } // eslint-disable-line no-unused-vars, no-empty-function, max-len\n\n    /* eslint-disable no-unused-vars, no-empty-function */\n\n    /**\n     * Adds the ICE candidates found in the 'contents' array as remote\n     * candidates?\n     * Note: currently only used on transport-info\n     *\n     * @param contents\n     */\n    addIceCandidates(contents) {}\n\n    /* eslint-enable no-unused-vars, no-empty-function */\n\n    /**\n     * Returns current state of this <tt>JingleSession</tt> instance.\n     * @returns {JingleSessionState} the current state of this session instance.\n     */\n    getState() {\n        return this.state;\n    }\n\n    /* eslint-disable no-unused-vars, no-empty-function */\n\n    /**\n     * Handles an 'add-source' event.\n     *\n     * @param contents an array of Jingle 'content' elements.\n     */\n    addSources(contents) {}\n\n    /**\n     * Handles a 'remove-source' event.\n     *\n     * @param contents an array of Jingle 'content' elements.\n     */\n    removeSources(contents) {}\n\n    /**\n     * Terminates this Jingle session by sending session-terminate\n     * @param success a callback called once the 'session-terminate' packet has\n     * been acknowledged with RESULT.\n     * @param failure a callback called when either timeout occurs or ERROR\n     * response is received.\n     * @param {Object} options\n     * @param {string} [options.reason] XMPP Jingle error condition\n     * @param {string} [options.reasonDescription] some meaningful error message\n     * @param {boolean} [options.requestRestart=false] set to true to ask Jicofo to start a new session one this once is\n     * terminated.\n     * @param {boolean} [options.sendSessionTerminate=true] set to false to skip\n     * sending session-terminate. It may not make sense to send it if the XMPP\n     * connection has been closed already or if the remote peer has disconnected\n     */\n    terminate(success, failure, options) {}\n\n    /**\n     * Handles an offer from the remote peer (prepares to accept a session).\n     * @param jingle the 'jingle' XML element.\n     * @param success callback called when we the incoming session has been\n     * accepted\n     * @param failure callback called when we fail for any reason, will supply\n     * error object with details(which is meant more to be printed to the logger\n     * than analysed in the code, as the error is unrecoverable anyway)\n     */\n    acceptOffer(jingle, success, failure) {}\n\n    /**\n     * Returns the JID of the initiator of the jingle session.\n     */\n    _getInitiatorJid() {\n        return this.isInitiator ? this.localJid : this.remoteJid;\n    }\n\n    /* eslint-enable no-unused-vars, no-empty-function */\n}\n","enum MediaSessionEvents {\n    /**\n     * Event triggered when the remote party signals it's receive video max frame height.\n     */\n    REMOTE_VIDEO_CONSTRAINTS_CHANGED = 'media_session.REMOTE_VIDEO_CONSTRAINTS_CHANGED'\n};\n\nexport default MediaSessionEvents;","/* global $ */\n\nimport { getLogger } from '@jitsi/logger';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport * as CodecMimeType from '../../service/RTC/CodecMimeType';\nimport { MediaDirection } from '../../service/RTC/MediaDirection';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport {\n    ICE_DURATION,\n    ICE_STATE_CHANGED\n} from '../../service/statistics/AnalyticsEvents';\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\nimport { SS_DEFAULT_FRAME_RATE } from '../RTC/ScreenObtainer';\nimport FeatureFlags from '../flags/FeatureFlags';\nimport SDP from '../sdp/SDP';\nimport SDPDiffer from '../sdp/SDPDiffer';\nimport SDPUtil from '../sdp/SDPUtil';\nimport Statistics from '../statistics/statistics';\nimport AsyncQueue from '../util/AsyncQueue';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport { integerHash } from '../util/StringUtils';\n\nimport browser from './../browser';\nimport JingleSession from './JingleSession';\nimport * as JingleSessionState from './JingleSessionState';\nimport MediaSessionEvents from './MediaSessionEvents';\nimport XmppConnection from './XmppConnection';\n\nconst logger = getLogger(__filename);\n\n/**\n * Constant tells how long we're going to wait for IQ response, before timeout\n * error is  triggered.\n * @type {number}\n */\nconst IQ_TIMEOUT = 10000;\n\n/*\n * The default number of samples (per stat) to keep when webrtc stats gathering\n * is enabled in TraceablePeerConnection.\n */\nconst DEFAULT_MAX_STATS = 300;\n\n/**\n * The time duration for which the client keeps gathering ICE candidates to be sent out in a single IQ.\n * @type {number} timeout in ms.\n */\nconst ICE_CAND_GATHERING_TIMEOUT = 150;\n\n/**\n * Reads the endpoint ID given a string which represents either the endpoint's full JID, or the endpoint ID itself.\n * @param {String} jidOrEndpointId A string which is either the full JID of a participant, or the ID of an\n * endpoint/participant.\n * @returns The endpoint ID associated with 'jidOrEndpointId'.\n */\nfunction getEndpointId(jidOrEndpointId) {\n    return Strophe.getResourceFromJid(jidOrEndpointId) || jidOrEndpointId;\n}\n\n/**\n * @typedef {Object} JingleSessionPCOptions\n * @property {Object} abTesting - A/B testing related options (ask George).\n * @property {boolean} abTesting.enableSuspendVideoTest - enables the suspend\n * video test ?(ask George).\n * @property {boolean} disableH264 - Described in the config.js[1].\n * @property {boolean} disableRtx - Described in the config.js[1].\n * @property {boolean} disableSimulcast - Described in the config.js[1].\n * @property {boolean} enableInsertableStreams - Set to true when the insertable streams constraints is to be enabled\n * on the PeerConnection.\n * @property {boolean} enableLayerSuspension - Described in the config.js[1].\n * @property {boolean} failICE - it's an option used in the tests. Set to\n * <tt>true</tt> to block any real candidates and make the ICE fail.\n * @property {boolean} gatherStats - Described in the config.js[1].\n * @property {object} p2p - Peer to peer related options (FIXME those could be\n * fetched from config.p2p on the upper level).\n * @property {boolean} preferH264 - Described in the config.js[1].\n * @property {Object} testing - Testing and/or experimental options.\n * @property {boolean} webrtcIceUdpDisable - Described in the config.js[1].\n * @property {boolean} webrtcIceTcpDisable - Described in the config.js[1].\n *\n * [1]: https://github.com/jitsi/jitsi-meet/blob/master/config.js\n */\n/**\n *\n */\nexport default class JingleSessionPC extends JingleSession {\n    /**\n     * Parses 'senders' attribute of the video content.\n     * @param {jQuery} jingleContents\n     * @return {string|null} one of the values of content \"senders\" attribute\n     * defined by Jingle. If there is no \"senders\" attribute or if the value is\n     * invalid then <tt>null</tt> will be returned.\n     * @private\n     */\n    static parseVideoSenders(jingleContents) {\n        const videoContents = jingleContents.find('>content[name=\"video\"]');\n\n        if (videoContents.length) {\n            const senders = videoContents[0].getAttribute('senders');\n\n            if (senders === 'both'\n                || senders === 'initiator'\n                || senders === 'responder'\n                || senders === 'none') {\n                return senders;\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Parses the video max frame height value out of the 'content-modify' IQ.\n     *\n     * @param {jQuery} jingleContents - A jQuery selector pointing to the '>jingle' element.\n     * @returns {Number|null}\n     */\n    static parseMaxFrameHeight(jingleContents) {\n        const maxFrameHeightSel = jingleContents.find('>content[name=\"video\"]>max-frame-height');\n\n        return maxFrameHeightSel.length ? Number(maxFrameHeightSel.text()) : null;\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Creates new <tt>JingleSessionPC</tt>\n     * @param {string} sid the Jingle Session ID - random string which identifies the session\n     * @param {string} localJid our JID\n     * @param {string} remoteJid remote peer JID\n     * @param {XmppConnection} connection - The XMPP connection instance.\n     * @param mediaConstraints the media constraints object passed to createOffer/Answer, as defined\n     * by the WebRTC standard\n     * @param pcConfig The {@code RTCConfiguration} to use for the WebRTC peer connection.\n     * @param {boolean} isP2P indicates whether this instance is meant to be used in a direct, peer to\n     * peer connection or <tt>false</tt> if it's a JVB connection.\n     * @param {boolean} isInitiator indicates if it will be the side which initiates the session.\n     * @constructor\n     *\n     * @implements {SignalingLayer}\n     */\n    constructor(\n            sid,\n            localJid,\n            remoteJid,\n            connection,\n            mediaConstraints,\n            pcConfig,\n            isP2P,\n            isInitiator) {\n        super(\n            sid,\n            localJid,\n            remoteJid, connection, mediaConstraints, pcConfig, isInitiator);\n\n        /**\n         * The bridge session's identifier. One Jingle session can during\n         * it's lifetime participate in multiple bridge sessions managed by\n         * Jicofo. A new bridge session is started whenever Jicofo sends\n         * 'session-initiate' or 'transport-replace'.\n         *\n         * @type {?string}\n         * @private\n         */\n        this._bridgeSessionId = null;\n\n        /**\n         * The oldest SDP passed to {@link notifyMySSRCUpdate} while the XMPP connection was offline that will be\n         * used to update Jicofo once the XMPP connection goes back online.\n         * @type {SDP|undefined}\n         * @private\n         */\n        this._cachedOldLocalSdp = undefined;\n\n        /**\n         * The latest SDP passed to {@link notifyMySSRCUpdate} while the XMPP connection was offline that will be\n         * used to update Jicofo once the XMPP connection goes back online.\n         * @type {SDP|undefined}\n         * @private\n         */\n        this._cachedNewLocalSdp = undefined;\n\n        /**\n         * Stores result of {@link window.performance.now()} at the time when\n         * ICE enters 'checking' state.\n         * @type {number|null} null if no value has been stored yet\n         * @private\n         */\n        this._iceCheckingStartedTimestamp = null;\n\n        /**\n         * Stores result of {@link window.performance.now()} at the time when\n         * first ICE candidate is spawned by the peerconnection to mark when\n         * ICE gathering started. That's, because ICE gathering state changed\n         * events are not supported by most of the browsers, so we try something\n         * that will work everywhere. It may not be as accurate, but given that\n         * 'host' candidate usually comes first, the delay should be minimal.\n         * @type {number|null} null if no value has been stored yet\n         * @private\n         */\n        this._gatheringStartedTimestamp = null;\n\n        /**\n         * Local preference for the receive video max frame height.\n         *\n         * @type {Number|undefined}\n         */\n        this.localRecvMaxFrameHeight = undefined;\n\n        /**\n         * Indicates whether or not this session is willing to send/receive\n         * video media. When set to <tt>false</tt> the underlying peer\n         * connection will disable local video transfer and the remote peer will\n         * be will be asked to stop sending video via 'content-modify' IQ\n         * (the senders attribute of video contents will be adjusted\n         * accordingly). Note that this notification is sent only in P2P\n         * session, because Jicofo does not support it yet. Obviously when\n         * the value is changed from <tt>false</tt> to <tt>true</tt> another\n         * notification will be sent to resume video transfer on the remote\n         * side.\n         * @type {boolean}\n         * @private\n         */\n        this._localVideoActive = true;\n\n        /**\n         * Indicates whether or not the remote peer has video transfer active.\n         * When set to <tt>true</tt> it means that remote peer is neither\n         * sending nor willing to receive video. In such case we'll ask\n         * our peerconnection to stop sending video by calling\n         * {@link TraceablePeerConnection.setVideoTransferActive} with\n         * <tt>false</tt>.\n         * @type {boolean}\n         * @private\n         */\n        this._remoteVideoActive = true;\n\n        /**\n         * Marks that ICE gathering duration has been reported already. That\n         * prevents reporting it again, after eventual 'transport-replace' (JVB\n         * conference migration/ICE restart).\n         * @type {boolean}\n         * @private\n         */\n        this._gatheringReported = false;\n\n        this.lasticecandidate = false;\n        this.closed = false;\n\n        /**\n         * Indicates whether or not this <tt>JingleSessionPC</tt> is used in\n         * a peer to peer type of session.\n         * @type {boolean} <tt>true</tt> if it's a peer to peer\n         * session or <tt>false</tt> if it's a JVB session\n         */\n        this.isP2P = isP2P;\n\n        /**\n         * Remote preference for the receive video max frame height.\n         *\n         * @type {Number|undefined}\n         */\n        this.remoteRecvMaxFrameHeight = undefined;\n\n        /**\n         * The queue used to serialize operations done on the peerconnection.\n         *\n         * @type {AsyncQueue}\n         */\n        this.modificationQueue = new AsyncQueue();\n\n        /**\n         * Flag used to guarantee that the connection established event is\n         * triggered just once.\n         * @type {boolean}\n         */\n        this.wasConnected = false;\n\n        /**\n         * Keeps track of how long (in ms) it took from ICE start to ICE\n         * connect.\n         *\n         * @type {number}\n         */\n        this.establishmentDuration = undefined;\n\n        this._xmppListeners = [];\n        this._xmppListeners.push(\n            connection.addEventListener(\n                XmppConnection.Events.CONN_STATUS_CHANGED,\n                this.onXmppStatusChanged.bind(this))\n        );\n\n        this._removeSenderVideoConstraintsChangeListener = undefined;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Checks whether or not this session instance is still operational.\n     * @private\n     * @returns {boolean} {@code true} if operation or {@code false} otherwise.\n     */\n    _assertNotEnded() {\n        return this.state !== JingleSessionState.ENDED;\n    }\n\n    /**\n     * @inheritDoc\n     * @param {JingleSessionPCOptions} options  - a set of config options.\n     */\n    doInitialize(options) {\n        this.failICE = Boolean(options.failICE);\n        this.lasticecandidate = false;\n        this.options = options;\n\n        /**\n         * {@code true} if reconnect is in progress.\n         * @type {boolean}\n         */\n        this.isReconnect = false;\n\n        /**\n         * Set to {@code true} if the connection was ever stable\n         * @type {boolean}\n         */\n        this.wasstable = false;\n        this.webrtcIceUdpDisable = Boolean(options.webrtcIceUdpDisable);\n        this.webrtcIceTcpDisable = Boolean(options.webrtcIceTcpDisable);\n\n        const pcOptions = { disableRtx: options.disableRtx };\n\n        if (options.gatherStats) {\n            pcOptions.maxstats = DEFAULT_MAX_STATS;\n        }\n        pcOptions.capScreenshareBitrate = false;\n        pcOptions.enableInsertableStreams = options.enableInsertableStreams;\n        pcOptions.videoQuality = options.videoQuality;\n        pcOptions.forceTurnRelay = options.forceTurnRelay;\n        pcOptions.audioQuality = options.audioQuality;\n        pcOptions.usesUnifiedPlan = this.usesUnifiedPlan\n            = browser.supportsUnifiedPlan()\n                && (browser.isFirefox()\n                    || browser.isWebKitBased()\n                    || (browser.isChromiumBased()\n\n                        // Provide a way to control the behavior for jvb and p2p connections independently.\n                        && this.isP2P\n                        ? options.p2p?.enableUnifiedOnChrome ?? true\n                        : options.enableUnifiedOnChrome ?? true));\n\n        if (this.isP2P) {\n            // simulcast needs to be disabled for P2P (121) calls\n            pcOptions.disableSimulcast = true;\n            const abtestSuspendVideo = this._abtestSuspendVideoEnabled(options);\n\n            if (typeof abtestSuspendVideo !== 'undefined') {\n                pcOptions.abtestSuspendVideo = abtestSuspendVideo;\n            }\n        } else {\n            // H264 does not support simulcast, so it needs to be disabled.\n            pcOptions.disableSimulcast\n                = options.disableSimulcast\n                    || (options.preferH264 && !options.disableH264)\n                    || (options.videoQuality && options.videoQuality.preferredCodec === CodecMimeType.H264);\n\n            // Disable simulcast for low fps screenshare and enable it for high fps screenshare.\n            // testing.capScreenshareBitrate config.js setting has now been deprecated.\n            pcOptions.capScreenshareBitrate = pcOptions.disableSimulcast\n                || !(typeof options.desktopSharingFrameRate?.max === 'number'\n                    && options.desktopSharingFrameRate?.max > SS_DEFAULT_FRAME_RATE);\n\n            // add the capScreenshareBitrate to the permanent properties so that it's included with every event that we\n            // send to the analytics backend.\n            Statistics.analytics.addPermanentProperties({ capScreenshareBitrate: pcOptions.capScreenshareBitrate });\n        }\n\n        if (options.startSilent) {\n            pcOptions.startSilent = true;\n        }\n\n        this.peerconnection\n            = this.rtc.createPeerConnection(\n                    this._signalingLayer,\n                    this.pcConfig,\n                    this.isP2P,\n                    pcOptions);\n\n        this.peerconnection.onicecandidate = ev => {\n            if (!ev) {\n                // There was an incomplete check for ev before which left\n                // the last line of the function unprotected from a potential\n                // throw of an exception. Consequently, it may be argued that\n                // the check is unnecessary. Anyway, I'm leaving it and making\n                // the check complete.\n                return;\n            }\n\n            // XXX this is broken, candidate is not parsed.\n            const candidate = ev.candidate;\n            const now = window.performance.now();\n\n            if (candidate) {\n                if (this._gatheringStartedTimestamp === null) {\n                    this._gatheringStartedTimestamp = now;\n                }\n\n                // Discard candidates of disabled protocols.\n                let protocol = candidate.protocol;\n\n                if (typeof protocol === 'string') {\n                    protocol = protocol.toLowerCase();\n                    if (protocol === 'tcp' || protocol === 'ssltcp') {\n                        if (this.webrtcIceTcpDisable) {\n                            return;\n                        }\n                    } else if (protocol === 'udp') {\n                        if (this.webrtcIceUdpDisable) {\n                            return;\n                        }\n                    }\n                }\n            } else if (!this._gatheringReported) {\n                // End of gathering\n                Statistics.sendAnalytics(\n                    ICE_DURATION,\n                    {\n                        phase: 'gathering',\n                        value: now - this._gatheringStartedTimestamp,\n                        p2p: this.isP2P,\n                        initiator: this.isInitiator\n                    });\n                this._gatheringReported = true;\n            }\n            this.sendIceCandidate(candidate);\n        };\n\n        // Note there is a change in the spec about closed:\n        // This value moved into the RTCPeerConnectionState enum in\n        // the May 13, 2016 draft of the specification, as it reflects the state\n        // of the RTCPeerConnection, not the signaling connection. You now\n        // detect a closed connection by checking for connectionState to be\n        // \"closed\" instead.\n        // I suppose at some point this will be moved to onconnectionstatechange\n        this.peerconnection.onsignalingstatechange = () => {\n            if (this.peerconnection.signalingState === 'stable') {\n                this.wasstable = true;\n            } else if (this.peerconnection.signalingState === 'closed'\n                || this.peerconnection.connectionState === 'closed') {\n                this.room.eventEmitter.emit(XMPPEvents.SUSPEND_DETECTED, this);\n            }\n        };\n\n        /**\n         * The oniceconnectionstatechange event handler contains the code to\n         * execute when the iceconnectionstatechange event, of type Event,\n         * is received by this RTCPeerConnection. Such an event is sent when\n         * the value of RTCPeerConnection.iceConnectionState changes.\n         */\n        this.peerconnection.oniceconnectionstatechange = () => {\n            const now = window.performance.now();\n            let isStable = false;\n\n            if (!this.isP2P) {\n                this.room.connectionTimes[\n                    `ice.state.${this.peerconnection.iceConnectionState}`]\n                    = now;\n            }\n            logger.log(`(TIME) ICE ${this.peerconnection.iceConnectionState} ${this.isP2P ? 'P2P' : 'JVB'}:\\t`, now);\n\n            Statistics.sendAnalytics(\n                ICE_STATE_CHANGED,\n                {\n                    p2p: this.isP2P,\n                    state: this.peerconnection.iceConnectionState,\n                    'signaling_state': this.peerconnection.signalingState,\n                    reconnect: this.isReconnect,\n                    value: now\n                });\n\n            this.room.eventEmitter.emit(\n                XMPPEvents.ICE_CONNECTION_STATE_CHANGED,\n                this,\n                this.peerconnection.iceConnectionState);\n            switch (this.peerconnection.iceConnectionState) {\n            case 'checking':\n                this._iceCheckingStartedTimestamp = now;\n                break;\n            case 'connected':\n                // Informs interested parties that the connection has been restored. This includes the case when\n                // media connection to the bridge has been restored after an ICE failure by using session-terminate.\n                if (this.peerconnection.signalingState === 'stable') {\n                    isStable = true;\n                    const usesTerminateForRestart = !this.options.enableIceRestart\n                        && this.room.supportsRestartByTerminate();\n\n                    if (this.isReconnect || usesTerminateForRestart) {\n                        this.room.eventEmitter.emit(\n                            XMPPEvents.CONNECTION_RESTORED, this);\n                    }\n                }\n\n                // Add a workaround for an issue on chrome in Unified plan when the local endpoint is the offerer.\n                // The 'signalingstatechange' event for 'stable' is handled after the 'iceconnectionstatechange' event\n                // for 'completed' is handled by the client. This prevents the client from firing a\n                // CONNECTION_ESTABLISHED event for the p2p session. As a result, the offerer continues to stay on the\n                // jvb connection while the remote peer switches to the p2p connection breaking the media flow between\n                // the endpoints.\n                // TODO - file a chromium bug and add the information here.\n                if (!this.wasConnected\n                    && (this.wasstable\n                        || isStable\n                        || (this.usesUnifiedPlan && this.isInitiator && browser.isChromiumBased()))) {\n\n                    Statistics.sendAnalytics(\n                        ICE_DURATION,\n                        {\n                            phase: 'checking',\n                            value: now - this._iceCheckingStartedTimestamp,\n                            p2p: this.isP2P,\n                            initiator: this.isInitiator\n                        });\n\n                    // Switch between ICE gathering and ICE checking whichever\n                    // started first (scenarios are different for initiator\n                    // vs responder)\n                    const iceStarted\n                        = Math.min(\n                            this._iceCheckingStartedTimestamp,\n                            this._gatheringStartedTimestamp);\n\n                    this.establishmentDuration = now - iceStarted;\n\n                    Statistics.sendAnalytics(\n                        ICE_DURATION,\n                        {\n                            phase: 'establishment',\n                            value: this.establishmentDuration,\n                            p2p: this.isP2P,\n                            initiator: this.isInitiator\n                        });\n\n                    this.wasConnected = true;\n                    this.room.eventEmitter.emit(\n                        XMPPEvents.CONNECTION_ESTABLISHED, this);\n                }\n                this.isReconnect = false;\n                break;\n            case 'disconnected':\n                this.isReconnect = true;\n\n                // Informs interested parties that the connection has been\n                // interrupted.\n                if (this.wasstable) {\n                    this.room.eventEmitter.emit(\n                        XMPPEvents.CONNECTION_INTERRUPTED, this);\n                }\n                break;\n            case 'failed':\n                this.room.eventEmitter.emit(\n                    XMPPEvents.CONNECTION_ICE_FAILED, this);\n                break;\n            }\n        };\n\n\n        /**\n         * The connection state event is fired whenever the aggregate of underlying\n         * transports change their state.\n         */\n        this.peerconnection.onconnectionstatechange = () => {\n            const icestate = this.peerconnection.iceConnectionState;\n\n            switch (this.peerconnection.connectionState) {\n            case 'failed':\n                // Since version 76 Chrome no longer switches ICE connection\n                // state to failed (see\n                // https://bugs.chromium.org/p/chromium/issues/detail?id=982793\n                // for details) we use this workaround to recover from lost connections\n                if (icestate === 'disconnected') {\n                    this.room.eventEmitter.emit(\n                        XMPPEvents.CONNECTION_ICE_FAILED, this);\n                }\n                break;\n            }\n        };\n\n        /**\n         * The negotiationneeded event is fired whenever we shake the media on the\n         * RTCPeerConnection object.\n         */\n        this.peerconnection.onnegotiationneeded = () => {\n            const state = this.peerconnection.signalingState;\n            const remoteDescription = this.peerconnection.remoteDescription;\n\n            if (this.usesUnifiedPlan\n                && !this.isP2P\n                && state === 'stable'\n                && remoteDescription\n                && typeof remoteDescription.sdp === 'string') {\n                logger.info(`${this} onnegotiationneeded fired on ${this.peerconnection}`);\n\n                const workFunction = finishedCallback => {\n                    const oldSdp = new SDP(this.peerconnection.localDescription.sdp);\n\n                    this._renegotiate()\n                        .then(() => this.peerconnection.configureSenderVideoEncodings())\n                        .then(() => {\n                            const newSdp = new SDP(this.peerconnection.localDescription.sdp);\n\n                            this.notifyMySSRCUpdate(oldSdp, newSdp);\n                        })\n                        .then(() => finishedCallback(), error => finishedCallback(error));\n                };\n\n                this.modificationQueue.push(\n                    workFunction,\n                    error => {\n                        if (error) {\n                            logger.error(`${this} onnegotiationneeded error`, error);\n                        } else {\n                            logger.debug(`${this} onnegotiationneeded executed - OK`);\n                        }\n                    });\n            }\n        };\n    }\n\n    /**\n     * Remote preference for receive video max frame height.\n     *\n     * @returns {Number|undefined}\n     */\n    getRemoteRecvMaxFrameHeight() {\n        if (this.isP2P) {\n            return this.remoteRecvMaxFrameHeight;\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Sends given candidate in Jingle 'transport-info' message.\n     * @param {RTCIceCandidate} candidate the WebRTC ICE candidate instance\n     * @private\n     */\n    sendIceCandidate(candidate) {\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n        if (candidate && candidate.candidate.length && !this.lasticecandidate) {\n            const ice = SDPUtil.iceparams(localSDP.media[candidate.sdpMLineIndex], localSDP.session);\n            const jcand = SDPUtil.candidateToJingle(candidate.candidate);\n\n            if (!(ice && jcand)) {\n                const errorMesssage = 'failed to get ice && jcand';\n\n                GlobalOnErrorHandler.callErrorHandler(new Error(errorMesssage));\n                logger.error(errorMesssage);\n\n                return;\n            }\n            ice.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\n\n            if (this.usedrip) {\n                if (this.dripContainer.length === 0) {\n                    setTimeout(() => {\n                        if (this.dripContainer.length === 0) {\n                            return;\n                        }\n                        this.sendIceCandidates(this.dripContainer);\n                        this.dripContainer = [];\n                    }, ICE_CAND_GATHERING_TIMEOUT);\n                }\n                this.dripContainer.push(candidate);\n            } else {\n                this.sendIceCandidates([ candidate ]);\n            }\n        } else {\n            logger.log(`${this} sendIceCandidate: last candidate`);\n\n            // FIXME: remember to re-think in ICE-restart\n            this.lasticecandidate = true;\n        }\n    }\n\n    /**\n     * Sends given candidates in Jingle 'transport-info' message.\n     * @param {Array<RTCIceCandidate>} candidates an array of the WebRTC ICE\n     * candidate instances\n     * @private\n     */\n    sendIceCandidates(candidates) {\n        if (!this._assertNotEnded('sendIceCandidates')) {\n\n            return;\n        }\n\n        logger.log(`${this} sendIceCandidates ${JSON.stringify(candidates)}`);\n        const cand = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\n                action: 'transport-info',\n                initiator: this.initiatorJid,\n                sid: this.sid });\n\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n        for (let mid = 0; mid < localSDP.media.length; mid++) {\n            const cands = candidates.filter(el => el.sdpMLineIndex === mid);\n            const mline\n                = SDPUtil.parseMLine(localSDP.media[mid].split('\\r\\n')[0]);\n\n            if (cands.length > 0) {\n                const ice\n                    = SDPUtil.iceparams(localSDP.media[mid], localSDP.session);\n\n                ice.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\n                cand.c('content', {\n                    creator: this.initiatorJid === this.localJid\n                        ? 'initiator' : 'responder',\n                    name: cands[0].sdpMid ? cands[0].sdpMid : mline.media\n                }).c('transport', ice);\n                for (let i = 0; i < cands.length; i++) {\n                    const candidate\n                        = SDPUtil.candidateToJingle(cands[i].candidate);\n\n                    // Mangle ICE candidate if 'failICE' test option is enabled\n\n                    if (this.failICE) {\n                        candidate.ip = '1.1.1.1';\n                    }\n                    cand.c('candidate', candidate).up();\n                }\n\n                // add fingerprint\n                const fingerprintLine\n                    = SDPUtil.findLine(\n                        localSDP.media[mid],\n                        'a=fingerprint:', localSDP.session);\n\n                if (fingerprintLine) {\n                    const tmp = SDPUtil.parseFingerprint(fingerprintLine);\n\n                    tmp.required = true;\n                    cand.c(\n                        'fingerprint',\n                        { xmlns: 'urn:xmpp:jingle:apps:dtls:0' })\n                        .t(tmp.fingerprint);\n                    delete tmp.fingerprint;\n                    cand.attrs(tmp);\n                    cand.up();\n                }\n                cand.up(); // transport\n                cand.up(); // content\n            }\n        }\n\n        // might merge last-candidate notification into this, but it is called\n        // a lot later. See webrtc issue #2340\n        // logger.log('was this the last candidate', this.lasticecandidate);\n        this.connection.sendIQ(\n            cand, null, this.newJingleErrorHandler(cand), IQ_TIMEOUT);\n    }\n\n    /**\n     * Sends Jingle 'session-info' message which includes custom Jitsi Meet\n     * 'ice-state' element with the text value 'failed' to let Jicofo know\n     * that the ICE connection has entered the failed state. It can then\n     * choose to re-create JVB channels and send 'transport-replace' to\n     * retry the connection.\n     */\n    sendIceFailedNotification() {\n        const sessionInfo\n            = $iq({\n                to: this.remoteJid,\n                type: 'set' })\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\n                action: 'session-info',\n                initiator: this.initiatorJid,\n                sid: this.sid })\n            .c('ice-state', { xmlns: 'http://jitsi.org/protocol/focus' })\n            .t('failed')\n            .up();\n\n        this._bridgeSessionId\n            && sessionInfo.c(\n                'bridge-session', {\n                    xmlns: 'http://jitsi.org/protocol/focus',\n                    id: this._bridgeSessionId\n                });\n\n        this.connection.sendIQ2(\n            sessionInfo, {\n                /*\n                 * This message will be often sent when there are connectivity\n                 * issues, so make it slightly longer than Prosody's default BOSH\n                 * inactivity timeout of 60 seconds.\n                 */\n                timeout: 65\n            })\n            .catch(this.newJingleErrorHandler(sessionInfo));\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    addIceCandidates(elem) {\n        if (this.peerconnection.signalingState === 'closed') {\n            logger.warn(`${this} Ignored add ICE candidate when in closed state`);\n\n            return;\n        }\n\n        const iceCandidates = [];\n\n        elem.find('>content>transport>candidate')\n            .each((idx, candidate) => {\n                let line = SDPUtil.candidateFromJingle(candidate);\n\n                line = line.replace('\\r\\n', '').replace('a=', '');\n\n                // FIXME this code does not care to handle\n                // non-bundle transport\n                const rtcCandidate = new RTCIceCandidate({\n                    sdpMLineIndex: 0,\n\n                    // FF comes up with more complex names like audio-23423,\n                    // Given that it works on both Chrome and FF without\n                    // providing it, let's leave it like this for the time\n                    // being...\n                    // sdpMid: 'audio',\n                    sdpMid: '',\n                    candidate: line\n                });\n\n                iceCandidates.push(rtcCandidate);\n            });\n\n        if (!iceCandidates.length) {\n            logger.error(`${this} No ICE candidates to add ?`, elem[0] && elem[0].outerHTML);\n\n            return;\n        }\n\n        // We want to have this task queued, so that we know it is executed,\n        // after the initial sRD/sLD offer/answer cycle was done (based on\n        // the assumption that candidates are spawned after the offer/answer\n        // and XMPP preserves order).\n        const workFunction = finishedCallback => {\n            for (const iceCandidate of iceCandidates) {\n                this.peerconnection.addIceCandidate(iceCandidate)\n                    .then(\n                        () => logger.debug(`${this} addIceCandidate ok!`),\n                        err => logger.error(`${this} addIceCandidate failed!`, err));\n            }\n\n            finishedCallback();\n            logger.debug(`${this} ICE candidates task finished`);\n        };\n\n        logger.debug(`${this} Queued add (${iceCandidates.length}) ICE candidates task`);\n        this.modificationQueue.push(workFunction);\n    }\n\n    /**\n     *\n     * @param contents\n     */\n    readSsrcInfo(contents) {\n        const ssrcs\n            = $(contents).find(\n                '>description>'\n                    + 'source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\n\n        ssrcs.each((i, ssrcElement) => {\n            const ssrc = Number(ssrcElement.getAttribute('ssrc'));\n\n            if (this.isP2P) {\n                // In P2P all SSRCs are owner by the remote peer\n                this._signalingLayer.setSSRCOwner(\n                    ssrc, Strophe.getResourceFromJid(this.remoteJid));\n            } else {\n                if (FeatureFlags.isSourceNameSignalingEnabled()) {\n                    // Only set sourceName for non-P2P case\n                    if (ssrcElement.hasAttribute('name')) {\n                        const sourceName = ssrcElement.getAttribute('name');\n\n                        this._signalingLayer.setTrackSourceName(ssrc, sourceName);\n                    }\n                }\n                $(ssrcElement)\n                    .find('>ssrc-info[xmlns=\"http://jitsi.org/jitmeet\"]')\n                    .each((i3, ssrcInfoElement) => {\n                        const owner = ssrcInfoElement.getAttribute('owner');\n\n                        if (owner && owner.length) {\n                            if (isNaN(ssrc) || ssrc < 0) {\n                                logger.warn(`${this} Invalid SSRC ${ssrc} value received for ${owner}`);\n                            } else {\n                                this._signalingLayer.setSSRCOwner(\n                                    ssrc,\n                                    getEndpointId(owner));\n                            }\n                        }\n                    });\n            }\n        });\n    }\n\n    /**\n     * Makes the underlying TraceablePeerConnection generate new SSRC for\n     * the recvonly video stream.\n     * @deprecated\n     */\n    generateRecvonlySsrc() {\n        if (this.peerconnection) {\n            this.peerconnection.generateRecvonlySsrc();\n        } else {\n            logger.error(`${this} Unable to generate recvonly SSRC - no peerconnection`);\n        }\n    }\n\n    /**\n     * Returns the video codec configured as the preferred codec on the peerconnection.\n     */\n    getConfiguredVideoCodec() {\n        return this.peerconnection.getConfiguredVideoCodec();\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Accepts incoming Jingle 'session-initiate' and should send\n     * 'session-accept' in result.\n     * @param jingleOffer jQuery selector pointing to the jingle element of\n     * the offer IQ\n     * @param success callback called when we accept incoming session\n     * successfully and receive RESULT packet to 'session-accept' sent.\n     * @param failure function(error) called if for any reason we fail to accept\n     * the incoming offer. 'error' argument can be used to log some details\n     * about the error.\n     * @param {Array<JitsiLocalTrack>} [localTracks] the optional list of\n     * the local tracks that will be added, before the offer/answer cycle\n     * executes. We allow the localTracks to optionally be passed in so that\n     * the addition of the local tracks and the processing of the initial offer\n     * can all be done atomically. We want to make sure that any other\n     * operations which originate in the XMPP Jingle messages related with\n     * this session to be executed with an assumption that the initial\n     * offer/answer cycle has been executed already.\n     */\n    acceptOffer(jingleOffer, success, failure, localTracks) {\n        this.setOfferAnswerCycle(\n            jingleOffer,\n            () => {\n                // FIXME we may not care about RESULT packet for session-accept\n                // then we should either call 'success' here immediately or\n                // modify sendSessionAccept method to do that\n                this.sendSessionAccept(() => {\n                    success();\n\n                    this.room.eventEmitter.emit(XMPPEvents.SESSION_ACCEPT, this);\n                },\n                error => {\n                    failure(error);\n\n                    this.room.eventEmitter.emit(XMPPEvents.SESSION_ACCEPT_ERROR, this, error);\n                });\n            },\n            failure,\n            localTracks);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Creates an offer and sends Jingle 'session-initiate' to the remote peer.\n     * @param {Array<JitsiLocalTrack>} localTracks the local tracks that will be\n     * added, before the offer/answer cycle executes (for the local track\n     * addition to be an atomic operation together with the offer/answer).\n     */\n    invite(localTracks = []) {\n        if (!this.isInitiator) {\n            throw new Error('Trying to invite from the responder session');\n        }\n        const workFunction = finishedCallback => {\n            const addTracks = [];\n\n            for (const localTrack of localTracks) {\n                addTracks.push(this.peerconnection.addTrack(localTrack, this.isInitiator));\n            }\n\n            Promise.all(addTracks)\n                .then(() => this.peerconnection.createOffer(this.mediaConstraints))\n                .then(offerSdp => this.peerconnection.setLocalDescription(offerSdp))\n                .then(() => {\n                    // NOTE that the offer is obtained from the localDescription getter as it needs to go though\n                    // the transformation chain.\n                    this.sendSessionInitiate(this.peerconnection.localDescription.sdp);\n                })\n                .then(() => finishedCallback(), error => finishedCallback(error));\n        };\n\n        logger.debug(`${this} Queued invite task`);\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error(`${this} invite error`, error);\n                } else {\n                    logger.debug(`${this} invite executed - OK`);\n                }\n            });\n    }\n\n    /**\n     * Sends 'session-initiate' to the remote peer.\n     *\n     * NOTE this method is synchronous and we're not waiting for the RESULT\n     * response which would delay the startup process.\n     *\n     * @param {string} offerSdp  - The local session description which will be\n     * used to generate an offer.\n     * @private\n     */\n    sendSessionInitiate(offerSdp) {\n        let init = $iq({\n            to: this.remoteJid,\n            type: 'set'\n        }).c('jingle', {\n            xmlns: 'urn:xmpp:jingle:1',\n            action: 'session-initiate',\n            initiator: this.initiatorJid,\n            sid: this.sid\n        });\n\n        new SDP(offerSdp).toJingle(\n            init,\n            this.isInitiator ? 'initiator' : 'responder');\n        init = init.tree();\n        logger.debug(`${this} Session-initiate: `, init);\n        this.connection.sendIQ(init,\n            () => {\n                logger.info(`${this} Got RESULT for \"session-initiate\"`);\n            },\n            error => {\n                logger.error(`${this} \"session-initiate\" error`, error);\n            },\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Sets the answer received from the remote peer.\n     * @param jingleAnswer\n     */\n    setAnswer(jingleAnswer) {\n        if (!this.isInitiator) {\n            throw new Error('Trying to set an answer on the responder session');\n        }\n        this.setOfferAnswerCycle(\n            jingleAnswer,\n            () => {\n                logger.info(`${this} setAnswer - succeeded`);\n                if (this.usesUnifiedPlan && browser.isChromiumBased()) {\n                    const workFunction = finishedCallback => {\n                        // This hack is needed for Chrome to create a decoder for the ssrcs in the remote SDP when\n                        // the local endpoint is the offerer and starts muted.\n                        const remoteSdp = this.peerconnection.remoteDescription.sdp;\n                        const remoteDescription = new RTCSessionDescription({\n                            type: 'offer',\n                            sdp: remoteSdp\n                        });\n\n                        return this._responderRenegotiate(remoteDescription)\n                        .then(() => finishedCallback(), error => finishedCallback(error));\n                    };\n\n                    logger.debug(`${this} Queued responderRenegotiate task`);\n                    this.modificationQueue.push(\n                        workFunction,\n                        error => {\n                            if (error) {\n                                logger.error(`${this} failed to renegotiate a decoder for muted endpoint ${error}`);\n                            } else {\n                                logger.debug(`${this} renegotiate a decoder for muted endpoint`);\n                            }\n                        });\n                }\n            },\n            error => {\n                logger.error(`${this} setAnswer failed: `, error);\n            });\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * This is a setRemoteDescription/setLocalDescription cycle which starts at\n     * converting Strophe Jingle IQ into remote offer SDP. Once converted\n     * setRemoteDescription, createAnswer and setLocalDescription calls follow.\n     * @param jingleOfferAnswerIq jQuery selector pointing to the jingle element\n     *        of the offer (or answer) IQ\n     * @param success callback called when sRD/sLD cycle finishes successfully.\n     * @param failure callback called with an error object as an argument if we\n     *        fail at any point during setRD, createAnswer, setLD.\n     * @param {Array<JitsiLocalTrack>} [localTracks] the optional list of\n     * the local tracks that will be added, before the offer/answer cycle\n     * executes (for the local track addition to be an atomic operation together\n     * with the offer/answer).\n     */\n    setOfferAnswerCycle(jingleOfferAnswerIq, success, failure, localTracks = []) {\n        const workFunction = finishedCallback => {\n            const addTracks = [];\n\n            for (const track of localTracks) {\n                addTracks.push(this.peerconnection.addTrack(track, this.isInitiator));\n            }\n\n            const newRemoteSdp\n                = this._processNewJingleOfferIq(jingleOfferAnswerIq);\n            const oldLocalSdp\n                = this.peerconnection.localDescription.sdp;\n\n            const bridgeSession\n                = $(jingleOfferAnswerIq)\n                    .find('>bridge-session['\n                        + 'xmlns=\"http://jitsi.org/protocol/focus\"]');\n            const bridgeSessionId = bridgeSession.attr('id');\n\n            if (bridgeSessionId !== this._bridgeSessionId) {\n                this._bridgeSessionId = bridgeSessionId;\n            }\n\n            Promise.all(addTracks)\n                .then(() => this._renegotiate(newRemoteSdp.raw))\n                .then(() => {\n                    if (this.state === JingleSessionState.PENDING) {\n                        this.state = JingleSessionState.ACTIVE;\n\n                        // #1 Sync up video transfer active/inactive only after\n                        // the initial O/A cycle. We want to adjust the video\n                        // media direction only in the local SDP and the Jingle\n                        // contents direction included in the initial\n                        // offer/answer is mapped to the remote SDP. Jingle\n                        // 'content-modify' IQ is processed in a way that it\n                        // will only modify local SDP when remote peer is no\n                        // longer interested in receiving video content.\n                        // Changing media direction in the remote SDP will mess\n                        // up our SDP translation chain (simulcast, video mute,\n                        // RTX etc.)\n                        //\n                        // #2 Sends the max frame height if it was set, before the session-initiate/accept\n                        if (this.isP2P\n                            && (!this._localVideoActive || this.localRecvMaxFrameHeight)) {\n                            this.sendContentModify();\n                        }\n                    }\n\n                    // Old local SDP will be available when we're setting answer\n                    // for the first time, but not when offer and it's fine\n                    // since we're generating an answer now it will contain all\n                    // our SSRCs\n                    if (oldLocalSdp) {\n                        const newLocalSdp\n                            = new SDP(this.peerconnection.localDescription.sdp);\n\n                        this.notifyMySSRCUpdate(\n                            new SDP(oldLocalSdp), newLocalSdp);\n                    }\n                })\n                .then(() => finishedCallback(), error => finishedCallback(error));\n        };\n\n        logger.debug(`${this} Queued setOfferAnswerCycle task`);\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error(`${this} setOfferAnswerCycle task failed: ${error}`);\n                    failure(error);\n                } else {\n                    logger.debug(`${this} setOfferAnswerCycle task done`);\n                    success();\n                }\n            });\n    }\n\n    /**\n     * Updates the codecs on the peerconnection and initiates a renegotiation for the\n     * new codec config to take effect.\n     *\n     * @param {CodecMimeType} preferred the preferred codec.\n     * @param {CodecMimeType} disabled the codec that needs to be disabled.\n     */\n    setVideoCodecs(preferred = null, disabled = null) {\n        const current = this.peerconnection.getConfiguredVideoCodec();\n\n        if (this._assertNotEnded() && preferred !== current) {\n            logger.info(`${this} Switching video codec from ${current} to ${preferred}`);\n            this.peerconnection.setVideoCodecs(preferred, disabled);\n\n            // Initiate a renegotiate for the codec setting to take effect.\n            const workFunction = finishedCallback => {\n                this._renegotiate().then(\n                    () => {\n                        logger.debug(`${this} setVideoCodecs task is done`);\n\n                        return finishedCallback();\n                    }, error => {\n                        logger.error(`${this} setVideoCodecs task failed: ${error}`);\n\n                        return finishedCallback(error);\n                    });\n            };\n\n            logger.debug(`${this} Queued setVideoCodecs task`);\n\n            // Queue and execute\n            this.modificationQueue.push(workFunction);\n        }\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Although it states \"replace transport\" it does accept full Jingle offer\n     * which should contain new ICE transport details.\n     * @param jingleOfferElem an element Jingle IQ that contains new offer and\n     *        transport info.\n     * @param success callback called when we succeed to accept new offer.\n     * @param failure function(error) called when we fail to accept new offer.\n     */\n    replaceTransport(jingleOfferElem, success, failure) {\n        if (this.options.enableForcedReload) {\n            const sdp = new SDP(this.peerconnection.localDescription.sdp);\n\n            this.sendTransportAccept(sdp, success, failure);\n            this.room.eventEmitter.emit(XMPPEvents.CONNECTION_RESTARTED, this);\n\n            return;\n        }\n        this.room.eventEmitter.emit(XMPPEvents.ICE_RESTARTING, this);\n\n        // We need to first reject the 'data' section to have the SCTP stack\n        // cleaned up to signal the known data channel is now invalid. After\n        // that the original offer is set to have the SCTP connection\n        // established with the new bridge.\n        const originalOffer = jingleOfferElem.clone();\n\n        jingleOfferElem\n            .find('>content[name=\\'data\\']')\n            .attr('senders', 'rejected');\n\n        // Remove all remote sources in order to reset the client's state\n        // for the remote MediaStreams. When a conference is moved to\n        // another bridge it will start streaming with a sequence number\n        // that is not in sync with the most recently seen by the client.\n        // The symptoms include frozen or black video and lots of \"failed to\n        // unprotect SRTP packets\" in Chrome logs.\n        jingleOfferElem\n            .find('>content>description>source')\n            .remove();\n        jingleOfferElem\n            .find('>content>description>ssrc-group')\n            .remove();\n\n        // On the JVB it's not a real ICE restart and all layers are re-initialized from scratch as Jicofo does\n        // the restart by re-allocating new channels. Chrome (or WebRTC stack) needs to have the DTLS transport layer\n        // reset to start a new handshake with fresh DTLS transport on the bridge. Make it think that the DTLS\n        // fingerprint has changed by setting an all zeros key.\n        const newFingerprint = jingleOfferElem.find('>content>transport>fingerprint');\n\n        newFingerprint.attr('hash', 'sha-1');\n        newFingerprint.text('00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00');\n\n        // First set an offer with a rejected 'data' section\n        this.setOfferAnswerCycle(\n            jingleOfferElem,\n            () => {\n                // Now set the original offer(with the 'data' section)\n                this.setOfferAnswerCycle(\n                    originalOffer,\n                    () => {\n                        const localSDP\n                            = new SDP(this.peerconnection.localDescription.sdp);\n\n                        this.sendTransportAccept(localSDP, success, failure);\n\n                        this.room.eventEmitter.emit(\n                            XMPPEvents.ICE_RESTART_SUCCESS,\n                            this,\n                            originalOffer);\n                    },\n                    failure);\n            },\n            failure\n        );\n    }\n\n    /**\n     * Sends Jingle 'session-accept' message.\n     * @param {function()} success callback called when we receive 'RESULT'\n     *        packet for the 'session-accept'\n     * @param {function(error)} failure called when we receive an error response\n     *        or when the request has timed out.\n     * @private\n     */\n    sendSessionAccept(success, failure) {\n        // NOTE: since we're just reading from it, we don't need to be within\n        //  the modification queue to access the local description\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\n        const accept = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\n                action: 'session-accept',\n                initiator: this.initiatorJid,\n                responder: this.responderJid,\n                sid: this.sid });\n\n        if (this.webrtcIceTcpDisable) {\n            localSDP.removeTcpCandidates = true;\n        }\n        if (this.webrtcIceUdpDisable) {\n            localSDP.removeUdpCandidates = true;\n        }\n        if (this.failICE) {\n            localSDP.failICE = true;\n        }\n        localSDP.toJingle(\n            accept,\n            this.initiatorJid === this.localJid ? 'initiator' : 'responder');\n\n        logger.info(`${this} Sending session-accept`);\n        logger.debug(accept.tree());\n        this.connection.sendIQ(accept,\n            success,\n            this.newJingleErrorHandler(accept, error => {\n                failure(error);\n\n                // 'session-accept' is a critical timeout and we'll\n                // have to restart\n                this.room.eventEmitter.emit(\n                    XMPPEvents.SESSION_ACCEPT_TIMEOUT, this);\n            }),\n            IQ_TIMEOUT);\n\n        // XXX Videobridge needs WebRTC's answer (ICE ufrag and pwd, DTLS\n        // fingerprint and setup) ASAP in order to start the connection\n        // establishment.\n        //\n        // FIXME Flushing the connection at this point triggers an issue with\n        // BOSH request handling in Prosody on slow connections.\n        //\n        // The problem is that this request will be quite large and it may take\n        // time before it reaches Prosody. In the meantime Strophe may decide\n        // to send the next one. And it was observed that a small request with\n        // 'transport-info' usually follows this one. It does reach Prosody\n        // before the previous one was completely received. 'rid' on the server\n        // is increased and Prosody ignores the request with 'session-accept'.\n        // It will never reach Jicofo and everything in the request table is\n        // lost. Removing the flush does not guarantee it will never happen, but\n        // makes it much less likely('transport-info' is bundled with\n        // 'session-accept' and any immediate requests).\n        //\n        // this.connection.flush();\n    }\n\n    /**\n     * Will send 'content-modify' IQ in order to ask the remote peer to\n     * either stop or resume sending video media or to adjust sender's video constraints.\n     * @private\n     */\n    sendContentModify() {\n        const maxFrameHeight = this.localRecvMaxFrameHeight;\n        const senders = this._localVideoActive ? 'both' : 'none';\n\n        let sessionModify\n            = $iq({\n                to: this.remoteJid,\n                type: 'set'\n            })\n                .c('jingle', {\n                    xmlns: 'urn:xmpp:jingle:1',\n                    action: 'content-modify',\n                    initiator: this.initiatorJid,\n                    sid: this.sid\n                })\n                .c('content', {\n                    name: MediaType.VIDEO,\n                    senders\n                });\n\n        if (typeof maxFrameHeight !== 'undefined') {\n            sessionModify = sessionModify\n                .c('max-frame-height', { xmlns: 'http://jitsi.org/jitmeet/video' })\n                .t(maxFrameHeight);\n        }\n\n        logger.info(`${this} sending content-modify, video senders: ${senders}, max frame height: ${maxFrameHeight}`);\n        logger.debug(sessionModify.tree());\n\n        this.connection.sendIQ(\n            sessionModify,\n            null,\n            this.newJingleErrorHandler(sessionModify),\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Adjust the preference for max video frame height that the local party is willing to receive. Signals\n     * the remote party.\n     *\n     * @param {Number} maxFrameHeight - the new value to set.\n     */\n    setReceiverVideoConstraint(maxFrameHeight) {\n        logger.info(`${this} setReceiverVideoConstraint - max frame height: ${maxFrameHeight}`);\n\n        this.localRecvMaxFrameHeight = maxFrameHeight;\n\n        if (this.isP2P) {\n            // Tell the remote peer about our receive constraint. If Jingle session is not yet active the state will\n            // be synced after offer/answer.\n            if (this.state === JingleSessionState.ACTIVE) {\n                this.sendContentModify();\n            }\n        } else {\n            this.rtc.setReceiverVideoConstraint(maxFrameHeight);\n        }\n    }\n\n    /**\n     * Sends Jingle 'transport-accept' message which is a response to\n     * 'transport-replace'.\n     * @param localSDP the 'SDP' object with local session description\n     * @param success callback called when we receive 'RESULT' packet for\n     *        'transport-replace'\n     * @param failure function(error) called when we receive an error response\n     *        or when the request has timed out.\n     * @private\n     */\n    sendTransportAccept(localSDP, success, failure) {\n        const transportAccept = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'transport-accept',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            });\n\n        localSDP.media.forEach((medialines, idx) => {\n            const mline = SDPUtil.parseMLine(medialines.split('\\r\\n')[0]);\n\n            transportAccept.c('content',\n                {\n                    creator:\n                        this.initiatorJid === this.localJid\n                            ? 'initiator'\n                            : 'responder',\n                    name: mline.media\n                }\n            );\n            localSDP.transportToJingle(idx, transportAccept);\n            transportAccept.up();\n        });\n\n        logger.info(`${this} Sending transport-accept`);\n        logger.debug(transportAccept.tree());\n\n        this.connection.sendIQ(transportAccept,\n            success,\n            this.newJingleErrorHandler(transportAccept, failure),\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Sends Jingle 'transport-reject' message which is a response to\n     * 'transport-replace'.\n     * @param success callback called when we receive 'RESULT' packet for\n     *        'transport-replace'\n     * @param failure function(error) called when we receive an error response\n     *        or when the request has timed out.\n     *\n     * FIXME method should be marked as private, but there's some spaghetti that\n     *       needs to be fixed prior doing that\n     */\n    sendTransportReject(success, failure) {\n        // Send 'transport-reject', so that the focus will\n        // know that we've failed\n        const transportReject = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'transport-reject',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            });\n\n        logger.info(`${this} Sending 'transport-reject'`);\n        logger.debug(transportReject.tree());\n\n        this.connection.sendIQ(transportReject,\n            success,\n            this.newJingleErrorHandler(transportReject, failure),\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Sets the resolution constraint on the local camera track.\n     * @param {number} maxFrameHeight - The user preferred max frame height.\n     * @param {string} sourceName - The source name of the track.\n     * @returns {Promise} promise that will be resolved when the operation is\n     * successful and rejected otherwise.\n     */\n    setSenderVideoConstraint(maxFrameHeight, sourceName = null) {\n        if (this._assertNotEnded()) {\n            logger.info(`${this} setSenderVideoConstraint: ${maxFrameHeight}, sourceName: ${sourceName}`);\n\n            const jitsiLocalTrack = sourceName\n                ? this.rtc.getLocalVideoTracks().find(track => track.getSourceName() === sourceName)\n                : this.rtc.getLocalVideoTrack();\n\n            return this.peerconnection.setSenderVideoConstraints(maxFrameHeight, jitsiLocalTrack);\n        }\n\n        return Promise.resolve();\n    }\n\n    /**\n     * @inheritDoc\n     */\n    terminate(success, failure, options) {\n        if (this.state === JingleSessionState.ENDED) {\n            return;\n        }\n\n        if (!options || Boolean(options.sendSessionTerminate)) {\n            const sessionTerminate\n                = $iq({\n                    to: this.remoteJid,\n                    type: 'set'\n                })\n                    .c('jingle', {\n                        xmlns: 'urn:xmpp:jingle:1',\n                        action: 'session-terminate',\n                        initiator: this.initiatorJid,\n                        sid: this.sid\n                    })\n                    .c('reason')\n                    .c((options && options.reason) || 'success')\n                    .up();\n\n            if (options && options.reasonDescription) {\n                sessionTerminate\n                    .c('text')\n                    .t(options.reasonDescription)\n                    .up()\n                    .up();\n            } else {\n                sessionTerminate.up();\n            }\n\n            this._bridgeSessionId\n                && sessionTerminate.c(\n                    'bridge-session', {\n                        xmlns: 'http://jitsi.org/protocol/focus',\n                        id: this._bridgeSessionId,\n                        restart: options && options.requestRestart === true\n                    }).up();\n\n            logger.info(`${this} Sending session-terminate`);\n            logger.debug(sessionTerminate.tree());\n\n            this.connection.sendIQ(\n                sessionTerminate,\n                success,\n                this.newJingleErrorHandler(sessionTerminate, failure),\n                IQ_TIMEOUT);\n        } else {\n            logger.info(`${this} Skipped sending session-terminate`);\n        }\n\n        // this should result in 'onTerminated' being called by strope.jingle.js\n        this.connection.jingle.terminate(this.sid);\n    }\n\n    /**\n     *\n     * @param reasonCondition\n     * @param reasonText\n     */\n    onTerminated(reasonCondition, reasonText) {\n        // Do something with reason and reasonCondition when we start to care\n        // this.reasonCondition = reasonCondition;\n        // this.reasonText = reasonText;\n        logger.info(`${this} Session terminated`, reasonCondition, reasonText);\n\n        this._xmppListeners.forEach(removeListener => removeListener());\n        this._xmppListeners = [];\n\n        if (this._removeSenderVideoConstraintsChangeListener) {\n            this._removeSenderVideoConstraintsChangeListener();\n        }\n\n        this.close();\n    }\n\n    /**\n     * Handles XMPP connection state changes.\n     *\n     * @param {XmppConnection.Status} status - The new status.\n     */\n    onXmppStatusChanged(status) {\n        if (status === XmppConnection.Status.CONNECTED && this._cachedOldLocalSdp) {\n            logger.info(`${this} Sending SSRC update on reconnect`);\n            this.notifyMySSRCUpdate(\n                this._cachedOldLocalSdp,\n                this._cachedNewLocalSdp);\n        }\n    }\n\n    /**\n     * Parse the information from the xml sourceAddElem and translate it\n     *  into sdp lines\n     * @param {jquery xml element} sourceAddElem the source-add\n     *  element from jingle\n     * @param {SDP object} currentRemoteSdp the current remote\n     *  sdp (as of this new source-add)\n     * @returns {list} a list of SDP line strings that should\n     *  be added to the remote SDP\n     */\n    _parseSsrcInfoFromSourceAdd(sourceAddElem, currentRemoteSdp) {\n        const addSsrcInfo = [];\n        const self = this;\n\n        $(sourceAddElem).each((i1, content) => {\n            const name = $(content).attr('name');\n            let lines = '';\n\n            $(content)\n                .find('ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n                .each(function() {\n                    // eslint-disable-next-line no-invalid-this\n                    const semantics = this.getAttribute('semantics');\n                    const ssrcs\n                        = $(this) // eslint-disable-line no-invalid-this\n                            .find('>source')\n                            .map(function() {\n                                // eslint-disable-next-line no-invalid-this\n                                return this.getAttribute('ssrc');\n                            })\n                            .get();\n\n                    if (ssrcs.length) {\n                        lines += `a=ssrc-group:${semantics} ${ssrcs.join(' ')}\\r\\n`;\n                    }\n                });\n\n            // handles both >source and >description>source\n            const tmp\n                = $(content).find(\n                    'source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\n\n            /* eslint-disable no-invalid-this */\n            tmp.each(function() {\n                const ssrc = $(this).attr('ssrc');\n\n                if (currentRemoteSdp.containsSSRC(ssrc)) {\n\n                    // Do not print the warning for unified plan p2p case since ssrcs are never removed from the SDP.\n                    !(self.usesUnifiedPlan && self.isP2P)\n                        && logger.warn(`${self} Source-add request for existing SSRC: ${ssrc}`);\n\n                    return;\n                }\n\n                // eslint-disable-next-line newline-per-chained-call\n                $(this).find('>parameter').each(function() {\n                    lines += `a=ssrc:${ssrc} ${$(this).attr('name')}`;\n                    if ($(this).attr('value') && $(this).attr('value').length) {\n                        lines += `:${$(this).attr('value')}`;\n                    }\n                    lines += '\\r\\n';\n                });\n            });\n\n            /* eslint-enable no-invalid-this */\n            currentRemoteSdp.media.forEach((media, i2) => {\n                if (!SDPUtil.findLine(media, `a=mid:${name}`)) {\n                    return;\n                }\n                if (!addSsrcInfo[i2]) {\n                    addSsrcInfo[i2] = '';\n                }\n                addSsrcInfo[i2] += lines;\n            });\n        });\n\n        return addSsrcInfo;\n    }\n\n    /**\n     * Handles a Jingle source-add message for this Jingle session.\n     * @param elem An array of Jingle \"content\" elements.\n     */\n    addRemoteStream(elem) {\n        this._addOrRemoveRemoteStream(true /* add */, elem);\n    }\n\n    /**\n     * Handles a Jingle source-remove message for this Jingle session.\n     * @param elem An array of Jingle \"content\" elements.\n     */\n    removeRemoteStream(elem) {\n        this._addOrRemoveRemoteStream(false /* remove */, elem);\n    }\n\n    /**\n     * Handles the deletion of SSRCs associated with a remote user from the remote description when the user leaves.\n     *\n     * @param {string} id Endpoint id of the participant that has left the call.\n     * @returns {void}\n     */\n    removeRemoteStreamsOnLeave(id) {\n        const workFunction = finishCallback => {\n            const removeSsrcInfo = this.peerconnection.getRemoteSourceInfoByParticipant(id);\n\n            if (removeSsrcInfo.length) {\n                const oldLocalSdp = new SDP(this.peerconnection.localDescription.sdp);\n                const newRemoteSdp = this._processRemoteRemoveSource(removeSsrcInfo);\n\n                this._renegotiate(newRemoteSdp.raw)\n                    .then(() => {\n                        const newLocalSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n                        this.notifyMySSRCUpdate(oldLocalSdp, newLocalSDP);\n                        finishCallback();\n                    })\n                    .catch(err => finishCallback(err));\n            } else {\n                finishCallback();\n            }\n        };\n\n        logger.debug(`${this} Queued removeRemoteStreamsOnLeave task for participant ${id}`);\n\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error(`${this} removeRemoteStreamsOnLeave error:`, error);\n                } else {\n                    logger.info(`${this} removeRemoteStreamsOnLeave done!`);\n                }\n            });\n    }\n\n    /**\n     * Handles either Jingle 'source-add' or 'source-remove' message for this\n     * Jingle session.\n     * @param {boolean} isAdd <tt>true</tt> for 'source-add' or <tt>false</tt>\n     * otherwise.\n     * @param {Array<Element>} elem an array of Jingle \"content\" elements.\n     * @private\n     */\n    _addOrRemoveRemoteStream(isAdd, elem) {\n        const logPrefix = isAdd ? 'addRemoteStream' : 'removeRemoteStream';\n\n        if (isAdd) {\n            this.readSsrcInfo(elem);\n        }\n\n        const workFunction = finishedCallback => {\n            if (!this.peerconnection.localDescription\n                || !this.peerconnection.localDescription.sdp) {\n                const errMsg = `${logPrefix} - localDescription not ready yet`;\n\n                logger.error(errMsg);\n                finishedCallback(errMsg);\n\n                return;\n            }\n\n            logger.log(`${this} Processing ${logPrefix}`);\n\n            const oldLocalSdp = new SDP(this.peerconnection.localDescription.sdp);\n            const sdp = new SDP(this.peerconnection.remoteDescription.sdp);\n            const addOrRemoveSsrcInfo\n                = isAdd\n                    ? this._parseSsrcInfoFromSourceAdd(elem, sdp)\n                    : this._parseSsrcInfoFromSourceRemove(elem, sdp);\n            const newRemoteSdp\n                = isAdd\n                    ? this._processRemoteAddSource(addOrRemoveSsrcInfo)\n                    : this._processRemoteRemoveSource(addOrRemoveSsrcInfo);\n\n            // Add a workaround for a bug in Chrome (unified plan) for p2p connection. When the media direction on\n            // the transceiver goes from \"inactive\" (both users join muted) to \"recvonly\" (peer unmutes), the browser\n            // doesn't seem to create a decoder if the signaling state changes from \"have-local-offer\" to \"stable\".\n            // Therefore, initiate a responder renegotiate even if the endpoint is the offerer to workaround this issue.\n            // TODO - open a chrome bug and update the comments.\n            const remoteDescription = new RTCSessionDescription({\n                type: 'offer',\n                sdp: newRemoteSdp.raw\n            });\n            const promise = isAdd && this.usesUnifiedPlan && this.isP2P && browser.isChromiumBased()\n                ? this._responderRenegotiate(remoteDescription)\n                : this._renegotiate(newRemoteSdp.raw);\n\n            promise.then(() => {\n                const newLocalSdp = new SDP(this.peerconnection.localDescription.sdp);\n\n                logger.log(`${this} ${logPrefix} - OK`);\n                this.notifyMySSRCUpdate(oldLocalSdp, newLocalSdp);\n                finishedCallback();\n            }, error => {\n                logger.error(`${this} ${logPrefix} failed:`, error);\n                finishedCallback(error);\n            });\n        };\n\n        logger.debug(`${this} Queued ${logPrefix} task`);\n\n        // Queue and execute\n        this.modificationQueue.push(workFunction);\n    }\n\n    /**\n     * Takes in a jingle offer iq, returns the new sdp offer\n     * @param {jquery xml element} offerIq the incoming offer\n     * @returns {SDP object} the jingle offer translated to SDP\n     */\n    _processNewJingleOfferIq(offerIq) {\n        const remoteSdp = new SDP('');\n\n        if (this.webrtcIceTcpDisable) {\n            remoteSdp.removeTcpCandidates = true;\n        }\n        if (this.webrtcIceUdpDisable) {\n            remoteSdp.removeUdpCandidates = true;\n        }\n        if (this.failICE) {\n            remoteSdp.failICE = true;\n        }\n\n        remoteSdp.fromJingle(offerIq);\n        this.readSsrcInfo($(offerIq).find('>content'));\n\n        return remoteSdp;\n    }\n\n    /**\n     * Remove the given ssrc lines from the current remote sdp\n     * @param {list} removeSsrcInfo a list of SDP line strings that\n     *  should be removed from the remote SDP\n     * @returns type {SDP Object} the new remote SDP (after removing the lines\n     *  in removeSsrcInfo\n     */\n    _processRemoteRemoveSource(removeSsrcInfo) {\n        const remoteSdp = this.usesUnifiedPlan\n            ? new SDP(this.peerconnection.peerconnection.remoteDescription.sdp)\n            : new SDP(this.peerconnection.remoteDescription.sdp);\n\n        removeSsrcInfo.forEach((lines, idx) => {\n            // eslint-disable-next-line no-param-reassign\n            lines = lines.split('\\r\\n');\n            lines.pop(); // remove empty last element;\n            if (this.usesUnifiedPlan) {\n                lines.forEach(line => {\n                    const mid = remoteSdp.media.findIndex(mLine => mLine.includes(line));\n\n                    if (mid > -1) {\n                        remoteSdp.media[mid] = remoteSdp.media[mid].replace(`${line}\\r\\n`, '');\n                        if (this.isP2P) {\n                            const mediaType = SDPUtil.parseMLine(remoteSdp.media[mid].split('\\r\\n')[0])?.media;\n                            const desiredDirection = this.peerconnection.getDesiredMediaDirection(mediaType, false);\n\n                            [ MediaDirection.SENDRECV, MediaDirection.SENDONLY ].forEach(direction => {\n                                remoteSdp.media[mid] = remoteSdp.media[mid]\n                                    .replace(`a=${direction}`, `a=${desiredDirection}`);\n                            });\n                        } else {\n                            // Jvb connections will have direction set to 'sendonly' for the remote sources.\n                            remoteSdp.media[mid] = remoteSdp.media[mid]\n                                .replace(`a=${MediaDirection.SENDONLY}`, `a=${MediaDirection.INACTIVE}`);\n                        }\n                    }\n                });\n            } else {\n                lines.forEach(line => {\n                    remoteSdp.media[idx] = remoteSdp.media[idx].replace(`${line}\\r\\n`, '');\n                });\n            }\n        });\n        remoteSdp.raw = remoteSdp.session + remoteSdp.media.join('');\n\n        return remoteSdp;\n    }\n\n    /**\n     * Add the given ssrc lines to the current remote sdp\n     * @param {list} addSsrcInfo a list of SDP line strings that\n     *  should be added to the remote SDP\n     * @returns type {SDP Object} the new remote SDP (after removing the lines\n     *  in removeSsrcInfo\n     */\n    _processRemoteAddSource(addSsrcInfo) {\n        const remoteSdp = new SDP(this.peerconnection.remoteDescription.sdp);\n\n        addSsrcInfo.forEach((lines, idx) => {\n            remoteSdp.media[idx] += lines;\n\n            // Make sure to change the direction to 'sendrecv/sendonly' only for p2p connections. For jvb connections,\n            // a new m-line is added for the new remote sources.\n            if (this.isP2P && this.usesUnifiedPlan) {\n                const mediaType = SDPUtil.parseMLine(remoteSdp.media[idx].split('\\r\\n')[0])?.media;\n                const desiredDirection = this.peerconnection.getDesiredMediaDirection(mediaType, true);\n\n                [ MediaDirection.RECVONLY, MediaDirection.INACTIVE ].forEach(direction => {\n                    remoteSdp.media[idx] = remoteSdp.media[idx]\n                        .replace(`a=${direction}`, `a=${desiredDirection}`);\n                });\n            }\n        });\n        remoteSdp.raw = remoteSdp.session + remoteSdp.media.join('');\n\n        return remoteSdp;\n    }\n\n    /**\n     * Do a new o/a flow using the existing remote description\n     * @param {string} [optionalRemoteSdp] optional, raw remote sdp\n     *  to use.  If not provided, the remote sdp from the\n     *  peerconnection will be used\n     * @returns {Promise} promise which resolves when the\n     *  o/a flow is complete with no arguments or\n     *  rejects with an error {string}\n     */\n    _renegotiate(optionalRemoteSdp) {\n        if (this.peerconnection.signalingState === 'closed') {\n            const error = new Error('Attempted to renegotiate in state closed');\n\n            this.room.eventEmitter.emit(XMPPEvents.RENEGOTIATION_FAILED, error, this);\n\n            return Promise.reject(error);\n        }\n\n        const remoteSdp\n            = optionalRemoteSdp || this.peerconnection.remoteDescription.sdp;\n\n        if (!remoteSdp) {\n            const error = new Error(`Can not renegotiate without remote description, current state: ${this.state}`);\n\n            this.room.eventEmitter.emit(XMPPEvents.RENEGOTIATION_FAILED, error, this);\n\n            return Promise.reject(error);\n        }\n\n        const remoteDescription = new RTCSessionDescription({\n            type: this.isInitiator ? 'answer' : 'offer',\n            sdp: remoteSdp\n        });\n\n        if (this.isInitiator) {\n            return this._initiatorRenegotiate(remoteDescription);\n        }\n\n        return this._responderRenegotiate(remoteDescription);\n    }\n\n    /**\n     * Renegotiate cycle implementation for the responder case.\n     * @param {object} remoteDescription the SDP object as defined by the WebRTC\n     * which will be used as remote description in the cycle.\n     * @private\n     */\n    _responderRenegotiate(remoteDescription) {\n        logger.debug(`${this} Renegotiate: setting remote description`);\n\n        return this.peerconnection.setRemoteDescription(remoteDescription)\n            .then(() => {\n                logger.debug(`${this} Renegotiate: creating answer`);\n\n                return this.peerconnection.createAnswer(this.mediaConstraints)\n                    .then(answer => {\n                        logger.debug(`${this} Renegotiate: setting local description`);\n\n                        return this.peerconnection.setLocalDescription(answer);\n                    });\n            });\n    }\n\n    /**\n     * Renegotiate cycle implementation for the initiator's case.\n     * @param {object} remoteDescription the SDP object as defined by the WebRTC\n     * which will be used as remote description in the cycle.\n     * @private\n     */\n    _initiatorRenegotiate(remoteDescription) {\n        logger.debug(`${this} Renegotiate: creating offer`);\n\n        return this.peerconnection.createOffer(this.mediaConstraints)\n            .then(offer => {\n                logger.debug(`${this} Renegotiate: setting local description`);\n\n                return this.peerconnection.setLocalDescription(offer)\n                    .then(() => {\n                        logger.debug(`${this} Renegotiate: setting remote description`);\n\n                        // eslint-disable-next-line max-len\n                        return this.peerconnection.setRemoteDescription(remoteDescription);\n                    });\n            });\n    }\n\n    /**\n     * Adds a new track to the peerconnection. This method needs to be called only when a secondary JitsiLocalTrack is\n     * being added to the peerconnection for the first time.\n     *\n     * @param {JitsiLocalTrack} localTrack track to be added to the peer connection.\n     * @returns {Promise<void>} that resolves when the track is successfully added to the peerconnection, rejected\n     * otherwise.\n     */\n    addTrack(localTrack) {\n        if (!FeatureFlags.isMultiStreamSupportEnabled() || localTrack.type !== MediaType.VIDEO) {\n            return Promise.reject(new Error('Multiple tracks of a given media type are not supported'));\n        }\n\n        const workFunction = finishedCallback => {\n            const remoteSdp = new SDP(this.peerconnection.peerconnection.remoteDescription.sdp);\n\n            // Add a new transceiver by adding a new mline in the remote description.\n            remoteSdp.addMlineForNewLocalSource(MediaType.VIDEO);\n\n            // Always initiate a responder renegotiate since the new m-line is added to remote SDP.\n            const remoteDescription = new RTCSessionDescription({\n                type: 'offer',\n                sdp: remoteSdp.raw\n            });\n\n            this._responderRenegotiate(remoteDescription)\n                .then(() => finishedCallback(), error => finishedCallback(error));\n        };\n\n        return new Promise((resolve, reject) => {\n            logger.debug(`${this} Queued renegotiation after addTrack`);\n\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        logger.error(`${this} renegotiation after addTrack error`, error);\n                        reject(error);\n                    } else {\n                        logger.debug(`${this} renegotiation after addTrack executed - OK`);\n\n                        // Replace the track on the newly generated transceiver.\n                        return this.replaceTrack(null, localTrack)\n                            .then(() => resolve())\n                            .catch(() => reject());\n                    }\n                });\n        });\n    }\n\n    /**\n     * Replaces <tt>oldTrack</tt> with <tt>newTrack</tt> and performs a single\n     * offer/answer cycle after both operations are done. Either\n     * <tt>oldTrack</tt> or <tt>newTrack</tt> can be null; replacing a valid\n     * <tt>oldTrack</tt> with a null <tt>newTrack</tt> effectively just removes\n     * <tt>oldTrack</tt>\n     * @param {JitsiLocalTrack|null} oldTrack the current track in use to be\n     * replaced\n     * @param {JitsiLocalTrack|null} newTrack the new track to use\n     * @returns {Promise} which resolves once the replacement is complete\n     *  with no arguments or rejects with an error {string}\n     */\n    replaceTrack(oldTrack, newTrack) {\n        const workFunction = finishedCallback => {\n            logger.debug(`${this} replaceTrack worker started. oldTrack = ${oldTrack}, newTrack = ${newTrack}`);\n\n            const oldLocalSdp = this.peerconnection.localDescription.sdp;\n\n            if (!this.usesUnifiedPlan) {\n                // NOTE the code below assumes that no more than 1 video track\n                // can be added to the peer connection.\n                // Transition from camera to desktop share\n                // or transition from one camera source to another.\n                if (this.peerconnection.options.capScreenshareBitrate\n                    && oldTrack && newTrack && newTrack.isVideoTrack()) {\n                    // Clearing current primary SSRC will make\n                    // the SdpConsistency generate a new one which will result\n                    // with:\n                    // 1. source-remove for the old video stream.\n                    // 2. source-add for the new video stream.\n                    this.peerconnection.clearRecvonlySsrc();\n                }\n\n                // Transition from no video to video (unmute).\n                if (!oldTrack && newTrack && newTrack.isVideoTrack()) {\n                    // Clearing current primary SSRC will make\n                    // the SdpConsistency generate a new one which will result\n                    // with:\n                    // 1. source-remove for the recvonly\n                    // 2. source-add for the new video stream\n                    this.peerconnection.clearRecvonlySsrc();\n\n                // Transition from video to no video\n                } else if (oldTrack && oldTrack.isVideoTrack() && !newTrack) {\n                    // Clearing current primary SSRC and generating the recvonly\n                    // will result in:\n                    // 1. source-remove for the old video stream\n                    // 2. source-add for the recvonly stream\n                    this.peerconnection.clearRecvonlySsrc();\n                    this.peerconnection.generateRecvonlySsrc();\n                }\n            }\n\n            this.peerconnection.replaceTrack(oldTrack, newTrack)\n                .then(shouldRenegotiate => {\n                    let promise = Promise.resolve();\n\n                    logger.debug(`${this} TPC.replaceTrack finished. shouldRenegotiate = ${\n                        shouldRenegotiate}, JingleSessionState = ${this.state}`);\n\n                    if (shouldRenegotiate\n                        && (oldTrack || newTrack)\n                        && this.state === JingleSessionState.ACTIVE) {\n                        promise = this._renegotiate().then(() => {\n                            const newLocalSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n                            this.notifyMySSRCUpdate(new SDP(oldLocalSdp), newLocalSDP);\n                        });\n                    }\n\n                    return promise.then(() => {\n                        if (newTrack?.isVideoTrack()) {\n                            logger.debug(`${this} replaceTrack worker: configuring video stream`);\n\n                            // Configure the video encodings after the track is replaced.\n                            return this.peerconnection.configureSenderVideoEncodings(newTrack);\n                        }\n                    });\n                })\n                .then(() => finishedCallback(), error => finishedCallback(error));\n        };\n\n        return new Promise((resolve, reject) => {\n            logger.debug(`${this} Queued replaceTrack task. Old track = ${oldTrack}, new track = ${newTrack}`);\n\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        logger.error(`${this} Replace track error:`, error);\n                        reject(error);\n                    } else {\n                        logger.info(`${this}  Replace track done!`);\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Parse the information from the xml sourceRemoveElem and translate it\n     *  into sdp lines\n     * @param {jquery xml element} sourceRemoveElem the source-remove\n     *  element from jingle\n     * @param {SDP object} currentRemoteSdp the current remote\n     *  sdp (as of this new source-remove)\n     * @returns {list} a list of SDP line strings that should\n     *  be removed from the remote SDP\n     */\n    _parseSsrcInfoFromSourceRemove(sourceRemoveElem, currentRemoteSdp) {\n        const removeSsrcInfo = [];\n\n        $(sourceRemoveElem).each((i1, content) => {\n            const name = $(content).attr('name');\n            let lines = '';\n\n            $(content)\n                .find('ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n                .each(function() {\n                    /* eslint-disable no-invalid-this */\n                    const semantics = this.getAttribute('semantics');\n                    const ssrcs\n                        = $(this)\n                            .find('>source')\n                            .map(function() {\n                                return this.getAttribute('ssrc');\n                            })\n                            .get();\n\n                    if (ssrcs.length) {\n                        lines\n                            += `a=ssrc-group:${semantics} ${\n                                ssrcs.join(' ')}\\r\\n`;\n                    }\n\n                    /* eslint-enable no-invalid-this */\n                });\n            const ssrcs = [];\n\n            // handles both >source and >description>source versions\n            const tmp\n                = $(content).find(\n                    'source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\n\n            tmp.each(function() {\n                // eslint-disable-next-line no-invalid-this\n                const ssrc = $(this).attr('ssrc');\n\n                ssrcs.push(ssrc);\n            });\n            currentRemoteSdp.media.forEach((media, i2) => {\n                if (!SDPUtil.findLine(media, `a=mid:${name}`)) {\n                    return;\n                }\n                if (!removeSsrcInfo[i2]) {\n                    removeSsrcInfo[i2] = '';\n                }\n                ssrcs.forEach(ssrc => {\n                    const ssrcLines\n                        = SDPUtil.findLines(media, `a=ssrc:${ssrc}`);\n\n                    if (ssrcLines.length) {\n                        removeSsrcInfo[i2] += `${ssrcLines.join('\\r\\n')}\\r\\n`;\n                    }\n                });\n                removeSsrcInfo[i2] += lines;\n            });\n        });\n\n        return removeSsrcInfo;\n    }\n\n    /**\n     * Will print an error if there is any difference, between the SSRCs given\n     * in the <tt>oldSDP</tt> and the ones currently described in\n     * the peerconnection's local description.\n     * @param {string} operationName the operation's name which will be printed\n     * in the error message.\n     * @param {SDP} oldSDP the old local SDP which will be compared with\n     * the current one.\n     * @return {boolean} <tt>true</tt> if there was any change or <tt>false</tt>\n     * otherwise.\n     * @private\n     */\n    _verifyNoSSRCChanged(operationName, oldSDP) {\n        const currentLocalSDP\n            = new SDP(this.peerconnection.localDescription.sdp);\n        let sdpDiff = new SDPDiffer(oldSDP, currentLocalSDP);\n        const addedMedia = sdpDiff.getNewMedia();\n\n        if (Object.keys(addedMedia).length) {\n            logger.error(`${this} - some SSRC were added on ${operationName}`, addedMedia);\n\n            return false;\n        }\n\n        sdpDiff = new SDPDiffer(currentLocalSDP, oldSDP);\n        const removedMedia = sdpDiff.getNewMedia();\n\n        if (Object.keys(removedMedia).length) {\n            logger.error(`${this} - some SSRCs were removed on ${operationName}`, removedMedia);\n\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Adds local track back to this session, as part of the unmute operation.\n     * @param {JitsiLocalTrack} track\n     * @return {Promise} a promise that will resolve once the local track is\n     * added back to this session and renegotiation succeeds. Will be rejected\n     * with a <tt>string</tt> that provides some error details in case something\n     * goes wrong.\n     */\n    addTrackAsUnmute(track) {\n        return this._addRemoveTrackAsMuteUnmute(\n            false /* add as unmute */, track)\n            .then(() => {\n                // Configure the video encodings after the track is unmuted. If the user joins the call muted and\n                // unmutes it the first time, all the parameters need to be configured.\n                if (track.isVideoTrack()) {\n                    return this.peerconnection.configureSenderVideoEncodings(track);\n                }\n            });\n    }\n\n    /**\n     * Remove local track as part of the mute operation.\n     * @param {JitsiLocalTrack} track the local track to be removed\n     * @return {Promise} a promise which will be resolved once the local track\n     * is removed from this session and the renegotiation is performed.\n     * The promise will be rejected with a <tt>string</tt> that the describes\n     * the error if anything goes wrong.\n     */\n    removeTrackAsMute(track) {\n        return this._addRemoveTrackAsMuteUnmute(\n            true /* remove as mute */, track);\n    }\n\n    /**\n     * See {@link addTrackAsUnmute} and {@link removeTrackAsMute}.\n     * @param {boolean} isMute <tt>true</tt> for \"remove as mute\" or\n     * <tt>false</tt> for \"add as unmute\".\n     * @param {JitsiLocalTrack} track the track that will be added/removed\n     * @private\n     */\n    _addRemoveTrackAsMuteUnmute(isMute, track) {\n        if (!track) {\n            return Promise.reject('invalid \"track\" argument value');\n        }\n        const operationName = isMute ? 'removeTrackMute' : 'addTrackUnmute';\n        const workFunction = finishedCallback => {\n            const tpc = this.peerconnection;\n\n            if (!tpc) {\n                finishedCallback(\n                    `Error:  tried ${operationName} track with no active peer`\n                        + 'connection');\n\n                return;\n            }\n            const oldLocalSDP = tpc.localDescription.sdp;\n            const operationPromise\n                = isMute\n                    ? tpc.removeTrackMute(track)\n                    : tpc.addTrackUnmute(track);\n\n            operationPromise\n                .then(shouldRenegotiate => {\n                    if (shouldRenegotiate && oldLocalSDP && tpc.remoteDescription.sdp) {\n                        this._renegotiate()\n                            .then(() => {\n                                // The results are ignored, as this check failure is not enough to fail the whole\n                                // operation. It will log an error inside for plan-b.\n                                !this.usesUnifiedPlan && this._verifyNoSSRCChanged(operationName, new SDP(oldLocalSDP));\n                                const newLocalSdp = tpc.localDescription.sdp;\n\n                                // Signal the ssrc if an unmute operation results in a new ssrc being generated.\n                                this.notifyMySSRCUpdate(new SDP(oldLocalSDP), new SDP(newLocalSdp));\n                                finishedCallback();\n                            });\n                    } else {\n                        finishedCallback();\n                    }\n                },\n                finishedCallback /* will be called with an error */);\n        };\n\n        logger.debug(`${this} Queued ${operationName} task`);\n\n        return new Promise((resolve, reject) => {\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        logger.error(`${this} ${operationName} failed`);\n                        reject(error);\n                    } else {\n                        logger.debug(`${this} ${operationName} done`);\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Resumes or suspends media transfer over the underlying peer connection.\n     * @param {boolean} audioActive <tt>true</tt> to enable audio media\n     * transfer or <tt>false</tt> to suspend audio media transmission.\n     * @param {boolean} videoActive <tt>true</tt> to enable video media\n     * transfer or <tt>false</tt> to suspend video media transmission.\n     * @return {Promise} a <tt>Promise</tt> which will resolve once\n     * the operation is done. It will be rejected with an error description as\n     * a string in case anything goes wrong.\n     */\n    setMediaTransferActive(audioActive, videoActive) {\n        if (!this.peerconnection) {\n            return Promise.reject(\n                'Can not modify transfer active state,'\n                    + ' before \"initialize\" is called');\n        }\n\n        const logAudioStr = audioActive ? 'audio active' : 'audio inactive';\n        const logVideoStr = videoActive ? 'video active' : 'video inactive';\n\n        logger.info(`${this} Queued make ${logVideoStr}, ${logAudioStr} task`);\n\n        const workFunction = finishedCallback => {\n            const isSessionActive = this.state === JingleSessionState.ACTIVE;\n\n            // Because the value is modified on the queue it's impossible to\n            // check it's final value reliably prior to submitting the task.\n            // The rule here is that the last submitted state counts.\n            // Check the values here to avoid unnecessary renegotiation cycle.\n            const audioActiveChanged\n                = this.peerconnection.setAudioTransferActive(audioActive);\n\n            if (this._localVideoActive !== videoActive) {\n                this._localVideoActive = videoActive;\n\n                // Do only for P2P - Jicofo will reply with 'bad-request'\n                // We don't want to send 'content-modify', before the initial\n                // O/A (state === JingleSessionState.ACTIVE), because that will\n                // mess up video media direction in the remote SDP.\n                // 'content-modify' when processed only affects the media\n                // direction in the local SDP. We're doing that, because setting\n                // 'inactive' on video media in remote SDP will mess up our SDP\n                // translation chain (simulcast, RTX, video mute etc.).\n                if (this.isP2P && isSessionActive) {\n                    this.sendContentModify();\n                }\n            }\n\n            const pcVideoActiveChanged\n                = this.peerconnection.setVideoTransferActive(\n                    this._localVideoActive && this._remoteVideoActive);\n\n            // Will do the sRD/sLD cycle to update SDPs and adjust the media\n            // direction\n            if (isSessionActive\n                    && (audioActiveChanged || pcVideoActiveChanged)) {\n                this._renegotiate()\n                    .then(\n                        finishedCallback,\n                        finishedCallback /* will be called with an error */);\n            } else {\n                finishedCallback();\n            }\n        };\n\n        return new Promise((resolve, reject) => {\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        logger.error(`${this} Make ${logVideoStr}, ${logAudioStr} task failed!`);\n                        reject(error);\n                    } else {\n                        logger.debug(`${this} Make ${logVideoStr}, ${logAudioStr} task done!`);\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Will put and execute on the queue a session modify task. Currently it\n     * only checks the senders attribute of the video content in order to figure\n     * out if the remote peer has video in the inactive state (stored locally\n     * in {@link _remoteVideoActive} - see field description for more info).\n     * @param {jQuery} jingleContents jQuery selector pointing to the jingle\n     * element of the session modify IQ.\n     * @see {@link _remoteVideoActive}\n     * @see {@link _localVideoActive}\n     */\n    modifyContents(jingleContents) {\n        const newVideoSenders\n            = JingleSessionPC.parseVideoSenders(jingleContents);\n        const newMaxFrameHeight\n            = JingleSessionPC.parseMaxFrameHeight(jingleContents);\n\n        // frame height is optional in our content-modify protocol\n        if (newMaxFrameHeight) {\n            logger.info(`${this} received remote max frame height: ${newMaxFrameHeight}`);\n            this.remoteRecvMaxFrameHeight = newMaxFrameHeight;\n            this.eventEmitter.emit(\n                MediaSessionEvents.REMOTE_VIDEO_CONSTRAINTS_CHANGED, this);\n        }\n\n        if (newVideoSenders === null) {\n            logger.error(\n                `${this} - failed to parse video \"senders\" attribute in`\n                    + '\"content-modify\" action');\n\n            return;\n        }\n\n        const workFunction = finishedCallback => {\n            if (this._assertNotEnded('content-modify')\n                    && this._modifyRemoteVideoActive(newVideoSenders)) {\n                // Will do the sRD/sLD cycle to update SDPs and adjust\n                // the media direction\n                this._renegotiate()\n                    .then(finishedCallback, finishedCallback /* (error) */);\n            } else {\n                finishedCallback();\n            }\n        };\n\n        logger.debug(`${this} queued \"content-modify\" task(video senders=\"${newVideoSenders}\")`);\n\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error(`${this} \"content-modify\" failed`, error);\n                } else {\n                    logger.debug(`${this} \"content-modify\" task(video senders=\"${newVideoSenders}\") done`);\n                }\n            });\n    }\n\n    /**\n     * Processes new value of remote video \"senders\" Jingle attribute and tries\n     * to apply it for {@link _remoteVideoActive}.\n     * @param {string} remoteVideoSenders the value of \"senders\" attribute of\n     * Jingle video content element advertised by remote peer.\n     * @return {boolean} <tt>true</tt> if the change affected state of\n     * the underlying peerconnection and renegotiation is required for\n     * the changes to take effect.\n     * @private\n     */\n    _modifyRemoteVideoActive(remoteVideoSenders) {\n        const isRemoteVideoActive\n            = remoteVideoSenders === 'both'\n                || (remoteVideoSenders === 'initiator' && this.isInitiator)\n                || (remoteVideoSenders === 'responder' && !this.isInitiator);\n\n        if (isRemoteVideoActive !== this._remoteVideoActive) {\n            logger.debug(`${this} new remote video active: ${isRemoteVideoActive}`);\n            this._remoteVideoActive = isRemoteVideoActive;\n        }\n\n        return this.peerconnection.setVideoTransferActive(\n            this._localVideoActive && this._remoteVideoActive);\n    }\n\n    /**\n     * Figures out added/removed ssrcs and send update IQs.\n     * @param oldSDP SDP object for old description.\n     * @param newSDP SDP object for new description.\n     */\n    notifyMySSRCUpdate(oldSDP, newSDP) {\n        if (this.state !== JingleSessionState.ACTIVE) {\n            logger.warn(`${this} Skipping SSRC update in '${this.state} ' state.`);\n\n            return;\n        }\n\n        if (!this.connection.connected) {\n            // The goal is to compare the oldest SDP with the latest one upon reconnect\n            if (!this._cachedOldLocalSdp) {\n                this._cachedOldLocalSdp = oldSDP;\n            }\n            this._cachedNewLocalSdp = newSDP;\n            logger.warn(`${this} Not sending SSRC update while the signaling is disconnected`);\n\n            return;\n        }\n\n        this._cachedOldLocalSdp = undefined;\n        this._cachedNewLocalSdp = undefined;\n\n        const getSignaledSourceInfo = sdpDiffer => {\n            const newMedia = sdpDiffer.getNewMedia();\n            let ssrcs = [];\n            let mediaType = null;\n\n            // It is assumed that sources are signaled one at a time.\n            Object.keys(newMedia).forEach(mediaIndex => {\n                const signaledSsrcs = Object.keys(newMedia[mediaIndex].ssrcs);\n\n                mediaType = newMedia[mediaIndex].mid;\n                if (signaledSsrcs?.length) {\n                    ssrcs = ssrcs.concat(signaledSsrcs);\n                }\n            });\n\n            return {\n                mediaType,\n                ssrcs\n            };\n        };\n\n        // send source-remove IQ.\n        let sdpDiffer = new SDPDiffer(newSDP, oldSDP);\n        const remove = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'source-remove',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            }\n            );\n        const removedAnySSRCs = sdpDiffer.toJingle(remove);\n\n        // context a common object for one run of ssrc update (source-add and source-remove) so we can match them if we\n        // need to\n        const ctx = {};\n\n        if (removedAnySSRCs) {\n            const sourceInfo = getSignaledSourceInfo(sdpDiffer);\n\n            // Log only the SSRCs instead of the full IQ.\n            logger.info(`${this} Sending source-remove for ${sourceInfo.mediaType} ssrcs=${sourceInfo.ssrcs}`);\n            this.connection.sendIQ(\n                remove,\n                () => {\n                    this.room.eventEmitter.emit(XMPPEvents.SOURCE_REMOVE, this, ctx);\n                },\n                this.newJingleErrorHandler(remove, error => {\n                    this.room.eventEmitter.emit(XMPPEvents.SOURCE_REMOVE_ERROR, this, error, ctx);\n                }),\n                IQ_TIMEOUT);\n        }\n\n        // send source-add IQ.\n        sdpDiffer = new SDPDiffer(oldSDP, newSDP);\n        const add = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'source-add',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            }\n            );\n\n        const containsNewSSRCs = sdpDiffer.toJingle(add);\n\n        if (containsNewSSRCs) {\n            const sourceInfo = getSignaledSourceInfo(sdpDiffer);\n\n            // Log only the SSRCs instead of the full IQ.\n            logger.info(`${this} Sending source-add for ${sourceInfo.mediaType} ssrcs=${sourceInfo.ssrcs}`);\n            this.connection.sendIQ(\n                add,\n                () => {\n                    this.room.eventEmitter.emit(XMPPEvents.SOURCE_ADD, this, ctx);\n                },\n                this.newJingleErrorHandler(add, error => {\n                    this.room.eventEmitter.emit(XMPPEvents.SOURCE_ADD_ERROR, this, error, sourceInfo.mediaType, ctx);\n                }),\n                IQ_TIMEOUT);\n        }\n    }\n\n    /**\n     * Method returns function(errorResponse) which is a callback to be passed\n     * to Strophe connection.sendIQ method. An 'error' structure is created that\n     * is passed as 1st argument to given <tt>failureCb</tt>. The format of this\n     * structure is as follows:\n     * {\n     *  code: {XMPP error response code}\n     *  reason: {the name of XMPP error reason element or 'timeout' if the\n      *          request has timed out within <tt>IQ_TIMEOUT</tt> milliseconds}\n     *  source: {request.tree() that provides original request}\n     *  session: {this JingleSessionPC.toString()}\n     * }\n     * @param request Strophe IQ instance which is the request to be dumped into\n     *        the error structure\n     * @param failureCb function(error) called when error response was returned\n     *        or when a timeout has occurred.\n     * @returns {function(this:JingleSessionPC)}\n     */\n    newJingleErrorHandler(request, failureCb) {\n        return errResponse => {\n\n            const error = {};\n\n            // Get XMPP error code and condition(reason)\n            const errorElSel = $(errResponse).find('error');\n\n            if (errorElSel.length) {\n                error.code = errorElSel.attr('code');\n                const errorReasonSel = $(errResponse).find('error :first');\n\n                if (errorReasonSel.length) {\n                    error.reason = errorReasonSel[0].tagName;\n                }\n\n                const errorMsgSel = errorElSel.find('>text');\n\n                if (errorMsgSel.length) {\n                    error.msg = errorMsgSel.text();\n                }\n            }\n\n            if (!errResponse) {\n                error.reason = 'timeout';\n            }\n\n            error.session = this.toString();\n\n            if (failureCb) {\n                failureCb(error);\n            } else if (this.state === JingleSessionState.ENDED\n                        && error.reason === 'item-not-found') {\n                // When remote peer decides to terminate the session, but it\n                // still have few messages on the queue for processing,\n                // it will first send us 'session-terminate' (we enter ENDED)\n                // and then follow with 'item-not-found' for the queued requests\n                // We don't want to have that logged on error level.\n                logger.debug(`${this} Jingle error: ${JSON.stringify(error)}`);\n            } else {\n                GlobalOnErrorHandler.callErrorHandler(\n                    new Error(\n                        `Jingle error: ${JSON.stringify(error)}`));\n            }\n        };\n    }\n\n    /**\n     * Returns the ice connection state for the peer connection.\n     * @returns the ice connection state for the peer connection.\n     */\n    getIceConnectionState() {\n        return this.peerconnection.getConnectionState();\n    }\n\n    /**\n     * Closes the peerconnection.\n     */\n    close() {\n        this.state = JingleSessionState.ENDED;\n        this.establishmentDuration = undefined;\n\n        if (this.peerconnection) {\n            this.peerconnection.onicecandidate = null;\n            this.peerconnection.oniceconnectionstatechange = null;\n            this.peerconnection.onnegotiationneeded = null;\n            this.peerconnection.onsignalingstatechange = null;\n        }\n\n        logger.debug(`${this} Clearing modificationQueue`);\n\n        // Remove any pending tasks from the queue\n        this.modificationQueue.clear();\n\n        logger.debug(`${this} Queued PC close task`);\n        this.modificationQueue.push(finishCallback => {\n            // do not try to close if already closed.\n            this.peerconnection && this.peerconnection.close();\n            finishCallback();\n            logger.debug(`${this} PC close task done!`);\n        });\n\n        logger.debug(`${this} Shutdown modificationQueue!`);\n\n        // No more tasks can go in after the close task\n        this.modificationQueue.shutdown();\n    }\n\n    /**\n     * Converts to string with minor summary.\n     * @return {string}\n     */\n    toString() {\n        return `JingleSessionPC[session=${this.isP2P ? 'P2P' : 'JVB'},initiator=${this.isInitiator},sid=${this.sid}]`;\n    }\n\n    /**\n     * If the A/B test for suspend video is disabled according to the room's\n     * configuration, returns undefined. Otherwise returns a boolean which\n     * indicates whether the suspend video option should be enabled or disabled.\n     * @param {JingleSessionPCOptions} options - The config options.\n     */\n    _abtestSuspendVideoEnabled({ abTesting }) {\n        if (!abTesting || !abTesting.enableSuspendVideoTest) {\n            return;\n        }\n\n        // We want the two participants in a P2P call to agree on the value of\n        // the \"suspend\" option. We use the JID of the initiator, because it is\n        // both randomly selected and agreed upon by both participants.\n        const jid = this._getInitiatorJid();\n\n        return integerHash(jid) % 2 === 0;\n    }\n}\n","/* global $ */\n\nimport { getLogger } from '@jitsi/logger';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport { MediaType } from '../../service/RTC/MediaType';\nimport {\n    ACTION_JINGLE_TR_RECEIVED,\n    ACTION_JINGLE_TR_SUCCESS,\n    createJingleEvent\n} from '../../service/statistics/AnalyticsEvents';\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport RandomUtil from '../util/RandomUtil';\n\nimport ConnectionPlugin from './ConnectionPlugin';\nimport { expandSourcesFromJson } from './JingleHelperFunctions';\nimport JingleSessionPC from './JingleSessionPC';\n\nconst logger = getLogger(__filename);\n\n// XXX Strophe is build around the idea of chaining function calls so allow long\n// function call chains.\n/* eslint-disable newline-per-chained-call */\n\n/**\n * Parses the transport XML element and returns the list of ICE candidates formatted as text.\n *\n * @param {*} transport Transport XML element extracted from the IQ.\n * @returns {Array<string>}\n */\nfunction _parseIceCandidates(transport) {\n    const candidates = $(transport).find('>candidate');\n    const parseCandidates = [];\n\n    // Extract the candidate information from the IQ.\n    candidates.each((_, candidate) => {\n        const attributes = candidate.attributes;\n        const candidateAttrs = [];\n\n        for (let i = 0; i < attributes.length; i++) {\n            const attr = attributes[i];\n\n            candidateAttrs.push(`${attr.name}: ${attr.value}`);\n        }\n        parseCandidates.push(candidateAttrs.join(' '));\n    });\n\n    return parseCandidates;\n}\n\n/**\n *\n */\nexport default class JingleConnectionPlugin extends ConnectionPlugin {\n    /**\n     * Creates new <tt>JingleConnectionPlugin</tt>\n     * @param {XMPP} xmpp\n     * @param {EventEmitter} eventEmitter\n     * @param {Object} iceConfig an object that holds the iceConfig to be passed\n     * to the p2p and the jvb <tt>PeerConnection</tt>.\n     */\n    constructor(xmpp, eventEmitter, iceConfig) {\n        super();\n        this.xmpp = xmpp;\n        this.eventEmitter = eventEmitter;\n        this.sessions = {};\n        this.jvbIceConfig = iceConfig.jvb;\n        this.p2pIceConfig = iceConfig.p2p;\n        this.mediaConstraints = {\n            offerToReceiveAudio: true,\n            offerToReceiveVideo: true\n        };\n    }\n\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n        this.connection.addHandler(this.onJingle.bind(this),\n            'urn:xmpp:jingle:1', 'iq', 'set', null, null);\n    }\n\n    /**\n     *\n     * @param iq\n     */\n    onJingle(iq) {\n        const sid = $(iq).find('jingle').attr('sid');\n        const action = $(iq).find('jingle').attr('action');\n        const fromJid = iq.getAttribute('from');\n\n        // send ack first\n        const ack = $iq({ type: 'result',\n            to: fromJid,\n            id: iq.getAttribute('id')\n        });\n\n        let sess = this.sessions[sid];\n\n        if (action !== 'session-initiate') {\n            if (!sess) {\n                ack.attrs({ type: 'error' });\n                ack.c('error', { type: 'cancel' })\n                    .c('item-not-found', {\n                        xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\n                    })\n                    .up()\n                    .c('unknown-session', {\n                        xmlns: 'urn:xmpp:jingle:errors:1'\n                    });\n                logger.warn(`invalid session id: ${sid}`);\n                logger.debug(iq);\n                this.connection.send(ack);\n\n                return true;\n            }\n\n            // local jid is not checked\n            if (fromJid !== sess.remoteJid) {\n                logger.warn(\n                    'jid mismatch for session id', sid, sess.remoteJid, iq);\n                ack.attrs({ type: 'error' });\n                ack.c('error', { type: 'cancel' })\n                    .c('item-not-found', {\n                        xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\n                    })\n                    .up()\n                    .c('unknown-session', {\n                        xmlns: 'urn:xmpp:jingle:errors:1'\n                    });\n                this.connection.send(ack);\n\n                return true;\n            }\n        } else if (sess !== undefined) {\n            // Existing session with same session id. This might be out-of-order\n            // if the sess.remoteJid is the same as from.\n            ack.attrs({ type: 'error' });\n            ack.c('error', { type: 'cancel' })\n                .c('service-unavailable', {\n                    xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\n                })\n                .up();\n            logger.warn('duplicate session id', sid, iq);\n            this.connection.send(ack);\n\n            return true;\n        }\n        const now = window.performance.now();\n\n        // FIXME that should work most of the time, but we'd have to\n        // think how secure it is to assume that user with \"focus\"\n        // nickname is Jicofo.\n        const isP2P = Strophe.getResourceFromJid(fromJid) !== 'focus';\n\n        // see http://xmpp.org/extensions/xep-0166.html#concepts-session\n\n        const jsonMessages = $(iq).find('jingle>json-message');\n\n        if (jsonMessages?.length) {\n            let audioVideoSsrcs;\n\n            logger.info(`Found a JSON-encoded element in ${action}, translating to standard Jingle.`);\n            for (let i = 0; i < jsonMessages.length; i++) {\n                // Currently there is always a single json-message in the IQ with the source information.\n                audioVideoSsrcs = expandSourcesFromJson(iq, jsonMessages[i]);\n            }\n\n            if (audioVideoSsrcs?.size) {\n                const logMessage = [];\n\n                for (const endpoint of audioVideoSsrcs.keys()) {\n                    logMessage.push(`${endpoint}:[${audioVideoSsrcs.get(endpoint)}]`);\n                }\n                logger.debug(`Received ${action} from ${fromJid} with sources=${logMessage.join(', ')}`);\n            }\n\n            // TODO: is there a way to remove the json-message elements once we've extracted the information?\n            // removeChild doesn't seem to work.\n        }\n\n        switch (action) {\n        case 'session-initiate': {\n            logger.log('(TIME) received session-initiate:\\t', now);\n            const startMuted = $(iq).find('jingle>startmuted');\n\n            isP2P && logger.debug(`Received ${action} from ${fromJid}`);\n            if (startMuted?.length) {\n                const audioMuted = startMuted.attr(MediaType.AUDIO);\n                const videoMuted = startMuted.attr(MediaType.VIDEO);\n\n                this.eventEmitter.emit(\n                    XMPPEvents.START_MUTED_FROM_FOCUS,\n                    audioMuted === 'true',\n                    videoMuted === 'true');\n            }\n            const pcConfig = isP2P ? this.p2pIceConfig : this.jvbIceConfig;\n\n            sess\n                = new JingleSessionPC(\n                    $(iq).find('jingle').attr('sid'),\n                    $(iq).attr('to'),\n                    fromJid,\n                    this.connection,\n                    this.mediaConstraints,\n\n                    // Makes a copy in order to prevent exception thrown on RN when either this.p2pIceConfig or\n                    // this.jvbIceConfig is modified and there's a PeerConnection instance holding a reference\n                    JSON.parse(JSON.stringify(pcConfig)),\n                    isP2P,\n                    /* initiator */ false);\n\n            this.sessions[sess.sid] = sess;\n            this.eventEmitter.emit(XMPPEvents.CALL_INCOMING, sess, $(iq).find('>jingle'), now);\n            break;\n        }\n        case 'session-accept': {\n            const ssrcs = [];\n            const contents = $(iq).find('jingle>content');\n\n            // Extract the SSRCs from the session-accept received from a p2p peer.\n            for (const content of contents) {\n                const ssrc = $(content).find('description').attr('ssrc');\n\n                ssrc && ssrcs.push(ssrc);\n            }\n            logger.debug(`Received ${action} from ${fromJid} with ssrcs=${ssrcs}`);\n            this.eventEmitter.emit(XMPPEvents.CALL_ACCEPTED, sess, $(iq).find('>jingle'));\n            break;\n        }\n        case 'content-modify': {\n            const height = $(iq).find('jingle>content[name=\"video\"]>max-frame-height');\n\n            logger.debug(`Received ${action} from ${fromJid} with a max-frame-height=${height?.text()}`);\n            sess.modifyContents($(iq).find('>jingle'));\n            break;\n        }\n        case 'transport-info': {\n            const candidates = _parseIceCandidates($(iq).find('jingle>content>transport'));\n\n            logger.debug(`Received ${action} from ${fromJid} for candidates=${candidates.join(', ')}`);\n            this.eventEmitter.emit(XMPPEvents.TRANSPORT_INFO, sess, $(iq).find('>jingle'));\n            break;\n        }\n        case 'session-terminate': {\n            logger.log('terminating...', sess.sid);\n            let reasonCondition = null;\n            let reasonText = null;\n\n            if ($(iq).find('>jingle>reason').length) {\n                reasonCondition\n                    = $(iq).find('>jingle>reason>:first')[0].tagName;\n                reasonText = $(iq).find('>jingle>reason>text').text();\n            }\n            logger.debug(`Received ${action} from ${fromJid} disconnect reason=${reasonText}`);\n            this.terminate(sess.sid, reasonCondition, reasonText);\n            this.eventEmitter.emit(XMPPEvents.CALL_ENDED, sess, reasonCondition, reasonText);\n            break;\n        }\n        case 'transport-replace': {\n            logger.info('(TIME) Start transport replace:\\t', now);\n            const transport = $(iq).find('jingle>content>transport');\n            const candidates = _parseIceCandidates(transport);\n            const iceUfrag = $(transport).attr('ufrag');\n            const icePwd = $(transport).attr('pwd');\n            const dtlsFingerprint = $(transport).find('>fingerprint')?.text();\n\n            logger.debug(`Received ${action} from ${fromJid} with iceUfrag=${iceUfrag},`\n            + ` icePwd=${icePwd}, DTLS fingerprint=${dtlsFingerprint}, candidates=${candidates.join(', ')}`);\n\n            Statistics.sendAnalytics(createJingleEvent(\n                ACTION_JINGLE_TR_RECEIVED,\n                {\n                    p2p: isP2P,\n                    value: now\n                }));\n\n            sess.replaceTransport($(iq).find('>jingle'), () => {\n                const successTime = window.performance.now();\n\n                logger.info('(TIME) Transport replace success:\\t', successTime);\n                Statistics.sendAnalytics(createJingleEvent(\n                    ACTION_JINGLE_TR_SUCCESS,\n                    {\n                        p2p: isP2P,\n                        value: successTime\n                    }));\n            }, error => {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error('Transport replace failed', error);\n                sess.sendTransportReject();\n            });\n            break;\n        }\n        case 'source-add':\n            sess.addRemoteStream($(iq).find('>jingle>content'));\n            break;\n        case 'source-remove':\n            sess.removeRemoteStream($(iq).find('>jingle>content'));\n            break;\n        default:\n            logger.warn('jingle action not implemented', action);\n            ack.attrs({ type: 'error' });\n            ack.c('error', { type: 'cancel' })\n                .c('bad-request',\n                    { xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas' })\n                .up();\n            break;\n        }\n        this.connection.send(ack);\n\n        return true;\n    }\n\n    /**\n     * Creates new <tt>JingleSessionPC</tt> meant to be used in a direct P2P\n     * connection, configured as 'initiator'.\n     * @param {string} me our JID\n     * @param {string} peer remote participant's JID\n     * @return {JingleSessionPC}\n     */\n    newP2PJingleSession(me, peer) {\n        const sess\n            = new JingleSessionPC(\n                RandomUtil.randomHexString(12),\n                me,\n                peer,\n                this.connection,\n                this.mediaConstraints,\n                this.p2pIceConfig,\n                /* P2P */ true,\n                /* initiator */ true);\n\n        this.sessions[sess.sid] = sess;\n\n        return sess;\n    }\n\n    /**\n     *\n     * @param sid\n     * @param reasonCondition\n     * @param reasonText\n     */\n    terminate(sid, reasonCondition, reasonText) {\n        if (this.sessions.hasOwnProperty(sid)) {\n            if (this.sessions[sid].state !== 'ended') {\n                this.sessions[sid].onTerminated(reasonCondition, reasonText);\n            }\n            delete this.sessions[sid];\n        }\n    }\n\n    /**\n     *\n     */\n    getStunAndTurnCredentials() {\n        // get stun and turn configuration from server via xep-0215\n        // uses time-limited credentials as described in\n        // http://tools.ietf.org/html/draft-uberti-behave-turn-rest-00\n        //\n        // See https://modules.prosody.im/mod_turncredentials.html\n        // for a prosody module which implements this.\n        // Or the new implementation https://modules.prosody.im/mod_external_services which will be in prosody 0.12\n        //\n        // Currently, this doesn't work with updateIce and therefore credentials\n        // with a long validity have to be fetched before creating the\n        // peerconnection.\n        // TODO: implement refresh via updateIce as described in\n        //      https://code.google.com/p/webrtc/issues/detail?id=1650\n        this.connection.sendIQ(\n            $iq({ type: 'get',\n                to: this.xmpp.options.hosts.domain })\n                .c('services', { xmlns: 'urn:xmpp:extdisco:2' }),\n            v2Res => this.onReceiveStunAndTurnCredentials(v2Res),\n            () => {\n                logger.warn('getting turn credentials with extdisco:2 failed, trying extdisco:1');\n                this.connection.sendIQ(\n                    $iq({ type: 'get',\n                        to: this.xmpp.options.hosts.domain })\n                        .c('services', { xmlns: 'urn:xmpp:extdisco:1' }),\n                    v1Res => this.onReceiveStunAndTurnCredentials(v1Res),\n                    () => {\n                        logger.warn('getting turn credentials failed');\n                        logger.warn('is mod_turncredentials or similar installed and configured?');\n                    }\n                );\n            });\n    }\n\n    /**\n     * Parses response when querying for services using urn:xmpp:extdisco:1 or urn:xmpp:extdisco:2.\n     * Stores results in jvbIceConfig and p2pIceConfig.\n     * @param res The response iq.\n     * @return {boolean} Whether something was processed from the supplied message.\n     */\n    onReceiveStunAndTurnCredentials(res) {\n        const iceservers = [];\n\n        $(res).find('>services>service').each((idx, el) => {\n            // eslint-disable-next-line no-param-reassign\n            el = $(el);\n            const dict = {};\n            const type = el.attr('type');\n\n            switch (type) {\n            case 'stun':\n                dict.urls = `stun:${el.attr('host')}`;\n                if (el.attr('port')) {\n                    dict.urls += `:${el.attr('port')}`;\n                }\n                iceservers.push(dict);\n                break;\n            case 'turn':\n            case 'turns': {\n                dict.urls = `${type}:`;\n                dict.username = el.attr('username');\n                dict.urls += el.attr('host');\n                const port = el.attr('port');\n\n                if (port) {\n                    dict.urls += `:${el.attr('port')}`;\n                }\n                const transport = el.attr('transport');\n\n                if (transport && transport !== 'udp') {\n                    dict.urls += `?transport=${transport}`;\n                }\n\n                dict.credential = el.attr('password')\n                        || dict.credential;\n                iceservers.push(dict);\n                break;\n            }\n            }\n        });\n\n        const options = this.xmpp.options;\n\n        // Shuffle ICEServers for loadbalancing\n        for (let i = iceservers.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            const temp = iceservers[i];\n\n            iceservers[i] = iceservers[j];\n            iceservers[j] = temp;\n        }\n\n        let filter;\n\n        if (options.useTurnUdp) {\n            filter = s => s.urls.startsWith('turn');\n        } else {\n            // By default we filter out STUN and TURN/UDP and leave only TURN/TCP.\n            filter = s => s.urls.startsWith('turn') && (s.urls.indexOf('transport=tcp') >= 0);\n        }\n\n        this.jvbIceConfig.iceServers = iceservers.filter(filter);\n        this.p2pIceConfig.iceServers = iceservers;\n\n        return iceservers.length > 0;\n    }\n\n    /**\n     * Returns the data saved in 'updateLog' in a format to be logged.\n     */\n    getLog() {\n        const data = {};\n\n        Object.keys(this.sessions).forEach(sid => {\n            const session = this.sessions[sid];\n            const pc = session.peerconnection;\n\n            if (pc && pc.updateLog) {\n                // FIXME: should probably be a .dump call\n                data[`jingle_${sid}`] = {\n                    updateLog: pc.updateLog,\n                    stats: pc.stats,\n                    url: window.location.href\n                };\n            }\n        });\n\n        return data;\n    }\n}\n\n/* eslint-enable newline-per-chained-call */\n","import { Strophe } from 'strophe.js';\n\nimport ConnectionPlugin from './ConnectionPlugin';\n\n/**\n *  Logs raw stanzas and makes them available for download as JSON\n */\nclass StropheLogger extends ConnectionPlugin {\n    /**\n     *\n     */\n    constructor() {\n        super();\n        this.log = [];\n    }\n\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n        this.connection.rawInput = this.logIncoming.bind(this);\n        this.connection.rawOutput = this.logOutgoing.bind(this);\n    }\n\n    /**\n     *\n     * @param stanza\n     */\n    logIncoming(stanza) {\n        this.log.push([ new Date().getTime(), 'incoming', stanza ]);\n    }\n\n    /**\n     *\n     * @param stanza\n     */\n    logOutgoing(stanza) {\n        this.log.push([ new Date().getTime(), 'outgoing', stanza ]);\n    }\n}\n\n/**\n *\n */\nexport default function() {\n    Strophe.addConnectionPlugin('logger', new StropheLogger());\n}\n","/* global $ */\n\nimport { getLogger } from '@jitsi/logger';\nimport { $iq } from 'strophe.js';\n\nimport ConnectionPlugin from './ConnectionPlugin';\n\nconst logger = getLogger(__filename);\n\nconst RAYO_XMLNS = 'urn:xmpp:rayo:1';\n\n/**\n *\n */\nexport default class RayoConnectionPlugin extends ConnectionPlugin {\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n\n        this.connection.addHandler(\n            this.onRayo.bind(this), RAYO_XMLNS, 'iq', 'set', null, null);\n    }\n\n    /**\n     *\n     * @param iq\n     */\n    onRayo(iq) {\n        logger.info('Rayo IQ', iq);\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     *\n     * @param to\n     * @param from\n     * @param roomName\n     * @param roomPass\n     * @param focusMucJid\n     */\n    dial(to, from, roomName, roomPass, focusMucJid) {\n        return new Promise((resolve, reject) => {\n            if (!focusMucJid) {\n                reject(new Error('Internal error!'));\n\n                return;\n            }\n            const req = $iq({\n                type: 'set',\n                to: focusMucJid\n            });\n\n            req.c('dial', {\n                xmlns: RAYO_XMLNS,\n                to,\n                from\n            });\n            req.c('header', {\n                name: 'JvbRoomName',\n                value: roomName\n            }).up();\n\n            if (roomPass && roomPass.length) {\n                req.c('header', {\n                    name: 'JvbRoomPassword',\n                    value: roomPass\n                }).up();\n            }\n\n            this.connection.sendIQ(\n                req,\n                result => {\n                    logger.info('Dial result ', result);\n\n                    // eslint-disable-next-line newline-per-chained-call\n                    const resource = $(result).find('ref').attr('uri');\n\n                    this.callResource = resource.substr('xmpp:'.length);\n                    logger.info(`Received call resource: ${this.callResource}`);\n                    resolve();\n                },\n                error => {\n                    logger.info('Dial error ', error);\n                    reject(error);\n                });\n        });\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     *\n     */\n    hangup() {\n        return new Promise((resolve, reject) => {\n            if (!this.callResource) {\n                reject(new Error('No call in progress'));\n                logger.warn('No call in progress');\n\n                return;\n            }\n\n            const req = $iq({\n                type: 'set',\n                to: this.callResource\n            });\n\n            req.c('hangup', {\n                xmlns: RAYO_XMLNS\n            });\n\n            this.connection.sendIQ(req, result => {\n                logger.info('Hangup result ', result);\n                this.callResource = null;\n                resolve();\n            }, error => {\n                logger.info('Hangup error ', error);\n                this.callResource = null;\n                reject(new Error('Hangup error '));\n            });\n        });\n    }\n}\n","/**\n * Strophe logger implementation. Logs from level WARN and above.\n */\nimport { getLogger } from '@jitsi/logger';\nimport { Strophe } from 'strophe.js';\n\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nconst logger = getLogger(__filename);\n\n/**\n * This is the last HTTP error status captured from Strophe debug logs.\n * The purpose of storing it is to distinguish between the network and\n * infrastructure reason for connection being dropped (see connectionHandler in\n * xmpp.js). The value will be cleared (-1) if the subsequent request succeeds\n * which means that the failure could be transient.\n *\n * FIXME in the latest Strophe (not released on npm) there is API to handle\n * particular HTTP errors, but there is no way to learn if the subsequent\n * request succeeded in order to tell if the error was one time incident or if\n * it was the reason for dropping the connection by Strophe (the connection is\n * dropped after 5 subsequent failures). Ideally Strophe should provide more\n * details about the reason on why the connection stopped.\n *\n * @type {number}\n */\nlet lastErrorStatus = -1;\n\n/**\n * A regular expression used to catch Strophe's log message indicating that the\n * last BOSH request was successful. When there is such message seen the\n * {@link lastErrorStatus} will be set back to '-1'.\n * @type {RegExp}\n */\nconst resetLastErrorStatusRegExpr = /request id \\d+.\\d+ got 200/;\n\n/**\n * A regular expression used to capture the current value of the BOSH request\n * error status (HTTP error code or '0' or something else).\n * @type {RegExp}\n */\nconst lastErrorStatusRegExpr\n    = /request errored, status: (\\d+), number of errors: \\d+/;\n\n/**\n *\n */\nexport default function() {\n\n    Strophe.log = function(level, msg) {\n        // Our global handler reports uncaught errors to the stats which may\n        // interpret those as partial call failure.\n        // Strophe log entry about secondary request timeout does not mean that\n        // it's a final failure(the request will be restarted), so we lower it's\n        // level here to a warning.\n        logger.trace('Strophe', level, msg);\n        if (typeof msg === 'string'\n                && msg.indexOf('Request ') !== -1\n                && msg.indexOf('timed out (secondary), restarting') !== -1) {\n            // eslint-disable-next-line no-param-reassign\n            level = Strophe.LogLevel.WARN;\n        }\n\n        /* eslint-disable no-case-declarations */\n        switch (level) {\n        case Strophe.LogLevel.DEBUG:\n            // The log message which reports successful status is logged on\n            // Strophe's DEBUG level.\n            if (lastErrorStatus !== -1\n                    && resetLastErrorStatusRegExpr.test(msg)) {\n                logger.debug('Reset lastErrorStatus');\n                lastErrorStatus = -1;\n            }\n            break;\n        case Strophe.LogLevel.WARN:\n            logger.warn(`Strophe: ${msg}`);\n            const errStatusCapture = lastErrorStatusRegExpr.exec(msg);\n\n            if (errStatusCapture && errStatusCapture.length === 2) {\n                lastErrorStatus = parseInt(errStatusCapture[1], 10);\n                logger.debug(`lastErrorStatus set to: ${lastErrorStatus}`);\n            }\n            break;\n        case Strophe.LogLevel.ERROR:\n        case Strophe.LogLevel.FATAL:\n            // eslint-disable-next-line no-param-reassign\n            msg = `Strophe: ${msg}`;\n            GlobalOnErrorHandler.callErrorHandler(new Error(msg));\n            logger.error(msg);\n            break;\n        }\n\n        /* eslint-enable no-case-declarations */\n    };\n\n    /**\n     * Returns error status (HTTP error code) of the last BOSH request.\n     *\n     * @return {number} HTTP error code, '0' for unknown or \"god knows what\"\n     * (this is a hack).\n     */\n    Strophe.getLastErrorStatus = function() {\n        return lastErrorStatus;\n    };\n\n    Strophe.getStatusString = function(status) {\n        switch (status) {\n        case Strophe.Status.BINDREQUIRED:\n            return 'BINDREQUIRED';\n        case Strophe.Status.ERROR:\n            return 'ERROR';\n        case Strophe.Status.CONNECTING:\n            return 'CONNECTING';\n        case Strophe.Status.CONNFAIL:\n            return 'CONNFAIL';\n        case Strophe.Status.AUTHENTICATING:\n            return 'AUTHENTICATING';\n        case Strophe.Status.AUTHFAIL:\n            return 'AUTHFAIL';\n        case Strophe.Status.CONNECTED:\n            return 'CONNECTED';\n        case Strophe.Status.DISCONNECTED:\n            return 'DISCONNECTED';\n        case Strophe.Status.DISCONNECTING:\n            return 'DISCONNECTING';\n        case Strophe.Status.ATTACHED:\n            return 'ATTACHED';\n        default:\n            return 'unknown';\n        }\n    };\n}\n","/* global $ */\n\nimport { getLogger } from '@jitsi/logger';\nimport { $msg, Strophe } from 'strophe.js';\nimport 'strophejs-plugin-disco';\n\nimport * as JitsiConnectionErrors from '../../JitsiConnectionErrors';\nimport * as JitsiConnectionEvents from '../../JitsiConnectionEvents';\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\nimport browser from '../browser';\nimport { E2EEncryption } from '../e2ee/E2EEncryption';\nimport FeatureFlags from '../flags/FeatureFlags';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport Listenable from '../util/Listenable';\nimport RandomUtil from '../util/RandomUtil';\n\nimport Caps, { parseDiscoInfo } from './Caps';\nimport XmppConnection from './XmppConnection';\nimport MucConnectionPlugin from './strophe.emuc';\nimport JingleConnectionPlugin from './strophe.jingle';\nimport initStropheLogger from './strophe.logger';\nimport RayoConnectionPlugin from './strophe.rayo';\nimport initStropheUtil from './strophe.util';\n\nconst logger = getLogger(__filename);\n\n/**\n* Regex to extract exact error message on jwt error.\n*/\nconst FAILURE_REGEX = /<failure.*><not-allowed\\/><text>(.*)<\\/text><\\/failure>/gi;\n\n/**\n * Creates XMPP connection.\n *\n * @param {Object} options\n * @param {string} [options.token] - JWT token used for authentication(JWT authentication module must be enabled in\n * Prosody).\n * @param {string} options.serviceUrl - The service URL for XMPP connection.\n * @param {string} options.shard - The shard where XMPP connection initially landed.\n * @param {string} options.enableWebsocketResume - True to enable stream resumption.\n * @param {number} [options.websocketKeepAlive] - See {@link XmppConnection} constructor.\n * @param {number} [options.websocketKeepAliveUrl] - See {@link XmppConnection} constructor.\n * @param {Object} [options.xmppPing] - See {@link XmppConnection} constructor.\n * @returns {XmppConnection}\n */\nfunction createConnection({\n    enableWebsocketResume,\n    serviceUrl = '/http-bind',\n    shard,\n    token,\n    websocketKeepAlive,\n    websocketKeepAliveUrl,\n    xmppPing }) {\n\n    // Append token as URL param\n    if (token) {\n        // eslint-disable-next-line no-param-reassign\n        serviceUrl += `${serviceUrl.indexOf('?') === -1 ? '?' : '&'}token=${token}`;\n    }\n\n    return new XmppConnection({\n        enableWebsocketResume,\n        serviceUrl,\n        websocketKeepAlive,\n        websocketKeepAliveUrl,\n        xmppPing,\n        shard\n    });\n}\n\n/**\n * Initializes Strophe plugins that need to work with Strophe.Connection directly rather than the lib-jitsi-meet's\n * {@link XmppConnection} wrapper.\n *\n * @returns {void}\n */\nfunction initStropheNativePlugins() {\n    initStropheUtil();\n    initStropheLogger();\n}\n\n// FIXME: remove once we have a default config template. -saghul\n/**\n * A list of ice servers to use by default for P2P.\n */\nexport const DEFAULT_STUN_SERVERS = [\n    { urls: 'stun:meet-jit-si-turnrelay.jitsi.net:443' }\n];\n\n/**\n * The name of the field used to recognize a chat message as carrying a JSON\n * payload from another endpoint.\n * If the json-message of a chat message contains a valid JSON object, and\n * the JSON has this key, then it is a valid json-message to be sent.\n */\nexport const JITSI_MEET_MUC_TYPE = 'type';\n\n/**\n * The feature used by jigasi participants.\n * @type {string}\n */\nexport const FEATURE_JIGASI = 'http://jitsi.org/protocol/jigasi';\n\n/**\n * The feature used by the lib to mark support for e2ee. We use the feature by putting it in the presence\n * to avoid additional signaling (disco-info).\n * @type {string}\n */\nexport const FEATURE_E2EE = 'https://jitsi.org/meet/e2ee';\n\n/**\n *\n */\nexport default class XMPP extends Listenable {\n    /**\n     * FIXME describe all options\n     * @param {Object} options\n     * @param {String} options.serviceUrl - URL passed to the XMPP client which will be used to establish XMPP\n     * connection with the server.\n     * @param {String} options.bosh - Deprecated, use {@code serviceUrl}.\n     * @param {boolean} options.enableWebsocketResume - Enables XEP-0198 stream management which will make the XMPP\n     * module try to resume the session in case the Websocket connection breaks.\n     * @param {number} [options.websocketKeepAlive] - The websocket keep alive interval. See {@link XmppConnection}\n     * constructor for more details.\n     * @param {number} [options.websocketKeepAliveUrl] - The websocket keep alive url. See {@link XmppConnection}\n     * constructor for more details.\n     * @param {Object} [options.xmppPing] - The xmpp ping settings.\n     * @param {Array<Object>} options.p2pStunServers see {@link JingleConnectionPlugin} for more details.\n     * @param token\n     */\n    constructor(options, token) {\n        super();\n        this.connection = null;\n        this.disconnectInProgress = false;\n        this.connectionTimes = {};\n        this.options = options;\n        this.token = token;\n        this.authenticatedUser = false;\n\n        initStropheNativePlugins();\n\n        const xmppPing = options.xmppPing || {};\n\n        // let's ping the main domain (in case a guest one is used for the connection)\n        xmppPing.domain = options.hosts.domain;\n\n        this.connection = createConnection({\n            enableWebsocketResume: options.enableWebsocketResume,\n\n            // FIXME remove deprecated bosh option at some point\n            serviceUrl: options.serviceUrl || options.bosh,\n            token,\n            websocketKeepAlive: options.websocketKeepAlive,\n            websocketKeepAliveUrl: options.websocketKeepAliveUrl,\n            xmppPing,\n            shard: options.deploymentInfo?.shard\n        });\n\n        // forwards the shard changed event\n        this.connection.on(XmppConnection.Events.CONN_SHARD_CHANGED, () => {\n            /* eslint-disable camelcase */\n            const details = {\n                shard_changed: true,\n                suspend_time: this.connection.ping.getPingSuspendTime(),\n                time_since_last_success: this.connection.getTimeSinceLastSuccess()\n            };\n            /* eslint-enable camelcase */\n\n            this.eventEmitter.emit(\n                JitsiConnectionEvents.CONNECTION_FAILED,\n                JitsiConnectionErrors.OTHER_ERROR,\n                undefined,\n                undefined,\n                details);\n        });\n\n        this._initStrophePlugins();\n\n        this.caps = new Caps(this.connection, /* clientNode */ 'https://jitsi.org/jitsi-meet');\n\n        // Initialize features advertised in disco-info\n        this.initFeaturesList();\n\n        // Setup a disconnect on unload as a way to facilitate API consumers. It\n        // sounds like they would want that. A problem for them though may be if\n        // they wanted to utilize the connected connection in an unload handler\n        // of their own. However, it should be fairly easy for them to do that\n        // by registering their unload handler before us.\n        // $(window).on(`${this.options.disableBeforeUnloadHandlers ? '' : 'beforeunload '}unload`, ev => {\n        //     this.disconnect(ev).catch(() => {\n        //         // ignore errors in order to not brake the unload.\n        //     });\n        // });\n    }\n\n    /**\n     * Initializes the list of feature advertised through the disco-info\n     * mechanism.\n     */\n    initFeaturesList() {\n        // http://xmpp.org/extensions/xep-0167.html#support\n        // http://xmpp.org/extensions/xep-0176.html#support\n        this.caps.addFeature('urn:xmpp:jingle:1');\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:1');\n        this.caps.addFeature('urn:xmpp:jingle:transports:ice-udp:1');\n        this.caps.addFeature('urn:xmpp:jingle:apps:dtls:0');\n        this.caps.addFeature('urn:xmpp:jingle:transports:dtls-sctp:1');\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:audio');\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:video');\n        this.caps.addFeature('http://jitsi.org/json-encoded-sources');\n\n        if (!(this.options.disableRtx || !browser.supportsRTX())) {\n            this.caps.addFeature('urn:ietf:rfc:4588');\n        }\n        if (this.options.enableOpusRed === true && browser.supportsAudioRed()) {\n            this.caps.addFeature('http://jitsi.org/opus-red');\n        }\n\n        if (typeof this.options.enableRemb === 'undefined' || this.options.enableRemb) {\n            this.caps.addFeature('http://jitsi.org/remb');\n        }\n\n        // Disable TCC on Firefox because of a known issue where BWE is halved on every renegotiation.\n        if (!browser.isFirefox() && (typeof this.options.enableTcc === 'undefined' || this.options.enableTcc)) {\n            this.caps.addFeature('http://jitsi.org/tcc');\n        }\n\n        // this is dealt with by SDP O/A so we don't need to announce this\n        // XEP-0293\n        // this.caps.addFeature('urn:xmpp:jingle:apps:rtp:rtcp-fb:0');\n        // XEP-0294\n        // this.caps.addFeature('urn:xmpp:jingle:apps:rtp:rtp-hdrext:0');\n\n        this.caps.addFeature('urn:ietf:rfc:5761'); // rtcp-mux\n        this.caps.addFeature('urn:ietf:rfc:5888'); // a=group, e.g. bundle\n\n        // this.caps.addFeature('urn:ietf:rfc:5576'); // a=ssrc\n\n        // Enable Lipsync ?\n        if (browser.isChromiumBased() && this.options.enableLipSync === true) {\n            logger.info('Lip-sync enabled !');\n            this.caps.addFeature('http://jitsi.org/meet/lipsync');\n        }\n\n        if (this.connection.rayo) {\n            this.caps.addFeature('urn:xmpp:rayo:client:1');\n        }\n\n        if (E2EEncryption.isSupported(this.options)) {\n            this.caps.addFeature(FEATURE_E2EE, false, true);\n        }\n\n        // Advertise source-name signaling when the endpoint supports it.\n        if (FeatureFlags.isSourceNameSignalingEnabled()) {\n            logger.info('Source-name signaling is enabled');\n            this.caps.addFeature('http://jitsi.org/source-name');\n        }\n    }\n\n    /**\n     *\n     */\n    getConnection() {\n        return this.connection;\n    }\n\n    /**\n     * Receive connection status changes and handles them.\n     *\n     * @param {Object} credentials\n     * @param {string} credentials.jid - The user's XMPP ID passed to the\n     * connect method. For example, 'user@xmpp.com'.\n     * @param {string} credentials.password - The password passed to the connect\n     * method.\n     * @param {string} status - One of Strophe's connection status strings.\n     * @param {string} [msg] - The connection error message provided by Strophe.\n     */\n    connectionHandler(credentials = {}, status, msg) {\n        const now = window.performance.now();\n        const statusStr = Strophe.getStatusString(status).toLowerCase();\n\n        this.connectionTimes[statusStr] = now;\n        logger.log(\n            `(TIME) Strophe ${statusStr}${msg ? `[${msg}]` : ''}:\\t`,\n            now);\n\n        this.eventEmitter.emit(XMPPEvents.CONNECTION_STATUS_CHANGED, credentials, status, msg);\n        this._maybeSendDeploymentInfoStat();\n        if (status === Strophe.Status.CONNECTED || status === Strophe.Status.ATTACHED) {\n            // once connected or attached we no longer need this handle, drop it if it exist\n            if (this._sysMessageHandler) {\n                this.connection._stropheConn.deleteHandler(this._sysMessageHandler);\n                this._sysMessageHandler = null;\n            }\n\n            this.sendDiscoInfo && this.connection.jingle.getStunAndTurnCredentials();\n\n            logger.info(`My Jabber ID: ${this.connection.jid}`);\n\n            // XmppConnection emits CONNECTED again on reconnect - a good opportunity to clear any \"last error\" flags\n            this._resetState();\n\n            // make sure we will send the info after the features request succeeds or fails\n            this.sendDeploymentInfo = false;\n            this.sendDiscoInfo && this.caps.getFeaturesAndIdentities(this.options.hosts.domain)\n                .then(({ features, identities }) => {\n                    if (!features.has(Strophe.NS.PING)) {\n                        logger.error(`Ping NOT supported by ${\n                            this.options.hosts.domain} - please enable ping in your XMPP server config`);\n                    }\n\n                    this._processDiscoInfoIdentities(\n                        identities, undefined /* when querying we will query for features */);\n                })\n                .catch(error => {\n                    const errmsg = 'Feature discovery error';\n\n                    GlobalOnErrorHandler.callErrorHandler(\n                        new Error(`${errmsg}: ${error}`));\n                    logger.error(errmsg, error);\n\n                    this._maybeSendDeploymentInfoStat(true);\n                });\n\n            // make sure we don't query again\n            this.sendDiscoInfo = false;\n\n            if (credentials.password) {\n                this.authenticatedUser = true;\n            }\n            if (this.connection && this.connection.connected\n                && Strophe.getResourceFromJid(this.connection.jid)) {\n                // .connected is true while connecting?\n                // this.connection.send($pres());\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_ESTABLISHED,\n                    Strophe.getResourceFromJid(this.connection.jid));\n            }\n        } else if (status === Strophe.Status.CONNFAIL) {\n            if (msg === 'x-strophe-bad-non-anon-jid') {\n                this.anonymousConnectionFailed = true;\n            } else {\n                this.connectionFailed = true;\n            }\n            this.lastErrorMsg = msg;\n            if (msg === 'giving-up') {\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_FAILED,\n                    JitsiConnectionErrors.OTHER_ERROR, msg);\n            }\n        } else if (status === Strophe.Status.ERROR) {\n            this.lastErrorMsg = msg;\n        } else if (status === Strophe.Status.DISCONNECTED) {\n            // Stop ping interval\n            this.connection.ping.stopInterval();\n            const wasIntentionalDisconnect = Boolean(this.disconnectInProgress);\n            const errMsg = msg || this.lastErrorMsg;\n\n            if (this.anonymousConnectionFailed) {\n                // prompt user for username and password\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_FAILED,\n                    JitsiConnectionErrors.PASSWORD_REQUIRED);\n            } else if (this.connectionFailed) {\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_FAILED,\n                    JitsiConnectionErrors.OTHER_ERROR,\n                    errMsg,\n                    undefined, /* credentials */\n                    this._getConnectionFailedReasonDetails());\n            } else if (wasIntentionalDisconnect) {\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_DISCONNECTED, errMsg);\n            } else {\n                // XXX if Strophe drops the connection while not being asked to,\n                // it means that most likely some serious error has occurred.\n                // One currently known case is when a BOSH request fails for\n                // more than 4 times. The connection is dropped without\n                // supplying a reason(error message/event) through the API.\n                logger.error('XMPP connection dropped!');\n\n                // XXX if the last request error is within 5xx range it means it\n                // was a server failure\n                const lastErrorStatus = Strophe.getLastErrorStatus();\n\n                if (lastErrorStatus >= 500 && lastErrorStatus < 600) {\n                    this.eventEmitter.emit(\n                        JitsiConnectionEvents.CONNECTION_FAILED,\n                        JitsiConnectionErrors.SERVER_ERROR,\n                        errMsg || 'server-error',\n                        /* credentials */ undefined,\n                        this._getConnectionFailedReasonDetails());\n                } else {\n                    this.eventEmitter.emit(\n                        JitsiConnectionEvents.CONNECTION_FAILED,\n                        JitsiConnectionErrors.CONNECTION_DROPPED_ERROR,\n                        errMsg || 'connection-dropped-error',\n                        /* credentials */ undefined,\n                        this._getConnectionFailedReasonDetails());\n                }\n            }\n        } else if (status === Strophe.Status.AUTHFAIL) {\n            const lastFailedRawMessage = this.getConnection().getLastFailedMessage();\n\n            // wrong password or username, prompt user\n            this.eventEmitter.emit(\n                JitsiConnectionEvents.CONNECTION_FAILED,\n                JitsiConnectionErrors.PASSWORD_REQUIRED,\n                msg || this._parseConnectionFailedMessage(lastFailedRawMessage),\n                credentials);\n        }\n    }\n\n    /**\n     * Process received identities.\n     * @param {Set<String>} identities The identities to process.\n     * @param {Set<String>} features The features to process, optional. If missing lobby component will be queried\n     * for more features.\n     * @private\n     */\n    _processDiscoInfoIdentities(identities, features) {\n        // check for speakerstats\n        identities.forEach(identity => {\n            if (identity.type === 'av_moderation') {\n                this.avModerationComponentAddress = identity.name;\n            }\n\n            if (identity.type === 'speakerstats') {\n                this.speakerStatsComponentAddress = identity.name;\n            }\n\n            if (identity.type === 'conference_duration') {\n                this.conferenceDurationComponentAddress = identity.name;\n            }\n\n            if (identity.type === 'lobbyrooms') {\n                this.lobbySupported = true;\n                const processLobbyFeatures = f => {\n                    f.forEach(fr => {\n                        if (fr.endsWith('#displayname_required')) {\n                            this.eventEmitter.emit(JitsiConnectionEvents.DISPLAY_NAME_REQUIRED);\n                        }\n                    });\n                };\n\n                if (features) {\n                    processLobbyFeatures(features);\n                } else {\n                    identity.name && this.caps.getFeaturesAndIdentities(identity.name, identity.type)\n                        .then(({ features: f }) => processLobbyFeatures(f))\n                        .catch(e => logger.warn('Error getting features from lobby.', e && e.message));\n                }\n            }\n\n            if (identity.type === 'shard') {\n                this.options.deploymentInfo.shard = this.connection.shard = identity.name;\n            }\n\n            if (identity.type === 'region') {\n                this.options.deploymentInfo.region = this.connection.region = identity.name;\n            }\n\n            if (identity.type === 'breakout_rooms') {\n                this.breakoutRoomsComponentAddress = identity.name;\n            }\n        });\n\n        this._maybeSendDeploymentInfoStat(true);\n\n        if (this.avModerationComponentAddress\n            || this.speakerStatsComponentAddress\n            || this.conferenceDurationComponentAddress\n            || this.breakoutRoomsComponentAddress) {\n            this.connection.addHandler(this._onPrivateMessage.bind(this), null, 'message', null, null);\n        }\n    }\n\n    /**\n    * Parses a raw failure xmpp xml message received on auth failed.\n    *\n    * @param {string} msg - The raw failure message from xmpp.\n    * @returns {string|null} - The parsed message from the raw xmpp message.\n    */\n    _parseConnectionFailedMessage(msg) {\n        if (!msg) {\n            return null;\n        }\n\n        const matches = FAILURE_REGEX.exec(msg);\n\n        return matches ? matches[1] : null;\n    }\n\n    /**\n     *\n     * @param jid\n     * @param password\n     */\n    _connect(jid, password) {\n        // connection.connect() starts the connection process.\n        //\n        // As the connection process proceeds, the user supplied callback will\n        // be triggered multiple times with status updates. The callback should\n        // take two arguments - the status code and the error condition.\n        //\n        // The status code will be one of the values in the Strophe.Status\n        // constants. The error condition will be one of the conditions defined\n        // in RFC 3920 or the condition ‘strophe-parsererror’.\n        //\n        // The Parameters wait, hold and route are optional and only relevant\n        // for BOSH connections. Please see XEP 124 for a more detailed\n        // explanation of the optional parameters.\n        //\n        // Connection status constants for use by the connection handler\n        // callback.\n        //\n        //  Status.ERROR - An error has occurred (websockets specific)\n        //  Status.CONNECTING - The connection is currently being made\n        //  Status.CONNFAIL - The connection attempt failed\n        //  Status.AUTHENTICATING - The connection is authenticating\n        //  Status.AUTHFAIL - The authentication attempt failed\n        //  Status.CONNECTED - The connection has succeeded\n        //  Status.DISCONNECTED - The connection has been terminated\n        //  Status.DISCONNECTING - The connection is currently being terminated\n        //  Status.ATTACHED - The connection has been attached\n\n        this._resetState();\n\n        // we want to send this only on the initial connect\n        this.sendDiscoInfo = true;\n        this.sendDeploymentInfo = true;\n\n        if (this.connection._stropheConn && this.connection._stropheConn._addSysHandler) {\n            this._sysMessageHandler = this.connection._stropheConn._addSysHandler(\n                this._onSystemMessage.bind(this),\n                null,\n                'message'\n            );\n        } else {\n            logger.warn('Cannot attach strophe system handler, jiconop cannot operate');\n        }\n\n        this.connection.connect(\n            jid,\n            password,\n            this.connectionHandler.bind(this, {\n                jid,\n                password\n            }));\n    }\n\n    /**\n     * Receives system messages during the connect/login process and checks for services or\n     * @param msg The received message.\n     * @returns {void}\n     * @private\n     */\n    _onSystemMessage(msg) {\n        // proceed only if the message has any of the expected information\n        if ($(msg).find('>services').length === 0 && $(msg).find('>query').length === 0) {\n            return;\n        }\n\n        this.sendDiscoInfo = false;\n\n        const foundIceServers = this.connection.jingle.onReceiveStunAndTurnCredentials(msg);\n\n        const { features, identities } = parseDiscoInfo(msg);\n\n        this._processDiscoInfoIdentities(identities, features);\n\n        if (foundIceServers || identities.size > 0 || features.size > 0) {\n            this.connection._stropheConn.deleteHandler(this._sysMessageHandler);\n            this._sysMessageHandler = null;\n        }\n    }\n\n    /**\n     * Attach to existing connection. Can be used for optimizations. For\n     * example: if the connection is created on the server we can attach to it\n     * and start using it.\n     *\n     * @param options {object} connecting options - rid, sid, jid and password.\n     */\n    attach(options) {\n        this._resetState();\n\n        // we want to send this only on the initial connect\n        this.sendDiscoInfo = true;\n\n        const now = this.connectionTimes.attaching = window.performance.now();\n\n        logger.log('(TIME) Strophe Attaching:\\t', now);\n        this.connection.attach(options.jid, options.sid,\n            parseInt(options.rid, 10) + 1,\n            this.connectionHandler.bind(this, {\n                jid: options.jid,\n                password: options.password\n            }));\n    }\n\n    /**\n     * Resets any state/flag before starting a new connection.\n     * @private\n     */\n    _resetState() {\n        this.anonymousConnectionFailed = false;\n        this.connectionFailed = false;\n        this.lastErrorMsg = undefined;\n        this.disconnectInProgress = undefined;\n    }\n\n    /**\n     *\n     * @param jid\n     * @param password\n     */\n    connect(jid, password) {\n        if (!jid) {\n            const { anonymousdomain, domain } = this.options.hosts;\n            let configDomain = anonymousdomain || domain;\n\n            // Force authenticated domain if room is appended with '?login=true'\n            // or if we're joining with the token\n\n            // FIXME Do not rely on window.location because (1) React Native\n            // does not have a window.location by default and (2) here we cannot\n            // know for sure that query/search has not be stripped from\n            // window.location by the time the following executes.\n            const { location } = window;\n\n            if (anonymousdomain) {\n                const search = location && location.search;\n\n                if ((search && search.indexOf('login=true') !== -1)\n                        || this.token) {\n                    configDomain = domain;\n                }\n            }\n\n            // eslint-disable-next-line no-param-reassign\n            jid = configDomain || (location && location.hostname);\n        }\n\n        return this._connect(jid, password);\n    }\n\n    /**\n     * Joins or creates a muc with the provided jid, created from the passed\n     * in room name and muc host and onCreateResource result.\n     *\n     * @param {string} roomName - The name of the muc to join.\n     * @param {Object} options - Configuration for how to join the muc.\n     * @param {Function} [onCreateResource] - Callback to invoke when a resource\n     * is to be added to the jid.\n     * @returns {Promise} Resolves with an instance of a strophe muc.\n     */\n    createRoom(roomName, options, onCreateResource) {\n        // Support passing the domain in a String object as part of the room name.\n        const domain = roomName.domain || options.customDomain;\n\n        // There are cases (when using subdomain) where muc can hold an uppercase part\n        let roomjid = `${this.getRoomJid(roomName, domain)}/`;\n        const mucNickname = onCreateResource\n            ? onCreateResource(this.connection.jid, this.authenticatedUser)\n            : RandomUtil.randomHexString(8).toLowerCase();\n\n        logger.info(`JID ${this.connection.jid} using MUC nickname ${mucNickname}`);\n        roomjid += mucNickname;\n\n        return this.connection.emuc.createRoom(roomjid, null, options);\n    }\n\n    /**\n     * Returns the room JID based on the passed room name and domain.\n     *\n     * @param {string} roomName - The room name.\n     * @param {string} domain - The domain.\n     * @returns {string} - The room JID.\n     */\n    getRoomJid(roomName, domain) {\n        return `${roomName}@${domain ? domain : this.options.hosts.muc.toLowerCase()}`;\n    }\n\n    /**\n     * Check if a room with the passed JID is already created.\n     *\n     * @param {string} roomJid - The JID of the room.\n     * @returns {boolean}\n     */\n    isRoomCreated(roomName, domain) {\n        return this.connection.emuc.isRoomCreated(this.getRoomJid(roomName, domain));\n    }\n\n    /**\n     * Returns the jid of the participant associated with the Strophe connection.\n     *\n     * @returns {string} The jid of the participant.\n     */\n    getJid() {\n        return this.connection.jid;\n    }\n\n    /**\n     * Returns the logs from strophe.jingle.\n     * @returns {Object}\n     */\n    getJingleLog() {\n        const jingle = this.connection.jingle;\n\n\n        return jingle ? jingle.getLog() : {};\n    }\n\n    /**\n     * Returns the logs from strophe.\n     */\n    getXmppLog() {\n        return (this.connection.logger || {}).log || null;\n    }\n\n    /**\n     *\n     */\n    dial(...args) {\n        this.connection.rayo.dial(...args);\n    }\n\n    /**\n     * Pings the server.\n     * @param timeout how many ms before a timeout should occur.\n     * @returns {Promise} resolved on ping success and reject on an error or\n     * a timeout.\n     */\n    ping(timeout) {\n        return new Promise((resolve, reject) => {\n            this.connection.ping.ping(this.connection.pingDomain, resolve, reject, timeout);\n        });\n    }\n\n    /**\n     *\n     */\n    getSessions() {\n        return this.connection.jingle.sessions;\n    }\n\n    /**\n     * Disconnects this from the XMPP server (if this is connected).\n     *\n     * @param {Object} ev - Optionally, the event which triggered the necessity to\n     * disconnect from the XMPP server (e.g. beforeunload, unload).\n     * @returns {Promise} - Resolves when the disconnect process is finished or rejects with an error.\n     */\n    disconnect(ev) {\n        if (this.disconnectInProgress) {\n            return this.disconnectInProgress;\n        } else if (!this.connection) {\n            return Promise.resolve();\n        }\n\n        this.disconnectInProgress = new Promise(resolve => {\n            const disconnectListener = (credentials, status) => {\n                if (status === Strophe.Status.DISCONNECTED) {\n                    resolve();\n                    this.eventEmitter.removeListener(XMPPEvents.CONNECTION_STATUS_CHANGED, disconnectListener);\n                }\n            };\n\n            this.eventEmitter.on(XMPPEvents.CONNECTION_STATUS_CHANGED, disconnectListener);\n        });\n\n        this._cleanupXmppConnection(ev);\n\n        return this.disconnectInProgress;\n    }\n\n    /**\n     * The method is supposed to gracefully close the XMPP connection and the main goal is to make sure that the current\n     * participant will be removed from the conference XMPP MUC, so that it doesn't leave a \"ghost\" participant behind.\n     *\n     * @param {Object} ev - Optionally, the event which triggered the necessity to disconnect from the XMPP server\n     * (e.g. beforeunload, unload).\n     * @private\n     * @returns {void}\n     */\n    _cleanupXmppConnection(ev) {\n        // XXX Strophe is asynchronously sending by default. Unfortunately, that means that there may not be enough time\n        // to send an unavailable presence or disconnect at all. Switching Strophe to synchronous sending is not much of\n        // an option because it may lead to a noticeable delay in navigating away from the current location. As\n        // a compromise, we will try to increase the chances of sending an unavailable presence and/or disconnecting\n        // within the short time span that we have upon unloading by invoking flush() on the connection. We flush() once\n        // before disconnect() in order to attempt to have its unavailable presence at the top of the send queue. We\n        // flush() once more after disconnect() in order to attempt to have its unavailable presence sent as soon as\n        // possible.\n        !this.connection.isUsingWebSocket && this.connection.flush();\n\n        if (!this.connection.isUsingWebSocket && ev !== null && typeof ev !== 'undefined') {\n            const evType = ev.type;\n\n            if (evType === 'beforeunload' || evType === 'unload') {\n                // XXX Whatever we said above, synchronous sending is the best (known) way to properly disconnect from\n                // the XMPP server. Consequently, it may be fine to have the source code and comment it in or out\n                // depending on whether we want to run with it for some time.\n                this.connection.options.sync = true;\n\n                // This is needed in some browsers where sync xhr sending is disabled by default on unload.\n                if (this.connection.sendUnavailableBeacon()) {\n\n                    return;\n                }\n            }\n        }\n\n        this.connection.disconnect();\n\n        if (this.connection.options.sync !== true) {\n            this.connection.flush();\n        }\n    }\n\n    /**\n     *\n     */\n    _initStrophePlugins() {\n        const iceConfig = {\n            jvb: { iceServers: [ ] },\n            p2p: { iceServers: [ ] }\n        };\n\n        const p2pStunServers = (this.options.p2p\n            && this.options.p2p.stunServers) || DEFAULT_STUN_SERVERS;\n\n        if (Array.isArray(p2pStunServers)) {\n            logger.info('P2P STUN servers: ', p2pStunServers);\n            iceConfig.p2p.iceServers = p2pStunServers;\n        }\n\n        if (this.options.p2p && this.options.p2p.iceTransportPolicy) {\n            logger.info('P2P ICE transport policy: ',\n                this.options.p2p.iceTransportPolicy);\n\n            iceConfig.p2p.iceTransportPolicy\n                = this.options.p2p.iceTransportPolicy;\n        }\n\n        this.connection.addConnectionPlugin('emuc', new MucConnectionPlugin(this));\n        this.connection.addConnectionPlugin('jingle', new JingleConnectionPlugin(this, this.eventEmitter, iceConfig));\n        this.connection.addConnectionPlugin('rayo', new RayoConnectionPlugin());\n    }\n\n    /**\n     * Returns details about connection failure. Shard change or is it after\n     * suspend.\n     * @returns {object} contains details about a connection failure.\n     * @private\n     */\n    _getConnectionFailedReasonDetails() {\n        const details = {};\n\n        // check for moving between shard if information is available\n        if (this.options.deploymentInfo\n            && this.options.deploymentInfo.shard\n            && this.connection.lastResponseHeaders) {\n\n            // split headers by line\n            const headersArr = this.connection.lastResponseHeaders\n                .trim().split(/[\\r\\n]+/);\n            const headers = {};\n\n            headersArr.forEach(line => {\n                const parts = line.split(': ');\n                const header = parts.shift();\n                const value = parts.join(': ');\n\n                headers[header] = value;\n            });\n\n            /* eslint-disable camelcase */\n            details.shard_changed\n                = this.options.deploymentInfo.shard\n                    !== headers['x-jitsi-shard'];\n            /* eslint-enable camelcase */\n        }\n\n        /* eslint-disable camelcase */\n        // check for possible suspend\n        details.suspend_time = this.connection.ping.getPingSuspendTime();\n        details.time_since_last_success = this.connection.getTimeSinceLastSuccess();\n        /* eslint-enable camelcase */\n\n        return details;\n    }\n\n    /**\n     * Notifies speaker stats component if available that we are the new\n     * dominant speaker in the conference.\n     * @param {String} roomJid - The room jid where the speaker event occurred.\n     */\n    sendDominantSpeakerEvent(roomJid) {\n        // no speaker stats component advertised\n        if (!this.speakerStatsComponentAddress || !roomJid) {\n            return;\n        }\n\n        const msg = $msg({ to: this.speakerStatsComponentAddress });\n\n        msg.c('speakerstats', {\n            xmlns: 'http://jitsi.org/jitmeet',\n            room: roomJid })\n            .up();\n\n        this.connection.send(msg);\n    }\n\n    /**\n     * Sends facial expression to speaker stats component.\n     * @param {String} roomJid - The room jid where the speaker event occurred.\n     * @param {Object} payload - The expression to be sent to the speaker stats.\n     */\n    sendFacialExpressionEvent(roomJid, payload) {\n        // no speaker stats component advertised\n        if (!this.speakerStatsComponentAddress || !roomJid) {\n            return;\n        }\n\n        const msg = $msg({ to: this.speakerStatsComponentAddress });\n\n        msg.c('facialExpression', {\n            xmlns: 'http://jitsi.org/jitmeet',\n            room: roomJid,\n            expression: payload.facialExpression,\n            duration: payload.duration\n        }).up();\n\n        this.connection.send(msg);\n    }\n\n    /**\n     * Check if the given argument is a valid JSON ENDPOINT_MESSAGE string by\n     * parsing it and checking if it has a field called 'type'.\n     *\n     * @param {string} jsonString check if this string is a valid json string\n     * and contains the special structure.\n     * @returns {boolean, object} if given object is a valid JSON string, return\n     * the json object. Otherwise, returns false.\n     */\n    tryParseJSONAndVerify(jsonString) {\n        // ignore empty strings, like message errors\n        if (!jsonString) {\n            return false;\n        }\n\n        try {\n            const json = JSON.parse(jsonString);\n\n            // Handle non-exception-throwing cases:\n            // Neither JSON.parse(false) or JSON.parse(1234) throw errors,\n            // hence the type-checking,\n            // but... JSON.parse(null) returns null, and\n            // typeof null === \"object\",\n            // so we must check for that, too.\n            // Thankfully, null is falsey, so this suffices:\n            if (json && typeof json === 'object') {\n                const type = json[JITSI_MEET_MUC_TYPE];\n\n                if (typeof type !== 'undefined') {\n                    return json;\n                }\n\n                logger.debug('parsing valid json but does not have correct '\n                    + 'structure', 'topic: ', type);\n            }\n        } catch (e) {\n            logger.error(`Error parsing json ${jsonString}`, e);\n\n            return false;\n        }\n\n        return false;\n    }\n\n    /**\n     * A private message is received, message that is not addressed to the muc.\n     * We expect private message coming from plugins component if it is\n     * enabled and running.\n     *\n     * @param {string} msg - The message.\n     */\n    _onPrivateMessage(msg) {\n        const from = msg.getAttribute('from');\n\n        if (!(from === this.speakerStatsComponentAddress\n            || from === this.conferenceDurationComponentAddress\n            || from === this.avModerationComponentAddress\n            || from === this.breakoutRoomsComponentAddress)) {\n            return true;\n        }\n\n        const jsonMessage = $(msg).find('>json-message')\n            .text();\n        const parsedJson = this.tryParseJSONAndVerify(jsonMessage);\n\n        if (!parsedJson) {\n            return true;\n        }\n\n        if (parsedJson[JITSI_MEET_MUC_TYPE] === 'speakerstats' && parsedJson.users) {\n            this.eventEmitter.emit(XMPPEvents.SPEAKER_STATS_RECEIVED, parsedJson.users);\n        } else if (parsedJson[JITSI_MEET_MUC_TYPE] === 'conference_duration' && parsedJson.created_timestamp) {\n            this.eventEmitter.emit(XMPPEvents.CONFERENCE_TIMESTAMP_RECEIVED, parsedJson.created_timestamp);\n        } else if (parsedJson[JITSI_MEET_MUC_TYPE] === 'av_moderation') {\n            this.eventEmitter.emit(XMPPEvents.AV_MODERATION_RECEIVED, parsedJson);\n        } else if (parsedJson[JITSI_MEET_MUC_TYPE] === 'breakout_rooms') {\n            this.eventEmitter.emit(XMPPEvents.BREAKOUT_ROOMS_EVENT, parsedJson);\n        }\n\n        return true;\n    }\n\n    /**\n     * Sends deployment info to stats if not sent already.\n     * We want to try sending it on failure to connect\n     * or when we get a sys message(from jiconop2)\n     * or after success or failure of disco-info\n     * @param force Whether to force sending without checking anything.\n     * @private\n     */\n    _maybeSendDeploymentInfoStat(force) {\n        const acceptedStatuses = [\n            Strophe.Status.ERROR,\n            Strophe.Status.CONNFAIL,\n            Strophe.Status.AUTHFAIL,\n            Strophe.Status.DISCONNECTED,\n            Strophe.Status.CONNTIMEOUT\n        ];\n\n        if (!force && !(acceptedStatuses.includes(this.connection.status) && this.sendDeploymentInfo)) {\n            return;\n        }\n\n        // Log deployment-specific information, if available. Defined outside\n        // the application by individual deployments\n        const aprops = this.options.deploymentInfo;\n\n        if (aprops && Object.keys(aprops).length > 0) {\n            const logObject = {};\n\n            logObject.id = 'deployment_info';\n            for (const attr in aprops) {\n                if (aprops.hasOwnProperty(attr)) {\n                    logObject[attr] = aprops[attr];\n                }\n            }\n\n            Statistics.sendLog(JSON.stringify(logObject));\n        }\n\n        this.sendDeploymentInfo = false;\n    }\n}\n","import {\n    CONNECTION_DISCONNECTED,\n    CONNECTION_ESTABLISHED,\n    CONNECTION_FAILED\n} from './JitsiConnectionEvents';\nimport XMPP from './modules/xmpp/xmpp';\n\n/**\n * @typedef {Object} UpgradeRoleError\n *\n * @property {JitsiConnectionErrors} [connectionError] - One of\n * {@link JitsiConnectionErrors} which occurred when trying to connect to the\n * XMPP server.\n * @property {String} [authenticationError] - One of XMPP error conditions\n * returned by Jicofo on authentication attempt. See\n * {@link https://xmpp.org/rfcs/rfc3920.html#streams-error}.\n * @property {String} [message] - More details about the error.\n * @property {Object} [credentials] - The credentials that failed the\n * authentication.\n * @property {String} [credentials.jid] - The XMPP ID part of the credentials\n * that failed the authentication.\n * @property {string} [credentials.password] - The password part of the\n * credentials that failed the authentication.\n *\n * NOTE If neither one of the errors is present, then the operation has been\n * canceled.\n */\n\n/* eslint-disable no-invalid-this */\n\n/**\n * Connects to the XMPP server using the specified credentials and contacts\n * Jicofo in order to obtain a session ID (which is then stored in the local\n * storage). The user's role of the parent conference will be upgraded to\n * moderator (by Jicofo). It's also used to join the conference when starting\n * from anonymous domain and only authenticated users are allowed to create new\n * rooms.\n *\n * @param {Object} options\n * @param {string} options.id - XMPP user's ID to log in. For example,\n * user@xmpp-server.com.\n * @param {string} options.password - XMPP user's password to log in with.\n * @param {string} [options.roomPassword] - The password to join the MUC with.\n * @param {Function} [options.onLoginSuccessful] - Callback called when logging\n * into the XMPP server was successful. The next step will be to obtain a new\n * session ID from Jicofo and join the MUC using it which will effectively\n * upgrade the user's role to moderator.\n * @returns {Object} A <tt>thenable</tt> which (1) settles when the process of\n * authenticating and upgrading the role of the specified XMPP user finishes and\n * (2) has a <tt>cancel</tt> method that allows the caller to interrupt the\n * process. If the process finishes successfully, the session ID has been stored\n * in the settings and the <tt>thenable</tt> is resolved. If the process\n * finishes with failure, the <tt>thenable</tt> is rejected with reason of type\n * {@link UpgradeRoleError} which will have either <tt>connectionError</tt> or\n * <tt>authenticationError</tt> property set depending on which of the steps has\n * failed. If <tt>cancel</tt> is called before the process finishes, then the\n * thenable will be rejected with an empty object (i.e. no error property will\n * be set on the rejection reason).\n */\nexport default function authenticateAndUpgradeRole({\n    // 1. Log the specified XMPP user in.\n    id,\n    password,\n    onCreateResource,\n\n    // 2. Let the API client/consumer know as soon as the XMPP user has been\n    //    successfully logged in.\n    onLoginSuccessful,\n\n    // 3. Join the MUC.\n    roomPassword\n}) {\n    let canceled = false;\n    let rejectPromise;\n    let xmpp = new XMPP(this.connection.options);\n\n    const process = new Promise((resolve, reject) => {\n        // The process is represented by a Thenable with a cancel method. The\n        // Thenable is implemented using Promise and the cancel using the\n        // Promise's reject function.\n        rejectPromise = reject;\n\n\n        xmpp.addListener(\n            CONNECTION_DISCONNECTED,\n            () => {\n                xmpp = undefined;\n            });\n        xmpp.addListener(\n            CONNECTION_ESTABLISHED,\n            () => {\n                if (canceled) {\n                    return;\n                }\n\n                // Let the caller know that the XMPP login was successful.\n                onLoginSuccessful && onLoginSuccessful();\n\n                // Now authenticate with Jicofo and get a new session ID.\n                const room = xmpp.createRoom(\n                    this.options.name,\n                    this.options.config,\n                    onCreateResource\n                );\n\n                room.moderator.authenticate()\n                    .then(() => {\n                        xmpp && xmpp.disconnect();\n\n                        if (canceled) {\n                            return;\n                        }\n\n                        // At this point we should have the new session ID\n                        // stored in the settings. Jicofo will allow to join the\n                        // room.\n                        this.join(roomPassword);\n\n                        resolve();\n                    })\n                    .catch(({ error, message }) => {\n                        xmpp.disconnect();\n\n                        reject({\n                            authenticationError: error,\n                            message\n                        });\n                    });\n            });\n        xmpp.addListener(\n            CONNECTION_FAILED,\n            (connectionError, message, credentials) => {\n                reject({\n                    connectionError,\n                    credentials,\n                    message\n                });\n                xmpp = undefined;\n            });\n\n        canceled || xmpp.connect(id, password);\n    });\n\n    /**\n     * Cancels the process, if it's in progress, of authenticating and upgrading\n     * the role of the local participant/user.\n     *\n     * @public\n     * @returns {void}\n     */\n    process.cancel = () => {\n        canceled = true;\n        rejectPromise({});\n        xmpp && xmpp.disconnect();\n    };\n\n    return process;\n}\n\n/* eslint-enable no-invalid-this */\n","\nimport { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport CodecMimeType from '../../service/RTC/CodecMimeType';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport browser from '../browser';\n\nconst logger = getLogger(__filename);\n\n/**\n * This class handles the codec selection mechanism for the conference based on the config.js settings.\n * The preferred codec is selected based on the settings and the list of codecs supported by the browser.\n * The preferred codec is published in presence which is then used by the other endpoints in the\n * conference to pick a supported codec at join time and when the call transitions between p2p and jvb\n * connections.\n */\nexport class CodecSelection {\n    /**\n     * Creates a new instance for a given conference.\n     *\n     * @param {JitsiConference} conference the conference instance\n     * @param {*} options\n     * @param {string} options.disabledCodec the codec that needs to be disabled.\n     * @param {boolean} options.enforcePreferredCodec whether codec preference has to be\n     * enforced even when an endpoints that doesn't support the preferred codec joins the call.\n     * Falling back to the standard codec will be skipped when this option is true, endpoints\n     * that do not support the preferred codec may not be able to encode/decode video when this happens.\n     * @param {string} options.jvbCodec the codec that is preferred on jvb connection.\n     * @param {string} options.p2pCodec the codec that is preferred on p2p connection.\n     */\n    constructor(conference, options) {\n        this.conference = conference;\n        this.options = options;\n\n        // VP8 cannot be disabled and it will be the default codec when no preference is set.\n        this.disabledCodec = options.disabledCodec === CodecMimeType.VP8\n            ? undefined\n            : this._getCodecMimeType(options.disabledCodec);\n\n        // Check if the codec values passed are valid.\n        const jvbCodec = this._getCodecMimeType(options.jvbCodec);\n        const p2pCodec = this._getCodecMimeType(options.p2pCodec);\n\n        this.jvbPreferredCodec = jvbCodec && this._isCodecSupported(jvbCodec) ? jvbCodec : CodecMimeType.VP8;\n        this.p2pPreferredCodec = p2pCodec && this._isCodecSupported(p2pCodec) ? p2pCodec : CodecMimeType.VP8;\n        logger.debug(`Codec preferences for the conference are JVB: ${this.jvbPreferredCodec},\n            P2P: ${this.p2pPreferredCodec}`);\n\n        if (this.jvbPreferredCodec === CodecMimeType.VP9 && !browser.supportsVP9()) {\n            this.jvbPreferredCodec = CodecMimeType.VP8;\n        }\n\n        this.conference.on(\n            JitsiConferenceEvents.USER_JOINED,\n            () => this._selectPreferredCodec());\n        this.conference.on(\n            JitsiConferenceEvents.USER_LEFT,\n            () => this._selectPreferredCodec());\n        this.conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n            session => this._onMediaSessionStarted(session));\n    }\n\n    /**\n     * Checks if a given string is a valid video codec mime type.\n     *\n     * @param {string} codec the codec string that needs to be validated.\n     * @returns {CodecMimeType|null} mime type if valid, null otherwise.\n     * @private\n     */\n    _getCodecMimeType(codec) {\n        if (typeof codec === 'string') {\n            return Object.values(CodecMimeType).find(value => value === codec.toLowerCase());\n        }\n\n        return null;\n    }\n\n    /**\n     * Checks if the given codec is supported by the browser.\n     *\n     * @param {CodecMimeType} preferredCodec codec to be checked.\n     * @returns {boolean} true if the given codec is supported, false otherwise.\n     * @private\n     */\n    _isCodecSupported(preferredCodec) {\n        // Skip the check on FF and RN because they do not support the getCapabilities API.\n        // It is safe to assume both of them support all the codecs supported by Chrome.\n        if (browser.isFirefox() || browser.isReactNative()) {\n            return true;\n        }\n\n        return window.RTCRtpReceiver\n            && window.RTCRtpReceiver.getCapabilities\n            && window.RTCRtpReceiver.getCapabilities('video').codecs\n            .some(codec => codec.mimeType.toLowerCase() === `video/${preferredCodec}`);\n    }\n\n    /**\n     * Handles the {@link JitsiConferenceEvents._MEDIA_SESSION_STARTED} event. Codecs need to be\n     * configured on the media session that is newly created.\n     *\n     * @param {JingleSessionPC} mediaSession media session that started.\n     * @returns {void}\n     * @private\n     */\n    _onMediaSessionStarted(mediaSession) {\n        const preferredCodec = mediaSession.isP2P ? this.p2pPreferredCodec : this.jvbPreferredCodec;\n        const disabledCodec = this.disabledCodec && this._isCodecSupported(this.disabledCodec)\n            ? this.disabledCodec\n            : null;\n\n        this._selectPreferredCodec(mediaSession, preferredCodec, disabledCodec);\n    }\n\n    /**\n     * Sets the codec on the media session based on the preferred codec setting and the supported codecs\n     * published by the remote participants in their presence.\n     *\n     * @param {JingleSessionPC} mediaSession session for which the codec selection has to be made.\n     * @param {CodecMimeType} preferredCodec preferred codec.\n     * @param {CodecMimeType} disabledCodec codec that needs to be disabled.\n     */\n    _selectPreferredCodec(mediaSession = null, preferredCodec = null, disabledCodec = null) {\n        const session = mediaSession ? mediaSession : this.conference.jvbJingleSession;\n        const currentCodec = preferredCodec ? preferredCodec : this.jvbPreferredCodec;\n        let selectedCodec = currentCodec;\n\n        if (session && !session.isP2P && !this.options.enforcePreferredCodec) {\n            const remoteParticipants = this.conference.getParticipants().map(participant => participant.getId());\n\n            for (const remote of remoteParticipants) {\n                const peerMediaInfo = session._signalingLayer.getPeerMediaInfo(remote, MediaType.VIDEO);\n                const peerCodec = peerMediaInfo?.codecType;\n\n                if (peerCodec\n                    && peerCodec !== currentCodec\n                    && (peerCodec !== CodecMimeType.VP9 || browser.supportsVP9())) {\n                    selectedCodec = peerCodec;\n                }\n            }\n        }\n        session && session.setVideoCodecs(selectedCodec, disabledCodec);\n    }\n\n    /**\n     * Returns the preferred codec for the conference. The preferred codec for the JVB media session\n     * is the one that gets published in presence and a comparision is made whenever a participant joins\n     * or leaves the call.\n     *\n     * @returns {CodecMimeType} preferred codec.\n     */\n    getPreferredCodec() {\n        return this.jvbPreferredCodec;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport { createBridgeChannelClosedEvent } from '../../service/statistics/AnalyticsEvents';\nimport FeatureFlags from '../flags/FeatureFlags';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nconst logger = getLogger(__filename);\n\n/**\n * Handles a WebRTC RTCPeerConnection or a WebSocket instance to communicate\n * with the videobridge.\n */\nexport default class BridgeChannel {\n    /**\n     * Binds \"ondatachannel\" event listener on the given RTCPeerConnection\n     * instance, or creates a WebSocket connection with the videobridge.\n     * At least one of both, peerconnection or wsUrl parameters, must be\n     * given.\n     * @param {RTCPeerConnection} [peerconnection] WebRTC peer connection\n     * instance.\n     * @param {string} [wsUrl] WebSocket URL.\n     * @param {EventEmitter} emitter the EventEmitter instance to use for event emission.\n     */\n    constructor(peerconnection, wsUrl, emitter) {\n        if (!peerconnection && !wsUrl) {\n            throw new TypeError('At least peerconnection or wsUrl must be given');\n        } else if (peerconnection && wsUrl) {\n            throw new TypeError('Just one of peerconnection or wsUrl must be given');\n        }\n\n        if (peerconnection) {\n            logger.debug('constructor() with peerconnection');\n        } else {\n            logger.debug(`constructor() with wsUrl:\"${wsUrl}\"`);\n        }\n\n        // The underlying WebRTC RTCDataChannel or WebSocket instance.\n        // @type {RTCDataChannel|WebSocket}\n        this._channel = null;\n\n        // @type {EventEmitter}\n        this._eventEmitter = emitter;\n\n        // Whether a RTCDataChannel or WebSocket is internally used.\n        // @type {string} \"datachannel\" / \"websocket\"\n        this._mode = null;\n\n        // Indicates whether the connection retries are enabled or not.\n        this._areRetriesEnabled = false;\n\n        // Indicates whether the connection was closed from the client or not.\n        this._closedFromClient = false;\n\n        // If a RTCPeerConnection is given, listen for new RTCDataChannel\n        // event.\n        if (peerconnection) {\n            const datachannel\n                = peerconnection.createDataChannel(\n                    'JVB data channel', {\n                        protocol: 'http://jitsi.org/protocols/colibri'\n                    });\n\n            // Handle the RTCDataChannel.\n            this._handleChannel(datachannel);\n            this._mode = 'datachannel';\n\n        // Otherwise create a WebSocket connection.\n        } else if (wsUrl) {\n            this._areRetriesEnabled = true;\n            this._wsUrl = wsUrl;\n            this._initWebSocket();\n        }\n    }\n\n    /**\n     * Initializes the web socket channel.\n     *\n     * @returns {void}\n     */\n    _initWebSocket() {\n        // Create a WebSocket instance.\n        const ws = new WebSocket(this._wsUrl);\n\n        // Handle the WebSocket.\n        this._handleChannel(ws);\n        this._mode = 'websocket';\n    }\n\n    /**\n     * Starts the websocket connection retries.\n     *\n     * @returns {void}\n     */\n    _startConnectionRetries() {\n        let timeoutS = 1;\n\n        const reload = () => {\n            if (this.isOpen()) {\n                return;\n            }\n            this._initWebSocket(this._wsUrl);\n            timeoutS = Math.min(timeoutS * 2, 60);\n            this._retryTimeout = setTimeout(reload, timeoutS * 1000);\n        };\n\n        this._retryTimeout = setTimeout(reload, timeoutS * 1000);\n    }\n\n    /**\n     * Stops the websocket connection retries.\n     *\n     * @returns {void}\n     */\n    _stopConnectionRetries() {\n        if (this._retryTimeout) {\n            clearTimeout(this._retryTimeout);\n            this._retryTimeout = undefined;\n        }\n    }\n\n    /**\n     * Retries to establish the websocket connection after the connection was closed by the server.\n     *\n     * @param {CloseEvent} closeEvent - The close event that triggered the retries.\n     * @returns {void}\n     */\n    _retryWebSocketConnection(closeEvent) {\n        if (!this._areRetriesEnabled) {\n            return;\n        }\n        const { code, reason } = closeEvent;\n\n        Statistics.sendAnalytics(createBridgeChannelClosedEvent(code, reason));\n        this._areRetriesEnabled = false;\n        this._eventEmitter.once(RTCEvents.DATA_CHANNEL_OPEN, () => {\n            this._stopConnectionRetries();\n            this._areRetriesEnabled = true;\n        });\n        this._startConnectionRetries();\n    }\n\n    /**\n     * The channel mode.\n     * @return {string} \"datachannel\" or \"websocket\" (or null if not yet set).\n     */\n    get mode() {\n        return this._mode;\n    }\n\n    /**\n     * Closes the currently opened channel.\n     */\n    close() {\n        this._closedFromClient = true;\n        this._stopConnectionRetries();\n        this._areRetriesEnabled = false;\n        if (this._channel) {\n            try {\n                this._channel.close();\n            } catch (error) {} // eslint-disable-line no-empty\n\n            this._channel = null;\n        }\n    }\n\n    /**\n     * Whether there is an underlying RTCDataChannel or WebSocket and it's\n     * open.\n     * @return {boolean}\n     */\n    isOpen() {\n        return this._channel && (this._channel.readyState === 'open'\n            || this._channel.readyState === WebSocket.OPEN);\n    }\n\n    /**\n     * Sends local stats via the bridge channel.\n     * @param {Object} payload The payload of the message.\n     * @throws NetworkError/InvalidStateError/Error if the operation fails or if there is no data channel created.\n     */\n    sendEndpointStatsMessage(payload) {\n        this._send({\n            colibriClass: 'EndpointStats',\n            ...payload\n        });\n    }\n\n    /**\n     * Sends message via the channel.\n     * @param {string} to The id of the endpoint that should receive the\n     * message. If \"\" the message will be sent to all participants.\n     * @param  {object} payload The payload of the message.\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\n     * or from WebSocket#send or Error with \"No opened channel\" message.\n     */\n    sendMessage(to, payload) {\n        this._send({\n            colibriClass: 'EndpointMessage',\n            msgPayload: payload,\n            to\n        });\n    }\n\n    /**\n     * Sends a \"lastN value changed\" message via the channel.\n     * @param {number} value The new value for lastN. -1 means unlimited.\n     */\n    sendSetLastNMessage(value) {\n        logger.log(`Sending lastN=${value}.`);\n\n        this._send({\n            colibriClass: 'LastNChangedEvent',\n            lastN: value\n        });\n    }\n\n    /**\n     * Sends a \"selected endpoints changed\" message via the channel.\n     *\n     * @param {Array<string>} endpointIds - The ids of the selected endpoints.\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\n     * or from WebSocket#send or Error with \"No opened channel\" message.\n     */\n    sendSelectedEndpointsMessage(endpointIds) {\n        logger.log(`Sending selected endpoints: ${endpointIds}.`);\n\n        this._send({\n            colibriClass: 'SelectedEndpointsChangedEvent',\n            selectedEndpoints: endpointIds\n        });\n    }\n\n    /**\n     * Sends a \"receiver video constraint\" message via the channel.\n     * @param {Number} maxFrameHeightPixels the maximum frame height,\n     * in pixels, this receiver is willing to receive\n     */\n    sendReceiverVideoConstraintMessage(maxFrameHeightPixels) {\n        logger.log(`Sending ReceiverVideoConstraint with maxFrameHeight=${maxFrameHeightPixels}px`);\n        this._send({\n            colibriClass: 'ReceiverVideoConstraint',\n            maxFrameHeight: maxFrameHeightPixels\n        });\n    }\n\n    /**\n     * Sends a 'ReceiverVideoConstraints' message via the bridge channel.\n     *\n     * @param {ReceiverVideoConstraints} constraints video constraints.\n     */\n    sendNewReceiverVideoConstraintsMessage(constraints) {\n        logger.log(`Sending ReceiverVideoConstraints with ${JSON.stringify(constraints)}`);\n        this._send({\n            colibriClass: 'ReceiverVideoConstraints',\n            ...constraints\n        });\n    }\n\n    /**\n     * Sends a 'VideoTypeMessage' message via the bridge channel.\n     *\n     * @param {string} videoType 'camera', 'desktop' or 'none'.\n     * @deprecated to be replaced with sendSourceVideoTypeMessage\n     */\n    sendVideoTypeMessage(videoType) {\n        logger.debug(`Sending VideoTypeMessage with video type as ${videoType}`);\n        this._send({\n            colibriClass: 'VideoTypeMessage',\n            videoType\n        });\n    }\n\n    /**\n     * Sends a 'VideoTypeMessage' message via the bridge channel.\n     *\n     * @param {BridgeVideoType} videoType - the video type.\n     * @param {SourceName} sourceName - the source name of the video track.\n     * @returns {void}\n     */\n    sendSourceVideoTypeMessage(sourceName, videoType) {\n        logger.info(`Sending SourceVideoTypeMessage with video type ${sourceName}: ${videoType}`);\n        this._send({\n            colibriClass: 'SourceVideoTypeMessage',\n            sourceName,\n            videoType\n        });\n    }\n\n    /**\n     * Set events on the given RTCDataChannel or WebSocket instance.\n     */\n    _handleChannel(channel) {\n        const emitter = this._eventEmitter;\n\n        channel.onopen = () => {\n            logger.info(`${this._mode} channel opened`);\n\n            // Code sample for sending string and/or binary data.\n            // Sends string message to the bridge:\n            //     channel.send(\"Hello bridge!\");\n            // Sends 12 bytes binary message to the bridge:\n            //     channel.send(new ArrayBuffer(12));\n\n            emitter.emit(RTCEvents.DATA_CHANNEL_OPEN);\n        };\n\n        channel.onerror = event => {\n            // WS error events contain no information about the failure (this is available in the onclose event) and\n            // the event references the WS object itself, which causes hangs on mobile.\n            if (this._mode !== 'websocket') {\n                logger.error(`Channel error: ${event.message}`);\n            }\n        };\n\n        channel.onmessage = ({ data }) => {\n            // JSON object.\n            let obj;\n\n            try {\n                obj = JSON.parse(data);\n            } catch (error) {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error('Failed to parse channel message as JSON: ', data, error);\n\n                return;\n            }\n\n            const colibriClass = obj.colibriClass;\n\n            switch (colibriClass) {\n            case 'DominantSpeakerEndpointChangeEvent': {\n                const { dominantSpeakerEndpoint, previousSpeakers = [] } = obj;\n\n                logger.debug(`Dominant speaker: ${dominantSpeakerEndpoint}, previous speakers: ${previousSpeakers}`);\n                emitter.emit(RTCEvents.DOMINANT_SPEAKER_CHANGED, dominantSpeakerEndpoint, previousSpeakers);\n                break;\n            }\n            case 'EndpointConnectivityStatusChangeEvent': {\n                const endpoint = obj.endpoint;\n                const isActive = obj.active === 'true';\n\n                logger.info(`Endpoint connection status changed: ${endpoint} active=${isActive}`);\n                emitter.emit(RTCEvents.ENDPOINT_CONN_STATUS_CHANGED, endpoint, isActive);\n\n                break;\n            }\n            case 'EndpointMessage': {\n                emitter.emit(RTCEvents.ENDPOINT_MESSAGE_RECEIVED, obj.from, obj.msgPayload);\n\n                break;\n            }\n            case 'EndpointStats': {\n                emitter.emit(RTCEvents.ENDPOINT_STATS_RECEIVED, obj.from, obj);\n\n                break;\n            }\n            case 'LastNEndpointsChangeEvent': {\n                if (!FeatureFlags.isSourceNameSignalingEnabled()) {\n                    // The new/latest list of last-n endpoint IDs (i.e. endpoints for which the bridge is sending\n                    // video).\n                    const lastNEndpoints = obj.lastNEndpoints;\n\n                    logger.info(`New forwarded endpoints: ${lastNEndpoints}`);\n                    emitter.emit(RTCEvents.LASTN_ENDPOINT_CHANGED, lastNEndpoints);\n                }\n\n                break;\n            }\n            case 'ForwardedSources': {\n                if (FeatureFlags.isSourceNameSignalingEnabled()) {\n                    // The new/latest list of forwarded sources\n                    const forwardedSources = obj.forwardedSources;\n\n                    logger.info(`New forwarded sources: ${forwardedSources}`);\n                    emitter.emit(RTCEvents.FORWARDED_SOURCES_CHANGED, forwardedSources);\n                }\n\n                break;\n            }\n            case 'SenderVideoConstraints': {\n                const videoConstraints = obj.videoConstraints;\n\n                if (videoConstraints) {\n                    logger.info(`SenderVideoConstraints: ${JSON.stringify(videoConstraints)}`);\n                    emitter.emit(RTCEvents.SENDER_VIDEO_CONSTRAINTS_CHANGED, videoConstraints);\n                }\n                break;\n            }\n            case 'SenderSourceConstraints': {\n                if (FeatureFlags.isSourceNameSignalingEnabled()) {\n                    const { sourceName, maxHeight } = obj;\n\n                    if (typeof sourceName === 'string' && typeof maxHeight === 'number') {\n                        // eslint-disable-next-line object-property-newline\n                        logger.info(`SenderSourceConstraints: ${JSON.stringify({ sourceName, maxHeight })}`);\n                        emitter.emit(\n                            RTCEvents.SENDER_VIDEO_CONSTRAINTS_CHANGED, {\n                                sourceName,\n                                maxHeight\n                            }\n                        );\n                    } else {\n                        logger.error(`Invalid SenderSourceConstraints: ${JSON.stringify(obj)}`);\n                    }\n                }\n                break;\n            }\n            case 'ServerHello': {\n                logger.info(`Received ServerHello, version=${obj.version}.`);\n                break;\n            }\n            default: {\n                logger.debug('Channel JSON-formatted message: ', obj);\n\n                // The received message appears to be appropriately formatted\n                // (i.e. is a JSON object which assigns a value to the\n                // mandatory property colibriClass) so don't just swallow it,\n                // expose it to public consumption.\n                emitter.emit(`rtc.datachannel.${colibriClass}`, obj);\n            }\n            }\n        };\n\n        channel.onclose = event => {\n            logger.info(`Channel closed by ${this._closedFromClient ? 'client' : 'server'}`);\n\n            if (this._mode === 'websocket') {\n                if (!this._closedFromClient) {\n                    logger.error(`Channel closed: ${event.code} ${event.reason}`);\n                    this._retryWebSocketConnection(event);\n                }\n            }\n\n            // Remove the channel.\n            this._channel = null;\n        };\n\n        // Store the channel.\n        this._channel = channel;\n    }\n\n    /**\n     * Sends passed object via the channel.\n     * @param {object} jsonObject The object that will be sent.\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\n     * or from WebSocket#send or Error with \"No opened channel\" message.\n     */\n    _send(jsonObject) {\n        const channel = this._channel;\n\n        if (!this.isOpen()) {\n            logger.error('Bridge Channel send: no opened channel.');\n            throw new Error('No opened channel');\n        }\n\n        channel.send(JSON.stringify(jsonObject));\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport EventEmitter from 'events';\nimport clonedeep from 'lodash.clonedeep';\n\nimport JitsiTrackError from '../../JitsiTrackError';\nimport * as JitsiTrackErrors from '../../JitsiTrackErrors';\nimport CameraFacingMode from '../../service/RTC/CameraFacingMode';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport Resolutions from '../../service/RTC/Resolutions';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport { AVAILABLE_DEVICE } from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\nimport SDPUtil from '../sdp/SDPUtil';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport Listenable from '../util/Listenable';\n\nimport screenObtainer from './ScreenObtainer';\n\nconst logger = getLogger(__filename);\n\n// Require adapter only for certain browsers. This is being done for\n// react-native, which has its own shims, and while browsers are being migrated\n// over to use adapter's shims.\nif (browser.usesAdapter()) {\n    require('webrtc-adapter');\n}\n\nconst eventEmitter = new EventEmitter();\n\nconst AVAILABLE_DEVICES_POLL_INTERVAL_TIME = 3000; // ms\n\n/**\n * Default MediaStreamConstraints to use for calls to getUserMedia.\n *\n * @private\n */\nconst DEFAULT_CONSTRAINTS = {\n    video: {\n        height: {\n            ideal: 720,\n            max: 720,\n            min: 180\n        },\n        width: {\n            ideal: 1280,\n            max: 1280,\n            min: 320\n        }\n    }\n};\n\n// Currently audio output device change is supported only in Chrome and\n// default output always has 'default' device ID\nlet audioOutputDeviceId = 'default'; // default device\n// whether user has explicitly set a device to use\nlet audioOutputChanged = false;\n\n// Disables all audio processing\nlet disableAP = false;\n\n// Disables Acoustic Echo Cancellation\nlet disableAEC = false;\n\n// Disables Noise Suppression\nlet disableNS = false;\n\n// Disables Automatic Gain Control\nlet disableAGC = false;\n\n// Enables stereo.\nlet stereo = null;\n\nconst featureDetectionAudioEl = document.createElement('audio');\nconst isAudioOutputDeviceChangeAvailable\n    = typeof featureDetectionAudioEl.setSinkId !== 'undefined';\n\nlet availableDevices = [];\nlet availableDevicesPollTimer;\n\n/**\n * An empty function.\n */\nfunction emptyFuncton() {\n    // no-op\n}\n\n/**\n * Creates a constraints object to be passed into a call to getUserMedia.\n *\n * @param {Array} um - An array of user media types to get. The accepted types are \"video\", \"audio\", and \"desktop.\"\n * @param {Object} options - Various values to be added to the constraints.\n * @param {string} options.cameraDeviceId - The device id for the video capture device to get video from.\n * @param {Object} options.constraints - Default constraints object to use as a base for the returned constraints.\n * @param {Object} options.desktopStream - The desktop source id from which to capture a desktop sharing video.\n * @param {string} options.facingMode - Which direction the camera is pointing to (applicable on mobile)\n * @param {string} options.micDeviceId - The device id for the audio capture device to get audio from.\n * @private\n * @returns {Object}\n */\nfunction getConstraints(um = [], options = {}) {\n    // Create a deep copy of the constraints to avoid any modification of\n    // the passed in constraints object.\n    const constraints = clonedeep(options.constraints || DEFAULT_CONSTRAINTS);\n\n    if (um.indexOf('video') >= 0) {\n        // The \"resolution\" option is a shortcut and takes precendence.\n        if (Resolutions[options.resolution]) {\n            const r = Resolutions[options.resolution];\n\n            constraints.video.height = { ideal: r.height };\n            constraints.video.width = { ideal: r.width };\n        }\n\n        if (!constraints.video) {\n            constraints.video = {};\n        }\n\n        // Override the constraints on Safari because of the following webkit bug.\n        // https://bugs.webkit.org/show_bug.cgi?id=210932\n        // Camera doesn't start on older macOS versions if min/max constraints are specified.\n        // TODO: remove this hack when the bug fix is available on Mojave, Sierra and High Sierra.\n        if (browser.isWebKitBased()) {\n            if (constraints.video.height && constraints.video.height.ideal) {\n                constraints.video.height = { ideal: constraints.video.height.ideal };\n            } else {\n                logger.warn('Ideal camera height missing, camera may not start properly');\n            }\n            if (constraints.video.width && constraints.video.width.ideal) {\n                constraints.video.width = { ideal: constraints.video.width.ideal };\n            } else {\n                logger.warn('Ideal camera width missing, camera may not start properly');\n            }\n        }\n        if (options.cameraDeviceId) {\n            constraints.video.deviceId = options.cameraDeviceId;\n        } else {\n            const facingMode = options.facingMode || CameraFacingMode.USER;\n\n            constraints.video.facingMode = facingMode;\n        }\n    } else {\n        constraints.video = false;\n    }\n\n    if (um.indexOf('audio') >= 0) {\n        if (!constraints.audio || typeof constraints.audio === 'boolean') {\n            constraints.audio = {};\n        }\n\n        constraints.audio = {\n            autoGainControl: !disableAGC && !disableAP,\n            deviceId: options.micDeviceId,\n            echoCancellation: !disableAEC && !disableAP,\n            noiseSuppression: !disableNS && !disableAP\n        };\n\n        if (stereo) {\n            Object.assign(constraints.audio, { channelCount: 2 });\n        }\n    } else {\n        constraints.audio = false;\n    }\n\n    return constraints;\n}\n\n/**\n * Updates the granted permissions based on the options we requested and the\n * streams we received.\n * @param um the options we requested to getUserMedia.\n * @param stream the stream we received from calling getUserMedia.\n */\nfunction updateGrantedPermissions(um, stream) {\n    const audioTracksReceived\n        = Boolean(stream) && stream.getAudioTracks().length > 0;\n    const videoTracksReceived\n        = Boolean(stream) && stream.getVideoTracks().length > 0;\n    const grantedPermissions = {};\n\n    if (um.indexOf('video') !== -1) {\n        grantedPermissions.video = videoTracksReceived;\n    }\n    if (um.indexOf('audio') !== -1) {\n        grantedPermissions.audio = audioTracksReceived;\n    }\n\n    eventEmitter.emit(RTCEvents.PERMISSIONS_CHANGED, grantedPermissions);\n}\n\n/**\n * Checks if new list of available media devices differs from previous one.\n * @param {MediaDeviceInfo[]} newDevices - list of new devices.\n * @returns {boolean} - true if list is different, false otherwise.\n */\nfunction compareAvailableMediaDevices(newDevices) {\n    if (newDevices.length !== availableDevices.length) {\n        return true;\n    }\n\n    /* eslint-disable newline-per-chained-call */\n\n    return (\n        newDevices.map(mediaDeviceInfoToJSON).sort().join('')\n            !== availableDevices\n                .map(mediaDeviceInfoToJSON).sort().join(''));\n\n    /* eslint-enable newline-per-chained-call */\n\n    /**\n     *\n     * @param info\n     */\n    function mediaDeviceInfoToJSON(info) {\n        return JSON.stringify({\n            kind: info.kind,\n            deviceId: info.deviceId,\n            groupId: info.groupId,\n            label: info.label,\n            facing: info.facing\n        });\n    }\n}\n\n/**\n * Sends analytics event with the passed device list.\n *\n * @param {Array<MediaDeviceInfo>} deviceList - List with info about the\n * available devices.\n * @returns {void}\n */\nfunction sendDeviceListToAnalytics(deviceList) {\n    const audioInputDeviceCount\n        = deviceList.filter(d => d.kind === 'audioinput').length;\n    const audioOutputDeviceCount\n        = deviceList.filter(d => d.kind === 'audiooutput').length;\n    const videoInputDeviceCount\n        = deviceList.filter(d => d.kind === 'videoinput').length;\n    const videoOutputDeviceCount\n        = deviceList.filter(d => d.kind === 'videooutput').length;\n\n    deviceList.forEach(device => {\n        const attributes = {\n            'audio_input_device_count': audioInputDeviceCount,\n            'audio_output_device_count': audioOutputDeviceCount,\n            'video_input_device_count': videoInputDeviceCount,\n            'video_output_device_count': videoOutputDeviceCount,\n            'device_id': device.deviceId,\n            'device_group_id': device.groupId,\n            'device_kind': device.kind,\n            'device_label': device.label\n        };\n\n        Statistics.sendAnalytics(AVAILABLE_DEVICE, attributes);\n    });\n}\n\n\n/**\n * Update known devices.\n *\n * @param {Array<Object>} pds - The new devices.\n * @returns {void}\n *\n * NOTE: Use this function as a shared callback to handle both the devicechange event  and the polling implementations.\n * This prevents duplication and works around a chrome bug (verified to occur on 68) where devicechange fires twice in\n * a row, which can cause async post devicechange processing to collide.\n */\nfunction updateKnownDevices(pds) {\n    if (compareAvailableMediaDevices(pds)) {\n        onMediaDevicesListChanged(pds);\n    }\n}\n\n/**\n * Event handler for the 'devicechange' event.\n *\n * @param {MediaDeviceInfo[]} devices - list of media devices.\n * @emits RTCEvents.DEVICE_LIST_CHANGED\n */\nfunction onMediaDevicesListChanged(devicesReceived) {\n    availableDevices = devicesReceived.slice(0);\n    logger.info('list of media devices has changed:', availableDevices);\n\n    sendDeviceListToAnalytics(availableDevices);\n\n    // Used by tracks to update the real device id before the consumer of lib-jitsi-meet receives the new device list.\n    eventEmitter.emit(RTCEvents.DEVICE_LIST_WILL_CHANGE, availableDevices);\n\n    eventEmitter.emit(RTCEvents.DEVICE_LIST_CHANGED, availableDevices);\n}\n\n/**\n *\n */\nclass RTCUtils extends Listenable {\n    /**\n     *\n     */\n    constructor() {\n        super(eventEmitter);\n    }\n\n    /**\n     * Depending on the browser, sets difference instance methods for\n     * interacting with user media and adds methods to native WebRTC-related\n     * objects. Also creates an instance variable for peer connection\n     * constraints.\n     *\n     * @param {Object} options\n     * @returns {void}\n     */\n    init(options = {}) {\n        if (typeof options.disableAEC === 'boolean') {\n            disableAEC = options.disableAEC;\n            logger.info(`Disable AEC: ${disableAEC}`);\n        }\n        if (typeof options.disableNS === 'boolean') {\n            disableNS = options.disableNS;\n            logger.info(`Disable NS: ${disableNS}`);\n        }\n        if (typeof options.disableAP === 'boolean') {\n            disableAP = options.disableAP;\n            logger.info(`Disable AP: ${disableAP}`);\n        }\n        if (typeof options.disableAGC === 'boolean') {\n            disableAGC = options.disableAGC;\n            logger.info(`Disable AGC: ${disableAGC}`);\n        }\n        if (typeof options.audioQuality?.stereo === 'boolean') {\n            stereo = options.audioQuality.stereo;\n            logger.info(`Stereo: ${stereo}`);\n        }\n\n        window.clearInterval(availableDevicesPollTimer);\n        availableDevicesPollTimer = undefined;\n\n        if (browser.isReactNative()) {\n            this.RTCPeerConnectionType = RTCPeerConnection;\n\n            this.attachMediaStream = undefined; // Unused on React Native.\n\n            this.getStreamID = function({ id }) {\n                // The react-native-webrtc implementation that we use at the\n                // time of this writing returns a number for the id of\n                // MediaStream. Let's just say that a number contains no special\n                // characters.\n                return (\n                    typeof id === 'number'\n                        ? id\n                        : SDPUtil.filterSpecialChars(id));\n            };\n            this.getTrackID = ({ id }) => id;\n        } else {\n            this.RTCPeerConnectionType = RTCPeerConnection;\n\n            this.attachMediaStream\n                = wrapAttachMediaStream((element, stream) => {\n                    if (element) {\n                        element.srcObject = stream;\n                    }\n                });\n\n            this.getStreamID = ({ id }) => id;\n            this.getTrackID = ({ id }) => id;\n        }\n\n        this.pcConstraints = browser.isChromiumBased() || browser.isReactNative()\n            ? { optional: [\n                { googScreencastMinBitrate: 100 },\n                { googCpuOveruseDetection: true }\n            ] }\n            : {};\n\n        screenObtainer.init(options);\n\n        if (this.isDeviceListAvailable()) {\n            this.enumerateDevices(ds => {\n                availableDevices = ds.slice(0);\n\n                logger.debug('Available devices: ', availableDevices);\n                sendDeviceListToAnalytics(availableDevices);\n\n                eventEmitter.emit(\n                    RTCEvents.DEVICE_LIST_AVAILABLE,\n                    availableDevices);\n\n                if (browser.supportsDeviceChangeEvent()) {\n                    navigator.mediaDevices.addEventListener(\n                        'devicechange',\n                        () => this.enumerateDevices(emptyFuncton));\n                } else {\n                    // Periodically poll enumerateDevices() method to check if\n                    // list of media devices has changed.\n                    availableDevicesPollTimer = window.setInterval(\n                        () => this.enumerateDevices(emptyFuncton),\n                        AVAILABLE_DEVICES_POLL_INTERVAL_TIME);\n                }\n            });\n        }\n    }\n\n    /**\n     *\n     * @param {Function} callback\n     */\n    enumerateDevices(callback) {\n        navigator.mediaDevices.enumerateDevices()\n            .then(devices => {\n                updateKnownDevices(devices);\n                callback(devices);\n            })\n            .catch(error => {\n                logger.warn(`Failed to  enumerate devices. ${error}`);\n                updateKnownDevices([]);\n                callback([]);\n            });\n    }\n\n    /**\n     * Acquires a media stream via getUserMedia that\n     * matches the given constraints\n     *\n     * @param {array} umDevices which devices to acquire (e.g. audio, video)\n     * @param {Object} constraints - Stream specifications to use.\n     * @param {number} timeout - The timeout in ms for GUM.\n     * @returns {Promise}\n     */\n    _getUserMedia(umDevices, constraints = {}, timeout = 0) {\n        return new Promise((resolve, reject) => {\n            let gumTimeout, timeoutExpired = false;\n\n            if (typeof timeout === 'number' && !isNaN(timeout) && timeout > 0) {\n                gumTimeout = setTimeout(() => {\n                    timeoutExpired = true;\n                    gumTimeout = undefined;\n                    reject(new JitsiTrackError(JitsiTrackErrors.TIMEOUT));\n                }, timeout);\n            }\n\n            navigator.mediaDevices.getUserMedia(constraints)\n                .then(stream => {\n                    logger.log('onUserMediaSuccess');\n                    updateGrantedPermissions(umDevices, stream);\n                    if (!timeoutExpired) {\n                        if (typeof gumTimeout !== 'undefined') {\n                            clearTimeout(gumTimeout);\n                        }\n                        resolve(stream);\n                    }\n                })\n                .catch(error => {\n                    logger.warn(`Failed to get access to local media. ${error} ${JSON.stringify(constraints)}`);\n                    const jitsiError = new JitsiTrackError(error, constraints, umDevices);\n\n                    if (!timeoutExpired) {\n                        if (typeof gumTimeout !== 'undefined') {\n                            clearTimeout(gumTimeout);\n                        }\n                        reject(jitsiError);\n                    }\n\n                    if (jitsiError.name === JitsiTrackErrors.PERMISSION_DENIED) {\n                        updateGrantedPermissions(umDevices, undefined);\n                    }\n\n                    // else {\n                    // Probably the error is not caused by the lack of permissions and we don't need to update them.\n                    // }\n                });\n        });\n    }\n\n    /**\n     * Acquire a display stream via the screenObtainer. This requires extra\n     * logic compared to use screenObtainer versus normal device capture logic\n     * in RTCUtils#_getUserMedia.\n     *\n     * @returns {Promise} A promise which will be resolved with an object which\n     * contains the acquired display stream. If desktop sharing is not supported\n     * then a rejected promise will be returned.\n     */\n    _getDesktopMedia() {\n        if (!screenObtainer.isSupported()) {\n            return Promise.reject(new Error('Desktop sharing is not supported!'));\n        }\n\n        return new Promise((resolve, reject) => {\n            screenObtainer.obtainStream(\n                stream => {\n                    resolve(stream);\n                },\n                error => {\n                    reject(error);\n                });\n        });\n    }\n\n    /**\n     * Private utility for determining if the passed in MediaStream contains\n     * tracks of the type(s) specified in the requested devices.\n     *\n     * @param {string[]} requestedDevices - The track types that are expected to\n     * be includes in the stream.\n     * @param {MediaStream} stream - The MediaStream to check if it has the\n     * expected track types.\n     * @returns {string[]} An array of string with the missing track types. The\n     * array will be empty if all requestedDevices are found in the stream.\n     */\n    _getMissingTracks(requestedDevices = [], stream) {\n        const missingDevices = [];\n\n        const audioDeviceRequested = requestedDevices.includes('audio');\n        const audioTracksReceived\n            = stream && stream.getAudioTracks().length > 0;\n\n        if (audioDeviceRequested && !audioTracksReceived) {\n            missingDevices.push('audio');\n        }\n\n        const videoDeviceRequested = requestedDevices.includes('video');\n        const videoTracksReceived\n            = stream && stream.getVideoTracks().length > 0;\n\n        if (videoDeviceRequested && !videoTracksReceived) {\n            missingDevices.push('video');\n        }\n\n        return missingDevices;\n    }\n\n    /**\n     * Gets streams from specified device types. This function intentionally\n     * ignores errors for upstream to catch and handle instead.\n     *\n     * @param {Object} options - A hash describing what devices to get and\n     * relevant constraints.\n     * @param {string[]} options.devices - The types of media to capture. Valid\n     * values are \"desktop\", \"audio\", and \"video\".\n     * @param {Object} options.desktopSharingFrameRate\n     * @param {Object} options.desktopSharingFrameRate.min - Minimum fps\n     * @param {Object} options.desktopSharingFrameRate.max - Maximum fps\n     * @param {String} options.desktopSharingSourceDevice - The device id or\n     * label for a video input source that should be used for screensharing.\n     * @returns {Promise} The promise, when successful, will return an array of\n     * meta data for the requested device type, which includes the stream and\n     * track. If an error occurs, it will be deferred to the caller for\n     * handling.\n     */\n    obtainAudioAndVideoPermissions(options) {\n        const {\n            timeout,\n            ...otherOptions\n        } = options;\n\n        const mediaStreamsMetaData = [];\n\n        // Declare private functions to be used in the promise chain below.\n        // These functions are declared in the scope of this function because\n        // they are not being used anywhere else, so only this function needs to\n        // know about them.\n\n        /**\n         * Executes a request for desktop media if specified in options.\n         *\n         * @returns {Promise}\n         */\n        const maybeRequestDesktopDevice = function() {\n            const umDevices = otherOptions.devices || [];\n            const isDesktopDeviceRequested\n                = umDevices.indexOf('desktop') !== -1;\n\n            if (!isDesktopDeviceRequested) {\n                return Promise.resolve();\n            }\n\n            const {\n                desktopSharingSourceDevice\n            } = otherOptions;\n\n            // Attempt to use a video input device as a screenshare source if\n            // the option is defined.\n            if (desktopSharingSourceDevice) {\n                const matchingDevice\n                    = availableDevices && availableDevices.find(device =>\n                        device.kind === 'videoinput'\n                            && (device.deviceId === desktopSharingSourceDevice\n                            || device.label === desktopSharingSourceDevice));\n\n                if (!matchingDevice) {\n                    return Promise.reject(new JitsiTrackError(\n                        { name: 'ConstraintNotSatisfiedError' },\n                        {},\n                        [ desktopSharingSourceDevice ]\n                    ));\n                }\n\n                const requestedDevices = [ 'video' ];\n                const constraints = {\n                    video: {\n                        deviceId: matchingDevice.deviceId\n\n                        // frameRate is omited here on purpose since this is a device that we'll pretend is a screen.\n                    }\n                };\n\n                return this._getUserMedia(requestedDevices, constraints, timeout)\n                    .then(stream => {\n                        return {\n                            sourceType: 'device',\n                            stream\n                        };\n                    });\n            }\n\n            return this._getDesktopMedia();\n        }.bind(this);\n\n        /**\n         * Creates a meta data object about the passed in desktopStream and\n         * pushes the meta data to the internal array mediaStreamsMetaData to be\n         * returned later.\n         *\n         * @param {MediaStreamTrack} desktopStream - A track for a desktop\n         * capture.\n         * @returns {void}\n         */\n        const maybeCreateAndAddDesktopTrack = function(desktopStream) {\n            if (!desktopStream) {\n                return;\n            }\n\n            const { stream, sourceId, sourceType } = desktopStream;\n\n            const desktopAudioTracks = stream.getAudioTracks();\n\n            if (desktopAudioTracks.length) {\n                const desktopAudioStream = new MediaStream(desktopAudioTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: desktopAudioStream,\n                    sourceId,\n                    sourceType,\n                    track: desktopAudioStream.getAudioTracks()[0]\n                });\n            }\n\n            const desktopVideoTracks = stream.getVideoTracks();\n\n            if (desktopVideoTracks.length) {\n                const desktopVideoStream = new MediaStream(desktopVideoTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: desktopVideoStream,\n                    sourceId,\n                    sourceType,\n                    track: desktopVideoStream.getVideoTracks()[0],\n                    videoType: VideoType.DESKTOP\n                });\n            }\n        };\n\n        /**\n         * Executes a request for audio and/or video, as specified in options.\n         * By default both audio and video will be captured if options.devices\n         * is not defined.\n         *\n         * @returns {Promise}\n         */\n        const maybeRequestCaptureDevices = function() {\n            const umDevices = otherOptions.devices || [ 'audio', 'video' ];\n            const requestedCaptureDevices = umDevices.filter(device => device === 'audio' || device === 'video');\n\n            if (!requestedCaptureDevices.length) {\n                return Promise.resolve();\n            }\n\n            const constraints = getConstraints(requestedCaptureDevices, otherOptions);\n\n            logger.info('Got media constraints: ', JSON.stringify(constraints));\n\n            return this._getUserMedia(requestedCaptureDevices, constraints, timeout);\n        }.bind(this);\n\n        /**\n         * Splits the passed in media stream into separate audio and video\n         * streams and creates meta data objects for each and pushes them to the\n         * internal array mediaStreamsMetaData to be returned later.\n         *\n         * @param {MediaStreamTrack} avStream - A track for with audio and/or\n         * video track.\n         * @returns {void}\n         */\n        const maybeCreateAndAddAVTracks = function(avStream) {\n            if (!avStream) {\n                return;\n            }\n\n            const audioTracks = avStream.getAudioTracks();\n\n            if (audioTracks.length) {\n                const audioStream = new MediaStream(audioTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: audioStream,\n                    track: audioStream.getAudioTracks()[0],\n                    effects: otherOptions.effects\n                });\n            }\n\n            const videoTracks = avStream.getVideoTracks();\n\n            if (videoTracks.length) {\n                const videoStream = new MediaStream(videoTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: videoStream,\n                    track: videoStream.getVideoTracks()[0],\n                    videoType: VideoType.CAMERA,\n                    effects: otherOptions.effects\n                });\n            }\n        };\n\n        return maybeRequestDesktopDevice()\n            .then(maybeCreateAndAddDesktopTrack)\n            .then(maybeRequestCaptureDevices)\n            .then(maybeCreateAndAddAVTracks)\n            .then(() => mediaStreamsMetaData)\n            .catch(error => {\n                mediaStreamsMetaData.forEach(({ stream }) => {\n                    this.stopMediaStream(stream);\n                });\n\n                return Promise.reject(error);\n            });\n    }\n\n    /**\n     * Checks whether it is possible to enumerate available cameras/microphones.\n     *\n     * @returns {boolean} {@code true} if the device listing is available;\n     * {@code false}, otherwise.\n     */\n    isDeviceListAvailable() {\n        return Boolean(\n            navigator.mediaDevices\n                && navigator.mediaDevices.enumerateDevices);\n    }\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     * @params {string} [deviceType] - type of device to change. Default is\n     *      undefined or 'input', 'output' - for audio output device change.\n     * @returns {boolean} true if available, false otherwise.\n     */\n    isDeviceChangeAvailable(deviceType) {\n        if (deviceType === 'output' || deviceType === 'audiooutput') {\n            return isAudioOutputDeviceChangeAvailable;\n        }\n\n        // Calling getUserMedia again (for preview) kills the track returned by the first getUserMedia call because of\n        // https://bugs.webkit.org/show_bug.cgi?id=179363. Therefore, do not show microphone/camera options on mobile\n        // Safari.\n        if ((deviceType === 'audioinput' || deviceType === 'input') && browser.isIosBrowser()) {\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * A method to handle stopping of the stream.\n     * One point to handle the differences in various implementations.\n     * @param mediaStream MediaStream object to stop.\n     */\n    stopMediaStream(mediaStream) {\n        if (!mediaStream) {\n            return;\n        }\n\n        mediaStream.getTracks().forEach(track => {\n            if (track.stop) {\n                track.stop();\n            }\n        });\n\n        // leave stop for implementation still using it\n        if (mediaStream.stop) {\n            mediaStream.stop();\n        }\n\n        // The MediaStream implementation of the react-native-webrtc project has\n        // an explicit release method that is to be invoked in order to release\n        // used resources such as memory.\n        if (mediaStream.release) {\n            mediaStream.release();\n        }\n    }\n\n    /**\n     * Returns whether the desktop sharing is enabled or not.\n     * @returns {boolean}\n     */\n    isDesktopSharingEnabled() {\n        return screenObtainer.isSupported();\n    }\n\n    /**\n     * Sets current audio output device.\n     * @param {string} deviceId - id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices(), 'default' for default\n     *      device\n     * @returns {Promise} - resolves when audio output is changed, is rejected\n     *      otherwise\n     */\n    setAudioOutputDevice(deviceId) {\n        if (!this.isDeviceChangeAvailable('output')) {\n            return Promise.reject(\n                new Error('Audio output device change is not supported'));\n        }\n\n        return featureDetectionAudioEl.setSinkId(deviceId)\n            .then(() => {\n                audioOutputDeviceId = deviceId;\n                audioOutputChanged = true;\n\n                logger.log(`Audio output device set to ${deviceId}`);\n\n                eventEmitter.emit(RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                    deviceId);\n            });\n    }\n\n    /**\n     * Sets the capture frame rate for desktop tracks.\n     *\n     * @param {number} maxFps - max fps to be used as the capture frame rate.\n     * @returns {void}\n     */\n    setDesktopSharingFrameRate(maxFps) {\n        screenObtainer.setDesktopSharingFrameRate(maxFps);\n    }\n\n    /**\n     * Returns currently used audio output device id, '' stands for default\n     * device\n     * @returns {string}\n     */\n    getAudioOutputDevice() {\n        return audioOutputDeviceId;\n    }\n\n    /**\n     * Returns list of available media devices if its obtained, otherwise an\n     * empty array is returned/\n     * @returns {Array} list of available media devices.\n     */\n    getCurrentlyAvailableMediaDevices() {\n        return availableDevices;\n    }\n\n    /**\n     * Returns whether available devices have permissions granted\n     * @returns {Boolean}\n     */\n    arePermissionsGrantedForAvailableDevices() {\n        return availableDevices.some(device => Boolean(device.label));\n    }\n\n    /**\n     * Returns event data for device to be reported to stats.\n     * @returns {MediaDeviceInfo} device.\n     */\n    getEventDataForActiveDevice(device) {\n        const deviceList = [];\n        const deviceData = {\n            'deviceId': device.deviceId,\n            'kind': device.kind,\n            'label': device.label,\n            'groupId': device.groupId\n        };\n\n        deviceList.push(deviceData);\n\n        return { deviceList };\n    }\n\n    /**\n     * Configures the given PeerConnection constraints to either enable or\n     * disable (according to the value of the 'enable' parameter) the\n     * 'googSuspendBelowMinBitrate' option.\n     * @param constraints the constraints on which to operate.\n     * @param enable {boolean} whether to enable or disable the suspend video\n     * option.\n     */\n    setSuspendVideo(constraints, enable) {\n        if (!constraints.optional) {\n            constraints.optional = [];\n        }\n\n        // Get rid of all \"googSuspendBelowMinBitrate\" constraints (we assume\n        // that the elements of constraints.optional contain a single property).\n        constraints.optional\n            = constraints.optional.filter(\n                c => !c.hasOwnProperty('googSuspendBelowMinBitrate'));\n\n        if (enable) {\n            constraints.optional.push({ googSuspendBelowMinBitrate: 'true' });\n        }\n    }\n}\n\nconst rtcUtils = new RTCUtils();\n\n/**\n * Wraps original attachMediaStream function to set current audio output device\n * if this is supported.\n * @param {Function} origAttachMediaStream\n * @returns {Function}\n */\nfunction wrapAttachMediaStream(origAttachMediaStream) {\n    return function(element, stream) {\n        // eslint-disable-next-line prefer-rest-params\n        const res = origAttachMediaStream.apply(rtcUtils, arguments);\n\n        if (stream\n                && rtcUtils.isDeviceChangeAvailable('output')\n                && stream.getAudioTracks\n                && stream.getAudioTracks().length\n\n                // we skip setting audio output if there was no explicit change\n                && audioOutputChanged) {\n            element.setSinkId(rtcUtils.getAudioOutputDevice())\n                .catch(function(ex) {\n                    const err\n                        = new JitsiTrackError(ex, null, [ 'audiooutput' ]);\n\n                    GlobalOnErrorHandler.callUnhandledRejectionHandler({\n                        promise: this, // eslint-disable-line no-invalid-this\n                        reason: err\n                    });\n\n                    logger.warn(\n                        'Failed to set audio output device for the element.'\n                            + ' Default audio output device will be used'\n                            + ' instead',\n                        element,\n                        err);\n                });\n        }\n\n        return res;\n    };\n}\n\nexport default rtcUtils;\n","import { getLogger } from '@jitsi/logger';\nimport EventEmitter from 'events';\n\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport browser from '../browser';\n\nimport RTCUtils from './RTCUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * Maps our handler types to MediaStreamTrack properties.\n */\nconst trackHandler2Prop = {\n    'track_mute': 'onmute', // Not supported on FF\n    'track_unmute': 'onunmute',\n    'track_ended': 'onended'\n};\n\n/**\n * Represents a single media track (either audio or video).\n */\nexport default class JitsiTrack extends EventEmitter {\n    /* eslint-disable max-params */\n    /**\n     * Represents a single media track (either audio or video).\n     * @constructor\n     * @param conference the rtc instance\n     * @param stream the WebRTC MediaStream instance\n     * @param track the WebRTC MediaStreamTrack instance, must be part of\n     * the given <tt>stream</tt>.\n     * @param streamInactiveHandler the function that will handle\n     *        onended/oninactive events of the stream.\n     * @param trackMediaType the media type of the JitsiTrack\n     * @param videoType the VideoType for this track if any\n     */\n    constructor(\n            conference,\n            stream,\n            track,\n            streamInactiveHandler,\n            trackMediaType,\n            videoType) {\n        super();\n\n        // aliases for addListener/removeListener\n        this.addEventListener = this.addListener;\n        this.removeEventListener = this.off = this.removeListener;\n\n        /**\n         * Array with the HTML elements that are displaying the streams.\n         * @type {Array}\n         */\n        this.containers = [];\n        this.conference = conference;\n        this.audioLevel = -1;\n        this.type = trackMediaType;\n        this.track = track;\n        this.videoType = videoType;\n        this.handlers = new Map();\n\n        /**\n         * Indicates whether this JitsiTrack has been disposed. If true, this\n         * JitsiTrack is to be considered unusable and operations involving it\n         * are to fail (e.g. {@link JitsiConference#addTrack(JitsiTrack)},\n         * {@link JitsiConference#removeTrack(JitsiTrack)}).\n         * @type {boolean}\n         */\n        this.disposed = false;\n\n        /**\n         * The inactive handler which will be triggered when the underlying\n         * <tt>MediaStream</tt> ends.\n         *\n         * @private\n         * @type {Function}\n         */\n        this._streamInactiveHandler = streamInactiveHandler;\n\n        this._setStream(stream);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Adds onended/oninactive handler to a MediaStream or a MediaStreamTrack.\n     * Firefox doesn't fire a inactive event on the MediaStream, instead it fires\n     * a onended event on the MediaStreamTrack.\n     * @param {Function} handler the handler\n     */\n    _addMediaStreamInactiveHandler(handler) {\n        if (browser.isFirefox()) {\n            this.track.onended = handler;\n        } else {\n            this.stream.oninactive = handler;\n        }\n    }\n\n    /**\n     * Sets handler to the WebRTC MediaStream or MediaStreamTrack object\n     * depending on the passed type.\n     * @param {string} type the type of the handler that is going to be set\n     * @param {Function} handler the handler.\n     */\n    _setHandler(type, handler) {\n        if (!trackHandler2Prop.hasOwnProperty(type)) {\n            logger.error(`Invalid handler type ${type}`);\n\n            return;\n        }\n        if (handler) {\n            this.handlers.set(type, handler);\n        } else {\n            this.handlers.delete(type);\n        }\n\n        if (this.stream) {\n            for (const track of this.stream.getTracks()) {\n                track[trackHandler2Prop[type]] = handler;\n            }\n        }\n    }\n\n    /**\n     * Unregisters all event handlers bound to the underlying media stream/track\n     * @private\n     */\n    _unregisterHandlers() {\n        if (!this.stream) {\n            logger.warn(\n                `${this}: unable to unregister handlers - no stream object`);\n\n            return;\n        }\n\n        for (const type of this.handlers.keys()) {\n            // FIXME Why only video tracks?\n            for (const videoTrack of this.stream.getVideoTracks()) {\n                videoTrack[trackHandler2Prop[type]] = undefined;\n            }\n        }\n        if (this._streamInactiveHandler) {\n            this._addMediaStreamInactiveHandler(undefined);\n        }\n    }\n\n    /**\n     * Sets the stream property of JitsiTrack object and sets all stored\n     * handlers to it.\n     *\n     * @param {MediaStream} stream the new stream.\n     * @protected\n     */\n    _setStream(stream) {\n        if (this.stream === stream) {\n            return;\n        }\n\n        this.stream = stream;\n\n        // TODO Practically, that's like the opposite of _unregisterHandlers\n        // i.e. may be abstracted into a function/method called\n        // _registerHandlers for clarity and easing the maintenance of the two\n        // pieces of source code.\n        if (this.stream) {\n            for (const type of this.handlers.keys()) {\n                this._setHandler(type, this.handlers.get(type));\n            }\n            if (this._streamInactiveHandler) {\n                this._addMediaStreamInactiveHandler(this._streamInactiveHandler);\n            }\n        }\n    }\n\n    /**\n     * Returns the video type (camera or desktop) of this track.\n     */\n    getVideoType() {\n        return this.videoType;\n    }\n\n    /**\n     * Returns the type (audio or video) of this track.\n     */\n    getType() {\n        return this.type;\n    }\n\n    /**\n     * Check if this is an audio track.\n     */\n    isAudioTrack() {\n        return this.getType() === MediaType.AUDIO;\n    }\n\n    /**\n     * Checks whether the underlying WebRTC <tt>MediaStreamTrack</tt> is muted\n     * according to it's 'muted' field status.\n     * @return {boolean} <tt>true</tt> if the underlying\n     * <tt>MediaStreamTrack</tt> is muted or <tt>false</tt> otherwise.\n     */\n    isWebRTCTrackMuted() {\n        return this.track && this.track.muted;\n    }\n\n    /**\n     * Check if this is a video track.\n     */\n    isVideoTrack() {\n        return this.getType() === MediaType.VIDEO;\n    }\n\n    /**\n     * Checks whether this is a local track.\n     * @abstract\n     * @return {boolean} 'true' if it's a local track or 'false' otherwise.\n     */\n    isLocal() {\n        throw new Error('Not implemented by subclass');\n    }\n\n    /**\n     * Check whether this is a local audio track.\n     *\n     * @return {boolean} -  true if track represents a local audio track, false otherwise.\n     */\n    isLocalAudioTrack() {\n        return this.isAudioTrack() && this.isLocal();\n    }\n\n    /**\n     * Returns the WebRTC MediaStream instance.\n     */\n    getOriginalStream() {\n        return this.stream;\n    }\n\n    /**\n     * Returns the ID of the underlying WebRTC Media Stream(if any)\n     * @returns {String|null}\n     */\n    getStreamId() {\n        return this.stream ? this.stream.id : null;\n    }\n\n    /**\n     * Return the underlying WebRTC MediaStreamTrack\n     * @returns {MediaStreamTrack}\n     */\n    getTrack() {\n        return this.track;\n    }\n\n    /**\n     * Return the underlying WebRTC MediaStreamTrack label\n     * @returns {string}\n     */\n    getTrackLabel() {\n        return this.track.label;\n    }\n\n    /**\n     * Returns the ID of the underlying WebRTC MediaStreamTrack(if any)\n     * @returns {String|null}\n     */\n    getTrackId() {\n        return this.track ? this.track.id : null;\n    }\n\n    /**\n     * Return meaningful usage label for this track depending on it's media and\n     * eventual video type.\n     * @returns {string}\n     */\n    getUsageLabel() {\n        if (this.isAudioTrack()) {\n            return 'mic';\n        }\n\n        return this.videoType ? this.videoType : 'default';\n    }\n\n    /**\n     * Eventually will trigger RTCEvents.TRACK_ATTACHED event.\n     * @param container the video/audio container to which this stream is\n     *        attached and for which event will be fired.\n     * @private\n     */\n    _maybeFireTrackAttached(container) {\n        if (this.conference && container) {\n            this.conference._onTrackAttach(this, container);\n        }\n    }\n\n    /**\n     * Attaches the MediaStream of this track to an HTML container.\n     * Adds the container to the list of containers that are displaying the\n     * track.\n     *\n     * @param container the HTML container which can be 'video' or 'audio'\n     * element.\n     *\n     * @returns {void}\n     */\n    attach(container) {\n        if (this.stream) {\n            this._onTrackAttach(container);\n            RTCUtils.attachMediaStream(container, this.stream);\n        }\n        this.containers.push(container);\n        this._maybeFireTrackAttached(container);\n        this._attachTTFMTracker(container);\n    }\n\n    /**\n     * Removes this JitsiTrack from the passed HTML container.\n     *\n     * @param container the HTML container to detach from this JitsiTrack. If\n     * <tt>null</tt> or <tt>undefined</tt>, all containers are removed. A\n     * container can be a 'video', 'audio' or 'object' HTML element instance to\n     * which this JitsiTrack is currently attached.\n     */\n    detach(container) {\n        for (let cs = this.containers, i = cs.length - 1; i >= 0; --i) {\n            const c = cs[i];\n\n            if (!container) {\n                this._onTrackDetach(c);\n                RTCUtils.attachMediaStream(c, null);\n            }\n            if (!container || c === container) {\n                cs.splice(i, 1);\n            }\n        }\n\n        if (container) {\n            this._onTrackDetach(container);\n            RTCUtils.attachMediaStream(container, null);\n        }\n    }\n\n    /**\n     * Called when the track has been attached to a new container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _onTrackAttach(container) { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending JitsiTrack\n    }\n\n    /**\n     * Called when the track has been detached from a container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _onTrackDetach(container) { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending JitsiTrack\n    }\n\n    /**\n     * Attach time to first media tracker only if there is conference and only\n     * for the first element.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _attachTTFMTracker(container) { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending JitsiTrack\n    }\n\n    /**\n     * Removes attached event listeners.\n     *\n     * @returns {Promise}\n     */\n    dispose() {\n        this.removeAllListeners();\n\n        this.disposed = true;\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Returns true if this is a video track and the source of the video is a\n     * screen capture as opposed to a camera.\n     */\n    isScreenSharing() {\n        // FIXME: Should be fixed or removed.\n    }\n\n    /**\n     * Returns id of the track.\n     * @returns {string|null} id of the track or null if this is fake track.\n     */\n    getId() {\n        if (this.stream) {\n            return RTCUtils.getStreamID(this.stream);\n        }\n\n        return null;\n    }\n\n    /**\n     * Checks whether the MediaStream is active/not ended.\n     * When there is no check for active we don't have information and so\n     * will return that stream is active (in case of FF).\n     * @returns {boolean} whether MediaStream is active.\n     */\n    isActive() {\n        if (typeof this.stream.active !== 'undefined') {\n            return this.stream.active;\n        }\n\n        return true;\n    }\n\n    /**\n     * Sets the audio level for the stream\n     * @param {number} audioLevel value between 0 and 1\n     * @param {TraceablePeerConnection} [tpc] the peerconnection instance which\n     * is source for the audio level. It can be <tt>undefined</tt> for\n     * a local track if the audio level was measured outside of the\n     * peerconnection (see /modules/statistics/LocalStatsCollector.js).\n     */\n    setAudioLevel(audioLevel, tpc) {\n        let newAudioLevel = audioLevel;\n\n        // When using getSynchornizationSources on the audio receiver to gather audio levels for\n        // remote tracks, browser reports last known audio levels even when the remote user is\n        // audio muted, we need to reset the value to zero here so that the audio levels are cleared.\n        // Remote tracks have the tpc info present while local tracks do not.\n        if (browser.supportsReceiverStats() && typeof tpc !== 'undefined' && this.isMuted()) {\n            newAudioLevel = 0;\n        }\n\n        if (this.audioLevel !== newAudioLevel) {\n            this.audioLevel = newAudioLevel;\n            this.emit(\n                JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n                newAudioLevel,\n                tpc);\n\n        // LocalStatsCollector reports a value of 0.008 for muted mics\n        // and a value of 0 when there is no audio input.\n        } else if (this.audioLevel === 0\n            && newAudioLevel === 0\n            && this.isLocal()\n            && !this.isWebRTCTrackMuted()) {\n            this.emit(\n                JitsiTrackEvents.NO_AUDIO_INPUT,\n                newAudioLevel);\n        }\n    }\n\n    /**\n     * Returns the msid of the stream attached to the JitsiTrack object or null\n     * if no stream is attached.\n     */\n    getMSID() {\n        const streamId = this.getStreamId();\n        const trackId = this.getTrackId();\n\n        return streamId && trackId ? `${streamId} ${trackId}` : null;\n    }\n\n    /**\n     * Sets new audio output device for track's DOM elements. Video tracks are\n     * ignored.\n     * @param {string} audioOutputDeviceId - id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices(), '' for default device\n     * @emits JitsiTrackEvents.TRACK_AUDIO_OUTPUT_CHANGED\n     * @returns {Promise}\n     */\n    setAudioOutput(audioOutputDeviceId) {\n        if (!RTCUtils.isDeviceChangeAvailable('output')) {\n            return Promise.reject(\n                new Error('Audio output device change is not supported'));\n        }\n\n        // All audio communication is done through audio tracks, so ignore\n        // changing audio output for video tracks at all.\n        if (this.isVideoTrack()) {\n            return Promise.resolve();\n        }\n\n        return (\n            Promise.all(\n                this.containers.map(\n                    element =>\n                        element.setSinkId(audioOutputDeviceId)\n                            .catch(error => {\n                                logger.warn(\n                                    'Failed to change audio output device on'\n                                        + ' element. Default or previously set'\n                                        + ' audio output device will be used.',\n                                    element,\n                                    error);\n                                throw error;\n                            }))\n            )\n                .then(() => {\n                    this.emit(\n                        JitsiTrackEvents.TRACK_AUDIO_OUTPUT_CHANGED,\n                        audioOutputDeviceId);\n                }));\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport JitsiTrackError from '../../JitsiTrackError';\nimport {\n    TRACK_IS_DISPOSED,\n    TRACK_NO_STREAM_FOUND\n} from '../../JitsiTrackErrors';\nimport {\n    LOCAL_TRACK_STOPPED,\n    NO_DATA_FROM_SOURCE,\n    TRACK_MUTE_CHANGED\n} from '../../JitsiTrackEvents';\nimport CameraFacingMode from '../../service/RTC/CameraFacingMode';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport {\n    NO_BYTES_SENT,\n    TRACK_UNMUTED,\n    createNoDataFromSourceEvent\n} from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\nimport FeatureFlags from '../flags/FeatureFlags';\nimport Statistics from '../statistics/statistics';\n\nimport JitsiTrack from './JitsiTrack';\nimport RTCUtils from './RTCUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * Represents a single media track(either audio or video).\n * One <tt>JitsiLocalTrack</tt> corresponds to one WebRTC MediaStreamTrack.\n */\nexport default class JitsiLocalTrack extends JitsiTrack {\n    /**\n     * Constructs a new JitsiLocalTrack instance.\n     *\n     * @constructor\n     * @param {Object} trackInfo\n     * @param {number} trackInfo.rtcId - The ID assigned by the RTC module.\n     * @param {Object} trackInfo.stream - The WebRTC MediaStream, parent of the track.\n     * @param {Object} trackInfo.track - The underlying WebRTC MediaStreamTrack for new JitsiLocalTrack.\n     * @param {string} trackInfo.mediaType - The MediaType of the JitsiLocalTrack.\n     * @param {string} trackInfo.videoType - The VideoType of the JitsiLocalTrack.\n     * @param {Array<Object>} trackInfo.effects - The effects to be applied to the JitsiLocalTrack.\n     * @param {number} trackInfo.resolution - The the video resolution if it's a video track\n     * @param {string} trackInfo.deviceId - The ID of the local device for this track.\n     * @param {string} trackInfo.facingMode - Thehe camera facing mode used in getUserMedia call (for mobile only).\n     * @param {sourceId} trackInfo.sourceId - The id of the desktop sharing source. NOTE: defined for desktop sharing\n     * tracks only.\n     */\n    constructor({\n        deviceId,\n        facingMode,\n        mediaType,\n        resolution,\n        rtcId,\n        sourceId,\n        sourceType,\n        stream,\n        track,\n        videoType,\n        effects = []\n    }) {\n        super(\n            /* conference */ null,\n            stream,\n            track,\n            /* streamInactiveHandler */ () => this.emit(LOCAL_TRACK_STOPPED),\n            mediaType,\n            videoType);\n\n        this._setEffectInProgress = false;\n        const effect = effects.find(e => e.isEnabled(this));\n\n        if (effect) {\n            this._startStreamEffect(effect);\n        }\n\n        const displaySurface = videoType === VideoType.DESKTOP\n            ? track.getSettings().displaySurface\n            : null;\n\n        /**\n         * Track metadata.\n         */\n        this.metadata = {\n            timestamp: Date.now(),\n            ...displaySurface ? { displaySurface } : {}\n        };\n\n\n        /**\n         * The ID assigned by the RTC module on instance creation.\n         *\n         * @type {number}\n         */\n        this.rtcId = rtcId;\n        this.sourceId = sourceId;\n        this.sourceType = sourceType;\n\n        // Get the resolution from the track itself because it cannot be\n        // certain which resolution webrtc has fallen back to using.\n        this.resolution = track.getSettings().height;\n        this.maxEnabledResolution = resolution;\n\n        // Cache the constraints of the track in case of any this track\n        // model needs to call getUserMedia again, such as when unmuting.\n        this._constraints = track.getConstraints();\n\n        // Safari returns an empty constraints object, construct the constraints using getSettings.\n        if (!Object.keys(this._constraints).length && videoType === VideoType.CAMERA) {\n            this._constraints = {\n                height: track.getSettings().height,\n                width: track.getSettings().width\n            };\n        }\n\n        this.deviceId = deviceId;\n\n        /**\n         * The <tt>Promise</tt> which represents the progress of a previously\n         * queued/scheduled {@link _setMuted} (from the point of view of\n         * {@link _queueSetMuted}).\n         *\n         * @private\n         * @type {Promise}\n         */\n        this._prevSetMuted = Promise.resolve();\n\n        /**\n         * The facing mode of the camera from which this JitsiLocalTrack\n         * instance was obtained.\n         *\n         * @private\n         * @type {CameraFacingMode|undefined}\n         */\n        this._facingMode = facingMode;\n\n        // Currently there is no way to know the MediaStreamTrack ended due to\n        // to device disconnect in Firefox through e.g. \"readyState\" property.\n        // Instead we will compare current track's label with device labels from\n        // enumerateDevices() list.\n        this._trackEnded = false;\n\n        /**\n         * Indicates whether data has been sent or not.\n         */\n        this._hasSentData = false;\n\n        /**\n         * Used only for detection of audio problems. We want to check only once\n         * whether the track is sending data ot not. This flag is set to false\n         * after the check.\n         */\n        this._testDataSent = true;\n\n        // Currently there is no way to determine with what device track was\n        // created (until getConstraints() support), however we can associate\n        // tracks with real devices obtained from enumerateDevices() call as\n        // soon as it's called.\n        // NOTE: this.deviceId corresponds to the device id specified in GUM constraints and this._realDeviceId seems to\n        // correspond to the id of a matching device from the available device list.\n        this._realDeviceId = this.deviceId === '' ? undefined : this.deviceId;\n\n        // The source name that will be signaled for this track.\n        this._sourceName = null;\n\n        this._trackMutedTS = 0;\n\n        this._onDeviceListWillChange = devices => {\n            const oldRealDeviceId = this._realDeviceId;\n\n            this._setRealDeviceIdFromDeviceList(devices);\n\n            if (\n                // Mark track as ended for those browsers that do not support\n                // \"readyState\" property. We do not touch tracks created with\n                // default device ID \"\".\n                (typeof this.getTrack().readyState === 'undefined'\n                    && typeof this._realDeviceId !== 'undefined'\n                    && !devices.find(d => d.deviceId === this._realDeviceId))\n\n                // If there was an associated realDeviceID and after the device change the realDeviceId is undefined\n                // then the associated device has been disconnected and the _trackEnded flag needs to be set. In\n                // addition on some Chrome versions the readyState property is set after the device change event is\n                // triggered which causes issues in jitsi-meet with the selection of a new device because we don't\n                // detect that the old one was removed.\n                || (typeof oldRealDeviceId !== 'undefined' && typeof this._realDeviceId === 'undefined')\n            ) {\n                this._trackEnded = true;\n            }\n        };\n\n        // Subscribe each created local audio track to\n        // RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED event. This is different from\n        // handling this event for remote tracks (which are handled in RTC.js),\n        // because there might be local tracks not attached to a conference.\n        if (this.isAudioTrack() && RTCUtils.isDeviceChangeAvailable('output')) {\n            this._onAudioOutputDeviceChanged = this.setAudioOutput.bind(this);\n            RTCUtils.addListener(\n                RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                this._onAudioOutputDeviceChanged);\n        }\n\n        RTCUtils.addListener(RTCEvents.DEVICE_LIST_WILL_CHANGE, this._onDeviceListWillChange);\n\n        this._initNoDataFromSourceHandlers();\n    }\n\n    /**\n     * Adds stream to conference and marks it as \"unmute\" operation.\n     *\n     * @private\n     * @returns {Promise}\n     */\n    _addStreamToConferenceAsUnmute() {\n        if (!this.conference) {\n            return Promise.resolve();\n        }\n\n        // FIXME it would be good to not included conference as part of this process. Only TraceablePeerConnections to\n        // which the track is attached should care about this action. The TPCs to which the track is not attached can\n        // sync up when track is re-attached. A problem with that is that the \"modify sources\" queue is part of the\n        // JingleSessionPC and it would be excluded from the process. One solution would be to extract class between\n        // TPC and JingleSessionPC which would contain the queue and would notify the signaling layer when local SSRCs\n        // are changed. This would help to separate XMPP from the RTC module.\n        return new Promise((resolve, reject) => {\n            this.conference._addLocalTrackAsUnmute(this)\n                .then(resolve, error => reject(new Error(error)));\n        });\n    }\n\n    /**\n     * Fires NO_DATA_FROM_SOURCE event and logs it to analytics and callstats.\n     *\n     * @private\n     * @returns {void}\n     */\n    _fireNoDataFromSourceEvent() {\n        const value = !this.isReceivingData();\n\n        this.emit(NO_DATA_FROM_SOURCE, value);\n\n        // FIXME: Should we report all of those events\n        Statistics.sendAnalytics(createNoDataFromSourceEvent(this.getType(), value));\n        Statistics.sendLog(JSON.stringify({\n            name: NO_DATA_FROM_SOURCE,\n            log: value\n        }));\n    }\n\n    /**\n     * Sets handlers to the MediaStreamTrack object that will detect camera issues.\n     *\n     * @private\n     * @returns {void}\n     */\n    _initNoDataFromSourceHandlers() {\n        if (!this._isNoDataFromSourceEventsEnabled()) {\n            return;\n        }\n\n        this._setHandler('track_mute', () => {\n            this._trackMutedTS = window.performance.now();\n            this._fireNoDataFromSourceEvent();\n        });\n\n        this._setHandler('track_unmute', () => {\n            this._fireNoDataFromSourceEvent();\n            Statistics.sendAnalyticsAndLog(\n                TRACK_UNMUTED,\n                {\n                    'media_type': this.getType(),\n                    'track_type': 'local',\n                    value: window.performance.now() - this._trackMutedTS\n                });\n        });\n\n        if (this.isVideoTrack() && this.videoType === VideoType.CAMERA) {\n            this._setHandler('track_ended', () => {\n                if (!this.isReceivingData()) {\n                    this._fireNoDataFromSourceEvent();\n                }\n            });\n        }\n    }\n\n    /**\n     * Returns true if no data from source events are enabled for this JitsiLocalTrack and false otherwise.\n     *\n     * @private\n     * @returns {boolean} - True if no data from source events are enabled for this JitsiLocalTrack and false otherwise.\n     */\n    _isNoDataFromSourceEventsEnabled() {\n        // Disable the events for screen sharing.\n        return !this.isVideoTrack() || this.videoType !== VideoType.DESKTOP;\n    }\n\n    /**\n     * Initializes a new Promise to execute {@link #_setMuted}. May be called multiple times in a row and the\n     * invocations of {@link #_setMuted} and, consequently, {@link #mute} and/or {@link #unmute} will be resolved in a\n     * serialized fashion.\n     *\n     * @param {boolean} muted - The value to invoke <tt>_setMuted</tt> with.\n     * @private\n     * @returns {Promise}\n     */\n    _queueSetMuted(muted) {\n        const setMuted = this._setMuted.bind(this, muted);\n\n        this._prevSetMuted = this._prevSetMuted.then(setMuted, setMuted);\n\n        return this._prevSetMuted;\n    }\n\n    /**\n     * Removes stream from conference and marks it as \"mute\" operation.\n     *\n     * @param {Function} successCallback - Callback that will be called when the operation is successful.\n     * @param {Function} errorCallback - Callback that will be called when the operation fails.\n     * @private\n     * @returns {Promise}\n     */\n    _removeStreamFromConferenceAsMute(successCallback, errorCallback) {\n        if (!this.conference) {\n            successCallback();\n\n            return;\n        }\n        this.conference._removeLocalTrackAsMute(this).then(\n            successCallback,\n            error => errorCallback(new Error(error)));\n    }\n\n    /**\n     * Sends mute status for a track to conference if any.\n     *\n     * @param {boolean} mute - If track is muted.\n     * @private\n     * @returns {void}\n     */\n    _sendMuteStatus(mute) {\n        if (this.conference) {\n            this.conference._setTrackMuteStatus(this.getType(), this, mute) && this.conference.room.sendPresence();\n        }\n    }\n\n    /**\n     * Mutes / unmutes this track.\n     *\n     * @param {boolean} muted - If <tt>true</tt>, this track will be muted; otherwise, this track will be unmuted.\n     * @private\n     * @returns {Promise}\n     */\n    _setMuted(muted) {\n        if (this.isMuted() === muted\n            && !(this.videoType === VideoType.DESKTOP && FeatureFlags.isMultiStreamSupportEnabled())) {\n            return Promise.resolve();\n        }\n\n        if (this.disposed) {\n            return Promise.reject(new JitsiTrackError(TRACK_IS_DISPOSED));\n        }\n\n        let promise = Promise.resolve();\n\n        // A function that will print info about muted status transition\n        const logMuteInfo = () => logger.info(`Mute ${this}: ${muted}`);\n\n        // In the multi-stream mode, desktop tracks are muted from jitsi-meet instead of being removed from the\n        // conference. This is needed because we don't want the client to signal a source-remove to the remote peer for\n        // the desktop track when screenshare is stopped. Later when screenshare is started again, the same sender will\n        // be re-used without the need for signaling a new ssrc through source-add.\n        if (this.isAudioTrack()\n                || (this.videoType === VideoType.DESKTOP && !FeatureFlags.isMultiStreamSupportEnabled())\n                || !browser.doesVideoMuteByStreamRemove()) {\n            logMuteInfo();\n\n            // If we have a stream effect that implements its own mute functionality, prioritize it before\n            // normal mute e.g. the stream effect that implements system audio sharing has a custom\n            // mute state in which if the user mutes, system audio still has to go through.\n            if (this._streamEffect && this._streamEffect.setMuted) {\n                this._streamEffect.setMuted(muted);\n            } else if (this.track) {\n                this.track.enabled = !muted;\n            }\n        } else if (muted) {\n            promise = new Promise((resolve, reject) => {\n                logMuteInfo();\n                this._removeStreamFromConferenceAsMute(\n                    () => {\n                        if (this._streamEffect) {\n                            this._stopStreamEffect();\n                        }\n\n                        // FIXME: Maybe here we should set the SRC for the\n                        // containers to something\n                        // We don't want any events to be fired on this stream\n                        this._unregisterHandlers();\n                        this.stopStream();\n                        this._setStream(null);\n\n                        resolve();\n                    },\n                    reject);\n            });\n        } else {\n            logMuteInfo();\n\n            // This path is only for camera.\n            const streamOptions = {\n                cameraDeviceId: this.getDeviceId(),\n                devices: [ MediaType.VIDEO ],\n                effects: this._streamEffect ? [ this._streamEffect ] : [],\n                facingMode: this.getCameraFacingMode()\n            };\n\n            promise\n                = RTCUtils.obtainAudioAndVideoPermissions(Object.assign(\n                    {},\n                    streamOptions,\n                    { constraints: { video: this._constraints } }));\n\n            promise = promise.then(streamsInfo => {\n                // The track kind for presenter track is video as well.\n                const mediaType = this.getType() === MediaType.PRESENTER ? MediaType.VIDEO : this.getType();\n                const streamInfo = streamsInfo.find(info => info.track.kind === mediaType);\n\n                if (streamInfo) {\n                    this._setStream(streamInfo.stream);\n                    this.track = streamInfo.track;\n\n                    // This is not good when video type changes after\n                    // unmute, but let's not crash here\n                    if (this.videoType !== streamInfo.videoType) {\n                        logger.warn(\n                            `${this}: video type has changed after unmute!`,\n                            this.videoType, streamInfo.videoType);\n                        this.videoType = streamInfo.videoType;\n                    }\n                } else {\n                    throw new JitsiTrackError(TRACK_NO_STREAM_FOUND);\n                }\n\n                if (this._streamEffect) {\n                    this._startStreamEffect(this._streamEffect);\n                }\n\n                this.containers.map(cont => RTCUtils.attachMediaStream(cont, this.stream));\n\n                return this._addStreamToConferenceAsUnmute();\n            });\n        }\n\n        return promise\n            .then(() => {\n                this._sendMuteStatus(muted);\n\n                // Send the videoType message to the bridge.\n                this.isVideoTrack() && this.conference && this.conference._sendBridgeVideoTypeMessage(this);\n                this.emit(TRACK_MUTE_CHANGED, this);\n            });\n    }\n\n    /**\n     * Sets real device ID by comparing track information with device information. This is temporary solution until\n     * getConstraints() method will be implemented in browsers.\n     *\n     * @param {MediaDeviceInfo[]} devices - The list of devices obtained from enumerateDevices() call.\n     * @private\n     * @returns {void}\n     */\n    _setRealDeviceIdFromDeviceList(devices) {\n        const track = this.getTrack();\n        const kind = `${track.kind}input`;\n\n        // We need to match by deviceId as well, in case of multiple devices with the same label.\n        let device = devices.find(d => d.kind === kind && d.label === track.label && d.deviceId === this.deviceId);\n\n        if (!device && this._realDeviceId === 'default') { // the default device has been changed.\n            // If the default device was 'A' and the default device is changed to 'B' the label for the track will\n            // remain 'Default - A' but the label for the device in the device list will be updated to 'A'. That's\n            // why in order to match it we need to remove the 'Default - ' part.\n            const label = (track.label || '').replace('Default - ', '');\n\n            device = devices.find(d => d.kind === kind && d.label === label);\n        }\n\n        if (device) {\n            this._realDeviceId = device.deviceId;\n        } else {\n            this._realDeviceId = undefined;\n        }\n    }\n\n    /**\n     * Sets the stream property of JitsiLocalTrack object and sets all stored handlers to it.\n     *\n     * @param {MediaStream} stream - The new MediaStream.\n     * @private\n     * @returns {void}\n     */\n    _setStream(stream) {\n        super._setStream(stream);\n\n        if (stream) {\n            // Store the MSID for video mute/unmute purposes.\n            this.storedMSID = this.getMSID();\n            logger.debug(`Setting new MSID: ${this.storedMSID} on ${this}`);\n        } else {\n            logger.debug(`Setting 'null' stream on ${this}`);\n        }\n    }\n\n    /**\n     * Starts the effect process and returns the modified stream.\n     *\n     * @param {Object} effect - Represents effect instance\n     * @private\n     * @returns {void}\n     */\n    _startStreamEffect(effect) {\n        this._streamEffect = effect;\n        this._originalStream = this.stream;\n        this._setStream(this._streamEffect.startEffect(this._originalStream));\n        this.track = this.stream.getTracks()[0];\n    }\n\n    /**\n     * Stops the effect process and returns the original stream.\n     *\n     * @private\n     * @returns {void}\n     */\n    _stopStreamEffect() {\n        if (this._streamEffect) {\n            this._streamEffect.stopEffect();\n            this._setStream(this._originalStream);\n            this._originalStream = null;\n            this.track = this.stream ? this.stream.getTracks()[0] : null;\n        }\n    }\n\n    /**\n     * Switches the camera facing mode if the WebRTC implementation supports the custom MediaStreamTrack._switchCamera\n     * method. Currently, the method in question is implemented in react-native-webrtc only. When such a WebRTC\n     * implementation is executing, the method is the preferred way to switch between the front/user-facing and the\n     * back/environment-facing cameras because it will likely be (as is the case of react-native-webrtc) noticeably\n     * faster that creating a new MediaStreamTrack via a new getUserMedia call with the switched facingMode constraint\n     * value. Moreover, the approach with a new getUserMedia call may not even work: WebRTC on Android and iOS is\n     * either very slow to open the camera a second time or plainly freezes attempting to do that.\n     *\n     * @returns {void}\n     */\n    _switchCamera() {\n        if (this.isVideoTrack()\n                && this.videoType === VideoType.CAMERA\n                && typeof this.track._switchCamera === 'function') {\n            this.track._switchCamera();\n\n            this._facingMode\n                = this._facingMode === CameraFacingMode.ENVIRONMENT\n                    ? CameraFacingMode.USER\n                    : CameraFacingMode.ENVIRONMENT;\n        }\n    }\n\n    /**\n     * Stops the currently used effect (if there is one) and starts the passed effect (if there is one).\n     *\n     * @param {Object|undefined} effect - The new effect to be set.\n     * @private\n     * @returns {void}\n     */\n    _switchStreamEffect(effect) {\n        if (this._streamEffect) {\n            this._stopStreamEffect();\n            this._streamEffect = undefined;\n        }\n        if (effect) {\n            this._startStreamEffect(effect);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     *\n     * Stops sending the media track. And removes it from the HTML. NOTE: Works for local tracks only.\n     *\n     * @extends JitsiTrack#dispose\n     * @returns {Promise}\n     */\n    dispose() {\n        let promise = Promise.resolve();\n\n        // Remove the effect instead of stopping it so that the original stream is restored\n        // on both the local track and on the peerconnection.\n        if (this._streamEffect) {\n            promise = this.setEffect();\n        }\n\n        if (this.conference) {\n            promise = promise.then(() => this.conference.removeTrack(this));\n        }\n\n        if (this.stream) {\n            this.stopStream();\n            this.detach();\n        }\n\n        RTCUtils.removeListener(RTCEvents.DEVICE_LIST_WILL_CHANGE, this._onDeviceListWillChange);\n\n        if (this._onAudioOutputDeviceChanged) {\n            RTCUtils.removeListener(RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                this._onAudioOutputDeviceChanged);\n        }\n\n        return promise.then(() => super.dispose());\n    }\n\n    /**\n     * Returns facing mode for video track from camera. For other cases (e.g. audio track or 'desktop' video track)\n     * returns undefined.\n     *\n     * @returns {CameraFacingMode|undefined}\n     */\n    getCameraFacingMode() {\n        if (this.isVideoTrack() && this.videoType === VideoType.CAMERA) {\n            // MediaStreamTrack#getSettings() is not implemented in many\n            // browsers, so we need feature checking here. Progress on the\n            // respective browser's implementation can be tracked at\n            // https://bugs.chromium.org/p/webrtc/issues/detail?id=2481 for\n            // Chromium and https://bugzilla.mozilla.org/show_bug.cgi?id=1213517\n            // for Firefox. Even if a browser implements getSettings() already,\n            // it might still not return anything for 'facingMode'.\n            const trackSettings = this.track.getSettings?.();\n\n            if (trackSettings && 'facingMode' in trackSettings) {\n                return trackSettings.facingMode;\n            }\n\n            if (typeof this._facingMode !== 'undefined') {\n                return this._facingMode;\n            }\n\n            // In most cases we are showing a webcam. So if we've gotten here,\n            // it should be relatively safe to assume that we are probably\n            // showing the user-facing camera.\n            return CameraFacingMode.USER;\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Returns device id associated with track.\n     *\n     * @returns {string}\n     */\n    getDeviceId() {\n        return this._realDeviceId || this.deviceId;\n    }\n\n    /**\n     * Get the duration of the track.\n     *\n     * @returns {Number} the duration of the track in seconds\n     */\n    getDuration() {\n        return (Date.now() / 1000) - (this.metadata.timestamp / 1000);\n    }\n\n    /**\n     * Returns the participant id which owns the track.\n     *\n     * @returns {string} the id of the participants. It corresponds to the\n     * Colibri endpoint id/MUC nickname in case of Jitsi-meet.\n     */\n    getParticipantId() {\n        return this.conference && this.conference.myUserId();\n    }\n\n    /**\n     * Returns the source name associated with the jitsi track.\n     *\n     * @returns {string | null} source name\n     */\n    getSourceName() {\n        return this._sourceName;\n    }\n\n    /**\n     * Returns if associated MediaStreamTrack is in the 'ended' state\n     *\n     * @returns {boolean}\n     */\n    isEnded() {\n        if (this.isVideoTrack() && this.isMuted()) {\n            // If a video track is muted the readyState will be ended, that's why we need to rely only on the\n            // _trackEnded flag.\n            return this._trackEnded;\n        }\n\n        return this.getTrack().readyState === 'ended' || this._trackEnded;\n    }\n\n    /**\n     * Returns <tt>true</tt>.\n     *\n     * @returns {boolean} <tt>true</tt>\n     */\n    isLocal() {\n        return true;\n    }\n\n    /**\n     * Returns <tt>true</tt> - if the stream is muted and <tt>false</tt> otherwise.\n     *\n     * @returns {boolean} <tt>true</tt> - if the stream is muted and <tt>false</tt> otherwise.\n     */\n    isMuted() {\n        // this.stream will be null when we mute local video on Chrome\n        if (!this.stream) {\n            return true;\n        }\n        if (this.isVideoTrack() && !this.isActive()) {\n            return true;\n        }\n\n        // If currently used stream effect has its own muted state, use that.\n        if (this._streamEffect && this._streamEffect.isMuted) {\n            return this._streamEffect.isMuted();\n        }\n\n        return !this.track || !this.track.enabled;\n    }\n\n    /**\n     * Checks whether the attached MediaStream is receiving data from source or not. If the stream property is null\n     * (because of mute or another reason) this method will return false.\n     * NOTE: This method doesn't indicate problem with the streams directly. For example in case of video mute the\n     * method will return false or if the user has disposed the track.\n     *\n     * @returns {boolean} true if the stream is receiving data and false this otherwise.\n     */\n    isReceivingData() {\n        if (this.isVideoTrack()\n            && (this.isMuted() || this._stopStreamInProgress || this.videoType === VideoType.DESKTOP)) {\n            return true;\n        }\n\n        if (!this.stream) {\n            return false;\n        }\n\n        // In older version of the spec there is no muted property and readyState can have value muted. In the latest\n        // versions readyState can have values \"live\" and \"ended\" and there is muted boolean property. If the stream is\n        // muted that means that we aren't receiving any data from the source. We want to notify the users for error if\n        // the stream is muted or ended on it's creation.\n\n        // For video blur enabled use the original video stream\n        const stream = this._effectEnabled ? this._originalStream : this.stream;\n\n        return stream.getTracks().some(track =>\n            (!('readyState' in track) || track.readyState === 'live')\n                && (!('muted' in track) || track.muted !== true));\n    }\n\n    /**\n     * Asynchronously mutes this track.\n     *\n     * @returns {Promise}\n     */\n    mute() {\n        return this._queueSetMuted(true);\n    }\n\n    /**\n     * Handles bytes sent statistics. NOTE: used only for audio tracks to detect audio issues.\n     *\n     * @param {TraceablePeerConnection} tpc - The peerconnection that is reporting the bytes sent stat.\n     * @param {number} bytesSent - The new value.\n     * @returns {void}\n     */\n    onByteSentStatsReceived(tpc, bytesSent) {\n        if (bytesSent > 0) {\n            this._hasSentData = true;\n        }\n        const iceConnectionState = tpc.getConnectionState();\n\n        if (this._testDataSent && iceConnectionState === 'connected') {\n            setTimeout(() => {\n                if (!this._hasSentData) {\n                    logger.warn(`${this} 'bytes sent' <= 0: \\\n                        ${bytesSent}`);\n\n                    Statistics.analytics.sendEvent(NO_BYTES_SENT, { 'media_type': this.getType() });\n                }\n            }, 3000);\n            this._testDataSent = false;\n        }\n    }\n\n    /**\n     * Sets the JitsiConference object associated with the track. This is temp solution.\n     *\n     * @param conference - JitsiConference object.\n     * @returns {void}\n     */\n    setConference(conference) {\n        this.conference = conference;\n\n        // We want to keep up with postponed events which should have been fired\n        // on \"attach\" call, but for local track we not always have the\n        // conference before attaching. However this may result in duplicated\n        // events if they have been triggered on \"attach\" already.\n        for (let i = 0; i < this.containers.length; i++) {\n            this._maybeFireTrackAttached(this.containers[i]);\n        }\n    }\n\n    /**\n     * Sets the effect and switches between the modified stream and original one.\n     *\n     * @param {Object} effect - Represents the effect instance to be used.\n     * @returns {Promise}\n     */\n    setEffect(effect) {\n        if (typeof this._streamEffect === 'undefined' && typeof effect === 'undefined') {\n            return Promise.resolve();\n        }\n\n        if (typeof effect !== 'undefined' && !effect.isEnabled(this)) {\n            return Promise.reject(new Error('Incompatible effect instance!'));\n        }\n\n        if (this._setEffectInProgress === true) {\n            return Promise.reject(new Error('setEffect already in progress!'));\n        }\n\n        // In case we have an audio track that is being enhanced with an effect, we still want it to be applied,\n        // even if the track is muted. Where as for video the actual track doesn't exists if it's muted.\n        if (this.isMuted() && !this.isAudioTrack()) {\n            this._streamEffect = effect;\n\n            return Promise.resolve();\n        }\n\n        const conference = this.conference;\n\n        if (!conference) {\n            this._switchStreamEffect(effect);\n            if (this.isVideoTrack()) {\n                this.containers.forEach(cont => RTCUtils.attachMediaStream(cont, this.stream));\n            }\n\n            return Promise.resolve();\n        }\n\n        this._setEffectInProgress = true;\n\n        // TODO: Create new JingleSessionPC method for replacing a stream in JitsiLocalTrack without offer answer.\n        return conference.removeTrack(this)\n            .then(() => {\n                this._switchStreamEffect(effect);\n                if (this.isVideoTrack()) {\n                    this.containers.forEach(cont => RTCUtils.attachMediaStream(cont, this.stream));\n                }\n\n                return conference.addTrack(this);\n            })\n            .then(() => {\n                this._setEffectInProgress = false;\n            })\n            .catch(error => {\n                // Any error will be not recovarable and will trigger CONFERENCE_FAILED event. But let's try to cleanup\n                // everyhting related to the effect functionality.\n                this._setEffectInProgress = false;\n                this._switchStreamEffect();\n                logger.error('Failed to switch to the new stream!', error);\n                throw error;\n            });\n    }\n\n    /**\n     * Sets the source name to be used for signaling the jitsi track.\n     *\n     * @param {string} name The source name.\n     */\n    setSourceName(name) {\n        this._sourceName = name;\n    }\n\n    /**\n     * Stops the associated MediaStream.\n     *\n     * @returns {void}\n     */\n    stopStream() {\n        /**\n         * Indicates that we are executing {@link #stopStream} i.e.\n         * {@link RTCUtils#stopMediaStream} for the <tt>MediaStream</tt>\n         * associated with this <tt>JitsiTrack</tt> instance.\n         *\n         * @private\n         * @type {boolean}\n         */\n        this._stopStreamInProgress = true;\n\n        try {\n            RTCUtils.stopMediaStream(this.stream);\n        } finally {\n            this._stopStreamInProgress = false;\n        }\n    }\n\n    /**\n     * Creates a text representation of this local track instance.\n     *\n     * @return {string}\n     */\n    toString() {\n        return `LocalTrack[${this.rtcId},${this.getType()}]`;\n    }\n\n    /**\n     * Asynchronously unmutes this track.\n     *\n     * @returns {Promise}\n     */\n    unmute() {\n        return this._queueSetMuted(false);\n    }\n}\n","/* Copyright @ 2015 - Present, 8x8 Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport transform from 'sdp-transform';\n\n/**\n * Rewrites the source information in the way sdp-transform expects.\n * Source information is split into multiple ssrc objects each containing\n * an id, attribute and value.\n * @param {Object} media - media description to be modified.\n * @returns {void}\n */\nconst write = function(session, opts) {\n    if (typeof session !== 'undefined' && typeof session.media !== 'undefined' && Array.isArray(session.media)) {\n        session.media.forEach(mLine => {\n            if (mLine.sources && mLine.sources.length) {\n                mLine.ssrcs = [];\n                mLine.sources.forEach(source => {\n                    Object.keys(source).forEach(attribute => {\n                        if (attribute === 'id') {\n                            return;\n                        }\n                        mLine.ssrcs.push({\n                            id: source.id,\n                            attribute,\n                            value: source[attribute]\n                        });\n                    });\n                });\n                delete mLine.sources;\n            }\n\n            // join ssrcs in ssrc groups\n            if (mLine.ssrcGroups && mLine.ssrcGroups.length) {\n                mLine.ssrcGroups.forEach(ssrcGroup => {\n                    if (typeof ssrcGroup.ssrcs !== 'undefined'\n                    && Array.isArray(ssrcGroup.ssrcs)) {\n                        ssrcGroup.ssrcs = ssrcGroup.ssrcs.join(' ');\n                    }\n                });\n            }\n        });\n    }\n\n    return transform.write(session, opts);\n};\n\n/**\n * Rewrites the source information that we get from sdp-transform.\n * All the ssrc lines with different attributes that belong to the\n * same ssrc are grouped into a single soure object with multiple key value pairs.\n * @param {Object} media - media description to be modified.\n * @returns {void}\n */\nconst parse = function(sdp) {\n    const session = transform.parse(sdp);\n\n    if (typeof session !== 'undefined' && typeof session.media !== 'undefined' && Array.isArray(session.media)) {\n        session.media.forEach(mLine => {\n            // group sources attributes by ssrc\n            if (typeof mLine.ssrcs !== 'undefined' && Array.isArray(mLine.ssrcs)) {\n                mLine.sources = [];\n                mLine.ssrcs.forEach(ssrc => {\n                    const found = mLine.sources.findIndex(source => source.id === ssrc.id);\n\n                    if (found > -1) {\n                        mLine.sources[found][ssrc.attribute] = ssrc.value;\n                    } else {\n                        const src = { id: ssrc.id };\n\n                        src[ssrc.attribute] = ssrc.value;\n                        mLine.sources.push(src);\n                    }\n                });\n                delete mLine.ssrcs;\n            }\n\n            // split ssrcs in ssrc groups\n            if (typeof mLine.ssrcGroups !== 'undefined' && Array.isArray(mLine.ssrcGroups)) {\n                mLine.ssrcGroups.forEach(ssrcGroup => {\n                    if (typeof ssrcGroup.ssrcs === 'string') {\n                        ssrcGroup.ssrcs = ssrcGroup.ssrcs.split(' ');\n                    }\n                });\n            }\n        });\n    }\n\n    return session;\n};\n\nexport default {\n    write,\n    parse\n};\n","/* Copyright @ 2015 - Present, 8x8 Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport clonedeep from 'lodash.clonedeep';\n\nimport transform from './transform.js';\n\nconst PLAN_B_MIDS = [ 'audio', 'video', 'data' ];\nconst findSimGroup = ssrcGroup => ssrcGroup.find(grp => grp.semantics === 'SIM');\nconst findFidGroup = ssrcGroup => ssrcGroup.find(grp => grp.semantics === 'FID');\n\n/**\n * Add the ssrcs of the SIM group and their corresponding FID group ssrcs\n * to the m-line.\n * @param {Object} mLine - The m-line to which ssrcs have to be added.\n * @param {Object} simGroup - The SIM group whose ssrcs have to be added to\n * the m-line.\n * @param {Object} sourceGroups - inverted source-group map.\n * @param {Array<Object>} sourceList - array containing all the sources.\n */\nfunction addSimGroupSources(mLine, simGroup, sourceGroups, sourceList) {\n    if (!mLine || !simGroup) {\n        return;\n    }\n    const findSourcebyId = src => sourceList.find(source => source.id.toString() === src);\n\n    simGroup.ssrcs.forEach(src => {\n        mLine.sources.push(findSourcebyId(src));\n\n        // find the related FID group member for this ssrc.\n        const relatedFidGroup = sourceGroups[parseInt(src, 10)].find(grp => grp.semantics === 'FID');\n\n        if (relatedFidGroup) {\n            const relatedSsrc = relatedFidGroup.ssrcs.find(s => s !== src);\n\n            mLine.sources.push(findSourcebyId(relatedSsrc));\n            mLine.ssrcGroups.push(relatedFidGroup);\n        }\n    });\n\n    // Add the SIM group last.\n    mLine.ssrcGroups.push(simGroup);\n}\n\n/**\n * Add ssrcs and ssrc-groups to the m-line. When a primary ssrc, i.e., the\n * first ssrc in a SIM group is passed, all the other ssrcs from the SIM\n * group and the other ssrcs from the related FID groups are added to the same\n * m-line since they all belong to the same remote source. Since the ssrcs are\n * not guaranteed to be in the correct order, try to find if a SIM group exists,\n * if not, just add the FID group.\n * @param {Object} mLine - The m-line to which ssrcs have to be added.\n * @param {Object} ssrc - the primary ssrc.\n * @param {Object} sourceGroups - inverted source-group map.\n * @param {Array<Object>} sourceList - array containing all the sources.\n * @returns {void}\n */\nfunction addSourcesToMline(mLine, ssrc, sourceGroups, sourceList) {\n    if (!mLine || !ssrc) {\n        return;\n    }\n    mLine.sources = [];\n    mLine.ssrcGroups = [];\n\n    // If there are no associated ssrc-groups, just add the ssrc and msid.\n    if (!sourceGroups[ssrc.id]) {\n        mLine.sources.push(ssrc);\n        mLine.msid = ssrc.msid;\n\n        return;\n    }\n    const findSourcebyId = src => sourceList.find(source => source.id.toString() === src);\n\n    // Find the SIM and FID groups that this ssrc belongs to.\n    const simGroup = findSimGroup(sourceGroups[ssrc.id]);\n    const fidGroup = findFidGroup(sourceGroups[ssrc.id]);\n\n    // Add the ssrcs for the SIM group and their corresponding FID groups.\n    if (simGroup) {\n        addSimGroupSources(mLine, simGroup, sourceGroups, sourceList);\n    } else if (fidGroup) {\n        // check if the other ssrc from this FID group is part of a SIM group\n        const otherSsrc = fidGroup.ssrcs.find(s => s !== ssrc);\n        const simGroup2 = findSimGroup(sourceGroups[otherSsrc]);\n\n        if (simGroup2) {\n            addSimGroupSources(mLine, simGroup2, sourceGroups, sourceList);\n        } else {\n            // Add the FID group ssrcs.\n            fidGroup.ssrcs.forEach(src => {\n                mLine.sources.push(findSourcebyId(src));\n            });\n            mLine.ssrcGroups.push(fidGroup);\n        }\n    }\n\n    // Set the msid for the media description using the msid attribute of the ssrcs.\n    mLine.msid = mLine.sources[0].msid;\n}\n\n/**\n * Check if a new SDP requests an ICE restart.\n * @param {Object} - the parsed new SDP\n * @param {Object} - the parsed previous SDP\n * @returns {Boolean} - Returns true if an ICE restart is requested otherwise false.\n */\nfunction checkForIceRestart(newDesc, oldDesc) {\n    if (!newDesc || !oldDesc || newDesc.media.length === 0 || oldDesc.media.length === 0) {\n        return false;\n    }\n\n    const newMLine = newDesc.media[0];\n    const oldMLine = oldDesc.media[0];\n\n    return newMLine.iceUfrag !== oldMLine.iceUfrag || newMLine.icePwd !== oldMLine.icePwd;\n}\n\n/**\n * Returns a rejected m-line (with port 0) if its exists in the provided description.\n * @param {Object} desc - the current remote description.\n * @param {String} mediaType - media type.\n * @returns {Object}\n */\nfunction checkForRejectedMlines(desc, mediaType) {\n    if (!desc || !mediaType) {\n        return null;\n    }\n\n    return desc.media.find(m => m.port === 0 && m.type === mediaType);\n}\n\n/**\n * Checks if there is a mline for the given ssrc or its related primary ssrc.\n * We always implode the SIM group to the first ssrc in the SIM group before sRD,\n * so we also check if mline for that ssrc exists.\n * For example:\n * If the following ssrcs are in a SIM group,\n * <ssrc-group xmlns=\\\"urn:xmpp:jingle:apps:rtp:ssma:0\\\" semantics=\\\"SIM\\\">\n *        <source ssrc=\\\"1806330949\\\"/>\n *        <source ssrc=\\\"4173145196\\\"/>\n *        <source ssrc=\\\"2002632207\\\"/>\n * </ssrc-group>\n * This method returns true for any one of the 3 ssrcs if there is a mline for 1806330949.\n * @param {Object} ssrc - ssrc to check.\n * @param {Object} sourceGroups - inverted source-group map.\n * @param {Array<Object>} mlines - mlines in the description\n\n * @returns {Boolean} - Returns true if mline for the given ssrc or the related primary ssrc\n * exists, returns false otherwise.\n */\nfunction checkIfMlineForSsrcExists(ssrc, sourceGroups, mlines) {\n    const findMatchingMline = mline => {\n        if (mline.sources) {\n            return mline.sources.some(source => source.id === ssrc.id);\n        }\n\n        return false;\n    };\n\n    if (!mlines.find(findMatchingMline)) {\n        // check if this ssrc is member of a SIM group. If so, check if there\n        // is a matching m-line for the primary ssrc of the SIM group.\n        if (!sourceGroups[ssrc.id]) {\n            return false;\n        }\n        const simGroup = findSimGroup(sourceGroups[ssrc.id]);\n        const fidGroup = findFidGroup(sourceGroups[ssrc.id]);\n\n        if (simGroup) {\n            return mlines.some(mline => mline.sources\n                && mline.sources.some(src => src.id.toString() === simGroup.ssrcs[0]));\n        } else if (fidGroup && ssrc.id.toString() !== fidGroup.ssrcs[0]) {\n            const otherSsrc = { id: fidGroup.ssrcs[0] };\n\n            return checkIfMlineForSsrcExists(otherSsrc, sourceGroups, mlines);\n\n        }\n\n        return false;\n    }\n\n    return true;\n}\n\n/**\n * Create an inverted sourceGroup map to put all the grouped ssrcs\n * in the same m-line.\n * @param {Array<Object>} sourceGroups\n * @returns {Object} - An inverted sourceGroup map.\n */\nfunction createSourceGroupMap(sourceGroups) {\n    const ssrc2group = {};\n\n    if (!sourceGroups || !Array.isArray(sourceGroups)) {\n        return ssrc2group;\n    }\n    sourceGroups.forEach(group => {\n        if (group.ssrcs && Array.isArray(group.ssrcs)) {\n            group.ssrcs.forEach(ssrc => {\n                if (typeof ssrc2group[ssrc] === 'undefined') {\n                    ssrc2group[ssrc] = [];\n                }\n                ssrc2group[ssrc].push(group);\n            });\n        }\n    });\n\n    return ssrc2group;\n}\n\n/**\n * Interop provides an API for tranforming a Plan B SDP to a Unified Plan SDP and\n * vice versa.\n */\nexport class Interop {\n    /**\n     * This method transforms a Unified Plan SDP to an equivalent Plan B SDP.\n     * @param {RTCSessionDescription} description - The description in Unified plan format.\n     * @returns RTCSessionDescription - The transformed session description.\n     */\n    toPlanB(description) {\n        if (!description || typeof description.sdp !== 'string') {\n            console.warn('An empty description was passed as an argument.');\n\n            return description;\n        }\n\n        // Objectify the SDP for easier manipulation.\n        const session = transform.parse(description.sdp);\n\n        // If the SDP contains no media, there's nothing to transform.\n        if (!session.media || !session.media.length) {\n            console.warn('The description has no media.');\n\n            return description;\n        }\n\n        // Make sure this is a unified plan sdp\n        if (session.media.every(m => PLAN_B_MIDS.indexOf(m.mid) !== -1)) {\n            console.warn('The description does not look like unified plan sdp');\n\n            return description;\n        }\n\n        const media = {};\n        const sessionMedia = session.media;\n\n        session.media = [];\n        sessionMedia.forEach(mLine => {\n            const type = mLine.type;\n\n            if (type === 'application') {\n                mLine.mid = 'data';\n                media[mLine.mid] = mLine;\n\n                return;\n            }\n            if (typeof media[type] === 'undefined') {\n                const bLine = clonedeep(mLine);\n\n                // Copy the msid attribute to all the ssrcs if they belong to the same source group\n                if (bLine.sources && Array.isArray(bLine.sources)) {\n                    bLine.sources.forEach(source => {\n                        mLine.msid ? source.msid = mLine.msid : delete source.msid;\n                    });\n                }\n\n                // Do not signal the FID groups if there is no msid attribute present\n                // on the sources as sesison-accept with this source info will fail strophe\n                // validation and the session will not be established. This behavior is seen\n                // on Firefox (with RTX enabled) when no video source is added at the join time.\n                // FF generates two recvonly ssrcs with no msid and a corresponding FID group in\n                // this case.\n                if (!bLine.ssrcGroups || !mLine.msid) {\n                    bLine.ssrcGroups = [];\n                }\n                delete bLine.msid;\n                bLine.mid = type;\n                media[type] = bLine;\n            } else if (mLine.msid) {\n                // Add sources and source-groups to the existing m-line of the same media type.\n                if (mLine.sources && Array.isArray(mLine.sources)) {\n                    media[type].sources = (media[type].sources || []).concat(mLine.sources);\n                }\n                if (typeof mLine.ssrcGroups !== 'undefined' && Array.isArray(mLine.ssrcGroups)) {\n                    media[type].ssrcGroups = media[type].ssrcGroups.concat(mLine.ssrcGroups);\n                }\n            }\n        });\n        session.media = Object.values(media);\n\n        // Bundle the media only if it is active.\n        const bundle = [];\n\n        Object.values(media).forEach(mline => {\n            if (mline.direction !== 'inactive') {\n                bundle.push(mline.mid);\n            }\n        });\n\n        // We regenerate the BUNDLE group with the new mids.\n        session.groups.forEach(group => {\n            if (group.type === 'BUNDLE') {\n                group.mids = bundle.join(' ');\n            }\n        });\n\n        // msid semantic\n        session.msidSemantic = {\n            semantic: 'WMS',\n            token: '*'\n        };\n        const resStr = transform.write(session);\n\n        return new RTCSessionDescription({\n            type: description.type,\n            sdp: resStr\n        });\n    }\n\n    /**\n     * This method transforms a Plan B SDP to an equivalent Unified Plan SDP.\n     * @param {RTCSessionDescription} description - The description in plan-b format.\n     * @param {RTCSessionDescription} current - The current description set on\n     * the peerconnection in Unified-plan format, i.e., the readonly attribute\n     * remoteDescription on the RTCPeerConnection object.\n     * @returns RTCSessionDescription - The transformed session description.\n     */\n    toUnifiedPlan(description, current = null) {\n        if (!description || typeof description.sdp !== 'string') {\n            console.warn('An empty description was passed as an argument.');\n\n            return description;\n        }\n\n        // Objectify the SDP for easier manipulation.\n        const session = transform.parse(description.sdp);\n\n        // If the SDP contains no media, there's nothing to transform.\n        if (!session.media || !session.media.length) {\n            console.warn('The description has no media.');\n\n            return description;\n        }\n\n        // Make sure this is a plan-b sdp.\n        if (session.media.length > 3 || session.media.every(m => PLAN_B_MIDS.indexOf(m.mid) === -1)) {\n            console.warn('The description does not look like plan-b');\n\n            return description;\n        }\n        const currentDesc = current ? transform.parse(current.sdp) : null;\n        const iceRestart = checkForIceRestart(session, currentDesc);\n        const newIceUfrag = session.media[0].iceUfrag;\n        const newIcePwd = session.media[0].icePwd;\n        const newFingerprint = session.media[0].fingerprint;\n        const media = {};\n\n        session.media.forEach(mLine => {\n            const type = mLine.type;\n\n            if (type === 'application') {\n                if (!currentDesc || !currentDesc.media) {\n                    const newMline = clonedeep(mLine);\n\n                    newMline.mid = Object.keys(media).length.toString();\n                    media[mLine.mid] = newMline;\n\n                    return;\n                }\n                const mLineForData = currentDesc.media.findIndex(m => m.type === type);\n\n                if (mLineForData) {\n                    currentDesc.media[mLineForData] = mLine;\n                    currentDesc.media[mLineForData].mid = mLineForData;\n                }\n\n                return;\n            }\n\n            // Create an inverted sourceGroup map here to put all the grouped SSRCs in the same m-line.\n            const ssrc2group = createSourceGroupMap(mLine.ssrcGroups);\n\n            // If there are no sources advertised for a media type, add the description if this is the first\n            // remote offer, i.e., no current description was passed. Chrome in Unified plan does not produce\n            // recvonly ssrcs unlike Firefox and Safari.\n            if (!mLine.sources) {\n                if (!currentDesc) {\n                    const newMline = clonedeep(mLine);\n\n                    newMline.mid = Object.keys(media).length.toString();\n                    media[mLine.mid] = newMline;\n                }\n\n                return;\n            }\n            mLine.sources.forEach((ssrc, idx) => {\n                // Do not add the receive-only ssrcs that Jicofo sends in the source-add.\n                // These ssrcs do not have the \"msid\" attribute set.\n                if (!ssrc.msid) {\n                    return;\n                }\n\n                // If there is no description set on the peerconnection, create new m-lines.\n                if (!currentDesc || !currentDesc.media) {\n                    if (checkIfMlineForSsrcExists(ssrc, ssrc2group, Object.values(media))) {\n                        return;\n                    }\n                    const newMline = clonedeep(mLine);\n\n                    newMline.mid = Object.keys(media).length.toString();\n                    newMline.direction = idx\n                        ? 'sendonly'\n                        : mLine.direction === 'sendonly' ? 'sendonly' : 'sendrecv';\n                    newMline.bundleOnly = undefined;\n                    addSourcesToMline(newMline, ssrc, ssrc2group, mLine.sources);\n                    media[newMline.mid] = newMline;\n\n                    return;\n                }\n\n                // Create if the m-line for the ssrcs already exists.\n                if (checkIfMlineForSsrcExists(ssrc, ssrc2group, currentDesc.media)) {\n                    return;\n                }\n\n                // Check if a rejected m-line with port 0 exists and recycle it if so.\n                const existingMline = checkForRejectedMlines(currentDesc, type);\n\n                if (existingMline) {\n                    existingMline.port = mLine.port;\n                    existingMline.direction = 'sendonly';\n                    addSourcesToMline(existingMline, ssrc, ssrc2group, mLine.sources);\n\n                    return;\n                }\n\n                // Append a new m-line.\n                const newMline = clonedeep(mLine);\n\n                newMline.mid = currentDesc.media.length.toString();\n                newMline.direction = 'sendonly';\n                addSourcesToMline(newMline, ssrc, ssrc2group, mLine.sources);\n                currentDesc.media.push(newMline);\n            });\n        });\n        session.media = currentDesc ? currentDesc.media : Object.values(media);\n        const mids = [];\n\n        session.media.forEach(mLine => {\n            mids.push(mLine.mid);\n            if (iceRestart) {\n                mLine.iceUfrag = newIceUfrag;\n                mLine.icePwd = newIcePwd;\n                mLine.fingerprint = newFingerprint;\n            }\n        });\n\n        // We regenerate the BUNDLE group (since we regenerated the mids)\n        session.groups.forEach(group => {\n            if (group.type === 'BUNDLE') {\n                group.mids = mids.join(' ');\n            }\n        });\n\n        // msid semantic\n        session.msidSemantic = {\n            semantic: 'WMS',\n            token: '*'\n        };\n\n        // Increment the session version every time.\n        session.origin.sessionVersion++;\n        const resultSdp = transform.write(session);\n\n        return new RTCSessionDescription({\n            type: description.type,\n            sdp: resultSdp\n        });\n    }\n}\n","export enum SignalingEvents {\n    /**\n     * Event triggered when participant's muted status changes.\n     * @param {string} endpointId the track owner's identifier (MUC nickname)\n     * @param {MediaType} mediaType \"audio\" or \"video\"\n     * @param {boolean} isMuted the new muted state\n     */\n    PEER_MUTED_CHANGED = 'signaling.peerMuted',\n\n    /**\n     * Event triggered when participant's video type changes.\n     * @param {string} endpointId the video owner's ID (MUC nickname)\n     * @param {VideoType} videoType the new value\n     */\n    PEER_VIDEO_TYPE_CHANGED = 'signaling.peerVideoType'\n}\n\n// exported for backward compatibility\nexport const PEER_MUTED_CHANGED = SignalingEvents.PEER_MUTED_CHANGED;\nexport const PEER_VIDEO_TYPE_CHANGED = SignalingEvents.PEER_VIDEO_TYPE_CHANGED;\n","\nimport Listenable from '../../modules/util/Listenable';\nimport { MediaType } from '../../service/RTC/MediaType';\n\n/**\n * @typedef {string} EndpointId\n */\n/**\n * @typedef {string} SourceName\n */\n/**\n * @typedef {Object} SourceInfo\n *\n * @property {SourceName} sourceName - Name of the media source.\n * @property {boolean} [muted=false] - Tells if the source is muted (paused?).\n * @property {string} [videoType] - Type of the video for video type.\n */\n\n/**\n * Generates a source name.\n *\n * @param {EndpointId} endpointId - Jitsi Endpoint Id.\n * @param {MediaType} mediaType - the media type string.\n * @param {number} trackIdx - Track index (or sender idx? - to be figured out) starting from 0.\n * @returns {SourceName} eg. endpointA-v0\n */\nexport function getSourceNameForJitsiTrack(endpointId, mediaType, trackIdx) {\n    const firstLetterOfMediaType = mediaType.substring(0, 1);\n\n    return `${endpointId}-${firstLetterOfMediaType}${trackIdx}`;\n}\n\n/**\n * Extracts MediaType from give source name (must be in the correct format as generated by\n * {@link getSourceNameForJitsiTrack}).\n *\n * @param {SourceName} sourceName - the source name.\n * @returns {MediaType}\n */\nexport function getMediaTypeFromSourceName(sourceName) {\n    const firstLetterOfMediaTypeIdx = sourceName.indexOf('-') + 1;\n\n    if (firstLetterOfMediaTypeIdx <= 0) {\n        throw new Error(`Invalid source name: ${sourceName}`);\n    }\n\n    const firstLetterOfMediaType = sourceName.substr(firstLetterOfMediaTypeIdx, 1);\n\n    for (const type of Object.values(MediaType)) {\n        if (type.substr(0, 1) === firstLetterOfMediaType) {\n            return type;\n        }\n    }\n\n    throw new Error(`Invalid source name: ${sourceName}`);\n}\n\n/**\n * An object that carries the info about specific media type advertised by\n * participant in the signaling channel.\n * @typedef {Object} PeerMediaInfo\n * @property {boolean} muted indicates if the media is currently muted\n * @property {VideoType|undefined} videoType the type of the video if applicable\n */\n\n/**\n * Interface used to expose the information carried over the signaling channel\n * which is not available to the RTC module in the media SDP.\n *\n * @interface SignalingLayer\n */\nexport default class SignalingLayer extends Listenable {\n\n    /**\n     * Obtains the endpoint ID for given SSRC.\n     * @param {number} ssrc the SSRC number.\n     * @return {string|null} the endpoint ID for given media SSRC.\n     */\n    getSSRCOwner(ssrc) { // eslint-disable-line no-unused-vars\n        throw new Error('not implemented');\n    }\n\n    /**\n     * Obtains the info about given media advertised in the MUC presence of\n     * the participant identified by the given MUC JID.\n     * @param {string} owner the MUC jid of the participant for whom\n     * {@link PeerMediaInfo} will be obtained.\n     * @param {MediaType} mediaType the type of the media for which presence\n     * info will be obtained.\n     * @return {PeerMediaInfo|null} presenceInfo an object with media presence\n     * info or <tt>null</tt> either if there is no presence available for given\n     * JID or if the media type given is invalid.\n     *\n     * @deprecated This method is to be replaced with getPeerSourceInfo.\n     */\n    getPeerMediaInfo(owner, mediaType) { // eslint-disable-line no-unused-vars\n        throw new Error('not implemented');\n    }\n\n    /**\n     * Obtains the info about a source for given name and endpoint ID.\n     * @param {EndpointId} owner - The owner's endpoint ID.\n     * @param {SourceName} sourceName - The name of the source for which the info is to be obtained.\n     * @returns {SourceInfo | undefined}\n     */\n    getPeerSourceInfo(owner, sourceName) { // eslint-disable-line no-unused-vars\n        throw new Error('not implemented');\n    }\n\n    /**\n     * Obtains the source name for given SSRC.\n     * @param {number} ssrc the track's SSRC identifier.\n     * @returns {SourceName | undefined} the track's source name.\n     */\n    getTrackSourceName(ssrc) { // eslint-disable-line no-unused-vars\n        throw new Error('not implemented');\n    }\n}\n","import * as transform from 'sdp-transform';\n\n/**\n * Parses the primary SSRC of given SSRC group.\n * @param {object} group the SSRC group object as defined by the 'sdp-transform'\n * @return {Number} the primary SSRC number\n */\nexport function parsePrimarySSRC(group) {\n    return parseInt(group.ssrcs.split(' ')[0], 10);\n}\n\n/**\n * Parses the secondary SSRC of given SSRC group.\n * @param {object} group the SSRC group object as defined by the 'sdp-transform'\n * @return {Number} the secondary SSRC number\n */\nexport function parseSecondarySSRC(group) {\n    return parseInt(group.ssrcs.split(' ')[1], 10);\n}\n\n/**\n * Tells how many distinct SSRCs are contained in given media line.\n * @param {Object} mLine the media line object as defined by 'sdp-transform' lib\n * @return {number}\n */\nfunction _getSSRCCount(mLine) {\n    if (!mLine.ssrcs) {\n        return 0;\n    }\n\n    return mLine.ssrcs\n        .map(ssrcInfo => ssrcInfo.id)\n        .filter((ssrc, index, array) => array.indexOf(ssrc) === index)\n        .length;\n}\n\n/**\n * A wrapper around 'sdp-transform' media description object which provides\n * utility methods for common SDP/SSRC related operations.\n */\nclass MLineWrap {\n\n    /**\n     * Creates new <tt>MLineWrap</t>>\n     * @param {Object} mLine the media line object as defined by 'sdp-transform'\n     * lib.\n     */\n    constructor(mLine) {\n        if (!mLine) {\n            throw new Error('mLine is undefined');\n        }\n\n        this.mLine = mLine;\n    }\n\n    /**\n     * Getter for the mLine's \"ssrcs\" array. If the array was undefined an empty\n     * one will be preassigned.\n     *\n     * @return {Array<Object>} an array of 'sdp-transform' SSRC attributes\n     * objects.\n     */\n    get ssrcs() {\n        if (!this.mLine.ssrcs) {\n            this.mLine.ssrcs = [];\n        }\n\n        return this.mLine.ssrcs;\n    }\n\n    /**\n     * Setter for the mLine's \"ssrcs\" array.\n     *\n     * @param {Array<Object>} ssrcs an array of 'sdp-transform' SSRC attributes\n     * objects.\n     */\n    set ssrcs(ssrcs) {\n        this.mLine.ssrcs = ssrcs;\n    }\n\n    /**\n     * Returns the direction of the underlying media description.\n     * @return {string} the media direction name as defined in the SDP.\n     */\n    get direction() {\n        return this.mLine.direction;\n    }\n\n    /**\n     * Modifies the direction of the underlying media description.\n     * @param {string} direction the new direction to be set\n     */\n    set direction(direction) {\n        this.mLine.direction = direction;\n    }\n\n    /**\n     * Exposes the SSRC group array of the underlying media description object.\n     * @return {Array.<Object>}\n     */\n    get ssrcGroups() {\n        if (!this.mLine.ssrcGroups) {\n            this.mLine.ssrcGroups = [];\n        }\n\n        return this.mLine.ssrcGroups;\n    }\n\n    /**\n     * Modifies the SSRC groups array of the underlying media description\n     * object.\n     * @param {Array.<Object>} ssrcGroups\n     */\n    set ssrcGroups(ssrcGroups) {\n        this.mLine.ssrcGroups = ssrcGroups;\n    }\n\n    /**\n     * Obtains value from SSRC attribute.\n     * @param {number} ssrcNumber the SSRC number for which attribute is to be\n     * found\n     * @param {string} attrName the name of the SSRC attribute to be found.\n     * @return {string|undefined} the value of SSRC attribute or\n     * <tt>undefined</tt> if no such attribute exists.\n     */\n    getSSRCAttrValue(ssrcNumber, attrName) {\n        const attribute = this.ssrcs.find(\n            ssrcObj => ssrcObj.id === ssrcNumber\n            && ssrcObj.attribute === attrName);\n\n\n        return attribute && attribute.value;\n    }\n\n    /**\n     * Removes all attributes for given SSRC number.\n     * @param {number} ssrcNum the SSRC number for which all attributes will be\n     * removed.\n     */\n    removeSSRC(ssrcNum) {\n        if (!this.mLine.ssrcs || !this.mLine.ssrcs.length) {\n            return;\n        }\n\n        this.mLine.ssrcs\n            = this.mLine.ssrcs.filter(ssrcObj => ssrcObj.id !== ssrcNum);\n    }\n\n    /**\n     * Adds SSRC attribute\n     * @param {object} ssrcObj the SSRC attribute object as defined in\n     * the 'sdp-transform' lib.\n     */\n    addSSRCAttribute(ssrcObj) {\n        this.ssrcs.push(ssrcObj);\n    }\n\n    /**\n     * Finds a SSRC group matching both semantics and SSRCs in order.\n     * @param {string} semantics the name of the semantics\n     * @param {string} [ssrcs] group SSRCs as a string (like it's defined in\n     * SSRC group object of the 'sdp-transform' lib) e.g. \"1232546 342344 25434\"\n     * @return {object|undefined} the SSRC group object or <tt>undefined</tt> if\n     * not found.\n     */\n    findGroup(semantics, ssrcs) {\n        return this.ssrcGroups.find(\n            group =>\n                group.semantics === semantics\n                    && (!ssrcs || ssrcs === group.ssrcs));\n    }\n\n    /**\n     * Finds all groups matching given semantic's name.\n     * @param {string} semantics the name of the semantics\n     * @return {Array.<object>} an array of SSRC group objects as defined by\n     * the 'sdp-transform' lib.\n     */\n    findGroups(semantics) {\n        return this.ssrcGroups.filter(\n            group => group.semantics === semantics);\n    }\n\n    /**\n     * Finds all groups matching given semantic's name and group's primary SSRC.\n     * @param {string} semantics the name of the semantics\n     * @param {number} primarySSRC the primary SSRC number to be matched\n     * @return {Object} SSRC group object as defined by the 'sdp-transform' lib.\n     */\n    findGroupByPrimarySSRC(semantics, primarySSRC) {\n        return this.ssrcGroups.find(\n            group => group.semantics === semantics\n                && parsePrimarySSRC(group) === primarySSRC);\n    }\n\n    /**\n     * @param {string|null} msid the media stream id or <tt>null</tt> to match\n     * the first SSRC object with any 'msid' value.\n     * @return {Object|undefined} the SSRC object as defined by 'sdp-transform'\n     * lib.\n     */\n    findSSRCByMSID(msid) {\n        return this.ssrcs.find(\n            ssrcObj => ssrcObj.attribute === 'msid'\n                && (msid === null || ssrcObj.value === msid));\n    }\n\n    /**\n     * Gets the SSRC count for the underlying media description.\n     * @return {number}\n     */\n    getSSRCCount() {\n        return _getSSRCCount(this.mLine);\n    }\n\n    /**\n     * Checks whether the underlying media description contains any SSRC groups.\n     * @return {boolean} <tt>true</tt> if there are any SSRC groups or\n     * <tt>false</tt> otherwise.\n     */\n    containsAnySSRCGroups() {\n        return this.mLine.ssrcGroups !== undefined;\n    }\n\n    /**\n     * Finds the primary video SSRC.\n     * @returns {number|undefined} the primary video ssrc\n     * @throws Error if the underlying media description is not a video\n     */\n    getPrimaryVideoSsrc() {\n        const mediaType = this.mLine.type;\n\n        if (mediaType !== 'video') {\n            throw new Error(\n                `getPrimarySsrc doesn't work with '${mediaType}'`);\n        }\n\n        const numSsrcs = _getSSRCCount(this.mLine);\n\n        if (numSsrcs === 1) {\n            // Not using \"ssrcs\" getter on purpose here\n            return this.mLine.ssrcs[0].id;\n        }\n\n        // Look for a SIM, FID, or FEC-FR group\n        if (this.mLine.ssrcGroups) {\n            const simGroup = this.findGroup('SIM');\n\n            if (simGroup) {\n                return parsePrimarySSRC(simGroup);\n            }\n            const fidGroup = this.findGroup('FID');\n\n            if (fidGroup) {\n                return parsePrimarySSRC(fidGroup);\n            }\n            const fecGroup = this.findGroup('FEC-FR');\n\n            if (fecGroup) {\n                return parsePrimarySSRC(fecGroup);\n            }\n        }\n\n    }\n\n    /**\n     * Obtains RTX SSRC from the underlying video description (the\n     * secondary SSRC of the first \"FID\" group found)\n     * @param {number} primarySsrc the video ssrc for which to find the\n     * corresponding rtx ssrc\n     * @returns {number|undefined} the rtx ssrc (or undefined if there isn't\n     * one)\n     */\n    getRtxSSRC(primarySsrc) {\n        const fidGroup = this.findGroupByPrimarySSRC('FID', primarySsrc);\n\n\n        return fidGroup && parseSecondarySSRC(fidGroup);\n    }\n\n    /**\n     * Obtains all SSRCs contained in the underlying media description.\n     * @return {Array.<number>} an array with all SSRC as numbers.\n     */\n    getSSRCs() {\n        return this.ssrcs\n            .map(ssrcInfo => ssrcInfo.id)\n            .filter((ssrc, index, array) => array.indexOf(ssrc) === index);\n    }\n\n    /**\n     * Obtains primary video SSRCs.\n     * @return {Array.<number>} an array of all primary video SSRCs as numbers.\n     * @throws Error if the wrapped media description is not a video.\n     */\n    getPrimaryVideoSSRCs() {\n        const mediaType = this.mLine.type;\n\n        if (mediaType !== 'video') {\n            throw new Error(\n                `getPrimaryVideoSSRCs doesn't work with ${mediaType}`);\n        }\n\n        const videoSSRCs = this.getSSRCs();\n\n        for (const ssrcGroupInfo of this.ssrcGroups) {\n            // Right now, FID and FEC-FR groups are the only ones we parse to\n            // disqualify streams.  If/when others arise we'll\n            // need to add support for them here\n            if (ssrcGroupInfo.semantics === 'FID'\n                    || ssrcGroupInfo.semantics === 'FEC-FR') {\n                // secondary streams should be filtered out\n                const secondarySsrc = parseSecondarySSRC(ssrcGroupInfo);\n\n                videoSSRCs.splice(\n                    videoSSRCs.indexOf(secondarySsrc), 1);\n            }\n        }\n\n        return videoSSRCs;\n    }\n\n    /**\n     * Dumps all SSRC groups of this media description to JSON.\n     */\n    dumpSSRCGroups() {\n        return JSON.stringify(this.mLine.ssrcGroups);\n    }\n\n    /**\n     * Removes all SSRC groups which contain given SSRC number at any position.\n     * @param {number} ssrc the SSRC for which all matching groups are to be\n     * removed.\n     */\n    removeGroupsWithSSRC(ssrc) {\n        if (!this.mLine.ssrcGroups) {\n            return;\n        }\n\n        this.mLine.ssrcGroups = this.mLine.ssrcGroups\n            .filter(groupInfo => groupInfo.ssrcs.indexOf(`${ssrc}`) === -1);\n    }\n\n    /**\n     * Removes groups that match given semantics.\n     * @param {string} semantics e.g. \"SIM\" or \"FID\"\n     */\n    removeGroupsBySemantics(semantics) {\n        if (!this.mLine.ssrcGroups) {\n            return;\n        }\n\n        this.mLine.ssrcGroups\n            = this.mLine.ssrcGroups\n                .filter(groupInfo => groupInfo.semantics !== semantics);\n    }\n\n    /**\n     * Replaces SSRC (does not affect SSRC groups, but only attributes).\n     * @param {number} oldSSRC the old SSRC number\n     * @param {number} newSSRC the new SSRC number\n     */\n    replaceSSRC(oldSSRC, newSSRC) {\n        if (this.mLine.ssrcs) {\n            this.mLine.ssrcs.forEach(ssrcInfo => {\n                if (ssrcInfo.id === oldSSRC) {\n                    ssrcInfo.id = newSSRC;\n                }\n            });\n        }\n    }\n\n    /**\n     * Adds given SSRC group to this media description.\n     * @param {object} group the SSRC group object as defined by\n     * the 'sdp-transform' lib.\n     */\n    addSSRCGroup(group) {\n        this.ssrcGroups.push(group);\n    }\n}\n\n/**\n * Utility class for SDP manipulation using the 'sdp-transform' library.\n *\n * Typical use usage scenario:\n *\n * const transformer = new SdpTransformWrap(rawSdp);\n * const videoMLine = transformer.selectMedia('video);\n * if (videoMLine) {\n *     videoMLiner.addSSRCAttribute({\n *         id: 2342343,\n *         attribute: \"cname\",\n *         value: \"someCname\"\n *     });\n *     rawSdp = transformer.toRawSdp();\n * }\n */\nexport class SdpTransformWrap {\n\n    /**\n     * Creates new instance and parses the raw SDP into objects using\n     * 'sdp-transform' lib.\n     * @param {string} rawSDP the SDP in raw text format.\n     */\n    constructor(rawSDP) {\n        this.parsedSDP = transform.parse(rawSDP);\n    }\n\n    /**\n     * Selects all the m-lines from the SDP for a given media type.\n     *\n     * @param {string} mediaType the name of the media e.g. 'audio', 'video', 'data'.\n     * @return {MLineWrap|null} return {@link MLineWrap} instance for the media line or <tt>null</tt> if not found. The\n     * object returned references the underlying SDP state held by this <tt>SdpTransformWrap</tt> instance (it's not a\n     * copy).\n     */\n    selectMedia(mediaType) {\n        const selectedMLines = this.parsedSDP.media\n            .filter(mLine => mLine.type === mediaType)\n            .map(mLine => new MLineWrap(mLine));\n\n        return selectedMLines ?? null;\n    }\n\n    /**\n     * Converts the currently stored SDP state in this instance to raw text SDP\n     * format.\n     * @return {string}\n     */\n    toRawSDP() {\n        return transform.write(this.parsedSDP);\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport { MediaDirection } from '../../service/RTC/MediaDirection';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport { getSourceNameForJitsiTrack } from '../../service/RTC/SignalingLayer';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport FeatureFlags from '../flags/FeatureFlags';\n\nimport { SdpTransformWrap } from './SdpTransformUtil';\n\nconst logger = getLogger(__filename);\n\n/**\n * Fakes local SDP exposed to {@link JingleSessionPC} through the local\n * description getter. Modifies the SDP, so that it will contain muted local\n * video tracks description, even though their underlying {MediaStreamTrack}s\n * are no longer in the WebRTC peerconnection. That prevents from SSRC updates\n * being sent to Jicofo/remote peer and prevents sRD/sLD cycle on the remote\n * side.\n */\nexport default class LocalSdpMunger {\n\n    /**\n     * Creates new <tt>LocalSdpMunger</tt> instance.\n     *\n     * @param {TraceablePeerConnection} tpc\n     * @param {string} localEndpointId - The endpoint id of the local user.\n     */\n    constructor(tpc, localEndpointId) {\n        this.tpc = tpc;\n        this.localEndpointId = localEndpointId;\n    }\n\n    /**\n     * Makes sure that muted local video tracks associated with the parent\n     * {@link TraceablePeerConnection} are described in the local SDP. It's done\n     * in order to prevent from sending 'source-remove'/'source-add' Jingle\n     * notifications when local video track is muted (<tt>MediaStream</tt> is\n     * removed from the peerconnection).\n     *\n     * NOTE 1 video track is assumed\n     *\n     * @param {SdpTransformWrap} transformer the transformer instance which will\n     * be used to process the SDP.\n     * @return {boolean} <tt>true</tt> if there were any modifications to\n     * the SDP wrapped by <tt>transformer</tt>.\n     * @private\n     */\n    _addMutedLocalVideoTracksToSDP(transformer) {\n        // Go over each video tracks and check if the SDP has to be changed\n        const localVideos = this.tpc.getLocalTracks(MediaType.VIDEO);\n\n        if (!localVideos.length) {\n            return false;\n        } else if (localVideos.length !== 1) {\n            logger.error(\n                `${this.tpc} there is more than 1 video track ! `\n                    + 'Strange things may happen !', localVideos);\n        }\n\n        const videoMLine = transformer.selectMedia(MediaType.VIDEO)?.[0];\n\n        if (!videoMLine) {\n            logger.debug(\n                `${this.tpc} unable to hack local video track SDP`\n                    + '- no \"video\" media');\n\n            return false;\n        }\n\n        let modified = false;\n\n        for (const videoTrack of localVideos) {\n            const muted = videoTrack.isMuted();\n            const mediaStream = videoTrack.getOriginalStream();\n            const isCamera = videoTrack.videoType === VideoType.CAMERA;\n\n            // During the mute/unmute operation there are periods of time when\n            // the track's underlying MediaStream is not added yet to\n            // the PeerConnection. The SDP needs to be munged in such case.\n            const isInPeerConnection\n                = mediaStream && this.tpc.isMediaStreamInPc(mediaStream);\n            const shouldFakeSdp = isCamera && (muted || !isInPeerConnection);\n\n            if (!shouldFakeSdp) {\n                continue; // eslint-disable-line no-continue\n            }\n\n            // Inject removed SSRCs\n            const requiredSSRCs\n                = this.tpc.isSimulcastOn()\n                    ? this.tpc.simulcast.ssrcCache\n                    : [ this.tpc.sdpConsistency.cachedPrimarySsrc ];\n\n            if (!requiredSSRCs.length) {\n                logger.error(`No SSRCs stored for: ${videoTrack} in ${this.tpc}`);\n\n                continue; // eslint-disable-line no-continue\n            }\n\n            modified = true;\n\n            // We need to fake sendrecv.\n            // NOTE the SDP produced here goes only to Jicofo and is never set\n            // as localDescription. That's why\n            // TraceablePeerConnection.mediaTransferActive is ignored here.\n            videoMLine.direction = MediaDirection.SENDRECV;\n\n            // Check if the recvonly has MSID\n            const primarySSRC = requiredSSRCs[0];\n\n            // FIXME The cname could come from the stream, but may turn out to\n            // be too complex. It is fine to come up with any value, as long as\n            // we only care about the actual SSRC values when deciding whether\n            // or not an update should be sent.\n            const primaryCname = `injected-${primarySSRC}`;\n\n            for (const ssrcNum of requiredSSRCs) {\n                // Remove old attributes\n                videoMLine.removeSSRC(ssrcNum);\n\n                // Inject\n                videoMLine.addSSRCAttribute({\n                    id: ssrcNum,\n                    attribute: 'cname',\n                    value: primaryCname\n                });\n                videoMLine.addSSRCAttribute({\n                    id: ssrcNum,\n                    attribute: 'msid',\n                    value: videoTrack.storedMSID\n                });\n            }\n            if (requiredSSRCs.length > 1) {\n                const group = {\n                    ssrcs: requiredSSRCs.join(' '),\n                    semantics: 'SIM'\n                };\n\n                if (!videoMLine.findGroup(group.semantics, group.ssrcs)) {\n                    // Inject the group\n                    videoMLine.addSSRCGroup(group);\n                }\n            }\n\n            // Insert RTX\n            // FIXME in P2P RTX is used by Chrome regardless of config option\n            // status. Because of that 'source-remove'/'source-add'\n            // notifications are still sent to remove/add RTX SSRC and FID group\n            if (!this.tpc.options.disableRtx) {\n                this.tpc.rtxModifier.modifyRtxSsrcs2(videoMLine);\n            }\n        }\n\n        return modified;\n    }\n\n    /**\n     * Returns a string that can be set as the MSID attribute for a source.\n     *\n     * @param {string} mediaType - Media type of the source.\n     * @param {string} trackId - Id of the MediaStreamTrack associated with the source.\n     * @param {string} streamId - Id of the MediaStream associated with the source.\n     * @returns {string|null}\n     */\n    _generateMsidAttribute(mediaType, trackId, streamId = null) {\n        if (!(mediaType && trackId)) {\n            logger.error(`Unable to munge local MSID - track id=${trackId} or media type=${mediaType} is missing`);\n\n            return null;\n        }\n        const pcId = this.tpc.id;\n\n        // Handle a case on Firefox when the browser doesn't produce a 'a:ssrc' line with the 'msid' attribute or has\n        // '-' for the stream id part of the msid line. Jicofo needs an unique identifier to be associated with a ssrc\n        // and uses the msid for that.\n        if (streamId === '-' || !streamId) {\n            return `${this.localEndpointId}-${mediaType}-${pcId} ${trackId}-${pcId}`;\n        }\n\n        return `${streamId}-${pcId} ${trackId}-${pcId}`;\n    }\n\n    /**\n     * Modifies 'cname', 'msid', 'label' and 'mslabel' by appending the id of {@link LocalSdpMunger#tpc} at the end,\n     * preceding by a dash sign.\n     *\n     * @param {MLineWrap} mediaSection - The media part (audio or video) of the session description which will be\n     * modified in place.\n     * @returns {void}\n     * @private\n     */\n    _transformMediaIdentifiers(mediaSection) {\n        const mediaType = mediaSection.mLine?.type;\n        const pcId = this.tpc.id;\n        const sourceToMsidMap = new Map();\n\n        for (const ssrcLine of mediaSection.ssrcs) {\n            switch (ssrcLine.attribute) {\n            case 'cname':\n            case 'label':\n            case 'mslabel':\n                ssrcLine.value = ssrcLine.value && `${ssrcLine.value}-${pcId}`;\n                break;\n            case 'msid': {\n                if (ssrcLine.value) {\n                    const streamAndTrackIDs = ssrcLine.value.split(' ');\n\n                    let streamId = streamAndTrackIDs[0];\n                    const trackId = streamAndTrackIDs[1];\n\n                    // eslint-disable-next-line max-depth\n                    if (FeatureFlags.isMultiStreamSupportEnabled() && mediaType === MediaType.VIDEO) {\n\n                        // eslint-disable-next-line max-depth\n                        if (streamId === '-' || !streamId) {\n                            streamId = `${this.localEndpointId}-${mediaType}`;\n                        }\n\n                        // eslint-disable-next-line max-depth\n                        if (!sourceToMsidMap.has(trackId)) {\n                            streamId = `${streamId}-${sourceToMsidMap.size}`;\n                            sourceToMsidMap.set(trackId, streamId);\n                        }\n                    }\n\n                    ssrcLine.value = this._generateMsidAttribute(mediaType, trackId, sourceToMsidMap.get(trackId));\n                } else {\n                    logger.warn(`Unable to munge local MSID - weird format detected: ${ssrcLine.value}`);\n                }\n                break;\n            }\n            }\n        }\n\n        // Additional transformations related to MSID are applicable to Unified-plan implementation only.\n        if (!this.tpc.usesUnifiedPlan()) {\n            return;\n        }\n\n        // If the msid attribute is missing, then remove the ssrc from the transformed description so that a\n        // source-remove is signaled to Jicofo. This happens when the direction of the transceiver (or m-line)\n        // is set to 'inactive' or 'recvonly' on Firefox, Chrome (unified) and Safari.\n        const mediaDirection = mediaSection.mLine?.direction;\n\n        if (mediaDirection === MediaDirection.RECVONLY || mediaDirection === MediaDirection.INACTIVE) {\n            mediaSection.ssrcs = undefined;\n            mediaSection.ssrcGroups = undefined;\n\n        // Add the msid attribute if it is missing when the direction is sendrecv/sendonly. Firefox doesn't produce a\n        // a=ssrc line with msid attribute for p2p connection.\n        } else {\n            const msidLine = mediaSection.mLine?.msid;\n            const trackId = msidLine && msidLine.split(' ')[1];\n            const sources = [ ...new Set(mediaSection.mLine?.ssrcs?.map(s => s.id)) ];\n\n            for (const source of sources) {\n                const msidExists = mediaSection.ssrcs\n                    .find(ssrc => ssrc.id === source && ssrc.attribute === 'msid');\n\n                if (!msidExists && trackId) {\n                    const generatedMsid = this._generateMsidAttribute(mediaType, trackId);\n\n                    mediaSection.ssrcs.push({\n                        id: source,\n                        attribute: 'msid',\n                        value: generatedMsid\n                    });\n                }\n            }\n        }\n    }\n\n    /**\n     * Maybe modifies local description to fake local video tracks SDP when\n     * those are muted.\n     *\n     * @param {object} desc the WebRTC SDP object instance for the local\n     * description.\n     * @returns {RTCSessionDescription}\n     */\n    maybeAddMutedLocalVideoTracksToSDP(desc) {\n        if (!desc) {\n            throw new Error('No local description passed in.');\n        }\n\n        const transformer = new SdpTransformWrap(desc.sdp);\n\n        if (this._addMutedLocalVideoTracksToSDP(transformer)) {\n            return new RTCSessionDescription({\n                type: desc.type,\n                sdp: transformer.toRawSDP()\n            });\n        }\n\n        return desc;\n    }\n\n    /**\n     * This transformation will make sure that stream identifiers are unique\n     * across all of the local PeerConnections even if the same stream is used\n     * by multiple instances at the same time.\n     * Each PeerConnection assigns different SSRCs to the same local\n     * MediaStream, but the MSID remains the same as it's used to identify\n     * the stream by the WebRTC backend. The transformation will append\n     * {@link TraceablePeerConnection#id} at the end of each stream's identifier\n     * (\"cname\", \"msid\", \"label\" and \"mslabel\").\n     *\n     * @param {RTCSessionDescription} sessionDesc - The local session\n     * description (this instance remains unchanged).\n     * @return {RTCSessionDescription} - Transformed local session description\n     * (a modified copy of the one given as the input).\n     */\n    transformStreamIdentifiers(sessionDesc) {\n        // FIXME similar check is probably duplicated in all other transformers\n        if (!sessionDesc || !sessionDesc.sdp || !sessionDesc.type) {\n            return sessionDesc;\n        }\n\n        const transformer = new SdpTransformWrap(sessionDesc.sdp);\n        const audioMLine = transformer.selectMedia(MediaType.AUDIO)?.[0];\n\n        if (audioMLine) {\n            this._transformMediaIdentifiers(audioMLine);\n            this._injectSourceNames(audioMLine);\n        }\n\n        const videoMlines = transformer.selectMedia(MediaType.VIDEO);\n\n        if (!FeatureFlags.isMultiStreamSupportEnabled()) {\n            videoMlines.splice(1);\n        }\n\n        for (const videoMLine of videoMlines) {\n            this._transformMediaIdentifiers(videoMLine);\n            this._injectSourceNames(videoMLine);\n        }\n\n        return new RTCSessionDescription({\n            type: sessionDesc.type,\n            sdp: transformer.toRawSDP()\n        });\n    }\n\n    /**\n     * Injects source names. Source names are need to for multiple streams per endpoint support. The final plan is to\n     * use the \"mid\" attribute for source names, but because the SDP to Jingle conversion still operates in the Plan-B\n     * semantics (one source name per media), a custom \"name\" attribute is injected into SSRC lines..\n     *\n     * @param {MLineWrap} mediaSection - The media part (audio or video) of the session description which will be\n     * modified in place.\n     * @returns {void}\n     * @private\n     */\n    _injectSourceNames(mediaSection) {\n        if (!FeatureFlags.isSourceNameSignalingEnabled()) {\n            return;\n        }\n\n        const sources = [ ...new Set(mediaSection.mLine?.ssrcs?.map(s => s.id)) ];\n        const mediaType = mediaSection.mLine?.type;\n\n        if (!mediaType) {\n            throw new Error('_transformMediaIdentifiers - no media type in mediaSection');\n        }\n\n        for (const source of sources) {\n            const nameExists = mediaSection.ssrcs.find(ssrc => ssrc.id === source && ssrc.attribute === 'name');\n            const msid = mediaSection.ssrcs.find(ssrc => ssrc.id === source && ssrc.attribute === 'msid')?.value;\n            const trackIndex = msid ? msid.split('-')[2] : null;\n\n            if (!nameExists) {\n                // Inject source names as a=ssrc:3124985624 name:endpointA-v0\n                mediaSection.ssrcs.push({\n                    id: source,\n                    attribute: 'name',\n                    value: getSourceNameForJitsiTrack(this.localEndpointId, mediaType, trackIndex)\n                });\n            }\n        }\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport { MediaDirection } from '../../service/RTC/MediaDirection';\nimport { MediaType } from '../../service/RTC/MediaType';\n\nimport SDPUtil from './SDPUtil';\nimport { parseSecondarySSRC, SdpTransformWrap } from './SdpTransformUtil';\n\nconst logger = getLogger(__filename);\n\n/**\n * Begin helper functions\n */\n/**\n * Updates or inserts the appropriate rtx information for primarySsrc with\n *  the given rtxSsrc.  If no rtx ssrc for primarySsrc currently exists, it will\n *  add the appropriate ssrc and ssrc group lines.  If primarySsrc already has\n *  an rtx ssrc, the appropriate ssrc and group lines will be updated\n * @param {MLineWrap} mLine\n * @param {object} primarySsrcInfo the info (ssrc, msid & cname) for the\n *  primary ssrc\n * @param {number} rtxSsrc the rtx ssrc to associate with the primary ssrc\n */\nfunction updateAssociatedRtxStream(mLine, primarySsrcInfo, rtxSsrc) {\n    const primarySsrc = primarySsrcInfo.id;\n    const primarySsrcMsid = primarySsrcInfo.msid;\n    const primarySsrcCname = primarySsrcInfo.cname;\n\n    const previousRtxSSRC = mLine.getRtxSSRC(primarySsrc);\n\n    if (previousRtxSSRC === rtxSsrc) {\n        return;\n    }\n    if (previousRtxSSRC) {\n        // Stream already had an rtx ssrc that is different than the one given,\n        //  remove all trace of the old one\n        mLine.removeSSRC(previousRtxSSRC);\n        mLine.removeGroupsWithSSRC(previousRtxSSRC);\n    }\n    mLine.addSSRCAttribute({\n        id: rtxSsrc,\n        attribute: 'cname',\n        value: primarySsrcCname\n    });\n    mLine.addSSRCAttribute({\n        id: rtxSsrc,\n        attribute: 'msid',\n        value: primarySsrcMsid\n    });\n    mLine.addSSRCGroup({\n        semantics: 'FID',\n        ssrcs: `${primarySsrc} ${rtxSsrc}`\n    });\n}\n\n/**\n * End helper functions\n */\n\n/**\n * Adds any missing RTX streams for video streams\n *  and makes sure that they remain consistent\n */\nexport default class RtxModifier {\n    /**\n     * Constructor\n     */\n    constructor() {\n        /**\n         * Map of video ssrc to corresponding RTX\n         *  ssrc\n         */\n        this.correspondingRtxSsrcs = new Map();\n    }\n\n    /**\n     * Clear the cached map of primary video ssrcs to\n     *  their corresponding rtx ssrcs so that they will\n     *  not be used for the next call to modifyRtxSsrcs\n     */\n    clearSsrcCache() {\n        this.correspondingRtxSsrcs.clear();\n    }\n\n    /**\n     * Explicitly set the primary video ssrc -> rtx ssrc\n     *  mapping to be used in modifyRtxSsrcs\n     * @param {Map} ssrcMapping a mapping of primary video\n     *  ssrcs to their corresponding rtx ssrcs\n     */\n    setSsrcCache(ssrcMapping) {\n        logger.debug('Setting ssrc cache to ', ssrcMapping);\n        this.correspondingRtxSsrcs = ssrcMapping;\n    }\n\n    /**\n     * Adds RTX ssrcs for any video ssrcs that don't already have them.  If the video ssrc has been seen before, and\n     * already had an RTX ssrc generated, the same RTX ssrc will be used again.\n     *\n     * @param {string} sdpStr sdp in raw string format\n     * @returns {string} The modified sdp in raw string format.\n     */\n    modifyRtxSsrcs(sdpStr) {\n        let modified = false;\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\n        const videoMLines = sdpTransformer.selectMedia(MediaType.VIDEO);\n\n        if (!videoMLines?.length) {\n            logger.debug(`No 'video' media found in the sdp: ${sdpStr}`);\n\n            return sdpStr;\n        }\n\n        for (const videoMLine of videoMLines) {\n            if (this.modifyRtxSsrcs2(videoMLine)) {\n                modified = true;\n            }\n        }\n\n        return modified ? sdpTransformer.toRawSDP() : sdpStr;\n    }\n\n    /**\n     * Does the same thing as {@link modifyRtxSsrcs}, but takes the {@link MLineWrap} instance wrapping video media as\n     * an argument.\n     * @param {MLineWrap} videoMLine\n     * @return {boolean} <tt>true</tt> if the SDP wrapped by {@link SdpTransformWrap} has been modified or\n     * <tt>false</tt> otherwise.\n     */\n    modifyRtxSsrcs2(videoMLine) {\n        if (videoMLine.direction === MediaDirection.RECVONLY) {\n            return false;\n        }\n        if (videoMLine.getSSRCCount() < 1) {\n            return false;\n        }\n        const primaryVideoSsrcs = videoMLine.getPrimaryVideoSSRCs();\n\n        for (const ssrc of primaryVideoSsrcs) {\n            const msid = videoMLine.getSSRCAttrValue(ssrc, 'msid');\n            const cname = videoMLine.getSSRCAttrValue(ssrc, 'cname');\n            let correspondingRtxSsrc = this.correspondingRtxSsrcs.get(ssrc);\n\n            if (!correspondingRtxSsrc) {\n                // If there's one in the sdp already for it, we'll just set\n                //  that as the corresponding one\n                const previousAssociatedRtxStream = videoMLine.getRtxSSRC(ssrc);\n\n                if (previousAssociatedRtxStream) {\n                    correspondingRtxSsrc = previousAssociatedRtxStream;\n                } else {\n                    correspondingRtxSsrc = SDPUtil.generateSsrc();\n                }\n                this.correspondingRtxSsrcs.set(ssrc, correspondingRtxSsrc);\n            }\n            updateAssociatedRtxStream(\n                videoMLine,\n                {\n                    id: ssrc,\n                    cname,\n                    msid\n                },\n                correspondingRtxSsrc);\n        }\n\n        // FIXME we're not looking into much details whether the SDP has been\n        // modified or not once the precondition requirements are met.\n        return true;\n    }\n\n    /**\n     * Strip all rtx streams from the given sdp.\n     *\n     * @param {string} sdpStr sdp in raw string format\n     * @returns {string} sdp string with all rtx streams stripped\n     */\n    stripRtx(sdpStr) {\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\n        const videoMLines = sdpTransformer.selectMedia(MediaType.VIDEO);\n\n        if (!videoMLines?.length) {\n            logger.debug(`No 'video' media found in the sdp: ${sdpStr}`);\n\n            return sdpStr;\n        }\n\n        for (const videoMLine of videoMLines) {\n            if (videoMLine.direction !== MediaDirection.RECVONLY\n                && videoMLine.getSSRCCount()\n                && videoMLine.containsAnySSRCGroups()) {\n                const fidGroups = videoMLine.findGroups('FID');\n\n                // Remove the fid groups from the mline\n                videoMLine.removeGroupsBySemantics('FID');\n\n                // Get the rtx ssrcs and remove them from the mline\n                for (const fidGroup of fidGroups) {\n                    const rtxSsrc = parseSecondarySSRC(fidGroup);\n\n                    videoMLine.removeSSRC(rtxSsrc);\n                }\n            }\n        }\n\n        return sdpTransformer.toRawSDP();\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport { MediaType } from '../../service/RTC/MediaType';\n\nimport {\n    parsePrimarySSRC,\n    parseSecondarySSRC,\n    SdpTransformWrap\n} from './SdpTransformUtil';\n\nconst logger = getLogger(__filename);\n\n/**\n * Handles the work of keeping video ssrcs consistent across multiple\n * o/a cycles, making it such that all stream operations can be\n * kept local and do not need to be signaled.\n * NOTE: This only keeps the 'primary' video ssrc consistent: meaning\n * the primary video stream\n */\nexport default class SdpConsistency {\n    /**\n     * Constructor\n     * @param {string} logPrefix the log prefix appended to every logged\n     * message, currently used to distinguish for which\n     * <tt>TraceablePeerConnection</tt> the instance works.\n     */\n    constructor(logPrefix) {\n        this.clearVideoSsrcCache();\n        this.logPrefix = logPrefix;\n    }\n\n    /**\n     * Clear the cached video primary and primary rtx ssrcs so that\n     *  they will not be used for the next call to\n     *  makeVideoPrimarySsrcsConsistent\n     */\n    clearVideoSsrcCache() {\n        this.cachedPrimarySsrc = null;\n        this.injectRecvOnly = false;\n    }\n\n    /**\n     * Explicitly set the primary ssrc to be used in\n     *  makeVideoPrimarySsrcsConsistent\n     * @param {number} primarySsrc the primarySsrc to be used\n     *  in future calls to makeVideoPrimarySsrcsConsistent\n     * @throws Error if <tt>primarySsrc</tt> is not a number\n     */\n    setPrimarySsrc(primarySsrc) {\n        if (typeof primarySsrc !== 'number') {\n            throw new Error('Primary SSRC must be a number!');\n        }\n        this.cachedPrimarySsrc = primarySsrc;\n    }\n\n    /**\n     * Checks whether or not there is a primary video SSRC cached already.\n     * @return {boolean}\n     */\n    hasPrimarySsrcCached() {\n        return Boolean(this.cachedPrimarySsrc);\n    }\n\n    /**\n     * Given an sdp string, either:\n     *  1) record the primary video and primary rtx ssrcs to be\n     *   used in future calls to makeVideoPrimarySsrcsConsistent or\n     *  2) change the primary and primary rtx ssrcs in the given sdp\n     *   to match the ones previously cached\n     * @param {string} sdpStr the sdp string to (potentially)\n     *  change to make the video ssrcs consistent\n     * @returns {string} a (potentially) modified sdp string\n     *  with ssrcs consistent with this class' cache\n     */\n    makeVideoPrimarySsrcsConsistent(sdpStr) {\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\n        const videoMLine = sdpTransformer.selectMedia(MediaType.VIDEO)?.[0];\n\n        if (!videoMLine) {\n            logger.debug(`${this.logPrefix} no 'video' media found in the sdp: ${sdpStr}`);\n\n            return sdpStr;\n        }\n\n        if (videoMLine.direction === 'recvonly') {\n            // If the mline is recvonly, we'll add the primary\n            //  ssrc as a recvonly ssrc\n            if (this.cachedPrimarySsrc && this.injectRecvOnly) {\n                videoMLine.addSSRCAttribute({\n                    id: this.cachedPrimarySsrc,\n                    attribute: 'cname',\n                    value: `recvonly-${this.cachedPrimarySsrc}`\n                });\n            } else {\n                logger.info(`${this.logPrefix} no SSRC found for the recvonly video stream!`);\n            }\n        } else {\n            const newPrimarySsrc = videoMLine.getPrimaryVideoSsrc();\n\n            if (!newPrimarySsrc) {\n                logger.info(`${this.logPrefix} sdp-consistency couldn't parse new primary ssrc`);\n\n                return sdpStr;\n            }\n            if (this.cachedPrimarySsrc) {\n                videoMLine.replaceSSRC(newPrimarySsrc, this.cachedPrimarySsrc);\n                for (const group of videoMLine.ssrcGroups) {\n                    if (group.semantics === 'FID') {\n                        const primarySsrc = parsePrimarySSRC(group);\n                        const rtxSsrc = parseSecondarySSRC(group);\n\n                        // eslint-disable-next-line max-depth\n                        if (primarySsrc === newPrimarySsrc) {\n                            group.ssrcs\n                                = `${this.cachedPrimarySsrc} ${rtxSsrc}`;\n                        }\n                    }\n                }\n            } else {\n                this.cachedPrimarySsrc = newPrimarySsrc;\n            }\n            this.injectRecvOnly = true;\n        }\n\n        return sdpTransformer.toRawSDP();\n    }\n}\n","import { MediaDirection } from '../../service/RTC/MediaDirection';\nimport { MediaType } from '../../service/RTC/MediaType';\n\nimport * as transform from 'sdp-transform';\n\nconst DEFAULT_NUM_OF_LAYERS = 3;\n\ninterface Description {\n    type: RTCSdpType;\n    sdp: string;\n}\n\ninterface Options {\n    numOfLayers?: number\n}\n\n/**\n * This class handles SDP munging for enabling simulcast for local video streams in Unified plan. A set of random SSRCs\n * are generated for the higher layer streams and they are cached for a given mid. The cached SSRCs are then reused on\n * the subsequent iterations while munging the local description. This class also handles imploding of the simulcast\n * SSRCs for remote endpoints into the primary FID group in remote description since Jicofo signals all SSRCs relevant\n * to a given endpoint.\n */\nexport default class SdpSimulcast {\n    private _options: Options;\n    private _ssrcCache: Map<string, Array<number>>;\n\n    /**\n     * Creates a new instance.\n     *\n     * @param options\n     */\n    constructor(options: Options) {\n        this._options = options;\n        this._ssrcCache = new Map();\n\n        if (!this._options.numOfLayers) {\n            this._options.numOfLayers = DEFAULT_NUM_OF_LAYERS;\n        }\n    }\n\n    /**\n     * Updates the given media description using the SSRCs that were cached for the mid associated\n     * with the media description and returns the modified media description.\n     *\n     * @param mLine\n     * @returns\n     */\n     _fillSsrcsFromCache(mLine: transform.MediaDescription) : any {\n        const mid = mLine.mid;\n        const cachedSsrcs = this._ssrcCache.get(mid);\n        const newSsrcs = this._parseSimLayers(mLine);\n        const newMsid = this._getSsrcAttribute(mLine, newSsrcs[0], 'msid');\n        const newCname = this._getSsrcAttribute(mLine, newSsrcs[0], 'cname');\n\n        mLine.ssrcs = [];\n        mLine.ssrcGroups = [];\n\n        for (const ssrc of cachedSsrcs) {\n            mLine.ssrcs.push({\n                id: ssrc,\n                attribute: 'msid',\n                value: newMsid\n            });\n            mLine.ssrcs.push({\n                id: ssrc,\n                attribute: 'cname',\n                value: newCname\n            });\n        }\n\n        mLine.ssrcGroups.push({\n            semantics: 'SIM',\n            ssrcs: cachedSsrcs.join(' ')\n        });\n\n        return mLine;\n    }\n\n    /**\n     * Generates a new set of SSRCs for the higher simulcast layers/streams and adds the attributes and SIM group to\n     * the given media description and returns the modified media description.\n     *\n     * @param mLine\n     * @param primarySsrc\n     * @returns\n     */\n    _generateNewSsrcsForSimulcast(mLine: transform.MediaDescription, primarySsrc: number) : any {\n        const cname = this._getSsrcAttribute(mLine, primarySsrc, 'cname');\n        let msid = this._getSsrcAttribute(mLine, primarySsrc, 'msid');\n        const addAssociatedAttributes = (mLine: transform.MediaDescription, ssrc: number) => {\n            mLine.ssrcs.push({\n                id: ssrc,\n                attribute: 'cname',\n                value: cname\n            });\n            mLine.ssrcs.push({\n                id: ssrc,\n                attribute: 'msid',\n                value: msid\n            });\n        }\n\n        // In Unified-plan mode, the a=ssrc lines with the msid attribute are not present (only cname attributes are\n        // present) in the answers that Chrome and Safari generate for an offer received from Jicofo. Generate these\n        // a=ssrc lines using the msid values from the a=msid line.\n        if (!msid) {\n            msid = mLine.msid;\n            const primarySsrcs = mLine.ssrcs;\n\n            primarySsrcs.forEach(ssrc => {\n                mLine.ssrcs.push({\n                    id: ssrc.id,\n                    attribute: 'msid',\n                    value: msid\n                });\n            })\n        }\n\n        // Generate SIM layers.\n        const simSsrcs = [];\n\n        for (let i = 0; i < this._options.numOfLayers - 1; ++i) {\n            const simSsrc = this._generateSsrc();\n\n            addAssociatedAttributes(mLine, simSsrc);\n            simSsrcs.push(simSsrc);\n        }\n\n        mLine.ssrcGroups = mLine.ssrcGroups || [];\n        mLine.ssrcGroups.push({\n            semantics: 'SIM',\n            ssrcs: primarySsrc + ' ' + simSsrcs.join(' ')\n        });\n\n        return mLine;\n    }\n\n    /**\n     * Returns a random number to be used for the SSRC.\n     *\n     * @returns\n     */\n    _generateSsrc() : number {\n        const max = 0xffffffff;\n\n        return Math.floor(Math.random() * max);\n    }\n\n    /**\n     * Returns the requested attribute value for a SSRC from a given media description.\n     *\n     * @param mLine\n     * @param ssrc\n     * @param attributeName\n     * @returns\n     */\n    _getSsrcAttribute(mLine: transform.MediaDescription, ssrc: number, attributeName: string) : string | undefined {\n        return mLine.ssrcs?.find(\n            ssrcInfo => Number(ssrcInfo.id) === ssrc\n            && ssrcInfo.attribute === attributeName)?.value;\n    }\n\n    /**\n     * Returns an array of all the primary SSRCs in the SIM group for a given media description.\n     *\n     * @param mLine\n     * @returns\n     */\n    _parseSimLayers(mLine: transform.MediaDescription) : Array<number> | null {\n        const simGroup = mLine.ssrcGroups?.find(group => group.semantics === 'SIM');\n\n        if (simGroup) {\n            return simGroup.ssrcs.split(' ').map(ssrc => Number(ssrc));\n        }\n\n        if (mLine.ssrcs?.length) {\n            return [ Number(mLine.ssrcs[0].id) ];\n        }\n\n        return null;\n    }\n\n    /**\n     * Munges the given media description to enable simulcast for the video media sections that are in either have\n     * SENDRECV or SENDONLY as the media direction thereby ignoring all the RECVONLY transceivers created for remote\n     * endpoints.\n     * NOTE: This needs to be called only when simulcast is enabled.\n     *\n     * @param description\n     * @returns\n     */\n    mungeLocalDescription(description: Description) : Description {\n        if (!description || !description.sdp) {\n            return description;\n        }\n        const session = transform.parse(description.sdp);\n\n        for (let media of session.media) {\n            // Ignore recvonly and inactive transceivers created for remote sources.\n            if (media.direction === MediaDirection.RECVONLY || media.direction === MediaDirection.INACTIVE) {\n                continue;\n            }\n\n            // Ignore audio m-lines.\n            if (media.type !== MediaType.VIDEO) {\n                continue;\n            }\n            const mid = media.mid;\n            const numSsrcs = new Set(media.ssrcs?.map(ssrcInfo => ssrcInfo.id));\n            const numGroups = media.ssrcGroups?.length ?? 0;\n            let primarySsrc: number;\n\n            // Do not munge if the description has no ssrcs or if simulcast is already enabled.\n            if (numSsrcs.size === 0 || numSsrcs.size > 2 || (numSsrcs.size === 2 && numGroups === 0)) {\n                continue;\n            }\n            if (numSsrcs.size === 1) {\n                primarySsrc = Number(media.ssrcs[0]?.id);\n            } else {\n                const fidGroup = media.ssrcGroups.find(group => group.semantics === 'FID');\n\n                if (fidGroup) {\n                    primarySsrc = Number(fidGroup.ssrcs.split(' ')[0]);\n                }\n            }\n\n            if (this._ssrcCache.has(mid)) {\n                media = this._fillSsrcsFromCache(media);\n            } else {\n                media = this._generateNewSsrcsForSimulcast(media, primarySsrc);\n                const simulcastSsrcs = this._parseSimLayers(media);\n\n                // Update the SSRCs in the cache so that they can re-used for the same mid again.\n                this._ssrcCache.set(mid, simulcastSsrcs);\n            }\n        }\n\n        return new RTCSessionDescription({\n            type: description.type,\n            sdp: transform.write(session)\n        });\n    }\n\n    /**\n     * Munges the given media description by removing the SSRCs and related FID groups for the higher layer streams.\n     *\n     * @param description\n     * @returns\n     */\n    mungeRemoteDescription(description: Description) : Description {\n        if (!description || !description.sdp) {\n            return description;\n        }\n\n        const session = transform.parse(description.sdp);\n\n        for (const media of session.media) {\n            if (media.type !== MediaType.VIDEO) {\n                continue;\n            }\n\n            if (media.direction !== MediaDirection.SENDONLY) {\n                continue;\n            }\n\n            // Ignore m-lines that do not have any SSRCs or SSRC groups. These are the ones associated with remote\n            // sources that have left the call. These will be recycled when a new remote source joins the call.\n            if (!media.ssrcGroups?.length || !media?.ssrcs.length) {\n                continue;\n            }\n\n            // Cache the SSRCs and the source groups.\n            const mungedSsrcs = new Set(media.ssrcs.slice());\n            const mungedSsrcGroups = new Set(media.ssrcGroups.slice());\n            const fidGroups = media.ssrcGroups.filter(group => group.semantics === 'FID');\n            const simGroup = media.ssrcGroups.find(group => group.semantics === 'SIM');\n            const primarySsrc = simGroup?.ssrcs.split(' ')[0];;\n\n            // When simulcast and RTX are both enabled.\n            if (fidGroups.length && simGroup) {\n                const fidGroup = fidGroups.find(group => group.ssrcs.includes(primarySsrc));\n                const secondarySsrc = fidGroup.ssrcs.split(' ')[1];\n\n                for (const ssrcGroup of media.ssrcGroups) {\n                    if (ssrcGroup !== fidGroup) {\n                        mungedSsrcGroups.delete(ssrcGroup);\n                    }\n                }\n                for (const ssrc of media.ssrcs) {\n                    if (ssrc.id.toString() !== primarySsrc\n                        && ssrc.id.toString() !== secondarySsrc) {\n                        mungedSsrcs.delete(ssrc);\n                    }\n                }\n\n            // When simulcast is enabled but RTX is disabled.\n            } else if (simGroup) {\n                mungedSsrcGroups.delete(simGroup);\n\n                for (const ssrc of media.ssrcs) {\n                    if (ssrc.id.toString() !== primarySsrc) {\n                        mungedSsrcs.delete(ssrc);\n                    }\n                }\n            }\n\n            media.ssrcs = Array.from(mungedSsrcs);\n            media.ssrcGroups = Array.from(mungedSsrcGroups);\n        }\n\n        return new RTCSessionDescription ({\n            type: description.type,\n            sdp: transform.write(session)\n        });\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport { JitsiConferenceEvents } from '../../JitsiConferenceEvents';\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport { createTrackStreamingStatusEvent } from '../../service/statistics/AnalyticsEvents';\nimport JitsiConference from '../../types/hand-crafted/JitsiConference';\nimport JitsiRemoteTrack from '../../types/hand-crafted/modules/RTC/JitsiRemoteTrack';\nimport RTC from '../../types/hand-crafted/modules/RTC/RTC';\nimport { VideoType } from '../../types/hand-crafted/service/RTC/VideoType';\nimport browser from '../browser';\nimport Statistics from '../statistics/statistics';\n\n/** Track streaming statuses. */\nexport enum TrackStreamingStatus {\n\n    /**\n     * Status indicating that streaming is currently active.\n     */\n    ACTIVE = 'active',\n\n    /**\n     * Status indicating that streaming is currently inactive.\n     * Inactive means the streaming was stopped on purpose from the bridge, like exiting forwarded sources or\n     * adaptivity decided to drop video because of not enough bandwidth.\n     */\n    INACTIVE = 'inactive',\n\n    /**\n     * Status indicating that streaming is currently interrupted.\n     */\n    INTERRUPTED = 'interrupted',\n\n    /**\n     * Status indicating that streaming is currently restoring.\n     */\n    RESTORING = 'restoring',\n  }\n\ntype StreamingStatusMap = {\n    // TODO: Replace this hand crafted VideoType when we convert VideoType.js to Typescript.\n    videoType?: VideoType, \n    startedMs?: number,\n    p2p?: boolean,\n    streamingStatus?: string,\n    value?: number\n};\n\nconst logger = getLogger(__filename);\n\n/**\n * Default value of 500 milliseconds for {@link TrackStreamingStatusImpl.outOfForwardedSourcesTimeout}.\n */\nconst DEFAULT_NOT_IN_FORWARDED_SOURCES_TIMEOUT = 500;\n\n/**\n * Default value of 2500 milliseconds for {@link TrackStreamingStatusImpl.p2pRtcMuteTimeout}.\n */\nconst DEFAULT_P2P_RTC_MUTE_TIMEOUT = 2500;\n\n/**\n * Default value of 10000 milliseconds for {@link TrackStreamingStatusImpl.rtcMuteTimeout}.\n */\nconst DEFAULT_RTC_MUTE_TIMEOUT = 10000;\n\n/**\n * The time to wait a track to be restored. Track which was out of forwarded sources should be inactive and when\n * entering forwarded sources it becomes restoring and when data is received from bridge it will become active, but if\n * no data is received for some time we set status of that track streaming to interrupted.\n */\nconst DEFAULT_RESTORING_TIMEOUT = 10000;\n\n/**\n * Class is responsible for emitting JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED events.\n */\nexport class TrackStreamingStatusImpl {\n    rtc: RTC;\n    conference: JitsiConference;\n    track: JitsiRemoteTrack;\n\n    /**  This holds the timeout callback ID scheduled using window.setTimeout. */\n    trackTimer: number | null;\n\n    /**\n     * If video track frozen detection through RTC mute event is supported, we wait some time until video track is\n     * considered frozen. But because when the track falls out of forwarded sources it is expected for the video to\n     * freeze this timeout must be significantly reduced in \"out of forwarded sources\" case.\n     *\n     * Basically this value is used instead of {@link rtcMuteTimeout} when track is not in forwarded sources.\n     */\n    outOfForwardedSourcesTimeout: number;\n\n    /**\n     * How long we are going to wait for the corresponding signaling mute event after the RTC video track muted\n     * event is fired on the Media stream, before the connection interrupted is fired. The default value is\n     * {@link DEFAULT_P2P_RTC_MUTE_TIMEOUT}.\n     */\n    p2pRtcMuteTimeout: number;\n\n    /**\n     * How long we're going to wait after the RTC video track muted event for the corresponding signalling mute\n     * event, before the connection interrupted is fired. The default value is {@link DEFAULT_RTC_MUTE_TIMEOUT}.\n     *\n     * @returns amount of time in milliseconds\n     */\n    rtcMuteTimeout: number;\n\n    /**\n     * This holds a timestamp indicating  when remote video track was RTC muted. The purpose of storing the\n     * timestamp is to avoid the transition to disconnected status in case of legitimate video mute operation where\n     * the signalling video muted event can arrive shortly after RTC muted event.\n     *\n     * The timestamp is measured in milliseconds obtained with <tt>Date.now()</tt>.\n     *\n     * FIXME merge this logic with NO_DATA_FROM_SOURCE event implemented in JitsiLocalTrack by extending the event\n     * to the remote track and allowing to set different timeout for local and remote tracks.\n     */\n    rtcMutedTimestamp: number | null;\n\n    /** This holds the restoring timeout callback ID scheduled using window.setTimeout. */\n    restoringTimer: ReturnType<typeof setTimeout> | null;\n\n    /**\n     * This holds the current streaming status (along with all the internal events that happen while in that\n     * state).\n     *\n     * The goal is to send this information to the analytics backend for post-mortem analysis.\n     */\n    streamingStatusMap: StreamingStatusMap;\n\n    _onP2PStatus: () => void;\n    _onUserLeft: () => void;\n    _onTrackRtcMuted: () => void;\n    _onTrackRtcUnmuted: () => void;\n    _onSignallingMuteChanged: () => void;\n    _onTrackVideoTypeChanged: () => void;\n    _onLastNValueChanged: () => void;\n    _onForwardedSourcesChanged: () => void;\n\n    /* eslint-disable max-params*/\n    /**\n     * Calculates the new {@link TrackStreamingStatus} based on the values given for some specific remote track. It is\n     * assumed that the conference is currently in the JVB mode (in contrary to the P2P mode)\n     * @param isInForwardedSources - indicates whether the track is in the forwarded sources set. When set to\n     * false it means that JVB is not sending any video for the track.\n     * @param isRestoringTimedout - if true it means that the track has been outside of forwarded sources too\n     * long to be considered {@link TrackStreamingStatus.RESTORING}.\n     * @param isVideoMuted - true if the track is video muted and we should not expect to receive any video.\n     * @param isVideoTrackFrozen - if the current browser support video frozen detection then it will be set to\n     * true when the video track is frozen. If the current browser does not support frozen detection the it's always\n     * false.\n     * @return {TrackStreamingStatus} the new streaming status for the track for whom the values above were provided.\n     * @private\n     */\n    static _getNewStateForJvbMode(\n            isInForwardedSources: boolean,\n            isRestoringTimedout: boolean,\n            isVideoMuted: boolean,\n            isVideoTrackFrozen: boolean): TrackStreamingStatus {\n\n        // We are currently not checking the endpoint connection status received from the JVB.\n        if (isVideoMuted) {\n            // If the connection is active according to JVB and the track is video muted there is no way for the\n            // connection to be inactive, because the detection logic below only makes sense for video.\n            return TrackStreamingStatus.ACTIVE;\n        }\n\n        // Logic when isVideoTrackFrozen is supported\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n            if (!isVideoTrackFrozen) {\n                // If the video is playing we're good\n                return TrackStreamingStatus.ACTIVE;\n            } else if (isInForwardedSources) {\n                return isRestoringTimedout ? TrackStreamingStatus.INTERRUPTED : TrackStreamingStatus.RESTORING;\n            }\n\n            return TrackStreamingStatus.INACTIVE;\n        }\n\n        // Because this browser is incapable of detecting frozen video we must rely on the forwarded sources value\n        return isInForwardedSources ? TrackStreamingStatus.ACTIVE : TrackStreamingStatus.INACTIVE;\n    }\n\n    /* eslint-enable max-params*/\n\n    /**\n     * In P2P mode we don't care about any values coming from the JVB and the streaming status can be only active or\n     * interrupted.\n     * @param isVideoMuted - true if video muted\n     * @param isVideoTrackFrozen - true if the video track for the remote track is currently frozen. If the\n     * current browser does not support video frozen detection then it's always false.\n     * @return {TrackStreamingStatus}\n     * @private\n     */\n    static _getNewStateForP2PMode(isVideoMuted: boolean, isVideoTrackFrozen: boolean): TrackStreamingStatus {\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            // There's no way to detect problems in P2P when there's no video track frozen detection...\n            return TrackStreamingStatus.ACTIVE;\n        }\n\n        return isVideoMuted || !isVideoTrackFrozen\n            ? TrackStreamingStatus.ACTIVE : TrackStreamingStatus.INTERRUPTED;\n    }\n\n    /**\n     * Creates new instance of <tt>TrackStreamingStatus</tt>.\n     *\n     * @constructor\n     * @param rtc - the RTC service instance\n     * @param conference - parent conference instance\n     * @param {Object} options\n     * @param {number} [options.p2pRtcMuteTimeout=2500] custom value for\n     * {@link TrackStreamingStatusImpl.p2pRtcMuteTimeout}.\n     * @param {number} [options.rtcMuteTimeout=2000] custom value for\n     * {@link TrackStreamingStatusImpl.rtcMuteTimeout}.\n     * @param {number} [options.outOfForwardedSourcesTimeout=500] custom value for\n     * {@link TrackStreamingStatusImpl.outOfForwardedSourcesTimeout}.\n     */\n    constructor(rtc: RTC, conference: JitsiConference, track: JitsiRemoteTrack, options: {\n        outOfForwardedSourcesTimeout: number,\n        p2pRtcMuteTimeout: number,\n        rtcMuteTimeout: number\n    }) {\n        this.rtc = rtc;\n        this.conference = conference;\n        this.track = track;\n\n        this.restoringTimer = null;\n        this.rtcMutedTimestamp = null;\n        this.streamingStatusMap = {};\n        this.trackTimer = null;\n\n        this.outOfForwardedSourcesTimeout = typeof options.outOfForwardedSourcesTimeout === 'number'\n            ? options.outOfForwardedSourcesTimeout : DEFAULT_NOT_IN_FORWARDED_SOURCES_TIMEOUT;\n\n        this.p2pRtcMuteTimeout = typeof options.p2pRtcMuteTimeout === 'number'\n            ? options.p2pRtcMuteTimeout : DEFAULT_P2P_RTC_MUTE_TIMEOUT;\n\n        this.rtcMuteTimeout = typeof options.rtcMuteTimeout === 'number'\n            ? options.rtcMuteTimeout : DEFAULT_RTC_MUTE_TIMEOUT;\n        logger.info(`RtcMuteTimeout set to: ${this.rtcMuteTimeout}`);\n    }\n\n    /**\n     * Gets the video frozen timeout for given source name.\n     * @return how long are we going to wait since RTC video muted even, before a video track is considered\n     * frozen.\n     * @private\n     */\n    _getVideoFrozenTimeout(): number {\n        const sourceName = this.track.getSourceName();\n\n        return this.rtc.isInForwardedSources(sourceName)\n            ? this.rtcMuteTimeout\n            : this.conference.isP2PActive() ? this.p2pRtcMuteTimeout : this.outOfForwardedSourcesTimeout;\n    }\n\n    /**\n     * Initializes <tt>TrackStreamingStatus</tt> and bind required event listeners.\n     */\n    init(): void {\n        // Handles P2P status changes\n        this._onP2PStatus = this.figureOutStreamingStatus.bind(this);\n        this.conference.on(JitsiConferenceEvents.P2P_STATUS, this._onP2PStatus);\n\n        // Used to send analytics events for the participant that left the call.\n        this._onUserLeft = this.onUserLeft.bind(this);\n        this.conference.on(JitsiConferenceEvents.USER_LEFT, this._onUserLeft);\n\n        // On some browsers MediaStreamTrack trigger \"onmute\"/\"onunmute\" events for video type tracks when they stop\n        // receiving data which is often a sign that remote user is having connectivity issues.\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n\n            this._onTrackRtcMuted = this.onTrackRtcMuted.bind(this);\n            this.rtc.addListener(RTCEvents.REMOTE_TRACK_MUTE, this._onTrackRtcMuted);\n\n            this._onTrackRtcUnmuted = this.onTrackRtcUnmuted.bind(this);\n            this.rtc.addListener(RTCEvents.REMOTE_TRACK_UNMUTE, this._onTrackRtcUnmuted);\n\n            // Listened which will be bound to JitsiRemoteTrack to listen for signalling mute/unmute events.\n            this._onSignallingMuteChanged = this.onSignallingMuteChanged.bind(this);\n            this.track.on(JitsiTrackEvents.TRACK_MUTE_CHANGED, this._onSignallingMuteChanged);\n\n            // Used to send an analytics event when the video type changes.\n            this._onTrackVideoTypeChanged = this.onTrackVideoTypeChanged.bind(this);\n            this.track.on(JitsiTrackEvents.TRACK_VIDEOTYPE_CHANGED, this._onTrackVideoTypeChanged);\n        }\n\n        this._onForwardedSourcesChanged = this.onForwardedSourcesChanged.bind(this);\n        this.conference.on(JitsiConferenceEvents.FORWARDED_SOURCES_CHANGED, this._onForwardedSourcesChanged);\n\n        this._onLastNValueChanged = this.figureOutStreamingStatus.bind(this);\n        this.rtc.on(RTCEvents.LASTN_VALUE_CHANGED, this._onLastNValueChanged);\n    }\n\n    /**\n     * Removes all event listeners and disposes of all resources held by this instance.\n     */\n    dispose(): void {\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n            this.rtc.removeListener(RTCEvents.REMOTE_TRACK_MUTE, this._onTrackRtcMuted);\n            this.rtc.removeListener(RTCEvents.REMOTE_TRACK_UNMUTE, this._onTrackRtcUnmuted);\n\n            this.track.off(JitsiTrackEvents.TRACK_MUTE_CHANGED, this._onSignallingMuteChanged);\n        }\n\n        this.conference.off(JitsiConferenceEvents.FORWARDED_SOURCES_CHANGED, this._onForwardedSourcesChanged);\n        this.conference.off(JitsiConferenceEvents.P2P_STATUS, this._onP2PStatus);\n        this.conference.off(JitsiConferenceEvents.USER_LEFT, this._onUserLeft);\n        this.rtc.removeListener(RTCEvents.LASTN_VALUE_CHANGED, this._onLastNValueChanged);\n\n        this.clearTimeout();\n        this.clearRtcMutedTimestamp();\n        this.maybeSendTrackStreamingStatusEvent(Date.now());\n        this.figureOutStreamingStatus();\n    }\n\n    /**\n     * Changes streaming status.\n     * @param newStatus\n     */\n    _changeStreamingStatus(newStatus: TrackStreamingStatus): void {\n        if (this.track.getTrackStreamingStatus() !== newStatus) {\n\n            const sourceName = this.track.getSourceName();\n\n            this.track._setTrackStreamingStatus(newStatus);\n\n            logger.debug(`Emit track streaming status(${Date.now()}) ${sourceName}: ${newStatus}`);\n\n            // Log the event on CallStats\n            Statistics.sendLog(\n                JSON.stringify({\n                    id: 'track.streaming.status',\n                    track: sourceName,\n                    status: newStatus\n                }));\n\n            this.track.emit(JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED, newStatus);\n        }\n    }\n\n    /**\n     * Reset the postponed \"streaming interrupted\" event which was previously scheduled as a timeout on RTC 'onmute'\n     * event.\n     */\n    clearTimeout(): void {\n        if (this.trackTimer) {\n            window.clearTimeout(this.trackTimer);\n            this.trackTimer = null;\n        }\n    }\n\n    /**\n     * Clears the timestamp of the RTC muted event for remote video track.\n     */\n    clearRtcMutedTimestamp(): void {\n        this.rtcMutedTimestamp = null;\n    }\n\n    /**\n     * Checks if track is considered frozen.\n     * @return <tt>true</tt> if the video has frozen or <tt>false</tt> when it's either not considered frozen\n     * (yet) or if freeze detection is not supported by the current browser.\n     *\n     * FIXME merge this logic with NO_DATA_FROM_SOURCE event implemented in JitsiLocalTrack by extending the event to\n     *       the remote track and allowing to set different timeout for local and remote tracks.\n     */\n    isVideoTrackFrozen(): boolean {\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            return false;\n        }\n\n        const isVideoRTCMuted = this.track.isWebRTCTrackMuted();\n        const rtcMutedTimestamp = this.rtcMutedTimestamp;\n        const timeout = this._getVideoFrozenTimeout();\n\n        return isVideoRTCMuted && typeof rtcMutedTimestamp === 'number' && (Date.now() - rtcMutedTimestamp) >= timeout;\n    }\n\n    /**\n     * Figures out (and updates) the current streaming status for the track identified by the source name.\n     */\n    figureOutStreamingStatus(): void {\n        const sourceName = this.track.getSourceName();\n        const inP2PMode = this.conference.isP2PActive();\n        const isRestoringTimedOut = this._isRestoringTimedout();\n        const audioOnlyMode = this.conference.getLastN() === 0;\n\n        // NOTE Overriding videoMuted to true for audioOnlyMode should disable any detection based on video playback or\n        // forwarded sources.\n        const isVideoMuted = this.track.isMuted() || audioOnlyMode;\n        const isVideoTrackFrozen = this.isVideoTrackFrozen();\n        const isInForwardedSources = this.rtc.isInForwardedSources(sourceName);\n\n        const newState\n            = inP2PMode\n                ? TrackStreamingStatusImpl._getNewStateForP2PMode(\n                    isVideoMuted,\n                    isVideoTrackFrozen)\n                : TrackStreamingStatusImpl._getNewStateForJvbMode(\n                    isInForwardedSources,\n                    isRestoringTimedOut,\n                    isVideoMuted,\n                    isVideoTrackFrozen);\n\n        // if the new state is not restoring clear timers and timestamps that we use to track the restoring state\n        if (newState !== TrackStreamingStatus.RESTORING) {\n            this._clearRestoringTimer();\n        }\n\n        logger.debug(\n            `Figure out conn status for ${sourceName}, is video muted: ${\n                isVideoMuted} video track frozen: ${\n                isVideoTrackFrozen} p2p mode: ${\n                inP2PMode} is in forwarded sources: ${\n                isInForwardedSources} currentStatus => newStatus: ${\n                this.track.getTrackStreamingStatus()} => ${newState}`);\n\n        const oldStreamingStatus = this.streamingStatusMap || {};\n\n        // Send an analytics event (guard on either the p2p flag or the streaming status has changed since the last\n        // time this code block run).\n        if (!('p2p' in oldStreamingStatus)\n            || !('streamingStatus' in oldStreamingStatus)\n            || oldStreamingStatus.p2p !== inP2PMode\n            || oldStreamingStatus.streamingStatus !== newState) {\n\n            const nowMs = Date.now();\n\n            this.maybeSendTrackStreamingStatusEvent(nowMs);\n\n            this.streamingStatusMap = {\n                ...oldStreamingStatus,\n                streamingStatus: newState,\n                p2p: inP2PMode,\n                startedMs: nowMs\n            };\n\n            // sometimes (always?) we're late to hook the TRACK_VIDEOTYPE_CHANGED event and the video type is not in\n            // oldStreamingStatus.\n            if (!('videoType' in this.streamingStatusMap)) {\n                this.streamingStatusMap.videoType = this.track.getVideoType();\n            }\n        }\n        this._changeStreamingStatus(newState);\n    }\n\n    /**\n     * Computes the duration of the current streaming status for the track (i.e. 15 seconds in the INTERRUPTED state)\n     * and sends a track streaming status event.\n     * @param nowMs - The current time (in millis).\n     */\n    maybeSendTrackStreamingStatusEvent(nowMs: number): void {\n        const trackStreamingStatus = this.streamingStatusMap;\n\n        if (trackStreamingStatus\n            && 'startedMs' in trackStreamingStatus\n            && 'videoType' in trackStreamingStatus\n            && 'streamingStatus' in trackStreamingStatus\n            && 'p2p' in trackStreamingStatus) {\n            trackStreamingStatus.value = nowMs - trackStreamingStatus.startedMs;\n            Statistics.sendAnalytics(createTrackStreamingStatusEvent(trackStreamingStatus));\n        }\n    }\n\n    /**\n     * On change in forwarded sources set check all leaving and entering track to change their corresponding statuses.\n     *\n     * @param leavingForwardedSources - The array of sourceName leaving forwarded sources.\n     * @param enteringForwardedSources - The array of sourceName entering forwarded sources.\n     * @param timestamp - The time in millis\n     * @private\n     */\n    onForwardedSourcesChanged(\n            leavingForwardedSources: string[] = [],\n            enteringForwardedSources: string[] = [],\n            timestamp: number): void {\n\n        const sourceName = this.track.getSourceName();\n\n        logger.debug(`Fowarded sources changed leaving=${leavingForwardedSources}, entering=${\n            enteringForwardedSources} at ${timestamp}`);\n\n        // If the browser doesn't fire the mute/onmute events when the remote peer stops/starts sending media,\n        // calculate the streaming status for all the tracks since it won't get triggered automatically on the track\n        // that has started/stopped receiving media.\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            this.figureOutStreamingStatus();\n        }\n\n        if (leavingForwardedSources.includes(sourceName)) {\n            this.track._clearEnteredForwardedSourcesTimestamp();\n            this._clearRestoringTimer();\n            browser.supportsVideoMuteOnConnInterrupted() && this.figureOutStreamingStatus();\n        }\n\n        if (enteringForwardedSources.includes(sourceName)) {\n            // store the timestamp this track is entering forwarded sources\n            this.track._setEnteredForwardedSourcesTimestamp(timestamp);\n            browser.supportsVideoMuteOnConnInterrupted() && this.figureOutStreamingStatus();\n        }\n    }\n\n    /**\n     * Clears the restoring timer for video track and the timestamp for entering forwarded sources.\n     */\n    _clearRestoringTimer(): void {\n        const rTimer = this.restoringTimer;\n\n        if (rTimer) {\n            clearTimeout(rTimer);\n            this.restoringTimer = null;\n        }\n    }\n\n    /**\n     * Checks whether a track had stayed enough in restoring state, compares current time and the time the track\n     * entered in forwarded sources. If it hasn't timedout and there is no timer added, add new timer in order to give\n     * it more time to become active or mark it as interrupted on next check.\n     *\n     * @returns <tt>true</tt> if the track was in restoring state more than the timeout\n     * ({@link DEFAULT_RESTORING_TIMEOUT}.) in order to set its status to interrupted.\n     * @private\n     */\n    _isRestoringTimedout(): boolean {\n        const enteredForwardedSourcesTimestamp = this.track._getEnteredForwardedSourcesTimestamp();\n\n        if (enteredForwardedSourcesTimestamp\n            && (Date.now() - enteredForwardedSourcesTimestamp) >= DEFAULT_RESTORING_TIMEOUT) {\n            return true;\n        }\n\n        // still haven't reached timeout, if there is no timer scheduled, schedule one so we can track the restoring\n        // state and change it after reaching the timeout\n        const rTimer = this.restoringTimer;\n\n        if (!rTimer) {\n            this.restoringTimer = setTimeout(() => this.figureOutStreamingStatus(), DEFAULT_RESTORING_TIMEOUT);\n        }\n\n        return false;\n    }\n\n    /** Checks whether a track is the current track. */\n    _isCurrentTrack(track: JitsiRemoteTrack): boolean {\n        return track.getSourceName() === this.track.getSourceName();\n    }\n\n    /**\n     * Sends a last/final track streaming status event for the track of the user that left the conference.\n     * @param id - The id of the participant that left the conference.\n     */\n    onUserLeft(id: string): void {\n        if (this.track.getParticipantId() === id) {\n            this.maybeSendTrackStreamingStatusEvent(Date.now());\n            this.streamingStatusMap = {};\n        }\n    }\n\n    /**\n     * Handles RTC 'onmute' event for the video track.\n     *\n     * @param track - The video track for which 'onmute' event will be processed.\n     */\n    onTrackRtcMuted(track: JitsiRemoteTrack): void {\n        if (!this._isCurrentTrack(track)) {\n            return;\n        }\n\n        const sourceName = track.getSourceName();\n\n        logger.debug(`Detector track RTC muted: ${sourceName}`, Date.now());\n\n        this.rtcMutedTimestamp = Date.now();\n        if (!track.isMuted()) {\n            // If the user is not muted according to the signalling we'll give it some time, before the streaming\n            // interrupted event is triggered.\n            this.clearTimeout();\n\n            // The timeout is reduced when track is not in the forwarded sources\n            const timeout = this._getVideoFrozenTimeout();\n\n            this.trackTimer = window.setTimeout(() => {\n                logger.debug(`Set RTC mute timeout for: ${sourceName} of ${timeout} ms`);\n                this.clearTimeout();\n                this.figureOutStreamingStatus();\n            }, timeout);\n        }\n    }\n\n    /**\n     * Handles RTC 'onunmute' event for the video track.\n     *\n     * @param track - The video track for which 'onunmute' event will be processed.\n     */\n    onTrackRtcUnmuted(track: JitsiRemoteTrack): void {\n        if (!this._isCurrentTrack(track)) {\n            return;\n        }\n\n        const sourceName = this.track.getSourceName();\n\n        logger.debug(`Detector track RTC unmuted: ${sourceName}`, Date.now());\n\n        this.clearTimeout();\n        this.clearRtcMutedTimestamp();\n\n        this.figureOutStreamingStatus();\n    }\n\n    /**\n     * Here the signalling \"mute\"/\"unmute\" events are processed.\n     *\n     * @param track - The remote video track for which the signalling mute/unmute event will be\n     * processed.\n     */\n    onSignallingMuteChanged(track: JitsiRemoteTrack): void {\n        if (!this._isCurrentTrack(track)) {\n            return;\n        }\n\n        const sourceName = this.track.getSourceName();\n\n        logger.debug(`Detector on track signalling mute changed: ${sourceName}`, track.isMuted());\n\n        this.figureOutStreamingStatus();\n    }\n\n    /**\n     * Sends a track streaming status event as a result of the video type changing.\n     * @deprecated this will go away with full multiple streams support\n     * @param type - The video type.\n     */\n    onTrackVideoTypeChanged(type: VideoType): void {\n        const nowMs = Date.now();\n\n        this.maybeSendTrackStreamingStatusEvent(nowMs);\n\n        this.streamingStatusMap = {\n            ...this.streamingStatusMap || {},\n            videoType: type,\n            startedMs: nowMs\n        };\n    }\n}\n\nexport default TrackStreamingStatusImpl;\n","import * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport { createTtfmEvent } from '../../service/statistics/AnalyticsEvents';\nimport TrackStreamingStatusImpl, { TrackStreamingStatus } from '../connectivity/TrackStreamingStatus';\nimport FeatureFlags from '../flags/FeatureFlags';\nimport Statistics from '../statistics/statistics';\n\nimport JitsiTrack from './JitsiTrack';\n\nconst logger = require('@jitsi/logger').getLogger(__filename);\n\nconst RTCEvents = require('../../service/RTC/RTCEvents');\n\nlet ttfmTrackerAudioAttached = false;\nlet ttfmTrackerVideoAttached = false;\n\n/**\n * List of container events that we are going to process. _onContainerEventHandler will be added as listener to the\n * container for every event in the list.\n */\nconst containerEvents = [ 'abort', 'canplaythrough', 'ended', 'error' ];\n\n/* eslint-disable max-params */\n\n/**\n * Represents a single media track (either audio or video).\n */\nexport default class JitsiRemoteTrack extends JitsiTrack {\n    /**\n     * Creates new JitsiRemoteTrack instance.\n     * @param {RTC} rtc the RTC service instance.\n     * @param {JitsiConference} conference the conference to which this track\n     *        belongs to\n     * @param {string} ownerEndpointId the endpoint ID of the track owner\n     * @param {MediaStream} stream WebRTC MediaStream, parent of the track\n     * @param {MediaStreamTrack} track underlying WebRTC MediaStreamTrack for\n     *        the new JitsiRemoteTrack\n     * @param {MediaType} mediaType the type of the media\n     * @param {VideoType} videoType the type of the video if applicable\n     * @param {number} ssrc the SSRC number of the Media Stream\n     * @param {boolean} muted the initial muted state\n     * @param {boolean} isP2P indicates whether or not this track belongs to a\n     * P2P session\n     * @param {String} sourceName the source name signaled for the track\n     * @throws {TypeError} if <tt>ssrc</tt> is not a number.\n     * @constructor\n     */\n    constructor(\n            rtc,\n            conference,\n            ownerEndpointId,\n            stream,\n            track,\n            mediaType,\n            videoType,\n            ssrc,\n            muted,\n            isP2P,\n            sourceName) {\n        super(\n            conference,\n            stream,\n            track,\n            () => {\n                // Nothing to do if the track is inactive.\n            },\n            mediaType,\n            videoType);\n        this.rtc = rtc;\n\n        // Prevent from mixing up type of SSRC which should be a number\n        if (typeof ssrc !== 'number') {\n            throw new TypeError(`SSRC ${ssrc} is not a number`);\n        }\n        this.ssrc = ssrc;\n        this.ownerEndpointId = ownerEndpointId;\n        this.muted = muted;\n        this.isP2P = isP2P;\n        this._sourceName = sourceName;\n        this._trackStreamingStatus = null;\n        this._trackStreamingStatusImpl = null;\n\n        /**\n         * This holds the timestamp indicating when remote video track entered forwarded sources set. Track entering\n         * forwardedSources will have streaming status restoring and when we start receiving video will become active,\n         * but if video is not received for certain time {@link DEFAULT_RESTORING_TIMEOUT} that track streaming status\n         * will become interrupted.\n         */\n        this._enteredForwardedSourcesTimestamp = null;\n\n        this.addEventListener = this.on = this._addEventListener.bind(this);\n        this.removeEventListener = this.off = this._removeEventListener.bind(this);\n\n        logger.debug(`New remote track added: ${this}`);\n\n        // we want to mark whether the track has been ever muted\n        // to detect ttfm events for startmuted conferences, as it can\n        // significantly increase ttfm values\n        this.hasBeenMuted = muted;\n\n        // Bind 'onmute' and 'onunmute' event handlers\n        if (this.rtc && this.track) {\n            this._bindTrackHandlers();\n        }\n        this._containerHandlers = {};\n        containerEvents.forEach(event => {\n            this._containerHandlers[event] = this._containerEventHandler.bind(this, event);\n        });\n    }\n\n    /* eslint-enable max-params */\n    /**\n     * Attaches the track handlers.\n     *\n     * @returns {void}\n     */\n    _bindTrackHandlers() {\n        this.track.addEventListener('mute', () => this._onTrackMute());\n        this.track.addEventListener('unmute', () => this._onTrackUnmute());\n        this.track.addEventListener('ended', () => {\n            logger.debug(`\"onended\" event(${Date.now()}): ${this}`);\n        });\n    }\n\n    /**\n     * Overrides addEventListener method to init TrackStreamingStatus instance when there are listeners for the\n     * {@link JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED} event.\n     *\n     * @param {string} event - event name\n     * @param {function} handler - event handler\n     */\n    _addEventListener(event, handler) {\n        super.addListener(event, handler);\n\n        if (FeatureFlags.isSourceNameSignalingEnabled()\n            && event === JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED\n            && this.listenerCount(JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED)\n            && !this._trackStreamingStatusImpl\n        ) {\n            this._initTrackStreamingStatus();\n            logger.debug(`Initializing track streaming status: ${this._sourceName}`);\n        }\n    }\n\n    /**\n     * Overrides removeEventListener method to dispose TrackStreamingStatus instance.\n     *\n     * @param {string} event - event name\n     * @param {function} handler - event handler\n     */\n    _removeEventListener(event, handler) {\n        super.removeListener(event, handler);\n\n        if (FeatureFlags.isSourceNameSignalingEnabled()\n            && event === JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED\n            && !this.listenerCount(JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED)\n        ) {\n            this._disposeTrackStreamingStatus();\n            logger.debug(`Disposing track streaming status: ${this._sourceName}`);\n        }\n    }\n\n    /**\n     * Callback invoked when the track is muted. Emits an event notifying\n     * listeners of the mute event.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onTrackMute() {\n        logger.debug(`\"onmute\" event(${Date.now()}): ${this}`);\n\n        this.rtc.eventEmitter.emit(RTCEvents.REMOTE_TRACK_MUTE, this);\n    }\n\n    /**\n     * Callback invoked when the track is unmuted. Emits an event notifying\n     * listeners of the mute event.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onTrackUnmute() {\n        logger.debug(`\"onunmute\" event(${Date.now()}): ${this}`);\n\n        this.rtc.eventEmitter.emit(RTCEvents.REMOTE_TRACK_UNMUTE, this);\n    }\n\n    /**\n     * Removes attached event listeners and dispose TrackStreamingStatus .\n     *\n     * @returns {Promise}\n     */\n    dispose() {\n        if (FeatureFlags.isSourceNameSignalingEnabled()) {\n            this._disposeTrackStreamingStatus();\n        }\n\n        return super.dispose();\n    }\n\n    /**\n     * Sets current muted status and fires an events for the change.\n     * @param value the muted status.\n     */\n    setMute(value) {\n        if (this.muted === value) {\n            return;\n        }\n\n        if (value) {\n            this.hasBeenMuted = true;\n        }\n\n        // we can have a fake video stream\n        if (this.stream) {\n            this.stream.muted = value;\n        }\n\n        this.muted = value;\n        this.emit(JitsiTrackEvents.TRACK_MUTE_CHANGED, this);\n    }\n\n    /**\n     * Returns the current muted status of the track.\n     * @returns {boolean|*|JitsiRemoteTrack.muted} <tt>true</tt> if the track is\n     * muted and <tt>false</tt> otherwise.\n     */\n    isMuted() {\n        return this.muted;\n    }\n\n    /**\n     * Returns the participant id which owns the track.\n     *\n     * @returns {string} the id of the participants. It corresponds to the\n     * Colibri endpoint id/MUC nickname in case of Jitsi-meet.\n     */\n    getParticipantId() {\n        return this.ownerEndpointId;\n    }\n\n    /**\n     * Return false;\n     */\n    isLocal() {\n        return false;\n    }\n\n    /**\n     * Returns the synchronization source identifier (SSRC) of this remote\n     * track.\n     *\n     * @returns {number} the SSRC of this remote track.\n     */\n    getSSRC() {\n        return this.ssrc;\n    }\n\n\n    /**\n     * Returns the tracks source name\n     *\n     * @returns {string} the track's source name\n     */\n    getSourceName() {\n        return this._sourceName;\n    }\n\n    /**\n     * Changes the video type of the track.\n     *\n     * @param {string} type - The new video type(\"camera\", \"desktop\").\n     */\n    _setVideoType(type) {\n        if (this.videoType === type) {\n            return;\n        }\n        this.videoType = type;\n        this.emit(JitsiTrackEvents.TRACK_VIDEOTYPE_CHANGED, type);\n    }\n\n    /**\n     * Handles track play events.\n     */\n    _playCallback() {\n        if (!this.conference.room) {\n            return;\n        }\n\n        const type = this.isVideoTrack() ? 'video' : 'audio';\n\n        const now = window.performance.now();\n\n        console.log(`(TIME) Render ${type}:\\t`, now);\n        this.conference.getConnectionTimes()[`${type}.render`] = now;\n\n        // The conference can be started without calling GUM\n        // FIXME if there would be a module for connection times this kind\n        // of logic (gumDuration or ttfm) should end up there\n        const gumStart = window.connectionTimes['obtainPermissions.start'];\n        const gumEnd = window.connectionTimes['obtainPermissions.end'];\n        const gumDuration\n            = !isNaN(gumEnd) && !isNaN(gumStart) ? gumEnd - gumStart : 0;\n\n        // Subtract the muc.joined-to-session-initiate duration because jicofo\n        // waits until there are 2 participants to start Jingle sessions.\n        const ttfm = now\n            - (this.conference.getConnectionTimes()['session.initiate']\n                - this.conference.getConnectionTimes()['muc.joined'])\n            - gumDuration;\n\n        this.conference.getConnectionTimes()[`${type}.ttfm`] = ttfm;\n        console.log(`(TIME) TTFM ${type}:\\t`, ttfm);\n\n        Statistics.sendAnalytics(createTtfmEvent(\n            {\n                'media_type': type,\n                muted: this.hasBeenMuted,\n                value: ttfm\n            }));\n\n    }\n\n    /**\n     * Attach time to first media tracker only if there is conference and only\n     * for the first element.\n     * @param container the HTML container which can be 'video' or 'audio'\n     * element.\n     * @private\n     */\n    _attachTTFMTracker(container) {\n        if ((ttfmTrackerAudioAttached && this.isAudioTrack())\n            || (ttfmTrackerVideoAttached && this.isVideoTrack())) {\n            return;\n        }\n\n        if (this.isAudioTrack()) {\n            ttfmTrackerAudioAttached = true;\n        }\n        if (this.isVideoTrack()) {\n            ttfmTrackerVideoAttached = true;\n        }\n\n        container.addEventListener('canplay', this._playCallback.bind(this));\n    }\n\n    /**\n     * Called when the track has been attached to a new container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or 'audio' element.\n     * @private\n     */\n    _onTrackAttach(container) {\n        containerEvents.forEach(event => {\n            container.addEventListener(event, this._containerHandlers[event]);\n        });\n    }\n\n    /**\n     * Called when the track has been detached from a container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or 'audio' element.\n     * @private\n     */\n    _onTrackDetach(container) {\n        containerEvents.forEach(event => {\n            container.removeEventListener(event, this._containerHandlers[event]);\n        });\n    }\n\n    /**\n     * An event handler for events triggered by the attached container.\n     *\n     * @param {string} type - The type of the event.\n     */\n    _containerEventHandler(type) {\n        logger.debug(`${type} handler was called for a container with attached ${this}`);\n    }\n\n    /**\n     * Returns a string with a description of the current status of the track.\n     *\n     * @returns {string}\n     */\n    _getStatus() {\n        const { enabled, muted, readyState } = this.track;\n\n        return `readyState: ${readyState}, muted: ${muted}, enabled: ${enabled}`;\n    }\n\n    /**\n     * Initializes trackStreamingStatusImpl.\n     */\n    _initTrackStreamingStatus() {\n        const config = this.conference.options.config;\n\n        this._trackStreamingStatus = TrackStreamingStatus.ACTIVE;\n\n        this._trackStreamingStatusImpl = new TrackStreamingStatusImpl(\n            this.rtc,\n            this.conference,\n            this,\n            {\n                // These options are not public API, leaving it here only as an entry point through config for\n                // tuning up purposes. Default values should be adjusted as soon as optimal values are discovered.\n                p2pRtcMuteTimeout: config._p2pConnStatusRtcMuteTimeout,\n                rtcMuteTimeout: config._peerConnStatusRtcMuteTimeout,\n                outOfForwardedSourcesTimeout: config._peerConnStatusOutOfLastNTimeout\n            });\n\n        this._trackStreamingStatusImpl.init();\n    }\n\n    /**\n     * Disposes trackStreamingStatusImpl and clears trackStreamingStatus.\n     */\n    _disposeTrackStreamingStatus() {\n        if (this._trackStreamingStatusImpl) {\n            this._trackStreamingStatusImpl.dispose();\n            this._trackStreamingStatusImpl = null;\n            this._trackStreamingStatus = null;\n        }\n    }\n\n    /**\n     * Updates track's streaming status.\n     *\n     * @param {string} state the current track streaming state. {@link TrackStreamingStatus}.\n     */\n    _setTrackStreamingStatus(status) {\n        this._trackStreamingStatus = status;\n    }\n\n    /**\n     * Returns track's streaming status.\n     *\n     * @returns {string} the streaming status <tt>TrackStreamingStatus</tt> of the track. Returns null\n     * if trackStreamingStatusImpl hasn't been initialized.\n     *\n     * {@link TrackStreamingStatus}.\n     */\n    getTrackStreamingStatus() {\n        return this._trackStreamingStatus;\n    }\n\n    /**\n     * Clears the timestamp of when the track entered forwarded sources.\n     */\n    _clearEnteredForwardedSourcesTimestamp() {\n        this._enteredForwardedSourcesTimestamp = null;\n    }\n\n    /**\n     * Updates the timestamp of when the track entered forwarded sources.\n     *\n     * @param {number} timestamp the time in millis\n     */\n    _setEnteredForwardedSourcesTimestamp(timestamp) {\n        this._enteredForwardedSourcesTimestamp = timestamp;\n    }\n\n    /**\n     * Returns the timestamp of when the track entered forwarded sources.\n     *\n     * @returns {number} the time in millis\n     */\n    _getEnteredForwardedSourcesTimestamp() {\n        return this._enteredForwardedSourcesTimestamp;\n    }\n\n    /**\n     * Creates a text representation of this remote track instance.\n     * @return {string}\n     */\n    toString() {\n        return `RemoteTrack[userID: ${this.getParticipantId()}, type: ${this.getType()}, ssrc: ${\n            this.getSSRC()}, p2p: ${this.isP2P}, sourceName: ${this._sourceName}, status: ${this._getStatus()}]`;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport transform from 'sdp-transform';\n\nimport { MediaDirection } from '../../service/RTC/MediaDirection';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport browser from '../browser';\nimport FeatureFlags from '../flags/FeatureFlags';\n\nconst logger = getLogger(__filename);\nconst DESKTOP_SHARE_RATE = 500000;\nconst LD_BITRATE = 200000;\nconst SD_BITRATE = 700000;\nconst SIM_LAYER_1_RID = '1';\nconst SIM_LAYER_2_RID = '2';\nconst SIM_LAYER_3_RID = '3';\n\nexport const HD_BITRATE = 2500000;\nexport const HD_SCALE_FACTOR = 1;\nexport const LD_SCALE_FACTOR = 4;\nexport const SD_SCALE_FACTOR = 2;\nexport const SIM_LAYER_RIDS = [ SIM_LAYER_1_RID, SIM_LAYER_2_RID, SIM_LAYER_3_RID ];\n\n/**\n * Handles track related operations on TraceablePeerConnection when browser is\n * running in unified plan mode.\n */\nexport class TPCUtils {\n    /**\n     * Creates a new instance for a given TraceablePeerConnection\n     *\n     * @param peerconnection - the tpc instance for which we have utility functions.\n     */\n    constructor(peerconnection) {\n        this.pc = peerconnection;\n        const bitrateSettings = this.pc.options?.videoQuality?.maxBitratesVideo;\n        const standardBitrates = {\n            low: LD_BITRATE,\n            standard: SD_BITRATE,\n            high: HD_BITRATE\n        };\n\n        // Check if the max. bitrates for video are specified through config.js videoQuality settings.\n        // Right now only VP8 bitrates are configured on the simulcast encodings, VP9 bitrates have to be\n        // configured on the SDP using b:AS line.\n        this.videoBitrates = bitrateSettings ?? standardBitrates;\n        const encodingBitrates = this.videoBitrates.VP8 ?? this.videoBitrates;\n\n        /**\n         * The startup configuration for the stream encodings that are applicable to\n         * the video stream when a new sender is created on the peerconnection. The initial\n         * config takes into account the differences in browser's simulcast implementation.\n         *\n         * Encoding parameters:\n         * active - determine the on/off state of a particular encoding.\n         * maxBitrate - max. bitrate value to be applied to that particular encoding\n         *  based on the encoding's resolution and config.js videoQuality settings if applicable.\n         * rid - Rtp Stream ID that is configured for a particular simulcast stream.\n         * scaleResolutionDownBy - the factor by which the encoding is scaled down from the\n         *  original resolution of the captured video.\n         */\n        this.localStreamEncodingsConfig = [\n            {\n                active: true,\n                maxBitrate: browser.isFirefox() ? encodingBitrates.high : encodingBitrates.low,\n                rid: SIM_LAYER_1_RID,\n                scaleResolutionDownBy: browser.isFirefox() ? HD_SCALE_FACTOR : LD_SCALE_FACTOR\n            },\n            {\n                active: true,\n                maxBitrate: encodingBitrates.standard,\n                rid: SIM_LAYER_2_RID,\n                scaleResolutionDownBy: SD_SCALE_FACTOR\n            },\n            {\n                active: true,\n                maxBitrate: browser.isFirefox() ? encodingBitrates.low : encodingBitrates.high,\n                rid: SIM_LAYER_3_RID,\n                scaleResolutionDownBy: browser.isFirefox() ? LD_SCALE_FACTOR : HD_SCALE_FACTOR\n            }\n        ];\n    }\n\n    /**\n     * Obtains stream encodings that need to be configured on the given track based\n     * on the track media type and the simulcast setting.\n     * @param {JitsiLocalTrack} localTrack\n     */\n    _getStreamEncodings(localTrack) {\n        if (this.pc.isSimulcastOn() && localTrack.isVideoTrack()) {\n            return this.localStreamEncodingsConfig;\n        }\n\n        return localTrack.isVideoTrack()\n            ? [ {\n                active: true,\n                maxBitrate: this.videoBitrates.high\n            } ]\n            : [ { active: true } ];\n    }\n\n    /**\n     * Ensures that the ssrcs associated with a FID ssrc-group appear in the correct order, i.e.,\n     * the primary ssrc first and the secondary rtx ssrc later. This is important for unified\n     * plan since we have only one FID group per media description.\n     * @param {Object} description the webRTC session description instance for the remote\n     * description.\n     * @private\n     */\n    ensureCorrectOrderOfSsrcs(description) {\n        const parsedSdp = transform.parse(description.sdp);\n\n        parsedSdp.media.forEach(mLine => {\n            if (mLine.type === MediaType.AUDIO) {\n                return;\n            }\n            if (!mLine.ssrcGroups || !mLine.ssrcGroups.length) {\n                return;\n            }\n            let reorderedSsrcs = [];\n\n            const ssrcs = new Set();\n\n            mLine.ssrcGroups.map(group =>\n                group.ssrcs\n                    .split(' ')\n                    .filter(Boolean)\n                    .forEach(ssrc => ssrcs.add(ssrc))\n            );\n\n            ssrcs.forEach(ssrc => {\n                const sources = mLine.ssrcs.filter(source => source.id.toString() === ssrc);\n\n                reorderedSsrcs = reorderedSsrcs.concat(sources);\n            });\n            mLine.ssrcs = reorderedSsrcs;\n        });\n\n        return new RTCSessionDescription({\n            type: description.type,\n            sdp: transform.write(parsedSdp)\n        });\n    }\n\n    /**\n     * Returns the transceiver associated with a given RTCRtpSender/RTCRtpReceiver.\n     *\n     * @param {string} mediaType - type of track associated with the transceiver 'audio' or 'video'.\n     * @param {JitsiLocalTrack} localTrack - local track to be used for lookup.\n     * @returns {RTCRtpTransceiver}\n     */\n    findTransceiver(mediaType, localTrack = null) {\n        const transceiver = localTrack?.track && localTrack.getOriginalStream()\n            ? this.pc.peerconnection.getTransceivers().find(t => t.sender?.track?.id === localTrack.getTrackId())\n            : this.pc.peerconnection.getTransceivers().find(t => t.receiver?.track?.kind === mediaType);\n\n        return transceiver;\n    }\n\n    /**\n     * Takes in a *unified plan* offer and inserts the appropriate\n     * parameters for adding simulcast receive support.\n     * @param {Object} desc - A session description object\n     * @param {String} desc.type - the type (offer/answer)\n     * @param {String} desc.sdp - the sdp content\n     *\n     * @return {Object} A session description (same format as above) object\n     * with its sdp field modified to advertise simulcast receive support\n     */\n    insertUnifiedPlanSimulcastReceive(desc) {\n        // a=simulcast line is not needed on browsers where we SDP munging is used for enabling on simulcast.\n        // Remove this check when the client switches to RID/MID based simulcast on all browsers.\n        if (browser.usesSdpMungingForSimulcast()) {\n            return desc;\n        }\n        const sdp = transform.parse(desc.sdp);\n        const idx = sdp.media.findIndex(mline => mline.type === MediaType.VIDEO);\n\n        if (sdp.media[idx].rids && (sdp.media[idx].simulcast_03 || sdp.media[idx].simulcast)) {\n            // Make sure we don't have the simulcast recv line on video descriptions other than\n            // the first video description.\n            sdp.media.forEach((mline, i) => {\n                if (mline.type === MediaType.VIDEO && i !== idx) {\n                    sdp.media[i].rids = undefined;\n                    sdp.media[i].simulcast = undefined;\n\n                    // eslint-disable-next-line camelcase\n                    sdp.media[i].simulcast_03 = undefined;\n                }\n            });\n\n            return new RTCSessionDescription({\n                type: desc.type,\n                sdp: transform.write(sdp)\n            });\n        }\n\n        // In order of highest to lowest spatial quality\n        sdp.media[idx].rids = [\n            {\n                id: SIM_LAYER_1_RID,\n                direction: 'recv'\n            },\n            {\n                id: SIM_LAYER_2_RID,\n                direction: 'recv'\n            },\n            {\n                id: SIM_LAYER_3_RID,\n                direction: 'recv'\n            }\n        ];\n\n        // Firefox 72 has stopped parsing the legacy rid= parameters in simulcast attributes.\n        // eslint-disable-next-line max-len\n        // https://www.fxsitecompat.dev/en-CA/docs/2019/pt-and-rid-in-webrtc-simulcast-attributes-are-no-longer-supported/\n        const simulcastLine = browser.isFirefox() && browser.isVersionGreaterThan(71)\n            ? `recv ${SIM_LAYER_RIDS.join(';')}`\n            : `recv rid=${SIM_LAYER_RIDS.join(';')}`;\n\n        // eslint-disable-next-line camelcase\n        sdp.media[idx].simulcast_03 = {\n            value: simulcastLine\n        };\n\n        return new RTCSessionDescription({\n            type: desc.type,\n            sdp: transform.write(sdp)\n        });\n    }\n\n    /**\n    * Adds {@link JitsiLocalTrack} to the WebRTC peerconnection for the first time.\n    * @param {JitsiLocalTrack} track - track to be added to the peerconnection.\n    * @param {boolean} isInitiator - boolean that indicates if the endpoint is offerer in a p2p connection.\n    * @returns {void}\n    */\n    addTrack(localTrack, isInitiator) {\n        const track = localTrack.getTrack();\n\n        if (isInitiator) {\n            const streams = [];\n\n            if (localTrack.getOriginalStream()) {\n                streams.push(localTrack.getOriginalStream());\n            }\n\n            // Use pc.addTransceiver() for the initiator case when local tracks are getting added\n            // to the peerconnection before a session-initiate is sent over to the peer.\n            const transceiverInit = {\n                direction: MediaDirection.SENDRECV,\n                streams,\n                sendEncodings: []\n            };\n\n            if (!browser.isFirefox()) {\n                transceiverInit.sendEncodings = this._getStreamEncodings(localTrack);\n            }\n            this.pc.peerconnection.addTransceiver(track, transceiverInit);\n        } else {\n            // Use pc.addTrack() for responder case so that we can re-use the m-lines that were created\n            // when setRemoteDescription was called. pc.addTrack() automatically  attaches to any existing\n            // unused \"recv-only\" transceiver.\n            this.pc.peerconnection.addTrack(track);\n        }\n    }\n\n    /**\n     * Returns the calculated active state of the simulcast encodings based on the frame height requested for the send\n     * stream. All the encodings that have a resolution lower than the frame height requested will be enabled.\n     *\n     * @param {JitsiLocalTrack} localVideoTrack The local video track.\n     * @param {number} newHeight The resolution requested for the video track.\n     * @returns {Array<boolean>}\n     */\n    calculateEncodingsActiveState(localVideoTrack, newHeight) {\n        const localTrack = localVideoTrack.getTrack();\n        const { height } = localTrack.getSettings();\n        const encodingsState = this.localStreamEncodingsConfig\n        .map(encoding => height / encoding.scaleResolutionDownBy)\n        .map((frameHeight, idx) => {\n            let active = localVideoTrack.getVideoType() === VideoType.CAMERA\n\n                // Keep the LD stream enabled even when the LD stream's resolution is higher than of the requested\n                // resolution. This can happen when camera is captured at resolutions higher than 720p but the\n                // requested resolution is 180. Since getParameters doesn't give us information about the resolutions\n                // of the simulcast encodings, we have to rely on our initial config for the simulcast streams.\n                ? newHeight > 0 && this.localStreamEncodingsConfig[idx]?.scaleResolutionDownBy === LD_SCALE_FACTOR\n                    ? true\n                    : frameHeight <= newHeight\n\n                // Keep all the encodings for desktop track active.\n                : true;\n\n            // Disable the lower spatial layers for screensharing in Unified plan when low fps screensharing is in\n            // progress. Sending all three streams often results in the browser suspending the high resolution in low\n            // b/w and cpu cases, especially on the low end machines. Suspending the low resolution streams ensures\n            // that the highest resolution stream is available always. Safari is an exception here since it does not\n            // send the desktop stream at all if only the high resolution stream is enabled.\n            if (this.pc.isSharingLowFpsScreen()\n                && this.pc.usesUnifiedPlan()\n                && !browser.isWebKitBased()\n                && this.localStreamEncodingsConfig[idx].scaleResolutionDownBy !== HD_SCALE_FACTOR) {\n                active = false;\n            }\n\n            return active;\n        });\n\n        return encodingsState;\n    }\n\n    /**\n     * Returns the calculates max bitrates that need to be configured on the simulcast encodings based on the video\n     * type and other considerations associated with screenshare.\n     *\n     * @param {JitsiLocalTrack} localVideoTrack The local video track.\n     * @returns {Array<number>}\n     */\n    calculateEncodingsBitrates(localVideoTrack) {\n        const videoType = localVideoTrack.getVideoType();\n        const desktopShareBitrate = this.pc.options?.videoQuality?.desktopBitrate || DESKTOP_SHARE_RATE;\n        const presenterEnabled = localVideoTrack._originalStream\n            && localVideoTrack._originalStream.id !== localVideoTrack.getStreamId();\n\n        const encodingsBitrates = this.localStreamEncodingsConfig\n        .map(encoding => {\n            const bitrate = this.pc.isSharingLowFpsScreen() && !browser.isWebKitBased()\n\n                // For low fps screensharing, set a max bitrate of 500 Kbps when presenter is not turned on, 2500 Kbps\n                // otherwise.\n                ? presenterEnabled ? HD_BITRATE : desktopShareBitrate\n\n                // For high fps screenshare, 'maxBitrate' setting must be cleared on Chrome in plan-b, because\n                // if simulcast is enabled for screen and maxBitrates are set then Chrome will not send the\n                // desktop stream.\n                : videoType === VideoType.DESKTOP && browser.isChromiumBased() && !this.pc.usesUnifiedPlan()\n                    ? undefined\n                    : encoding.maxBitrate;\n\n            return bitrate;\n        });\n\n        return encodingsBitrates;\n    }\n\n    /**\n     * Replaces the existing track on a RTCRtpSender with the given track.\n     *\n     * @param {JitsiLocalTrack} oldTrack - existing track on the sender that needs to be removed.\n     * @param {JitsiLocalTrack} newTrack - new track that needs to be added to the sender.\n     * @returns {Promise<RTCRtpTransceiver>} - resolved with the associated transceiver when done, rejected otherwise.\n     */\n    replaceTrack(oldTrack, newTrack) {\n        const mediaType = newTrack?.getType() ?? oldTrack?.getType();\n        const track = newTrack?.getTrack() ?? null;\n        const isNewLocalSource = FeatureFlags.isMultiStreamSupportEnabled()\n            && this.pc.getLocalTracks(mediaType)?.length\n            && !oldTrack\n            && newTrack\n            && !newTrack.conference;\n        let transceiver;\n\n        // If old track exists, replace the track on the corresponding sender.\n        if (oldTrack && !oldTrack.isMuted()) {\n            transceiver = this.pc.peerconnection.getTransceivers().find(t => t.sender.track === oldTrack.getTrack());\n\n        // Find the first recvonly transceiver when more than one track of the same media type is being added to the pc.\n        // As part of the track addition, a new m-line was added to the remote description with direction set to\n        // recvonly.\n        } else if (isNewLocalSource) {\n            transceiver = this.pc.peerconnection.getTransceivers().find(\n                t => t.receiver.track.kind === mediaType\n                && t.direction === MediaDirection.RECVONLY\n                && t.currentDirection === MediaDirection.INACTIVE);\n\n        // For mute/unmute operations, find the transceiver based on the track index in the source name if present,\n        // otherwise it is assumed to be the first local track that was added to the peerconnection.\n        } else {\n            transceiver = this.pc.peerconnection.getTransceivers().find(t => t.receiver.track.kind === mediaType);\n            const sourceName = newTrack?.getSourceName() ?? oldTrack?.getSourceName();\n\n            if (sourceName) {\n                const trackIndex = Number(sourceName.split('-')[1].substring(1));\n\n                if (trackIndex) {\n                    transceiver = this.pc.peerconnection.getTransceivers()\n                        .filter(t => t.receiver.track.kind === mediaType\n                            && t.direction !== MediaDirection.RECVONLY)[trackIndex];\n                }\n            }\n        }\n\n        if (!transceiver) {\n            return Promise.reject(new Error('replace track failed'));\n        }\n        logger.debug(`${this.pc} Replacing ${oldTrack} with ${newTrack}`);\n\n        return transceiver.sender.replaceTrack(track)\n            .then(() => Promise.resolve(transceiver));\n    }\n\n    /**\n    * Enables/disables audio transmission on the peer connection. When\n    * disabled the audio transceiver direction will be set to 'inactive'\n    * which means that no data will be sent nor accepted, but\n    * the connection should be kept alive.\n    * @param {boolean} active - true to enable audio media transmission or\n    * false to disable.\n    * @returns {void}\n    */\n    setAudioTransferActive(active) {\n        this.setMediaTransferActive(MediaType.AUDIO, active);\n    }\n\n    /**\n     * Set the simulcast stream encoding properties on the RTCRtpSender.\n     * @param {JitsiLocalTrack} track - the current track in use for which\n     * the encodings are to be set.\n     * @returns {Promise<void>} - resolved when done.\n     */\n    setEncodings(track) {\n        const mediaType = track.getType();\n        const transceiver = this.findTransceiver(mediaType, track);\n        const parameters = transceiver?.sender?.getParameters();\n\n        // Resolve if the encodings are not available yet. This happens immediately after the track is added to the\n        // peerconnection on chrome in unified-plan. It is ok to ignore and not report the error here since the\n        // action that triggers 'addTrack' (like unmute) will also configure the encodings and set bitrates after that.\n        if (!parameters?.encodings?.length) {\n            return Promise.resolve();\n        }\n        parameters.encodings = this._getStreamEncodings(track);\n\n        return transceiver.sender.setParameters(parameters);\n    }\n\n    /**\n     * Enables/disables media transmission on the peerconnection by changing the direction\n     * on the transceiver for the specified media type.\n     * @param {String} mediaType - 'audio' or 'video'\n     * @param {boolean} active - true to enable media transmission or false\n     * to disable.\n     * @returns {void}\n     */\n    setMediaTransferActive(mediaType, active) {\n        const transceivers = this.pc.peerconnection.getTransceivers()\n            .filter(t => t.receiver && t.receiver.track && t.receiver.track.kind === mediaType);\n        const localTracks = this.pc.getLocalTracks(mediaType);\n\n        logger.info(`${this.pc} ${active ? 'Enabling' : 'Suspending'} ${mediaType} media transfer.`);\n        transceivers.forEach((transceiver, idx) => {\n            if (active) {\n                // The first transceiver is for the local track and only this one can be set to 'sendrecv'\n                if (idx === 0 && localTracks.length) {\n                    transceiver.direction = MediaDirection.SENDRECV;\n                } else {\n                    transceiver.direction = MediaDirection.RECVONLY;\n                }\n            } else {\n                transceiver.direction = MediaDirection.INACTIVE;\n            }\n        });\n    }\n\n    /**\n    * Enables/disables video media transmission on the peer connection. When\n    * disabled the SDP video media direction in the local SDP will be adjusted to\n    * 'inactive' which means that no data will be sent nor accepted, but\n    * the connection should be kept alive.\n    * @param {boolean} active - true to enable video media transmission or\n    * false to disable.\n    * @returns {void}\n    */\n    setVideoTransferActive(active) {\n        this.setMediaTransferActive(MediaType.VIDEO, active);\n    }\n\n    /**\n     * Ensures that the resolution of the stream encodings are consistent with the values\n     * that were configured on the RTCRtpSender when the source was added to the peerconnection.\n     * This should prevent us from overriding the default values if the browser returns\n     * erroneous values when RTCRtpSender.getParameters is used for getting the encodings info.\n     * @param {Object} parameters - the RTCRtpEncodingParameters obtained from the browser.\n     * @returns {void}\n     */\n    updateEncodingsResolution(parameters) {\n        if (!(browser.isWebKitBased() && parameters.encodings && Array.isArray(parameters.encodings))) {\n            return;\n        }\n        const allEqualEncodings\n            = encodings => encodings.every(encoding => typeof encoding.scaleResolutionDownBy !== 'undefined'\n                && encoding.scaleResolutionDownBy === encodings[0].scaleResolutionDownBy);\n\n        // Implement the workaround only when all the encodings report the same resolution.\n        if (allEqualEncodings(parameters.encodings)) {\n            parameters.encodings.forEach((encoding, idx) => {\n                encoding.scaleResolutionDownBy = this.localStreamEncodingsConfig[idx].scaleResolutionDownBy;\n            });\n        }\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport { Interop } from '@jitsi/sdp-interop';\nimport transform from 'sdp-transform';\n\nimport * as CodecMimeType from '../../service/RTC/CodecMimeType';\nimport { MediaDirection } from '../../service/RTC/MediaDirection';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport * as SignalingEvents from '../../service/RTC/SignalingEvents';\nimport { getSourceNameForJitsiTrack } from '../../service/RTC/SignalingLayer';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport { SS_DEFAULT_FRAME_RATE } from '../RTC/ScreenObtainer';\nimport browser from '../browser';\nimport FeatureFlags from '../flags/FeatureFlags';\nimport LocalSdpMunger from '../sdp/LocalSdpMunger';\nimport RtxModifier from '../sdp/RtxModifier';\nimport SDP from '../sdp/SDP';\nimport SDPUtil from '../sdp/SDPUtil';\nimport SdpConsistency from '../sdp/SdpConsistency';\nimport SdpSimulcast from '../sdp/SdpSimulcast';\nimport { SdpTransformWrap } from '../sdp/SdpTransformUtil';\nimport * as GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nimport JitsiRemoteTrack from './JitsiRemoteTrack';\nimport RTC from './RTC';\nimport RTCUtils from './RTCUtils';\nimport {\n    HD_BITRATE,\n    HD_SCALE_FACTOR,\n    SIM_LAYER_RIDS,\n    TPCUtils\n} from './TPCUtils';\n\n// FIXME SDP tools should end up in some kind of util module\n\nconst logger = getLogger(__filename);\nconst DEGRADATION_PREFERENCE_CAMERA = 'maintain-framerate';\nconst DEGRADATION_PREFERENCE_DESKTOP = 'maintain-resolution';\n\n/* eslint-disable max-params */\n\n/**\n * Creates new instance of 'TraceablePeerConnection'.\n *\n * @param {RTC} rtc the instance of <tt>RTC</tt> service\n * @param {number} id the peer connection id assigned by the parent RTC module.\n * @param {SignalingLayer} signalingLayer the signaling layer instance\n * @param {object} pcConfig The {@code RTCConfiguration} to use for the WebRTC peer connection.\n * @param {object} constraints WebRTC 'PeerConnection' constraints\n * @param {boolean} isP2P indicates whether or not the new instance will be used in a peer to peer connection.\n * @param {object} options <tt>TracablePeerConnection</tt> config options.\n * @param {boolean} options.disableSimulcast if set to 'true' will disable the simulcast.\n * @param {boolean} options.disableRtx if set to 'true' will disable the RTX.\n * @param {string} options.disabledCodec the mime type of the code that should not be negotiated on the peerconnection.\n * @param {string} options.preferredCodec the mime type of the codec that needs to be made the preferred codec for the\n * peerconnection.\n * @param {boolean} options.startSilent If set to 'true' no audio will be sent or received.\n * @param {boolean} options.usesUnifiedPlan Indicates if the  browser is running in unified plan mode.\n *\n * FIXME: initially the purpose of TraceablePeerConnection was to be able to\n * debug the peer connection. Since many other responsibilities have been added\n * it would make sense to extract a separate class from it and come up with\n * a more suitable name.\n *\n * @constructor\n */\nexport default function TraceablePeerConnection(\n        rtc,\n        id,\n        signalingLayer,\n        pcConfig,\n        constraints,\n        isP2P,\n        options) {\n\n    /**\n     * Indicates whether or not this peer connection instance is actively\n     * sending/receiving audio media. When set to <tt>false</tt> the SDP audio\n     * media direction will be adjusted to 'inactive' in order to suspend\n     * the transmission.\n     * @type {boolean}\n     * @private\n     */\n    this.audioTransferActive = !(options.startSilent === true);\n\n    /**\n     * The DTMF sender instance used to send DTMF tones.\n     *\n     * @type {RTCDTMFSender|undefined}\n     * @private\n     */\n    this._dtmfSender = undefined;\n\n    /**\n     * @typedef {Object} TouchToneRequest\n     * @property {string} tones - The DTMF tones string as defined by\n     * {@code RTCDTMFSender.insertDTMF}, 'tones' argument.\n     * @property {number} duration - The amount of time in milliseconds that\n     * each DTMF should last.\n     * @property {string} interToneGap - The length of time in miliseconds to\n     * wait between tones.\n     */\n    /**\n     * TouchToneRequests which are waiting to be played. This queue is filled\n     * if there are touch tones currently being played.\n     *\n     * @type {Array<TouchToneRequest>}\n     * @private\n     */\n    this._dtmfTonesQueue = [];\n\n    /**\n     * Indicates whether or not this peer connection instance is actively\n     * sending/receiving video media. When set to <tt>false</tt> the SDP video\n     * media direction will be adjusted to 'inactive' in order to suspend\n     * the transmission.\n     * @type {boolean}\n     * @private\n     */\n    this.videoTransferActive = true;\n\n    /**\n     * The parent instance of RTC service which created this\n     * <tt>TracablePeerConnection</tt>.\n     * @type {RTC}\n     */\n    this.rtc = rtc;\n\n    /**\n     * The peer connection identifier assigned by the RTC module.\n     * @type {number}\n     */\n    this.id = id;\n\n    /**\n     * Indicates whether or not this instance is used in a peer to peer\n     * connection.\n     * @type {boolean}\n     */\n    this.isP2P = isP2P;\n\n    /**\n     * The map holds remote tracks associated with this peer connection. It maps user's JID to media type and a set of\n     * remote tracks.\n     * @type {Map<string, Map<MediaType, Set<JitsiRemoteTrack>>>}\n     */\n    this.remoteTracks = new Map();\n\n    /**\n     * A map which stores local tracks mapped by {@link JitsiLocalTrack.rtcId}\n     * @type {Map<number, JitsiLocalTrack>}\n     */\n    this.localTracks = new Map();\n\n    /**\n     * Keeps tracks of the WebRTC <tt>MediaStream</tt>s that have been added to\n     * the underlying WebRTC PeerConnection.\n     * @type {Array}\n     * @private\n     */\n    this._addedStreams = [];\n\n    /**\n     * @typedef {Object} TPCGroupInfo\n     * @property {string} semantics the SSRC groups semantics\n     * @property {Array<number>} ssrcs group's SSRCs in order where the first\n     * one is group's primary SSRC, the second one is secondary (RTX) and so\n     * on...\n     */\n    /**\n     * @typedef {Object} TPCSSRCInfo\n     * @property {Array<number>} ssrcs an array which holds all track's SSRCs\n     * @property {Array<TPCGroupInfo>} groups an array stores all track's SSRC\n     * groups\n     */\n    /**\n     * Holds the info about local track's SSRCs mapped per their\n     * {@link JitsiLocalTrack.rtcId}\n     * @type {Map<number, TPCSSRCInfo>}\n     */\n    this.localSSRCs = new Map();\n\n    /**\n     * The local ICE username fragment for this session.\n     */\n    this.localUfrag = null;\n\n    /**\n     * The remote ICE username fragment for this session.\n     */\n    this.remoteUfrag = null;\n\n    /**\n     * The DTLS transport object for the PeerConnection.\n     * Note: this assume only one shared transport exists because we bundled\n     *       all streams on the same underlying transport.\n     */\n    this._dtlsTransport = null;\n\n    /**\n     * The signaling layer which operates this peer connection.\n     * @type {SignalingLayer}\n     */\n    this.signalingLayer = signalingLayer;\n\n    // SignalingLayer listeners\n    this._peerVideoTypeChanged = this._peerVideoTypeChanged.bind(this);\n    this.signalingLayer.on(\n        SignalingEvents.PEER_VIDEO_TYPE_CHANGED,\n        this._peerVideoTypeChanged);\n\n    this._peerMutedChanged = this._peerMutedChanged.bind(this);\n    this.signalingLayer.on(\n        SignalingEvents.PEER_MUTED_CHANGED,\n        this._peerMutedChanged);\n    this.options = options;\n\n    // Make sure constraints is properly formatted in order to provide information about whether or not this\n    // connection is P2P to rtcstats.\n    const safeConstraints = constraints || {};\n\n    safeConstraints.optional = safeConstraints.optional || [];\n\n    // The `optional` parameter needs to be of type array, otherwise chrome will throw an error.\n    // Firefox and Safari just ignore it.\n    if (Array.isArray(safeConstraints.optional)) {\n        safeConstraints.optional.push({ rtcStatsSFUP2P: this.isP2P });\n    } else {\n        logger.warn('Optional param is not an array, rtcstats p2p data is omitted.');\n    }\n\n    this.peerconnection = new RTCUtils.RTCPeerConnectionType(pcConfig, safeConstraints);\n\n    this.tpcUtils = new TPCUtils(this);\n    this.updateLog = [];\n    this.stats = {};\n    this.statsinterval = null;\n\n    /**\n     * Flag used to indicate if simulcast is turned off and a cap of 500 Kbps is applied on screensharing.\n     */\n    this._capScreenshareBitrate = this.options.capScreenshareBitrate;\n\n    /**\n    * Flag used to indicate if the browser is running in unified  plan mode.\n    */\n    this._usesUnifiedPlan = options.usesUnifiedPlan;\n\n    /**\n     * Flag used to indicate if RTCRtpTransceiver#setCodecPreferences is to be used instead of SDP\n     * munging for codec selection.\n     */\n    this._usesTransceiverCodecPreferences = browser.supportsCodecPreferences() && this._usesUnifiedPlan;\n    this._usesTransceiverCodecPreferences\n        && logger.info('Using RTCRtpTransceiver#setCodecPreferences for codec selection');\n\n    /**\n     * @type {number} The max number of stats to keep in this.stats. Limit to\n     * 300 values, i.e. 5 minutes; set to 0 to disable\n     */\n    this.maxstats = options.maxstats;\n\n    this.interop = new Interop();\n\n    if (this._usesUnifiedPlan) {\n        this.simulcast = new SdpSimulcast({ numOfLayers: SIM_LAYER_RIDS.length });\n    } else {\n        const Simulcast = require('@jitsi/sdp-simulcast');\n\n        this.simulcast = new Simulcast(\n            {\n                numOfLayers: SIM_LAYER_RIDS.length,\n                explodeRemoteSimulcast: false,\n                usesUnifiedPlan: false\n            });\n    }\n\n    this.sdpConsistency = new SdpConsistency(this.toString());\n\n    /**\n     * Munges local SDP provided to the Jingle Session in order to prevent from\n     * sending SSRC updates on attach/detach and mute/unmute (for video).\n     * @type {LocalSdpMunger}\n     */\n    this.localSdpMunger = new LocalSdpMunger(this, this.rtc.getLocalEndpointId());\n\n    /**\n     * TracablePeerConnection uses RTC's eventEmitter\n     * @type {EventEmitter}\n     */\n    this.eventEmitter = rtc.eventEmitter;\n    this.rtxModifier = new RtxModifier();\n\n    /**\n     * The height constraint applied on the video sender. The default value is 2160 (4K) when layer suspension is\n     * explicitly disabled.\n     */\n    this._senderVideoMaxHeight = 2160;\n\n    /**\n     * The height constraints to be applied on the sender per local video source (source name as the key).\n     * @type {Map<string, number>}\n     */\n    this._senderMaxHeights = new Map();\n\n    // override as desired\n    this.trace = (what, info) => {\n        logger.debug(what, info);\n\n        this.updateLog.push({\n            time: new Date(),\n            type: what,\n            value: info || ''\n        });\n    };\n    this.onicecandidate = null;\n    this.peerconnection.onicecandidate = event => {\n        this.trace(\n            'onicecandidate',\n            JSON.stringify(event.candidate, null, ' '));\n\n        if (this.onicecandidate !== null) {\n            this.onicecandidate(event);\n        }\n    };\n\n    // Use track events when browser is running in unified plan mode and stream events in plan-b mode.\n    if (this._usesUnifiedPlan) {\n        this.onTrack = evt => {\n            const stream = evt.streams[0];\n\n            this._remoteTrackAdded(stream, evt.track, evt.transceiver);\n            stream.addEventListener('removetrack', e => {\n                this._remoteTrackRemoved(stream, e.track);\n            });\n        };\n        this.peerconnection.addEventListener('track', this.onTrack);\n    } else {\n        this.peerconnection.onaddstream = event => this._remoteStreamAdded(event.stream);\n        this.peerconnection.onremovestream = event => this._remoteStreamRemoved(event.stream);\n    }\n    this.onsignalingstatechange = null;\n    this.peerconnection.onsignalingstatechange = event => {\n        this.trace('onsignalingstatechange', this.signalingState);\n        if (this.onsignalingstatechange !== null) {\n            this.onsignalingstatechange(event);\n        }\n    };\n    this.oniceconnectionstatechange = null;\n    this.peerconnection.oniceconnectionstatechange = event => {\n        this.trace('oniceconnectionstatechange', this.iceConnectionState);\n        if (this.oniceconnectionstatechange !== null) {\n            this.oniceconnectionstatechange(event);\n        }\n    };\n    this.onnegotiationneeded = null;\n    this.peerconnection.onnegotiationneeded = event => {\n        this.trace('onnegotiationneeded');\n        if (this.onnegotiationneeded !== null) {\n            this.onnegotiationneeded(event);\n        }\n    };\n    this.onconnectionstatechange = null;\n    this.peerconnection.onconnectionstatechange = event => {\n        this.trace('onconnectionstatechange', this.connectionState);\n        if (this.onconnectionstatechange !== null) {\n            this.onconnectionstatechange(event);\n        }\n    };\n    this.ondatachannel = null;\n    this.peerconnection.ondatachannel = event => {\n        this.trace('ondatachannel');\n        if (this.ondatachannel !== null) {\n            this.ondatachannel(event);\n        }\n    };\n\n    if (this.maxstats) {\n        this.statsinterval = window.setInterval(() => {\n            this.getStats().then(stats => {\n                if (typeof stats?.result === 'function') {\n                    const results = stats.result();\n\n                    for (let i = 0; i < results.length; ++i) {\n                        const res = results[i];\n\n                        res.names().forEach(name => {\n                            this._processStat(res, name, res.stat(name));\n                        });\n                    }\n                } else {\n                    stats.forEach(r => this._processStat(r, '', r));\n                }\n            });\n        }, 1000);\n    }\n\n    logger.info(`Create new ${this}`);\n}\n\n/* eslint-enable max-params */\n\n/**\n * Process stat and adds it to the array of stats we store.\n * @param report the current stats report.\n * @param name the name of the report, if available\n * @param statValue the value to add.\n * @private\n */\nTraceablePeerConnection.prototype._processStat\n    = function(report, name, statValue) {\n        const id = `${report.id}-${name}`;\n        let s = this.stats[id];\n        const now = new Date();\n\n        if (!s) {\n            this.stats[id] = s = {\n                startTime: now,\n                endTime: now,\n                values: [],\n                times: []\n            };\n        }\n        s.values.push(statValue);\n        s.times.push(now.getTime());\n        if (s.values.length > this.maxstats) {\n            s.values.shift();\n            s.times.shift();\n        }\n        s.endTime = now;\n    };\n\n/**\n * Returns a string representation of a SessionDescription object.\n */\nconst dumpSDP = function(description) {\n    if (typeof description === 'undefined' || description === null) {\n        return '';\n    }\n\n    return `type: ${description.type}\\r\\n${description.sdp}`;\n};\n\n\n/**\n * Forwards the {@link peerconnection.iceConnectionState} state except that it\n * will convert \"completed\" into \"connected\" where both mean that the ICE has\n * succeeded and is up and running. We never see \"completed\" state for\n * the JVB connection, but it started appearing for the P2P one. This method\n * allows to adapt old logic to this new situation.\n * @return {string}\n */\nTraceablePeerConnection.prototype.getConnectionState = function() {\n    const state = this.peerconnection.iceConnectionState;\n\n    if (state === 'completed') {\n        return 'connected';\n    }\n\n    return state;\n};\n\n/**\n * Obtains the media direction for given {@link MediaType}. The method takes\n * into account whether or not there are any local tracks for media and\n * the {@link audioTransferActive} and {@link videoTransferActive} flags.\n * @param {MediaType} mediaType\n * @param {boolean} isAddOperation whether the direction is to be calculated after a source-add action.\n * @return {string} one of the SDP direction constants ('sendrecv, 'recvonly'\n * etc.) which should be used when setting local description on the peer\n * connection.\n * @private\n */\nTraceablePeerConnection.prototype.getDesiredMediaDirection = function(mediaType, isAddOperation = false) {\n    const hasLocalSource = this.hasAnyTracksOfType(mediaType);\n\n    if (this._usesUnifiedPlan) {\n        return isAddOperation\n            ? hasLocalSource ? MediaDirection.SENDRECV : MediaDirection.SENDONLY\n            : hasLocalSource ? MediaDirection.RECVONLY : MediaDirection.INACTIVE;\n    }\n\n    const mediaTransferActive = mediaType === MediaType.AUDIO ? this.audioTransferActive : this.videoTransferActive;\n\n    if (mediaTransferActive) {\n        return hasLocalSource ? MediaDirection.SENDRECV : MediaDirection.RECVONLY;\n    }\n\n    return MediaDirection.INACTIVE;\n};\n\n/**\n * Returns the list of RTCRtpReceivers created for the source of the given media type associated with\n * the set of remote endpoints specified.\n * @param {Array<string>} endpoints list of the endpoints\n * @param {string} mediaType 'audio' or 'video'\n * @returns {Array<RTCRtpReceiver>} list of receivers created by the peerconnection.\n */\nTraceablePeerConnection.prototype._getReceiversByEndpointIds = function(endpoints, mediaType) {\n    let remoteTracks = [];\n    let receivers = [];\n\n    for (const endpoint of endpoints) {\n        remoteTracks = remoteTracks.concat(this.getRemoteTracks(endpoint, mediaType));\n    }\n\n    // Get the ids of the MediaStreamTracks associated with each of these remote tracks.\n    const remoteTrackIds = remoteTracks.map(remote => remote.track?.id);\n\n    receivers = this.peerconnection.getReceivers()\n        .filter(receiver => receiver.track\n            && receiver.track.kind === mediaType\n            && remoteTrackIds.find(trackId => trackId === receiver.track.id));\n\n    return receivers;\n};\n\n/**\n * Tells whether or not this TPC instance is using Simulcast.\n * @return {boolean} <tt>true</tt> if simulcast is enabled and active or\n * <tt>false</tt> if it's turned off.\n */\nTraceablePeerConnection.prototype.isSimulcastOn = function() {\n    return !this.options.disableSimulcast;\n};\n\n/**\n * Handles {@link SignalingEvents.PEER_VIDEO_TYPE_CHANGED}\n * @param {string} endpointId the video owner's ID (MUC nickname)\n * @param {VideoType} videoType the new value\n * @private\n */\nTraceablePeerConnection.prototype._peerVideoTypeChanged = function(\n        endpointId,\n        videoType) {\n    // Check if endpointId has a value to avoid action on random track\n    if (!endpointId) {\n        logger.error(`${this} No endpointID on peerVideoTypeChanged`);\n\n        return;\n    }\n    const videoTrack = this.getRemoteTracks(endpointId, MediaType.VIDEO);\n\n    if (videoTrack.length) {\n        // NOTE 1 track per media type is assumed\n        videoTrack[0]._setVideoType(videoType);\n    }\n};\n\n/**\n * Handles remote track mute / unmute events.\n * @param {string} endpointId the track owner's identifier (MUC nickname)\n * @param {MediaType} mediaType \"audio\" or \"video\"\n * @param {boolean} isMuted the new mute state\n * @private\n */\nTraceablePeerConnection.prototype._peerMutedChanged = function(\n        endpointId,\n        mediaType,\n        isMuted) {\n    // Check if endpointId is a value to avoid doing action on all remote tracks\n    if (!endpointId) {\n        logger.error(`${this} On peerMuteChanged - no endpoint ID`);\n\n        return;\n    }\n    const track = this.getRemoteTracks(endpointId, mediaType);\n\n    if (track.length) {\n        // NOTE 1 track per media type is assumed\n        track[0].setMute(isMuted);\n    }\n};\n\n/**\n * Obtains audio levels of the remote audio tracks by getting the source information on the RTCRtpReceivers.\n * The information relevant to the ssrc is updated each time a RTP packet constaining the ssrc is received.\n * @param {Array<string>} speakerList list of endpoint ids for which audio levels are to be gathered.\n * @returns {Object} containing ssrc and audio level information as a key-value pair.\n */\nTraceablePeerConnection.prototype.getAudioLevels = function(speakerList = []) {\n    const audioLevels = {};\n    const audioReceivers = speakerList.length\n        ? this._getReceiversByEndpointIds(speakerList, MediaType.AUDIO)\n        : this.peerconnection.getReceivers()\n            .filter(receiver => receiver.track && receiver.track.kind === MediaType.AUDIO && receiver.track.enabled);\n\n    audioReceivers.forEach(remote => {\n        const ssrc = remote.getSynchronizationSources();\n\n        if (ssrc && ssrc.length) {\n            // As per spec, this audiolevel is a value between 0..1 (linear), where 1.0\n            // represents 0 dBov, 0 represents silence, and 0.5 represents approximately\n            // 6 dBSPL change in the sound pressure level from 0 dBov.\n            // https://www.w3.org/TR/webrtc/#dom-rtcrtpcontributingsource-audiolevel\n            audioLevels[ssrc[0].source] = ssrc[0].audioLevel;\n        }\n    });\n\n    return audioLevels;\n};\n\n/**\n * Obtains local tracks for given {@link MediaType}. If the <tt>mediaType</tt>\n * argument is omitted the list of all local tracks will be returned.\n * @param {MediaType} [mediaType]\n * @return {Array<JitsiLocalTrack>}\n */\nTraceablePeerConnection.prototype.getLocalTracks = function(mediaType) {\n    let tracks = Array.from(this.localTracks.values());\n\n    if (mediaType !== undefined) {\n        tracks = tracks.filter(track => track.getType() === mediaType);\n    }\n\n    return tracks;\n};\n\n/**\n * Retrieves the local video tracks.\n *\n * @returns {JitsiLocalTrack|undefined} - local video tracks.\n */\nTraceablePeerConnection.prototype.getLocalVideoTracks = function() {\n    return this.getLocalTracks(MediaType.VIDEO);\n};\n\n/**\n * Checks whether or not this {@link TraceablePeerConnection} instance contains any local tracks for given\n * <tt>mediaType</tt>.\n *\n * @param {MediaType} mediaType - The media type.\n * @return {boolean}\n */\nTraceablePeerConnection.prototype.hasAnyTracksOfType = function(mediaType) {\n    if (!mediaType) {\n        throw new Error('\"mediaType\" is required');\n    }\n\n    return this.getLocalTracks(mediaType).length > 0;\n};\n\n/**\n * Obtains all remote tracks currently known to this PeerConnection instance.\n *\n * @param {string} [endpointId] - The track owner's identifier (MUC nickname)\n * @param {MediaType} [mediaType] - The remote tracks will be filtered by their media type if this argument is\n * specified.\n * @return {Array<JitsiRemoteTrack>}\n */\nTraceablePeerConnection.prototype.getRemoteTracks = function(endpointId, mediaType) {\n    let remoteTracks = [];\n    const endpoints = endpointId ? [ endpointId ] : this.remoteTracks.keys();\n\n    for (const endpoint of endpoints) {\n        const endpointTracksByMediaType = this.remoteTracks.get(endpoint);\n\n        if (endpointTracksByMediaType) {\n            for (const trackMediaType of endpointTracksByMediaType.keys()) {\n                // per media type filtering\n                if (!mediaType || mediaType === trackMediaType) {\n                    remoteTracks = remoteTracks.concat(Array.from(endpointTracksByMediaType.get(trackMediaType)));\n                }\n            }\n        }\n    }\n\n    return remoteTracks;\n};\n\n/**\n * Parses the remote description and returns the sdp lines of the sources associated with a remote participant.\n *\n * @param {string} id Endpoint id of the remote participant.\n * @returns {Array<string>} The sdp lines that have the ssrc information.\n */\nTraceablePeerConnection.prototype.getRemoteSourceInfoByParticipant = function(id) {\n    const removeSsrcInfo = [];\n    const remoteTracks = this.getRemoteTracks(id);\n\n    if (!remoteTracks?.length) {\n        return removeSsrcInfo;\n    }\n    const primarySsrcs = remoteTracks.map(track => track.getSSRC());\n    const sdp = new SDP(this.remoteDescription.sdp);\n\n    primarySsrcs.forEach((ssrc, idx) => {\n        for (const media of sdp.media) {\n            let lines = '';\n            let ssrcLines = SDPUtil.findLines(media, `a=ssrc:${ssrc}`);\n\n            if (ssrcLines.length) {\n                if (!removeSsrcInfo[idx]) {\n                    removeSsrcInfo[idx] = '';\n                }\n\n                // Check if there are any FID groups present for the primary ssrc.\n                const fidLines = SDPUtil.findLines(media, `a=ssrc-group:FID ${ssrc}`);\n\n                if (fidLines.length) {\n                    const secondarySsrc = fidLines[0].split(' ')[2];\n\n                    lines += `${fidLines[0]}\\r\\n`;\n                    ssrcLines = ssrcLines.concat(SDPUtil.findLines(media, `a=ssrc:${secondarySsrc}`));\n                }\n                removeSsrcInfo[idx] += `${ssrcLines.join('\\r\\n')}\\r\\n`;\n                removeSsrcInfo[idx] += lines;\n            }\n        }\n    });\n\n    return removeSsrcInfo;\n};\n\n/**\n * Returns the target bitrates configured for the local video source.\n *\n * @returns {Object}\n */\nTraceablePeerConnection.prototype.getTargetVideoBitrates = function() {\n    const currentCodec = this.getConfiguredVideoCodec();\n\n    return this.tpcUtils.videoBitrates[currentCodec.toUpperCase()] || this.tpcUtils.videoBitrates;\n};\n\n/**\n * Tries to find {@link JitsiTrack} for given SSRC number. It will search both\n * local and remote tracks bound to this instance.\n * @param {number} ssrc\n * @return {JitsiTrack|null}\n */\nTraceablePeerConnection.prototype.getTrackBySSRC = function(ssrc) {\n    if (typeof ssrc !== 'number') {\n        throw new Error(`SSRC ${ssrc} is not a number`);\n    }\n    for (const localTrack of this.localTracks.values()) {\n        if (this.getLocalSSRC(localTrack) === ssrc) {\n            return localTrack;\n        }\n    }\n    for (const remoteTrack of this.getRemoteTracks()) {\n        if (remoteTrack.getSSRC() === ssrc) {\n            return remoteTrack;\n        }\n    }\n\n    return null;\n};\n\n/**\n * Tries to find SSRC number for given {@link JitsiTrack} id. It will search\n * both local and remote tracks bound to this instance.\n * @param {string} id\n * @return {number|null}\n */\nTraceablePeerConnection.prototype.getSsrcByTrackId = function(id) {\n\n    const findTrackById = track => track.getTrack().id === id;\n    const localTrack = this.getLocalTracks().find(findTrackById);\n\n    if (localTrack) {\n        return this.getLocalSSRC(localTrack);\n    }\n\n    const remoteTrack = this.getRemoteTracks().find(findTrackById);\n\n    if (remoteTrack) {\n        return remoteTrack.getSSRC();\n    }\n\n    return null;\n};\n\n/**\n * Called when new remote MediaStream is added to the PeerConnection.\n * @param {MediaStream} stream the WebRTC MediaStream for remote participant\n */\nTraceablePeerConnection.prototype._remoteStreamAdded = function(stream) {\n    const streamId = RTC.getStreamID(stream);\n\n    if (!RTC.isUserStreamById(streamId)) {\n        logger.info(`${this} ignored remote 'stream added' event for non-user stream[id=${streamId}]`);\n\n        return;\n    }\n\n    // Bind 'addtrack'/'removetrack' event handlers\n    if (browser.isChromiumBased()) {\n        stream.onaddtrack = event => {\n            this._remoteTrackAdded(stream, event.track);\n        };\n        stream.onremovetrack = event => {\n            this._remoteTrackRemoved(stream, event.track);\n        };\n    }\n\n    // Call remoteTrackAdded for each track in the stream\n    const streamAudioTracks = stream.getAudioTracks();\n\n    for (const audioTrack of streamAudioTracks) {\n        this._remoteTrackAdded(stream, audioTrack);\n    }\n    const streamVideoTracks = stream.getVideoTracks();\n\n    for (const videoTrack of streamVideoTracks) {\n        this._remoteTrackAdded(stream, videoTrack);\n    }\n};\n\n\n/**\n * Called on \"track added\" and \"stream added\" PeerConnection events (because we\n * handle streams on per track basis). Finds the owner and the SSRC for\n * the track and passes that to ChatRoom for further processing.\n * @param {MediaStream} stream the WebRTC MediaStream instance which is\n * the parent of the track\n * @param {MediaStreamTrack} track the WebRTC MediaStreamTrack added for remote\n * participant.\n * @param {RTCRtpTransceiver} transceiver the WebRTC transceiver that is created\n * for the remote participant in unified plan.\n */\nTraceablePeerConnection.prototype._remoteTrackAdded = function(stream, track, transceiver = null) {\n    const streamId = RTC.getStreamID(stream);\n    const mediaType = track.kind;\n\n    if (!this.isP2P && !RTC.isUserStreamById(streamId)) {\n        logger.info(`${this} ignored remote 'stream added' event for non-user stream[id=${streamId}]`);\n\n        return;\n    }\n    logger.info(`${this} adding remote track for stream[id=${streamId},type=${mediaType}]`);\n\n    // look up an associated JID for a stream id\n    if (!mediaType) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `MediaType undefined for remote track, stream id: ${streamId}`\n            ));\n\n        // Abort\n        return;\n    }\n\n    const remoteSDP = this._usesUnifiedPlan\n        ? new SDP(this.peerconnection.remoteDescription.sdp)\n        : new SDP(this.remoteDescription.sdp);\n    let mediaLines;\n\n    // In unified plan mode, find the matching mline using 'mid' if its availble, otherwise use the\n    // 'msid' attribute of the stream.\n    if (this._usesUnifiedPlan) {\n        if (transceiver && transceiver.mid) {\n            const mid = transceiver.mid;\n\n            mediaLines = remoteSDP.media.filter(mls => SDPUtil.findLine(mls, `a=mid:${mid}`));\n        } else {\n            mediaLines = remoteSDP.media.filter(mls => {\n                const msid = SDPUtil.findLine(mls, 'a=msid:');\n\n                return typeof msid !== 'undefined' && streamId === msid.substring(7).split(' ')[0];\n            });\n        }\n    } else {\n        mediaLines = remoteSDP.media.filter(mls => mls.startsWith(`m=${mediaType}`));\n    }\n\n    if (!mediaLines.length) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(`No media lines found in remote SDP for remote stream[id=${streamId},type=${mediaType}]`));\n\n        // Abort\n        return;\n    }\n\n    let ssrcLines = SDPUtil.findLines(mediaLines[0], 'a=ssrc:');\n\n    ssrcLines\n        = ssrcLines.filter(line => line.indexOf(`msid:${streamId}`) !== -1);\n    if (!ssrcLines.length) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(`No SSRC lines found in remote SDP for remote stream[msid=${streamId},type=${mediaType}]`));\n\n        // Abort\n        return;\n    }\n\n    // FIXME the length of ssrcLines[0] not verified, but it will fail\n    // with global error handler anyway\n    const ssrcStr = ssrcLines[0].substring(7).split(' ')[0];\n    const trackSsrc = Number(ssrcStr);\n    const ownerEndpointId = this.signalingLayer.getSSRCOwner(trackSsrc);\n\n    if (isNaN(trackSsrc) || trackSsrc < 0) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `Invalid SSRC for remote stream[ssrc=${trackSsrc},id=${streamId},type=${mediaType}]`));\n\n        // Abort\n        return;\n    } else if (!ownerEndpointId) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `No SSRC owner known for remote stream[ssrc=${trackSsrc},id=${streamId},type=${mediaType}]`));\n\n        // Abort\n        return;\n    }\n\n\n    let sourceName;\n\n    if (FeatureFlags.isSourceNameSignalingEnabled()) {\n        sourceName = this.signalingLayer.getTrackSourceName(trackSsrc);\n\n        // If source name was not signaled, we'll generate one which allows testing signaling\n        // when mixing legacy(mobile) with new clients.\n        if (!sourceName) {\n            sourceName = getSourceNameForJitsiTrack(ownerEndpointId, mediaType, 0);\n        }\n    }\n\n    // eslint-disable-next-line no-undef\n    logger.info(`${this} creating remote track[endpoint=${ownerEndpointId},ssrc=${trackSsrc},`\n        + `type=${mediaType},sourceName=${sourceName}]`);\n\n    const peerMediaInfo\n        = this.signalingLayer.getPeerMediaInfo(ownerEndpointId, mediaType);\n\n    if (!peerMediaInfo) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(`${this}: no peer media info available for ${ownerEndpointId}`));\n\n        return;\n    }\n\n    const muted = peerMediaInfo.muted;\n    const videoType = peerMediaInfo.videoType; // can be undefined\n\n    // eslint-disable-next-line no-undef\n    this._createRemoteTrack(\n        ownerEndpointId, stream, track, mediaType, videoType, trackSsrc, muted, sourceName);\n};\n\n// FIXME cleanup params\n/* eslint-disable max-params */\n\n/**\n * Initializes a new JitsiRemoteTrack instance with the data provided by\n * the signaling layer and SDP.\n *\n * @param {string} ownerEndpointId the owner's endpoint ID (MUC nickname)\n * @param {MediaStream} stream the WebRTC stream instance\n * @param {MediaStreamTrack} track the WebRTC track instance\n * @param {MediaType} mediaType the track's type of the media\n * @param {VideoType} [videoType] the track's type of the video (if applicable)\n * @param {number} ssrc the track's main SSRC number\n * @param {boolean} muted the initial muted status\n * @param {String} sourceName the track's source name\n */\nTraceablePeerConnection.prototype._createRemoteTrack = function(\n        ownerEndpointId,\n        stream,\n        track,\n        mediaType,\n        videoType,\n        ssrc,\n        muted,\n        sourceName) {\n    let remoteTracksMap = this.remoteTracks.get(ownerEndpointId);\n\n    if (!remoteTracksMap) {\n        remoteTracksMap = new Map();\n        remoteTracksMap.set(MediaType.AUDIO, new Set());\n        remoteTracksMap.set(MediaType.VIDEO, new Set());\n        this.remoteTracks.set(ownerEndpointId, remoteTracksMap);\n    }\n\n    const userTracksByMediaType = remoteTracksMap.get(mediaType);\n\n    if (userTracksByMediaType?.size\n        && Array.from(userTracksByMediaType).find(jitsiTrack => jitsiTrack.getTrack() === track)) {\n        // Ignore duplicated event which can originate either from 'onStreamAdded' or 'onTrackAdded'.\n        logger.info(`${this} ignored duplicated track event for track[endpoint=${ownerEndpointId},type=${mediaType}]`);\n\n        return;\n    } else if (userTracksByMediaType?.size && !FeatureFlags.isSourceNameSignalingEnabled()) {\n        logger.error(`${this} received a second remote track for track[endpoint=${ownerEndpointId},type=${mediaType}]`\n            + 'deleting the existing track');\n        const existingTrack = Array.from(userTracksByMediaType)[0];\n\n        // The exisiting track needs to be removed here. This happens on Safari sometimes when a SSRC is removed from\n        // the remote description and the browser doesn't fire a 'removetrack' event on the associated MediaStream.\n        this._remoteTrackRemoved(existingTrack.getOriginalStream(), existingTrack.getTrack());\n    }\n\n    const remoteTrack\n        = new JitsiRemoteTrack(\n                this.rtc,\n                this.rtc.conference,\n                ownerEndpointId,\n                stream,\n                track,\n                mediaType,\n                videoType,\n                ssrc,\n                muted,\n                this.isP2P,\n                sourceName);\n\n    userTracksByMediaType.add(remoteTrack);\n    this.eventEmitter.emit(RTCEvents.REMOTE_TRACK_ADDED, remoteTrack, this);\n};\n\n/* eslint-enable max-params */\n\n/**\n * Handles remote stream removal.\n * @param stream the WebRTC MediaStream object which is being removed from the\n * PeerConnection\n */\nTraceablePeerConnection.prototype._remoteStreamRemoved = function(stream) {\n    if (!RTC.isUserStream(stream)) {\n        const id = RTC.getStreamID(stream);\n\n        logger.info(`Ignored remote 'stream removed' event for stream[id=${id}]`);\n\n        return;\n    }\n\n    // Call remoteTrackRemoved for each track in the stream\n    const streamVideoTracks = stream.getVideoTracks();\n\n    for (const videoTrack of streamVideoTracks) {\n        this._remoteTrackRemoved(stream, videoTrack);\n    }\n    const streamAudioTracks = stream.getAudioTracks();\n\n    for (const audioTrack of streamAudioTracks) {\n        this._remoteTrackRemoved(stream, audioTrack);\n    }\n};\n\n/**\n * Handles remote media track removal.\n *\n * @param {MediaStream} stream - WebRTC MediaStream instance which is the parent of the track.\n * @param {MediaStreamTrack} track - WebRTC MediaStreamTrack which has been removed from the PeerConnection.\n * @returns {void}\n */\nTraceablePeerConnection.prototype._remoteTrackRemoved = function(stream, track) {\n    const streamId = RTC.getStreamID(stream);\n    const trackId = track && RTC.getTrackID(track);\n\n    if (!RTC.isUserStreamById(streamId)) {\n        logger.info(`${this} ignored remote 'stream removed' event for non-user stream[id=${streamId}]`);\n\n        return;\n    }\n\n    if (!streamId) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(`${this} remote track removal failed - no stream ID`));\n\n        return;\n    }\n\n    if (!trackId) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(`${this} remote track removal failed - no track ID`));\n\n        return;\n    }\n\n    const toBeRemoved = this.getRemoteTracks().find(\n        remoteTrack => remoteTrack.getStreamId() === streamId\n        && remoteTrack.getTrackId() === trackId);\n\n    if (!toBeRemoved) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(`${this} remote track removal failed - track not found`));\n\n        return;\n    }\n\n    logger.info(`${this} remote track removed stream[id=${streamId},trackId=${trackId}]`);\n    this._removeRemoteTrack(toBeRemoved);\n};\n\n/**\n * Removes all JitsiRemoteTracks associated with given MUC nickname (resource part of the JID).\n *\n * @param {string} owner - The resource part of the MUC JID.\n * @returns {JitsiRemoteTrack[]} - The array of removed tracks.\n */\nTraceablePeerConnection.prototype.removeRemoteTracks = function(owner) {\n    let removedTracks = [];\n    const remoteTracksByMedia = this.remoteTracks.get(owner);\n\n    if (remoteTracksByMedia) {\n        removedTracks = removedTracks.concat(Array.from(remoteTracksByMedia.get(MediaType.AUDIO)));\n        removedTracks = removedTracks.concat(Array.from(remoteTracksByMedia.get(MediaType.VIDEO)));\n        this.remoteTracks.delete(owner);\n    }\n    logger.debug(`${this} removed remote tracks[endpoint=${owner},count=${removedTracks.length}`);\n\n    return removedTracks;\n};\n\n/**\n * Removes and disposes given <tt>JitsiRemoteTrack</tt> instance. Emits {@link RTCEvents.REMOTE_TRACK_REMOVED}.\n *\n * @param {JitsiRemoteTrack} toBeRemoved - The remote track to be removed.\n * @returns {void}\n */\nTraceablePeerConnection.prototype._removeRemoteTrack = function(toBeRemoved) {\n    toBeRemoved.dispose();\n    const participantId = toBeRemoved.getParticipantId();\n    const userTracksByMediaType = this.remoteTracks.get(participantId);\n\n    if (!userTracksByMediaType) {\n        logger.error(`${this} removeRemoteTrack: no remote tracks map for endpoint=${participantId}`);\n    } else if (!userTracksByMediaType.get(toBeRemoved.getType())?.delete(toBeRemoved)) {\n        logger.error(`${this} Failed to remove ${toBeRemoved} - type mapping messed up ?`);\n    }\n    this.eventEmitter.emit(RTCEvents.REMOTE_TRACK_REMOVED, toBeRemoved);\n};\n\n/**\n * Returns a map with keys msid/mediaType and <tt>TrackSSRCInfo</tt> values.\n * @param {RTCSessionDescription} desc the local description.\n * @return {Map<string,TrackSSRCInfo>}\n */\nTraceablePeerConnection.prototype._extractSSRCMap = function(desc) {\n    /**\n     * Track SSRC infos mapped by stream ID (msid) or mediaType (unfied-plan)\n     * @type {Map<string,TrackSSRCInfo>}\n     */\n    const ssrcMap = new Map();\n\n    /**\n     * Groups mapped by primary SSRC number\n     * @type {Map<number,Array<SSRCGroupInfo>>}\n     */\n    const groupsMap = new Map();\n\n    if (typeof desc !== 'object' || desc === null\n        || typeof desc.sdp !== 'string') {\n        logger.warn('An empty description was passed as an argument');\n\n        return ssrcMap;\n    }\n\n    const session = transform.parse(desc.sdp);\n\n    if (!Array.isArray(session.media)) {\n        return ssrcMap;\n    }\n\n    let media = session.media;\n\n    // For unified plan clients, only the first audio and video mlines will have ssrcs for the local sources.\n    // The rest of the m-lines are for the recv-only sources, one for each remote source.\n    if (this._usesUnifiedPlan) {\n        media = [];\n        [ MediaType.AUDIO, MediaType.VIDEO ].forEach(mediaType => {\n            const mLine = session.media.find(m => m.type === mediaType);\n\n            mLine && media.push(mLine);\n        });\n    }\n\n    for (const mLine of media) {\n        if (!Array.isArray(mLine.ssrcs)) {\n            continue; // eslint-disable-line no-continue\n        }\n\n        if (Array.isArray(mLine.ssrcGroups)) {\n            for (const group of mLine.ssrcGroups) {\n                if (typeof group.semantics !== 'undefined'\n                    && typeof group.ssrcs !== 'undefined') {\n                    // Parse SSRCs and store as numbers\n                    const groupSSRCs = group.ssrcs.split(' ').map(ssrcStr => parseInt(ssrcStr, 10));\n                    const primarySSRC = groupSSRCs[0];\n\n                    // Note that group.semantics is already present\n                    group.ssrcs = groupSSRCs;\n\n                    // eslint-disable-next-line max-depth\n                    if (!groupsMap.has(primarySSRC)) {\n                        groupsMap.set(primarySSRC, []);\n                    }\n                    groupsMap.get(primarySSRC).push(group);\n                }\n            }\n        }\n\n        let ssrcs = mLine.ssrcs;\n\n        // Filter the ssrcs with 'msid' attribute for plan-b clients and 'cname' for unified-plan clients.\n        ssrcs = this._usesUnifiedPlan\n            ? ssrcs.filter(s => s.attribute === 'cname')\n            : ssrcs.filter(s => s.attribute === 'msid');\n\n        for (const ssrc of ssrcs) {\n            // Use the mediaType as key for the source map for unified plan clients since msids are not part of\n            // the standard and the unified plan SDPs do not have a proper msid attribute for the sources.\n            // Also the ssrcs for sources do not change for Unified plan clients since RTCRtpSender#replaceTrack is\n            // used for switching the tracks so it is safe to use the mediaType as the key for the TrackSSRCInfo map.\n            const key = this._usesUnifiedPlan ? mLine.type : ssrc.value;\n            const ssrcNumber = ssrc.id;\n            let ssrcInfo = ssrcMap.get(key);\n\n            if (!ssrcInfo) {\n                ssrcInfo = {\n                    ssrcs: [],\n                    groups: [],\n                    msid: key\n                };\n                ssrcMap.set(key, ssrcInfo);\n            }\n            ssrcInfo.ssrcs.push(ssrcNumber);\n\n            if (groupsMap.has(ssrcNumber)) {\n                const ssrcGroups = groupsMap.get(ssrcNumber);\n\n                for (const group of ssrcGroups) {\n                    ssrcInfo.groups.push(group);\n                }\n            }\n        }\n    }\n\n    return ssrcMap;\n};\n\n/**\n * Takes a SessionDescription object and returns a \"normalized\" version.\n * Currently it takes care of ordering the a=ssrc lines and denoting receive\n * only SSRCs.\n */\nconst normalizePlanB = function(desc) {\n    if (typeof desc !== 'object' || desc === null\n        || typeof desc.sdp !== 'string') {\n        logger.warn('An empty description was passed as an argument');\n\n        return desc;\n    }\n\n    // eslint-disable-next-line no-shadow\n    const transform = require('sdp-transform');\n    const session = transform.parse(desc.sdp);\n\n    if (typeof session !== 'undefined'\n            && typeof session.media !== 'undefined'\n            && Array.isArray(session.media)) {\n        session.media.forEach(mLine => {\n\n            // Chrome appears to be picky about the order in which a=ssrc lines\n            // are listed in an m-line when rtx is enabled (and thus there are\n            // a=ssrc-group lines with FID semantics). Specifically if we have\n            // \"a=ssrc-group:FID S1 S2\" and the \"a=ssrc:S2\" lines appear before\n            // the \"a=ssrc:S1\" lines, SRD fails.\n            // So, put SSRC which appear as the first SSRC in an FID ssrc-group\n            // first.\n            const firstSsrcs = [];\n            const newSsrcLines = [];\n\n            if (typeof mLine.ssrcGroups !== 'undefined'\n                && Array.isArray(mLine.ssrcGroups)) {\n                mLine.ssrcGroups.forEach(group => {\n                    if (typeof group.semantics !== 'undefined'\n                        && group.semantics === 'FID') {\n                        if (typeof group.ssrcs !== 'undefined') {\n                            firstSsrcs.push(Number(group.ssrcs.split(' ')[0]));\n                        }\n                    }\n                });\n            }\n\n            if (Array.isArray(mLine.ssrcs)) {\n                let i;\n\n                for (i = 0; i < mLine.ssrcs.length; i++) {\n                    if (typeof mLine.ssrcs[i] === 'object'\n                        && typeof mLine.ssrcs[i].id !== 'undefined'\n                        && firstSsrcs.indexOf(mLine.ssrcs[i].id) >= 0) {\n                        newSsrcLines.push(mLine.ssrcs[i]);\n                        delete mLine.ssrcs[i];\n                    }\n                }\n\n                for (i = 0; i < mLine.ssrcs.length; i++) {\n                    if (typeof mLine.ssrcs[i] !== 'undefined') {\n                        newSsrcLines.push(mLine.ssrcs[i]);\n                    }\n                }\n\n                mLine.ssrcs = replaceDefaultUnifiedPlanMsid(newSsrcLines);\n            }\n        });\n    }\n\n    const resStr = transform.write(session);\n\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: resStr\n    });\n};\n\n/**\n * Unified plan differentiates a remote track not associated with a stream using\n * the msid \"-\", which can incorrectly trigger an onaddstream event in plan-b.\n * For jitsi, these tracks are actually receive-only ssrcs. To prevent\n * onaddstream from firing, remove the ssrcs with msid \"-\" except the cname\n * line. Normally the ssrcs are not used by the client, as the bridge controls\n * media flow, but keep one reference to the ssrc for the p2p case.\n *\n * @param {Array<Object>} ssrcLines - The ssrc lines from a remote description.\n * @private\n * @returns {Array<Object>} ssrcLines with removed lines referencing msid \"-\".\n */\nfunction replaceDefaultUnifiedPlanMsid(ssrcLines = []) {\n    if (!browser.isChrome() || !browser.isVersionGreaterThan(70)) {\n        return ssrcLines;\n    }\n\n    let filteredLines = [ ...ssrcLines ];\n\n    const problematicSsrcIds = ssrcLines.filter(ssrcLine =>\n        ssrcLine.attribute === 'mslabel' && ssrcLine.value === '-')\n        .map(ssrcLine => ssrcLine.id);\n\n    problematicSsrcIds.forEach(ssrcId => {\n        // Find the cname which is to be modified and left in.\n        const cnameLine = filteredLines.find(line =>\n            line.id === ssrcId && line.attribute === 'cname');\n\n        cnameLine.value = `${MediaDirection.RECVONLY}-${ssrcId}`;\n\n        // Remove all of lines for the ssrc.\n        filteredLines\n            = filteredLines.filter(line => line.id !== ssrcId);\n\n        // But re-add the cname line so there is a reference kept to the ssrc\n        // in the SDP.\n        filteredLines.push(cnameLine);\n    });\n\n    return filteredLines;\n}\n\n/**\n * Makes sure that both audio and video directions are configured as 'sendrecv'.\n * @param {Object} localDescription the SDP object as defined by WebRTC.\n * @param {object} options <tt>TracablePeerConnection</tt> config options.\n */\nconst enforceSendRecv = function(localDescription, options) {\n    if (!localDescription) {\n        throw new Error('No local description passed in.');\n    }\n\n    const transformer = new SdpTransformWrap(localDescription.sdp);\n    const audioMedia = transformer.selectMedia(MediaType.AUDIO)?.[0];\n    let changed = false;\n\n    if (audioMedia && audioMedia.direction !== MediaDirection.SENDRECV) {\n        if (options.startSilent) {\n            audioMedia.direction = MediaDirection.INACTIVE;\n        } else {\n            audioMedia.direction = MediaDirection.SENDRECV;\n        }\n\n        changed = true;\n    }\n\n    const videoMedia = transformer.selectMedia(MediaType.VIDEO)?.[0];\n\n    if (videoMedia && videoMedia.direction !== MediaDirection.SENDRECV) {\n        videoMedia.direction = MediaDirection.SENDRECV;\n        changed = true;\n    }\n\n    if (changed) {\n        return new RTCSessionDescription({\n            type: localDescription.type,\n            sdp: transformer.toRawSDP()\n        });\n    }\n\n    return localDescription;\n};\n\n/**\n *\n * @param {JitsiLocalTrack} localTrack\n */\nTraceablePeerConnection.prototype.getLocalSSRC = function(localTrack) {\n    const ssrcInfo = this._getSSRC(localTrack.rtcId);\n\n    return ssrcInfo && ssrcInfo.ssrcs[0];\n};\n\n/**\n * When doing unified plan simulcast, we'll have a set of ssrcs with the\n * same msid but no ssrc-group, since unified plan signals the simulcast\n * group via the a=simulcast line.  Unfortunately, Jicofo will complain\n * if it sees ssrcs with matching msids but no ssrc-group, so we'll inject\n * an ssrc-group line to make Jicofo happy.\n * @param desc A session description object (with 'type' and 'sdp' fields)\n * @return A session description object with its sdp field modified to\n * contain an inject ssrc-group for simulcast\n */\nTraceablePeerConnection.prototype._injectSsrcGroupForUnifiedSimulcast\n    = function(desc) {\n        const sdp = transform.parse(desc.sdp);\n        const video = sdp.media.find(mline => mline.type === 'video');\n\n        // Check if the browser supports RTX, add only the primary ssrcs to the SIM group if that is the case.\n        video.ssrcGroups = video.ssrcGroups || [];\n        const fidGroups = video.ssrcGroups.filter(group => group.semantics === 'FID');\n\n        if (video.simulcast || video.simulcast_03) {\n            const ssrcs = [];\n\n            if (fidGroups && fidGroups.length) {\n                fidGroups.forEach(group => {\n                    ssrcs.push(group.ssrcs.split(' ')[0]);\n                });\n            } else {\n                video.ssrcs.forEach(ssrc => {\n                    if (ssrc.attribute === 'msid') {\n                        ssrcs.push(ssrc.id);\n                    }\n                });\n            }\n            if (video.ssrcGroups.find(group => group.semantics === 'SIM')) {\n                // Group already exists, no need to do anything\n                return desc;\n            }\n\n            video.ssrcGroups.push({\n                semantics: 'SIM',\n                ssrcs: ssrcs.join(' ')\n            });\n        }\n\n        return new RTCSessionDescription({\n            type: desc.type,\n            sdp: transform.write(sdp)\n        });\n    };\n\n/* eslint-disable-next-line vars-on-top */\nconst getters = {\n    signalingState() {\n        return this.peerconnection.signalingState;\n    },\n    iceConnectionState() {\n        return this.peerconnection.iceConnectionState;\n    },\n    connectionState() {\n        return this.peerconnection.connectionState;\n    },\n    localDescription() {\n        let desc = this.peerconnection.localDescription;\n\n        if (!desc) {\n            logger.debug(`${this} getLocalDescription no localDescription found`);\n\n            return {};\n        }\n\n        this.trace('getLocalDescription::preTransform', dumpSDP(desc));\n\n        // If the browser is running in unified plan mode and this is a jvb connection,\n        // transform the SDP to Plan B first.\n        if (this._usesUnifiedPlan && !this.isP2P) {\n            desc = this.interop.toPlanB(desc);\n            this.trace('getLocalDescription::postTransform (Plan B)',\n                dumpSDP(desc));\n\n            desc = this._injectSsrcGroupForUnifiedSimulcast(desc);\n            this.trace('getLocalDescription::postTransform (inject ssrc group)',\n                dumpSDP(desc));\n        } else if (!this._usesUnifiedPlan) {\n            if (browser.doesVideoMuteByStreamRemove()) {\n                desc = this.localSdpMunger.maybeAddMutedLocalVideoTracksToSDP(desc);\n                logger.debug(\n                    'getLocalDescription::postTransform (munge local SDP)', desc);\n            }\n\n            // What comes out of this getter will be signalled over Jingle to\n            // the other peer, so we need to make sure the media direction is\n            // 'sendrecv' because we won't change the direction later and don't want\n            // the other peer to think we can't send or receive.\n            //\n            // Note that the description we set in chrome does have the accurate\n            // direction (e.g. 'recvonly'), since that is technically what is\n            // happening (check setLocalDescription impl).\n            desc = enforceSendRecv(desc, this.options);\n        }\n\n        // See the method's doc for more info about this transformation.\n        desc = this.localSdpMunger.transformStreamIdentifiers(desc);\n\n        return desc;\n    },\n    remoteDescription() {\n        let desc = this.peerconnection.remoteDescription;\n\n        if (!desc) {\n            logger.debug(`${this} getRemoteDescription no remoteDescription found`);\n\n            return {};\n        }\n        this.trace('getRemoteDescription::preTransform', dumpSDP(desc));\n\n        if (this._usesUnifiedPlan) {\n            if (this.isP2P) {\n                // Adjust the media direction for p2p based on whether a local source has been added.\n                desc = this._adjustRemoteMediaDirection(desc);\n            } else {\n                // If this is a jvb connection, transform the SDP to Plan B first.\n                desc = this.interop.toPlanB(desc);\n                this.trace('getRemoteDescription::postTransform (Plan B)', dumpSDP(desc));\n            }\n        }\n\n        return desc;\n    }\n};\n\nObject.keys(getters).forEach(prop => {\n    Object.defineProperty(\n        TraceablePeerConnection.prototype,\n        prop, {\n            get: getters[prop]\n        }\n    );\n});\n\nTraceablePeerConnection.prototype._getSSRC = function(rtcId) {\n    return this.localSSRCs.get(rtcId);\n};\n\n/**\n * Checks if low fps screensharing is in progress.\n *\n * @private\n * @returns {boolean} Returns true if 5 fps screensharing is in progress, false otherwise.\n */\nTraceablePeerConnection.prototype.isSharingLowFpsScreen = function() {\n    return this._isSharingScreen() && this._capScreenshareBitrate;\n};\n\n/**\n * Checks if screensharing is in progress.\n *\n * @returns {boolean}  Returns true if a desktop track has been added to the peerconnection, false otherwise.\n */\nTraceablePeerConnection.prototype._isSharingScreen = function() {\n    const tracks = this.getLocalVideoTracks();\n\n    return Boolean(tracks.find(track => track.videoType === VideoType.DESKTOP));\n};\n\n/**\n * Munges the order of the codecs in the SDP passed based on the preference\n * set through config.js settings. All instances of the specified codec are\n * moved up to the top of the list when it is preferred. The specified codec\n * is deleted from the list if the configuration specifies that the codec be\n * disabled.\n * @param {RTCSessionDescription} description that needs to be munged.\n * @returns {RTCSessionDescription} the munged description.\n */\nTraceablePeerConnection.prototype._mungeCodecOrder = function(description) {\n    if (!this.codecPreference) {\n        return description;\n    }\n\n    const parsedSdp = transform.parse(description.sdp);\n\n    // Only the m-line that defines the source the browser will be sending should need to change.\n    // This is typically the first m-line with the matching media type.\n    const mLine = parsedSdp.media.find(m => m.type === this.codecPreference.mediaType);\n\n    if (!mLine) {\n        return description;\n    }\n\n    if (this.codecPreference.enable) {\n        SDPUtil.preferCodec(mLine, this.codecPreference.mimeType);\n\n        // Strip the high profile H264 codecs on mobile clients for p2p connection.\n        // High profile codecs give better quality at the expense of higher load which\n        // we do not want on mobile clients.\n        // Jicofo offers only the baseline code for the jvb connection.\n        // TODO - add check for mobile browsers once js-utils provides that check.\n        if (this.codecPreference.mimeType === CodecMimeType.H264 && browser.isReactNative() && this.isP2P) {\n            SDPUtil.stripCodec(mLine, this.codecPreference.mimeType, true /* high profile */);\n        }\n\n        // Set the max bitrate here on the SDP so that the configured max. bitrate is effective\n        // as soon as the browser switches to VP9.\n        if (this.codecPreference.mimeType === CodecMimeType.VP9\n            && this.getConfiguredVideoCodec() === CodecMimeType.VP9) {\n            const bitrates = this.tpcUtils.videoBitrates.VP9 || this.tpcUtils.videoBitrates;\n            const hdBitrate = bitrates.high ? bitrates.high : HD_BITRATE;\n            const limit = Math.floor((this._isSharingScreen() ? HD_BITRATE : hdBitrate) / 1000);\n\n            // Use only the HD bitrate for now as there is no API available yet for configuring\n            // the bitrates on the individual SVC layers.\n            mLine.bandwidth = [ {\n                type: 'AS',\n                limit\n            } ];\n        } else {\n            // Clear the bandwidth limit in SDP when VP9 is no longer the preferred codec.\n            // This is needed on react native clients as react-native-webrtc returns the\n            // SDP that the application passed instead of returning the SDP off the native side.\n            // This line automatically gets cleared on web on every renegotiation.\n            mLine.bandwidth = undefined;\n        }\n    } else {\n        SDPUtil.stripCodec(mLine, this.codecPreference.mimeType);\n    }\n\n    return new RTCSessionDescription({\n        type: description.type,\n        sdp: transform.write(parsedSdp)\n    });\n};\n\n/**\n * Add {@link JitsiLocalTrack} to this TPC.\n * @param {JitsiLocalTrack} track\n * @param {boolean} isInitiator indicates if the endpoint is the offerer.\n * @returns {Promise<void>} - resolved when done.\n */\nTraceablePeerConnection.prototype.addTrack = function(track, isInitiator = false) {\n    const rtcId = track.rtcId;\n\n    logger.info(`${this} adding ${track}`);\n\n    if (this.localTracks.has(rtcId)) {\n\n        return Promise.reject(new Error(`${track} is already in ${this}`));\n    }\n\n    this.localTracks.set(rtcId, track);\n    const webrtcStream = track.getOriginalStream();\n\n    if (this._usesUnifiedPlan) {\n        logger.debug(`${this} TPC.addTrack using unified plan`);\n        try {\n            this.tpcUtils.addTrack(track, isInitiator);\n        } catch (error) {\n            logger.error(`${this} Adding track=${track} failed: ${error?.message}`);\n\n            return Promise.reject(error);\n        }\n    } else {\n        // Use addStream API for the plan-b case.\n        if (webrtcStream) {\n            this._addStream(webrtcStream);\n\n        // It's not ok for a track to not have a WebRTC stream if:\n        } else if (!browser.doesVideoMuteByStreamRemove()\n                    || track.isAudioTrack()\n                    || (track.isVideoTrack() && !track.isMuted())) {\n            return Promise.reject(new Error(`${this} no WebRTC stream for track=${track}`));\n        }\n\n        // Muted video tracks do not have WebRTC stream\n        if (browser.doesVideoMuteByStreamRemove() && track.isVideoTrack() && track.isMuted()) {\n            const ssrcInfo = this.generateNewStreamSSRCInfo(track);\n\n            this.sdpConsistency.setPrimarySsrc(ssrcInfo.ssrcs[0]);\n            const simGroup\n                = ssrcInfo.groups.find(groupInfo => groupInfo.semantics === 'SIM');\n\n            if (simGroup) {\n                this.simulcast.setSsrcCache(simGroup.ssrcs);\n            }\n            const fidGroups\n                = ssrcInfo.groups.filter(\n                    groupInfo => groupInfo.semantics === 'FID');\n\n            if (fidGroups) {\n                const rtxSsrcMapping = new Map();\n\n                fidGroups.forEach(fidGroup => {\n                    const primarySsrc = fidGroup.ssrcs[0];\n                    const rtxSsrc = fidGroup.ssrcs[1];\n\n                    rtxSsrcMapping.set(primarySsrc, rtxSsrc);\n                });\n                this.rtxModifier.setSsrcCache(rtxSsrcMapping);\n            }\n        }\n    }\n    let promiseChain = Promise.resolve();\n\n    // On Firefox, the encodings have to be configured on the sender only after the transceiver is created.\n    if (browser.isFirefox()) {\n        promiseChain = promiseChain.then(() => webrtcStream && this.tpcUtils.setEncodings(track));\n    }\n\n    return promiseChain;\n};\n\n/**\n * Adds local track as part of the unmute operation.\n * @param {JitsiLocalTrack} track the track to be added as part of the unmute operation.\n *\n * @return {Promise<boolean>} Promise that resolves to true if the underlying PeerConnection's\n * state has changed and renegotiation is required, false if no renegotiation is needed or\n * Promise is rejected when something goes wrong.\n */\nTraceablePeerConnection.prototype.addTrackUnmute = function(track) {\n    logger.info(`${this} Adding track=${track} as unmute`);\n\n    if (!this._assertTrackBelongs('addTrackUnmute', track)) {\n        // Abort\n\n        return Promise.reject('Track not found on the peerconnection');\n    }\n\n    const webRtcStream = track.getOriginalStream();\n\n    if (!webRtcStream) {\n        logger.error(`${this} Unable to add track=${track} as unmute - no WebRTC stream`);\n\n        return Promise.reject('Stream not found');\n    }\n\n    if (this._usesUnifiedPlan) {\n        return this.tpcUtils.replaceTrack(null, track).then(() => false);\n    }\n\n    this._addStream(webRtcStream);\n\n    return Promise.resolve(true);\n};\n\n/**\n * Adds WebRTC media stream to the underlying PeerConnection\n * @param {MediaStream} mediaStream\n * @private\n */\nTraceablePeerConnection.prototype._addStream = function(mediaStream) {\n    this.peerconnection.addStream(mediaStream);\n    this._addedStreams.push(mediaStream);\n};\n\n/**\n * Removes WebRTC media stream from the underlying PeerConection\n * @param {MediaStream} mediaStream\n */\nTraceablePeerConnection.prototype._removeStream = function(mediaStream) {\n    this.peerconnection.removeStream(mediaStream);\n    this._addedStreams\n        = this._addedStreams.filter(stream => stream !== mediaStream);\n};\n\n/**\n * This method when called will check if given <tt>localTrack</tt> belongs to\n * this TPC (that it has been previously added using {@link addTrack}). If the\n * track does not belong an error message will be logged.\n * @param {string} methodName the method name that will be logged in an error\n * message\n * @param {JitsiLocalTrack} localTrack\n * @return {boolean} <tt>true</tt> if given local track belongs to this TPC or\n * <tt>false</tt> otherwise.\n * @private\n */\nTraceablePeerConnection.prototype._assertTrackBelongs = function(\n        methodName,\n        localTrack) {\n    const doesBelong = this.localTracks.has(localTrack?.rtcId);\n\n    if (!doesBelong) {\n        logger.error(`${this} ${methodName}: track=${localTrack} does not belong to pc`);\n    }\n\n    return doesBelong;\n};\n\n/**\n * Returns the codec that is configured on the client as the preferred video codec.\n * This takes into account the current order of codecs in the local description sdp.\n *\n * @returns {CodecMimeType} The codec that is set as the preferred codec to receive\n * video in the local SDP.\n */\nTraceablePeerConnection.prototype.getConfiguredVideoCodec = function() {\n    const sdp = this.peerconnection.localDescription?.sdp;\n    const defaultCodec = CodecMimeType.VP8;\n\n    if (!sdp) {\n        return defaultCodec;\n    }\n    const parsedSdp = transform.parse(sdp);\n    const mLine = parsedSdp.media.find(m => m.type === MediaType.VIDEO);\n    const codec = mLine.rtp[0].codec;\n\n    if (codec) {\n        return Object.values(CodecMimeType).find(value => value === codec.toLowerCase());\n    }\n\n    return defaultCodec;\n};\n\n/**\n * Enables or disables simulcast for screenshare based on the frame rate requested for desktop track capture.\n *\n * @param {number} maxFps framerate to be used for desktop track capture.\n */\nTraceablePeerConnection.prototype.setDesktopSharingFrameRate = function(maxFps) {\n    const lowFps = maxFps <= SS_DEFAULT_FRAME_RATE;\n\n    this._capScreenshareBitrate = this.isSimulcastOn() && lowFps;\n};\n\n/**\n * Sets the codec preference on the peerconnection. The codec preference goes into effect when\n * the next renegotiation happens.\n *\n * @param {CodecMimeType} preferredCodec the preferred codec.\n * @param {CodecMimeType} disabledCodec the codec that needs to be disabled.\n * @returns {void}\n */\nTraceablePeerConnection.prototype.setVideoCodecs = function(preferredCodec = null, disabledCodec = null) {\n    // If both enable and disable are set, disable settings will prevail.\n    const enable = disabledCodec === null;\n    const mimeType = disabledCodec ? disabledCodec : preferredCodec;\n\n    if (this.codecPreference && (preferredCodec || disabledCodec)) {\n        this.codecPreference.enable = enable;\n        this.codecPreference.mimeType = mimeType;\n    } else if (preferredCodec || disabledCodec) {\n        this.codecPreference = {\n            enable,\n            mediaType: MediaType.VIDEO,\n            mimeType\n        };\n    } else {\n        logger.warn(`${this} Invalid codec settings[preferred=${preferredCodec},disabled=${disabledCodec}],\n            atleast one value is needed`);\n    }\n};\n\n/**\n * Tells if the given WebRTC <tt>MediaStream</tt> has been added to\n * the underlying WebRTC PeerConnection.\n * @param {MediaStream} mediaStream\n * @returns {boolean}\n */\nTraceablePeerConnection.prototype.isMediaStreamInPc = function(mediaStream) {\n    return this._addedStreams.indexOf(mediaStream) > -1;\n};\n\n/**\n * Remove local track from this TPC.\n * @param {JitsiLocalTrack} localTrack the track to be removed from this TPC.\n *\n * FIXME It should probably remove a boolean just like {@link removeTrackMute}\n *       The same applies to addTrack.\n */\nTraceablePeerConnection.prototype.removeTrack = function(localTrack) {\n    const webRtcStream = localTrack.getOriginalStream();\n\n    this.trace(\n        'removeStream',\n        localTrack.rtcId, webRtcStream ? webRtcStream.id : undefined);\n\n    if (!this._assertTrackBelongs('removeStream', localTrack)) {\n        // Abort - nothing to be done here\n        return;\n    }\n    this.localTracks.delete(localTrack.rtcId);\n    this.localSSRCs.delete(localTrack.rtcId);\n\n    if (webRtcStream) {\n        this.peerconnection.removeStream(webRtcStream);\n    }\n};\n\n/**\n * Returns the sender corresponding to the given media type.\n * @param {MEDIA_TYPE} mediaType - The media type 'audio' or 'video' to be used for the search.\n * @returns {RTPSender|undefined} - The found sender or undefined if no sender\n * was found.\n */\nTraceablePeerConnection.prototype.findSenderByKind = function(mediaType) {\n    if (this.peerconnection.getSenders) {\n        return this.peerconnection.getSenders().find(s => s.track && s.track.kind === mediaType);\n    }\n};\n\n/**\n * Returns the receiver corresponding to the given MediaStreamTrack.\n *\n * @param {MediaSreamTrack} track - The media stream track used for the search.\n * @returns {RTCRtpReceiver|undefined} - The found receiver or undefined if no receiver\n * was found.\n */\nTraceablePeerConnection.prototype.findReceiverForTrack = function(track) {\n    return this.peerconnection.getReceivers().find(r => r.track === track);\n};\n\n/**\n * Returns the sender corresponding to the given MediaStreamTrack.\n *\n * @param {MediaSreamTrack} track - The media stream track used for the search.\n * @returns {RTCRtpSender|undefined} - The found sender or undefined if no sender\n * was found.\n */\nTraceablePeerConnection.prototype.findSenderForTrack = function(track) {\n    if (this.peerconnection.getSenders) {\n        return this.peerconnection.getSenders().find(s => s.track === track);\n    }\n};\n\n/**\n * Replaces <tt>oldTrack</tt> with <tt>newTrack</tt> from the peer connection.\n * Either <tt>oldTrack</tt> or <tt>newTrack</tt> can be null; replacing a valid\n * <tt>oldTrack</tt> with a null <tt>newTrack</tt> effectively just removes\n * <tt>oldTrack</tt>\n *\n * @param {JitsiLocalTrack|null} oldTrack - The current track in use to be replaced on the pc.\n * @param {JitsiLocalTrack|null} newTrack - The new track to be used.\n *\n * @returns {Promise<boolean>} - If the promise resolves with true, renegotiation will be needed.\n * Otherwise no renegotiation is needed.\n */\nTraceablePeerConnection.prototype.replaceTrack = function(oldTrack, newTrack) {\n    if (!(oldTrack || newTrack)) {\n        logger.info(`${this} replaceTrack called with no new track and no old track`);\n\n        return Promise.resolve();\n    }\n\n    // If a track is being added to the peerconnection for the first time, we want the source signaling to be sent to\n    // Jicofo before the mute state is sent over presence. Therefore, trigger a renegotiation in this case. If we\n    // rely on \"negotiationneeded\" fired by the browser to signal new ssrcs, the mute state in presence will be sent\n    // before the source signaling which is undesirable.\n    const negotiationNeeded = Boolean(!oldTrack || !this.localTracks.has(oldTrack?.rtcId));\n\n    if (this._usesUnifiedPlan) {\n        logger.debug(`${this} TPC.replaceTrack using unified plan`);\n        const mediaType = newTrack?.getType() ?? oldTrack?.getType();\n        const stream = newTrack?.getOriginalStream();\n        const promise = newTrack && !stream\n\n            // Ignore cases when the track is replaced while the device is in a muted state.\n            // The track will be replaced again on the peerconnection when the user unmutes.\n            ? Promise.resolve()\n            : this.tpcUtils.replaceTrack(oldTrack, newTrack);\n\n        return promise\n            .then(transceiver => {\n                oldTrack && this.localTracks.delete(oldTrack.rtcId);\n                newTrack && this.localTracks.set(newTrack.rtcId, newTrack);\n                const mediaActive = mediaType === MediaType.AUDIO\n                    ? this.audioTransferActive\n                    : this.videoTransferActive;\n\n                // Set the transceiver direction only if media is not suspended on the connection. This happens when\n                // the client is using the p2p connection. Transceiver direction is updated when media is resumed on\n                // this connection again.\n                if (transceiver && mediaActive) {\n                    transceiver.direction = newTrack ? MediaDirection.SENDRECV : MediaDirection.RECVONLY;\n                }\n\n                // Avoid configuring the encodings on Chromium/Safari until simulcast is configured\n                // for the newly added track using SDP munging which happens during the renegotiation.\n                const configureEncodingsPromise = browser.usesSdpMungingForSimulcast() || !newTrack\n                    ? Promise.resolve()\n                    : this.tpcUtils.setEncodings(newTrack);\n\n                // Force renegotiation only when the source is added for the first time.\n                return configureEncodingsPromise.then(() => negotiationNeeded);\n            });\n    }\n\n    logger.debug(`${this} TPC.replaceTrack using plan B`);\n\n    let promiseChain = Promise.resolve();\n\n    if (oldTrack) {\n        this.removeTrack(oldTrack);\n    }\n    if (newTrack) {\n        promiseChain = this.addTrack(newTrack);\n    }\n\n    return promiseChain.then(() => true);\n};\n\n/**\n * Removes local track as part of the mute operation.\n * @param {JitsiLocalTrack} localTrack the local track to be remove as part of\n * the mute operation.\n * @return {Promise<boolean>} Promise that resolves to true if the underlying PeerConnection's\n * state has changed and renegotiation is required, false if no renegotiation is needed or\n * Promise is rejected when something goes wrong.\n */\nTraceablePeerConnection.prototype.removeTrackMute = function(localTrack) {\n    const webRtcStream = localTrack.getOriginalStream();\n\n    this.trace('removeTrackMute', localTrack.rtcId, webRtcStream ? webRtcStream.id : null);\n\n    if (!this._assertTrackBelongs('removeTrackMute', localTrack)) {\n        // Abort - nothing to be done here\n        return Promise.reject('Track not found in the peerconnection');\n    }\n\n    if (this._usesUnifiedPlan) {\n        return this.tpcUtils.replaceTrack(localTrack, null).then(() => false);\n    }\n\n    if (webRtcStream) {\n        logger.info(`${this} Removing track=${localTrack} as mute`);\n        this._removeStream(webRtcStream);\n\n        return Promise.resolve(true);\n    }\n\n    logger.error(`${this} removeTrackMute - no WebRTC stream for track=${localTrack}`);\n\n    return Promise.reject('Stream not found');\n};\n\nTraceablePeerConnection.prototype.createDataChannel = function(label, opts) {\n    this.trace('createDataChannel', label, opts);\n\n    return this.peerconnection.createDataChannel(label, opts);\n};\n\n/**\n * Ensures that the simulcast ssrc-group appears after any other ssrc-groups\n * in the SDP so that simulcast is properly activated.\n *\n * @param {Object} localSdp the WebRTC session description instance for\n * the local description.\n * @private\n */\nTraceablePeerConnection.prototype._ensureSimulcastGroupIsLast = function(localSdp) {\n    let sdpStr = localSdp.sdp;\n\n    const videoStartIndex = sdpStr.indexOf('m=video');\n    const simStartIndex = sdpStr.indexOf('a=ssrc-group:SIM', videoStartIndex);\n    let otherStartIndex = sdpStr.lastIndexOf('a=ssrc-group');\n\n    if (simStartIndex === -1\n        || otherStartIndex === -1\n        || otherStartIndex === simStartIndex) {\n        return localSdp;\n    }\n\n    const simEndIndex = sdpStr.indexOf('\\r\\n', simStartIndex);\n    const simStr = sdpStr.substring(simStartIndex, simEndIndex + 2);\n\n    sdpStr = sdpStr.replace(simStr, '');\n    otherStartIndex = sdpStr.lastIndexOf('a=ssrc-group');\n    const otherEndIndex = sdpStr.indexOf('\\r\\n', otherStartIndex);\n    const sdpHead = sdpStr.slice(0, otherEndIndex);\n    const simStrTrimmed = simStr.trim();\n    const sdpTail = sdpStr.slice(otherEndIndex);\n\n    sdpStr = `${sdpHead}\\r\\n${simStrTrimmed}${sdpTail}`;\n\n    return new RTCSessionDescription({\n        type: localSdp.type,\n        sdp: sdpStr\n    });\n};\n\n/**\n * Will adjust audio and video media direction in the given SDP object to\n * reflect the current status of the {@link audioTransferActive} and\n * {@link videoTransferActive} flags.\n * @param {RTCSessionDescription} localDescription the WebRTC session description instance for\n * the local description.\n * @private\n */\nTraceablePeerConnection.prototype._adjustLocalMediaDirection = function(localDescription) {\n    const transformer = new SdpTransformWrap(localDescription.sdp);\n    let modifiedDirection = false;\n    const audioMedia = transformer.selectMedia(MediaType.AUDIO)?.[0];\n\n    if (audioMedia) {\n        const desiredAudioDirection = this.getDesiredMediaDirection(MediaType.AUDIO);\n\n        if (audioMedia.direction !== desiredAudioDirection) {\n            audioMedia.direction = desiredAudioDirection;\n            logger.info(`${this} Adjusted local audio direction to ${desiredAudioDirection}`);\n            modifiedDirection = true;\n        }\n    } else {\n        logger.warn(`${this} No \"audio\" media found in the local description`);\n    }\n\n    const videoMedia = transformer.selectMedia(MediaType.VIDEO)?.[0];\n\n    if (videoMedia) {\n        const desiredVideoDirection = this.getDesiredMediaDirection(MediaType.VIDEO);\n\n        if (videoMedia.direction !== desiredVideoDirection) {\n            videoMedia.direction = desiredVideoDirection;\n            logger.info(`${this} Adjusted local video direction to ${desiredVideoDirection}`);\n            modifiedDirection = true;\n        }\n    } else {\n        logger.warn(`${this} No \"video\" media found in the local description`);\n    }\n\n    if (modifiedDirection) {\n        return new RTCSessionDescription({\n            type: localDescription.type,\n            sdp: transformer.toRawSDP()\n        });\n    }\n\n    return localDescription;\n};\n\n/**\n * Adjusts the media direction on the remote description based on availability of local and remote sources in a p2p\n * media connection.\n *\n * @param {RTCSessionDescription} remoteDescription the WebRTC session description instance for the remote description.\n * @returns the transformed remoteDescription.\n * @private\n */\nTraceablePeerConnection.prototype._adjustRemoteMediaDirection = function(remoteDescription) {\n    const transformer = new SdpTransformWrap(remoteDescription.sdp);\n\n    [ MediaType.AUDIO, MediaType.VIDEO ].forEach(mediaType => {\n        const media = transformer.selectMedia(mediaType)?.[0];\n        const hasLocalSource = this.hasAnyTracksOfType(mediaType);\n        const hasRemoteSource = this.getRemoteTracks(null, mediaType).length > 0;\n\n        media.direction = hasLocalSource && hasRemoteSource\n            ? MediaDirection.SENDRECV\n            : hasLocalSource\n                ? MediaDirection.RECVONLY\n                : hasRemoteSource ? MediaDirection.SENDONLY : MediaDirection.INACTIVE;\n    });\n\n    return new RTCSessionDescription({\n        type: remoteDescription.type,\n        sdp: transformer.toRawSDP()\n    });\n};\n\n/**\n * Munges the stereo flag as well as the opusMaxAverageBitrate in the SDP, based\n * on values set through config.js, if present.\n *\n * @param {RTCSessionDescription} description that needs to be munged.\n * @returns {RTCSessionDescription} the munged description.\n */\nTraceablePeerConnection.prototype._mungeOpus = function(description) {\n    const { audioQuality } = this.options;\n\n    if (!audioQuality?.stereo && !audioQuality?.opusMaxAverageBitrate) {\n        return description;\n    }\n\n    const parsedSdp = transform.parse(description.sdp);\n    const mLines = parsedSdp.media;\n\n    for (const mLine of mLines) {\n        if (mLine.type === 'audio') {\n            const { payload } = mLine.rtp.find(protocol => protocol.codec === CodecMimeType.OPUS);\n\n            if (!payload) {\n                // eslint-disable-next-line no-continue\n                continue;\n            }\n\n            let fmtpOpus = mLine.fmtp.find(protocol => protocol.payload === payload);\n\n            if (!fmtpOpus) {\n                fmtpOpus = {\n                    payload,\n                    config: ''\n                };\n            }\n\n            const fmtpConfig = transform.parseParams(fmtpOpus.config);\n            let sdpChanged = false;\n\n            if (audioQuality?.stereo) {\n                fmtpConfig.stereo = 1;\n                sdpChanged = true;\n            }\n\n            if (audioQuality?.opusMaxAverageBitrate) {\n                fmtpConfig.maxaveragebitrate = audioQuality.opusMaxAverageBitrate;\n                sdpChanged = true;\n            }\n\n            if (!sdpChanged) {\n                // eslint-disable-next-line no-continue\n                continue;\n            }\n\n            let mungedConfig = '';\n\n            for (const key of Object.keys(fmtpConfig)) {\n                mungedConfig += `${key}=${fmtpConfig[key]}; `;\n            }\n\n            fmtpOpus.config = mungedConfig.trim();\n        }\n    }\n\n    return new RTCSessionDescription({\n        type: description.type,\n        sdp: transform.write(parsedSdp)\n    });\n};\n\n/**\n * Sets up the _dtlsTransport object and initializes callbacks for it.\n */\nTraceablePeerConnection.prototype._initializeDtlsTransport = function() {\n    // We are assuming here that we only have one bundled transport here\n    if (!this.peerconnection.getSenders || this._dtlsTransport) {\n        return;\n    }\n\n    const senders = this.peerconnection.getSenders();\n\n    if (senders.length !== 0 && senders[0].transport) {\n        this._dtlsTransport = senders[0].transport;\n\n        this._dtlsTransport.onerror = error => {\n            logger.error(`${this} DtlsTransport error: ${error}`);\n        };\n\n        this._dtlsTransport.onstatechange = () => {\n            this.trace('dtlsTransport.onstatechange', this._dtlsTransport.state);\n        };\n    }\n};\n\n\n/**\n * Configures the stream encodings depending on the video type and the bitrates configured.\n *\n * @param {JitsiLocalTrack} - The local track for which the sender encodings have to configured.\n * @returns {Promise} promise that will be resolved when the operation is successful and rejected otherwise.\n */\nTraceablePeerConnection.prototype.configureSenderVideoEncodings = function(localVideoTrack = null) {\n    if (FeatureFlags.isSourceNameSignalingEnabled()) {\n        if (localVideoTrack) {\n            return this.setSenderVideoConstraints(\n                this._senderMaxHeights.get(localVideoTrack.getSourceName()),\n                localVideoTrack);\n        }\n        const promises = [];\n\n        for (const track of this.getLocalVideoTracks()) {\n            promises.push(this.setSenderVideoConstraints(this._senderMaxHeights.get(track.getSourceName()), track));\n        }\n\n        return Promise.allSettled(promises);\n    }\n\n    let localTrack = localVideoTrack;\n\n    if (!localTrack) {\n        localTrack = this.getLocalVideoTracks()[0];\n    }\n\n    return this.setSenderVideoConstraints(this._senderVideoMaxHeight, localTrack);\n};\n\nTraceablePeerConnection.prototype.setLocalDescription = function(description) {\n    let localDescription = description;\n\n    this.trace('setLocalDescription::preTransform', dumpSDP(localDescription));\n\n    // Munge stereo flag and opusMaxAverageBitrate based on config.js\n    localDescription = this._mungeOpus(localDescription);\n\n    if (!this._usesUnifiedPlan) {\n        localDescription = this._adjustLocalMediaDirection(localDescription);\n        localDescription = this._ensureSimulcastGroupIsLast(localDescription);\n    }\n\n    // Munge the order of the codecs based on the preferences set through config.js if we are using SDP munging.\n    if (!this._usesTransceiverCodecPreferences) {\n        localDescription = this._mungeCodecOrder(localDescription);\n    }\n\n    this.trace('setLocalDescription::postTransform', dumpSDP(localDescription));\n\n    return new Promise((resolve, reject) => {\n        this.peerconnection.setLocalDescription(localDescription)\n            .then(() => {\n                this.trace('setLocalDescriptionOnSuccess');\n                const localUfrag = SDPUtil.getUfrag(localDescription.sdp);\n\n                if (localUfrag !== this.localUfrag) {\n                    this.localUfrag = localUfrag;\n                    this.eventEmitter.emit(RTCEvents.LOCAL_UFRAG_CHANGED, this, localUfrag);\n                }\n\n                this._initializeDtlsTransport();\n\n                resolve();\n            }, err => {\n                this.trace('setLocalDescriptionOnFailure', err);\n                this.eventEmitter.emit(RTCEvents.SET_LOCAL_DESCRIPTION_FAILED, err, this);\n                reject(err);\n            });\n    });\n};\n\n/**\n * Enables/disables audio media transmission on this peer connection. When\n * disabled the SDP audio media direction in the local SDP will be adjusted to\n * 'inactive' which means that no data will be sent nor accepted, but\n * the connection should be kept alive.\n * @param {boolean} active <tt>true</tt> to enable audio media transmission or\n * <tt>false</tt> to disable. If the value is not a boolean the call will have\n * no effect.\n * @return {boolean} <tt>true</tt> if the value has changed and sRD/sLD cycle\n * needs to be executed in order for the changes to take effect or\n * <tt>false</tt> if the given value was the same as the previous one.\n * @public\n */\nTraceablePeerConnection.prototype.setAudioTransferActive = function(active) {\n    logger.debug(`${this} audio transfer active: ${active}`);\n    const changed = this.audioTransferActive !== active;\n\n    this.audioTransferActive = active;\n\n    if (this._usesUnifiedPlan) {\n        this.tpcUtils.setAudioTransferActive(active);\n\n        // false means no renegotiation up the chain which is not needed in the Unified mode\n        return false;\n    }\n\n    return changed;\n};\n\nTraceablePeerConnection.prototype.setRemoteDescription = function(description) {\n    let remoteDescription = description;\n\n    this.trace('setRemoteDescription::preTransform', dumpSDP(description));\n\n    // Munge stereo flag and opusMaxAverageBitrate based on config.js\n    remoteDescription = this._mungeOpus(remoteDescription);\n\n    if (this._usesUnifiedPlan) {\n        // Translate the SDP to Unified plan format first for the jvb case, p2p case will only have 2 m-lines.\n        if (!this.isP2P) {\n            const currentDescription = this.peerconnection.remoteDescription;\n\n            remoteDescription = this.interop.toUnifiedPlan(remoteDescription, currentDescription);\n            this.trace('setRemoteDescription::postTransform (Unified)', dumpSDP(remoteDescription));\n        }\n        if (this.isSimulcastOn()) {\n            // Implode the simulcast ssrcs so that the remote sdp has only the first ssrc in the SIM group.\n            remoteDescription = this.simulcast.mungeRemoteDescription(remoteDescription);\n            this.trace('setRemoteDescription::postTransform (simulcast)', dumpSDP(remoteDescription));\n\n            remoteDescription = this.tpcUtils.insertUnifiedPlanSimulcastReceive(remoteDescription);\n            this.trace('setRemoteDescription::postTransform (sim receive)', dumpSDP(remoteDescription));\n        }\n        remoteDescription = this.tpcUtils.ensureCorrectOrderOfSsrcs(remoteDescription);\n        this.trace('setRemoteDescription::postTransform (correct ssrc order)', dumpSDP(remoteDescription));\n    } else {\n        if (this.isSimulcastOn()) {\n            // Implode the simulcast ssrcs so that the remote sdp has only the first ssrc in the SIM group.\n            remoteDescription = this.simulcast.mungeRemoteDescription(\n                remoteDescription,\n                true /* add x-google-conference flag */);\n            this.trace('setRemoteDescription::postTransform (simulcast)', dumpSDP(remoteDescription));\n        }\n        remoteDescription = normalizePlanB(remoteDescription);\n    }\n\n    // Munge the order of the codecs based on the preferences set through config.js.\n    remoteDescription = this._mungeCodecOrder(remoteDescription);\n    this.trace('setRemoteDescription::postTransform (munge codec order)', dumpSDP(remoteDescription));\n\n    return new Promise((resolve, reject) => {\n        this.peerconnection.setRemoteDescription(remoteDescription)\n            .then(() => {\n                this.trace('setRemoteDescriptionOnSuccess');\n                const remoteUfrag = SDPUtil.getUfrag(remoteDescription.sdp);\n\n                if (remoteUfrag !== this.remoteUfrag) {\n                    this.remoteUfrag = remoteUfrag;\n                    this.eventEmitter.emit(RTCEvents.REMOTE_UFRAG_CHANGED, this, remoteUfrag);\n                }\n\n                this._initializeDtlsTransport();\n\n                resolve();\n            }, err => {\n                this.trace('setRemoteDescriptionOnFailure', err);\n                this.eventEmitter.emit(RTCEvents.SET_REMOTE_DESCRIPTION_FAILED, err, this);\n                reject(err);\n            });\n    });\n};\n\n/**\n * Changes the resolution of the video stream that is sent to the peer based on the resolution requested by the peer\n * and user preference, sets the degradation preference on the sender based on the video type, configures the maximum\n * bitrates on the send stream.\n *\n * @param {number} frameHeight - The max frame height to be imposed on the outgoing video stream.\n * @param {JitsiLocalTrack} - The local track for which the sender constraints have to be applied.\n * @returns {Promise} promise that will be resolved when the operation is successful and rejected otherwise.\n */\nTraceablePeerConnection.prototype.setSenderVideoConstraints = function(frameHeight, localVideoTrack) {\n    if (frameHeight < 0) {\n        throw new Error(`Invalid frameHeight: ${frameHeight}`);\n    }\n\n    // XXX: This is not yet supported on mobile.\n    if (browser.isReactNative()) {\n        return Promise.resolve();\n    }\n\n    if (FeatureFlags.isSourceNameSignalingEnabled()) {\n        this._senderMaxHeights.set(localVideoTrack.getSourceName(), frameHeight);\n    } else {\n        this._senderVideoMaxHeight = frameHeight;\n    }\n\n    if (!localVideoTrack || localVideoTrack.isMuted()) {\n        return Promise.resolve();\n    }\n    const videoSender = this.findSenderForTrack(localVideoTrack.getTrack());\n\n    if (!videoSender) {\n        return Promise.resolve();\n    }\n    const parameters = videoSender.getParameters();\n\n    if (!parameters?.encodings?.length) {\n        return Promise.resolve();\n    }\n\n    // Set the degradation preference.\n    const preference = this.isSharingLowFpsScreen()\n        ? DEGRADATION_PREFERENCE_DESKTOP // Prefer resolution for low fps share.\n        : DEGRADATION_PREFERENCE_CAMERA; // Prefer frame-rate for high fps share and camera.\n\n    parameters.degradationPreference = preference;\n    logger.info(`${this} Setting degradation preference [preference=${preference},track=${localVideoTrack}`);\n\n    // Calculate the encodings active state based on the resolution requested by the bridge.\n    this.encodingsEnabledState = this.tpcUtils.calculateEncodingsActiveState(localVideoTrack, frameHeight);\n    const maxBitrates = this.tpcUtils.calculateEncodingsBitrates(localVideoTrack);\n    const videoType = localVideoTrack.getVideoType();\n\n    if (this.isSimulcastOn()) {\n        for (const encoding in parameters.encodings) {\n            if (parameters.encodings.hasOwnProperty(encoding)) {\n                parameters.encodings[encoding].active = this.encodingsEnabledState[encoding];\n\n                // Firefox doesn't follow the spec and lets application specify the degradation preference on the\n                // encodings.\n                browser.isFirefox() && (parameters.encodings[encoding].degradationPreference = preference);\n\n                // Max bitrates are configured on the encodings only for VP8.\n                if (this.getConfiguredVideoCodec() === CodecMimeType.VP8\n                    && (this.options?.videoQuality?.maxBitratesVideo\n                        || this.isSharingLowFpsScreen()\n                        || this._usesUnifiedPlan)) {\n                    parameters.encodings[encoding].maxBitrate = maxBitrates[encoding];\n                }\n            }\n        }\n        this.tpcUtils.updateEncodingsResolution(parameters);\n\n    // For p2p and cases and where simulcast is explicitly disabled.\n    } else if (frameHeight > 0) {\n        let scaleFactor = HD_SCALE_FACTOR;\n\n        // Do not scale down encodings for desktop tracks for non-simulcast case.\n        if (videoType === VideoType.CAMERA && localVideoTrack.resolution > frameHeight) {\n            scaleFactor = Math.floor(localVideoTrack.resolution / frameHeight);\n        }\n\n        parameters.encodings[0].active = true;\n        parameters.encodings[0].scaleResolutionDownBy = scaleFactor;\n\n        // Firefox doesn't follow the spec and lets application specify the degradation preference on the encodings.\n        browser.isFirefox() && (parameters.encodings[0].degradationPreference = preference);\n\n        // Configure the bitrate.\n        if (this.getConfiguredVideoCodec() === CodecMimeType.VP8 && this.options?.videoQuality?.maxBitratesVideo) {\n            let bitrate = this.getTargetVideoBitrates()?.high;\n\n            if (videoType === VideoType.CAMERA) {\n                bitrate = this.tpcUtils.localStreamEncodingsConfig\n                    .find(layer => layer.scaleResolutionDownBy === scaleFactor)?.maxBitrate ?? bitrate;\n            }\n            parameters.encodings[0].maxBitrate = bitrate;\n        }\n    } else {\n        parameters.encodings[0].active = false;\n    }\n\n    logger.info(`${this} setting max height=${frameHeight},encodings=${JSON.stringify(parameters.encodings)}`);\n\n    return videoSender.setParameters(parameters).then(() => {\n        localVideoTrack.maxEnabledResolution = frameHeight;\n        this.eventEmitter.emit(RTCEvents.LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED, localVideoTrack);\n    });\n};\n\n/**\n * Enables/disables video media transmission on this peer connection. When\n * disabled the SDP video media direction in the local SDP will be adjusted to\n * 'inactive' which means that no data will be sent nor accepted, but\n * the connection should be kept alive.\n * @param {boolean} active <tt>true</tt> to enable video media transmission or\n * <tt>false</tt> to disable. If the value is not a boolean the call will have\n * no effect.\n * @return {boolean} <tt>true</tt> if the value has changed and sRD/sLD cycle\n * needs to be executed in order for the changes to take effect or\n * <tt>false</tt> if the given value was the same as the previous one.\n * @public\n */\nTraceablePeerConnection.prototype.setVideoTransferActive = function(active) {\n    logger.debug(`${this} video transfer active: ${active}`);\n    const changed = this.videoTransferActive !== active;\n\n    this.videoTransferActive = active;\n\n    if (this._usesUnifiedPlan) {\n        this.tpcUtils.setVideoTransferActive(active);\n\n        // false means no renegotiation up the chain which is not needed in the Unified mode\n        return false;\n    }\n\n    return changed;\n};\n\n/**\n * Sends DTMF tones if possible.\n *\n * @param {string} tones - The DTMF tones string as defined by {@code RTCDTMFSender.insertDTMF}, 'tones' argument.\n * @param {number} duration - The amount of time in milliseconds that each DTMF should last. It's 200ms by default.\n * @param {number} interToneGap - The length of time in miliseconds to wait between tones. It's 200ms by default.\n *\n * @returns {void}\n */\nTraceablePeerConnection.prototype.sendTones = function(tones, duration = 200, interToneGap = 200) {\n    if (!this._dtmfSender) {\n        if (this.peerconnection.getSenders) {\n            const rtpSender = this.peerconnection.getSenders().find(s => s.dtmf);\n\n            this._dtmfSender = rtpSender && rtpSender.dtmf;\n            this._dtmfSender && logger.info(`${this} initialized DTMFSender using getSenders`);\n        }\n\n        if (!this._dtmfSender) {\n            const localAudioTrack = Array.from(this.localTracks.values()).find(t => t.isAudioTrack());\n\n            if (this.peerconnection.createDTMFSender && localAudioTrack) {\n                this._dtmfSender = this.peerconnection.createDTMFSender(localAudioTrack.getTrack());\n            }\n            this._dtmfSender && logger.info(`${this} initialized DTMFSender using deprecated createDTMFSender`);\n        }\n\n        if (this._dtmfSender) {\n            this._dtmfSender.ontonechange = this._onToneChange.bind(this);\n        }\n    }\n\n    if (this._dtmfSender) {\n        if (this._dtmfSender.toneBuffer) {\n            this._dtmfTonesQueue.push({\n                tones,\n                duration,\n                interToneGap\n            });\n\n            return;\n        }\n\n        this._dtmfSender.insertDTMF(tones, duration, interToneGap);\n    } else {\n        logger.warn(`${this} sendTones - failed to select DTMFSender`);\n    }\n};\n\n/**\n * Callback ivoked by {@code this._dtmfSender} when it has finished playing\n * a single tone.\n *\n * @param {Object} event - The tonechange event which indicates what characters\n * are left to be played for the current tone.\n * @private\n * @returns {void}\n */\nTraceablePeerConnection.prototype._onToneChange = function(event) {\n    // An empty event.tone indicates the current tones have finished playing.\n    // Automatically start playing any queued tones on finish.\n    if (this._dtmfSender && event.tone === '' && this._dtmfTonesQueue.length) {\n        const { tones, duration, interToneGap } = this._dtmfTonesQueue.shift();\n\n        this._dtmfSender.insertDTMF(tones, duration, interToneGap);\n    }\n};\n\n/**\n * Makes the underlying TraceablePeerConnection generate new SSRC for\n * the recvonly video stream.\n */\nTraceablePeerConnection.prototype.generateRecvonlySsrc = function() {\n    const newSSRC = SDPUtil.generateSsrc();\n\n    logger.info(`${this} generated new recvonly SSRC=${newSSRC}`);\n    this.sdpConsistency.setPrimarySsrc(newSSRC);\n};\n\n/**\n * Makes the underlying TraceablePeerConnection forget the current primary video\n * SSRC.\n */\nTraceablePeerConnection.prototype.clearRecvonlySsrc = function() {\n    logger.info(`${this} Clearing primary video SSRC!`);\n    this.sdpConsistency.clearVideoSsrcCache();\n};\n\n/**\n * Closes underlying WebRTC PeerConnection instance and removes all remote\n * tracks by emitting {@link RTCEvents.REMOTE_TRACK_REMOVED} for each one of\n * them.\n */\nTraceablePeerConnection.prototype.close = function() {\n    this.trace('stop');\n\n    // Off SignalingEvents\n    this.signalingLayer.off(SignalingEvents.PEER_MUTED_CHANGED, this._peerMutedChanged);\n    this.signalingLayer.off(SignalingEvents.PEER_VIDEO_TYPE_CHANGED, this._peerVideoTypeChanged);\n    this._usesUnifiedPlan && this.peerconnection.removeEventListener('track', this.onTrack);\n\n    for (const peerTracks of this.remoteTracks.values()) {\n        for (const remoteTracks of peerTracks.values()) {\n            for (const remoteTrack of remoteTracks) {\n                this._removeRemoteTrack(remoteTrack);\n            }\n        }\n    }\n    this.remoteTracks.clear();\n\n    this._addedStreams = [];\n\n    this._dtmfSender = null;\n    this._dtmfTonesQueue = [];\n\n    if (!this.rtc._removePeerConnection(this)) {\n        logger.error(`${this} RTC._removePeerConnection returned false`);\n    }\n    if (this.statsinterval !== null) {\n        window.clearInterval(this.statsinterval);\n        this.statsinterval = null;\n    }\n    logger.info(`${this} Closing peerconnection`);\n    this.peerconnection.close();\n};\n\nTraceablePeerConnection.prototype.createAnswer = function(constraints) {\n    return this._createOfferOrAnswer(false /* answer */, constraints);\n};\n\nTraceablePeerConnection.prototype.createOffer = function(constraints) {\n    return this._createOfferOrAnswer(true /* offer */, constraints);\n};\n\nTraceablePeerConnection.prototype._createOfferOrAnswer = function(\n        isOffer,\n        constraints) {\n    const logName = isOffer ? 'Offer' : 'Answer';\n\n    this.trace(`create${logName}`, JSON.stringify(constraints, null, ' '));\n\n    const handleSuccess = (resultSdp, resolveFn, rejectFn) => {\n        try {\n            this.trace(\n                `create${logName}OnSuccess::preTransform`, dumpSDP(resultSdp));\n\n            if (!this._usesUnifiedPlan) {\n                // If there are no local video tracks, then a \"recvonly\"\n                // SSRC needs to be generated\n                if (!this.hasAnyTracksOfType(MediaType.VIDEO)\n                    && !this.sdpConsistency.hasPrimarySsrcCached()) {\n                    this.generateRecvonlySsrc();\n                }\n\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = new RTCSessionDescription({\n                    type: resultSdp.type,\n                    sdp: this.sdpConsistency.makeVideoPrimarySsrcsConsistent(\n                        resultSdp.sdp)\n                });\n\n                this.trace(\n                    `create${logName}OnSuccess::postTransform `\n                         + '(make primary audio/video ssrcs consistent)',\n                    dumpSDP(resultSdp));\n            }\n\n            const localVideoTrack = this.getLocalVideoTracks()[0];\n\n            // Configure simulcast for camera tracks and for desktop tracks that need simulcast.\n            if (this.isSimulcastOn() && browser.usesSdpMungingForSimulcast()\n                && (localVideoTrack?.getVideoType() === VideoType.CAMERA\n                || this._usesUnifiedPlan\n                || !this.isSharingLowFpsScreen())) {\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = this.simulcast.mungeLocalDescription(resultSdp);\n                this.trace(`create${logName} OnSuccess::postTransform (simulcast)`, dumpSDP(resultSdp));\n            }\n\n            if (!this.options.disableRtx && browser.usesSdpMungingForSimulcast()) {\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = new RTCSessionDescription({\n                    type: resultSdp.type,\n                    sdp: this.rtxModifier.modifyRtxSsrcs(resultSdp.sdp)\n                });\n\n                this.trace(\n                    `create${logName}`\n                         + 'OnSuccess::postTransform (rtx modifier)',\n                    dumpSDP(resultSdp));\n            }\n\n            const ssrcMap = this._extractSSRCMap(resultSdp);\n\n            this._processLocalSSRCsMap(ssrcMap);\n\n            resolveFn(resultSdp);\n        } catch (e) {\n            this.trace(`create${logName}OnError`, e);\n            this.trace(`create${logName}OnError`, dumpSDP(resultSdp));\n            logger.error(`${this} create${logName}OnError`, e, dumpSDP(resultSdp));\n\n            rejectFn(e);\n        }\n    };\n\n    const handleFailure = (err, rejectFn) => {\n        this.trace(`create${logName}OnFailure`, err);\n        const eventType\n            = isOffer\n                ? RTCEvents.CREATE_OFFER_FAILED\n                : RTCEvents.CREATE_ANSWER_FAILED;\n\n        this.eventEmitter.emit(eventType, err, this);\n\n        rejectFn(err);\n    };\n\n    // Set the codec preference before creating an offer or answer so that the generated SDP will have\n    // the correct preference order.\n    if (this._usesTransceiverCodecPreferences) {\n        const transceiver = this.peerconnection.getTransceivers()\n            .find(t => t.receiver && t.receiver?.track?.kind === MediaType.VIDEO);\n\n        if (transceiver) {\n            let capabilities = RTCRtpReceiver.getCapabilities(MediaType.VIDEO)?.codecs;\n            const mimeType = this.codecPreference?.mimeType;\n            const enable = this.codecPreference?.enable;\n\n            if (capabilities && mimeType && enable) {\n                // Move the desired codec (all variations of it as well) to the beginning of the list.\n                /* eslint-disable-next-line arrow-body-style */\n                capabilities.sort(caps => {\n                    return caps.mimeType.toLowerCase() === `${MediaType.VIDEO}/${mimeType}` ? -1 : 1;\n                });\n            } else if (capabilities && mimeType) {\n                capabilities = capabilities\n                    .filter(caps => caps.mimeType.toLowerCase() !== `${MediaType.VIDEO}/${mimeType}`);\n            }\n\n            // Disable ulpfec on Google Chrome and derivatives because\n            // https://bugs.chromium.org/p/chromium/issues/detail?id=1276427\n            if (browser.isChromiumBased()) {\n                capabilities = capabilities\n                    .filter(caps => caps.mimeType.toLowerCase() !== `${MediaType.VIDEO}/${CodecMimeType.ULPFEC}`);\n            }\n\n            try {\n                transceiver.setCodecPreferences(capabilities);\n            } catch (err) {\n                logger.warn(`${this} Setting codec[preference=${mimeType},enable=${enable}] failed`, err);\n            }\n        }\n    }\n\n    return new Promise((resolve, reject) => {\n        let oaPromise;\n\n        if (isOffer) {\n            oaPromise = this.peerconnection.createOffer(constraints);\n        } else {\n            oaPromise = this.peerconnection.createAnswer(constraints);\n        }\n\n        oaPromise\n            .then(\n                sdp => handleSuccess(sdp, resolve, reject),\n                error => handleFailure(error, reject));\n    });\n};\n\n/**\n * Extract primary SSRC from given {@link TrackSSRCInfo} object.\n * @param {TrackSSRCInfo} ssrcObj\n * @return {number|null} the primary SSRC or <tt>null</tt>\n */\nTraceablePeerConnection.prototype._extractPrimarySSRC = function(ssrcObj) {\n    if (ssrcObj && ssrcObj.groups && ssrcObj.groups.length) {\n        return ssrcObj.groups[0].ssrcs[0];\n    } else if (ssrcObj && ssrcObj.ssrcs && ssrcObj.ssrcs.length) {\n        return ssrcObj.ssrcs[0];\n    }\n\n    return null;\n};\n\n/**\n * Goes over the SSRC map extracted from the latest local description and tries\n * to match them with the local tracks (by MSID). Will update the values\n * currently stored in the {@link TraceablePeerConnection.localSSRCs} map.\n * @param {Map<string,TrackSSRCInfo>} ssrcMap\n * @private\n */\nTraceablePeerConnection.prototype._processLocalSSRCsMap = function(ssrcMap) {\n    for (const track of this.localTracks.values()) {\n        const sourceIdentifier = this._usesUnifiedPlan ? track.getType() : track.storedMSID;\n\n        if (ssrcMap.has(sourceIdentifier)) {\n            const newSSRC = ssrcMap.get(sourceIdentifier);\n\n            if (!newSSRC) {\n                logger.error(`${this} No SSRC found for stream=${sourceIdentifier}`);\n\n                return;\n            }\n            const oldSSRC = this.localSSRCs.get(track.rtcId);\n            const newSSRCNum = this._extractPrimarySSRC(newSSRC);\n            const oldSSRCNum = this._extractPrimarySSRC(oldSSRC);\n\n            // eslint-disable-next-line no-negated-condition\n            if (newSSRCNum !== oldSSRCNum) {\n                oldSSRCNum && logger.error(`${this} Overwriting SSRC for track=${track}] with ssrc=${newSSRC}`);\n                this.localSSRCs.set(track.rtcId, newSSRC);\n                this.eventEmitter.emit(RTCEvents.LOCAL_TRACK_SSRC_UPDATED, track, newSSRCNum);\n            }\n        } else if (!track.isVideoTrack() && !track.isMuted()) {\n            // It is normal to find no SSRCs for a muted video track in\n            // the local SDP as the recv-only SSRC is no longer munged in.\n            // So log the warning only if it's not a muted video track.\n            logger.warn(`${this} No SSRCs found in the local SDP for track=${track}, stream=${sourceIdentifier}`);\n        }\n    }\n};\n\nTraceablePeerConnection.prototype.addIceCandidate = function(candidate) {\n    this.trace('addIceCandidate', JSON.stringify({\n        candidate: candidate.candidate,\n        sdpMid: candidate.sdpMid,\n        sdpMLineIndex: candidate.sdpMLineIndex,\n        usernameFragment: candidate.usernameFragment\n    }, null, ' '));\n\n    return this.peerconnection.addIceCandidate(candidate);\n};\n\n/**\n * Returns the number of simulcast streams that are currently enabled on the peerconnection.\n *\n * @returns {number} The number of simulcast streams currently enabled or 1 when simulcast is disabled.\n */\nTraceablePeerConnection.prototype.getActiveSimulcastStreams = function() {\n    let activeStreams = 1;\n\n    if (this.isSimulcastOn() && this.encodingsEnabledState) {\n        activeStreams = this.encodingsEnabledState.filter(stream => Boolean(stream))?.length;\n    } else if (this.isSimulcastOn()) {\n        activeStreams = SIM_LAYER_RIDS.length;\n    }\n\n    return activeStreams;\n};\n\n/**\n * Obtains call-related stats from the peer connection.\n *\n * @returns {Promise<Object>} Promise which resolves with data providing statistics about\n * the peerconnection.\n */\nTraceablePeerConnection.prototype.getStats = function() {\n    return this.peerconnection.getStats();\n};\n\n/**\n * Generates and stores new SSRC info object for given local track.\n * The method should be called only for a video track being added to this TPC\n * in the muted state (given that the current browser uses this strategy).\n * @param {JitsiLocalTrack} track\n * @return {TPCSSRCInfo}\n */\nTraceablePeerConnection.prototype.generateNewStreamSSRCInfo = function(track) {\n    const rtcId = track.rtcId;\n    let ssrcInfo = this._getSSRC(rtcId);\n\n    if (ssrcInfo) {\n        logger.error(`${this} Overwriting local SSRCs for track id=${rtcId}`);\n    }\n\n    // Configure simulcast for camera tracks and desktop tracks that need simulcast.\n    if (this.isSimulcastOn()\n        && (track.getVideoType() === VideoType.CAMERA || !this.isSharingLowFpsScreen())) {\n        ssrcInfo = {\n            ssrcs: [],\n            groups: []\n        };\n        for (let i = 0; i < SIM_LAYER_RIDS.length; i++) {\n            ssrcInfo.ssrcs.push(SDPUtil.generateSsrc());\n        }\n        ssrcInfo.groups.push({\n            ssrcs: ssrcInfo.ssrcs.slice(),\n            semantics: 'SIM'\n        });\n    } else {\n        ssrcInfo = {\n            ssrcs: [ SDPUtil.generateSsrc() ],\n            groups: []\n        };\n    }\n    if (!this.options.disableRtx) {\n        // Specifically use a for loop here because we'll\n        //  be adding to the list we're iterating over, so we\n        //  only want to iterate through the items originally\n        //  on the list\n        const currNumSsrcs = ssrcInfo.ssrcs.length;\n\n        for (let i = 0; i < currNumSsrcs; ++i) {\n            const primarySsrc = ssrcInfo.ssrcs[i];\n            const rtxSsrc = SDPUtil.generateSsrc();\n\n            ssrcInfo.ssrcs.push(rtxSsrc);\n            ssrcInfo.groups.push({\n                ssrcs: [ primarySsrc, rtxSsrc ],\n                semantics: 'FID'\n            });\n        }\n    }\n    ssrcInfo.msid = track.storedMSID;\n    this.localSSRCs.set(rtcId, ssrcInfo);\n\n    return ssrcInfo;\n};\n\n/**\n * Returns if the peer connection uses Unified plan implementation.\n *\n * @returns {boolean} True if the pc uses Unified plan, false otherwise.\n */\nTraceablePeerConnection.prototype.usesUnifiedPlan = function() {\n    return this._usesUnifiedPlan;\n};\n\n/**\n * Creates a text representation of this <tt>TraceablePeerConnection</tt>\n * instance.\n * @return {string}\n */\nTraceablePeerConnection.prototype.toString = function() {\n    return `TPC[id=${this.id},type=${this.isP2P ? 'P2P' : 'JVB'}]`;\n};\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport BridgeVideoType from '../../service/RTC/BridgeVideoType';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport browser from '../browser';\nimport FeatureFlags from '../flags/FeatureFlags';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport Listenable from '../util/Listenable';\nimport { safeCounterIncrement } from '../util/MathUtil';\n\nimport BridgeChannel from './BridgeChannel';\nimport JitsiLocalTrack from './JitsiLocalTrack';\nimport RTCUtils from './RTCUtils';\nimport TraceablePeerConnection from './TraceablePeerConnection';\n\n\nconst logger = getLogger(__filename);\n\n/**\n * The counter used to generated id numbers assigned to peer connections\n * @type {number}\n */\nlet peerConnectionIdCounter = 0;\n\n/**\n * The counter used to generate id number for the local\n * <code>MediaStreamTrack</code>s.\n * @type {number}\n */\nlet rtcTrackIdCounter = 0;\n\n/**\n * Creates {@code JitsiLocalTrack} instances from the passed in meta information\n * about MedieaTracks.\n *\n * @param {Object[]} mediaStreamMetaData - An array of meta information with\n * MediaTrack instances. Each can look like:\n * {{\n *     stream: MediaStream instance that holds a track with audio or video,\n *     track: MediaTrack within the MediaStream,\n *     videoType: \"camera\" or \"desktop\" or falsy,\n *     sourceId: ID of the desktopsharing source,\n *     sourceType: The desktopsharing source type,\n *     effects: Array of effect types\n * }}\n */\nfunction _createLocalTracks(mediaStreamMetaData = []) {\n    return mediaStreamMetaData.map(metaData => {\n        const {\n            sourceId,\n            sourceType,\n            stream,\n            track,\n            videoType,\n            effects\n        } = metaData;\n\n        const { deviceId, facingMode } = track.getSettings();\n\n        // FIXME Move rtcTrackIdCounter to a static method in JitsiLocalTrack\n        // so RTC does not need to handle ID management. This move would be\n        // safer to do once the old createLocalTracks is removed.\n        rtcTrackIdCounter = safeCounterIncrement(rtcTrackIdCounter);\n\n        return new JitsiLocalTrack({\n            deviceId,\n            facingMode,\n            mediaType: track.kind,\n            rtcId: rtcTrackIdCounter,\n            sourceId,\n            sourceType,\n            stream,\n            track,\n            videoType: videoType || null,\n            effects\n        });\n    });\n}\n\n/**\n *\n */\nexport default class RTC extends Listenable {\n    /**\n     *\n     * @param conference\n     * @param options\n     */\n    constructor(conference, options = {}) {\n        super();\n        this.conference = conference;\n\n        /**\n         * A map of active <tt>TraceablePeerConnection</tt>.\n         * @type {Map.<number, TraceablePeerConnection>}\n         */\n        this.peerConnections = new Map();\n\n        this.localTracks = [];\n\n        this.options = options;\n\n        // BridgeChannel instance.\n        // @private\n        // @type {BridgeChannel}\n        this._channel = null;\n\n        /**\n         * The value specified to the last invocation of setLastN before the\n         * channel completed opening. If non-null, the value will be sent\n         * through a channel (once) as soon as it opens and will then be\n         * discarded.\n         * @private\n         * @type {number}\n         */\n        this._lastN = undefined;\n\n        /**\n         * Defines the last N endpoints list. It can be null or an array once\n         * initialised with a channel last N event.\n         * @type {Array<string>|null}\n         * @private\n         */\n        this._lastNEndpoints = null;\n\n        /**\n         * Defines the forwarded sources list. It can be null or an array once initialised with a channel forwarded\n         * sources event.\n         *\n         * @type {Array<string>|null}\n         * @private\n         */\n        this._forwardedSources = null;\n\n        /**\n         * The number representing the maximum video height the local client\n         * should receive from the bridge.\n         *\n         * @type {number|undefined}\n         * @private\n         */\n        this._maxFrameHeight = undefined;\n\n        /**\n         * The endpoint IDs of currently selected participants.\n         *\n         * @type {Array}\n         * @private\n         */\n        this._selectedEndpoints = null;\n\n        // The last N change listener.\n        this._lastNChangeListener = this._onLastNChanged.bind(this);\n\n        // The forwarded sources change listener.\n        this._forwardedSourcesChangeListener = this._onForwardedSourcesChanged.bind(this);\n\n        this._onDeviceListChanged = this._onDeviceListChanged.bind(this);\n        this._updateAudioOutputForAudioTracks\n            = this._updateAudioOutputForAudioTracks.bind(this);\n\n        /**\n         * The default video type assumed by the bridge.\n         * @deprecated this will go away with multiple streams support\n         * @type {BridgeVideoType}\n         * @private\n         */\n        this._videoType = BridgeVideoType.NONE;\n\n        // Switch audio output device on all remote audio tracks. Local audio\n        // tracks handle this event by themselves.\n        if (RTCUtils.isDeviceChangeAvailable('output')) {\n            RTCUtils.addListener(\n                RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                this._updateAudioOutputForAudioTracks\n            );\n\n            RTCUtils.addListener(\n                RTCEvents.DEVICE_LIST_CHANGED,\n                this._onDeviceListChanged\n            );\n        }\n    }\n\n    /**\n     * Removes any listeners and stored state from this {@code RTC} instance.\n     *\n     * @returns {void}\n     */\n    destroy() {\n        RTCUtils.removeListener(RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED, this._updateAudioOutputForAudioTracks);\n        RTCUtils.removeListener(RTCEvents.DEVICE_LIST_CHANGED, this._onDeviceListChanged);\n\n        if (this._channelOpenListener) {\n            this.removeListener(\n                RTCEvents.DATA_CHANNEL_OPEN,\n                this._channelOpenListener\n            );\n        }\n    }\n\n    /**\n     * Exposes the private helper for converting a WebRTC MediaStream to a\n     * JitsiLocalTrack.\n     *\n     * @param {Array<Object>} tracksInfo\n     * @returns {Array<JitsiLocalTrack>}\n     */\n    static createLocalTracks(tracksInfo) {\n        return _createLocalTracks(tracksInfo);\n    }\n\n    /**\n     * Creates the local MediaStreams.\n     * @param {object} [options] Optional parameters.\n     * @param {array} options.devices The devices that will be requested.\n     * @param {string} options.resolution Resolution constraints.\n     * @param {string} options.cameraDeviceId\n     * @param {string} options.micDeviceId\n     * @returns {*} Promise object that will receive the new JitsiTracks\n     */\n    static obtainAudioAndVideoPermissions(options) {\n        return RTCUtils.obtainAudioAndVideoPermissions(options)\n            .then(tracksInfo => _createLocalTracks(tracksInfo));\n    }\n\n    /**\n     * Initializes the bridge channel of this instance.\n     * At least one of both, peerconnection or wsUrl parameters, must be\n     * given.\n     * @param {RTCPeerConnection} [peerconnection] WebRTC peer connection\n     * instance.\n     * @param {string} [wsUrl] WebSocket URL.\n     */\n    initializeBridgeChannel(peerconnection, wsUrl) {\n        this._channel = new BridgeChannel(peerconnection, wsUrl, this.eventEmitter);\n\n        this._channelOpenListener = () => {\n            const logError = (error, msgType, value) => {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error(`Cannot send ${msgType}(${JSON.stringify(value)}) endpoint message`, error);\n            };\n\n            // When the channel becomes available, tell the bridge about video selections so that it can do adaptive\n            // simulcast, we want the notification to trigger even if userJid is undefined, or null.\n            if (this._receiverVideoConstraints) {\n                try {\n                    this._channel.sendNewReceiverVideoConstraintsMessage(this._receiverVideoConstraints);\n                } catch (error) {\n                    logError(error, 'ReceiverVideoConstraints', this._receiverVideoConstraints);\n                }\n            }\n            if (this._selectedEndpoints) {\n                try {\n                    this._channel.sendSelectedEndpointsMessage(this._selectedEndpoints);\n                } catch (error) {\n                    logError(error, 'SelectedEndpointsChangedEvent', this._selectedEndpoints);\n                }\n            }\n            if (typeof this._maxFrameHeight !== 'undefined') {\n                try {\n                    this._channel.sendReceiverVideoConstraintMessage(this._maxFrameHeight);\n                } catch (error) {\n                    logError(error, 'ReceiverVideoConstraint', this._maxFrameHeight);\n                }\n            }\n            if (typeof this._lastN !== 'undefined' && this._lastN !== -1) {\n                try {\n                    this._channel.sendSetLastNMessage(this._lastN);\n                } catch (error) {\n                    logError(error, 'LastNChangedEvent', this._lastN);\n                }\n            }\n            if (!FeatureFlags.isSourceNameSignalingEnabled()) {\n                try {\n                    this._channel.sendVideoTypeMessage(this._videoType);\n                } catch (error) {\n                    logError(error, 'VideoTypeMessage', this._videoType);\n                }\n            }\n\n            this.removeListener(RTCEvents.DATA_CHANNEL_OPEN, this._channelOpenListener);\n            this._channelOpenListener = null;\n        };\n        this.addListener(RTCEvents.DATA_CHANNEL_OPEN, this._channelOpenListener);\n\n        // Add Last N change listener.\n        this.addListener(RTCEvents.LASTN_ENDPOINT_CHANGED, this._lastNChangeListener);\n\n        if (FeatureFlags.isSourceNameSignalingEnabled()) {\n            // Add forwarded sources change listener.\n            this.addListener(RTCEvents.FORWARDED_SOURCES_CHANGED, this._forwardedSourcesChangeListener);\n        }\n    }\n\n    /**\n     * Callback invoked when the list of known audio and video devices has\n     * been updated. Attempts to update the known available audio output\n     * devices.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onDeviceListChanged() {\n        this._updateAudioOutputForAudioTracks(RTCUtils.getAudioOutputDevice());\n    }\n\n    /**\n     * Receives events when Last N had changed.\n     * @param {array} lastNEndpoints The new Last N endpoints.\n     * @private\n     */\n    _onLastNChanged(lastNEndpoints = []) {\n        const oldLastNEndpoints = this._lastNEndpoints || [];\n        let leavingLastNEndpoints = [];\n        let enteringLastNEndpoints = [];\n\n        this._lastNEndpoints = lastNEndpoints;\n\n        leavingLastNEndpoints = oldLastNEndpoints.filter(\n            id => !this.isInLastN(id));\n\n        enteringLastNEndpoints = lastNEndpoints.filter(\n            id => oldLastNEndpoints.indexOf(id) === -1);\n\n        this.conference.eventEmitter.emit(\n            JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED,\n            leavingLastNEndpoints,\n            enteringLastNEndpoints);\n    }\n\n    /**\n     * Receives events when forwarded sources had changed.\n     *\n     * @param {array} forwardedSources The new forwarded sources.\n     * @private\n     */\n    _onForwardedSourcesChanged(forwardedSources = []) {\n        const oldForwardedSources = this._forwardedSources || [];\n        let leavingForwardedSources = [];\n        let enteringForwardedSources = [];\n\n        this._forwardedSources = forwardedSources;\n\n        leavingForwardedSources = oldForwardedSources.filter(sourceName => !this.isInForwardedSources(sourceName));\n\n        enteringForwardedSources = forwardedSources.filter(\n            sourceName => oldForwardedSources.indexOf(sourceName) === -1);\n\n        this.conference.eventEmitter.emit(\n            JitsiConferenceEvents.FORWARDED_SOURCES_CHANGED,\n            leavingForwardedSources,\n            enteringForwardedSources,\n            Date.now());\n    }\n\n    /**\n     * Should be called when current media session ends and after the\n     * PeerConnection has been closed using PeerConnection.close() method.\n     */\n    onCallEnded() {\n        if (this._channel) {\n            // The BridgeChannel is not explicitly closed as the PeerConnection\n            // is closed on call ended which triggers datachannel onclose\n            // events. If using a WebSocket, the channel must be closed since\n            // it is not managed by the PeerConnection.\n            // The reference is cleared to disable any logic related to the\n            // channel.\n            if (this._channel && this._channel.mode === 'websocket') {\n                this._channel.close();\n            }\n\n            this._channel = null;\n        }\n    }\n\n    /**\n     * Sets the capture frame rate to be used for desktop tracks.\n     *\n     * @param {number} maxFps framerate to be used for desktop track capture.\n     */\n    setDesktopSharingFrameRate(maxFps) {\n        RTCUtils.setDesktopSharingFrameRate(maxFps);\n    }\n\n    /**\n     * Sets the receiver video constraints that determine how bitrate is allocated to each of the video streams\n     * requested from the bridge. The constraints are cached and sent through the bridge channel once the channel\n     * is established.\n     * @param {*} constraints\n     */\n    setNewReceiverVideoConstraints(constraints) {\n        this._receiverVideoConstraints = constraints;\n\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendNewReceiverVideoConstraintsMessage(constraints);\n        }\n    }\n\n    /**\n     * Sets the maximum video size the local participant should receive from\n     * remote participants. Will cache the value and send it through the channel\n     * once it is created.\n     *\n     * @param {number} maxFrameHeightPixels the maximum frame height, in pixels,\n     * this receiver is willing to receive.\n     * @returns {void}\n     */\n    setReceiverVideoConstraint(maxFrameHeight) {\n        this._maxFrameHeight = maxFrameHeight;\n\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendReceiverVideoConstraintMessage(maxFrameHeight);\n        }\n    }\n\n    /**\n     * Sets the video type and availability for the local video source.\n     *\n     * @param {string} videoType 'camera' for camera, 'desktop' for screenshare and\n     * 'none' for when local video source is muted or removed from the peerconnection.\n     * @returns {void}\n     */\n    setVideoType(videoType) {\n        if (this._videoType !== videoType) {\n            this._videoType = videoType;\n\n            if (this._channel && this._channel.isOpen()) {\n                this._channel.sendVideoTypeMessage(videoType);\n            }\n        }\n    }\n\n    /**\n     * Sends the track's  video type to the JVB.\n     * @param {SourceName} sourceName - the track's source name.\n     * @param {BridgeVideoType} videoType - the track's video type.\n     */\n    sendSourceVideoType(sourceName, videoType) {\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendSourceVideoTypeMessage(sourceName, videoType);\n        }\n    }\n\n    /**\n     * Elects the participants with the given ids to be the selected\n     * participants in order to always receive video for this participant (even\n     * when last n is enabled). If there is no channel we store it and send it\n     * through the channel once it is created.\n     *\n     * @param {Array<string>} ids - The user ids.\n     * @throws NetworkError or InvalidStateError or Error if the operation\n     * fails.\n     * @returns {void}\n     */\n    selectEndpoints(ids) {\n        this._selectedEndpoints = ids;\n\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendSelectedEndpointsMessage(ids);\n        }\n    }\n\n    /**\n     *\n     * @param eventType\n     * @param listener\n     */\n    static addListener(eventType, listener) {\n        RTCUtils.addListener(eventType, listener);\n    }\n\n    /**\n     *\n     * @param eventType\n     * @param listener\n     */\n    static removeListener(eventType, listener) {\n        RTCUtils.removeListener(eventType, listener);\n    }\n\n    /**\n     *\n     * @param options\n     */\n    static init(options = {}) {\n        this.options = options;\n\n        return RTCUtils.init(this.options);\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Creates new <tt>TraceablePeerConnection</tt>\n     * @param {SignalingLayer} signaling The signaling layer that will provide information about the media or\n     * participants which is not carried over SDP.\n     * @param {object} pcConfig The {@code RTCConfiguration} to use for the WebRTC peer connection.\n     * @param {boolean} isP2P Indicates whether or not the new TPC will be used in a peer to peer type of session.\n     * @param {object} options The config options.\n     * @param {boolean} options.enableInsertableStreams - Set to true when the insertable streams constraints is to be\n     * enabled on the PeerConnection.\n     * @param {boolean} options.disableSimulcast If set to 'true' will disable the simulcast.\n     * @param {boolean} options.disableRtx If set to 'true' will disable the RTX.\n     * @param {boolean} options.startSilent If set to 'true' no audio will be sent or received.\n     * @return {TraceablePeerConnection}\n     */\n    createPeerConnection(signaling, pcConfig, isP2P, options) {\n        const pcConstraints = JSON.parse(JSON.stringify(RTCUtils.pcConstraints));\n\n        if (typeof options.abtestSuspendVideo !== 'undefined') {\n            RTCUtils.setSuspendVideo(pcConstraints, options.abtestSuspendVideo);\n\n            Statistics.analytics.addPermanentProperties(\n                { abtestSuspendVideo: options.abtestSuspendVideo });\n        }\n\n        if (options.enableInsertableStreams) {\n            logger.debug('E2EE - setting insertable streams constraints');\n            pcConfig.encodedInsertableStreams = true;\n        }\n\n        const supportsSdpSemantics = browser.isReactNative()\n            || (browser.isChromiumBased() && !options.usesUnifiedPlan);\n\n        if (supportsSdpSemantics) {\n            logger.debug('WebRTC application is running in plan-b mode');\n            pcConfig.sdpSemantics = 'plan-b';\n        }\n\n        if (options.forceTurnRelay) {\n            pcConfig.iceTransportPolicy = 'relay';\n        }\n\n        // Set the RTCBundlePolicy to max-bundle so that only one set of ice candidates is generated.\n        // The default policy generates separate ice candidates for audio and video connections.\n        // This change is necessary for Unified plan to work properly on Chrome and Safari.\n        pcConfig.bundlePolicy = 'max-bundle';\n\n        peerConnectionIdCounter = safeCounterIncrement(peerConnectionIdCounter);\n\n        const newConnection\n            = new TraceablePeerConnection(\n                this,\n                peerConnectionIdCounter,\n                signaling,\n                pcConfig, pcConstraints,\n                isP2P, options);\n\n        this.peerConnections.set(newConnection.id, newConnection);\n\n        return newConnection;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Removed given peer connection from this RTC module instance.\n     * @param {TraceablePeerConnection} traceablePeerConnection\n     * @return {boolean} <tt>true</tt> if the given peer connection was removed\n     * successfully or <tt>false</tt> if there was no peer connection mapped in\n     * this RTC instance.\n     */\n    _removePeerConnection(traceablePeerConnection) {\n        const id = traceablePeerConnection.id;\n\n        if (this.peerConnections.has(id)) {\n            // NOTE Remote tracks are not removed here.\n            this.peerConnections.delete(id);\n\n            return true;\n        }\n\n        return false;\n\n    }\n\n    /**\n     *\n     * @param track\n     */\n    addLocalTrack(track) {\n        if (!track) {\n            throw new Error('track must not be null nor undefined');\n        }\n\n        this.localTracks.push(track);\n\n        track.conference = this.conference;\n    }\n\n    /**\n     * Get forwarded sources list.\n     * @returns {Array<string>|null}\n     */\n    getForwardedSources() {\n        return this._forwardedSources;\n    }\n\n    /**\n     * Get local video track.\n     * @returns {JitsiLocalTrack|undefined}\n     */\n    getLocalVideoTrack() {\n        const localVideo = this.getLocalTracks(MediaType.VIDEO);\n\n\n        return localVideo.length ? localVideo[0] : undefined;\n    }\n\n    /**\n     * Returns all the local video tracks.\n     * @returns {Array<JitsiLocalTrack>}\n     */\n    getLocalVideoTracks() {\n        return this.getLocalTracks(MediaType.VIDEO);\n    }\n\n    /**\n     * Get local audio track.\n     * @returns {JitsiLocalTrack|undefined}\n     */\n    getLocalAudioTrack() {\n        const localAudio = this.getLocalTracks(MediaType.AUDIO);\n\n\n        return localAudio.length ? localAudio[0] : undefined;\n    }\n\n    /**\n     * Returns the endpoint id for the local user.\n     * @returns {string}\n     */\n    getLocalEndpointId() {\n        return this.conference.myUserId();\n    }\n\n    /**\n     * Returns the local tracks of the given media type, or all local tracks if\n     * no specific type is given.\n     * @param {MediaType} [mediaType] Optional media type filter.\n     * (audio or video).\n     */\n    getLocalTracks(mediaType) {\n        let tracks = this.localTracks.slice();\n\n        if (mediaType !== undefined) {\n            tracks = tracks.filter(\n                track => track.getType() === mediaType);\n        }\n\n        return tracks;\n    }\n\n    /**\n     * Obtains all remote tracks currently known to this RTC module instance.\n     * @param {MediaType} [mediaType] The remote tracks will be filtered\n     *      by their media type if this argument is specified.\n     * @return {Array<JitsiRemoteTrack>}\n     */\n    getRemoteTracks(mediaType) {\n        let remoteTracks = [];\n\n        for (const tpc of this.peerConnections.values()) {\n            const pcRemoteTracks = tpc.getRemoteTracks(undefined, mediaType);\n\n            if (pcRemoteTracks) {\n                remoteTracks = remoteTracks.concat(pcRemoteTracks);\n            }\n        }\n\n        return remoteTracks;\n    }\n\n    /**\n     * Set mute for all local audio streams attached to the conference.\n     * @param value The mute value.\n     * @returns {Promise}\n     */\n    setAudioMute(value) {\n        const mutePromises = [];\n\n        this.getLocalTracks(MediaType.AUDIO).forEach(audioTrack => {\n            // this is a Promise\n            mutePromises.push(value ? audioTrack.mute() : audioTrack.unmute());\n        });\n\n        // We return a Promise from all Promises so we can wait for their\n        // execution.\n        return Promise.all(mutePromises);\n    }\n\n    /**\n    * Set mute for all local video streams attached to the conference.\n    * @param value The mute value.\n    * @returns {Promise}\n    */\n    setVideoMute(value) {\n        const mutePromises = [];\n\n        this.getLocalTracks(MediaType.VIDEO).concat(this.getLocalTracks(MediaType.PRESENTER))\n            .forEach(videoTrack => {\n                // this is a Promise\n                mutePromises.push(value ? videoTrack.mute() : videoTrack.unmute());\n            });\n\n        // We return a Promise from all Promises so we can wait for their\n        // execution.\n        return Promise.all(mutePromises);\n    }\n\n    /**\n     *\n     * @param track\n     */\n    removeLocalTrack(track) {\n        const pos = this.localTracks.indexOf(track);\n\n        if (pos === -1) {\n            return;\n        }\n\n        this.localTracks.splice(pos, 1);\n    }\n\n    /**\n     *\n     * @param elSelector\n     * @param stream\n     */\n    static attachMediaStream(elSelector, stream) {\n        return RTCUtils.attachMediaStream(elSelector, stream);\n    }\n\n    /**\n     * Returns the id of the given stream.\n     * @param {MediaStream} stream\n     */\n    static getStreamID(stream) {\n        return RTCUtils.getStreamID(stream);\n    }\n\n    /**\n     * Returns the id of the given track.\n     * @param {MediaStreamTrack} track\n     */\n    static getTrackID(track) {\n        return RTCUtils.getTrackID(track);\n    }\n\n    /**\n     * Returns true if retrieving the list of input devices is supported\n     * and false if not.\n     */\n    static isDeviceListAvailable() {\n        return RTCUtils.isDeviceListAvailable();\n    }\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     * @param {string} [deviceType] Type of device to change. Default is\n     *      undefined or 'input', 'output' - for audio output device change.\n     * @returns {boolean} true if available, false otherwise.\n     */\n    static isDeviceChangeAvailable(deviceType) {\n        return RTCUtils.isDeviceChangeAvailable(deviceType);\n    }\n\n    /**\n     * Returns whether the current execution environment supports WebRTC (for\n     * use within this library).\n     *\n     * @returns {boolean} {@code true} if WebRTC is supported in the current\n     * execution environment (for use within this library); {@code false},\n     * otherwise.\n     */\n    static isWebRtcSupported() {\n        return browser.isSupported();\n    }\n\n    /**\n     * Returns currently used audio output device id, '' stands for default\n     * device\n     * @returns {string}\n     */\n    static getAudioOutputDevice() {\n        return RTCUtils.getAudioOutputDevice();\n    }\n\n    /**\n     * Returns list of available media devices if its obtained, otherwise an\n     * empty array is returned/\n     * @returns {array} list of available media devices.\n     */\n    static getCurrentlyAvailableMediaDevices() {\n        return RTCUtils.getCurrentlyAvailableMediaDevices();\n    }\n\n    /**\n     * Returns whether available devices have permissions granted\n     * @returns {Boolean}\n     */\n    static arePermissionsGrantedForAvailableDevices() {\n        return RTCUtils.arePermissionsGrantedForAvailableDevices();\n    }\n\n    /**\n     * Returns event data for device to be reported to stats.\n     * @returns {MediaDeviceInfo} device.\n     */\n    static getEventDataForActiveDevice(device) {\n        return RTCUtils.getEventDataForActiveDevice(device);\n    }\n\n    /**\n     * Sets current audio output device.\n     * @param {string} deviceId Id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices().\n     * @returns {Promise} resolves when audio output is changed, is rejected\n     *      otherwise\n     */\n    static setAudioOutputDevice(deviceId) {\n        return RTCUtils.setAudioOutputDevice(deviceId);\n    }\n\n    /**\n     * Returns <tt>true<tt/> if given WebRTC MediaStream is considered a valid\n     * \"user\" stream which means that it's not a \"receive only\" stream nor a\n     * \"mixed\" JVB stream.\n     *\n     * Clients that implement Unified Plan, such as Firefox use recvonly\n     * \"streams/channels/tracks\" for receiving remote stream/tracks, as opposed\n     * to Plan B where there are only 3 channels: audio, video and data.\n     *\n     * @param {MediaStream} stream The WebRTC MediaStream instance.\n     * @returns {boolean}\n     */\n    static isUserStream(stream) {\n        return RTC.isUserStreamById(RTCUtils.getStreamID(stream));\n    }\n\n    /**\n     * Returns <tt>true<tt/> if a WebRTC MediaStream identified by given stream\n     * ID is considered a valid \"user\" stream which means that it's not a\n     * \"receive only\" stream nor a \"mixed\" JVB stream.\n     *\n     * Clients that implement Unified Plan, such as Firefox use recvonly\n     * \"streams/channels/tracks\" for receiving remote stream/tracks, as opposed\n     * to Plan B where there are only 3 channels: audio, video and data.\n     *\n     * @param {string} streamId The id of WebRTC MediaStream.\n     * @returns {boolean}\n     */\n    static isUserStreamById(streamId) {\n        return streamId && streamId !== 'mixedmslabel'\n            && streamId !== 'default';\n    }\n\n    /**\n     * Allows to receive list of available cameras/microphones.\n     * @param {function} callback Would receive array of devices as an\n     *      argument.\n     */\n    static enumerateDevices(callback) {\n        RTCUtils.enumerateDevices(callback);\n    }\n\n    /**\n     * A method to handle stopping of the stream.\n     * One point to handle the differences in various implementations.\n     * @param {MediaStream} mediaStream MediaStream object to stop.\n     */\n    static stopMediaStream(mediaStream) {\n        RTCUtils.stopMediaStream(mediaStream);\n    }\n\n    /**\n     * Returns whether the desktop sharing is enabled or not.\n     * @returns {boolean}\n     */\n    static isDesktopSharingEnabled() {\n        return RTCUtils.isDesktopSharingEnabled();\n    }\n\n    /**\n     * Closes the currently opened bridge channel.\n     */\n    closeBridgeChannel() {\n        if (this._channel) {\n            this._channel.close();\n            this._channel = null;\n\n            this.removeListener(RTCEvents.LASTN_ENDPOINT_CHANGED, this._lastNChangeListener);\n        }\n    }\n\n    /* eslint-disable max-params */\n    /**\n     *\n     * @param {TraceablePeerConnection} tpc\n     * @param {number} ssrc\n     * @param {number} audioLevel\n     * @param {boolean} isLocal\n     */\n    setAudioLevel(tpc, ssrc, audioLevel, isLocal) {\n        const track = tpc.getTrackBySSRC(ssrc);\n\n        if (!track) {\n            return;\n        } else if (!track.isAudioTrack()) {\n            logger.warn(`Received audio level for non-audio track: ${ssrc}`);\n\n            return;\n        } else if (track.isLocal() !== isLocal) {\n            logger.error(\n                `${track} was expected to ${isLocal ? 'be' : 'not be'} local`);\n        }\n\n        track.setAudioLevel(audioLevel, tpc);\n    }\n\n    /**\n     * Sends message via the bridge channel.\n     * @param {string} to The id of the endpoint that should receive the\n     *      message. If \"\" the message will be sent to all participants.\n     * @param {object} payload The payload of the message.\n     * @throws NetworkError or InvalidStateError or Error if the operation\n     * fails or there is no data channel created.\n     */\n    sendChannelMessage(to, payload) {\n        if (this._channel) {\n            this._channel.sendMessage(to, payload);\n        } else {\n            throw new Error('Channel support is disabled!');\n        }\n    }\n\n    /**\n     * Sends the local stats via the bridge channel.\n     * @param {Object} payload The payload of the message.\n     * @throws NetworkError/InvalidStateError/Error if the operation fails or if there is no data channel created.\n     */\n    sendEndpointStatsMessage(payload) {\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendEndpointStatsMessage(payload);\n        }\n    }\n\n    /**\n     * Selects a new value for \"lastN\". The requested amount of videos are going\n     * to be delivered after the value is in effect. Set to -1 for unlimited or\n     * all available videos.\n     * @param {number} value the new value for lastN.\n     */\n    setLastN(value) {\n        if (this._lastN !== value) {\n            this._lastN = value;\n            if (this._channel && this._channel.isOpen()) {\n                this._channel.sendSetLastNMessage(value);\n            }\n            this.eventEmitter.emit(RTCEvents.LASTN_VALUE_CHANGED, value);\n        }\n    }\n\n    /**\n     * Indicates if the endpoint id is currently included in the last N.\n     * @param {string} id The endpoint id that we check for last N.\n     * @returns {boolean} true if the endpoint id is in the last N or if we\n     * don't have bridge channel support, otherwise we return false.\n     */\n    isInLastN(id) {\n        return !this._lastNEndpoints // lastNEndpoints not initialised yet.\n            || this._lastNEndpoints.indexOf(id) > -1;\n    }\n\n    /**\n     * Indicates if the source name is currently included in the forwarded sources.\n     *\n     * @param {string} sourceName The source name that we check for forwarded sources.\n     * @returns {boolean} true if the source name is in the forwarded sources or if we don't have bridge channel\n     * support, otherwise we return false.\n     */\n    isInForwardedSources(sourceName) {\n        return !this._forwardedSources // forwardedSources not initialised yet.\n            || this._forwardedSources.indexOf(sourceName) > -1;\n    }\n\n    /**\n     * Updates the target audio output device for all remote audio tracks.\n     *\n     * @param {string} deviceId - The device id of the audio ouput device to\n     * use for all remote tracks.\n     * @private\n     * @returns {void}\n     */\n    _updateAudioOutputForAudioTracks(deviceId) {\n        const remoteAudioTracks = this.getRemoteTracks(MediaType.AUDIO);\n\n        for (const track of remoteAudioTracks) {\n            track.setAudioOutput(deviceId);\n        }\n    }\n}\n","export enum ConnectionQualityEvents {\n    /**\n     * Indicates that the local connection statistics were updated.\n     */\n    LOCAL_STATS_UPDATED = 'cq.local_stats_updated',\n\n    /**\n     * Indicates that the connection statistics for a particular remote participant\n     * were updated.\n     */\n    REMOTE_STATS_UPDATED = 'cq.remote_stats_updated'\n};\n\n// exported for backward compatibility\nexport const LOCAL_STATS_UPDATED = ConnectionQualityEvents.LOCAL_STATS_UPDATED;\nexport const REMOTE_STATS_UPDATED = ConnectionQualityEvents.REMOTE_STATS_UPDATED;\n\n","import { getLogger } from '@jitsi/logger';\n\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\nimport CodecMimeType from '../../service/RTC/CodecMimeType';\nimport * as RTCEvents from '../../service/RTC/RTCEvents';\nimport * as ConnectionQualityEvents from '../../service/connectivity/ConnectionQualityEvents';\nimport browser from '../browser';\n\nconst Resolutions = require('../../service/RTC/Resolutions');\nconst { VideoType } = require('../../service/RTC/VideoType');\nconst { XMPPEvents } = require('../../service/xmpp/XMPPEvents');\n\nconst logger = getLogger(__filename);\n\n/**\n * The value to use for the \"type\" field for messages sent by ConnectionQuality\n * over the data channel.\n */\nconst STATS_MESSAGE_TYPE = 'stats';\n\n/**\n * The value to use for the \"type\" field for messages sent\n * over the data channel that contain facial expression.\n */\nconst FACIAL_EXPRESSION_MESSAGE_TYPE = 'facial_expression';\n\nconst kSimulcastFormats = [\n    { width: 1920,\n        height: 1080,\n        layers: 3,\n        target: 'high',\n        targetRN: 4000000 },\n    { width: 1280,\n        height: 720,\n        layers: 3,\n        target: 'high',\n        targetRN: 2500000 },\n    { width: 960,\n        height: 540,\n        layers: 3,\n        target: 'standard',\n        targetRN: 900000 },\n    { width: 640,\n        height: 360,\n        layers: 2,\n        target: 'standard',\n        targetRN: 500000 },\n    { width: 480,\n        height: 270,\n        layers: 2,\n        target: 'low',\n        targetRN: 350000 },\n    { width: 320,\n        height: 180,\n        layers: 1,\n        target: 'low',\n        targetRN: 150000 }\n];\n\n/**\n * The maximum bitrate to use as a measurement against the participant's current\n * bitrate. This cap helps in the cases where the participant's bitrate is high\n * but not enough to fulfill high targets, such as with 1080p.\n */\nconst MAX_TARGET_BITRATE = 2500;\n\n/**\n * The initial bitrate for video in kbps.\n */\nlet startBitrate = 800;\n\n/**\n * Gets the expected bitrate (in kbps) in perfect network conditions.\n * @param simulcast {boolean} whether simulcast is enabled or not.\n * @param resolution {Resolution} the resolution.\n * @param millisSinceStart {number} the number of milliseconds since sending video started.\n * @param videoQualitySettings {Object} the bitrate and codec settings for the local video source.\n */\nfunction getTarget(simulcast, resolution, millisSinceStart, videoQualitySettings) {\n    let target = 0;\n    let height = Math.min(resolution.height, resolution.width);\n\n    // Find the first format with height no bigger than ours.\n    let simulcastFormat = kSimulcastFormats.find(f => f.height <= height);\n\n    if (simulcastFormat && simulcast && videoQualitySettings.codec === CodecMimeType.VP8) {\n        // Sum the target fields from all simulcast layers for the given\n        // resolution (e.g. 720p + 360p + 180p) for VP8 simulcast.\n        for (height = simulcastFormat.height; height >= 180; height /= 2) {\n            const targetHeight = height;\n\n            simulcastFormat = kSimulcastFormats.find(f => f.height === targetHeight);\n            if (simulcastFormat) {\n                target += browser.isReactNative()\n                    ? simulcastFormat.targetRN\n                    : videoQualitySettings[simulcastFormat.target];\n            } else {\n                break;\n            }\n        }\n    } else if (simulcastFormat) {\n        // For VP9 SVC, H.264 (simulcast automatically disabled) and p2p, target bitrate will be\n        // same as that of the individual stream bitrate.\n        target = browser.isReactNative()\n            ? simulcastFormat.targetRN\n            : videoQualitySettings[simulcastFormat.target];\n    }\n\n    // Allow for an additional 1 second for ramp up -- delay any initial drop\n    // of connection quality by 1 second. Convert target from bps to kbps.\n    return Math.min(target / 1000, rampUp(Math.max(0, millisSinceStart - 1000)));\n}\n\n/**\n * Gets the bitrate to which GCC would have ramped up in perfect network\n * conditions after millisSinceStart milliseconds.\n * @param millisSinceStart {number} the number of milliseconds since sending\n * video was enabled.\n */\nfunction rampUp(millisSinceStart) {\n    if (millisSinceStart > 60000) {\n        return Number.MAX_SAFE_INTEGER;\n    }\n\n    // According to GCC the send side bandwidth estimation grows with at most\n    // 8% per second.\n    // https://tools.ietf.org/html/draft-ietf-rmcat-gcc-02#section-5.5\n    return startBitrate * Math.pow(1.08, millisSinceStart / 1000);\n}\n\n/**\n * A class which monitors the local statistics coming from the RTC modules, and\n * calculates a \"connection quality\" value, in percent, for the media\n * connection. A value of 100% indicates a very good network connection, and a\n * value of 0% indicates a poor connection.\n */\nexport default class ConnectionQuality {\n    /**\n     *\n     * @param conference\n     * @param eventEmitter\n     * @param options\n     */\n    constructor(conference, eventEmitter, options) {\n        this.eventEmitter = eventEmitter;\n\n        /**\n         * The owning JitsiConference.\n         */\n        this._conference = conference;\n\n        /**\n         * Holds statistics about the local connection quality.\n         */\n        this._localStats = {\n            connectionQuality: 100,\n            jvbRTT: undefined\n        };\n\n        /**\n         * The time this._localStats.connectionQuality was last updated.\n         */\n        this._lastConnectionQualityUpdate = -1;\n\n        /**\n         * Conference options.\n         */\n        this._options = options;\n\n        /**\n         * Maps a participant ID to an object holding connection quality\n         * statistics received from this participant.\n         */\n        this._remoteStats = {};\n\n        /**\n         * The time that the ICE state last changed to CONNECTED. We use this\n         * to calculate how much time we as a sender have had to ramp-up.\n         */\n        this._timeIceConnected = -1;\n\n        /**\n         * The time that local video was unmuted. We use this to calculate how\n         * much time we as a sender have had to ramp-up.\n         */\n        this._timeVideoUnmuted = -1;\n\n        // We assume a global startBitrate value for the sake of simplicity.\n        if (this._options.config?.startBitrate > 0) {\n            startBitrate = this._options.config.startBitrate;\n        }\n\n        // TODO: consider ignoring these events and letting the user of\n        // lib-jitsi-meet handle these separately.\n        conference.on(\n            ConferenceEvents.CONNECTION_INTERRUPTED,\n            () => {\n                this._updateLocalConnectionQuality(0);\n                this.eventEmitter.emit(\n                    ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n                    this._localStats);\n                this._broadcastLocalStats();\n            });\n\n        conference.room.addListener(\n            XMPPEvents.ICE_CONNECTION_STATE_CHANGED,\n            (jingleSession, newState) => {\n                if (!jingleSession.isP2P && newState === 'connected') {\n                    this._timeIceConnected = window.performance.now();\n                }\n            });\n\n        // Listen to DataChannel message from other participants in the\n        // conference, and update the _remoteStats field accordingly.\n        // TODO - Delete this when all the mobile endpoints switch to using the new Colibri\n        // message format for sending the endpoint stats.\n        conference.on(\n            ConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n            (participant, payload) => {\n                if (payload.type === STATS_MESSAGE_TYPE) {\n                    this._updateRemoteStats(\n                        participant.getId(), payload.values);\n                }\n            });\n\n        conference.on(\n            ConferenceEvents.ENDPOINT_STATS_RECEIVED,\n            (participant, payload) => {\n                this._updateRemoteStats(participant.getId(), payload);\n            });\n\n        conference.on(\n            ConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n            (participant, payload) => {\n                if (payload.type === FACIAL_EXPRESSION_MESSAGE_TYPE) {\n                    this.eventEmitter.emit(\n                        ConferenceEvents.FACIAL_EXPRESSION_ADDED,\n                        participant.getId(),\n                        payload);\n                }\n            });\n\n        // Listen to local statistics events originating from the RTC module and update the _localStats field.\n        conference.statistics.addConnectionStatsListener(this._updateLocalStats.bind(this));\n\n        // Save the last time we were unmuted.\n        conference.on(\n            ConferenceEvents.TRACK_MUTE_CHANGED,\n            track => {\n                if (track.isVideoTrack()) {\n                    if (track.isMuted()) {\n                        this._timeVideoUnmuted = -1;\n                    } else {\n                        this._maybeUpdateUnmuteTime();\n                    }\n                }\n            });\n        conference.on(\n            ConferenceEvents.TRACK_ADDED,\n            track => {\n                if (track.isVideoTrack() && !track.isMuted()) {\n                    this._maybeUpdateUnmuteTime();\n                }\n            });\n        conference.rtc.on(\n            RTCEvents.LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED,\n            track => {\n                this._localStats.maxEnabledResolution = track.maxEnabledResolution;\n            });\n\n        conference.on(\n            ConferenceEvents.SERVER_REGION_CHANGED,\n            serverRegion => {\n                this._localStats.serverRegion = serverRegion;\n            });\n\n        conference.on(\n            ConferenceEvents.PROPERTIES_CHANGED,\n            properties => {\n                this._localStats.bridgeCount\n                    = Number((properties || {})['bridge-count']);\n            }\n        );\n    }\n\n    /**\n     * Sets _timeVideoUnmuted if it was previously unset. If it was already set,\n     * doesn't change it.\n     */\n    _maybeUpdateUnmuteTime() {\n        if (this._timeVideoUnmuted < 0) {\n            this._timeVideoUnmuted = window.performance.now();\n        }\n    }\n\n    /**\n     * Calculates a new \"connection quality\" value.\n     * @param videoType {VideoType} the type of the video source (camera or a screen capture).\n     * @param isMuted {boolean} whether the local video is muted.\n     * @param resolutionName {Resolution} the input resolution used by the camera.\n     * @returns {*} the newly calculated connection quality.\n     */\n    _calculateConnectionQuality(videoType, isMuted, resolutionName) {\n\n        // resolutionName is an index into Resolutions (where \"720\" is\n        // \"1280x720\" and \"960\" is \"960x720\" ...).\n        const resolution = Resolutions[resolutionName];\n\n        let quality = 100;\n        let packetLoss;\n\n        // TODO: take into account packet loss for received streams\n\n        if (this._localStats.packetLoss) {\n            packetLoss = this._localStats.packetLoss.upload;\n\n            // Ugly Hack Alert (UHA):\n            // The packet loss for the upload direction is calculated based on\n            // incoming RTCP Receiver Reports. Since we don't have RTCP\n            // termination for audio, these reports come from the actual\n            // receivers in the conference and therefore the reported packet\n            // loss includes loss from the bridge to the receiver.\n            // When we are sending video this effect is small, because the\n            // number of video packets is much larger than the number of audio\n            // packets (and our calculation is based on the total number of\n            // received and lost packets).\n            // When video is muted, however, the effect might be significant,\n            // but we don't know what it is. We do know that it is positive, so\n            // as a temporary solution, until RTCP termination is implemented\n            // for the audio streams, we relax the packet loss checks here.\n            if (isMuted) {\n                packetLoss *= 0.5;\n            }\n        }\n\n        if (isMuted || !resolution || videoType === VideoType.DESKTOP\n            || this._timeIceConnected < 0\n            || this._timeVideoUnmuted < 0) {\n\n            // Calculate a value based on packet loss only.\n            if (packetLoss === undefined) {\n                logger.error('Cannot calculate connection quality, unknown '\n                    + 'packet loss.');\n                quality = 100;\n            } else if (packetLoss <= 2) {\n                quality = 100; // Full 5 bars.\n            } else if (packetLoss <= 4) {\n                quality = 70; // 4 bars\n            } else if (packetLoss <= 6) {\n                quality = 50; // 3 bars\n            } else if (packetLoss <= 8) {\n                quality = 30; // 2 bars\n            } else if (packetLoss <= 12) {\n                quality = 10; // 1 bars\n            } else {\n                quality = 0; // Still 1 bar, but slower climb-up.\n            }\n        } else {\n            // Calculate a value based on the send video bitrate on the active TPC.\n            const activeTPC = this._conference.getActivePeerConnection();\n\n            if (activeTPC) {\n                const isSimulcastOn = activeTPC.isSimulcastOn();\n                const videoQualitySettings = activeTPC.getTargetVideoBitrates();\n\n                // Add the codec info as well.\n                videoQualitySettings.codec = activeTPC.getConfiguredVideoCodec();\n\n                // Time since sending of video was enabled.\n                const millisSinceStart = window.performance.now()\n                    - Math.max(this._timeVideoUnmuted, this._timeIceConnected);\n                const statsInterval = this._options.config?.pcStatsInterval ?? 10000;\n\n                // Expected sending bitrate in perfect conditions.\n                let target = getTarget(isSimulcastOn, resolution, millisSinceStart, videoQualitySettings);\n\n                target = Math.min(target, MAX_TARGET_BITRATE);\n\n                // Calculate the quality only after the stats are available (after video was enabled).\n                if (millisSinceStart > statsInterval) {\n                    quality = 100 * this._localStats.bitrate.upload / target;\n                }\n            }\n\n            // Whatever the bitrate, drop early if there is significant loss\n            if (packetLoss && packetLoss >= 10) {\n                quality = Math.min(quality, 30);\n            }\n        }\n\n        // Make sure that the quality doesn't climb quickly\n        if (this._lastConnectionQualityUpdate > 0) {\n            const maxIncreasePerSecond = 2;\n            const prevConnectionQuality = this._localStats.connectionQuality;\n            const diffSeconds = (window.performance.now() - this._lastConnectionQualityUpdate) / 1000;\n\n            quality = Math.min(quality, prevConnectionQuality + (diffSeconds * maxIncreasePerSecond));\n        }\n\n        return Math.min(100, quality);\n    }\n\n    /**\n     * Updates the localConnectionQuality value\n     * @param values {number} the new value. Should be in [0, 100].\n     */\n    _updateLocalConnectionQuality(value) {\n        this._localStats.connectionQuality = value;\n        this._lastConnectionQualityUpdate = window.performance.now();\n    }\n\n    /**\n     * Broadcasts the local statistics to all other participants in the\n     * conference.\n     */\n    _broadcastLocalStats() {\n        // Send only the data that remote participants care about.\n        const data = {\n            bitrate: this._localStats.bitrate,\n            packetLoss: this._localStats.packetLoss,\n            connectionQuality: this._localStats.connectionQuality,\n            jvbRTT: this._localStats.jvbRTT,\n            serverRegion: this._localStats.serverRegion,\n            maxEnabledResolution: this._localStats.maxEnabledResolution,\n            avgAudioLevels: this._localStats.localAvgAudioLevels\n        };\n\n        try {\n            this._conference.sendEndpointStatsMessage(data);\n        } catch (err) {\n            // Ignore the error as we might hit it in the beginning of the call before the channel is ready.\n            // The statistics will be sent again after few seconds and error is logged elseware as well.\n        }\n    }\n\n    /**\n     * Updates the local statistics\n     * @param {TraceablePeerConnection} tpc the peerconnection which emitted\n     * the stats\n     * @param data new statistics\n     */\n    _updateLocalStats(tpc, data) {\n        // Update jvbRTT\n        if (!tpc.isP2P) {\n            const jvbRTT\n                = data.transport\n                    && data.transport.length && data.transport[0].rtt;\n\n            this._localStats.jvbRTT = jvbRTT ? jvbRTT : undefined;\n        }\n\n        // Do not continue with processing of other stats if they do not\n        // originate from the active peerconnection\n        if (tpc !== this._conference.getActivePeerConnection()) {\n            return;\n        }\n\n        let key;\n        const updateLocalConnectionQuality\n            = !this._conference.isConnectionInterrupted();\n        const localVideoTrack\n            = this._conference.getLocalVideoTrack();\n        const videoType\n            = localVideoTrack ? localVideoTrack.videoType : undefined;\n        const isMuted = localVideoTrack ? localVideoTrack.isMuted() : true;\n        const resolution = localVideoTrack\n            ? Math.min(localVideoTrack.resolution, localVideoTrack.maxEnabledResolution) : null;\n\n        if (!isMuted) {\n            this._maybeUpdateUnmuteTime();\n        }\n\n        // Copy the fields already in 'data'.\n        for (key in data) {\n            if (data.hasOwnProperty(key)) {\n                this._localStats[key] = data[key];\n            }\n        }\n\n        // And re-calculate the connectionQuality field.\n        if (updateLocalConnectionQuality) {\n            this._updateLocalConnectionQuality(\n                this._calculateConnectionQuality(\n                    videoType,\n                    isMuted,\n                    resolution));\n        }\n\n        this.eventEmitter.emit(\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n            this._localStats);\n        this._broadcastLocalStats();\n    }\n\n    /**\n     * Updates remote statistics\n     * @param id the id of the remote participant\n     * @param data the statistics received\n     */\n    _updateRemoteStats(id, data) {\n        // Use only the fields we need\n        this._remoteStats[id] = {\n            bitrate: data.bitrate,\n            packetLoss: data.packetLoss,\n            connectionQuality: data.connectionQuality,\n            jvbRTT: data.jvbRTT,\n            serverRegion: data.serverRegion,\n            maxEnabledResolution: data.maxEnabledResolution,\n            avgAudioLevels: data.avgAudioLevels\n        };\n\n        this.eventEmitter.emit(\n            ConnectionQualityEvents.REMOTE_STATS_UPDATED,\n            id,\n            this._remoteStats[id]);\n    }\n\n    /**\n     * Returns the local statistics.\n     * Exported only for use in jitsi-meet-torture.\n     */\n    getStats() {\n        return this._localStats;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceErrors from '../../JitsiConferenceErrors';\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * This class deals with shenanigans around JVB media session's ICE failed status handling.\n *\n * If ICE restarts are NOT explicitly enabled by the {@code enableIceRestart} config option, then the conference will\n * delay emitting the {@JitsiConferenceErrors.ICE_FAILED} event by 15 seconds. If the network info module reports\n * the internet offline status then the time will start counting after the internet comes back online.\n *\n * If ICE restart are enabled, then a delayed ICE failed notification to Jicofo will be sent, only if the ICE connection\n * does not recover soon after or before the XMPP connection is restored (if it was ever broken). If ICE fails while\n * the XMPP connection is not broken then the notifications will be sent after 2 seconds delay.\n */\nexport default class IceFailedHandling {\n    /**\n     * Creates new {@code DelayedIceFailed} task.\n     * @param {JitsiConference} conference\n     */\n    constructor(conference) {\n        this._conference = conference;\n    }\n\n    /**\n     * After making sure there's no way for the ICE connection to recover this method either sends ICE failed\n     * notification to Jicofo or emits the ice failed conference event.\n     * @private\n     * @returns {void}\n     */\n    _actOnIceFailed() {\n        if (!this._conference.room) {\n            return;\n        }\n\n        const { enableForcedReload, enableIceRestart } = this._conference.options.config;\n        const explicitlyDisabled = typeof enableIceRestart !== 'undefined' && !enableIceRestart;\n        const supportsRestartByTerminate = this._conference.room.supportsRestartByTerminate();\n        const useTerminateForRestart = supportsRestartByTerminate && !enableIceRestart;\n\n        logger.info('ICE failed,'\n            + ` enableForcedReload: ${enableForcedReload},`\n            + ` enableIceRestart: ${enableIceRestart},`\n            + ` supports restart by terminate: ${supportsRestartByTerminate}`);\n\n        if (explicitlyDisabled || (!enableIceRestart && !supportsRestartByTerminate) || enableForcedReload) {\n            logger.info('ICE failed, but ICE restarts are disabled');\n            const reason = enableForcedReload\n                ? JitsiConferenceErrors.CONFERENCE_RESTARTED\n                : JitsiConferenceErrors.ICE_FAILED;\n\n            this._conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED, reason);\n\n            return;\n        }\n\n        const jvbConnection = this._conference.jvbJingleSession;\n        const jvbConnIceState = jvbConnection && jvbConnection.getIceConnectionState();\n\n        if (!jvbConnection) {\n            logger.warn('Not sending ICE failed - no JVB connection');\n        } else if (jvbConnIceState === 'connected') {\n            logger.info('ICE connection restored - not sending ICE failed');\n        } else {\n            logger.info('Sending ICE failed - the connection did not recover, '\n                + `ICE state: ${jvbConnIceState}, `\n                + `use 'session-terminate': ${useTerminateForRestart}`);\n            if (useTerminateForRestart) {\n                this._conference.jvbJingleSession.terminate(\n                    () => {\n                        logger.info('session-terminate for ice restart - done');\n                    },\n                    error => {\n                        logger.error(`session-terminate for ice restart - error: ${error.message}`);\n                    }, {\n                        reason: 'connectivity-error',\n                        reasonDescription: 'ICE FAILED',\n                        requestRestart: true,\n                        sendSessionTerminate: true\n                    });\n            } else {\n                this._conference.jvbJingleSession.sendIceFailedNotification();\n            }\n        }\n    }\n\n    /**\n     * Starts the task.\n     */\n    start() {\n        //  Using xmpp.ping allows to handle both XMPP being disconnected and internet offline cases. The ping function\n        // uses sendIQ2 method which is resilient to XMPP connection disconnected state and will patiently wait until it\n        // gets reconnected.\n        //  This also handles the case about waiting for the internet to come back online, because ping\n        // will only succeed when the internet is online and then there's a chance for the ICE to recover from FAILED to\n        // CONNECTED which is the extra 2 second timeout after ping.\n        //  The 65 second timeout is given on purpose as there's no chance for XMPP to recover after 65 seconds of no\n        // communication with the server. Such resume attempt will result in unrecoverable conference failed event due\n        // to 'item-not-found' error returned by the server.\n        this._conference.xmpp.ping(65000).then(\n            () => {\n                if (!this._canceled) {\n                    this._iceFailedTimeout = window.setTimeout(() => {\n                        this._iceFailedTimeout = undefined;\n                        this._actOnIceFailed();\n                    }, 2000);\n                }\n            },\n            error => {\n                logger.error('PING error/timeout - not sending ICE failed', error);\n            });\n    }\n\n    /**\n     * Cancels the task.\n     */\n    cancel() {\n        this._canceled = true;\n        window.clearTimeout(this._iceFailedTimeout);\n    }\n}\n","export enum DetectionEvents {\n    /**\n     * Event triggered by a audio detector indicating that its active state has changed from active to inactive or vice\n     * versa.\n     * @event\n     * @type {boolean} - true when service has changed to active false otherwise.\n     */\n    DETECTOR_STATE_CHANGE = 'detector_state_change',\n\n    /** Event triggered by {@link NoAudioSignalDetector} when the local audio device associated with a JitsiConference\n     * starts receiving audio levels with the value of 0 meaning no audio is being captured on that device, or when\n     * it starts receiving audio levels !== 0 after being in a state of no audio.\n     * @event\n     * @type {boolean} - true when the current conference audio track has audio input false otherwise.\n     */\n    AUDIO_INPUT_STATE_CHANGE = 'audio_input_state_changed',\n\n    /** Event triggered by NoAudioSignalDetector when the local audio device associated with a JitsiConference goes silent\n     * for a period of time, meaning that the device is either broken or hardware/software muted.\n     * @event\n     * @type {void}\n     */\n    NO_AUDIO_INPUT = 'no_audio_input_detected',\n\n    /**\n     *  Event generated by {@link VADNoiseDetection} when the tracked device is considered noisy.\n     *  @event\n     *  @type {Object}\n     */\n    VAD_NOISY_DEVICE = 'detection.vad_noise_device',\n\n    /**\n     * Event generated by VADReportingService when if finishes creating a VAD report for the monitored devices.\n     * The generated objects are of type Array<Object>, one score for each monitored device.\n     * @event VAD_REPORT_PUBLISHED\n     * @type Array<Object> with the following structure:\n     * @property {Date} timestamp - Timestamp at which the compute took place.\n     * @property {number} avgVAD - Average VAD score over monitored period of time.\n     * @property {string} deviceId - Associate local audio device ID.\n     */\n    VAD_REPORT_PUBLISHED = 'vad-report-published',\n\n    /**\n     * Event generated by {@link TrackVADEmitter} when PCM sample VAD score is available.\n     *\n     * @event\n     * @type {Object}\n     * @property {Date}   timestamp - Exact time at which processed PCM sample was generated.\n     * @property {number} score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n     * @property {Float32Array} pcmData - Raw PCM data with which the VAD score was calculated.\n     * @property {string} deviceId - Device id of the associated track.\n     */\n    VAD_SCORE_PUBLISHED = 'detection.vad_score_published',\n\n    /**\n     *  Event generated by {@link VADTalkMutedDetection} when a user is talking while the mic is muted.\n     *\n     *  @event\n     *  @type {Object}\n     */\n    VAD_TALK_WHILE_MUTED = 'detection.vad_talk_while_muted'\n};\n\n// exported for backward compatibility\nexport const DETECTOR_STATE_CHANGE = DetectionEvents.DETECTOR_STATE_CHANGE;\nexport const AUDIO_INPUT_STATE_CHANGE = DetectionEvents.AUDIO_INPUT_STATE_CHANGE;\nexport const NO_AUDIO_INPUT = DetectionEvents.NO_AUDIO_INPUT;\nexport const VAD_NOISY_DEVICE = DetectionEvents.VAD_NOISY_DEVICE;\nexport const VAD_REPORT_PUBLISHED = DetectionEvents.VAD_REPORT_PUBLISHED;\nexport const VAD_SCORE_PUBLISHED = DetectionEvents.VAD_SCORE_PUBLISHED;\nexport const VAD_TALK_WHILE_MUTED = DetectionEvents.VAD_TALK_WHILE_MUTED;\n","import EventEmitter from 'events';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport browser from '../browser';\n\nimport * as DetectionEvents from './DetectionEvents';\n\n// We wait a certain time interval for constant silence input from the current device to account for\n// potential abnormalities and for a better use experience i.e. don't generate event the instant\n// an audio track is added to the tcr.\n// Potential improvement - add this as a configurable parameter.\nconst SILENCE_PERIOD_MS = 4000;\n\n/**\n * Detect if there is no audio input on the current TraceAblePeerConnection selected track. The no audio\n * state must be constant for a configured amount of time in order for the event to be triggered.\n * @fires DetectionEvents.AUDIO_INPUT_STATE_CHANGE\n * @fires DetectionEvents.NO_AUDIO_INPUT\n */\nexport default class NoAudioSignalDetection extends EventEmitter {\n    /**\n     * Creates new NoAudioSignalDetection.\n     *\n     * @param conference the JitsiConference instance that created us.\n     * @constructor\n     */\n    constructor(conference) {\n        super();\n\n        this._conference = conference;\n        this._timeoutTrigger = null;\n        this._hasAudioInput = null;\n\n        if (!browser.supportsReceiverStats()) {\n            conference.statistics.addAudioLevelListener(this._audioLevel.bind(this));\n        }\n        conference.on(JitsiConferenceEvents.TRACK_ADDED, this._trackAdded.bind(this));\n    }\n\n    /**\n     * Clear the timeout state.\n     */\n    _clearTriggerTimeout() {\n        clearTimeout(this._timeoutTrigger);\n        this._timeoutTrigger = null;\n    }\n\n\n    /**\n     * Generated event triggered by a change in the current conference audio input state.\n     *\n     * @param {*} audioLevel - The audio level of the ssrc.\n     * @fires DetectionEvents.AUDIO_INPUT_STATE_CHANGE\n     */\n    _handleAudioInputStateChange(audioLevel) {\n        // Current audio input state of the active local track in the conference, true for audio input false for no\n        // audio input.\n        const status = audioLevel !== 0;\n\n        // If this is the first audio event picked up or the current status is different from the previous trigger\n        // the event.\n        if (this._hasAudioInput === null || this._hasAudioInput !== status) {\n            this._hasAudioInput = status;\n            this.emit(DetectionEvents.AUDIO_INPUT_STATE_CHANGE, this._hasAudioInput);\n        }\n    }\n\n    /**\n     * Generate event triggered by a prolonged period of no audio input.\n     *\n     * @param {number} audioLevel - The audio level of the ssrc.\n     * @fires DetectionEvents.NO_AUDIO_INPUT\n     */\n    _handleNoAudioInputDetection(audioLevel) {\n        if (this._eventFired) {\n            return;\n        }\n\n        if (audioLevel === 0 && !this._timeoutTrigger) {\n            this._timeoutTrigger = setTimeout(() => {\n                this._eventFired = true;\n\n                this.emit(DetectionEvents.NO_AUDIO_INPUT);\n            }, SILENCE_PERIOD_MS);\n        } else if (audioLevel !== 0 && this._timeoutTrigger) {\n            this._clearTriggerTimeout();\n        }\n    }\n\n    /**\n     * Receives audio level events for all send and receive streams on the current TraceablePeerConnection.\n     *\n     * @param {TraceablePeerConnection} tpc - TraceablePeerConnection of the owning conference.\n     * @param {number} ssrc - The synchronization source identifier (SSRC) of the endpoint/participant/stream\n     * being reported.\n     * @param {number} audioLevel - The audio level of the ssrc.\n     * @param {boolean} isLocal - true for local/send streams or false for remote/receive streams.\n     */\n    _audioLevel(tpc, ssrc, audioLevel, isLocal) {\n        // We are interested in the local audio streams\n        if (!isLocal || !this._audioTrack) {\n            return;\n        }\n\n        // Get currently active local tracks from the TraceablePeerConnection\n        const localSSRCs = tpc.localSSRCs.get(this._audioTrack.rtcId);\n\n        // Only target the current active track in the tpc. For some reason audio levels for previous\n        // devices are also picked up from the PeerConnection so we filter them out.\n        if (!localSSRCs || !localSSRCs.ssrcs.includes(ssrc)) {\n            return;\n        }\n\n        // First handle audio input state change. In case the state changed to no input the no audio input event\n        // can try to fire again.\n        this._handleAudioInputStateChange(audioLevel);\n        this._handleNoAudioInputDetection(audioLevel);\n    }\n\n    /**\n     * Notifies NoAudioSignalDetection that a JitsiTrack was added to the associated JitsiConference.\n     * Only take into account local audio tracks.\n     *\n     * @param {JitsiTrack} track - The added JitsiTrack.\n     */\n    _trackAdded(track) {\n        if (track.isLocalAudioTrack()) {\n            // Reset state for the new track.\n            this._audioTrack = track;\n            this._eventFired = false;\n            this._clearTriggerTimeout();\n\n            // Listen for the audio levels on the newly added audio track\n            if (browser.supportsReceiverStats()) {\n                track.on(\n                    JitsiTrackEvents.NO_AUDIO_INPUT,\n                    audioLevel => {\n                        this._handleNoAudioInputDetection(audioLevel);\n                    }\n                );\n                track.on(\n                    JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n                    audioLevel => {\n                        this._handleNoAudioInputDetection(audioLevel);\n                        this._handleAudioInputStateChange(audioLevel);\n                    }\n                );\n            }\n        }\n    }\n}\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport RTCEvents from '../../service/RTC/RTCEvents';\n\n/**\n * The value which we use to say, every sound over this threshold\n * is talking on the mic.\n * @type {number}\n */\nconst SPEECH_DETECT_THRESHOLD = 0.6;\n\n/**\n * The <tt>P2PDominantSpeakerDetection</tt> is activated only when p2p is\n * currently used.\n * Listens for changes in the audio level changes of the local p2p audio track\n * or remote p2p one and fires dominant speaker events to be able to use\n * features depending on those events (speaker stats), to make them work without\n * the video bridge.\n */\nexport default class P2PDominantSpeakerDetection {\n    /**\n     * Creates P2PDominantSpeakerDetection\n     * @param conference the JitsiConference instance that created us.\n     * @constructor\n     */\n    constructor(conference) {\n        this.conference = conference;\n\n        conference.addEventListener(\n            JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED,\n            this._audioLevel.bind(this));\n\n        this.myUserID = this.conference.myUserId();\n    }\n\n    /**\n     * Receives audio level events for all streams in the conference.\n     *\n     * @param {String} id - The participant id\n     * @param {number} audioLevel - The audio level.\n     */\n    _audioLevel(id, audioLevel) {\n\n        // we do not process if p2p is not active\n        // or audio level is under certain threshold\n        // or if the audio level is for local audio track which is muted\n        if (!this.conference.isP2PActive()\n            || audioLevel <= SPEECH_DETECT_THRESHOLD\n            || (id === this.myUserID\n                    && this.conference.getLocalAudioTrack().isMuted())) {\n            return;\n        }\n\n        this.conference.rtc.eventEmitter.emit(\n            RTCEvents.DOMINANT_SPEAKER_CHANGED,\n            id);\n    }\n}\n","/**\n * Adapter that creates AudioContext objects depending on the browser.\n *\n * @returns {AudioContext} - Return a new AudioContext or undefined if the browser does not support it.\n */\nexport function createAudioContext(options) {\n    const AudioContextImpl = window.AudioContext || window.webkitAudioContext;\n\n    if (!AudioContextImpl) {\n        return undefined;\n    }\n\n    return new AudioContextImpl(options);\n}\n","import EventEmitter from 'events';\n\nimport RTC from '../RTC/RTC';\nimport { createAudioContext } from '../webaudio/WebAudioUtils';\n\nimport { VAD_SCORE_PUBLISHED } from './DetectionEvents';\n\n/**\n * Connects an audio JitsiLocalTrack to a vadProcessor using WebAudio ScriptProcessorNode.\n * Once an object is created audio from the local track flows through the ScriptProcessorNode as raw PCM.\n * The PCM is processed by the injected vad module and a voice activity detection score is obtained, the\n * score is published to consumers via an EventEmitter.\n * After work is done with this service the destroy method needs to be called for a proper cleanup.\n *\n * @fires VAD_SCORE_PUBLISHED\n */\nexport default class TrackVADEmitter extends EventEmitter {\n    /**\n     * Constructor.\n     *\n     * @param {number} procNodeSampleRate - Sample rate of the ScriptProcessorNode. Possible values  256, 512, 1024,\n     *  2048, 4096, 8192, 16384. Passing other values will default to closes neighbor.\n     * @param {Object} vadProcessor - VAD processor that allows us to calculate VAD score for PCM samples.\n     * @param {JitsiLocalTrack} jitsiLocalTrack - JitsiLocalTrack corresponding to micDeviceId.\n     */\n    constructor(procNodeSampleRate, vadProcessor, jitsiLocalTrack) {\n        super();\n\n        /**\n         * Sample rate of the ScriptProcessorNode.\n         */\n        this._procNodeSampleRate = procNodeSampleRate;\n\n        /**\n         * VAD Processor that allows us to calculate VAD score for PCM samples\n         */\n        this._vadProcessor = vadProcessor;\n\n        /**\n         * The JitsiLocalTrack instance.\n         */\n        this._localTrack = jitsiLocalTrack;\n\n        /**\n         * Buffer to hold residue PCM resulting after a ScriptProcessorNode callback\n         */\n        this._bufferResidue = new Float32Array([]);\n\n        /**\n         * The AudioContext instance with the preferred sample frequency.\n         */\n        this._audioContext = createAudioContext({ sampleRate: vadProcessor.getRequiredPCMFrequency() });\n\n        /**\n         * PCM Sample size expected by the VAD Processor instance. We cache it here as this value is used extensively,\n         * saves a couple of function calls.\n         */\n        this._vadSampleSize = vadProcessor.getSampleLength();\n\n        /**\n         * Event listener function that will be called by the ScriptProcessNode with raw PCM data, depending on the set\n         * sample rate.\n         */\n        this._onAudioProcess = this._onAudioProcess.bind(this);\n\n        this._initializeAudioContext();\n    }\n\n    /**\n     * Factory method that sets up all the necessary components for the creation of the TrackVADEmitter.\n     *\n     * @param {string} micDeviceId - Target microphone device id.\n     * @param {number} procNodeSampleRate - Sample rate of the proc node.\n     * @param {Object} vadProcessor -Module that calculates the voice activity score for a certain audio PCM sample.\n     * The processor needs to implement the following functions:\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by getSampleLength.\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\n     * @returns {Promise<TrackVADEmitter>} - Promise resolving in a new instance of TrackVADEmitter.\n     */\n    static create(micDeviceId, procNodeSampleRate, vadProcessor) {\n        return RTC.obtainAudioAndVideoPermissions({\n            devices: [ 'audio' ],\n            micDeviceId\n        }).then(localTrack => {\n            // We only expect one audio track when specifying a device id.\n            if (!localTrack[0]) {\n                throw new Error(`Failed to create jitsi local track for device id: ${micDeviceId}`);\n            }\n\n            return new TrackVADEmitter(procNodeSampleRate, vadProcessor, localTrack[0]);\n\n            // We have no exception handling at this point as there is nothing to clean up, the vadProcessor\n            // life cycle is handled by whoever created this instance.\n        });\n    }\n\n    /**\n     * Sets up the audio graph in the AudioContext.\n     *\n     * @returns {void}\n     */\n    _initializeAudioContext() {\n        this._audioSource = this._audioContext.createMediaStreamSource(this._localTrack.stream);\n\n        // TODO AudioProcessingNode is deprecated in the web audio specifications and the recommended replacement\n        // is audio worklet, however at the point of implementation AudioProcessingNode was still de de facto way\n        // of achieving this functionality and supported in all major browsers as opposed to audio worklet which\n        // was only available in Chrome. This todo is just a reminder that we should replace AudioProcessingNode\n        // with audio worklet when it's mature enough and has more browser support.\n        // We don't need stereo for determining the VAD score so we create a single channel processing node.\n        this._audioProcessingNode = this._audioContext.createScriptProcessor(this._procNodeSampleRate, 1, 1);\n    }\n\n    /**\n     * ScriptProcessorNode callback, the input parameters contains the PCM audio that is then sent to rnnoise.\n     * Rnnoise only accepts PCM samples of 480 bytes whereas the webaudio processor node can't sample at a multiple\n     * of 480 thus after each _onAudioProcess callback there will remain and PCM buffer residue equal\n     * to _procNodeSampleRate / 480 which will be added to the next sample buffer and so on.\\\n     *\n     *\n     * @param {AudioProcessingEvent} audioEvent - Audio event.\n     * @returns {void}\n     * @fires VAD_SCORE_PUBLISHED\n     */\n    _onAudioProcess(audioEvent) {\n        // Prepend the residue PCM buffer from the previous process callback.\n        const inData = audioEvent.inputBuffer.getChannelData(0);\n        const completeInData = [ ...this._bufferResidue, ...inData ];\n        const sampleTimestamp = Date.now();\n\n        let i = 0;\n\n        for (; i + this._vadSampleSize < completeInData.length; i += this._vadSampleSize) {\n            const pcmSample = completeInData.slice(i, i + this._vadSampleSize);\n\n            // The VAD processor might change the values inside the array so we make a copy.\n            const vadScore = this._vadProcessor.calculateAudioFrameVAD(pcmSample.slice());\n\n            this.emit(VAD_SCORE_PUBLISHED, {\n                timestamp: sampleTimestamp,\n                score: vadScore,\n                pcmData: pcmSample,\n                deviceId: this._localTrack.getDeviceId()\n            });\n        }\n\n        this._bufferResidue = completeInData.slice(i, completeInData.length);\n    }\n\n    /**\n     * Connects the nodes in the AudioContext to start the flow of audio data.\n     *\n     * @returns {void}\n     */\n    _connectAudioGraph() {\n        this._audioProcessingNode.onaudioprocess = this._onAudioProcess;\n        this._audioSource.connect(this._audioProcessingNode);\n        this._audioProcessingNode.connect(this._audioContext.destination);\n    }\n\n    /**\n     * Disconnects the nodes in the AudioContext.\n     *\n     * @returns {void}\n     */\n    _disconnectAudioGraph() {\n        // Even thought we disconnect the processing node it seems that some callbacks remain queued,\n        // resulting in calls with and uninitialized context.\n        // eslint-disable-next-line no-empty-function\n        this._audioProcessingNode.onaudioprocess = () => {};\n        this._audioProcessingNode.disconnect();\n        this._audioSource.disconnect();\n    }\n\n    /**\n     * Cleanup potentially acquired resources.\n     *\n     * @returns {void}\n     */\n    _cleanupResources() {\n        this._disconnectAudioGraph();\n        this._localTrack.stopStream();\n    }\n\n    /**\n     * Get the associated track device ID.\n     *\n     * @returns {string}\n     */\n    getDeviceId() {\n        return this._localTrack.getDeviceId();\n    }\n\n\n    /**\n     * Get the associated track label.\n     *\n     * @returns {string}\n     */\n    getTrackLabel() {\n        return this._localTrack.getDeviceLabel();\n    }\n\n    /**\n     * Start the emitter by connecting the audio graph.\n     *\n     * @returns {void}\n     */\n    start() {\n        this._connectAudioGraph();\n    }\n\n    /**\n     * Stops the emitter by disconnecting the audio graph.\n     *\n     * @returns {void}\n     */\n    stop() {\n        this._disconnectAudioGraph();\n        this._bufferResidue = [];\n    }\n\n    /**\n     * Destroy TrackVADEmitter instance (release resources and stop callbacks).\n     *\n     * @returns {void}\n     */\n    destroy() {\n        if (this._destroyed) {\n            return;\n        }\n\n        this._cleanupResources();\n        this._destroyed = true;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport { EventEmitter } from 'events';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nimport { VAD_SCORE_PUBLISHED, DETECTOR_STATE_CHANGE } from './DetectionEvents';\nimport TrackVADEmitter from './TrackVADEmitter';\n\nconst logger = getLogger(__filename);\n\n/**\n * Sample rate of TrackVADEmitter, it defines how many audio samples are processed at a time.\n * @type {number}\n */\nconst VAD_EMITTER_SAMPLE_RATE = 4096;\n\n/**\n * Connects a TrackVADEmitter to the target conference local audio track and manages various services that use\n * the data to produce audio analytics (VADTalkMutedDetection and VADNoiseDetection).\n */\nexport default class VADAudioAnalyser extends EventEmitter {\n    /**\n     * Creates <tt>VADAudioAnalyser</tt>\n     * @param {JitsiConference} conference - JitsiConference instance that created us.\n     * @param {Object} createVADProcessor - Function that creates a Voice activity detection processor. The processor\n     * needs to implement the following functions:\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by getSampleLength.\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\n     * @constructor\n     */\n    constructor(conference, createVADProcessor) {\n        super();\n\n        /**\n         * Member function that instantiates a VAD processor.\n         */\n        this._createVADProcessor = createVADProcessor;\n\n        /**\n         * Current {@link TrackVADEmitter}. VAD Emitter uses a {@link JitsiLocalTrack} and VAD processor to generate\n         * period voice probability scores.\n         */\n        this._vadEmitter = null;\n\n        /**\n         * Current state of the _vadEmitter\n         */\n        this._isVADEmitterRunning = false;\n\n        /**\n         * Array of currently attached VAD processing services.\n         */\n        this._detectionServices = [];\n\n        /**\n         * Promise used to chain create and destroy operations associated with TRACK_ADDED and TRACK_REMOVED events\n         * coming from the conference.\n         * Because we have an async created component (VAD Processor) we need to make sure that it's initialized before\n         * we destroy it ( when changing the device for instance), or when we use it from an external point of entry\n         * i.e. (TRACK_MUTE_CHANGED event callback).\n         */\n        this._vadInitTracker = Promise.resolve();\n\n        /**\n         * Listens for {@link TrackVADEmitter} events and processes them.\n         */\n        this._processVADScore = this._processVADScore.bind(this);\n\n        conference.on(JitsiConferenceEvents.TRACK_ADDED, this._trackAdded.bind(this));\n        conference.on(JitsiConferenceEvents.TRACK_REMOVED, this._trackRemoved.bind(this));\n        conference.on(JitsiConferenceEvents.TRACK_MUTE_CHANGED, this._trackMuteChanged.bind(this));\n    }\n\n    /**\n     * Attach a VAD detector service to the analyser and handle it's state changes.\n     *\n     * @param {Object} vadTMDetector\n     */\n    addVADDetectionService(vadService) {\n        this._detectionServices.push(vadService);\n        vadService.on(DETECTOR_STATE_CHANGE, () => {\n            // When the state of a detector changes check if there are any active detectors attached so that\n            // the _vadEmitter doesn't run needlessly.\n            const activeDetector = this._detectionServices.filter(detector => detector.isActive() === true);\n\n            // If there are no active detectors running and the vadEmitter is running then stop the emitter as it is\n            // uses a considerable amount of CPU. Otherwise start the service if it's stopped and there is a detector\n            // that needs it.\n            if (!activeDetector.length && this._isVADEmitterRunning) {\n                this._stopVADEmitter();\n            } else if (!this._isVADEmitterRunning) {\n                this._startVADEmitter();\n            }\n        });\n    }\n\n    /**\n     * Start the {@link TrackVADEmitter} and attach the event listener.\n     * @returns {void}\n     */\n    _startVADEmitter() {\n        if (this._vadEmitter) {\n            this._vadEmitter.on(VAD_SCORE_PUBLISHED, this._processVADScore);\n            this._vadEmitter.start();\n            this._isVADEmitterRunning = true;\n        }\n    }\n\n    /**\n     * Stop the {@link TrackVADEmitter} and detach the event listener.\n     * @returns {void}\n     */\n    _stopVADEmitter() {\n        if (this._vadEmitter) {\n            this._vadEmitter.removeListener(VAD_SCORE_PUBLISHED, this._processVADScore);\n            this._vadEmitter.stop();\n        }\n        this._isVADEmitterRunning = false;\n    }\n\n    /**\n     * Listens for {@link TrackVADEmitter} events and directs them to attached services as needed.\n     *\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n     * @param {Float32Array} pcmData - Raw PCM data with which the VAD score was calculated.\n     * @param {string} vadScore.deviceId - Device id of the associated track.\n     * @listens VAD_SCORE_PUBLISHED\n     */\n    _processVADScore(vadScore) {\n        for (const detector of this._detectionServices) {\n            detector.processVADScore(vadScore);\n        }\n    }\n\n    /**\n     * Change the isMuted state of all attached detection services.\n     *\n     * @param {boolean} isMuted\n     */\n    _changeDetectorsMuteState(isMuted) {\n        for (const detector of this._detectionServices) {\n            detector.changeMuteState(isMuted);\n        }\n    }\n\n    /**\n     * Notifies the detector that a track was added to the associated {@link JitsiConference}.\n     * Only take into account local audio tracks.\n     * @param {JitsiTrack} track - The added track.\n     * @returns {void}\n     * @listens TRACK_ADDED\n     */\n    _trackAdded(track) {\n        if (track.isLocalAudioTrack()) {\n            // Keep a track promise so we take into account successive TRACK_ADD events being generated so that we\n            // destroy/create the processing context in the proper order.\n            this._vadInitTracker = this._vadInitTracker.then(() => this._createVADProcessor())\n                .then(vadProcessor =>\n                    TrackVADEmitter.create(track.getDeviceId(), VAD_EMITTER_SAMPLE_RATE, vadProcessor)\n                )\n                .then(vadEmitter => {\n                    logger.debug('Created VAD emitter for track: ', track.getTrackLabel());\n\n                    this._vadEmitter = vadEmitter;\n\n                    // Iterate through the detection services and set their appropriate mute state, depending on\n                    // service this will trigger a DETECTOR_STATE_CHANGE which in turn might start the _vadEmitter.\n                    this._changeDetectorsMuteState(track.isMuted());\n                })\n                .catch(error => {\n                    logger.warn('Failed to start VADAudioAnalyser', error);\n                });\n        }\n    }\n\n    /**\n     * Notifies the detector that the mute state of a {@link JitsiConference} track has changed. Only takes into account\n     * local audio tracks.\n     * @param {JitsiTrack} track - The track whose mute state has changed.\n     * @returns {void}\n     * @listens TRACK_MUTE_CHANGED\n     */\n    _trackMuteChanged(track) {\n        if (track.isLocalAudioTrack()) {\n            // On a mute toggle reset the state.\n            this._vadInitTracker = this._vadInitTracker.then(() => {\n                // Set mute status for the attached detection services.\n                this._changeDetectorsMuteState(track.isMuted());\n            });\n        }\n    }\n\n    /**\n     * Notifies the detector that a track associated with the {@link JitsiConference} was removed. Only takes into\n     * account local audio tracks. Cleans up resources associated with the track and resets the processing context.\n     *\n     * @param {JitsiTrack} track - The removed track.\n     * @returns {void}\n     * @listens TRACK_REMOVED\n     */\n    _trackRemoved(track) {\n        if (track.isLocalAudioTrack()) {\n            // Use the promise to make sure operations are in sequence.\n            this._vadInitTracker = this._vadInitTracker.then(() => {\n                logger.debug('Removing track from VAD detection - ', track.getTrackLabel());\n\n                // Track was removed, clean up and set appropriate states.\n                if (this._vadEmitter) {\n                    this._stopVADEmitter();\n                    this._vadEmitter.destroy();\n                    this._vadEmitter = null;\n                }\n\n                // Reset state of detectors when active track is removed.\n                for (const detector of this._detectionServices) {\n                    detector.reset();\n                }\n            });\n        }\n    }\n\n\n}\n","import { EventEmitter } from 'events';\n\nimport { calculateAverage, filterPositiveValues } from '../util/MathUtil';\n\nimport { VAD_NOISY_DEVICE, DETECTOR_STATE_CHANGE } from './DetectionEvents';\n\n/**\n * The average value VAD needs to be under over a period of time to be considered noise.\n * @type {number}\n */\nconst VAD_NOISE_AVG_THRESHOLD = 0.2;\n\n/**\n * The average values that audio input need to be over to be considered loud.\n * @type {number}\n */\nconst NOISY_AUDIO_LEVEL_THRESHOLD = 0.040;\n\n/**\n * The value that a VAD score needs to be under in order for processing to begin.\n * @type {number}\n */\nconst VAD_SCORE_TRIGGER = 0.2;\n\n/**\n * The value that a VAD score needs to be under in order for processing to begin.\n * @type {number}\n */\nconst AUDIO_LEVEL_SCORE_TRIGGER = 0.020;\n\n/**\n * Time span over which we calculate an average score used to determine if we trigger the event.\n * @type {number}\n */\nconst PROCESS_TIME_FRAME_SPAN_MS = 1500;\n\n/**\n * Detect if provided VAD score and PCM data is considered noise.\n */\nexport default class VADNoiseDetection extends EventEmitter {\n    /**\n     * Creates <tt>VADNoiseDetection</tt>\n     *\n     * @constructor\n     */\n    constructor() {\n        super();\n\n        /**\n         * Flag which denotes the current state of the detection service i.e.if there is already a processing operation\n         * ongoing.\n         */\n        this._processing = false;\n\n        /**\n         * Buffer that keeps the VAD scores for a period of time.\n         */\n        this._scoreArray = [];\n\n        /**\n         * Buffer that keeps audio level samples for a period of time.\n         */\n        this._audioLvlArray = [];\n\n        /**\n         * Current state of the service, if it's not active no processing will occur.\n         */\n        this._active = false;\n\n        this._calculateNoisyScore = this._calculateNoisyScore.bind(this);\n    }\n\n    /**\n     * Compute cumulative VAD score and PCM audio levels once the PROCESS_TIME_FRAME_SPAN_MS timeout has elapsed.\n     * If the score is above the set threshold fire the event.\n     * @returns {void}\n     * @fires VAD_NOISY_DEVICE\n     */\n    _calculateNoisyScore() {\n        const scoreAvg = calculateAverage(this._scoreArray);\n        const audioLevelAvg = calculateAverage(this._audioLvlArray);\n\n        if (scoreAvg < VAD_NOISE_AVG_THRESHOLD && audioLevelAvg > NOISY_AUDIO_LEVEL_THRESHOLD) {\n            this.emit(VAD_NOISY_DEVICE);\n\n            this._setActiveState(false);\n        }\n\n        // We reset the context in case a new process phase needs to be triggered.\n        this.reset();\n    }\n\n    /**\n     * Record the vad score and average volume in the appropriate buffers.\n     *\n     * @param {number} vadScore\n     * @param {number} avgAudioLvl - average audio level of the PCM sample associated with the VAD score.s\n     */\n    _recordValues(vadScore, avgAudioLvl) {\n        this._scoreArray.push(vadScore);\n        this._audioLvlArray.push(avgAudioLvl);\n    }\n\n    /**\n     * Set the active state of the detection service and notify any listeners.\n     *\n     * @param {boolean} active\n     * @fires DETECTOR_STATE_CHANGE\n     */\n    _setActiveState(active) {\n        this._active = active;\n        this.emit(DETECTOR_STATE_CHANGE, this._active);\n    }\n\n    /**\n     * Change the state according to the muted status of the tracked device.\n     *\n     * @param {boolean} isMuted - Is the device muted or not.\n     */\n    changeMuteState(isMuted) {\n        // This service only needs to run when the microphone is not muted.\n        this._setActiveState(!isMuted);\n        this.reset();\n    }\n\n    /**\n     * Check whether or not the service is active or not.\n     *\n     * @returns {boolean}\n     */\n    isActive() {\n        return this._active;\n    }\n\n    /**\n     * Reset the processing context, clear buffers, cancel the timeout trigger.\n     *\n     * @returns {void}\n     */\n    reset() {\n        this._processing = false;\n        this._scoreArray = [];\n        this._audioLvlArray = [];\n        clearTimeout(this._processTimeout);\n    }\n\n    /**\n     * Listens for {@link TrackVADEmitter} events and processes them.\n     *\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n     * @param {Float32Array} vadScore.pcmData - Raw PCM Data associated with the VAD score.\n     * @param {string} vadScore.deviceId - Device id of the associated track.\n     * @listens VAD_SCORE_PUBLISHED\n     */\n    processVADScore(vadScore) {\n        if (!this._active) {\n            return;\n        }\n\n        // There is a processing phase on going, add score to buffer array.\n        if (this._processing) {\n            // Filter and calculate sample average so we don't have to process one large array at a time.\n            const posAudioLevels = filterPositiveValues(vadScore.pcmData);\n\n            this._recordValues(vadScore.score, calculateAverage(posAudioLevels));\n\n            return;\n        }\n\n        // If the VAD score for the sample is low and audio level has a high enough level we can start listening for\n        // noise\n        if (vadScore.score < VAD_SCORE_TRIGGER) {\n            const posAudioLevels = filterPositiveValues(vadScore.pcmData);\n            const avgAudioLvl = calculateAverage(posAudioLevels);\n\n            if (avgAudioLvl > AUDIO_LEVEL_SCORE_TRIGGER) {\n                this._processing = true;\n                this._recordValues(vadScore.score, avgAudioLvl);\n\n                // Once the preset timeout executes the final score will be calculated.\n                this._processTimeout = setTimeout(this._calculateNoisyScore, PROCESS_TIME_FRAME_SPAN_MS);\n            }\n        }\n    }\n}\n","import { EventEmitter } from 'events';\n\nimport { calculateAverage } from '../util/MathUtil';\n\nimport { VAD_TALK_WHILE_MUTED, DETECTOR_STATE_CHANGE } from './DetectionEvents';\n\n\n/**\n * The threshold which the average VAD values for a span of time needs to exceed to trigger an event.\n * @type {number}\n */\nconst VAD_AVG_THRESHOLD = 0.6;\n\n/**\n * The VAD score needed to trigger the processing algorithm, i.e. if a sample has the VAD score >= VAD_VOICE_LEVEL\n * we start processing all scores for a time span defined by const PROCESS_TIME_FRAME_SPAN_MS.\n * @type {number}\n */\nconst VAD_VOICE_LEVEL = 0.9;\n\n/**\n * Sample rate of TrackVADEmitter, it defines how many audio samples are processed at a time.\n * @type {number}\n */\n\n/**\n * Time span over which we calculate an average score used to determine if we trigger the event.\n * @type {number}\n */\nconst PROCESS_TIME_FRAME_SPAN_MS = 700;\n\n/**\n * Detect if provided VAD score which is generated on a muted device is voice and fires an event.\n */\nexport default class VADTalkMutedDetection extends EventEmitter {\n    /**\n     * Creates <tt>VADTalkMutedDetection</tt>\n     * @constructor\n     */\n    constructor() {\n        super();\n\n        /**\n         * Flag which denotes the current state of the detection service i.e.if there is already a processing operation\n         * ongoing.\n         */\n        this._processing = false;\n\n        /**\n         * Buffer that keeps the VAD scores for a period of time.\n         */\n        this._scoreArray = [];\n\n        /**\n         * Current mute state of the audio track being monitored.\n         */\n        this._active = false;\n\n        this._calculateVADScore = this._calculateVADScore.bind(this);\n    }\n\n    /**\n     * Compute cumulative VAD score function called once the PROCESS_TIME_FRAME_SPAN_MS timeout has elapsed.\n     * @returns {void}\n     * @fires VAD_TALK_WHILE_MUTED\n     */\n    _calculateVADScore() {\n        const score = calculateAverage(this._scoreArray);\n\n        if (score > VAD_AVG_THRESHOLD) {\n            this.emit(VAD_TALK_WHILE_MUTED);\n\n            // Event was fired. Stop event emitter and remove listeners so no residue events kick off after this point\n            // and a single VAD_TALK_WHILE_MUTED is generated per mic muted state.\n            this._setActiveState(false);\n        }\n\n        // We reset the context in case a new process phase needs to be triggered.\n        this.reset();\n    }\n\n    /**\n     * Set the active state of the detection service and notify any listeners.\n     *\n     * @param {boolean} active\n     * @fires DETECTOR_STATE_CHANGE\n     */\n    _setActiveState(active) {\n        this._active = active;\n        this.emit(DETECTOR_STATE_CHANGE, this._active);\n    }\n\n    /**\n     * Change the state according to the muted status of the tracked device.\n     *\n     * @param {boolean} isMuted - Is the device muted or not.\n     */\n    changeMuteState(isMuted) {\n        // This service only needs to run when the microphone is muted.\n        this._setActiveState(isMuted);\n        this.reset();\n    }\n\n    /**\n     * Check whether or not the service is active or not.\n     *\n     * @returns {boolean}\n     */\n    isActive() {\n        return this._active;\n    }\n\n    /**\n     * Listens for {@link TrackVADEmitter} events and processes them.\n     *\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n     * @param {string} vadScore.deviceId - Device id of the associated track.\n     * @listens VAD_SCORE_PUBLISHED\n     */\n    processVADScore(vadScore) {\n        if (!this._active) {\n            return;\n        }\n\n        // There is a processing phase on going, add score to buffer array.\n        if (this._processing) {\n            this._scoreArray.push(vadScore.score);\n\n            return;\n        }\n\n        // Because we remove all listeners on the vadEmitter once the main event is triggered,\n        // there is no need to check for rogue events.\n        if (vadScore.score > VAD_VOICE_LEVEL) {\n            this._processing = true;\n            this._scoreArray.push(vadScore.score);\n\n            // Start gathering VAD scores for the configured period of time.\n            this._processTimeout = setTimeout(this._calculateVADScore, PROCESS_TIME_FRAME_SPAN_MS);\n        }\n    }\n\n    /**\n     * Reset the processing context, clear buffer, cancel the timeout trigger.\n     *\n     * @returns {void}\n     */\n    reset() {\n        this._processing = false;\n        this._scoreArray = [];\n        clearTimeout(this._processTimeout);\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * The 'type' of a message which designates an e2e ping request.\n * @type {string}\n */\nconst E2E_PING_REQUEST = 'e2e-ping-request';\n\n/**\n * The 'type' of a message which designates an e2e ping response.\n * @type {string}\n */\nconst E2E_PING_RESPONSE = 'e2e-ping-response';\n\n/**\n * The number of requests to wait for before emitting an RTT value.\n */\nconst DEFAULT_NUM_REQUESTS = 5;\n\n/**\n * The maximum number of messages per second to aim for. This is for the entire\n * conference, with the assumption that all endpoints join at once.\n */\nconst DEFAULT_MAX_MESSAGES_PER_SECOND = 250;\n\n/**\n * The conference size beyond which e2e pings will be disabled.\n */\nconst DEFAULT_MAX_CONFERENCE_SIZE = 200;\n\n/**\n * Saves e2e ping related state for a single JitsiParticipant.\n */\nclass ParticipantWrapper {\n    /**\n     * Creates a ParticipantWrapper\n     * @param {JitsiParticipant} participant - The remote participant that this\n     * object wraps.\n     * @param {E2ePing} e2eping\n     */\n    constructor(participant, e2eping) {\n        // The JitsiParticipant\n        this.participant = participant;\n\n        // The E2ePing\n        this.e2eping = e2eping;\n\n        // Caches the ID\n        this.id = participant.getId();\n\n        // Recently sent requests\n        this.requests = {};\n\n        // The ID of the last sent request. We just increment it for each new\n        // request. Start at 1 so we can consider only thruthy values valid.\n        this.lastRequestId = 1;\n\n        this.sendRequest = this.sendRequest.bind(this);\n        this.handleResponse = this.handleResponse.bind(this);\n        this.maybeLogRttAndStop = this.maybeLogRttAndStop.bind(this);\n        this.scheduleNext = this.scheduleNext.bind(this);\n        this.stop = this.stop.bind(this);\n        this.getDelay = this.getDelay.bind(this);\n        this.timeout = this.scheduleNext();\n    }\n\n    /**\n     * Schedule the next ping to be sent.\n     */\n    scheduleNext() {\n        return window.setTimeout(this.sendRequest, this.getDelay());\n    }\n\n    /**\n     * Stop pinging this participant, canceling a scheduled ping, if any.\n     */\n    stop() {\n        if (this.timeout) {\n            window.clearTimeout(this.timeout);\n        }\n        this.e2eping.removeParticipant(this.id);\n    }\n\n    /**\n     * Get the delay until the next ping in milliseconds.\n     */\n    getDelay() {\n        const conferenceSize = this.e2eping.conference.getParticipants().length;\n        const endpointPairs = conferenceSize * (conferenceSize - 1) / 2;\n        const totalMessages = endpointPairs * this.e2eping.numRequests;\n        const totalSeconds = totalMessages / this.e2eping.maxMessagesPerSecond;\n\n        // Randomize between .5 and 1.5\n        const r = 1.5 - Math.random();\n        const delayBetweenMessages = r * Math.max(1000 * (totalSeconds / this.e2eping.numRequests), 1000);\n\n        return delayBetweenMessages;\n    }\n\n    /**\n     * Sends the next ping request.\n     * @type {*}\n     */\n    sendRequest() {\n        const requestId = this.lastRequestId++;\n        const requestMessage = {\n            type: E2E_PING_REQUEST,\n            id: requestId\n        };\n\n        this.e2eping.sendMessage(requestMessage, this.id);\n        this.requests[requestId] = {\n            id: requestId,\n            timeSent: window.performance.now()\n        };\n    }\n\n    /**\n     * Handles a response from this participant.\n     * @type {*}\n     */\n    handleResponse(response) {\n        const request = this.requests[response.id];\n\n        if (request) {\n            request.rtt = window.performance.now() - request.timeSent;\n        }\n        this.maybeLogRttAndStop();\n    }\n\n    /**\n     * Check if we've received the pre-configured number of responses, and if\n     * so log the measured RTT and stop sending requests.\n     * @type {*}\n     */\n    maybeLogRttAndStop() {\n        // The RTT we'll report is the minimum RTT measured\n        let rtt = Infinity;\n        let request, requestId;\n        let numRequestsWithResponses = 0;\n        let totalNumRequests = 0;\n\n        for (requestId in this.requests) {\n            if (this.requests.hasOwnProperty(requestId)) {\n                request = this.requests[requestId];\n\n                totalNumRequests++;\n                if (request.rtt) {\n                    numRequestsWithResponses++;\n                    rtt = Math.min(rtt, request.rtt);\n                }\n            }\n        }\n\n        if (numRequestsWithResponses >= this.e2eping.numRequests) {\n            logger.info(`Measured RTT=${rtt} ms to ${this.id} (in ${this.participant.getProperty('region')})`);\n            this.stop();\n\n            return;\n        } else if (totalNumRequests > 2 * this.e2eping.numRequests) {\n            logger.info(`Stopping e2eping for ${this.id} because we sent ${totalNumRequests} with only `\n                + `${numRequestsWithResponses} responses.`);\n            this.stop();\n\n            return;\n        }\n\n        this.timeout = this.scheduleNext();\n    }\n}\n\n/**\n * Implements end-to-end ping (from one conference participant to another) via\n * the jitsi-videobridge channel (either WebRTC data channel or web socket).\n *\n * TODO: use a broadcast message instead of individual pings to each remote\n * participant.\n *\n * This class:\n * 1. Sends periodic ping requests to all other participants in the\n * conference.\n * 2. Responds to ping requests from other participants.\n * 3. Fires events with the end-to-end RTT to each participant whenever a\n * response is received.\n * 4. Fires analytics events with the end-to-end RTT periodically.\n */\nexport default class E2ePing {\n    /**\n     * @param {JitsiConference} conference - The conference.\n     * @param {Function} sendMessage - The function to use to send a message.\n     * @param {Object} options\n     */\n    constructor(conference, options, sendMessage) {\n        this.conference = conference;\n        this.eventEmitter = conference.eventEmitter;\n        this.sendMessage = sendMessage;\n\n        // Maps a participant ID to its ParticipantWrapper\n        this.participants = {};\n\n        this.numRequests = DEFAULT_NUM_REQUESTS;\n        this.maxConferenceSize = DEFAULT_MAX_CONFERENCE_SIZE;\n        this.maxMessagesPerSecond = DEFAULT_MAX_MESSAGES_PER_SECOND;\n\n        if (options && options.e2eping) {\n            if (typeof options.e2eping.numRequests === 'number') {\n                this.numRequests = options.e2eping.numRequests;\n            }\n            if (typeof options.e2eping.maxConferenceSize === 'number') {\n                this.maxConferenceSize = options.e2eping.maxConferenceSize;\n            }\n            if (typeof options.e2eping.maxMessagesPerSecond === 'number') {\n                this.maxMessagesPerSecond = options.e2eping.maxMessagesPerSecond;\n            }\n        }\n        logger.info(\n            `Initializing e2e ping with numRequests=${this.numRequests}, maxConferenceSize=${this.maxConferenceSize}, `\n            + `maxMessagesPerSecond=${this.maxMessagesPerSecond}.`);\n\n        this.participantJoined = this.participantJoined.bind(this);\n\n        this.participantLeft = this.participantLeft.bind(this);\n        conference.on(JitsiConferenceEvents.USER_LEFT, this.participantLeft);\n\n        this.messageReceived = this.messageReceived.bind(this);\n        conference.on(JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED, this.messageReceived);\n\n        this.conferenceJoined = this.conferenceJoined.bind(this);\n        conference.on(JitsiConferenceEvents.CONFERENCE_JOINED, this.conferenceJoined);\n    }\n\n    /**\n     * Delay processing USER_JOINED events until the MUC is fully joined,\n     * otherwise the apparent conference size will be wrong.\n     */\n    conferenceJoined() {\n        this.conference.getParticipants().forEach(p => this.participantJoined(p.getId(), p));\n        this.conference.on(JitsiConferenceEvents.USER_JOINED, this.participantJoined);\n    }\n\n    /**\n     * Handles a message that was received.\n     *\n     * @param participant - The message sender.\n     * @param payload - The payload of the message.\n     */\n    messageReceived(participant, payload) {\n        // Listen to E2E PING requests and responses from other participants\n        // in the conference.\n        if (payload.type === E2E_PING_REQUEST) {\n            this.handleRequest(participant.getId(), payload);\n        } else if (payload.type === E2E_PING_RESPONSE) {\n            this.handleResponse(participant.getId(), payload);\n        }\n    }\n\n    /**\n     * Handles a participant joining the conference. Starts to send ping\n     * requests to the participant.\n     *\n     * @param {String} id - The ID of the participant.\n     * @param {JitsiParticipant} participant - The participant that joined.\n     */\n    participantJoined(id, participant) {\n        if (this.participants[id]) {\n            logger.info(`Participant wrapper already exists for ${id}. Clearing.`);\n            this.participants[id].stop();\n        }\n\n        if (this.conference.getParticipants().length > this.maxConferenceSize) {\n            return;\n        }\n\n        // We don't need to send e2eping in both directions for a pair of\n        // endpoints. Force only one direction with just string comparison of\n        // the IDs.\n        if (this.conference.myUserId() > id) {\n            logger.info(`Starting e2eping for participant ${id}`);\n            this.participants[id] = new ParticipantWrapper(participant, this);\n        }\n    }\n\n    /**\n     * Remove a participant without calling \"stop\".\n     */\n    removeParticipant(id) {\n        if (this.participants[id]) {\n            delete this.participants[id];\n        }\n    }\n\n    /**\n     * Handles a participant leaving the conference. Stops sending requests.\n     *\n     * @param {String} id - The ID of the participant.\n     */\n    participantLeft(id) {\n        if (this.participants[id]) {\n            this.participants[id].stop();\n            delete this.participants[id];\n        }\n    }\n\n    /**\n     * Handles a ping request coming from another participant.\n     *\n     * @param {string} participantId - The ID of the participant who sent the\n     * request.\n     * @param {Object} request - The request.\n     */\n    handleRequest(participantId, request) {\n        // If it's a valid request, just send a response.\n        if (request && request.id) {\n            const response = {\n                type: E2E_PING_RESPONSE,\n                id: request.id\n            };\n\n            this.sendMessage(response, participantId);\n        } else {\n            logger.info(`Received an invalid e2e ping request from ${participantId}.`);\n        }\n    }\n\n    /**\n     * Handles a ping response coming from another participant\n     * @param {string} participantId - The ID of the participant who sent the\n     * response.\n     * @param {Object} response - The response.\n     */\n    handleResponse(participantId, response) {\n        const participantWrapper = this.participants[participantId];\n\n        if (participantWrapper) {\n            participantWrapper.handleResponse(response);\n        }\n    }\n\n    /**\n     * Stops this E2ePing (i.e. stop sending requests).\n     */\n    stop() {\n        logger.info('Stopping e2eping');\n\n        this.conference.off(JitsiConferenceEvents.USER_JOINED, this.participantJoined);\n        this.conference.off(JitsiConferenceEvents.USER_LEFT, this.participantLeft);\n        this.conference.off(JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED, this.messageReceived);\n\n        for (const id in this.participants) {\n            if (this.participants.hasOwnProperty(id)) {\n                this.participants[id].stop();\n            }\n        }\n\n        this.participants = {};\n    }\n}\n\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * Emits {@link JitsiConferenceEvents.JVB121_STATUS} events based on the current\n * P2P status and the conference participants count. See the event description\n * for more info.\n */\nexport default class Jvb121EventGenerator {\n    /**\n     * Creates new <tt>Jvb121EventGenerator</tt> for the given conference.\n     * @param {JitsiConference} conference\n     */\n    constructor(conference) {\n        this._conference = conference;\n\n        /**\n         * Indicates whether it's a one to one JVB conference (<tt>true</tt>)\n         * or a multiparty (<tt>false</tt>). Will be also <tt>false</tt> if\n         * the conference is currently in the P2P mode.\n         * @type {boolean}\n         * @private\n         */\n        this._jvb121 = true;\n\n        this._conference.addEventListener(\n            JitsiConferenceEvents.USER_JOINED, () => this.evaluateStatus());\n        this._conference.addEventListener(\n            JitsiConferenceEvents.USER_LEFT, () => this.evaluateStatus());\n        this._conference.addEventListener(\n            JitsiConferenceEvents.P2P_STATUS, () => this.evaluateStatus());\n    }\n\n    /**\n     * Checks whether the JVB121 value should be updated and a new event\n     * emitted.\n     */\n    evaluateStatus() {\n        const oldStatus = this._jvb121;\n        const newStatus\n            = !this._conference.isP2PActive()\n                && this._conference.getParticipantCount() <= 2;\n\n        if (oldStatus !== newStatus) {\n            this._jvb121 = newStatus;\n            logger.debug(`JVB121 status ${oldStatus} => ${newStatus}`);\n            this._conference.eventEmitter.emit(\n                JitsiConferenceEvents.JVB121_STATUS, oldStatus, newStatus);\n        }\n    }\n}\n","import SariskaMediaTransport from '../../../SariskaMediaTransport';\n\n/**\n * Base class for recording backends.\n */\nexport class RecordingAdapter {\n\n    /**\n     * Starts recording.\n     *\n     * @param {string} micDeviceId - The microphone to record on.\n     * @returns {Promise}\n     */\n    start(/* eslint-disable no-unused-vars */\n            micDeviceId/* eslint-enable no-unused-vars */) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Stops recording.\n     *\n     * @returns {Promise}\n     */\n    stop() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Export the recorded and encoded audio file.\n     *\n     * @returns {Promise<Object>}\n     */\n    exportRecordedData() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Mutes or unmutes the current recording.\n     *\n     * @param {boolean} muted - Whether to mute or to unmute.\n     * @returns {Promise}\n     */\n    setMuted(/* eslint-disable no-unused-vars */\n            muted/* eslint-enable no-unused-vars */) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Changes the current microphone.\n     *\n     * @param {string} micDeviceId - The new microphone device ID.\n     * @returns {Promise}\n     */\n    setMicDevice(/* eslint-disable no-unused-vars */\n            micDeviceId/* eslint-enable no-unused-vars */) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Helper method for getting an audio {@code MediaStream}. Use this instead\n     * of calling browser APIs directly.\n     *\n     * @protected\n     * @param {number} micDeviceId - The ID of the current audio device.\n     * @returns {Promise}\n     */\n    _getAudioStream(micDeviceId) {\n        return SariskaMediaTransport.createLocalTracks({\n            devices: [ 'audio' ],\n            micDeviceId\n        }).then(result => {\n            if (result.length !== 1) {\n                throw new Error('Unexpected number of streams '\n                    + 'from createLocalTracks.');\n            }\n            const mediaStream = result[0].stream;\n\n            if (mediaStream === undefined) {\n                throw new Error('Failed to create local track.');\n            }\n\n            return mediaStream;\n        });\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nconst logger = getLogger(__filename);\nimport { RecordingAdapter } from './RecordingAdapter';\n\n/**\n * Recording adapter that uses {@code MediaRecorder} (default browser encoding\n * with Opus codec).\n */\nexport class OggAdapter extends RecordingAdapter {\n\n    /**\n     * Instance of MediaRecorder.\n     * @private\n     */\n    _mediaRecorder = null;\n\n    /**\n     * Initialization promise.\n     * @private\n     */\n    _initPromise = null;\n\n    /**\n     * The recorded audio file.\n     * @private\n     */\n    _recordedData = null;\n\n    /**\n     * Implements {@link RecordingAdapter#start()}.\n     *\n     * @inheritdoc\n     */\n    start(micDeviceId) {\n        if (!this._initPromise) {\n            this._initPromise = this._initialize(micDeviceId);\n        }\n\n        return this._initPromise.then(() =>\n            new Promise(resolve => {\n                this._mediaRecorder.start();\n                resolve();\n            })\n        );\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#stop()}.\n     *\n     * @inheritdoc\n     */\n    stop() {\n        return new Promise(\n            resolve => {\n                this._mediaRecorder.onstop = () => resolve();\n                this._mediaRecorder.stop();\n            }\n        );\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#exportRecordedData()}.\n     *\n     * @inheritdoc\n     */\n    exportRecordedData() {\n        if (this._recordedData !== null) {\n            return Promise.resolve({\n                data: this._recordedData,\n                format: 'ogg'\n            });\n        }\n\n        return Promise.reject('No audio data recorded.');\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#setMuted()}.\n     *\n     * @inheritdoc\n     */\n    setMuted(muted) {\n        const shouldEnable = !muted;\n\n        if (!this._stream) {\n            return Promise.resolve();\n        }\n\n        const track = this._stream.getAudioTracks()[0];\n\n        if (!track) {\n            logger.error('Cannot mute/unmute. Track not found!');\n\n            return Promise.resolve();\n        }\n\n        if (track.enabled !== shouldEnable) {\n            track.enabled = shouldEnable;\n            logger.log(muted ? 'Mute' : 'Unmute');\n        }\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Initialize the adapter.\n     *\n     * @private\n     * @param {string} micDeviceId - The current microphone device ID.\n     * @returns {Promise}\n     */\n    _initialize(micDeviceId) {\n        if (this._mediaRecorder) {\n            return Promise.resolve();\n        }\n\n        return new Promise((resolve, error) => {\n            this._getAudioStream(micDeviceId)\n            .then(stream => {\n                this._stream = stream;\n                this._mediaRecorder = new MediaRecorder(stream);\n                this._mediaRecorder.ondataavailable\n                    = e => this._saveMediaData(e.data);\n                resolve();\n            })\n            .catch(err => {\n                logger.error(`Error calling getUserMedia(): ${err}`);\n                error();\n            });\n        });\n    }\n\n    /**\n     * Callback for storing the encoded data.\n     *\n     * @private\n     * @param {Blob} data - Encoded data.\n     * @returns {void}\n     */\n    _saveMediaData(data) {\n        this._recordedData = data;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nconst logger = getLogger(__filename);\nimport { RecordingAdapter } from './RecordingAdapter';\n\n/**\n * Base class for {@code AudioContext}-based recording adapters.\n */\nexport class AbstractAudioContextAdapter extends RecordingAdapter {\n    /**\n     * The {@code AudioContext} instance.\n     */\n    _audioContext = null;\n\n    /**\n     * The {@code ScriptProcessorNode} instance.\n     */\n    _audioProcessingNode = null;\n\n    /**\n     * The {@code MediaStreamAudioSourceNode} instance.\n     */\n    _audioSource = null;\n\n    /**\n     * The {@code MediaStream} instance, representing the current audio device.\n     */\n    _stream = null;\n\n    /**\n     * Sample rate.\n     */\n    _sampleRate = 44100;\n\n    /**\n     * Constructor.\n     */\n    constructor() {\n        super();\n\n        // sampleRate is browser and OS dependent.\n        // Setting sampleRate explicitly is in the specs but not implemented\n        // by browsers.\n        // See: https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/\n        //    AudioContext#Browser_compatibility\n        // And https://bugs.chromium.org/p/chromium/issues/detail?id=432248\n\n        this._audioContext = new AudioContext();\n        this._sampleRate = this._audioContext.sampleRate;\n        logger.log(`Current sampleRate ${this._sampleRate}.`);\n    }\n\n    /**\n     * Sets up the audio graph in the AudioContext.\n     *\n     * @protected\n     * @param {string} micDeviceId - The current microphone device ID.\n     * @param {Function} callback - Callback function to\n     * handle AudioProcessingEvents.\n     * @returns {Promise}\n     */\n    _initializeAudioContext(micDeviceId, callback) {\n        if (typeof callback !== 'function') {\n            return Promise.reject('a callback function is required.');\n        }\n\n        return this._getAudioStream(micDeviceId)\n        .then(stream => {\n            this._stream = stream;\n            this._audioSource\n                = this._audioContext.createMediaStreamSource(stream);\n            this._audioProcessingNode\n                = this._audioContext.createScriptProcessor(4096, 1, 1);\n            this._audioProcessingNode.onaudioprocess = callback;\n            logger.debug('AudioContext is set up.');\n        })\n        .catch(err => {\n            logger.error(`Error calling getUserMedia(): ${err}`);\n\n            return Promise.reject(err);\n        });\n    }\n\n    /**\n     * Connects the nodes in the {@code AudioContext} to start the flow of\n     * audio data.\n     *\n     * @protected\n     * @returns {void}\n     */\n    _connectAudioGraph() {\n        this._audioSource.connect(this._audioProcessingNode);\n        this._audioProcessingNode.connect(this._audioContext.destination);\n    }\n\n    /**\n     * Disconnects the nodes in the {@code AudioContext}.\n     *\n     * @protected\n     * @returns {void}\n     */\n    _disconnectAudioGraph() {\n        this._audioProcessingNode.onaudioprocess = undefined;\n        this._audioProcessingNode.disconnect();\n        this._audioSource.disconnect();\n    }\n\n    /**\n     * Replaces the current microphone MediaStream.\n     *\n     * @protected\n     * @param {string} micDeviceId - New microphone ID.\n     * @returns {Promise}\n     */\n    _replaceMic(micDeviceId) {\n        if (this._audioContext && this._audioProcessingNode) {\n            return this._getAudioStream(micDeviceId).then(newStream => {\n                const newSource = this._audioContext\n                    .createMediaStreamSource(newStream);\n\n                this._audioSource.disconnect();\n                newSource.connect(this._audioProcessingNode);\n                this._stream = newStream;\n                this._audioSource = newSource;\n            });\n        }\n\n        return Promise.resolve();\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nconst logger = getLogger(__filename);\n\nimport { AbstractAudioContextAdapter } from './AbstractAudioContextAdapter';\n\nconst WAV_BITS_PER_SAMPLE = 16;\n\n/**\n * Recording adapter for raw WAVE format.\n */\nexport class WavAdapter extends AbstractAudioContextAdapter {\n\n    /**\n     * Length of the WAVE file, in number of samples.\n     */\n    _wavLength = 0;\n\n    /**\n     * The {@code ArrayBuffer}s that stores the PCM bits.\n     */\n    _wavBuffers = [];\n\n    /**\n     * Whether or not the {@code WavAdapter} is in a ready state.\n     */\n    _isInitialized = false;\n\n    /**\n     * Initialization promise.\n     */\n    _initPromise = null;\n\n    /**\n     * Constructor.\n     */\n    constructor() {\n        super();\n        this._onAudioProcess = this._onAudioProcess.bind(this);\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#start()}.\n     *\n     * @inheritdoc\n     */\n    start(micDeviceId) {\n        if (!this._initPromise) {\n            this._initPromise = this._initialize(micDeviceId);\n        }\n\n        return this._initPromise.then(() => {\n            this._wavBuffers = [];\n            this._wavLength = 0;\n\n            this._connectAudioGraph();\n        });\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#stop()}.\n     *\n     * @inheritdoc\n     */\n    stop() {\n        this._disconnectAudioGraph();\n        this._data = this._exportMonoWAV(this._wavBuffers, this._wavLength);\n        this._audioProcessingNode = null;\n        this._audioSource = null;\n        this._isInitialized = false;\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#exportRecordedData()}.\n     *\n     * @inheritdoc\n     */\n    exportRecordedData() {\n        if (this._data !== null) {\n            return Promise.resolve({\n                data: this._data,\n                format: 'wav'\n            });\n        }\n\n        return Promise.reject('No audio data recorded.');\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#setMuted()}.\n     *\n     * @inheritdoc\n     */\n    setMuted(muted) {\n        const shouldEnable = !muted;\n\n        if (!this._stream) {\n            return Promise.resolve();\n        }\n\n        const track = this._stream.getAudioTracks()[0];\n\n        if (!track) {\n            logger.error('Cannot mute/unmute. Track not found!');\n\n            return Promise.resolve();\n        }\n\n        if (track.enabled !== shouldEnable) {\n            track.enabled = shouldEnable;\n            logger.log(muted ? 'Mute' : 'Unmute');\n        }\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#setMicDevice()}.\n     *\n     * @inheritdoc\n     */\n    setMicDevice(micDeviceId) {\n        return this._replaceMic(micDeviceId);\n    }\n\n    /**\n     * Creates a WAVE file header.\n     *\n     * @private\n     * @param {number} dataLength - Length of the payload (PCM data), in bytes.\n     * @returns {Uint8Array}\n     */\n    _createWavHeader(dataLength) {\n        // adapted from\n        // https://github.com/mmig/speech-to-flac/blob/master/encoder.js\n\n        // ref: http://soundfile.sapp.org/doc/WaveFormat/\n\n        // create our WAVE file header\n        const buffer = new ArrayBuffer(44);\n        const view = new DataView(buffer);\n\n        // RIFF chunk descriptor\n        writeUTFBytes(view, 0, 'RIFF');\n\n        // set file size at the end\n        writeUTFBytes(view, 8, 'WAVE');\n\n        // FMT sub-chunk\n        writeUTFBytes(view, 12, 'fmt ');\n        view.setUint32(16, 16, true);\n        view.setUint16(20, 1, true);\n\n        // NumChannels\n        view.setUint16(22, 1, true);\n\n        // SampleRate\n        view.setUint32(24, this._sampleRate, true);\n\n        // ByteRate\n        view.setUint32(28,\n            Number(this._sampleRate) * 1 * WAV_BITS_PER_SAMPLE / 8, true);\n\n        // BlockAlign\n        view.setUint16(32, 1 * Number(WAV_BITS_PER_SAMPLE) / 8, true);\n\n        view.setUint16(34, WAV_BITS_PER_SAMPLE, true);\n\n        // data sub-chunk\n        writeUTFBytes(view, 36, 'data');\n\n        // file length\n        view.setUint32(4, 32 + dataLength, true);\n\n        // data chunk length\n        view.setUint32(40, dataLength, true);\n\n        return new Uint8Array(buffer);\n    }\n\n    /**\n     * Initialize the adapter.\n     *\n     * @private\n     * @param {string} micDeviceId - The current microphone device ID.\n     * @returns {Promise}\n     */\n    _initialize(micDeviceId) {\n        if (this._isInitialized) {\n            return Promise.resolve();\n        }\n\n        return this._initializeAudioContext(micDeviceId, this._onAudioProcess)\n            .then(() => {\n                this._isInitialized = true;\n            });\n    }\n\n    /**\n     * Callback function for handling AudioProcessingEvents.\n     *\n     * @private\n     * @param {AudioProcessingEvent} e - The event containing the raw PCM.\n     * @returns {void}\n     */\n    _onAudioProcess(e) {\n        // See: https://developer.mozilla.org/en-US/docs/Web/API/\n        //      AudioBuffer/getChannelData\n        // The returned value is an Float32Array.\n        const channelLeft = e.inputBuffer.getChannelData(0);\n\n        // Need to copy the Float32Array:\n        // unlike passing to WebWorker, this data is passed by reference,\n        // so we need to copy it, otherwise the resulting audio file will be\n        // just repeating the last segment.\n        this._wavBuffers.push(new Float32Array(channelLeft));\n        this._wavLength += channelLeft.length;\n    }\n\n    /**\n     * Combines buffers and export to a wav file.\n     *\n     * @private\n     * @param {Float32Array[]} buffers - The stored buffers.\n     * @param {number} length - Total length (number of samples).\n     * @returns {Blob}\n     */\n    _exportMonoWAV(buffers, length) {\n        const dataLength = length * 2; // each sample = 16 bit = 2 bytes\n        const buffer = new ArrayBuffer(44 + dataLength);\n        const view = new DataView(buffer);\n\n        // copy WAV header data into the array buffer\n        const header = this._createWavHeader(dataLength);\n        const len = header.length;\n\n        for (let i = 0; i < len; ++i) {\n            view.setUint8(i, header[i]);\n        }\n\n        // write audio data\n        floatTo16BitPCM(view, 44, buffers);\n\n        return new Blob([ view ], { type: 'audio/wav' });\n    }\n}\n\n\n/**\n * Helper function. Writes a UTF string to memory\n * using big endianness. Required by WAVE headers.\n *\n * @param {ArrayBuffer} view - The view to memory.\n * @param {number} offset - Offset.\n * @param {string} string - The string to be written.\n * @returns {void}\n */\nfunction writeUTFBytes(view, offset, string) {\n    const lng = string.length;\n\n    // convert to big endianness\n    for (let i = 0; i < lng; ++i) {\n        view.setUint8(offset + i, string.charCodeAt(i));\n    }\n}\n\n/**\n * Helper function for converting Float32Array to Int16Array.\n *\n * @param {DataView} output - View to the output buffer.\n * @param {number} offset - The offset in output buffer to write from.\n * @param {Float32Array[]} inputBuffers - The input buffers.\n * @returns {void}\n */\nfunction floatTo16BitPCM(output, offset, inputBuffers) {\n\n    let i, j;\n    let input, s, sampleCount;\n    const bufferCount = inputBuffers.length;\n    let o = offset;\n\n    for (i = 0; i < bufferCount; ++i) {\n        input = inputBuffers[i];\n        sampleCount = input.length;\n        for (j = 0; j < sampleCount; ++j, o += 2) {\n            s = Math.max(-1, Math.min(1, input[j]));\n            output.setInt16(o, s < 0 ? s * 0x8000 : s * 0x7FFF, true);\n        }\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nconst logger = getLogger(__filename);\nimport { AbstractAudioContextAdapter } from '../AbstractAudioContextAdapter';\n\nimport {\n    DEBUG,\n    MAIN_THREAD_FINISH,\n    MAIN_THREAD_INIT,\n    MAIN_THREAD_NEW_DATA_ARRIVED,\n    WORKER_BLOB_READY,\n    WORKER_LIBFLAC_READY\n} from './messageTypes';\n\n\n/**\n * Recording adapter that uses libflac.js in the background.\n */\nexport class FlacAdapter extends AbstractAudioContextAdapter {\n\n    /**\n     * Instance of WebWorker (flacEncodeWorker).\n     */\n    _encoder = null;\n\n    /**\n     * Resolve function of the Promise returned by {@code stop()}.\n     * This is called after the WebWorker sends back {@code WORKER_BLOB_READY}.\n     */\n    _stopPromiseResolver = null;\n\n    /**\n     * Resolve function of the Promise that initializes the flacEncodeWorker.\n     */\n    _initWorkerPromiseResolver = null;\n\n    /**\n     * Initialization promise.\n     */\n    _initPromise = null;\n\n    /**\n     * Constructor.\n     */\n    constructor() {\n        super();\n        this._onAudioProcess = this._onAudioProcess.bind(this);\n        this._onWorkerMessage = this._onWorkerMessage.bind(this);\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#start()}.\n     *\n     * @inheritdoc\n     */\n    start(micDeviceId) {\n        if (!this._initPromise) {\n            this._initPromise = this._initialize(micDeviceId);\n        }\n\n        return this._initPromise.then(() => {\n            this._connectAudioGraph();\n        });\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#stop()}.\n     *\n     * @inheritdoc\n     */\n    stop() {\n        if (!this._encoder) {\n            logger.error('Attempting to stop but has nothing to stop.');\n\n            return Promise.reject();\n        }\n\n        return new Promise(resolve => {\n            this._initPromise = null;\n            this._disconnectAudioGraph();\n            this._stopPromiseResolver = resolve;\n            this._encoder.postMessage({\n                command: MAIN_THREAD_FINISH\n            });\n        });\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#exportRecordedData()}.\n     *\n     * @inheritdoc\n     */\n    exportRecordedData() {\n        if (this._data !== null) {\n            return Promise.resolve({\n                data: this._data,\n                format: 'flac'\n            });\n        }\n\n        return Promise.reject('No audio data recorded.');\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#setMuted()}.\n     *\n     * @inheritdoc\n     */\n    setMuted(muted) {\n        const shouldEnable = !muted;\n\n        if (!this._stream) {\n            return Promise.resolve();\n        }\n\n        const track = this._stream.getAudioTracks()[0];\n\n        if (!track) {\n            logger.error('Cannot mute/unmute. Track not found!');\n\n            return Promise.resolve();\n        }\n\n        if (track.enabled !== shouldEnable) {\n            track.enabled = shouldEnable;\n            logger.log(muted ? 'Mute' : 'Unmute');\n        }\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#setMicDevice()}.\n     *\n     * @inheritdoc\n     */\n    setMicDevice(micDeviceId) {\n        return this._replaceMic(micDeviceId);\n    }\n\n    /**\n     * Initialize the adapter.\n     *\n     * @private\n     * @param {string} micDeviceId - The current microphone device ID.\n     * @returns {Promise}\n     */\n    _initialize(micDeviceId) {\n        if (this._encoder !== null) {\n            return Promise.resolve();\n        }\n\n        const promiseInitWorker = new Promise((resolve, reject) => {\n            try {\n                this._loadWebWorker();\n            } catch (e) {\n                reject();\n            }\n\n            // Save the Promise's resolver to resolve it later.\n            // This Promise is only resolved in _onWorkerMessage when we\n            // receive WORKER_LIBFLAC_READY from the WebWorker.\n            this._initWorkerPromiseResolver = resolve;\n\n            // set up listener for messages from the WebWorker\n            this._encoder.onmessage = this._onWorkerMessage;\n\n            this._encoder.postMessage({\n                command: MAIN_THREAD_INIT,\n                config: {\n                    sampleRate: this._sampleRate,\n                    bps: 16\n                }\n            });\n        });\n\n        // Arrow function is used here because we want AudioContext to be\n        // initialized only **after** promiseInitWorker is resolved.\n        return promiseInitWorker\n            .then(() =>\n                this._initializeAudioContext(\n                    micDeviceId,\n                    this._onAudioProcess\n                ));\n    }\n\n    /**\n     * Callback function for handling AudioProcessingEvents.\n     *\n     * @private\n     * @param {AudioProcessingEvent} e - The event containing the raw PCM.\n     * @returns {void}\n     */\n    _onAudioProcess(e) {\n        // Delegates to the WebWorker to do the encoding.\n        // The return of getChannelData() is a Float32Array,\n        // each element representing one sample.\n        const channelLeft = e.inputBuffer.getChannelData(0);\n\n        this._encoder.postMessage({\n            command: MAIN_THREAD_NEW_DATA_ARRIVED,\n            buf: channelLeft\n        });\n    }\n\n    /**\n     * Handler for messages from flacEncodeWorker.\n     *\n     * @private\n     * @param {MessageEvent} e - The event sent by the WebWorker.\n     * @returns {void}\n     */\n    _onWorkerMessage(e) {\n        switch (e.data.command) {\n        case WORKER_BLOB_READY:\n            // Received a Blob representing an encoded FLAC file.\n            this._data = e.data.buf;\n            if (this._stopPromiseResolver !== null) {\n                this._stopPromiseResolver();\n                this._stopPromiseResolver = null;\n                this._encoder.terminate();\n                this._encoder = null;\n            }\n            break;\n        case DEBUG:\n            logger.log(e.data);\n            break;\n        case WORKER_LIBFLAC_READY:\n            logger.log('libflac is ready.');\n            this._initWorkerPromiseResolver();\n            break;\n        default:\n            logger.error(\n                `Unknown event\n                from encoder (WebWorker): \"${e.data.command}\"!`);\n            break;\n        }\n    }\n\n    /**\n     * Loads the WebWorker.\n     *\n     * @private\n     * @returns {void}\n     */\n    _loadWebWorker() {\n        const blob = new Blob([\"importScripts('https://sdk.sariska.io/flacEncodeWorker.min.js');\"], {\"type\": 'application/javascript'});\n        const url = window.URL || window.webkitURL;\n        const blobUrl = url.createObjectURL(blob);\n        this._encoder = new Worker(blobUrl);\n        URL.revokeObjectURL(blobUrl);\n    }\n}","/**\n * Types of messages that are passed between the main thread and the WebWorker\n * ({@code flacEncodeWorker})\n */\n\n// Messages sent by the main thread\n\n/**\n * Message type that signals the termination of encoding,\n * after which no new audio bits should be sent to the\n * WebWorker.\n */\nexport const MAIN_THREAD_FINISH = 'MAIN_THREAD_FINISH';\n\n/**\n * Message type that carries initial parameters for\n * the WebWorker.\n */\nexport const MAIN_THREAD_INIT = 'MAIN_THREAD_INIT';\n\n/**\n * Message type that carries the newly received raw audio bits\n * for the WebWorker to encode.\n */\nexport const MAIN_THREAD_NEW_DATA_ARRIVED = 'MAIN_THREAD_NEW_DATA_ARRIVED';\n\n// Messages sent by the WebWorker\n\n/**\n * Message type that signals libflac is ready to receive audio bits.\n */\nexport const WORKER_LIBFLAC_READY = 'WORKER_LIBFLAC_READY';\n\n/**\n * Message type that carries the encoded FLAC file as a Blob.\n */\nexport const WORKER_BLOB_READY = 'WORKER_BLOB_READY';\n\n// Messages sent by either the main thread or the WebWorker\n\n/**\n * Debug messages.\n */\nexport const DEBUG = 'DEBUG';\n","/* @flow */\n\nimport Bourne from '@hapi/bourne';\nimport { jitsiLocalStorage } from '@jitsi/js-utils';\n\nimport { getLogger } from '@jitsi/logger';\nconst logger = getLogger(__filename);\n\n/**\n * Gets high precision system time.\n *\n * @returns {number}\n */\nfunction highPrecisionTime() {\n    return window.performance\n        && window.performance.now\n        && window.performance.timing\n        && window.performance.timing.navigationStart\n        ? window.performance.now() + window.performance.timing.navigationStart\n        : Date.now();\n}\n\n// Have to use string literal here, instead of Symbols,\n// because these values need to be JSON-serializible.\n\n/**\n * Types of SessionEvents.\n */\nconst SessionEventType = Object.freeze({\n    /**\n     * Start of local recording session. This is recorded when the\n     * {@code RecordingController} receives the signal to start local recording,\n     * before the actual adapter is engaged.\n     */\n    SESSION_STARTED: 'SESSION_STARTED',\n\n    /**\n     * Start of a continuous segment. This is recorded when the adapter is\n     * engaged. Can happen multiple times in a local recording session,\n     * due to browser reloads or switching of recording device.\n     */\n    SEGMENT_STARTED: 'SEGMENT_STARTED',\n\n    /**\n     * End of a continuous segment. This is recorded when the adapter unengages.\n     */\n    SEGMENT_ENDED: 'SEGMENT_ENDED'\n});\n\n/**\n * Represents an event during a local recording session.\n * The event can be either that the adapter started recording, or stopped\n * recording.\n */\n// type SessionEvent = {\n\n//     /**\n//      * The type of the event.\n//      * Should be one of the values in {@code SessionEventType}.\n//      */\n//     type: string,\n\n//     /**\n//      * The timestamp of the event.\n//      */\n//     timestamp: number\n// };\n\n/**\n * Representation of the metadata of a segment.\n */\n// type SegmentInfo = {\n\n//     /**\n//      * The length of gap before this segment, in milliseconds.\n//      * mull if unknown.\n//      */\n//     gapBefore?: ?number,\n\n//     /**\n//      * The duration of this segment, in milliseconds.\n//      * null if unknown or the segment is not finished.\n//      */\n//     duration?: ?number,\n\n//     /**\n//      * The start time, in milliseconds.\n//      */\n//     start?: ?number,\n\n//     /**\n//      * The end time, in milliseconds.\n//      * null if unknown, the segment is not finished, or the recording is\n//      * interrupted (e.g. browser reload).\n//      */\n//     end?: ?number\n// };\n\n/**\n * Representation of metadata of a local recording session.\n */\n// type SessionInfo = {\n\n//     /**\n//      * The session token.\n//      */\n//     sessionToken: string,\n\n//     /**\n//      * The start time of the session.\n//      */\n//     start: ?number,\n\n//     /**\n//      * The recording format.\n//      */\n//     format: string,\n\n//     /**\n//      * Array of segments in the session.\n//      */\n//     segments: SegmentInfo[]\n// }\n\n/**\n * {@code localStorage} key.\n */\nconst LOCAL_STORAGE_KEY = 'localRecordingMetadataVersion1';\n\n/**\n * SessionManager manages the metadata of each segment during each local\n * recording session.\n *\n * A segment is a continuous portion of recording done using the same adapter\n * on the same microphone device.\n *\n * Browser refreshes, switching of microphone will cause new segments to be\n * created.\n *\n * A recording session can consist of one or more segments.\n */\nclass SessionManager {\n\n    /**\n     * The metadata.\n     */\n    _sessionsMetadata = {\n    };\n\n    /**\n     * Constructor.\n     */\n    constructor() {\n        this._loadMetadata();\n    }\n\n    /**\n     * Loads metadata from localStorage.\n     *\n     * @private\n     * @returns {void}\n     */\n    _loadMetadata() {\n        const dataStr = jitsiLocalStorage.getItem(LOCAL_STORAGE_KEY);\n\n        if (dataStr !== null) {\n            try {\n                const dataObject = Bourne.parse(dataStr);\n\n                this._sessionsMetadata = dataObject;\n            } catch (e) {\n                logger.warn('Failed to parse localStorage item.');\n\n                return;\n            }\n        }\n    }\n\n    /**\n     * Persists metadata to localStorage.\n     *\n     * @private\n     * @returns {void}\n     */\n    _saveMetadata() {\n        jitsiLocalStorage.setItem(LOCAL_STORAGE_KEY,\n            JSON.stringify(this._sessionsMetadata));\n    }\n\n    /**\n     * Creates a session if not exists.\n     *\n     * @param {string} sessionToken - The local recording session token.\n     * @param {string} format - The local recording format.\n     * @returns {void}\n     */\n    createSession(sessionToken, format) {\n        if (this._sessionsMetadata[sessionToken] === undefined) {\n            this._sessionsMetadata[sessionToken] = {\n                format,\n                events: []\n            };\n            this._sessionsMetadata[sessionToken].events.push({\n                type: SessionEventType.SESSION_STARTED,\n                timestamp: highPrecisionTime()\n            });\n            this._saveMetadata();\n        } else {\n            logger.warn(`Session ${sessionToken} already exists`);\n        }\n    }\n\n    /**\n     * Gets all the Sessions.\n     *\n     * @returns {SessionInfo[]}\n     */\n    getSessions(){\n        const sessionTokens = Object.keys(this._sessionsMetadata);\n        const output = [];\n\n        for (let i = 0; i < sessionTokens.length; ++i) {\n            const thisSession = this._sessionsMetadata[sessionTokens[i]];\n            const newSessionInfo = {\n                start: thisSession.events[0].timestamp,\n                format: thisSession.format,\n                sessionToken: sessionTokens[i],\n                segments: this.getSegments(sessionTokens[i])\n            };\n\n            output.push(newSessionInfo);\n        }\n\n        output.sort((a, b) => (a.start || 0) - (b.start || 0));\n\n        return output;\n    }\n\n    /**\n     * Removes session metadata.\n     *\n     * @param {string} sessionToken - The session token.\n     * @returns {void}\n     */\n    removeSession(sessionToken) {\n        delete this._sessionsMetadata[sessionToken];\n        this._saveMetadata();\n    }\n\n    /**\n     * Get segments of a given Session.\n     *\n     * @param {string} sessionToken - The session token.\n     * @returns {SegmentInfo[]}\n     */\n    getSegments(sessionToken) {\n        const thisSession = this._sessionsMetadata[sessionToken];\n\n        if (thisSession) {\n            return this._constructSegments(thisSession.events);\n        }\n\n        return [];\n    }\n\n    /**\n     * Marks the start of a new segment.\n     * This should be invoked by {@code RecordingAdapter}s when they need to\n     * start asynchronous operations (such as switching tracks) that interrupts\n     * recording.\n     *\n     * @param {string} sessionToken - The token of the session to start a new\n     * segment in.\n     * @returns {number} - Current segment index.\n     */\n    beginSegment(sessionToken) {\n        if (this._sessionsMetadata[sessionToken] === undefined) {\n            logger.warn('Attempting to add segments to nonexistent'\n                + ` session ${sessionToken}`);\n\n            return -1;\n        }\n        this._sessionsMetadata[sessionToken].events.push({\n            type: SessionEventType.SEGMENT_STARTED,\n            timestamp: highPrecisionTime()\n        });\n        this._saveMetadata();\n\n        return this.getSegments(sessionToken).length - 1;\n    }\n\n    /**\n     * Gets the current segment index. Starting from 0 for the first\n     * segment.\n     *\n     * @param {string} sessionToken - The session token.\n     * @returns {number}\n     */\n    getCurrentSegmentIndex(sessionToken) {\n        if (this._sessionsMetadata[sessionToken] === undefined) {\n            return -1;\n        }\n        const segments = this.getSegments(sessionToken);\n\n        if (segments.length === 0) {\n            return -1;\n        }\n\n        const lastSegment = segments[segments.length - 1];\n\n        if (lastSegment.end) {\n            // last segment is already ended\n            return -1;\n        }\n\n        return segments.length - 1;\n    }\n\n    /**\n     * Marks the end of the last segment in a session.\n     *\n     * @param {string} sessionToken - The session token.\n     * @returns {void}\n     */\n    endSegment(sessionToken) {\n        if (this._sessionsMetadata[sessionToken] === undefined) {\n            logger.warn('Attempting to end a segment in nonexistent'\n                + ` session ${sessionToken}`);\n        } else {\n            this._sessionsMetadata[sessionToken].events.push({\n                type: SessionEventType.SEGMENT_ENDED,\n                timestamp: highPrecisionTime()\n            });\n            this._saveMetadata();\n        }\n    }\n\n    /**\n     * Constructs an array of {@code SegmentInfo} from an array of\n     * {@code SessionEvent}s.\n     *\n     * @private\n     * @param {SessionEvent[]} events - The array of {@code SessionEvent}s.\n     * @returns {SegmentInfo[]}\n     */\n    _constructSegments(events) {\n        if (events.length === 0) {\n            return [];\n        }\n\n        const output = [];\n        let sessionStartTime = null;\n        let currentSegment = {};\n\n        /**\n         * Helper function for adding a new {@code SegmentInfo} object to the\n         * output.\n         *\n         * @returns {void}\n         */\n        function commit() {\n            if (currentSegment.gapBefore === undefined\n                || currentSegment.gapBefore === null) {\n                if (output.length > 0 && output[output.length - 1].end) {\n                    const lastSegment = output[output.length - 1];\n\n                    if (currentSegment.start && lastSegment.end) {\n                        currentSegment.gapBefore = currentSegment.start\n                            - lastSegment.end;\n                    } else {\n                        currentSegment.gapBefore = null;\n                    }\n                } else if (sessionStartTime !== null && output.length === 0) {\n                    currentSegment.gapBefore = currentSegment.start\n                        ? currentSegment.start - sessionStartTime\n                        : null;\n                } else {\n                    currentSegment.gapBefore = null;\n                }\n            }\n            currentSegment.duration = currentSegment.end && currentSegment.start\n                ? currentSegment.end - currentSegment.start\n                : null;\n            output.push(currentSegment);\n            currentSegment = {};\n        }\n\n        for (let i = 0; i < events.length; ++i) {\n            const currentEvent = events[i];\n\n            switch (currentEvent.type) {\n            case SessionEventType.SESSION_STARTED:\n                if (sessionStartTime === null) {\n                    sessionStartTime = currentEvent.timestamp;\n                } else {\n                    logger.warn('Unexpected SESSION_STARTED event.'\n                        , currentEvent);\n                }\n                break;\n            case SessionEventType.SEGMENT_STARTED:\n                if (currentSegment.start === undefined\n                    || currentSegment.start === null) {\n                    currentSegment.start = currentEvent.timestamp;\n                } else {\n                    commit();\n                    currentSegment.start = currentEvent.timestamp;\n                }\n                break;\n\n            case SessionEventType.SEGMENT_ENDED:\n                if (currentSegment.start === undefined\n                    || currentSegment.start === null) {\n                    logger.warn('Unexpected SEGMENT_ENDED event', currentEvent);\n                } else {\n                    currentSegment.end = currentEvent.timestamp;\n                    commit();\n                }\n                break;\n\n            default:\n                logger.warn('Unexpected error during _constructSegments');\n                break;\n            }\n        }\n        if (currentSegment.start) {\n            commit();\n        }\n\n        return output;\n    }\n\n}\n\n/**\n * Global singleton of {@code SessionManager}.\n */\nexport const sessionManager = new SessionManager();\n\n// For debug only. To remove later.\nwindow.sessionManager = sessionManager;\n","/* @flow */\n\nimport Bourne from '@hapi/bourne';\nimport { getLogger } from '@jitsi/logger';\nconst logger = getLogger(__filename);\n\nimport {\n    FlacAdapter,\n    OggAdapter,\n    WavAdapter,\n    downloadBlob\n} from '../recording';\nimport { sessionManager } from '../session';\n\n/**\n * XMPP command for signaling the start of local recording to all clients.\n * Should be sent by the moderator only.\n */\nconst COMMAND_START = 'localRecStart';\n\n/**\n * XMPP command for signaling the stop of local recording to all clients.\n * Should be sent by the moderator only.\n */\nconst COMMAND_STOP = 'localRecStop';\n\n/**\n * One-time command used to trigger the moderator to resend the commands.\n * This is a workaround for newly-joined clients to receive remote presence.\n */\nconst COMMAND_PING = 'localRecPing';\n\n/**\n * One-time command sent upon receiving a {@code COMMAND_PING}.\n * Only the moderator sends this command.\n * This command does not carry any information itself, but rather forces the\n * XMPP server to resend the remote presence.\n */\nconst COMMAND_PONG = 'localRecPong';\n\n/**\n * Participant property key for local recording stats.\n */\nconst PROPERTY_STATS = 'localRecStats';\n\n/**\n * Supported recording formats.\n */\nconst RECORDING_FORMATS = new Set([ 'flac', 'wav', 'ogg' ]);\n\n/**\n * Default recording format.\n */\nconst DEFAULT_RECORDING_FORMAT = 'flac';\n\n/**\n * States of the {@code RecordingController}.\n */\nconst ControllerState = Object.freeze({\n    /**\n     * Idle (not recording).\n     */\n    IDLE: Symbol('IDLE'),\n\n    /**\n     * Starting.\n     */\n    STARTING: Symbol('STARTING'),\n\n    /**\n     * Engaged (recording).\n     */\n    RECORDING: Symbol('RECORDING'),\n\n    /**\n     * Stopping.\n     */\n    STOPPING: Symbol('STOPPING'),\n\n    /**\n     * Failed, due to error during starting / stopping process.\n     */\n    FAILED: Symbol('FAILED')\n});\n\n/**\n * Type of the stats reported by each participant (client).\n */\n// type RecordingStats = {\n\n//     /**\n//      * Current local recording session token used by the participant.\n//      */\n//     currentSessionToken: number,\n\n//     /**\n//      * Whether local recording is engaged on the participant's device.\n//      */\n//     isRecording: boolean,\n\n//     /**\n//      * Total recorded bytes. (Reserved for future use.)\n//      */\n//     recordedBytes: number,\n\n//     /**\n//      * Total recording duration. (Reserved for future use.)\n//      */\n//     recordedLength: number\n// }\n\n/**\n * The component responsible for the coordination of local recording, across\n * multiple participants.\n * Current implementation requires that there is only one moderator in a room.\n */\nexport class RecordingController {\n\n    /**\n     * For each recording session, there is a separate @{code RecordingAdapter}\n     * instance so that encoded bits from the previous sessions can still be\n     * retrieved after they ended.\n     *\n     * @private\n     */\n    _adapters = {};\n\n    /**\n     * The {@code JitsiConference} instance.\n     *\n     * @private\n     */\n    _conference = null;\n\n    /**\n     * Current recording session token.\n     * Session token is a number generated by the moderator, to ensure every\n     * client is in the same recording state.\n     *\n     * @private\n     */\n    _currentSessionToken = -1;\n\n    /**\n     * Current state of {@code RecordingController}.\n     *\n     * @private\n     */\n    _state = ControllerState.IDLE;\n\n    /**\n     * Whether or not the audio is muted in the UI. This is stored as internal\n     * state of {@code RecordingController} because we might have recording\n     * sessions that start muted.\n     */\n    _isMuted = false;\n\n    /**\n     * The ID of the active microphone.\n     *\n     * @private\n     */\n    _micDeviceId = 'default';\n\n    /**\n     * Current recording format. This will be in effect from the next\n     * recording session, i.e., if this value is changed during an on-going\n     * recording session, that on-going session will not use the new format.\n     *\n     * @private\n     */\n    _format = DEFAULT_RECORDING_FORMAT;\n\n    /**\n     * Whether or not the {@code RecordingController} has registered for\n     * XMPP events. Prevents initialization from happening multiple times.\n     *\n     * @private\n     */\n    _registered = false;\n\n\n    constructor() {\n        this.registerEvents = this.registerEvents.bind(this);\n        this.getParticipantsStats = this.getParticipantsStats.bind(this);\n        this._onStartCommand = this._onStartCommand.bind(this);\n        this._onStopCommand = this._onStopCommand.bind(this);\n        this._onPingCommand = this._onPingCommand.bind(this);\n        this._doStartRecording = this._doStartRecording.bind(this);\n        this._doStopRecording = this._doStopRecording.bind(this);\n        this._updateStats = this._updateStats.bind(this);\n        this._switchToNewSession = this._switchToNewSession.bind(this);\n    }\n    /**\n     * Registers listeners for XMPP events.\n     *\n     * @param {JitsiConference} conference - A {@code JitsiConference} instance.\n     * @returns {void}\n     */\n    registerEvents(conference) {\n        if (!this._registered) {\n            this._conference = conference;\n            if (this._conference) {\n                this._conference\n                    .addCommandListener(COMMAND_STOP, this._onStopCommand);\n                this._conference\n                    .addCommandListener(COMMAND_START, this._onStartCommand);\n                this._conference\n                    .addCommandListener(COMMAND_PING, this._onPingCommand);\n                this._registered = true;\n            }\n            if (!this._conference.isModerator()) {\n                this._conference.sendCommandOnce(COMMAND_PING, {});\n            }\n        }\n    }\n\n    /**\n     * Sets the event handler for {@code onStateChanged}.\n     *\n     * @param {Function} delegate - The event handler.\n     * @returns {void}\n     */\n    set onStateChanged(delegate) {\n        this._onStateChanged = delegate;\n    }\n\n    /**\n     * Sets the event handler for {@code onNotify}.\n     *\n     * @param {Function} delegate - The event handler.\n     * @returns {void}\n     */\n    set onNotify(delegate) {\n        this._onNotify = delegate;\n    }\n\n    /**\n     * Sets the event handler for {@code onWarning}.\n     *\n     * @param {Function} delegate - The event handler.\n     * @returns {void}\n     */\n    set onWarning(delegate) {\n        this._onWarning = delegate;\n    }\n\n    /**\n     * Signals the participants to start local recording.\n     *\n     * @returns {void}\n     */\n    startRecording(format) {\n        this.registerEvents();\n        this.switchFormat(format);\n        if (this._conference && this._conference.isModerator()) {\n            this._conference.removeCommand(COMMAND_STOP);\n            this._conference.sendCommand(COMMAND_START, {\n                attributes: {\n                    sessionToken: this._getRandomToken(),\n                    format: this._format\n                }\n            });\n        } else if (this._onWarning) {\n            this._onWarning('localRecording.messages.notModerator');\n        }\n    }\n\n    /**\n     * Signals the participants to stop local recording.\n     *\n     * @returns {void}\n     */\n    stopRecording() {\n        if (this._conference) {\n            if (this._conference.isModerator()) {\n                this._conference.removeCommand(COMMAND_START);\n                this._conference.sendCommand(COMMAND_STOP, {\n                    attributes: {\n                        sessionToken: this._currentSessionToken\n                    }\n                });\n            } else if (this._onWarning) {\n                this._onWarning('localRecording.messages.notModerator');\n            }\n        }\n    }\n\n    /**\n     * Triggers the download of recorded data.\n     * Browser only.\n     *\n     * @param {number} sessionToken - The token of the session to download.\n     * @returns {void}\n     */\n    downloadRecordedData(sessionToken) {\n        if (this._adapters[sessionToken]) {\n            this._adapters[sessionToken].exportRecordedData()\n                .then(args => {\n                    const { data, format } = args;\n\n                    const filename = `session_${sessionToken}`\n                        + `_${this._conference.myUserId()}.${format}`;\n\n                    downloadBlob(data, filename);\n                })\n                .catch(error => {\n                    logger.error('Failed to download audio for'\n                        + ` session ${sessionToken}. Error: ${error}`);\n                });\n        } else {\n            logger.error(`Invalid session token for download ${sessionToken}`);\n        }\n    }\n\n    /**\n     * Changes the current microphone.\n     *\n     * @param {string} micDeviceId - The new microphone device ID.\n     * @returns {void}\n     */\n    setMicDevice(micDeviceId) {\n        if (micDeviceId !== this._micDeviceId) {\n            this._micDeviceId = String(micDeviceId);\n\n            if (this._state === ControllerState.RECORDING) {\n                // sessionManager.endSegment(this._currentSessionToken);\n                logger.log('Before switching microphone...');\n                this._adapters[this._currentSessionToken]\n                    .setMicDevice(this._micDeviceId)\n                    .then(() => {\n                        logger.log('Finished switching microphone.');\n\n                        // sessionManager.beginSegment(this._currentSesoken);\n                    })\n                    .catch(() => {\n                        logger.error('Failed to switch microphone');\n                    });\n            }\n            logger.log(`Switch microphone to ${this._micDeviceId}`);\n        }\n    }\n\n    /**\n     * Mute or unmute audio. When muted, the ongoing local recording should\n     * produce silence.\n     *\n     * @param {boolean} muted - If the audio should be muted.\n     * @returns {void}\n     */\n    setMuted(muted) {\n        this._isMuted = Boolean(muted);\n\n        if (this._state === ControllerState.RECORDING) {\n            this._adapters[this._currentSessionToken].setMuted(this._isMuted);\n        }\n    }\n\n    /**\n     * Switches the recording format.\n     *\n     * @param {string} newFormat - The new format.\n     * @returns {void}\n     */\n    switchFormat(newFormat) {\n        if (!RECORDING_FORMATS.has(newFormat)) {\n            logger.log(`Unknown format ${newFormat}. Ignoring...`);\n\n            return;\n        }\n        this._format = newFormat;\n        logger.log(`Recording format switched to ${newFormat}`);\n\n        // the new format will be used in the next recording session\n    }\n\n    /**\n     * Returns the local recording stats.\n     *\n     * @returns {RecordingStats}\n     */\n    getLocalStats() {\n        return {\n            currentSessionToken: this._currentSessionToken,\n            isRecording: this._state === ControllerState.RECORDING,\n            recordedBytes: 0,\n            recordedLength: 0\n        };\n    }\n    /**\n     * Returns the remote participants' local recording stats.\n     *\n     * @returns {*}\n     */\n    getParticipantsStats() {\n        const members\n            = this._conference.getParticipants()\n            .map(member => {\n                return {\n                    id: member.getId(),\n                    displayName: member.getDisplayName(),\n                    recordingStats:\n                        Bourne.parse(member.getProperty(PROPERTY_STATS) || '{}'),\n                    isSelf: false\n                };\n            });\n\n        // transform into a dictionary for consistent ordering\n        const result = {};\n\n        for (let i = 0; i < members.length; ++i) {\n            result[members[i].id] = members[i];\n        }\n        const localId = this._conference.myUserId();\n\n        result[localId] = {\n            id: localId,\n            displayName: 'localRecording.me',\n            recordingStats: this.getLocalStats(),\n            isSelf: true\n        };\n\n        return result;\n    }\n    /**\n     * Changes the current state of {@code RecordingController}.\n     *\n     * @private\n     * @param {Symbol} newState - The new state.\n     * @returns {void}\n     */\n    _changeState(newState) {\n        if (this._state !== newState) {\n            logger.log(`state change: ${this._state.toString()} -> `\n                + `${newState.toString()}`);\n            this._state = newState;\n        }\n    }\n    /**\n     * Sends out updates about the local recording stats via XMPP.\n     *\n     * @private\n     * @returns {void}\n     */\n    _updateStats() {\n        if (this._conference) {\n            this._conference.setLocalParticipantProperty(PROPERTY_STATS,\n                JSON.stringify(this.getLocalStats()));\n        }\n    }\n    /**\n     * Callback function for XMPP event.\n     *\n     * @private\n     * @param {*} value - The event args.\n     * @returns {void}\n     */\n    _onStartCommand(value) {\n        const { sessionToken, format } = value.attributes;\n\n        if (this._state === ControllerState.IDLE) {\n            this._changeState(ControllerState.STARTING);\n            this._switchToNewSession(sessionToken, format);\n            this._doStartRecording();\n        } else if (this._state === ControllerState.RECORDING\n            && this._currentSessionToken !== sessionToken) {\n            // There is local recording going on, but not for the same session.\n            // This means the current state might be out-of-sync with the\n            // moderator's, so we need to restart the recording.\n            this._changeState(ControllerState.STOPPING);\n            this._doStopRecording().then(() => {\n                this._changeState(ControllerState.STARTING);\n                this._switchToNewSession(sessionToken, format);\n                this._doStartRecording();\n            });\n        }\n    }\n    /**\n     * Callback function for XMPP event.\n     *\n     * @private\n     * @param {*} value - The event args.\n     * @returns {void}\n     */\n    _onStopCommand(value) {\n        if (this._state === ControllerState.RECORDING\n            && this._currentSessionToken === value.attributes.sessionToken) {\n            this._changeState(ControllerState.STOPPING);\n            this._doStopRecording();\n        }\n    }\n    /**\n     * Callback function for XMPP event.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onPingCommand() {\n        if (this._conference.isModerator()) {\n            logger.log('Received ping, sending pong.');\n            this._conference.sendCommandOnce(COMMAND_PONG, {});\n        }\n    }\n\n    /**\n     * Generates a token that can be used to distinguish each local recording\n     * session.\n     *\n     * @returns {number}\n     */\n    _getRandomToken() {\n        return Math.floor(Math.random() * 100000000) + 1;\n    }\n    /**\n     * Starts the recording locally.\n     *\n     * @private\n     * @returns {void}\n     */\n    _doStartRecording() {\n        if (this._state === ControllerState.STARTING) {\n            const delegate = this._adapters[this._currentSessionToken];\n\n            delegate.start(this._micDeviceId)\n            .then(() => {\n                this._changeState(ControllerState.RECORDING);\n                sessionManager.beginSegment(this._currentSessionToken);\n                logger.log('Local recording engaged.');\n\n                if (this._onNotify) {\n                    this._onNotify('localRecording.messages.engaged');\n                }\n                if (this._onStateChanged) {\n                    this._onStateChanged(true);\n                }\n\n                delegate.setMuted(this._isMuted);\n                this._updateStats();\n            })\n            .catch(err => {\n                logger.error('Failed to start local recording.', err);\n            });\n        }\n\n    }\n    /**\n     * Stops the recording locally.\n     *\n     * @private\n     * @returns {Promise<void>}\n     */\n    _doStopRecording() {\n        if (this._state === ControllerState.STOPPING) {\n            const token = this._currentSessionToken;\n\n            return this._adapters[this._currentSessionToken]\n                .stop()\n                .then(() => {\n                    this._changeState(ControllerState.IDLE);\n                    sessionManager.endSegment(this._currentSessionToken);\n                    logger.log('Local recording unengaged.');\n                    this.downloadRecordedData(token);\n\n                    const messageKey\n                        = this._conference.isModerator()\n                            ? 'localRecording.messages.finishedModerator'\n                            : 'localRecording.messages.finished';\n                    const messageParams = {\n                        token\n                    };\n\n                    if (this._onNotify) {\n                        this._onNotify(messageKey, messageParams);\n                    }\n                    if (this._onStateChanged) {\n                        this._onStateChanged(false);\n                    }\n                    this._updateStats();\n                })\n                .catch(err => {\n                    logger.error('Failed to stop local recording.', err);\n                });\n        }\n\n        /* eslint-disable */\n        return Promise.resolve();\n        // FIXME: better ways to satisfy flow and ESLint at the same time?\n        /* eslint-enable */\n\n    }\n    /**\n     * Switches to a new local recording session.\n     *\n     * @param {string} sessionToken - The session Token.\n     * @param {string} format - The recording format for the session.\n     * @returns {void}\n     */\n    _switchToNewSession(sessionToken, format) {\n        this._format = format;\n        this._currentSessionToken = sessionToken;\n        logger.log(`New session: ${this._currentSessionToken}, `\n            + `format: ${this._format}`);\n        this._adapters[sessionToken]\n             = this._createRecordingAdapter();\n        sessionManager.createSession(sessionToken, this._format);\n    }\n\n    /**\n     * Creates a recording adapter according to the current recording format.\n     *\n     * @private\n     * @returns {RecordingAdapter}\n     */\n    _createRecordingAdapter() {\n        logger.debug('[RecordingController] creating recording'\n            + ` adapter for ${this._format} format.`);\n\n        switch (this._format) {\n        case 'ogg':\n            return new OggAdapter();\n        case 'flac':\n            return new FlacAdapter();\n        case 'wav':\n            return new WavAdapter();\n        default:\n            throw new Error(`Unknown format: ${this._format}`);\n        }\n    }\n}","/**\n * Force download of Blob in browser by faking an <a> tag.\n *\n * @param {Blob} blob - Base64 URL.\n * @param {string} fileName - The filename to appear in the download dialog.\n * @returns {void}\n */\nexport function downloadBlob(blob, fileName = 'recording.ogg') {\n    const base64Url = window.URL.createObjectURL(blob);\n\n    // fake a anchor tag\n    const a = document.createElement('a');\n\n    a.style = 'display: none';\n    a.href = base64Url;\n    a.download = fileName;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n}\n","import { getLogger } from '@jitsi/logger';\nimport isEqual from 'lodash.isequal';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport FeatureFlags from '../flags/FeatureFlags';\n\nconst logger = getLogger(__filename);\nconst MAX_HEIGHT_ONSTAGE = 2160;\nconst MAX_HEIGHT_THUMBNAIL = 180;\nconst LASTN_UNLIMITED = -1;\n\n/**\n * This class translates the legacy signaling format between the client and the bridge (that affects bandwidth\n * allocation) to the new format described here https://github.com/jitsi/jitsi-videobridge/blob/master/doc/allocation.md\n */\nclass ReceiverVideoConstraints {\n    /**\n     * Creates a new instance.\n     */\n    constructor() {\n        // Default constraints used for endpoints that are not explicitly included in constraints.\n        // These constraints are used for endpoints that are thumbnails in the stage view.\n        this._defaultConstraints = { 'maxHeight': MAX_HEIGHT_THUMBNAIL };\n\n        // The number of videos requested from the bridge.\n        this._lastN = LASTN_UNLIMITED;\n\n        // The number representing the maximum video height the local client should receive from the bridge.\n        this._maxFrameHeight = MAX_HEIGHT_ONSTAGE;\n\n        // The endpoint IDs of the participants that are currently selected.\n        this._selectedEndpoints = [];\n\n        this._receiverVideoConstraints = {\n            constraints: {},\n            defaultConstraints: this.defaultConstraints,\n            lastN: this._lastN,\n            onStageEndpoints: [],\n            selectedEndpoints: this._selectedEndpoints\n        };\n    }\n\n    /**\n     * Returns the receiver video constraints that need to be sent on the bridge channel.\n     */\n    get constraints() {\n        this._receiverVideoConstraints.lastN = this._lastN;\n\n        if (!this._selectedEndpoints.length) {\n            return this._receiverVideoConstraints;\n        }\n\n        // The client is assumed to be in TileView if it has selected more than one endpoint, otherwise it is\n        // assumed to be in StageView.\n        this._receiverVideoConstraints.constraints = {};\n        if (this._selectedEndpoints.length > 1) {\n            /**\n             * Tile view.\n             * Only the default constraints are specified here along with lastN (if it is set).\n             * {\n             *  'colibriClass': 'ReceiverVideoConstraints',\n             *  'defaultConstraints': { 'maxHeight': 360 }\n             * }\n             */\n            this._receiverVideoConstraints.defaultConstraints = { 'maxHeight': this._maxFrameHeight };\n            this._receiverVideoConstraints.onStageEndpoints = [];\n            this._receiverVideoConstraints.selectedEndpoints = [];\n        } else {\n            /**\n             * Stage view.\n             * The participant on stage is specified in onStageEndpoints and a higher maxHeight is specified\n             * for that endpoint while a default maxHeight of 180 is applied to all the other endpoints.\n             * {\n             *  'colibriClass': 'ReceiverVideoConstraints',\n             *  'onStageEndpoints': ['A'],\n             *  'defaultConstraints': { 'maxHeight':  180 },\n             *  'constraints': {\n             *      'A': { 'maxHeight': 720 }\n             *   }\n             * }\n             */\n            this._receiverVideoConstraints.constraints[this._selectedEndpoints[0]] = {\n                'maxHeight': this._maxFrameHeight\n            };\n            this._receiverVideoConstraints.defaultConstraints = this._defaultConstraints;\n            this._receiverVideoConstraints.onStageEndpoints = this._selectedEndpoints;\n            this._receiverVideoConstraints.selectedEndpoints = [];\n        }\n\n        return this._receiverVideoConstraints;\n    }\n\n    /**\n     * Updates the lastN field of the ReceiverVideoConstraints sent to the bridge.\n     *\n     * @param {number} value\n     * @returns {boolean} Returns true if the the value has been updated, false otherwise.\n     */\n    updateLastN(value) {\n        const changed = this._lastN !== value;\n\n        if (changed) {\n            this._lastN = value;\n            logger.debug(`Updating ReceiverVideoConstraints lastN(${value})`);\n        }\n\n        return changed;\n    }\n\n    /**\n     * Updates the resolution (height requested) in the contraints field of the ReceiverVideoConstraints\n     * sent to the bridge.\n     *\n     * @param {number} maxFrameHeight\n     * @requires {boolean} Returns true if the the value has been updated, false otherwise.\n     */\n    updateReceiveResolution(maxFrameHeight) {\n        const changed = this._maxFrameHeight !== maxFrameHeight;\n\n        if (changed) {\n            this._maxFrameHeight = maxFrameHeight;\n            logger.debug(`Updating receive maxFrameHeight: ${maxFrameHeight}`);\n        }\n\n        return changed;\n    }\n\n    /**\n     * Updates the receiver constraints sent to the bridge.\n     *\n     * @param {Object} videoConstraints\n     * @returns {boolean} Returns true if the the value has been updated, false otherwise.\n     */\n    updateReceiverVideoConstraints(videoConstraints) {\n        const changed = !isEqual(this._receiverVideoConstraints, videoConstraints);\n\n        if (changed) {\n            this._receiverVideoConstraints = videoConstraints;\n            logger.debug(`Updating ReceiverVideoConstraints ${JSON.stringify(videoConstraints)}`);\n        }\n\n        return changed;\n    }\n\n    /**\n     * Updates the list of selected endpoints.\n     *\n     * @param {Array<string>} ids\n     * @returns {void}\n     */\n    updateSelectedEndpoints(ids) {\n        logger.debug(`Updating selected endpoints: ${JSON.stringify(ids)}`);\n        this._selectedEndpoints = ids;\n    }\n}\n\n/**\n * This class manages the receive video contraints for a given {@link JitsiConference}. These constraints are\n * determined by the application based on how the remote video streams need to be displayed. This class is responsible\n * for communicating these constraints to the bridge over the bridge channel.\n */\nexport default class ReceiveVideoController {\n    /**\n     * Creates a new instance for a given conference.\n     *\n     * @param {JitsiConference} conference the conference instance for which the new instance will be managing\n     * the receive video quality constraints.\n     * @param {RTC} rtc the rtc instance which is responsible for initializing the bridge channel.\n     */\n    constructor(conference, rtc) {\n        this._conference = conference;\n        this._rtc = rtc;\n\n        const { config } = conference.options;\n\n        // The number of videos requested from the bridge, -1 represents unlimited or all available videos.\n        this._lastN = config?.startLastN ?? (config?.channelLastN || LASTN_UNLIMITED);\n\n        // The number representing the maximum video height the local client should receive from the bridge.\n        this._maxFrameHeight = MAX_HEIGHT_ONSTAGE;\n\n        // Enable new receiver constraints by default unless it is explicitly disabled through config.js.\n        const useNewReceiverConstraints = config?.useNewBandwidthAllocationStrategy ?? true;\n\n        if (useNewReceiverConstraints) {\n            this._receiverVideoConstraints = new ReceiverVideoConstraints();\n            const lastNUpdated = this._receiverVideoConstraints.updateLastN(this._lastN);\n\n            lastNUpdated && this._rtc.setNewReceiverVideoConstraints(this._receiverVideoConstraints.constraints);\n        } else {\n            this._rtc.setLastN(this._lastN);\n        }\n\n        // The endpoint IDs of the participants that are currently selected.\n        this._selectedEndpoints = [];\n\n        this._conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n            session => this._onMediaSessionStarted(session));\n    }\n\n    /**\n     * Handles the {@link JitsiConferenceEvents.MEDIA_SESSION_STARTED}, that is when the conference creates new media\n     * session. The preferred receive frameHeight is applied on the media session.\n     *\n     * @param {JingleSessionPC} mediaSession - the started media session.\n     * @returns {void}\n     * @private\n     */\n    _onMediaSessionStarted(mediaSession) {\n        if (mediaSession.isP2P || !this._receiverVideoConstraints) {\n            mediaSession.setReceiverVideoConstraint(this._maxFrameHeight);\n        } else {\n            this._receiverVideoConstraints.updateReceiveResolution(this._maxFrameHeight);\n            this._rtc.setNewReceiverVideoConstraints(this._receiverVideoConstraints.constraints);\n        }\n    }\n\n    /**\n     * Returns the lastN value for the conference.\n     *\n     * @returns {number}\n     */\n    getLastN() {\n        return this._lastN;\n    }\n\n    /**\n     * Elects the participants with the given ids to be the selected participants in order to always receive video\n     * for this participant (even when last n is enabled).\n     *\n     * @param {Array<string>} ids - The user ids.\n     * @returns {void}\n     */\n    selectEndpoints(ids) {\n        this._selectedEndpoints = ids;\n\n        if (this._receiverVideoConstraints) {\n            // Filter out the local endpointId from the list of selected endpoints.\n            const remoteEndpointIds = ids.filter(id => id !== this._conference.myUserId());\n            const oldConstraints = JSON.parse(JSON.stringify(this._receiverVideoConstraints.constraints));\n\n            remoteEndpointIds.length && this._receiverVideoConstraints.updateSelectedEndpoints(remoteEndpointIds);\n            const newConstraints = this._receiverVideoConstraints.constraints;\n\n            // Send bridge message only when the constraints change.\n            if (!isEqual(newConstraints, oldConstraints)) {\n                this._rtc.setNewReceiverVideoConstraints(newConstraints);\n            }\n\n            return;\n        }\n        this._rtc.selectEndpoints(ids);\n    }\n\n    /**\n     * Selects a new value for \"lastN\". The requested amount of videos are going to be delivered after the value is\n     * in effect. Set to -1 for unlimited or all available videos.\n     *\n     * @param {number} value the new value for lastN.\n     * @returns {void}\n     */\n    setLastN(value) {\n        if (this._lastN !== value) {\n            this._lastN = value;\n\n            if (this._receiverVideoConstraints) {\n                const lastNUpdated = this._receiverVideoConstraints.updateLastN(value);\n\n                // Send out the message on the bridge channel if lastN was updated.\n                lastNUpdated && this._rtc.setNewReceiverVideoConstraints(this._receiverVideoConstraints.constraints);\n\n                return;\n            }\n            this._rtc.setLastN(value);\n        }\n    }\n\n    /**\n     * Sets the maximum video resolution the local participant should receive from remote participants.\n     *\n     * @param {number|undefined} maxFrameHeight - the new value.\n     * @returns {void}\n     */\n    setPreferredReceiveMaxFrameHeight(maxFrameHeight) {\n        this._maxFrameHeight = maxFrameHeight;\n\n        for (const session of this._conference.getMediaSessions()) {\n            if (session.isP2P || !this._receiverVideoConstraints) {\n                maxFrameHeight && session.setReceiverVideoConstraint(maxFrameHeight);\n            } else {\n                const resolutionUpdated = this._receiverVideoConstraints.updateReceiveResolution(maxFrameHeight);\n\n                resolutionUpdated\n                    && this._rtc.setNewReceiverVideoConstraints(this._receiverVideoConstraints.constraints);\n            }\n        }\n    }\n\n    /**\n     * Sets the receiver constraints for the conference.\n     *\n     * @param {Object} constraints The video constraints.\n     */\n    setReceiverConstraints(constraints) {\n        if (!this._receiverVideoConstraints) {\n            this._receiverVideoConstraints = new ReceiverVideoConstraints();\n        }\n\n        const isEndpointsFormat = Object.keys(constraints).includes('onStageEndpoints', 'selectedEndpoints');\n        const isSourcesFormat = Object.keys(constraints).includes('onStageSources', 'selectedSources');\n\n        if (!FeatureFlags.isSourceNameSignalingEnabled() && isSourcesFormat) {\n            throw new Error(\n                '\"onStageSources\" and \"selectedSources\" are not supported when sourceNameSignaling is disabled.'\n            );\n        }\n\n        if (FeatureFlags.isSourceNameSignalingEnabled() && isEndpointsFormat) {\n            throw new Error(\n                '\"onStageEndpoints\" and \"selectedEndpoints\" are not supported when sourceNameSignaling is enabled.'\n            );\n        }\n        const constraintsChanged = this._receiverVideoConstraints.updateReceiverVideoConstraints(constraints);\n\n        if (constraintsChanged) {\n            this._lastN = constraints.lastN ?? this._lastN;\n            this._selectedEndpoints = constraints.selectedEndpoints ?? this._selectedEndpoints;\n            this._rtc.setNewReceiverVideoConstraints(constraints);\n\n            const p2pSession = this._conference.getMediaSessions().find(session => session.isP2P);\n\n            if (p2pSession) {\n                let maxFrameHeight = Object.values(constraints.constraints)[0]?.maxHeight;\n\n                if (!maxFrameHeight) {\n                    maxFrameHeight = constraints.defaultConstraints?.maxHeight;\n                }\n                maxFrameHeight && p2pSession.setReceiverVideoConstraint(maxFrameHeight);\n            }\n        }\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport FeatureFlags from '../flags/FeatureFlags';\nimport MediaSessionEvents from '../xmpp/MediaSessionEvents';\n\nconst logger = getLogger(__filename);\nconst MAX_LOCAL_RESOLUTION = 2160;\n\n/**\n * The class manages send video constraints across media sessions({@link JingleSessionPC}) which belong to\n * {@link JitsiConference}. It finds the lowest common value, between the local user's send preference and\n * the remote party's receive preference. Also this module will consider only the active session's receive value,\n * because local tracks are shared and while JVB may have no preference, the remote p2p may have and they may be totally\n * different.\n */\nexport default class SendVideoController {\n    /**\n     * Creates new instance for a given conference.\n     *\n     * @param {JitsiConference} conference - the conference instance for which the new instance will be managing\n     * the send video quality constraints.\n     * @param {RTC} rtc - the rtc instance that is responsible for sending the messages on the bridge channel.\n     */\n    constructor(conference, rtc) {\n        this._conference = conference;\n        this._preferredSendMaxFrameHeight = MAX_LOCAL_RESOLUTION;\n        this._rtc = rtc;\n\n        /**\n         * Source name based sender constraints.\n         * @type {Map<string, number>};\n         */\n\n        this._sourceSenderConstraints = new Map();\n        this._conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n            session => this._onMediaSessionStarted(session));\n        this._conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED,\n            () => this._configureConstraintsForLocalSources());\n        this._rtc.on(\n            RTCEvents.SENDER_VIDEO_CONSTRAINTS_CHANGED,\n            videoConstraints => this._onSenderConstraintsReceived(videoConstraints));\n    }\n\n    /**\n     * Configures the video encodings on the local sources when a media connection is established or becomes active.\n     *\n     * @returns {Promise<void[]>}\n     * @private\n     */\n    _configureConstraintsForLocalSources() {\n        if (FeatureFlags.isSourceNameSignalingEnabled()) {\n            for (const track of this._rtc.getLocalVideoTracks()) {\n                const sourceName = track.getSourceName();\n\n                sourceName && this._propagateSendMaxFrameHeight(sourceName);\n            }\n        } else {\n            this._propagateSendMaxFrameHeight();\n        }\n    }\n\n    /**\n     * Handles the {@link JitsiConferenceEvents.MEDIA_SESSION_STARTED}, that is when the conference creates new media\n     * session. It doesn't mean it's already active though. For example the JVB connection may be created after\n     * the conference has entered the p2p mode already.\n     *\n     * @param {JingleSessionPC} mediaSession - the started media session.\n     * @private\n     */\n    _onMediaSessionStarted(mediaSession) {\n        mediaSession.addListener(\n            MediaSessionEvents.REMOTE_VIDEO_CONSTRAINTS_CHANGED,\n            session => {\n                if (session === this._conference.getActiveMediaSession()) {\n                    this._configureConstraintsForLocalSources();\n                }\n            });\n    }\n\n    /**\n     * Propagates the video constraints if they have changed.\n     *\n     * @param {Object} videoConstraints - The sender video constraints received from the bridge.\n     * @returns {Promise<void[]>}\n     * @private\n     */\n    _onSenderConstraintsReceived(videoConstraints) {\n        if (FeatureFlags.isSourceNameSignalingEnabled()) {\n            const { maxHeight, sourceName } = videoConstraints;\n            const localVideoTracks = this._conference.getLocalVideoTracks() ?? [];\n\n            for (const track of localVideoTracks) {\n                // Propagate the sender constraint only if it has changed.\n                if (track.getSourceName() === sourceName\n                    && (!this._sourceSenderConstraints.has(sourceName)\n                    || this._sourceSenderConstraints.get(sourceName) !== maxHeight)) {\n                    this._sourceSenderConstraints.set(sourceName, maxHeight);\n                    logger.debug(`Sender constraints for source:${sourceName} changed to maxHeight:${maxHeight}`);\n                    this._propagateSendMaxFrameHeight(sourceName);\n                }\n            }\n        } else if (this._senderVideoConstraints?.idealHeight !== videoConstraints.idealHeight) {\n            this._senderVideoConstraints = videoConstraints;\n            this._propagateSendMaxFrameHeight();\n        }\n    }\n\n    /**\n     * Figures out the send video constraint as specified by {@link _selectSendMaxFrameHeight} and sets it on all media\n     * sessions for the reasons mentioned in this class description.\n     *\n     * @param {string} sourceName - The source for which sender constraints have changed.\n     * @returns {Promise<void[]>}\n     * @private\n     */\n    _propagateSendMaxFrameHeight(sourceName = null) {\n        if (FeatureFlags.isSourceNameSignalingEnabled() && !sourceName) {\n            throw new Error('sourceName missing for calculating the sendMaxHeight for video tracks');\n        }\n        const sendMaxFrameHeight = this._selectSendMaxFrameHeight(sourceName);\n        const promises = [];\n\n        if (sendMaxFrameHeight >= 0) {\n            for (const session of this._conference.getMediaSessions()) {\n                promises.push(session.setSenderVideoConstraint(sendMaxFrameHeight, sourceName));\n            }\n        }\n\n        return Promise.all(promises);\n    }\n\n    /**\n     * Selects the lowest common value for the local video send constraint by looking at local user's preference and\n     * the active media session's receive preference set by the remote party.\n     *\n     * @param {string} sourceName - The source for which sender constraints have changed.\n     * @returns {number|undefined}\n     * @private\n     */\n    _selectSendMaxFrameHeight(sourceName = null) {\n        if (FeatureFlags.isSourceNameSignalingEnabled() && !sourceName) {\n            throw new Error('sourceName missing for calculating the sendMaxHeight for video tracks');\n        }\n        const activeMediaSession = this._conference.getActiveMediaSession();\n        const remoteRecvMaxFrameHeight = activeMediaSession\n            ? activeMediaSession.isP2P\n                ? activeMediaSession.getRemoteRecvMaxFrameHeight()\n                : sourceName ? this._sourceSenderConstraints.get(sourceName) : this._senderVideoConstraints?.idealHeight\n            : undefined;\n\n        if (this._preferredSendMaxFrameHeight >= 0 && remoteRecvMaxFrameHeight >= 0) {\n            return Math.min(this._preferredSendMaxFrameHeight, remoteRecvMaxFrameHeight);\n        } else if (remoteRecvMaxFrameHeight >= 0) {\n            return remoteRecvMaxFrameHeight;\n        }\n\n        return this._preferredSendMaxFrameHeight;\n    }\n\n    /**\n     * Sets local preference for max send video frame height.\n     *\n     * @param {number} maxFrameHeight - the new value to set.\n     * @returns {Promise<void[]>} - resolved when the operation is complete.\n     */\n    setPreferredSendMaxFrameHeight(maxFrameHeight) {\n        this._preferredSendMaxFrameHeight = maxFrameHeight;\n\n        if (FeatureFlags.isSourceNameSignalingEnabled()) {\n            const promises = [];\n\n            for (const sourceName of this._sourceSenderConstraints.keys()) {\n                promises.push(this._propagateSendMaxFrameHeight(sourceName));\n            }\n\n            return Promise.allSettled(promises);\n        }\n\n        return this._propagateSendMaxFrameHeight();\n    }\n}\n","/**\n * A collection of utility functions for taking in XML and parsing it to return\n * certain values.\n */\nexport default {\n    /**\n     * Parses the presence update of the focus and returns an object with the\n     * statuses related to recording.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {Object} The current presence values related to recording.\n     */\n    getFocusRecordingUpdate(presence) {\n        const jibriStatus = presence\n            && presence.getElementsByTagName('jibri-recording-status')[0];\n\n        if (!jibriStatus) {\n            return;\n        }\n\n        return {\n            error: jibriStatus.getAttribute('failure_reason'),\n            initiator: jibriStatus.getAttribute('initiator'),\n            recordingMode: jibriStatus.getAttribute('recording_mode'),\n            sessionID: jibriStatus.getAttribute('session_id'),\n            status: jibriStatus.getAttribute('status')\n        };\n    },\n\n    /**\n     * Parses the presence update from a hidden domain participant and returns\n     * an object with the statuses related to recording.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {Object} The current presence values related to recording.\n     */\n    getHiddenDomainUpdate(presence) {\n        const liveStreamViewURLContainer\n            = presence.getElementsByTagName('live-stream-view-url')[0];\n        const liveStreamViewURL = liveStreamViewURLContainer\n            && liveStreamViewURLContainer.textContent;\n        const modeContainer\n            = presence.getElementsByTagName('mode')[0];\n        const mode = modeContainer\n            && modeContainer.textContent\n            && modeContainer.textContent.toLowerCase();\n        const sessionIDContainer\n            = presence.getElementsByTagName('session_id')[0];\n        const sessionID\n            = sessionIDContainer && sessionIDContainer.textContent;\n\n        return {\n            liveStreamViewURL,\n            mode,\n            sessionID\n        };\n    },\n\n    /**\n     * Returns the recording session ID from a successful IQ.\n     *\n     * @param {Node} response - The response from the IQ.\n     * @returns {string} The session ID of the recording session.\n     */\n    getSessionIdFromIq(response) {\n        const jibri = response && response.getElementsByTagName('jibri')[0];\n\n        return jibri && jibri.getAttribute('session_id');\n    },\n\n    /**\n     * Returns the recording session ID from a presence, if it exists.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {string|undefined} The session ID of the recording session.\n     */\n    getSessionId(presence) {\n        const sessionIdContainer\n            = presence.getElementsByTagName('session_id')[0];\n        const sessionId = sessionIdContainer && sessionIdContainer.textContent;\n\n        return sessionId;\n    },\n\n    /**\n     * Returns whether or not a presence is from the focus.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {boolean} True if the presence is from the focus.\n     */\n    isFromFocus(presence) {\n        return presence.getAttribute('from').includes('focus');\n    }\n};\n","import { $iq } from 'strophe.js';\n\nimport recordingXMLUtils from './recordingXMLUtils';\n\n/**\n * Represents a recording session.\n */\nexport default class JibriSession {\n    /**\n     * Initializes a new JibriSession instance.\n     *\n     * @constructor\n     */\n    constructor(options = {}) {\n        this._connection = options.connection;\n        this._mode = options.mode;\n\n        this._setSessionID(options.sessionID);\n        this.setStatus(options.status);\n    }\n\n    /**\n     * Returns the error related to the session instance, if any.\n     *\n     * @returns {string|undefined}\n     */\n    getError() {\n        return this._error;\n    }\n\n    /**\n     * Returns the session ID of the session instance.\n     *\n     * @returns {string|undefined}\n     */\n    getID() {\n        return this._sessionID;\n    }\n\n    /**\n     * Returns the initiator of the session instance.\n     *\n     * @returns {JitsiParticipant|string} The participant that started the session.\n     */\n    getInitiator() {\n        return this._initiator;\n    }\n\n    /**\n     * Returns the streaming URL of the session.\n     *\n     * @returns {string|undefined}\n     */\n    getLiveStreamViewURL() {\n        return this._liveStreamViewURL;\n    }\n\n    /**\n     * Returns the current status of the session.\n     *\n     * @returns {string|undefined}\n     */\n    getStatus() {\n        return this._status;\n    }\n\n    /**\n     * Returns the jid of the participant that stopped the session.\n     *\n     * @returns {JitsiParticipant|string} The participant that stopped the session.\n     */\n    getTerminator() {\n        return this._terminator;\n    }\n\n    /**\n     * Returns the current recording mode of the session, such as \"file\".\n     *\n     * @returns {string}\n     */\n    getMode() {\n        return this._mode;\n    }\n\n    /**\n     * Sets the last known error message related to the session.\n     *\n     * @param {string} error - The error string explaining why the session\n     * entered an error state.\n     * @returns {void}\n     */\n    setError(error) {\n        this._error = error;\n    }\n\n    /**\n     * Sets the last live stream URL for the session instance. Usually this is\n     * a YouTube URL and usually this is only set for \"stream\" sessions.\n     *\n     * @param {string} url - The live stream URL associated with the session.\n     * @returns {void}\n     */\n    setLiveStreamViewURL(url) {\n        this._liveStreamViewURL = url;\n    }\n\n    /**\n     * Sets the last known status for this recording session.\n     *\n     * @param {string} status - The new status to set.\n     * @returns {void}\n     */\n    setStatus(status) {\n        this._status = status;\n    }\n\n    /**\n     * Sets the participant that started the session.\n     * @param {JitsiParticipant | string} participant - The participant or resource id\n     * if local participant.\n     */\n    setInitiator(participant) {\n        this._initiator = participant;\n    }\n\n    /**\n     * Sets the participant that stopped the session.\n     * @param {JitsiParticipant | string} participant - The participant or the resource id\n     * if local participant.\n     */\n    setTerminator(participant) {\n        this._terminator = participant;\n    }\n\n    /**\n     * Sends a message to start the actual recording.\n     *\n     * @param {Object} options - Additional arguments for starting the\n     * recording.\n     * @param {string} [options.appData] - Data specific to the app/service that\n     * the result file will be uploaded.\n     * @param {string} [options.broadcastId] - The broadcast ID of an\n     * associated YouTube stream, used for knowing the URL from which the stream\n     * can be viewed.\n     * @param {string} options.focusMucJid - The JID of the focus participant\n     * that controls recording.\n     * @param {streamId} options.streamId - Necessary for live streaming, this\n     * is the stream key needed to start a live streaming session with the\n     * streaming service provider.\n     * @returns Promise\n     */\n    start({ appData, broadcastId, focusMucJid, streamId }) {\n        return new Promise((resolve, reject) => {\n            this._connection.sendIQ(\n                this._createIQ({\n                    action: 'start',\n                    appData,\n                    focusMucJid,\n                    broadcastId,\n                    streamId\n                }),\n                result => {\n                    // All users will eventually receive the 'pending' status\n                    // from the backend, but for the user initiating the session\n                    // it's better to give some instant feedback that recording\n                    // is starting so fire 'pending' here manually.\n                    this.setStatus('pending');\n                    this._setSessionID(\n                        recordingXMLUtils.getSessionIdFromIq(result));\n\n                    resolve();\n                },\n                error => {\n                    this._setErrorFromIq(error);\n\n                    reject(error);\n                });\n        });\n    }\n\n    /**\n     * Sends a message to actually stop the recording session.\n     *\n     * @param {Object} options - Additional arguments for stopping the\n     * recording.\n     * @param {Object} options.focusMucJid - The JID of the focus participant\n     * that controls recording.\n     * @returns Promise\n     */\n    stop({ focusMucJid }) {\n        return new Promise((resolve, reject) => {\n            this._connection.sendIQ(\n                this._createIQ({\n                    action: 'stop',\n                    focusMucJid\n                }),\n                resolve,\n                reject);\n        });\n    }\n\n    /**\n     * Generates the message to change the status of the recording session.\n     *\n     * @param {string} status - The new status to which the recording session\n     * should transition.\n     * @param {string} [options.appData] - Data specific to the app/service that\n     * the result file will be uploaded.\n     * @param {string} [options.broadcastId] - The broadcast ID of an\n     * associated YouTube stream, used for knowing the URL from which the stream\n     * can be viewed.\n     * @param {string} options.focusMucJid - The JID of the focus participant\n     * that controls recording.\n     * @param {streamId} options.streamId - Necessary for live streaming, this\n     * is the stream key needed to start a live streaming session with the\n     * streaming service provider.\n     * @returns Object - The XMPP IQ message.\n     */\n    _createIQ({ action, appData, broadcastId, focusMucJid, streamId }) {\n        try {\n            appData = JSON.parse(appData)|| {};\n        } catch(e) {\n            appData = {};\n        }\n        \n        appData[\"base_url\"] = appData[\"base_url\"] ? appData[\"base_url\"] : `${window.location.origin}${window.location.pathname}`;\n        appData[\"token\"] =  this._connection.emuc.xmpp.token;\n        \n        return $iq({\n            to: focusMucJid,\n            type: 'set'\n        })\n        .c('jibri', {\n            'xmlns': 'http://jitsi.org/protocol/jibri',\n            'action': action,\n            'app_data': JSON.stringify(appData),\n            'recording_mode': this._mode,\n            'streamid': streamId,\n            'you_tube_broadcast_id': broadcastId\n        })\n        .up();\n    }\n\n    /**\n     * Handles the error from an iq and stores the error.\n     *\n     * @param {Node} errorIq - The error response from an Iq.\n     * @private\n     * @returns {void}\n     */\n    _setErrorFromIq(errorIq) {\n        const error = errorIq.getElementsByTagName('error')[0];\n\n        this.setError(error.children[0].tagName);\n    }\n\n    /**\n     * Sets the known session ID for this recording session.\n     *\n     * @param {string} sessionID\n     * @private\n     * @returns {void}\n     */\n    _setSessionID(sessionID) {\n        this._sessionID = sessionID;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\n\nimport JibriSession from './JibriSession';\nimport recordingXMLUtils from './recordingXMLUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * A class responsible for starting and stopping recording sessions and emitting\n * state updates for them.\n */\nclass RecordingManager {\n    /**\n     * Initialize {@code RecordingManager} with other objects that are necessary\n     * for starting a recording.\n     *\n     * @param {ChatRoom} chatRoom - The chat room to handle.\n     * @returns {void}\n     */\n    constructor(chatRoom) {\n        /**\n         * All known recording sessions from the current conference.\n         */\n        this._sessions = {};\n\n        this._chatRoom = chatRoom;\n\n        this.onPresence = this.onPresence.bind(this);\n\n        this._chatRoom.eventEmitter.addListener(\n            XMPPEvents.PRESENCE_RECEIVED, this.onPresence);\n    }\n\n    /**\n     * Finds an existing recording session by session ID.\n     *\n     * @param {string} sessionID - The session ID associated with the recording.\n     * @returns {JibriSession|undefined}\n     */\n    getSession(sessionID) {\n        return this._sessions[sessionID];\n    }\n\n    /**\n     * Callback to invoke to parse through a presence update to find recording\n     * related updates (from Jibri participant doing the recording and the\n     * focus which controls recording).\n     *\n     * @param {Object} event - The presence data from the pubsub event.\n     * @param {Node} event.presence - An XMPP presence update.\n     * @param {boolean} event.fromHiddenDomain - Whether or not the update comes\n     * from a participant that is trusted but not visible, as would be the case\n     * with the Jibri recorder participant.\n     * @returns {void}\n     */\n    onPresence({ fromHiddenDomain, presence }) {\n        if (recordingXMLUtils.isFromFocus(presence)) {\n            this._handleFocusPresence(presence);\n        } else if (fromHiddenDomain) {\n            this._handleJibriPresence(presence);\n        }\n    }\n\n    /**\n     * Start a recording session.\n     *\n     * @param {Object} options - Configuration for the recording.\n     * @param {string} [options.appData] - Data specific to the app/service that\n     * the result file will be uploaded.\n     * @param {string} [optional] options.broadcastId - The channel on which a\n     * live stream will occur.\n     * @param {string} options.mode - The mode in which recording should be\n     * started. Recognized values are \"file\" and \"stream\".\n     * @param {string} [optional] options.streamId - The stream key to be used\n     * for live stream broadcasting. Required for live streaming.\n     * @returns {Promise} A promise for starting a recording, which will pass\n     * back the session on success. The promise resolves after receiving an\n     * acknowledgment of the start request success or fail.\n     */\n    startRecording(options) {\n        const session = new JibriSession({\n            ...options,\n            connection: this._chatRoom.connection\n        });\n\n        return session.start({\n            appData: options.appData,\n            broadcastId: options.broadcastId,\n            focusMucJid: this._chatRoom.focusMucJid,\n            streamId: options.streamId\n        })\n            .then(() => {\n                // Only store the session and emit if the session has not been\n                // added already. This is a workaround for the session getting\n                // created due to a presence update to announce a \"pending\"\n                // recording being received before JibriSession#start finishes.\n                if (!this.getSession(session.getID())) {\n                    this._addSession(session);\n                    this._emitSessionUpdate(session);\n                }\n\n                return session;\n            })\n            .catch(error => {\n                this._emitSessionUpdate(session);\n\n                return Promise.reject(error);\n            });\n    }\n\n    /**\n     * Stop a recording session.\n     *\n     * @param {string} sessionID - The ID associated with the recording session\n     * to be stopped.\n     * @returns {Promise} The promise resolves after receiving an\n     * acknowledgment of the stop request success or fail.\n     */\n    stopRecording(sessionID) {\n        const session = this.getSession(sessionID);\n\n        if (session) {\n            return session.stop({ focusMucJid: this._chatRoom.focusMucJid });\n        }\n\n        return Promise.reject(new Error('Could not find session'));\n    }\n\n    /**\n     * Stores a reference to the passed in JibriSession.\n     *\n     * @param {string} session - The JibriSession instance to store.\n     * @returns {void}\n     */\n    _addSession(session) {\n        this._sessions[session.getID()] = session;\n    }\n\n    /**\n     * Create a new instance of a recording session and stores a reference to\n     * it.\n     *\n     * @param {string} sessionID - The session ID of the recording in progress.\n     * @param {string} status - The current status of the recording session.\n     * @param {string} mode - The recording mode of the session.\n     * @returns {JibriSession}\n     */\n    _createSession(sessionID, status, mode) {\n        const session = new JibriSession({\n            connection: this._chatRoom.connection,\n            focusMucJid: this._chatRoom.focusMucJid,\n            mode,\n            sessionID,\n            status\n        });\n\n        this._addSession(session);\n\n        return session;\n    }\n\n    /**\n     * Notifies listeners of an update to a recording session.\n     *\n     * @param {JibriSession} session - The session that has been updated.\n     * @param {string|undefined} initiator - The jid of the initiator of the update.\n     */\n    _emitSessionUpdate(session, initiator) {\n        this._chatRoom.eventEmitter.emit(\n            XMPPEvents.RECORDER_STATE_CHANGED, session, initiator);\n    }\n\n    /**\n     * Parses presence to update an existing JibriSession or to create a new\n     * JibriSession.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {void}\n     */\n    _handleFocusPresence(presence) {\n        const jibriStatus = recordingXMLUtils.getFocusRecordingUpdate(presence);\n\n        if (!jibriStatus) {\n            return;\n        }\n\n        const { error, initiator, recordingMode, sessionID, status } = jibriStatus;\n\n        // We'll look for an existing session or create one (in case we're a\n        // participant joining a call with an existing recording going on).\n        let session = this.getSession(sessionID);\n\n        // Handle the case where a status update is received in presence but\n        // the local participant has joined while the JibriSession has already\n        // ended.\n        if (!session && status === 'off') {\n            logger.warn(\n                'Ignoring recording presence update',\n                'Received a new session with status off.');\n\n            return;\n        }\n\n        // Jicofo sends updates via presence, and any extension in presence\n        // is sent until it is explicitly removed.  It's difficult for\n        // Jicofo to know when a presence has been sent once, so it won't\n        // remove jibri status extension.  This means we may receive the same\n        // status update more than once, so check for that here\n        if (session\n            && session.getStatus() === status\n            && session.getError() === error) {\n            logger.warn('Ignoring duplicate presence update: ',\n                JSON.stringify(jibriStatus));\n\n            return;\n        }\n\n        if (!session) {\n            session = this._createSession(sessionID, status, recordingMode);\n        }\n\n        session.setStatus(status);\n\n        if (error) {\n            session.setError(error);\n        }\n\n        this._emitSessionUpdate(session, initiator);\n    }\n\n    /**\n     * Handles updates from the Jibri which can broadcast a YouTube URL that\n     * needs to be updated in a JibriSession.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {void}\n     */\n    _handleJibriPresence(presence) {\n        const { liveStreamViewURL, mode, sessionID }\n            = recordingXMLUtils.getHiddenDomainUpdate(presence);\n\n        if (!sessionID) {\n            logger.warn(\n                'Ignoring potential jibri presence due to no session id.');\n\n            return;\n        }\n\n        let session = this.getSession(sessionID);\n\n        if (!session) {\n            session = this._createSession(sessionID, '', mode);\n        }\n\n        session.setLiveStreamViewURL(liveStreamViewURL);\n\n        this._emitSessionUpdate(session);\n    }\n}\n\nexport default RecordingManager;\n","import { getLogger } from '@jitsi/logger';\n\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport * as ConnectionQualityEvents from '../../service/connectivity/ConnectionQualityEvents';\nimport { createAudioOutputProblemEvent } from '../../service/statistics/AnalyticsEvents';\n\nimport Statistics from './statistics';\n\nconst logger = getLogger(__filename);\n\n/**\n * Number of local samples that will be used for comparison before and after the remote sample is received.\n */\nconst NUMBER_OF_LOCAL_SAMPLES = 2;\n\n/**\n * Collects the average audio levels per participant from the local stats and the stats received by every remote\n * participant and compares them to detect potential audio problem for a participant.\n */\nexport default class AudioOutputProblemDetector {\n\n    /**\n     * Creates new <tt>AudioOutputProblemDetector</tt> instance.\n     *\n     * @param {JitsiCofnerence} conference - The conference instance to be monitored.\n     */\n    constructor(conference) {\n        this._conference = conference;\n        this._localAudioLevelCache = {};\n        this._reportedParticipants = [];\n        this._audioProblemCandidates = {};\n        this._numberOfRemoteAudioLevelsReceived = {};\n        this._onLocalAudioLevelsReport = this._onLocalAudioLevelsReport.bind(this);\n        this._onRemoteAudioLevelReceived = this._onRemoteAudioLevelReceived.bind(this);\n        this._clearUserData = this._clearUserData.bind(this);\n        this._conference.on(ConnectionQualityEvents.REMOTE_STATS_UPDATED, this._onRemoteAudioLevelReceived);\n        this._conference.statistics.addConnectionStatsListener(this._onLocalAudioLevelsReport);\n        this._conference.on(ConferenceEvents.USER_LEFT, this._clearUserData);\n    }\n\n    /**\n     * A listener for audio level data received by a remote participant.\n     *\n     * @param {string} userID - The user id of the participant that sent the data.\n     * @param {number} audioLevel - The average audio level value.\n     * @returns {void}\n     */\n    _onRemoteAudioLevelReceived(userID, { avgAudioLevels }) {\n        const numberOfReports = (this._numberOfRemoteAudioLevelsReceived[userID] + 1) || 0;\n\n        this._numberOfRemoteAudioLevelsReceived[userID] = numberOfReports;\n\n        if (this._reportedParticipants.indexOf(userID) !== -1 || (userID in this._audioProblemCandidates)\n                || avgAudioLevels <= 0 || numberOfReports < 3) {\n            return;\n        }\n\n        const participant = this._conference.getParticipantById(userID);\n\n        if (participant) {\n            const tracks = participant.getTracksByMediaType(MediaType.AUDIO);\n\n            if (tracks.length > 0 && participant.isAudioMuted()) {\n                // We don't need to report an error if everything seems fine with the participant and its tracks but\n                // the participant is audio muted. Since those are average audio levels we potentially can receive non\n                // zero values for muted track.\n                return;\n            }\n        }\n\n        const localAudioLevels = this._localAudioLevelCache[userID];\n\n        if (!Array.isArray(localAudioLevels) || localAudioLevels.every(audioLevel => audioLevel === 0)) {\n            this._audioProblemCandidates[userID] = {\n                remoteAudioLevels: avgAudioLevels,\n                localAudioLevels: []\n            };\n        }\n    }\n\n    /**\n     * A listener for audio level data retrieved by the local stats.\n     *\n     * @param {TraceablePeerConnection} tpc - The <tt>TraceablePeerConnection</tt> instance used to gather the data.\n     * @param {Object} avgAudioLevels - The average audio levels per participant.\n     * @returns {void}\n     */\n    _onLocalAudioLevelsReport(tpc, { avgAudioLevels }) {\n        if (tpc !== this._conference.getActivePeerConnection()) {\n            return;\n        }\n\n        Object.keys(avgAudioLevels).forEach(userID => {\n            if (this._reportedParticipants.indexOf(userID) !== -1) {\n                return;\n            }\n\n            const localAudioLevels = this._localAudioLevelCache[userID];\n\n            if (!Array.isArray(localAudioLevels)) {\n                this._localAudioLevelCache[userID] = [ ];\n            } else if (localAudioLevels.length >= NUMBER_OF_LOCAL_SAMPLES) {\n                localAudioLevels.shift();\n            }\n\n            this._localAudioLevelCache[userID].push(avgAudioLevels[userID]);\n        });\n\n\n        Object.keys(this._audioProblemCandidates).forEach(userID => {\n            const { localAudioLevels, remoteAudioLevels } = this._audioProblemCandidates[userID];\n\n            localAudioLevels.push(avgAudioLevels[userID]);\n\n            if (localAudioLevels.length === NUMBER_OF_LOCAL_SAMPLES) {\n                if (localAudioLevels.every(audioLevel => typeof audioLevel === 'undefined' || audioLevel === 0)) {\n                    const localAudioLevelsString = JSON.stringify(localAudioLevels);\n\n                    Statistics.sendAnalytics(\n                        createAudioOutputProblemEvent(userID, localAudioLevelsString, remoteAudioLevels));\n                    logger.warn(`A potential problem is detected with the audio output for participant ${\n                        userID}, local audio levels: ${localAudioLevelsString}, remote audio levels: ${\n                        remoteAudioLevels}`);\n                    this._reportedParticipants.push(userID);\n                    this._clearUserData(userID);\n                }\n\n                delete this._audioProblemCandidates[userID];\n            }\n        });\n    }\n\n    /**\n     * Clears the data stored for a participant.\n     *\n     * @param {string} userID - The id of the participant.\n     * @returns {void}\n     */\n    _clearUserData(userID) {\n        delete this._localAudioLevelCache[userID];\n    }\n\n    /**\n     * Disposes the allocated resources.\n     *\n     * @returns {void}\n     */\n    dispose() {\n        this._conference.off(ConnectionQualityEvents.REMOTE_STATS_UPDATED, this._onRemoteAudioLevelReceived);\n        this._conference.off(ConferenceEvents.USER_LEFT, this._clearUserData);\n        this._conference.statistics.removeConnectionStatsListener(this._onLocalAudioLevelsReport);\n        this._localAudioLevelCache = undefined;\n        this._audioProblemCandidates = undefined;\n        this._reportedParticipants = undefined;\n        this._numberOfRemoteAudioLevelsReceived = undefined;\n        this._conference = undefined;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport isEqual from 'lodash.isequal';\n\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport * as ConnectionQualityEvents\n    from '../../service/connectivity/ConnectionQualityEvents';\nimport {\n    createRtpStatsEvent,\n    createTransportStatsEvent\n} from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\n\nimport Statistics from './statistics';\n\n\nconst logger = getLogger(__filename);\n\n/**\n * This will calculate an average for one, named stat and submit it to\n * the analytics module when requested. It automatically counts the samples.\n */\nclass AverageStatReport {\n    /**\n     * Creates new <tt>AverageStatReport</tt> for given name.\n     * @param {string} name that's the name of the event that will be reported\n     * to the analytics module.\n     */\n    constructor(name) {\n        this.name = name;\n        this.count = 0;\n        this.sum = 0;\n        this.samples = [];\n    }\n\n    /**\n     * Adds the next value that will be included in the average when\n     * {@link calculate} is called.\n     * @param {number} nextValue\n     */\n    addNext(nextValue) {\n        if (typeof nextValue !== 'number') {\n            logger.error(\n                `${this.name} - invalid value for idx: ${this.count}`,\n                nextValue);\n        } else if (!isNaN(nextValue)) {\n            this.sum += nextValue;\n            this.samples.push(nextValue);\n            this.count += 1;\n        }\n    }\n\n    /**\n     * Calculates an average for the samples collected using {@link addNext}.\n     * @return {number|NaN} an average of all collected samples or <tt>NaN</tt>\n     * if no samples were collected.\n     */\n    calculate() {\n        return this.sum / this.count;\n    }\n\n    /**\n     * Appends the report to the analytics \"data\" object. The object will be\n     * set under <tt>prefix</tt> + {@link this.name} key.\n     * @param {Object} report the analytics \"data\" object\n     */\n    appendReport(report) {\n        report[`${this.name}_avg`] = this.calculate();\n        report[`${this.name}_samples`] = JSON.stringify(this.samples);\n    }\n\n    /**\n     * Clears all memory of any samples collected, so that new average can be\n     * calculated using this instance.\n     */\n    reset() {\n        this.samples = [];\n        this.sum = 0;\n        this.count = 0;\n    }\n}\n\n/**\n * Class gathers the stats that are calculated and reported for a\n * {@link TraceablePeerConnection} even if it's not currently active. For\n * example we want to monitor RTT for the JVB connection while in P2P mode.\n */\nclass ConnectionAvgStats {\n    /**\n     * Creates new <tt>ConnectionAvgStats</tt>\n     * @param {AvgRTPStatsReporter} avgRtpStatsReporter\n     * @param {boolean} isP2P\n     * @param {number} n the number of samples, before arithmetic mean is to be\n     * calculated and values submitted to the analytics module.\n     */\n    constructor(avgRtpStatsReporter, isP2P, n) {\n        /**\n         * Is this instance for JVB or P2P connection ?\n         * @type {boolean}\n         */\n        this.isP2P = isP2P;\n\n        /**\n         * How many samples are to be included in arithmetic mean calculation.\n         * @type {number}\n         * @private\n         */\n        this._n = n;\n\n        /**\n         * The current sample index. Starts from 0 and goes up to {@link _n})\n         * when analytics report will be submitted.\n         * @type {number}\n         * @private\n         */\n        this._sampleIdx = 0;\n\n        /**\n         * Average round trip time reported by the ICE candidate pair.\n         * @type {AverageStatReport}\n         */\n        this._avgRTT = new AverageStatReport('rtt');\n\n        /**\n         * Map stores average RTT to the JVB reported by remote participants.\n         * Mapped per participant id {@link JitsiParticipant.getId}.\n         *\n         * This is used only when {@link ConnectionAvgStats.isP2P} equals to\n         * <tt>false</tt>.\n         *\n         * @type {Map<string,AverageStatReport>}\n         * @private\n         */\n        this._avgRemoteRTTMap = new Map();\n\n        /**\n         * The conference for which stats will be collected and reported.\n         * @type {JitsiConference}\n         * @private\n         */\n        this._avgRtpStatsReporter = avgRtpStatsReporter;\n\n        /**\n         * The latest average E2E RTT for the JVB connection only.\n         *\n         * This is used only when {@link ConnectionAvgStats.isP2P} equals to\n         * <tt>false</tt>.\n         *\n         * @type {number}\n         */\n        this._avgEnd2EndRTT = undefined;\n\n        this._onConnectionStats = (tpc, stats) => {\n            if (this.isP2P === tpc.isP2P) {\n                this._calculateAvgStats(stats);\n            }\n        };\n\n        const conference = avgRtpStatsReporter._conference;\n\n        conference.statistics.addConnectionStatsListener(\n            this._onConnectionStats);\n\n        if (!this.isP2P) {\n            this._onUserLeft = id => this._avgRemoteRTTMap.delete(id);\n            conference.on(ConferenceEvents.USER_LEFT, this._onUserLeft);\n\n            this._onRemoteStatsUpdated\n                = (id, data) => this._processRemoteStats(id, data);\n            conference.on(\n                ConnectionQualityEvents.REMOTE_STATS_UPDATED,\n                this._onRemoteStatsUpdated);\n        }\n    }\n\n    /**\n     * Processes next batch of stats.\n     * @param {go figure} data\n     * @private\n     */\n    _calculateAvgStats(data) {\n        if (!data) {\n            logger.error('No stats');\n\n            return;\n        }\n\n        if (browser.supportsRTTStatistics()) {\n            if (data.transport && data.transport.length) {\n                this._avgRTT.addNext(data.transport[0].rtt);\n            }\n        }\n\n        this._sampleIdx += 1;\n\n        if (this._sampleIdx >= this._n) {\n            if (browser.supportsRTTStatistics()) {\n                const conference = this._avgRtpStatsReporter._conference;\n\n                const batchReport = {\n                    p2p: this.isP2P,\n                    'conference_size': conference.getParticipantCount()\n                };\n\n                if (data.transport && data.transport.length) {\n                    Object.assign(batchReport, {\n                        'local_candidate_type':\n                            data.transport[0].localCandidateType,\n                        'remote_candidate_type':\n                            data.transport[0].remoteCandidateType,\n                        'transport_type': data.transport[0].type\n                    });\n                }\n\n                this._avgRTT.appendReport(batchReport);\n\n                if (this.isP2P) {\n                    // Report RTT diff only for P2P.\n                    const jvbEnd2EndRTT = this\n                        ._avgRtpStatsReporter.jvbStatsMonitor._avgEnd2EndRTT;\n\n                    if (!isNaN(jvbEnd2EndRTT)) {\n                        // eslint-disable-next-line dot-notation\n                        batchReport['rtt_diff']\n                            = this._avgRTT.calculate() - jvbEnd2EndRTT;\n                    }\n                } else {\n                    // Report end to end RTT only for JVB.\n                    const avgRemoteRTT = this._calculateAvgRemoteRTT();\n                    const avgLocalRTT = this._avgRTT.calculate();\n\n                    this._avgEnd2EndRTT = avgLocalRTT + avgRemoteRTT;\n\n                    if (!isNaN(avgLocalRTT) && !isNaN(avgRemoteRTT)) {\n                        // eslint-disable-next-line dot-notation\n                        batchReport['end2end_rtt_avg'] = this._avgEnd2EndRTT;\n                    }\n                }\n\n                Statistics.sendAnalytics(createRtpStatsEvent(batchReport));\n            }\n\n            this._resetAvgStats();\n        }\n    }\n\n    /**\n     * Calculates arithmetic mean of all RTTs towards the JVB reported by\n     * participants.\n     * @return {number|NaN} NaN if not available (not enough data)\n     * @private\n     */\n    _calculateAvgRemoteRTT() {\n        let count = 0, sum = 0;\n\n        // FIXME should we ignore RTT for participant\n        // who \"is having connectivity issues\" ?\n        for (const remoteAvg of this._avgRemoteRTTMap.values()) {\n            const avg = remoteAvg.calculate();\n\n            if (!isNaN(avg)) {\n                sum += avg;\n                count += 1;\n                remoteAvg.reset();\n            }\n        }\n\n        return sum / count;\n    }\n\n    /**\n     * Processes {@link ConnectionQualityEvents.REMOTE_STATS_UPDATED} to analyse\n     * RTT towards the JVB reported by each participant.\n     * @param {string} id {@link JitsiParticipant.getId}\n     * @param {go figure in ConnectionQuality.js} data\n     * @private\n     */\n    _processRemoteStats(id, data) {\n        const validData = typeof data.jvbRTT === 'number';\n        let rttAvg = this._avgRemoteRTTMap.get(id);\n\n        if (!rttAvg && validData) {\n            rttAvg = new AverageStatReport(`${id}_stat_rtt`);\n            this._avgRemoteRTTMap.set(id, rttAvg);\n        }\n\n        if (validData) {\n            rttAvg.addNext(data.jvbRTT);\n        } else if (rttAvg) {\n            this._avgRemoteRTTMap.delete(id);\n        }\n    }\n\n    /**\n     * Reset cache of all averages and {@link _sampleIdx}.\n     * @private\n     */\n    _resetAvgStats() {\n        this._avgRTT.reset();\n        if (this._avgRemoteRTTMap) {\n            this._avgRemoteRTTMap.clear();\n        }\n        this._sampleIdx = 0;\n    }\n\n    /**\n     *\n     */\n    dispose() {\n\n        const conference = this._avgRtpStatsReporter._conference;\n\n        conference.statistics.removeConnectionStatsListener(\n            this._onConnectionStats);\n        if (!this.isP2P) {\n            conference.off(\n                ConnectionQualityEvents.REMOTE_STATS_UPDATED,\n                this._onRemoteStatsUpdated);\n            conference.off(\n                ConferenceEvents.USER_LEFT,\n                this._onUserLeft);\n        }\n    }\n}\n\n/**\n * Reports average RTP statistics values (arithmetic mean) to the analytics\n * module for things like bit rate, bandwidth, packet loss etc. It keeps track\n * of the P2P vs JVB conference modes and submits the values under different\n * namespaces (the events for P2P mode have 'p2p.' prefix). Every switch between\n * P2P mode resets the data collected so far and averages are calculated from\n * scratch.\n */\nexport default class AvgRTPStatsReporter {\n    /**\n     * Creates new instance of <tt>AvgRTPStatsReporter</tt>\n     * @param {JitsiConference} conference\n     * @param {number} n the number of samples, before arithmetic mean is to be\n     * calculated and values submitted to the analytics module.\n     */\n    constructor(conference, n) {\n        /**\n         * How many {@link ConnectionQualityEvents.LOCAL_STATS_UPDATED} samples\n         * are to be included in arithmetic mean calculation.\n         * @type {number}\n         * @private\n         */\n        this._n = n;\n\n        if (n > 0) {\n            logger.info(`Avg RTP stats will be calculated every ${n} samples`);\n        } else {\n            logger.info('Avg RTP stats reports are disabled.');\n\n            // Do not initialize\n            return;\n        }\n\n        /**\n         * The current sample index. Starts from 0 and goes up to {@link _n})\n         * when analytics report will be submitted.\n         * @type {number}\n         * @private\n         */\n        this._sampleIdx = 0;\n\n        /**\n         * The conference for which stats will be collected and reported.\n         * @type {JitsiConference}\n         * @private\n         */\n        this._conference = conference;\n\n        /**\n         * Average audio upload bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgAudioBitrateUp\n            = new AverageStatReport('bitrate_audio_upload');\n\n        /**\n         * Average audio download bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgAudioBitrateDown\n            = new AverageStatReport('bitrate_audio_download');\n\n        /**\n         * Average video upload bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgVideoBitrateUp\n            = new AverageStatReport('bitrate_video_upload');\n\n        /**\n         * Average video download bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgVideoBitrateDown\n            = new AverageStatReport('bitrate_video_download');\n\n        /**\n         * Average upload bandwidth\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgBandwidthUp\n            = new AverageStatReport('bandwidth_upload');\n\n        /**\n         * Average download bandwidth\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgBandwidthDown\n            = new AverageStatReport('bandwidth_download');\n\n        /**\n         * Average total packet loss\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgPacketLossTotal\n            = new AverageStatReport('packet_loss_total');\n\n        /**\n         * Average upload packet loss\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgPacketLossUp\n            = new AverageStatReport('packet_loss_upload');\n\n        /**\n         * Average download packet loss\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgPacketLossDown\n            = new AverageStatReport('packet_loss_download');\n\n        /**\n         * Average FPS for remote videos\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteFPS = new AverageStatReport('framerate_remote');\n\n        /**\n         * Average FPS for remote screen streaming videos (reported only if not\n         * a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteScreenFPS\n            = new AverageStatReport('framerate_screen_remote');\n\n        /**\n         * Average FPS for local video (camera)\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalFPS = new AverageStatReport('framerate_local');\n\n        /**\n         * Average FPS for local screen streaming video (reported only if not\n         * a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalScreenFPS\n            = new AverageStatReport('framerate_screen_local');\n\n        /**\n         * Average pixels for remote screen streaming videos (reported only if\n         * not a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteCameraPixels\n            = new AverageStatReport('pixels_remote');\n\n        /**\n         * Average pixels for remote screen streaming videos (reported only if\n         * not a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteScreenPixels\n            = new AverageStatReport('pixels_screen_remote');\n\n        /**\n         * Average pixels for local video (camera)\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalCameraPixels\n            = new AverageStatReport('pixels_local');\n\n        /**\n         * Average pixels for local screen streaming video (reported only if not\n         * a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalScreenPixels\n            = new AverageStatReport('pixels_screen_local');\n\n        /**\n         * Average connection quality as defined by\n         * the {@link ConnectionQuality} module.\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgCQ = new AverageStatReport('connection_quality');\n\n        this._cachedTransportStats = undefined;\n\n        this._onLocalStatsUpdated = data => {\n            this._calculateAvgStats(data);\n            this._maybeSendTransportAnalyticsEvent(data);\n        };\n        conference.on(\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n            this._onLocalStatsUpdated);\n\n        this._onP2PStatusChanged = () => {\n            logger.debug('Resetting average stats calculation');\n            this._resetAvgStats();\n            this.jvbStatsMonitor._resetAvgStats();\n            this.p2pStatsMonitor._resetAvgStats();\n        };\n        conference.on(\n            ConferenceEvents.P2P_STATUS,\n            this._onP2PStatusChanged);\n\n        this._onJvb121StatusChanged = (oldStatus, newStatus) => {\n            // We want to reset only on the transition from false => true,\n            // because otherwise those stats are resetted on JVB <=> P2P\n            // transition.\n            if (newStatus === true) {\n                logger.info('Resetting JVB avg RTP stats');\n                this._resetAvgJvbStats();\n            }\n        };\n        conference.on(\n            ConferenceEvents.JVB121_STATUS,\n            this._onJvb121StatusChanged);\n\n        this.jvbStatsMonitor\n            = new ConnectionAvgStats(this, false /* JVB */, n);\n\n        this.p2pStatsMonitor\n            = new ConnectionAvgStats(this, true /* P2P */, n);\n    }\n\n    /**\n     * Processes next batch of stats reported on\n     * {@link ConnectionQualityEvents.LOCAL_STATS_UPDATED}.\n     * @param {go figure} data\n     * @private\n     */\n    _calculateAvgStats(data) {\n\n        if (!data) {\n            logger.error('No stats');\n\n            return;\n        }\n\n        const isP2P = this._conference.isP2PActive();\n        const confSize = this._conference.getParticipantCount();\n\n        if (!isP2P && confSize < 2) {\n\n            // There's no point in collecting stats for a JVB conference of 1.\n            // That happens for short period of time after everyone leaves\n            // the room, until Jicofo terminates the session.\n            return;\n        }\n\n        /* Uncomment to figure out stats structure\n        for (const key in data) {\n            if (data.hasOwnProperty(key)) {\n                logger.info(`local stat ${key}: `, data[key]);\n            }\n        } */\n\n        const bitrate = data.bitrate;\n        const bandwidth = data.bandwidth;\n        const packetLoss = data.packetLoss;\n        const frameRate = data.framerate;\n        const resolution = data.resolution;\n\n        if (!bitrate) {\n            logger.error('No \"bitrate\"');\n\n            return;\n        } else if (!bandwidth) {\n            logger.error('No \"bandwidth\"');\n\n            return;\n        } else if (!packetLoss) {\n            logger.error('No \"packetloss\"');\n\n            return;\n        } else if (!frameRate) {\n            logger.error('No \"framerate\"');\n\n            return;\n        } else if (!resolution) {\n            logger.error('No resolution');\n\n            return;\n        }\n\n        this._avgAudioBitrateUp.addNext(bitrate.audio.upload);\n        this._avgAudioBitrateDown.addNext(bitrate.audio.download);\n\n        this._avgVideoBitrateUp.addNext(bitrate.video.upload);\n        this._avgVideoBitrateDown.addNext(bitrate.video.download);\n\n        if (browser.supportsBandwidthStatistics()) {\n            this._avgBandwidthUp.addNext(bandwidth.upload);\n            this._avgBandwidthDown.addNext(bandwidth.download);\n        }\n\n        this._avgPacketLossUp.addNext(packetLoss.upload);\n        this._avgPacketLossDown.addNext(packetLoss.download);\n        this._avgPacketLossTotal.addNext(packetLoss.total);\n\n        this._avgCQ.addNext(data.connectionQuality);\n\n        if (frameRate) {\n            this._avgRemoteFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, false /* remote */, VideoType.CAMERA));\n            this._avgRemoteScreenFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, false /* remote */, VideoType.DESKTOP));\n\n            this._avgLocalFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, true /* local */, VideoType.CAMERA));\n            this._avgLocalScreenFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, true /* local */, VideoType.DESKTOP));\n        }\n\n        if (resolution) {\n            this._avgRemoteCameraPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, false /* remote */, VideoType.CAMERA));\n\n            this._avgRemoteScreenPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, false /* remote */, VideoType.DESKTOP));\n\n            this._avgLocalCameraPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, true /* local */, VideoType.CAMERA));\n\n            this._avgLocalScreenPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, true /* local */, VideoType.DESKTOP));\n        }\n\n        this._sampleIdx += 1;\n\n        if (this._sampleIdx >= this._n) {\n\n            const batchReport = {\n                p2p: isP2P,\n                'conference_size': confSize\n            };\n\n            if (data.transport && data.transport.length) {\n                Object.assign(batchReport, {\n                    'local_candidate_type':\n                        data.transport[0].localCandidateType,\n                    'remote_candidate_type':\n                        data.transport[0].remoteCandidateType,\n                    'transport_type': data.transport[0].type\n                });\n            }\n\n            this._avgAudioBitrateUp.appendReport(batchReport);\n            this._avgAudioBitrateDown.appendReport(batchReport);\n\n            this._avgVideoBitrateUp.appendReport(batchReport);\n            this._avgVideoBitrateDown.appendReport(batchReport);\n\n            if (browser.supportsBandwidthStatistics()) {\n                this._avgBandwidthUp.appendReport(batchReport);\n                this._avgBandwidthDown.appendReport(batchReport);\n            }\n            this._avgPacketLossUp.appendReport(batchReport);\n            this._avgPacketLossDown.appendReport(batchReport);\n            this._avgPacketLossTotal.appendReport(batchReport);\n\n            this._avgRemoteFPS.appendReport(batchReport);\n            if (!isNaN(this._avgRemoteScreenFPS.calculate())) {\n                this._avgRemoteScreenFPS.appendReport(batchReport);\n            }\n            this._avgLocalFPS.appendReport(batchReport);\n            if (!isNaN(this._avgLocalScreenFPS.calculate())) {\n                this._avgLocalScreenFPS.appendReport(batchReport);\n            }\n\n            this._avgRemoteCameraPixels.appendReport(batchReport);\n            if (!isNaN(this._avgRemoteScreenPixels.calculate())) {\n                this._avgRemoteScreenPixels.appendReport(batchReport);\n            }\n            this._avgLocalCameraPixels.appendReport(batchReport);\n            if (!isNaN(this._avgLocalScreenPixels.calculate())) {\n                this._avgLocalScreenPixels.appendReport(batchReport);\n            }\n\n            this._avgCQ.appendReport(batchReport);\n\n            Statistics.sendAnalytics(createRtpStatsEvent(batchReport));\n\n            this._resetAvgStats();\n        }\n    }\n\n    /**\n     * Calculates average number of pixels for the report\n     *\n     * @param {map} peerResolutions a map of peer resolutions\n     * @param {boolean} isLocal if the average is to be calculated for the local\n     * video or <tt>false</tt> if for remote videos.\n     * @param {VideoType} videoType\n     * @return {number|NaN} average number of pixels or <tt>NaN</tt> if there\n     * are no samples.\n     * @private\n     */\n    _calculateAvgVideoPixels(peerResolutions, isLocal, videoType) {\n        let peerPixelsSum = 0;\n        let peerCount = 0;\n        const myID = this._conference.myUserId();\n\n        for (const peerID of Object.keys(peerResolutions)) {\n            if (isLocal ? peerID === myID : peerID !== myID) {\n                const participant\n                    = isLocal\n                        ? null\n                        : this._conference.getParticipantById(peerID);\n                const videosResolution = peerResolutions[peerID];\n\n                // Do not continue without participant for non local peerID\n                if ((isLocal || participant) && videosResolution) {\n                    const peerAvgPixels = this._calculatePeerAvgVideoPixels(\n                        videosResolution, participant, videoType);\n\n                    if (!isNaN(peerAvgPixels)) {\n                        peerPixelsSum += peerAvgPixels;\n                        peerCount += 1;\n                    }\n                }\n            }\n        }\n\n        return peerPixelsSum / peerCount;\n    }\n\n    /**\n     * Calculate average pixels for either remote or local participant\n     * @param {object} videos maps resolution per video SSRC\n     * @param {JitsiParticipant|null} participant remote participant or\n     * <tt>null</tt> for local video pixels calculation.\n     * @param {VideoType} videoType the type of the video for which an average\n     * will be calculated.\n     * @return {number|NaN} average video pixels of all participant's videos or\n     * <tt>NaN</tt> if currently not available\n     * @private\n     */\n    _calculatePeerAvgVideoPixels(videos, participant, videoType) {\n        let ssrcs = Object.keys(videos).map(ssrc => Number(ssrc));\n        let videoTracks = null;\n\n        // NOTE that this method is supposed to be called for the stats\n        // received from the current peerconnection.\n        const tpc = this._conference.getActivePeerConnection();\n\n        if (participant) {\n            videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\n            if (videoTracks) {\n                ssrcs\n                    = ssrcs.filter(\n                        ssrc => videoTracks.find(\n                            track =>\n                                !track.isMuted()\n                                    && track.getSSRC() === ssrc\n                                    && track.videoType === videoType));\n            }\n        } else {\n            videoTracks = this._conference.getLocalTracks(MediaType.VIDEO);\n            ssrcs\n                = ssrcs.filter(\n                    ssrc => videoTracks.find(\n                        track =>\n                            !track.isMuted()\n                                && tpc.getLocalSSRC(track) === ssrc\n                                && track.videoType === videoType));\n        }\n\n        let peerPixelsSum = 0;\n        let peerSsrcCount = 0;\n\n        for (const ssrc of ssrcs) {\n            const peerSsrcPixels\n                = Number(videos[ssrc].height) * Number(videos[ssrc].width);\n\n            // FPS is reported as 0 for users with no video\n            if (!isNaN(peerSsrcPixels) && peerSsrcPixels > 0) {\n                peerPixelsSum += peerSsrcPixels;\n                peerSsrcCount += 1;\n            }\n        }\n\n        return peerPixelsSum / peerSsrcCount;\n    }\n\n\n    /**\n     * Calculates average FPS for the report\n     * @param {go figure} frameRate\n     * @param {boolean} isLocal if the average is to be calculated for the local\n     * video or <tt>false</tt> if for remote videos.\n     * @param {VideoType} videoType\n     * @return {number|NaN} average FPS or <tt>NaN</tt> if there are no samples.\n     * @private\n     */\n    _calculateAvgVideoFps(frameRate, isLocal, videoType) {\n        let peerFpsSum = 0;\n        let peerCount = 0;\n        const myID = this._conference.myUserId();\n\n        for (const peerID of Object.keys(frameRate)) {\n            if (isLocal ? peerID === myID : peerID !== myID) {\n                const participant\n                    = isLocal\n                        ? null : this._conference.getParticipantById(peerID);\n                const videosFps = frameRate[peerID];\n\n                // Do not continue without participant for non local peerID\n                if ((isLocal || participant) && videosFps) {\n                    const peerAvgFPS\n                        = this._calculatePeerAvgVideoFps(\n                            videosFps, participant, videoType);\n\n                    if (!isNaN(peerAvgFPS)) {\n                        peerFpsSum += peerAvgFPS;\n                        peerCount += 1;\n                    }\n                }\n            }\n        }\n\n        return peerFpsSum / peerCount;\n    }\n\n    /**\n     * Calculate average FPS for either remote or local participant\n     * @param {object} videos maps FPS per video SSRC\n     * @param {JitsiParticipant|null} participant remote participant or\n     * <tt>null</tt> for local FPS calculation.\n     * @param {VideoType} videoType the type of the video for which an average\n     * will be calculated.\n     * @return {number|NaN} average FPS of all participant's videos or\n     * <tt>NaN</tt> if currently not available\n     * @private\n     */\n    _calculatePeerAvgVideoFps(videos, participant, videoType) {\n        let ssrcs = Object.keys(videos).map(ssrc => Number(ssrc));\n        let videoTracks = null;\n\n        // NOTE that this method is supposed to be called for the stats\n        // received from the current peerconnection.\n        const tpc = this._conference.getActivePeerConnection();\n\n        if (participant) {\n            videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\n            if (videoTracks) {\n                ssrcs\n                    = ssrcs.filter(\n                        ssrc => videoTracks.find(\n                            track => !track.isMuted()\n                                && track.getSSRC() === ssrc\n                                && track.videoType === videoType));\n            }\n        } else {\n            videoTracks = this._conference.getLocalTracks(MediaType.VIDEO);\n            ssrcs\n                = ssrcs.filter(\n                    ssrc => videoTracks.find(\n                        track => !track.isMuted()\n                            && tpc.getLocalSSRC(track) === ssrc\n                            && track.videoType === videoType));\n        }\n\n        let peerFpsSum = 0;\n        let peerSsrcCount = 0;\n\n        for (const ssrc of ssrcs) {\n            const peerSsrcFps = Number(videos[ssrc]);\n\n            // FPS is reported as 0 for users with no video\n            if (!isNaN(peerSsrcFps) && peerSsrcFps > 0) {\n                peerFpsSum += peerSsrcFps;\n                peerSsrcCount += 1;\n            }\n        }\n\n        return peerFpsSum / peerSsrcCount;\n    }\n\n    /**\n     * Sends the 'transport.stats' analytics event whenever we detect that\n     * there is a change in the local or remote candidate type on the transport\n     * that is currently selected.\n     * @param {*} data\n     * @private\n     */\n    _maybeSendTransportAnalyticsEvent(data) {\n        if (!data || !data.transport || !data.transport.length) {\n            return;\n        }\n        const transportStats = {\n            p2p: data.transport[0].p2p,\n            'local_candidate_type': data.transport[0].localCandidateType,\n            'remote_candidate_type': data.transport[0].remoteCandidateType,\n            'transport_type': data.transport[0].type\n        };\n\n        if (!this._cachedTransportStats || !isEqual(transportStats, this._cachedTransportStats)) {\n            this._cachedTransportStats = transportStats;\n            Statistics.sendAnalytics(createTransportStatsEvent(transportStats));\n        }\n    }\n\n    /**\n     * Resets the stats related to JVB connection. Must not be called when in\n     * P2P mode, because then the {@link AverageStatReport} instances are\n     * tracking P2P stats. Note that this should never happen unless something\n     * is wrong with the P2P and JVB121 events.\n     * @private\n     */\n    _resetAvgJvbStats() {\n        this._resetAvgStats();\n        this.jvbStatsMonitor._resetAvgStats();\n    }\n\n    /**\n     * Reset cache of all averages and {@link _sampleIdx}.\n     * @private\n     */\n    _resetAvgStats() {\n        this._avgAudioBitrateUp.reset();\n        this._avgAudioBitrateDown.reset();\n\n        this._avgVideoBitrateUp.reset();\n        this._avgVideoBitrateDown.reset();\n\n        this._avgBandwidthUp.reset();\n        this._avgBandwidthDown.reset();\n\n        this._avgPacketLossUp.reset();\n        this._avgPacketLossDown.reset();\n        this._avgPacketLossTotal.reset();\n\n        this._avgRemoteFPS.reset();\n        this._avgRemoteScreenFPS.reset();\n        this._avgLocalFPS.reset();\n        this._avgLocalScreenFPS.reset();\n\n        this._avgRemoteCameraPixels.reset();\n        this._avgRemoteScreenPixels.reset();\n        this._avgLocalCameraPixels.reset();\n        this._avgLocalScreenPixels.reset();\n\n        this._avgCQ.reset();\n\n        this._sampleIdx = 0;\n    }\n\n    /**\n     * Unregisters all event listeners and stops working.\n     */\n    dispose() {\n        this._conference.off(\n            ConferenceEvents.P2P_STATUS,\n            this._onP2PStatusChanged);\n        this._conference.off(\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n            this._onLocalStatsUpdated);\n        this._conference.off(\n            ConferenceEvents.JVB121_STATUS,\n            this._onJvb121StatusChanged);\n        this.jvbStatsMonitor.dispose();\n        this.p2pStatsMonitor.dispose();\n    }\n}\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\n\nimport SpeakerStats from './SpeakerStats';\n\n/**\n * A collection for tracking speaker stats. Attaches listeners\n * to the conference to automatically update on tracked events.\n */\nexport default class SpeakerStatsCollector {\n    /**\n     * Initializes a new SpeakerStatsCollector instance.\n     *\n     * @constructor\n     * @param {JitsiConference} conference - The conference to track.\n     * @returns {void}\n     */\n    constructor(conference) {\n        this.stats = {\n            users: {\n\n                // userId: SpeakerStats\n            },\n            dominantSpeakerId: null\n        };\n\n        const userId = conference.myUserId();\n\n        this.stats.users[userId] = new SpeakerStats(userId, null, true);\n        this.conference = conference;\n\n        conference.addEventListener(\n            JitsiConferenceEvents.DOMINANT_SPEAKER_CHANGED,\n            this._onDominantSpeaker.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.USER_JOINED,\n            this._onUserJoin.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.USER_LEFT,\n            this._onUserLeave.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.DISPLAY_NAME_CHANGED,\n            this._onDisplayNameChange.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.FACIAL_EXPRESSION_ADDED,\n            this._onFacialExpressionAdd.bind(this));\n        if (conference.xmpp) {\n            conference.xmpp.addListener(\n                XMPPEvents.SPEAKER_STATS_RECEIVED,\n                this._updateStats.bind(this));\n        }\n    }\n\n    /**\n     * Reacts to dominant speaker change events by changing its speaker stats\n     * models to reflect the current dominant speaker.\n     *\n     * @param {string} dominantSpeakerId - The user id of the new\n     * dominant speaker.\n     * @returns {void}\n     * @private\n     */\n    _onDominantSpeaker(dominantSpeakerId) {\n        const oldDominantSpeaker\n            = this.stats.users[this.stats.dominantSpeakerId];\n        const newDominantSpeaker = this.stats.users[dominantSpeakerId];\n\n        oldDominantSpeaker && oldDominantSpeaker.setDominantSpeaker(false);\n        newDominantSpeaker && newDominantSpeaker.setDominantSpeaker(true);\n        this.stats.dominantSpeakerId = dominantSpeakerId;\n    }\n\n    /**\n     * Reacts to user join events by creating a new SpeakerStats model.\n     *\n     * @param {string} userId - The user id of the new user.\n     * @param {JitsiParticipant} - The JitsiParticipant model for the new user.\n     * @returns {void}\n     * @private\n     */\n    _onUserJoin(userId, participant) {\n        if (participant.isHidden()) {\n            return;\n        }\n\n        if (!this.stats.users[userId]) {\n            this.stats.users[userId] = new SpeakerStats(userId, participant.getDisplayName());\n        }\n    }\n\n    /**\n     * Reacts to user leave events by updating the associated user's\n     * SpeakerStats model.\n     *\n     * @param {string} userId - The user id of the user that left.\n     * @returns {void}\n     * @private\n     */\n    _onUserLeave(userId) {\n        const savedUser = this.stats.users[userId];\n\n        if (savedUser) {\n            savedUser.markAsHasLeft();\n        }\n    }\n\n    /**\n     * Reacts to user name change events by updating the last known name\n     * tracked in the associated SpeakerStats model.\n     *\n     * @param {string} userId - The user id of the user that left.\n     * @returns {void}\n     * @private\n     */\n    _onDisplayNameChange(userId, newName) {\n        const savedUser = this.stats.users[userId];\n\n        if (savedUser) {\n            savedUser.setDisplayName(newName);\n        }\n    }\n\n    /**\n     * Adds a new facial expression with its duration of a remote user.\n     *\n     * @param {string} userId - The user id of the user that left.\n     * @param {Object} data - The facial expression with its duration.\n     * @returns {void}\n     * @private\n     */\n    _onFacialExpressionAdd(userId, data) {\n        const savedUser = this.stats.users[userId];\n\n        if (savedUser) {\n            savedUser.addFacialExpression(data.facialExpression, data.duration);\n        }\n    }\n\n    /**\n     * Return a copy of the tracked SpeakerStats models.\n     *\n     * @returns {Object} The keys are the user ids and the values are the\n     * associated user's SpeakerStats model.\n     */\n    getStats() {\n        return this.stats.users;\n    }\n\n    /**\n     * Updates of the current stats is requested, passing the new values.\n     *\n     * @param {Object} newStats - The new values used to update current one.\n     * @private\n     */\n    _updateStats(newStats) {\n        for (const userId in newStats) { // eslint-disable-line guard-for-in\n            let speakerStatsToUpdate;\n            const newParticipant = this.conference.getParticipantById(userId);\n\n            // we want to ignore hidden participants\n            if (!newParticipant || !newParticipant.isHidden()) {\n                if (this.stats.users[userId]) {\n                    speakerStatsToUpdate = this.stats.users[userId];\n\n                    if (!speakerStatsToUpdate.getDisplayName()) {\n                        speakerStatsToUpdate\n                            .setDisplayName(newStats[userId].displayName);\n                    }\n                } else {\n                    speakerStatsToUpdate = new SpeakerStats(\n                        userId, newStats[userId].displayName);\n                    this.stats.users[userId] = speakerStatsToUpdate;\n                    speakerStatsToUpdate.markAsHasLeft();\n                }\n            }\n\n            speakerStatsToUpdate.totalDominantSpeakerTime\n                = newStats[userId].totalDominantSpeakerTime;\n\n            speakerStatsToUpdate.setFacialExpressions(newStats[userId].facialExpressions);\n        }\n    }\n}\n","/* eslint-disable max-params */\n\n/**\n * This object stores variables needed around the recording of an audio stream\n * and passing this recording along with additional information along to\n * different processes\n */\nexport default class RecordingResult {\n    /**\n     * @param blob the recording audio stream as a single blob\n     * @param name the name of the person of the audio stream\n     * @param startTime the time in UTC when recording of the audiostream started\n     * @param wordArray the recorder audio stream transcribed as an array of Word objects\n     */\n    constructor(blob, name, startTime, wordArray) {\n        this.blob = blob;\n        this.name = name;\n        this.startTime = startTime;\n        this.wordArray = wordArray;\n    }\n}\n","/**\n * A TrackRecorder object holds all the information needed for recording a\n * single JitsiTrack (either remote or local)\n * @param track The JitsiTrack the object is going to hold\n */\nexport default class TrackRecorder {\n    /**\n     * @param track The JitsiTrack the object is going to hold\n     */\n    constructor(track) {\n        // The JitsiTrack holding the stream\n        this.track = track;\n\n        // The MediaRecorder recording the stream\n        this.recorder = null;\n\n        // The array of data chunks recorded from the stream\n        // acts as a buffer until the data is stored on disk\n        this.data = null;\n\n        // the name of the person of the JitsiTrack. This can be undefined and/or\n        // not unique\n        this.name = null;\n\n        // the time of the start of the recording\n        this.startTime = null;\n    }\n}\n","import RecordingResult from './recordingResult';\nimport TrackRecorder from './trackRecorder';\n\n/**\n * Possible audio formats MIME types\n */\nconst AUDIO_WEBM = 'audio/webm'; // Supported in chrome\nconst AUDIO_OGG = 'audio/ogg'; // Supported in firefox\n\n/**\n * Starts the recording of a JitsiTrack in a TrackRecorder object.\n * This will also define the timestamp and try to update the name\n * @param trackRecorder the TrackRecorder to start\n */\nfunction startRecorder(trackRecorder) {\n    if (trackRecorder.recorder === undefined) {\n        throw new Error('Passed an object to startRecorder which is not a '\n            + 'TrackRecorder object');\n    }\n    trackRecorder.recorder.start();\n    trackRecorder.startTime = new Date();\n}\n\n/**\n * Stops the recording of a JitsiTrack in a TrackRecorder object.\n * This will also try to update the name\n * @param trackRecorder the TrackRecorder to stop\n */\nfunction stopRecorder(trackRecorder) {\n    if (trackRecorder.recorder === undefined) {\n        throw new Error('Passed an object to stopRecorder which is not a '\n            + 'TrackRecorder object');\n    }\n    trackRecorder.recorder.stop();\n}\n\n/**\n * Determines which kind of audio recording the browser supports\n * chrome supports \"audio/webm\" and firefox supports \"audio/ogg\"\n */\nfunction determineCorrectFileType() {\n    if (MediaRecorder.isTypeSupported(AUDIO_WEBM)) {\n        return AUDIO_WEBM;\n    } else if (MediaRecorder.isTypeSupported(AUDIO_OGG)) {\n        return AUDIO_OGG;\n    }\n    throw new Error(\n        'unable to create a MediaRecorder with the right mimetype!');\n}\n\n/**\n * main exported object of the file, holding all\n * relevant functions and variables for the outside world\n * @param jitsiConference the jitsiConference which this object\n * is going to record\n */\nfunction AudioRecorder(jitsiConference) {\n    // array of TrackRecorders, where each trackRecorder\n    // holds the JitsiTrack, MediaRecorder and recorder data\n    this.recorders = [];\n\n    // get which file type is supported by the current browser\n    this.fileType = determineCorrectFileType();\n\n    // boolean flag for active recording\n    this.isRecording = false;\n\n    // the jitsiconference the object is recording\n    this.jitsiConference = jitsiConference;\n}\n\n/**\n * Add the exported module so that it can be accessed by other files\n */\nAudioRecorder.determineCorrectFileType = determineCorrectFileType;\n\n/**\n * Adds a new TrackRecorder object to the array.\n *\n * @param track the track potentially holding an audio stream\n */\nAudioRecorder.prototype.addTrack = function(track) {\n    if (track.isAudioTrack()) {\n        // create the track recorder\n        const trackRecorder = this.instantiateTrackRecorder(track);\n\n        // push it to the local array of all recorders\n\n        this.recorders.push(trackRecorder);\n\n        // update the name of the trackRecorders\n        this.updateNames();\n\n        // If we're already recording, immediately start recording this new\n        // track.\n        if (this.isRecording) {\n            startRecorder(trackRecorder);\n        }\n    }\n};\n\n/**\n * Creates a TrackRecorder object. Also creates the MediaRecorder and\n * data array for the trackRecorder.\n * @param track the JitsiTrack holding the audio MediaStream(s)\n */\nAudioRecorder.prototype.instantiateTrackRecorder = function(track) {\n    const trackRecorder = new TrackRecorder(track);\n\n    // Create a new stream which only holds the audio track\n    const originalStream = trackRecorder.track.getOriginalStream();\n    const stream = new MediaStream();\n\n    originalStream.getAudioTracks().forEach(t => stream.addTrack(t));\n\n    // Create the MediaRecorder\n    trackRecorder.recorder = new MediaRecorder(stream,\n        { mimeType: this.fileType });\n\n    // array for holding the recorder data. Resets it when\n    // audio already has been recorder once\n    trackRecorder.data = [];\n\n    // function handling a dataEvent, e.g the stream gets new data\n    trackRecorder.recorder.ondataavailable = function(dataEvent) {\n        if (dataEvent.data.size > 0) {\n            trackRecorder.data.push(dataEvent.data);\n        }\n    };\n\n    return trackRecorder;\n};\n\n/**\n * Notifies the module that a specific track has stopped, e.g participant left\n * the conference.\n * if the recording has not started yet, the TrackRecorder will be removed from\n * the array. If the recording has started, the recorder will stop recording\n * but not removed from the array so that the recorded stream can still be\n * accessed\n *\n * @param {JitsiTrack} track the JitsiTrack to remove from the recording session\n */\nAudioRecorder.prototype.removeTrack = function(track) {\n    if (track.isVideoTrack()) {\n        return;\n    }\n\n    const array = this.recorders;\n    let i;\n\n    for (i = 0; i < array.length; i++) {\n        if (array[i].track.getParticipantId() === track.getParticipantId()) {\n            const recorderToRemove = array[i];\n\n            if (this.isRecording) {\n                stopRecorder(recorderToRemove);\n            } else {\n                // remove the TrackRecorder from the array\n                array.splice(i, 1);\n            }\n        }\n    }\n\n    // make sure the names are up to date\n    this.updateNames();\n};\n\n/**\n * Tries to update the name value of all TrackRecorder in the array.\n * If it hasn't changed,it will keep the exiting name. If it changes to a\n * undefined value, the old value will also be kept.\n */\nAudioRecorder.prototype.updateNames = function() {\n    const conference = this.jitsiConference;\n\n    this.recorders.forEach(trackRecorder => {\n        if (trackRecorder.track.isLocal()) {\n            trackRecorder.name = 'the transcriber';\n        } else {\n            const id = trackRecorder.track.getParticipantId();\n            const participant = conference.getParticipantById(id);\n            const newName = participant.getDisplayName();\n\n            if (newName !== 'undefined') {\n                trackRecorder.name = newName;\n            }\n        }\n    });\n};\n\n/**\n * Starts the audio recording of every local and remote track\n */\nAudioRecorder.prototype.start = function() {\n    if (this.isRecording) {\n        throw new Error('audiorecorder is already recording');\n    }\n\n    // set boolean isRecording flag to true so if new participants join the\n    // conference, that track can instantly start recording as well\n    this.isRecording = true;\n\n    // start all the mediaRecorders\n    this.recorders.forEach(trackRecorder => startRecorder(trackRecorder));\n\n    // log that recording has started\n    console.log(\n        `Started the recording of the audio. There are currently ${\n            this.recorders.length} recorders active.`);\n};\n\n/**\n * Stops the audio recording of every local and remote track\n */\nAudioRecorder.prototype.stop = function() {\n    // set the boolean flag to false\n    this.isRecording = false;\n\n    // stop all recorders\n    this.recorders.forEach(trackRecorder => stopRecorder(trackRecorder));\n    console.log('stopped recording');\n};\n\n/**\n * link hacking to download all recorded audio streams\n */\nAudioRecorder.prototype.download = function() {\n    this.recorders.forEach(trackRecorder => {\n        const blob = new Blob(trackRecorder.data, { type: this.fileType });\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement('a');\n\n        document.body.appendChild(a);\n        a.style = 'display: none';\n        a.href = url;\n        a.download = `test.${this.fileType.split('/')[1]}`;\n        a.click();\n        window.URL.revokeObjectURL(url);\n    });\n};\n\n/**\n * returns the audio files of all recorders as an array of objects,\n * which include the name of the owner of the track and the starting time stamp\n * @returns {Array} an array of RecordingResult objects\n */\nAudioRecorder.prototype.getRecordingResults = function() {\n    if (this.isRecording) {\n        throw new Error(\n            'cannot get blobs because the AudioRecorder is still recording!');\n    }\n\n    // make sure the names are up to date before sending them off\n    this.updateNames();\n\n    const array = [];\n\n    this.recorders.forEach(\n        recorder =>\n            array.push(\n                new RecordingResult(\n                    new Blob(recorder.data, { type: this.fileType }),\n                    recorder.name,\n                    recorder.startTime)));\n\n    return array;\n};\n\n/**\n * Gets the mime type of the recorder audio\n * @returns {String} the mime type of the recorder audio\n */\nAudioRecorder.prototype.getFileType = function() {\n    return this.fileType;\n};\n\n/**\n * export the main object AudioRecorder\n */\nexport default AudioRecorder;\n","/**\n * An object representing a transcribed word, with some additional information\n * @param word the word\n * @param begin the time the word was started being uttered\n * @param end the time the word stopped being uttered\n */\nexport default class Word {\n    /**\n     * @param word the word\n     * @param begin the time the word was started being uttered\n     * @param end the time the word stopped being uttered\n     */\n    constructor(word, begin, end) {\n        this.word = word;\n        this.begin = begin;\n        this.end = end;\n    }\n\n    /**\n     * Get the string representation of the word\n     * @returns {*} the word as a string\n     */\n    getWord() {\n        return this.word;\n    }\n\n    /**\n     * Get the time the word started being uttered\n     * @returns {*} the start time as an integer\n     */\n    getBeginTime() {\n        return this.begin;\n    }\n\n    /**\n     * Get the time the word stopped being uttered\n     * @returns {*} the end time as an integer\n     */\n    getEndTime() {\n        return this.end;\n    }\n}\n","/* global config */\n\nimport Word from '../word';\n\nimport audioRecorder from './../audioRecorder';\nimport AbstractTranscriptionService from './AbstractTranscriptionService';\n\n/**\n * Implements a TranscriptionService for a Sphinx4 http server\n */\nexport default class SphinxService extends AbstractTranscriptionService {\n    /**\n     * Implements a TranscriptionService for a Sphinx4 http server\n     */\n    constructor() {\n        super();\n\n        // set the correct url\n        this.url = getURL();\n    }\n\n    /**\n     * Overrides the sendRequest method from AbstractTranscriptionService\n     * it will send the audio stream the a Sphinx4 server to get the transcription\n     *\n     * @param audioFileBlob the recorder audio stream an a single Blob\n     * @param callback the callback function retrieving the server response\n     */\n    sendRequest(audioFileBlob, callback) {\n        console.log(`sending an audio file  to ${this.url}`);\n        console.log(`the audio file being sent: ${audioFileBlob}`);\n        const request = new XMLHttpRequest();\n\n        request.onreadystatechange = function() {\n            if (request.readyState === XMLHttpRequest.DONE\n                && request.status === 200) {\n                callback(request.responseText);\n            } else if (request.readyState === XMLHttpRequest.DONE) {\n                throw new Error(\n                    `unable to accept response from sphinx server. status: ${request.status}`);\n            }\n\n            // if not ready no point to throw an error\n        };\n        request.open('POST', this.url);\n        request.setRequestHeader('Content-Type',\n            audioRecorder.determineCorrectFileType());\n        request.send(audioFileBlob);\n        console.log(`send ${audioFileBlob}`);\n    }\n\n    /**\n     * Overrides the formatResponse method from AbstractTranscriptionService\n     * It will parse the answer from the server in the expected format\n     *\n     * @param response the JSON body retrieved from the Sphinx4 server\n     */\n    formatResponse(response) {\n        const result = JSON.parse(response).objects;\n\n        // make sure to delete the session id object, which is always\n        // the first value in the JSON array\n        result.shift();\n        const array = [];\n\n        result.forEach(\n            word => word.filler\n                || array.push(new Word(word.word, word.start, word.end)));\n\n        return array;\n    }\n\n    /**\n     * checks wether the reply is empty, or doesn't contain a correct JSON object\n     * @param response the server response\n     * @return {boolean} whether the response is valid\n     */\n    verify(response) {\n        console.log(`response from server:${response.toString()}`);\n\n        // test if server responded with a string object\n        if (typeof response !== 'string') {\n            return false;\n        }\n\n        // test if the string can be parsed into valid JSON\n        let json;\n\n        try {\n            json = JSON.parse(response);\n        } catch (error) {\n            console.log(error);\n\n            return false;\n        }\n\n        // check if the JSON has a \"objects\" value\n        if (json.objects === undefined) {\n            return false;\n        }\n\n        // get the \"objects\" value and check for a session ID\n        const array = json.objects;\n\n        if (!(array[0] && array[0]['session-id'])) {\n            return false;\n        }\n\n        // everything seems to be in order\n        return true;\n    }\n}\n\n/**\n * Gets the URL to the Sphinx4 server from the config file. If it's not there,\n * it will throw an error\n *\n * @returns {string} the URL to the sphinx4 server\n */\nfunction getURL() {\n    const message = 'config does not contain an url to a Sphinx4 https server';\n\n    if (config.sphinxURL === undefined) {\n        console.log(message);\n    } else {\n        const toReturn = config.sphinxURL;\n\n        if (toReturn.includes !== undefined && toReturn.includes('https://')) {\n            return toReturn;\n        }\n        console.log(message);\n\n    }\n}\n","/**\n * Abstract class representing an interface to implement a speech-to-text\n * service on.\n */\nexport default class TranscriptionService {\n    /**\n     * Abstract class representing an interface to implement a speech-to-text\n     * service on.\n     */\n    constructor() {\n        throw new Error('TranscriptionService is abstract and cannot be created');\n    }\n\n    /**\n     * This method can be used to send the recorder audio stream and\n     * retrieve the answer from the transcription service from the callback\n     *\n     * @param {RecordingResult} recordingResult a recordingResult object which\n     * includes the recorded audio stream as a blob\n     * @param {Function} callback  which will retrieve the a RecordingResult with\n     *        the answer as a WordArray\n     */\n    send(recordingResult, callback) {\n        this.sendRequest(recordingResult.blob, response => {\n            if (this.verify(response)) {\n                recordingResult.wordArray = this.formatResponse(response);\n            } else {\n                console.log('the retrieved response from the server is not valid!');\n                recordingResult.wordArray = [];\n            }\n            callback(recordingResult);\n        });\n    }\n\n    /**\n     * Abstract method which will rend the recorder audio stream to the implemented\n     * transcription service and will retrieve an answer, which will be\n     * called on the given callback method\n     *\n     * @param {Blob} audioBlob the recorded audio stream as a single Blob\n     * @param {function} callback function which will retrieve the answer\n     *                            from the service\n     */\n    sendRequest(audioBlob, callback) { // eslint-disable-line no-unused-vars\n        throw new Error('TranscriptionService.sendRequest is abstract');\n    }\n\n    /**\n     * Abstract method which will parse the output from the implemented\n     * transcription service to the expected format\n     *\n     * The transcriber class expect an array of word objects, where each word\n     * object is one transcribed word by the service.\n     *\n     * The expected output of this method is an array of word objects, in\n     * the correct order. That is, the first object in the array is the first word\n     * being said, and the last word in the array is the last word being said\n     *\n     * @param response the answer from the speech-to-text server which needs to be\n     *                 formatted\n     * @return {Array<Word>} an array of Word objects\n     */\n    formatResponse(response) { // eslint-disable-line no-unused-vars\n        throw new Error('TranscriptionService.format is abstract');\n    }\n\n    /**\n     * Abstract method which will verify that the response from the server is valid\n     *\n     * @param response the response from the server\n     * @return {boolean} true if response is valid, false otherwise\n     */\n    verify(response) { // eslint-disable-line no-unused-vars\n        throw new Error('TranscriptionService.verify is abstract');\n    }\n}\n","import AudioRecorder from './audioRecorder';\nimport SphinxService from './transcriptionServices/SphinxTranscriptionService';\n\nconst BEFORE_STATE = 'before';\nconst RECORDING_STATE = 'recording';\nconst TRANSCRIBING_STATE = 'transcribing';\nconst FINISHED_STATE = 'finished';\n\n// the amount of characters each line in the transcription will have\nconst MAXIMUM_SENTENCE_LENGTH = 80;\n\n/**\n * This is the main object for handing the Transcription. It interacts with\n * the audioRecorder to record every person in a conference and sends the\n * recorder audio to a transcriptionService. The returned speech-to-text result\n * will be merged to create a transcript\n * @param {AudioRecorder} audioRecorder An audioRecorder recording a conference\n */\nfunction Transcriber() {\n    // the object which can record all audio in the conference\n    this.audioRecorder = new AudioRecorder();\n\n    // this object can send the recorder audio to a speech-to-text service\n    this.transcriptionService = new SphinxService();\n\n    // holds a counter to keep track if merging can start\n    this.counter = null;\n\n    // holds the date when transcription started which makes it possible\n    // to calculate the offset between recordings\n    this.startTime = null;\n\n    // will hold the transcription once it is completed\n    this.transcription = null;\n\n    // this will be a method which will be called once the transcription is done\n    // with the transcription as parameter\n    this.callback = null;\n\n    // stores all the retrieved speech-to-text results to merge together\n    // this value will store an Array<Word> object\n    this.results = [];\n\n    // Stores the current state of the transcription process\n    this.state = BEFORE_STATE;\n\n    // Used in the updateTranscription method to add a new line when the\n    // sentence becomes to long\n    this.lineLength = 0;\n}\n\n/**\n * Method to start the transcription process. It will tell the audioRecorder\n * to start storing all audio streams and record the start time for merging\n * purposes\n */\nTranscriber.prototype.start = function start() {\n    if (this.state !== BEFORE_STATE) {\n        throw new Error(\n            `The transcription can only start when it's in the \"${\n                BEFORE_STATE}\" state. It's currently in the \"${\n                this.state}\" state`);\n    }\n    this.state = RECORDING_STATE;\n    this.audioRecorder.start();\n    this.startTime = new Date();\n};\n\n/**\n * Method to stop the transcription process. It will tell the audioRecorder to\n * stop, and get all the recorded audio to send it to the transcription service\n\n * @param callback a callback which will receive the transcription\n */\nTranscriber.prototype.stop = function stop(callback) {\n    if (this.state !== RECORDING_STATE) {\n        throw new Error(\n            `The transcription can only stop when it's in the \"${\n                RECORDING_STATE}\" state. It's currently in the \"${\n                this.state}\" state`);\n    }\n\n    // stop the recording\n    console.log('stopping recording and sending audio files');\n    this.audioRecorder.stop();\n\n    // and send all recorded audio to the transcription service\n    const callBack = blobCallBack.bind(null, this);\n\n    this.audioRecorder.getRecordingResults().forEach(recordingResult => {\n        this.transcriptionService.send(recordingResult, callBack);\n        this.counter++;\n    });\n\n    // set the state to \"transcribing\" so that maybeMerge() functions correctly\n    this.state = TRANSCRIBING_STATE;\n\n    // and store the callback for later\n    this.callback = callback;\n};\n\n/**\n * This method gets the answer from the transcription service, calculates the\n * offset and adds is to every Word object. It will also start the merging\n * when every send request has been received\n *\n * note: Make sure to bind this as a Transcription object\n * @param {Transcriber} transcriber the transcriber instance\n * @param {RecordingResult} answer a RecordingResult object with a defined\n * WordArray\n */\nfunction blobCallBack(transcriber, answer) {\n    console.log(\n        'retrieved an answer from the transcription service. The answer has an'\n            + ` array of length: ${answer.wordArray.length}`);\n\n    // first add the offset between the start of the transcription and\n    // the start of the recording to all start and end times\n    if (answer.wordArray.length > 0) {\n        let offset = answer.startTime.getUTCMilliseconds()\n            - transcriber.startTime.getUTCMilliseconds();\n\n        // transcriber time will always be earlier\n\n        if (offset < 0) {\n            offset = 0; // presume 0 if it somehow not earlier\n        }\n\n        let array = '[';\n\n        answer.wordArray.forEach(wordObject => {\n            wordObject.begin += offset;\n            wordObject.end += offset;\n            array += `${wordObject.word},`;\n        });\n        array += ']';\n        console.log(array);\n\n        // give a name value to the Array object so that the merging can access\n        // the name value without having to use the whole recordingResult object\n        // in the algorithm\n        answer.wordArray.name = answer.name;\n    }\n\n    // then store the array and decrease the counter\n    transcriber.results.push(answer.wordArray);\n    transcriber.counter--;\n    console.log(`current counter: ${transcriber.counter}`);\n\n    // and check if all results have been received.\n    transcriber.maybeMerge();\n}\n\n/**\n * this method will check if the counter is zero. If it is, it will call\n * the merging method\n */\nTranscriber.prototype.maybeMerge = function() {\n    if (this.state === TRANSCRIBING_STATE && this.counter === 0) {\n        // make sure to include the events in the result arrays before\n        // merging starts\n        this.merge();\n    }\n};\n\n/**\n * This method will merge all speech-to-text arrays together in one\n * readable transcription string\n */\nTranscriber.prototype.merge = function() {\n    console.log(\n        `starting merge process!\\n The length of the array: ${\n            this.results.length}`);\n    this.transcription = '';\n\n    // the merging algorithm will look over all Word objects who are at pos 0 in\n    // every array. It will then select the one closest in time to the\n    // previously placed word, while removing the selected word from its array\n    // note: words can be skipped the skipped word's begin and end time somehow\n    // end up between the closest word start and end time\n    const arrays = this.results;\n\n    // arrays of Word objects\n    const potentialWords = []; // array of the first Word objects\n    // check if any arrays are already empty and remove them\n\n    hasPopulatedArrays(arrays);\n\n    // populate all the potential Words for a first time\n    arrays.forEach(array => pushWordToSortedArray(potentialWords, array));\n\n    // keep adding words to transcription until all arrays are exhausted\n    while (hasPopulatedArrays(arrays)) {\n        // first select the lowest array;\n        let lowestWordArray = arrays[0];\n\n        arrays.forEach(wordArray => {\n            if (wordArray[0].begin < lowestWordArray[0].begin) {\n                lowestWordArray = wordArray;\n            }\n        });\n\n        // put the word in the transcription\n        let wordToAdd = lowestWordArray.shift();\n\n        this.updateTranscription(wordToAdd, lowestWordArray.name);\n\n        // keep going until a word in another array has a smaller time\n        // or the array is empty\n        while (lowestWordArray.length > 0) {\n            let foundSmaller = false;\n            const wordToCompare = lowestWordArray[0].begin;\n\n            arrays.forEach(wordArray => {\n                if (wordArray[0].begin < wordToCompare) {\n                    foundSmaller = true;\n                }\n            });\n\n            // add next word if no smaller time has been found\n            if (foundSmaller) {\n                break;\n            }\n\n            wordToAdd = lowestWordArray.shift();\n            this.updateTranscription(wordToAdd, null);\n        }\n\n    }\n\n    // set the state to finished and do the necessary left-over tasks\n    this.state = FINISHED_STATE;\n    if (this.callback) {\n        this.callback(this.transcription);\n    }\n};\n\n/**\n * Appends a word object to the transcription. It will make a new line with a\n * name if a name is specified\n * @param {Word} word the Word object holding the word to append\n * @param {String|null} name the name of a new speaker. Null if not applicable\n */\nTranscriber.prototype.updateTranscription = function(word, name) {\n    if (name !== undefined && name !== null) {\n        this.transcription += `\\n${name}:`;\n        this.lineLength = name.length + 1; // +1 for the semi-colon\n    }\n    if (this.lineLength + word.word.length > MAXIMUM_SENTENCE_LENGTH) {\n        this.transcription += '\\n    ';\n        this.lineLength = 4; // because of the 4 spaces after the new line\n    }\n    this.transcription += ` ${word.word}`;\n    this.lineLength += word.word.length + 1; // +1 for the space\n};\n\n/**\n * Check if the given 2 dimensional array has any non-zero Word-arrays in them.\n * All zero-element arrays inside will be removed\n * If any non-zero-element arrays are found, the method will return true.\n * otherwise it will return false\n * @param {Array<Array>} twoDimensionalArray the array to check\n * @returns {boolean} true if any non-zero arrays inside, otherwise false\n */\nfunction hasPopulatedArrays(twoDimensionalArray) {\n    for (let i = 0; i < twoDimensionalArray.length; i++) {\n        if (twoDimensionalArray[i].length === 0) {\n            twoDimensionalArray.splice(i, 1);\n        }\n    }\n\n    return twoDimensionalArray.length > 0;\n}\n\n/**\n * Push a word to the right location in a sorted array. The array is sorted\n * from lowest to highest start time. Every word is stored in an object which\n * includes the name of the person saying the word.\n *\n * @param {Array<Word>} array the sorted array to push to\n * @param {Word} word the word to push into the array\n */\nfunction pushWordToSortedArray(array, word) {\n    if (array.length === 0) {\n        array.push(word);\n    } else {\n        if (array[array.length - 1].begin <= word.begin) {\n            array.push(word);\n\n            return;\n        }\n\n        for (let i = 0; i < array.length; i++) {\n            if (word.begin < array[i].begin) {\n                array.splice(i, 0, word);\n\n                return;\n            }\n        }\n        array.push(word); // fail safe\n    }\n}\n\n/**\n * Gives the transcriber a JitsiTrack holding an audioStream to transcribe.\n * The JitsiTrack is given to the audioRecorder. If it doesn't hold an\n * audiostream, it will not be added by the audioRecorder\n * @param {JitsiTrack} track the track to give to the audioRecorder\n */\nTranscriber.prototype.addTrack = function(track) {\n    this.audioRecorder.addTrack(track);\n};\n\n/**\n * Remove the given track from the auioRecorder\n * @param track\n */\nTranscriber.prototype.removeTrack = function(track) {\n    this.audioRecorder.removeTrack(track);\n};\n\n/**\n * Will return the created transcription if it's avialable or throw an error\n * when it's not done yet\n * @returns {String} the transcription as a String\n */\nTranscriber.prototype.getTranscription = function() {\n    if (this.state !== FINISHED_STATE) {\n        throw new Error(\n            `The transcription can only be retrieved when it's in the \"${\n                FINISHED_STATE}\" state. It's currently in the \"${\n                this.state}\" state`);\n    }\n\n    return this.transcription;\n};\n\n/**\n * Returns the current state of the transcription process\n */\nTranscriber.prototype.getState = function() {\n    return this.state;\n};\n\n/**\n * Resets the state to the \"before\" state, such that it's again possible to\n * call the start method\n */\nTranscriber.prototype.reset = function() {\n    this.state = BEFORE_STATE;\n    this.counter = null;\n    this.transcription = null;\n    this.startTime = null;\n    this.callback = null;\n    this.results = [];\n    this.lineLength = 0;\n};\n\nexport default Transcriber;\n","import Statistics from '../statistics/statistics';\n\nconst logger = require('@jitsi/logger').getLogger(__filename);\n\n/**\n * Creates new instance of <tt>ComponentsVersions</tt> which will be discovering\n * the versions of conferencing system components in given\n * <tt>JitsiConference</tt>.\n * @param conference <tt>JitsiConference</tt> instance which will be used to\n *        listen for focus presence updates.\n * @constructor\n */\nexport default function ComponentsVersions(conference) {\n\n    this.versions = {};\n\n    this.conference = conference;\n    this.conference.addCommandListener(\n        'versions', this.processVersions.bind(this));\n}\n\nComponentsVersions.prototype.processVersions\n    = function(versions, mucResource, mucJid) {\n        if (!this.conference.isFocus(mucJid)) {\n            logger.warn(\n                `Received versions not from the focus user: ${versions}`,\n                mucJid);\n\n            return;\n        }\n\n        const log = [];\n\n        versions.children.forEach(component => {\n\n            const name = component.attributes.name;\n            const version = component.value;\n\n            if (this.versions[name] !== version) {\n                this.versions[name] = version;\n                logger.info(`Got ${name} version: ${version}`);\n\n                log.push({\n                    id: 'component_version',\n                    component: name,\n                    version\n                });\n            }\n        });\n\n        // logs versions to stats\n        if (log.length > 0) {\n            Statistics.sendLog(JSON.stringify(log));\n        }\n    };\n\n/**\n * Obtains the version of conferencing system component.\n * @param componentName the name of the component for which we want to obtain\n *        the version.\n * @returns {String} which describes the version of the component identified by\n *          given <tt>componentName</tt> or <tt>undefined</tt> if not found.\n */\nComponentsVersions.prototype.getComponentVersion = function(componentName) {\n    return this.versions[componentName];\n};\n","export enum VideoSIPGWStatusConstants {\n    /**\n     * Status that video SIP GW service is available.\n     */\n    STATUS_AVAILABLE = 'available',\n\n    /**\n     * Status that video SIP GW service is not available.\n     */\n    STATUS_UNDEFINED = 'undefined',\n\n    /**\n     * Status that video SIP GW service is available but there are no free nodes\n     * at the moment to serve new requests.\n     */\n    STATUS_BUSY = 'busy'\n};\n\nexport enum VideoSIPGWStateConstants {\n    /**\n     * Video SIP GW session state, currently running.\n     */\n    STATE_ON = 'on',\n\n    /**\n     * Video SIP GW session state, currently stopped and not running.\n     */\n    STATE_OFF = 'off',\n\n    /**\n     * Video SIP GW session state, currently is starting.\n     */\n    STATE_PENDING = 'pending',\n\n    /**\n     * Video SIP GW session state, has observed some issues and is retrying at the\n     * moment.\n     */\n    STATE_RETRYING = 'retrying',\n\n    /**\n     * Video SIP GW session state, tried to start but it failed.\n     */\n    STATE_FAILED = 'failed'\n};\n\nexport enum VideoSIPGWErrorConstants {\n    /**\n     * Error on trying to create video SIP GW session in conference where\n     * there is no room connection (hasn't joined or has left the room).\n     */\n    ERROR_NO_CONNECTION = 'error_no_connection',\n\n    /**\n     * Error on trying to create video SIP GW session with address for which\n     * there is an already created session.\n     */\n    ERROR_SESSION_EXISTS = 'error_session_already_exists'\n};\n\n// exported for backward compatibility\nexport const STATUS_AVAILABLE = VideoSIPGWStatusConstants.STATUS_AVAILABLE;\nexport const STATUS_UNDEFINED = VideoSIPGWStatusConstants.STATUS_UNDEFINED;\nexport const STATUS_BUSY = VideoSIPGWStatusConstants.STATUS_BUSY;\n\nexport const STATE_ON = VideoSIPGWStateConstants.STATE_ON;\nexport const STATE_OFF = VideoSIPGWStateConstants.STATE_OFF;\nexport const STATE_PENDING = VideoSIPGWStateConstants.STATE_PENDING;\nexport const STATE_RETRYING = VideoSIPGWStateConstants.STATE_RETRYING;\nexport const STATE_FAILED = VideoSIPGWStateConstants.STATE_FAILED;\n\nexport const ERROR_NO_CONNECTION = VideoSIPGWErrorConstants.ERROR_NO_CONNECTION;\nexport const ERROR_SESSION_EXISTS = VideoSIPGWErrorConstants.ERROR_SESSION_EXISTS;\n","import { getLogger } from '@jitsi/logger';\nimport { $iq } from 'strophe.js';\n\nimport Listenable from '../util/Listenable';\n\nimport * as VideoSIPGWConstants from './VideoSIPGWConstants';\n\nconst logger = getLogger(__filename);\n\n/**\n * The event name for current sip video session state changed.\n * @type {string} event name for sip video session state changed.\n */\nconst STATE_CHANGED = 'STATE_CHANGED';\n\n/**\n * Jitsi video SIP GW session. Holding its state and able to start/stop it.\n * When session is in OFF or FAILED stated it cannot be used anymore.\n */\nexport default class JitsiVideoSIPGWSession extends Listenable {\n\n    /**\n     * Creates new session with the desired sip address and display name.\n     *\n     * @param {string} sipAddress - The sip address to use when\n     * starting the session.\n     * @param {string} displayName - The display name to use for\n     * that participant.\n     * @param {ChatRoom} chatRoom - The chat room this session is bound to.\n     */\n    constructor(sipAddress, displayName, chatRoom) {\n        super();\n\n        this.sipAddress = sipAddress;\n        this.displayName = displayName;\n        this.chatRoom = chatRoom;\n\n        /*\n         * The initial state is undefined. Initial state cannot be STATE_OFF,\n         * the session enters this state when it was in STATE_ON and was stopped\n         * and such session cannot be used anymore.\n         *\n         * @type {VideoSIPGWConstants|undefined}\n         */\n        this.state = undefined;\n    }\n\n    /**\n     * Stops the current session.\n     */\n    stop() {\n        if (this.state === VideoSIPGWConstants.STATE_OFF\n            || this.state === VideoSIPGWConstants.STATE_FAILED) {\n            logger.warn('Video SIP GW session already stopped or failed!');\n\n            return;\n        }\n\n        this._sendJibriIQ('stop');\n    }\n\n    /**\n     * Starts a new session. Sends an iq to the focus.\n     */\n    start() {\n        // if state is off, this session was active for some reason\n        // and we should create new one, rather than reusing it\n        if (this.state === VideoSIPGWConstants.STATE_ON\n            || this.state === VideoSIPGWConstants.STATE_OFF\n            || this.state === VideoSIPGWConstants.STATE_PENDING\n            || this.state === VideoSIPGWConstants.STATE_RETRYING) {\n            logger.warn('Video SIP GW session already started!');\n\n            return;\n        }\n\n        this._sendJibriIQ('start');\n    }\n\n    /**\n     * Changes the state of this session.\n     *\n     * @param {string} newState - The new {VideoSIPGWConstants} state to set.\n     * @param {string} [optional] failureReason - The reason why a failure state\n     * was entered.\n     * @returns {void}\n     */\n    setState(newState, failureReason) {\n        if (newState === this.state) {\n            return;\n        }\n\n        const oldState = this.state;\n\n        this.state = newState;\n        this.eventEmitter.emit(STATE_CHANGED,\n            {\n                address: this.sipAddress,\n                failureReason,\n                oldState,\n                newState: this.state,\n                displayName: this.displayName\n            }\n        );\n    }\n\n    /**\n     * Subscribes the passed listener to the event for state change of this\n     * session.\n     *\n     * @param {Function} listener - The function that will receive the event.\n     */\n    addStateListener(listener) {\n        this.addListener(STATE_CHANGED, listener);\n    }\n\n    /**\n     * Unsubscribes the passed handler.\n     *\n     * @param {Function} listener - The function to be removed.\n     */\n    removeStateListener(listener) {\n        this.removeListener(STATE_CHANGED, listener);\n    }\n\n    /**\n     * Sends a jibri command using an iq.\n     *\n     * @private\n     * @param {string} action - The action to send ('start' or 'stop').\n     */\n    _sendJibriIQ(action) {\n        const appData = {};\n        appData[\"baseUrl\"] =  window.location.origin;\n        appData[\"token\"] =  this.chatRoom.connection.emuc.xmpp.token\n\n        const attributes = {\n            'xmlns': 'http://jitsi.org/protocol/jibri',\n            'action': action,\n            'app_data': JSON.stringify(appData),\n            sipaddress: this.sipAddress\n        };\n\n        attributes.displayname = this.displayName;\n\n        const iq = $iq({\n            to: this.chatRoom.focusMucJid,\n            type: 'set' })\n            .c('jibri', attributes)\n            .up();\n\n        logger.debug(`${action} video SIP GW session`, iq.nodeTree);\n        this.chatRoom.connection.sendIQ(\n            iq,\n            () => {}, // eslint-disable-line no-empty-function\n            error => {\n                logger.error(\n                    `Failed to ${action} video SIP GW session, error: `, error);\n                this.setState(VideoSIPGWConstants.STATE_FAILED);\n            });\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nconst logger = getLogger(__filename);\n\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\n\nimport JitsiVideoSIPGWSession from './JitsiVideoSIPGWSession';\nimport * as Constants from './VideoSIPGWConstants';\n\n/**\n * Main video SIP GW handler. Stores references of all created sessions.\n */\nexport default class VideoSIPGW {\n\n    /**\n     * Creates new handler.\n     *\n     * @param {ChatRoom} chatRoom - Tha chat room to handle.\n     */\n    constructor(chatRoom) {\n        this.chatRoom = chatRoom;\n        this.eventEmitter = chatRoom.eventEmitter;\n        logger.debug('creating VideoSIPGW');\n        this.sessions = {};\n\n        this.sessionStateChangeListener = this.sessionStateChanged.bind(this);\n\n        // VideoSIPGW, JitsiConference and ChatRoom are not reusable and no\n        // more than one VideoSIPGW can be created per JitsiConference,\n        // so we don't bother to cleanup\n        chatRoom.addPresenceListener('jibri-sip-call-state',\n            this.handleJibriSIPState.bind(this));\n    }\n\n    /**\n     * Handles presence nodes with name: jibri-sip-call-state.\n     *\n     * @param {Object} node the presence node Object to handle.\n     * Object representing part of the presence received over xmpp.\n     */\n    handleJibriSIPState(node) {\n        const attributes = node.attributes;\n\n        if (!attributes) {\n            return;\n        }\n\n        logger.debug('Handle video sip gw state : ', attributes);\n\n        const newState = attributes.state;\n\n        if (newState === this.state) {\n            return;\n        }\n\n        switch (newState) {\n        case Constants.STATE_ON:\n        case Constants.STATE_OFF:\n        case Constants.STATE_PENDING:\n        case Constants.STATE_RETRYING:\n        case Constants.STATE_FAILED: {\n            const address = attributes.sipaddress;\n\n            if (!address) {\n                return;\n            }\n\n            // find the corresponding session and set its state\n            const session = this.sessions[address];\n\n            if (session) {\n                session.setState(newState, attributes.failure_reason);\n            } else {\n                logger.warn('Video SIP GW session not found:', address);\n            }\n        }\n        }\n    }\n\n    /**\n     * Creates new session and stores its reference if it does not exist or\n     * returns an error otherwise.\n     *\n     * @param {string} sipAddress - The sip address to use.\n     * @param {string} displayName - The display name to use.\n     * @returns {JitsiVideoSIPGWSession|Error}\n     */\n    createVideoSIPGWSession(sipAddress, displayName) {\n        if (this.sessions[sipAddress]) {\n            logger.warn('There was already a Video SIP GW session for address',\n                sipAddress);\n\n            return new Error(Constants.ERROR_SESSION_EXISTS);\n        }\n\n        const session = new JitsiVideoSIPGWSession(\n            sipAddress, displayName, this.chatRoom);\n\n        session.addStateListener(this.sessionStateChangeListener);\n\n        this.sessions[sipAddress] = session;\n\n        return session;\n    }\n\n    /**\n     * Listener for session state changed. When a session goes to off or failed\n     * we delete its reference.\n     *\n     * @param {options} event - { address, oldState, newState, displayName }\n     */\n    sessionStateChanged(event) {\n        const address = event.address;\n\n        if (event.newState === Constants.STATE_OFF\n            || event.newState === Constants.STATE_FAILED) {\n            const session = this.sessions[address];\n\n            if (!session) {\n                logger.error('Missing Video SIP GW session with address:',\n                    address);\n\n                return;\n            }\n\n            session.removeStateListener(this.sessionStateChangeListener);\n            delete this.sessions[address];\n        }\n\n        this.eventEmitter.emit(\n            XMPPEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED,\n            event);\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport { Strophe } from 'strophe.js';\n\nimport { MediaType } from '../../service/RTC/MediaType';\nimport * as SignalingEvents from '../../service/RTC/SignalingEvents';\nimport SignalingLayer, { getMediaTypeFromSourceName } from '../../service/RTC/SignalingLayer';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\nimport FeatureFlags from '../flags/FeatureFlags';\n\nimport { filterNodeFromPresenceJSON } from './ChatRoom';\n\nconst logger = getLogger(__filename);\n\nexport const SOURCE_INFO_PRESENCE_ELEMENT = 'SourceInfo';\n\n/**\n * Default XMPP implementation of the {@link SignalingLayer} interface. Obtains\n * the data from the MUC presence.\n */\nexport default class SignalingLayerImpl extends SignalingLayer {\n    /**\n     * Creates new instance.\n     */\n    constructor() {\n        super();\n\n        /**\n         * A map that stores SSRCs of remote streams. And is used only locally\n         * We store the mapping when jingle is received, and later is used\n         * onaddstream webrtc event where we have only the ssrc\n         * FIXME: This map got filled and never cleaned and can grow during long\n         * conference\n         * @type {Map<number, string>} maps SSRC number to jid\n         */\n        this.ssrcOwners = new Map();\n\n        /**\n         *\n         * @type {ChatRoom|null}\n         */\n        this.chatRoom = null;\n\n        /**\n         * @type {Map<SourceName, SourceInfo>}\n         * @private\n         */\n        this._localSourceState = { };\n\n        /**\n         * @type {Map<EndpointId, Map<SourceName, SourceInfo>>}\n         * @private\n         */\n        this._remoteSourceState = { };\n\n        /**\n         * A map that stores the source name of a track identified by it's ssrc.\n         * We store the mapping when jingle is received, and later is used\n         * onaddstream webrtc event where we have only the ssrc\n         * FIXME: This map got filled and never cleaned and can grow during long\n         * conference\n         * @type {Map<number, string>} maps SSRC number to source name\n         */\n        this._sourceNames = new Map();\n    }\n\n    /**\n     * Adds <SourceInfo> element to the local presence.\n     *\n     * @returns {void}\n     * @private\n     */\n    _addLocalSourceInfoToPresence() {\n        if (this.chatRoom) {\n            return this.chatRoom.addOrReplaceInPresence(\n                SOURCE_INFO_PRESENCE_ELEMENT,\n                { value: JSON.stringify(this._localSourceState) });\n        }\n\n        return false;\n    }\n\n    /**\n     * Check is given endpoint has advertised <SourceInfo/> in it's presence which means that the source name signaling\n     * is used by this endpoint.\n     *\n     * @param {EndpointId} endpointId\n     * @returns {boolean}\n     */\n    _doesEndpointSendNewSourceInfo(endpointId) {\n        const presence = this.chatRoom?.getLastPresence(endpointId);\n\n        return Boolean(presence && presence.find(node => node.tagName === SOURCE_INFO_PRESENCE_ELEMENT));\n    }\n\n    /**\n     * Sets the <tt>ChatRoom</tt> instance used and binds presence listeners.\n     * @param {ChatRoom} room\n     */\n    setChatRoom(room) {\n        const oldChatRoom = this.chatRoom;\n\n        this.chatRoom = room;\n        if (oldChatRoom) {\n            oldChatRoom.removePresenceListener(\n                'audiomuted', this._audioMuteHandler);\n            oldChatRoom.removePresenceListener(\n                'videomuted', this._videoMuteHandler);\n            oldChatRoom.removePresenceListener(\n                'videoType', this._videoTypeHandler);\n            if (FeatureFlags.isSourceNameSignalingEnabled()) {\n                this._sourceInfoHandler\n                    && oldChatRoom.removePresenceListener(\n                        SOURCE_INFO_PRESENCE_ELEMENT, this._sourceInfoHandler);\n                this._memberLeftHandler\n                    && oldChatRoom.removeEventListener(\n                        XMPPEvents.MUC_MEMBER_LEFT, this._memberLeftHandler);\n            }\n        }\n        if (room) {\n            if (FeatureFlags.isSourceNameSignalingEnabled()) {\n                this._bindChatRoomEventHandlers(room);\n                this._addLocalSourceInfoToPresence();\n            } else {\n                // TODO the logic below has been duplicated in _bindChatRoomEventHandlers, clean this up once\n                //  the new impl has been tested well enough\n                // SignalingEvents\n                this._audioMuteHandler = (node, from) => {\n                    this.eventEmitter.emit(\n                        SignalingEvents.PEER_MUTED_CHANGED,\n                        from, MediaType.AUDIO, node.value === 'true');\n                };\n                room.addPresenceListener('audiomuted', this._audioMuteHandler);\n\n                this._videoMuteHandler = (node, from) => {\n                    this.eventEmitter.emit(\n                        SignalingEvents.PEER_MUTED_CHANGED,\n                        from, MediaType.VIDEO, node.value === 'true');\n                };\n                room.addPresenceListener('videomuted', this._videoMuteHandler);\n\n                this._videoTypeHandler = (node, from) => {\n                    this.eventEmitter.emit(\n                        SignalingEvents.PEER_VIDEO_TYPE_CHANGED,\n                        from, node.value);\n                };\n                room.addPresenceListener('videoType', this._videoTypeHandler);\n            }\n        }\n    }\n\n    /**\n     * Binds event listeners to the chat room instance.\n     * @param {ChatRoom} room\n     * @private\n     * @returns {void}\n     */\n    _bindChatRoomEventHandlers(room) {\n        const emitAudioMutedEvent = (endpointId, muted) => {\n            this.eventEmitter.emit(\n                SignalingEvents.PEER_MUTED_CHANGED,\n                endpointId,\n                MediaType.AUDIO,\n                muted);\n        };\n        const emitVideoMutedEvent = (endpointId, muted) => {\n            this.eventEmitter.emit(\n                SignalingEvents.PEER_MUTED_CHANGED,\n                endpointId,\n                MediaType.VIDEO,\n                muted);\n        };\n\n        // SignalingEvents\n        this._audioMuteHandler = (node, from) => {\n            if (!this._doesEndpointSendNewSourceInfo(from)) {\n                emitAudioMutedEvent(from, node.value === 'true');\n            }\n        };\n        room.addPresenceListener('audiomuted', this._audioMuteHandler);\n\n        this._videoMuteHandler = (node, from) => {\n            if (!this._doesEndpointSendNewSourceInfo(from)) {\n                emitVideoMutedEvent(from, node.value === 'true');\n            }\n        };\n        room.addPresenceListener('videomuted', this._videoMuteHandler);\n\n        const emitVideoTypeEvent = (endpointId, videoType) => {\n            this.eventEmitter.emit(\n                SignalingEvents.PEER_VIDEO_TYPE_CHANGED,\n                endpointId, videoType);\n        };\n\n        this._videoTypeHandler = (node, from) => {\n            if (!this._doesEndpointSendNewSourceInfo(from)) {\n                emitVideoTypeEvent(from, node.value);\n            }\n        };\n\n        if (!FeatureFlags.isMultiStreamSupportEnabled()) {\n            room.addPresenceListener('videoType', this._videoTypeHandler);\n        }\n\n        this._sourceInfoHandler = (node, mucNick) => {\n            const endpointId = mucNick;\n            const { value } = node;\n            const sourceInfoJSON = JSON.parse(value);\n            const emitEventsFromHere = this._doesEndpointSendNewSourceInfo(endpointId);\n            const endpointSourceState\n                = this._remoteSourceState[endpointId] || (this._remoteSourceState[endpointId] = {});\n\n            for (const sourceName of Object.keys(sourceInfoJSON)) {\n                const mediaType = getMediaTypeFromSourceName(sourceName);\n                const newMutedState = Boolean(sourceInfoJSON[sourceName].muted);\n                const oldSourceState = endpointSourceState[sourceName]\n                    || (endpointSourceState[sourceName] = { sourceName });\n\n                if (oldSourceState.muted !== newMutedState) {\n                    oldSourceState.muted = newMutedState;\n                    if (emitEventsFromHere && mediaType === MediaType.AUDIO) {\n                        emitAudioMutedEvent(endpointId, newMutedState);\n                    } else {\n                        emitVideoMutedEvent(endpointId, newMutedState);\n                    }\n                }\n\n                // Assume a default videoType of 'camera' for video sources.\n                const newVideoType = mediaType === MediaType.VIDEO\n                    ? sourceInfoJSON[sourceName].videoType ?? VideoType.CAMERA\n                    : undefined;\n\n                if (oldSourceState.videoType !== newVideoType) {\n                    oldSourceState.videoType = newVideoType;\n\n                    // videoType is not allowed to change on a given JitsiLocalTrack when multi stream support is\n                    // enabled.\n                    emitEventsFromHere\n                        && !FeatureFlags.isMultiStreamSupportEnabled()\n                        && emitVideoTypeEvent(endpointId, newVideoType);\n                }\n            }\n\n            // Cleanup removed source names\n            const newSourceNames = Object.keys(sourceInfoJSON);\n\n            for (const sourceName of Object.keys(endpointSourceState)) {\n                if (newSourceNames.indexOf(sourceName) === -1) {\n                    delete endpointSourceState[sourceName];\n                }\n            }\n        };\n        room.addPresenceListener('SourceInfo', this._sourceInfoHandler);\n\n        // Cleanup when participant leaves\n        this._memberLeftHandler = jid => {\n            const endpointId = Strophe.getResourceFromJid(jid);\n\n            delete this._remoteSourceState[endpointId];\n\n            if (FeatureFlags.isSourceNameSignalingEnabled()) {\n                for (const [ key, value ] of this.ssrcOwners.entries()) {\n                    if (value === endpointId) {\n                        delete this._sourceNames[key];\n                    }\n                }\n            }\n        };\n\n        room.addEventListener(XMPPEvents.MUC_MEMBER_LEFT, this._memberLeftHandler);\n    }\n\n    /**\n     * Finds the first source of given media type for the given endpoint.\n     * @param endpointId\n     * @param mediaType\n     * @returns {SourceInfo|null}\n     * @private\n     */\n    _findEndpointSourceInfoForMediaType(endpointId, mediaType) {\n        const remoteSourceState = this._remoteSourceState[endpointId];\n\n        if (!remoteSourceState) {\n            return null;\n        }\n\n        for (const sourceInfo of Object.values(remoteSourceState)) {\n            const _mediaType = getMediaTypeFromSourceName(sourceInfo.sourceName);\n\n            if (_mediaType === mediaType) {\n                return sourceInfo;\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getPeerMediaInfo(owner, mediaType) {\n        const legacyGetPeerMediaInfo = () => {\n            if (this.chatRoom) {\n                return this.chatRoom.getMediaPresenceInfo(owner, mediaType);\n            }\n            logger.error('Requested peer media info, before room was set');\n        };\n\n        if (FeatureFlags.isSourceNameSignalingEnabled()) {\n            const lastPresence = this.chatRoom.getLastPresence(owner);\n\n            if (!lastPresence) {\n                throw new Error(`getPeerMediaInfo - no presence stored for: ${owner}`);\n            }\n\n            if (!this._doesEndpointSendNewSourceInfo(owner)) {\n                return legacyGetPeerMediaInfo();\n            }\n\n            /**\n             * @type {PeerMediaInfo}\n             */\n            const mediaInfo = {};\n            const endpointMediaSource = this._findEndpointSourceInfoForMediaType(owner, mediaType);\n\n            // The defaults are provided only, because getPeerMediaInfo is a legacy method. This will be eventually\n            // changed into a getSourceInfo method which returns undefined if there's no source. Also there will be\n            // no mediaType argument there.\n            if (mediaType === MediaType.AUDIO) {\n                mediaInfo.muted = endpointMediaSource ? endpointMediaSource.muted : true;\n            } else if (mediaType === MediaType.VIDEO) {\n                mediaInfo.muted = endpointMediaSource ? endpointMediaSource.muted : true;\n                mediaInfo.videoType = endpointMediaSource ? endpointMediaSource.videoType : undefined;\n\n                const codecTypeNode = filterNodeFromPresenceJSON(lastPresence, 'jitsi_participant_codecType');\n\n                if (codecTypeNode.length > 0) {\n                    mediaInfo.codecType = codecTypeNode[0].value;\n                }\n            } else {\n                throw new Error(`Unsupported media type: ${mediaType}`);\n            }\n\n            return mediaInfo;\n        }\n\n        return legacyGetPeerMediaInfo();\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getPeerSourceInfo(owner, sourceName) {\n        return this._remoteSourceState[owner] ? this._remoteSourceState[owner][sourceName] : undefined;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getSSRCOwner(ssrc) {\n        return this.ssrcOwners.get(ssrc);\n    }\n\n    /**\n     * Set an SSRC owner.\n     * @param {number} ssrc an SSRC to be owned\n     * @param {string} endpointId owner's ID (MUC nickname)\n     * @throws TypeError if <tt>ssrc</tt> is not a number\n     */\n    setSSRCOwner(ssrc, endpointId) {\n        if (typeof ssrc !== 'number') {\n            throw new TypeError(`SSRC(${ssrc}) must be a number`);\n        }\n\n        // Now signaling layer instance is shared between different JingleSessionPC instances, so although very unlikely\n        // an SSRC conflict could potentially occur. Log a message to make debugging easier.\n        const existingOwner = this.ssrcOwners.get(ssrc);\n\n        if (existingOwner && existingOwner !== endpointId) {\n            logger.error(`SSRC owner re-assigned from ${existingOwner} to ${endpointId}`);\n        }\n        this.ssrcOwners.set(ssrc, endpointId);\n    }\n\n    /**\n     * Adjusts muted status of given track.\n     *\n     * @param {SourceName} sourceName - the name of the track's source.\n     * @param {boolean} muted - the new muted status.\n     * @returns {boolean}\n     */\n    setTrackMuteStatus(sourceName, muted) {\n        if (!this._localSourceState[sourceName]) {\n            this._localSourceState[sourceName] = {};\n        }\n\n        this._localSourceState[sourceName].muted = muted;\n\n        if (this.chatRoom) {\n            // FIXME This only adjusts the presence, but doesn't actually send it. Here we temporarily rely on\n            // the legacy signaling part to send the presence. Remember to add \"send presence\" here when the legacy\n            // signaling is removed.\n            return this._addLocalSourceInfoToPresence();\n        }\n\n        return false;\n    }\n\n    /**\n     * Sets track's video type.\n     * @param {SourceName} sourceName - the track's source name.\n     * @param {VideoType} videoType - the new video type.\n     * @returns {boolean}\n     */\n    setTrackVideoType(sourceName, videoType) {\n        if (!this._localSourceState[sourceName]) {\n            this._localSourceState[sourceName] = {};\n        }\n\n        if (this._localSourceState[sourceName].videoType !== videoType) {\n            // Include only if not a camera (default)\n            this._localSourceState[sourceName].videoType = videoType === VideoType.CAMERA ? undefined : videoType;\n\n            // NOTE this doesn't send the actual presence, because is called from the same place where the legacy video\n            // type is emitted which does the actual sending. A send presence statement needs to be added when\n            // the legacy part is removed.\n            return this._addLocalSourceInfoToPresence();\n        }\n\n        return false;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getTrackSourceName(ssrc) {\n        return this._sourceNames.get(ssrc);\n    }\n\n    /**\n     * Saves the source name for a track identified by it's ssrc.\n     * @param {number} ssrc the ssrc of the target track.\n     * @param {SourceName} sourceName the track's source name to save.\n     * @throws TypeError if <tt>ssrc</tt> is not a number\n     */\n    setTrackSourceName(ssrc, sourceName) {\n        if (typeof ssrc !== 'number') {\n            throw new TypeError(`SSRC(${ssrc}) must be a number`);\n        }\n\n        // Now signaling layer instance is shared between different JingleSessionPC instances, so although very unlikely\n        // an SSRC conflict could potentially occur. Log a message to make debugging easier.\n        const existingName = this._sourceNames.get(ssrc);\n\n        if (existingName && existingName !== sourceName) {\n            logger.error(`SSRC(${ssrc}) sourceName re-assigned from ${existingName} to ${sourceName}`);\n        }\n\n        this._sourceNames.set(ssrc, sourceName);\n    }\n\n}\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nimport Statistics from \"./statistics\";\n\n\nconst INITIAL_STATE = {\n    localTracksDuration: {\n        audio: {\n            startedTime: -1,\n            value: 0\n        },\n        video: {\n            camera: {\n                startedTime: -1,\n                value: 0\n            },\n            desktop: {\n                startedTime: -1,\n                value: 0\n            }\n        },\n        conference: {\n            startedTime: -1,\n            value: 0\n        }\n    }\n};\n\n\n\nlet FINAL_STATE = {\n    localTracksDuration: {\n        audio: {\n            startedTime: -1,\n            value: 0\n        },\n        video: {\n            camera: {\n                startedTime: -1,\n                value: 0\n            },\n            desktop: {\n                startedTime: -1,\n                value: 0\n            }\n        },\n        conference: {\n            startedTime: -1,\n            value: 0\n        }\n    }\n};\n\n\nfunction createLocalTracksDurationEvent(duration) {\n    const { audio, video, conference } = duration;\n    const { camera, desktop } = video;\n\n    return {\n        action: 'local.tracks.durations',\n        attributes: {\n            audio: audio.value,\n            camera: camera.value,\n            conference: conference.value,\n            desktop: desktop.value\n        }\n    };\n}\n\n\nfunction calculateLocalTrackDuration(state, conference) {\n\n    const now = Date.now();\n    const { localTracksDuration } = state;\n\n    const {\n        audio,\n        video\n    } = localTracksDuration;\n    const {\n        camera,\n        desktop\n    } = video;\n\n    const tracks = conference.getLocalTracks();\n    const audioTrack = tracks.find(track=>track.getType()===\"audio\");\n    const videoTrack = tracks.find(track=>track.getType()===\"video\");\n    const newDuration = { ...localTracksDuration };\n\n    if (!audioTrack || audioTrack.muted || !conference) {\n        newDuration.audio = {\n            startedTime: -1,\n            value: audio.value + (audio.startedTime === -1 ? 0 : now - audio.startedTime)\n        };\n    } else if (audio.startedTime === -1) {\n        newDuration.audio.startedTime = now;\n    }\n\n    if (!videoTrack || videoTrack.muted || !conference) {\n        newDuration.video = {\n            camera: {\n                startedTime: -1,\n                value: camera.value + (camera.startedTime === -1 ? 0 : now - camera.startedTime)\n            },\n            desktop: {\n                startedTime: -1,\n                value: desktop.value + (desktop.startedTime === -1 ? 0 : now - desktop.startedTime)\n            }\n        };\n    } else {\n        const { videoType } = videoTrack;\n\n        if (video[videoType].startedTime === -1) {\n            newDuration.video[videoType].startedTime = now;\n        }\n    }\n\n    return {\n        ...localTracksDuration,\n        ...newDuration\n    };\n}\n\n\nexport default class LocalTracksDuration {\n\n    constructor(conference) {\n\n        conference.addEventListener(JitsiConferenceEvents.CONFERENCE_JOINED, ()=>{\n            FINAL_STATE = {\n                localTracksDuration: {\n                    ...calculateLocalTrackDuration(INITIAL_STATE, conference),\n                    conference: {\n                        startedTime: Date.now(),\n                        value: 0\n                    }\n                }\n            };\n        });\n\n        conference.addEventListener(JitsiConferenceEvents.TRACK_UPDATED, ()=>{\n            const { localTracksDuration } = FINAL_STATE;\n\n            if (localTracksDuration.conference.startedTime === -1) {\n                return;\n            }\n            FINAL_STATE = {\n                localTracksDuration: {\n                    ...localTracksDuration,\n                    ...calculateLocalTrackDuration(FINAL_STATE, conference)\n                }\n            };\n        });\n\n        conference.addEventListener(JitsiConferenceEvents.TRACK_ADDED, ()=>{\n\n            const { localTracksDuration } = FINAL_STATE;\n\n            if (localTracksDuration.conference.startedTime === -1) {\n                // We don't want to track the media duration if the conference is not joined yet because otherwise we won't\n                // be able to compare them with the conference duration (from conference join to conference will leave).\n                // Also, do not track media duration for presenter tracks.\n                return;\n            }\n\n            FINAL_STATE = {\n                localTracksDuration: {\n                    ...localTracksDuration,\n                    ...calculateLocalTrackDuration(FINAL_STATE, conference)\n                }\n            };\n        });\n\n        conference.addEventListener(JitsiConferenceEvents.TRACK_REMOVED, ()=>{\n\n            const { localTracksDuration } = FINAL_STATE;\n\n            if (localTracksDuration.conference.startedTime === -1) {\n                // We don't want to track the media duration if the conference is not joined yet because otherwise we won't\n                // be able to compare them with the conference duration (from conference join to conference will leave).\n                // Also, do not track media duration for presenter tracks.\n                return;\n            }\n\n            FINAL_STATE = {\n                localTracksDuration: {\n                    ...localTracksDuration,\n                    ...calculateLocalTrackDuration(FINAL_STATE, conference)\n                }\n            };\n        });\n\n\n\n        conference.addEventListener(JitsiConferenceEvents.CONFERENCE_LEFT, ()=>{\n            const { localTracksDuration } = FINAL_STATE;\n            const newLocalTracksDuration = {\n                ...calculateLocalTrackDuration(FINAL_STATE, conference),\n                conference: {\n                    startedTime: -1,\n                    value: Date.now() - localTracksDuration.conference.startedTime\n                }\n            };\n            Statistics.sendAnalytics(createLocalTracksDurationEvent(newLocalTracksDuration));\n        });\n    }\n}\n","/* global $ */\n\nimport { getLogger } from '@jitsi/logger';\nimport EventEmitter from 'events';\nimport isEqual from 'lodash.isequal';\nimport { Strophe } from 'strophe.js';\n\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\nimport JitsiConferenceEventManager from './JitsiConferenceEventManager';\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport JitsiParticipant from './JitsiParticipant';\nimport JitsiTrackError from './JitsiTrackError';\nimport * as JitsiTrackErrors from './JitsiTrackErrors';\nimport * as JitsiTrackEvents from './JitsiTrackEvents';\nimport authenticateAndUpgradeRole from './authenticateAndUpgradeRole';\nimport { CodecSelection } from './modules/RTC/CodecSelection';\nimport RTC from './modules/RTC/RTC';\nimport { SS_DEFAULT_FRAME_RATE } from './modules/RTC/ScreenObtainer';\nimport browser from './modules/browser';\nimport ConnectionQuality from './modules/connectivity/ConnectionQuality';\nimport IceFailedHandling\n    from './modules/connectivity/IceFailedHandling';\nimport ParticipantConnectionStatusHandler\n    from './modules/connectivity/ParticipantConnectionStatus';\nimport * as DetectionEvents from './modules/detection/DetectionEvents';\nimport NoAudioSignalDetection from './modules/detection/NoAudioSignalDetection';\nimport P2PDominantSpeakerDetection from './modules/detection/P2PDominantSpeakerDetection';\nimport VADAudioAnalyser from './modules/detection/VADAudioAnalyser';\nimport VADNoiseDetection from './modules/detection/VADNoiseDetection';\nimport VADTalkMutedDetection from './modules/detection/VADTalkMutedDetection';\nimport { E2EEncryption } from './modules/e2ee/E2EEncryption';\nimport E2ePing from './modules/e2eping/e2eping';\nimport Jvb121EventGenerator from './modules/event/Jvb121EventGenerator';\nimport FeatureFlags from './modules/flags/FeatureFlags';\nimport { RecordingController } from './modules/local-recording';\nimport ReceiveVideoController from './modules/qualitycontrol/ReceiveVideoController';\nimport SendVideoController from './modules/qualitycontrol/SendVideoController';\nimport RecordingManager from './modules/recording/RecordingManager';\nimport Settings from './modules/settings/Settings';\nimport AudioOutputProblemDetector from './modules/statistics/AudioOutputProblemDetector';\nimport AvgRTPStatsReporter from './modules/statistics/AvgRTPStatsReporter';\nimport SpeakerStatsCollector from './modules/statistics/SpeakerStatsCollector';\nimport Statistics from './modules/statistics/statistics';\nimport Transcriber from './modules/transcription/transcriber';\nimport GlobalOnErrorHandler from './modules/util/GlobalOnErrorHandler';\nimport RandomUtil from './modules/util/RandomUtil';\nimport ComponentsVersions from './modules/version/ComponentsVersions';\nimport VideoSIPGW from './modules/videosipgw/VideoSIPGW';\nimport * as VideoSIPGWConstants from './modules/videosipgw/VideoSIPGWConstants';\nimport SignalingLayerImpl from './modules/xmpp/SignalingLayerImpl';\nimport LocalTracksDuration from './modules/statistics/LocalTracksDuration';\nimport {\n    FEATURE_E2EE,\n    FEATURE_JIGASI,\n    JITSI_MEET_MUC_TYPE\n} from './modules/xmpp/xmpp';\nimport BridgeVideoType from './service/RTC/BridgeVideoType';\nimport CodecMimeType from './service/RTC/CodecMimeType';\nimport { MediaType } from './service/RTC/MediaType';\nimport RTCEvents from './service/RTC/RTCEvents';\nimport { getSourceNameForJitsiTrack } from './service/RTC/SignalingLayer';\nimport { VideoType } from './service/RTC/VideoType';\nimport {\n    ACTION_JINGLE_RESTART,\n    ACTION_JINGLE_SI_RECEIVED,\n    ACTION_JINGLE_SI_TIMEOUT,\n    ACTION_JINGLE_TERMINATE,\n    ACTION_P2P_DECLINED,\n    ACTION_P2P_ESTABLISHED,\n    ACTION_P2P_FAILED,\n    ACTION_P2P_SWITCH_TO_JVB,\n    ICE_ESTABLISHMENT_DURATION_DIFF,\n    createConferenceEvent,\n    createJingleEvent,\n    createP2PEvent\n} from './service/statistics/AnalyticsEvents';\nwindow.APP = {\n    conference: {\n    }\n};\nimport { XMPPEvents } from './service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * How long since Jicofo is supposed to send a session-initiate, before\n * {@link ACTION_JINGLE_SI_TIMEOUT} analytics event is sent (in ms).\n * @type {number}\n */\nconst JINGLE_SI_TIMEOUT = 5000;\n\n/**\n * Creates a JitsiConference object with the given name and properties.\n * Note: this constructor is not a part of the public API (objects should be\n * created using JitsiConnection.createConference).\n * @param options.config properties / settings related to the conference that\n * will be created.\n * @param options.name the name of the conference\n * @param options.connection the JitsiConnection object for this\n * JitsiConference.\n * @param {number} [options.config.avgRtpStatsN=15] how many samples are to be\n * collected by {@link AvgRTPStatsReporter}, before arithmetic mean is\n * calculated and submitted to the analytics module.\n * @param {boolean} [options.config.enableIceRestart=false] - enables the ICE\n * restart logic.\n * @param {boolean} [options.config.p2p.enabled] when set to <tt>true</tt>\n * the peer to peer mode will be enabled. It means that when there are only 2\n * participants in the conference an attempt to make direct connection will be\n * made. If the connection succeeds the conference will stop sending data\n * through the JVB connection and will use the direct one instead.\n * @param {number} [options.config.p2p.backToP2PDelay=5] a delay given in\n * seconds, before the conference switches back to P2P, after the 3rd\n * participant has left the room.\n * @param {number} [options.config.channelLastN=-1] The requested amount of\n * videos are going to be delivered after the value is in effect. Set to -1 for\n * unlimited or all available videos.\n * @param {number} [options.config.forceJVB121Ratio]\n * \"Math.random() < forceJVB121Ratio\" will determine whether a 2 people\n * conference should be moved to the JVB instead of P2P. The decision is made on\n * the responder side, after ICE succeeds on the P2P connection.\n * @constructor\n *\n * FIXME Make all methods which are called from lib-internal classes\n *       to non-public (use _). To name a few:\n *       {@link JitsiConference.onLocalRoleChanged}\n *       {@link JitsiConference.onUserRoleChanged}\n *       {@link JitsiConference.onMemberLeft}\n *       and so on...\n */\nexport default function JitsiConference(options) {\n    if (!options.name || options.name.toLowerCase() !== options.name.toString()) {\n        const errmsg\n            = 'Invalid conference name (no conference name passed or it '\n                + 'contains invalid characters like capital letters)!';\n\n        logger.error(errmsg);\n        throw new Error(errmsg);\n    }\n    this.connection = options.connection;\n    this.xmpp = this.connection?.xmpp;\n\n    if (this.xmpp.isRoomCreated(options.name, options.customDomain)) {\n        const errmsg = 'A coference with the same name has already been created!';\n\n        delete this.connection;\n        delete this.xmpp;\n        logger.error(errmsg);\n        throw new Error(errmsg);\n    }\n    this.eventEmitter = new EventEmitter();\n    this.options = options;\n    this.eventManager = new JitsiConferenceEventManager(this);\n    this.participants = {};\n\n    /**\n     * The signaling layer instance.\n     * @type {SignalingLayerImpl}\n     * @private\n     */\n    this._signalingLayer = new SignalingLayerImpl();\n\n    this._init(options);\n    this.componentsVersions = new ComponentsVersions(this);\n\n    /**\n     * Jingle session instance for the JVB connection.\n     * @type {JingleSessionPC}\n     */\n    this.jvbJingleSession = null;\n    this.lastDominantSpeaker = null;\n    this.dtmfManager = null;\n    this.somebodySupportsDTMF = false;\n    this.authEnabled = false;\n    this.startAudioMuted = false;\n    this.startVideoMuted = false;\n    this.startMutedPolicy = {\n        audio: false,\n        video: false\n    };\n    this.isMutedByFocus = false;\n\n    // when muted by focus we receive the jid of the initiator of the mute\n    this.mutedByFocusActor = null;\n\n    this.isVideoMutedByFocus = false;\n\n    // when video muted by focus we receive the jid of the initiator of the mute\n    this.mutedVideoByFocusActor = null;\n\n    // Flag indicates if the 'onCallEnded' method was ever called on this\n    // instance. Used to log extra analytics event for debugging purpose.\n    // We need to know if the potential issue happened before or after\n    // the restart.\n    this.wasStopped = false;\n\n    // Conference properties, maintained by jicofo.\n    this.properties = {};\n\n    /**\n     * The object which monitors local and remote connection statistics (e.g.\n     * sending bitrate) and calculates a number which represents the connection\n     * quality.\n     */\n    this.connectionQuality\n        = new ConnectionQuality(this, this.eventEmitter, options);\n\n    /**\n     * Reports average RTP statistics to the analytics module.\n     * @type {AvgRTPStatsReporter}\n     */\n    this.avgRtpStatsReporter\n        = new AvgRTPStatsReporter(this, options.config.avgRtpStatsN || 15);\n\n    /**\n     * Detects issues with the audio of remote participants.\n     * @type {AudioOutputProblemDetector}\n     */\n    if (!options.config.disableAudioLevels) {\n        this._audioOutputProblemDetector = new AudioOutputProblemDetector(this);\n    }\n\n    /**\n     * Indicates whether the connection is interrupted or not.\n     */\n    this.isJvbConnectionInterrupted = false;\n\n    /**\n     * The object which tracks active speaker times\n     */\n    this.speakerStatsCollector = new SpeakerStatsCollector(this);\n\n    /* P2P related fields below: */\n\n    /**\n     * Stores reference to deferred start P2P task. It's created when 3rd\n     * participant leaves the room in order to avoid ping pong effect (it\n     * could be just a page reload).\n     * @type {number|null}\n     */\n    this.deferredStartP2PTask = null;\n\n    const delay\n        = parseInt(options.config.p2p && options.config.p2p.backToP2PDelay, 10);\n\n    /**\n     * A delay given in seconds, before the conference switches back to P2P\n     * after the 3rd participant has left.\n     * @type {number}\n     */\n    this.backToP2PDelay = isNaN(delay) ? 5 : delay;\n    logger.info(`backToP2PDelay: ${this.backToP2PDelay}`);\n\n    /**\n     * If set to <tt>true</tt> it means the P2P ICE is no longer connected.\n     * When <tt>false</tt> it means that P2P ICE (media) connection is up\n     * and running.\n     * @type {boolean}\n     */\n    this.isP2PConnectionInterrupted = false;\n\n    /**\n     * Flag set to <tt>true</tt> when P2P session has been established\n     * (ICE has been connected) and this conference is currently in the peer to\n     * peer mode (P2P connection is the active one).\n     * @type {boolean}\n     */\n    this.p2p = false;\n\n    /**\n     * A JingleSession for the direct peer to peer connection.\n     * @type {JingleSessionPC}\n     */\n    this.p2pJingleSession = null;\n\n    this.videoSIPGWHandler = new VideoSIPGW(this.room);\n    this.recordingManager = new RecordingManager(this.room);\n\n    /**\n     * If the conference.joined event has been sent this will store the timestamp when it happened.\n     *\n     * @type {undefined|number}\n     * @private\n     */\n    this._conferenceJoinAnalyticsEventSent = undefined;\n\n    /**\n     * End-to-End Encryption. Make it available if supported.\n     */\n    if (this.isE2EESupported()) {\n        logger.info('End-to-End Encryption is supported');\n\n        this._e2eEncryption = new E2EEncryption(this);\n    }\n\n    /**\n     * Flag set to <tt>true</tt> when Jicofo sends a presence message indicating that the max audio sender limit has\n     * been reached for the call. Once this is set, unmuting audio will be disabled from the client until it gets reset\n     * again by Jicofo.\n     */\n    this._audioSenderLimitReached = undefined;\n\n    /**\n     * Flag set to <tt>true</tt> when Jicofo sends a presence message indicating that the max video sender limit has\n     * been reached for the call. Once this is set, unmuting video will be disabled from the client until it gets reset\n     * again by Jicofo.\n     */\n    this._videoSenderLimitReached = undefined;\n\n\n\n    this.handleSubtitles();\n\n    if (options.config.enableLocalRecording) {\n        this.recordingController = new RecordingController();\n        this.recordingController.registerEvents(this);\n    }\n\n    if (options.config.enableAnalytics) {\n        this.enableAnalytics();\n    }\n\n    if (options.config.iAmRecorder) {\n        this.removeCommand('userinfo');\n        this.sendCommand(\n            'userinfo',\n            {\n                attributes: {\n                    xmlns: 'http://jitsi.org/jitmeet/userinfo',\n                    robot: true\n                }\n            });\n    }\n\n    const self = this;\n\n    window.APP = {\n        conference: {\n            _room: this,\n            get membersCount() {\n                return self.getParticipantsWithoutHidden().length + 1;\n            },\n            getStats() {\n                return self.connectionQuality.getStats();\n            }\n        }\n    };\n    this.localTracksDuration = new LocalTracksDuration(this);\n    this.sessions = {};\n    this.user = options.user;\n}\n\n// FIXME convert JitsiConference to ES6 - ASAP !\nJitsiConference.prototype.constructor = JitsiConference;\n\n/**\n * Create a resource for the a jid. We use the room nickname (the resource part\n * of the occupant JID, see XEP-0045) as the endpoint ID in colibri. We require\n * endpoint IDs to be 8 hex digits because in some cases they get serialized\n * into a 32bit field.\n *\n * @param {string} jid - The id set onto the XMPP connection.\n * @param {boolean} isAuthenticatedUser - Whether or not the user has connected\n * to the XMPP service with a password.\n * @returns {string}\n * @static\n */\nJitsiConference.resourceCreator = function(jid) {\n    return Strophe.getNodeFromJid(jid);\n};\n\n/**\n * Initializes the conference object properties\n * @param options {object}\n * @param options.connection {JitsiConnection} overrides this.connection\n */\nJitsiConference.prototype._init = function(options = {}) {\n    this.eventManager.setupXMPPListeners();\n\n    const { config } = this.options;\n\n    // Get the codec preference settings from config.js.\n    // 'preferH264' and 'disableH264' settings have been deprecated for a while,\n    // 'preferredCodec' and 'disabledCodec' will have precedence over them.\n    const codecSettings = {\n        disabledCodec: config.videoQuality\n            ? config.videoQuality.disabledCodec\n            : config.p2p && config.p2p.disableH264 && CodecMimeType.H264,\n        enforcePreferredCodec: config.videoQuality && config.videoQuality.enforcePreferredCodec,\n        jvbCodec: (config.videoQuality && config.videoQuality.preferredCodec)\n            || (config.preferH264 && CodecMimeType.H264),\n        p2pCodec: config.p2p\n            ? config.p2p.preferredCodec || (config.p2p.preferH264 && CodecMimeType.H264)\n            : CodecMimeType.VP8\n    };\n\n    this.codecSelection = new CodecSelection(this, codecSettings);\n    this._statsCurrentId = config.statisticsId ? config.statisticsId : Settings.callStatsUserName;\n    this.room = this.xmpp.createRoom(\n        this.options.name, {\n            ...config,\n            statsId: this._statsCurrentId\n        },\n        JitsiConference.resourceCreator\n    );\n\n    this._signalingLayer.setChatRoom(this.room);\n\n    // Connection interrupted/restored listeners\n    this._onIceConnectionInterrupted\n        = this._onIceConnectionInterrupted.bind(this);\n    this.room.addListener(\n        XMPPEvents.CONNECTION_INTERRUPTED, this._onIceConnectionInterrupted);\n\n    this._onIceConnectionRestored = this._onIceConnectionRestored.bind(this);\n    this.room.addListener(\n        XMPPEvents.CONNECTION_RESTORED, this._onIceConnectionRestored);\n\n    this._onIceConnectionEstablished\n        = this._onIceConnectionEstablished.bind(this);\n    this.room.addListener(\n        XMPPEvents.CONNECTION_ESTABLISHED, this._onIceConnectionEstablished);\n\n    this._updateProperties = this._updateProperties.bind(this);\n    this.room.addListener(XMPPEvents.CONFERENCE_PROPERTIES_CHANGED,\n        this._updateProperties);\n\n    this._sendConferenceJoinAnalyticsEvent = this._sendConferenceJoinAnalyticsEvent.bind(this);\n    this.room.addListener(XMPPEvents.MEETING_ID_SET, this._sendConferenceJoinAnalyticsEvent);\n\n    this._removeLocalSourceOnReject = this._removeLocalSourceOnReject.bind(this);\n    this._updateRoomPresence = this._updateRoomPresence.bind(this);\n    this.room.addListener(XMPPEvents.SESSION_ACCEPT, this._updateRoomPresence);\n    this.room.addListener(XMPPEvents.SOURCE_ADD, this._updateRoomPresence);\n    this.room.addListener(XMPPEvents.SOURCE_ADD_ERROR, this._removeLocalSourceOnReject);\n    this.room.addListener(XMPPEvents.SOURCE_REMOVE, this._updateRoomPresence);\n\n    if (config.e2eping?.enabled) {\n        this.e2eping = new E2ePing(\n            this,\n            config,\n            (message, to) => {\n                try {\n                    this.sendMessage(message, to, true /* sendThroughVideobridge */);\n                } catch (error) {\n                    logger.warn('Failed to send E2E ping request or response.', error && error.msg);\n                }\n            });\n    }\n\n    if (!this.rtc) {\n        this.rtc = new RTC(this, options);\n        this.eventManager.setupRTCListeners();\n        if (FeatureFlags.isSourceNameSignalingEnabled()) {\n            this._registerRtcListeners(this.rtc);\n        }\n    }\n\n    this.receiveVideoController = new ReceiveVideoController(this, this.rtc);\n    this.sendVideoController = new SendVideoController(this, this.rtc);\n\n    this.participantConnectionStatus\n        = new ParticipantConnectionStatusHandler(\n            this.rtc,\n            this,\n            {\n                // These options are not public API, leaving it here only as an entry point through config for tuning\n                // up purposes. Default values should be adjusted as soon as optimal values are discovered.\n                p2pRtcMuteTimeout: config._p2pConnStatusRtcMuteTimeout,\n                rtcMuteTimeout: config._peerConnStatusRtcMuteTimeout,\n                outOfLastNTimeout: config._peerConnStatusOutOfLastNTimeout\n            });\n    this.participantConnectionStatus.init();\n\n    // Add the ability to enable callStats only on a percentage of users based on config.js settings.\n    let enableCallStats = true;\n\n    if (config.testing && config.testing.callStatsThreshold) {\n        enableCallStats = (Math.random() * 100) <= config.testing.callStatsThreshold;\n    }\n\n    if (!this.statistics) {\n        this.statistics = new Statistics(this.xmpp, {\n            aliasName: this._statsCurrentId,\n            userName: config.statisticsDisplayName ? config.statisticsDisplayName : this.myUserId(),\n            confID: config.confID || `${this.connection.options.hosts.domain}/${this.options.name}`,\n            siteID: config.siteID,\n            customScriptUrl: config.callStatsCustomScriptUrl,\n            callStatsID: config.callStatsID,\n            callStatsSecret: config.callStatsSecret,\n            callStatsApplicationLogsDisabled: config.callStatsApplicationLogsDisabled,\n            enableCallStats,\n            roomName: this.options.name,\n            applicationName: config.applicationName,\n            getWiFiStatsMethod: config.getWiFiStatsMethod,\n            configParams: config.callStatsConfigParams\n        });\n        Statistics.analytics.addPermanentProperties({\n            'callstats_name': this._statsCurrentId\n        });\n\n        // Start performance observer for monitoring long tasks\n        if (config.longTasksStatsInterval) {\n            this.statistics.attachLongTasksStats(this);\n        }\n    }\n\n    this.eventManager.setupChatRoomListeners();\n\n    // Always add listeners because on reload we are executing leave and the\n    // listeners are removed from statistics module.\n    this.eventManager.setupStatisticsListeners();\n\n    // Disable VAD processing on Safari since it causes audio input to\n    // fail on some of the mobile devices.\n    if (config.enableTalkWhileMuted && browser.supportsVADDetection()) {\n        // If VAD processor factory method is provided uses VAD based detection, otherwise fallback to audio level\n        // based detection.\n        if (config.createVADProcessor) {\n            logger.info('Using VAD detection for generating talk while muted events');\n\n            if (!this._audioAnalyser) {\n                this._audioAnalyser = new VADAudioAnalyser(this, config.createVADProcessor);\n            }\n\n            const vadTalkMutedDetection = new VADTalkMutedDetection();\n\n            vadTalkMutedDetection.on(DetectionEvents.VAD_TALK_WHILE_MUTED, () =>\n                this.eventEmitter.emit(JitsiConferenceEvents.TALK_WHILE_MUTED));\n\n            this._audioAnalyser.addVADDetectionService(vadTalkMutedDetection);\n        } else {\n            logger.warn('No VAD Processor was provided. Talk while muted detection service was not initialized!');\n        }\n    }\n\n    // Disable noisy mic detection on safari since it causes the audio input to\n    // fail on Safari on iPadOS.\n    if (config.enableNoisyMicDetection && browser.supportsVADDetection()) {\n        if (config.createVADProcessor) {\n            if (!this._audioAnalyser) {\n                this._audioAnalyser = new VADAudioAnalyser(this, config.createVADProcessor);\n            }\n\n            const vadNoiseDetection = new VADNoiseDetection();\n\n            vadNoiseDetection.on(DetectionEvents.VAD_NOISY_DEVICE, () =>\n                this.eventEmitter.emit(JitsiConferenceEvents.NOISY_MIC));\n\n            this._audioAnalyser.addVADDetectionService(vadNoiseDetection);\n        } else {\n            logger.warn('No VAD Processor was provided. Noisy microphone detection service was not initialized!');\n        }\n    }\n\n    // Generates events based on no audio input detector.\n    if (config.enableNoAudioDetection) {\n        this._noAudioSignalDetection = new NoAudioSignalDetection(this);\n        this._noAudioSignalDetection.on(DetectionEvents.NO_AUDIO_INPUT, () => {\n            this.eventEmitter.emit(JitsiConferenceEvents.NO_AUDIO_INPUT);\n        });\n        this._noAudioSignalDetection.on(DetectionEvents.AUDIO_INPUT_STATE_CHANGE, hasAudioSignal => {\n            this.eventEmitter.emit(JitsiConferenceEvents.AUDIO_INPUT_STATE_CHANGE, hasAudioSignal);\n        });\n    }\n\n\n    if ('channelLastN' in config) {\n        this.setLastN(config.channelLastN);\n    }\n\n    /**\n     * Emits {@link JitsiConferenceEvents.JVB121_STATUS}.\n     * @type {Jvb121EventGenerator}\n     */\n    this.jvb121Status = new Jvb121EventGenerator(this);\n\n    // creates dominant speaker detection that works only in p2p mode\n    this.p2pDominantSpeakerDetection = new P2PDominantSpeakerDetection(this);\n\n    if (config && config.deploymentInfo && config.deploymentInfo.userRegion) {\n        this.setLocalParticipantProperty(\n            'region', config.deploymentInfo.userRegion);\n    }\n\n    // Publish the codec type to presence.\n    this.setLocalParticipantProperty('codecType', this.codecSelection.getPreferredCodec());\n\n    // Set transcription language presence extension.\n    // In case the language config is undefined or has the default value that the transcriber uses\n    // (in our case Jigasi uses 'en-US'), don't set the participant property in order to avoid\n    // needlessly polluting the presence stanza.\n    if (config && config.transcriptionLanguage && config.transcriptionLanguage !== 'en-US') {\n        this.setLocalParticipantProperty('transcription_language', config.transcriptionLanguage);\n    }\n};\n\n/**\n * Joins the conference.\n * @param password {string} the password\n * @param replaceParticipant {boolean} whether the current join replaces\n * an existing participant with same jwt from the meeting.\n */\nJitsiConference.prototype.join = function(password, replaceParticipant = false) {\n    if (this.room) {\n        this.room.join(password, replaceParticipant).then(() => this._maybeSetSITimeout());\n    }\n};\n\n/**\n * Authenticates and upgrades the role of the local participant/user.\n *\n * @returns {Object} A <tt>thenable</tt> which (1) settles when the process of\n * authenticating and upgrading the role of the local participant/user finishes\n * and (2) has a <tt>cancel</tt> method that allows the caller to interrupt the\n * process.\n */\nJitsiConference.prototype.authenticateAndUpgradeRole = function(options) {\n    return authenticateAndUpgradeRole.call(this, {\n        ...options,\n        onCreateResource: JitsiConference.resourceCreator\n    });\n};\n\n/**\n * Check if joined to the conference.\n */\nJitsiConference.prototype.isJoined = function() {\n    return this.room && this.room.joined;\n};\n\n/**\n * Tells whether or not the P2P mode is enabled in the configuration.\n * @return {boolean}\n */\nJitsiConference.prototype.isP2PEnabled = function() {\n    return Boolean(this.options.config.p2p && this.options.config.p2p.enabled)\n\n        // FIXME: remove once we have a default config template. -saghul\n        || typeof this.options.config.p2p === 'undefined';\n};\n\n/**\n * When in P2P test mode, the conference will not automatically switch to P2P\n * when there 2 participants.\n * @return {boolean}\n */\nJitsiConference.prototype.isP2PTestModeEnabled = function() {\n    return Boolean(this.options.config.testing\n        && this.options.config.testing.p2pTestMode);\n};\n\n/**\n * Leaves the conference.\n * @returns {Promise}\n */\nJitsiConference.prototype.leave = async function() {\n    if (this.participantConnectionStatus) {\n        this.participantConnectionStatus.dispose();\n        this.participantConnectionStatus = null;\n    }\n    if (this.avgRtpStatsReporter) {\n        this.avgRtpStatsReporter.dispose();\n        this.avgRtpStatsReporter = null;\n    }\n\n    if (this._audioOutputProblemDetector) {\n        this._audioOutputProblemDetector.dispose();\n        this._audioOutputProblemDetector = null;\n    }\n\n    if (this.e2eping) {\n        this.e2eping.stop();\n        this.e2eping = null;\n    }\n\n    this.getLocalTracks().forEach(track => this.onLocalTrackRemoved(track));\n\n    this.rtc.closeBridgeChannel();\n\n    this._sendConferenceLeftAnalyticsEvent();\n\n    if (this.statistics) {\n        this.statistics.dispose();\n    }\n\n    this._delayedIceFailed && this._delayedIceFailed.cancel();\n\n    this._maybeClearSITimeout();\n\n    // Close both JVb and P2P JingleSessions\n    if (this.jvbJingleSession) {\n        this.jvbJingleSession.close();\n        this.jvbJingleSession = null;\n    }\n    if (this.p2pJingleSession) {\n        this.p2pJingleSession.close();\n        this.p2pJingleSession = null;\n    }\n\n    // Leave the conference. If this.room == null we are calling second time leave().\n    if (!this.room) {\n        throw new Error('The conference is has been already left');\n    }\n\n    const room = this.room;\n\n    // Unregister connection state listeners\n    room.removeListener(\n        XMPPEvents.CONNECTION_INTERRUPTED,\n        this._onIceConnectionInterrupted);\n    room.removeListener(\n        XMPPEvents.CONNECTION_RESTORED,\n        this._onIceConnectionRestored);\n    room.removeListener(\n        XMPPEvents.CONNECTION_ESTABLISHED,\n        this._onIceConnectionEstablished);\n\n    room.removeListener(\n        XMPPEvents.CONFERENCE_PROPERTIES_CHANGED,\n        this._updateProperties);\n\n    room.removeListener(XMPPEvents.MEETING_ID_SET, this._sendConferenceJoinAnalyticsEvent);\n    room.removeListener(XMPPEvents.SESSION_ACCEPT, this._updateRoomPresence);\n    room.removeListener(XMPPEvents.SOURCE_ADD, this._updateRoomPresence);\n    room.removeListener(XMPPEvents.SOURCE_ADD_ERROR, this._removeLocalSourceOnReject);\n    room.removeListener(XMPPEvents.SOURCE_REMOVE, this._updateRoomPresence);\n\n    this.eventManager.removeXMPPListeners();\n\n    this._signalingLayer.setChatRoom(null);\n\n    this.room = null;\n\n    let leaveError;\n\n    try {\n        await room.leave();\n    } catch (err) {\n        leaveError = err;\n\n        // Remove all participants because currently the conference\n        // won't be usable anyway. This is done on success automatically\n        // by the ChatRoom instance.\n        this.getParticipants().forEach(\n            participant => this.onMemberLeft(participant.getJid()));\n    }\n\n    if (this.rtc) {\n        this.rtc.destroy();\n    }\n\n    if (leaveError) {\n        throw leaveError;\n    }\n};\n\n/**\n * Returns the currently active media session if any.\n *\n * @returns {JingleSessionPC|undefined}\n */\nJitsiConference.prototype.getActiveMediaSession = function() {\n    return this.isP2PActive() ? this.p2pJingleSession : this.jvbJingleSession;\n};\n\n/**\n * Returns an array containing all media sessions existing in this conference.\n *\n * @returns {Array<JingleSessionPC>}\n */\nJitsiConference.prototype.getMediaSessions = function() {\n    const sessions = [];\n\n    this.jvbJingleSession && sessions.push(this.jvbJingleSession);\n    this.p2pJingleSession && sessions.push(this.p2pJingleSession);\n\n    return sessions;\n};\n\n/**\n * Registers event listeners on the RTC instance.\n * @param {RTC} rtc - the RTC module instance used by this conference.\n * @private\n * @returns {void}\n */\nJitsiConference.prototype._registerRtcListeners = function(rtc) {\n    rtc.addListener(RTCEvents.DATA_CHANNEL_OPEN, () => {\n        for (const localTrack of this.rtc.localTracks) {\n            localTrack.isVideoTrack() && this._sendBridgeVideoTypeMessage(localTrack);\n        }\n    });\n};\n\n/**\n * Sends the 'VideoTypeMessage' to the bridge on the bridge channel so that the bridge can make bitrate allocation\n * decisions based on the video type of the local source.\n *\n * @param {JitsiLocalTrack} localtrack - The track associated with the local source signaled to the bridge.\n * @returns {void}\n * @private\n */\nJitsiConference.prototype._sendBridgeVideoTypeMessage = function(localtrack) {\n    let videoType = !localtrack || localtrack.isMuted() ? BridgeVideoType.NONE : localtrack.getVideoType();\n\n    if (videoType === BridgeVideoType.DESKTOP && this._desktopSharingFrameRate > SS_DEFAULT_FRAME_RATE) {\n        videoType = BridgeVideoType.DESKTOP_HIGH_FPS;\n    }\n\n    if (FeatureFlags.isSourceNameSignalingEnabled() && localtrack) {\n        this.rtc.sendSourceVideoType(localtrack.getSourceName(), videoType);\n    } else if (!FeatureFlags.isSourceNameSignalingEnabled()) {\n        this.rtc.setVideoType(videoType);\n    }\n};\n\n/**\n * Returns name of this conference.\n */\nJitsiConference.prototype.getName = function() {\n    return this.options.name.toString();\n};\n\n/**\n * Returns the {@link JitsiConnection} used by this this conference.\n */\nJitsiConference.prototype.getConnection = function() {\n    return this.connection;\n};\n\n/**\n * Check if authentication is enabled for this conference.\n */\nJitsiConference.prototype.isAuthEnabled = function() {\n    return this.authEnabled;\n};\n\n/**\n * Check if user is logged in.\n */\nJitsiConference.prototype.isLoggedIn = function() {\n    return Boolean(this.authIdentity);\n};\n\n/**\n * Get authorized login.\n */\nJitsiConference.prototype.getAuthLogin = function() {\n    return this.authIdentity;\n};\n\n/**\n * Check if external authentication is enabled for this conference.\n */\nJitsiConference.prototype.isExternalAuthEnabled = function() {\n    return this.room && this.room.moderator.isExternalAuthEnabled();\n};\n\n/**\n * Get url for external authentication.\n * @param {boolean} [urlForPopup] if true then return url for login popup,\n *                                else url of login page.\n * @returns {Promise}\n */\nJitsiConference.prototype.getExternalAuthUrl = function(urlForPopup) {\n    return new Promise((resolve, reject) => {\n        if (!this.isExternalAuthEnabled()) {\n            reject();\n\n            return;\n        }\n        if (urlForPopup) {\n            this.room.moderator.getPopupLoginUrl(resolve, reject);\n        } else {\n            this.room.moderator.getLoginUrl(resolve, reject);\n        }\n    });\n};\n\n/**\n * Returns the local tracks of the given media type, or all local tracks if no\n * specific type is given.\n * @param {MediaType} [mediaType] Optional media type (audio or video).\n */\nJitsiConference.prototype.getLocalTracks = function(mediaType) {\n    let tracks = [];\n\n    if (this.rtc) {\n        tracks = this.rtc.getLocalTracks(mediaType);\n    }\n\n    return tracks;\n};\n\n/**\n * Obtains local audio track.\n * @return {JitsiLocalTrack|null}\n */\nJitsiConference.prototype.getLocalAudioTrack = function() {\n    return this.rtc ? this.rtc.getLocalAudioTrack() : null;\n};\n\n/**\n * Obtains local video track.\n * @return {JitsiLocalTrack|null}\n */\nJitsiConference.prototype.getLocalVideoTrack = function() {\n    return this.rtc ? this.rtc.getLocalVideoTrack() : null;\n};\n\n/**\n * Returns all the local video tracks.\n * @returns {Array<JitsiLocalTrack>}\n */\nJitsiConference.prototype.getLocalVideoTracks = function() {\n    return this.rtc ? this.rtc.getLocalVideoTracks() : null;\n};\n\n/**\n * Obtains the performance statistics.\n * @returns {Object|null}\n */\nJitsiConference.prototype.getPerformanceStats = function() {\n    return {\n        longTasksStats: this.statistics.getLongTasksStats()\n    };\n};\n\n/**\n * Attaches a handler for events(For example - \"participant joined\".) in the\n * conference. All possible event are defined in JitsiConferenceEvents.\n * @param eventId the event ID.\n * @param handler handler for the event.\n *\n * Note: consider adding eventing functionality by extending an EventEmitter\n * impl, instead of rolling ourselves\n */\nJitsiConference.prototype.on = function(eventId, handler) {\n    if (this.eventEmitter) {\n        this.eventEmitter.on(eventId, handler);\n    }\n};\n\n/**\n * Removes event listener\n * @param eventId the event ID.\n * @param [handler] optional, the specific handler to unbind\n *\n * Note: consider adding eventing functionality by extending an EventEmitter\n * impl, instead of rolling ourselves\n */\nJitsiConference.prototype.off = function(eventId, handler) {\n    if (this.eventEmitter) {\n        this.eventEmitter.removeListener(eventId, handler);\n    }\n};\n\n// Common aliases for event emitter\nJitsiConference.prototype.addEventListener = JitsiConference.prototype.on;\nJitsiConference.prototype.removeEventListener = JitsiConference.prototype.off;\n\n/**\n * Receives notifications from other participants about commands / custom events\n * (sent by sendCommand or sendCommandOnce methods).\n * @param command {String} the name of the command\n * @param handler {Function} handler for the command\n */\nJitsiConference.prototype.addCommandListener = function(command, handler) {\n    if (this.room) {\n        this.room.addPresenceListener(command, handler);\n    }\n};\n\n/**\n  * Removes command  listener\n  * @param command {String} the name of the command\n  * @param handler {Function} handler to remove for the command\n  */\nJitsiConference.prototype.removeCommandListener = function(command, handler) {\n    if (this.room) {\n        this.room.removePresenceListener(command, handler);\n    }\n};\n\n/**\n * Sends text message to the other participants in the conference\n * @param message the text message.\n * @param elementName the element name to encapsulate the message.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.sendTextMessage = function(message, elementName = 'body') {\n    if (this.room) {\n        this.room.sendMessage(message, elementName);\n    }\n};\n\n/**\n * Send private text message to another participant of the conference\n * @param id the id of the participant to send a private message.\n * @param message the text message.\n * @param elementName the element name to encapsulate the message.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.sendPrivateTextMessage = function(id, message, elementName = 'body') {\n    if (this.room) {\n        this.room.sendPrivateMessage(id, message, elementName);\n    }\n};\n\n/**\n * Send presence command.\n * @param name {String} the name of the command.\n * @param values {Object} with keys and values that will be sent.\n **/\nJitsiConference.prototype.sendCommand = function(name, values) {\n    if (this.room) {\n        this.room.addOrReplaceInPresence(name, values) && this.room.sendPresence();\n    } else {\n        logger.warn('Not sending a command, room not initialized.');\n    }\n\n};\n\n/**\n * Send presence command one time.\n * @param name {String} the name of the command.\n * @param values {Object} with keys and values that will be sent.\n **/\nJitsiConference.prototype.sendCommandOnce = function(name, values) {\n    this.sendCommand(name, values);\n    this.removeCommand(name);\n};\n\n/**\n * Removes presence command.\n * @param name {String} the name of the command.\n **/\nJitsiConference.prototype.removeCommand = function(name) {\n    if (this.room) {\n        this.room.removeFromPresence(name);\n    }\n};\n\n/**\n * Sets the display name for this conference.\n * @param name the display name to set\n */\nJitsiConference.prototype.setDisplayName = function(name) {\n    if (this.room) {\n        const nickKey = 'nick';\n\n        // if there is no display name already set, avoid setting an empty one\n        if (!name && !this.room.getFromPresence(nickKey)) {\n            return;\n        }\n\n        this.room.addOrReplaceInPresence(nickKey, {\n            attributes: { xmlns: 'http://jabber.org/protocol/nick' },\n            value: name\n        }) && this.room.sendPresence();\n    }\n};\n\n/**\n * Set new subject for this conference. (available only for moderator)\n * @param {string} subject new subject\n */\nJitsiConference.prototype.setSubject = function(subject) {\n    if (this.room && this.isModerator()) {\n        this.room.setSubject(subject);\n    } else {\n        logger.warn(`Failed to set subject, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator'}`);\n    }\n};\n\n/**\n * Get a transcriber object for all current participants in this conference\n * @return {Transcriber} the transcriber object\n */\nJitsiConference.prototype.getTranscriber = function() {\n    if (this.transcriber === undefined) {\n        this.transcriber = new Transcriber();\n\n        // add all existing local audio tracks to the transcriber\n        const localAudioTracks = this.getLocalTracks(MediaType.AUDIO);\n\n        for (const localAudio of localAudioTracks) {\n            this.transcriber.addTrack(localAudio);\n        }\n\n        // and all remote audio tracks\n        const remoteAudioTracks = this.rtc.getRemoteTracks(MediaType.AUDIO);\n\n        for (const remoteTrack of remoteAudioTracks) {\n            this.transcriber.addTrack(remoteTrack);\n        }\n    }\n\n    return this.transcriber;\n};\n\n/**\n * Returns the transcription status.\n *\n * @returns {String} \"on\" or \"off\".\n */\nJitsiConference.prototype.getTranscriptionStatus = function() {\n    return this.room.transcriptionStatus;\n};\n\n/**\n * Adds JitsiLocalTrack object to the conference.\n * @param {JitsiLocalTrack} track the JitsiLocalTrack object.\n * @returns {Promise<JitsiLocalTrack>}\n * @throws {Error} if the specified track is a video track and there is already\n * another video track in the conference.\n */\nJitsiConference.prototype.addTrack = function(track) {\n    if (!track) {\n        return;\n    }\n    if (track.isAudioTrack() && this.options.config.startAudioMuted) {\n        track.mute();\n    }\n    if (track.isVideoTrack() && this.options.config.startVideoMuted) {\n        track.mute();\n    }\n    const mediaType = track.getType();\n    const localTracks = this.rtc.getLocalTracks(mediaType);\n\n    // Ensure there's exactly 1 local track of each media type in the conference.\n    if (localTracks.length > 0) {\n        // Don't be excessively harsh and severe if the API client happens to attempt to add the same local track twice.\n        if (track === localTracks[0]) {\n            return Promise.resolve(track);\n        }\n\n        if (FeatureFlags.isMultiStreamSupportEnabled() && mediaType === MediaType.VIDEO) {\n            const addTrackPromises = [];\n\n            this.p2pJingleSession && addTrackPromises.push(this.p2pJingleSession.addTrack(track));\n            this.jvbJingleSession && addTrackPromises.push(this.jvbJingleSession.addTrack(track));\n\n            return Promise.all(addTrackPromises)\n                .then(() => {\n                    this._setupNewTrack(track);\n                    this._sendBridgeVideoTypeMessage(track);\n                    this._updateRoomPresence(this.getActiveMediaSession());\n\n                    if (this.isMutedByFocus || this.isVideoMutedByFocus) {\n                        this._fireMuteChangeEvent(track);\n                    }\n                });\n        }\n\n        return Promise.reject(new Error(`Cannot add second ${mediaType} track to the conference`));\n    }\n\n    return this.replaceTrack(null, track);\n};\n\n/**\n * Fires TRACK_AUDIO_LEVEL_CHANGED change conference event (for local tracks).\n * @param {number} audioLevel the audio level\n * @param {TraceablePeerConnection} [tpc]\n */\nJitsiConference.prototype._fireAudioLevelChangeEvent = function(audioLevel, tpc) {\n    const activeTpc = this.getActivePeerConnection();\n\n    // There will be no TraceablePeerConnection if audio levels do not come from\n    // a peerconnection. LocalStatsCollector.js measures audio levels using Web\n    // Audio Analyser API and emits local audio levels events through\n    // JitsiTrack.setAudioLevel, but does not provide TPC instance which is\n    // optional.\n    if (!tpc || activeTpc === tpc) {\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED,\n            this.myUserId(), audioLevel);\n    }\n};\n\n/**\n * Fires TRACK_MUTE_CHANGED change conference event.\n * @param track the JitsiTrack object related to the event.\n */\nJitsiConference.prototype._fireMuteChangeEvent = function(track) {\n    // check if track was muted by focus and now is unmuted by user\n    if (this.isMutedByFocus && track.isAudioTrack() && !track.isMuted()) {\n        this.isMutedByFocus = false;\n\n        // unmute local user on server\n        this.room.muteParticipant(this.room.myroomjid, false, MediaType.AUDIO);\n    } else if (this.isVideoMutedByFocus && track.isVideoTrack() && !track.isMuted()) {\n        this.isVideoMutedByFocus = false;\n\n        // unmute local user on server\n        this.room.muteParticipant(this.room.myroomjid, false, MediaType.VIDEO);\n    }\n\n    let actorParticipant;\n\n    if (this.mutedByFocusActor && track.isAudioTrack()) {\n        const actorId = Strophe.getResourceFromJid(this.mutedByFocusActor);\n\n        actorParticipant = this.participants[actorId];\n    } else if (this.mutedVideoByFocusActor && track.isVideoTrack()) {\n        const actorId = Strophe.getResourceFromJid(this.mutedVideoByFocusActor);\n\n        actorParticipant = this.participants[actorId];\n    }\n\n    // Send the video type message to the bridge if the track is not removed/added to the pc as part of\n    // the mute/unmute operation. This currently happens only on Firefox.\n    if (track.isVideoTrack() && !browser.doesVideoMuteByStreamRemove()) {\n        this._sendBridgeVideoTypeMessage(track);\n    }\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_MUTE_CHANGED, track, actorParticipant);\n};\n\n/**\n * Returns the list of local tracks that need to be added to the peerconnection on join.\n * This takes the startAudioMuted/startVideoMuted flags into consideration since we do not\n * want to add the tracks if the user joins the call audio/video muted. The tracks will be\n * added when the user unmutes for the first time.\n * @returns {Array<JitsiLocalTrack>} - list of local tracks that are unmuted.\n */\nJitsiConference.prototype._getInitialLocalTracks = function() {\n    // Always add the audio track on certain platforms:\n    //  * Safari / WebKit: because of a known issue where audio playout doesn't happen\n    //    if the user joins audio and video muted.\n    //  * React Native: after iOS 15, if a user joins muted they won't be able to unmute.\n    return this.getLocalTracks()\n        .filter(track => {\n            const trackType = track.getType();\n\n            if (trackType === MediaType.AUDIO\n                    && (!this.isStartAudioMuted() || browser.isWebKitBased() || browser.isReactNative())) {\n                return true;\n            } else if (trackType === MediaType.VIDEO && !this.isStartVideoMuted()) {\n                return true;\n            }\n\n            return false;\n        });\n};\n\n/**\n * Clear JitsiLocalTrack properties and listeners.\n * @param track the JitsiLocalTrack object.\n */\nJitsiConference.prototype.onLocalTrackRemoved = function(track) {\n    track.setConference(null);\n    this.rtc.removeLocalTrack(track);\n    track.removeEventListener(JitsiTrackEvents.TRACK_MUTE_CHANGED, track.muteHandler);\n    if (track.isAudioTrack()) {\n        track.removeEventListener(JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED, track.audioLevelHandler);\n    }\n\n    // send event for stopping screen sharing\n    // FIXME: we assume we have only one screen sharing track\n    // if we change this we need to fix this check\n    if (track.isVideoTrack() && track.videoType === VideoType.DESKTOP) {\n        this.statistics.sendScreenSharingEvent(false);\n    }\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_REMOVED, track);\n};\n\n/**\n * Removes JitsiLocalTrack from the conference and performs\n * a new offer/answer cycle.\n * @param {JitsiLocalTrack} track\n * @returns {Promise}\n */\nJitsiConference.prototype.removeTrack = function(track) {\n    return this.replaceTrack(track, null);\n};\n\n/**\n * Replaces oldTrack with newTrack and performs a single offer/answer\n *  cycle after both operations are done.  Either oldTrack or newTrack\n *  can be null; replacing a valid 'oldTrack' with a null 'newTrack'\n *  effectively just removes 'oldTrack'\n * @param {JitsiLocalTrack} oldTrack the current stream in use to be replaced\n * @param {JitsiLocalTrack} newTrack the new stream to use\n * @returns {Promise} resolves when the replacement is finished\n */\nJitsiConference.prototype.replaceTrack = function(oldTrack, newTrack) {\n    const oldVideoType = oldTrack?.getVideoType();\n    const newVideoType = newTrack?.getVideoType();\n\n    if (FeatureFlags.isMultiStreamSupportEnabled() && oldTrack && newTrack && oldVideoType !== newVideoType) {\n        throw new Error(`Replacing a track of videoType=${oldVideoType} with a track of videoType=${newVideoType} is`\n            + ' not supported in this mode.');\n    }\n    const oldTrackBelongsToConference = this === oldTrack?.conference;\n\n    if (oldTrackBelongsToConference && oldTrack.disposed) {\n        return Promise.reject(new JitsiTrackError(JitsiTrackErrors.TRACK_IS_DISPOSED));\n    }\n    if (newTrack?.disposed) {\n        return Promise.reject(new JitsiTrackError(JitsiTrackErrors.TRACK_IS_DISPOSED));\n    }\n\n    if (oldTrack && !oldTrackBelongsToConference) {\n        logger.warn(`JitsiConference.replaceTrack oldTrack (${oldTrack} does not belong to this conference`);\n    }\n\n    if (FeatureFlags.isMultiStreamSupportEnabled() && oldTrack && newTrack && oldTrack.isVideoTrack()) {\n        newTrack.setSourceName(oldTrack.getSourceName());\n    }\n\n    // Now replace the stream at the lower levels\n    return this._doReplaceTrack(oldTrackBelongsToConference ? oldTrack : null, newTrack)\n        .then(() => {\n            oldTrackBelongsToConference && this.onLocalTrackRemoved(oldTrack);\n            newTrack && this._setupNewTrack(newTrack);\n\n            // Send 'VideoTypeMessage' on the bridge channel when a video track is added/removed.\n            if ((oldTrackBelongsToConference && oldTrack?.isVideoTrack()) || newTrack?.isVideoTrack()) {\n                this._sendBridgeVideoTypeMessage(newTrack);\n            }\n\n            // updates presence when we replace the video tracks desktop with screen and screen with desktop\n            if (oldTrackBelongsToConference && oldTrack?.isVideoTrack()\n\n                // we do not want to send presence update during setEffect switching, which does remove and then add\n                && !(oldTrack?._setEffectInProgress || newTrack?._setEffectInProgress)) {\n                this._updateRoomPresence(this.getActiveMediaSession());\n            }\n\n            if (newTrack !== null && (this.isMutedByFocus || this.isVideoMutedByFocus)) {\n                this._fireMuteChangeEvent(newTrack);\n            }\n\n            return Promise.resolve();\n        })\n        .catch(error => {\n            logger.error(`replaceTrack failed: ${error?.stack}`);\n\n            return Promise.reject(error);\n        });\n};\n\n/**\n * Replaces the tracks at the lower level by going through the Jingle session\n * and WebRTC peer connection. The method will resolve immediately if there is\n * currently no JingleSession started.\n * @param {JitsiLocalTrack|null} oldTrack the track to be removed during\n * the process or <tt>null</t> if the method should act as \"add track\"\n * @param {JitsiLocalTrack|null} newTrack the new track to be added or\n * <tt>null</tt> if the method should act as \"remove track\"\n * @return {Promise} resolved when the process is done or rejected with a string\n * which describes the error.\n * @private\n */\nJitsiConference.prototype._doReplaceTrack = function(oldTrack, newTrack) {\n    const replaceTrackPromises = [];\n\n    if (this.jvbJingleSession) {\n        replaceTrackPromises.push(this.jvbJingleSession.replaceTrack(oldTrack, newTrack));\n    } else {\n        logger.info('_doReplaceTrack - no JVB JingleSession');\n    }\n\n    if (this.p2pJingleSession) {\n        replaceTrackPromises.push(this.p2pJingleSession.replaceTrack(oldTrack, newTrack));\n    } else {\n        logger.info('_doReplaceTrack - no P2P JingleSession');\n    }\n\n    return Promise.all(replaceTrackPromises);\n};\n\n/**\n * Handler for when a source-add for a local source is rejected by Jicofo.\n *\n * @param {JingleSessionPC} jingleSession - The media session.\n * @param {Error} error - The error message.\n * @param {MediaType} mediaType - The media type of the track associated with the source that was rejected.\n * @returns {void}\n */\nJitsiConference.prototype._removeLocalSourceOnReject = function(jingleSession, error, mediaType) {\n    if (!jingleSession) {\n        return;\n    }\n    logger.warn(`Source-add rejected on ${jingleSession}, reason=\"${error?.reason}\", message=\"${error?.msg}\"`);\n    const track = this.getLocalTracks(mediaType)[0];\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_UNMUTE_REJECTED, track);\n};\n\n/**\n * Operations related to creating a new track\n * @param {JitsiLocalTrack} newTrack the new track being created\n */\nJitsiConference.prototype._setupNewTrack = function(newTrack) {\n    const mediaType = newTrack.getType();\n\n    if (newTrack.isAudioTrack() || (newTrack.isVideoTrack() && newTrack.videoType !== VideoType.DESKTOP)) {\n        // Report active device to statistics\n        const devices = RTC.getCurrentlyAvailableMediaDevices();\n        const device = devices\n            .find(d => d.kind === `${newTrack.getTrack().kind}input` && d.label === newTrack.getTrack().label);\n\n        if (device) {\n            Statistics.sendActiveDeviceListEvent(RTC.getEventDataForActiveDevice(device));\n        }\n    }\n\n    // Create a source name for this track if it doesn't exist.\n    if (FeatureFlags.isSourceNameSignalingEnabled() && !newTrack.getSourceName()) {\n        const sourceName = getSourceNameForJitsiTrack(\n            this.myUserId(),\n            mediaType,\n            this.getLocalTracks(mediaType)?.length);\n\n        newTrack.setSourceName(sourceName);\n    }\n\n    this.rtc.addLocalTrack(newTrack);\n    newTrack.setConference(this);\n\n    // Add event handlers.\n    newTrack.muteHandler = this._fireMuteChangeEvent.bind(this, newTrack);\n    newTrack.addEventListener(JitsiTrackEvents.TRACK_MUTE_CHANGED, newTrack.muteHandler);\n\n    if (newTrack.isAudioTrack()) {\n        newTrack.audioLevelHandler = this._fireAudioLevelChangeEvent.bind(this);\n        newTrack.addEventListener(JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED, newTrack.audioLevelHandler);\n    }\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_ADDED, newTrack);\n};\n\n/**\n * Sets the video type.\n * @param track\n * @return <tt>true</tt> if video type was changed in presence.\n * @private\n */\nJitsiConference.prototype._setNewVideoType = function(track) {\n    let videoTypeChanged = false;\n\n    if (FeatureFlags.isSourceNameSignalingEnabled() && track) {\n        videoTypeChanged = this._signalingLayer.setTrackVideoType(track.getSourceName(), track.videoType);\n    }\n\n    if (!FeatureFlags.isMultiStreamSupportEnabled()) {\n        const videoTypeTagName = 'videoType';\n\n        // If track is missing we revert to default type Camera, the case where we screenshare and\n        // we return to be video muted.\n        const trackVideoType = track ? track.videoType : VideoType.CAMERA;\n\n        // If video type is camera and there is no videoType in presence, we skip adding it, as this is the default one\n        if (trackVideoType !== VideoType.CAMERA || this.room.getFromPresence(videoTypeTagName)) {\n            // We will not use this.sendCommand here to avoid sending the presence immediately, as later we may also\n            // set the mute status.\n            const legacyTypeChanged = this.room.addOrReplaceInPresence(videoTypeTagName, { value: trackVideoType });\n\n            videoTypeChanged = videoTypeChanged || legacyTypeChanged;\n        }\n    }\n\n    return videoTypeChanged;\n};\n\n/**\n * Sets mute status.\n * @param mediaType\n * @param localTrack\n * @param isMuted\n * @param <tt>true</tt> when presence was changed, <tt>false</tt> otherwise.\n * @private\n */\nJitsiConference.prototype._setTrackMuteStatus = function(mediaType, localTrack, isMuted) {\n    let presenceChanged = false;\n\n    if (FeatureFlags.isSourceNameSignalingEnabled() && localTrack) {\n        presenceChanged = this._signalingLayer.setTrackMuteStatus(localTrack.getSourceName(), isMuted);\n    }\n\n    // Add the 'audioMuted' and 'videoMuted' tags when source name signaling is enabled for backward compatibility.\n    // It won't be used anymore when multiple stream support is enabled.\n    if (!FeatureFlags.isMultiStreamSupportEnabled()) {\n        let audioMuteChanged, videoMuteChanged;\n\n        if (!this.room) {\n            return false;\n        }\n\n        if (mediaType === MediaType.AUDIO) {\n            audioMuteChanged = this.room.addAudioInfoToPresence(isMuted);\n        } else {\n            videoMuteChanged = this.room.addVideoInfoToPresence(isMuted);\n        }\n\n        presenceChanged = presenceChanged || audioMuteChanged || videoMuteChanged;\n    }\n\n    return presenceChanged;\n};\n\n/**\n * Method called by the {@link JitsiLocalTrack} (a video one) in order to add\n * back the underlying WebRTC MediaStream to the PeerConnection (which has\n * removed on video mute).\n * @param {JitsiLocalTrack} track the local track that will be added as part of\n * the unmute operation.\n * @return {Promise} resolved when the process is done or rejected with a string\n * which describes the error.\n */\nJitsiConference.prototype._addLocalTrackAsUnmute = function(track) {\n    const addAsUnmutePromises = [];\n\n    if (this.jvbJingleSession) {\n        addAsUnmutePromises.push(this.jvbJingleSession.addTrackAsUnmute(track));\n    } else {\n        logger.debug('Add local MediaStream as unmute - no JVB Jingle session started yet');\n    }\n\n    if (this.p2pJingleSession) {\n        addAsUnmutePromises.push(this.p2pJingleSession.addTrackAsUnmute(track));\n    } else {\n        logger.debug('Add local MediaStream as unmute - no P2P Jingle session started yet');\n    }\n\n    return Promise.allSettled(addAsUnmutePromises);\n};\n\n/**\n * Method called by the {@link JitsiLocalTrack} (a video one) in order to remove\n * the underlying WebRTC MediaStream from the PeerConnection. The purpose of\n * that is to stop sending any data and turn off the HW camera device.\n * @param {JitsiLocalTrack} track the local track that will be removed.\n * @return {Promise}\n */\nJitsiConference.prototype._removeLocalTrackAsMute = function(track) {\n    const removeAsMutePromises = [];\n\n    if (this.jvbJingleSession) {\n        removeAsMutePromises.push(this.jvbJingleSession.removeTrackAsMute(track));\n    } else {\n        logger.debug('Remove local MediaStream - no JVB JingleSession started yet');\n    }\n    if (this.p2pJingleSession) {\n        removeAsMutePromises.push(this.p2pJingleSession.removeTrackAsMute(track));\n    } else {\n        logger.debug('Remove local MediaStream - no P2P JingleSession started yet');\n    }\n\n    return Promise.allSettled(removeAsMutePromises);\n};\n\n/**\n * Get role of the local user.\n * @returns {string} user role: 'moderator' or 'none'\n */\nJitsiConference.prototype.getRole = function() {\n    return this.room.role;\n};\n\n/**\n * Returns whether or not the current conference has been joined as a hidden\n * user.\n *\n * @returns {boolean|null} True if hidden, false otherwise. Will return null if\n * no connection is active.\n */\nJitsiConference.prototype.isHidden = function() {\n    if (!this.connection) {\n        return null;\n    }\n\n    return Strophe.getDomainFromJid(this.connection.getJid())\n        === this.options.config.hiddenDomain;\n};\n\n/**\n * Check if local user is moderator.\n * @returns {boolean|null} true if local user is moderator, false otherwise. If\n * we're no longer in the conference room then <tt>null</tt> is returned.\n */\nJitsiConference.prototype.isModerator = function() {\n    return this.room ? this.room.isModerator() : null;\n};\n\n/**\n * Set password for the room.\n * @param {string} password new password for the room.\n * @returns {Promise}\n */\nJitsiConference.prototype.lock = function(password) {\n    if (!this.isModerator()) {\n        return Promise.reject(new Error('You are not moderator.'));\n    }\n\n    return new Promise((resolve, reject) => {\n        this.room.lockRoom(\n            password || '',\n            () => resolve(),\n            err => reject(err),\n            () => reject(JitsiConferenceErrors.PASSWORD_NOT_SUPPORTED));\n    });\n};\n\n/**\n * Remove password from the room.\n * @returns {Promise}\n */\nJitsiConference.prototype.unlock = function() {\n    return this.lock();\n};\n\n/**\n * Elects the participant with the given id to be the selected participant in\n * order to receive higher video quality (if simulcast is enabled).\n * Or cache it if channel is not created and send it once channel is available.\n * @param participantId the identifier of the participant\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\n * @returns {void}\n */\nJitsiConference.prototype.selectParticipant = function(participantId) {\n    this.selectParticipants([ participantId ]);\n};\n\n/*\n * Elects participants with given ids to be the selected participants in order\n * to receive higher video quality (if simulcast is enabled). The argument\n * should be an array of participant id strings or an empty array; an error will\n * be thrown if a non-array is passed in. The error is thrown as a layer of\n * protection against passing an invalid argument, as the error will happen in\n * the bridge and may not be visible in the client.\n *\n * @param {Array<strings>} participantIds - An array of identifiers for\n * participants.\n * @returns {void}\n */\nJitsiConference.prototype.selectParticipants = function(participantIds) {\n    if (!Array.isArray(participantIds)) {\n        throw new Error('Invalid argument; participantIds must be an array.');\n    }\n\n    this.receiveVideoController.selectEndpoints(participantIds);\n};\n\n/**\n * Obtains the current value for \"lastN\". See {@link setLastN} for more info.\n * @returns {number}\n */\nJitsiConference.prototype.getLastN = function() {\n    return this.receiveVideoController.getLastN();\n};\n\n/**\n * Obtains the forwarded sources list in this conference.\n * @return {Array<string>|null}\n */\nJitsiConference.prototype.getForwardedSources = function() {\n    return this.rtc.getForwardedSources();\n};\n\n/**\n * Selects a new value for \"lastN\". The requested amount of videos are going\n * to be delivered after the value is in effect. Set to -1 for unlimited or\n * all available videos.\n * @param lastN the new number of videos the user would like to receive.\n * @throws Error or RangeError if the given value is not a number or is smaller\n * than -1.\n */\nJitsiConference.prototype.setLastN = function(lastN) {\n    if (!Number.isInteger(lastN) && !Number.parseInt(lastN, 10)) {\n        throw new Error(`Invalid value for lastN: ${lastN}`);\n    }\n    const n = Number(lastN);\n\n    if (n < -1) {\n        throw new RangeError('lastN cannot be smaller than -1');\n    }\n    this.receiveVideoController.setLastN(n);\n\n    // If the P2P session is not fully established yet, we wait until it gets\n    // established.\n    if (this.p2pJingleSession) {\n        const isVideoActive = n !== 0;\n\n        this.p2pJingleSession\n            .setMediaTransferActive(true, isVideoActive)\n            .catch(error => {\n                logger.error(\n                    `Failed to adjust video transfer status (${isVideoActive})`,\n                    error);\n            });\n    }\n};\n\n/**\n * Checks if the participant given by participantId is currently included in\n * the last N.\n * @param {string} participantId the identifier of the participant we would\n * like to check.\n * @return {boolean} true if the participant with id is in the last N set or\n * if there's no last N set, false otherwise.\n * @deprecated this method should never be used to figure out the UI, but\n * {@link ParticipantConnectionStatus} should be used instead.\n */\nJitsiConference.prototype.isInLastN = function(participantId) {\n    return this.rtc.isInLastN(participantId);\n};\n\n/**\n * @return Array<JitsiParticipant> an array of all participants in this\n * conference.\n */\nJitsiConference.prototype.getParticipants = function() {\n    return Object.values(this.participants);\n};\n\n\n/**\n * @return Array<JitsiParticipant> an array of all participants in this\n * conference.\n */\n JitsiConference.prototype.getParticipantsWithoutHidden = function() {\n    let participants = this.getParticipants().filter(participant => !participant._hidden);\n\n    participants = participants.filter(participant => !participant?._properties?.features_jigasi);\n\n    return participants;\n};\n\n\n/**\n * Returns the number of participants in the conference, including the local\n * participant.\n * @param countHidden {boolean} Whether or not to include hidden participants\n * in the count. Default: false.\n **/\nJitsiConference.prototype.getParticipantCount = function(countHidden = false) {\n    let participants = this.getParticipants();\n\n    if (!countHidden) {\n        participants = participants.filter(p => !p.isHidden());\n    }\n\n    // Add one for the local participant.\n    return participants.length + 1;\n};\n\n/**\n * @returns {JitsiParticipant} the participant in this conference with the\n * specified id (or undefined if there isn't one).\n * @param id the id of the participant.\n */\nJitsiConference.prototype.getParticipantById = function(id) {\n    return this.participants[id];\n};\n\n/**\n * Grant owner rights to the participant.\n * @param {string} id id of the participant to grant owner rights to.\n */\nJitsiConference.prototype.grantOwner = function(id) {\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    this.room.setAffiliation(participant.getJid(), 'owner');\n};\n\n/**\n * Revoke owner rights to the participant or local Participant as\n * the user might want to refuse to be a moderator.\n * @param {string} id id of the participant to revoke owner rights to.\n */\nJitsiConference.prototype.revokeOwner = function(id) {\n    const participant = this.getParticipantById(id);\n    const isMyself = this.myUserId() === id;\n    const role = this.isMembersOnly() ? 'member' : 'none';\n\n    if (isMyself) {\n        this.room.setAffiliation(this.room.myroomjid, role);\n    } else if (participant) {\n        this.room.setAffiliation(participant.getJid(), role);\n    }\n};\n\n\n/**\n * Kick participant from this conference.\n * @param {string} id id of the participant to kick\n * @param {string} reason reason of the participant to kick\n */\nJitsiConference.prototype.kickParticipant = function(id, reason) {\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    this.room.kick(participant.getJid(), reason);\n};\n\n/**\n * Maybe clears the timeout which emits {@link ACTION_JINGLE_SI_TIMEOUT}\n * analytics event.\n * @private\n */\nJitsiConference.prototype._maybeClearSITimeout = function() {\n    if (this._sessionInitiateTimeout\n            && (this.jvbJingleSession || this.getParticipantCount() < 2)) {\n        window.clearTimeout(this._sessionInitiateTimeout);\n        this._sessionInitiateTimeout = null;\n    }\n};\n\n/**\n * Sets a timeout which will emit {@link ACTION_JINGLE_SI_TIMEOUT} analytics\n * event.\n * @private\n */\nJitsiConference.prototype._maybeSetSITimeout = function() {\n    // Jicofo is supposed to invite if there are at least 2 participants\n    if (!this.jvbJingleSession\n            && this.getParticipantCount() >= 2\n            && !this._sessionInitiateTimeout) {\n        this._sessionInitiateTimeout = window.setTimeout(() => {\n            this._sessionInitiateTimeout = null;\n            Statistics.sendAnalytics(createJingleEvent(\n                ACTION_JINGLE_SI_TIMEOUT,\n                {\n                    p2p: false,\n                    value: JINGLE_SI_TIMEOUT\n                }));\n        }, JINGLE_SI_TIMEOUT);\n    }\n};\n\n/**\n * Mutes a participant.\n * @param {string} id The id of the participant to mute.\n */\nJitsiConference.prototype.muteParticipant = function(id, mediaType) {\n    const muteMediaType = mediaType ? mediaType : MediaType.AUDIO;\n\n    if (muteMediaType !== MediaType.AUDIO && muteMediaType !== MediaType.VIDEO) {\n        logger.error(`Unsupported media type: ${muteMediaType}`);\n\n        return;\n    }\n\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    this.room.muteParticipant(participant.getJid(), true, muteMediaType);\n};\n\n/* eslint-disable max-params */\n\n/**\n * Notifies this JitsiConference that a new member has joined its chat room.\n *\n * FIXME This should NOT be exposed!\n *\n * @param jid the jid of the participant in the MUC\n * @param nick the display name of the participant\n * @param role the role of the participant in the MUC\n * @param isHidden indicates if this is a hidden participant (system\n * participant for example a recorder).\n * @param statsID the participant statsID (optional)\n * @param status the initial status if any\n * @param identity the member identity, if any\n * @param botType the member botType, if any\n * @param fullJid the member full jid, if any\n * @param features the member botType, if any\n * @param isReplaceParticipant whether this join replaces a participant with\n * the same jwt.\n */\nJitsiConference.prototype.onMemberJoined = function(\n        jid, nick, role, isHidden, statsID, status, identity, botType, fullJid, features, isReplaceParticipant) {\n    const id = Strophe.getResourceFromJid(jid);\n\n    if (id === 'focus' || this.myUserId() === id) {\n        return;\n    }\n\n    const participant\n        = new JitsiParticipant(jid, this, nick, isHidden, statsID, status, identity);\n\n    participant.setRole(role);\n    participant.setBotType(botType);\n    participant.setFeatures(features);\n    participant.setIsReplacing(isReplaceParticipant);\n\n    this.participants[id] = participant;\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.USER_JOINED,\n        id,\n        participant);\n\n    this._updateFeatures(participant);\n\n    // maybeStart only if we had finished joining as then we will have information for the number of participants\n    if (this.isJoined()) {\n        this._maybeStartOrStopP2P();\n    }\n\n    this._maybeSetSITimeout();\n};\n\n/* eslint-enable max-params */\n\n/**\n * Get notified when we joined the room.\n *\n * FIXME This should NOT be exposed!\n *\n * @private\n */\nJitsiConference.prototype._onMucJoined = function() {\n    this._maybeStartOrStopP2P();\n};\n\n/**\n * Updates features for a participant.\n * @param {JitsiParticipant} participant - The participant to query for features.\n * @returns {void}\n * @private\n */\nJitsiConference.prototype._updateFeatures = function(participant) {\n    participant.getFeatures()\n        .then(features => {\n            participant._supportsDTMF = features.has('urn:xmpp:jingle:dtmf:0');\n            this.updateDTMFSupport();\n\n            if (features.has(FEATURE_JIGASI)) {\n                participant.setProperty('features_jigasi', true);\n            }\n\n            if (features.has(FEATURE_E2EE)) {\n                participant.setProperty('features_e2ee', true);\n            }\n        })\n        .catch(() => false);\n};\n\n/**\n * Get notified when member bot type had changed.\n * @param jid the member jid\n * @param botType the new botType value\n * @private\n */\nJitsiConference.prototype._onMemberBotTypeChanged = function(jid, botType) {\n\n    // find the participant and mark it as non bot, as the real one will join\n    // in a moment\n    const peers = this.getParticipants();\n    const botParticipant = peers.find(p => p.getJid() === jid);\n\n    if (botParticipant) {\n        botParticipant.setBotType(botType);\n        const id = Strophe.getResourceFromJid(jid);\n\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.BOT_TYPE_CHANGED,\n            id,\n            botType);\n    }\n\n    // if botType changed to undefined, botType was removed, in case of\n    // poltergeist mode this is the moment when the poltergeist had exited and\n    // the real participant had already replaced it.\n    // In this case we can check and try p2p\n    if (!botParticipant.getBotType()) {\n        this._maybeStartOrStopP2P();\n    }\n};\n\nJitsiConference.prototype.onMemberLeft = function(jid) {\n    const id = Strophe.getResourceFromJid(jid);\n\n    if (id === 'focus' || this.myUserId() === id) {\n        return;\n    }\n\n    const participant = this.participants[id];\n    const mediaSessions = this.getMediaSessions();\n    let tracksToBeRemoved = [];\n\n    for (const session of mediaSessions) {\n        const remoteTracks = session.peerconnection.getRemoteTracks(id);\n\n        remoteTracks && (tracksToBeRemoved = [ ...tracksToBeRemoved, ...remoteTracks ]);\n\n        // Remove the ssrcs from the remote description and renegotiate.\n        session.removeRemoteStreamsOnLeave(id);\n    }\n\n    // Fire the event before renegotiation is done so that the thumbnails can be removed immediately.\n    tracksToBeRemoved.forEach(track => {\n        this.eventEmitter.emit(JitsiConferenceEvents.TRACK_REMOVED, track);\n    });\n\n    if (participant) {\n        delete this.participants[id];\n        this.eventEmitter.emit(JitsiConferenceEvents.USER_LEFT, id, participant);\n    }\n\n    if (this.room !== null) { // Skip if we have left the room already.\n        this._maybeStartOrStopP2P(true /* triggered by user left event */);\n        this._maybeClearSITimeout();\n    }\n};\n\n/* eslint-disable max-params */\n\n/**\n * Designates an event indicating that we were kicked from the XMPP MUC.\n * @param {boolean} isSelfPresence - whether it is for local participant\n * or another participant.\n * @param {string} actorId - the id of the participant who was initiator\n * of the kick.\n * @param {string?} kickedParticipantId - when it is not a kick for local participant,\n * this is the id of the participant which was kicked.\n * @param {string} reason - reason of the participant to kick\n * @param {boolean?} isReplaceParticipant - whether this is a server initiated kick in order\n * to replace it with a participant with same jwt.\n */\nJitsiConference.prototype.onMemberKicked = function(\n        isSelfPresence,\n        actorId,\n        kickedParticipantId,\n        reason,\n        isReplaceParticipant) {\n    // This check which be true when we kick someone else. With the introduction of lobby\n    // the ChatRoom KICKED event is now also emitted for ourselves (the kicker) so we want to\n    // avoid emitting an event where `undefined` kicked someone.\n    if (actorId === this.myUserId()) {\n        return;\n    }\n\n    const actorParticipant = this.participants[actorId];\n\n    if (isSelfPresence) {\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.KICKED, actorParticipant, reason, isReplaceParticipant);\n\n        this.leave();\n\n        return;\n    }\n\n    const kickedParticipant = this.participants[kickedParticipantId];\n\n    kickedParticipant.setIsReplaced(isReplaceParticipant);\n\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.PARTICIPANT_KICKED, actorParticipant, kickedParticipant, reason);\n};\n\n/**\n * Method called on local MUC role change.\n * @param {string} role the name of new user's role as defined by XMPP MUC.\n */\nJitsiConference.prototype.onLocalRoleChanged = function(role) {\n    // Emit role changed for local  JID\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.USER_ROLE_CHANGED, this.myUserId(), role);\n};\n\nJitsiConference.prototype.onUserRoleChanged = function(jid, role) {\n    const id = Strophe.getResourceFromJid(jid);\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    participant.setRole(role);\n    this.eventEmitter.emit(JitsiConferenceEvents.USER_ROLE_CHANGED, id, role);\n};\n\nJitsiConference.prototype.onDisplayNameChanged = function(jid, displayName) {\n    const id = Strophe.getResourceFromJid(jid);\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n\n    if (participant._displayName === displayName) {\n        return;\n    }\n\n    participant._displayName = displayName;\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.DISPLAY_NAME_CHANGED,\n        id,\n        displayName);\n};\n\n/**\n * Notifies this JitsiConference that a JitsiRemoteTrack was added to the conference.\n *\n * @param {JitsiRemoteTrack} track the JitsiRemoteTrack which was added to this JitsiConference.\n */\nJitsiConference.prototype.onRemoteTrackAdded = function(track) {\n    if (track.isP2P && !this.isP2PActive()) {\n        logger.info('Trying to add remote P2P track, when not in P2P - IGNORED');\n\n        return;\n    } else if (!track.isP2P && this.isP2PActive()) {\n        logger.info('Trying to add remote JVB track, when in P2P - IGNORED');\n\n        return;\n    }\n\n    const id = track.getParticipantId();\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        logger.error(`No participant found for id: ${id}`);\n\n        return;\n    }\n\n    // Add track to JitsiParticipant.\n    participant._tracks.push(track);\n\n    if (this.transcriber) {\n        this.transcriber.addTrack(track);\n    }\n\n    const emitter = this.eventEmitter;\n\n    track.addEventListener(\n        JitsiTrackEvents.TRACK_MUTE_CHANGED,\n        () => emitter.emit(JitsiConferenceEvents.TRACK_MUTE_CHANGED, track));\n    track.isAudioTrack() && track.addEventListener(\n        JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n        (audioLevel, tpc) => {\n            const activeTPC = this.getActivePeerConnection();\n\n            if (activeTPC === tpc) {\n                emitter.emit(JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED, id, audioLevel);\n            }\n        }\n    );\n\n    emitter.emit(JitsiConferenceEvents.TRACK_ADDED, track);\n};\n\n/**\n * Callback called by the Jingle plugin when 'session-answer' is received.\n * @param {JingleSessionPC} session the Jingle session for which an answer was\n * received.\n * @param {jQuery} answer a jQuery selector pointing to 'jingle' IQ element\n */\n// eslint-disable-next-line no-unused-vars\nJitsiConference.prototype.onCallAccepted = function(session, answer) {\n    if (this.p2pJingleSession === session) {\n        logger.info('P2P setAnswer');\n\n        this.p2pJingleSession.setAnswer(answer);\n        this.eventEmitter.emit(JitsiConferenceEvents._MEDIA_SESSION_STARTED, this.p2pJingleSession);\n    }\n};\n\n/**\n * Callback called by the Jingle plugin when 'transport-info' is received.\n * @param {JingleSessionPC} session the Jingle session for which the IQ was\n * received\n * @param {jQuery} transportInfo a jQuery selector pointing to 'jingle' IQ\n * element\n */\n// eslint-disable-next-line no-unused-vars\nJitsiConference.prototype.onTransportInfo = function(session, transportInfo) {\n    if (this.p2pJingleSession === session) {\n        logger.info('P2P addIceCandidates');\n        this.p2pJingleSession.addIceCandidates(transportInfo);\n    }\n};\n\n/**\n * Notifies this JitsiConference that a JitsiRemoteTrack was removed from\n * the conference.\n *\n * @param {JitsiRemoteTrack} removedTrack\n */\nJitsiConference.prototype.onRemoteTrackRemoved = function(removedTrack) {\n    this.getParticipants().forEach(participant => {\n        const tracks = participant.getTracks();\n\n        for (let i = 0; i < tracks.length; i++) {\n            if (tracks[i] === removedTrack) {\n                // Since the tracks have been compared and are\n                // considered equal the result of splice can be ignored.\n                participant._tracks.splice(i, 1);\n\n                this.eventEmitter.emit(JitsiConferenceEvents.TRACK_REMOVED, removedTrack);\n\n                if (this.transcriber) {\n                    this.transcriber.removeTrack(removedTrack);\n                }\n\n                break;\n            }\n        }\n    }, this);\n};\n\n/**\n * Handles an incoming call event for the P2P jingle session.\n */\nJitsiConference.prototype._onIncomingCallP2P = function(jingleSession, jingleOffer) {\n\n    let rejectReason;\n\n    if ((!this.isP2PEnabled() && !this.isP2PTestModeEnabled()) || browser.isFirefox() || browser.isWebKitBased()) {\n        rejectReason = {\n            reason: 'decline',\n            reasonDescription: 'P2P disabled',\n            errorMsg: 'P2P mode disabled in the configuration'\n        };\n    } else if (this.p2pJingleSession) {\n        // Reject incoming P2P call (already in progress)\n        rejectReason = {\n            reason: 'busy',\n            reasonDescription: 'P2P already in progress',\n            errorMsg: 'Duplicated P2P \"session-initiate\"'\n        };\n    } else if (!this._shouldBeInP2PMode()) {\n        rejectReason = {\n            reason: 'decline',\n            reasonDescription: 'P2P requirements not met',\n            errorMsg: 'Received P2P \"session-initiate\" when should not be in P2P mode'\n        };\n        Statistics.sendAnalytics(createJingleEvent(ACTION_P2P_DECLINED));\n    }\n\n    if (rejectReason) {\n        this._rejectIncomingCall(jingleSession, rejectReason);\n    } else {\n        this._acceptP2PIncomingCall(jingleSession, jingleOffer);\n    }\n};\n\n/**\n * Handles an incoming call event.\n */\nJitsiConference.prototype.onIncomingCall = function(jingleSession, jingleOffer, now) {\n    // Handle incoming P2P call\n    if (jingleSession.isP2P) {\n        this._onIncomingCallP2P(jingleSession, jingleOffer);\n    } else {\n        if (!this.isFocus(jingleSession.remoteJid)) {\n            const description = 'Rejecting session-initiate from non-focus.';\n\n            this._rejectIncomingCall(\n                jingleSession, {\n                    reason: 'security-error',\n                    reasonDescription: description,\n                    errorMsg: description\n                });\n\n            return;\n        }\n        this._acceptJvbIncomingCall(jingleSession, jingleOffer, now);\n    }\n};\n\n/**\n * Accepts an incoming call event for the JVB jingle session.\n */\nJitsiConference.prototype._acceptJvbIncomingCall = function(jingleSession, jingleOffer, now) {\n\n    // Accept incoming call\n    this.jvbJingleSession = jingleSession;\n    this.room.connectionTimes['session.initiate'] = now;\n    this._sendConferenceJoinAnalyticsEvent();\n\n    if (this.wasStopped) {\n        Statistics.sendAnalyticsAndLog(createJingleEvent(ACTION_JINGLE_RESTART, { p2p: false }));\n    }\n\n    const serverRegion\n        = $(jingleOffer)\n            .find('>bridge-session[xmlns=\"http://jitsi.org/protocol/focus\"]')\n            .attr('region');\n\n    this.eventEmitter.emit(JitsiConferenceEvents.SERVER_REGION_CHANGED, serverRegion);\n\n    this._maybeClearSITimeout();\n    Statistics.sendAnalytics(createJingleEvent(\n        ACTION_JINGLE_SI_RECEIVED,\n        {\n            p2p: false,\n            value: now\n        }));\n\n    try {\n        jingleSession.initialize(\n            this.room,\n            this.rtc,\n            this._signalingLayer,\n            {\n                ...this.options.config,\n                enableInsertableStreams: this.isE2EEEnabled()\n            });\n    } catch (error) {\n        GlobalOnErrorHandler.callErrorHandler(error);\n        logger.error(error);\n\n        return;\n    }\n\n    // Open a channel with the videobridge.\n    this._setBridgeChannel(jingleOffer, jingleSession.peerconnection);\n\n    const localTracks = this._getInitialLocalTracks();\n\n    try {\n        jingleSession.acceptOffer(\n            jingleOffer,\n            () => {\n                // If for any reason invite for the JVB session arrived after\n                // the P2P has been established already the media transfer needs\n                // to be turned off here.\n                if (this.isP2PActive() && this.jvbJingleSession) {\n                    this._suspendMediaTransferForJvbConnection();\n                }\n\n                this.eventEmitter.emit(JitsiConferenceEvents._MEDIA_SESSION_STARTED, jingleSession);\n                if (!this.isP2PActive()) {\n                    this.eventEmitter.emit(JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED, jingleSession);\n                }\n            },\n            error => {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error('Failed to accept incoming Jingle session', error);\n            },\n            localTracks\n        );\n\n        // Enable or disable simulcast for plan-b screensharing based on the capture fps if it is set through the UI.\n        this._desktopSharingFrameRate\n            && jingleSession.peerconnection.setDesktopSharingFrameRate(this._desktopSharingFrameRate);\n\n        // Start callstats as soon as peerconnection is initialized,\n        // do not wait for XMPPEvents.PEERCONNECTION_READY, as it may never\n        // happen in case if user doesn't have or denied permission to\n        // both camera and microphone.\n        logger.info('Starting CallStats for JVB connection...');\n        this.statistics.startCallStats(\n            this.jvbJingleSession.peerconnection,\n            'jitsi' /* Remote user ID for JVB is 'jitsi' */);\n        this.statistics.startRemoteStats(this.jvbJingleSession.peerconnection);\n    } catch (e) {\n        GlobalOnErrorHandler.callErrorHandler(e);\n        logger.error(e);\n    }\n};\n\n/**\n * Sets the BridgeChannel.\n *\n * @param {jQuery} offerIq a jQuery selector pointing to the jingle element of\n * the offer IQ which may carry the WebSocket URL for the 'websocket'\n * BridgeChannel mode.\n * @param {TraceablePeerConnection} pc the peer connection which will be used\n * to listen for new WebRTC Data Channels (in the 'datachannel' mode).\n */\nJitsiConference.prototype._setBridgeChannel = function(offerIq, pc) {\n    let wsUrl = null;\n    const webSocket\n        = $(offerIq)\n            .find('>content>transport>web-socket')\n            .first();\n\n    if (webSocket.length === 1) {\n        wsUrl = webSocket[0].getAttribute('url');\n    }\n\n    if (wsUrl) {\n        // If the offer contains a websocket use it.\n        this.rtc.initializeBridgeChannel(null, wsUrl);\n    } else {\n        // Otherwise, fall back to an attempt to use SCTP.\n        this.rtc.initializeBridgeChannel(pc, null);\n    }\n};\n\n/**\n * Rejects incoming Jingle call.\n * @param {JingleSessionPC} jingleSession the session instance to be rejected.\n * @param {object} [options]\n * @param {string} options.reason the name of the reason element as defined\n * by Jingle\n * @param {string} options.reasonDescription the reason description which will\n * be included in Jingle 'session-terminate' message.\n * @param {string} options.errorMsg an error message to be logged on global\n * error handler\n * @private\n */\nJitsiConference.prototype._rejectIncomingCall = function(jingleSession, options) {\n    if (options && options.errorMsg) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(options.errorMsg));\n    }\n\n    // Terminate the jingle session with a reason\n    jingleSession.terminate(\n        null /* success callback => we don't care */,\n        error => {\n            logger.warn(\n                'An error occurred while trying to terminate'\n                    + ' invalid Jingle session', error);\n        }, {\n            reason: options && options.reason,\n            reasonDescription: options && options.reasonDescription,\n            sendSessionTerminate: true\n        });\n};\n\n/**\n * Handles the call ended event.\n * XXX is this due to the remote side terminating the Jingle session?\n *\n * @param {JingleSessionPC} jingleSession the jingle session which has been\n * terminated.\n * @param {String} reasonCondition the Jingle reason condition.\n * @param {String|null} reasonText human readable reason text which may provide\n * more details about why the call has been terminated.\n */\nJitsiConference.prototype.onCallEnded = function(jingleSession, reasonCondition, reasonText) {\n    logger.info(\n        `Call ended: ${reasonCondition} - ${reasonText} P2P ?${\n            jingleSession.isP2P}`);\n    if (jingleSession === this.jvbJingleSession) {\n        this.wasStopped = true;\n\n        Statistics.sendAnalytics(\n            createJingleEvent(ACTION_JINGLE_TERMINATE, { p2p: false }));\n\n        // Stop the stats\n        if (this.statistics) {\n            this.statistics.stopRemoteStats(\n                this.jvbJingleSession.peerconnection);\n            logger.info('Stopping JVB CallStats');\n            this.statistics.stopCallStats(\n                this.jvbJingleSession.peerconnection);\n        }\n\n        // Current JVB JingleSession is no longer valid, so set it to null\n        this.jvbJingleSession = null;\n\n        // Let the RTC service do any cleanups\n        this.rtc.onCallEnded();\n    } else if (jingleSession === this.p2pJingleSession) {\n        const stopOptions = {};\n\n        // It's the responder who decides to enforce JVB mode, so that both\n        // initiator and responder are aware if it was intentional.\n        if (reasonCondition === 'decline' && reasonText === 'force JVB121') {\n            logger.info('In forced JVB 121 mode...');\n            Statistics.analytics.addPermanentProperties({ forceJvb121: true });\n        } else if (reasonCondition === 'connectivity-error'\n            && reasonText === 'ICE FAILED') {\n            // It can happen that the other peer detects ICE failed and\n            // terminates the session, before we get the event on our side.\n            // But we are able to parse the reason and mark it here.\n            Statistics.analytics.addPermanentProperties({ p2pFailed: true });\n        } else if (reasonCondition === 'success' && reasonText === 'restart') {\n            // When we are restarting media sessions we don't want to switch the tracks\n            // to the JVB just yet.\n            stopOptions.requestRestart = true;\n        }\n        this._stopP2PSession(stopOptions);\n    } else {\n        logger.error(\n            'Received onCallEnded for invalid session',\n            jingleSession.sid,\n            jingleSession.remoteJid,\n            reasonCondition,\n            reasonText);\n    }\n};\n\n/**\n * Handles the suspend detected event. Leaves the room and fires suspended.\n * @param {JingleSessionPC} jingleSession\n */\nJitsiConference.prototype.onSuspendDetected = function(jingleSession) {\n    if (!jingleSession.isP2P) {\n        this.leave();\n        this.eventEmitter.emit(JitsiConferenceEvents.SUSPEND_DETECTED);\n    }\n};\n\nJitsiConference.prototype.updateDTMFSupport = function() {\n    let somebodySupportsDTMF = false;\n    const participants = this.getParticipants();\n\n    // check if at least 1 participant supports DTMF\n    for (let i = 0; i < participants.length; i += 1) {\n        if (participants[i].supportsDTMF()) {\n            somebodySupportsDTMF = true;\n            break;\n        }\n    }\n    if (somebodySupportsDTMF !== this.somebodySupportsDTMF) {\n        this.somebodySupportsDTMF = somebodySupportsDTMF;\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.DTMF_SUPPORT_CHANGED,\n            somebodySupportsDTMF);\n    }\n};\n\n/**\n * Allows to check if there is at least one user in the conference\n * that supports DTMF.\n * @returns {boolean} true if somebody supports DTMF, false otherwise\n */\nJitsiConference.prototype.isDTMFSupported = function() {\n    return this.somebodySupportsDTMF;\n};\n\n/**\n * Returns the local user's ID\n * @return {string} local user's ID\n */\nJitsiConference.prototype.myUserId = function() {\n    return (\n        this.room && this.room.myroomjid\n            ? Strophe.getResourceFromJid(this.room.myroomjid)\n            : null);\n};\n\nJitsiConference.prototype.sendTones = function(tones, duration, pause) {\n    const peerConnection = this.getActivePeerConnection();\n\n    if (peerConnection) {\n        peerConnection.sendTones(tones, duration, pause);\n    } else {\n        logger.warn('cannot sendTones: no peer connection');\n    }\n};\n\n/**\n * Starts recording the current conference.\n *\n * @param {Object} options - Configuration for the recording. See\n * {@link Chatroom#startRecording} for more info.\n * @returns {Promise} See {@link Chatroom#startRecording} for more info.\n */\nJitsiConference.prototype.startRecording = function(options) {\n    if (this.room) {\n        return this.recordingManager.startRecording(options);\n    }\n\n    return Promise.reject(new Error('The conference is not created yet!'));\n};\n\n/**\n * Stop a recording session.\n *\n * @param {string} sessionID - The ID of the recording session that\n * should be stopped.\n * @returns {Promise} See {@link Chatroom#stopRecording} for more info.\n */\nJitsiConference.prototype.stopRecording = function(sessionID) {\n    if (this.room) {\n        return this.recordingManager.stopRecording(sessionID);\n    }\n\n    return Promise.reject(new Error('The conference is not created yet!'));\n};\n\n/**\n * Returns true if the SIP calls are supported and false otherwise\n */\nJitsiConference.prototype.isSIPCallingSupported = function() {\n    if (this.room) {\n        return this.room.isSIPCallingSupported();\n    }\n\n    return false;\n};\n\n/**\n * Dials a number.\n * @param number the number\n */\nJitsiConference.prototype.dial = function(number) {\n    if (this.room) {\n        return this.room.dial(number);\n    }\n\n    return new Promise((resolve, reject) => {\n        reject(new Error('The conference is not created yet!'));\n    });\n};\n\n/**\n * Hangup an existing call\n */\nJitsiConference.prototype.hangup = function() {\n    if (this.room) {\n        return this.room.hangup();\n    }\n\n    return new Promise((resolve, reject) => {\n        reject(new Error('The conference is not created yet!'));\n    });\n};\n\n/**\n * Starts the transcription service.\n */\nJitsiConference.prototype.startTranscriber = function() {\n    return this.dial('jitsi_meet_transcribe');\n};\n\n\n/**\n * Stops the transcription service.\n */\nJitsiConference.prototype.stopTranscriber = JitsiConference.prototype.hangup;\n\n/**\n * Returns the phone number for joining the conference.\n */\nJitsiConference.prototype.getPhoneNumber = function() {\n    if (this.room) {\n        return this.room.getPhoneNumber();\n    }\n\n    return null;\n};\n\n/**\n * Returns the pin for joining the conference with phone.\n */\nJitsiConference.prototype.getPhonePin = function() {\n    if (this.room) {\n        return this.room.getPhonePin();\n    }\n\n    return null;\n};\n\n/**\n * Returns the meeting unique ID if any.\n *\n * @returns {string|undefined}\n */\nJitsiConference.prototype.getMeetingUniqueId = function() {\n    if (this.room) {\n        return this.room.getMeetingId();\n    }\n};\n\n/**\n * Will return P2P or JVB <tt>TraceablePeerConnection</tt> depending on\n * which connection is currently active.\n *\n * @return {TraceablePeerConnection|null} null if there isn't any active\n * <tt>TraceablePeerConnection</tt> currently available.\n * @public (FIXME how to make package local ?)\n */\nJitsiConference.prototype.getActivePeerConnection = function() {\n    const session = this.isP2PActive() ? this.p2pJingleSession : this.jvbJingleSession;\n\n    return session ? session.peerconnection : null;\n};\n\n/**\n * Returns the connection state for the current room. Its ice connection state\n * for its session.\n * NOTE that \"completed\" ICE state which can appear on the P2P connection will\n * be converted to \"connected\".\n * @return {string|null} ICE state name or <tt>null</tt> if there is no active\n * peer connection at this time.\n */\nJitsiConference.prototype.getConnectionState = function() {\n    const peerConnection = this.getActivePeerConnection();\n\n    return peerConnection ? peerConnection.getConnectionState() : null;\n};\n\n/**\n * Make all new participants mute their audio/video on join.\n * @param policy {Object} object with 2 boolean properties for video and audio:\n * @param {boolean} audio if audio should be muted.\n * @param {boolean} video if video should be muted.\n */\nJitsiConference.prototype.setStartMutedPolicy = function(policy) {\n    if (!this.isModerator()) {\n        logger.warn(`Failed to set start muted policy, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator'}`);\n\n        return;\n    }\n    this.startMutedPolicy = policy;\n    this.room.addOrReplaceInPresence('startmuted', {\n        attributes: {\n            audio: policy.audio,\n            video: policy.video,\n            xmlns: 'http://jitsi.org/jitmeet/start-muted'\n        }\n    }) && this.room.sendPresence();\n};\n\n/**\n * Returns current start muted policy\n * @returns {Object} with 2 properties - audio and video.\n */\nJitsiConference.prototype.getStartMutedPolicy = function() {\n    return this.startMutedPolicy;\n};\n\n/**\n * Check if audio is muted on join.\n */\nJitsiConference.prototype.isStartAudioMuted = function() {\n    return this.startAudioMuted;\n};\n\n/**\n * Check if video is muted on join.\n */\nJitsiConference.prototype.isStartVideoMuted = function() {\n    return this.startVideoMuted;\n};\n\n/**\n * Returns measured connectionTimes.\n */\nJitsiConference.prototype.getConnectionTimes = function() {\n    return this.room.connectionTimes;\n};\n\n/**\n * Sets a property for the local participant.\n */\nJitsiConference.prototype.setLocalParticipantProperty = function(name, value) {\n    this.sendCommand(`jitsi_participant_${name}`, { value });\n};\n\n/**\n *  Removes a property for the local participant and sends the updated presence.\n */\nJitsiConference.prototype.removeLocalParticipantProperty = function(name) {\n    this.removeCommand(`jitsi_participant_${name}`);\n    this.room.sendPresence();\n};\n\n/**\n * Gets a local participant property.\n *\n * @return value of the local participant property if the tagName exists in the\n * list of properties, otherwise returns undefined.\n */\nJitsiConference.prototype.getLocalParticipantProperty = function(name) {\n    const property = this.room.presMap.nodes.find(prop =>\n        prop.tagName === `jitsi_participant_${name}`\n    );\n\n    return property ? property.value : undefined;\n};\n\n/**\n * Sends the given feedback through CallStats if enabled.\n *\n * @param overallFeedback an integer between 1 and 5 indicating the\n * user feedback\n * @param detailedFeedback detailed feedback from the user. Not yet used\n * @returns {Promise} Resolves if feedback is submitted successfully.\n */\nJitsiConference.prototype.sendFeedback = function(overallFeedback, detailedFeedback) {\n    return this.statistics.sendFeedback(overallFeedback, detailedFeedback);\n};\n\n/**\n * Returns true if the callstats integration is enabled, otherwise returns\n * false.\n *\n * @returns true if the callstats integration is enabled, otherwise returns\n * false.\n */\nJitsiConference.prototype.isCallstatsEnabled = function() {\n    return this.statistics.isCallstatsEnabled();\n};\n\n/**\n * Finds the SSRC of a given track\n *\n * @param track\n * @returns {number|undefined} the SSRC of the specificed track, otherwise undefined.\n */\nJitsiConference.prototype.getSsrcByTrack = function(track) {\n    return track.isLocal() ? this.getActivePeerConnection()?.getLocalSSRC(track) : track.getSSRC();\n};\n\n/**\n * Handles track attached to container (Calls associateStreamWithVideoTag method\n * from statistics module)\n * @param {JitsiLocalTrack|JitsiRemoteTrack} track the track\n * @param container the container\n */\nJitsiConference.prototype._onTrackAttach = function(track, container) {\n    const isLocal = track.isLocal();\n    let ssrc = null;\n    const isP2P = track.isP2P;\n    const remoteUserId = isP2P ? track.getParticipantId() : 'jitsi';\n    const peerConnection\n        = isP2P\n            ? this.p2pJingleSession && this.p2pJingleSession.peerconnection\n            : this.jvbJingleSession && this.jvbJingleSession.peerconnection;\n\n    if (isLocal) {\n        // Local tracks have SSRC stored on per peer connection basis.\n        if (peerConnection) {\n            ssrc = peerConnection.getLocalSSRC(track);\n        }\n    } else {\n        ssrc = track.getSSRC();\n    }\n    if (!container.id || !ssrc || !peerConnection) {\n        return;\n    }\n\n    this.statistics.associateStreamWithVideoTag(\n        peerConnection,\n        ssrc,\n        isLocal,\n        remoteUserId,\n        track.getUsageLabel(),\n        container.id);\n};\n\n/**\n * Logs an \"application log\" message.\n * @param message {string} The message to log. Note that while this can be a\n * generic string, the convention used by lib-jitsi-meet and jitsi-meet is to\n * log valid JSON strings, with an \"id\" field used for distinguishing between\n * message types. E.g.: {id: \"recorder_status\", status: \"off\"}\n */\nJitsiConference.prototype.sendApplicationLog = function(message) {\n    Statistics.sendLog(message);\n};\n\n/**\n * Checks if the user identified by given <tt>mucJid</tt> is the conference focus.\n * @param mucJid the full MUC address of the user to be checked.\n * @returns {boolean|null} <tt>true</tt> if MUC user is the conference focus,\n * <tt>false</tt> when is not. <tt>null</tt> if we're not in the MUC anymore and\n * are unable to figure out the status or if given <tt>mucJid</tt> is invalid.\n */\nJitsiConference.prototype.isFocus = function(mucJid) {\n    return this.room ? this.room.isFocus(mucJid) : null;\n};\n\n/**\n * Fires CONFERENCE_FAILED event with INCOMPATIBLE_SERVER_VERSIONS parameter\n */\nJitsiConference.prototype._fireIncompatibleVersionsEvent = function() {\n    this.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.INCOMPATIBLE_SERVER_VERSIONS);\n};\n\n/**\n * Sends a message via the data channel.\n * @param to {string} the id of the endpoint that should receive the message.\n * If \"\" the message will be sent to all participants.\n * @param payload {object} the payload of the message.\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.sendEndpointMessage = function(to, payload) {\n    this.rtc.sendChannelMessage(to, payload);\n};\n\n/**\n * Sends local stats via the bridge channel which then forwards to other endpoints selectively.\n * @param {Object} payload The payload of the message.\n * @throws NetworkError/InvalidStateError/Error if the operation fails or if there is no data channel created.\n */\nJitsiConference.prototype.sendEndpointStatsMessage = function(payload) {\n    this.rtc.sendEndpointStatsMessage(payload);\n};\n\n/**\n * Sends a broadcast message via the data channel.\n * @param payload {object} the payload of the message.\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.broadcastEndpointMessage = function(payload) {\n    this.sendEndpointMessage('', payload);\n};\n\n/**\n * Sends a message to a given endpoint (if 'to' is a non-empty string), or\n * broadcasts it to all endpoints in the conference.\n * @param {string} to The ID of the endpoint/participant which is to receive\n * the message, or '' to broadcast the message to all endpoints in the\n * conference.\n * @param {string|object} message the message to send. If this is of type\n * 'string' it will be sent as a chat message. If it is of type 'object', it\n * will be encapsulated in a format recognized by jitsi-meet and converted to\n * JSON before being sent.\n * @param {boolean} sendThroughVideobridge Whether to send the message through\n * jitsi-videobridge (via the COLIBRI data channel or web socket), or through\n * the XMPP MUC. Currently only objects can be sent through jitsi-videobridge.\n */\nJitsiConference.prototype.sendMessage = function(message, to = '', sendThroughVideobridge = false) {\n    const messageType = typeof message;\n\n    // Through videobridge we support only objects. Through XMPP we support\n    // objects (encapsulated in a specific JSON format) and strings (i.e.\n    // regular chat messages).\n    if (messageType !== 'object'\n            && (sendThroughVideobridge || messageType !== 'string')) {\n        logger.error(`Can not send a message of type ${messageType}`);\n\n        return;\n    }\n\n    if (sendThroughVideobridge) {\n        this.sendEndpointMessage(to, message);\n    } else {\n        let messageToSend = message;\n\n        // Name of packet extension of message stanza to send the required\n        // message in.\n        let elementName = 'body';\n\n        if (messageType === 'object') {\n            elementName = 'json-message';\n\n            // Mark as valid JSON message if not already\n            if (!messageToSend.hasOwnProperty(JITSI_MEET_MUC_TYPE)) {\n                messageToSend[JITSI_MEET_MUC_TYPE] = '';\n            }\n\n            try {\n                messageToSend = JSON.stringify(messageToSend);\n            } catch (e) {\n                logger.error('Can not send a message, stringify failed: ', e);\n\n                return;\n            }\n        }\n\n        if (to) {\n            this.sendPrivateTextMessage(to, messageToSend, elementName);\n        } else {\n            // Broadcast\n            this.sendTextMessage(messageToSend, elementName);\n        }\n    }\n\n};\n\nJitsiConference.prototype.isConnectionInterrupted = function() {\n    return this.isP2PActive()\n        ? this.isP2PConnectionInterrupted : this.isJvbConnectionInterrupted;\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_RESTARTED} event. This happens when the bridge goes down\n * and Jicofo moves conferences away to a different bridge.\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onConferenceRestarted = function(session) {\n    if (!session.isP2P && this.options.config.enableForcedReload) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED, JitsiConferenceErrors.CONFERENCE_RESTARTED);\n    }\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_INTERRUPTED}\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onIceConnectionInterrupted = function(session) {\n    if (session.isP2P) {\n        this.isP2PConnectionInterrupted = true;\n    } else {\n        this.isJvbConnectionInterrupted = true;\n    }\n    if (session.isP2P === this.isP2PActive()) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_INTERRUPTED);\n    }\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_ICE_FAILED}\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onIceConnectionFailed = function(session) {\n    // We do nothing for the JVB connection, because it's up to the Jicofo to\n    // eventually come up with the new offer (at least for the time being).\n    if (session.isP2P) {\n        // Add p2pFailed property to analytics to distinguish, between \"good\"\n        // and \"bad\" connection\n        Statistics.analytics.addPermanentProperties({ p2pFailed: true });\n\n        if (this.p2pJingleSession) {\n            Statistics.sendAnalyticsAndLog(\n                createP2PEvent(\n                    ACTION_P2P_FAILED,\n                    {\n                        initiator: this.p2pJingleSession.isInitiator\n                    }));\n\n        }\n        this._stopP2PSession({\n            reason: 'connectivity-error',\n            reasonDescription: 'ICE FAILED'\n        });\n    } else if (session && this.jvbJingleSession === session) {\n        this._delayedIceFailed = new IceFailedHandling(this);\n        this._delayedIceFailed.start(session);\n    }\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_RESTORED}\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onIceConnectionRestored = function(session) {\n    if (session.isP2P) {\n        this.isP2PConnectionInterrupted = false;\n    } else {\n        this.isJvbConnectionInterrupted = false;\n        this._delayedIceFailed && this._delayedIceFailed.cancel();\n    }\n\n    if (session.isP2P === this.isP2PActive()) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_RESTORED);\n    }\n};\n\n/**\n * Accept incoming P2P Jingle call.\n * @param {JingleSessionPC} jingleSession the session instance\n * @param {jQuery} jingleOffer a jQuery selector pointing to 'jingle' IQ element\n * @private\n */\nJitsiConference.prototype._acceptP2PIncomingCall = function(jingleSession, jingleOffer) {\n    this.isP2PConnectionInterrupted = false;\n\n    // Accept the offer\n    this.p2pJingleSession = jingleSession;\n    this._sendConferenceJoinAnalyticsEvent();\n\n    this.p2pJingleSession.initialize(\n        this.room,\n        this.rtc,\n        this._signalingLayer,\n        {\n            ...this.options.config,\n            enableInsertableStreams: this.isE2EEEnabled()\n        });\n\n    logger.info('Starting CallStats for P2P connection...');\n\n    let remoteID = Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid);\n\n    const participant = this.participants[remoteID];\n\n    if (participant) {\n        remoteID = participant.getStatsID() || remoteID;\n    }\n\n    this.statistics.startCallStats(\n        this.p2pJingleSession.peerconnection,\n        remoteID);\n\n    const localTracks = this.getLocalTracks();\n\n    this.p2pJingleSession.acceptOffer(\n        jingleOffer,\n        () => {\n            logger.debug('Got RESULT for P2P \"session-accept\"');\n\n            this.eventEmitter.emit(\n                JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n                jingleSession);\n        },\n        error => {\n            logger.error(\n                'Failed to accept incoming P2P Jingle session', error);\n        },\n        localTracks);\n};\n\n/**\n * Adds remote tracks to the conference associated with the JVB session.\n * @private\n */\nJitsiConference.prototype._addRemoteJVBTracks = function() {\n    this._addRemoteTracks('JVB', this.jvbJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Adds remote tracks to the conference associated with the P2P session.\n * @private\n */\nJitsiConference.prototype._addRemoteP2PTracks = function() {\n    this._addRemoteTracks('P2P', this.p2pJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Generates fake \"remote track added\" events for given Jingle session.\n * @param {string} logName the session's nickname which will appear in log\n * messages.\n * @param {Array<JitsiRemoteTrack>} remoteTracks the tracks that will be added\n * @private\n */\nJitsiConference.prototype._addRemoteTracks = function(logName, remoteTracks) {\n    for (const track of remoteTracks) {\n        logger.info(`Adding remote ${logName} track: ${track}`);\n        this.onRemoteTrackAdded(track);\n    }\n};\n\n/**\n * Called when {@link XMPPEvents.CONNECTION_ESTABLISHED} event is\n * triggered for a {@link JingleSessionPC}. Switches the conference to use\n * the P2P connection if the event comes from the P2P session.\n * @param {JingleSessionPC} jingleSession the session instance.\n * @private\n */\nJitsiConference.prototype._onIceConnectionEstablished = function(jingleSession) {\n    if (this.p2pJingleSession !== null) {\n        // store the establishment time of the p2p session as a field of the\n        // JitsiConference because the p2pJingleSession might get disposed (thus\n        // the value is lost).\n        this.p2pEstablishmentDuration\n            = this.p2pJingleSession.establishmentDuration;\n    }\n\n    if (this.jvbJingleSession !== null) {\n        this.jvbEstablishmentDuration\n            = this.jvbJingleSession.establishmentDuration;\n    }\n\n    let done = false;\n    const forceJVB121Ratio = this.options.config.forceJVB121Ratio;\n\n    // We don't care about the JVB case, there's nothing to be done\n    if (!jingleSession.isP2P) {\n        done = true;\n    } else if (this.p2pJingleSession !== jingleSession) {\n        logger.error('CONNECTION_ESTABLISHED - wrong P2P session instance ?!');\n\n        done = true;\n    } else if (!jingleSession.isInitiator\n        && typeof forceJVB121Ratio === 'number'\n        && Math.random() < forceJVB121Ratio) {\n        logger.info(`Forcing JVB 121 mode (ratio=${forceJVB121Ratio})...`);\n        Statistics.analytics.addPermanentProperties({ forceJvb121: true });\n        this._stopP2PSession({\n            reason: 'decline',\n            reasonDescription: 'force JVB121'\n        });\n\n        done = true;\n    }\n\n    if (!isNaN(this.p2pEstablishmentDuration)\n        && !isNaN(this.jvbEstablishmentDuration)) {\n        const establishmentDurationDiff\n            = this.p2pEstablishmentDuration - this.jvbEstablishmentDuration;\n\n        Statistics.sendAnalytics(\n            ICE_ESTABLISHMENT_DURATION_DIFF,\n            { value: establishmentDurationDiff });\n    }\n\n    if (jingleSession.isP2P === this.isP2PActive()) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_ESTABLISHED);\n    }\n\n    if (done) {\n\n        return;\n    }\n\n    // Update P2P status and emit events\n    this._setP2PStatus(true);\n\n    // Remove remote tracks\n    if (this.jvbJingleSession) {\n        this._removeRemoteJVBTracks();\n    } else {\n        logger.info('Not removing remote JVB tracks - no session yet');\n    }\n\n    this._addRemoteP2PTracks();\n\n    // Stop media transfer over the JVB connection\n    if (this.jvbJingleSession) {\n        this._suspendMediaTransferForJvbConnection();\n    }\n\n    logger.info('Starting remote stats with p2p connection');\n    this.statistics.startRemoteStats(this.p2pJingleSession.peerconnection);\n\n    Statistics.sendAnalyticsAndLog(\n        createP2PEvent(\n            ACTION_P2P_ESTABLISHED,\n            {\n                initiator: this.p2pJingleSession.isInitiator\n            }));\n\n};\n\n/**\n * Called when the chat room reads a new list of properties from jicofo's\n * presence. The properties may have changed, but they don't have to.\n *\n * @param {Object} properties - The properties keyed by the property name\n * ('key').\n * @private\n */\nJitsiConference.prototype._updateProperties = function(properties = {}) {\n    const changed = !isEqual(properties, this.properties);\n\n    this.properties = properties;\n    if (changed) {\n        this.eventEmitter.emit(JitsiConferenceEvents.PROPERTIES_CHANGED, this.properties);\n\n        const audioLimitReached = this.properties['audio-limit-reached'] === 'true';\n        const videoLimitReached = this.properties['video-limit-reached'] === 'true';\n\n        if (this._audioSenderLimitReached !== audioLimitReached) {\n            this._audioSenderLimitReached = audioLimitReached;\n            this.eventEmitter.emit(JitsiConferenceEvents.AUDIO_UNMUTE_PERMISSIONS_CHANGED, audioLimitReached);\n            logger.info(`Audio unmute permissions set by Jicofo to ${audioLimitReached}`);\n        }\n\n        if (this._videoSenderLimitReached !== videoLimitReached) {\n            this._videoSenderLimitReached = videoLimitReached;\n            this.eventEmitter.emit(JitsiConferenceEvents.VIDEO_UNMUTE_PERMISSIONS_CHANGED, videoLimitReached);\n            logger.info(`Video unmute permissions set by Jicofo to ${videoLimitReached}`);\n        }\n\n        // Some of the properties need to be added to analytics events.\n        const analyticsKeys = [\n\n            // The number of jitsi-videobridge instances currently used for the\n            // conference.\n            'bridge-count',\n\n            // The conference creation time (set by jicofo).\n            'created-ms'\n        ];\n\n        analyticsKeys.forEach(key => {\n            if (properties[key] !== undefined) {\n                Statistics.analytics.addPermanentProperties({\n                    [key.replace('-', '_')]: properties[key]\n                });\n            }\n        });\n    }\n};\n\n/**\n * Gets a conference property with a given key.\n *\n * @param {string} key - The key.\n * @returns {*} The value\n */\nJitsiConference.prototype.getProperty = function(key) {\n    return this.properties[key];\n};\n\n/**\n * Clears the deferred start P2P task if it has been scheduled.\n * @private\n */\nJitsiConference.prototype._maybeClearDeferredStartP2P = function() {\n    if (this.deferredStartP2PTask) {\n        logger.info('Cleared deferred start P2P task');\n        clearTimeout(this.deferredStartP2PTask);\n        this.deferredStartP2PTask = null;\n    }\n};\n\n/**\n * Removes from the conference remote tracks associated with the JVB\n * connection.\n * @private\n */\nJitsiConference.prototype._removeRemoteJVBTracks = function() {\n    this._removeRemoteTracks(\n        'JVB', this.jvbJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Removes from the conference remote tracks associated with the P2P\n * connection.\n * @private\n */\nJitsiConference.prototype._removeRemoteP2PTracks = function() {\n    this._removeRemoteTracks(\n        'P2P', this.p2pJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Generates fake \"remote track removed\" events for given Jingle session.\n * @param {string} sessionNickname the session's nickname which will appear in\n * log messages.\n * @param {Array<JitsiRemoteTrack>} remoteTracks the tracks that will be removed\n * @private\n */\nJitsiConference.prototype._removeRemoteTracks = function(sessionNickname, remoteTracks) {\n    for (const track of remoteTracks) {\n        logger.info(`Removing remote ${sessionNickname} track: ${track}`);\n        this.onRemoteTrackRemoved(track);\n    }\n};\n\n/**\n * Resumes media transfer over the JVB connection.\n * @private\n */\nJitsiConference.prototype._resumeMediaTransferForJvbConnection = function() {\n    logger.info('Resuming media transfer over the JVB connection...');\n    this.jvbJingleSession.setMediaTransferActive(true, true).then(\n        () => {\n            logger.info('Resumed media transfer over the JVB connection!');\n        },\n        error => {\n            logger.error(\n                'Failed to resume media transfer over the JVB connection:',\n                error);\n        });\n};\n\n/**\n * Sets new P2P status and updates some events/states hijacked from\n * the <tt>JitsiConference</tt>.\n * @param {boolean} newStatus the new P2P status value, <tt>true</tt> means that\n * P2P is now in use, <tt>false</tt> means that the JVB connection is now in use\n * @private\n */\nJitsiConference.prototype._setP2PStatus = function(newStatus) {\n    if (this.p2p === newStatus) {\n        logger.debug(`Called _setP2PStatus with the same status: ${newStatus}`);\n\n        return;\n    }\n    this.p2p = newStatus;\n    if (newStatus) {\n        logger.info('Peer to peer connection established!');\n\n        // When we end up in a valid P2P session need to reset the properties\n        // in case they have persisted, after session with another peer.\n        Statistics.analytics.addPermanentProperties({\n            p2pFailed: false,\n            forceJvb121: false\n        });\n\n        // Sync up video transfer active in case p2pJingleSession not existed\n        // when the lastN value was being adjusted.\n        const isVideoActive = this.getLastN() !== 0;\n\n        this.p2pJingleSession\n            .setMediaTransferActive(true, isVideoActive)\n            .catch(error => {\n                logger.error(\n                    'Failed to sync up P2P video transfer status'\n                        + `(${isVideoActive})`, error);\n            });\n    } else {\n        logger.info('Peer to peer connection closed!');\n    }\n\n    // Put the JVB connection on hold/resume\n    if (this.jvbJingleSession) {\n        this.statistics.sendConnectionResumeOrHoldEvent(\n            this.jvbJingleSession.peerconnection, !newStatus);\n    }\n\n    // Clear dtmfManager, so that it can be recreated with new connection\n    this.dtmfManager = null;\n\n    // Update P2P status\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.P2P_STATUS,\n        this,\n        this.p2p);\n    this.eventEmitter.emit(JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED, this.getActiveMediaSession());\n\n    // Refresh connection interrupted/restored\n    this.eventEmitter.emit(\n        this.isConnectionInterrupted()\n            ? JitsiConferenceEvents.CONNECTION_INTERRUPTED\n            : JitsiConferenceEvents.CONNECTION_RESTORED);\n};\n\n/**\n * Starts new P2P session.\n * @param {string} remoteJid the JID of the remote participant\n * @private\n */\nJitsiConference.prototype._startP2PSession = function(remoteJid) {\n    this._maybeClearDeferredStartP2P();\n    if (this.p2pJingleSession) {\n        logger.error('P2P session already started!');\n\n        return;\n    }\n\n    this.isP2PConnectionInterrupted = false;\n    this.p2pJingleSession\n        = this.xmpp.connection.jingle.newP2PJingleSession(\n            this.room.myroomjid,\n            remoteJid);\n    logger.info(\n        'Created new P2P JingleSession', this.room.myroomjid, remoteJid);\n    this._sendConferenceJoinAnalyticsEvent();\n\n    this.p2pJingleSession.initialize(\n        this.room,\n        this.rtc,\n        this._signalingLayer,\n        {\n            ...this.options.config,\n            enableInsertableStreams: this.isE2EEEnabled()\n        });\n\n    logger.info('Starting CallStats for P2P connection...');\n\n    let remoteID = Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid);\n\n    const participant = this.participants[remoteID];\n\n    if (participant) {\n        remoteID = participant.getStatsID() || remoteID;\n    }\n\n    this.statistics.startCallStats(\n        this.p2pJingleSession.peerconnection,\n        remoteID);\n\n    const localTracks = this.getLocalTracks();\n\n    this.p2pJingleSession.invite(localTracks);\n};\n\n/**\n * Suspends media transfer over the JVB connection.\n * @private\n */\nJitsiConference.prototype._suspendMediaTransferForJvbConnection = function() {\n    logger.info('Suspending media transfer over the JVB connection...');\n    this.jvbJingleSession.setMediaTransferActive(false, false).then(\n        () => {\n            logger.info('Suspended media transfer over the JVB connection !');\n        },\n        error => {\n            logger.error(\n                'Failed to suspend media transfer over the JVB connection:',\n                error);\n        });\n};\n\n/**\n * Method when called will decide whether it's the time to start or stop\n * the P2P session.\n * @param {boolean} userLeftEvent if <tt>true</tt> it means that the call\n * originates from the user left event.\n * @private\n */\nJitsiConference.prototype._maybeStartOrStopP2P = function(userLeftEvent) {\n    if (!this.isP2PEnabled()\n            || this.isP2PTestModeEnabled()\n            || browser.isFirefox()\n            || browser.isWebKitBased()\n            || this.isE2EEEnabled()) {\n        logger.info('Auto P2P disabled');\n\n        return;\n    }\n    const peers = this.getParticipants();\n    const peerCount = peers.length;\n\n    // FIXME 1 peer and it must *support* P2P switching\n    const shouldBeInP2P = this._shouldBeInP2PMode();\n\n    // Clear deferred \"start P2P\" task\n    if (!shouldBeInP2P && this.deferredStartP2PTask) {\n        this._maybeClearDeferredStartP2P();\n    }\n\n    // Start peer to peer session\n    if (!this.p2pJingleSession && shouldBeInP2P) {\n        const peer = peerCount && peers[0];\n\n\n        const myId = this.myUserId();\n        const peersId = peer.getId();\n\n        if (myId > peersId) {\n            logger.debug(\n                'I\\'m the bigger peersId - '\n                + 'the other peer should start P2P', myId, peersId);\n\n            return;\n        } else if (myId === peersId) {\n            logger.error('The same IDs ? ', myId, peersId);\n\n            return;\n        }\n\n        const jid = peer.getJid();\n\n        if (userLeftEvent) {\n            if (this.deferredStartP2PTask) {\n                logger.error('Deferred start P2P task\\'s been set already!');\n\n                return;\n            }\n            logger.info(\n                `Will start P2P with: ${jid} after ${\n                    this.backToP2PDelay} seconds...`);\n            this.deferredStartP2PTask = setTimeout(\n                this._startP2PSession.bind(this, jid),\n                this.backToP2PDelay * 1000);\n        } else {\n            logger.info(`Will start P2P with: ${jid}`);\n            this._startP2PSession(jid);\n        }\n    } else if (this.p2pJingleSession && !shouldBeInP2P) {\n        logger.info(`Will stop P2P with: ${this.p2pJingleSession.remoteJid}`);\n\n        // Log that there will be a switch back to the JVB connection\n        if (this.p2pJingleSession.isInitiator && peerCount > 1) {\n            Statistics.sendAnalyticsAndLog(\n                createP2PEvent(ACTION_P2P_SWITCH_TO_JVB));\n        }\n        this._stopP2PSession();\n    }\n};\n\n/**\n * Tells whether or not this conference should be currently in the P2P mode.\n *\n * @private\n * @returns {boolean}\n */\nJitsiConference.prototype._shouldBeInP2PMode = function() {\n    const peers = this.getParticipants();\n    const peerCount = peers.length;\n    const hasBotPeer = peers.find(p => p.getBotType() === 'poltergeist' || p.hasFeature(FEATURE_JIGASI)) !== undefined;\n    const shouldBeInP2P = peerCount === 1 && !hasBotPeer;\n\n    logger.debug(`P2P? peerCount: ${peerCount}, hasBotPeer: ${hasBotPeer} => ${shouldBeInP2P}`);\n\n    return shouldBeInP2P;\n};\n\n/**\n * Stops the current P2P session.\n * @param {Object} options - Options for stopping P2P.\n * @param {string} options.reason - One of the Jingle \"reason\" element\n * names as defined by https://xmpp.org/extensions/xep-0166.html#def-reason\n * @param {string} options.reasonDescription - Text\n * description that will be included in the session terminate message\n * @param {boolean} requestRestart - Whether this is due to a session restart, in which case\n * media will not be resumed on the JVB.\n * @private\n */\nJitsiConference.prototype._stopP2PSession = function(options = {}) {\n    const {\n        reason = 'success',\n        reasonDescription = 'Turning off P2P session',\n        requestRestart = false\n    } = options;\n\n    if (!this.p2pJingleSession) {\n        logger.error('No P2P session to be stopped!');\n\n        return;\n    }\n\n    const wasP2PEstablished = this.isP2PActive();\n\n    // Swap remote tracks, but only if the P2P has been fully established\n    if (wasP2PEstablished) {\n        if (this.jvbJingleSession && !requestRestart) {\n            this._resumeMediaTransferForJvbConnection();\n        }\n\n        // Remove remote P2P tracks\n        this._removeRemoteP2PTracks();\n    }\n\n    // Stop P2P stats\n    logger.info('Stopping remote stats for P2P connection');\n    this.statistics.stopRemoteStats(this.p2pJingleSession.peerconnection);\n    logger.info('Stopping CallStats for P2P connection');\n    this.statistics.stopCallStats(this.p2pJingleSession.peerconnection);\n\n    this.p2pJingleSession.terminate(\n        () => {\n            logger.info('P2P session terminate RESULT');\n        },\n        error => {\n            // Because both initiator and responder are simultaneously\n            // terminating their JingleSessions in case of the 'to JVB switch'\n            // when 3rd participant joins, both will dispose their sessions and\n            // reply with 'item-not-found' (see strophe.jingle.js). We don't\n            // want to log this as an error since it's expected behaviour.\n            //\n            // We want them both to terminate, because in case of initiator's\n            // crash the responder would stay in P2P mode until ICE fails which\n            // could take up to 20 seconds.\n            //\n            // NOTE: whilst this is an error callback,  'success' as a reason is\n            // considered as graceful session terminate\n            // where both initiator and responder terminate their sessions\n            // simultaneously.\n            if (reason !== 'success') {\n                logger.error('An error occurred while trying to terminate P2P Jingle session', error);\n            }\n        }, {\n            reason,\n            reasonDescription,\n            sendSessionTerminate: this.room\n                && this.getParticipantById(\n                    Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid))\n        });\n\n    this.p2pJingleSession = null;\n\n    // Update P2P status and other affected events/states\n    this._setP2PStatus(false);\n\n    if (wasP2PEstablished) {\n        // Add back remote JVB tracks\n        if (this.jvbJingleSession && !requestRestart) {\n            this._addRemoteJVBTracks();\n        } else {\n            logger.info('Not adding remote JVB tracks - no session yet');\n        }\n    }\n};\n\n/**\n * Updates room presence if needed and send the packet in case of a modification.\n * @param {JingleSessionPC} jingleSession the session firing the event, contains the peer connection which\n * tracks we will check.\n * @param {Object|null} ctx a context object we can distinguish multiple calls of the same pass of updating tracks.\n */\nJitsiConference.prototype._updateRoomPresence = function(jingleSession, ctx) {\n    if (!jingleSession) {\n        return;\n    }\n\n    // skips sending presence twice for the same pass of updating ssrcs\n    if (ctx) {\n        if (ctx.skip) {\n            return;\n        }\n        ctx.skip = true;\n    }\n\n    let presenceChanged = false;\n    let muteStatusChanged, videoTypeChanged;\n    const localTracks = this.getLocalTracks();\n\n    // Set presence for all the available local tracks.\n    for (const track of localTracks) {\n        muteStatusChanged = this._setTrackMuteStatus(track.getType(), track, track.isMuted());\n        if (track.getType() === MediaType.VIDEO) {\n            videoTypeChanged = this._setNewVideoType(track);\n        }\n        presenceChanged = presenceChanged || muteStatusChanged || videoTypeChanged;\n    }\n\n    // Set the presence in the legacy format if there are no local tracks and multi stream support is not enabled.\n    if (!localTracks.length && !FeatureFlags.isMultiStreamSupportEnabled()) {\n        const audioMuteStatusChanged = this._setTrackMuteStatus(MediaType.AUDIO, undefined, true);\n        const videoMuteStatusChanged = this._setTrackMuteStatus(MediaType.VIDEO, undefined, true);\n\n        videoTypeChanged = this._setNewVideoType();\n        presenceChanged = audioMuteStatusChanged || videoMuteStatusChanged || videoTypeChanged;\n    }\n\n    presenceChanged && this.room.sendPresence();\n};\n\n/**\n * Checks whether or not the conference is currently in the peer to peer mode.\n * Being in peer to peer mode means that the direct connection has been\n * established and the P2P connection is being used for media transmission.\n * @return {boolean} <tt>true</tt> if in P2P mode or <tt>false</tt> otherwise.\n */\nJitsiConference.prototype.isP2PActive = function() {\n    return this.p2p;\n};\n\n/**\n * Returns the current ICE state of the P2P connection.\n * NOTE: method is used by the jitsi-meet-torture tests.\n * @return {string|null} an ICE state or <tt>null</tt> if there's currently\n * no P2P connection.\n */\nJitsiConference.prototype.getP2PConnectionState = function() {\n    if (this.isP2PActive()) {\n        return this.p2pJingleSession.peerconnection.getConnectionState();\n    }\n\n    return null;\n};\n\n/**\n * Configures the peerconnection so that a given framre rate can be achieved for desktop share.\n *\n * @param {number} maxFps The capture framerate to be used for desktop tracks.\n * @returns {boolean} true if the operation is successful, false otherwise.\n */\nJitsiConference.prototype.setDesktopSharingFrameRate = function(maxFps) {\n    if (typeof maxFps !== 'number' || isNaN(maxFps)) {\n        logger.error(`Invalid value ${maxFps} specified for desktop capture frame rate`);\n\n        return false;\n    }\n\n    this._desktopSharingFrameRate = maxFps;\n\n    // Enable or disable simulcast for plan-b screensharing based on the capture fps.\n    this.jvbJingleSession && this.jvbJingleSession.peerconnection.setDesktopSharingFrameRate(maxFps);\n\n    // Set the capture rate for desktop sharing.\n    this.rtc.setDesktopSharingFrameRate(maxFps);\n\n    return true;\n};\n\n/**\n * Manually starts new P2P session (should be used only in the tests).\n */\nJitsiConference.prototype.startP2PSession = function() {\n    const peers = this.getParticipants();\n\n    // Start peer to peer session\n    if (peers.length === 1) {\n        const peerJid = peers[0].getJid();\n\n        this._startP2PSession(peerJid);\n    } else {\n        throw new Error(\n            'There must be exactly 1 participant to start the P2P session !');\n    }\n};\n\n/**\n * Manually stops the current P2P session (should be used only in the tests).\n */\nJitsiConference.prototype.stopP2PSession = function(options) {\n    this._stopP2PSession(options);\n};\n\n/**\n * Get a summary of how long current participants have been the dominant speaker\n * @returns {object}\n */\nJitsiConference.prototype.getSpeakerStats = function() {\n    return this.speakerStatsCollector.getStats();\n};\n\n/**\n * Sends a facial expression with its duration to the xmpp server.\n * @param {Object} payload\n */\nJitsiConference.prototype.sendFacialExpression = function(payload) {\n    this.xmpp.sendFacialExpressionEvent(this.room.roomjid, payload);\n};\n\n/**\n * Sets the constraints for the video that is requested from the bridge.\n *\n * @param {Object} videoConstraints The constraints which are specified in the\n * following format. The message updates the fields that are present and leaves the\n * rest unchanged on the bridge. Therefore, any field that is not applicable anymore\n * should be cleared by passing an empty object or list (whatever is applicable).\n * {\n *      'lastN': 20,\n *      'selectedEndpoints': ['A', 'B', 'C'],\n *      'onStageEndpoints': ['A'],\n *      'defaultConstraints': { 'maxHeight': 180 },\n *      'constraints': {\n *          'A': { 'maxHeight': 720 }\n *      }\n * }\n */\nJitsiConference.prototype.setReceiverConstraints = function(videoConstraints) {\n    this.receiveVideoController.setReceiverConstraints(videoConstraints);\n};\n\n/**\n * Sets the maximum video size the local participant should receive from remote\n * participants.\n *\n * @param {number} maxFrameHeight - the maximum frame height, in pixels,\n * this receiver is willing to receive.\n * @returns {void}\n */\nJitsiConference.prototype.setReceiverVideoConstraint = function(maxFrameHeight) {\n    this.receiveVideoController.setPreferredReceiveMaxFrameHeight(maxFrameHeight);\n};\n\n/**\n * Sets the maximum video size the local participant should send to remote\n * participants.\n * @param {number} maxFrameHeight - The user preferred max frame height.\n * @returns {Promise} promise that will be resolved when the operation is\n * successful and rejected otherwise.\n */\nJitsiConference.prototype.setSenderVideoConstraint = function(maxFrameHeight) {\n    return this.sendVideoController.setPreferredSendMaxFrameHeight(maxFrameHeight);\n};\n\n/**\n * Creates a video SIP GW session and returns it if service is enabled. Before\n * creating a session one need to check whether video SIP GW service is\n * available in the system {@link JitsiConference.isVideoSIPGWAvailable}. Even\n * if there are available nodes to serve this request, after creating the\n * session those nodes can be taken and the request about using the\n * created session can fail.\n *\n * @param {string} sipAddress - The sip address to be used.\n * @param {string} displayName - The display name to be used for this session.\n * @returns {JitsiVideoSIPGWSession|Error} Returns null if conference is not\n * initialised and there is no room.\n */\nJitsiConference.prototype.createVideoSIPGWSession = function(sipAddress, displayName) {\n    if (!this.room) {\n        return new Error(VideoSIPGWConstants.ERROR_NO_CONNECTION);\n    }\n\n    return this.videoSIPGWHandler\n        .createVideoSIPGWSession(sipAddress, displayName);\n};\n\n/**\n * Sends a conference.join analytics event.\n *\n * @returns {void}\n */\nJitsiConference.prototype._sendConferenceJoinAnalyticsEvent = function() {\n    const meetingId = this.getMeetingUniqueId();\n\n    if (this._conferenceJoinAnalyticsEventSent || !meetingId || this.getActivePeerConnection() === null) {\n        return;\n    }\n\n    Statistics.sendAnalytics(createConferenceEvent('joined', {\n        meetingId,\n        participantId: `${meetingId}.${this._statsCurrentId}`\n    }));\n    this._conferenceJoinAnalyticsEventSent = Date.now();\n};\n\n/**\n * Sends conference.left analytics event.\n * @private\n */\nJitsiConference.prototype._sendConferenceLeftAnalyticsEvent = function() {\n    const meetingId = this.getMeetingUniqueId();\n\n    if (!meetingId || !this._conferenceJoinAnalyticsEventSent) {\n\n        return;\n    }\n\n    Statistics.sendAnalytics(createConferenceEvent('left', {\n        meetingId,\n        participantId: `${meetingId}.${this._statsCurrentId}`,\n        stats: {\n            duration: Math.floor((Date.now() - this._conferenceJoinAnalyticsEventSent) / 1000),\n            perf: this.getPerformanceStats()\n        }\n    }));\n};\n\n/**\n * Restarts all active media sessions.\n *\n * @returns {void}\n */\nJitsiConference.prototype._restartMediaSessions = function() {\n    if (this.p2pJingleSession) {\n        this._stopP2PSession({\n            reasonDescription: 'restart',\n            requestRestart: true\n        });\n    }\n\n    if (this.jvbJingleSession) {\n        this.jvbJingleSession.terminate(\n            null /* success callback => we don't care */,\n            error => {\n                logger.warn('An error occurred while trying to terminate the JVB session', error);\n            }, {\n                reason: 'success',\n                reasonDescription: 'restart required',\n                requestRestart: true,\n                sendSessionTerminate: true\n            });\n    }\n\n    this._maybeStartOrStopP2P(false);\n};\n\n/**\n * Returns whether End-To-End encryption is enabled.\n *\n * @returns {boolean}\n */\nJitsiConference.prototype.isE2EEEnabled = function() {\n    return Boolean(this._e2eEncryption && this._e2eEncryption.isEnabled());\n};\n\n/**\n * Returns whether End-To-End encryption is supported. Note that not all participants\n * in the conference may support it.\n *\n * @returns {boolean}\n */\nJitsiConference.prototype.isE2EESupported = function() {\n    return E2EEncryption.isSupported(this.options.config);\n};\n\n/**\n * Enables / disables End-to-End encryption.\n *\n * @param {boolean} enabled whether to enable E2EE or not.\n * @returns {void}\n */\nJitsiConference.prototype.toggleE2EE = function(enabled) {\n    if (!this.isE2EESupported()) {\n        logger.warn('Cannot enable / disable E2EE: platform is not supported.');\n\n        return;\n    }\n\n    this._e2eEncryption.setEnabled(enabled);\n};\n\n/**\n * Sets the key and index for End-to-End encryption.\n *\n * @param {CryptoKey} [keyInfo.encryptionKey] - encryption key.\n * @param {Number} [keyInfo.index] - the index of the encryption key.\n * @returns {void}\n */\nJitsiConference.prototype.setMediaEncryptionKey = function(keyInfo) {\n    this._e2eEncryption.setEncryptionKey(keyInfo);\n};\n\n/**\n * Returns <tt>true</tt> if lobby support is enabled in the backend.\n *\n * @returns {boolean} whether lobby is supported in the backend.\n */\nJitsiConference.prototype.isLobbySupported = function() {\n    return Boolean(this.room && this.room.getLobby().isSupported());\n};\n\n/**\n * Returns <tt>true</tt> if the room has members only enabled.\n *\n * @returns {boolean} whether conference room is members only.\n */\nJitsiConference.prototype.isMembersOnly = function() {\n    return Boolean(this.room && this.room.membersOnlyEnabled);\n};\n\n/**\n * Enables lobby by moderators\n *\n * @returns {Promise} resolves when lobby room is joined or rejects with the error.\n */\nJitsiConference.prototype.enableLobby = function() {\n    if (this.room && this.isModerator()) {\n        return this.room.getLobby().enable();\n    }\n\n    return Promise.reject(\n        new Error('The conference not started or user is not moderator'));\n};\n\n/**\n * Disabled lobby by moderators\n *\n * @returns {void}\n */\nJitsiConference.prototype.disableLobby = function() {\n    if (this.room && this.isModerator()) {\n        this.room.getLobby().disable();\n    } else {\n        logger.warn(`Failed to disable lobby, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator'}`);\n    }\n};\n\n/**\n * Joins the lobby room with display name and optional email or with a shared password to skip waiting.\n *\n * @param {string} displayName Display name should be set to show it to moderators.\n * @param {string} email Optional email is used to present avatar to the moderator.\n * @returns {Promise<never>}\n */\nJitsiConference.prototype.joinLobby = function(displayName, email) {\n    if (this.room) {\n        return this.room.getLobby().join(displayName, email);\n    }\n\n    return Promise.reject(new Error('The conference not started'));\n};\n\n/**\n * Gets the local id for a participant in a lobby room.\n * Returns undefined when current participant is not in the lobby room.\n * This is used for lobby room private chat messages.\n *\n * @returns {string}\n */\nJitsiConference.prototype.myLobbyUserId = function() {\n    if (this.room) {\n        return this.room.getLobby().getLocalId();\n    }\n};\n\n/**\n * Sends a message to a lobby room.\n * When id is specified it sends a private message.\n * Otherwise it sends the message to all moderators.\n * @param {message} Object The message to send\n * @param {string} id The participant id.\n *\n * @returns {void}\n */\nJitsiConference.prototype.sendLobbyMessage = function(message, id) {\n    if (this.room) {\n        if (id) {\n            return this.room.getLobby().sendPrivateMessage(id, message);\n        }\n\n        return this.room.getLobby().sendMessage(message);\n    }\n};\n\n/**\n * Adds a message listener to the lobby room\n * @param {Function} listener The listener function,\n * called when a new message is received in the lobby room.\n *\n * @returns {Function} Handler returned to be able to remove it later.\n */\nJitsiConference.prototype.addLobbyMessageListener = function(listener) {\n    if (this.room) {\n        return this.room.getLobby().addMessageListener(listener);\n    }\n};\n\n/**\n * Removes a message handler from the lobby room\n * @param {Function} handler The handler function  to remove.\n *\n * @returns {void}\n */\nJitsiConference.prototype.removeLobbyMessageHandler = function(handler) {\n    if (this.room) {\n        return this.room.getLobby().removeMessageHandler(handler);\n    }\n};\n\n/**\n * Denies an occupant in the lobby room access to the conference.\n * @param {string} id The participant id.\n */\nJitsiConference.prototype.lobbyDenyAccess = function(id) {\n    if (this.room) {\n        this.room.getLobby().denyAccess(id);\n    }\n};\n\n/**\n * Approves the request to join the conference to a participant waiting in the lobby.\n *\n * @param {string} id The participant id.\n */\nJitsiConference.prototype.lobbyApproveAccess = function(id) {\n    if (this.room) {\n        this.room.getLobby().approveAccess(id);\n    }\n};\n\n/**\n * Returns <tt>true</tt> if AV Moderation support is enabled in the backend.\n *\n * @returns {boolean} whether AV Moderation is supported in the backend.\n */\nJitsiConference.prototype.isAVModerationSupported = function() {\n    return Boolean(this.room && this.room.getAVModeration().isSupported());\n};\n\n/**\n * Enables AV Moderation.\n * @param {MediaType} mediaType \"audio\" or \"video\"\n */\nJitsiConference.prototype.enableAVModeration = function(mediaType) {\n    if (this.room && this.isModerator()\n        && (mediaType === MediaType.AUDIO || mediaType === MediaType.VIDEO)) {\n        this.room.getAVModeration().enable(true, mediaType);\n    } else {\n        logger.warn(`Failed to enable AV moderation, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator, '}${\n            this.room && this.isModerator() ? 'wrong media type passed' : ''}`);\n    }\n};\n\n/**\n * Disables AV Moderation.\n * @param {MediaType} mediaType \"audio\" or \"video\"\n */\nJitsiConference.prototype.disableAVModeration = function(mediaType) {\n    if (this.room && this.isModerator()\n        && (mediaType === MediaType.AUDIO || mediaType === MediaType.VIDEO)) {\n        this.room.getAVModeration().enable(false, mediaType);\n    } else {\n        logger.warn(`Failed to disable AV moderation, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator, '}${\n            this.room && this.isModerator() ? 'wrong media type passed' : ''}`);\n    }\n};\n\n/**\n * Approve participant access to certain media, allows unmuting audio or video.\n *\n * @param {MediaType} mediaType \"audio\" or \"video\"\n * @param id the id of the participant.\n */\nJitsiConference.prototype.avModerationApprove = function(mediaType, id) {\n    if (this.room && this.isModerator()\n        && (mediaType === MediaType.AUDIO || mediaType === MediaType.VIDEO)) {\n\n        const participant = this.getParticipantById(id);\n\n        if (!participant) {\n            return;\n        }\n\n        this.room.getAVModeration().approve(mediaType, participant.getJid());\n    } else {\n        logger.warn(`AV moderation approve skipped , ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator, '}${\n            this.room && this.isModerator() ? 'wrong media type passed' : ''}`);\n    }\n};\n\n/**\n * Reject participant access to certain media, blocks unmuting audio or video.\n *\n * @param {MediaType} mediaType \"audio\" or \"video\"\n * @param id the id of the participant.\n */\nJitsiConference.prototype.avModerationReject = function(mediaType, id) {\n    if (this.room && this.isModerator()\n        && (mediaType === MediaType.AUDIO || mediaType === MediaType.VIDEO)) {\n\n        const participant = this.getParticipantById(id);\n\n        if (!participant) {\n            return;\n        }\n\n        this.room.getAVModeration().reject(mediaType, participant.getJid());\n    } else {\n        logger.warn(`AV moderation reject skipped , ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator, '}${\n            this.room && this.isModerator() ? 'wrong media type passed' : ''}`);\n    }\n};\n\n/**\n * Returns the breakout rooms manager object.\n *\n * @returns {Object} the breakout rooms manager.\n */\nJitsiConference.prototype.getBreakoutRooms = function() {\n    return this.room?.getBreakoutRooms();\n};\n\n\n\n/**\n * Gets the local user when joined\n */\n JitsiConference.prototype.getLocalUser = function() {\n    if (this.user) {\n        return this.user;\n    }\n};\n\n/**\n * Gets the local user when joined\n */\nJitsiConference.prototype.terminate = function() {\n    this.sendCommand('terminate', {});\n};\n\n\nJitsiConference.prototype.handleSubtitles = function() {\n\n    let pastMessage = {};\n    const JSON_TYPE_TRANSCRIPTION_RESULT = 'transcription-result';\n    const JSON_TYPE_TRANSLATION_RESULT = 'translation-result';\n    const P_NAME_REQUESTING_TRANSCRIPTION = 'requestingTranscription';\n    const P_NAME_TRANSLATION_LANGUAGE = 'translation_language';\n\n    this.on(JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED, (participant, json) => {\n\n        if (!(json && (json.type === JSON_TYPE_TRANSCRIPTION_RESULT || json.type === JSON_TYPE_TRANSLATION_RESULT))) {\n            return;\n        }\n\n        const translationLanguage = this.getLocalParticipantProperty('translation_language');\n\n        try {\n\n            const transcriptMessageID = json.message_id;\n            const participantName = json.participant.name;\n\n            let newTranscriptMessage = { transcriptMessageID };\n\n            if (json.type === JSON_TYPE_TRANSLATION_RESULT && json.language === translationLanguage) {\n\n                newTranscriptMessage.final = json.text;\n                newTranscriptMessage.participantName = participantName;\n\n            } else if (json.type === JSON_TYPE_TRANSCRIPTION_RESULT && !translationLanguage) {\n                // Displays interim and final results without any translation if\n                // translations are disabled.\n\n                const { text } = json.transcript[0];\n\n                // We update the previous transcript message with the same\n                // message ID or adds a new transcript message if it does not\n                // exist in the map.\n\n                if (pastMessage.transcriptMessageID === transcriptMessageID) {\n                    newTranscriptMessage = pastMessage;\n                } else {\n                    newTranscriptMessage.participantName = participantName;\n                }\n\n                // If this is final result, update the state as a final result\n                // and start a count down to remove the subtitle from the state\n                if (!json.is_interim) {\n                    newTranscriptMessage.final = text;\n\n                } else if (json.stability > 0.85) {\n                    // If the message has a high stability, we can update the\n                    // stable field of the state and remove the previously\n                    // unstable results\n                    newTranscriptMessage.stable = text;\n                    newTranscriptMessage.unstable = undefined;\n\n                } else {\n                    // Otherwise, this result has an unstable result, which we\n                    // add to the state. The unstable result will be appended\n                    // after the stable part.\n                    newTranscriptMessage.unstable = text;\n                }\n\n            }\n\n            let finalText = '';\n\n            if (newTranscriptMessage.final) {\n                finalText = newTranscriptMessage.final;\n            } else {\n                const stable = newTranscriptMessage.stable || '';\n                const unstable = newTranscriptMessage.unstable || '';\n\n                finalText = stable + unstable;\n            }\n            const fellowParticipantName =  this.participants[json?.participant?.id]?._identity?.user?.name ||  this?.getLocalUser()?.name;\n            this.eventEmitter.emit(JitsiConferenceEvents.SUBTITLES_RECEIVED, json?.participant?.id, fellowParticipantName, finalText);\n        } catch (error) {\n            logger.error('Error occurred while updating transcriptions\\n', error);\n        }\n    });\n};\n\n// enable analytics\nJitsiConference.prototype.enableAnalytics = function() {\n    this.statistics.addAnalyticsEventListener((eventName, payload) => {\n        let name = '', body = {};\n\n        if (typeof eventName === 'string') {\n            name = eventName;\n            body = payload;\n        } else if (typeof eventName === 'object') {\n            name = eventName.name;\n            body = eventName;\n        }\n\n        const finalPaylaod = {\n            name,\n            action: body.action ? body.action : '',\n            actionSubject: body.actionSubject ? body.actionSubject : '',\n            source: body.source ? body.source : '',\n            attributes: JSON.stringify(payload)\n        };\n\n        this.eventEmitter.emit(JitsiConferenceEvents.ANALYTICS_EVENT_RECEIVED, finalPaylaod);\n    });\n};\n\nJitsiConference.prototype.startLocalRecording = function(format = 'ogg') {\n    this.recordingController.startRecording(format);\n};\n\nJitsiConference.prototype.stopLocalRecording = function() {\n    this.recordingController.stopRecording();\n};\n\nJitsiConference.prototype.switchFormat = function() {\n    this.recordingController.switchFormat(format);\n};\n\nJitsiConference.prototype.setMuted = function(muted) {\n    this.recordingController.setMuted(muted);\n};\n\nJitsiConference.prototype.setMicDevice = function(micDeviceId) {\n    this.recordingController.setMicDevice(micDeviceId);\n};\n\nJitsiConference.prototype.startSIPVideoCall = function(sipAddress, displayName) {\n    if (this.sessions[sipAddress]) {\n        return;\n    }\n    const session = this.createVideoSIPGWSession(sipAddress, displayName);\n\n    this.sessions[sipAddress] = session;\n    session.start();\n};\n\nJitsiConference.prototype.stopSIPVideoCall = function(sipAddress) {\n    if (!this.sessions[sipAddress]) {\n        return;\n    }\n    this.sessions[sipAddress].stop();\n    delete this.sessions[sipAddress];\n};","import Bourne from '@hapi/bourne';\n\n/**\n * A list if keys to ignore when parsing.\n * @type {string[]}\n */\n\nconst blacklist = [ '__proto__', 'constructor', 'prototype' ];\n\n/**\n * Parses the query/search or fragment/hash parameters out of a specific URL and\n * returns them as a JS object.\n *\n * @param {URL} url - The URL to parse.\n * @param {boolean} dontParse - If falsy, some transformations (for parsing the\n * value as JSON) will be executed.\n * @param {string} source - If {@code 'search'}, the parameters will parsed out\n * of {@code url.search}; otherwise, out of {@code url.hash}.\n * @returns {Object}\n */\n\nexport function parseURLParams(dontParse = true) {\n    const paramStr = location.search ? location.search : location.hash;\n    const params = {};\n    const paramParts = paramStr && paramStr.substr(1)\n        .split('&') || []; // Detect and ignore hash params for hash routers.\n\n    if (location.hash && paramParts.length === 1) {\n        const firstParam = paramParts[0];\n\n        if (firstParam.startsWith('/') && firstParam.split('&').length === 1) {\n            return params;\n        }\n    }\n\n    paramParts.forEach(part => {\n        const param = part.split('=');\n        const key = param[0];\n\n        if (!key || blacklist.includes(key.split('.')[0])) {\n            return;\n        }\n\n        let value;\n\n        try {\n            value = param[1];\n\n            if (!dontParse) {\n                const decoded = decodeURIComponent(value)\n                    .replace(/\\\\&/, '&');\n                value = decoded === 'undefined' ? undefined : Bourne.parse(decoded);\n            }\n        } catch (e) {\n            console.log(`Failed to parse URL parameter value: ${String(value)}`);\n            return;\n        }\n\n        params[key] = value;\n    });\n    return params;\n}\n\n\nexport function syncWithURL(conferenceConfig) {\n    const params = parseURLParams();\n    Object.keys(params)\n        .forEach(param => {\n            const key = param.replace('config.', '');\n            switch (key) {\n            case 'analytics.disabled':\n                conferenceConfig.analytics.disabled = params[param];\n                break;\n            case 'startWithAudioMuted':\n                conferenceConfig.startAudioMuted = params[param];\n                break;\n            case 'startWithVideoMuted':\n                conferenceConfig.startVideoMuted = params[param];\n                break;\n            case 'p2p.enabled':\n                conferenceConfig.p2p.enabled = params[param];\n                break;\n            default:\n                conferenceConfig[key] = params[param];\n            }\n        });\n    console.log(\"conferenceConfig\",conferenceConfig);    \n    return conferenceConfig;\n}\n\n\n\n\n\n\n\n","// enable/disable different features by changing this configuration file\nexport const initSDKConfig = {\n    disableAudioLevels: false,\n    // useIPv6 - boolean property\n    // disableSimulcast: true //boolean property. Enables/disables simulcast.\n    // enableWindowOnErrorHandler - boolean property (default false). Enables/disables attaching global onerror handler (window.onerror).\n    // disableThirdPartyRequests - if true - callstats will be disabled and the callstats API won't be included.\n    // enableAnalyticsLogging - boolean property (default false). Enables/disables analytics logging.\n    // externalStorage - Object that implements the Storage interface. If specified this object will be used for storing data instead of localStorage.\n    // callStatsCustomScriptUrl - (optional) custom url to access callstats client script\n    // disableRtx - (optional) boolean property (default to false). Enables/disable the use of RTX.\n    // disabledCodec - the mime type of the code that should not be negotiated on the peerconnection.\n    // preferredCodec the mime type of the codec that needs to be made the preferred codec for the connection.\n};\n\nexport const connectionConfig = {\n    hosts: {\n        domain: 'sariska.io',\n        muc: 'muc.sariska.io'\n    },\n    serviceUrl: 'wss://api.sariska.io/api/v1/media/websocket',\n    clientNode: 'https://www.sariska.io',\n    // enableLipSync - (optional) boolean property which enables the lipsync feature. Currently works only in Chrome and is disabled by default.\n};\n\n\nexport const devConnectionConfig = {\n    hosts: {\n        domain: 'dev.sariska.io',\n        muc: 'muc.dev.sariska.io'\n    },\n    serviceUrl: 'wss://api.dev.sariska.io/api/v1/media/websocket',\n    clientNode: 'https://www.sariska.io',\n    // enableLipSync - (optional) boolean property which enables the lipsync feature. Currently works only in Chrome and is disabled by default.\n};\n\n\nexport const conferenceConfig = {\n    enableLocalRecording: true,\n    enableVirtualBackground: false,\n    enableNoiseCancellation: false,\n    enableTalkWhileMuted: true,\n    enableNoAudioDetection: true,\n    enableNoisyMicDetection: true,\n    createVADProcessor: true,\n    openBridgeChannel: 'websocket',\n    //- Enables/disables bridge channel. Values can be \"datachannel\", \"websocket\", true (treat it as \"datachannel\"), undefined (treat it as \"datachannel\") and false (don't open any channel). NOTE: we recommend to set that option to true\n    // recordingType - the type of recording to be used\n    // callStatsID - callstats credentials\n    // callStatsSecret - callstats credentials\n    // enableTalkWhileMuted - boolean property. Enables/disables talk while muted detection, by default the value is false/disabled.\n    // ignoreStartMuted - ignores start muted events coming from jicofo.\n    // startSilent - enables silent mode, will mark audio as inactive will not send/receive audio\n    // confID - Used for statistics to identify conference, if tenants are supported will contain tenant and the non lower case variant for the room name.\n    // siteID - (optional) Used for statistics to identify the site where the user is coming from, if tenants are supported it will contain a unique identifier for that tenant. If not provided, the value will be infered from confID\n    // statisticsId - The id to be used as stats instead of default callStatsUsername.\n    // statisticsDisplayName - The display name to be used for stats, used for callstats.\n    // focusUserJid - The real JID of focus participant - can be overridden here\n    // enableNoAudioDetection\n    // enableNoisyMicDetection\n    // enableRemb\n    // enableTcc\n    // useRoomAsSharedDocumentName\n    // channelLastN\n    // startBitrate\n    // stereo\n    // forceJVB121Ratio - \"Math.random() < forceJVB121Ratio\" will determine whether a 2 people conference should be moved to the JVB instead of P2P. The decision is made on the responder side, after ICE succeeds on the P2P connection.\n    hiddenDomain: \"recorder.sariska.io\",\n    // startAudioMuted\n    // startVideoMuted\n    enableLayerSuspension: true, // - if set to 'true', we will cap the video send bitrate when we are told we have not been selected by any endpoints (and therefore the non-thumbnail streams are not in use).\n    // deploymentInfo\n    // shard\n    // userRegion\n    // rttMonitor\n    // enabled\n    // initialDelay\n    // getStatsInterval\n    // analyticsInterval\n    // stunServers\n    e2eping: {\n        pingInterval: -1 // analyticsInterval: 60000,\n    },\n    analytics: {\n        disabled: false\n        // rtcstatsEnabled: true,\n\n        // In order to enable rtcstats one needs to provide a endpoint url.\n        // rtcstatsEndpoint: wss://rtcstats-server-pilot.jitsi.net/,\n\n        // The interval at which rtcstats will poll getStats, defaults to 1000ms.\n        // If the value is set to 0 getStats won't be polled and the rtcstats client\n        // will only send data related to RTCPeerConnection events.\n        // rtcstatsPolIInterval: 1000,\n    },\n    // pingInterval\n    // abTesting - A/B testing related options\n    // enableSuspendVideoTest\n    // testing\n    // capScreenshareBitrate\n    // p2pTestMode\n    // octo\n    // probability\n    p2p: {\n        // Enables peer to peer mode. When enabled the system will try to\n        // establish a direct connection when there are exactly 2 participants\n        // in the room. If that succeeds the conference will stop sending data\n        // through the JVB and use the peer to peer connection instead. When a\n        // 3rd participant joins the conference will be moved back to the JVB\n        // connection.\n        enabled: false // The STUN servers that will be used in the peer to peer connections\n        // stunServers: [\n        //    { urls: 'stun.l.google.com:19302' }\n        //]\n        // Sets the ICE transport policy for the p2p connection. At the time\n        // of this writing the list of possible values are 'all' and 'relay',\n        // but that is subject to change in the future. The enum is defined in\n        // the WebRTC standard:\n        // https://www.w3.org/TR/webrtc/#rtcicetransportpolicy-enum.\n        // If not set, the effective value is 'all'.\n        // iceTransportPolicy: 'all',\n        // Provides a way to set the video codec preference on the p2p connection. Acceptable\n        // codec values are 'VP8', 'VP9' and 'H264'.\n        // preferredCodec: 'H264',\n        // Provides a way to prevent a video codec from being negotiated on the p2p connection.\n        // disabledCodec: '',\n        // How long we're going to wait, before going back to P2P after the 3rd\n        // participant has left the conference (to filter out page reload).\n        // backToP2PDelay: 5\n    }\n};\n","import JitsiConference from './JitsiConference';\nimport * as JitsiConnectionEvents from './JitsiConnectionEvents';\nimport Statistics from './modules/statistics/statistics';\nimport XMPP from './modules/xmpp/xmpp';\nimport {\n    CONNECTION_DISCONNECTED as ANALYTICS_CONNECTION_DISCONNECTED,\n    createConnectionFailedEvent\n} from './service/statistics/AnalyticsEvents';\nimport { jitsiLocalStorage } from '@jitsi/js-utils';\nimport { syncWithURL } from \"./modules/util/parseURLParams\";\nimport { connectionConfig, conferenceConfig, devConnectionConfig } from './config';\nexport const DISCO_JIBRI_FEATURE = 'http://jitsi.org/protocol/jibri';\n\n/**\n * Creates a new connection object for the Jitsi Meet server side video\n * conferencing service. Provides access to the JitsiConference interface.\n * @param appID identification for the provider of Jitsi Meet video conferencing\n * services.\n * @param token the JWT token used to authenticate with the server(optional)\n * @param options Object with properties / settings related to connection with\n * the server.\n * @constructor\n */\nexport default function JitsiConnection(token, roomName, isDev) {\n    let options;\n    const jwt = this.parseJwt(token);\n    this.name = roomName;\n    this.user = jwt.context.user;\n    options = isDev ? {...devConnectionConfig} : {...connectionConfig};\n    options.serviceUrl = `${options.serviceUrl}?room=${roomName}`;\n    this.options = options;\n    this.xmpp = new XMPP(options, token);\n    this.token = token;\n    this.isDev = isDev;\n\n    /* eslint-disable max-params */\n    this.addEventListener(JitsiConnectionEvents.CONNECTION_FAILED,\n        (errType, msg, credentials, details) => {\n            Statistics.sendAnalyticsAndLog(\n                createConnectionFailedEvent(errType, msg, details));\n        });\n    /* eslint-enable max-params */\n\n    this.addEventListener(JitsiConnectionEvents.CONNECTION_DISCONNECTED,\n        msg => {\n            // we can see disconnects from normal tab closing of the browser\n            // and then there are no msgs, but we want to log only disconnects\n            // when there is real error\n            // XXX Do we need the difference in handling between the log and\n            // analytics event here?\n            if (msg) {\n                Statistics.sendAnalytics(\n                    ANALYTICS_CONNECTION_DISCONNECTED,\n                    { message: msg });\n            }\n            Statistics.sendLog(\n                JSON.stringify(\n                    {\n                        id: ANALYTICS_CONNECTION_DISCONNECTED,\n                        msg\n                    }));\n        });\n}\n\nJitsiConnection.prototype.parseJwt = function (token) {\n    try {\n      return JSON.parse(atob(token.split('.')[1]));\n    } catch (e) {\n      return null;\n    }\n  };\n  \n/**\n * Connect the client with the server.\n * @param options {object} connecting options\n * (for example authentications parameters).\n */\nJitsiConnection.prototype.connect = function(options = {}) {\n    const usernameOverride = jitsiLocalStorage.getItem('xmpp_username_override');\n    const passwordOverride = jitsiLocalStorage.getItem('xmpp_password_override');\n  \n    if (usernameOverride && usernameOverride.length > 0) {\n      options.id = usernameOverride; // eslint-disable-line no-param-reassign\n    }\n  \n    if (passwordOverride && passwordOverride.length > 0) {\n      options.password = passwordOverride; // eslint-disable-line no-param-reassign\n    }\n  \n    this.xmpp.connect(options.id, options.password);\n};\n\n/**\n * Attach to existing connection. Can be used for optimizations. For example:\n * if the connection is created on the server we can attach to it and start\n * using it.\n *\n * @param options {object} connecting options - rid, sid and jid.\n */\nJitsiConnection.prototype.attach = function(options) {\n    this.xmpp.attach(options);\n};\n\n/**\n * Disconnect the client from the server.\n * @returns {Promise} - Resolves when the disconnect process is finished or rejects with an error.\n */\nJitsiConnection.prototype.disconnect = function(...args) {\n    // XXX Forward any arguments passed to JitsiConnection.disconnect to\n    // XMPP.disconnect. For example, the caller of JitsiConnection.disconnect\n    // may optionally pass the event which triggered the disconnect in order to\n    // provide the implementation with finer-grained context.\n    return this.xmpp.disconnect(...args);\n};\n\n/**\n * Returns the jid of the participant associated with the XMPP connection.\n *\n * @returns {string} The jid of the participant.\n */\nJitsiConnection.prototype.getJid = function() {\n    return this.xmpp.getJid();\n};\n\n/**\n * This method allows renewal of the tokens if they are expiring.\n * @param token the new token.\n */\nJitsiConnection.prototype.setToken = function(token) {\n    this.token = token;\n};\n\n/**\n * Creates and joins new conference.\n * @param name the name of the conference; if null - a generated name will be\n * provided from the api\n * @param options Object with properties / settings related to the conference\n * that will be created.\n * @returns {JitsiConference} returns the new conference object.\n */\nJitsiConnection.prototype.initJitsiConference = function(options={}) {\n    options = { ...conferenceConfig,\n        ...options\n    };\n    options = syncWithURL(options);\n    const name = this.name;\n    if (this.isDev) {\n        options = {...options, hiddenDomain: \"recorder.dev.sariska.io\"}\n    }\n    \n    if (options.iAmRecorder) {\n        this.addFeature(DISCO_JIBRI_FEATURE);\n    }\n\n    return new JitsiConference({\n        name,\n        config: options,\n        connection: this,\n        user: this.user\n    });\n};\n\n/**\n * Subscribes the passed listener to the event.\n * @param event {JitsiConnectionEvents} the connection event.\n * @param listener {Function} the function that will receive the event\n */\nJitsiConnection.prototype.addEventListener = function(event, listener) {\n    this.xmpp.addListener(event, listener);\n};\n\n/**\n * Unsubscribes the passed handler.\n * @param event {JitsiConnectionEvents} the connection event.\n * @param listener {Function} the function that will receive the event\n */\nJitsiConnection.prototype.removeEventListener = function(event, listener) {\n    this.xmpp.removeListener(event, listener);\n};\n\n/**\n * Returns measured connectionTimes.\n */\nJitsiConnection.prototype.getConnectionTimes = function() {\n    return this.xmpp.connectionTimes;\n};\n\n/**\n * Adds new feature to the list of supported features for the local\n * participant.\n * @param {String} feature the name of the feature.\n * @param {boolean} submit if true - the new list of features will be\n * immediately submitted to the others.\n */\nJitsiConnection.prototype.addFeature = function(feature, submit = false) {\n    this.xmpp.caps.addFeature(feature, submit, true);\n};\n\n/**\n * Removes a feature from the list of supported features for the local\n * participant\n * @param {String} feature the name of the feature.\n * @param {boolean} submit if true - the new list of features will be\n * immediately submitted to the others.\n */\nJitsiConnection.prototype.removeFeature = function(feature, submit = false) {\n    this.xmpp.caps.removeFeature(feature, submit, true);\n};\n\n/**\n * Get object with internal logs.\n */\nJitsiConnection.prototype.getLogs = function() {\n    const data = this.xmpp.getJingleLog();\n\n    const metadata = {};\n\n    metadata.time = new Date();\n    metadata.url = window.location.href;\n    metadata.ua = navigator.userAgent;\n\n    const log = this.xmpp.getXmppLog();\n\n    if (log) {\n        metadata.xmpp = log;\n    }\n\n    data.metadata = metadata;\n\n    return data;\n};\n","/**\n * The events for the media devices.\n */\n\nexport enum JitsiMediaDevicesEvents {\n    /**\n     * Indicates that the list of available media devices has been changed. The\n     * event provides the following parameters to its listeners:\n     *\n     * @param {MediaDeviceInfo[]} devices - array of MediaDeviceInfo or\n     *  MediaDeviceInfo-like objects that are currently connected.\n     *  @see https://developer.mozilla.org/en-US/docs/Web/API/MediaDeviceInfo\n     */\n    DEVICE_LIST_CHANGED = 'mediaDevices.devicechange',\n\n    /**\n     * Event emitted when the user granted/blocked a permission for the camera / mic.\n     * Used to keep track of the granted permissions on browsers which don't\n     * support the Permissions API.\n     */\n    PERMISSIONS_CHANGED = 'rtc.permissions_changed',\n\n    /**\n     * Indicates that the environment is currently showing permission prompt to\n     * access camera and/or microphone. The event provides the following\n     * parameters to its listeners:\n     *\n     * @param {'chrome'|'opera'|'firefox'|'safari'|'nwjs'\n     *  |'react-native'|'android'} environmentType - type of browser or\n     *  other execution environment.\n     */\n    PERMISSION_PROMPT_IS_SHOWN = 'mediaDevices.permissionPromptIsShown',\n\n    SLOW_GET_USER_MEDIA = 'mediaDevices.slowGetUserMedia'\n};\n\n// exported for backward compatibility\nexport const DEVICE_LIST_CHANGED = JitsiMediaDevicesEvents.DEVICE_LIST_CHANGED;\nexport const PERMISSIONS_CHANGED = JitsiMediaDevicesEvents.PERMISSIONS_CHANGED;\nexport const PERMISSION_PROMPT_IS_SHOWN = JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN;\nexport const SLOW_GET_USER_MEDIA = JitsiMediaDevicesEvents.SLOW_GET_USER_MEDIA;\n","import EventEmitter from 'events';\n\nimport * as JitsiMediaDevicesEvents from './JitsiMediaDevicesEvents';\nimport RTC from './modules/RTC/RTC';\nimport browser from './modules/browser';\nimport Statistics from './modules/statistics/statistics';\nimport { MediaType } from './service/RTC/MediaType';\nimport RTCEvents from './service/RTC/RTCEvents';\n\nconst AUDIO_PERMISSION_NAME = 'microphone';\nconst PERMISSION_GRANTED_STATUS = 'granted';\nconst VIDEO_PERMISSION_NAME = 'camera';\n\n/**\n * Media devices utilities for Jitsi.\n */\nclass JitsiMediaDevices {\n    /**\n     * Initializes a {@code JitsiMediaDevices} object. There will be a single\n     * instance of this class.\n     */\n    constructor() {\n        this._eventEmitter = new EventEmitter();\n        this._permissions = {};\n\n        RTC.addListener(\n            RTCEvents.DEVICE_LIST_CHANGED,\n            devices =>\n                this._eventEmitter.emit(\n                    JitsiMediaDevicesEvents.DEVICE_LIST_CHANGED,\n                    devices));\n        RTC.addListener(\n            RTCEvents.DEVICE_LIST_AVAILABLE,\n            devices =>\n                this._logOutputDevice(\n                    this.getAudioOutputDevice(),\n                    devices));\n\n        // We would still want to update the permissions cache in case the permissions API is not supported.\n        RTC.addListener(\n            RTCEvents.PERMISSIONS_CHANGED,\n            permissions => this._handlePermissionsChange(permissions));\n\n        // Test if the W3C Permissions API is implemented and the 'camera' and 'microphone' permissions are\n        // implemented. If supported add onchange listeners.\n        this._permissionsApiSupported = new Promise(resolve => {\n            if (!navigator.permissions) {\n                resolve(false);\n\n                return;\n            }\n\n            const self = this;\n\n            const promises = [];\n\n            promises.push(navigator.permissions.query({ name: VIDEO_PERMISSION_NAME })\n                .then(status => {\n                    this._handlePermissionsChange({\n                        [MediaType.VIDEO]: this._parsePermissionState(status)\n                    });\n                    status.onchange = function() {\n                        try {\n                            self._handlePermissionsChange({\n                                [MediaType.VIDEO]: self._parsePermissionState(this)\n                            });\n                        } catch (error) {\n                            // Nothing to do.\n                        }\n                    };\n\n                    return true;\n                })\n                .catch(() => false));\n\n            promises.push(navigator.permissions.query({ name: AUDIO_PERMISSION_NAME })\n                .then(status => {\n                    this._handlePermissionsChange({\n                        [MediaType.AUDIO]: this._parsePermissionState(status)\n                    });\n                    status.onchange = function() {\n                        try {\n                            self._handlePermissionsChange({\n                                [MediaType.AUDIO]: self._parsePermissionState(this)\n                            });\n                        } catch (error) {\n                            // Nothing to do.\n                        }\n                    };\n\n                    return true;\n                })\n                .catch(() => false));\n\n            Promise.all(promises).then(results => resolve(results.every(supported => supported)));\n\n        });\n    }\n\n\n    /**\n     * Parses a PermissionState object and returns true for granted and false otherwise.\n     *\n     * @param {PermissionState} permissionStatus - The PermissionState object retrieved from the Permissions API.\n     * @returns {boolean} - True for granted and false for denied.\n     * @throws {TypeError}\n     */\n    _parsePermissionState(permissionStatus = {}) {\n        // The status attribute is deprecated, and state\n        // should be used instead, but check both for now\n        // for backwards compatibility.\n        const status = permissionStatus.state || permissionStatus.status;\n\n        if (typeof status !== 'string') {\n            throw new TypeError();\n        }\n\n        return status === PERMISSION_GRANTED_STATUS;\n    }\n\n    /**\n     * Updates the local granted/denied permissions cache. A permissions might be\n     * granted, denied, or undefined. This is represented by having its media\n     * type key set to {@code true} or {@code false} respectively.\n     *\n     * @param {Object} permissions - Object with the permissions.\n     */\n    _handlePermissionsChange(permissions) {\n        const hasPermissionsChanged\n            = [ MediaType.AUDIO, MediaType.VIDEO ]\n                .some(type => type in permissions && permissions[type] !== this._permissions[type]);\n\n        if (hasPermissionsChanged) {\n            this._permissions = {\n                ...this._permissions,\n                ...permissions\n            };\n            this._eventEmitter.emit(JitsiMediaDevicesEvents.PERMISSIONS_CHANGED, this._permissions);\n\n            if (this._permissions[MediaType.AUDIO] || this._permissions[MediaType.VIDEO]) {\n                // Triggering device list update when the permissiions are granted in order to update\n                // the labels the devices.\n                // eslint-disable-next-line no-empty-function\n                this.enumerateDevices(() => {});\n            }\n        }\n    }\n\n    /**\n     * Gathers data and sends it to statistics.\n     * @param deviceID the device id to log\n     * @param devices list of devices\n     */\n    _logOutputDevice(deviceID, devices) {\n        const device\n            = devices.find(\n                d => d.kind === 'audiooutput' && d.deviceId === deviceID);\n\n        if (device) {\n            Statistics.sendActiveDeviceListEvent(\n                RTC.getEventDataForActiveDevice(device));\n        }\n    }\n\n    /**\n     * Executes callback with list of media devices connected.\n     * @param {function} callback\n     */\n    enumerateDevices(callback) {\n        RTC.enumerateDevices(callback);\n    }\n\n    /**\n     * Checks if its possible to enumerate available cameras/micropones.\n     * @returns {Promise<boolean>} a Promise which will be resolved only once\n     * the WebRTC stack is ready, either with true if the device listing is\n     * available available or with false otherwise.\n     */\n    isDeviceListAvailable() {\n        return RTC.isDeviceListAvailable();\n    }\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     * @param {string} [deviceType] - type of device to change. Default is\n     *      undefined or 'input', 'output' - for audio output device change.\n     * @returns {boolean} true if available, false otherwise.\n     */\n    isDeviceChangeAvailable(deviceType) {\n        return RTC.isDeviceChangeAvailable(deviceType);\n    }\n\n    /**\n     * Checks if the permission for the given device was granted.\n     *\n     * @param {'audio'|'video'} [type] - type of devices to check,\n     *      undefined stands for both 'audio' and 'video' together\n     * @returns {Promise<boolean>}\n     */\n    isDevicePermissionGranted(type) {\n        return new Promise(resolve => {\n            // Shortcut: first check if we already know the permission was\n            // granted.\n            if (type in this._permissions) {\n                resolve(this._permissions[type]);\n\n                return;\n            }\n\n            // Check using the Permissions API.\n            this._permissionsApiSupported.then(supported => {\n                if (!supported) {\n                    resolve(false);\n\n                    return;\n                }\n\n                const promises = [];\n\n                switch (type) {\n                case MediaType.VIDEO:\n                    promises.push(\n                        navigator.permissions.query({\n                            name: VIDEO_PERMISSION_NAME\n                        }));\n                    break;\n                case MediaType.AUDIO:\n                    promises.push(\n                        navigator.permissions.query({\n                            name: AUDIO_PERMISSION_NAME\n                        }));\n                    break;\n                default:\n                    promises.push(\n                        navigator.permissions.query({\n                            name: VIDEO_PERMISSION_NAME\n                        }));\n                    promises.push(\n                        navigator.permissions.query({\n                            name: AUDIO_PERMISSION_NAME\n                        }));\n                }\n\n                Promise.all(promises).then(\n                    results => resolve(results.every(permissionStatus => {\n                        try {\n                            return this._parsePermissionState(permissionStatus);\n                        } catch {\n                            return false;\n                        }\n                    })),\n                    () => resolve(false)\n                );\n            });\n        });\n    }\n\n    /**\n     * Returns true if it is possible to be simultaneously capturing audio from more than one device.\n     *\n     * @returns {boolean}\n     */\n    isMultipleAudioInputSupported() {\n        return !(browser.isFirefox() || browser.isIosBrowser());\n    }\n\n    /**\n     * Returns currently used audio output device id, 'default' stands\n     * for default device\n     * @returns {string}\n     */\n    getAudioOutputDevice() {\n        return RTC.getAudioOutputDevice();\n    }\n\n    /**\n     * Sets current audio output device.\n     * @param {string} deviceId - id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices(), 'default' is for\n     *      default device\n     * @returns {Promise} - resolves when audio output is changed, is rejected\n     *      otherwise\n     */\n    setAudioOutputDevice(deviceId) {\n        const availableDevices = RTC.getCurrentlyAvailableMediaDevices();\n\n        if (availableDevices.length > 0) {\n            // if we have devices info report device to stats\n            // normally this will not happen on startup as this method is called\n            // too early. This will happen only on user selection of new device\n            this._logOutputDevice(\n                deviceId, RTC.getCurrentlyAvailableMediaDevices());\n        }\n\n        return RTC.setAudioOutputDevice(deviceId);\n    }\n\n    /**\n     * Adds an event handler.\n     * @param {string} event - event name\n     * @param {function} handler - event handler\n     */\n    addEventListener(event, handler) {\n        this._eventEmitter.addListener(event, handler);\n    }\n\n    /**\n     * Removes event handler.\n     * @param {string} event - event name\n     * @param {function} handler - event handler\n     */\n    removeEventListener(event, handler) {\n        this._eventEmitter.removeListener(event, handler);\n    }\n\n    /**\n     * Emits an event.\n     * @param {string} event - event name\n     */\n    emitEvent(event, ...args) {\n        this._eventEmitter.emit(event, ...args);\n    }\n}\n\nexport default new JitsiMediaDevices();\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport RTC from '../RTC/RTC';\nimport Statistics from '../statistics/statistics';\n\n\nconst logger = getLogger(__filename);\n\n// If after 3000 ms the detector did not find any active devices consider that there aren't any usable ones available\n// i.e. audioLevel > 0.008\nconst DETECTION_TIMEOUT = 3000;\n\n\n/**\n * Go through all audio devices on the system and return one that is active, i.e. has audio signal.\n *\n * @returns Promise<Object> - Object containing information about the found device.\n */\nexport default function getActiveAudioDevice() {\n\n    return new Promise(resolve => {\n        RTC.enumerateDevices(devices => {\n            const audioDevices = devices.filter(device => device.kind === 'audioinput');\n            const devicePromiseArray = [];\n\n\n            for (const micDevice of audioDevices) {\n                const devicePromise = RTC.obtainAudioAndVideoPermissions({ devices: [ 'audio' ],\n                    micDeviceId: micDevice.deviceId }).then(tracks => {\n\n                    // We expect a single device to be available when obtained from obtainAudioAndVideoPermissions\n                    // that's  why only take p.value[0].\n                    const track = tracks[0];\n                    const originalStream = track.getOriginalStream();\n\n                    Statistics.startLocalStats(originalStream, track.setAudioLevel.bind(track));\n                    track.addEventListener(JitsiTrackEvents.LOCAL_TRACK_STOPPED, () => {\n                        Statistics.stopLocalStats(originalStream);\n                    });\n\n                    return track;\n                });\n\n                devicePromiseArray.push(devicePromise);\n            }\n\n            Promise.allSettled(devicePromiseArray).then(outcomeArray => {\n                const successfulPromises = outcomeArray.filter(p => p.status === 'fulfilled');\n                const rejectedPromises = outcomeArray.filter(p => p.status === 'rejected');\n\n\n                const availableDevices = successfulPromises.map(p => p.value);\n                const rejectReasons = rejectedPromises.map(p => p.value);\n\n                for (const reason of rejectReasons) {\n                    logger.error('Failed to acquire audio device with error: ', reason);\n                }\n\n                // Setup event handlers for monitored devices.\n                for (const device of availableDevices) {\n                    device.on(JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED, audioLevel => {\n                        // This is a very naive approach but works, a more accurate one would be to use rnnoise in\n                        // order to limit  the number of false positives. The 0.008 constant is due to how\n                        // LocalStatsCollector from lib-jitsi-meet publishes audio-levels, in this case 0.008 denotes //\n                        // no input.\n                        if (audioLevel > 0.008) {\n                            stopActiveDevices(availableDevices);\n                            resolve({ deviceId: device.deviceId,\n                                deviceLabel: device.track.label });\n                        }\n                    });\n                }\n\n                // Cancel the detection in case no devices was found with audioLevel > 0 in the set timeout.\n                setTimeout(() => {\n                    stopActiveDevices(availableDevices);\n                    resolve({\n                        deviceId: '',\n                        deviceLabel: '' }\n                    );\n                }, DETECTION_TIMEOUT);\n\n            });\n\n        });\n    });\n}\n\n/**\n * Stop the streams of the provided JitsiLocalTracks.\n *\n * @param {Array<JitsiLocalTrack>} deviceList - Array of JitsiLocalTracks to stop.\n * @returns {void}\n */\nfunction stopActiveDevices(deviceList) {\n    for (const device of deviceList) {\n        device.stopStream();\n    }\n}\n","/**\n * The know jingle actions that can be sent and should be acted upon by\n * {@code ProxyConnectionService} and {@code ProxyConnectionPC}.\n */\nexport enum ACTIONS {\n    ACCEPT = 'session-accept',\n    CONNECTION_ERROR = 'connection-error-encountered',\n    INITIATE = 'session-initiate',\n    TERMINATE = 'session-terminate',\n    TRANSPORT_INFO = 'transport-info',\n    UNAVAILABLE = 'unavailable'\n};\n","import { getLogger } from '@jitsi/logger';\n\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\nimport RTC from '../RTC/RTC';\nimport JingleSessionPC from '../xmpp/JingleSessionPC';\nimport SignalingLayerImpl from '../xmpp/SignalingLayerImpl';\nimport { DEFAULT_STUN_SERVERS } from '../xmpp/xmpp';\n\nimport { ACTIONS } from './constants';\n\nconst logger = getLogger(__filename);\n\n/**\n * An adapter around {@code JingleSessionPC} so its logic can be re-used without\n * an XMPP connection. It is being re-used for consistency with the rest of the\n * codebase and to leverage existing peer connection event handling. Also\n * this class provides a facade to hide most of the API for\n * {@code JingleSessionPC}.\n */\nexport default class ProxyConnectionPC {\n    /**\n     * Initializes a new {@code ProxyConnectionPC} instance.\n     *\n     * @param {Object} options - Values to initialize the instance with.\n     * @param {Object} [options.pcConfig] - The {@code RTCConfiguration} to use for the WebRTC peer connection.\n     * @param {boolean} [options.isInitiator] - If true, the local client should send offers. If false, the local\n     * client should send answers. Defaults to false.\n     * @param {Function} options.onRemoteStream - Callback to invoke when a remote media stream has been received\n     * through the peer connection.\n     * @param {string} options.peerJid - The jid of the remote client with which the peer connection is being establish\n     * and which should receive direct messages regarding peer connection updates.\n     * @param {boolean} [options.receiveVideo] - Whether or not the peer connection should accept incoming video\n     * streams. Defaults to false.\n     * @param {Function} options.onSendMessage - Callback to invoke when a message has to be sent (signaled) out.\n     */\n    constructor(options = {}) {\n        this._options = {\n            pcConfig: {},\n            isInitiator: false,\n            receiveAudio: false,\n            receiveVideo: false,\n            ...options\n        };\n\n        /**\n         * Instances of {@code JitsiTrack} associated with this instance of\n         * {@code ProxyConnectionPC}.\n         *\n         * @type {Array<JitsiTrack>}\n         */\n        this._tracks = [];\n\n        /**\n         * The active instance of {@code JingleSessionPC}.\n         *\n         * @type {JingleSessionPC|null}\n         */\n        this._peerConnection = null;\n\n        // Bind event handlers so they are only bound once for every instance.\n        this._onError = this._onError.bind(this);\n        this._onRemoteStream = this._onRemoteStream.bind(this);\n        this._onSendMessage = this._onSendMessage.bind(this);\n    }\n\n    /**\n     * Returns the jid of the remote peer with which this peer connection should\n     * be established with.\n     *\n     * @returns {string}\n     */\n    getPeerJid() {\n        return this._options.peerJid;\n    }\n\n    /**\n     * Updates the peer connection based on the passed in jingle.\n     *\n     * @param {Object} $jingle - An XML jingle element, wrapped in query,\n     * describing how the peer connection should be updated.\n     * @returns {void}\n     */\n    processMessage($jingle) {\n        switch ($jingle.attr('action')) {\n        case ACTIONS.ACCEPT:\n            this._onSessionAccept($jingle);\n            break;\n\n        case ACTIONS.INITIATE:\n            this._onSessionInitiate($jingle);\n            break;\n\n        case ACTIONS.TERMINATE:\n            this._onSessionTerminate($jingle);\n            break;\n\n        case ACTIONS.TRANSPORT_INFO:\n            this._onTransportInfo($jingle);\n            break;\n        }\n    }\n\n    /**\n     * Instantiates a peer connection and starts the offer/answer cycle to\n     * establish a connection with a remote peer.\n     *\n     * @param {Array<JitsiLocalTrack>} localTracks - Initial local tracks to add\n     * to add to the peer connection.\n     * @returns {void}\n     */\n    start(localTracks = []) {\n        if (this._peerConnection) {\n            return;\n        }\n\n        this._tracks = this._tracks.concat(localTracks);\n\n        this._peerConnection = this._createPeerConnection();\n\n        this._peerConnection.invite(localTracks);\n    }\n\n    /**\n     * Begins the process of disconnecting from a remote peer and cleaning up\n     * the peer connection.\n     *\n     * @returns {void}\n     */\n    stop() {\n        if (this._peerConnection) {\n            this._peerConnection.terminate();\n        }\n\n        this._onSessionTerminate();\n    }\n\n    /**\n     * Instantiates a new {@code JingleSessionPC} by stubbing out the various\n     * dependencies of {@code JingleSessionPC}.\n     *\n     * @private\n     * @returns {JingleSessionPC}\n     */\n    _createPeerConnection() {\n        /**\n         * {@code JingleSessionPC} takes in the entire jitsi-meet config.js\n         * object, which may not be accessible from the caller.\n         *\n         * @type {Object}\n         */\n        const configStub = {};\n\n        /**\n         * {@code JingleSessionPC} assumes an XMPP/Strophe connection object is\n         * passed through, which also has the jingle plugin initialized on it.\n         * This connection object is used to signal out peer connection updates\n         * via iqs, and those updates need to be piped back out to the remote\n         * peer.\n         *\n         * @type {Object}\n         */\n        const connectionStub = {\n            // At the time this is used for Spot and it's okay to say the connection is always connected, because if\n            // spot has no signalling it will not be in a meeting where this is used.\n            connected: true,\n            jingle: {\n                terminate: () => { /** no-op */ }\n            },\n            sendIQ: this._onSendMessage,\n\n            // Returns empty function, because it does not add any listeners for real\n            // eslint-disable-next-line no-empty-function\n            addEventListener: () => () => { }\n        };\n\n        /**\n         * {@code JingleSessionPC} can take in a custom ice configuration,\n         * depending on the peer connection type, peer-to-peer or other.\n         * However, {@code ProxyConnectionPC} always assume a peer-to-peer\n         * connection so the ice configuration is hard-coded with defaults.\n         *\n         * @type {Object}\n         */\n        const pcConfigStub = {\n            iceServers: DEFAULT_STUN_SERVERS,\n            ...this._options.pcConfig\n        };\n\n        /**\n         * {@code JingleSessionPC} expects an instance of\n         * {@code JitsiConference}, which has an event emitter that is used\n         * to signal various connection updates that the local client should\n         * act upon. The conference instance is not a dependency of a proxy\n         * connection, but the emitted events can be relevant to the proxy\n         * connection so the event emitter is stubbed.\n         *\n         * @param {string} event - The constant for the event type.\n         * @type {Function}\n         * @returns {void}\n         */\n        const emitter = event => {\n            switch (event) {\n            case XMPPEvents.CONNECTION_ICE_FAILED:\n            case XMPPEvents.CONNECTION_FAILED:\n                this._onError(ACTIONS.CONNECTION_ERROR, event);\n                break;\n            }\n        };\n\n        /**\n         * {@link JingleSessionPC} expects an instance of\n         * {@link ChatRoom} to be passed in. {@link ProxyConnectionPC}\n         * is instantiated outside of the {@code JitsiConference}, so it must be\n         * stubbed to prevent errors.\n         *\n         * @type {Object}\n         */\n        const roomStub = {\n            addPresenceListener: () => { /** no-op */ },\n            connectionTimes: [],\n            eventEmitter: { emit: emitter },\n            getMediaPresenceInfo: () => {\n                // Errors occur if this function does not return an object\n\n                return {};\n            },\n            removePresenceListener: () => { /** no-op */ },\n            supportsRestartByTerminate: () => false\n        };\n\n        /**\n         * A {@code JitsiConference} stub passed to the {@link RTC} module.\n         * @type {Object}\n         */\n        const conferenceStub = {\n            myUserId: () => ''\n        };\n\n        /**\n         * Create an instance of {@code RTC} as it is required for peer\n         * connection creation by {@code JingleSessionPC}. An existing instance\n         * of {@code RTC} from elsewhere should not be re-used because it is\n         * a stateful grouping of utilities.\n         */\n        this._rtc = new RTC(conferenceStub, {});\n\n        /**\n         * Add the remote track listener here as {@code JingleSessionPC} has\n         * {@code TraceablePeerConnection} which uses {@code RTC}'s event\n         * emitter.\n         */\n        this._rtc.addListener(\n            RTCEvents.REMOTE_TRACK_ADDED,\n            this._onRemoteStream\n        );\n\n        const peerConnection = new JingleSessionPC(\n            undefined, // sid\n            undefined, // localJid\n            this._options.peerJid, // remoteJid\n            connectionStub, // connection\n            {\n                offerToReceiveAudio: this._options.receiveAudio,\n                offerToReceiveVideo: this._options.receiveVideo\n            }, // mediaConstraints\n            pcConfigStub, // pcConfig\n            true, // isP2P\n            this._options.isInitiator // isInitiator\n        );\n\n        const signalingLayer = new SignalingLayerImpl();\n\n        signalingLayer.setChatRoom(roomStub);\n\n        /**\n         * An additional initialize call is necessary to properly set instance\n         * variable for calling.\n         */\n        peerConnection.initialize(roomStub, this._rtc, signalingLayer, configStub);\n\n        return peerConnection;\n    }\n\n    /**\n     * Invoked when a connection related issue has been encountered.\n     *\n     * @param {string} errorType - The constant indicating the type of the error\n     * that occured.\n     * @param {string} details - Optional additional data about the error.\n     * @private\n     * @returns {void}\n     */\n    _onError(errorType, details = '') {\n        this._options.onError(this._options.peerJid, errorType, details);\n    }\n\n    /**\n     * Callback invoked when the peer connection has received a remote media\n     * stream.\n     *\n     * @param {JitsiRemoteTrack} jitsiRemoteTrack - The remote media stream\n     * wrapped in {@code JitsiRemoteTrack}.\n     * @private\n     * @returns {void}\n     */\n    _onRemoteStream(jitsiRemoteTrack) {\n        this._tracks.push(jitsiRemoteTrack);\n\n        this._options.onRemoteStream(jitsiRemoteTrack);\n    }\n\n    /**\n     * Callback invoked when {@code JingleSessionPC} needs to signal a message\n     * out to the remote peer.\n     *\n     * @param {XML} iq - The message to signal out.\n     * @private\n     * @returns {void}\n     */\n    _onSendMessage(iq) {\n        this._options.onSendMessage(this._options.peerJid, iq);\n    }\n\n    /**\n     * Callback invoked in response to an agreement to start a proxy connection.\n     * The passed in jingle element should contain an SDP answer to a previously\n     * sent SDP offer.\n     *\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\n     * @private\n     * @returns {void}\n     */\n    _onSessionAccept($jingle) {\n        if (!this._peerConnection) {\n            logger.error('Received an answer when no peer connection exists.');\n\n            return;\n        }\n\n        this._peerConnection.setAnswer($jingle);\n    }\n\n    /**\n     * Callback invoked in response to a request to start a proxy connection.\n     * The passed in jingle element should contain an SDP offer.\n     *\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\n     * @private\n     * @returns {void}\n     */\n    _onSessionInitiate($jingle) {\n        if (this._peerConnection) {\n            logger.error('Received an offer when an offer was already sent.');\n\n            return;\n        }\n\n        this._peerConnection = this._createPeerConnection();\n\n        this._peerConnection.acceptOffer(\n            $jingle,\n            () => { /** no-op */ },\n            () => this._onError(\n                this._options.peerJid,\n                ACTIONS.CONNECTION_ERROR,\n                'session initiate error'\n            )\n        );\n    }\n\n    /**\n     * Callback invoked in response to a request to disconnect an active proxy\n     * connection. Cleans up tracks and the peer connection.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onSessionTerminate() {\n        this._tracks.forEach(track => track.dispose());\n        this._tracks = [];\n\n        if (this._peerConnection) {\n            this._peerConnection.onTerminated();\n        }\n\n        if (this._rtc) {\n            this._rtc.removeListener(\n                RTCEvents.REMOTE_TRACK_ADDED,\n                this._onRemoteStream\n            );\n\n            this._rtc.destroy();\n        }\n    }\n\n    /**\n     * Callback invoked in response to ICE candidates from the remote peer.\n     * The passed in jingle element should contain an ICE candidate.\n     *\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\n     * @private\n     * @returns {void}\n     */\n    _onTransportInfo($jingle) {\n        this._peerConnection.addIceCandidates($jingle);\n    }\n}\n","/* globals $ */\n\nimport { getLogger } from '@jitsi/logger';\nimport { $iq } from 'strophe.js';\n\nimport { MediaType } from '../../service/RTC/MediaType';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport RTC from '../RTC/RTC';\n\nimport ProxyConnectionPC from './ProxyConnectionPC';\nimport { ACTIONS } from './constants';\n\nconst logger = getLogger(__filename);\n\n/**\n * Instantiates a new ProxyConnectionPC and ensures only one exists at a given\n * time. Currently it assumes ProxyConnectionPC is used only for screensharing\n * and assumes IQs to be used for communication.\n */\nexport default class ProxyConnectionService {\n    /**\n     * Initializes a new {@code ProxyConnectionService} instance.\n     *\n     * @param {Object} options - Values to initialize the instance with.\n     * @param {boolean} [options.convertVideoToDesktop] - Whether or not proxied video should be returned as a desktop\n     * stream. Defaults to false.\n     * @param {Object} [options.pcConfig] - The {@code RTCConfiguration} to use for the WebRTC peer connection.\n     * @param {JitsiConnection} [options.jitsiConnection] - The {@code JitsiConnection} which will be used to fetch\n     * TURN credentials for the P2P connection.\n     * @param {Function} options.onRemoteStream - Callback to invoke when a remote video stream has been received and\n     * converted to a {@code JitsiLocakTrack}. The {@code JitsiLocakTrack} will be passed in.\n     * @param {Function} options.onSendMessage - Callback to invoke when a message has to be sent (signaled) out. The\n     * arguments passed in are the jid to send the message to and the message.\n     */\n    constructor(options = {}) {\n        const {\n            jitsiConnection,\n            ...otherOptions\n        } = options;\n\n        /**\n         * Holds a reference to the collection of all callbacks.\n         *\n         * @type {Object}\n         */\n        this._options = {\n            pcConfig: jitsiConnection && jitsiConnection.xmpp.connection.jingle.p2pIceConfig,\n            ...otherOptions\n        };\n\n        /**\n         * The active instance of {@code ProxyConnectionService}.\n         *\n         * @type {ProxyConnectionPC|null}\n         */\n        this._peerConnection = null;\n\n        // Bind event handlers so they are only bound once for every instance.\n        this._onFatalError = this._onFatalError.bind(this);\n        this._onSendMessage = this._onSendMessage.bind(this);\n        this._onRemoteStream = this._onRemoteStream.bind(this);\n    }\n\n    /**\n     * Parses a message object regarding a proxy connection to create a new\n     * proxy connection or update and existing connection.\n     *\n     * @param {Object} message - A message object regarding establishing or\n     * updating a proxy connection.\n     * @param {Object} message.data - An object containing additional message\n     * details.\n     * @param {string} message.data.iq - The stringified iq which explains how\n     * and what to update regarding the proxy connection.\n     * @param {string} message.from - The message sender's full jid. Used for\n     * sending replies.\n     * @returns {void}\n     */\n    processMessage(message) {\n        const peerJid = message.from;\n\n        if (!peerJid) {\n            return;\n        }\n\n        // If a proxy connection has already been established and messages come\n        // from another peer jid then those messages should be replied to with\n        // a rejection.\n        if (this._peerConnection\n            && this._peerConnection.getPeerJid() !== peerJid) {\n            this._onFatalError(\n                peerJid,\n                ACTIONS.CONNECTION_ERROR,\n                'rejected'\n            );\n\n            return;\n        }\n\n        const iq = this._convertStringToXML(message.data.iq);\n        const $jingle = iq && iq.find('jingle');\n        const action = $jingle && $jingle.attr('action');\n\n        if (action === ACTIONS.INITIATE) {\n            this._peerConnection = this._createPeerConnection(peerJid, {\n                isInitiator: false,\n                receiveVideo: true\n            });\n        }\n\n        // Truthy check for peer connection added to protect against possibly\n        // receiving actions before an ACTIONS.INITIATE.\n        if (this._peerConnection) {\n            this._peerConnection.processMessage($jingle);\n        }\n\n        // Take additional steps to ensure the peer connection is cleaned up\n        // if it is to be closed.\n        if (action === ACTIONS.CONNECTION_ERROR\n            || action === ACTIONS.UNAVAILABLE\n            || action === ACTIONS.TERMINATE) {\n            this._selfCloseConnection();\n        }\n\n        return;\n    }\n\n    /**\n     * Instantiates and initiates a proxy peer connection.\n     *\n     * @param {string} peerJid - The jid of the remote client that should\n     * receive messages.\n     * @param {Array<JitsiLocalTrack>} localTracks - Initial media tracks to\n     * send through to the peer.\n     * @returns {void}\n     */\n    start(peerJid, localTracks = []) {\n        this._peerConnection = this._createPeerConnection(peerJid, {\n            isInitiator: true,\n            receiveVideo: false\n        });\n\n        this._peerConnection.start(localTracks);\n    }\n\n    /**\n     * Terminates any active proxy peer connection.\n     *\n     * @returns {void}\n     */\n    stop() {\n        if (this._peerConnection) {\n            this._peerConnection.stop();\n        }\n\n        this._peerConnection = null;\n    }\n\n    /**\n     * Transforms a stringified xML into a XML wrapped in jQuery.\n     *\n     * @param {string} xml - The XML in string form.\n     * @private\n     * @returns {Object|null} A jQuery version of the xml. Null will be returned\n     * if an error is encountered during transformation.\n     */\n    _convertStringToXML(xml) {\n        try {\n            const xmlDom = new DOMParser().parseFromString(xml, 'text/xml');\n\n            return $(xmlDom);\n        } catch (e) {\n            logger.error('Attempted to convert incorrectly formatted xml');\n\n            return null;\n        }\n    }\n\n    /**\n     * Helper for creating an instance of {@code ProxyConnectionPC}.\n     *\n     * @param {string} peerJid - The jid of the remote peer with which the\n     * {@code ProxyConnectionPC} will be established with.\n     * @param {Object} options - Additional defaults to instantiate the\n     * {@code ProxyConnectionPC} with. See the constructor of ProxyConnectionPC\n     * for more details.\n     * @private\n     * @returns {ProxyConnectionPC}\n     */\n    _createPeerConnection(peerJid, options = {}) {\n        if (!peerJid) {\n            throw new Error('Cannot create ProxyConnectionPC without a peer.');\n        }\n\n        const pcOptions = {\n            pcConfig: this._options.pcConfig,\n            onError: this._onFatalError,\n            onRemoteStream: this._onRemoteStream,\n            onSendMessage: this._onSendMessage,\n            peerJid,\n            ...options\n        };\n\n        return new ProxyConnectionPC(pcOptions);\n    }\n\n    /**\n     * Callback invoked when an error occurs that should cause\n     * {@code ProxyConnectionPC} to be closed if the peer is currently\n     * connected. Sends an error message/reply back to the peer.\n     *\n     * @param {string} peerJid - The peer jid with which the connection was\n     * attempted or started, and to which an iq with error details should be\n     * sent.\n     * @param {string} errorType - The constant indicating the type of the error\n     * that occured.\n     * @param {string} details - Optional additional data about the error.\n     * @private\n     * @returns {void}\n     */\n    _onFatalError(peerJid, errorType, details = '') {\n        logger.error(\n            'Received a proxy connection error', peerJid, errorType, details);\n\n        const iq = $iq({\n            to: peerJid,\n            type: 'set'\n        })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: errorType\n            })\n            .c('details')\n            .t(details)\n            .up();\n\n        this._onSendMessage(peerJid, iq);\n\n        if (this._peerConnection\n            && this._peerConnection.getPeerJid() === peerJid) {\n            this._selfCloseConnection();\n        }\n    }\n\n    /**\n     * Callback invoked when the remote peer of the {@code ProxyConnectionPC}\n     * has offered a media stream. The stream is converted into a\n     * {@code JitsiLocalTrack} for local usage if the {@code onRemoteStream}\n     * callback is defined.\n     *\n     * @param {JitsiRemoteTrack} jitsiRemoteTrack - The {@code JitsiRemoteTrack}\n     * for the peer's media stream.\n     * @private\n     * @returns {void}\n     */\n    _onRemoteStream(jitsiRemoteTrack) {\n        if (!this._options.onRemoteStream) {\n            logger.error('Remote track received without callback.');\n            jitsiRemoteTrack.dispose();\n\n            return;\n        }\n\n        const isVideo = jitsiRemoteTrack.isVideoTrack();\n        let videoType;\n\n        if (isVideo) {\n            videoType = this._options.convertVideoToDesktop\n                ? VideoType.DESKTOP : VideoType.CAMERA;\n        }\n\n        // Grab the webrtc media stream and pipe it through the same processing\n        // that would occur for a locally obtained media stream.\n        const mediaStream = jitsiRemoteTrack.getOriginalStream();\n        const jitsiLocalTracks = RTC.createLocalTracks(\n            [\n                {\n                    deviceId:\n                        `proxy:${this._peerConnection.getPeerJid()}`,\n                    mediaType: isVideo ? MediaType.VIDEO : MediaType.AUDIO,\n                    sourceType: 'proxy',\n                    stream: mediaStream,\n                    track: mediaStream.getVideoTracks()[0],\n                    videoType\n                }\n            ]);\n\n        this._options.onRemoteStream(jitsiLocalTracks[0]);\n    }\n\n    /**\n     * Formats and forwards a message an iq to be sent to a peer jid.\n     *\n     * @param {string} peerJid - The jid the iq should be sent to.\n     * @param {Object} iq - The iq which would be sent to the peer jid.\n     * @private\n     * @returns {void}\n     */\n    _onSendMessage(peerJid, iq) {\n        if (!this._options.onSendMessage) {\n            return;\n        }\n\n        try {\n            const stringifiedIq\n                = new XMLSerializer().serializeToString(iq.nodeTree || iq);\n\n            this._options.onSendMessage(peerJid, { iq: stringifiedIq });\n        } catch (e) {\n            logger.error('Attempted to send an incorrectly formatted iq.');\n        }\n    }\n\n    /**\n     * Invoked when preemptively closing the {@code ProxyConnectionPC}.\n     *\n     * @private\n     * @returns {void}\n     */\n    _selfCloseConnection() {\n        this.stop();\n\n        this._options.onConnectionClosed\n            && this._options.onConnectionClosed();\n    }\n}\n","import EventEmitter from 'events';\n\nimport browser from '../browser';\nimport Settings from '../settings/Settings';\nimport ScriptUtil from '../util/ScriptUtil';\n\nimport { CALLSTATS_SCRIPT_URL } from './constants';\n\nconst PRECALL_TEST_RESULTS = 'preCallTestResults';\nconst emitter = new EventEmitter();\nlet _initialized = false;\nlet api = null;\n\n/**\n * Loads the callstats io script.\n *\n * @returns {Promise<void>}\n */\nfunction _loadScript(options) {\n    if (browser.isReactNative()) {\n        return;\n    }\n\n    return new Promise(resolve => {\n        ScriptUtil.loadScript(\n            options.callStatsCustomScriptUrl || CALLSTATS_SCRIPT_URL,\n            /* async */ true,\n            /* prepend */ true,\n            /* relativeURL */ undefined,\n            /* loadCallback */ resolve);\n    });\n}\n\n/**\n * Initializes the callstats lib and registers a callback to be invoked\n * when there are 'preCallTestResults'.\n *\n * @typedef PrecallTestOptions\n * @type {Object}\n * @property {string} callStatsID - Callstats credentials - the id.\n * @property {string} callStatsSecret - Callstats credentials - the secret.\n * @property {string} statisticsId - The user name to use when initializing callstats.\n * @property {string} statisticsDisplayName - The user display name.\n *\n * @param { PrecallTestOptions} options - The init options.\n * @returns {Promise<void>}\n */\nfunction _initialize(options) {\n    return new Promise((resolve, reject) => {\n        const appId = options.callStatsID;\n        const appSecret = options.callStatsSecret;\n        const userId = options.statisticsId || options.statisticsDisplayName || Settings.callStatsUserName;\n\n        api.initialize(appId, appSecret, userId, (status, message) => {\n            if (status === 'success') {\n                api.on(PRECALL_TEST_RESULTS, (...args) => {\n                    emitter.emit(PRECALL_TEST_RESULTS, ...args);\n                });\n                _initialized = true;\n                resolve();\n            } else {\n                reject({\n                    status,\n                    message\n                });\n            }\n        }, null, { disablePrecalltest: true });\n    });\n}\n\n/**\n * Loads the callstats script and initializes the library.\n *\n * @param {Function} onResult - The callback to be invoked when results are received.\n * @returns {Promise<void>}\n */\nexport async function init(options) {\n    if (_initialized) {\n        throw new Error('Precall Test already initialized');\n    }\n\n    const { callStatsID, callStatsSecret, disableThirdPartyRequests } = options;\n\n    if (!callStatsID || !callStatsSecret || disableThirdPartyRequests) {\n        throw new Error('Callstats is disabled');\n    }\n\n    await _loadScript(options);\n    // eslint-disable-next-line new-cap\n    api = new window.callstats();\n\n    return _initialize(options);\n}\n\n/**\n * Executes a pre call test.\n *\n * @typedef PrecallTestResults\n * @type {Object}\n * @property {boolean} mediaConnectivity - If there is media connectivity or not.\n * @property {number} throughput  - The average throughput.\n * @property {number} fractionalLoss - The packet loss.\n * @property {number} rtt - The round trip time.\n * @property {string} provider - It is usually 'callstats'.\n *\n * @returns {Promise<{PrecallTestResults}>}\n */\nexport function execute() {\n    if (!_initialized) {\n        return Promise.reject('uninitialized');\n    }\n\n    return new Promise((resolve, reject) => {\n        emitter.on(PRECALL_TEST_RESULTS, (status, payload) => {\n            if (status === 'success') {\n                resolve(payload);\n            } else {\n                reject({\n                    status,\n                    payload\n                });\n            }\n\n        });\n\n        api.makePrecallTest();\n    });\n}\n\nexport default {\n    init,\n    execute\n};\n","import { getLogger } from '@jitsi/logger';\n\nimport { createAudioContext } from './WebAudioUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * The AudioMixer, as the name implies, mixes a number of MediaStreams containing audio tracks into a single\n * MediaStream.\n */\nexport default class AudioMixer {\n    /**\n     * Create AudioMixer instance.\n     */\n    constructor() {\n        this._started = false;\n        this._streamsToMix = [];\n        this._streamMSSArray = [];\n    }\n\n    /**\n     * Add audio MediaStream to be mixed, if the stream doesn't contain any audio tracks it will be ignored.\n     *\n     * @param {MediaStream} stream - MediaStream to be mixed.\n     */\n    addMediaStream(stream) {\n        if (!stream.getAudioTracks()) {\n            logger.warn('Added MediaStream doesn\\'t contain audio tracks.');\n        }\n\n        this._streamsToMix.push(stream);\n    }\n\n    /**\n     * At this point a WebAudio ChannelMergerNode is created and and the two associated MediaStreams are connected to\n     * it; the resulting mixed MediaStream is returned.\n     *\n     * @returns {MediaStream} - MediaStream containing added streams mixed together, or null if no MediaStream\n     * is added.\n     */\n    start() {\n        // If the mixer was already started just return the existing mixed stream.\n        if (this._started) {\n            return this._mixedMSD.stream;\n        }\n\n        this._audioContext = createAudioContext();\n\n        if (!this._streamsToMix.length) {\n            logger.warn('No MediaStream\\'s added to AudioMixer, nothing will happen.');\n\n            return null;\n        }\n\n        this._started = true;\n\n        this._mixedMSD = this._audioContext.createMediaStreamDestination();\n\n        for (const stream of this._streamsToMix) {\n            const streamMSS = this._audioContext.createMediaStreamSource(stream);\n\n            streamMSS.connect(this._mixedMSD);\n\n            // Maintain a list of MediaStreamAudioSourceNode so we can disconnect them on reset.\n            this._streamMSSArray.push(streamMSS);\n        }\n\n        return this._mixedMSD.stream;\n    }\n\n    /**\n     * Disconnect MediaStreamAudioSourceNode and clear references.\n     *\n     * @returns {void}\n     */\n    reset() {\n        this._started = false;\n        this._streamsToMix = [];\n\n        // Clean up created MediaStreamAudioSourceNode.\n        for (const streamMSS of this._streamMSSArray) {\n            streamMSS.disconnect();\n        }\n\n        this._streamMSSArray = [];\n\n        if (this._audioContext) {\n            this._audioContext = undefined;\n        }\n    }\n}\n","export enum E2ePingEvents {\n    /**\n     * Indicates that the end-to-end round-trip-time for a participant has changed.\n     */\n    E2E_RTT_CHANGED = 'e2eping.e2e_rtt_changed'\n};\n\n// exported for backward compatibility\nexport const E2E_RTT_CHANGED = E2ePingEvents.E2E_RTT_CHANGED;\n","// @flow\n\n/**\n * SET_INTERVAL constant is used to set interval and it is set in\n * the id property of the request.data property. timeMs property must\n * also be set. request.data example:\n *\n * {\n *      id: SET_INTERVAL,\n *      timeMs: 33\n * }\n */\nexport const SET_INTERVAL = 1;\n\n/**\n * CLEAR_INTERVAL constant is used to clear the interval and it is set in\n * the id property of the request.data property.\n *\n * {\n *      id: CLEAR_INTERVAL\n * }\n */\nexport const CLEAR_INTERVAL = 2;\n\n/**\n * INTERVAL_TIMEOUT constant is used as response and it is set in the id\n * property.\n *\n * {\n *      id: INTERVAL_TIMEOUT\n * }\n */\nexport const INTERVAL_TIMEOUT = 3;\n\n/**\n * The following code is needed as string to create a URL from a Blob.\n * The URL is then passed to a WebWorker. Reason for this is to enable\n * use of setInterval that is not throttled when tab is inactive.\n */\nconst code = `\n    var timer;\n\n    onmessage = function(request) {\n        switch (request.data.id) {\n        case ${SET_INTERVAL}: {\n            timer = setInterval(() => {\n                postMessage({ id: ${INTERVAL_TIMEOUT} });\n            }, request.data.timeMs);\n            break;\n        }\n        case ${CLEAR_INTERVAL}: {\n            if (timer) {\n                clearInterval(timer);\n            }\n            break;\n        }\n        }\n    };\n`;\n\nexport const timerWorkerScript\n    = URL.createObjectURL(new Blob([ code ], { type: 'application/javascript' }));\n","// @flow\n\nimport {\n    CLEAR_INTERVAL,\n    INTERVAL_TIMEOUT,\n    SET_INTERVAL,\n    timerWorkerScript\n} from './TimeWorker';\n\n/**\n * Represents a modified MediaStream that adds video as pip on a desktop stream.\n * <tt>JitsiStreamPresenterEffect</tt> does the processing of the original\n * desktop stream.\n */\nexport default class JitsiStreamPresenterEffect {\n    /**\n     * Represents a modified MediaStream that adds a camera track at the\n     * bottom right corner of the desktop track using a HTML canvas.\n     * <tt>JitsiStreamPresenterEffect</tt> does the processing of the original\n     * video stream.\n     *\n     * @param {MediaStream} videoStream - The video stream which is user for\n     * creating the canvas.\n     */\n    constructor(videoStream) {\n        const videoDiv = document.createElement('div');\n        const firstVideoTrack = videoStream.getVideoTracks()[0];\n        const { height, width, frameRate } = firstVideoTrack.getSettings() ?? firstVideoTrack.getConstraints();\n\n        this._canvas = document.createElement('canvas');\n        this._ctx = this._canvas.getContext('2d');\n\n        this._desktopElement = document.createElement('video');\n        this._videoElement = document.createElement('video');\n        videoDiv.appendChild(this._videoElement);\n        videoDiv.appendChild(this._desktopElement);\n        if (document.body !== null) {\n            document.body.appendChild(videoDiv);\n        }\n\n        // Set the video element properties\n        this._frameRate = parseInt(frameRate, 10);\n        this._videoElement.width = parseInt(width, 10);\n        this._videoElement.height = parseInt(height, 10);\n        this._videoElement.autoplay = true;\n        this._videoElement.srcObject = videoStream;\n\n        // autoplay is not enough to start the video on Safari, it's fine to call play() on other platforms as well\n        this._videoElement.play();\n\n        // set the style attribute of the div to make it invisible\n        videoDiv.style.display = 'none';\n\n        // Bind event handler so it is only bound once for every instance.\n        this._onVideoFrameTimer = this._onVideoFrameTimer.bind(this);\n    }\n\n    /**\n     * EventHandler onmessage for the videoFrameTimerWorker WebWorker.\n     *\n     * @private\n     * @param {EventHandler} response - The onmessage EventHandler parameter.\n     * @returns {void}\n     */\n    _onVideoFrameTimer(response) {\n        if (response.data.id === INTERVAL_TIMEOUT) {\n            this._renderVideo();\n        }\n    }\n\n    /**\n     * Loop function to render the video frame input and draw presenter effect.\n     *\n     * @private\n     * @returns {void}\n     */\n    _renderVideo() {\n        // adjust the canvas width/height on every frame incase the window has been resized.\n        const [ track ] = this._desktopStream.getVideoTracks();\n        const { height, width } = track.getSettings() ?? track.getConstraints();\n\n        this._canvas.width = parseInt(width, 10);\n        this._canvas.height = parseInt(height, 10);\n        this._ctx.drawImage(this._desktopElement, 0, 0, this._canvas.width, this._canvas.height);\n        this._ctx.drawImage(this._videoElement, this._canvas.width - this._videoElement.width, this._canvas.height\n            - this._videoElement.height, this._videoElement.width, this._videoElement.height);\n\n        // draw a border around the video element.\n        this._ctx.beginPath();\n        this._ctx.lineWidth = 2;\n        this._ctx.strokeStyle = '#A9A9A9'; // dark grey\n        this._ctx.rect(this._canvas.width - this._videoElement.width, this._canvas.height - this._videoElement.height,\n            this._videoElement.width, this._videoElement.height);\n        this._ctx.stroke();\n    }\n\n    /**\n     * Checks if the local track supports this effect.\n     *\n     * @param {JitsiLocalTrack} jitsiLocalTrack - Track to apply effect.\n     * @returns {boolean} - Returns true if this effect can run on the\n     * specified track, false otherwise.\n     */\n    isEnabled(jitsiLocalTrack) {\n        return jitsiLocalTrack.isVideoTrack() && jitsiLocalTrack.videoType === 'desktop';\n    }\n\n    /**\n     * Starts loop to capture video frame and render presenter effect.\n     *\n     * @param {MediaStream} desktopStream - Stream to be used for processing.\n     * @returns {MediaStream} - The stream with the applied effect.\n     */\n    startEffect(desktopStream) {\n        const firstVideoTrack = desktopStream.getVideoTracks()[0];\n        const { height, width } = firstVideoTrack.getSettings() ?? firstVideoTrack.getConstraints();\n\n        // set the desktop element properties.\n        this._desktopStream = desktopStream;\n        this._desktopElement.width = parseInt(width, 10);\n        this._desktopElement.height = parseInt(height, 10);\n        this._desktopElement.autoplay = true;\n        this._desktopElement.srcObject = desktopStream;\n\n        // autoplay is not enough to start the video on Safari, it's fine to call play() on other platforms as well\n        this._desktopElement.play();\n\n        this._canvas.width = parseInt(width, 10);\n        this._canvas.height = parseInt(height, 10);\n        this._videoFrameTimerWorker = new Worker(timerWorkerScript, { name: 'Presenter effect worker' });\n        this._videoFrameTimerWorker.onmessage = this._onVideoFrameTimer;\n        this._videoFrameTimerWorker.postMessage({\n            id: SET_INTERVAL,\n            timeMs: 1000 / this._frameRate\n        });\n\n        return this._canvas.captureStream(this._frameRate);\n    }\n\n    /**\n     * Stops the capture and render loop.\n     *\n     * @returns {void}\n     */\n    stopEffect() {\n        this._videoFrameTimerWorker.postMessage({\n            id: CLEAR_INTERVAL\n        });\n        this._videoFrameTimerWorker.terminate();\n    }\n\n}\n","\nvar Module = (function() {\n  var _scriptDir = \"https://sdk.sariska.io/\";\n  \n  return (\nfunction(Module) {\n  Module = Module || {};\n\nnull;var Module=typeof Module!==\"undefined\"?Module:{};var readyPromiseResolve,readyPromiseReject;Module[\"ready\"]=new Promise(function(resolve,reject){readyPromiseResolve=resolve;readyPromiseReject=reject});var moduleOverrides={};var key;for(key in Module){if(Module.hasOwnProperty(key)){moduleOverrides[key]=Module[key]}}var arguments_=[];var thisProgram=\"./this.program\";var quit_=function(status,toThrow){throw toThrow};var ENVIRONMENT_IS_WEB=false;var ENVIRONMENT_IS_WORKER=false;var ENVIRONMENT_IS_NODE=false;var ENVIRONMENT_IS_SHELL=false;ENVIRONMENT_IS_WEB=typeof window===\"object\";ENVIRONMENT_IS_WORKER=typeof importScripts===\"function\";ENVIRONMENT_IS_NODE=typeof process===\"object\"&&typeof process.versions===\"object\"&&typeof process.versions.node===\"string\";ENVIRONMENT_IS_SHELL=!ENVIRONMENT_IS_WEB&&!ENVIRONMENT_IS_NODE&&!ENVIRONMENT_IS_WORKER;var scriptDirectory=\"\";function locateFile(path){if(Module[\"locateFile\"]){return Module[\"locateFile\"](path,scriptDirectory)}return scriptDirectory+path}var read_,readAsync,readBinary,setWindowTitle;if(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER){if(ENVIRONMENT_IS_WORKER){scriptDirectory=self.location.href}else if(document.currentScript){scriptDirectory=document.currentScript.src}if(_scriptDir){scriptDirectory=_scriptDir}if(scriptDirectory.indexOf(\"blob:\")!==0){scriptDirectory=scriptDirectory.substr(0,scriptDirectory.lastIndexOf(\"/\")+1)}else{scriptDirectory=\"\"}{read_=function shell_read(url){var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,false);xhr.send(null);return xhr.responseText};if(ENVIRONMENT_IS_WORKER){readBinary=function readBinary(url){var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,false);xhr.responseType=\"arraybuffer\";xhr.send(null);return new Uint8Array(xhr.response)}}readAsync=function readAsync(url,onload,onerror){var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,true);xhr.responseType=\"arraybuffer\";xhr.onload=function xhr_onload(){if(xhr.status==200||xhr.status==0&&xhr.response){onload(xhr.response);return}onerror()};xhr.onerror=onerror;xhr.send(null)}}setWindowTitle=function(title){document.title=title}}else{}var out=Module[\"print\"]||console.log.bind(console);var err=Module[\"printErr\"]||console.warn.bind(console);for(key in moduleOverrides){if(moduleOverrides.hasOwnProperty(key)){Module[key]=moduleOverrides[key]}}moduleOverrides=null;if(Module[\"arguments\"])arguments_=Module[\"arguments\"];if(Module[\"thisProgram\"])thisProgram=Module[\"thisProgram\"];if(Module[\"quit\"])quit_=Module[\"quit\"];var wasmBinary;if(Module[\"wasmBinary\"])wasmBinary=Module[\"wasmBinary\"];var noExitRuntime;if(Module[\"noExitRuntime\"])noExitRuntime=Module[\"noExitRuntime\"];if(typeof WebAssembly!==\"object\"){err(\"no native wasm support detected\")}var wasmMemory;var wasmTable=new WebAssembly.Table({\"initial\":1,\"maximum\":1+0,\"element\":\"anyfunc\"});var ABORT=false;var EXITSTATUS=0;var WASM_PAGE_SIZE=65536;function alignUp(x,multiple){if(x%multiple>0){x+=multiple-x%multiple}return x}var buffer,HEAP8,HEAPU8,HEAP16,HEAPU16,HEAP32,HEAPU32,HEAPF32,HEAPF64;function updateGlobalBufferAndViews(buf){buffer=buf;Module[\"HEAP8\"]=HEAP8=new Int8Array(buf);Module[\"HEAP16\"]=HEAP16=new Int16Array(buf);Module[\"HEAP32\"]=HEAP32=new Int32Array(buf);Module[\"HEAPU8\"]=HEAPU8=new Uint8Array(buf);Module[\"HEAPU16\"]=HEAPU16=new Uint16Array(buf);Module[\"HEAPU32\"]=HEAPU32=new Uint32Array(buf);Module[\"HEAPF32\"]=HEAPF32=new Float32Array(buf);Module[\"HEAPF64\"]=HEAPF64=new Float64Array(buf)}var DYNAMIC_BASE=5340496,DYNAMICTOP_PTR=97456;var INITIAL_INITIAL_MEMORY=Module[\"INITIAL_MEMORY\"]||16777216;if(Module[\"wasmMemory\"]){wasmMemory=Module[\"wasmMemory\"]}else{wasmMemory=new WebAssembly.Memory({\"initial\":INITIAL_INITIAL_MEMORY/WASM_PAGE_SIZE,\"maximum\":2147483648/WASM_PAGE_SIZE})}if(wasmMemory){buffer=wasmMemory.buffer}INITIAL_INITIAL_MEMORY=buffer.byteLength;updateGlobalBufferAndViews(buffer);HEAP32[DYNAMICTOP_PTR>>2]=DYNAMIC_BASE;function callRuntimeCallbacks(callbacks){while(callbacks.length>0){var callback=callbacks.shift();if(typeof callback==\"function\"){callback(Module);continue}var func=callback.func;if(typeof func===\"number\"){if(callback.arg===undefined){Module[\"dynCall_v\"](func)}else{Module[\"dynCall_vi\"](func,callback.arg)}}else{func(callback.arg===undefined?null:callback.arg)}}}var __ATPRERUN__=[];var __ATINIT__=[];var __ATMAIN__=[];var __ATPOSTRUN__=[];var runtimeInitialized=false;function preRun(){if(Module[\"preRun\"]){if(typeof Module[\"preRun\"]==\"function\")Module[\"preRun\"]=[Module[\"preRun\"]];while(Module[\"preRun\"].length){addOnPreRun(Module[\"preRun\"].shift())}}callRuntimeCallbacks(__ATPRERUN__)}function initRuntime(){runtimeInitialized=true;callRuntimeCallbacks(__ATINIT__)}function preMain(){callRuntimeCallbacks(__ATMAIN__)}function postRun(){if(Module[\"postRun\"]){if(typeof Module[\"postRun\"]==\"function\")Module[\"postRun\"]=[Module[\"postRun\"]];while(Module[\"postRun\"].length){addOnPostRun(Module[\"postRun\"].shift())}}callRuntimeCallbacks(__ATPOSTRUN__)}function addOnPreRun(cb){__ATPRERUN__.unshift(cb)}function addOnPostRun(cb){__ATPOSTRUN__.unshift(cb)}var runDependencies=0;var runDependencyWatcher=null;var dependenciesFulfilled=null;function addRunDependency(id){runDependencies++;if(Module[\"monitorRunDependencies\"]){Module[\"monitorRunDependencies\"](runDependencies)}}function removeRunDependency(id){runDependencies--;if(Module[\"monitorRunDependencies\"]){Module[\"monitorRunDependencies\"](runDependencies)}if(runDependencies==0){if(runDependencyWatcher!==null){clearInterval(runDependencyWatcher);runDependencyWatcher=null}if(dependenciesFulfilled){var callback=dependenciesFulfilled;dependenciesFulfilled=null;callback()}}}Module[\"preloadedImages\"]={};Module[\"preloadedAudios\"]={};function abort(what){if(Module[\"onAbort\"]){Module[\"onAbort\"](what)}what+=\"\";out(what);err(what);ABORT=true;EXITSTATUS=1;what=\"abort(\"+what+\"). Build with -s ASSERTIONS=1 for more info.\";throw new WebAssembly.RuntimeError(what)}function hasPrefix(str,prefix){return String.prototype.startsWith?str.startsWith(prefix):str.indexOf(prefix)===0}var dataURIPrefix=\"data:application/octet-stream;base64,\";function isDataURI(filename){return hasPrefix(filename,dataURIPrefix)}var wasmBinaryFile=\"rnnoise.wasm\";if(!isDataURI(wasmBinaryFile)){wasmBinaryFile=locateFile(wasmBinaryFile)}function getBinary(){try{if(wasmBinary){return new Uint8Array(wasmBinary)}if(readBinary){return readBinary(wasmBinaryFile)}else{throw\"both async and sync fetching of the wasm failed\"}}catch(err){abort(err)}}function getBinaryPromise(){if(!wasmBinary&&(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER)&&typeof fetch===\"function\"){return fetch(wasmBinaryFile,{credentials:\"same-origin\"}).then(function(response){if(!response[\"ok\"]){throw\"failed to load wasm binary file at '\"+wasmBinaryFile+\"'\"}return response[\"arrayBuffer\"]()}).catch(function(){return getBinary()})}return new Promise(function(resolve,reject){resolve(getBinary())})}function createWasm(){var info={\"a\":asmLibraryArg};function receiveInstance(instance,module){var exports=instance.exports;Module[\"asm\"]=exports;removeRunDependency(\"wasm-instantiate\")}addRunDependency(\"wasm-instantiate\");function receiveInstantiatedSource(output){receiveInstance(output[\"instance\"])}function instantiateArrayBuffer(receiver){return getBinaryPromise().then(function(binary){return WebAssembly.instantiate(binary,info)}).then(receiver,function(reason){err(\"failed to asynchronously prepare wasm: \"+reason);abort(reason)})}function instantiateAsync(){if(!wasmBinary&&typeof WebAssembly.instantiateStreaming===\"function\"&&!isDataURI(wasmBinaryFile)&&typeof fetch===\"function\"){fetch(wasmBinaryFile,{credentials:\"same-origin\"}).then(function(response){var result=WebAssembly.instantiateStreaming(response,info);return result.then(receiveInstantiatedSource,function(reason){err(\"wasm streaming compile failed: \"+reason);err(\"falling back to ArrayBuffer instantiation\");return instantiateArrayBuffer(receiveInstantiatedSource)})})}else{return instantiateArrayBuffer(receiveInstantiatedSource)}}if(Module[\"instantiateWasm\"]){try{var exports=Module[\"instantiateWasm\"](info,receiveInstance);return exports}catch(e){err(\"Module.instantiateWasm callback failed with error: \"+e);return false}}instantiateAsync();return{}}__ATINIT__.push({func:function(){___wasm_call_ctors()}});function _emscripten_memcpy_big(dest,src,num){HEAPU8.copyWithin(dest,src,src+num)}function _emscripten_get_heap_size(){return HEAPU8.length}function emscripten_realloc_buffer(size){try{wasmMemory.grow(size-buffer.byteLength+65535>>>16);updateGlobalBufferAndViews(wasmMemory.buffer);return 1}catch(e){}}function _emscripten_resize_heap(requestedSize){requestedSize=requestedSize>>>0;var oldSize=_emscripten_get_heap_size();var PAGE_MULTIPLE=65536;var maxHeapSize=2147483648;if(requestedSize>maxHeapSize){return false}var minHeapSize=16777216;for(var cutDown=1;cutDown<=4;cutDown*=2){var overGrownHeapSize=oldSize*(1+.2/cutDown);overGrownHeapSize=Math.min(overGrownHeapSize,requestedSize+100663296);var newSize=Math.min(maxHeapSize,alignUp(Math.max(minHeapSize,requestedSize,overGrownHeapSize),PAGE_MULTIPLE));var replacement=emscripten_realloc_buffer(newSize);if(replacement){return true}}return false}var asmLibraryArg={\"a\":_emscripten_memcpy_big,\"b\":_emscripten_resize_heap,\"memory\":wasmMemory,\"table\":wasmTable};var asm=createWasm();var ___wasm_call_ctors=Module[\"___wasm_call_ctors\"]=function(){return(___wasm_call_ctors=Module[\"___wasm_call_ctors\"]=Module[\"asm\"][\"c\"]).apply(null,arguments)};var _rnnoise_init=Module[\"_rnnoise_init\"]=function(){return(_rnnoise_init=Module[\"_rnnoise_init\"]=Module[\"asm\"][\"d\"]).apply(null,arguments)};var _rnnoise_create=Module[\"_rnnoise_create\"]=function(){return(_rnnoise_create=Module[\"_rnnoise_create\"]=Module[\"asm\"][\"e\"]).apply(null,arguments)};var _malloc=Module[\"_malloc\"]=function(){return(_malloc=Module[\"_malloc\"]=Module[\"asm\"][\"f\"]).apply(null,arguments)};var _rnnoise_destroy=Module[\"_rnnoise_destroy\"]=function(){return(_rnnoise_destroy=Module[\"_rnnoise_destroy\"]=Module[\"asm\"][\"g\"]).apply(null,arguments)};var _free=Module[\"_free\"]=function(){return(_free=Module[\"_free\"]=Module[\"asm\"][\"h\"]).apply(null,arguments)};var _rnnoise_process_frame=Module[\"_rnnoise_process_frame\"]=function(){return(_rnnoise_process_frame=Module[\"_rnnoise_process_frame\"]=Module[\"asm\"][\"i\"]).apply(null,arguments)};var calledRun;dependenciesFulfilled=function runCaller(){if(!calledRun)run();if(!calledRun)dependenciesFulfilled=runCaller};function run(args){args=args||arguments_;if(runDependencies>0){return}preRun();if(runDependencies>0)return;function doRun(){if(calledRun)return;calledRun=true;Module[\"calledRun\"]=true;if(ABORT)return;initRuntime();preMain();readyPromiseResolve(Module);if(Module[\"onRuntimeInitialized\"])Module[\"onRuntimeInitialized\"]();postRun()}if(Module[\"setStatus\"]){Module[\"setStatus\"](\"Running...\");setTimeout(function(){setTimeout(function(){Module[\"setStatus\"](\"\")},1);doRun()},1)}else{doRun()}}Module[\"run\"]=run;if(Module[\"preInit\"]){if(typeof Module[\"preInit\"]==\"function\")Module[\"preInit\"]=[Module[\"preInit\"]];while(Module[\"preInit\"].length>0){Module[\"preInit\"].pop()()}}noExitRuntime=true;run();\n\n\n  return Module.ready\n}\n);\n})();\nexport default Module;","// @flow\n\n/**\n * Constant. Rnnoise default sample size, samples of different size won't work.\n */\nexport const RNNOISE_SAMPLE_LENGTH = 480;\n\n/**\n *  Constant. Rnnoise only takes inputs of 480 PCM float32 samples thus 480*4.\n */\nconst RNNOISE_BUFFER_SIZE = RNNOISE_SAMPLE_LENGTH * 4;\n\n/**\n *  Constant. Rnnoise only takes operates on 44.1Khz float 32 little endian PCM.\n */\nconst PCM_FREQUENCY = 44100;\n\n/**\n * Represents an adaptor for the rnnoise library compiled to webassembly. The class takes care of webassembly\n * memory management and exposes rnnoise functionality such as PCM audio denoising and VAD (voice activity\n * detection) scores.\n */\nexport default class RnnoiseProcessor {\n    /**\n     * Constructor.\n     *\n     * @class\n     * @param {Object} wasmInterface - WebAssembly module interface that exposes rnnoise functionality.\n     */\n    constructor(wasmInterface) {\n        // Considering that we deal with dynamic allocated memory employ exception safety strong guarantee\n        // i.e. in case of exception there are no side effects.\n        try {\n            this._wasmInterface = wasmInterface;\n\n            // For VAD score purposes only allocate the buffers once and reuse them\n            this._wasmPcmInput = this._wasmInterface._malloc(RNNOISE_BUFFER_SIZE);\n\n            if (!this._wasmPcmInput) {\n                throw Error('Failed to create wasm input memory buffer!');\n            }\n\n            this._wasmPcmOutput = this._wasmInterface._malloc(RNNOISE_BUFFER_SIZE);\n\n            if (!this._wasmPcmOutput) {\n                wasmInterface._free(this._wasmPcmInput);\n                throw Error('Failed to create wasm output memory buffer!');\n            }\n\n            // The HEAPF32.set function requires an index relative to a Float32 array view of the wasm memory model\n            // which is an array of bytes. This means we have to divide it by the size of a float to get the index\n            // relative to a Float32 Array.\n            this._wasmPcmInputF32Index = this._wasmPcmInput / 4;\n\n            this._context = this._wasmInterface._rnnoise_create();\n        } catch (error) {\n            // release can be called even if not all the components were initialized.\n            this._releaseWasmResources();\n            throw error;\n        }\n    }\n\n    /**\n     * Copy the input PCM Audio Sample to the wasm input buffer.\n     *\n     * @param {Float32Array} pcmSample - Array containing 16 bit format PCM sample stored in 32 Floats .\n     * @returns {void}\n     */\n    _copyPCMSampleToWasmBuffer(pcmSample) {\n        this._wasmInterface.HEAPF32.set(pcmSample, this._wasmPcmInputF32Index);\n    }\n\n    /**\n     * Convert 32 bit Float PCM samples to 16 bit Float PCM samples and store them in 32 bit Floats.\n     *\n     * @param {Float32Array} f32Array - Array containing 32 bit PCM samples.\n     * @returns {void}\n     */\n    _convertTo16BitPCM(f32Array) {\n        for (const [ index, value ] of f32Array.entries()) {\n            f32Array[index] = value * 0x7fff;\n        }\n    }\n\n    /**\n     * Release resources associated with the wasm context. If something goes downhill here\n     * i.e. Exception is thrown, there is nothing much we can do.\n     *\n     * @returns {void}\n     */\n    _releaseWasmResources() {\n        // For VAD score purposes only allocate the buffers once and reuse them\n        if (this._wasmPcmInput) {\n            this._wasmInterface._free(this._wasmPcmInput);\n            this._wasmPcmInput = null;\n        }\n\n        if (this._wasmPcmOutput) {\n            this._wasmInterface._free(this._wasmPcmOutput);\n            this._wasmPcmOutput = null;\n        }\n\n        if (this._context) {\n            this._wasmInterface._rnnoise_destroy(this._context);\n            this._context = null;\n        }\n    }\n\n    /**\n     * Rnnoise can only operate on a certain PCM array size.\n     *\n     * @returns {number} - The PCM sample array size as required by rnnoise.\n     */\n    getSampleLength() {\n        return RNNOISE_SAMPLE_LENGTH;\n    }\n\n    /**\n     * Rnnoise can only operate on a certain format of PCM sample namely float 32 44.1Kz.\n     *\n     * @returns {number} - PCM sample frequency as required by rnnoise.\n     */\n    getRequiredPCMFrequency() {\n        return PCM_FREQUENCY;\n    }\n\n    /**\n     * Release any resources required by the rnnoise context this needs to be called\n     * before destroying any context that uses the processor.\n     *\n     * @returns {void}\n     */\n    destroy() {\n        // Attempting to release a non initialized processor, do nothing.\n        if (this._destroyed) {\n            return;\n        }\n\n        this._releaseWasmResources();\n\n        this._destroyed = true;\n    }\n\n    /**\n     * Calculate the Voice Activity Detection for a raw Float32 PCM sample Array.\n     * The size of the array must be of exactly 480 samples, this constraint comes from the rnnoise library.\n     *\n     * @param {Float32Array} pcmFrame - Array containing 32 bit PCM samples.\n     * @returns {Float} Contains VAD score in the interval 0 - 1 i.e. 0.90 .\n     */\n    calculateAudioFrameVAD(pcmFrame) {\n        if (this._destroyed) {\n            throw new Error('RnnoiseProcessor instance is destroyed, please create another one!');\n        }\n\n        const pcmFrameLength = pcmFrame.length;\n\n        if (pcmFrameLength !== RNNOISE_SAMPLE_LENGTH) {\n            throw new Error(`Rnnoise can only process PCM frames of 480 samples! Input sample was:${pcmFrameLength}`);\n        }\n\n        this._convertTo16BitPCM(pcmFrame);\n        this._copyPCMSampleToWasmBuffer(pcmFrame);\n\n        return this._wasmInterface._rnnoise_process_frame(this._context, this._wasmPcmOutput, this._wasmPcmInput);\n    }\n}\n","// @flow\n\n// Script expects to find rnnoise webassembly binary in the same public path root, otherwise it won't load\n// During the build phase this needs to be taken care of manually\nimport rnnoiseWasmInit from 'rnnoise-wasm';\n\nimport RnnoiseProcessor from './RnnoiseProcessor';\n\nexport { RNNOISE_SAMPLE_LENGTH } from './RnnoiseProcessor';\nexport { RnnoiseProcessor };\n\nlet rnnoiseModule;\n\n/**\n * Creates a new instance of RnnoiseProcessor.\n *\n * @returns {Promise<RnnoiseProcessor>}\n */\nexport function createRnnoiseProcessor() {\n    if (!rnnoiseModule) {\n        rnnoiseModule = rnnoiseWasmInit();\n    }\n\n    return rnnoiseModule.then(mod => new RnnoiseProcessor(mod));\n}\n","// @flow\n\n/**\n * Number of pixels that signal if two images should be considered different.\n */\nexport const PIXEL_LOWER_BOUND = 100000;\n\n/**\n * Number of milliseconds that represent how often screenshots should be taken.\n */\nexport const POLL_INTERVAL = 30000;\n\n/**\n * SET_INTERVAL constant is used to set interval and it is set in\n * the id property of the request.data property. timeMs property must\n * also be set. request.data example:\n *\n * {\n *      id: SET_INTERVAL,\n *      timeMs: 33\n * }\n */\nexport const SET_INTERVAL = 1;\n\n/**\n * CLEAR_INTERVAL constant is used to clear the interval and it is set in\n * the id property of the request.data property.\n *\n * {\n *      id: CLEAR_INTERVAL\n * }\n */\nexport const CLEAR_INTERVAL = 2;\n\n/**\n * INTERVAL_TIMEOUT constant is used as response and it is set in the id property.\n *\n * {\n *      id: INTERVAL_TIMEOUT\n * }\n */\nexport const INTERVAL_TIMEOUT = 3;\n","// @flow\n\nimport {\n    CLEAR_INTERVAL,\n    INTERVAL_TIMEOUT,\n    SET_INTERVAL\n} from './constants';\n\nconst code = `\n    var timer;\n\n    onmessage = function(request) {\n        switch (request.data.id) {\n        case ${SET_INTERVAL}: {\n            timer = setInterval(() => {\n                postMessage({ id: ${INTERVAL_TIMEOUT} });\n            }, request.data.timeMs);\n            break;\n        }\n        case ${CLEAR_INTERVAL}: {\n            if (timer) {\n                clearInterval(timer);\n            }\n            break;\n        }\n        }\n    };\n`;\n\nexport const timerWorkerScript = URL.createObjectURL(new Blob([ code ], { type: 'application/javascript' }));\n","// @flow\n\nimport pixelmatch from 'pixelmatch';\n\n\nimport {\n    CLEAR_INTERVAL,\n    INTERVAL_TIMEOUT,\n    PIXEL_LOWER_BOUND,\n    POLL_INTERVAL,\n    SET_INTERVAL\n} from './constants';\nimport { timerWorkerScript } from './worker';\n\n\n/**\n * Effect that wraps {@code MediaStream} adding periodic screenshot captures.\n * Manipulates the original desktop stream and performs custom processing operations, if implemented.\n */\nexport default class ScreenshotCaptureEffect {\n    /**\n     * Initializes a new {@code ScreenshotCaptureEffect} instance.\n     *\n     */\n    constructor(callback) {\n        this.callback = callback;\n        this._currentCanvas = document.createElement('canvas');\n        this._currentCanvasContext = this._currentCanvas.getContext('2d');\n        this._videoElement = document.createElement('video');\n\n        // Bind handlers such that they access the same instance.\n        this._handleWorkerAction = this._handleWorkerAction.bind(this);\n        this._initScreenshotCapture = this._initScreenshotCapture.bind(this);\n        this._streamWorker = new Worker(timerWorkerScript, { name: 'Screenshot capture worker' });\n        this._streamWorker.onmessage = this._handleWorkerAction;\n    }\n\n    /**\n     * Starts the screenshot capture event on a loop.\n     *\n     * @param {MediaStream} stream - The desktop stream from which screenshots are to be sent.\n     * @param {string} videoType - The type of the media stream.\n     * @returns {Promise} - Promise that resolves once effect has started or rejects if the\n     * videoType parameter is not desktop.\n     */\n    startEffect(stream, videoType) {\n        return new Promise((resolve, reject) => {\n            if (videoType !== 'desktop') {\n                reject();\n            }\n            const desktopTrack = stream.getVideoTracks()[0];\n            const { height, width }\n                = desktopTrack.getSettings() ?? desktopTrack.getConstraints();\n\n            this._streamHeight = height;\n            this._streamWidth = width;\n            this._currentCanvas.height = parseInt(height, 10);\n            this._currentCanvas.width = parseInt(width, 10);\n            this._videoElement.height = parseInt(height, 10);\n            this._videoElement.width = parseInt(width, 10);\n            this._videoElement.srcObject = stream;\n            this._videoElement.play();\n\n            // Store first capture for comparisons in {@code this._handleScreenshot}.\n            this._videoElement.addEventListener('loadeddata', this._initScreenshotCapture);\n            resolve();\n        });\n    }\n\n    /**\n     * Stops the ongoing {@code ScreenshotCaptureEffect} by clearing the {@code Worker} interval.\n     *\n     * @returns {void}\n     */\n    stopEffect() {\n        this._streamWorker.postMessage({ id: CLEAR_INTERVAL });\n        this._videoElement.removeEventListener('loadeddata', this._initScreenshotCapture);\n    }\n\n    /**\n     * Method that is called as soon as the first frame of the video loads from stream.\n     * The method is used to store the {@code ImageData} object from the first frames\n     * in order to use it for future comparisons based on which we can process only certain\n     * screenshots.\n     *\n     * @private\n     * @returns {void}\n     */\n    _initScreenshotCapture() {\n        const storedCanvas = document.createElement('canvas');\n        const storedCanvasContext = storedCanvas.getContext('2d');\n\n        storedCanvasContext.drawImage(this._videoElement, 0, 0, this._streamWidth, this._streamHeight);\n        const { data } = storedCanvasContext.getImageData(0, 0, this._streamWidth, this._streamHeight);\n\n        this._storedImageData = data;\n        this._streamWorker.postMessage({\n            id: SET_INTERVAL,\n            timeMs: POLL_INTERVAL\n        });\n    }\n\n    /**\n     * Handler of the {@code EventHandler} message that calls the appropriate method based on the parameter's id.\n     *\n     * @private\n     * @param {EventHandler} message - Message received from the Worker.\n     * @returns {void}\n     */\n    _handleWorkerAction(message) {\n        return message.data.id === INTERVAL_TIMEOUT && this._handleScreenshot();\n    }\n\n    /**\n     * Method that decides whether an image should be processed based on a preset pixel lower bound.\n     *\n     * @private\n     * @param {integer} nbPixels - The number of pixels of the candidate image.\n     * @returns {boolean} - Whether the image should be processed or not.\n     */\n    _shouldProcessScreenshot(nbPixels) {\n        return nbPixels >= PIXEL_LOWER_BOUND;\n    }\n\n    /**\n     * Screenshot handler.\n     *\n     * @private\n     * @returns {void}\n     */\n    _handleScreenshot() {\n        this._currentCanvasContext.drawImage(this._videoElement, 0, 0, this._streamWidth, this._streamHeight);\n        const { data } = this._currentCanvasContext.getImageData(0, 0, this._streamWidth, this._streamHeight);\n        const diffPixels = pixelmatch(data, this._storedImageData, null, this._streamWidth, this._streamHeight);\n\n        if (this._shouldProcessScreenshot(diffPixels)) {\n            this._storedImageData = data;\n            this.callback(this._currentCanvas);\n        }\n    }\n}\n","export const VIRTUAL_BACKGROUND_TYPE = {\n    IMAGE: 'image',\n    DESKTOP_SHARE: 'desktop-share',\n    BLUR: 'blur',\n    NONE: 'none'\n};","\n/**\n * SET_TIMEOUT constant is used to set interval and it is set in\n * the id property of the request.data property. timeMs property must\n * also be set. request.data example:\n *\n * {\n *      id: SET_TIMEOUT,\n *      timeMs: 33\n * }\n */\nexport const SET_TIMEOUT = 1;\n\n/**\n * CLEAR_TIMEOUT constant is used to clear the interval and it is set in\n * the id property of the request.data property.\n *\n * {\n *      id: CLEAR_TIMEOUT\n * }\n */\nexport const CLEAR_TIMEOUT = 2;\n\n/**\n * TIMEOUT_TICK constant is used as response and it is set in the id property.\n *\n * {\n *      id: TIMEOUT_TICK\n * }\n */\nexport const TIMEOUT_TICK = 3;\n\n/**\n * The following code is needed as string to create a URL from a Blob.\n * The URL is then passed to a WebWorker. Reason for this is to enable\n * use of setInterval that is not throttled when tab is inactive.\n */\nconst code = `\n    var timer;\n\n    onmessage = function(request) {\n        switch (request.data.id) {\n        case ${SET_TIMEOUT}: {\n            timer = setTimeout(() => {\n                postMessage({ id: ${TIMEOUT_TICK} });\n            }, request.data.timeMs);\n            break;\n        }\n        case ${CLEAR_TIMEOUT}: {\n            if (timer) {\n                clearTimeout(timer);\n            }\n            break;\n        }\n        }\n    };\n`;\n\nexport const timerWorkerScript = URL.createObjectURL(new Blob([ code ], { type: 'application/javascript' }));\n","// @flow\n\nimport { VIRTUAL_BACKGROUND_TYPE } from './constants';\n\nimport {\n    CLEAR_TIMEOUT,\n    TIMEOUT_TICK,\n    SET_TIMEOUT,\n    timerWorkerScript\n} from './TimerWorker';\n\n/**\n * Represents a modified MediaStream that adds effects to video background.\n * <tt>JitsiStreamBackgroundEffect</tt> does the processing of the original\n * video stream.\n */\nexport default class JitsiStreamBackgroundEffect {\n    /**\n     * Represents a modified video MediaStream track.\n     *\n     * @class\n     * @param {Object} model - Meet model.\n     * @param {Object} options - Segmentation dimensions.\n     */\n    constructor(model, options) {\n        this._options = options;\n\n        if (this._options.virtualBackground.backgroundType === VIRTUAL_BACKGROUND_TYPE.IMAGE) {\n            this._virtualImage = document.createElement('img');\n            this._virtualImage.crossOrigin = 'anonymous';\n            this._virtualImage.src = this._options.virtualBackground.virtualSource;\n        }\n        if (this._options.virtualBackground.backgroundType === VIRTUAL_BACKGROUND_TYPE.DESKTOP_SHARE) {\n            this._virtualVideo = document.createElement('video');\n            this._virtualVideo.autoplay = true;\n            this._virtualVideo.srcObject = this._options?.virtualBackground?.virtualSource?.stream;\n        }\n        this._model = model;\n        this._segmentationPixelCount = this._options.width * this._options.height;\n\n        // Bind event handler so it is only bound once for every instance.\n        this._onMaskFrameTimer = this._onMaskFrameTimer.bind(this);\n\n        // Workaround for FF issue https://bugzilla.mozilla.org/show_bug.cgi?id=1388974\n        this._outputCanvasElement = document.createElement('canvas');\n        this._outputCanvasElement.getContext('2d');\n        this._inputVideoElement = document.createElement('video');\n    }\n\n    /**\n     * EventHandler onmessage for the maskFrameTimerWorker WebWorker.\n     *\n     * @private\n     * @param {EventHandler} response - The onmessage EventHandler parameter.\n     * @returns {void}\n     */\n    _onMaskFrameTimer(response) {\n        if (response.data.id === TIMEOUT_TICK) {\n            this._renderMask();\n        }\n    }\n\n    /**\n     * Represents the run post processing.\n     *\n     * @returns {void}\n     */\n    runPostProcessing() {\n        this._outputCanvasCtx.globalCompositeOperation = 'copy';\n\n        // Draw segmentation mask.\n        //\n\n        // Smooth out the edges.\n        if (this._options.virtualBackground.backgroundType === VIRTUAL_BACKGROUND_TYPE.IMAGE) {\n            this._outputCanvasCtx.filter = 'blur(4px)';\n        } else {\n            this._outputCanvasCtx.filter = 'blur(8px)';\n        }\n\n        this._outputCanvasCtx.drawImage(\n            this._segmentationMaskCanvas,\n            0,\n            0,\n            this._options.width,\n            this._options.height,\n            0,\n            0,\n            this._inputVideoElement.width,\n            this._inputVideoElement.height\n        );\n        this._outputCanvasCtx.globalCompositeOperation = 'source-in';\n        this._outputCanvasCtx.filter = 'none';\n\n        // Draw the foreground video.\n        //\n\n        this._outputCanvasCtx.drawImage(this._inputVideoElement, 0, 0);\n\n        // Draw the background.\n        //\n\n        this._outputCanvasCtx.globalCompositeOperation = 'destination-over';\n        if (this._options.virtualBackground.backgroundType === VIRTUAL_BACKGROUND_TYPE.IMAGE) {\n            this._outputCanvasCtx.drawImage(\n                this._virtualImage,\n                0,\n                0,\n                this._inputVideoElement.width,\n                this._inputVideoElement.height\n            );\n        }\n        if (this._options.virtualBackground.backgroundType === VIRTUAL_BACKGROUND_TYPE.DESKTOP_SHARE) {\n            this._outputCanvasCtx.drawImage(\n                this._virtualVideo,\n                0,\n                0,\n                this._desktopShareDimensions.width,\n                this._desktopShareDimensions.height\n            );\n        } else {\n            this._outputCanvasCtx.filter = `blur(${this._options.virtualBackground.blurValue}px)`;\n            this._outputCanvasCtx.drawImage(this._inputVideoElement, 0, 0);\n        }\n    }\n\n    /**\n     * Represents the run Tensorflow Interference.\n     *\n     * @returns {void}\n     */\n    runInference() {\n        this._model._runInference();\n        const outputMemoryOffset = this._model._getOutputMemoryOffset() / 4;\n\n        for (let i = 0; i < this._segmentationPixelCount; i++) {\n            const background = this._model.HEAPF32[outputMemoryOffset + (i * 2)];\n            const person = this._model.HEAPF32[outputMemoryOffset + (i * 2) + 1];\n            const shift = Math.max(background, person);\n            const backgroundExp = Math.exp(background - shift);\n            const personExp = Math.exp(person - shift);\n\n            // Sets only the alpha component of each pixel.\n            this._segmentationMask.data[(i * 4) + 3] = (255 * personExp) / (backgroundExp + personExp);\n        }\n        this._segmentationMaskCtx.putImageData(this._segmentationMask, 0, 0);\n    }\n\n    /**\n     * Loop function to render the background mask.\n     *\n     * @private\n     * @returns {void}\n     */\n    _renderMask() {\n        const desktopShareTrack = this._options?.virtualBackground?.virtualSource?.track;\n\n        if (desktopShareTrack) {\n            this._desktopShareDimensions = desktopShareTrack.getSettings ? desktopShareTrack.getSettings()\n                : desktopShareTrack.getConstraints();\n        }\n        this.resizeSource();\n        this.runInference();\n        this.runPostProcessing();\n\n        this._maskFrameTimerWorker.postMessage({\n            id: SET_TIMEOUT,\n            timeMs: 1000 / 30\n        });\n    }\n\n    /**\n     * Represents the resize source process.\n     *\n     * @returns {void}\n     */\n    resizeSource() {\n        this._segmentationMaskCtx.drawImage(\n            this._inputVideoElement,\n            0,\n            0,\n            this._inputVideoElement.width,\n            this._inputVideoElement.height,\n            0,\n            0,\n            this._options.width,\n            this._options.height\n        );\n\n        const imageData = this._segmentationMaskCtx.getImageData(\n            0,\n            0,\n            this._options.width,\n            this._options.height\n        );\n        const inputMemoryOffset = this._model._getInputMemoryOffset() / 4;\n\n        for (let i = 0; i < this._segmentationPixelCount; i++) {\n            this._model.HEAPF32[inputMemoryOffset + (i * 3)] = imageData.data[i * 4] / 255;\n            this._model.HEAPF32[inputMemoryOffset + (i * 3) + 1] = imageData.data[(i * 4) + 1] / 255;\n            this._model.HEAPF32[inputMemoryOffset + (i * 3) + 2] = imageData.data[(i * 4) + 2] / 255;\n        }\n    }\n\n    /**\n     * Checks if the local track supports this effect.\n     *\n     * @param {JitsiLocalTrack} jitsiLocalTrack - Track to apply effect.\n     * @returns {boolean} - Returns true if this effect can run on the specified track\n     * false otherwise.\n     */\n    isEnabled(jitsiLocalTrack) {\n        return jitsiLocalTrack.isVideoTrack() && jitsiLocalTrack.videoType === 'camera';\n    }\n\n    /**\n     * Starts loop to capture video frame and render the segmentation mask.\n     *\n     * @param {MediaStream} stream - Stream to be used for processing.\n     * @returns {MediaStream} - The stream with the applied effect.\n     */\n    startEffect(stream) {\n        this._maskFrameTimerWorker = new Worker(timerWorkerScript, { name: 'Blur effect worker' });\n        this._maskFrameTimerWorker.onmessage = this._onMaskFrameTimer;\n        const firstVideoTrack = stream.getVideoTracks()[0];\n        const { height, frameRate, width }\n            = firstVideoTrack.getSettings ? firstVideoTrack.getSettings() : firstVideoTrack.getConstraints();\n\n        this._segmentationMask = new ImageData(this._options.width, this._options.height);\n        this._segmentationMaskCanvas = document.createElement('canvas');\n        this._segmentationMaskCanvas.width = this._options.width;\n        this._segmentationMaskCanvas.height = this._options.height;\n        this._segmentationMaskCtx = this._segmentationMaskCanvas.getContext('2d');\n\n        this._outputCanvasElement.width = parseInt(width, 10);\n        this._outputCanvasElement.height = parseInt(height, 10);\n        this._outputCanvasCtx = this._outputCanvasElement.getContext('2d');\n        this._inputVideoElement.width = parseInt(width, 10);\n        this._inputVideoElement.height = parseInt(height, 10);\n        this._inputVideoElement.autoplay = true;\n        this._inputVideoElement.srcObject = stream;\n        this._inputVideoElement.onloadeddata = () => {\n            this._maskFrameTimerWorker.postMessage({\n                id: SET_TIMEOUT,\n                timeMs: 1000 / 30\n            });\n        };\n\n        return this._outputCanvasElement.captureStream(parseInt(frameRate, 10));\n    }\n\n    /**\n     * Stops the capture and render loop.\n     *\n     * @returns {void}\n     */\n    stopEffect() {\n        this._maskFrameTimerWorker.postMessage({\n            id: CLEAR_TIMEOUT\n        });\n\n        this._maskFrameTimerWorker.terminate();\n    }\n}\n","// @flow\nimport JitsiStreamBackgroundEffect from './JitsiStreamBackgroundEffect';\nimport createTFLiteModule from './tflite';\nimport createTFLiteSIMDModule from './tflite-simd';\nconst models = {\n    model96: 'https://sdk.sariska.io/segm_lite_v681.tflite',\n    model144: 'https://sdk.sariska.io/segm_full_v679.tflite'\n};\n\nconst segmentationDimensions = {\n    model96: {\n        height: 96,\n        width: 160\n    },\n    model144: {\n        height: 144,\n        width: 256\n    }\n};\n\n/**\n * Creates a new instance of JitsiStreamBackgroundEffect. This loads the Meet background model that is used to\n * extract person segmentation.\n *\n * @param {Object} virtualBackground - The virtual object that contains the background image source and\n * the isVirtualBackground flag that indicates if virtual image is activated.\n * @param {Function} dispatch - The Redux dispatch function.\n * @returns {Promise<JitsiStreamBackgroundEffect>}\n */\nexport async function createVirtualBackgroundEffect(virtualBackground, dispatch) {\n    if (!MediaStreamTrack.prototype.getSettings && !MediaStreamTrack.prototype.getConstraints) {\n        throw new Error('JitsiStreamBackgroundEffect not supported!');\n    }\n    let tflite;\n    let wasmCheck;\n\n    // Checks if WebAssembly feature is supported or enabled by/in the browser.\n    // Conditional import of wasm-check package is done to prevent\n    // the browser from crashing when the user opens the app.\n\n    try {\n        wasmCheck = require('wasm-check');\n        if (wasmCheck?.feature?.simd) {\n            tflite = await createTFLiteSIMDModule();\n        } else {\n            tflite = await createTFLiteModule();\n        }\n    } catch (err) {\n        return;\n    }\n\n    const modelBufferOffset = tflite._getModelBufferMemoryOffset();\n    const modelResponse = await fetch(wasmCheck.feature.simd ? models.model144 : models.model96);\n\n    if (!modelResponse.ok) {\n        throw new Error('Failed to download tflite model!');\n    }\n\n    const model = await modelResponse.arrayBuffer();\n\n    tflite.HEAPU8.set(new Uint8Array(model), modelBufferOffset);\n\n    tflite._loadModel(model.byteLength);\n\n    const options = {\n        ...wasmCheck.feature.simd ? segmentationDimensions.model144 : segmentationDimensions.model96,\n        virtualBackground\n    };\n\n    return new JitsiStreamBackgroundEffect(tflite, options);\n}","import Logger from '@jitsi/logger';\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport JitsiConnection from './JitsiConnection';\nimport * as JitsiConnectionErrors from './JitsiConnectionErrors';\nimport * as JitsiConnectionEvents from './JitsiConnectionEvents';\nimport JitsiMediaDevices from './JitsiMediaDevices';\nimport * as JitsiMediaDevicesEvents from './JitsiMediaDevicesEvents';\nimport JitsiTrackError from './JitsiTrackError';\nimport * as JitsiTrackErrors from './JitsiTrackErrors';\nimport * as JitsiTrackEvents from './JitsiTrackEvents';\nimport * as JitsiTranscriptionStatus from './JitsiTranscriptionStatus';\nimport RTC from './modules/RTC/RTC';\nimport browser from './modules/browser';\nimport NetworkInfo from './modules/connectivity/NetworkInfo';\nimport { ParticipantConnectionStatus }\n    from './modules/connectivity/ParticipantConnectionStatus';\nimport { TrackStreamingStatus } from './modules/connectivity/TrackStreamingStatus';\nimport getActiveAudioDevice from './modules/detection/ActiveDeviceDetector';\nimport * as DetectionEvents from './modules/detection/DetectionEvents';\nimport TrackVADEmitter from './modules/detection/TrackVADEmitter';\nimport FeatureFlags from './modules/flags/FeatureFlags';\nimport ProxyConnectionService\n    from './modules/proxyconnection/ProxyConnectionService';\nimport recordingConstants from './modules/recording/recordingConstants';\nimport Settings from './modules/settings/Settings';\nimport LocalStatsCollector from './modules/statistics/LocalStatsCollector';\nimport precallTest from './modules/statistics/PrecallTest';\nimport Statistics from './modules/statistics/statistics';\nimport AuthUtil from './modules/util/AuthUtil';\nimport GlobalOnErrorHandler from './modules/util/GlobalOnErrorHandler';\nimport ScriptUtil from './modules/util/ScriptUtil';\nimport * as VideoSIPGWConstants from './modules/videosipgw/VideoSIPGWConstants';\nimport AudioMixer from './modules/webaudio/AudioMixer';\nimport { MediaType } from './service/RTC/MediaType';\nimport * as ConnectionQualityEvents\n    from './service/connectivity/ConnectionQualityEvents';\nimport * as E2ePingEvents from './service/e2eping/E2ePingEvents';\nimport { createGetUserMediaEvent } from './service/statistics/AnalyticsEvents';\nimport {createPresenterEffect, createRnnoiseProcessor, createScreenshotCaptureEffect, createVirtualBackgroundEffect} from \"./modules/stream-effects\";\nimport {initSDKConfig} from './config';\nimport * as createAnalyticsEvent from './modules/util/createAnalyticsEvent';\n\nconst logger = Logger.getLogger(__filename);\n\n/**\n * The amount of time to wait until firing\n * {@link JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN} event.\n */\nconst USER_MEDIA_SLOW_PROMISE_TIMEOUT = 1000;\n\n/**\n * Extracts from an 'options' objects with a specific format (TODO what IS the\n * format?) the attributes which are to be logged in analytics events.\n *\n * @param options gum options (???)\n * @returns {*} the attributes to attach to analytics events.\n */\nfunction getAnalyticsAttributesFromOptions(options) {\n    const attributes = {\n        'audio_requested':\n            options.devices.includes('audio'),\n        'video_requested':\n            options.devices.includes('video'),\n        'screen_sharing_requested':\n            options.devices.includes('desktop')\n    };\n\n    if (attributes.video_requested) {\n        attributes.resolution = options.resolution;\n    }\n\n    return attributes;\n}\n\n/**\n * Tries to deal with the following problem: {@code JitsiMeetJS} is not only\n * this module, it's also a global (i.e. attached to {@code window}) namespace\n * for all globals of the projects in the Jitsi Meet family. If lib-jitsi-meet\n * is loaded through an HTML {@code script} tag, {@code JitsiMeetJS} will\n * automatically be attached to {@code window} by webpack. Unfortunately,\n * webpack's source code does not check whether the global variable has already\n * been assigned and overwrites it. Which is OK for the module\n * {@code JitsiMeetJS} but is not OK for the namespace {@code JitsiMeetJS}\n * because it may already contain the values of other projects in the Jitsi Meet\n * family. The solution offered here works around webpack by merging all\n * existing values of the namespace {@code JitsiMeetJS} into the module\n * {@code JitsiMeetJS}.\n *\n * @param {Object} module - The module {@code JitsiMeetJS} (which will be\n * exported and may be attached to {@code window} by webpack later on).\n * @private\n * @returns {Object} - A {@code JitsiMeetJS} module which contains all existing\n * value of the namespace {@code JitsiMeetJS} (if any).\n */\nfunction _mergeNamespaceAndModule(module) {\n    return (\n        typeof window.SariskaMediaTransport === 'object'\n            ? Object.assign({}, window.SariskaMediaTransport, module)\n            : module);\n}\n\n/**\n * The public API of the Jitsi Meet library (a.k.a. {@code JitsiMeetJS}).\n */\nexport default _mergeNamespaceAndModule({\n\n    version: '{#COMMIT_HASH#}',\n\n    JitsiConnection,\n\n    /**\n     * {@code ProxyConnectionService} is used to connect a remote peer to a\n     * local Jitsi participant without going through a Jitsi conference. It is\n     * currently used for room integration development, specifically wireless\n     * screensharing. Its API is experimental and will likely change; usage of\n     * it is advised against.\n     */\n    ProxyConnectionService,\n    effects: {\n        createPresenterEffect,\n        createRnnoiseProcessor,\n        createScreenshotCaptureEffect,\n        createVirtualBackgroundEffect\n    },\n    constants: {\n        participantConnectionStatus: ParticipantConnectionStatus,\n        recording: recordingConstants,\n        sipVideoGW: VideoSIPGWConstants,\n        transcriptionStatus: JitsiTranscriptionStatus,\n        trackStreamingStatus: TrackStreamingStatus\n    },\n    events: {\n        conference: JitsiConferenceEvents,\n        connection: JitsiConnectionEvents,\n        detection: DetectionEvents,\n        track: JitsiTrackEvents,\n        mediaDevices: JitsiMediaDevicesEvents,\n        connectionQuality: ConnectionQualityEvents,\n        e2eping: E2ePingEvents\n    },\n    errors: {\n        conference: JitsiConferenceErrors,\n        connection: JitsiConnectionErrors,\n        track: JitsiTrackErrors\n    },\n    errorTypes: {\n        JitsiTrackError\n    },\n    logLevels: Logger.levels,\n    mediaDevices: JitsiMediaDevices,\n    analytics: Statistics.analytics,\n    initialize(options = {}) {\n        this.init(options); \n    },\n    init(options = {}) {\n        options = {...initSDKConfig, ...options};\n        Settings.init(options.externalStorage);\n        Statistics.init(options);\n\n        // Multi-stream is supported only on endpoints running in Unified plan mode and the flag to disable unified\n        // plan also needs to be taken into consideration.\n        if (typeof options.enableUnifiedOnChrome !== 'undefined' && options.flags) {\n            options.flags.enableUnifiedOnChrome = options.enableUnifiedOnChrome;\n        }\n\n        // Configure the feature flags.\n        FeatureFlags.init(options.flags || { });\n\n        // Initialize global window.connectionTimes\n        // FIXME do not use 'window'\n        if (!window.connectionTimes) {\n            window.connectionTimes = {};\n        }\n\n        if (options.enableAnalyticsLogging !== true) {\n            logger.warn('Analytics disabled, disposing.');\n            this.analytics.dispose();\n        }\n\n        if (options.enableWindowOnErrorHandler) {\n            GlobalOnErrorHandler.addHandler(\n                this.getGlobalOnErrorHandler.bind(this));\n        }\n\n        if (this.version) {\n            const logObject = {\n                id: 'component_version',\n                component: 'sariska-media-transport',\n                version: this.version\n            };\n\n            Statistics.sendLog(JSON.stringify(logObject));\n        }\n\n        return RTC.init(options);\n    },\n\n    /**\n     * Returns whether the desktop sharing is enabled or not.\n     *\n     * @returns {boolean}\n     */\n    isDesktopSharingEnabled() {\n        return RTC.isDesktopSharingEnabled();\n    },\n\n    /**\n     * Returns whether the current execution environment supports WebRTC (for\n     * use within this library).\n     *\n     * @returns {boolean} {@code true} if WebRTC is supported in the current\n     * execution environment (for use within this library); {@code false},\n     * otherwise.\n     */\n    isWebRtcSupported() {\n        return RTC.isWebRtcSupported();\n    },\n\n    setLogLevel(level) {\n        Logger.setLogLevel(level);\n    },\n\n    /**\n     * Sets the log level to the <tt>Logger</tt> instance with given id.\n     *\n     * @param {Logger.levels} level the logging level to be set\n     * @param {string} id the logger id to which new logging level will be set.\n     * Usually it's the name of the JavaScript source file including the path\n     * ex. \"modules/xmpp/ChatRoom.js\"\n     */\n    setLogLevelById(level, id) {\n        Logger.setLogLevelById(level, id);\n    },\n\n    /**\n     * Registers new global logger transport to the library logging framework.\n     *\n     * @param globalTransport\n     * @see Logger.addGlobalTransport\n     */\n    addGlobalLogTransport(globalTransport) {\n        Logger.addGlobalTransport(globalTransport);\n    },\n\n    /**\n     * Removes global logging transport from the library logging framework.\n     *\n     * @param globalTransport\n     * @see Logger.removeGlobalTransport\n     */\n    removeGlobalLogTransport(globalTransport) {\n        Logger.removeGlobalTransport(globalTransport);\n    },\n\n    /**\n    * Sets global options which will be used by all loggers. Changing these\n    * works even after other loggers are created.\n    *\n    * @param options\n    * @see Logger.setGlobalOptions\n    */\n    setGlobalLogOptions(options) {\n        Logger.setGlobalOptions(options);\n    },\n\n    /**\n     * Creates the media tracks and returns them trough the callback.\n     *\n     * @param options Object with properties / settings specifying the tracks\n     * which should be created. should be created or some additional\n     * configurations about resolution for example.\n     * @param {Array} options.effects optional effects array for the track\n     * @param {boolean} options.firePermissionPromptIsShownEvent - if event\n     * JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN should be fired\n     * @param {boolean} options.fireSlowPromiseEvent - if event\n     * JitsiMediaDevicesEvents.USER_MEDIA_SLOW_PROMISE_TIMEOUT should be fired\n     * @param {Array} options.devices the devices that will be requested\n     * @param {string} options.resolution resolution constraints\n     * @param {string} options.cameraDeviceId\n     * @param {string} options.micDeviceId\n     * @param {intiger} interval - the interval (in ms) for\n     * checking whether the desktop sharing extension is installed or not\n     * @param {Function} checkAgain - returns boolean. While checkAgain()==true\n     * createLocalTracks will wait and check on every \"interval\" ms for the\n     * extension. If the desktop extension is not install and checkAgain()==true\n     * createLocalTracks will finish with rejected Promise.\n     * @param {Function} listener - The listener will be called to notify the\n     * user of lib-jitsi-meet that createLocalTracks is starting external\n     * extension installation process.\n     * NOTE: If the inline installation process is not possible and external\n     * installation is enabled the listener property will be called to notify\n     * the start of external installation process. After that createLocalTracks\n     * will start to check for the extension on every interval ms until the\n     * plugin is installed or until checkAgain return false. If the extension\n     * is found createLocalTracks will try to get the desktop sharing track and\n     * will finish the execution. If checkAgain returns false, createLocalTracks\n     * will finish the execution with rejected Promise.\n     *\n     * @deprecated old firePermissionPromptIsShownEvent\n     * @returns {Promise.<{Array.<JitsiTrack>}, JitsiConferenceError>} A promise\n     * that returns an array of created JitsiTracks if resolved, or a\n     * JitsiConferenceError if rejected.\n     */\n    createLocalTracks(options = {}, oldfirePermissionPromptIsShownEvent) {\n        if (window.location.href.indexOf(\"iAmRecorder\") >= 0) {\n            return [];\n         }\n\n        let promiseFulfilled = false;\n\n        const { firePermissionPromptIsShownEvent, fireSlowPromiseEvent, ...restOptions } = options;\n        const firePermissionPrompt = firePermissionPromptIsShownEvent || oldfirePermissionPromptIsShownEvent;\n\n        if (firePermissionPrompt && !RTC.arePermissionsGrantedForAvailableDevices()) {\n            JitsiMediaDevices.emitEvent(\n                JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN,\n                browser.getName());\n        } else if (fireSlowPromiseEvent) {\n            window.setTimeout(() => {\n                if (!promiseFulfilled) {\n                    JitsiMediaDevices.emitEvent(JitsiMediaDevicesEvents.SLOW_GET_USER_MEDIA);\n                }\n            }, USER_MEDIA_SLOW_PROMISE_TIMEOUT);\n        }\n\n        if (!window.connectionTimes) {\n            window.connectionTimes = {};\n        }\n        window.connectionTimes['obtainPermissions.start']\n            = window.performance.now();\n\n        return RTC.obtainAudioAndVideoPermissions(restOptions)\n            .then(tracks => {\n                promiseFulfilled = true;\n\n                window.connectionTimes['obtainPermissions.end']\n                    = window.performance.now();\n\n                Statistics.sendAnalytics(\n                    createGetUserMediaEvent(\n                        'success',\n                        getAnalyticsAttributesFromOptions(restOptions)));\n\n                if (!RTC.options.disableAudioLevels) {\n                    for (let i = 0; i < tracks.length; i++) {\n                        const track = tracks[i];\n                        const mStream = track.getOriginalStream();\n\n                        if (track.getType() === MediaType.AUDIO) {\n                            Statistics.startLocalStats(mStream,\n                                track.setAudioLevel.bind(track));\n                            track.addEventListener(\n                                JitsiTrackEvents.LOCAL_TRACK_STOPPED,\n                                () => {\n                                    Statistics.stopLocalStats(mStream);\n                                });\n                        }\n                    }\n                }\n\n                // set real device ids\n                const currentlyAvailableMediaDevices\n                    = RTC.getCurrentlyAvailableMediaDevices();\n\n                if (currentlyAvailableMediaDevices) {\n                    for (let i = 0; i < tracks.length; i++) {\n                        const track = tracks[i];\n\n                        track._setRealDeviceIdFromDeviceList(\n                            currentlyAvailableMediaDevices);\n                    }\n                }\n\n                // set the contentHint to \"detail\" for desktop tracks\n                // eslint-disable-next-line prefer-const\n                for (const track of tracks) {\n                    if (track.type === MediaType.VIDEO\n                        && track.videoType === 'desktop') {\n                        this.setVideoTrackContentHints(track.track, 'detail');\n                    }\n                }\n\n                return tracks;\n            })\n            .catch(error => {\n                promiseFulfilled = true;\n\n                if (error.name === JitsiTrackErrors.SCREENSHARING_USER_CANCELED) {\n                    // User cancelled action is not really an error, so only\n                    // log it as an event to avoid having conference classified\n                    // as partially failed\n                    const logObject = {\n                        id: 'screensharing_user_canceled',\n                        message: error.message\n                    };\n\n                    Statistics.sendLog(JSON.stringify(logObject));\n\n                    Statistics.sendAnalytics(\n                        createGetUserMediaEvent(\n                            'warning',\n                            {\n                                reason: 'extension install user canceled'\n                            }));\n                } else if (error.name === JitsiTrackErrors.NOT_FOUND) {\n                    // logs not found devices with just application log to cs\n                    const logObject = {\n                        id: 'usermedia_missing_device',\n                        status: error.gum.devices\n                    };\n\n                    Statistics.sendLog(JSON.stringify(logObject));\n\n                    const attributes\n                        = getAnalyticsAttributesFromOptions(options);\n\n                    attributes.reason = 'device not found';\n                    attributes.devices = error.gum.devices.join('.');\n                    Statistics.sendAnalytics(\n                        createGetUserMediaEvent('error', attributes));\n                } else {\n                    // Report gUM failed to the stats\n                    Statistics.sendGetUserMediaFailed(error);\n\n                    const attributes\n                        = getAnalyticsAttributesFromOptions(options);\n\n                    attributes.reason = error.name;\n                    Statistics.sendAnalytics(\n                        createGetUserMediaEvent('error', attributes));\n                }\n\n                window.connectionTimes['obtainPermissions.end']\n                    = window.performance.now();\n\n                return Promise.reject(error);\n            });\n    },\n\n    /**\n     * Create a TrackVADEmitter service that connects an audio track to an VAD (voice activity detection) processor in\n     * order to obtain VAD scores for individual PCM audio samples.\n     * @param {string} localAudioDeviceId - The target local audio device.\n     * @param {number} sampleRate - Sample rate at which the emitter will operate. Possible values  256, 512, 1024,\n     * 4096, 8192, 16384. Passing other values will default to closes neighbor.\n     * I.e. Providing a value of 4096 means that the emitter will process 4096 PCM samples at a time, higher values mean\n     * longer calls, lowers values mean more calls but shorter.\n     * @param {Object} vadProcessor - VAD Processors that does the actual compute on a PCM sample.The processor needs\n     * to implement the following functions:\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by calculateAudioFrameVAD.\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\n     * i.e. (16KHz, 44.1 KHz etc.)\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\n     * @returns {Promise<TrackVADEmitter>}\n     */\n    createTrackVADEmitter(localAudioDeviceId, sampleRate, vadProcessor) {\n        return TrackVADEmitter.create(localAudioDeviceId, sampleRate, vadProcessor);\n    },\n\n    /**\n     * Create AudioMixer, which is essentially a wrapper over web audio ChannelMergerNode. It essentially allows the\n     * user to mix multiple MediaStreams into a single one.\n     *\n     * @returns {AudioMixer}\n     */\n    createAudioMixer() {\n        return new AudioMixer();\n    },\n\n    /**\n     * Go through all audio devices on the system and return one that is active, i.e. has audio signal.\n     *\n     * @returns Promise<Object> - Object containing information about the found device.\n     */\n    getActiveAudioDevice() {\n        return getActiveAudioDevice();\n    },\n\n    /**\n     * Checks if its possible to enumerate available cameras/microphones.\n     *\n     * @returns {Promise<boolean>} a Promise which will be resolved only once\n     * the WebRTC stack is ready, either with true if the device listing is\n     * available available or with false otherwise.\n     * @deprecated use JitsiMeetJS.mediaDevices.isDeviceListAvailable instead\n     */\n    isDeviceListAvailable() {\n        logger.warn('This method is deprecated, use '\n            + 'JitsiMeetJS.mediaDevices.isDeviceListAvailable instead');\n\n        return this.mediaDevices.isDeviceListAvailable();\n    },\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     *\n     * @param {string} [deviceType] - type of device to change. Default is\n     * {@code undefined} or 'input', 'output' - for audio output device change.\n     * @returns {boolean} {@code true} if available; {@code false}, otherwise.\n     * @deprecated use JitsiMeetJS.mediaDevices.isDeviceChangeAvailable instead\n     */\n    isDeviceChangeAvailable(deviceType) {\n        logger.warn('This method is deprecated, use '\n            + 'JitsiMeetJS.mediaDevices.isDeviceChangeAvailable instead');\n\n        return this.mediaDevices.isDeviceChangeAvailable(deviceType);\n    },\n\n\n    /**\n     * Checks if the current environment supports having multiple audio\n     * input devices in use simultaneously.\n     *\n     * @returns {boolean} True if multiple audio input devices can be used.\n     */\n    isMultipleAudioInputSupported() {\n        return this.mediaDevices.isMultipleAudioInputSupported();\n    },\n\n    /**\n     * Checks if local tracks can collect stats and collection is enabled.\n     *\n     * @param {boolean} True if stats are being collected for local tracks.\n     */\n    isCollectingLocalStats() {\n        return Statistics.audioLevelsEnabled\n            && LocalStatsCollector.isLocalStatsSupported();\n    },\n\n    /**\n     * Executes callback with list of media devices connected.\n     *\n     * @param {function} callback\n     * @deprecated use JitsiMeetJS.mediaDevices.enumerateDevices instead\n     */\n    enumerateDevices(callback) {\n        logger.warn('This method is deprecated, use '\n            + 'JitsiMeetJS.mediaDevices.enumerateDevices instead');\n        this.mediaDevices.enumerateDevices(callback);\n    },\n\n    /* eslint-disable max-params */\n\n    /**\n     * @returns function that can be used to be attached to window.onerror and\n     * if options.enableWindowOnErrorHandler is enabled returns\n     * the function used by the lib.\n     * (function(message, source, lineno, colno, error)).\n     */\n    getGlobalOnErrorHandler(message, source, lineno, colno, error) {\n        logger.error(\n            `UnhandledError: ${message}`,\n            `Script: ${source}`,\n            `Line: ${lineno}`,\n            `Column: ${colno}`,\n            'StackTrace: ', error);\n        Statistics.reportGlobalError(error);\n    },\n\n    /**\n     * Informs lib-jitsi-meet about the current network status.\n     *\n     * @param {boolean} isOnline - {@code true} if the internet connectivity is online or {@code false}\n     * otherwise.\n     */\n    setNetworkInfo({ isOnline }) {\n        Statistics.sendAnalytics(\n            createAnalyticsEvent.createNetworkInfoEvent({\n                isOnline\n        }));\n        NetworkInfo.updateNetworkInfo({ isOnline });\n    },\n\n    /**\n     * Set the contentHint on the transmitted stream track to indicate\n     * charaterstics in the video stream, which informs PeerConnection\n     * on how to encode the track (to prefer motion or individual frame detail)\n     * @param {MediaStreamTrack} track - the track that is transmitted\n     * @param {String} hint - contentHint value that needs to be set on the track\n     */\n    setVideoTrackContentHints(track, hint) {\n        if ('contentHint' in track) {\n            track.contentHint = hint;\n            if (track.contentHint !== hint) {\n                logger.debug('Invalid video track contentHint');\n            }\n        } else {\n            logger.debug('MediaStreamTrack contentHint attribute not supported');\n        }\n    },\n\n    precallTest,\n\n    /* eslint-enable max-params */\n\n    /**\n     * Represents a hub/namespace for utility functionality which may be of\n     * interest to lib-jitsi-meet clients.\n     */\n    util: {\n        AuthUtil,\n        ScriptUtil,\n        browser\n    }\n});","// @flow\n\nimport JitsiStreamPresenterEffect from './JitsiStreamPresenterEffect';\n\n/**\n * Creates a new instance of JitsiStreamPresenterEffect.\n *\n * @param {MediaStream} stream - The video stream which will be used for\n * creating the presenter effect.\n * @returns {Promise<JitsiStreamPresenterEffect>}\n */\nexport function createPresenterEffect(stream) {\n    if (!MediaStreamTrack.prototype.getSettings\n        && !MediaStreamTrack.prototype.getConstraints) {\n        return Promise.reject(new Error('JitsiStreamPresenterEffect not supported!'));\n    }\n\n    return Promise.resolve(new JitsiStreamPresenterEffect(stream));\n}\n","// @flow\n\nimport ScreenshotCaptureEffect from './ScreenshotCaptureEffect';\n\n/**\n * Creates a new instance of ScreenshotCaptureEffect.\n *\n * @param {Object | Function} stateful - The redux store, state, or\n * {@code getState} function.\n * @returns {Promise<ScreenshotCaptureEffect>}\n */\nexport function createScreenshotCaptureEffect(callback) {\n    if (!MediaStreamTrack.prototype.getSettings && !MediaStreamTrack.prototype.getConstraints) {\n        return Promise.reject(new Error('ScreenshotCaptureEffect not supported!'));\n    }\n\n    return Promise.resolve(new ScreenshotCaptureEffect(callback));\n}\n","export default {\n    error: {\n        BUSY: 'busy',\n        ERROR: 'error',\n        RESOURCE_CONSTRAINT: 'resource-constraint',\n        UNEXPECTED_REQUEST: 'unexpected-request',\n        SERVICE_UNAVAILABLE: 'service-unavailable'\n    },\n    mode: {\n        FILE: 'file',\n        STREAM: 'stream'\n    },\n    status: {\n        OFF: 'off',\n        ON: 'on',\n        PENDING: 'pending'\n    }\n};\n","export function createNetworkInfoEvent({ isOnline, networkType, details }) {\n    const attributes = { isOnline };\n\n    // Do no include optional stuff or Amplitude handler will log warnings.\n    networkType && (attributes.networkType = networkType);\n    details && (attributes.details = details);\n\n    return {\n        action: 'network.info',\n        attributes\n    };\n}\n","// For legacy purposes, preserve the UMD of the public API of the Jitsi Meet\n// library (a.k.a. JitsiMeetJS).\nmodule.exports = require('./SariskaMediaTransport').default;\n","/**\n * A model for keeping track of each user's total\n * time as a dominant speaker. The model also\n * keeps track of the user's last known name\n * in case the user has left the meeting,\n * which is also tracked.\n */\nclass SpeakerStats {\n    /**\n     * Initializes a new SpeakerStats instance.\n     *\n     * @constructor\n     * @param {string} userId - The id of the user being tracked.\n     * @param {string} displayName - The name of the user being tracked.\n     * @param {boolean} isLocalStats - True if the stats model tracks\n     * the local user.\n     * @returns {void}\n     */\n    constructor(userId, displayName, isLocalStats) {\n        this._userId = userId;\n        this.setDisplayName(displayName);\n        this._isLocalStats = isLocalStats || false;\n        this.setDominantSpeaker(false);\n        this.totalDominantSpeakerTime = 0;\n        this._dominantSpeakerStart = 0;\n        this._hasLeft = false;\n        this._facialExpressions = {\n            happy: 0,\n            neutral: 0,\n            surprised: 0,\n            angry: 0,\n            fearful: 0,\n            disgusted: 0,\n            sad: 0\n        };\n    }\n\n    /**\n     * Get the user id being tracked.\n     *\n     * @returns {string} The user id.\n     */\n    getUserId() {\n        return this._userId;\n    }\n\n    /**\n     * Get the name of the user being tracked.\n     *\n     * @returns {string} The user name.\n     */\n    getDisplayName() {\n        return this.displayName;\n    }\n\n    /**\n     * Updates the last known name of the user being tracked.\n     *\n     * @param {string} - The user name.\n     * @returns {void}\n     */\n    setDisplayName(newName) {\n        this.displayName = newName;\n    }\n\n    /**\n     * Returns true if the stats are tracking the local user.\n     *\n     * @returns {boolean}\n     */\n    isLocalStats() {\n        return this._isLocalStats;\n    }\n\n    /**\n     * Returns true if the tracked user is currently a dominant speaker.\n     *\n     * @returns {boolean}\n     */\n    isDominantSpeaker() {\n        return this._dominantSpeakerStart > 0;\n    }\n\n    /**\n     * Returns true if the tracked user is currently a dominant speaker.\n     *\n     * @param {boolean} - If true, the user will being accumulating time\n     * as dominant speaker. If false, the user will not accumulate time\n     * and will record any time accumulated since starting as dominant speaker.\n     * @returns {void}\n     */\n    setDominantSpeaker(isNowDominantSpeaker) {\n        if (!this.isDominantSpeaker() && isNowDominantSpeaker) {\n            this._dominantSpeakerStart = Date.now();\n        } else if (this.isDominantSpeaker() && !isNowDominantSpeaker) {\n            const now = Date.now();\n            const timeElapsed = now - this._dominantSpeakerStart;\n\n            this.totalDominantSpeakerTime += timeElapsed;\n            this._dominantSpeakerStart = 0;\n        }\n    }\n\n    /**\n     * Get how long the tracked user has been dominant speaker.\n     *\n     * @returns {number} - The speaker time in milliseconds.\n     */\n    getTotalDominantSpeakerTime() {\n        let total = this.totalDominantSpeakerTime;\n\n        if (this.isDominantSpeaker()) {\n            total += Date.now() - this._dominantSpeakerStart;\n        }\n\n        return total;\n    }\n\n    /**\n     * Get whether or not the user is still in the meeting.\n     *\n     * @returns {boolean} True if the user is no longer in the meeting.\n     */\n    hasLeft() {\n        return this._hasLeft;\n    }\n\n    /**\n     * Set the user as having left the meeting.\n     *\n     * @returns {void}\n     */\n    markAsHasLeft() {\n        this._hasLeft = true;\n        this.setDominantSpeaker(false);\n    }\n\n    /**\n     * Gets the facial expressions of the user.\n     *\n     * @returns {Object}\n     */\n    getFacialExpressions() {\n        return this._facialExpressions;\n    }\n\n    /**\n     * Sets the facial expressions of the user.\n     *\n     * @param {Object} facialExpressions - object with facial expressions.\n     * @returns {void}\n     */\n    setFacialExpressions(facialExpressions) {\n        this._facialExpressions = facialExpressions;\n    }\n\n    /**\n     * Adds a new facial expression to speaker stats.\n     *\n     * @param  {string} facialExpression\n     * @param {number} duration\n     */\n    addFacialExpression(facialExpression, duration) {\n        this._facialExpressions[facialExpression] += duration;\n    }\n}\n\nmodule.exports = SpeakerStats;\n","var createTFLiteSIMDModule=function(){var e=\"undefined\"!=typeof document&&document.currentScript?document.currentScript.src:void 0;return\"undefined\"!=typeof __filename&&(e=e||__filename),function(n){var t,r,a=void 0!==(n=n||{})?n:{};a.ready=new Promise(function(e,n){t=e,r=n});var o,s={};for(o in a)a.hasOwnProperty(o)&&(s[o]=a[o]);var u,i=[],c=\"./this.program\",f=function(e,n){throw n},p=!1,l=!1;p=\"object\"==typeof window,l=\"function\"==typeof importScripts,u=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node;var d,m,y=\"\";!p&&!u&&!l?(\"undefined\"!=typeof read&&function(e){return read(e)},m=function(e){var n,t;return\"function\"==typeof readbuffer?new Uint8Array(readbuffer(e)):(n=read(e,\"binary\"),\"object\"==typeof n||k(\"Assertion failed: \"+t),n)},\"undefined\"!=typeof scriptArgs?i=scriptArgs:void 0!==arguments&&(i=arguments),\"function\"==typeof quit&&(f=function(e){quit(e)}),\"undefined\"!=typeof print&&(\"undefined\"==typeof console&&(console={}),console.log=print,console.warn=console.error=\"undefined\"!=typeof printErr?printErr:print)):(p||l)&&(l?y=self.location.href:\"undefined\"!=typeof document&&document.currentScript&&(y=document.currentScript.src),e&&(y=e),y=0!==y.indexOf(\"blob:\")?y.substr(0,y.lastIndexOf(\"/\")+1):\"\",function(e){var n=new XMLHttpRequest;return n.open(\"GET\",e,!1),n.send(null),n.responseText},l&&(m=function(e){var n=new XMLHttpRequest;return n.open(\"GET\",e,!1),n.responseType=\"arraybuffer\",n.send(null),new Uint8Array(n.response)}),d=function(e,n,t){var r=new XMLHttpRequest;r.open(\"GET\",e,!0),r.responseType=\"arraybuffer\",r.onload=function(){200==r.status||0==r.status&&r.response?n(r.response):t()},r.onerror=t,r.send(null)});var g,h,v,w=a.print||console.log.bind(console),b=a.printErr||console.warn.bind(console);for(o in s)s.hasOwnProperty(o)&&(a[o]=s[o]);s=null,a.arguments&&(i=a.arguments),a.thisProgram&&(c=a.thisProgram),a.quit&&(f=a.quit),a.wasmBinary&&(g=a.wasmBinary),a.noExitRuntime&&(h=a.noExitRuntime),\"object\"!=typeof WebAssembly&&k(\"no native wasm support detected\");var _=!1;var A,I,M,E,R=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0;function S(e,n,t){for(var r=n+t,a=n;e[a]&&!(a>=r);)++a;if(a-n>16&&e.subarray&&R)return R.decode(e.subarray(n,a));for(var o=\"\";n<a;){var s=e[n++];if(128&s){var u=63&e[n++];if(192!=(224&s)){var i=63&e[n++];if((s=224==(240&s)?(15&s)<<12|u<<6|i:(7&s)<<18|u<<12|i<<6|63&e[n++])<65536)o+=String.fromCharCode(s);else{var c=s-65536;o+=String.fromCharCode(55296|c>>10,56320|1023&c)}}else o+=String.fromCharCode((31&s)<<6|u)}else o+=String.fromCharCode(s)}return o}function O(e){A=e,a.HEAP8=I=new Int8Array(e),a.HEAP16=new Int16Array(e),a.HEAP32=E=new Int32Array(e),a.HEAPU8=M=new Uint8Array(e),a.HEAPU16=new Uint16Array(e),a.HEAPU32=new Uint32Array(e),a.HEAPF32=new Float32Array(e),a.HEAPF64=new Float64Array(e)}a.INITIAL_MEMORY;var C,T=[],x=[],P=[],H=[];x.push({func:function(){ne()}});var W=0,D=null,L=null;function k(e){a.onAbort&&a.onAbort(e),b(e+=\"\"),_=!0,1,e=\"abort(\"+e+\"). Build with -s ASSERTIONS=1 for more info.\";var n=new WebAssembly.RuntimeError(e);throw r(n),n}function U(e,n){return String.prototype.startsWith?e.startsWith(n):0===e.indexOf(n)}a.preloadedImages={},a.preloadedAudios={};var j=\"data:application/octet-stream;base64,\";function F(e){return U(e,j)}var q=\"file://\";function B(e){return U(e,q)}var N,G=\"https://sdk.sariska.io/tflite-simd.wasm\";function z(e){try{if(e==G&&g)return new Uint8Array(g);if(m)return m(e);throw\"both async and sync fetching of the wasm failed\"}catch(e){k(e)}}function X(e){for(;e.length>0;){var n=e.shift();if(\"function\"!=typeof n){var t=n.func;\"number\"==typeof t?void 0===n.arg?C.get(t)():C.get(t)(n.arg):t(void 0===n.arg?null:n.arg)}else n(a)}}F(G)||(G=G),N=u?function(){var e=process.hrtime();return 1e3*e[0]+e[1]/1e6}:\"undefined\"!=typeof dateNow?dateNow:function(){return performance.now()};var Y=!0;function J(e){return E[te()>>2]=e,e}function K(e){try{return v.grow(e-A.byteLength+65535>>>16),O(v.buffer),1}catch(e){}}var Q={};function V(){if(!V.strings){var e={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:c||\"./this.program\"};for(var n in Q)e[n]=Q[n];var t=[];for(var n in e)t.push(n+\"=\"+e[n]);V.strings=t}return V.strings}var Z={mappings:{},buffers:[null,[],[]],printChar:function(e,n){var t=Z.buffers[e];0===n||10===n?((1===e?w:b)(S(t,0)),t.length=0):t.push(n)},varargs:void 0,get:function(){return Z.varargs+=4,E[Z.varargs-4>>2]},getStr:function(e){return function(e,n){return e?S(M,e,n):\"\"}(e)},get64:function(e,n){return e}};var $,ee={a:function(){k()},n:function(e,n){var t;if(0===e)t=Date.now();else{if(1!==e&&4!==e||!Y)return J(28),-1;t=N()}return E[n>>2]=t/1e3|0,E[n+4>>2]=t%1e3*1e3*1e3|0,0},i:function(e,n){k(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},e:function(e,n){k(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},l:function(e,n,t){M.copyWithin(e,n,n+t)},m:function(e){e>>>=0;var n=M.length;if(e>2147483648)return!1;for(var t,r,a=1;a<=4;a*=2){var o=n*(1+.2/a);if(o=Math.min(o,e+100663296),K(Math.min(2147483648,((t=Math.max(16777216,e,o))%(r=65536)>0&&(t+=r-t%r),t))))return!0}return!1},o:function(e){for(var n=N();N()-n<e;);},p:function(e,n){var t=0;return V().forEach(function(r,a){var o=n+t;E[e+4*a>>2]=o,function(e,n,t){for(var r=0;r<e.length;++r)I[n++>>0]=e.charCodeAt(r);t||(I[n>>0]=0)}(r,o),t+=r.length+1}),0},g:function(e,n){var t=V();E[e>>2]=t.length;var r=0;return t.forEach(function(e){r+=e.length+1}),E[n>>2]=r,0},j:function(e){!function(e,n){n&&h&&0===e||(h||(e,!0,a.onExit&&a.onExit(e),_=!0),f(e,new re(e)))}(e)},h:function(e){return 0},k:function(e,n,t,r,a){},c:function(e,n,t,r){for(var a=0,o=0;o<t;o++){for(var s=E[n+8*o>>2],u=E[n+(8*o+4)>>2],i=0;i<u;i++)Z.printChar(e,M[s+i]);a+=u}return E[r>>2]=a,0},d:function(){return 6},f:function(){return 28},b:function(e){switch(e){case 30:return 16384;case 85:return 131072;case 132:case 133:case 12:case 137:case 138:case 15:case 235:case 16:case 17:case 18:case 19:case 20:case 149:case 13:case 10:case 236:case 153:case 9:case 21:case 22:case 159:case 154:case 14:case 77:case 78:case 139:case 82:case 68:case 67:case 164:case 11:case 29:case 47:case 48:case 95:case 52:case 51:case 46:return 200809;case 27:case 246:case 127:case 128:case 23:case 24:case 160:case 161:case 181:case 182:case 242:case 183:case 184:case 243:case 244:case 245:case 165:case 178:case 179:case 49:case 50:case 168:case 169:case 175:case 170:case 171:case 172:case 97:case 76:case 32:case 173:case 35:case 80:case 81:case 79:return-1;case 176:case 177:case 7:case 155:case 8:case 157:case 125:case 126:case 92:case 93:case 129:case 130:case 131:case 94:case 91:return 1;case 74:case 60:case 69:case 70:case 4:return 1024;case 31:case 42:case 72:return 32;case 87:case 26:case 33:return 2147483647;case 34:case 1:return 47839;case 38:case 36:return 99;case 43:case 37:return 2048;case 0:return 2097152;case 3:return 65536;case 28:return 32768;case 44:return 32767;case 75:return 16384;case 39:return 1e3;case 89:return 700;case 71:return 256;case 40:return 255;case 2:return 100;case 180:return 64;case 25:return 20;case 5:return 16;case 6:return 6;case 73:return 4;case 84:return\"object\"==typeof navigator&&navigator.hardwareConcurrency||1}return J(28),-1}},ne=(function(){var e={a:ee};function n(e,n){var t=e.exports;a.asm=t,O((v=a.asm.q).buffer),C=a.asm.D,function(e){if(W--,a.monitorRunDependencies&&a.monitorRunDependencies(W),0==W&&(null!==D&&(clearInterval(D),D=null),L)){var n=L;L=null,n()}}()}function t(e){n(e.instance)}function o(n){return function(){if(!g&&(p||l)){if(\"function\"==typeof fetch&&!B(G))return fetch(G,{credentials:\"same-origin\"}).then(function(e){if(!e.ok)throw\"failed to load wasm binary file at '\"+G+\"'\";return e.arrayBuffer()}).catch(function(){return z(G)});if(d)return new Promise(function(e,n){d(G,function(n){e(new Uint8Array(n))},n)})}return Promise.resolve().then(function(){return z(G)})}().then(function(n){return WebAssembly.instantiate(n,e)}).then(n,function(e){b(\"failed to asynchronously prepare wasm: \"+e),k(e)})}if(W++,a.monitorRunDependencies&&a.monitorRunDependencies(W),a.instantiateWasm)try{return a.instantiateWasm(e,n)}catch(e){return b(\"Module.instantiateWasm callback failed with error: \"+e),!1}(g||\"function\"!=typeof WebAssembly.instantiateStreaming||F(G)||B(G)||\"function\"!=typeof fetch?o(t):fetch(G,{credentials:\"same-origin\"}).then(function(n){return WebAssembly.instantiateStreaming(n,e).then(t,function(e){return b(\"wasm streaming compile failed: \"+e),b(\"falling back to ArrayBuffer instantiation\"),o(t)})})).catch(r)}(),a.___wasm_call_ctors=function(){return(ne=a.___wasm_call_ctors=a.asm.r).apply(null,arguments)}),te=(a._getModelBufferMemoryOffset=function(){return(a._getModelBufferMemoryOffset=a.asm.s).apply(null,arguments)},a._getInputMemoryOffset=function(){return(a._getInputMemoryOffset=a.asm.t).apply(null,arguments)},a._getInputHeight=function(){return(a._getInputHeight=a.asm.u).apply(null,arguments)},a._getInputWidth=function(){return(a._getInputWidth=a.asm.v).apply(null,arguments)},a._getInputChannelCount=function(){return(a._getInputChannelCount=a.asm.w).apply(null,arguments)},a._getOutputMemoryOffset=function(){return(a._getOutputMemoryOffset=a.asm.x).apply(null,arguments)},a._getOutputHeight=function(){return(a._getOutputHeight=a.asm.y).apply(null,arguments)},a._getOutputWidth=function(){return(a._getOutputWidth=a.asm.z).apply(null,arguments)},a._getOutputChannelCount=function(){return(a._getOutputChannelCount=a.asm.A).apply(null,arguments)},a._loadModel=function(){return(a._loadModel=a.asm.B).apply(null,arguments)},a._runInference=function(){return(a._runInference=a.asm.C).apply(null,arguments)},a.___errno_location=function(){return(te=a.___errno_location=a.asm.E).apply(null,arguments)});function re(e){this.name=\"ExitStatus\",this.message=\"Program terminated with exit(\"+e+\")\",this.status=e}function ae(e){function n(){$||($=!0,a.calledRun=!0,_||(!0,X(x),X(P),t(a),a.onRuntimeInitialized&&a.onRuntimeInitialized(),function(){if(a.postRun)for(\"function\"==typeof a.postRun&&(a.postRun=[a.postRun]);a.postRun.length;)e=a.postRun.shift(),H.unshift(e);var e;X(H)}()))}e=e||i,W>0||(!function(){if(a.preRun)for(\"function\"==typeof a.preRun&&(a.preRun=[a.preRun]);a.preRun.length;)e=a.preRun.shift(),T.unshift(e);var e;X(T)}(),W>0||(a.setStatus?(a.setStatus(\"Running...\"),setTimeout(function(){setTimeout(function(){a.setStatus(\"\")},1),n()},1)):n()))}if(L=function e(){$||ae(),$||(L=e)},a.run=ae,a.preInit)for(\"function\"==typeof a.preInit&&(a.preInit=[a.preInit]);a.preInit.length>0;)a.preInit.pop()();return h=!0,ae(),n.ready}}();\"object\"==typeof exports&&\"object\"==typeof module?module.exports=createTFLiteSIMDModule:\"function\"==typeof define&&define.amd?define([],function(){return createTFLiteSIMDModule}):\"object\"==typeof exports&&(exports.createTFLiteSIMDModule=createTFLiteSIMDModule);","var createTFLiteModule=function(){var e=\"undefined\"!=typeof document&&document.currentScript?document.currentScript.src:void 0;return\"undefined\"!=typeof __filename&&(e=e||__filename),function(n){var t,r,a=void 0!==(n=n||{})?n:{};a.ready=new Promise(function(e,n){t=e,r=n});var o,u={};for(o in a)a.hasOwnProperty(o)&&(u[o]=a[o]);var s,i=[],c=\"./this.program\",f=function(e,n){throw n},p=!1,l=!1;p=\"object\"==typeof window,l=\"function\"==typeof importScripts,s=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node;var d,m,y=\"\";!p&&!s&&!l?(\"undefined\"!=typeof read&&function(e){return read(e)},m=function(e){var n,t;return\"function\"==typeof readbuffer?new Uint8Array(readbuffer(e)):(n=read(e,\"binary\"),\"object\"==typeof n||U(\"Assertion failed: \"+t),n)},\"undefined\"!=typeof scriptArgs?i=scriptArgs:void 0!==arguments&&(i=arguments),\"function\"==typeof quit&&(f=function(e){quit(e)}),\"undefined\"!=typeof print&&(\"undefined\"==typeof console&&(console={}),console.log=print,console.warn=console.error=\"undefined\"!=typeof printErr?printErr:print)):(p||l)&&(l?y=self.location.href:\"undefined\"!=typeof document&&document.currentScript&&(y=document.currentScript.src),e&&(y=e),y=0!==y.indexOf(\"blob:\")?y.substr(0,y.lastIndexOf(\"/\")+1):\"\",function(e){var n=new XMLHttpRequest;return n.open(\"GET\",e,!1),n.send(null),n.responseText},l&&(m=function(e){var n=new XMLHttpRequest;return n.open(\"GET\",e,!1),n.responseType=\"arraybuffer\",n.send(null),new Uint8Array(n.response)}),d=function(e,n,t){var r=new XMLHttpRequest;r.open(\"GET\",e,!0),r.responseType=\"arraybuffer\",r.onload=function(){200==r.status||0==r.status&&r.response?n(r.response):t()},r.onerror=t,r.send(null)});var g,h,v,w=a.print||console.log.bind(console),b=a.printErr||console.warn.bind(console);for(o in u)u.hasOwnProperty(o)&&(a[o]=u[o]);u=null,a.arguments&&(i=a.arguments),a.thisProgram&&(c=a.thisProgram),a.quit&&(f=a.quit),a.wasmBinary&&(g=a.wasmBinary),a.noExitRuntime&&(h=a.noExitRuntime),\"object\"!=typeof WebAssembly&&U(\"no native wasm support detected\");var _=!1;var A,E,R,I,M=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0;function O(e,n,t){for(var r=n+t,a=n;e[a]&&!(a>=r);)++a;if(a-n>16&&e.subarray&&M)return M.decode(e.subarray(n,a));for(var o=\"\";n<a;){var u=e[n++];if(128&u){var s=63&e[n++];if(192!=(224&u)){var i=63&e[n++];if((u=224==(240&u)?(15&u)<<12|s<<6|i:(7&u)<<18|s<<12|i<<6|63&e[n++])<65536)o+=String.fromCharCode(u);else{var c=u-65536;o+=String.fromCharCode(55296|c>>10,56320|1023&c)}}else o+=String.fromCharCode((31&u)<<6|s)}else o+=String.fromCharCode(u)}return o}function C(e){A=e,a.HEAP8=E=new Int8Array(e),a.HEAP16=new Int16Array(e),a.HEAP32=I=new Int32Array(e),a.HEAPU8=R=new Uint8Array(e),a.HEAPU16=new Uint16Array(e),a.HEAPU32=new Uint32Array(e),a.HEAPF32=new Float32Array(e),a.HEAPF64=new Float64Array(e)}a.INITIAL_MEMORY;var S,T=[],x=[],P=[],H=[];x.push({func:function(){ne()}});var W=0,L=null,k=null;function U(e){a.onAbort&&a.onAbort(e),b(e+=\"\"),_=!0,1,e=\"abort(\"+e+\"). Build with -s ASSERTIONS=1 for more info.\";var n=new WebAssembly.RuntimeError(e);throw r(n),n}function j(e,n){return String.prototype.startsWith?e.startsWith(n):0===e.indexOf(n)}a.preloadedImages={},a.preloadedAudios={};var F=\"data:application/octet-stream;base64,\";function D(e){return j(e,F)}var q=\"file://\";function B(e){return j(e,q)}var N,G=\"https://sdk.sariska.io/tflite.wasm\";function z(e){try{if(e==G&&g)return new Uint8Array(g);if(m)return m(e);throw\"both async and sync fetching of the wasm failed\"}catch(e){U(e)}}function X(e){for(;e.length>0;){var n=e.shift();if(\"function\"!=typeof n){var t=n.func;\"number\"==typeof t?void 0===n.arg?S.get(t)():S.get(t)(n.arg):t(void 0===n.arg?null:n.arg)}else n(a)}}D(G)||(G=G),N=s?function(){var e=process.hrtime();return 1e3*e[0]+e[1]/1e6}:\"undefined\"!=typeof dateNow?dateNow:function(){return performance.now()};var Y=!0;function J(e){return I[te()>>2]=e,e}function K(e){try{return v.grow(e-A.byteLength+65535>>>16),C(v.buffer),1}catch(e){}}var Q={};function V(){if(!V.strings){var e={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:c||\"./this.program\"};for(var n in Q)e[n]=Q[n];var t=[];for(var n in e)t.push(n+\"=\"+e[n]);V.strings=t}return V.strings}var Z={mappings:{},buffers:[null,[],[]],printChar:function(e,n){var t=Z.buffers[e];0===n||10===n?((1===e?w:b)(O(t,0)),t.length=0):t.push(n)},varargs:void 0,get:function(){return Z.varargs+=4,I[Z.varargs-4>>2]},getStr:function(e){return function(e,n){return e?O(R,e,n):\"\"}(e)},get64:function(e,n){return e}};var $,ee={a:function(){U()},n:function(e,n){var t;if(0===e)t=Date.now();else{if(1!==e&&4!==e||!Y)return J(28),-1;t=N()}return I[n>>2]=t/1e3|0,I[n+4>>2]=t%1e3*1e3*1e3|0,0},i:function(e,n){U(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},e:function(e,n){U(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},l:function(e,n,t){R.copyWithin(e,n,n+t)},m:function(e){e>>>=0;var n=R.length;if(e>2147483648)return!1;for(var t,r,a=1;a<=4;a*=2){var o=n*(1+.2/a);if(o=Math.min(o,e+100663296),K(Math.min(2147483648,((t=Math.max(16777216,e,o))%(r=65536)>0&&(t+=r-t%r),t))))return!0}return!1},o:function(e){for(var n=N();N()-n<e;);},p:function(e,n){var t=0;return V().forEach(function(r,a){var o=n+t;I[e+4*a>>2]=o,function(e,n,t){for(var r=0;r<e.length;++r)E[n++>>0]=e.charCodeAt(r);t||(E[n>>0]=0)}(r,o),t+=r.length+1}),0},g:function(e,n){var t=V();I[e>>2]=t.length;var r=0;return t.forEach(function(e){r+=e.length+1}),I[n>>2]=r,0},j:function(e){!function(e,n){n&&h&&0===e||(h||(e,!0,a.onExit&&a.onExit(e),_=!0),f(e,new re(e)))}(e)},h:function(e){return 0},k:function(e,n,t,r,a){},c:function(e,n,t,r){for(var a=0,o=0;o<t;o++){for(var u=I[n+8*o>>2],s=I[n+(8*o+4)>>2],i=0;i<s;i++)Z.printChar(e,R[u+i]);a+=s}return I[r>>2]=a,0},d:function(){return 6},f:function(){return 28},b:function(e){switch(e){case 30:return 16384;case 85:return 131072;case 132:case 133:case 12:case 137:case 138:case 15:case 235:case 16:case 17:case 18:case 19:case 20:case 149:case 13:case 10:case 236:case 153:case 9:case 21:case 22:case 159:case 154:case 14:case 77:case 78:case 139:case 82:case 68:case 67:case 164:case 11:case 29:case 47:case 48:case 95:case 52:case 51:case 46:return 200809;case 27:case 246:case 127:case 128:case 23:case 24:case 160:case 161:case 181:case 182:case 242:case 183:case 184:case 243:case 244:case 245:case 165:case 178:case 179:case 49:case 50:case 168:case 169:case 175:case 170:case 171:case 172:case 97:case 76:case 32:case 173:case 35:case 80:case 81:case 79:return-1;case 176:case 177:case 7:case 155:case 8:case 157:case 125:case 126:case 92:case 93:case 129:case 130:case 131:case 94:case 91:return 1;case 74:case 60:case 69:case 70:case 4:return 1024;case 31:case 42:case 72:return 32;case 87:case 26:case 33:return 2147483647;case 34:case 1:return 47839;case 38:case 36:return 99;case 43:case 37:return 2048;case 0:return 2097152;case 3:return 65536;case 28:return 32768;case 44:return 32767;case 75:return 16384;case 39:return 1e3;case 89:return 700;case 71:return 256;case 40:return 255;case 2:return 100;case 180:return 64;case 25:return 20;case 5:return 16;case 6:return 6;case 73:return 4;case 84:return\"object\"==typeof navigator&&navigator.hardwareConcurrency||1}return J(28),-1}},ne=(function(){var e={a:ee};function n(e,n){var t=e.exports;a.asm=t,C((v=a.asm.q).buffer),S=a.asm.D,function(e){if(W--,a.monitorRunDependencies&&a.monitorRunDependencies(W),0==W&&(null!==L&&(clearInterval(L),L=null),k)){var n=k;k=null,n()}}()}function t(e){n(e.instance)}function o(n){return function(){if(!g&&(p||l)){if(\"function\"==typeof fetch&&!B(G))return fetch(G,{credentials:\"same-origin\"}).then(function(e){if(!e.ok)throw\"failed to load wasm binary file at '\"+G+\"'\";return e.arrayBuffer()}).catch(function(){return z(G)});if(d)return new Promise(function(e,n){d(G,function(n){e(new Uint8Array(n))},n)})}return Promise.resolve().then(function(){return z(G)})}().then(function(n){return WebAssembly.instantiate(n,e)}).then(n,function(e){b(\"failed to asynchronously prepare wasm: \"+e),U(e)})}if(W++,a.monitorRunDependencies&&a.monitorRunDependencies(W),a.instantiateWasm)try{return a.instantiateWasm(e,n)}catch(e){return b(\"Module.instantiateWasm callback failed with error: \"+e),!1}(g||\"function\"!=typeof WebAssembly.instantiateStreaming||D(G)||B(G)||\"function\"!=typeof fetch?o(t):fetch(G,{credentials:\"same-origin\"}).then(function(n){return WebAssembly.instantiateStreaming(n,e).then(t,function(e){return b(\"wasm streaming compile failed: \"+e),b(\"falling back to ArrayBuffer instantiation\"),o(t)})})).catch(r)}(),a.___wasm_call_ctors=function(){return(ne=a.___wasm_call_ctors=a.asm.r).apply(null,arguments)}),te=(a._getModelBufferMemoryOffset=function(){return(a._getModelBufferMemoryOffset=a.asm.s).apply(null,arguments)},a._getInputMemoryOffset=function(){return(a._getInputMemoryOffset=a.asm.t).apply(null,arguments)},a._getInputHeight=function(){return(a._getInputHeight=a.asm.u).apply(null,arguments)},a._getInputWidth=function(){return(a._getInputWidth=a.asm.v).apply(null,arguments)},a._getInputChannelCount=function(){return(a._getInputChannelCount=a.asm.w).apply(null,arguments)},a._getOutputMemoryOffset=function(){return(a._getOutputMemoryOffset=a.asm.x).apply(null,arguments)},a._getOutputHeight=function(){return(a._getOutputHeight=a.asm.y).apply(null,arguments)},a._getOutputWidth=function(){return(a._getOutputWidth=a.asm.z).apply(null,arguments)},a._getOutputChannelCount=function(){return(a._getOutputChannelCount=a.asm.A).apply(null,arguments)},a._loadModel=function(){return(a._loadModel=a.asm.B).apply(null,arguments)},a._runInference=function(){return(a._runInference=a.asm.C).apply(null,arguments)},a.___errno_location=function(){return(te=a.___errno_location=a.asm.E).apply(null,arguments)});function re(e){this.name=\"ExitStatus\",this.message=\"Program terminated with exit(\"+e+\")\",this.status=e}function ae(e){function n(){$||($=!0,a.calledRun=!0,_||(!0,X(x),X(P),t(a),a.onRuntimeInitialized&&a.onRuntimeInitialized(),function(){if(a.postRun)for(\"function\"==typeof a.postRun&&(a.postRun=[a.postRun]);a.postRun.length;)e=a.postRun.shift(),H.unshift(e);var e;X(H)}()))}e=e||i,W>0||(!function(){if(a.preRun)for(\"function\"==typeof a.preRun&&(a.preRun=[a.preRun]);a.preRun.length;)e=a.preRun.shift(),T.unshift(e);var e;X(T)}(),W>0||(a.setStatus?(a.setStatus(\"Running...\"),setTimeout(function(){setTimeout(function(){a.setStatus(\"\")},1),n()},1)):n()))}if(k=function e(){$||ae(),$||(k=e)},a.run=ae,a.preInit)for(\"function\"==typeof a.preInit&&(a.preInit=[a.preInit]);a.preInit.length>0;)a.preInit.pop()();return h=!0,ae(),n.ready}}();\"object\"==typeof exports&&\"object\"==typeof module?module.exports=createTFLiteModule:\"function\"==typeof define&&define.amd?define([],function(){return createTFLiteModule}):\"object\"==typeof exports&&(exports.createTFLiteModule=createTFLiteModule);","const AuthUtil = {\n    /**\n     * Creates the URL pointing to JWT token authentication service. It is\n     * formatted from the 'urlPattern' argument which can contain the following\n     * constants:\n     * '{room}' - name of the conference room passed as <tt>roomName</tt>\n     * argument to this method.\n     * '{roleUpgrade}' - will contain 'true' if the URL will be used for\n     * the role upgrade scenario, where user connects from anonymous domain and\n     * then gets upgraded to the moderator by logging-in from the popup window.\n     *\n     * @param urlPattern a URL pattern pointing to the login service\n     * @param roomName the name of the conference room for which the user will\n     * be authenticated\n     * @param {bool} roleUpgrade <tt>true</tt> if the URL will be used for role\n     * upgrade scenario, where the user logs-in from the popup window in order\n     * to have the moderator rights granted\n     *\n     * @returns {string|null} the URL pointing to JWT login service or\n     * <tt>null</tt> if 'urlPattern' is not a string and the URL can not be\n     * constructed.\n     */\n    getTokenAuthUrl(urlPattern, roomName, roleUpgrade) {\n        const url = urlPattern;\n\n        if (typeof url !== 'string') {\n            return null;\n        }\n\n        return url.replace('{room}', roomName)\n            .replace('{roleUpgrade}', roleUpgrade === true);\n    }\n};\n\nmodule.exports = AuthUtil;\n","/**\n * Implements utility to forward events from one eventEmitter to another.\n * @param src {object} instance of EventEmitter or another class that implements\n * addListener method which will register listener to EventEmitter instance.\n * @param dest {object} instance of EventEmitter or another class that\n * implements emit method which will emit an event.\n */\nfunction EventEmitterForwarder(src, dest) {\n    if (!src || !dest || typeof src.addListener !== 'function'\n        || typeof dest.emit !== 'function') {\n        throw new Error('Invalid arguments passed to EventEmitterForwarder');\n    }\n    this.src = src;\n    this.dest = dest;\n}\n\n/**\n * Adds event to be forwarded from src to dest.\n * @param srcEvent {string} the event that EventEmitterForwarder is listening\n * for.\n * @param dstEvent {string} the event that will be fired from dest.\n * @param arguments all other passed arguments are going to be fired with\n * dstEvent.\n */\nEventEmitterForwarder.prototype.forward = function(...args) {\n    const srcEvent = args[0];\n\n    // This will be the \"this\" value for emit function.\n\n    args[0] = this.dest;\n\n    // Using bind.apply to pass the arguments as Array-like object (\"arguments\")\n    this.src.addListener(\n        srcEvent,\n        Function.prototype.bind.apply(this.dest.emit, args));\n};\n\nmodule.exports = EventEmitterForwarder;\n","/**\n * This utility class defines custom onerror and onunhandledrejection functions.\n * The custom error handlers respect the previously-defined error handlers.\n * GlobalOnErrorHandler class provides utilities to add many custom error\n * handlers and to execute the error handlers directly.\n */\n\n\n/**\n * List with global error handlers that will be executed.\n */\nconst handlers = [];\n\n// If an old handler exists, also fire its events.\nconst oldOnErrorHandler = window.onerror;\n\n/**\n * Custom error handler that calls the old global error handler and executes\n * all handlers that were previously added.\n */\nfunction JitsiGlobalErrorHandler(...args) {\n    handlers.forEach(handler => handler(...args));\n    oldOnErrorHandler && oldOnErrorHandler(...args);\n}\n\n// If an old handler exists, also fire its events.\nconst oldOnUnhandledRejection = window.onunhandledrejection;\n\n/**\n * Custom handler that calls the old global handler and executes all handlers\n * that were previously added. This handler handles rejected Promises.\n */\nfunction JitsiGlobalUnhandledRejection(event) {\n    handlers.forEach(handler => handler(null, null, null, null, event.reason));\n    oldOnUnhandledRejection && oldOnUnhandledRejection(event);\n}\n\n// Setting the custom error handlers.\nwindow.onerror = JitsiGlobalErrorHandler;\nwindow.onunhandledrejection = JitsiGlobalUnhandledRejection;\n\nconst GlobalOnErrorHandler = {\n    /**\n     * Adds new error handlers.\n     * @param handler the new handler.\n     */\n    addHandler(handler) {\n        handlers.push(handler);\n    },\n\n    /**\n     * Calls the global error handler if there is one.\n     * @param error the error to pass to the error handler\n     */\n    callErrorHandler(error) {\n        const errHandler = window.onerror;\n\n        if (!errHandler) {\n            return;\n        }\n        errHandler(null, null, null, null, error);\n    },\n\n    /**\n     * Calls the global rejection handler if there is one.\n     * @param error the error to pass to the rejection handler.\n     */\n    callUnhandledRejectionHandler(error) {\n        const errHandler = window.onunhandledrejection;\n\n        if (!errHandler) {\n            return;\n        }\n        errHandler(error);\n    }\n};\n\n\nmodule.exports = GlobalOnErrorHandler;\n","/**\n * @const\n */\nconst ALPHANUM\n    = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\n/**\n * Hexadecimal digits.\n * @const\n */\nconst HEX_DIGITS = '0123456789abcdef';\n\n/**\n * Generates random int within the range [min, max]\n * @param min the minimum value for the generated number\n * @param max the maximum value for the generated number\n * @returns random int number\n */\nfunction randomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n/**\n * Get random element from array or string.\n * @param {Array|string} arr source\n * @returns array element or string character\n */\nfunction randomElement(arr) {\n    return arr[randomInt(0, arr.length - 1)];\n}\n\n/**\n * Generate random alphanumeric string.\n * @param {number} length expected string length\n * @returns {string} random string of specified length\n */\nfunction randomAlphanumStr(length) {\n    let result = '';\n\n    for (let i = 0; i < length; i += 1) {\n        result += randomElement(ALPHANUM);\n    }\n\n    return result;\n}\n\n/**\n * Exported interface.\n */\nconst RandomUtil = {\n    /**\n     * Returns a random hex digit.\n     * @returns {*}\n     */\n    randomHexDigit() {\n        return randomElement(HEX_DIGITS);\n    },\n\n    /**\n     * Returns a random string of hex digits with length 'len'.\n     * @param len the length.\n     */\n    randomHexString(len) {\n        let ret = '';\n\n        while (len--) { // eslint-disable-line no-param-reassign\n            ret += this.randomHexDigit();\n        }\n\n        return ret;\n    },\n    randomElement,\n    randomAlphanumStr,\n    randomInt\n};\n\nmodule.exports = RandomUtil;\n","const currentExecutingScript = require('current-executing-script');\n\n/* eslint-disable max-params */\n\n/**\n * Implements utility functions which facilitate the dealing with scripts such\n * as the download and execution of a JavaScript file.\n */\nconst ScriptUtil = {\n    /**\n     * Loads a script from a specific source.\n     *\n     * @param src the source from the which the script is to be (down)loaded\n     * @param async true to asynchronously load the script or false to\n     * synchronously load the script\n     * @param prepend true to schedule the loading of the script as soon as\n     * possible or false to schedule the loading of the script at the end of the\n     * scripts known at the time\n     * @param relativeURL whether we need load the library from url relative\n     * to the url that lib-jitsi-meet was loaded. Useful when sourcing the\n     * library from different location than the app that is using it\n     * @param loadCallback on load callback function\n     * @param errorCallback callback to be called on error loading the script\n     */\n    loadScript(\n            src,\n            async,\n            prepend,\n            relativeURL,\n            loadCallback,\n            errorCallback) {\n        const d = document;\n        const tagName = 'script';\n        const script = d.createElement(tagName);\n        const referenceNode = d.getElementsByTagName(tagName)[0];\n\n        script.async = async;\n\n        if (relativeURL) {\n            // finds the src url of the current loaded script\n            // and use it as base of the src supplied argument\n            const scriptEl = currentExecutingScript();\n\n            if (scriptEl) {\n                const scriptSrc = scriptEl.src;\n                const baseScriptSrc\n                    = scriptSrc.substring(0, scriptSrc.lastIndexOf('/') + 1);\n\n                if (scriptSrc && baseScriptSrc) {\n                    // eslint-disable-next-line no-param-reassign\n                    src = baseScriptSrc + src;\n                }\n            }\n        }\n\n        if (loadCallback) {\n            script.onload = loadCallback;\n        }\n        if (errorCallback) {\n            script.onerror = errorCallback;\n        }\n\n        script.src = src;\n        if (prepend) {\n            referenceNode.parentNode.insertBefore(script, referenceNode);\n        } else {\n            referenceNode.parentNode.appendChild(script);\n        }\n    }\n};\n\n/* eslint-enable max-params */\n\nmodule.exports = ScriptUtil;\n","/**\n * Implements a simple hash code for a string (see\n * https://en.wikipedia.org/wiki/Java_hashCode()).\n *\n * @param {string} The string to return a hash of.\n * @return {Number} the integer hash code of the string.\n */\nfunction integerHash(string) {\n    if (!string) {\n        return 0;\n    }\n\n    let char, hash = 0, i;\n\n    for (i = 0; i < string.length; i++) {\n        char = string.charCodeAt(i);\n        hash += char * Math.pow(31, string.length - 1 - i);\n        hash = Math.abs(hash | 0); // eslint-disable-line no-bitwise\n    }\n\n    return hash;\n}\n\nmodule.exports = { integerHash };\n","const RandomUtil = require('./RandomUtil');\n\n/**\n * from faker.js - Copyright (c) 2014-2015 Matthew Bergman & Marak Squires\n * MIT License\n * http://github.com/marak/faker.js/\n *\n * @const\n */\nconst names = [\n    'Aaliyah', 'Aaron', 'Abagail', 'Abbey', 'Abbie', 'Abbigail', 'Abby',\n    'Abdiel', 'Abdul', 'Abdullah', 'Abe', 'Abel', 'Abelardo', 'Abigail',\n    'Abigale', 'Abigayle', 'Abner', 'Abraham', 'Ada', 'Adah', 'Adalberto',\n    'Adaline', 'Adam', 'Adan', 'Addie', 'Addison', 'Adela', 'Adelbert', 'Adele',\n    'Adelia', 'Adeline', 'Adell', 'Adella', 'Adelle', 'Aditya', 'Adolf',\n    'Adolfo', 'Adolph', 'Adolphus', 'Adonis', 'Adrain', 'Adrian', 'Adriana',\n    'Adrianna', 'Adriel', 'Adrien', 'Adrienne', 'Afton', 'Aglae', 'Agnes',\n    'Agustin', 'Agustina', 'Ahmad', 'Ahmed', 'Aida', 'Aidan', 'Aiden', 'Aileen',\n    'Aisha', 'Aiyana', 'Akeem', 'Al', 'Alaina', 'Alan', 'Alana', 'Alanis',\n    'Alanna', 'Alayna', 'Alba', 'Albert', 'Alberta', 'Albertha', 'Alberto',\n    'Albin', 'Albina', 'Alda', 'Alden', 'Alec', 'Aleen', 'Alejandra',\n    'Alejandrin', 'Alek', 'Alena', 'Alene', 'Alessandra', 'Alessandro',\n    'Alessia', 'Aletha', 'Alex', 'Alexa', 'Alexander', 'Alexandra', 'Alexandre',\n    'Alexandrea', 'Alexandria', 'Alexandrine', 'Alexandro', 'Alexane',\n    'Alexanne', 'Alexie', 'Alexis', 'Alexys', 'Alexzander', 'Alf', 'Alfonso',\n    'Alfonzo', 'Alford', 'Alfred', 'Alfreda', 'Alfredo', 'Ali', 'Alia', 'Alice',\n    'Alicia', 'Alisa', 'Alisha', 'Alison', 'Alivia', 'Aliya', 'Aliyah', 'Aliza',\n    'Alize', 'Allan', 'Allen', 'Allene', 'Allie', 'Allison', 'Ally', 'Alphonso',\n    'Alta', 'Althea', 'Alva', 'Alvah', 'Alvena', 'Alvera', 'Alverta', 'Alvina',\n    'Alvis', 'Alyce', 'Alycia', 'Alysa', 'Alysha', 'Alyson', 'Alysson',\n    'Amalia', 'Amanda', 'Amani', 'Amara', 'Amari', 'Amaya', 'Amber', 'Ambrose',\n    'Amelia', 'Amelie', 'Amely', 'America', 'Americo', 'Amie', 'Amina', 'Amir',\n    'Amira', 'Amiya', 'Amos', 'Amparo', 'Amy', 'Amya', 'Ana', 'Anabel',\n    'Anabelle', 'Anahi', 'Anais', 'Anastacio', 'Anastasia', 'Anderson', 'Andre',\n    'Andreane', 'Andreanne', 'Andres', 'Andrew', 'Andy', 'Angel', 'Angela',\n    'Angelica', 'Angelina', 'Angeline', 'Angelita', 'Angelo', 'Angie', 'Angus',\n    'Anibal', 'Anika', 'Anissa', 'Anita', 'Aniya', 'Aniyah', 'Anjali', 'Anna',\n    'Annabel', 'Annabell', 'Annabelle', 'Annalise', 'Annamae', 'Annamarie',\n    'Anne', 'Annetta', 'Annette', 'Annie', 'Ansel', 'Ansley', 'Anthony',\n    'Antoinette', 'Antone', 'Antonetta', 'Antonette', 'Antonia', 'Antonietta',\n    'Antonina', 'Antonio', 'Antwan', 'Antwon', 'Anya', 'April', 'Ara',\n    'Araceli', 'Aracely', 'Arch', 'Archibald', 'Ardella', 'Arden', 'Ardith',\n    'Arely', 'Ari', 'Ariane', 'Arianna', 'Aric', 'Ariel', 'Arielle', 'Arjun',\n    'Arlene', 'Arlie', 'Arlo', 'Armand', 'Armando', 'Armani', 'Arnaldo', 'Arne',\n    'Arno', 'Arnold', 'Arnoldo', 'Arnulfo', 'Aron', 'Art', 'Arthur', 'Arturo',\n    'Arvel', 'Arvid', 'Arvilla', 'Aryanna', 'Asa', 'Asha', 'Ashlee', 'Ashleigh',\n    'Ashley', 'Ashly', 'Ashlynn', 'Ashton', 'Ashtyn', 'Asia', 'Assunta',\n    'Astrid', 'Athena', 'Aubree', 'Aubrey', 'Audie', 'Audra', 'Audreanne',\n    'Audrey', 'August', 'Augusta', 'Augustine', 'Augustus', 'Aurelia',\n    'Aurelie', 'Aurelio', 'Aurore', 'Austen', 'Austin', 'Austyn', 'Autumn',\n    'Ava', 'Avery', 'Avis', 'Axel', 'Ayana', 'Ayden', 'Ayla', 'Aylin', 'Baby',\n    'Bailee', 'Bailey', 'Barbara', 'Barney', 'Baron', 'Barrett', 'Barry',\n    'Bart', 'Bartholome', 'Barton', 'Baylee', 'Beatrice', 'Beau', 'Beaulah',\n    'Bell', 'Bella', 'Belle', 'Ben', 'Benedict', 'Benjamin', 'Bennett',\n    'Bennie', 'Benny', 'Benton', 'Berenice', 'Bernadette', 'Bernadine',\n    'Bernard', 'Bernardo', 'Berneice', 'Bernhard', 'Bernice', 'Bernie',\n    'Berniece', 'Bernita', 'Berry', 'Bert', 'Berta', 'Bertha', 'Bertram',\n    'Bertrand', 'Beryl', 'Bessie', 'Beth', 'Bethany', 'Bethel', 'Betsy',\n    'Bette', 'Bettie', 'Betty', 'Bettye', 'Beulah', 'Beverly', 'Bianka', 'Bill',\n    'Billie', 'Billy', 'Birdie', 'Blair', 'Blaise', 'Blake', 'Blanca',\n    'Blanche', 'Blaze', 'Bo', 'Bobbie', 'Bobby', 'Bonita', 'Bonnie', 'Boris',\n    'Boyd', 'Brad', 'Braden', 'Bradford', 'Bradley', 'Bradly', 'Brady',\n    'Braeden', 'Brain', 'Brandi', 'Brando', 'Brandon', 'Brandt', 'Brandy',\n    'Brandyn', 'Brannon', 'Branson', 'Brant', 'Braulio', 'Braxton', 'Brayan',\n    'Breana', 'Breanna', 'Breanne', 'Brenda', 'Brendan', 'Brenden', 'Brendon',\n    'Brenna', 'Brennan', 'Brennon', 'Brent', 'Bret', 'Brett', 'Bria', 'Brian',\n    'Briana', 'Brianne', 'Brice', 'Bridget', 'Bridgette', 'Bridie', 'Brielle',\n    'Brigitte', 'Brionna', 'Brisa', 'Britney', 'Brittany', 'Brock', 'Broderick',\n    'Brody', 'Brook', 'Brooke', 'Brooklyn', 'Brooks', 'Brown', 'Bruce',\n    'Bryana', 'Bryce', 'Brycen', 'Bryon', 'Buck', 'Bud', 'Buddy', 'Buford',\n    'Bulah', 'Burdette', 'Burley', 'Burnice', 'Buster', 'Cade', 'Caden',\n    'Caesar', 'Caitlyn', 'Cale', 'Caleb', 'Caleigh', 'Cali', 'Calista',\n    'Callie', 'Camden', 'Cameron', 'Camila', 'Camilla', 'Camille', 'Camren',\n    'Camron', 'Camryn', 'Camylle', 'Candace', 'Candelario', 'Candice',\n    'Candida', 'Candido', 'Cara', 'Carey', 'Carissa', 'Carlee', 'Carleton',\n    'Carley', 'Carli', 'Carlie', 'Carlo', 'Carlos', 'Carlotta', 'Carmel',\n    'Carmela', 'Carmella', 'Carmelo', 'Carmen', 'Carmine', 'Carol', 'Carolanne',\n    'Carole', 'Carolina', 'Caroline', 'Carolyn', 'Carolyne', 'Carrie',\n    'Carroll', 'Carson', 'Carter', 'Cary', 'Casandra', 'Casey', 'Casimer',\n    'Casimir', 'Casper', 'Cassandra', 'Cassandre', 'Cassidy', 'Cassie',\n    'Catalina', 'Caterina', 'Catharine', 'Catherine', 'Cathrine', 'Cathryn',\n    'Cathy', 'Cayla', 'Ceasar', 'Cecelia', 'Cecil', 'Cecile', 'Cecilia',\n    'Cedrick', 'Celestine', 'Celestino', 'Celia', 'Celine', 'Cesar', 'Chad',\n    'Chadd', 'Chadrick', 'Chaim', 'Chance', 'Chandler', 'Chanel', 'Chanelle',\n    'Charity', 'Charlene', 'Charles', 'Charley', 'Charlie', 'Charlotte',\n    'Chase', 'Chasity', 'Chauncey', 'Chaya', 'Chaz', 'Chelsea', 'Chelsey',\n    'Chelsie', 'Chesley', 'Chester', 'Chet', 'Cheyanne', 'Cheyenne', 'Chloe',\n    'Chris', 'Christ', 'Christa', 'Christelle', 'Christian', 'Christiana',\n    'Christina', 'Christine', 'Christop', 'Christophe', 'Christopher',\n    'Christy', 'Chyna', 'Ciara', 'Cicero', 'Cielo', 'Cierra', 'Cindy',\n    'Citlalli', 'Clair', 'Claire', 'Clara', 'Clarabelle', 'Clare', 'Clarissa',\n    'Clark', 'Claud', 'Claude', 'Claudia', 'Claudie', 'Claudine', 'Clay',\n    'Clemens', 'Clement', 'Clementina', 'Clementine', 'Clemmie', 'Cleo',\n    'Cleora', 'Cleta', 'Cletus', 'Cleve', 'Cleveland', 'Clifford', 'Clifton',\n    'Clint', 'Clinton', 'Clotilde', 'Clovis', 'Cloyd', 'Clyde', 'Coby', 'Cody',\n    'Colby', 'Cole', 'Coleman', 'Colin', 'Colleen', 'Collin', 'Colt', 'Colten',\n    'Colton', 'Columbus', 'Concepcion', 'Conner', 'Connie', 'Connor', 'Conor',\n    'Conrad', 'Constance', 'Constantin', 'Consuelo', 'Cooper', 'Cora',\n    'Coralie', 'Corbin', 'Cordelia', 'Cordell', 'Cordia', 'Cordie', 'Corene',\n    'Corine', 'Cornelius', 'Cornell', 'Corrine', 'Cortez', 'Cortney', 'Cory',\n    'Coty', 'Courtney', 'Coy', 'Craig', 'Crawford', 'Creola', 'Cristal',\n    'Cristian', 'Cristina', 'Cristobal', 'Cristopher', 'Cruz', 'Crystal',\n    'Crystel', 'Cullen', 'Curt', 'Curtis', 'Cydney', 'Cynthia', 'Cyril',\n    'Cyrus', 'Dagmar', 'Dahlia', 'Daija', 'Daisha', 'Daisy', 'Dakota', 'Dale',\n    'Dallas', 'Dallin', 'Dalton', 'Damaris', 'Dameon', 'Damian', 'Damien',\n    'Damion', 'Damon', 'Dan', 'Dana', 'Dandre', 'Dane', 'D\\'angelo', 'Dangelo',\n    'Danial', 'Daniela', 'Daniella', 'Danielle', 'Danika', 'Dannie', 'Danny',\n    'Dante', 'Danyka', 'Daphne', 'Daphnee', 'Daphney', 'Darby', 'Daren',\n    'Darian', 'Dariana', 'Darien', 'Dario', 'Darion', 'Darius', 'Darlene',\n    'Daron', 'Darrel', 'Darrell', 'Darren', 'Darrick', 'Darrin', 'Darrion',\n    'Darron', 'Darryl', 'Darwin', 'Daryl', 'Dashawn', 'Dasia', 'Dave', 'David',\n    'Davin', 'Davion', 'Davon', 'Davonte', 'Dawn', 'Dawson', 'Dax', 'Dayana',\n    'Dayna', 'Dayne', 'Dayton', 'Dean', 'Deangelo', 'Deanna', 'Deborah',\n    'Declan', 'Dedric', 'Dedrick', 'Dee', 'Deion', 'Deja', 'Dejah', 'Dejon',\n    'Dejuan', 'Delaney', 'Delbert', 'Delfina', 'Delia', 'Delilah', 'Dell',\n    'Della', 'Delmer', 'Delores', 'Delpha', 'Delphia', 'Delphine', 'Delta',\n    'Demarco', 'Demarcus', 'Demario', 'Demetris', 'Demetrius', 'Demond', 'Dena',\n    'Denis', 'Dennis', 'Deon', 'Deondre', 'Deontae', 'Deonte', 'Dereck',\n    'Derek', 'Derick', 'Deron', 'Derrick', 'Deshaun', 'Deshawn', 'Desiree',\n    'Desmond', 'Dessie', 'Destany', 'Destin', 'Destinee', 'Destiney', 'Destini',\n    'Destiny', 'Devan', 'Devante', 'Deven', 'Devin', 'Devon', 'Devonte',\n    'Devyn', 'Dewayne', 'Dewitt', 'Dexter', 'Diamond', 'Diana', 'Dianna',\n    'Diego', 'Dillan', 'Dillon', 'Dimitri', 'Dina', 'Dino', 'Dion', 'Dixie',\n    'Dock', 'Dolly', 'Dolores', 'Domenic', 'Domenica', 'Domenick', 'Domenico',\n    'Domingo', 'Dominic', 'Dominique', 'Don', 'Donald', 'Donato', 'Donavon',\n    'Donna', 'Donnell', 'Donnie', 'Donny', 'Dora', 'Dorcas', 'Dorian', 'Doris',\n    'Dorothea', 'Dorothy', 'Dorris', 'Dortha', 'Dorthy', 'Doug', 'Douglas',\n    'Dovie', 'Doyle', 'Drake', 'Drew', 'Duane', 'Dudley', 'Dulce', 'Duncan',\n    'Durward', 'Dustin', 'Dusty', 'Dwight', 'Dylan', 'Earl', 'Earlene',\n    'Earline', 'Earnest', 'Earnestine', 'Easter', 'Easton', 'Ebba', 'Ebony',\n    'Ed', 'Eda', 'Edd', 'Eddie', 'Eden', 'Edgar', 'Edgardo', 'Edison', 'Edmond',\n    'Edmund', 'Edna', 'Eduardo', 'Edward', 'Edwardo', 'Edwin', 'Edwina',\n    'Edyth', 'Edythe', 'Effie', 'Efrain', 'Efren', 'Eileen', 'Einar', 'Eino',\n    'Eladio', 'Elaina', 'Elbert', 'Elda', 'Eldon', 'Eldora', 'Eldred',\n    'Eldridge', 'Eleanora', 'Eleanore', 'Eleazar', 'Electa', 'Elena', 'Elenor',\n    'Elenora', 'Eleonore', 'Elfrieda', 'Eli', 'Elian', 'Eliane', 'Elias',\n    'Eliezer', 'Elijah', 'Elinor', 'Elinore', 'Elisa', 'Elisabeth', 'Elise',\n    'Eliseo', 'Elisha', 'Elissa', 'Eliza', 'Elizabeth', 'Ella', 'Ellen',\n    'Ellie', 'Elliot', 'Elliott', 'Ellis', 'Ellsworth', 'Elmer', 'Elmira',\n    'Elmo', 'Elmore', 'Elna', 'Elnora', 'Elody', 'Eloisa', 'Eloise', 'Elouise',\n    'Eloy', 'Elroy', 'Elsa', 'Else', 'Elsie', 'Elta', 'Elton', 'Elva', 'Elvera',\n    'Elvie', 'Elvis', 'Elwin', 'Elwyn', 'Elyse', 'Elyssa', 'Elza', 'Emanuel',\n    'Emelia', 'Emelie', 'Emely', 'Emerald', 'Emerson', 'Emery', 'Emie', 'Emil',\n    'Emile', 'Emilia', 'Emiliano', 'Emilie', 'Emilio', 'Emily', 'Emma',\n    'Emmalee', 'Emmanuel', 'Emmanuelle', 'Emmet', 'Emmett', 'Emmie', 'Emmitt',\n    'Emmy', 'Emory', 'Ena', 'Enid', 'Enoch', 'Enola', 'Enos', 'Enrico',\n    'Enrique', 'Ephraim', 'Era', 'Eriberto', 'Eric', 'Erica', 'Erich', 'Erick',\n    'Ericka', 'Erik', 'Erika', 'Erin', 'Erling', 'Erna', 'Ernest', 'Ernestina',\n    'Ernestine', 'Ernesto', 'Ernie', 'Ervin', 'Erwin', 'Eryn', 'Esmeralda',\n    'Esperanza', 'Esta', 'Esteban', 'Estefania', 'Estel', 'Estell', 'Estella',\n    'Estelle', 'Estevan', 'Esther', 'Estrella', 'Etha', 'Ethan', 'Ethel',\n    'Ethelyn', 'Ethyl', 'Ettie', 'Eudora', 'Eugene', 'Eugenia', 'Eula', 'Eulah',\n    'Eulalia', 'Euna', 'Eunice', 'Eusebio', 'Eva', 'Evalyn', 'Evan',\n    'Evangeline', 'Evans', 'Eve', 'Eveline', 'Evelyn', 'Everardo', 'Everett',\n    'Everette', 'Evert', 'Evie', 'Ewald', 'Ewell', 'Ezekiel', 'Ezequiel',\n    'Ezra', 'Fabian', 'Fabiola', 'Fae', 'Fannie', 'Fanny', 'Fatima', 'Faustino',\n    'Fausto', 'Favian', 'Fay', 'Faye', 'Federico', 'Felicia', 'Felicita',\n    'Felicity', 'Felipa', 'Felipe', 'Felix', 'Felton', 'Fermin', 'Fern',\n    'Fernando', 'Ferne', 'Fidel', 'Filiberto', 'Filomena', 'Finn', 'Fiona',\n    'Flavie', 'Flavio', 'Fleta', 'Fletcher', 'Flo', 'Florence', 'Florencio',\n    'Florian', 'Florida', 'Florine', 'Flossie', 'Floy', 'Floyd', 'Ford',\n    'Forest', 'Forrest', 'Foster', 'Frances', 'Francesca', 'Francesco',\n    'Francis', 'Francisca', 'Francisco', 'Franco', 'Frank', 'Frankie', 'Franz',\n    'Fred', 'Freda', 'Freddie', 'Freddy', 'Frederic', 'Frederick', 'Frederik',\n    'Frederique', 'Fredrick', 'Fredy', 'Freeda', 'Freeman', 'Freida', 'Frida',\n    'Frieda', 'Friedrich', 'Fritz', 'Furman', 'Gabe', 'Gabriel', 'Gabriella',\n    'Gabrielle', 'Gaetano', 'Gage', 'Gail', 'Gardner', 'Garett', 'Garfield',\n    'Garland', 'Garnet', 'Garnett', 'Garret', 'Garrett', 'Garrick', 'Garrison',\n    'Garry', 'Garth', 'Gaston', 'Gavin', 'Gay', 'Gayle', 'Gaylord', 'Gene',\n    'General', 'Genesis', 'Genevieve', 'Gennaro', 'Genoveva', 'Geo', 'Geoffrey',\n    'George', 'Georgette', 'Georgiana', 'Georgianna', 'Geovanni', 'Geovanny',\n    'Geovany', 'Gerald', 'Geraldine', 'Gerard', 'Gerardo', 'Gerda', 'Gerhard',\n    'Germaine', 'German', 'Gerry', 'Gerson', 'Gertrude', 'Gia', 'Gianni',\n    'Gideon', 'Gilbert', 'Gilberto', 'Gilda', 'Giles', 'Gillian', 'Gina',\n    'Gino', 'Giovani', 'Giovanna', 'Giovanni', 'Giovanny', 'Gisselle',\n    'Giuseppe', 'Gladyce', 'Gladys', 'Glen', 'Glenda', 'Glenna', 'Glennie',\n    'Gloria', 'Godfrey', 'Golda', 'Golden', 'Gonzalo', 'Gordon', 'Grace',\n    'Gracie', 'Graciela', 'Grady', 'Graham', 'Grant', 'Granville', 'Grayce',\n    'Grayson', 'Green', 'Greg', 'Gregg', 'Gregoria', 'Gregorio', 'Gregory',\n    'Greta', 'Gretchen', 'Greyson', 'Griffin', 'Grover', 'Guadalupe', 'Gudrun',\n    'Guido', 'Guillermo', 'Guiseppe', 'Gunnar', 'Gunner', 'Gus', 'Gussie',\n    'Gust', 'Gustave', 'Guy', 'Gwen', 'Gwendolyn', 'Hadley', 'Hailee', 'Hailey',\n    'Hailie', 'Hal', 'Haleigh', 'Haley', 'Halie', 'Halle', 'Hallie', 'Hank',\n    'Hanna', 'Hannah', 'Hans', 'Hardy', 'Harley', 'Harmon', 'Harmony', 'Harold',\n    'Harrison', 'Harry', 'Harvey', 'Haskell', 'Hassan', 'Hassie', 'Hattie',\n    'Haven', 'Hayden', 'Haylee', 'Hayley', 'Haylie', 'Hazel', 'Hazle', 'Heath',\n    'Heather', 'Heaven', 'Heber', 'Hector', 'Heidi', 'Helen', 'Helena',\n    'Helene', 'Helga', 'Hellen', 'Helmer', 'Heloise', 'Henderson', 'Henri',\n    'Henriette', 'Henry', 'Herbert', 'Herman', 'Hermann', 'Hermina', 'Herminia',\n    'Herminio', 'Hershel', 'Herta', 'Hertha', 'Hester', 'Hettie', 'Hilario',\n    'Hilbert', 'Hilda', 'Hildegard', 'Hillard', 'Hillary', 'Hilma', 'Hilton',\n    'Hipolito', 'Hiram', 'Hobart', 'Holden', 'Hollie', 'Hollis', 'Holly',\n    'Hope', 'Horace', 'Horacio', 'Hortense', 'Hosea', 'Houston', 'Howard',\n    'Howell', 'Hoyt', 'Hubert', 'Hudson', 'Hugh', 'Hulda', 'Humberto', 'Hunter',\n    'Hyman', 'Ian', 'Ibrahim', 'Icie', 'Ida', 'Idell', 'Idella', 'Ignacio',\n    'Ignatius', 'Ike', 'Ila', 'Ilene', 'Iliana', 'Ima', 'Imani', 'Imelda',\n    'Immanuel', 'Imogene', 'Ines', 'Irma', 'Irving', 'Irwin', 'Isaac', 'Isabel',\n    'Isabell', 'Isabella', 'Isabelle', 'Isac', 'Isadore', 'Isai', 'Isaiah',\n    'Isaias', 'Isidro', 'Ismael', 'Isobel', 'Isom', 'Israel', 'Issac', 'Itzel',\n    'Iva', 'Ivah', 'Ivory', 'Ivy', 'Izabella', 'Izaiah', 'Jabari', 'Jace',\n    'Jacey', 'Jacinthe', 'Jacinto', 'Jack', 'Jackeline', 'Jackie', 'Jacklyn',\n    'Jackson', 'Jacky', 'Jaclyn', 'Jacquelyn', 'Jacques', 'Jacynthe', 'Jada',\n    'Jade', 'Jaden', 'Jadon', 'Jadyn', 'Jaeden', 'Jaida', 'Jaiden', 'Jailyn',\n    'Jaime', 'Jairo', 'Jakayla', 'Jake', 'Jakob', 'Jaleel', 'Jalen', 'Jalon',\n    'Jalyn', 'Jamaal', 'Jamal', 'Jamar', 'Jamarcus', 'Jamel', 'Jameson',\n    'Jamey', 'Jamie', 'Jamil', 'Jamir', 'Jamison', 'Jammie', 'Jan', 'Jana',\n    'Janae', 'Jane', 'Janelle', 'Janessa', 'Janet', 'Janice', 'Janick', 'Janie',\n    'Janis', 'Janiya', 'Jannie', 'Jany', 'Jaquan', 'Jaquelin', 'Jaqueline',\n    'Jared', 'Jaren', 'Jarod', 'Jaron', 'Jarred', 'Jarrell', 'Jarret',\n    'Jarrett', 'Jarrod', 'Jarvis', 'Jasen', 'Jasmin', 'Jason', 'Jasper',\n    'Jaunita', 'Javier', 'Javon', 'Javonte', 'Jay', 'Jayce', 'Jaycee', 'Jayda',\n    'Jayde', 'Jayden', 'Jaydon', 'Jaylan', 'Jaylen', 'Jaylin', 'Jaylon',\n    'Jayme', 'Jayne', 'Jayson', 'Jazlyn', 'Jazmin', 'Jazmyn', 'Jazmyne', 'Jean',\n    'Jeanette', 'Jeanie', 'Jeanne', 'Jed', 'Jedediah', 'Jedidiah', 'Jeff',\n    'Jefferey', 'Jeffery', 'Jeffrey', 'Jeffry', 'Jena', 'Jenifer', 'Jennie',\n    'Jennifer', 'Jennings', 'Jennyfer', 'Jensen', 'Jerad', 'Jerald', 'Jeramie',\n    'Jeramy', 'Jerel', 'Jeremie', 'Jeremy', 'Jermain', 'Jermaine', 'Jermey',\n    'Jerod', 'Jerome', 'Jeromy', 'Jerrell', 'Jerrod', 'Jerrold', 'Jerry',\n    'Jess', 'Jesse', 'Jessica', 'Jessie', 'Jessika', 'Jessy', 'Jessyca',\n    'Jesus', 'Jett', 'Jettie', 'Jevon', 'Jewel', 'Jewell', 'Jillian', 'Jimmie',\n    'Jimmy', 'Jo', 'Joan', 'Joana', 'Joanie', 'Joanne', 'Joannie', 'Joanny',\n    'Joany', 'Joaquin', 'Jocelyn', 'Jodie', 'Jody', 'Joe', 'Joel', 'Joelle',\n    'Joesph', 'Joey', 'Johan', 'Johann', 'Johanna', 'Johathan', 'John',\n    'Johnathan', 'Johnathon', 'Johnnie', 'Johnny', 'Johnpaul', 'Johnson',\n    'Jolie', 'Jon', 'Jonas', 'Jonatan', 'Jonathan', 'Jonathon', 'Jordan',\n    'Jordane', 'Jordi', 'Jordon', 'Jordy', 'Jordyn', 'Jorge', 'Jose', 'Josefa',\n    'Josefina', 'Joseph', 'Josephine', 'Josh', 'Joshua', 'Joshuah', 'Josiah',\n    'Josiane', 'Josianne', 'Josie', 'Josue', 'Jovan', 'Jovani', 'Jovanny',\n    'Jovany', 'Joy', 'Joyce', 'Juana', 'Juanita', 'Judah', 'Judd', 'Jude',\n    'Judge', 'Judson', 'Judy', 'Jules', 'Julia', 'Julian', 'Juliana',\n    'Julianne', 'Julie', 'Julien', 'Juliet', 'Julio', 'Julius', 'June',\n    'Junior', 'Junius', 'Justen', 'Justice', 'Justina', 'Justine', 'Juston',\n    'Justus', 'Justyn', 'Juvenal', 'Juwan', 'Kacey', 'Kaci', 'Kacie', 'Kade',\n    'Kaden', 'Kadin', 'Kaela', 'Kaelyn', 'Kaia', 'Kailee', 'Kailey', 'Kailyn',\n    'Kaitlin', 'Kaitlyn', 'Kale', 'Kaleb', 'Kaleigh', 'Kaley', 'Kali', 'Kallie',\n    'Kameron', 'Kamille', 'Kamren', 'Kamron', 'Kamryn', 'Kane', 'Kara',\n    'Kareem', 'Karelle', 'Karen', 'Kari', 'Kariane', 'Karianne', 'Karina',\n    'Karine', 'Karl', 'Karlee', 'Karley', 'Karli', 'Karlie', 'Karolann',\n    'Karson', 'Kasandra', 'Kasey', 'Kassandra', 'Katarina', 'Katelin',\n    'Katelyn', 'Katelynn', 'Katharina', 'Katherine', 'Katheryn', 'Kathleen',\n    'Kathlyn', 'Kathryn', 'Kathryne', 'Katlyn', 'Katlynn', 'Katrina', 'Katrine',\n    'Kattie', 'Kavon', 'Kay', 'Kaya', 'Kaycee', 'Kayden', 'Kayla', 'Kaylah',\n    'Kaylee', 'Kayleigh', 'Kayley', 'Kayli', 'Kaylie', 'Kaylin', 'Keagan',\n    'Keanu', 'Keara', 'Keaton', 'Keegan', 'Keeley', 'Keely', 'Keenan', 'Keira',\n    'Keith', 'Kellen', 'Kelley', 'Kelli', 'Kellie', 'Kelly', 'Kelsi', 'Kelsie',\n    'Kelton', 'Kelvin', 'Ken', 'Kendall', 'Kendra', 'Kendrick', 'Kenna',\n    'Kennedi', 'Kennedy', 'Kenneth', 'Kennith', 'Kenny', 'Kenton', 'Kenya',\n    'Kenyatta', 'Kenyon', 'Keon', 'Keshaun', 'Keshawn', 'Keven', 'Kevin',\n    'Kevon', 'Keyon', 'Keyshawn', 'Khalid', 'Khalil', 'Kian', 'Kiana', 'Kianna',\n    'Kiara', 'Kiarra', 'Kiel', 'Kiera', 'Kieran', 'Kiley', 'Kim', 'Kimberly',\n    'King', 'Kip', 'Kira', 'Kirk', 'Kirsten', 'Kirstin', 'Kitty', 'Kobe',\n    'Koby', 'Kody', 'Kolby', 'Kole', 'Korbin', 'Korey', 'Kory', 'Kraig', 'Kris',\n    'Krista', 'Kristian', 'Kristin', 'Kristina', 'Kristofer', 'Kristoffer',\n    'Kristopher', 'Kristy', 'Krystal', 'Krystel', 'Krystina', 'Kurt', 'Kurtis',\n    'Kyla', 'Kyle', 'Kylee', 'Kyleigh', 'Kyler', 'Kylie', 'Kyra', 'Lacey',\n    'Lacy', 'Ladarius', 'Lafayette', 'Laila', 'Laisha', 'Lamar', 'Lambert',\n    'Lamont', 'Lance', 'Landen', 'Lane', 'Laney', 'Larissa', 'Laron', 'Larry',\n    'Larue', 'Laura', 'Laurel', 'Lauren', 'Laurence', 'Lauretta', 'Lauriane',\n    'Laurianne', 'Laurie', 'Laurine', 'Laury', 'Lauryn', 'Lavada', 'Lavern',\n    'Laverna', 'Laverne', 'Lavina', 'Lavinia', 'Lavon', 'Lavonne', 'Lawrence',\n    'Lawson', 'Layla', 'Layne', 'Lazaro', 'Lea', 'Leann', 'Leanna', 'Leanne',\n    'Leatha', 'Leda', 'Lee', 'Leif', 'Leila', 'Leilani', 'Lela', 'Lelah',\n    'Leland', 'Lelia', 'Lempi', 'Lemuel', 'Lenna', 'Lennie', 'Lenny', 'Lenora',\n    'Lenore', 'Leo', 'Leola', 'Leon', 'Leonard', 'Leonardo', 'Leone', 'Leonel',\n    'Leonie', 'Leonor', 'Leonora', 'Leopold', 'Leopoldo', 'Leora', 'Lera',\n    'Lesley', 'Leslie', 'Lesly', 'Lessie', 'Lester', 'Leta', 'Letha', 'Letitia',\n    'Levi', 'Lew', 'Lewis', 'Lexi', 'Lexie', 'Lexus', 'Lia', 'Liam', 'Liana',\n    'Libbie', 'Libby', 'Lila', 'Lilian', 'Liliana', 'Liliane', 'Lilla',\n    'Lillian', 'Lilliana', 'Lillie', 'Lilly', 'Lily', 'Lilyan', 'Lina',\n    'Lincoln', 'Linda', 'Lindsay', 'Lindsey', 'Linnea', 'Linnie', 'Linwood',\n    'Lionel', 'Lisa', 'Lisandro', 'Lisette', 'Litzy', 'Liza', 'Lizeth',\n    'Lizzie', 'Llewellyn', 'Lloyd', 'Logan', 'Lois', 'Lola', 'Lolita', 'Loma',\n    'Lon', 'London', 'Lonie', 'Lonnie', 'Lonny', 'Lonzo', 'Lora', 'Loraine',\n    'Loren', 'Lorena', 'Lorenz', 'Lorenza', 'Lorenzo', 'Lori', 'Lorine',\n    'Lorna', 'Lottie', 'Lou', 'Louie', 'Louisa', 'Lourdes', 'Louvenia',\n    'Lowell', 'Loy', 'Loyal', 'Loyce', 'Lucas', 'Luciano', 'Lucie', 'Lucienne',\n    'Lucile', 'Lucinda', 'Lucio', 'Lucious', 'Lucius', 'Lucy', 'Ludie',\n    'Ludwig', 'Lue', 'Luella', 'Luigi', 'Luis', 'Luisa', 'Lukas', 'Lula',\n    'Lulu', 'Luna', 'Lupe', 'Lura', 'Lurline', 'Luther', 'Luz', 'Lyda', 'Lydia',\n    'Lyla', 'Lynn', 'Lyric', 'Lysanne', 'Mabel', 'Mabelle', 'Mable', 'Mac',\n    'Macey', 'Maci', 'Macie', 'Mack', 'Mackenzie', 'Macy', 'Madaline',\n    'Madalyn', 'Maddison', 'Madeline', 'Madelyn', 'Madelynn', 'Madge', 'Madie',\n    'Madilyn', 'Madisen', 'Madison', 'Madisyn', 'Madonna', 'Madyson', 'Mae',\n    'Maegan', 'Maeve', 'Mafalda', 'Magali', 'Magdalen', 'Magdalena', 'Maggie',\n    'Magnolia', 'Magnus', 'Maia', 'Maida', 'Maiya', 'Major', 'Makayla',\n    'Makenna', 'Makenzie', 'Malachi', 'Malcolm', 'Malika', 'Malinda', 'Mallie',\n    'Mallory', 'Malvina', 'Mandy', 'Manley', 'Manuel', 'Manuela', 'Mara',\n    'Marc', 'Marcel', 'Marcelina', 'Marcelino', 'Marcella', 'Marcelle',\n    'Marcellus', 'Marcelo', 'Marcia', 'Marco', 'Marcos', 'Marcus', 'Margaret',\n    'Margarete', 'Margarett', 'Margaretta', 'Margarette', 'Margarita', 'Marge',\n    'Margie', 'Margot', 'Margret', 'Marguerite', 'Maria', 'Mariah', 'Mariam',\n    'Marian', 'Mariana', 'Mariane', 'Marianna', 'Marianne', 'Mariano',\n    'Maribel', 'Marie', 'Mariela', 'Marielle', 'Marietta', 'Marilie', 'Marilou',\n    'Marilyne', 'Marina', 'Mario', 'Marion', 'Marisa', 'Marisol', 'Maritza',\n    'Marjolaine', 'Marjorie', 'Marjory', 'Mark', 'Markus', 'Marlee', 'Marlen',\n    'Marlene', 'Marley', 'Marlin', 'Marlon', 'Marques', 'Marquis', 'Marquise',\n    'Marshall', 'Marta', 'Martin', 'Martina', 'Martine', 'Marty', 'Marvin',\n    'Mary', 'Maryam', 'Maryjane', 'Maryse', 'Mason', 'Mateo', 'Mathew',\n    'Mathias', 'Mathilde', 'Matilda', 'Matilde', 'Matt', 'Matteo', 'Mattie',\n    'Maud', 'Maude', 'Maudie', 'Maureen', 'Maurice', 'Mauricio', 'Maurine',\n    'Maverick', 'Mavis', 'Max', 'Maxie', 'Maxime', 'Maximilian', 'Maximillia',\n    'Maximillian', 'Maximo', 'Maximus', 'Maxine', 'Maxwell', 'May', 'Maya',\n    'Maybell', 'Maybelle', 'Maye', 'Maymie', 'Maynard', 'Mayra', 'Mazie',\n    'Mckayla', 'Mckenna', 'Mckenzie', 'Meagan', 'Meaghan', 'Meda', 'Megane',\n    'Meggie', 'Meghan', 'Mekhi', 'Melany', 'Melba', 'Melisa', 'Melissa',\n    'Mellie', 'Melody', 'Melvin', 'Melvina', 'Melyna', 'Melyssa', 'Mercedes',\n    'Meredith', 'Merl', 'Merle', 'Merlin', 'Merritt', 'Mertie', 'Mervin',\n    'Meta', 'Mia', 'Micaela', 'Micah', 'Michael', 'Michaela', 'Michale',\n    'Micheal', 'Michel', 'Michele', 'Michelle', 'Miguel', 'Mikayla', 'Mike',\n    'Mikel', 'Milan', 'Miles', 'Milford', 'Miller', 'Millie', 'Milo', 'Milton',\n    'Mina', 'Minerva', 'Minnie', 'Miracle', 'Mireille', 'Mireya', 'Misael',\n    'Missouri', 'Misty', 'Mitchel', 'Mitchell', 'Mittie', 'Modesta', 'Modesto',\n    'Mohamed', 'Mohammad', 'Mohammed', 'Moises', 'Mollie', 'Molly', 'Mona',\n    'Monica', 'Monique', 'Monroe', 'Monserrat', 'Monserrate', 'Montana',\n    'Monte', 'Monty', 'Morgan', 'Moriah', 'Morris', 'Mortimer', 'Morton',\n    'Mose', 'Moses', 'Moshe', 'Mossie', 'Mozell', 'Mozelle', 'Muhammad',\n    'Muriel', 'Murl', 'Murphy', 'Murray', 'Mustafa', 'Mya', 'Myah', 'Mylene',\n    'Myles', 'Myra', 'Myriam', 'Myrl', 'Myrna', 'Myron', 'Myrtice', 'Myrtie',\n    'Myrtis', 'Myrtle', 'Nadia', 'Nakia', 'Name', 'Nannie', 'Naomi', 'Naomie',\n    'Napoleon', 'Narciso', 'Nash', 'Nasir', 'Nat', 'Natalia', 'Natalie',\n    'Natasha', 'Nathan', 'Nathanael', 'Nathanial', 'Nathaniel', 'Nathen',\n    'Nayeli', 'Neal', 'Ned', 'Nedra', 'Neha', 'Neil', 'Nelda', 'Nella', 'Nelle',\n    'Nellie', 'Nels', 'Nelson', 'Neoma', 'Nestor', 'Nettie', 'Neva', 'Newell',\n    'Newton', 'Nia', 'Nicholas', 'Nicholaus', 'Nichole', 'Nick', 'Nicklaus',\n    'Nickolas', 'Nico', 'Nicola', 'Nicolas', 'Nicole', 'Nicolette', 'Nigel',\n    'Nikita', 'Nikki', 'Nikko', 'Niko', 'Nikolas', 'Nils', 'Nina', 'Noah',\n    'Noble', 'Noe', 'Noel', 'Noelia', 'Noemi', 'Noemie', 'Noemy', 'Nola',\n    'Nolan', 'Nona', 'Nora', 'Norbert', 'Norberto', 'Norene', 'Norma', 'Norris',\n    'Norval', 'Norwood', 'Nova', 'Novella', 'Nya', 'Nyah', 'Nyasia', 'Obie',\n    'Oceane', 'Ocie', 'Octavia', 'Oda', 'Odell', 'Odessa', 'Odie', 'Ofelia',\n    'Okey', 'Ola', 'Olaf', 'Ole', 'Olen', 'Oleta', 'Olga', 'Olin', 'Oliver',\n    'Ollie', 'Oma', 'Omari', 'Omer', 'Ona', 'Onie', 'Opal', 'Ophelia', 'Ora',\n    'Oral', 'Oran', 'Oren', 'Orie', 'Orin', 'Orion', 'Orland', 'Orlando',\n    'Orlo', 'Orpha', 'Orrin', 'Orval', 'Orville', 'Osbaldo', 'Osborne', 'Oscar',\n    'Osvaldo', 'Oswald', 'Oswaldo', 'Otha', 'Otho', 'Otilia', 'Otis', 'Ottilie',\n    'Ottis', 'Otto', 'Ova', 'Owen', 'Ozella', 'Pablo', 'Paige', 'Palma',\n    'Pamela', 'Pansy', 'Paolo', 'Paris', 'Parker', 'Pascale', 'Pasquale', 'Pat',\n    'Patience', 'Patricia', 'Patrick', 'Patsy', 'Pattie', 'Paul', 'Paula',\n    'Pauline', 'Paxton', 'Payton', 'Pearl', 'Pearlie', 'Pearline', 'Pedro',\n    'Peggie', 'Penelope', 'Percival', 'Percy', 'Perry', 'Pete', 'Peter',\n    'Petra', 'Peyton', 'Philip', 'Phoebe', 'Phyllis', 'Pierce', 'Pierre',\n    'Pietro', 'Pink', 'Pinkie', 'Piper', 'Polly', 'Porter', 'Precious',\n    'Presley', 'Preston', 'Price', 'Prince', 'Princess', 'Priscilla',\n    'Providenci', 'Prudence', 'Queen', 'Queenie', 'Quentin', 'Quincy', 'Quinn',\n    'Quinten', 'Quinton', 'Rachael', 'Rachel', 'Rachelle', 'Rae', 'Raegan',\n    'Rafael', 'Rafaela', 'Raheem', 'Rahsaan', 'Rahul', 'Raina', 'Raleigh',\n    'Ralph', 'Ramiro', 'Ramon', 'Ramona', 'Randal', 'Randall', 'Randi', 'Randy',\n    'Ransom', 'Raoul', 'Raphael', 'Raphaelle', 'Raquel', 'Rashad', 'Rashawn',\n    'Rasheed', 'Raul', 'Raven', 'Ray', 'Raymond', 'Raymundo', 'Reagan',\n    'Reanna', 'Reba', 'Rebeca', 'Rebecca', 'Rebeka', 'Rebekah', 'Reece', 'Reed',\n    'Reese', 'Regan', 'Reggie', 'Reginald', 'Reid', 'Reilly', 'Reina',\n    'Reinhold', 'Remington', 'Rene', 'Renee', 'Ressie', 'Reta', 'Retha',\n    'Retta', 'Reuben', 'Reva', 'Rex', 'Rey', 'Reyes', 'Reymundo', 'Reyna',\n    'Reynold', 'Rhea', 'Rhett', 'Rhianna', 'Rhiannon', 'Rhoda', 'Ricardo',\n    'Richard', 'Richie', 'Richmond', 'Rick', 'Rickey', 'Rickie', 'Ricky',\n    'Rico', 'Rigoberto', 'Riley', 'Rita', 'River', 'Robb', 'Robbie', 'Robert',\n    'Roberta', 'Roberto', 'Robin', 'Robyn', 'Rocio', 'Rocky', 'Rod', 'Roderick',\n    'Rodger', 'Rodolfo', 'Rodrick', 'Rodrigo', 'Roel', 'Rogelio', 'Roger',\n    'Rogers', 'Rolando', 'Rollin', 'Roma', 'Romaine', 'Roman', 'Ron', 'Ronaldo',\n    'Ronny', 'Roosevelt', 'Rory', 'Rosa', 'Rosalee', 'Rosalia', 'Rosalind',\n    'Rosalinda', 'Rosalyn', 'Rosamond', 'Rosanna', 'Rosario', 'Roscoe', 'Rose',\n    'Rosella', 'Roselyn', 'Rosemarie', 'Rosemary', 'Rosendo', 'Rosetta',\n    'Rosie', 'Rosina', 'Roslyn', 'Ross', 'Rossie', 'Rowan', 'Rowena', 'Rowland',\n    'Roxane', 'Roxanne', 'Roy', 'Royal', 'Royce', 'Rozella', 'Ruben', 'Rubie',\n    'Ruby', 'Rubye', 'Rudolph', 'Rudy', 'Rupert', 'Russ', 'Russel', 'Russell',\n    'Rusty', 'Ruth', 'Ruthe', 'Ruthie', 'Ryan', 'Ryann', 'Ryder', 'Rylan',\n    'Rylee', 'Ryleigh', 'Ryley', 'Sabina', 'Sabrina', 'Sabryna', 'Sadie',\n    'Sadye', 'Sage', 'Saige', 'Sallie', 'Sally', 'Salma', 'Salvador',\n    'Salvatore', 'Sam', 'Samanta', 'Samantha', 'Samara', 'Samir', 'Sammie',\n    'Sammy', 'Samson', 'Sandra', 'Sandrine', 'Sandy', 'Sanford', 'Santa',\n    'Santiago', 'Santina', 'Santino', 'Santos', 'Sarah', 'Sarai', 'Sarina',\n    'Sasha', 'Saul', 'Savanah', 'Savanna', 'Savannah', 'Savion', 'Scarlett',\n    'Schuyler', 'Scot', 'Scottie', 'Scotty', 'Seamus', 'Sean', 'Sebastian',\n    'Sedrick', 'Selena', 'Selina', 'Selmer', 'Serena', 'Serenity', 'Seth',\n    'Shad', 'Shaina', 'Shakira', 'Shana', 'Shane', 'Shanel', 'Shanelle',\n    'Shania', 'Shanie', 'Shaniya', 'Shanna', 'Shannon', 'Shanny', 'Shanon',\n    'Shany', 'Sharon', 'Shaun', 'Shawn', 'Shawna', 'Shaylee', 'Shayna',\n    'Shayne', 'Shea', 'Sheila', 'Sheldon', 'Shemar', 'Sheridan', 'Sherman',\n    'Sherwood', 'Shirley', 'Shyann', 'Shyanne', 'Sibyl', 'Sid', 'Sidney',\n    'Sienna', 'Sierra', 'Sigmund', 'Sigrid', 'Sigurd', 'Silas', 'Sim', 'Simeon',\n    'Simone', 'Sincere', 'Sister', 'Skye', 'Skyla', 'Skylar', 'Sofia',\n    'Soledad', 'Solon', 'Sonia', 'Sonny', 'Sonya', 'Sophia', 'Sophie',\n    'Spencer', 'Stacey', 'Stacy', 'Stan', 'Stanford', 'Stanley', 'Stanton',\n    'Stefan', 'Stefanie', 'Stella', 'Stephan', 'Stephania', 'Stephanie',\n    'Stephany', 'Stephen', 'Stephon', 'Sterling', 'Steve', 'Stevie', 'Stewart',\n    'Stone', 'Stuart', 'Summer', 'Sunny', 'Susan', 'Susana', 'Susanna', 'Susie',\n    'Suzanne', 'Sven', 'Syble', 'Sydnee', 'Sydney', 'Sydni', 'Sydnie', 'Sylvan',\n    'Sylvester', 'Sylvia', 'Tabitha', 'Tad', 'Talia', 'Talon', 'Tamara',\n    'Tamia', 'Tania', 'Tanner', 'Tanya', 'Tara', 'Taryn', 'Tate', 'Tatum',\n    'Tatyana', 'Taurean', 'Tavares', 'Taya', 'Taylor', 'Teagan', 'Ted', 'Telly',\n    'Terence', 'Teresa', 'Terrance', 'Terrell', 'Terrence', 'Terrill', 'Terry',\n    'Tess', 'Tessie', 'Tevin', 'Thad', 'Thaddeus', 'Thalia', 'Thea', 'Thelma',\n    'Theo', 'Theodora', 'Theodore', 'Theresa', 'Therese', 'Theresia', 'Theron',\n    'Thomas', 'Thora', 'Thurman', 'Tia', 'Tiana', 'Tianna', 'Tiara', 'Tierra',\n    'Tiffany', 'Tillman', 'Timmothy', 'Timmy', 'Timothy', 'Tina', 'Tito',\n    'Titus', 'Tobin', 'Toby', 'Tod', 'Tom', 'Tomas', 'Tomasa', 'Tommie',\n    'Toney', 'Toni', 'Tony', 'Torey', 'Torrance', 'Torrey', 'Toy', 'Trace',\n    'Tracey', 'Tracy', 'Travis', 'Travon', 'Tre', 'Tremaine', 'Tremayne',\n    'Trent', 'Trenton', 'Tressa', 'Tressie', 'Treva', 'Trever', 'Trevion',\n    'Trevor', 'Trey', 'Trinity', 'Trisha', 'Tristian', 'Tristin', 'Triston',\n    'Troy', 'Trudie', 'Trycia', 'Trystan', 'Turner', 'Twila', 'Tyler', 'Tyra',\n    'Tyree', 'Tyreek', 'Tyrel', 'Tyrell', 'Tyrese', 'Tyrique', 'Tyshawn',\n    'Tyson', 'Ubaldo', 'Ulices', 'Ulises', 'Una', 'Unique', 'Urban', 'Uriah',\n    'Uriel', 'Ursula', 'Vada', 'Valentin', 'Valentina', 'Valentine', 'Valerie',\n    'Vallie', 'Van', 'Vance', 'Vanessa', 'Vaughn', 'Veda', 'Velda', 'Vella',\n    'Velma', 'Velva', 'Vena', 'Verda', 'Verdie', 'Vergie', 'Verla', 'Verlie',\n    'Vern', 'Verna', 'Verner', 'Vernice', 'Vernie', 'Vernon', 'Verona',\n    'Veronica', 'Vesta', 'Vicenta', 'Vicente', 'Vickie', 'Vicky', 'Victor',\n    'Victoria', 'Vida', 'Vidal', 'Vilma', 'Vince', 'Vincent', 'Vincenza',\n    'Vincenzo', 'Vinnie', 'Viola', 'Violet', 'Violette', 'Virgie', 'Virgil',\n    'Virginia', 'Virginie', 'Vita', 'Vito', 'Viva', 'Vivian', 'Viviane',\n    'Vivianne', 'Vivien', 'Vivienne', 'Vladimir', 'Wade', 'Waino', 'Waldo',\n    'Walker', 'Wallace', 'Walter', 'Walton', 'Wanda', 'Ward', 'Warren',\n    'Watson', 'Wava', 'Waylon', 'Wayne', 'Webster', 'Weldon', 'Wellington',\n    'Wendell', 'Wendy', 'Werner', 'Westley', 'Weston', 'Whitney', 'Wilber',\n    'Wilbert', 'Wilburn', 'Wiley', 'Wilford', 'Wilfred', 'Wilfredo', 'Wilfrid',\n    'Wilhelm', 'Wilhelmine', 'Will', 'Willa', 'Willard', 'William', 'Willie',\n    'Willis', 'Willow', 'Willy', 'Wilma', 'Wilmer', 'Wilson', 'Wilton',\n    'Winfield', 'Winifred', 'Winnifred', 'Winona', 'Winston', 'Woodrow',\n    'Wyatt', 'Wyman', 'Xander', 'Xavier', 'Xzavier', 'Yadira', 'Yasmeen',\n    'Yasmin', 'Yasmine', 'Yazmin', 'Yesenia', 'Yessenia', 'Yolanda', 'Yoshiko',\n    'Yvette', 'Yvonne', 'Zachariah', 'Zachary', 'Zachery', 'Zack', 'Zackary',\n    'Zackery', 'Zakary', 'Zander', 'Zane', 'Zaria', 'Zechariah', 'Zelda',\n    'Zella', 'Zelma', 'Zena', 'Zetta', 'Zion', 'Zita', 'Zoe', 'Zoey', 'Zoie',\n    'Zoila', 'Zola', 'Zora', 'Zula'\n];\n\n/**\n * Generate random username.\n * @returns {string} random username\n */\nfunction generateUsername() {\n    const name = RandomUtil.randomElement(names);\n    const suffix = RandomUtil.randomAlphanumStr(3);\n\n    return `${name}-${suffix}`;\n}\n\nmodule.exports = {\n    generateUsername\n};\n","'use strict';\n\n\nconst internals = {\n    suspectRx: /\"(?:_|\\\\u005[Ff])(?:_|\\\\u005[Ff])(?:p|\\\\u0070)(?:r|\\\\u0072)(?:o|\\\\u006[Ff])(?:t|\\\\u0074)(?:o|\\\\u006[Ff])(?:_|\\\\u005[Ff])(?:_|\\\\u005[Ff])\"\\s*\\:/\n};\n\n\nexports.parse = function (text, ...args) {\n\n    // Normalize arguments\n\n    const firstOptions = typeof args[0] === 'object' && args[0];\n    const reviver = args.length > 1 || !firstOptions ? args[0] : undefined;\n    const options = (args.length > 1 && args[1]) || firstOptions || {};\n\n    // Parse normally, allowing exceptions\n\n    const obj = JSON.parse(text, reviver);\n\n    // options.protoAction: 'error' (default) / 'remove' / 'ignore'\n\n    if (options.protoAction === 'ignore') {\n        return obj;\n    }\n\n    // Ignore null and non-objects\n\n    if (!obj ||\n        typeof obj !== 'object') {\n\n        return obj;\n    }\n\n    // Check original string for potential exploit\n\n    if (!text.match(internals.suspectRx)) {\n        return obj;\n    }\n\n    // Scan result for proto keys\n\n    exports.scan(obj, options);\n\n    return obj;\n};\n\n\nexports.scan = function (obj, options = {}) {\n\n    let next = [obj];\n\n    while (next.length) {\n        const nodes = next;\n        next = [];\n\n        for (const node of nodes) {\n            if (Object.prototype.hasOwnProperty.call(node, '__proto__')) {      // Avoid calling node.hasOwnProperty directly\n                if (options.protoAction !== 'remove') {\n                    throw new SyntaxError('Object contains forbidden prototype property');\n                }\n\n                delete node.__proto__;\n            }\n\n            for (const key in node) {\n                const value = node[key];\n                if (value &&\n                    typeof value === 'object') {\n\n                    next.push(node[key]);\n                }\n            }\n        }\n    }\n};\n\n\nexports.safeParse = function (text, reviver) {\n\n    try {\n        return exports.parse(text, reviver);\n    }\n    catch (ignoreError) {\n        return null;\n    }\n};\n","/* Copyright @ 2016-present 8x8, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Logger = require('./Logger.js');\n\n/**\n * Creates new <tt>LogCollector</tt>. Class implements <tt>LoggerTransport</tt>\n * and thus can be added as global transport in order to capture all the logs.\n *\n * It captures subsequent log lines created whenever <tt>Logger</tt> logs\n * a message and stores them in a queue in order to batch log entries. There are\n * time and size limit constraints which determine how often batch entries are\n * stored. Whenever one of these limits is exceeded the <tt>LogCollector</tt>\n * will use the <tt>logStorage</tt> object given as an argument to save\n * the batch log entry.\n *\n * @param {Object} logStorage an object which allows to store the logs collected\n * @param {function(string|object[])} logStorage.storeLogs a method called when\n * this <tt>LogCollector</tt> requests log entry storage. The method's argument\n * is an array which can contain <tt>string</tt>s and <tt>object</tt>s. If given\n * item is an object it means that it's an aggregated message. That is a message\n * which is the same as the previous one and it's representation has\n * the following format:\n * {\n *   {string} text: 'the text of some duplicated message'\n *   {number} count: 3 // how many times the message appeared in a row\n * }\n * If a message \"B\" after an aggregated message \"A\" is different, then it breaks\n * the sequence of \"A\". Which means that even if the next message \"C\" is\n * the same as \"A\" it will start a new aggregated message \"C\".\n * @param {function()} logStorage.isReady a method which should return\n * a <tt>boolean</tt> to tell the collector that it's ready to store. During the\n * time storage is not ready log batches will be cached and stored on the next\n * occasion (flush or interval timeout).\n *\n * @param {Object} options the <tt>LogCollector</tt> configuration options.\n * @param {number} options.maxEntryLength the size limit for a single log entry\n * to be stored. The <tt>LogCollector</tt> will push the entry as soon as it\n * reaches or exceeds this limit given that <tt>logStorage.isReady</tt>\n * returns <tt>true</tt>. Otherwise the log entry will be cached until the log\n * storage becomes ready. Note that the \"is ready\" condition is checked every\n * <tt>options.storeInterval</tt> milliseconds.\n * @param {number} options.storeInterval how often the logs should be stored in\n * case <tt>maxEntryLength</tt> was not exceeded.\n * @param {boolean} options.stringifyObjects indicates whether or not object\n * arguments should be \"stringified\" with <tt>JSON.stringify</tt> when a log\n * message is composed. Note that objects logged on the error log level are\n * always stringified.\n *\n * @constructor\n */\nfunction LogCollector(logStorage, options) {\n    this.logStorage = logStorage;\n    this.stringifyObjects = options && options.stringifyObjects ? options.stringifyObjects : false;\n    this.storeInterval = options && options.storeInterval ? options.storeInterval: 30000;\n    this.maxEntryLength = options && options.maxEntryLength ? options.maxEntryLength : 10000;\n    // Bind the log method for each level to the corresponding method name\n    // in order to implement \"global log transport\" object.\n    Object.keys(Logger.levels).forEach(\n    function (logLevel) {\n        var methodName = Logger.levels[logLevel];\n        this[methodName] = function () {\n            this._log.apply(this, arguments);\n        }.bind(this, logLevel);\n    }.bind(this));\n    /**\n     * The ID of store logs interval if one is currently scheduled or\n     * <tt>null</tt> otherwise.\n     * @type {number|null}\n     */\n    this.storeLogsIntervalID = null;\n    /**\n     * The log messages that are to be batched into log entry when\n     * {@link LogCollector._flush} method is called.\n     * @type {string[]}\n     */\n    this.queue = [];\n    /**\n     * The total length of all messages currently stored in the {@link queue}.\n     * @type {number}\n     */\n    this.totalLen = 0;\n    /**\n     * An array used to temporarily store log batches, before the storage gets\n     * ready.\n     * @type {string[]}\n     */\n    this.outputCache = [];\n}\n\n/**\n * Method called inside of {@link formatLogMessage} in order to covert an\n * <tt>Object</tt> argument to string. The conversion will happen when either\n * 'stringifyObjects' option is enabled or on the {@link Logger.levels.ERROR}\n * log level. The default implementation uses <tt>JSON.stringify</tt> and\n * returns \"[object with circular refs?]\" instead of an object if it fails.\n *\n * @param {object} someObject the <tt>object</tt> to be stringified.\n *\n * @return {string} the result of <tt>JSON.stringify</tt> or\n * \"[object with circular refs?]\" if any error occurs during \"stringification\".\n *\n * @protected\n */\nLogCollector.prototype.stringify = function (someObject) {\n    try {\n        return JSON.stringify(someObject);\n    } catch (error) {\n        return '[object with circular refs?]';\n    }\n};\n\n/**\n * Formats log entry for the given logging level and arguments passed to the\n * <tt>Logger</tt>'s log method. The first argument is log level and the next\n * arguments have to be captured using JS built-in 'arguments' variable.\n *\n * @param {Logger.levels} logLevel provides the logging level of the message to\n * be logged.\n * @param {Date} timestamp - The {@code Date} when a message has been logged.\n *\n * @return {string|null} a non-empty string representation of the log entry\n * crafted from the log arguments. If the return value is <tt>null</tt> then\n * the message wil be discarded by this <tt>LogCollector</tt>.\n *\n * @protected\n */\nLogCollector.prototype.formatLogMessage = function (\nlogLevel /* timestamp, arg2, arg3, arg4... */) {\n    var msg = '';\n    for (var i = 1, len = arguments.length; i < len; i++) {\n        var arg = arguments[i];\n        // objects logged on error level are always converted to JSON\n        if ((this.stringifyObjects || logLevel === Logger.levels.ERROR) &&\n            typeof arg === 'object') {\n            arg = this.stringify(arg);\n        }\n        msg += arg;\n        if (i !== len - 1) {\n            msg += ' ';\n        }\n    }\n    return msg.length ? msg : null;\n};\n\n/**\n * The log method bound to each of the logging levels in order to implement\n * \"global log transport\" object.\n *\n * @private\n */\nLogCollector.prototype._log = function() {\n\n    // var logLevel = arguments[0]; first argument is the log level\n    var timestamp = arguments[1];\n    var msg = this.formatLogMessage.apply(this, arguments);\n    if (msg) {\n        // The same as the previous message aggregation logic\n        var prevMessage = this.queue[this.queue.length - 1];\n        var prevMessageText = prevMessage && prevMessage.text;\n        if (prevMessageText === msg) {\n            prevMessage.count += 1;\n        } else {\n            this.queue.push({\n                text: msg,\n                timestamp: timestamp,\n                count: 1\n            });\n            this.totalLen += msg.length;\n        }\n    }\n\n    if (this.totalLen >= this.maxEntryLength) {\n        this._flush(true /* force */, true /* reschedule */);\n    }\n};\n\n/**\n * Starts periodical \"store logs\" task which will be triggered at the interval\n * specified in the constructor options.\n */\nLogCollector.prototype.start = function () {\n    this._reschedulePublishInterval();\n};\n\n/**\n * Reschedules the periodical \"store logs\" task which will store the next batch\n * log entry in the storage.\n * @private\n */\nLogCollector.prototype._reschedulePublishInterval = function () {\n    if (this.storeLogsIntervalID) {\n        window.clearTimeout(this.storeLogsIntervalID);\n        this.storeLogsIntervalID = null;\n    }\n    // It's actually a timeout, because it is rescheduled on every flush\n    this.storeLogsIntervalID = window.setTimeout(\n        this._flush.bind(\n            this, false /* do not force */, true /* reschedule */),\n        this.storeInterval);\n};\n\n/**\n * Call this method to flush the log entry buffer and store it in the log\n * storage immediately (given that the storage is ready).\n */\nLogCollector.prototype.flush = function() {\n    this._flush(\n        false /* do not force, as it will not be stored anyway */,\n        true /* reschedule next update */ );\n};\n\n/**\n * Stores the next batch log entry in the log storage.\n * @param {boolean} force enforce current logs batch to be stored or cached if\n * there is anything to be logged, but the storage is not ready yet. One of\n * legitimate reasons to force is when the logs length exceeds size limit which\n * could result in truncation.\n * @param {boolean} reschedule <tt>true</tt> if the next periodic task should be\n * scheduled after the log entry is stored. <tt>false</tt> will end the periodic\n * task cycle.\n * @private\n */\nLogCollector.prototype._flush = function(force, reschedule) {\n    // Publish only if there's anything to be logged\n    if (this.totalLen > 0 && (this.logStorage.isReady() || force)) {\n        //FIXME avoid truncating\n        // right now we don't care if the message size is \"slightly\" exceeded\n        if (this.logStorage.isReady()) {\n            // Sends all cached logs\n            if (this.outputCache.length) {\n                this.outputCache.forEach(\n                    function (cachedQueue) {\n                        this.logStorage.storeLogs(cachedQueue);\n                    }.bind(this)\n                );\n                // Clear the cache\n                this.outputCache = [];\n            }\n            // Send current batch\n            this.logStorage.storeLogs(this.queue);\n        } else {\n            this.outputCache.push(this.queue);\n        }\n\n        this.queue = [];\n        this.totalLen = 0;\n    }\n\n    if (reschedule) {\n        this._reschedulePublishInterval();\n    }\n};\n\n/**\n * Stops the periodical \"store logs\" task and immediately stores any pending\n * log entries as a batch.\n */\nLogCollector.prototype.stop = function() {\n    // Flush and stop publishing logs\n    this._flush(false /* do not force */, false /* do not reschedule */);\n};\n\nmodule.exports = LogCollector;\n","/* Copyright @ 2015-present 8x8, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/*jslint latedef:false*/\n\n/**\n * Ordered log levels.\n */\nvar levels = {\n    \"trace\": 0,\n    \"debug\": 1,\n    \"info\": 2,\n    \"log\": 3,\n    \"warn\": 4,\n    \"error\": 5\n};\n\n/**\n * The default transport - console\n * @type LoggerTransport\n */\nLogger.consoleTransport = console;\n\n/**\n * The array which stores currently registered global transports.\n * @type {[LoggerTransport]}\n */\nvar globalTransports = [ Logger.consoleTransport ];\n\n/**\n * Adds given {@link LoggerTransport} instance to the list of global\n * transports which means that it'll be used by all {@link Logger}s\n * @param {LoggerTransport} transport\n */\nLogger.addGlobalTransport = function(transport) {\n    if (globalTransports.indexOf(transport) === -1) {\n        globalTransports.push(transport);\n    }\n};\n\n/**\n * Removes given {@link LoggerTransport} instance from the list of global\n * transports\n * @param {LoggerTransport} transport\n */\nLogger.removeGlobalTransport = function(transport) {\n    var transportIdx = globalTransports.indexOf(transport);\n    if (transportIdx !== -1) {\n        globalTransports.splice(transportIdx, 1);\n    }\n};\n\n/**\n * The global configuration options.\n */\nvar globalOptions = {};\n\n/**\n * Sets global options which will be used by all loggers. Changing these works\n * even after other loggers are created.\n */\nLogger.setGlobalOptions = function(options) {\n    globalOptions = options || {};\n};\n\n/**\n * Parses Error's object stack trace and extracts information about the last\n * caller before the log method was called.\n * @returns JS object with info about the caller - method name, file location,\n * line and column.\n */\nfunction getCallerInfo() {\n    var callerInfo = {\n        methodName: \"\",\n        fileLocation: \"\",\n        line: null,\n        column: null\n    };\n    //gets the part of the stack without the logger wrappers\n    var error = new Error();\n    var stack = error.stack? error.stack.split(\"\\n\") : [];\n    if(!stack || stack.length < 3) {\n        return callerInfo;\n    }\n    var m = null;\n    if(stack[3]) {\n        m = stack[3].match(/\\s*at\\s*(.+?)\\s*\\((\\S*)\\s*:(\\d*)\\s*:(\\d*)\\)/);\n    }\n    if(!m || m.length <= 4) {\n        //Firefox && Safari\n        if(stack[2].indexOf(\"log@\") === 0){\n            //Safari\n            callerInfo.methodName = stack[3].substr(0, stack[3].indexOf(\"@\"));\n        } else {\n            //Firefox\n            callerInfo.methodName = stack[2].substr(0, stack[2].indexOf(\"@\"));\n        }\n        return callerInfo;\n    }\n\n    callerInfo.methodName = m[1];\n    callerInfo.fileLocation = m[2];\n    callerInfo.line = m[3];\n    callerInfo.column = m[4];\n    return callerInfo;\n}\n\n/**\n * Logs messages using the transports and level from the logger.\n * @param logger a logger instance.\n * @param level the log level of the message. See the levels variable.\n * @param arguments array with arguments that will be logged.\n */\nfunction log() {\n    var logger = arguments[0], level = arguments[1],\n        args = Array.prototype.slice.call(arguments, 2);\n    if(levels[level] < logger.level) {\n        return;\n    }\n\n    var callerInfo\n        = !(logger.options.disableCallerInfo || globalOptions.disableCallerInfo) &&\n            getCallerInfo();\n    var transports = globalTransports.concat(logger.transports);\n    for(var i = 0; i < transports.length; i++) {\n        var t = transports[i];\n        var l = t[level];\n        if(l && typeof(l) === \"function\") {\n            var logPrefixes = [];\n\n            logPrefixes.push(new Date().toISOString());\n\n            if (logger.id) {\n                logPrefixes.push(\"[\" + logger.id + \"]\");\n            }\n\n            if (callerInfo && callerInfo.methodName.length > 1) {\n                logPrefixes.push(\"<\" + callerInfo.methodName + \">: \");\n            }\n\n            var fullLogParts = logPrefixes.concat(args);\n\n            l.bind(t).apply(t, fullLogParts);\n        }\n    }\n}\n\n/**\n *\n * Constructs new logger object.\n * @param level the logging level for the new logger\n * @param id optional identifier for the logger instance.\n * @param {LoggerTransport} transports optional list of handlers(objects) for\n * the logs. The handlers must support - log, warn, error, debug, info, trace.\n * @param options optional configuration file for how the logger should behave.\n * @param {boolean} options.disableCallerInfo Whether the call site of a logger\n * method invocation should be included in the log. Defaults to false, so the\n * call site will be included.\n */\nfunction Logger(level, id, transports, options) {\n    this.id = id;\n    this.options = options || {};\n    this.transports = transports;\n    if(!this.transports) {\n        this.transports = [];\n    }\n    this.level = levels[level];\n    var methods = Object.keys(levels);\n    for(var i = 0; i < methods.length; i++){\n        this[methods[i]] =\n            log.bind(null, this, methods[i]);\n    }\n}\n\n/**\n * Sets the log level for the logger.\n * @param level the new log level.\n */\nLogger.prototype.setLevel = function (level) {\n    this.level = levels[level];\n};\nmodule.exports = Logger;\n\n/**\n * Enum for the supported log levels.\n */\nLogger.levels = {\n    TRACE: \"trace\",\n    DEBUG: \"debug\",\n    INFO: \"info\",\n    LOG: \"log\",\n    WARN: \"warn\",\n    ERROR: \"error\"\n};\n","/* Copyright @ 2015-present 8x8, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Logger = require(\"./Logger\");\nvar LogCollector = require(\"./LogCollector\");\n\n/**\n * Definition of the log method\n * @name log_method\n * @function\n * @param {...*} log_args the arguments to be logged\n */\n/**\n * The logger's transport type definition.\n *\n * @typedef {object} LoggerTransport\n *\n * @property {log_method} trace method called to log on {@link Logger.levels.TRACE} logging level\n * @property {log_method} debug method called to log on {@link Logger.levels.DEBUG} logging level\n * @property {log_method} info method called to log on {@link Logger.levels.INFO} logging level\n * @property {log_method} log method called to log on {@link Logger.levels.LOG} logging level\n * @property {log_method} warn method called to log on {@link Logger.levels.WARN} logging level\n * @property {log_method} error method called to log on {@link Logger.levels.ERROR} logging level\n */\n\n/**\n * Map with the created loggers with ID.\n */\nvar idLoggers = {};\n\n/**\n * Array with the loggers without id.\n */\nvar loggers = [];\n\n/**\n * Log level for the lbrary.\n */\nvar curLevel = Logger.levels.TRACE;\n\n\nmodule.exports = {\n    /**\n     * Adds given {@link LoggerTransport} instance to the list of global\n     * transports which means that it'll be used by all {@link Logger}s\n     * @param {LoggerTransport} transport\n     */\n    addGlobalTransport: function(transport) {\n        Logger.addGlobalTransport(transport);\n    },\n    /**\n     * Removes given {@link LoggerTransport} instance from the list of global\n     * transports\n     * @param {LoggerTransport} transport\n     */\n    removeGlobalTransport: function(transport) {\n        Logger.removeGlobalTransport(transport);\n    },\n    /**\n    * Sets global options which will be used by all loggers. Changing these\n    * works even after other loggers are created.\n    */\n    setGlobalOptions: function(options) {\n        Logger.setGlobalOptions(options);\n    },\n    /**\n     * Creates new logger.\n     * @arguments the same as Logger constructor\n     */\n    getLogger: function(id, transports, options) {\n        var logger = new Logger(curLevel, id, transports, options);\n        if(id) {\n            idLoggers[id] = idLoggers[id] || [];\n            idLoggers[id].push(logger);\n        } else {\n            loggers.push(logger);\n        }\n        return logger;\n    },\n    /**\n     * Changes the log level for the existing loggers by id.\n     * @param level the new log level.\n     * @param id if specified the level will be changed only for loggers with the\n     * same id. Otherwise the operation will affect all loggers that don't\n     * have id.\n     */\n    setLogLevelById: function(level, id) {\n        var l = id? (idLoggers[id] || []) : loggers;\n        for(var i = 0; i < l.length; i++) {\n            l[i].setLevel(level);\n        }\n    },\n    /**\n     * Changes the log level for all existing loggers.\n     * @param level the new log level.\n     */\n    setLogLevel: function (level) {\n        curLevel = level;\n        var i = 0;\n        for(; i < loggers.length; i++) {\n            loggers[i].setLevel(level);\n        }\n\n        for(var id in idLoggers) {\n            var l = idLoggers[id] || [];\n            for(i = 0; i < l.length; i++) {\n                l[i].setLevel(level);\n            }\n        }\n    },\n    /**\n     * The supported log levels.\n     */\n    levels: Logger.levels,\n    /**\n     * Exports the <tt>LogCollector</tt>.\n     */\n    LogCollector: LogCollector\n};\n","var grammar = module.exports = {\n  v: [{\n    name: 'version',\n    reg: /^(\\d*)$/\n  }],\n  o: [{\n    // o=- 20518 0 IN IP4 203.0.113.1\n    // NB: sessionId will be a String in most cases because it is huge\n    name: 'origin',\n    reg: /^(\\S*) (\\d*) (\\d*) (\\S*) IP(\\d) (\\S*)/,\n    names: ['username', 'sessionId', 'sessionVersion', 'netType', 'ipVer', 'address'],\n    format: '%s %s %d %s IP%d %s'\n  }],\n  // default parsing of these only (though some of these feel outdated)\n  s: [{ name: 'name' }],\n  i: [{ name: 'description' }],\n  u: [{ name: 'uri' }],\n  e: [{ name: 'email' }],\n  p: [{ name: 'phone' }],\n  z: [{ name: 'timezones' }], // TODO: this one can actually be parsed properly...\n  r: [{ name: 'repeats' }],   // TODO: this one can also be parsed properly\n  // k: [{}], // outdated thing ignored\n  t: [{\n    // t=0 0\n    name: 'timing',\n    reg: /^(\\d*) (\\d*)/,\n    names: ['start', 'stop'],\n    format: '%d %d'\n  }],\n  c: [{\n    // c=IN IP4 10.47.197.26\n    name: 'connection',\n    reg: /^IN IP(\\d) (\\S*)/,\n    names: ['version', 'ip'],\n    format: 'IN IP%d %s'\n  }],\n  b: [{\n    // b=AS:4000\n    push: 'bandwidth',\n    reg: /^(TIAS|AS|CT|RR|RS):(\\d*)/,\n    names: ['type', 'limit'],\n    format: '%s:%s'\n  }],\n  m: [{\n    // m=video 51744 RTP/AVP 126 97 98 34 31\n    // NB: special - pushes to session\n    // TODO: rtp/fmtp should be filtered by the payloads found here?\n    reg: /^(\\w*) (\\d*) ([\\w/]*)(?: (.*))?/,\n    names: ['type', 'port', 'protocol', 'payloads'],\n    format: '%s %d %s %s'\n  }],\n  a: [\n    {\n      // a=rtpmap:110 opus/48000/2\n      push: 'rtp',\n      reg: /^rtpmap:(\\d*) ([\\w\\-.]*)(?:\\s*\\/(\\d*)(?:\\s*\\/(\\S*))?)?/,\n      names: ['payload', 'codec', 'rate', 'encoding'],\n      format: function (o) {\n        return (o.encoding)\n          ? 'rtpmap:%d %s/%s/%s'\n          : o.rate\n            ? 'rtpmap:%d %s/%s'\n            : 'rtpmap:%d %s';\n      }\n    },\n    {\n      // a=fmtp:108 profile-level-id=24;object=23;bitrate=64000\n      // a=fmtp:111 minptime=10; useinbandfec=1\n      push: 'fmtp',\n      reg: /^fmtp:(\\d*) ([\\S| ]*)/,\n      names: ['payload', 'config'],\n      format: 'fmtp:%d %s'\n    },\n    {\n      // a=control:streamid=0\n      name: 'control',\n      reg: /^control:(.*)/,\n      format: 'control:%s'\n    },\n    {\n      // a=rtcp:65179 IN IP4 193.84.77.194\n      name: 'rtcp',\n      reg: /^rtcp:(\\d*)(?: (\\S*) IP(\\d) (\\S*))?/,\n      names: ['port', 'netType', 'ipVer', 'address'],\n      format: function (o) {\n        return (o.address != null)\n          ? 'rtcp:%d %s IP%d %s'\n          : 'rtcp:%d';\n      }\n    },\n    {\n      // a=rtcp-fb:98 trr-int 100\n      push: 'rtcpFbTrrInt',\n      reg: /^rtcp-fb:(\\*|\\d*) trr-int (\\d*)/,\n      names: ['payload', 'value'],\n      format: 'rtcp-fb:%s trr-int %d'\n    },\n    {\n      // a=rtcp-fb:98 nack rpsi\n      push: 'rtcpFb',\n      reg: /^rtcp-fb:(\\*|\\d*) ([\\w-_]*)(?: ([\\w-_]*))?/,\n      names: ['payload', 'type', 'subtype'],\n      format: function (o) {\n        return (o.subtype != null)\n          ? 'rtcp-fb:%s %s %s'\n          : 'rtcp-fb:%s %s';\n      }\n    },\n    {\n      // a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n      // a=extmap:1/recvonly URI-gps-string\n      // a=extmap:3 urn:ietf:params:rtp-hdrext:encrypt urn:ietf:params:rtp-hdrext:smpte-tc 25@600/24\n      push: 'ext',\n      reg: /^extmap:(\\d+)(?:\\/(\\w+))?(?: (urn:ietf:params:rtp-hdrext:encrypt))? (\\S*)(?: (\\S*))?/,\n      names: ['value', 'direction', 'encrypt-uri', 'uri', 'config'],\n      format: function (o) {\n        return (\n          'extmap:%d' +\n          (o.direction ? '/%s' : '%v') +\n          (o['encrypt-uri'] ? ' %s' : '%v') +\n          ' %s' +\n          (o.config ? ' %s' : '')\n        );\n      }\n    },\n    {\n      // a=extmap-allow-mixed\n      name: 'extmapAllowMixed',\n      reg: /^(extmap-allow-mixed)/\n    },\n    {\n      // a=crypto:1 AES_CM_128_HMAC_SHA1_80 inline:PS1uQCVeeCFCanVmcjkpPywjNWhcYD0mXXtxaVBR|2^20|1:32\n      push: 'crypto',\n      reg: /^crypto:(\\d*) ([\\w_]*) (\\S*)(?: (\\S*))?/,\n      names: ['id', 'suite', 'config', 'sessionConfig'],\n      format: function (o) {\n        return (o.sessionConfig != null)\n          ? 'crypto:%d %s %s %s'\n          : 'crypto:%d %s %s';\n      }\n    },\n    {\n      // a=setup:actpass\n      name: 'setup',\n      reg: /^setup:(\\w*)/,\n      format: 'setup:%s'\n    },\n    {\n      // a=connection:new\n      name: 'connectionType',\n      reg: /^connection:(new|existing)/,\n      format: 'connection:%s'\n    },\n    {\n      // a=mid:1\n      name: 'mid',\n      reg: /^mid:([^\\s]*)/,\n      format: 'mid:%s'\n    },\n    {\n      // a=msid:0c8b064d-d807-43b4-b434-f92a889d8587 98178685-d409-46e0-8e16-7ef0db0db64a\n      name: 'msid',\n      reg: /^msid:(.*)/,\n      format: 'msid:%s'\n    },\n    {\n      // a=ptime:20\n      name: 'ptime',\n      reg: /^ptime:(\\d*(?:\\.\\d*)*)/,\n      format: 'ptime:%d'\n    },\n    {\n      // a=maxptime:60\n      name: 'maxptime',\n      reg: /^maxptime:(\\d*(?:\\.\\d*)*)/,\n      format: 'maxptime:%d'\n    },\n    {\n      // a=sendrecv\n      name: 'direction',\n      reg: /^(sendrecv|recvonly|sendonly|inactive)/\n    },\n    {\n      // a=ice-lite\n      name: 'icelite',\n      reg: /^(ice-lite)/\n    },\n    {\n      // a=ice-ufrag:F7gI\n      name: 'iceUfrag',\n      reg: /^ice-ufrag:(\\S*)/,\n      format: 'ice-ufrag:%s'\n    },\n    {\n      // a=ice-pwd:x9cml/YzichV2+XlhiMu8g\n      name: 'icePwd',\n      reg: /^ice-pwd:(\\S*)/,\n      format: 'ice-pwd:%s'\n    },\n    {\n      // a=fingerprint:SHA-1 00:11:22:33:44:55:66:77:88:99:AA:BB:CC:DD:EE:FF:00:11:22:33\n      name: 'fingerprint',\n      reg: /^fingerprint:(\\S*) (\\S*)/,\n      names: ['type', 'hash'],\n      format: 'fingerprint:%s %s'\n    },\n    {\n      // a=candidate:0 1 UDP 2113667327 203.0.113.1 54400 typ host\n      // a=candidate:1162875081 1 udp 2113937151 192.168.34.75 60017 typ host generation 0 network-id 3 network-cost 10\n      // a=candidate:3289912957 2 udp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 generation 0 network-id 3 network-cost 10\n      // a=candidate:229815620 1 tcp 1518280447 192.168.150.19 60017 typ host tcptype active generation 0 network-id 3 network-cost 10\n      // a=candidate:3289912957 2 tcp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 tcptype passive generation 0 network-id 3 network-cost 10\n      push:'candidates',\n      reg: /^candidate:(\\S*) (\\d*) (\\S*) (\\d*) (\\S*) (\\d*) typ (\\S*)(?: raddr (\\S*) rport (\\d*))?(?: tcptype (\\S*))?(?: generation (\\d*))?(?: network-id (\\d*))?(?: network-cost (\\d*))?/,\n      names: ['foundation', 'component', 'transport', 'priority', 'ip', 'port', 'type', 'raddr', 'rport', 'tcptype', 'generation', 'network-id', 'network-cost'],\n      format: function (o) {\n        var str = 'candidate:%s %d %s %d %s %d typ %s';\n\n        str += (o.raddr != null) ? ' raddr %s rport %d' : '%v%v';\n\n        // NB: candidate has three optional chunks, so %void middles one if it's missing\n        str += (o.tcptype != null) ? ' tcptype %s' : '%v';\n\n        if (o.generation != null) {\n          str += ' generation %d';\n        }\n\n        str += (o['network-id'] != null) ? ' network-id %d' : '%v';\n        str += (o['network-cost'] != null) ? ' network-cost %d' : '%v';\n        return str;\n      }\n    },\n    {\n      // a=end-of-candidates (keep after the candidates line for readability)\n      name: 'endOfCandidates',\n      reg: /^(end-of-candidates)/\n    },\n    {\n      // a=remote-candidates:1 203.0.113.1 54400 2 203.0.113.1 54401 ...\n      name: 'remoteCandidates',\n      reg: /^remote-candidates:(.*)/,\n      format: 'remote-candidates:%s'\n    },\n    {\n      // a=ice-options:google-ice\n      name: 'iceOptions',\n      reg: /^ice-options:(\\S*)/,\n      format: 'ice-options:%s'\n    },\n    {\n      // a=ssrc:2566107569 cname:t9YU8M1UxTF8Y1A1\n      push: 'ssrcs',\n      reg: /^ssrc:(\\d*) ([\\w_-]*)(?::(.*))?/,\n      names: ['id', 'attribute', 'value'],\n      format: function (o) {\n        var str = 'ssrc:%d';\n        if (o.attribute != null) {\n          str += ' %s';\n          if (o.value != null) {\n            str += ':%s';\n          }\n        }\n        return str;\n      }\n    },\n    {\n      // a=ssrc-group:FEC 1 2\n      // a=ssrc-group:FEC-FR 3004364195 1080772241\n      push: 'ssrcGroups',\n      // token-char = %x21 / %x23-27 / %x2A-2B / %x2D-2E / %x30-39 / %x41-5A / %x5E-7E\n      reg: /^ssrc-group:([\\x21\\x23\\x24\\x25\\x26\\x27\\x2A\\x2B\\x2D\\x2E\\w]*) (.*)/,\n      names: ['semantics', 'ssrcs'],\n      format: 'ssrc-group:%s %s'\n    },\n    {\n      // a=msid-semantic: WMS Jvlam5X3SX1OP6pn20zWogvaKJz5Hjf9OnlV\n      name: 'msidSemantic',\n      reg: /^msid-semantic:\\s?(\\w*) (\\S*)/,\n      names: ['semantic', 'token'],\n      format: 'msid-semantic: %s %s' // space after ':' is not accidental\n    },\n    {\n      // a=group:BUNDLE audio video\n      push: 'groups',\n      reg: /^group:(\\w*) (.*)/,\n      names: ['type', 'mids'],\n      format: 'group:%s %s'\n    },\n    {\n      // a=rtcp-mux\n      name: 'rtcpMux',\n      reg: /^(rtcp-mux)/\n    },\n    {\n      // a=rtcp-rsize\n      name: 'rtcpRsize',\n      reg: /^(rtcp-rsize)/\n    },\n    {\n      // a=sctpmap:5000 webrtc-datachannel 1024\n      name: 'sctpmap',\n      reg: /^sctpmap:([\\w_/]*) (\\S*)(?: (\\S*))?/,\n      names: ['sctpmapNumber', 'app', 'maxMessageSize'],\n      format: function (o) {\n        return (o.maxMessageSize != null)\n          ? 'sctpmap:%s %s %s'\n          : 'sctpmap:%s %s';\n      }\n    },\n    {\n      // a=x-google-flag:conference\n      name: 'xGoogleFlag',\n      reg: /^x-google-flag:([^\\s]*)/,\n      format: 'x-google-flag:%s'\n    },\n    {\n      // a=rid:1 send max-width=1280;max-height=720;max-fps=30;depend=0\n      push: 'rids',\n      reg: /^rid:([\\d\\w]+) (\\w+)(?: ([\\S| ]*))?/,\n      names: ['id', 'direction', 'params'],\n      format: function (o) {\n        return (o.params) ? 'rid:%s %s %s' : 'rid:%s %s';\n      }\n    },\n    {\n      // a=imageattr:97 send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320] recv [x=330,y=250]\n      // a=imageattr:* send [x=800,y=640] recv *\n      // a=imageattr:100 recv [x=320,y=240]\n      push: 'imageattrs',\n      reg: new RegExp(\n        // a=imageattr:97\n        '^imageattr:(\\\\d+|\\\\*)' +\n        // send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320]\n        '[\\\\s\\\\t]+(send|recv)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*)' +\n        // recv [x=330,y=250]\n        '(?:[\\\\s\\\\t]+(recv|send)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*))?'\n      ),\n      names: ['pt', 'dir1', 'attrs1', 'dir2', 'attrs2'],\n      format: function (o) {\n        return 'imageattr:%s %s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    {\n      // a=simulcast:send 1,2,3;~4,~5 recv 6;~7,~8\n      // a=simulcast:recv 1;4,5 send 6;7\n      name: 'simulcast',\n      reg: new RegExp(\n        // a=simulcast:\n        '^simulcast:' +\n        // send 1,2,3;~4,~5\n        '(send|recv) ([a-zA-Z0-9\\\\-_~;,]+)' +\n        // space + recv 6;~7,~8\n        '(?:\\\\s?(send|recv) ([a-zA-Z0-9\\\\-_~;,]+))?' +\n        // end\n        '$'\n      ),\n      names: ['dir1', 'list1', 'dir2', 'list2'],\n      format: function (o) {\n        return 'simulcast:%s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    {\n      // old simulcast draft 03 (implemented by Firefox)\n      //   https://tools.ietf.org/html/draft-ietf-mmusic-sdp-simulcast-03\n      // a=simulcast: recv pt=97;98 send pt=97\n      // a=simulcast: send rid=5;6;7 paused=6,7\n      name: 'simulcast_03',\n      reg: /^simulcast:[\\s\\t]+([\\S+\\s\\t]+)$/,\n      names: ['value'],\n      format: 'simulcast: %s'\n    },\n    {\n      // a=framerate:25\n      // a=framerate:29.97\n      name: 'framerate',\n      reg: /^framerate:(\\d+(?:$|\\.\\d+))/,\n      format: 'framerate:%s'\n    },\n    {\n      // RFC4570\n      // a=source-filter: incl IN IP4 239.5.2.31 10.1.15.5\n      name: 'sourceFilter',\n      reg: /^source-filter: *(excl|incl) (\\S*) (IP4|IP6|\\*) (\\S*) (.*)/,\n      names: ['filterMode', 'netType', 'addressTypes', 'destAddress', 'srcList'],\n      format: 'source-filter: %s %s %s %s %s'\n    },\n    {\n      // a=bundle-only\n      name: 'bundleOnly',\n      reg: /^(bundle-only)/\n    },\n    {\n      // a=label:1\n      name: 'label',\n      reg: /^label:(.+)/,\n      format: 'label:%s'\n    },\n    {\n      // RFC version 26 for SCTP over DTLS\n      // https://tools.ietf.org/html/draft-ietf-mmusic-sctp-sdp-26#section-5\n      name: 'sctpPort',\n      reg: /^sctp-port:(\\d+)$/,\n      format: 'sctp-port:%s'\n    },\n    {\n      // RFC version 26 for SCTP over DTLS\n      // https://tools.ietf.org/html/draft-ietf-mmusic-sctp-sdp-26#section-6\n      name: 'maxMessageSize',\n      reg: /^max-message-size:(\\d+)$/,\n      format: 'max-message-size:%s'\n    },\n    {\n      // RFC7273\n      // a=ts-refclk:ptp=IEEE1588-2008:39-A7-94-FF-FE-07-CB-D0:37\n      push:'tsRefClocks',\n      reg: /^ts-refclk:([^\\s=]*)(?:=(\\S*))?/,\n      names: ['clksrc', 'clksrcExt'],\n      format: function (o) {\n        return 'ts-refclk:%s' + (o.clksrcExt != null ? '=%s' : '');\n      }\n    },\n    {\n      // RFC7273\n      // a=mediaclk:direct=963214424\n      name:'mediaClk',\n      reg: /^mediaclk:(?:id=(\\S*))? *([^\\s=]*)(?:=(\\S*))?(?: *rate=(\\d+)\\/(\\d+))?/,\n      names: ['id', 'mediaClockName', 'mediaClockValue', 'rateNumerator', 'rateDenominator'],\n      format: function (o) {\n        var str = 'mediaclk:';\n        str += (o.id != null ? 'id=%s %s' : '%v%s');\n        str += (o.mediaClockValue != null ? '=%s' : '');\n        str += (o.rateNumerator != null ? ' rate=%s' : '');\n        str += (o.rateDenominator != null ? '/%s' : '');\n        return str;\n      }\n    },\n    {\n      // a=keywds:keywords\n      name: 'keywords',\n      reg: /^keywds:(.+)$/,\n      format: 'keywds:%s'\n    },\n    {\n      // a=content:main\n      name: 'content',\n      reg: /^content:(.+)/,\n      format: 'content:%s'\n    },\n    // BFCP https://tools.ietf.org/html/rfc4583\n    {\n      // a=floorctrl:c-s\n      name: 'bfcpFloorCtrl',\n      reg: /^floorctrl:(c-only|s-only|c-s)/,\n      format: 'floorctrl:%s'\n    },\n    {\n      // a=confid:1\n      name: 'bfcpConfId',\n      reg: /^confid:(\\d+)/,\n      format: 'confid:%s'\n    },\n    {\n      // a=userid:1\n      name: 'bfcpUserId',\n      reg: /^userid:(\\d+)/,\n      format: 'userid:%s'\n    },\n    {\n      // a=floorid:1\n      name: 'bfcpFloorId',\n      reg: /^floorid:(.+) (?:m-stream|mstrm):(.+)/,\n      names: ['id', 'mStream'],\n      format: 'floorid:%s mstrm:%s'\n    },\n    {\n      // any a= that we don't understand is kept verbatim on media.invalid\n      push: 'invalid',\n      names: ['value']\n    }\n  ]\n};\n\n// set sensible defaults to avoid polluting the grammar with boring details\nObject.keys(grammar).forEach(function (key) {\n  var objs = grammar[key];\n  objs.forEach(function (obj) {\n    if (!obj.reg) {\n      obj.reg = /(.*)/;\n    }\n    if (!obj.format) {\n      obj.format = '%s';\n    }\n  });\n});\n","var parser = require('./parser');\nvar writer = require('./writer');\n\nexports.write = writer;\nexports.parse = parser.parse;\nexports.parseParams = parser.parseParams;\nexports.parseFmtpConfig = parser.parseFmtpConfig; // Alias of parseParams().\nexports.parsePayloads = parser.parsePayloads;\nexports.parseRemoteCandidates = parser.parseRemoteCandidates;\nexports.parseImageAttributes = parser.parseImageAttributes;\nexports.parseSimulcastStreamList = parser.parseSimulcastStreamList;\n","var toIntIfInt = function (v) {\n  return String(Number(v)) === v ? Number(v) : v;\n};\n\nvar attachProperties = function (match, location, names, rawName) {\n  if (rawName && !names) {\n    location[rawName] = toIntIfInt(match[1]);\n  }\n  else {\n    for (var i = 0; i < names.length; i += 1) {\n      if (match[i+1] != null) {\n        location[names[i]] = toIntIfInt(match[i+1]);\n      }\n    }\n  }\n};\n\nvar parseReg = function (obj, location, content) {\n  var needsBlank = obj.name && obj.names;\n  if (obj.push && !location[obj.push]) {\n    location[obj.push] = [];\n  }\n  else if (needsBlank && !location[obj.name]) {\n    location[obj.name] = {};\n  }\n  var keyLocation = obj.push ?\n    {} :  // blank object that will be pushed\n    needsBlank ? location[obj.name] : location; // otherwise, named location or root\n\n  attachProperties(content.match(obj.reg), keyLocation, obj.names, obj.name);\n\n  if (obj.push) {\n    location[obj.push].push(keyLocation);\n  }\n};\n\nvar grammar = require('./grammar');\nvar validLine = RegExp.prototype.test.bind(/^([a-z])=(.*)/);\n\nexports.parse = function (sdp) {\n  var session = {}\n    , media = []\n    , location = session; // points at where properties go under (one of the above)\n\n  // parse lines we understand\n  sdp.split(/(\\r\\n|\\r|\\n)/).filter(validLine).forEach(function (l) {\n    var type = l[0];\n    var content = l.slice(2);\n    if (type === 'm') {\n      media.push({rtp: [], fmtp: []});\n      location = media[media.length-1]; // point at latest media line\n    }\n\n    for (var j = 0; j < (grammar[type] || []).length; j += 1) {\n      var obj = grammar[type][j];\n      if (obj.reg.test(content)) {\n        return parseReg(obj, location, content);\n      }\n    }\n  });\n\n  session.media = media; // link it up\n  return session;\n};\n\nvar paramReducer = function (acc, expr) {\n  var s = expr.split(/=(.+)/, 2);\n  if (s.length === 2) {\n    acc[s[0]] = toIntIfInt(s[1]);\n  } else if (s.length === 1 && expr.length > 1) {\n    acc[s[0]] = undefined;\n  }\n  return acc;\n};\n\nexports.parseParams = function (str) {\n  return str.split(/;\\s?/).reduce(paramReducer, {});\n};\n\n// For backward compatibility - alias will be removed in 3.0.0\nexports.parseFmtpConfig = exports.parseParams;\n\nexports.parsePayloads = function (str) {\n  return str.toString().split(' ').map(Number);\n};\n\nexports.parseRemoteCandidates = function (str) {\n  var candidates = [];\n  var parts = str.split(' ').map(toIntIfInt);\n  for (var i = 0; i < parts.length; i += 3) {\n    candidates.push({\n      component: parts[i],\n      ip: parts[i + 1],\n      port: parts[i + 2]\n    });\n  }\n  return candidates;\n};\n\nexports.parseImageAttributes = function (str) {\n  return str.split(' ').map(function (item) {\n    return item.substring(1, item.length-1).split(',').reduce(paramReducer, {});\n  });\n};\n\nexports.parseSimulcastStreamList = function (str) {\n  return str.split(';').map(function (stream) {\n    return stream.split(',').map(function (format) {\n      var scid, paused = false;\n\n      if (format[0] !== '~') {\n        scid = toIntIfInt(format);\n      } else {\n        scid = toIntIfInt(format.substring(1, format.length));\n        paused = true;\n      }\n\n      return {\n        scid: scid,\n        paused: paused\n      };\n    });\n  });\n};\n","var grammar = require('./grammar');\n\n// customized util.format - discards excess arguments and can void middle ones\nvar formatRegExp = /%[sdv%]/g;\nvar format = function (formatStr) {\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  return formatStr.replace(formatRegExp, function (x) {\n    if (i >= len) {\n      return x; // missing argument\n    }\n    var arg = args[i];\n    i += 1;\n    switch (x) {\n    case '%%':\n      return '%';\n    case '%s':\n      return String(arg);\n    case '%d':\n      return Number(arg);\n    case '%v':\n      return '';\n    }\n  });\n  // NB: we discard excess arguments - they are typically undefined from makeLine\n};\n\nvar makeLine = function (type, obj, location) {\n  var str = obj.format instanceof Function ?\n    (obj.format(obj.push ? location : location[obj.name])) :\n    obj.format;\n\n  var args = [type + '=' + str];\n  if (obj.names) {\n    for (var i = 0; i < obj.names.length; i += 1) {\n      var n = obj.names[i];\n      if (obj.name) {\n        args.push(location[obj.name][n]);\n      }\n      else { // for mLine and push attributes\n        args.push(location[obj.names[i]]);\n      }\n    }\n  }\n  else {\n    args.push(location[obj.name]);\n  }\n  return format.apply(null, args);\n};\n\n// RFC specified order\n// TODO: extend this with all the rest\nvar defaultOuterOrder = [\n  'v', 'o', 's', 'i',\n  'u', 'e', 'p', 'c',\n  'b', 't', 'r', 'z', 'a'\n];\nvar defaultInnerOrder = ['i', 'c', 'b', 'a'];\n\n\nmodule.exports = function (session, opts) {\n  opts = opts || {};\n  // ensure certain properties exist\n  if (session.version == null) {\n    session.version = 0; // 'v=0' must be there (only defined version atm)\n  }\n  if (session.name == null) {\n    session.name = ' '; // 's= ' must be there if no meaningful name set\n  }\n  session.media.forEach(function (mLine) {\n    if (mLine.payloads == null) {\n      mLine.payloads = '';\n    }\n  });\n\n  var outerOrder = opts.outerOrder || defaultOuterOrder;\n  var innerOrder = opts.innerOrder || defaultInnerOrder;\n  var sdp = [];\n\n  // loop through outerOrder for matching properties on session\n  outerOrder.forEach(function (type) {\n    grammar[type].forEach(function (obj) {\n      if (obj.name in session && session[obj.name] != null) {\n        sdp.push(makeLine(type, obj, session));\n      }\n      else if (obj.push in session && session[obj.push] != null) {\n        session[obj.push].forEach(function (el) {\n          sdp.push(makeLine(type, obj, el));\n        });\n      }\n    });\n  });\n\n  // then for each media line, follow the innerOrder\n  session.media.forEach(function (mLine) {\n    sdp.push(makeLine('m', grammar.m[0], mLine));\n\n    innerOrder.forEach(function (type) {\n      grammar[type].forEach(function (obj) {\n        if (obj.name in mLine && mLine[obj.name] != null) {\n          sdp.push(makeLine(type, obj, mLine));\n        }\n        else if (obj.push in mLine && mLine[obj.push] != null) {\n          mLine[obj.push].forEach(function (el) {\n            sdp.push(makeLine(type, obj, el));\n          });\n        }\n      });\n    });\n  });\n\n  return sdp.join('\\r\\n') + '\\r\\n';\n};\n","/* Copyright @ 2016 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar transform = require('sdp-transform');\nvar transformUtils = require('./transform-utils');\nvar parseSsrcs = transformUtils.parseSsrcs;\nvar writeSsrcs = transformUtils.writeSsrcs;\n\n//region Constants\n\nvar DEFAULT_NUM_OF_LAYERS = 3;\n\n//endregion\n\nfunction getSsrcAttribute (mLine, ssrc, attributeName) {\n    return mLine\n        .ssrcs\n        .filter(function(ssrcInfo) { return ssrcInfo.id === ssrc; })\n        .filter(function(ssrcInfo) { return ssrcInfo.attribute === attributeName; })\n        .map(function(ssrcInfo) { return ssrcInfo.value; })[0];\n}\n\n//region Ctor\n\nfunction Simulcast(options) {\n\n    this.options = options ? options : {};\n\n    if (!this.options.numOfLayers) {\n        this.options.numOfLayers = DEFAULT_NUM_OF_LAYERS;\n    }\n    console.log(\"SdpSimulcast: using \" + this.options.numOfLayers + \" layers\");\n\n    /**\n     * An IN-ORDER list of the simulcast ssrcs\n     * @type {list<number>}\n     */\n    this.ssrcCache = [];\n}\n\n//endregion\n\n//region Stateless private utility functions\n\n/**\n * Returns a random integer between min (included) and max (excluded)\n * Using Math.round() gives a non-uniform distribution!\n * @returns {number}\n */\nfunction generateSSRC() {\n    var min = 0, max = 0xffffffff;\n    return Math.floor(Math.random() * (max - min)) + min;\n};\n\nfunction processVideo(session, action) {\n    if (session == null || !Array.isArray(session.media)) {\n        return;\n    }\n\n    session.media.forEach(function (mLine) {\n        if (mLine.type === 'video') {\n            action(mLine);\n        }\n    });\n};\n\nfunction validateDescription(desc)\n{\n    return desc && desc != null\n        && desc.type && desc.type != ''\n        && desc.sdp && desc.sdp != '';\n}\n\nfunction explodeRemoteSimulcast(mLine) {\n\n    if (!mLine || !Array.isArray(mLine.ssrcGroups)) {\n        return;\n    }\n\n    var sources = parseSsrcs(mLine);\n    var order = [];\n\n    // Find the SIM group and explode its sources.\n    var j = mLine.ssrcGroups.length;\n    while (j--) {\n\n        if (mLine.ssrcGroups[j].semantics !== 'SIM') {\n            continue;\n        }\n\n        var simulcastSsrcs = mLine.ssrcGroups[j].ssrcs.split(' ');\n\n        for (var i = 0; i < simulcastSsrcs.length; i++) {\n\n            var ssrc = simulcastSsrcs[i];\n            order.push(ssrc);\n\n            var parts = sources[ssrc].msid.split(' ');\n            sources[ssrc].msid = [parts[0], '/', i, ' ', parts[1], '/', i].join('');\n            sources[ssrc].cname = [sources[ssrc].cname, '/', i].join('');\n\n            // Remove all the groups that this SSRC participates in.\n            mLine.ssrcGroups.forEach(function (relatedGroup) {\n                if (relatedGroup.semantics === 'SIM') {\n                    return;\n                }\n\n                var relatedSsrcs = relatedGroup.ssrcs.split(' ');\n                if (relatedSsrcs.indexOf(ssrc) === -1) {\n                    return;\n                }\n\n                // Nuke all the related SSRCs.\n                relatedSsrcs.forEach(function (relatedSSRC) {\n                    sources[relatedSSRC].msid = sources[ssrc].msid;\n                    sources[relatedSSRC].cname = sources[ssrc].cname;\n                    if (relatedSSRC !== ssrc) {\n                        order.push(relatedSSRC);\n                    }\n                });\n\n                // Schedule the related group for nuking.\n            })\n        }\n\n        mLine.ssrcs = writeSsrcs(sources, order);\n        mLine.ssrcGroups.splice(j, 1);\n    };\n}\n\nfunction implodeRemoteSimulcast(mLine) {\n\n    if (!mLine || !Array.isArray(mLine.ssrcGroups)) {\n        console.info('Halt: There are no SSRC groups in the remote ' +\n                'description.');\n        return;\n    }\n\n    var sources = parseSsrcs(mLine);\n\n    // Find the SIM group and nuke it.\n    mLine.ssrcGroups.forEach(function (simulcastGroup) {\n        if (simulcastGroup.semantics !== 'SIM') {\n            return;\n        }\n\n        console.info(\"Imploding SIM group: \" + simulcastGroup.ssrcs);\n        // Schedule the SIM group for nuking.\n        simulcastGroup.nuke = true;\n\n        var simulcastSsrcs = simulcastGroup.ssrcs.split(' ');\n\n        // Nuke all the higher layer SSRCs.\n        for (var i = 1; i < simulcastSsrcs.length; i++) {\n\n            var ssrc = simulcastSsrcs[i];\n            delete sources[ssrc];\n\n            // Remove all the groups that this SSRC participates in.\n            mLine.ssrcGroups.forEach(function (relatedGroup) {\n                if (relatedGroup.semantics === 'SIM') {\n                    return;\n                }\n\n                var relatedSsrcs = relatedGroup.ssrcs.split(' ');\n                if (relatedSsrcs.indexOf(ssrc) === -1) {\n                    return;\n                }\n\n                // Nuke all the related SSRCs.\n                relatedSsrcs.forEach(function (relatedSSRC) {\n                    delete sources[relatedSSRC];\n                });\n\n                // Schedule the related group for nuking.\n                relatedGroup.nuke = true;\n            })\n        }\n\n        return;\n    });\n\n    mLine.ssrcs = writeSsrcs(sources);\n\n    // Nuke all the scheduled groups.\n    var i = mLine.ssrcGroups.length;\n    while (i--) {\n        if (mLine.ssrcGroups[i].nuke) {\n            mLine.ssrcGroups.splice(i, 1);\n        }\n    }\n}\n\nfunction removeGoogConference(mLine) {\n    if (!mLine || typeof mLine.xGoogleFlag === 'undefined') {\n        return;\n    }\n\n    mLine.xGoogleFlag = undefined;\n}\n\nfunction assertGoogConference(mLine) {\n    if (!mLine) {\n        return;\n    }\n\n    if (!Array.isArray(mLine.invalid)) {\n        mLine.invalid = [];\n    }\n\n    if (!mLine.invalid.some(\n            function (i) { return i.value === 'x-google-flag:conference' })) {\n        mLine.invalid.push({'value': 'x-google-flag:conference'});\n    }\n}\n\nSimulcast.prototype.clearSsrcCache = function() {\n    this.ssrcCache = [];\n}\n\n/**\n * When we start as video muted, all of the video\n *  ssrcs get generated so we can include them as part\n *  of the original session-accept.  That means we\n *  need this library to restore to those same ssrcs\n *  the first time we unmute, so we need the ability to\n *  force its cache\n */\nSimulcast.prototype.setSsrcCache = function(ssrcs) {\n    this.ssrcCache = ssrcs;\n}\n\n//endregion\n\n//region \"Private\" functions\n\n/**\n * Given a video mLine, return a list of the video ssrcs\n *  in simulcast layer order (returns a list of just\n *  the primary ssrc if there are no simulcast layers)\n */\nSimulcast.prototype._parseSimLayers = function (mLine) {\n    var simGroup = mLine.ssrcGroups &&\n        mLine.ssrcGroups.find(function(group) { return group.semantics === \"SIM\"; });\n    if (simGroup) {\n        return simGroup.ssrcs\n            .split(\" \")\n            .map(function(ssrcStr) { return parseInt(ssrcStr) });\n    } else {\n        return [mLine.ssrcs[0].id];\n    }\n}\n\nSimulcast.prototype._buildNewToOldSsrcMap = function (newSsrcList, oldSsrcList) {\n    var ssrcMap = {};\n    for (var i = 0; i < newSsrcList.length; ++i) {\n        var newSsrc = newSsrcList[i];\n        var oldSsrc = oldSsrcList[i] || null;\n        ssrcMap[newSsrc] = oldSsrc;\n    }\n    return ssrcMap;\n}\n\nSimulcast.prototype._fillInSourceDataFromCache = function(mLine) {\n    console.log(\"SdpSimulcast restoring from cache: \", this.ssrcCache);\n    var newSimSsrcs = this._parseSimLayers(mLine);\n    console.log(\"SdpSimulcast Parsed new sim ssrcs: \", newSimSsrcs);\n    var newMsid = getSsrcAttribute(mLine, newSimSsrcs[0], \"msid\");\n    var newCname = getSsrcAttribute(mLine, newSimSsrcs[0], \"cname\");\n    var ssrcsToReplace = this._buildNewToOldSsrcMap(newSimSsrcs, this.ssrcCache);\n    console.log(\"SdpSimulcast built replacement map: \", ssrcsToReplace);\n    // New sdp might only have 1 layer, so not every cached ssrc will have a new one\n    //  to replace directly\n    var ssrcsToAdd = this.ssrcCache\n        .filter(function(ssrc) { return Object.values(ssrcsToReplace).indexOf(ssrc) === -1; });\n    console.log(\"SdpSimulcast built ssrcs to add: \", ssrcsToAdd);\n\n    // First do the replacements\n    mLine.ssrcs.forEach(function(ssrc) {\n        if (ssrcsToReplace[ssrc.id]) {\n            ssrc.id = ssrcsToReplace[ssrc.id];\n        }\n    });\n    // Now the adds\n    ssrcsToAdd.forEach(function(ssrc) {\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"msid\",\n            value: newMsid\n        });\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"cname\",\n            value: newCname\n        });\n    });\n    mLine.ssrcGroups = mLine.ssrcGroups || [];\n    mLine.ssrcGroups.push({\n        semantics: \"SIM\",\n        ssrcs: this.ssrcCache.join(\" \")\n    });\n    return mLine;\n}\n\nSimulcast.prototype._generateSourceData = function(mLine, primarySsrc) {\n    var addAssociatedStream = function(mLine, ssrc) {\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"cname\",\n            value: primarySsrcCname\n        });\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"msid\",\n            value: primarySsrcMsid\n        });\n    }\n    var primarySsrcMsid = getSsrcAttribute(mLine, primarySsrc, \"msid\");\n    var primarySsrcCname = getSsrcAttribute(mLine, primarySsrc, \"cname\");\n\n    // In Unified-plan mode, the a=ssrc lines with the msid attribute are not present\n    // in the answers that Chrome and Safari generate for an offer received from Jicofo.\n    // Generate these a=ssrc lines using the msid values from the a=msid line.\n    if (this.options.usesUnifiedPlan && !primarySsrcMsid) {\n        primarySsrcMsid = mLine.msid;\n        var primarySsrcs = mLine.ssrcs;\n        primarySsrcs.forEach(ssrc => {\n            mLine.ssrcs.push({\n                id: ssrc.id,\n                attribute: \"msid\",\n                value: primarySsrcMsid\n            });\n        });\n    }\n\n    // Generate sim layers\n    var simSsrcs = [];\n    for (var i = 0; i < this.options.numOfLayers - 1; ++i) {\n        var simSsrc = generateSSRC();\n        addAssociatedStream(mLine, simSsrc);\n        simSsrcs.push(simSsrc);\n    }\n    mLine.ssrcGroups = mLine.ssrcGroups || [];\n    mLine.ssrcGroups.push({\n        semantics: \"SIM\",\n        ssrcs: primarySsrc + \" \" + simSsrcs.join(\" \")\n    });\n    return mLine;\n}\n\n\n\n// Assumptions:\n//  1) 'mLine' contains only a single primary video source\n//   (i.e. it will not already have simulcast streams inserted)\n//  2) 'mLine' MAY already contain an RTX stream for its video source\n//  3) 'mLine' is in sendrecv or sendonly state\n// Guarantees:\n//  1) return mLine will contain 2 additional simulcast layers\n//   generated\n//  2) if the base video ssrc in mLine has been seen before,\n//   then the same generated simulcast streams from before will\n//   be used again\n//  3) if rtx is enabled for the mLine, all generated simulcast\n//   streams will have rtx streams generated as well\n//  4) if rtx has been generated for a src before, we will generate\n//   the same rtx stream again\nSimulcast.prototype._restoreSimulcast = function(mLine) {\n    // First, find the primary video source in the given\n    // mLine and see if we've seen it before.\n    var primarySsrc;\n    var numSsrcs = mLine.ssrcs && mLine.ssrcs\n        .map(function(ssrcInfo) { return ssrcInfo.id; })\n        .filter(function(ssrc, index, array) {\n            return array.indexOf(ssrc) === index;\n        })\n        .length || 0;\n    var numGroups = (mLine.ssrcGroups && mLine.ssrcGroups.length) || 0;\n\n    if (numSsrcs === 0 || numSsrcs > 2) {\n        // Unsupported scenario\n        return mLine;\n    }\n    if (numSsrcs == 2 && numGroups === 0) {\n        // Unsupported scenario\n        return mLine;\n    }\n\n    if (numSsrcs === 1) {\n        primarySsrc = mLine.ssrcs[0].id;\n    } else {\n        // There must be an FID group, so parse\n        //  that and pull the primary ssrc from there\n        var fidGroup = mLine.ssrcGroups.filter(function(group) { return group.semantics === \"FID\"; })[0];\n        if (fidGroup) {\n            primarySsrc = parseInt(fidGroup.ssrcs.split(\" \")[0]);\n        } else {\n            // Unsupported scenario\n            return mLine;\n        }\n    }\n    console.log(\"SdpSimulcast: current ssrc cache: \", this.ssrcCache);\n    console.log(\"SdpSimulcast: parsed primary ssrc \" + primarySsrc);\n\n    var seenPrimarySsrc = this.ssrcCache.indexOf(primarySsrc) !== -1;\n\n    if (seenPrimarySsrc) {\n        console.log(\"SdpSimulcast: Have seen primary ssrc before, \" +\n            \"filling in data from cache\");\n        mLine = this._fillInSourceDataFromCache(mLine);\n    } else {\n        console.log(\"SdpSimulcast: Have not seen primary ssrc before, \" +\n            \"generating source data\");\n        mLine = this._generateSourceData(mLine, primarySsrc);\n    }\n    // Now update the cache to match whatever we've just put into this sdp\n    this.ssrcCache = this._parseSimLayers(mLine);\n    return mLine;\n}\n\n//endregion\n\n//region \"Public\" functions\n\n/**\n *\n * @param desc\n * @param enableConferenceFlag\n * @returns {RTCSessionDescription}\n */\nSimulcast.prototype.mungeRemoteDescription = function (desc, enableConferenceFlag) {\n\n    if (!validateDescription(desc)) {\n        return desc;\n    }\n\n    var session = transform.parse(desc.sdp);\n\n    var self = this;\n    processVideo(session, function (mLine) {\n\n        // Handle simulcast reception.\n        if (self.options.explodeRemoteSimulcast) {\n            explodeRemoteSimulcast(mLine);\n        } else {\n            implodeRemoteSimulcast(mLine);\n        }\n\n        // Add or remove \"x-google-conference\" from the remote description based on whether the client\n        // has enabled simulcast for the local video source. For cases where we disable simulcast for desktop share,\n        // it is necessary to remove the flag so that Chrome stops sending T1 temporal layers. It also fixes other\n        // issues related to screensharing like https://bugs.chromium.org/p/chromium/issues/detail?id=1093819.\n        if (!self.options.usesUnifiedPlan && enableConferenceFlag) {\n            assertGoogConference(mLine);\n        } else {\n            removeGoogConference(mLine);\n        }\n    });\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: transform.write(session)\n    });\n};\n\n/**\n *\n * NOTE this method should be called only if simulcast is supported by\n * the current browser, otherwise local SDP should not be munged.\n * @param desc\n * @returns {RTCSessionDescription}\n */\nSimulcast.prototype.mungeLocalDescription = function (desc) {\n\n    if (!validateDescription(desc)) {\n        return desc;\n    }\n\n    var session = transform.parse(desc.sdp);\n\n    var self = this;\n    processVideo(session, function (mLine) {\n        if (mLine.direction == 'recvonly' || mLine.direction == 'inactive')\n        {\n            return;\n        }\n        self._restoreSimulcast(mLine);\n    });\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: transform.write(session)\n    });\n};\n\n//endregion\n\nmodule.exports = Simulcast;\n","/* Copyright @ 2015 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * FIXME\n * @param sources FIXME\n * @param order An array of SSRCs which will be used to order the entries in\n * the returned array. Sources whose SSRC appears in 'order' will be added first,\n * in the specified order, and all other sources will be added afterwards (in\n * no specific order).\n * @returns {Array} FIXME\n */\nexports.writeSsrcs = function(sources, order) {\n  var ssrcs = [];\n\n  // expand sources to ssrcs\n  if (typeof sources !== 'undefined' &&\n      Object.keys(sources).length !== 0) {\n\n    if (!Array.isArray(order)) {\n      order = []\n    }\n\n    // Add the sources that appear in 'order' first.\n    for (var i = 0; i < order.length; i++) {\n      var ssrc = order[i];\n      var source = sources[ssrc];\n      Object.keys(source).forEach(function (attribute) {\n        ssrcs.push({\n          id: ssrc,\n          attribute: attribute,\n          value: source[attribute]\n        });\n      });\n    }\n\n    // Now add the rest of the sources.\n    Object.keys(sources).forEach(function (ssrc) {\n      ssrc = parseInt(ssrc); // Object.keys() returns string\n      if (order.indexOf(ssrc) >= 0) {\n        // Already added.\n        return;\n      }\n\n      var source = sources[ssrc];\n      Object.keys(source).forEach(function (attribute) {\n        ssrcs.push({\n          id: ssrc,\n          attribute: attribute,\n          value: source[attribute]\n        });\n      });\n    });\n  }\n\n  return ssrcs;\n};\n\nexports.parseSsrcs = function (mLine) {\n  var sources = {};\n  // group sources attributes by ssrc.\n  if (typeof mLine.ssrcs !== 'undefined' && Array.isArray(mLine.ssrcs)) {\n    mLine.ssrcs.forEach(function (ssrc) {\n      if (!sources[ssrc.id])\n        sources[ssrc.id] = {};\n      sources[ssrc.id][ssrc.attribute] = ssrc.value;\n    });\n  }\n  return sources;\n};\n\n","/*!\n * async\n * https://github.com/caolan/async\n *\n * Copyright 2010-2014 Caolan McMahon\n * Released under the MIT license\n */\n/*jshint onevar: false, indent:4 */\n/*global setImmediate: false, setTimeout: false, console: false */\n(function () {\n\n    var async = {};\n\n    // global on the server, window in the browser\n    var root, previous_async;\n\n    root = this;\n    if (root != null) {\n      previous_async = root.async;\n    }\n\n    async.noConflict = function () {\n        root.async = previous_async;\n        return async;\n    };\n\n    function only_once(fn) {\n        var called = false;\n        return function() {\n            if (called) throw new Error(\"Callback was already called.\");\n            called = true;\n            fn.apply(root, arguments);\n        }\n    }\n\n    //// cross-browser compatiblity functions ////\n\n    var _toString = Object.prototype.toString;\n\n    var _isArray = Array.isArray || function (obj) {\n        return _toString.call(obj) === '[object Array]';\n    };\n\n    var _each = function (arr, iterator) {\n        if (arr.forEach) {\n            return arr.forEach(iterator);\n        }\n        for (var i = 0; i < arr.length; i += 1) {\n            iterator(arr[i], i, arr);\n        }\n    };\n\n    var _map = function (arr, iterator) {\n        if (arr.map) {\n            return arr.map(iterator);\n        }\n        var results = [];\n        _each(arr, function (x, i, a) {\n            results.push(iterator(x, i, a));\n        });\n        return results;\n    };\n\n    var _reduce = function (arr, iterator, memo) {\n        if (arr.reduce) {\n            return arr.reduce(iterator, memo);\n        }\n        _each(arr, function (x, i, a) {\n            memo = iterator(memo, x, i, a);\n        });\n        return memo;\n    };\n\n    var _keys = function (obj) {\n        if (Object.keys) {\n            return Object.keys(obj);\n        }\n        var keys = [];\n        for (var k in obj) {\n            if (obj.hasOwnProperty(k)) {\n                keys.push(k);\n            }\n        }\n        return keys;\n    };\n\n    //// exported async module functions ////\n\n    //// nextTick implementation with browser-compatible fallback ////\n    if (typeof process === 'undefined' || !(process.nextTick)) {\n        if (typeof setImmediate === 'function') {\n            async.nextTick = function (fn) {\n                // not a direct alias for IE10 compatibility\n                setImmediate(fn);\n            };\n            async.setImmediate = async.nextTick;\n        }\n        else {\n            async.nextTick = function (fn) {\n                setTimeout(fn, 0);\n            };\n            async.setImmediate = async.nextTick;\n        }\n    }\n    else {\n        async.nextTick = process.nextTick;\n        if (typeof setImmediate !== 'undefined') {\n            async.setImmediate = function (fn) {\n              // not a direct alias for IE10 compatibility\n              setImmediate(fn);\n            };\n        }\n        else {\n            async.setImmediate = async.nextTick;\n        }\n    }\n\n    async.each = function (arr, iterator, callback) {\n        callback = callback || function () {};\n        if (!arr.length) {\n            return callback();\n        }\n        var completed = 0;\n        _each(arr, function (x) {\n            iterator(x, only_once(done) );\n        });\n        function done(err) {\n          if (err) {\n              callback(err);\n              callback = function () {};\n          }\n          else {\n              completed += 1;\n              if (completed >= arr.length) {\n                  callback();\n              }\n          }\n        }\n    };\n    async.forEach = async.each;\n\n    async.eachSeries = function (arr, iterator, callback) {\n        callback = callback || function () {};\n        if (!arr.length) {\n            return callback();\n        }\n        var completed = 0;\n        var iterate = function () {\n            iterator(arr[completed], function (err) {\n                if (err) {\n                    callback(err);\n                    callback = function () {};\n                }\n                else {\n                    completed += 1;\n                    if (completed >= arr.length) {\n                        callback();\n                    }\n                    else {\n                        iterate();\n                    }\n                }\n            });\n        };\n        iterate();\n    };\n    async.forEachSeries = async.eachSeries;\n\n    async.eachLimit = function (arr, limit, iterator, callback) {\n        var fn = _eachLimit(limit);\n        fn.apply(null, [arr, iterator, callback]);\n    };\n    async.forEachLimit = async.eachLimit;\n\n    var _eachLimit = function (limit) {\n\n        return function (arr, iterator, callback) {\n            callback = callback || function () {};\n            if (!arr.length || limit <= 0) {\n                return callback();\n            }\n            var completed = 0;\n            var started = 0;\n            var running = 0;\n\n            (function replenish () {\n                if (completed >= arr.length) {\n                    return callback();\n                }\n\n                while (running < limit && started < arr.length) {\n                    started += 1;\n                    running += 1;\n                    iterator(arr[started - 1], function (err) {\n                        if (err) {\n                            callback(err);\n                            callback = function () {};\n                        }\n                        else {\n                            completed += 1;\n                            running -= 1;\n                            if (completed >= arr.length) {\n                                callback();\n                            }\n                            else {\n                                replenish();\n                            }\n                        }\n                    });\n                }\n            })();\n        };\n    };\n\n\n    var doParallel = function (fn) {\n        return function () {\n            var args = Array.prototype.slice.call(arguments);\n            return fn.apply(null, [async.each].concat(args));\n        };\n    };\n    var doParallelLimit = function(limit, fn) {\n        return function () {\n            var args = Array.prototype.slice.call(arguments);\n            return fn.apply(null, [_eachLimit(limit)].concat(args));\n        };\n    };\n    var doSeries = function (fn) {\n        return function () {\n            var args = Array.prototype.slice.call(arguments);\n            return fn.apply(null, [async.eachSeries].concat(args));\n        };\n    };\n\n\n    var _asyncMap = function (eachfn, arr, iterator, callback) {\n        arr = _map(arr, function (x, i) {\n            return {index: i, value: x};\n        });\n        if (!callback) {\n            eachfn(arr, function (x, callback) {\n                iterator(x.value, function (err) {\n                    callback(err);\n                });\n            });\n        } else {\n            var results = [];\n            eachfn(arr, function (x, callback) {\n                iterator(x.value, function (err, v) {\n                    results[x.index] = v;\n                    callback(err);\n                });\n            }, function (err) {\n                callback(err, results);\n            });\n        }\n    };\n    async.map = doParallel(_asyncMap);\n    async.mapSeries = doSeries(_asyncMap);\n    async.mapLimit = function (arr, limit, iterator, callback) {\n        return _mapLimit(limit)(arr, iterator, callback);\n    };\n\n    var _mapLimit = function(limit) {\n        return doParallelLimit(limit, _asyncMap);\n    };\n\n    // reduce only has a series version, as doing reduce in parallel won't\n    // work in many situations.\n    async.reduce = function (arr, memo, iterator, callback) {\n        async.eachSeries(arr, function (x, callback) {\n            iterator(memo, x, function (err, v) {\n                memo = v;\n                callback(err);\n            });\n        }, function (err) {\n            callback(err, memo);\n        });\n    };\n    // inject alias\n    async.inject = async.reduce;\n    // foldl alias\n    async.foldl = async.reduce;\n\n    async.reduceRight = function (arr, memo, iterator, callback) {\n        var reversed = _map(arr, function (x) {\n            return x;\n        }).reverse();\n        async.reduce(reversed, memo, iterator, callback);\n    };\n    // foldr alias\n    async.foldr = async.reduceRight;\n\n    var _filter = function (eachfn, arr, iterator, callback) {\n        var results = [];\n        arr = _map(arr, function (x, i) {\n            return {index: i, value: x};\n        });\n        eachfn(arr, function (x, callback) {\n            iterator(x.value, function (v) {\n                if (v) {\n                    results.push(x);\n                }\n                callback();\n            });\n        }, function (err) {\n            callback(_map(results.sort(function (a, b) {\n                return a.index - b.index;\n            }), function (x) {\n                return x.value;\n            }));\n        });\n    };\n    async.filter = doParallel(_filter);\n    async.filterSeries = doSeries(_filter);\n    // select alias\n    async.select = async.filter;\n    async.selectSeries = async.filterSeries;\n\n    var _reject = function (eachfn, arr, iterator, callback) {\n        var results = [];\n        arr = _map(arr, function (x, i) {\n            return {index: i, value: x};\n        });\n        eachfn(arr, function (x, callback) {\n            iterator(x.value, function (v) {\n                if (!v) {\n                    results.push(x);\n                }\n                callback();\n            });\n        }, function (err) {\n            callback(_map(results.sort(function (a, b) {\n                return a.index - b.index;\n            }), function (x) {\n                return x.value;\n            }));\n        });\n    };\n    async.reject = doParallel(_reject);\n    async.rejectSeries = doSeries(_reject);\n\n    var _detect = function (eachfn, arr, iterator, main_callback) {\n        eachfn(arr, function (x, callback) {\n            iterator(x, function (result) {\n                if (result) {\n                    main_callback(x);\n                    main_callback = function () {};\n                }\n                else {\n                    callback();\n                }\n            });\n        }, function (err) {\n            main_callback();\n        });\n    };\n    async.detect = doParallel(_detect);\n    async.detectSeries = doSeries(_detect);\n\n    async.some = function (arr, iterator, main_callback) {\n        async.each(arr, function (x, callback) {\n            iterator(x, function (v) {\n                if (v) {\n                    main_callback(true);\n                    main_callback = function () {};\n                }\n                callback();\n            });\n        }, function (err) {\n            main_callback(false);\n        });\n    };\n    // any alias\n    async.any = async.some;\n\n    async.every = function (arr, iterator, main_callback) {\n        async.each(arr, function (x, callback) {\n            iterator(x, function (v) {\n                if (!v) {\n                    main_callback(false);\n                    main_callback = function () {};\n                }\n                callback();\n            });\n        }, function (err) {\n            main_callback(true);\n        });\n    };\n    // all alias\n    async.all = async.every;\n\n    async.sortBy = function (arr, iterator, callback) {\n        async.map(arr, function (x, callback) {\n            iterator(x, function (err, criteria) {\n                if (err) {\n                    callback(err);\n                }\n                else {\n                    callback(null, {value: x, criteria: criteria});\n                }\n            });\n        }, function (err, results) {\n            if (err) {\n                return callback(err);\n            }\n            else {\n                var fn = function (left, right) {\n                    var a = left.criteria, b = right.criteria;\n                    return a < b ? -1 : a > b ? 1 : 0;\n                };\n                callback(null, _map(results.sort(fn), function (x) {\n                    return x.value;\n                }));\n            }\n        });\n    };\n\n    async.auto = function (tasks, callback) {\n        callback = callback || function () {};\n        var keys = _keys(tasks);\n        var remainingTasks = keys.length\n        if (!remainingTasks) {\n            return callback();\n        }\n\n        var results = {};\n\n        var listeners = [];\n        var addListener = function (fn) {\n            listeners.unshift(fn);\n        };\n        var removeListener = function (fn) {\n            for (var i = 0; i < listeners.length; i += 1) {\n                if (listeners[i] === fn) {\n                    listeners.splice(i, 1);\n                    return;\n                }\n            }\n        };\n        var taskComplete = function () {\n            remainingTasks--\n            _each(listeners.slice(0), function (fn) {\n                fn();\n            });\n        };\n\n        addListener(function () {\n            if (!remainingTasks) {\n                var theCallback = callback;\n                // prevent final callback from calling itself if it errors\n                callback = function () {};\n\n                theCallback(null, results);\n            }\n        });\n\n        _each(keys, function (k) {\n            var task = _isArray(tasks[k]) ? tasks[k]: [tasks[k]];\n            var taskCallback = function (err) {\n                var args = Array.prototype.slice.call(arguments, 1);\n                if (args.length <= 1) {\n                    args = args[0];\n                }\n                if (err) {\n                    var safeResults = {};\n                    _each(_keys(results), function(rkey) {\n                        safeResults[rkey] = results[rkey];\n                    });\n                    safeResults[k] = args;\n                    callback(err, safeResults);\n                    // stop subsequent errors hitting callback multiple times\n                    callback = function () {};\n                }\n                else {\n                    results[k] = args;\n                    async.setImmediate(taskComplete);\n                }\n            };\n            var requires = task.slice(0, Math.abs(task.length - 1)) || [];\n            var ready = function () {\n                return _reduce(requires, function (a, x) {\n                    return (a && results.hasOwnProperty(x));\n                }, true) && !results.hasOwnProperty(k);\n            };\n            if (ready()) {\n                task[task.length - 1](taskCallback, results);\n            }\n            else {\n                var listener = function () {\n                    if (ready()) {\n                        removeListener(listener);\n                        task[task.length - 1](taskCallback, results);\n                    }\n                };\n                addListener(listener);\n            }\n        });\n    };\n\n    async.retry = function(times, task, callback) {\n        var DEFAULT_TIMES = 5;\n        var attempts = [];\n        // Use defaults if times not passed\n        if (typeof times === 'function') {\n            callback = task;\n            task = times;\n            times = DEFAULT_TIMES;\n        }\n        // Make sure times is a number\n        times = parseInt(times, 10) || DEFAULT_TIMES;\n        var wrappedTask = function(wrappedCallback, wrappedResults) {\n            var retryAttempt = function(task, finalAttempt) {\n                return function(seriesCallback) {\n                    task(function(err, result){\n                        seriesCallback(!err || finalAttempt, {err: err, result: result});\n                    }, wrappedResults);\n                };\n            };\n            while (times) {\n                attempts.push(retryAttempt(task, !(times-=1)));\n            }\n            async.series(attempts, function(done, data){\n                data = data[data.length - 1];\n                (wrappedCallback || callback)(data.err, data.result);\n            });\n        }\n        // If a callback is passed, run this as a controll flow\n        return callback ? wrappedTask() : wrappedTask\n    };\n\n    async.waterfall = function (tasks, callback) {\n        callback = callback || function () {};\n        if (!_isArray(tasks)) {\n          var err = new Error('First argument to waterfall must be an array of functions');\n          return callback(err);\n        }\n        if (!tasks.length) {\n            return callback();\n        }\n        var wrapIterator = function (iterator) {\n            return function (err) {\n                if (err) {\n                    callback.apply(null, arguments);\n                    callback = function () {};\n                }\n                else {\n                    var args = Array.prototype.slice.call(arguments, 1);\n                    var next = iterator.next();\n                    if (next) {\n                        args.push(wrapIterator(next));\n                    }\n                    else {\n                        args.push(callback);\n                    }\n                    async.setImmediate(function () {\n                        iterator.apply(null, args);\n                    });\n                }\n            };\n        };\n        wrapIterator(async.iterator(tasks))();\n    };\n\n    var _parallel = function(eachfn, tasks, callback) {\n        callback = callback || function () {};\n        if (_isArray(tasks)) {\n            eachfn.map(tasks, function (fn, callback) {\n                if (fn) {\n                    fn(function (err) {\n                        var args = Array.prototype.slice.call(arguments, 1);\n                        if (args.length <= 1) {\n                            args = args[0];\n                        }\n                        callback.call(null, err, args);\n                    });\n                }\n            }, callback);\n        }\n        else {\n            var results = {};\n            eachfn.each(_keys(tasks), function (k, callback) {\n                tasks[k](function (err) {\n                    var args = Array.prototype.slice.call(arguments, 1);\n                    if (args.length <= 1) {\n                        args = args[0];\n                    }\n                    results[k] = args;\n                    callback(err);\n                });\n            }, function (err) {\n                callback(err, results);\n            });\n        }\n    };\n\n    async.parallel = function (tasks, callback) {\n        _parallel({ map: async.map, each: async.each }, tasks, callback);\n    };\n\n    async.parallelLimit = function(tasks, limit, callback) {\n        _parallel({ map: _mapLimit(limit), each: _eachLimit(limit) }, tasks, callback);\n    };\n\n    async.series = function (tasks, callback) {\n        callback = callback || function () {};\n        if (_isArray(tasks)) {\n            async.mapSeries(tasks, function (fn, callback) {\n                if (fn) {\n                    fn(function (err) {\n                        var args = Array.prototype.slice.call(arguments, 1);\n                        if (args.length <= 1) {\n                            args = args[0];\n                        }\n                        callback.call(null, err, args);\n                    });\n                }\n            }, callback);\n        }\n        else {\n            var results = {};\n            async.eachSeries(_keys(tasks), function (k, callback) {\n                tasks[k](function (err) {\n                    var args = Array.prototype.slice.call(arguments, 1);\n                    if (args.length <= 1) {\n                        args = args[0];\n                    }\n                    results[k] = args;\n                    callback(err);\n                });\n            }, function (err) {\n                callback(err, results);\n            });\n        }\n    };\n\n    async.iterator = function (tasks) {\n        var makeCallback = function (index) {\n            var fn = function () {\n                if (tasks.length) {\n                    tasks[index].apply(null, arguments);\n                }\n                return fn.next();\n            };\n            fn.next = function () {\n                return (index < tasks.length - 1) ? makeCallback(index + 1): null;\n            };\n            return fn;\n        };\n        return makeCallback(0);\n    };\n\n    async.apply = function (fn) {\n        var args = Array.prototype.slice.call(arguments, 1);\n        return function () {\n            return fn.apply(\n                null, args.concat(Array.prototype.slice.call(arguments))\n            );\n        };\n    };\n\n    var _concat = function (eachfn, arr, fn, callback) {\n        var r = [];\n        eachfn(arr, function (x, cb) {\n            fn(x, function (err, y) {\n                r = r.concat(y || []);\n                cb(err);\n            });\n        }, function (err) {\n            callback(err, r);\n        });\n    };\n    async.concat = doParallel(_concat);\n    async.concatSeries = doSeries(_concat);\n\n    async.whilst = function (test, iterator, callback) {\n        if (test()) {\n            iterator(function (err) {\n                if (err) {\n                    return callback(err);\n                }\n                async.whilst(test, iterator, callback);\n            });\n        }\n        else {\n            callback();\n        }\n    };\n\n    async.doWhilst = function (iterator, test, callback) {\n        iterator(function (err) {\n            if (err) {\n                return callback(err);\n            }\n            var args = Array.prototype.slice.call(arguments, 1);\n            if (test.apply(null, args)) {\n                async.doWhilst(iterator, test, callback);\n            }\n            else {\n                callback();\n            }\n        });\n    };\n\n    async.until = function (test, iterator, callback) {\n        if (!test()) {\n            iterator(function (err) {\n                if (err) {\n                    return callback(err);\n                }\n                async.until(test, iterator, callback);\n            });\n        }\n        else {\n            callback();\n        }\n    };\n\n    async.doUntil = function (iterator, test, callback) {\n        iterator(function (err) {\n            if (err) {\n                return callback(err);\n            }\n            var args = Array.prototype.slice.call(arguments, 1);\n            if (!test.apply(null, args)) {\n                async.doUntil(iterator, test, callback);\n            }\n            else {\n                callback();\n            }\n        });\n    };\n\n    async.queue = function (worker, concurrency) {\n        if (concurrency === undefined) {\n            concurrency = 1;\n        }\n        function _insert(q, data, pos, callback) {\n          if (!q.started){\n            q.started = true;\n          }\n          if (!_isArray(data)) {\n              data = [data];\n          }\n          if(data.length == 0) {\n             // call drain immediately if there are no tasks\n             return async.setImmediate(function() {\n                 if (q.drain) {\n                     q.drain();\n                 }\n             });\n          }\n          _each(data, function(task) {\n              var item = {\n                  data: task,\n                  callback: typeof callback === 'function' ? callback : null\n              };\n\n              if (pos) {\n                q.tasks.unshift(item);\n              } else {\n                q.tasks.push(item);\n              }\n\n              if (q.saturated && q.tasks.length === q.concurrency) {\n                  q.saturated();\n              }\n              async.setImmediate(q.process);\n          });\n        }\n\n        var workers = 0;\n        var q = {\n            tasks: [],\n            concurrency: concurrency,\n            saturated: null,\n            empty: null,\n            drain: null,\n            started: false,\n            paused: false,\n            push: function (data, callback) {\n              _insert(q, data, false, callback);\n            },\n            kill: function () {\n              q.drain = null;\n              q.tasks = [];\n            },\n            unshift: function (data, callback) {\n              _insert(q, data, true, callback);\n            },\n            process: function () {\n                if (!q.paused && workers < q.concurrency && q.tasks.length) {\n                    var task = q.tasks.shift();\n                    if (q.empty && q.tasks.length === 0) {\n                        q.empty();\n                    }\n                    workers += 1;\n                    var next = function () {\n                        workers -= 1;\n                        if (task.callback) {\n                            task.callback.apply(task, arguments);\n                        }\n                        if (q.drain && q.tasks.length + workers === 0) {\n                            q.drain();\n                        }\n                        q.process();\n                    };\n                    var cb = only_once(next);\n                    worker(task.data, cb);\n                }\n            },\n            length: function () {\n                return q.tasks.length;\n            },\n            running: function () {\n                return workers;\n            },\n            idle: function() {\n                return q.tasks.length + workers === 0;\n            },\n            pause: function () {\n                if (q.paused === true) { return; }\n                q.paused = true;\n                q.process();\n            },\n            resume: function () {\n                if (q.paused === false) { return; }\n                q.paused = false;\n                q.process();\n            }\n        };\n        return q;\n    };\n    \n    async.priorityQueue = function (worker, concurrency) {\n        \n        function _compareTasks(a, b){\n          return a.priority - b.priority;\n        };\n        \n        function _binarySearch(sequence, item, compare) {\n          var beg = -1,\n              end = sequence.length - 1;\n          while (beg < end) {\n            var mid = beg + ((end - beg + 1) >>> 1);\n            if (compare(item, sequence[mid]) >= 0) {\n              beg = mid;\n            } else {\n              end = mid - 1;\n            }\n          }\n          return beg;\n        }\n        \n        function _insert(q, data, priority, callback) {\n          if (!q.started){\n            q.started = true;\n          }\n          if (!_isArray(data)) {\n              data = [data];\n          }\n          if(data.length == 0) {\n             // call drain immediately if there are no tasks\n             return async.setImmediate(function() {\n                 if (q.drain) {\n                     q.drain();\n                 }\n             });\n          }\n          _each(data, function(task) {\n              var item = {\n                  data: task,\n                  priority: priority,\n                  callback: typeof callback === 'function' ? callback : null\n              };\n              \n              q.tasks.splice(_binarySearch(q.tasks, item, _compareTasks) + 1, 0, item);\n\n              if (q.saturated && q.tasks.length === q.concurrency) {\n                  q.saturated();\n              }\n              async.setImmediate(q.process);\n          });\n        }\n        \n        // Start with a normal queue\n        var q = async.queue(worker, concurrency);\n        \n        // Override push to accept second parameter representing priority\n        q.push = function (data, priority, callback) {\n          _insert(q, data, priority, callback);\n        };\n        \n        // Remove unshift function\n        delete q.unshift;\n\n        return q;\n    };\n\n    async.cargo = function (worker, payload) {\n        var working     = false,\n            tasks       = [];\n\n        var cargo = {\n            tasks: tasks,\n            payload: payload,\n            saturated: null,\n            empty: null,\n            drain: null,\n            drained: true,\n            push: function (data, callback) {\n                if (!_isArray(data)) {\n                    data = [data];\n                }\n                _each(data, function(task) {\n                    tasks.push({\n                        data: task,\n                        callback: typeof callback === 'function' ? callback : null\n                    });\n                    cargo.drained = false;\n                    if (cargo.saturated && tasks.length === payload) {\n                        cargo.saturated();\n                    }\n                });\n                async.setImmediate(cargo.process);\n            },\n            process: function process() {\n                if (working) return;\n                if (tasks.length === 0) {\n                    if(cargo.drain && !cargo.drained) cargo.drain();\n                    cargo.drained = true;\n                    return;\n                }\n\n                var ts = typeof payload === 'number'\n                            ? tasks.splice(0, payload)\n                            : tasks.splice(0, tasks.length);\n\n                var ds = _map(ts, function (task) {\n                    return task.data;\n                });\n\n                if(cargo.empty) cargo.empty();\n                working = true;\n                worker(ds, function () {\n                    working = false;\n\n                    var args = arguments;\n                    _each(ts, function (data) {\n                        if (data.callback) {\n                            data.callback.apply(null, args);\n                        }\n                    });\n\n                    process();\n                });\n            },\n            length: function () {\n                return tasks.length;\n            },\n            running: function () {\n                return working;\n            }\n        };\n        return cargo;\n    };\n\n    var _console_fn = function (name) {\n        return function (fn) {\n            var args = Array.prototype.slice.call(arguments, 1);\n            fn.apply(null, args.concat([function (err) {\n                var args = Array.prototype.slice.call(arguments, 1);\n                if (typeof console !== 'undefined') {\n                    if (err) {\n                        if (console.error) {\n                            console.error(err);\n                        }\n                    }\n                    else if (console[name]) {\n                        _each(args, function (x) {\n                            console[name](x);\n                        });\n                    }\n                }\n            }]));\n        };\n    };\n    async.log = _console_fn('log');\n    async.dir = _console_fn('dir');\n    /*async.info = _console_fn('info');\n    async.warn = _console_fn('warn');\n    async.error = _console_fn('error');*/\n\n    async.memoize = function (fn, hasher) {\n        var memo = {};\n        var queues = {};\n        hasher = hasher || function (x) {\n            return x;\n        };\n        var memoized = function () {\n            var args = Array.prototype.slice.call(arguments);\n            var callback = args.pop();\n            var key = hasher.apply(null, args);\n            if (key in memo) {\n                async.nextTick(function () {\n                    callback.apply(null, memo[key]);\n                });\n            }\n            else if (key in queues) {\n                queues[key].push(callback);\n            }\n            else {\n                queues[key] = [callback];\n                fn.apply(null, args.concat([function () {\n                    memo[key] = arguments;\n                    var q = queues[key];\n                    delete queues[key];\n                    for (var i = 0, l = q.length; i < l; i++) {\n                      q[i].apply(null, arguments);\n                    }\n                }]));\n            }\n        };\n        memoized.memo = memo;\n        memoized.unmemoized = fn;\n        return memoized;\n    };\n\n    async.unmemoize = function (fn) {\n      return function () {\n        return (fn.unmemoized || fn).apply(null, arguments);\n      };\n    };\n\n    async.times = function (count, iterator, callback) {\n        var counter = [];\n        for (var i = 0; i < count; i++) {\n            counter.push(i);\n        }\n        return async.map(counter, iterator, callback);\n    };\n\n    async.timesSeries = function (count, iterator, callback) {\n        var counter = [];\n        for (var i = 0; i < count; i++) {\n            counter.push(i);\n        }\n        return async.mapSeries(counter, iterator, callback);\n    };\n\n    async.seq = function (/* functions... */) {\n        var fns = arguments;\n        return function () {\n            var that = this;\n            var args = Array.prototype.slice.call(arguments);\n            var callback = args.pop();\n            async.reduce(fns, args, function (newargs, fn, cb) {\n                fn.apply(that, newargs.concat([function () {\n                    var err = arguments[0];\n                    var nextargs = Array.prototype.slice.call(arguments, 1);\n                    cb(err, nextargs);\n                }]))\n            },\n            function (err, results) {\n                callback.apply(that, [err].concat(results));\n            });\n        };\n    };\n\n    async.compose = function (/* functions... */) {\n      return async.seq.apply(null, Array.prototype.reverse.call(arguments));\n    };\n\n    var _applyEach = function (eachfn, fns /*args...*/) {\n        var go = function () {\n            var that = this;\n            var args = Array.prototype.slice.call(arguments);\n            var callback = args.pop();\n            return eachfn(fns, function (fn, cb) {\n                fn.apply(that, args.concat([cb]));\n            },\n            callback);\n        };\n        if (arguments.length > 2) {\n            var args = Array.prototype.slice.call(arguments, 2);\n            return go.apply(this, args);\n        }\n        else {\n            return go;\n        }\n    };\n    async.applyEach = doParallel(_applyEach);\n    async.applyEachSeries = doSeries(_applyEach);\n\n    async.forever = function (fn, callback) {\n        function next(err) {\n            if (err) {\n                if (callback) {\n                    return callback(err);\n                }\n                throw err;\n            }\n            fn(next);\n        }\n        next();\n    };\n\n    // Node.js\n    if (typeof module !== 'undefined' && module.exports) {\n        module.exports = async;\n    }\n    // AMD / RequireJS\n    else if (typeof define !== 'undefined' && define.amd) {\n        define([], function () {\n            return async;\n        });\n    }\n    // included directly via <script> tag\n    else {\n        root.async = async;\n    }\n\n}());\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","!function(e,t){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define([],t):\"object\"==typeof exports?exports.bowser=t():e.bowser=t()}(this,(function(){return function(e){var t={};function r(i){if(t[i])return t[i].exports;var n=t[i]={i:i,l:!1,exports:{}};return e[i].call(n.exports,n,n.exports,r),n.l=!0,n.exports}return r.m=e,r.c=t,r.d=function(e,t,i){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},r.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(r.r(i),Object.defineProperty(i,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var n in e)r.d(i,n,function(t){return e[t]}.bind(null,n));return i},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,\"a\",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p=\"\",r(r.s=90)}({17:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i=r(18),n=function(){function e(){}return e.getFirstMatch=function(e,t){var r=t.match(e);return r&&r.length>0&&r[1]||\"\"},e.getSecondMatch=function(e,t){var r=t.match(e);return r&&r.length>1&&r[2]||\"\"},e.matchAndReturnConst=function(e,t,r){if(e.test(t))return r},e.getWindowsVersionName=function(e){switch(e){case\"NT\":return\"NT\";case\"XP\":return\"XP\";case\"NT 5.0\":return\"2000\";case\"NT 5.1\":return\"XP\";case\"NT 5.2\":return\"2003\";case\"NT 6.0\":return\"Vista\";case\"NT 6.1\":return\"7\";case\"NT 6.2\":return\"8\";case\"NT 6.3\":return\"8.1\";case\"NT 10.0\":return\"10\";default:return}},e.getMacOSVersionName=function(e){var t=e.split(\".\").splice(0,2).map((function(e){return parseInt(e,10)||0}));if(t.push(0),10===t[0])switch(t[1]){case 5:return\"Leopard\";case 6:return\"Snow Leopard\";case 7:return\"Lion\";case 8:return\"Mountain Lion\";case 9:return\"Mavericks\";case 10:return\"Yosemite\";case 11:return\"El Capitan\";case 12:return\"Sierra\";case 13:return\"High Sierra\";case 14:return\"Mojave\";case 15:return\"Catalina\";default:return}},e.getAndroidVersionName=function(e){var t=e.split(\".\").splice(0,2).map((function(e){return parseInt(e,10)||0}));if(t.push(0),!(1===t[0]&&t[1]<5))return 1===t[0]&&t[1]<6?\"Cupcake\":1===t[0]&&t[1]>=6?\"Donut\":2===t[0]&&t[1]<2?\"Eclair\":2===t[0]&&2===t[1]?\"Froyo\":2===t[0]&&t[1]>2?\"Gingerbread\":3===t[0]?\"Honeycomb\":4===t[0]&&t[1]<1?\"Ice Cream Sandwich\":4===t[0]&&t[1]<4?\"Jelly Bean\":4===t[0]&&t[1]>=4?\"KitKat\":5===t[0]?\"Lollipop\":6===t[0]?\"Marshmallow\":7===t[0]?\"Nougat\":8===t[0]?\"Oreo\":9===t[0]?\"Pie\":void 0},e.getVersionPrecision=function(e){return e.split(\".\").length},e.compareVersions=function(t,r,i){void 0===i&&(i=!1);var n=e.getVersionPrecision(t),s=e.getVersionPrecision(r),o=Math.max(n,s),a=0,u=e.map([t,r],(function(t){var r=o-e.getVersionPrecision(t),i=t+new Array(r+1).join(\".0\");return e.map(i.split(\".\"),(function(e){return new Array(20-e.length).join(\"0\")+e})).reverse()}));for(i&&(a=o-Math.min(n,s)),o-=1;o>=a;){if(u[0][o]>u[1][o])return 1;if(u[0][o]===u[1][o]){if(o===a)return 0;o-=1}else if(u[0][o]<u[1][o])return-1}},e.map=function(e,t){var r,i=[];if(Array.prototype.map)return Array.prototype.map.call(e,t);for(r=0;r<e.length;r+=1)i.push(t(e[r]));return i},e.getBrowserAlias=function(e){return i.BROWSER_ALIASES_MAP[e]},e.getBrowserTypeByAlias=function(e){return i.BROWSER_MAP[e]||\"\"},e}();t.default=n,e.exports=t.default},18:function(e,t,r){\"use strict\";t.__esModule=!0,t.ENGINE_MAP=t.OS_MAP=t.PLATFORMS_MAP=t.BROWSER_MAP=t.BROWSER_ALIASES_MAP=void 0;t.BROWSER_ALIASES_MAP={\"Amazon Silk\":\"amazon_silk\",\"Android Browser\":\"android\",Bada:\"bada\",BlackBerry:\"blackberry\",Chrome:\"chrome\",Chromium:\"chromium\",Epiphany:\"epiphany\",Firefox:\"firefox\",Focus:\"focus\",Generic:\"generic\",\"Google Search\":\"google_search\",Googlebot:\"googlebot\",\"Internet Explorer\":\"ie\",\"K-Meleon\":\"k_meleon\",Maxthon:\"maxthon\",\"Microsoft Edge\":\"edge\",\"MZ Browser\":\"mz\",\"NAVER Whale Browser\":\"naver\",Opera:\"opera\",\"Opera Coast\":\"opera_coast\",PhantomJS:\"phantomjs\",Puffin:\"puffin\",QupZilla:\"qupzilla\",QQ:\"qq\",QQLite:\"qqlite\",Safari:\"safari\",Sailfish:\"sailfish\",\"Samsung Internet for Android\":\"samsung_internet\",SeaMonkey:\"seamonkey\",Sleipnir:\"sleipnir\",Swing:\"swing\",Tizen:\"tizen\",\"UC Browser\":\"uc\",Vivaldi:\"vivaldi\",\"WebOS Browser\":\"webos\",WeChat:\"wechat\",\"Yandex Browser\":\"yandex\",Roku:\"roku\"};t.BROWSER_MAP={amazon_silk:\"Amazon Silk\",android:\"Android Browser\",bada:\"Bada\",blackberry:\"BlackBerry\",chrome:\"Chrome\",chromium:\"Chromium\",epiphany:\"Epiphany\",firefox:\"Firefox\",focus:\"Focus\",generic:\"Generic\",googlebot:\"Googlebot\",google_search:\"Google Search\",ie:\"Internet Explorer\",k_meleon:\"K-Meleon\",maxthon:\"Maxthon\",edge:\"Microsoft Edge\",mz:\"MZ Browser\",naver:\"NAVER Whale Browser\",opera:\"Opera\",opera_coast:\"Opera Coast\",phantomjs:\"PhantomJS\",puffin:\"Puffin\",qupzilla:\"QupZilla\",qq:\"QQ Browser\",qqlite:\"QQ Browser Lite\",safari:\"Safari\",sailfish:\"Sailfish\",samsung_internet:\"Samsung Internet for Android\",seamonkey:\"SeaMonkey\",sleipnir:\"Sleipnir\",swing:\"Swing\",tizen:\"Tizen\",uc:\"UC Browser\",vivaldi:\"Vivaldi\",webos:\"WebOS Browser\",wechat:\"WeChat\",yandex:\"Yandex Browser\"};t.PLATFORMS_MAP={tablet:\"tablet\",mobile:\"mobile\",desktop:\"desktop\",tv:\"tv\"};t.OS_MAP={WindowsPhone:\"Windows Phone\",Windows:\"Windows\",MacOS:\"macOS\",iOS:\"iOS\",Android:\"Android\",WebOS:\"WebOS\",BlackBerry:\"BlackBerry\",Bada:\"Bada\",Tizen:\"Tizen\",Linux:\"Linux\",ChromeOS:\"Chrome OS\",PlayStation4:\"PlayStation 4\",Roku:\"Roku\"};t.ENGINE_MAP={EdgeHTML:\"EdgeHTML\",Blink:\"Blink\",Trident:\"Trident\",Presto:\"Presto\",Gecko:\"Gecko\",WebKit:\"WebKit\"}},90:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(91))&&i.__esModule?i:{default:i},s=r(18);function o(e,t){for(var r=0;r<t.length;r++){var i=t[r];i.enumerable=i.enumerable||!1,i.configurable=!0,\"value\"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var a=function(){function e(){}var t,r,i;return e.getParser=function(e,t){if(void 0===t&&(t=!1),\"string\"!=typeof e)throw new Error(\"UserAgent should be a string\");return new n.default(e,t)},e.parse=function(e){return new n.default(e).getResult()},t=e,i=[{key:\"BROWSER_MAP\",get:function(){return s.BROWSER_MAP}},{key:\"ENGINE_MAP\",get:function(){return s.ENGINE_MAP}},{key:\"OS_MAP\",get:function(){return s.OS_MAP}},{key:\"PLATFORMS_MAP\",get:function(){return s.PLATFORMS_MAP}}],(r=null)&&o(t.prototype,r),i&&o(t,i),e}();t.default=a,e.exports=t.default},91:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i=u(r(92)),n=u(r(93)),s=u(r(94)),o=u(r(95)),a=u(r(17));function u(e){return e&&e.__esModule?e:{default:e}}var d=function(){function e(e,t){if(void 0===t&&(t=!1),null==e||\"\"===e)throw new Error(\"UserAgent parameter can't be empty\");this._ua=e,this.parsedResult={},!0!==t&&this.parse()}var t=e.prototype;return t.getUA=function(){return this._ua},t.test=function(e){return e.test(this._ua)},t.parseBrowser=function(){var e=this;this.parsedResult.browser={};var t=i.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.browser=t.describe(this.getUA())),this.parsedResult.browser},t.getBrowser=function(){return this.parsedResult.browser?this.parsedResult.browser:this.parseBrowser()},t.getBrowserName=function(e){return e?String(this.getBrowser().name).toLowerCase()||\"\":this.getBrowser().name||\"\"},t.getBrowserVersion=function(){return this.getBrowser().version},t.getOS=function(){return this.parsedResult.os?this.parsedResult.os:this.parseOS()},t.parseOS=function(){var e=this;this.parsedResult.os={};var t=n.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.os=t.describe(this.getUA())),this.parsedResult.os},t.getOSName=function(e){var t=this.getOS().name;return e?String(t).toLowerCase()||\"\":t||\"\"},t.getOSVersion=function(){return this.getOS().version},t.getPlatform=function(){return this.parsedResult.platform?this.parsedResult.platform:this.parsePlatform()},t.getPlatformType=function(e){void 0===e&&(e=!1);var t=this.getPlatform().type;return e?String(t).toLowerCase()||\"\":t||\"\"},t.parsePlatform=function(){var e=this;this.parsedResult.platform={};var t=s.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.platform=t.describe(this.getUA())),this.parsedResult.platform},t.getEngine=function(){return this.parsedResult.engine?this.parsedResult.engine:this.parseEngine()},t.getEngineName=function(e){return e?String(this.getEngine().name).toLowerCase()||\"\":this.getEngine().name||\"\"},t.parseEngine=function(){var e=this;this.parsedResult.engine={};var t=o.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.engine=t.describe(this.getUA())),this.parsedResult.engine},t.parse=function(){return this.parseBrowser(),this.parseOS(),this.parsePlatform(),this.parseEngine(),this},t.getResult=function(){return Object.assign({},this.parsedResult)},t.satisfies=function(e){var t=this,r={},i=0,n={},s=0;if(Object.keys(e).forEach((function(t){var o=e[t];\"string\"==typeof o?(n[t]=o,s+=1):\"object\"==typeof o&&(r[t]=o,i+=1)})),i>0){var o=Object.keys(r),a=o.find((function(e){return t.isOS(e)}));if(a){var u=this.satisfies(r[a]);if(void 0!==u)return u}var d=o.find((function(e){return t.isPlatform(e)}));if(d){var c=this.satisfies(r[d]);if(void 0!==c)return c}}if(s>0){var f=Object.keys(n).find((function(e){return t.isBrowser(e,!0)}));if(void 0!==f)return this.compareVersion(n[f])}},t.isBrowser=function(e,t){void 0===t&&(t=!1);var r=this.getBrowserName().toLowerCase(),i=e.toLowerCase(),n=a.default.getBrowserTypeByAlias(i);return t&&n&&(i=n.toLowerCase()),i===r},t.compareVersion=function(e){var t=[0],r=e,i=!1,n=this.getBrowserVersion();if(\"string\"==typeof n)return\">\"===e[0]||\"<\"===e[0]?(r=e.substr(1),\"=\"===e[1]?(i=!0,r=e.substr(2)):t=[],\">\"===e[0]?t.push(1):t.push(-1)):\"=\"===e[0]?r=e.substr(1):\"~\"===e[0]&&(i=!0,r=e.substr(1)),t.indexOf(a.default.compareVersions(n,r,i))>-1},t.isOS=function(e){return this.getOSName(!0)===String(e).toLowerCase()},t.isPlatform=function(e){return this.getPlatformType(!0)===String(e).toLowerCase()},t.isEngine=function(e){return this.getEngineName(!0)===String(e).toLowerCase()},t.is=function(e){return this.isBrowser(e)||this.isOS(e)||this.isPlatform(e)},t.some=function(e){var t=this;return void 0===e&&(e=[]),e.some((function(e){return t.is(e)}))},e}();t.default=d,e.exports=t.default},92:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i};var s=/version\\/(\\d+(\\.?_?\\d+)+)/i,o=[{test:[/googlebot/i],describe:function(e){var t={name:\"Googlebot\"},r=n.default.getFirstMatch(/googlebot\\/(\\d+(\\.\\d+))/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/opera/i],describe:function(e){var t={name:\"Opera\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:opera)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/opr\\/|opios/i],describe:function(e){var t={name:\"Opera\"},r=n.default.getFirstMatch(/(?:opr|opios)[\\s/](\\S+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/SamsungBrowser/i],describe:function(e){var t={name:\"Samsung Internet for Android\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:SamsungBrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/Whale/i],describe:function(e){var t={name:\"NAVER Whale Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:whale)[\\s/](\\d+(?:\\.\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/MZBrowser/i],describe:function(e){var t={name:\"MZ Browser\"},r=n.default.getFirstMatch(/(?:MZBrowser)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/focus/i],describe:function(e){var t={name:\"Focus\"},r=n.default.getFirstMatch(/(?:focus)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/swing/i],describe:function(e){var t={name:\"Swing\"},r=n.default.getFirstMatch(/(?:swing)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/coast/i],describe:function(e){var t={name:\"Opera Coast\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:coast)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/yabrowser/i],describe:function(e){var t={name:\"Yandex Browser\"},r=n.default.getFirstMatch(/(?:yabrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/ucbrowser/i],describe:function(e){var t={name:\"UC Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:ucbrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/Maxthon|mxios/i],describe:function(e){var t={name:\"Maxthon\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:Maxthon|mxios)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/epiphany/i],describe:function(e){var t={name:\"Epiphany\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:epiphany)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/puffin/i],describe:function(e){var t={name:\"Puffin\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:puffin)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/sleipnir/i],describe:function(e){var t={name:\"Sleipnir\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:sleipnir)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/k-meleon/i],describe:function(e){var t={name:\"K-Meleon\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:k-meleon)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/micromessenger/i],describe:function(e){var t={name:\"WeChat\"},r=n.default.getFirstMatch(/(?:micromessenger)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/qqbrowser/i],describe:function(e){var t={name:/qqbrowserlite/i.test(e)?\"QQ Browser Lite\":\"QQ Browser\"},r=n.default.getFirstMatch(/(?:qqbrowserlite|qqbrowser)[/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/msie|trident/i],describe:function(e){var t={name:\"Internet Explorer\"},r=n.default.getFirstMatch(/(?:msie |rv:)(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/\\sedg\\//i],describe:function(e){var t={name:\"Microsoft Edge\"},r=n.default.getFirstMatch(/\\sedg\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/edg([ea]|ios)/i],describe:function(e){var t={name:\"Microsoft Edge\"},r=n.default.getSecondMatch(/edg([ea]|ios)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/vivaldi/i],describe:function(e){var t={name:\"Vivaldi\"},r=n.default.getFirstMatch(/vivaldi\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/seamonkey/i],describe:function(e){var t={name:\"SeaMonkey\"},r=n.default.getFirstMatch(/seamonkey\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/sailfish/i],describe:function(e){var t={name:\"Sailfish\"},r=n.default.getFirstMatch(/sailfish\\s?browser\\/(\\d+(\\.\\d+)?)/i,e);return r&&(t.version=r),t}},{test:[/silk/i],describe:function(e){var t={name:\"Amazon Silk\"},r=n.default.getFirstMatch(/silk\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/phantom/i],describe:function(e){var t={name:\"PhantomJS\"},r=n.default.getFirstMatch(/phantomjs\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/slimerjs/i],describe:function(e){var t={name:\"SlimerJS\"},r=n.default.getFirstMatch(/slimerjs\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/blackberry|\\bbb\\d+/i,/rim\\stablet/i],describe:function(e){var t={name:\"BlackBerry\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/blackberry[\\d]+\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/(web|hpw)[o0]s/i],describe:function(e){var t={name:\"WebOS Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/w(?:eb)?[o0]sbrowser\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/bada/i],describe:function(e){var t={name:\"Bada\"},r=n.default.getFirstMatch(/dolfin\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/tizen/i],describe:function(e){var t={name:\"Tizen\"},r=n.default.getFirstMatch(/(?:tizen\\s?)?browser\\/(\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/qupzilla/i],describe:function(e){var t={name:\"QupZilla\"},r=n.default.getFirstMatch(/(?:qupzilla)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/firefox|iceweasel|fxios/i],describe:function(e){var t={name:\"Firefox\"},r=n.default.getFirstMatch(/(?:firefox|iceweasel|fxios)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/chromium/i],describe:function(e){var t={name:\"Chromium\"},r=n.default.getFirstMatch(/(?:chromium)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/chrome|crios|crmo/i],describe:function(e){var t={name:\"Chrome\"},r=n.default.getFirstMatch(/(?:chrome|crios|crmo)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/GSA/i],describe:function(e){var t={name:\"Google Search\"},r=n.default.getFirstMatch(/(?:GSA)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r},describe:function(e){var t={name:\"Android Browser\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/playstation 4/i],describe:function(e){var t={name:\"PlayStation 4\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/safari|applewebkit/i],describe:function(e){var t={name:\"Safari\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/.*/i],describe:function(e){var t=-1!==e.search(\"\\\\(\")?/^(.*)\\/(.*)[ \\t]\\((.*)/:/^(.*)\\/(.*) /;return{name:n.default.getFirstMatch(t,e),version:n.default.getSecondMatch(t,e)}}}];t.default=o,e.exports=t.default},93:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:[/Roku\\/DVP/],describe:function(e){var t=n.default.getFirstMatch(/Roku\\/DVP-(\\d+\\.\\d+)/i,e);return{name:s.OS_MAP.Roku,version:t}}},{test:[/windows phone/i],describe:function(e){var t=n.default.getFirstMatch(/windows phone (?:os)?\\s?(\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.WindowsPhone,version:t}}},{test:[/windows/i],describe:function(e){var t=n.default.getFirstMatch(/Windows ((NT|XP)( \\d\\d?.\\d)?)/i,e),r=n.default.getWindowsVersionName(t);return{name:s.OS_MAP.Windows,version:t,versionName:r}}},{test:[/macintosh/i],describe:function(e){var t=n.default.getFirstMatch(/mac os x (\\d+(\\.?_?\\d+)+)/i,e).replace(/[_\\s]/g,\".\"),r=n.default.getMacOSVersionName(t),i={name:s.OS_MAP.MacOS,version:t};return r&&(i.versionName=r),i}},{test:[/(ipod|iphone|ipad)/i],describe:function(e){var t=n.default.getFirstMatch(/os (\\d+([_\\s]\\d+)*) like mac os x/i,e).replace(/[_\\s]/g,\".\");return{name:s.OS_MAP.iOS,version:t}}},{test:function(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r},describe:function(e){var t=n.default.getFirstMatch(/android[\\s/-](\\d+(\\.\\d+)*)/i,e),r=n.default.getAndroidVersionName(t),i={name:s.OS_MAP.Android,version:t};return r&&(i.versionName=r),i}},{test:[/(web|hpw)[o0]s/i],describe:function(e){var t=n.default.getFirstMatch(/(?:web|hpw)[o0]s\\/(\\d+(\\.\\d+)*)/i,e),r={name:s.OS_MAP.WebOS};return t&&t.length&&(r.version=t),r}},{test:[/blackberry|\\bbb\\d+/i,/rim\\stablet/i],describe:function(e){var t=n.default.getFirstMatch(/rim\\stablet\\sos\\s(\\d+(\\.\\d+)*)/i,e)||n.default.getFirstMatch(/blackberry\\d+\\/(\\d+([_\\s]\\d+)*)/i,e)||n.default.getFirstMatch(/\\bbb(\\d+)/i,e);return{name:s.OS_MAP.BlackBerry,version:t}}},{test:[/bada/i],describe:function(e){var t=n.default.getFirstMatch(/bada\\/(\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.Bada,version:t}}},{test:[/tizen/i],describe:function(e){var t=n.default.getFirstMatch(/tizen[/\\s](\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.Tizen,version:t}}},{test:[/linux/i],describe:function(){return{name:s.OS_MAP.Linux}}},{test:[/CrOS/],describe:function(){return{name:s.OS_MAP.ChromeOS}}},{test:[/PlayStation 4/],describe:function(e){var t=n.default.getFirstMatch(/PlayStation 4[/\\s](\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.PlayStation4,version:t}}}];t.default=o,e.exports=t.default},94:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:[/googlebot/i],describe:function(){return{type:\"bot\",vendor:\"Google\"}}},{test:[/huawei/i],describe:function(e){var t=n.default.getFirstMatch(/(can-l01)/i,e)&&\"Nova\",r={type:s.PLATFORMS_MAP.mobile,vendor:\"Huawei\"};return t&&(r.model=t),r}},{test:[/nexus\\s*(?:7|8|9|10).*/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Nexus\"}}},{test:[/ipad/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Apple\",model:\"iPad\"}}},{test:[/kftt build/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Amazon\",model:\"Kindle Fire HD 7\"}}},{test:[/silk/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Amazon\"}}},{test:[/tablet(?! pc)/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet}}},{test:function(e){var t=e.test(/ipod|iphone/i),r=e.test(/like (ipod|iphone)/i);return t&&!r},describe:function(e){var t=n.default.getFirstMatch(/(ipod|iphone)/i,e);return{type:s.PLATFORMS_MAP.mobile,vendor:\"Apple\",model:t}}},{test:[/nexus\\s*[0-6].*/i,/galaxy nexus/i],describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"Nexus\"}}},{test:[/[^-]mobi/i],describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"blackberry\"===e.getBrowserName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"BlackBerry\"}}},{test:function(e){return\"bada\"===e.getBrowserName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"windows phone\"===e.getBrowserName()},describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"Microsoft\"}}},{test:function(e){var t=Number(String(e.getOSVersion()).split(\".\")[0]);return\"android\"===e.getOSName(!0)&&t>=3},describe:function(){return{type:s.PLATFORMS_MAP.tablet}}},{test:function(e){return\"android\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"macos\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop,vendor:\"Apple\"}}},{test:function(e){return\"windows\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop}}},{test:function(e){return\"linux\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop}}},{test:function(e){return\"playstation 4\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.tv}}},{test:function(e){return\"roku\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.tv}}}];t.default=o,e.exports=t.default},95:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:function(e){return\"microsoft edge\"===e.getBrowserName(!0)},describe:function(e){if(/\\sedg\\//i.test(e))return{name:s.ENGINE_MAP.Blink};var t=n.default.getFirstMatch(/edge\\/(\\d+(\\.?_?\\d+)+)/i,e);return{name:s.ENGINE_MAP.EdgeHTML,version:t}}},{test:[/trident/i],describe:function(e){var t={name:s.ENGINE_MAP.Trident},r=n.default.getFirstMatch(/trident\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){return e.test(/presto/i)},describe:function(e){var t={name:s.ENGINE_MAP.Presto},r=n.default.getFirstMatch(/presto\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){var t=e.test(/gecko/i),r=e.test(/like gecko/i);return t&&!r},describe:function(e){var t={name:s.ENGINE_MAP.Gecko},r=n.default.getFirstMatch(/gecko\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/(apple)?webkit\\/537\\.36/i],describe:function(){return{name:s.ENGINE_MAP.Blink}}},{test:[/(apple)?webkit/i],describe:function(e){var t={name:s.ENGINE_MAP.WebKit},r=n.default.getFirstMatch(/webkit\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}}];t.default=o,e.exports=t.default}})}));","/*!\n * currentExecutingScript\n * Get the currently executing script, regardless of its source/trigger/synchronicity. Similar to HTML5's `document.currentScript` but arguably much more useful!\n * Copyright (c) 2015 James M. Greene\n * Licensed MIT\n * https://github.com/JamesMGreene/currentExecutingScript\n * v0.1.3\n */\n(function(root, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([], factory);\n  } else if (typeof exports === \"object\") {\n    // CommonJS-like environments that support `module.exports`,\n    // like Node.js. Does not work with strict CommonJS!\n    module.exports = factory();\n  } else {\n    // Browser globals (`root` is `window`)\n    root.currentExecutingScript = factory();\n  }\n}(\n  // Current context/scope\n  this || window,\n\n  // Factory function to return the export\n  function() {\n\nvar scriptReadyRegex = /^(interactive|loaded|complete)$/;\n\n// This page's URL (minus query string and fragment identifer hash, if any)\nvar fullPageUrl = !!window.location ? window.location.href : null;\nvar pageUrl = fullPageUrl ? fullPageUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\") || null : null;\n\n// Live NodeList collection\nvar scripts = document.getElementsByTagName(\"script\");\n\n// Check if the browser supports the `readyState` property on `script` elements\nvar supportsScriptReadyState = \"readyState\" in (scripts[0] || document.createElement(\"script\"));\n\n// Lousy browser detection for [not] Opera\nvar isNotOpera = !window.opera || window.opera.toString() !== \"[object Opera]\";\n\n// Detect if `document.currentScript` is supported\nvar hasNativeCurrentScriptAccessor = \"currentScript\" in document;\n\nvar originalStackDepthConfig;\n// Detect if the V8 Error Stack Trace API is supported\nif (\"stackTraceLimit\" in Error && Error.stackTraceLimit !== Infinity) {\n  originalStackDepthConfig = Error.stackTraceLimit;\n  Error.stackTraceLimit = Infinity;\n}\n\n\n// In some browsers (e.g. Chrome), you can get the current stack from an Error\n// object instance without needing to throw it. Avoiding an unnecessary\n// use of `throw` saves time and performance.\nvar hasStackBeforeThrowing = false,\n    hasStackAfterThrowing = false;\n(function() {\n  try {\n    var err = new Error();\n    hasStackBeforeThrowing = typeof err.stack === \"string\" && !!err.stack;\n    throw err;\n  }\n  catch (thrownErr) {\n    hasStackAfterThrowing = typeof thrownErr.stack === \"string\" && !!thrownErr.stack;\n  }\n})();\n\n\n// Normalize whitespace within a string\nfunction normalizeWhitespace(str) {\n  return str ? str.replace(/^\\s+$|\\s+$/g, \"\").replace(/\\s\\s+/g, \" \") : \"\";\n}\n\n// Get script object based on the `src` URL\nfunction getScriptFromUrl(url, eligibleScripts) {\n  var i,\n      script = null;\n\n  eligibleScripts = eligibleScripts || scripts;\n\n  if (typeof url === \"string\" && url) {\n    for (i = eligibleScripts.length; i--; ) {\n      if (eligibleScripts[i].src === url) {\n        // NOTE: Could check if the same script URL is used by more than one `script` element\n        // here... but let's not. That would yield less useful results in \"loose\" detection. ;)\n        script = eligibleScripts[i];\n        break;\n      }\n    }\n  }\n  return script;\n}\n\n// Get script object based on the caller function's source code body (text)\nfunction getInlineScriptFromCallerSource(callerFnSource, eligibleScripts) {\n  var i, inlineScriptText,\n      script = null,\n      callerSourceText = normalizeWhitespace(callerFnSource);\n\n  eligibleScripts = eligibleScripts || scripts;\n\n  if (callerFnSource && callerSourceText) {\n    for (i = eligibleScripts.length; i--; ) {\n      // Only look at inline scripts\n      if (!eligibleScripts[i].hasAttribute(\"src\")) {\n        inlineScriptText = normalizeWhitespace(eligibleScripts[i].text);\n        if (inlineScriptText.indexOf(callerSourceText) !== -1) {\n          // If more than one match is found, don't return any\n          if (script) {\n            script = null;\n            break;\n          }\n          script = eligibleScripts[i];\n        }\n      }\n    }\n  }\n\n  return script;\n}\n\n// If there is only a single inline script on the page, return it; otherwise `null`\nfunction getSoleInlineScript(eligibleScripts) {\n  var i, len,\n      script = null;\n  eligibleScripts = eligibleScripts || scripts;\n  for (i = 0, len = eligibleScripts.length; i < len; i++) {\n    if (!eligibleScripts[i].hasAttribute(\"src\")) {\n      if (script) {\n        script = null;\n        break;\n      }\n      script = eligibleScripts[i];\n    }\n  }\n  return script;\n}\n\n// Get the currently executing script URL from an Error stack trace\nfunction getScriptUrlFromStack(stack, skipStackDepth) {\n  var matches, remainingStack,\n      url = null,\n      ignoreMessage = typeof skipStackDepth === \"number\";\n  skipStackDepth = ignoreMessage ? Math.round(skipStackDepth) : 0;\n  if (typeof stack === \"string\" && stack) {\n    if (ignoreMessage) {\n      matches = stack.match(/(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n    }\n    else {\n      matches = stack.match(/^(?:|[^:@]*@|.+\\)@(?=data:text\\/javascript|blob|http[s]?|file)|.+?\\s+(?: at |@)(?:[^:\\(]+ )*[\\(]?)(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n\n      if (!(matches && matches[1])) {\n        matches = stack.match(/\\)@(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n      }\n    }\n\n    if (matches && matches[1]) {\n      if (skipStackDepth > 0) {\n        remainingStack = stack.slice(stack.indexOf(matches[0]) + matches[0].length);\n        url = getScriptUrlFromStack(remainingStack, (skipStackDepth - 1));\n      }\n      else {\n        url = matches[1];\n      }\n    }\n\n    // TODO: Handle more edge cases!\n    // Fixes #1\n    // See https://github.com/JamesMGreene/currentExecutingScript/issues/1\n\n    // ???\n\n  }\n  return url;\n}\n\n\n// Get the farthest currently executing (i.e. yes, EXECUTING) `script` DOM\n// element for the caller function, regardless of whether it is that `script`\n// DOM element is currently being evaluated for the first time. The farthest\n// currently executing `script` DOM element would typically be considered the\n// originator of the current execution stack.\nfunction _farthestExecutingScript() {\n  /*jshint noarg:false */\n\n  // TODO: Implement!\n  // Fixes #3\n  // See https://github.com/JamesMGreene/currentExecutingScript/issues/3\n  return null;\n\n/*\n  // Yes, this IS possible, i.e. if a script removes other scripts (or itself)\n  if (scripts.length === 0) {\n    return null;\n  }\n\n  // Guaranteed accurate in IE 6-10.\n  // Not accurate/supported in any other browsers.\n  if (isNotOpera && supportsScriptReadyState) {\n    for (var i = scripts.length; i--; ) {\n      if (scripts[i].readyState === \"interactive\") {\n        return scripts[i];\n      }\n    }\n  }\n\n  var stack,\n      e = new Error();\n  if (hasStackBeforeThrowing) {\n    stack = e.stack;\n  }\n  if (!stack && hasStackAfterThrowing) {\n    try {\n      throw e;\n    }\n    catch (err) {\n      // NOTE: Cannot use `err.sourceURL` or `err.fileName` as they will always be THIS script\n      stack = err.stack;\n    }\n  }\n  if (stack) {\n    var url = getScriptUrlFromStack(stack, skipStackDepth);\n    var script = getScriptFromUrl(url, scripts );\n    if (!script && pageUrl && url === pageUrl) {\n      // Try to find the correct inline script by searching through\n      // inline scripts' text content for the caller function's source\n      // code to be present. If the caller function's source code is\n      // not available, see if there is only one inline script element\n      // in the DOM and return that (even though it may be wrong)\n\n      // TODO: Implement!\n      // Fixes #4 in part\n      // See https://github.com/JamesMGreene/currentExecutingScript/issues/4\n\n      var callerFn = _farthestExecutingScript.caller || null,\n          callerFnStack = [],\n          callerFnSource = null;\n\n      while (callerFn) {\n        callerFnStack.push(callerFn);\n        callerFn = callerFn.caller || null;\n      }\n      callerFn = callerFnStack.slice(-1)[0];\n      callerFnSource = callerFn ? (\"\" + callerFn) : null;\n\n\n      if (callerFnSource) {\n        script = getInlineScriptFromCallerSource(callerFnSource);\n      }\n      else {\n        // NOTE: This is a loose assumption that could be inaccurate!\n        //\n        // Inaccuracies:\n        //  - If the inline script that initiated the call was also removed from the DOM.\n        //  - If the call was initiated by an element's inline event handler,\n        //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n        script = getSoleInlineScript();\n      }\n    }\n    return script;\n  }\n\n  // NOTE: This is a loose assumption that could be inaccurate!\n  //\n  // Inaccuracies:\n  //  - If a script is created dynamically and appended to some position\n  //    other than the very end of the document.\n  //  - If multiple scripts are created dynamically and all appended to the\n  //    same position within the document (and do not have their `async` attributes\n  //    set to `false`, at least in browsers that support async script evaluation.\n  //    other than the very end of the document.\n  //  - If any scripts are added with the `async` attribute set to `true` in a browser\n  //    that supports it.\n  //  - May get confused by `script` elements within `svg` elements\n  return scripts[scripts.length - 1] || null;\n*/\n}\n\n\n// Get the originating currently executing (i.e. yes, EXECUTING) `script` DOM\n// element or attribute node (e.g. `onclick`) for the caller function,\n// regardless of whether it is that `script` DOM element is currently being\n// evaluated for the first time. The originating currently executing `script`\n// DOM element [or attribute node] is the originator of the current execution stack.\nfunction _originatingExecutingScript() {\n  // TODO: Implement!\n  // Fixes #2\n  // See https://github.com/JamesMGreene/currentExecutingScript/issues/2\n  return null;\n}\n\n// Get the nearest currently executing (i.e. yes, EXECUTING) `script` DOM\n// element for the caller function, regardless of whether it is that `script`\n// DOM element is currently being evaluated for the first time.\nfunction _nearestExecutingScript() {\n  /*jshint noarg:false */\n\n  // Yes, this IS possible, i.e. if a script removes other scripts (or itself)\n  if (scripts.length === 0) {\n    return null;\n  }\n\n  var i, e, stack, url, script,\n      eligibleScripts = [],\n      skipStackDepth = _nearestExecutingScript.skipStackDepth || 1,\n\n      // TODO: Implement!\n      // Fixes #4 in part\n      // See https://github.com/JamesMGreene/currentExecutingScript/issues/4\n      callerFnSource = null;  //(\"\" + (_nearestExecutingScript.caller || \"\")) || null;\n\n  // This part will only help in IE 6-10.\n  for (i = 0; i < scripts.length; i++) {\n    if (isNotOpera && supportsScriptReadyState) {\n      if (scriptReadyRegex.test(scripts[i].readyState)) {\n        eligibleScripts.push(scripts[i]);\n      }\n    }\n    else {\n      eligibleScripts.push(scripts[i]);\n    }\n  }\n\n  e = new Error();\n  if (hasStackBeforeThrowing) {\n    stack = e.stack;\n  }\n  if (!stack && hasStackAfterThrowing) {\n    try {\n      throw e;\n    }\n    catch (err) {\n      // NOTE: Cannot use `err.sourceURL` or `err.fileName` as they will always be THIS script\n      stack = err.stack;\n    }\n  }\n\n  if (stack) {\n    url = getScriptUrlFromStack(stack, skipStackDepth);\n    script = getScriptFromUrl(url, eligibleScripts);\n\n    if (!script && pageUrl && url === pageUrl) {\n      // Try to find the correct inline script by searching through\n      // inline scripts' text content for the caller function's source\n      // code to be present.\n      if (callerFnSource) {\n        script = getInlineScriptFromCallerSource(callerFnSource, eligibleScripts);\n      }\n      // If the caller function's source code is not available, see if\n      // there is only one inline script element in the DOM and return\n      // that (even though it may be wrong)...\n      else {\n        // NOTE: This is a loose assumption that could be inaccurate!\n        //\n        // Inaccuracies:\n        //  - If the inline script that initiated the call was also removed from the DOM.\n        //  - If the call was initiated by an element's inline event handler,\n        //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n        script = getSoleInlineScript(eligibleScripts);\n      }\n    }\n  }\n\n  //\n  // Welcome to the Island of Inaccurate Assumptions!\n  // NOTE: ALL of the following are loose assumptions that could be inaccurate!\n  //\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If the inline script that initiated the call was also removed from the DOM.\n    //  - If the call was initiated by an element's inline event handler,\n    //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n    if (eligibleScripts.length === 1) {\n      script = eligibleScripts[0];\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    if (hasNativeCurrentScriptAccessor) {\n      script = document.currentScript;\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    if (isNotOpera && supportsScriptReadyState) {\n      for (i = eligibleScripts.length; i--; ) {\n        if (eligibleScripts[i].readyState === \"interactive\") {\n          script = eligibleScripts[i];\n          break;\n        }\n      }\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If a script is created dynamically and appended to some position\n    //    other than the very end of the document.\n    //  - If multiple scripts are created dynamically and all appended to the\n    //    same position within the document (and do not have their `async` attributes\n    //    set to `false`, at least in browsers that support async script evaluation.\n    //    other than the very end of the document.\n    //  - If any scripts are added with the `async` attribute set to `true` in a browser\n    //    that supports it.\n    //  - May get confused by `script` elements within `svg` elements\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    //    ```\n    script = eligibleScripts[eligibleScripts.length - 1] || null;\n  }\n\n  return script;\n}\n\n// Default stack depth to skip over when analyzing call stack frames\n_nearestExecutingScript.skipStackDepth = 1;\n\n\n\n    //\n    // Export the API\n    //\n    var currentExecutingScript    = _nearestExecutingScript;      // default\n    currentExecutingScript.near   = _nearestExecutingScript;\n    currentExecutingScript.far    = _farthestExecutingScript;\n    currentExecutingScript.origin = _originatingExecutingScript;\n\n\n    // Just return a value to define the module export.\n    // This example returns an object, but the module\n    // can return a function as the exported value.\n    return currentExecutingScript;\n  })\n);\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function errorListener(err) {\n      emitter.removeListener(name, resolver);\n      reject(err);\n    }\n\n    function resolver() {\n      if (typeof emitter.removeListener === 'function') {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n\n    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\n    if (name !== 'error') {\n      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\n    }\n  });\n}\n\nfunction addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n  if (typeof emitter.on === 'function') {\n    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);\n  }\n}\n\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n  if (typeof emitter.on === 'function') {\n    if (flags.once) {\n      emitter.once(name, listener);\n    } else {\n      emitter.on(name, listener);\n    }\n  } else if (typeof emitter.addEventListener === 'function') {\n    // EventTarget does not have `error` event semantics like Node\n    // EventEmitters, we do not listen for `error` events here.\n    emitter.addEventListener(name, function wrapListener(arg) {\n      // IE does not have builtin `{ once: true }` support so we\n      // have to do it manually.\n      if (flags.once) {\n        emitter.removeEventListener(name, wrapListener);\n      }\n      listener(arg);\n    });\n  } else {\n    throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n  }\n}\n","/**\n * [js-md5]{@link https://github.com/emn178/js-md5}\n *\n * @namespace md5\n * @version 0.7.3\n * @author Chen, Yi-Cyuan [emn178@gmail.com]\n * @copyright Chen, Yi-Cyuan 2014-2017\n * @license MIT\n */\n(function () {\n  'use strict';\n\n  var ERROR = 'input is invalid type';\n  var WINDOW = typeof window === 'object';\n  var root = WINDOW ? window : {};\n  if (root.JS_MD5_NO_WINDOW) {\n    WINDOW = false;\n  }\n  var WEB_WORKER = !WINDOW && typeof self === 'object';\n  var NODE_JS = !root.JS_MD5_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;\n  if (NODE_JS) {\n    root = global;\n  } else if (WEB_WORKER) {\n    root = self;\n  }\n  var COMMON_JS = !root.JS_MD5_NO_COMMON_JS && typeof module === 'object' && module.exports;\n  var AMD = typeof define === 'function' && define.amd;\n  var ARRAY_BUFFER = !root.JS_MD5_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';\n  var HEX_CHARS = '0123456789abcdef'.split('');\n  var EXTRA = [128, 32768, 8388608, -2147483648];\n  var SHIFT = [0, 8, 16, 24];\n  var OUTPUT_TYPES = ['hex', 'array', 'digest', 'buffer', 'arrayBuffer', 'base64'];\n  var BASE64_ENCODE_CHAR = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');\n\n  var blocks = [], buffer8;\n  if (ARRAY_BUFFER) {\n    var buffer = new ArrayBuffer(68);\n    buffer8 = new Uint8Array(buffer);\n    blocks = new Uint32Array(buffer);\n  }\n\n  if (root.JS_MD5_NO_NODE_JS || !Array.isArray) {\n    Array.isArray = function (obj) {\n      return Object.prototype.toString.call(obj) === '[object Array]';\n    };\n  }\n\n  if (ARRAY_BUFFER && (root.JS_MD5_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {\n    ArrayBuffer.isView = function (obj) {\n      return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;\n    };\n  }\n\n  /**\n   * @method hex\n   * @memberof md5\n   * @description Output hash as hex string\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {String} Hex string\n   * @example\n   * md5.hex('The quick brown fox jumps over the lazy dog');\n   * // equal to\n   * md5('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method digest\n   * @memberof md5\n   * @description Output hash as bytes array\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Array} Bytes array\n   * @example\n   * md5.digest('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method array\n   * @memberof md5\n   * @description Output hash as bytes array\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Array} Bytes array\n   * @example\n   * md5.array('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method arrayBuffer\n   * @memberof md5\n   * @description Output hash as ArrayBuffer\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @example\n   * md5.arrayBuffer('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method buffer\n   * @deprecated This maybe confuse with Buffer in node.js. Please use arrayBuffer instead.\n   * @memberof md5\n   * @description Output hash as ArrayBuffer\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @example\n   * md5.buffer('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method base64\n   * @memberof md5\n   * @description Output hash as base64 string\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {String} base64 string\n   * @example\n   * md5.base64('The quick brown fox jumps over the lazy dog');\n   */\n  var createOutputMethod = function (outputType) {\n    return function (message) {\n      return new Md5(true).update(message)[outputType]();\n    };\n  };\n\n  /**\n   * @method create\n   * @memberof md5\n   * @description Create Md5 object\n   * @returns {Md5} Md5 object.\n   * @example\n   * var hash = md5.create();\n   */\n  /**\n   * @method update\n   * @memberof md5\n   * @description Create and update Md5 object\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Md5} Md5 object.\n   * @example\n   * var hash = md5.update('The quick brown fox jumps over the lazy dog');\n   * // equal to\n   * var hash = md5.create();\n   * hash.update('The quick brown fox jumps over the lazy dog');\n   */\n  var createMethod = function () {\n    var method = createOutputMethod('hex');\n    if (NODE_JS) {\n      method = nodeWrap(method);\n    }\n    method.create = function () {\n      return new Md5();\n    };\n    method.update = function (message) {\n      return method.create().update(message);\n    };\n    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {\n      var type = OUTPUT_TYPES[i];\n      method[type] = createOutputMethod(type);\n    }\n    return method;\n  };\n\n  var nodeWrap = function (method) {\n    var crypto = eval(\"require('crypto')\");\n    var Buffer = eval(\"require('buffer').Buffer\");\n    var nodeMethod = function (message) {\n      if (typeof message === 'string') {\n        return crypto.createHash('md5').update(message, 'utf8').digest('hex');\n      } else {\n        if (message === null || message === undefined) {\n          throw ERROR;\n        } else if (message.constructor === ArrayBuffer) {\n          message = new Uint8Array(message);\n        }\n      }\n      if (Array.isArray(message) || ArrayBuffer.isView(message) ||\n        message.constructor === Buffer) {\n        return crypto.createHash('md5').update(new Buffer(message)).digest('hex');\n      } else {\n        return method(message);\n      }\n    };\n    return nodeMethod;\n  };\n\n  /**\n   * Md5 class\n   * @class Md5\n   * @description This is internal class.\n   * @see {@link md5.create}\n   */\n  function Md5(sharedMemory) {\n    if (sharedMemory) {\n      blocks[0] = blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n      blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n      blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n      blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n      this.blocks = blocks;\n      this.buffer8 = buffer8;\n    } else {\n      if (ARRAY_BUFFER) {\n        var buffer = new ArrayBuffer(68);\n        this.buffer8 = new Uint8Array(buffer);\n        this.blocks = new Uint32Array(buffer);\n      } else {\n        this.blocks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n      }\n    }\n    this.h0 = this.h1 = this.h2 = this.h3 = this.start = this.bytes = this.hBytes = 0;\n    this.finalized = this.hashed = false;\n    this.first = true;\n  }\n\n  /**\n   * @method update\n   * @memberof Md5\n   * @instance\n   * @description Update hash\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Md5} Md5 object.\n   * @see {@link md5.update}\n   */\n  Md5.prototype.update = function (message) {\n    if (this.finalized) {\n      return;\n    }\n\n    var notString, type = typeof message;\n    if (type !== 'string') {\n      if (type === 'object') {\n        if (message === null) {\n          throw ERROR;\n        } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {\n          message = new Uint8Array(message);\n        } else if (!Array.isArray(message)) {\n          if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {\n            throw ERROR;\n          }\n        }\n      } else {\n        throw ERROR;\n      }\n      notString = true;\n    }\n    var code, index = 0, i, length = message.length, blocks = this.blocks;\n    var buffer8 = this.buffer8;\n\n    while (index < length) {\n      if (this.hashed) {\n        this.hashed = false;\n        blocks[0] = blocks[16];\n        blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n        blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n        blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n        blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n      }\n\n      if (notString) {\n        if (ARRAY_BUFFER) {\n          for (i = this.start; index < length && i < 64; ++index) {\n            buffer8[i++] = message[index];\n          }\n        } else {\n          for (i = this.start; index < length && i < 64; ++index) {\n            blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];\n          }\n        }\n      } else {\n        if (ARRAY_BUFFER) {\n          for (i = this.start; index < length && i < 64; ++index) {\n            code = message.charCodeAt(index);\n            if (code < 0x80) {\n              buffer8[i++] = code;\n            } else if (code < 0x800) {\n              buffer8[i++] = 0xc0 | (code >> 6);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            } else if (code < 0xd800 || code >= 0xe000) {\n              buffer8[i++] = 0xe0 | (code >> 12);\n              buffer8[i++] = 0x80 | ((code >> 6) & 0x3f);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            } else {\n              code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\n              buffer8[i++] = 0xf0 | (code >> 18);\n              buffer8[i++] = 0x80 | ((code >> 12) & 0x3f);\n              buffer8[i++] = 0x80 | ((code >> 6) & 0x3f);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            }\n          }\n        } else {\n          for (i = this.start; index < length && i < 64; ++index) {\n            code = message.charCodeAt(index);\n            if (code < 0x80) {\n              blocks[i >> 2] |= code << SHIFT[i++ & 3];\n            } else if (code < 0x800) {\n              blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            } else if (code < 0xd800 || code >= 0xe000) {\n              blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            } else {\n              code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\n              blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            }\n          }\n        }\n      }\n      this.lastByteIndex = i;\n      this.bytes += i - this.start;\n      if (i >= 64) {\n        this.start = i - 64;\n        this.hash();\n        this.hashed = true;\n      } else {\n        this.start = i;\n      }\n    }\n    if (this.bytes > 4294967295) {\n      this.hBytes += this.bytes / 4294967296 << 0;\n      this.bytes = this.bytes % 4294967296;\n    }\n    return this;\n  };\n\n  Md5.prototype.finalize = function () {\n    if (this.finalized) {\n      return;\n    }\n    this.finalized = true;\n    var blocks = this.blocks, i = this.lastByteIndex;\n    blocks[i >> 2] |= EXTRA[i & 3];\n    if (i >= 56) {\n      if (!this.hashed) {\n        this.hash();\n      }\n      blocks[0] = blocks[16];\n      blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n      blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n      blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n      blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n    }\n    blocks[14] = this.bytes << 3;\n    blocks[15] = this.hBytes << 3 | this.bytes >>> 29;\n    this.hash();\n  };\n\n  Md5.prototype.hash = function () {\n    var a, b, c, d, bc, da, blocks = this.blocks;\n\n    if (this.first) {\n      a = blocks[0] - 680876937;\n      a = (a << 7 | a >>> 25) - 271733879 << 0;\n      d = (-1732584194 ^ a & 2004318071) + blocks[1] - 117830708;\n      d = (d << 12 | d >>> 20) + a << 0;\n      c = (-271733879 ^ (d & (a ^ -271733879))) + blocks[2] - 1126478375;\n      c = (c << 17 | c >>> 15) + d << 0;\n      b = (a ^ (c & (d ^ a))) + blocks[3] - 1316259209;\n      b = (b << 22 | b >>> 10) + c << 0;\n    } else {\n      a = this.h0;\n      b = this.h1;\n      c = this.h2;\n      d = this.h3;\n      a += (d ^ (b & (c ^ d))) + blocks[0] - 680876936;\n      a = (a << 7 | a >>> 25) + b << 0;\n      d += (c ^ (a & (b ^ c))) + blocks[1] - 389564586;\n      d = (d << 12 | d >>> 20) + a << 0;\n      c += (b ^ (d & (a ^ b))) + blocks[2] + 606105819;\n      c = (c << 17 | c >>> 15) + d << 0;\n      b += (a ^ (c & (d ^ a))) + blocks[3] - 1044525330;\n      b = (b << 22 | b >>> 10) + c << 0;\n    }\n\n    a += (d ^ (b & (c ^ d))) + blocks[4] - 176418897;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[5] + 1200080426;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[6] - 1473231341;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[7] - 45705983;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (d ^ (b & (c ^ d))) + blocks[8] + 1770035416;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[9] - 1958414417;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[10] - 42063;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[11] - 1990404162;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (d ^ (b & (c ^ d))) + blocks[12] + 1804603682;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[13] - 40341101;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[14] - 1502002290;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[15] + 1236535329;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[1] - 165796510;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[6] - 1069501632;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[11] + 643717713;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[0] - 373897302;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[5] - 701558691;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[10] + 38016083;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[15] - 660478335;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[4] - 405537848;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[9] + 568446438;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[14] - 1019803690;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[3] - 187363961;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[8] + 1163531501;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[13] - 1444681467;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[2] - 51403784;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[7] + 1735328473;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[12] - 1926607734;\n    b = (b << 20 | b >>> 12) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[5] - 378558;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[8] - 2022574463;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[11] + 1839030562;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[14] - 35309556;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[1] - 1530992060;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[4] + 1272893353;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[7] - 155497632;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[10] - 1094730640;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[13] + 681279174;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[0] - 358537222;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[3] - 722521979;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[6] + 76029189;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[9] - 640364487;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[12] - 421815835;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[15] + 530742520;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[2] - 995338651;\n    b = (b << 23 | b >>> 9) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[0] - 198630844;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[7] + 1126891415;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[14] - 1416354905;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[5] - 57434055;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[12] + 1700485571;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[3] - 1894986606;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[10] - 1051523;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[1] - 2054922799;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[8] + 1873313359;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[15] - 30611744;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[6] - 1560198380;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[13] + 1309151649;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[4] - 145523070;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[11] - 1120210379;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[2] + 718787259;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[9] - 343485551;\n    b = (b << 21 | b >>> 11) + c << 0;\n\n    if (this.first) {\n      this.h0 = a + 1732584193 << 0;\n      this.h1 = b - 271733879 << 0;\n      this.h2 = c - 1732584194 << 0;\n      this.h3 = d + 271733878 << 0;\n      this.first = false;\n    } else {\n      this.h0 = this.h0 + a << 0;\n      this.h1 = this.h1 + b << 0;\n      this.h2 = this.h2 + c << 0;\n      this.h3 = this.h3 + d << 0;\n    }\n  };\n\n  /**\n   * @method hex\n   * @memberof Md5\n   * @instance\n   * @description Output hash as hex string\n   * @returns {String} Hex string\n   * @see {@link md5.hex}\n   * @example\n   * hash.hex();\n   */\n  Md5.prototype.hex = function () {\n    this.finalize();\n\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3;\n\n    return HEX_CHARS[(h0 >> 4) & 0x0F] + HEX_CHARS[h0 & 0x0F] +\n      HEX_CHARS[(h0 >> 12) & 0x0F] + HEX_CHARS[(h0 >> 8) & 0x0F] +\n      HEX_CHARS[(h0 >> 20) & 0x0F] + HEX_CHARS[(h0 >> 16) & 0x0F] +\n      HEX_CHARS[(h0 >> 28) & 0x0F] + HEX_CHARS[(h0 >> 24) & 0x0F] +\n      HEX_CHARS[(h1 >> 4) & 0x0F] + HEX_CHARS[h1 & 0x0F] +\n      HEX_CHARS[(h1 >> 12) & 0x0F] + HEX_CHARS[(h1 >> 8) & 0x0F] +\n      HEX_CHARS[(h1 >> 20) & 0x0F] + HEX_CHARS[(h1 >> 16) & 0x0F] +\n      HEX_CHARS[(h1 >> 28) & 0x0F] + HEX_CHARS[(h1 >> 24) & 0x0F] +\n      HEX_CHARS[(h2 >> 4) & 0x0F] + HEX_CHARS[h2 & 0x0F] +\n      HEX_CHARS[(h2 >> 12) & 0x0F] + HEX_CHARS[(h2 >> 8) & 0x0F] +\n      HEX_CHARS[(h2 >> 20) & 0x0F] + HEX_CHARS[(h2 >> 16) & 0x0F] +\n      HEX_CHARS[(h2 >> 28) & 0x0F] + HEX_CHARS[(h2 >> 24) & 0x0F] +\n      HEX_CHARS[(h3 >> 4) & 0x0F] + HEX_CHARS[h3 & 0x0F] +\n      HEX_CHARS[(h3 >> 12) & 0x0F] + HEX_CHARS[(h3 >> 8) & 0x0F] +\n      HEX_CHARS[(h3 >> 20) & 0x0F] + HEX_CHARS[(h3 >> 16) & 0x0F] +\n      HEX_CHARS[(h3 >> 28) & 0x0F] + HEX_CHARS[(h3 >> 24) & 0x0F];\n  };\n\n  /**\n   * @method toString\n   * @memberof Md5\n   * @instance\n   * @description Output hash as hex string\n   * @returns {String} Hex string\n   * @see {@link md5.hex}\n   * @example\n   * hash.toString();\n   */\n  Md5.prototype.toString = Md5.prototype.hex;\n\n  /**\n   * @method digest\n   * @memberof Md5\n   * @instance\n   * @description Output hash as bytes array\n   * @returns {Array} Bytes array\n   * @see {@link md5.digest}\n   * @example\n   * hash.digest();\n   */\n  Md5.prototype.digest = function () {\n    this.finalize();\n\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3;\n    return [\n      h0 & 0xFF, (h0 >> 8) & 0xFF, (h0 >> 16) & 0xFF, (h0 >> 24) & 0xFF,\n      h1 & 0xFF, (h1 >> 8) & 0xFF, (h1 >> 16) & 0xFF, (h1 >> 24) & 0xFF,\n      h2 & 0xFF, (h2 >> 8) & 0xFF, (h2 >> 16) & 0xFF, (h2 >> 24) & 0xFF,\n      h3 & 0xFF, (h3 >> 8) & 0xFF, (h3 >> 16) & 0xFF, (h3 >> 24) & 0xFF\n    ];\n  };\n\n  /**\n   * @method array\n   * @memberof Md5\n   * @instance\n   * @description Output hash as bytes array\n   * @returns {Array} Bytes array\n   * @see {@link md5.array}\n   * @example\n   * hash.array();\n   */\n  Md5.prototype.array = Md5.prototype.digest;\n\n  /**\n   * @method arrayBuffer\n   * @memberof Md5\n   * @instance\n   * @description Output hash as ArrayBuffer\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @see {@link md5.arrayBuffer}\n   * @example\n   * hash.arrayBuffer();\n   */\n  Md5.prototype.arrayBuffer = function () {\n    this.finalize();\n\n    var buffer = new ArrayBuffer(16);\n    var blocks = new Uint32Array(buffer);\n    blocks[0] = this.h0;\n    blocks[1] = this.h1;\n    blocks[2] = this.h2;\n    blocks[3] = this.h3;\n    return buffer;\n  };\n\n  /**\n   * @method buffer\n   * @deprecated This maybe confuse with Buffer in node.js. Please use arrayBuffer instead.\n   * @memberof Md5\n   * @instance\n   * @description Output hash as ArrayBuffer\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @see {@link md5.buffer}\n   * @example\n   * hash.buffer();\n   */\n  Md5.prototype.buffer = Md5.prototype.arrayBuffer;\n\n  /**\n   * @method base64\n   * @memberof Md5\n   * @instance\n   * @description Output hash as base64 string\n   * @returns {String} base64 string\n   * @see {@link md5.base64}\n   * @example\n   * hash.base64();\n   */\n  Md5.prototype.base64 = function () {\n    var v1, v2, v3, base64Str = '', bytes = this.array();\n    for (var i = 0; i < 15;) {\n      v1 = bytes[i++];\n      v2 = bytes[i++];\n      v3 = bytes[i++];\n      base64Str += BASE64_ENCODE_CHAR[v1 >>> 2] +\n        BASE64_ENCODE_CHAR[(v1 << 4 | v2 >>> 4) & 63] +\n        BASE64_ENCODE_CHAR[(v2 << 2 | v3 >>> 6) & 63] +\n        BASE64_ENCODE_CHAR[v3 & 63];\n    }\n    v1 = bytes[i];\n    base64Str += BASE64_ENCODE_CHAR[v1 >>> 2] +\n      BASE64_ENCODE_CHAR[(v1 << 4) & 63] +\n      '==';\n    return base64Str;\n  };\n\n  var exports = createMethod();\n\n  if (COMMON_JS) {\n    module.exports = exports;\n  } else {\n    /**\n     * @method md5\b\n     * @description Md5 hash function, export to global in browsers.\n     * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n     * @returns {String} md5 hashes\n     * @example\n     * md5(''); // d41d8cd98f00b204e9800998ecf8427e\n     * md5('The quick brown fox jumps over the lazy dog'); // 9e107d9d372bb6826bd81d3542a419d6\n     * md5('The quick brown fox jumps over the lazy dog.'); // e4d909c290d0fb1ca068ffaddf22cbd0\n     *\n     * // It also supports UTF-8 encoding\n     * md5('中文'); // a7bac2239fcdcb3a067903d8077c4a07\n     *\n     * // It also supports byte `Array`, `Uint8Array`, `ArrayBuffer`\n     * md5([]); // d41d8cd98f00b204e9800998ecf8427e\n     * md5(new Uint8Array([])); // d41d8cd98f00b204e9800998ecf8427e\n     */\n    root.md5 = exports;\n    if (AMD) {\n      define(function () {\n        return exports;\n      });\n    }\n  }\n})();\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match `RegExp` flags from their coerced string values. */\nvar reFlags = /\\w*$/;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values supported by `_.clone`. */\nvar cloneableTags = {};\ncloneableTags[argsTag] = cloneableTags[arrayTag] =\ncloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\ncloneableTags[boolTag] = cloneableTags[dateTag] =\ncloneableTags[float32Tag] = cloneableTags[float64Tag] =\ncloneableTags[int8Tag] = cloneableTags[int16Tag] =\ncloneableTags[int32Tag] = cloneableTags[mapTag] =\ncloneableTags[numberTag] = cloneableTags[objectTag] =\ncloneableTags[regexpTag] = cloneableTags[setTag] =\ncloneableTags[stringTag] = cloneableTags[symbolTag] =\ncloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\ncloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\ncloneableTags[errorTag] = cloneableTags[funcTag] =\ncloneableTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/**\n * Adds the key-value `pair` to `map`.\n *\n * @private\n * @param {Object} map The map to modify.\n * @param {Array} pair The key-value pair to add.\n * @returns {Object} Returns `map`.\n */\nfunction addMapEntry(map, pair) {\n  // Don't return `map.set` because it's not chainable in IE 11.\n  map.set(pair[0], pair[1]);\n  return map;\n}\n\n/**\n * Adds `value` to `set`.\n *\n * @private\n * @param {Object} set The set to modify.\n * @param {*} value The value to add.\n * @returns {Object} Returns `set`.\n */\nfunction addSetEntry(set, value) {\n  // Don't return `set.add` because it's not chainable in IE 11.\n  set.add(value);\n  return set;\n}\n\n/**\n * A specialized version of `_.forEach` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nfunction arrayEach(array, iteratee) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  while (++index < length) {\n    if (iteratee(array[index], index, array) === false) {\n      break;\n    }\n  }\n  return array;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.reduce` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {*} [accumulator] The initial value.\n * @param {boolean} [initAccum] Specify using the first element of `array` as\n *  the initial value.\n * @returns {*} Returns the accumulated value.\n */\nfunction arrayReduce(array, iteratee, accumulator, initAccum) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  if (initAccum && length) {\n    accumulator = array[++index];\n  }\n  while (++index < length) {\n    accumulator = iteratee(accumulator, array[index], index, array);\n  }\n  return accumulator;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    getPrototype = overArg(Object.getPrototypeOf, Object),\n    objectCreate = Object.create,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  return getMapData(this, key)['delete'](key);\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  getMapData(this, key).set(key, value);\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  this.__data__ = new ListCache(entries);\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  return this.__data__['delete'](key);\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var cache = this.__data__;\n  if (cache instanceof ListCache) {\n    var pairs = cache.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      return this;\n    }\n    cache = this.__data__ = new MapCache(pairs);\n  }\n  cache.set(key, value);\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  // Safari 9 makes `arguments.length` enumerable in strict mode.\n  var result = (isArray(value) || isArguments(value))\n    ? baseTimes(value.length, String)\n    : [];\n\n  var length = result.length,\n      skipIndexes = !!length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n      (value === undefined && !(key in object))) {\n    object[key] = value;\n  }\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.assign` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssign(object, source) {\n  return object && copyObject(source, keys(source), object);\n}\n\n/**\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n * traversed objects.\n *\n * @private\n * @param {*} value The value to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @param {boolean} [isFull] Specify a clone including symbols.\n * @param {Function} [customizer] The function to customize cloning.\n * @param {string} [key] The key of `value`.\n * @param {Object} [object] The parent object of `value`.\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n * @returns {*} Returns the cloned value.\n */\nfunction baseClone(value, isDeep, isFull, customizer, key, object, stack) {\n  var result;\n  if (customizer) {\n    result = object ? customizer(value, key, object, stack) : customizer(value);\n  }\n  if (result !== undefined) {\n    return result;\n  }\n  if (!isObject(value)) {\n    return value;\n  }\n  var isArr = isArray(value);\n  if (isArr) {\n    result = initCloneArray(value);\n    if (!isDeep) {\n      return copyArray(value, result);\n    }\n  } else {\n    var tag = getTag(value),\n        isFunc = tag == funcTag || tag == genTag;\n\n    if (isBuffer(value)) {\n      return cloneBuffer(value, isDeep);\n    }\n    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n      if (isHostObject(value)) {\n        return object ? value : {};\n      }\n      result = initCloneObject(isFunc ? {} : value);\n      if (!isDeep) {\n        return copySymbols(value, baseAssign(result, value));\n      }\n    } else {\n      if (!cloneableTags[tag]) {\n        return object ? value : {};\n      }\n      result = initCloneByTag(value, tag, baseClone, isDeep);\n    }\n  }\n  // Check for circular references and return its corresponding clone.\n  stack || (stack = new Stack);\n  var stacked = stack.get(value);\n  if (stacked) {\n    return stacked;\n  }\n  stack.set(value, result);\n\n  if (!isArr) {\n    var props = isFull ? getAllKeys(value) : keys(value);\n  }\n  arrayEach(props || value, function(subValue, key) {\n    if (props) {\n      key = subValue;\n      subValue = value[key];\n    }\n    // Recursively populate clone (susceptible to call stack limits).\n    assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));\n  });\n  return result;\n}\n\n/**\n * The base implementation of `_.create` without support for assigning\n * properties to the created object.\n *\n * @private\n * @param {Object} prototype The object to inherit from.\n * @returns {Object} Returns the new object.\n */\nfunction baseCreate(proto) {\n  return isObject(proto) ? objectCreate(proto) : {};\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  return objectToString.call(value);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Creates a clone of  `buffer`.\n *\n * @private\n * @param {Buffer} buffer The buffer to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Buffer} Returns the cloned buffer.\n */\nfunction cloneBuffer(buffer, isDeep) {\n  if (isDeep) {\n    return buffer.slice();\n  }\n  var result = new buffer.constructor(buffer.length);\n  buffer.copy(result);\n  return result;\n}\n\n/**\n * Creates a clone of `arrayBuffer`.\n *\n * @private\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n * @returns {ArrayBuffer} Returns the cloned array buffer.\n */\nfunction cloneArrayBuffer(arrayBuffer) {\n  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n  new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n  return result;\n}\n\n/**\n * Creates a clone of `dataView`.\n *\n * @private\n * @param {Object} dataView The data view to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned data view.\n */\nfunction cloneDataView(dataView, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n}\n\n/**\n * Creates a clone of `map`.\n *\n * @private\n * @param {Object} map The map to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned map.\n */\nfunction cloneMap(map, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);\n  return arrayReduce(array, addMapEntry, new map.constructor);\n}\n\n/**\n * Creates a clone of `regexp`.\n *\n * @private\n * @param {Object} regexp The regexp to clone.\n * @returns {Object} Returns the cloned regexp.\n */\nfunction cloneRegExp(regexp) {\n  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n  result.lastIndex = regexp.lastIndex;\n  return result;\n}\n\n/**\n * Creates a clone of `set`.\n *\n * @private\n * @param {Object} set The set to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned set.\n */\nfunction cloneSet(set, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);\n  return arrayReduce(array, addSetEntry, new set.constructor);\n}\n\n/**\n * Creates a clone of the `symbol` object.\n *\n * @private\n * @param {Object} symbol The symbol object to clone.\n * @returns {Object} Returns the cloned symbol object.\n */\nfunction cloneSymbol(symbol) {\n  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n}\n\n/**\n * Creates a clone of `typedArray`.\n *\n * @private\n * @param {Object} typedArray The typed array to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned typed array.\n */\nfunction cloneTypedArray(typedArray, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n}\n\n/**\n * Copies the values of `source` to `array`.\n *\n * @private\n * @param {Array} source The array to copy values from.\n * @param {Array} [array=[]] The array to copy values to.\n * @returns {Array} Returns `array`.\n */\nfunction copyArray(source, array) {\n  var index = -1,\n      length = source.length;\n\n  array || (array = Array(length));\n  while (++index < length) {\n    array[index] = source[index];\n  }\n  return array;\n}\n\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n */\nfunction copyObject(source, props, object, customizer) {\n  object || (object = {});\n\n  var index = -1,\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index];\n\n    var newValue = customizer\n      ? customizer(object[key], source[key], key, object, source)\n      : undefined;\n\n    assignValue(object, key, newValue === undefined ? source[key] : newValue);\n  }\n  return object;\n}\n\n/**\n * Copies own symbol properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbols(source, object) {\n  return copyObject(source, getSymbols(source), object);\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * Creates an array of the own enumerable symbol properties of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11,\n// for data views in Edge < 14, and promises in Node.js.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = objectToString.call(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : undefined;\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Initializes an array clone.\n *\n * @private\n * @param {Array} array The array to clone.\n * @returns {Array} Returns the initialized clone.\n */\nfunction initCloneArray(array) {\n  var length = array.length,\n      result = array.constructor(length);\n\n  // Add properties assigned by `RegExp#exec`.\n  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n    result.index = array.index;\n    result.input = array.input;\n  }\n  return result;\n}\n\n/**\n * Initializes an object clone.\n *\n * @private\n * @param {Object} object The object to clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneObject(object) {\n  return (typeof object.constructor == 'function' && !isPrototype(object))\n    ? baseCreate(getPrototype(object))\n    : {};\n}\n\n/**\n * Initializes an object clone based on its `toStringTag`.\n *\n * **Note:** This function only supports cloning values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to clone.\n * @param {string} tag The `toStringTag` of the object to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneByTag(object, tag, cloneFunc, isDeep) {\n  var Ctor = object.constructor;\n  switch (tag) {\n    case arrayBufferTag:\n      return cloneArrayBuffer(object);\n\n    case boolTag:\n    case dateTag:\n      return new Ctor(+object);\n\n    case dataViewTag:\n      return cloneDataView(object, isDeep);\n\n    case float32Tag: case float64Tag:\n    case int8Tag: case int16Tag: case int32Tag:\n    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n      return cloneTypedArray(object, isDeep);\n\n    case mapTag:\n      return cloneMap(object, isDeep, cloneFunc);\n\n    case numberTag:\n    case stringTag:\n      return new Ctor(object);\n\n    case regexpTag:\n      return cloneRegExp(object);\n\n    case setTag:\n      return cloneSet(object, isDeep, cloneFunc);\n\n    case symbolTag:\n      return cloneSymbol(object);\n  }\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * This method is like `_.clone` except that it recursively clones `value`.\n *\n * @static\n * @memberOf _\n * @since 1.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @returns {*} Returns the deep cloned value.\n * @see _.clone\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var deep = _.cloneDeep(objects);\n * console.log(deep[0] === objects[0]);\n * // => false\n */\nfunction cloneDeep(value) {\n  return baseClone(value, true, true);\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nfunction isArguments(value) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = cloneDeep;\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        result = wait - timeSinceLastCall;\n\n    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = debounce;\n","/**\n * Lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright JS Foundation and other contributors <https://js.foundation/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    asyncTag = '[object AsyncFunction]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    nullTag = '[object Null]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    proxyTag = '[object Proxy]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    undefinedTag = '[object Undefined]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\n/**\n * Checks if a `cache` value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction cacheHas(cache, key) {\n  return cache.has(key);\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice,\n    symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values == null ? 0 : values.length;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\n/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  var data = this.__data__ = new ListCache(entries);\n  this.size = data.size;\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  var data = this.__data__,\n      result = data['delete'](key);\n\n  this.size = data.size;\n  return result;\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var data = this.__data__;\n  if (data instanceof ListCache) {\n    var pairs = data.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n    data = this.__data__ = new MapCache(pairs);\n  }\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n}\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = objIsArr ? arrayTag : getTag(object),\n      othTag = othIsArr ? arrayTag : getTag(other);\n\n  objTag = objTag == argsTag ? objectTag : objTag;\n  othTag = othTag == argsTag ? objectTag : othTag;\n\n  var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && isBuffer(object)) {\n    if (!isBuffer(other)) {\n      return false;\n    }\n    objIsArr = true;\n    objIsObj = false;\n  }\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  }\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(array);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(object);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\n/**\n * Creates an array of the own enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n  if (object == null) {\n    return [];\n  }\n  object = Object(object);\n  return arrayFilter(nativeGetSymbols(object), function(symbol) {\n    return propertyIsEnumerable.call(object, symbol);\n  });\n};\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = baseGetTag(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : '';\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are compared by strict equality, i.e. `===`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.isEqual(object, other);\n * // => true\n *\n * object === other;\n * // => false\n */\nfunction isEqual(value, other) {\n  return baseIsEqual(value, other);\n}\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = isEqual;\n","'use strict';\n\nmodule.exports = pixelmatch;\n\nconst defaultOptions = {\n    threshold: 0.1,         // matching threshold (0 to 1); smaller is more sensitive\n    includeAA: false,       // whether to skip anti-aliasing detection\n    alpha: 0.1,             // opacity of original image in diff ouput\n    aaColor: [255, 255, 0], // color of anti-aliased pixels in diff output\n    diffColor: [255, 0, 0], // color of different pixels in diff output\n    diffColorAlt: null,     // whether to detect dark on light differences between img1 and img2 and set an alternative color to differentiate between the two\n    diffMask: false         // draw the diff over a transparent background (a mask)\n};\n\nfunction pixelmatch(img1, img2, output, width, height, options) {\n\n    if (!isPixelData(img1) || !isPixelData(img2) || (output && !isPixelData(output)))\n        throw new Error('Image data: Uint8Array, Uint8ClampedArray or Buffer expected.');\n\n    if (img1.length !== img2.length || (output && output.length !== img1.length))\n        throw new Error('Image sizes do not match.');\n\n    if (img1.length !== width * height * 4) throw new Error('Image data size does not match width/height.');\n\n    options = Object.assign({}, defaultOptions, options);\n\n    // check if images are identical\n    const len = width * height;\n    const a32 = new Uint32Array(img1.buffer, img1.byteOffset, len);\n    const b32 = new Uint32Array(img2.buffer, img2.byteOffset, len);\n    let identical = true;\n\n    for (let i = 0; i < len; i++) {\n        if (a32[i] !== b32[i]) { identical = false; break; }\n    }\n    if (identical) { // fast path if identical\n        if (output && !options.diffMask) {\n            for (let i = 0; i < len; i++) drawGrayPixel(img1, 4 * i, options.alpha, output);\n        }\n        return 0;\n    }\n\n    // maximum acceptable square distance between two colors;\n    // 35215 is the maximum possible value for the YIQ difference metric\n    const maxDelta = 35215 * options.threshold * options.threshold;\n    let diff = 0;\n\n    // compare each pixel of one image against the other one\n    for (let y = 0; y < height; y++) {\n        for (let x = 0; x < width; x++) {\n\n            const pos = (y * width + x) * 4;\n\n            // squared YUV distance between colors at this pixel position, negative if the img2 pixel is darker\n            const delta = colorDelta(img1, img2, pos, pos);\n\n            // the color difference is above the threshold\n            if (Math.abs(delta) > maxDelta) {\n                // check it's a real rendering difference or just anti-aliasing\n                if (!options.includeAA && (antialiased(img1, x, y, width, height, img2) ||\n                                           antialiased(img2, x, y, width, height, img1))) {\n                    // one of the pixels is anti-aliasing; draw as yellow and do not count as difference\n                    // note that we do not include such pixels in a mask\n                    if (output && !options.diffMask) drawPixel(output, pos, ...options.aaColor);\n\n                } else {\n                    // found substantial difference not caused by anti-aliasing; draw it as such\n                    if (output) {\n                        drawPixel(output, pos, ...(delta < 0 && options.diffColorAlt || options.diffColor));\n                    }\n                    diff++;\n                }\n\n            } else if (output) {\n                // pixels are similar; draw background as grayscale image blended with white\n                if (!options.diffMask) drawGrayPixel(img1, pos, options.alpha, output);\n            }\n        }\n    }\n\n    // return the number of different pixels\n    return diff;\n}\n\nfunction isPixelData(arr) {\n    // work around instanceof Uint8Array not working properly in some Jest environments\n    return ArrayBuffer.isView(arr) && arr.constructor.BYTES_PER_ELEMENT === 1;\n}\n\n// check if a pixel is likely a part of anti-aliasing;\n// based on \"Anti-aliased Pixel and Intensity Slope Detector\" paper by V. Vysniauskas, 2009\n\nfunction antialiased(img, x1, y1, width, height, img2) {\n    const x0 = Math.max(x1 - 1, 0);\n    const y0 = Math.max(y1 - 1, 0);\n    const x2 = Math.min(x1 + 1, width - 1);\n    const y2 = Math.min(y1 + 1, height - 1);\n    const pos = (y1 * width + x1) * 4;\n    let zeroes = x1 === x0 || x1 === x2 || y1 === y0 || y1 === y2 ? 1 : 0;\n    let min = 0;\n    let max = 0;\n    let minX, minY, maxX, maxY;\n\n    // go through 8 adjacent pixels\n    for (let x = x0; x <= x2; x++) {\n        for (let y = y0; y <= y2; y++) {\n            if (x === x1 && y === y1) continue;\n\n            // brightness delta between the center pixel and adjacent one\n            const delta = colorDelta(img, img, pos, (y * width + x) * 4, true);\n\n            // count the number of equal, darker and brighter adjacent pixels\n            if (delta === 0) {\n                zeroes++;\n                // if found more than 2 equal siblings, it's definitely not anti-aliasing\n                if (zeroes > 2) return false;\n\n            // remember the darkest pixel\n            } else if (delta < min) {\n                min = delta;\n                minX = x;\n                minY = y;\n\n            // remember the brightest pixel\n            } else if (delta > max) {\n                max = delta;\n                maxX = x;\n                maxY = y;\n            }\n        }\n    }\n\n    // if there are no both darker and brighter pixels among siblings, it's not anti-aliasing\n    if (min === 0 || max === 0) return false;\n\n    // if either the darkest or the brightest pixel has 3+ equal siblings in both images\n    // (definitely not anti-aliased), this pixel is anti-aliased\n    return (hasManySiblings(img, minX, minY, width, height) && hasManySiblings(img2, minX, minY, width, height)) ||\n           (hasManySiblings(img, maxX, maxY, width, height) && hasManySiblings(img2, maxX, maxY, width, height));\n}\n\n// check if a pixel has 3+ adjacent pixels of the same color.\nfunction hasManySiblings(img, x1, y1, width, height) {\n    const x0 = Math.max(x1 - 1, 0);\n    const y0 = Math.max(y1 - 1, 0);\n    const x2 = Math.min(x1 + 1, width - 1);\n    const y2 = Math.min(y1 + 1, height - 1);\n    const pos = (y1 * width + x1) * 4;\n    let zeroes = x1 === x0 || x1 === x2 || y1 === y0 || y1 === y2 ? 1 : 0;\n\n    // go through 8 adjacent pixels\n    for (let x = x0; x <= x2; x++) {\n        for (let y = y0; y <= y2; y++) {\n            if (x === x1 && y === y1) continue;\n\n            const pos2 = (y * width + x) * 4;\n            if (img[pos] === img[pos2] &&\n                img[pos + 1] === img[pos2 + 1] &&\n                img[pos + 2] === img[pos2 + 2] &&\n                img[pos + 3] === img[pos2 + 3]) zeroes++;\n\n            if (zeroes > 2) return true;\n        }\n    }\n\n    return false;\n}\n\n// calculate color difference according to the paper \"Measuring perceived color difference\n// using YIQ NTSC transmission color space in mobile applications\" by Y. Kotsarenko and F. Ramos\n\nfunction colorDelta(img1, img2, k, m, yOnly) {\n    let r1 = img1[k + 0];\n    let g1 = img1[k + 1];\n    let b1 = img1[k + 2];\n    let a1 = img1[k + 3];\n\n    let r2 = img2[m + 0];\n    let g2 = img2[m + 1];\n    let b2 = img2[m + 2];\n    let a2 = img2[m + 3];\n\n    if (a1 === a2 && r1 === r2 && g1 === g2 && b1 === b2) return 0;\n\n    if (a1 < 255) {\n        a1 /= 255;\n        r1 = blend(r1, a1);\n        g1 = blend(g1, a1);\n        b1 = blend(b1, a1);\n    }\n\n    if (a2 < 255) {\n        a2 /= 255;\n        r2 = blend(r2, a2);\n        g2 = blend(g2, a2);\n        b2 = blend(b2, a2);\n    }\n\n    const y1 = rgb2y(r1, g1, b1);\n    const y2 = rgb2y(r2, g2, b2);\n    const y = y1 - y2;\n\n    if (yOnly) return y; // brightness difference only\n\n    const i = rgb2i(r1, g1, b1) - rgb2i(r2, g2, b2);\n    const q = rgb2q(r1, g1, b1) - rgb2q(r2, g2, b2);\n\n    const delta = 0.5053 * y * y + 0.299 * i * i + 0.1957 * q * q;\n\n    // encode whether the pixel lightens or darkens in the sign\n    return y1 > y2 ? -delta : delta;\n}\n\nfunction rgb2y(r, g, b) { return r * 0.29889531 + g * 0.58662247 + b * 0.11448223; }\nfunction rgb2i(r, g, b) { return r * 0.59597799 - g * 0.27417610 - b * 0.32180189; }\nfunction rgb2q(r, g, b) { return r * 0.21147017 - g * 0.52261711 + b * 0.31114694; }\n\n// blend semi-transparent color with white\nfunction blend(c, a) {\n    return 255 + (c - 255) * a;\n}\n\nfunction drawPixel(output, pos, r, g, b) {\n    output[pos + 0] = r;\n    output[pos + 1] = g;\n    output[pos + 2] = b;\n    output[pos + 3] = 255;\n}\n\nfunction drawGrayPixel(img, i, alpha, output) {\n    const r = img[i + 0];\n    const g = img[i + 1];\n    const b = img[i + 2];\n    const val = blend(rgb2y(r, g, b), alpha * img[i + 3] / 255);\n    drawPixel(output, i, val, val, val);\n}\n","var grammar = module.exports = {\n  v: [{\n    name: 'version',\n    reg: /^(\\d*)$/\n  }],\n  o: [{ //o=- 20518 0 IN IP4 203.0.113.1\n    // NB: sessionId will be a String in most cases because it is huge\n    name: 'origin',\n    reg: /^(\\S*) (\\d*) (\\d*) (\\S*) IP(\\d) (\\S*)/,\n    names: ['username', 'sessionId', 'sessionVersion', 'netType', 'ipVer', 'address'],\n    format: '%s %s %d %s IP%d %s'\n  }],\n  // default parsing of these only (though some of these feel outdated)\n  s: [{ name: 'name' }],\n  i: [{ name: 'description' }],\n  u: [{ name: 'uri' }],\n  e: [{ name: 'email' }],\n  p: [{ name: 'phone' }],\n  z: [{ name: 'timezones' }], // TODO: this one can actually be parsed properly..\n  r: [{ name: 'repeats' }],   // TODO: this one can also be parsed properly\n  //k: [{}], // outdated thing ignored\n  t: [{ //t=0 0\n    name: 'timing',\n    reg: /^(\\d*) (\\d*)/,\n    names: ['start', 'stop'],\n    format: '%d %d'\n  }],\n  c: [{ //c=IN IP4 10.47.197.26\n    name: 'connection',\n    reg: /^IN IP(\\d) (\\S*)/,\n    names: ['version', 'ip'],\n    format: 'IN IP%d %s'\n  }],\n  b: [{ //b=AS:4000\n    push: 'bandwidth',\n    reg: /^(TIAS|AS|CT|RR|RS):(\\d*)/,\n    names: ['type', 'limit'],\n    format: '%s:%s'\n  }],\n  m: [{ //m=video 51744 RTP/AVP 126 97 98 34 31\n    // NB: special - pushes to session\n    // TODO: rtp/fmtp should be filtered by the payloads found here?\n    reg: /^(\\w*) (\\d*) ([\\w\\/]*)(?: (.*))?/,\n    names: ['type', 'port', 'protocol', 'payloads'],\n    format: '%s %d %s %s'\n  }],\n  a: [\n    { //a=rtpmap:110 opus/48000/2\n      push: 'rtp',\n      reg: /^rtpmap:(\\d*) ([\\w\\-\\.]*)(?:\\s*\\/(\\d*)(?:\\s*\\/(\\S*))?)?/,\n      names: ['payload', 'codec', 'rate', 'encoding'],\n      format: function (o) {\n        return (o.encoding) ?\n          'rtpmap:%d %s/%s/%s':\n          o.rate ?\n          'rtpmap:%d %s/%s':\n          'rtpmap:%d %s';\n      }\n    },\n    { //a=fmtp:108 profile-level-id=24;object=23;bitrate=64000\n      //a=fmtp:111 minptime=10; useinbandfec=1\n      push: 'fmtp',\n      reg: /^fmtp:(\\d*) ([\\S| ]*)/,\n      names: ['payload', 'config'],\n      format: 'fmtp:%d %s'\n    },\n    { //a=control:streamid=0\n      name: 'control',\n      reg: /^control:(.*)/,\n      format: 'control:%s'\n    },\n    { //a=rtcp:65179 IN IP4 193.84.77.194\n      name: 'rtcp',\n      reg: /^rtcp:(\\d*)(?: (\\S*) IP(\\d) (\\S*))?/,\n      names: ['port', 'netType', 'ipVer', 'address'],\n      format: function (o) {\n        return (o.address != null) ?\n          'rtcp:%d %s IP%d %s':\n          'rtcp:%d';\n      }\n    },\n    { //a=rtcp-fb:98 trr-int 100\n      push: 'rtcpFbTrrInt',\n      reg: /^rtcp-fb:(\\*|\\d*) trr-int (\\d*)/,\n      names: ['payload', 'value'],\n      format: 'rtcp-fb:%d trr-int %d'\n    },\n    { //a=rtcp-fb:98 nack rpsi\n      push: 'rtcpFb',\n      reg: /^rtcp-fb:(\\*|\\d*) ([\\w-_]*)(?: ([\\w-_]*))?/,\n      names: ['payload', 'type', 'subtype'],\n      format: function (o) {\n        return (o.subtype != null) ?\n          'rtcp-fb:%s %s %s':\n          'rtcp-fb:%s %s';\n      }\n    },\n    { //a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n      //a=extmap:1/recvonly URI-gps-string\n      push: 'ext',\n      reg: /^extmap:(\\d+)(?:\\/(\\w+))? (\\S*)(?: (\\S*))?/,\n      names: ['value', 'direction', 'uri', 'config'],\n      format: function (o) {\n        return 'extmap:%d' + (o.direction ? '/%s' : '%v') + ' %s' + (o.config ? ' %s' : '');\n      }\n    },\n    { //a=crypto:1 AES_CM_128_HMAC_SHA1_80 inline:PS1uQCVeeCFCanVmcjkpPywjNWhcYD0mXXtxaVBR|2^20|1:32\n      push: 'crypto',\n      reg: /^crypto:(\\d*) ([\\w_]*) (\\S*)(?: (\\S*))?/,\n      names: ['id', 'suite', 'config', 'sessionConfig'],\n      format: function (o) {\n        return (o.sessionConfig != null) ?\n          'crypto:%d %s %s %s':\n          'crypto:%d %s %s';\n      }\n    },\n    { //a=setup:actpass\n      name: 'setup',\n      reg: /^setup:(\\w*)/,\n      format: 'setup:%s'\n    },\n    { //a=mid:1\n      name: 'mid',\n      reg: /^mid:([^\\s]*)/,\n      format: 'mid:%s'\n    },\n    { //a=msid:0c8b064d-d807-43b4-b434-f92a889d8587 98178685-d409-46e0-8e16-7ef0db0db64a\n      name: 'msid',\n      reg: /^msid:(.*)/,\n      format: 'msid:%s'\n    },\n    { //a=ptime:20\n      name: 'ptime',\n      reg: /^ptime:(\\d*)/,\n      format: 'ptime:%d'\n    },\n    { //a=maxptime:60\n      name: 'maxptime',\n      reg: /^maxptime:(\\d*)/,\n      format: 'maxptime:%d'\n    },\n    { //a=sendrecv\n      name: 'direction',\n      reg: /^(sendrecv|recvonly|sendonly|inactive)/\n    },\n    { //a=ice-lite\n      name: 'icelite',\n      reg: /^(ice-lite)/\n    },\n    { //a=ice-ufrag:F7gI\n      name: 'iceUfrag',\n      reg: /^ice-ufrag:(\\S*)/,\n      format: 'ice-ufrag:%s'\n    },\n    { //a=ice-pwd:x9cml/YzichV2+XlhiMu8g\n      name: 'icePwd',\n      reg: /^ice-pwd:(\\S*)/,\n      format: 'ice-pwd:%s'\n    },\n    { //a=fingerprint:SHA-1 00:11:22:33:44:55:66:77:88:99:AA:BB:CC:DD:EE:FF:00:11:22:33\n      name: 'fingerprint',\n      reg: /^fingerprint:(\\S*) (\\S*)/,\n      names: ['type', 'hash'],\n      format: 'fingerprint:%s %s'\n    },\n    { //a=candidate:0 1 UDP 2113667327 203.0.113.1 54400 typ host\n      //a=candidate:1162875081 1 udp 2113937151 192.168.34.75 60017 typ host generation 0 network-id 3 network-cost 10\n      //a=candidate:3289912957 2 udp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 generation 0 network-id 3 network-cost 10\n      //a=candidate:229815620 1 tcp 1518280447 192.168.150.19 60017 typ host tcptype active generation 0 network-id 3 network-cost 10\n      //a=candidate:3289912957 2 tcp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 tcptype passive generation 0 network-id 3 network-cost 10\n      push:'candidates',\n      reg: /^candidate:(\\S*) (\\d*) (\\S*) (\\d*) (\\S*) (\\d*) typ (\\S*)(?: raddr (\\S*) rport (\\d*))?(?: tcptype (\\S*))?(?: generation (\\d*))?(?: network-id (\\d*))?(?: network-cost (\\d*))?/,\n      names: ['foundation', 'component', 'transport', 'priority', 'ip', 'port', 'type', 'raddr', 'rport', 'tcptype', 'generation', 'network-id', 'network-cost'],\n      format: function (o) {\n        var str = 'candidate:%s %d %s %d %s %d typ %s';\n\n        str += (o.raddr != null) ? ' raddr %s rport %d' : '%v%v';\n\n        // NB: candidate has three optional chunks, so %void middles one if it's missing\n        str += (o.tcptype != null) ? ' tcptype %s' : '%v';\n\n        if (o.generation != null) {\n          str += ' generation %d';\n        }\n\n        str += (o['network-id'] != null) ? ' network-id %d' : '%v';\n        str += (o['network-cost'] != null) ? ' network-cost %d' : '%v';\n        return str;\n      }\n    },\n    { //a=end-of-candidates (keep after the candidates line for readability)\n      name: 'endOfCandidates',\n      reg: /^(end-of-candidates)/\n    },\n    { //a=remote-candidates:1 203.0.113.1 54400 2 203.0.113.1 54401 ...\n      name: 'remoteCandidates',\n      reg: /^remote-candidates:(.*)/,\n      format: 'remote-candidates:%s'\n    },\n    { //a=ice-options:google-ice\n      name: 'iceOptions',\n      reg: /^ice-options:(\\S*)/,\n      format: 'ice-options:%s'\n    },\n    { //a=ssrc:2566107569 cname:t9YU8M1UxTF8Y1A1\n      push: 'ssrcs',\n      reg: /^ssrc:(\\d*) ([\\w_]*)(?::(.*))?/,\n      names: ['id', 'attribute', 'value'],\n      format: function (o) {\n        var str = 'ssrc:%d';\n        if (o.attribute != null) {\n          str += ' %s';\n          if (o.value != null) {\n            str += ':%s';\n          }\n        }\n        return str;\n      }\n    },\n    { //a=ssrc-group:FEC 1 2\n      //a=ssrc-group:FEC-FR 3004364195 1080772241\n      push: 'ssrcGroups',\n      // token-char = %x21 / %x23-27 / %x2A-2B / %x2D-2E / %x30-39 / %x41-5A / %x5E-7E\n      reg: /^ssrc-group:([\\x21\\x23\\x24\\x25\\x26\\x27\\x2A\\x2B\\x2D\\x2E\\w]*) (.*)/,\n      names: ['semantics', 'ssrcs'],\n      format: 'ssrc-group:%s %s'\n    },\n    { //a=msid-semantic: WMS Jvlam5X3SX1OP6pn20zWogvaKJz5Hjf9OnlV\n      name: 'msidSemantic',\n      reg: /^msid-semantic:\\s?(\\w*) (\\S*)/,\n      names: ['semantic', 'token'],\n      format: 'msid-semantic: %s %s' // space after ':' is not accidental\n    },\n    { //a=group:BUNDLE audio video\n      push: 'groups',\n      reg: /^group:(\\w*) (.*)/,\n      names: ['type', 'mids'],\n      format: 'group:%s %s'\n    },\n    { //a=rtcp-mux\n      name: 'rtcpMux',\n      reg: /^(rtcp-mux)/\n    },\n    { //a=rtcp-rsize\n      name: 'rtcpRsize',\n      reg: /^(rtcp-rsize)/\n    },\n    { //a=sctpmap:5000 webrtc-datachannel 1024\n      name: 'sctpmap',\n      reg: /^sctpmap:([\\w_\\/]*) (\\S*)(?: (\\S*))?/,\n      names: ['sctpmapNumber', 'app', 'maxMessageSize'],\n      format: function (o) {\n        return (o.maxMessageSize != null) ?\n          'sctpmap:%s %s %s' :\n          'sctpmap:%s %s';\n      }\n    },\n    { //a=x-google-flag:conference\n      name: 'xGoogleFlag',\n      reg: /^x-google-flag:([^\\s]*)/,\n      format: 'x-google-flag:%s'\n    },\n    { //a=rid:1 send max-width=1280;max-height=720;max-fps=30;depend=0\n      push: 'rids',\n      reg: /^rid:([\\d\\w]+) (\\w+)(?: ([\\S| ]*))?/,\n      names: ['id', 'direction', 'params'],\n      format: function (o) {\n        return (o.params) ? 'rid:%s %s %s' : 'rid:%s %s';\n      }\n    },\n    { //a=imageattr:97 send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320] recv [x=330,y=250]\n      //a=imageattr:* send [x=800,y=640] recv *\n      //a=imageattr:100 recv [x=320,y=240]\n      push: 'imageattrs',\n      reg: new RegExp(\n        //a=imageattr:97\n        '^imageattr:(\\\\d+|\\\\*)' +\n        //send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320]\n        '[\\\\s\\\\t]+(send|recv)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*)' +\n        //recv [x=330,y=250]\n        '(?:[\\\\s\\\\t]+(recv|send)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*))?'\n      ),\n      names: ['pt', 'dir1', 'attrs1', 'dir2', 'attrs2'],\n      format: function (o) {\n        return 'imageattr:%s %s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    { //a=simulcast:send 1,2,3;~4,~5 recv 6;~7,~8\n      //a=simulcast:recv 1;4,5 send 6;7\n      name: 'simulcast',\n      reg: new RegExp(\n        //a=simulcast:\n        '^simulcast:' +\n        //send 1,2,3;~4,~5\n        '(send|recv) ([a-zA-Z0-9\\\\-_~;,]+)' +\n        //space + recv 6;~7,~8\n        '(?:\\\\s?(send|recv) ([a-zA-Z0-9\\\\-_~;,]+))?' +\n        //end\n        '$'\n      ),\n      names: ['dir1', 'list1', 'dir2', 'list2'],\n      format: function (o) {\n        return 'simulcast:%s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    { //Old simulcast draft 03 (implemented by Firefox)\n      //  https://tools.ietf.org/html/draft-ietf-mmusic-sdp-simulcast-03\n      //a=simulcast: recv pt=97;98 send pt=97\n      //a=simulcast: send rid=5;6;7 paused=6,7\n      name: 'simulcast_03',\n      reg: /^simulcast:[\\s\\t]+([\\S+\\s\\t]+)$/,\n      names: ['value'],\n      format: 'simulcast: %s'\n    },\n    {\n      //a=framerate:25\n      //a=framerate:29.97\n      name: 'framerate',\n      reg: /^framerate:(\\d+(?:$|\\.\\d+))/,\n      format: 'framerate:%s'\n    },\n    { // any a= that we don't understand is kepts verbatim on media.invalid\n      push: 'invalid',\n      names: ['value']\n    }\n  ]\n};\n\n// set sensible defaults to avoid polluting the grammar with boring details\nObject.keys(grammar).forEach(function (key) {\n  var objs = grammar[key];\n  objs.forEach(function (obj) {\n    if (!obj.reg) {\n      obj.reg = /(.*)/;\n    }\n    if (!obj.format) {\n      obj.format = '%s';\n    }\n  });\n});\n","var parser = require('./parser');\nvar writer = require('./writer');\n\nexports.write = writer;\nexports.parse = parser.parse;\nexports.parseFmtpConfig = parser.parseFmtpConfig;\nexports.parseParams = parser.parseParams;\nexports.parsePayloads = parser.parsePayloads;\nexports.parseRemoteCandidates = parser.parseRemoteCandidates;\nexports.parseImageAttributes = parser.parseImageAttributes;\nexports.parseSimulcastStreamList = parser.parseSimulcastStreamList;\n","var toIntIfInt = function (v) {\n  return String(Number(v)) === v ? Number(v) : v;\n};\n\nvar attachProperties = function (match, location, names, rawName) {\n  if (rawName && !names) {\n    location[rawName] = toIntIfInt(match[1]);\n  }\n  else {\n    for (var i = 0; i < names.length; i += 1) {\n      if (match[i+1] != null) {\n        location[names[i]] = toIntIfInt(match[i+1]);\n      }\n    }\n  }\n};\n\nvar parseReg = function (obj, location, content) {\n  var needsBlank = obj.name && obj.names;\n  if (obj.push && !location[obj.push]) {\n    location[obj.push] = [];\n  }\n  else if (needsBlank && !location[obj.name]) {\n    location[obj.name] = {};\n  }\n  var keyLocation = obj.push ?\n    {} :  // blank object that will be pushed\n    needsBlank ? location[obj.name] : location; // otherwise, named location or root\n\n  attachProperties(content.match(obj.reg), keyLocation, obj.names, obj.name);\n\n  if (obj.push) {\n    location[obj.push].push(keyLocation);\n  }\n};\n\nvar grammar = require('./grammar');\nvar validLine = RegExp.prototype.test.bind(/^([a-z])=(.*)/);\n\nexports.parse = function (sdp) {\n  var session = {}\n    , media = []\n    , location = session; // points at where properties go under (one of the above)\n\n  // parse lines we understand\n  sdp.split(/(\\r\\n|\\r|\\n)/).filter(validLine).forEach(function (l) {\n    var type = l[0];\n    var content = l.slice(2);\n    if (type === 'm') {\n      media.push({rtp: [], fmtp: []});\n      location = media[media.length-1]; // point at latest media line\n    }\n\n    for (var j = 0; j < (grammar[type] || []).length; j += 1) {\n      var obj = grammar[type][j];\n      if (obj.reg.test(content)) {\n        return parseReg(obj, location, content);\n      }\n    }\n  });\n\n  session.media = media; // link it up\n  return session;\n};\n\nvar paramReducer = function (acc, expr) {\n  var s = expr.split(/=(.+)/, 2);\n  if (s.length === 2) {\n    acc[s[0]] = toIntIfInt(s[1]);\n  }\n  return acc;\n};\n\nexports.parseParams = function (str) {\n  return str.split(/\\;\\s?/).reduce(paramReducer, {});\n};\n\n// For backward compatibility - alias will be removed in 3.0.0\nexports.parseFmtpConfig = exports.parseParams;\n\nexports.parsePayloads = function (str) {\n  return str.split(' ').map(Number);\n};\n\nexports.parseRemoteCandidates = function (str) {\n  var candidates = [];\n  var parts = str.split(' ').map(toIntIfInt);\n  for (var i = 0; i < parts.length; i += 3) {\n    candidates.push({\n      component: parts[i],\n      ip: parts[i + 1],\n      port: parts[i + 2]\n    });\n  }\n  return candidates;\n};\n\nexports.parseImageAttributes = function (str) {\n  return str.split(' ').map(function (item) {\n    return item.substring(1, item.length-1).split(',').reduce(paramReducer, {});\n  });\n};\n\nexports.parseSimulcastStreamList = function (str) {\n  return str.split(';').map(function (stream) {\n    return stream.split(',').map(function (format) {\n      var scid, paused = false;\n\n      if (format[0] !== '~') {\n        scid = toIntIfInt(format);\n      } else {\n        scid = toIntIfInt(format.substring(1, format.length));\n        paused = true;\n      }\n\n      return {\n        scid: scid,\n        paused: paused\n      };\n    });\n  });\n};\n","var grammar = require('./grammar');\n\n// customized util.format - discards excess arguments and can void middle ones\nvar formatRegExp = /%[sdv%]/g;\nvar format = function (formatStr) {\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  return formatStr.replace(formatRegExp, function (x) {\n    if (i >= len) {\n      return x; // missing argument\n    }\n    var arg = args[i];\n    i += 1;\n    switch (x) {\n    case '%%':\n      return '%';\n    case '%s':\n      return String(arg);\n    case '%d':\n      return Number(arg);\n    case '%v':\n      return '';\n    }\n  });\n  // NB: we discard excess arguments - they are typically undefined from makeLine\n};\n\nvar makeLine = function (type, obj, location) {\n  var str = obj.format instanceof Function ?\n    (obj.format(obj.push ? location : location[obj.name])) :\n    obj.format;\n\n  var args = [type + '=' + str];\n  if (obj.names) {\n    for (var i = 0; i < obj.names.length; i += 1) {\n      var n = obj.names[i];\n      if (obj.name) {\n        args.push(location[obj.name][n]);\n      }\n      else { // for mLine and push attributes\n        args.push(location[obj.names[i]]);\n      }\n    }\n  }\n  else {\n    args.push(location[obj.name]);\n  }\n  return format.apply(null, args);\n};\n\n// RFC specified order\n// TODO: extend this with all the rest\nvar defaultOuterOrder = [\n  'v', 'o', 's', 'i',\n  'u', 'e', 'p', 'c',\n  'b', 't', 'r', 'z', 'a'\n];\nvar defaultInnerOrder = ['i', 'c', 'b', 'a'];\n\n\nmodule.exports = function (session, opts) {\n  opts = opts || {};\n  // ensure certain properties exist\n  if (session.version == null) {\n    session.version = 0; // 'v=0' must be there (only defined version atm)\n  }\n  if (session.name == null) {\n    session.name = ' '; // 's= ' must be there if no meaningful name set\n  }\n  session.media.forEach(function (mLine) {\n    if (mLine.payloads == null) {\n      mLine.payloads = '';\n    }\n  });\n\n  var outerOrder = opts.outerOrder || defaultOuterOrder;\n  var innerOrder = opts.innerOrder || defaultInnerOrder;\n  var sdp = [];\n\n  // loop through outerOrder for matching properties on session\n  outerOrder.forEach(function (type) {\n    grammar[type].forEach(function (obj) {\n      if (obj.name in session && session[obj.name] != null) {\n        sdp.push(makeLine(type, obj, session));\n      }\n      else if (obj.push in session && session[obj.push] != null) {\n        session[obj.push].forEach(function (el) {\n          sdp.push(makeLine(type, obj, el));\n        });\n      }\n    });\n  });\n\n  // then for each media line, follow the innerOrder\n  session.media.forEach(function (mLine) {\n    sdp.push(makeLine('m', grammar.m[0], mLine));\n\n    innerOrder.forEach(function (type) {\n      grammar[type].forEach(function (obj) {\n        if (obj.name in mLine && mLine[obj.name] != null) {\n          sdp.push(makeLine(type, obj, mLine));\n        }\n        else if (obj.push in mLine && mLine[obj.push] != null) {\n          mLine[obj.push].forEach(function (el) {\n            sdp.push(makeLine(type, obj, el));\n          });\n        }\n      });\n    });\n  });\n\n  return sdp.join('\\r\\n') + '\\r\\n';\n};\n","/* eslint-env node */\n'use strict';\n\n// SDP helpers.\nconst SDPUtils = {};\n\n// Generate an alphanumeric identifier for cname or mids.\n// TODO: use UUIDs instead? https://gist.github.com/jed/982883\nSDPUtils.generateIdentifier = function() {\n  return Math.random().toString(36).substr(2, 10);\n};\n\n// The RTCP CNAME used by all peerconnections from the same JS.\nSDPUtils.localCName = SDPUtils.generateIdentifier();\n\n// Splits SDP into lines, dealing with both CRLF and LF.\nSDPUtils.splitLines = function(blob) {\n  return blob.trim().split('\\n').map(line => line.trim());\n};\n// Splits SDP into sessionpart and mediasections. Ensures CRLF.\nSDPUtils.splitSections = function(blob) {\n  const parts = blob.split('\\nm=');\n  return parts.map((part, index) => (index > 0 ?\n    'm=' + part : part).trim() + '\\r\\n');\n};\n\n// Returns the session description.\nSDPUtils.getDescription = function(blob) {\n  const sections = SDPUtils.splitSections(blob);\n  return sections && sections[0];\n};\n\n// Returns the individual media sections.\nSDPUtils.getMediaSections = function(blob) {\n  const sections = SDPUtils.splitSections(blob);\n  sections.shift();\n  return sections;\n};\n\n// Returns lines that start with a certain prefix.\nSDPUtils.matchPrefix = function(blob, prefix) {\n  return SDPUtils.splitLines(blob).filter(line => line.indexOf(prefix) === 0);\n};\n\n// Parses an ICE candidate line. Sample input:\n// candidate:702786350 2 udp 41819902 8.8.8.8 60769 typ relay raddr 8.8.8.8\n// rport 55996\"\n// Input can be prefixed with a=.\nSDPUtils.parseCandidate = function(line) {\n  let parts;\n  // Parse both variants.\n  if (line.indexOf('a=candidate:') === 0) {\n    parts = line.substring(12).split(' ');\n  } else {\n    parts = line.substring(10).split(' ');\n  }\n\n  const candidate = {\n    foundation: parts[0],\n    component: {1: 'rtp', 2: 'rtcp'}[parts[1]] || parts[1],\n    protocol: parts[2].toLowerCase(),\n    priority: parseInt(parts[3], 10),\n    ip: parts[4],\n    address: parts[4], // address is an alias for ip.\n    port: parseInt(parts[5], 10),\n    // skip parts[6] == 'typ'\n    type: parts[7],\n  };\n\n  for (let i = 8; i < parts.length; i += 2) {\n    switch (parts[i]) {\n      case 'raddr':\n        candidate.relatedAddress = parts[i + 1];\n        break;\n      case 'rport':\n        candidate.relatedPort = parseInt(parts[i + 1], 10);\n        break;\n      case 'tcptype':\n        candidate.tcpType = parts[i + 1];\n        break;\n      case 'ufrag':\n        candidate.ufrag = parts[i + 1]; // for backward compatibility.\n        candidate.usernameFragment = parts[i + 1];\n        break;\n      default: // extension handling, in particular ufrag. Don't overwrite.\n        if (candidate[parts[i]] === undefined) {\n          candidate[parts[i]] = parts[i + 1];\n        }\n        break;\n    }\n  }\n  return candidate;\n};\n\n// Translates a candidate object into SDP candidate attribute.\n// This does not include the a= prefix!\nSDPUtils.writeCandidate = function(candidate) {\n  const sdp = [];\n  sdp.push(candidate.foundation);\n\n  const component = candidate.component;\n  if (component === 'rtp') {\n    sdp.push(1);\n  } else if (component === 'rtcp') {\n    sdp.push(2);\n  } else {\n    sdp.push(component);\n  }\n  sdp.push(candidate.protocol.toUpperCase());\n  sdp.push(candidate.priority);\n  sdp.push(candidate.address || candidate.ip);\n  sdp.push(candidate.port);\n\n  const type = candidate.type;\n  sdp.push('typ');\n  sdp.push(type);\n  if (type !== 'host' && candidate.relatedAddress &&\n      candidate.relatedPort) {\n    sdp.push('raddr');\n    sdp.push(candidate.relatedAddress);\n    sdp.push('rport');\n    sdp.push(candidate.relatedPort);\n  }\n  if (candidate.tcpType && candidate.protocol.toLowerCase() === 'tcp') {\n    sdp.push('tcptype');\n    sdp.push(candidate.tcpType);\n  }\n  if (candidate.usernameFragment || candidate.ufrag) {\n    sdp.push('ufrag');\n    sdp.push(candidate.usernameFragment || candidate.ufrag);\n  }\n  return 'candidate:' + sdp.join(' ');\n};\n\n// Parses an ice-options line, returns an array of option tags.\n// Sample input:\n// a=ice-options:foo bar\nSDPUtils.parseIceOptions = function(line) {\n  return line.substr(14).split(' ');\n};\n\n// Parses a rtpmap line, returns RTCRtpCoddecParameters. Sample input:\n// a=rtpmap:111 opus/48000/2\nSDPUtils.parseRtpMap = function(line) {\n  let parts = line.substr(9).split(' ');\n  const parsed = {\n    payloadType: parseInt(parts.shift(), 10), // was: id\n  };\n\n  parts = parts[0].split('/');\n\n  parsed.name = parts[0];\n  parsed.clockRate = parseInt(parts[1], 10); // was: clockrate\n  parsed.channels = parts.length === 3 ? parseInt(parts[2], 10) : 1;\n  // legacy alias, got renamed back to channels in ORTC.\n  parsed.numChannels = parsed.channels;\n  return parsed;\n};\n\n// Generates a rtpmap line from RTCRtpCodecCapability or\n// RTCRtpCodecParameters.\nSDPUtils.writeRtpMap = function(codec) {\n  let pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  const channels = codec.channels || codec.numChannels || 1;\n  return 'a=rtpmap:' + pt + ' ' + codec.name + '/' + codec.clockRate +\n      (channels !== 1 ? '/' + channels : '') + '\\r\\n';\n};\n\n// Parses a extmap line (headerextension from RFC 5285). Sample input:\n// a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n// a=extmap:2/sendonly urn:ietf:params:rtp-hdrext:toffset\nSDPUtils.parseExtmap = function(line) {\n  const parts = line.substr(9).split(' ');\n  return {\n    id: parseInt(parts[0], 10),\n    direction: parts[0].indexOf('/') > 0 ? parts[0].split('/')[1] : 'sendrecv',\n    uri: parts[1],\n  };\n};\n\n// Generates an extmap line from RTCRtpHeaderExtensionParameters or\n// RTCRtpHeaderExtension.\nSDPUtils.writeExtmap = function(headerExtension) {\n  return 'a=extmap:' + (headerExtension.id || headerExtension.preferredId) +\n      (headerExtension.direction && headerExtension.direction !== 'sendrecv'\n        ? '/' + headerExtension.direction\n        : '') +\n      ' ' + headerExtension.uri + '\\r\\n';\n};\n\n// Parses a fmtp line, returns dictionary. Sample input:\n// a=fmtp:96 vbr=on;cng=on\n// Also deals with vbr=on; cng=on\nSDPUtils.parseFmtp = function(line) {\n  const parsed = {};\n  let kv;\n  const parts = line.substr(line.indexOf(' ') + 1).split(';');\n  for (let j = 0; j < parts.length; j++) {\n    kv = parts[j].trim().split('=');\n    parsed[kv[0].trim()] = kv[1];\n  }\n  return parsed;\n};\n\n// Generates a fmtp line from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeFmtp = function(codec) {\n  let line = '';\n  let pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  if (codec.parameters && Object.keys(codec.parameters).length) {\n    const params = [];\n    Object.keys(codec.parameters).forEach(param => {\n      if (codec.parameters[param] !== undefined) {\n        params.push(param + '=' + codec.parameters[param]);\n      } else {\n        params.push(param);\n      }\n    });\n    line += 'a=fmtp:' + pt + ' ' + params.join(';') + '\\r\\n';\n  }\n  return line;\n};\n\n// Parses a rtcp-fb line, returns RTCPRtcpFeedback object. Sample input:\n// a=rtcp-fb:98 nack rpsi\nSDPUtils.parseRtcpFb = function(line) {\n  const parts = line.substr(line.indexOf(' ') + 1).split(' ');\n  return {\n    type: parts.shift(),\n    parameter: parts.join(' '),\n  };\n};\n\n// Generate a=rtcp-fb lines from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeRtcpFb = function(codec) {\n  let lines = '';\n  let pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  if (codec.rtcpFeedback && codec.rtcpFeedback.length) {\n    // FIXME: special handling for trr-int?\n    codec.rtcpFeedback.forEach(fb => {\n      lines += 'a=rtcp-fb:' + pt + ' ' + fb.type +\n      (fb.parameter && fb.parameter.length ? ' ' + fb.parameter : '') +\n          '\\r\\n';\n    });\n  }\n  return lines;\n};\n\n// Parses a RFC 5576 ssrc media attribute. Sample input:\n// a=ssrc:3735928559 cname:something\nSDPUtils.parseSsrcMedia = function(line) {\n  const sp = line.indexOf(' ');\n  const parts = {\n    ssrc: parseInt(line.substr(7, sp - 7), 10),\n  };\n  const colon = line.indexOf(':', sp);\n  if (colon > -1) {\n    parts.attribute = line.substr(sp + 1, colon - sp - 1);\n    parts.value = line.substr(colon + 1);\n  } else {\n    parts.attribute = line.substr(sp + 1);\n  }\n  return parts;\n};\n\n// Parse a ssrc-group line (see RFC 5576). Sample input:\n// a=ssrc-group:semantics 12 34\nSDPUtils.parseSsrcGroup = function(line) {\n  const parts = line.substr(13).split(' ');\n  return {\n    semantics: parts.shift(),\n    ssrcs: parts.map(ssrc => parseInt(ssrc, 10)),\n  };\n};\n\n// Extracts the MID (RFC 5888) from a media section.\n// Returns the MID or undefined if no mid line was found.\nSDPUtils.getMid = function(mediaSection) {\n  const mid = SDPUtils.matchPrefix(mediaSection, 'a=mid:')[0];\n  if (mid) {\n    return mid.substr(6);\n  }\n};\n\n// Parses a fingerprint line for DTLS-SRTP.\nSDPUtils.parseFingerprint = function(line) {\n  const parts = line.substr(14).split(' ');\n  return {\n    algorithm: parts[0].toLowerCase(), // algorithm is case-sensitive in Edge.\n    value: parts[1].toUpperCase(), // the definition is upper-case in RFC 4572.\n  };\n};\n\n// Extracts DTLS parameters from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the fingerprint line as input. See also getIceParameters.\nSDPUtils.getDtlsParameters = function(mediaSection, sessionpart) {\n  const lines = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=fingerprint:');\n  // Note: a=setup line is ignored since we use the 'auto' role in Edge.\n  return {\n    role: 'auto',\n    fingerprints: lines.map(SDPUtils.parseFingerprint),\n  };\n};\n\n// Serializes DTLS parameters to SDP.\nSDPUtils.writeDtlsParameters = function(params, setupType) {\n  let sdp = 'a=setup:' + setupType + '\\r\\n';\n  params.fingerprints.forEach(fp => {\n    sdp += 'a=fingerprint:' + fp.algorithm + ' ' + fp.value + '\\r\\n';\n  });\n  return sdp;\n};\n\n// Parses a=crypto lines into\n//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#dictionary-rtcsrtpsdesparameters-members\nSDPUtils.parseCryptoLine = function(line) {\n  const parts = line.substr(9).split(' ');\n  return {\n    tag: parseInt(parts[0], 10),\n    cryptoSuite: parts[1],\n    keyParams: parts[2],\n    sessionParams: parts.slice(3),\n  };\n};\n\nSDPUtils.writeCryptoLine = function(parameters) {\n  return 'a=crypto:' + parameters.tag + ' ' +\n    parameters.cryptoSuite + ' ' +\n    (typeof parameters.keyParams === 'object'\n      ? SDPUtils.writeCryptoKeyParams(parameters.keyParams)\n      : parameters.keyParams) +\n    (parameters.sessionParams ? ' ' + parameters.sessionParams.join(' ') : '') +\n    '\\r\\n';\n};\n\n// Parses the crypto key parameters into\n//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#rtcsrtpkeyparam*\nSDPUtils.parseCryptoKeyParams = function(keyParams) {\n  if (keyParams.indexOf('inline:') !== 0) {\n    return null;\n  }\n  const parts = keyParams.substr(7).split('|');\n  return {\n    keyMethod: 'inline',\n    keySalt: parts[0],\n    lifeTime: parts[1],\n    mkiValue: parts[2] ? parts[2].split(':')[0] : undefined,\n    mkiLength: parts[2] ? parts[2].split(':')[1] : undefined,\n  };\n};\n\nSDPUtils.writeCryptoKeyParams = function(keyParams) {\n  return keyParams.keyMethod + ':'\n    + keyParams.keySalt +\n    (keyParams.lifeTime ? '|' + keyParams.lifeTime : '') +\n    (keyParams.mkiValue && keyParams.mkiLength\n      ? '|' + keyParams.mkiValue + ':' + keyParams.mkiLength\n      : '');\n};\n\n// Extracts all SDES parameters.\nSDPUtils.getCryptoParameters = function(mediaSection, sessionpart) {\n  const lines = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=crypto:');\n  return lines.map(SDPUtils.parseCryptoLine);\n};\n\n// Parses ICE information from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the ice-ufrag and ice-pwd lines as input.\nSDPUtils.getIceParameters = function(mediaSection, sessionpart) {\n  const ufrag = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=ice-ufrag:')[0];\n  const pwd = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=ice-pwd:')[0];\n  if (!(ufrag && pwd)) {\n    return null;\n  }\n  return {\n    usernameFragment: ufrag.substr(12),\n    password: pwd.substr(10),\n  };\n};\n\n// Serializes ICE parameters to SDP.\nSDPUtils.writeIceParameters = function(params) {\n  let sdp = 'a=ice-ufrag:' + params.usernameFragment + '\\r\\n' +\n      'a=ice-pwd:' + params.password + '\\r\\n';\n  if (params.iceLite) {\n    sdp += 'a=ice-lite\\r\\n';\n  }\n  return sdp;\n};\n\n// Parses the SDP media section and returns RTCRtpParameters.\nSDPUtils.parseRtpParameters = function(mediaSection) {\n  const description = {\n    codecs: [],\n    headerExtensions: [],\n    fecMechanisms: [],\n    rtcp: [],\n  };\n  const lines = SDPUtils.splitLines(mediaSection);\n  const mline = lines[0].split(' ');\n  for (let i = 3; i < mline.length; i++) { // find all codecs from mline[3..]\n    const pt = mline[i];\n    const rtpmapline = SDPUtils.matchPrefix(\n      mediaSection, 'a=rtpmap:' + pt + ' ')[0];\n    if (rtpmapline) {\n      const codec = SDPUtils.parseRtpMap(rtpmapline);\n      const fmtps = SDPUtils.matchPrefix(\n        mediaSection, 'a=fmtp:' + pt + ' ');\n      // Only the first a=fmtp:<pt> is considered.\n      codec.parameters = fmtps.length ? SDPUtils.parseFmtp(fmtps[0]) : {};\n      codec.rtcpFeedback = SDPUtils.matchPrefix(\n        mediaSection, 'a=rtcp-fb:' + pt + ' ')\n        .map(SDPUtils.parseRtcpFb);\n      description.codecs.push(codec);\n      // parse FEC mechanisms from rtpmap lines.\n      switch (codec.name.toUpperCase()) {\n        case 'RED':\n        case 'ULPFEC':\n          description.fecMechanisms.push(codec.name.toUpperCase());\n          break;\n        default: // only RED and ULPFEC are recognized as FEC mechanisms.\n          break;\n      }\n    }\n  }\n  SDPUtils.matchPrefix(mediaSection, 'a=extmap:').forEach(line => {\n    description.headerExtensions.push(SDPUtils.parseExtmap(line));\n  });\n  // FIXME: parse rtcp.\n  return description;\n};\n\n// Generates parts of the SDP media section describing the capabilities /\n// parameters.\nSDPUtils.writeRtpDescription = function(kind, caps) {\n  let sdp = '';\n\n  // Build the mline.\n  sdp += 'm=' + kind + ' ';\n  sdp += caps.codecs.length > 0 ? '9' : '0'; // reject if no codecs.\n  sdp += ' UDP/TLS/RTP/SAVPF ';\n  sdp += caps.codecs.map(codec => {\n    if (codec.preferredPayloadType !== undefined) {\n      return codec.preferredPayloadType;\n    }\n    return codec.payloadType;\n  }).join(' ') + '\\r\\n';\n\n  sdp += 'c=IN IP4 0.0.0.0\\r\\n';\n  sdp += 'a=rtcp:9 IN IP4 0.0.0.0\\r\\n';\n\n  // Add a=rtpmap lines for each codec. Also fmtp and rtcp-fb.\n  caps.codecs.forEach(codec => {\n    sdp += SDPUtils.writeRtpMap(codec);\n    sdp += SDPUtils.writeFmtp(codec);\n    sdp += SDPUtils.writeRtcpFb(codec);\n  });\n  let maxptime = 0;\n  caps.codecs.forEach(codec => {\n    if (codec.maxptime > maxptime) {\n      maxptime = codec.maxptime;\n    }\n  });\n  if (maxptime > 0) {\n    sdp += 'a=maxptime:' + maxptime + '\\r\\n';\n  }\n\n  if (caps.headerExtensions) {\n    caps.headerExtensions.forEach(extension => {\n      sdp += SDPUtils.writeExtmap(extension);\n    });\n  }\n  // FIXME: write fecMechanisms.\n  return sdp;\n};\n\n// Parses the SDP media section and returns an array of\n// RTCRtpEncodingParameters.\nSDPUtils.parseRtpEncodingParameters = function(mediaSection) {\n  const encodingParameters = [];\n  const description = SDPUtils.parseRtpParameters(mediaSection);\n  const hasRed = description.fecMechanisms.indexOf('RED') !== -1;\n  const hasUlpfec = description.fecMechanisms.indexOf('ULPFEC') !== -1;\n\n  // filter a=ssrc:... cname:, ignore PlanB-msid\n  const ssrcs = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(line => SDPUtils.parseSsrcMedia(line))\n    .filter(parts => parts.attribute === 'cname');\n  const primarySsrc = ssrcs.length > 0 && ssrcs[0].ssrc;\n  let secondarySsrc;\n\n  const flows = SDPUtils.matchPrefix(mediaSection, 'a=ssrc-group:FID')\n    .map(line => {\n      const parts = line.substr(17).split(' ');\n      return parts.map(part => parseInt(part, 10));\n    });\n  if (flows.length > 0 && flows[0].length > 1 && flows[0][0] === primarySsrc) {\n    secondarySsrc = flows[0][1];\n  }\n\n  description.codecs.forEach(codec => {\n    if (codec.name.toUpperCase() === 'RTX' && codec.parameters.apt) {\n      let encParam = {\n        ssrc: primarySsrc,\n        codecPayloadType: parseInt(codec.parameters.apt, 10),\n      };\n      if (primarySsrc && secondarySsrc) {\n        encParam.rtx = {ssrc: secondarySsrc};\n      }\n      encodingParameters.push(encParam);\n      if (hasRed) {\n        encParam = JSON.parse(JSON.stringify(encParam));\n        encParam.fec = {\n          ssrc: primarySsrc,\n          mechanism: hasUlpfec ? 'red+ulpfec' : 'red',\n        };\n        encodingParameters.push(encParam);\n      }\n    }\n  });\n  if (encodingParameters.length === 0 && primarySsrc) {\n    encodingParameters.push({\n      ssrc: primarySsrc,\n    });\n  }\n\n  // we support both b=AS and b=TIAS but interpret AS as TIAS.\n  let bandwidth = SDPUtils.matchPrefix(mediaSection, 'b=');\n  if (bandwidth.length) {\n    if (bandwidth[0].indexOf('b=TIAS:') === 0) {\n      bandwidth = parseInt(bandwidth[0].substr(7), 10);\n    } else if (bandwidth[0].indexOf('b=AS:') === 0) {\n      // use formula from JSEP to convert b=AS to TIAS value.\n      bandwidth = parseInt(bandwidth[0].substr(5), 10) * 1000 * 0.95\n          - (50 * 40 * 8);\n    } else {\n      bandwidth = undefined;\n    }\n    encodingParameters.forEach(params => {\n      params.maxBitrate = bandwidth;\n    });\n  }\n  return encodingParameters;\n};\n\n// parses http://draft.ortc.org/#rtcrtcpparameters*\nSDPUtils.parseRtcpParameters = function(mediaSection) {\n  const rtcpParameters = {};\n\n  // Gets the first SSRC. Note that with RTX there might be multiple\n  // SSRCs.\n  const remoteSsrc = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(line => SDPUtils.parseSsrcMedia(line))\n    .filter(obj => obj.attribute === 'cname')[0];\n  if (remoteSsrc) {\n    rtcpParameters.cname = remoteSsrc.value;\n    rtcpParameters.ssrc = remoteSsrc.ssrc;\n  }\n\n  // Edge uses the compound attribute instead of reducedSize\n  // compound is !reducedSize\n  const rsize = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-rsize');\n  rtcpParameters.reducedSize = rsize.length > 0;\n  rtcpParameters.compound = rsize.length === 0;\n\n  // parses the rtcp-mux attrіbute.\n  // Note that Edge does not support unmuxed RTCP.\n  const mux = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-mux');\n  rtcpParameters.mux = mux.length > 0;\n\n  return rtcpParameters;\n};\n\nSDPUtils.writeRtcpParameters = function(rtcpParameters) {\n  let sdp = '';\n  if (rtcpParameters.reducedSize) {\n    sdp += 'a=rtcp-rsize\\r\\n';\n  }\n  if (rtcpParameters.mux) {\n    sdp += 'a=rtcp-mux\\r\\n';\n  }\n  if (rtcpParameters.ssrc !== undefined && rtcpParameters.cname) {\n    sdp += 'a=ssrc:' + rtcpParameters.ssrc +\n      ' cname:' + rtcpParameters.cname + '\\r\\n';\n  }\n  return sdp;\n};\n\n\n// parses either a=msid: or a=ssrc:... msid lines and returns\n// the id of the MediaStream and MediaStreamTrack.\nSDPUtils.parseMsid = function(mediaSection) {\n  let parts;\n  const spec = SDPUtils.matchPrefix(mediaSection, 'a=msid:');\n  if (spec.length === 1) {\n    parts = spec[0].substr(7).split(' ');\n    return {stream: parts[0], track: parts[1]};\n  }\n  const planB = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(line => SDPUtils.parseSsrcMedia(line))\n    .filter(msidParts => msidParts.attribute === 'msid');\n  if (planB.length > 0) {\n    parts = planB[0].value.split(' ');\n    return {stream: parts[0], track: parts[1]};\n  }\n};\n\n// SCTP\n// parses draft-ietf-mmusic-sctp-sdp-26 first and falls back\n// to draft-ietf-mmusic-sctp-sdp-05\nSDPUtils.parseSctpDescription = function(mediaSection) {\n  const mline = SDPUtils.parseMLine(mediaSection);\n  const maxSizeLine = SDPUtils.matchPrefix(mediaSection, 'a=max-message-size:');\n  let maxMessageSize;\n  if (maxSizeLine.length > 0) {\n    maxMessageSize = parseInt(maxSizeLine[0].substr(19), 10);\n  }\n  if (isNaN(maxMessageSize)) {\n    maxMessageSize = 65536;\n  }\n  const sctpPort = SDPUtils.matchPrefix(mediaSection, 'a=sctp-port:');\n  if (sctpPort.length > 0) {\n    return {\n      port: parseInt(sctpPort[0].substr(12), 10),\n      protocol: mline.fmt,\n      maxMessageSize,\n    };\n  }\n  const sctpMapLines = SDPUtils.matchPrefix(mediaSection, 'a=sctpmap:');\n  if (sctpMapLines.length > 0) {\n    const parts = sctpMapLines[0]\n      .substr(10)\n      .split(' ');\n    return {\n      port: parseInt(parts[0], 10),\n      protocol: parts[1],\n      maxMessageSize,\n    };\n  }\n};\n\n// SCTP\n// outputs the draft-ietf-mmusic-sctp-sdp-26 version that all browsers\n// support by now receiving in this format, unless we originally parsed\n// as the draft-ietf-mmusic-sctp-sdp-05 format (indicated by the m-line\n// protocol of DTLS/SCTP -- without UDP/ or TCP/)\nSDPUtils.writeSctpDescription = function(media, sctp) {\n  let output = [];\n  if (media.protocol !== 'DTLS/SCTP') {\n    output = [\n      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.protocol + '\\r\\n',\n      'c=IN IP4 0.0.0.0\\r\\n',\n      'a=sctp-port:' + sctp.port + '\\r\\n',\n    ];\n  } else {\n    output = [\n      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.port + '\\r\\n',\n      'c=IN IP4 0.0.0.0\\r\\n',\n      'a=sctpmap:' + sctp.port + ' ' + sctp.protocol + ' 65535\\r\\n',\n    ];\n  }\n  if (sctp.maxMessageSize !== undefined) {\n    output.push('a=max-message-size:' + sctp.maxMessageSize + '\\r\\n');\n  }\n  return output.join('');\n};\n\n// Generate a session ID for SDP.\n// https://tools.ietf.org/html/draft-ietf-rtcweb-jsep-20#section-5.2.1\n// recommends using a cryptographically random +ve 64-bit value\n// but right now this should be acceptable and within the right range\nSDPUtils.generateSessionId = function() {\n  return Math.random().toString().substr(2, 21);\n};\n\n// Write boiler plate for start of SDP\n// sessId argument is optional - if not supplied it will\n// be generated randomly\n// sessVersion is optional and defaults to 2\n// sessUser is optional and defaults to 'thisisadapterortc'\nSDPUtils.writeSessionBoilerplate = function(sessId, sessVer, sessUser) {\n  let sessionId;\n  const version = sessVer !== undefined ? sessVer : 2;\n  if (sessId) {\n    sessionId = sessId;\n  } else {\n    sessionId = SDPUtils.generateSessionId();\n  }\n  const user = sessUser || 'thisisadapterortc';\n  // FIXME: sess-id should be an NTP timestamp.\n  return 'v=0\\r\\n' +\n      'o=' + user + ' ' + sessionId + ' ' + version +\n        ' IN IP4 127.0.0.1\\r\\n' +\n      's=-\\r\\n' +\n      't=0 0\\r\\n';\n};\n\n// Gets the direction from the mediaSection or the sessionpart.\nSDPUtils.getDirection = function(mediaSection, sessionpart) {\n  // Look for sendrecv, sendonly, recvonly, inactive, default to sendrecv.\n  const lines = SDPUtils.splitLines(mediaSection);\n  for (let i = 0; i < lines.length; i++) {\n    switch (lines[i]) {\n      case 'a=sendrecv':\n      case 'a=sendonly':\n      case 'a=recvonly':\n      case 'a=inactive':\n        return lines[i].substr(2);\n      default:\n        // FIXME: What should happen here?\n    }\n  }\n  if (sessionpart) {\n    return SDPUtils.getDirection(sessionpart);\n  }\n  return 'sendrecv';\n};\n\nSDPUtils.getKind = function(mediaSection) {\n  const lines = SDPUtils.splitLines(mediaSection);\n  const mline = lines[0].split(' ');\n  return mline[0].substr(2);\n};\n\nSDPUtils.isRejected = function(mediaSection) {\n  return mediaSection.split(' ', 2)[1] === '0';\n};\n\nSDPUtils.parseMLine = function(mediaSection) {\n  const lines = SDPUtils.splitLines(mediaSection);\n  const parts = lines[0].substr(2).split(' ');\n  return {\n    kind: parts[0],\n    port: parseInt(parts[1], 10),\n    protocol: parts[2],\n    fmt: parts.slice(3).join(' '),\n  };\n};\n\nSDPUtils.parseOLine = function(mediaSection) {\n  const line = SDPUtils.matchPrefix(mediaSection, 'o=')[0];\n  const parts = line.substr(2).split(' ');\n  return {\n    username: parts[0],\n    sessionId: parts[1],\n    sessionVersion: parseInt(parts[2], 10),\n    netType: parts[3],\n    addressType: parts[4],\n    address: parts[5],\n  };\n};\n\n// a very naive interpretation of a valid SDP.\nSDPUtils.isValidSDP = function(blob) {\n  if (typeof blob !== 'string' || blob.length === 0) {\n    return false;\n  }\n  const lines = SDPUtils.splitLines(blob);\n  for (let i = 0; i < lines.length; i++) {\n    if (lines[i].length < 2 || lines[i].charAt(1) !== '=') {\n      return false;\n    }\n    // TODO: check the modifier a bit more.\n  }\n  return true;\n};\n\n// Expose public methods.\nif (typeof module === 'object') {\n  module.exports = SDPUtils;\n}\n","(function (global, factory) {\n            typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n            typeof define === 'function' && define.amd ? define(factory) :\n            (global = global || self, global.strophe = factory());\n}(this, function () { 'use strict';\n\n            var global$1 = (typeof global !== \"undefined\" ? global :\n                        typeof self !== \"undefined\" ? self :\n                        typeof window !== \"undefined\" ? window : {});\n\n            function _typeof(obj) {\n              if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n                _typeof = function (obj) {\n                  return typeof obj;\n                };\n              } else {\n                _typeof = function (obj) {\n                  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n                };\n              }\n\n              return _typeof(obj);\n            }\n\n            function _toConsumableArray(arr) {\n              return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n            }\n\n            function _arrayWithoutHoles(arr) {\n              if (Array.isArray(arr)) {\n                for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n                return arr2;\n              }\n            }\n\n            function _iterableToArray(iter) {\n              if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n            }\n\n            function _nonIterableSpread() {\n              throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n            }\n\n            /*\n             * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n             * Digest Algorithm, as defined in RFC 1321.\n             * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.\n             * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n             * Distributed under the BSD License\n             * See http://pajhome.org.uk/crypt/md5 for more info.\n             */\n\n            /*\n             * Everything that isn't used by Strophe has been stripped here!\n             */\n\n            /*\n             * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n             * to work around bugs in some JS interpreters.\n             */\n            var safe_add = function safe_add(x, y) {\n              var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n              var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n              return msw << 16 | lsw & 0xFFFF;\n            };\n            /*\n             * Bitwise rotate a 32-bit number to the left.\n             */\n\n\n            var bit_rol = function bit_rol(num, cnt) {\n              return num << cnt | num >>> 32 - cnt;\n            };\n            /*\n             * Convert a string to an array of little-endian words\n             */\n\n\n            var str2binl = function str2binl(str) {\n              if (typeof str !== \"string\") {\n                throw new Error(\"str2binl was passed a non-string\");\n              }\n\n              var bin = [];\n\n              for (var i = 0; i < str.length * 8; i += 8) {\n                bin[i >> 5] |= (str.charCodeAt(i / 8) & 255) << i % 32;\n              }\n\n              return bin;\n            };\n            /*\n             * Convert an array of little-endian words to a string\n             */\n\n\n            var binl2str = function binl2str(bin) {\n              var str = \"\";\n\n              for (var i = 0; i < bin.length * 32; i += 8) {\n                str += String.fromCharCode(bin[i >> 5] >>> i % 32 & 255);\n              }\n\n              return str;\n            };\n            /*\n             * Convert an array of little-endian words to a hex string.\n             */\n\n\n            var binl2hex = function binl2hex(binarray) {\n              var hex_tab = \"0123456789abcdef\";\n              var str = \"\";\n\n              for (var i = 0; i < binarray.length * 4; i++) {\n                str += hex_tab.charAt(binarray[i >> 2] >> i % 4 * 8 + 4 & 0xF) + hex_tab.charAt(binarray[i >> 2] >> i % 4 * 8 & 0xF);\n              }\n\n              return str;\n            };\n            /*\n             * These functions implement the four basic operations the algorithm uses.\n             */\n\n\n            var md5_cmn = function md5_cmn(q, a, b, x, s, t) {\n              return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s), b);\n            };\n\n            var md5_ff = function md5_ff(a, b, c, d, x, s, t) {\n              return md5_cmn(b & c | ~b & d, a, b, x, s, t);\n            };\n\n            var md5_gg = function md5_gg(a, b, c, d, x, s, t) {\n              return md5_cmn(b & d | c & ~d, a, b, x, s, t);\n            };\n\n            var md5_hh = function md5_hh(a, b, c, d, x, s, t) {\n              return md5_cmn(b ^ c ^ d, a, b, x, s, t);\n            };\n\n            var md5_ii = function md5_ii(a, b, c, d, x, s, t) {\n              return md5_cmn(c ^ (b | ~d), a, b, x, s, t);\n            };\n            /*\n             * Calculate the MD5 of an array of little-endian words, and a bit length\n             */\n\n\n            var core_md5 = function core_md5(x, len) {\n              /* append padding */\n              x[len >> 5] |= 0x80 << len % 32;\n              x[(len + 64 >>> 9 << 4) + 14] = len;\n              var a = 1732584193;\n              var b = -271733879;\n              var c = -1732584194;\n              var d = 271733878;\n              var olda, oldb, oldc, oldd;\n\n              for (var i = 0; i < x.length; i += 16) {\n                olda = a;\n                oldb = b;\n                oldc = c;\n                oldd = d;\n                a = md5_ff(a, b, c, d, x[i + 0], 7, -680876936);\n                d = md5_ff(d, a, b, c, x[i + 1], 12, -389564586);\n                c = md5_ff(c, d, a, b, x[i + 2], 17, 606105819);\n                b = md5_ff(b, c, d, a, x[i + 3], 22, -1044525330);\n                a = md5_ff(a, b, c, d, x[i + 4], 7, -176418897);\n                d = md5_ff(d, a, b, c, x[i + 5], 12, 1200080426);\n                c = md5_ff(c, d, a, b, x[i + 6], 17, -1473231341);\n                b = md5_ff(b, c, d, a, x[i + 7], 22, -45705983);\n                a = md5_ff(a, b, c, d, x[i + 8], 7, 1770035416);\n                d = md5_ff(d, a, b, c, x[i + 9], 12, -1958414417);\n                c = md5_ff(c, d, a, b, x[i + 10], 17, -42063);\n                b = md5_ff(b, c, d, a, x[i + 11], 22, -1990404162);\n                a = md5_ff(a, b, c, d, x[i + 12], 7, 1804603682);\n                d = md5_ff(d, a, b, c, x[i + 13], 12, -40341101);\n                c = md5_ff(c, d, a, b, x[i + 14], 17, -1502002290);\n                b = md5_ff(b, c, d, a, x[i + 15], 22, 1236535329);\n                a = md5_gg(a, b, c, d, x[i + 1], 5, -165796510);\n                d = md5_gg(d, a, b, c, x[i + 6], 9, -1069501632);\n                c = md5_gg(c, d, a, b, x[i + 11], 14, 643717713);\n                b = md5_gg(b, c, d, a, x[i + 0], 20, -373897302);\n                a = md5_gg(a, b, c, d, x[i + 5], 5, -701558691);\n                d = md5_gg(d, a, b, c, x[i + 10], 9, 38016083);\n                c = md5_gg(c, d, a, b, x[i + 15], 14, -660478335);\n                b = md5_gg(b, c, d, a, x[i + 4], 20, -405537848);\n                a = md5_gg(a, b, c, d, x[i + 9], 5, 568446438);\n                d = md5_gg(d, a, b, c, x[i + 14], 9, -1019803690);\n                c = md5_gg(c, d, a, b, x[i + 3], 14, -187363961);\n                b = md5_gg(b, c, d, a, x[i + 8], 20, 1163531501);\n                a = md5_gg(a, b, c, d, x[i + 13], 5, -1444681467);\n                d = md5_gg(d, a, b, c, x[i + 2], 9, -51403784);\n                c = md5_gg(c, d, a, b, x[i + 7], 14, 1735328473);\n                b = md5_gg(b, c, d, a, x[i + 12], 20, -1926607734);\n                a = md5_hh(a, b, c, d, x[i + 5], 4, -378558);\n                d = md5_hh(d, a, b, c, x[i + 8], 11, -2022574463);\n                c = md5_hh(c, d, a, b, x[i + 11], 16, 1839030562);\n                b = md5_hh(b, c, d, a, x[i + 14], 23, -35309556);\n                a = md5_hh(a, b, c, d, x[i + 1], 4, -1530992060);\n                d = md5_hh(d, a, b, c, x[i + 4], 11, 1272893353);\n                c = md5_hh(c, d, a, b, x[i + 7], 16, -155497632);\n                b = md5_hh(b, c, d, a, x[i + 10], 23, -1094730640);\n                a = md5_hh(a, b, c, d, x[i + 13], 4, 681279174);\n                d = md5_hh(d, a, b, c, x[i + 0], 11, -358537222);\n                c = md5_hh(c, d, a, b, x[i + 3], 16, -722521979);\n                b = md5_hh(b, c, d, a, x[i + 6], 23, 76029189);\n                a = md5_hh(a, b, c, d, x[i + 9], 4, -640364487);\n                d = md5_hh(d, a, b, c, x[i + 12], 11, -421815835);\n                c = md5_hh(c, d, a, b, x[i + 15], 16, 530742520);\n                b = md5_hh(b, c, d, a, x[i + 2], 23, -995338651);\n                a = md5_ii(a, b, c, d, x[i + 0], 6, -198630844);\n                d = md5_ii(d, a, b, c, x[i + 7], 10, 1126891415);\n                c = md5_ii(c, d, a, b, x[i + 14], 15, -1416354905);\n                b = md5_ii(b, c, d, a, x[i + 5], 21, -57434055);\n                a = md5_ii(a, b, c, d, x[i + 12], 6, 1700485571);\n                d = md5_ii(d, a, b, c, x[i + 3], 10, -1894986606);\n                c = md5_ii(c, d, a, b, x[i + 10], 15, -1051523);\n                b = md5_ii(b, c, d, a, x[i + 1], 21, -2054922799);\n                a = md5_ii(a, b, c, d, x[i + 8], 6, 1873313359);\n                d = md5_ii(d, a, b, c, x[i + 15], 10, -30611744);\n                c = md5_ii(c, d, a, b, x[i + 6], 15, -1560198380);\n                b = md5_ii(b, c, d, a, x[i + 13], 21, 1309151649);\n                a = md5_ii(a, b, c, d, x[i + 4], 6, -145523070);\n                d = md5_ii(d, a, b, c, x[i + 11], 10, -1120210379);\n                c = md5_ii(c, d, a, b, x[i + 2], 15, 718787259);\n                b = md5_ii(b, c, d, a, x[i + 9], 21, -343485551);\n                a = safe_add(a, olda);\n                b = safe_add(b, oldb);\n                c = safe_add(c, oldc);\n                d = safe_add(d, oldd);\n              }\n\n              return [a, b, c, d];\n            };\n            /*\n             * These are the functions you'll usually want to call.\n             * They take string arguments and return either hex or base-64 encoded\n             * strings.\n             */\n\n\n            var MD5 = {\n              hexdigest: function hexdigest(s) {\n                return binl2hex(core_md5(str2binl(s), s.length * 8));\n              },\n              hash: function hash(s) {\n                return binl2str(core_md5(str2binl(s), s.length * 8));\n              }\n            };\n\n            /*\n             * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined\n             * in FIPS PUB 180-1\n             * Version 2.1a Copyright Paul Johnston 2000 - 2002.\n             * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n             * Distributed under the BSD License\n             * See http://pajhome.org.uk/crypt/md5 for details.\n             */\n\n            /* global define */\n\n            /* Some functions and variables have been stripped for use with Strophe */\n\n            /*\n             * Calculate the SHA-1 of an array of big-endian words, and a bit length\n             */\n            function core_sha1(x, len) {\n              /* append padding */\n              x[len >> 5] |= 0x80 << 24 - len % 32;\n              x[(len + 64 >> 9 << 4) + 15] = len;\n              var w = new Array(80);\n              var a = 1732584193;\n              var b = -271733879;\n              var c = -1732584194;\n              var d = 271733878;\n              var e = -1009589776;\n              var i, j, t, olda, oldb, oldc, oldd, olde;\n\n              for (i = 0; i < x.length; i += 16) {\n                olda = a;\n                oldb = b;\n                oldc = c;\n                oldd = d;\n                olde = e;\n\n                for (j = 0; j < 80; j++) {\n                  if (j < 16) {\n                    w[j] = x[i + j];\n                  } else {\n                    w[j] = rol(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);\n                  }\n\n                  t = safe_add$1(safe_add$1(rol(a, 5), sha1_ft(j, b, c, d)), safe_add$1(safe_add$1(e, w[j]), sha1_kt(j)));\n                  e = d;\n                  d = c;\n                  c = rol(b, 30);\n                  b = a;\n                  a = t;\n                }\n\n                a = safe_add$1(a, olda);\n                b = safe_add$1(b, oldb);\n                c = safe_add$1(c, oldc);\n                d = safe_add$1(d, oldd);\n                e = safe_add$1(e, olde);\n              }\n\n              return [a, b, c, d, e];\n            }\n            /*\n             * Perform the appropriate triplet combination function for the current\n             * iteration\n             */\n\n\n            function sha1_ft(t, b, c, d) {\n              if (t < 20) {\n                return b & c | ~b & d;\n              }\n\n              if (t < 40) {\n                return b ^ c ^ d;\n              }\n\n              if (t < 60) {\n                return b & c | b & d | c & d;\n              }\n\n              return b ^ c ^ d;\n            }\n            /*\n             * Determine the appropriate additive constant for the current iteration\n             */\n\n\n            function sha1_kt(t) {\n              return t < 20 ? 1518500249 : t < 40 ? 1859775393 : t < 60 ? -1894007588 : -899497514;\n            }\n            /*\n             * Calculate the HMAC-SHA1 of a key and some data\n             */\n\n\n            function core_hmac_sha1(key, data) {\n              var bkey = str2binb(key);\n\n              if (bkey.length > 16) {\n                bkey = core_sha1(bkey, key.length * 8);\n              }\n\n              var ipad = new Array(16),\n                  opad = new Array(16);\n\n              for (var i = 0; i < 16; i++) {\n                ipad[i] = bkey[i] ^ 0x36363636;\n                opad[i] = bkey[i] ^ 0x5C5C5C5C;\n              }\n\n              var hash = core_sha1(ipad.concat(str2binb(data)), 512 + data.length * 8);\n              return core_sha1(opad.concat(hash), 512 + 160);\n            }\n            /*\n             * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n             * to work around bugs in some JS interpreters.\n             */\n\n\n            function safe_add$1(x, y) {\n              var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n              var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n              return msw << 16 | lsw & 0xFFFF;\n            }\n            /*\n             * Bitwise rotate a 32-bit number to the left.\n             */\n\n\n            function rol(num, cnt) {\n              return num << cnt | num >>> 32 - cnt;\n            }\n            /*\n             * Convert an 8-bit or 16-bit string to an array of big-endian words\n             * In 8-bit function, characters >255 have their hi-byte silently ignored.\n             */\n\n\n            function str2binb(str) {\n              var bin = [];\n              var mask = 255;\n\n              for (var i = 0; i < str.length * 8; i += 8) {\n                bin[i >> 5] |= (str.charCodeAt(i / 8) & mask) << 24 - i % 32;\n              }\n\n              return bin;\n            }\n            /*\n             * Convert an array of big-endian words to a base-64 string\n             */\n\n\n            function binb2b64(binarray) {\n              var tab = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n              var str = \"\";\n              var triplet, j;\n\n              for (var i = 0; i < binarray.length * 4; i += 3) {\n                triplet = (binarray[i >> 2] >> 8 * (3 - i % 4) & 0xFF) << 16 | (binarray[i + 1 >> 2] >> 8 * (3 - (i + 1) % 4) & 0xFF) << 8 | binarray[i + 2 >> 2] >> 8 * (3 - (i + 2) % 4) & 0xFF;\n\n                for (j = 0; j < 4; j++) {\n                  if (i * 8 + j * 6 > binarray.length * 32) {\n                    str += \"=\";\n                  } else {\n                    str += tab.charAt(triplet >> 6 * (3 - j) & 0x3F);\n                  }\n                }\n              }\n\n              return str;\n            }\n            /*\n             * Convert an array of big-endian words to a string\n             */\n\n\n            function binb2str(bin) {\n              var str = \"\";\n              var mask = 255;\n\n              for (var i = 0; i < bin.length * 32; i += 8) {\n                str += String.fromCharCode(bin[i >> 5] >>> 24 - i % 32 & mask);\n              }\n\n              return str;\n            }\n            /*\n             * These are the functions you'll usually want to call\n             * They take string arguments and return either hex or base-64 encoded strings\n             */\n\n\n            var SHA1 = {\n              b64_hmac_sha1: function b64_hmac_sha1(key, data) {\n                return binb2b64(core_hmac_sha1(key, data));\n              },\n              b64_sha1: function b64_sha1(s) {\n                return binb2b64(core_sha1(str2binb(s), s.length * 8));\n              },\n              binb2str: binb2str,\n              core_hmac_sha1: core_hmac_sha1,\n              str_hmac_sha1: function str_hmac_sha1(key, data) {\n                return binb2str(core_hmac_sha1(key, data));\n              },\n              str_sha1: function str_sha1(s) {\n                return binb2str(core_sha1(str2binb(s), s.length * 8));\n              }\n            };\n\n            var utils = {\n              utf16to8: function utf16to8(str) {\n                var i, c;\n                var out = \"\";\n                var len = str.length;\n\n                for (i = 0; i < len; i++) {\n                  c = str.charCodeAt(i);\n\n                  if (c >= 0x0000 && c <= 0x007F) {\n                    out += str.charAt(i);\n                  } else if (c > 0x07FF) {\n                    out += String.fromCharCode(0xE0 | c >> 12 & 0x0F);\n                    out += String.fromCharCode(0x80 | c >> 6 & 0x3F);\n                    out += String.fromCharCode(0x80 | c >> 0 & 0x3F);\n                  } else {\n                    out += String.fromCharCode(0xC0 | c >> 6 & 0x1F);\n                    out += String.fromCharCode(0x80 | c >> 0 & 0x3F);\n                  }\n                }\n\n                return out;\n              },\n              addCookies: function addCookies(cookies) {\n                /* Parameters:\n                 *  (Object) cookies - either a map of cookie names\n                 *    to string values or to maps of cookie values.\n                 *\n                 * For example:\n                 * { \"myCookie\": \"1234\" }\n                 *\n                 * or:\n                 * { \"myCookie\": {\n                 *      \"value\": \"1234\",\n                 *      \"domain\": \".example.org\",\n                 *      \"path\": \"/\",\n                 *      \"expires\": expirationDate\n                 *      }\n                 *  }\n                 *\n                 *  These values get passed to Strophe.Connection via\n                 *   options.cookies\n                 */\n                cookies = cookies || {};\n\n                for (var cookieName in cookies) {\n                  if (Object.prototype.hasOwnProperty.call(cookies, cookieName)) {\n                    var expires = '';\n                    var domain = '';\n                    var path = '';\n                    var cookieObj = cookies[cookieName];\n                    var isObj = _typeof(cookieObj) === \"object\";\n                    var cookieValue = escape(unescape(isObj ? cookieObj.value : cookieObj));\n\n                    if (isObj) {\n                      expires = cookieObj.expires ? \";expires=\" + cookieObj.expires : '';\n                      domain = cookieObj.domain ? \";domain=\" + cookieObj.domain : '';\n                      path = cookieObj.path ? \";path=\" + cookieObj.path : '';\n                    }\n\n                    document.cookie = cookieName + '=' + cookieValue + expires + domain + path;\n                  }\n                }\n              }\n            };\n\n            /** Function: $build\n             *  Create a Strophe.Builder.\n             *  This is an alias for 'new Strophe.Builder(name, attrs)'.\n             *\n             *  Parameters:\n             *    (String) name - The root element name.\n             *    (Object) attrs - The attributes for the root element in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n            function $build(name, attrs) {\n              return new Strophe.Builder(name, attrs);\n            }\n            /** Function: $msg\n             *  Create a Strophe.Builder with a <message/> element as the root.\n             *\n             *  Parameters:\n             *    (Object) attrs - The <message/> element attributes in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n\n            function $msg(attrs) {\n              return new Strophe.Builder(\"message\", attrs);\n            }\n            /** Function: $iq\n             *  Create a Strophe.Builder with an <iq/> element as the root.\n             *\n             *  Parameters:\n             *    (Object) attrs - The <iq/> element attributes in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n\n            function $iq(attrs) {\n              return new Strophe.Builder(\"iq\", attrs);\n            }\n            /** Function: $pres\n             *  Create a Strophe.Builder with a <presence/> element as the root.\n             *\n             *  Parameters:\n             *    (Object) attrs - The <presence/> element attributes in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n\n            function $pres(attrs) {\n              return new Strophe.Builder(\"presence\", attrs);\n            }\n            /** Class: Strophe\n             *  An object container for all Strophe library functions.\n             *\n             *  This class is just a container for all the objects and constants\n             *  used in the library.  It is not meant to be instantiated, but to\n             *  provide a namespace for library objects, constants, and functions.\n             */\n\n\n            var Strophe = {\n              /** Constant: VERSION */\n              VERSION: \"@VERSION@\",\n\n              /** Constants: XMPP Namespace Constants\n               *  Common namespace constants from the XMPP RFCs and XEPs.\n               *\n               *  NS.HTTPBIND - HTTP BIND namespace from XEP 124.\n               *  NS.BOSH - BOSH namespace from XEP 206.\n               *  NS.CLIENT - Main XMPP client namespace.\n               *  NS.AUTH - Legacy authentication namespace.\n               *  NS.ROSTER - Roster operations namespace.\n               *  NS.PROFILE - Profile namespace.\n               *  NS.DISCO_INFO - Service discovery info namespace from XEP 30.\n               *  NS.DISCO_ITEMS - Service discovery items namespace from XEP 30.\n               *  NS.MUC - Multi-User Chat namespace from XEP 45.\n               *  NS.SASL - XMPP SASL namespace from RFC 3920.\n               *  NS.STREAM - XMPP Streams namespace from RFC 3920.\n               *  NS.BIND - XMPP Binding namespace from RFC 3920 and RFC 6120.\n               *  NS.SESSION - XMPP Session namespace from RFC 3920.\n               *  NS.XHTML_IM - XHTML-IM namespace from XEP 71.\n               *  NS.XHTML - XHTML body namespace from XEP 71.\n               */\n              NS: {\n                HTTPBIND: \"http://jabber.org/protocol/httpbind\",\n                BOSH: \"urn:xmpp:xbosh\",\n                CLIENT: \"jabber:client\",\n                AUTH: \"jabber:iq:auth\",\n                ROSTER: \"jabber:iq:roster\",\n                PROFILE: \"jabber:iq:profile\",\n                DISCO_INFO: \"http://jabber.org/protocol/disco#info\",\n                DISCO_ITEMS: \"http://jabber.org/protocol/disco#items\",\n                MUC: \"http://jabber.org/protocol/muc\",\n                SASL: \"urn:ietf:params:xml:ns:xmpp-sasl\",\n                STREAM: \"http://etherx.jabber.org/streams\",\n                FRAMING: \"urn:ietf:params:xml:ns:xmpp-framing\",\n                BIND: \"urn:ietf:params:xml:ns:xmpp-bind\",\n                SESSION: \"urn:ietf:params:xml:ns:xmpp-session\",\n                VERSION: \"jabber:iq:version\",\n                STANZAS: \"urn:ietf:params:xml:ns:xmpp-stanzas\",\n                XHTML_IM: \"http://jabber.org/protocol/xhtml-im\",\n                XHTML: \"http://www.w3.org/1999/xhtml\"\n              },\n\n              /** Constants: XHTML_IM Namespace\n               *  contains allowed tags, tag attributes, and css properties.\n               *  Used in the createHtml function to filter incoming html into the allowed XHTML-IM subset.\n               *  See http://xmpp.org/extensions/xep-0071.html#profile-summary for the list of recommended\n               *  allowed tags and their attributes.\n               */\n              XHTML: {\n                tags: ['a', 'blockquote', 'br', 'cite', 'em', 'img', 'li', 'ol', 'p', 'span', 'strong', 'ul', 'body'],\n                attributes: {\n                  'a': ['href'],\n                  'blockquote': ['style'],\n                  'br': [],\n                  'cite': ['style'],\n                  'em': [],\n                  'img': ['src', 'alt', 'style', 'height', 'width'],\n                  'li': ['style'],\n                  'ol': ['style'],\n                  'p': ['style'],\n                  'span': ['style'],\n                  'strong': [],\n                  'ul': ['style'],\n                  'body': []\n                },\n                css: ['background-color', 'color', 'font-family', 'font-size', 'font-style', 'font-weight', 'margin-left', 'margin-right', 'text-align', 'text-decoration'],\n\n                /** Function: XHTML.validTag\n                 *\n                 * Utility method to determine whether a tag is allowed\n                 * in the XHTML_IM namespace.\n                 *\n                 * XHTML tag names are case sensitive and must be lower case.\n                 */\n                validTag: function validTag(tag) {\n                  for (var i = 0; i < Strophe.XHTML.tags.length; i++) {\n                    if (tag === Strophe.XHTML.tags[i]) {\n                      return true;\n                    }\n                  }\n\n                  return false;\n                },\n\n                /** Function: XHTML.validAttribute\n                 *\n                 * Utility method to determine whether an attribute is allowed\n                 * as recommended per XEP-0071\n                 *\n                 * XHTML attribute names are case sensitive and must be lower case.\n                 */\n                validAttribute: function validAttribute(tag, attribute) {\n                  if (typeof Strophe.XHTML.attributes[tag] !== 'undefined' && Strophe.XHTML.attributes[tag].length > 0) {\n                    for (var i = 0; i < Strophe.XHTML.attributes[tag].length; i++) {\n                      if (attribute === Strophe.XHTML.attributes[tag][i]) {\n                        return true;\n                      }\n                    }\n                  }\n\n                  return false;\n                },\n                validCSS: function validCSS(style) {\n                  for (var i = 0; i < Strophe.XHTML.css.length; i++) {\n                    if (style === Strophe.XHTML.css[i]) {\n                      return true;\n                    }\n                  }\n\n                  return false;\n                }\n              },\n\n              /** Constants: Connection Status Constants\n               *  Connection status constants for use by the connection handler\n               *  callback.\n               *\n               *  Status.ERROR - An error has occurred\n               *  Status.CONNECTING - The connection is currently being made\n               *  Status.CONNFAIL - The connection attempt failed\n               *  Status.AUTHENTICATING - The connection is authenticating\n               *  Status.AUTHFAIL - The authentication attempt failed\n               *  Status.CONNECTED - The connection has succeeded\n               *  Status.DISCONNECTED - The connection has been terminated\n               *  Status.DISCONNECTING - The connection is currently being terminated\n               *  Status.ATTACHED - The connection has been attached\n               *  Status.REDIRECT - The connection has been redirected\n               *  Status.CONNTIMEOUT - The connection has timed out\n               */\n              Status: {\n                ERROR: 0,\n                CONNECTING: 1,\n                CONNFAIL: 2,\n                AUTHENTICATING: 3,\n                AUTHFAIL: 4,\n                CONNECTED: 5,\n                DISCONNECTED: 6,\n                DISCONNECTING: 7,\n                ATTACHED: 8,\n                REDIRECT: 9,\n                CONNTIMEOUT: 10,\n                BINDREQUIRED: 11\n              },\n              ErrorCondition: {\n                BAD_FORMAT: \"bad-format\",\n                CONFLICT: \"conflict\",\n                MISSING_JID_NODE: \"x-strophe-bad-non-anon-jid\",\n                NO_AUTH_MECH: \"no-auth-mech\",\n                UNKNOWN_REASON: \"unknown\"\n              },\n\n              /** Constants: Log Level Constants\n               *  Logging level indicators.\n               *\n               *  LogLevel.DEBUG - Debug output\n               *  LogLevel.INFO - Informational output\n               *  LogLevel.WARN - Warnings\n               *  LogLevel.ERROR - Errors\n               *  LogLevel.FATAL - Fatal errors\n               */\n              LogLevel: {\n                DEBUG: 0,\n                INFO: 1,\n                WARN: 2,\n                ERROR: 3,\n                FATAL: 4\n              },\n\n              /** PrivateConstants: DOM Element Type Constants\n               *  DOM element types.\n               *\n               *  ElementType.NORMAL - Normal element.\n               *  ElementType.TEXT - Text data element.\n               *  ElementType.FRAGMENT - XHTML fragment element.\n               */\n              ElementType: {\n                NORMAL: 1,\n                TEXT: 3,\n                CDATA: 4,\n                FRAGMENT: 11\n              },\n\n              /** PrivateConstants: Timeout Values\n               *  Timeout values for error states.  These values are in seconds.\n               *  These should not be changed unless you know exactly what you are\n               *  doing.\n               *\n               *  TIMEOUT - Timeout multiplier. A waiting request will be considered\n               *      failed after Math.floor(TIMEOUT * wait) seconds have elapsed.\n               *      This defaults to 1.1, and with default wait, 66 seconds.\n               *  SECONDARY_TIMEOUT - Secondary timeout multiplier. In cases where\n               *      Strophe can detect early failure, it will consider the request\n               *      failed if it doesn't return after\n               *      Math.floor(SECONDARY_TIMEOUT * wait) seconds have elapsed.\n               *      This defaults to 0.1, and with default wait, 6 seconds.\n               */\n              TIMEOUT: 1.1,\n              SECONDARY_TIMEOUT: 0.1,\n\n              /** Function: addNamespace\n               *  This function is used to extend the current namespaces in\n               *  Strophe.NS.  It takes a key and a value with the key being the\n               *  name of the new namespace, with its actual value.\n               *  For example:\n               *  Strophe.addNamespace('PUBSUB', \"http://jabber.org/protocol/pubsub\");\n               *\n               *  Parameters:\n               *    (String) name - The name under which the namespace will be\n               *      referenced under Strophe.NS\n               *    (String) value - The actual namespace.\n               */\n              addNamespace: function addNamespace(name, value) {\n                Strophe.NS[name] = value;\n              },\n\n              /** Function: forEachChild\n               *  Map a function over some or all child elements of a given element.\n               *\n               *  This is a small convenience function for mapping a function over\n               *  some or all of the children of an element.  If elemName is null, all\n               *  children will be passed to the function, otherwise only children\n               *  whose tag names match elemName will be passed.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The element to operate on.\n               *    (String) elemName - The child element tag name filter.\n               *    (Function) func - The function to apply to each child.  This\n               *      function should take a single argument, a DOM element.\n               */\n              forEachChild: function forEachChild(elem, elemName, func) {\n                for (var i = 0; i < elem.childNodes.length; i++) {\n                  var childNode = elem.childNodes[i];\n\n                  if (childNode.nodeType === Strophe.ElementType.NORMAL && (!elemName || this.isTagEqual(childNode, elemName))) {\n                    func(childNode);\n                  }\n                }\n              },\n\n              /** Function: isTagEqual\n               *  Compare an element's tag name with a string.\n               *\n               *  This function is case sensitive.\n               *\n               *  Parameters:\n               *    (XMLElement) el - A DOM element.\n               *    (String) name - The element name.\n               *\n               *  Returns:\n               *    true if the element's tag name matches _el_, and false\n               *    otherwise.\n               */\n              isTagEqual: function isTagEqual(el, name) {\n                return el.tagName === name;\n              },\n\n              /** PrivateVariable: _xmlGenerator\n               *  _Private_ variable that caches a DOM document to\n               *  generate elements.\n               */\n              _xmlGenerator: null,\n\n              /** PrivateFunction: _makeGenerator\n               *  _Private_ function that creates a dummy XML DOM document to serve as\n               *  an element and text node generator.\n               */\n              _makeGenerator: function _makeGenerator() {\n                var doc; // IE9 does implement createDocument(); however, using it will cause the browser to leak memory on page unload.\n                // Here, we test for presence of createDocument() plus IE's proprietary documentMode attribute, which would be\n                // less than 10 in the case of IE9 and below.\n\n                if (document.implementation.createDocument === undefined || document.implementation.createDocument && document.documentMode && document.documentMode < 10) {\n                  doc = this._getIEXmlDom();\n                  doc.appendChild(doc.createElement('strophe'));\n                } else {\n                  doc = document.implementation.createDocument('jabber:client', 'strophe', null);\n                }\n\n                return doc;\n              },\n\n              /** Function: xmlGenerator\n               *  Get the DOM document to generate elements.\n               *\n               *  Returns:\n               *    The currently used DOM document.\n               */\n              xmlGenerator: function xmlGenerator() {\n                if (!Strophe._xmlGenerator) {\n                  Strophe._xmlGenerator = Strophe._makeGenerator();\n                }\n\n                return Strophe._xmlGenerator;\n              },\n\n              /** PrivateFunction: _getIEXmlDom\n               *  Gets IE xml doc object\n               *\n               *  Returns:\n               *    A Microsoft XML DOM Object\n               *  See Also:\n               *    http://msdn.microsoft.com/en-us/library/ms757837%28VS.85%29.aspx\n               */\n              _getIEXmlDom: function _getIEXmlDom() {\n                var doc = null;\n                var docStrings = [\"Msxml2.DOMDocument.6.0\", \"Msxml2.DOMDocument.5.0\", \"Msxml2.DOMDocument.4.0\", \"MSXML2.DOMDocument.3.0\", \"MSXML2.DOMDocument\", \"MSXML.DOMDocument\", \"Microsoft.XMLDOM\"];\n\n                for (var d = 0; d < docStrings.length; d++) {\n                  if (doc === null) {\n                    try {\n                      doc = new ActiveXObject(docStrings[d]);\n                    } catch (e) {\n                      doc = null;\n                    }\n                  } else {\n                    break;\n                  }\n                }\n\n                return doc;\n              },\n\n              /** Function: xmlElement\n               *  Create an XML DOM element.\n               *\n               *  This function creates an XML DOM element correctly across all\n               *  implementations. Note that these are not HTML DOM elements, which\n               *  aren't appropriate for XMPP stanzas.\n               *\n               *  Parameters:\n               *    (String) name - The name for the element.\n               *    (Array|Object) attrs - An optional array or object containing\n               *      key/value pairs to use as element attributes. The object should\n               *      be in the format {'key': 'value'} or {key: 'value'}. The array\n               *      should have the format [['key1', 'value1'], ['key2', 'value2']].\n               *    (String) text - The text child data for the element.\n               *\n               *  Returns:\n               *    A new XML DOM element.\n               */\n              xmlElement: function xmlElement(name) {\n                if (!name) {\n                  return null;\n                }\n\n                var node = Strophe.xmlGenerator().createElement(name); // FIXME: this should throw errors if args are the wrong type or\n                // there are more than two optional args\n\n                for (var a = 1; a < arguments.length; a++) {\n                  var arg = arguments[a];\n\n                  if (!arg) {\n                    continue;\n                  }\n\n                  if (typeof arg === \"string\" || typeof arg === \"number\") {\n                    node.appendChild(Strophe.xmlTextNode(arg));\n                  } else if (_typeof(arg) === \"object\" && typeof arg.sort === \"function\") {\n                    for (var i = 0; i < arg.length; i++) {\n                      var attr = arg[i];\n\n                      if (_typeof(attr) === \"object\" && typeof attr.sort === \"function\" && attr[1] !== undefined && attr[1] !== null) {\n                        node.setAttribute(attr[0], attr[1]);\n                      }\n                    }\n                  } else if (_typeof(arg) === \"object\") {\n                    for (var k in arg) {\n                      if (Object.prototype.hasOwnProperty.call(arg, k) && arg[k] !== undefined && arg[k] !== null) {\n                        node.setAttribute(k, arg[k]);\n                      }\n                    }\n                  }\n                }\n\n                return node;\n              },\n\n              /*  Function: xmlescape\n               *  Excapes invalid xml characters.\n               *\n               *  Parameters:\n               *     (String) text - text to escape.\n               *\n               *  Returns:\n               *      Escaped text.\n               */\n              xmlescape: function xmlescape(text) {\n                text = text.replace(/\\&/g, \"&amp;\");\n                text = text.replace(/</g, \"&lt;\");\n                text = text.replace(/>/g, \"&gt;\");\n                text = text.replace(/'/g, \"&apos;\");\n                text = text.replace(/\"/g, \"&quot;\");\n                return text;\n              },\n\n              /*  Function: xmlunescape\n              *  Unexcapes invalid xml characters.\n              *\n              *  Parameters:\n              *     (String) text - text to unescape.\n              *\n              *  Returns:\n              *      Unescaped text.\n              */\n              xmlunescape: function xmlunescape(text) {\n                text = text.replace(/\\&amp;/g, \"&\");\n                text = text.replace(/&lt;/g, \"<\");\n                text = text.replace(/&gt;/g, \">\");\n                text = text.replace(/&apos;/g, \"'\");\n                text = text.replace(/&quot;/g, \"\\\"\");\n                return text;\n              },\n\n              /** Function: xmlTextNode\n               *  Creates an XML DOM text node.\n               *\n               *  Provides a cross implementation version of document.createTextNode.\n               *\n               *  Parameters:\n               *    (String) text - The content of the text node.\n               *\n               *  Returns:\n               *    A new XML DOM text node.\n               */\n              xmlTextNode: function xmlTextNode(text) {\n                return Strophe.xmlGenerator().createTextNode(text);\n              },\n\n              /** Function: xmlHtmlNode\n               *  Creates an XML DOM html node.\n               *\n               *  Parameters:\n               *    (String) html - The content of the html node.\n               *\n               *  Returns:\n               *    A new XML DOM text node.\n               */\n              xmlHtmlNode: function xmlHtmlNode(html) {\n                var node; //ensure text is escaped\n\n                if (DOMParser) {\n                  var parser = new DOMParser();\n                  node = parser.parseFromString(html, \"text/xml\");\n                } else {\n                  node = new ActiveXObject(\"Microsoft.XMLDOM\");\n                  node.async = \"false\";\n                  node.loadXML(html);\n                }\n\n                return node;\n              },\n\n              /** Function: getText\n               *  Get the concatenation of all text children of an element.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    A String with the concatenated text of all text element children.\n               */\n              getText: function getText(elem) {\n                if (!elem) {\n                  return null;\n                }\n\n                var str = \"\";\n\n                if (elem.childNodes.length === 0 && elem.nodeType === Strophe.ElementType.TEXT) {\n                  str += elem.nodeValue;\n                }\n\n                for (var i = 0; i < elem.childNodes.length; i++) {\n                  if (elem.childNodes[i].nodeType === Strophe.ElementType.TEXT) {\n                    str += elem.childNodes[i].nodeValue;\n                  }\n                }\n\n                return Strophe.xmlescape(str);\n              },\n\n              /** Function: copyElement\n               *  Copy an XML DOM element.\n               *\n               *  This function copies a DOM element and all its descendants and returns\n               *  the new copy.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    A new, copied DOM element tree.\n               */\n              copyElement: function copyElement(elem) {\n                var el;\n\n                if (elem.nodeType === Strophe.ElementType.NORMAL) {\n                  el = Strophe.xmlElement(elem.tagName);\n\n                  for (var i = 0; i < elem.attributes.length; i++) {\n                    el.setAttribute(elem.attributes[i].nodeName, elem.attributes[i].value);\n                  }\n\n                  for (var _i = 0; _i < elem.childNodes.length; _i++) {\n                    el.appendChild(Strophe.copyElement(elem.childNodes[_i]));\n                  }\n                } else if (elem.nodeType === Strophe.ElementType.TEXT) {\n                  el = Strophe.xmlGenerator().createTextNode(elem.nodeValue);\n                }\n\n                return el;\n              },\n\n              /** Function: createHtml\n               *  Copy an HTML DOM element into an XML DOM.\n               *\n               *  This function copies a DOM element and all its descendants and returns\n               *  the new copy.\n               *\n               *  Parameters:\n               *    (HTMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    A new, copied DOM element tree.\n               */\n              createHtml: function createHtml(elem) {\n                var el;\n\n                if (elem.nodeType === Strophe.ElementType.NORMAL) {\n                  var tag = elem.nodeName.toLowerCase(); // XHTML tags must be lower case.\n\n                  if (Strophe.XHTML.validTag(tag)) {\n                    try {\n                      el = Strophe.xmlElement(tag);\n\n                      for (var i = 0; i < Strophe.XHTML.attributes[tag].length; i++) {\n                        var attribute = Strophe.XHTML.attributes[tag][i];\n                        var value = elem.getAttribute(attribute);\n\n                        if (typeof value === 'undefined' || value === null || value === '' || value === false || value === 0) {\n                          continue;\n                        }\n\n                        if (attribute === 'style' && _typeof(value) === 'object' && typeof value.cssText !== 'undefined') {\n                          value = value.cssText; // we're dealing with IE, need to get CSS out\n                        } // filter out invalid css styles\n\n\n                        if (attribute === 'style') {\n                          var css = [];\n                          var cssAttrs = value.split(';');\n\n                          for (var j = 0; j < cssAttrs.length; j++) {\n                            var attr = cssAttrs[j].split(':');\n                            var cssName = attr[0].replace(/^\\s*/, \"\").replace(/\\s*$/, \"\").toLowerCase();\n\n                            if (Strophe.XHTML.validCSS(cssName)) {\n                              var cssValue = attr[1].replace(/^\\s*/, \"\").replace(/\\s*$/, \"\");\n                              css.push(cssName + ': ' + cssValue);\n                            }\n                          }\n\n                          if (css.length > 0) {\n                            value = css.join('; ');\n                            el.setAttribute(attribute, value);\n                          }\n                        } else {\n                          el.setAttribute(attribute, value);\n                        }\n                      }\n\n                      for (var _i2 = 0; _i2 < elem.childNodes.length; _i2++) {\n                        el.appendChild(Strophe.createHtml(elem.childNodes[_i2]));\n                      }\n                    } catch (e) {\n                      // invalid elements\n                      el = Strophe.xmlTextNode('');\n                    }\n                  } else {\n                    el = Strophe.xmlGenerator().createDocumentFragment();\n\n                    for (var _i3 = 0; _i3 < elem.childNodes.length; _i3++) {\n                      el.appendChild(Strophe.createHtml(elem.childNodes[_i3]));\n                    }\n                  }\n                } else if (elem.nodeType === Strophe.ElementType.FRAGMENT) {\n                  el = Strophe.xmlGenerator().createDocumentFragment();\n\n                  for (var _i4 = 0; _i4 < elem.childNodes.length; _i4++) {\n                    el.appendChild(Strophe.createHtml(elem.childNodes[_i4]));\n                  }\n                } else if (elem.nodeType === Strophe.ElementType.TEXT) {\n                  el = Strophe.xmlTextNode(elem.nodeValue);\n                }\n\n                return el;\n              },\n\n              /** Function: escapeNode\n               *  Escape the node part (also called local part) of a JID.\n               *\n               *  Parameters:\n               *    (String) node - A node (or local part).\n               *\n               *  Returns:\n               *    An escaped node (or local part).\n               */\n              escapeNode: function escapeNode(node) {\n                if (typeof node !== \"string\") {\n                  return node;\n                }\n\n                return node.replace(/^\\s+|\\s+$/g, '').replace(/\\\\/g, \"\\\\5c\").replace(/ /g, \"\\\\20\").replace(/\\\"/g, \"\\\\22\").replace(/\\&/g, \"\\\\26\").replace(/\\'/g, \"\\\\27\").replace(/\\//g, \"\\\\2f\").replace(/:/g, \"\\\\3a\").replace(/</g, \"\\\\3c\").replace(/>/g, \"\\\\3e\").replace(/@/g, \"\\\\40\");\n              },\n\n              /** Function: unescapeNode\n               *  Unescape a node part (also called local part) of a JID.\n               *\n               *  Parameters:\n               *    (String) node - A node (or local part).\n               *\n               *  Returns:\n               *    An unescaped node (or local part).\n               */\n              unescapeNode: function unescapeNode(node) {\n                if (typeof node !== \"string\") {\n                  return node;\n                }\n\n                return node.replace(/\\\\20/g, \" \").replace(/\\\\22/g, '\"').replace(/\\\\26/g, \"&\").replace(/\\\\27/g, \"'\").replace(/\\\\2f/g, \"/\").replace(/\\\\3a/g, \":\").replace(/\\\\3c/g, \"<\").replace(/\\\\3e/g, \">\").replace(/\\\\40/g, \"@\").replace(/\\\\5c/g, \"\\\\\");\n              },\n\n              /** Function: getNodeFromJid\n               *  Get the node portion of a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the node.\n               */\n              getNodeFromJid: function getNodeFromJid(jid) {\n                if (jid.indexOf(\"@\") < 0) {\n                  return null;\n                }\n\n                return jid.split(\"@\")[0];\n              },\n\n              /** Function: getDomainFromJid\n               *  Get the domain portion of a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the domain.\n               */\n              getDomainFromJid: function getDomainFromJid(jid) {\n                var bare = Strophe.getBareJidFromJid(jid);\n\n                if (bare.indexOf(\"@\") < 0) {\n                  return bare;\n                } else {\n                  var parts = bare.split(\"@\");\n                  parts.splice(0, 1);\n                  return parts.join('@');\n                }\n              },\n\n              /** Function: getResourceFromJid\n               *  Get the resource portion of a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the resource.\n               */\n              getResourceFromJid: function getResourceFromJid(jid) {\n                if (!jid) {\n                  return null;\n                }\n\n                var s = jid.split(\"/\");\n\n                if (s.length < 2) {\n                  return null;\n                }\n\n                s.splice(0, 1);\n                return s.join('/');\n              },\n\n              /** Function: getBareJidFromJid\n               *  Get the bare JID from a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the bare JID.\n               */\n              getBareJidFromJid: function getBareJidFromJid(jid) {\n                return jid ? jid.split(\"/\")[0] : null;\n              },\n\n              /** PrivateFunction: _handleError\n               *  _Private_ function that properly logs an error to the console\n               */\n              _handleError: function _handleError(e) {\n                if (typeof e.stack !== \"undefined\") {\n                  Strophe.fatal(e.stack);\n                }\n\n                if (e.sourceURL) {\n                  Strophe.fatal(\"error: \" + this.handler + \" \" + e.sourceURL + \":\" + e.line + \" - \" + e.name + \": \" + e.message);\n                } else if (e.fileName) {\n                  Strophe.fatal(\"error: \" + this.handler + \" \" + e.fileName + \":\" + e.lineNumber + \" - \" + e.name + \": \" + e.message);\n                } else {\n                  Strophe.fatal(\"error: \" + e.message);\n                }\n              },\n\n              /** Function: log\n               *  User overrideable logging function.\n               *\n               *  This function is called whenever the Strophe library calls any\n               *  of the logging functions.  The default implementation of this\n               *  function logs only fatal errors.  If client code wishes to handle the logging\n               *  messages, it should override this with\n               *  > Strophe.log = function (level, msg) {\n               *  >   (user code here)\n               *  > };\n               *\n               *  Please note that data sent and received over the wire is logged\n               *  via Strophe.Connection.rawInput() and Strophe.Connection.rawOutput().\n               *\n               *  The different levels and their meanings are\n               *\n               *    DEBUG - Messages useful for debugging purposes.\n               *    INFO - Informational messages.  This is mostly information like\n               *      'disconnect was called' or 'SASL auth succeeded'.\n               *    WARN - Warnings about potential problems.  This is mostly used\n               *      to report transient connection errors like request timeouts.\n               *    ERROR - Some error occurred.\n               *    FATAL - A non-recoverable fatal error occurred.\n               *\n               *  Parameters:\n               *    (Integer) level - The log level of the log message.  This will\n               *      be one of the values in Strophe.LogLevel.\n               *    (String) msg - The log message.\n               */\n              log: function log(level, msg) {\n                if (level === this.LogLevel.FATAL && _typeof(window.console) === 'object' && typeof window.console.error === 'function') {\n                  window.console.error(msg);\n                }\n              },\n\n              /** Function: debug\n               *  Log a message at the Strophe.LogLevel.DEBUG level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              debug: function debug(msg) {\n                this.log(this.LogLevel.DEBUG, msg);\n              },\n\n              /** Function: info\n               *  Log a message at the Strophe.LogLevel.INFO level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              info: function info(msg) {\n                this.log(this.LogLevel.INFO, msg);\n              },\n\n              /** Function: warn\n               *  Log a message at the Strophe.LogLevel.WARN level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              warn: function warn(msg) {\n                this.log(this.LogLevel.WARN, msg);\n              },\n\n              /** Function: error\n               *  Log a message at the Strophe.LogLevel.ERROR level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              error: function error(msg) {\n                this.log(this.LogLevel.ERROR, msg);\n              },\n\n              /** Function: fatal\n               *  Log a message at the Strophe.LogLevel.FATAL level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              fatal: function fatal(msg) {\n                this.log(this.LogLevel.FATAL, msg);\n              },\n\n              /** Function: serialize\n               *  Render a DOM element and all descendants to a String.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    The serialized element tree as a String.\n               */\n              serialize: function serialize(elem) {\n                if (!elem) {\n                  return null;\n                }\n\n                if (typeof elem.tree === \"function\") {\n                  elem = elem.tree();\n                }\n\n                var names = _toConsumableArray(Array(elem.attributes.length).keys()).map(function (i) {\n                  return elem.attributes[i].nodeName;\n                });\n\n                names.sort();\n                var result = names.reduce(function (a, n) {\n                  return \"\".concat(a, \" \").concat(n, \"=\\\"\").concat(Strophe.xmlescape(elem.attributes.getNamedItem(n).value), \"\\\"\");\n                }, \"<\".concat(elem.nodeName));\n\n                if (elem.childNodes.length > 0) {\n                  result += \">\";\n\n                  for (var i = 0; i < elem.childNodes.length; i++) {\n                    var child = elem.childNodes[i];\n\n                    switch (child.nodeType) {\n                      case Strophe.ElementType.NORMAL:\n                        // normal element, so recurse\n                        result += Strophe.serialize(child);\n                        break;\n\n                      case Strophe.ElementType.TEXT:\n                        // text element to escape values\n                        result += Strophe.xmlescape(child.nodeValue);\n                        break;\n\n                      case Strophe.ElementType.CDATA:\n                        // cdata section so don't escape values\n                        result += \"<![CDATA[\" + child.nodeValue + \"]]>\";\n                    }\n                  }\n\n                  result += \"</\" + elem.nodeName + \">\";\n                } else {\n                  result += \"/>\";\n                }\n\n                return result;\n              },\n\n              /** PrivateVariable: _requestId\n               *  _Private_ variable that keeps track of the request ids for\n               *  connections.\n               */\n              _requestId: 0,\n\n              /** PrivateVariable: Strophe.connectionPlugins\n               *  _Private_ variable Used to store plugin names that need\n               *  initialization on Strophe.Connection construction.\n               */\n              _connectionPlugins: {},\n\n              /** Function: addConnectionPlugin\n               *  Extends the Strophe.Connection object with the given plugin.\n               *\n               *  Parameters:\n               *    (String) name - The name of the extension.\n               *    (Object) ptype - The plugin's prototype.\n               */\n              addConnectionPlugin: function addConnectionPlugin(name, ptype) {\n                Strophe._connectionPlugins[name] = ptype;\n              }\n            };\n            /** Class: Strophe.Builder\n             *  XML DOM builder.\n             *\n             *  This object provides an interface similar to JQuery but for building\n             *  DOM elements easily and rapidly.  All the functions except for toString()\n             *  and tree() return the object, so calls can be chained.  Here's an\n             *  example using the $iq() builder helper.\n             *  > $iq({to: 'you', from: 'me', type: 'get', id: '1'})\n             *  >     .c('query', {xmlns: 'strophe:example'})\n             *  >     .c('example')\n             *  >     .toString()\n             *\n             *  The above generates this XML fragment\n             *  > <iq to='you' from='me' type='get' id='1'>\n             *  >   <query xmlns='strophe:example'>\n             *  >     <example/>\n             *  >   </query>\n             *  > </iq>\n             *  The corresponding DOM manipulations to get a similar fragment would be\n             *  a lot more tedious and probably involve several helper variables.\n             *\n             *  Since adding children makes new operations operate on the child, up()\n             *  is provided to traverse up the tree.  To add two children, do\n             *  > builder.c('child1', ...).up().c('child2', ...)\n             *  The next operation on the Builder will be relative to the second child.\n             */\n\n            /** Constructor: Strophe.Builder\n             *  Create a Strophe.Builder object.\n             *\n             *  The attributes should be passed in object notation.  For example\n             *  > let b = new Builder('message', {to: 'you', from: 'me'});\n             *  or\n             *  > let b = new Builder('messsage', {'xml:lang': 'en'});\n             *\n             *  Parameters:\n             *    (String) name - The name of the root element.\n             *    (Object) attrs - The attributes for the root element in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder.\n             */\n\n            Strophe.Builder = function (name, attrs) {\n              // Set correct namespace for jabber:client elements\n              if (name === \"presence\" || name === \"message\" || name === \"iq\") {\n                if (attrs && !attrs.xmlns) {\n                  attrs.xmlns = Strophe.NS.CLIENT;\n                } else if (!attrs) {\n                  attrs = {\n                    xmlns: Strophe.NS.CLIENT\n                  };\n                }\n              } // Holds the tree being built.\n\n\n              this.nodeTree = Strophe.xmlElement(name, attrs); // Points to the current operation node.\n\n              this.node = this.nodeTree;\n            };\n\n            Strophe.Builder.prototype = {\n              /** Function: tree\n               *  Return the DOM tree.\n               *\n               *  This function returns the current DOM tree as an element object.  This\n               *  is suitable for passing to functions like Strophe.Connection.send().\n               *\n               *  Returns:\n               *    The DOM tree as a element object.\n               */\n              tree: function tree() {\n                return this.nodeTree;\n              },\n\n              /** Function: toString\n               *  Serialize the DOM tree to a String.\n               *\n               *  This function returns a string serialization of the current DOM\n               *  tree.  It is often used internally to pass data to a\n               *  Strophe.Request object.\n               *\n               *  Returns:\n               *    The serialized DOM tree in a String.\n               */\n              toString: function toString() {\n                return Strophe.serialize(this.nodeTree);\n              },\n\n              /** Function: up\n               *  Make the current parent element the new current element.\n               *\n               *  This function is often used after c() to traverse back up the tree.\n               *  For example, to add two children to the same element\n               *  > builder.c('child1', {}).up().c('child2', {});\n               *\n               *  Returns:\n               *    The Stophe.Builder object.\n               */\n              up: function up() {\n                this.node = this.node.parentNode;\n                return this;\n              },\n\n              /** Function: root\n               *  Make the root element the new current element.\n               *\n               *  When at a deeply nested element in the tree, this function can be used\n               *  to jump back to the root of the tree, instead of having to repeatedly\n               *  call up().\n               *\n               *  Returns:\n               *    The Stophe.Builder object.\n               */\n              root: function root() {\n                this.node = this.nodeTree;\n                return this;\n              },\n\n              /** Function: attrs\n               *  Add or modify attributes of the current element.\n               *\n               *  The attributes should be passed in object notation.  This function\n               *  does not move the current element pointer.\n               *\n               *  Parameters:\n               *    (Object) moreattrs - The attributes to add/modify in object notation.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              attrs: function attrs(moreattrs) {\n                for (var k in moreattrs) {\n                  if (Object.prototype.hasOwnProperty.call(moreattrs, k)) {\n                    if (moreattrs[k] === undefined) {\n                      this.node.removeAttribute(k);\n                    } else {\n                      this.node.setAttribute(k, moreattrs[k]);\n                    }\n                  }\n                }\n\n                return this;\n              },\n\n              /** Function: c\n               *  Add a child to the current element and make it the new current\n               *  element.\n               *\n               *  This function moves the current element pointer to the child,\n               *  unless text is provided.  If you need to add another child, it\n               *  is necessary to use up() to go back to the parent in the tree.\n               *\n               *  Parameters:\n               *    (String) name - The name of the child.\n               *    (Object) attrs - The attributes of the child in object notation.\n               *    (String) text - The text to add to the child.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              c: function c(name, attrs, text) {\n                var child = Strophe.xmlElement(name, attrs, text);\n                this.node.appendChild(child);\n\n                if (typeof text !== \"string\" && typeof text !== \"number\") {\n                  this.node = child;\n                }\n\n                return this;\n              },\n\n              /** Function: cnode\n               *  Add a child to the current element and make it the new current\n               *  element.\n               *\n               *  This function is the same as c() except that instead of using a\n               *  name and an attributes object to create the child it uses an\n               *  existing DOM element object.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              cnode: function cnode(elem) {\n                var impNode;\n                var xmlGen = Strophe.xmlGenerator();\n\n                try {\n                  impNode = xmlGen.importNode !== undefined;\n                } catch (e) {\n                  impNode = false;\n                }\n\n                var newElem = impNode ? xmlGen.importNode(elem, true) : Strophe.copyElement(elem);\n                this.node.appendChild(newElem);\n                this.node = newElem;\n                return this;\n              },\n\n              /** Function: t\n               *  Add a child text element.\n               *\n               *  This *does not* make the child the new current element since there\n               *  are no children of text elements.\n               *\n               *  Parameters:\n               *    (String) text - The text data to append to the current element.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              t: function t(text) {\n                var child = Strophe.xmlTextNode(text);\n                this.node.appendChild(child);\n                return this;\n              },\n\n              /** Function: h\n               *  Replace current element contents with the HTML passed in.\n               *\n               *  This *does not* make the child the new current element\n               *\n               *  Parameters:\n               *    (String) html - The html to insert as contents of current element.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              h: function h(html) {\n                var fragment = document.createElement('body'); // force the browser to try and fix any invalid HTML tags\n\n                fragment.innerHTML = html; // copy cleaned html into an xml dom\n\n                var xhtml = Strophe.createHtml(fragment);\n\n                while (xhtml.childNodes.length > 0) {\n                  this.node.appendChild(xhtml.childNodes[0]);\n                }\n\n                return this;\n              }\n            };\n            /** PrivateClass: Strophe.Handler\n             *  _Private_ helper class for managing stanza handlers.\n             *\n             *  A Strophe.Handler encapsulates a user provided callback function to be\n             *  executed when matching stanzas are received by the connection.\n             *  Handlers can be either one-off or persistant depending on their\n             *  return value. Returning true will cause a Handler to remain active, and\n             *  returning false will remove the Handler.\n             *\n             *  Users will not use Strophe.Handler objects directly, but instead they\n             *  will use Strophe.Connection.addHandler() and\n             *  Strophe.Connection.deleteHandler().\n             */\n\n            /** PrivateConstructor: Strophe.Handler\n             *  Create and initialize a new Strophe.Handler.\n             *\n             *  Parameters:\n             *    (Function) handler - A function to be executed when the handler is run.\n             *    (String) ns - The namespace to match.\n             *    (String) name - The element name to match.\n             *    (String) type - The element type to match.\n             *    (String) id - The element id attribute to match.\n             *    (String) from - The element from attribute to match.\n             *    (Object) options - Handler options\n             *\n             *  Returns:\n             *    A new Strophe.Handler object.\n             */\n\n            Strophe.Handler = function (handler, ns, name, type, id, from, options) {\n              this.handler = handler;\n              this.ns = ns;\n              this.name = name;\n              this.type = type;\n              this.id = id;\n              this.options = options || {\n                'matchBareFromJid': false,\n                'ignoreNamespaceFragment': false\n              }; // BBB: Maintain backward compatibility with old `matchBare` option\n\n              if (this.options.matchBare) {\n                Strophe.warn('The \"matchBare\" option is deprecated, use \"matchBareFromJid\" instead.');\n                this.options.matchBareFromJid = this.options.matchBare;\n                delete this.options.matchBare;\n              }\n\n              if (this.options.matchBareFromJid) {\n                this.from = from ? Strophe.getBareJidFromJid(from) : null;\n              } else {\n                this.from = from;\n              } // whether the handler is a user handler or a system handler\n\n\n              this.user = true;\n            };\n\n            Strophe.Handler.prototype = {\n              /** PrivateFunction: getNamespace\n               *  Returns the XML namespace attribute on an element.\n               *  If `ignoreNamespaceFragment` was passed in for this handler, then the\n               *  URL fragment will be stripped.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML element with the namespace.\n               *\n               *  Returns:\n               *    The namespace, with optionally the fragment stripped.\n               */\n              getNamespace: function getNamespace(elem) {\n                var elNamespace = elem.getAttribute(\"xmlns\");\n\n                if (elNamespace && this.options.ignoreNamespaceFragment) {\n                  elNamespace = elNamespace.split('#')[0];\n                }\n\n                return elNamespace;\n              },\n\n              /** PrivateFunction: namespaceMatch\n               *  Tests if a stanza matches the namespace set for this Strophe.Handler.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML element to test.\n               *\n               *  Returns:\n               *    true if the stanza matches and false otherwise.\n               */\n              namespaceMatch: function namespaceMatch(elem) {\n                var _this = this;\n\n                var nsMatch = false;\n\n                if (!this.ns) {\n                  return true;\n                } else {\n                  Strophe.forEachChild(elem, null, function (elem) {\n                    if (_this.getNamespace(elem) === _this.ns) {\n                      nsMatch = true;\n                    }\n                  });\n                  return nsMatch || this.getNamespace(elem) === this.ns;\n                }\n              },\n\n              /** PrivateFunction: isMatch\n               *  Tests if a stanza matches the Strophe.Handler.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML element to test.\n               *\n               *  Returns:\n               *    true if the stanza matches and false otherwise.\n               */\n              isMatch: function isMatch(elem) {\n                var from = elem.getAttribute('from');\n\n                if (this.options.matchBareFromJid) {\n                  from = Strophe.getBareJidFromJid(from);\n                }\n\n                var elem_type = elem.getAttribute(\"type\");\n\n                if (this.namespaceMatch(elem) && (!this.name || Strophe.isTagEqual(elem, this.name)) && (!this.type || (Array.isArray(this.type) ? this.type.indexOf(elem_type) !== -1 : elem_type === this.type)) && (!this.id || elem.getAttribute(\"id\") === this.id) && (!this.from || from === this.from)) {\n                  return true;\n                }\n\n                return false;\n              },\n\n              /** PrivateFunction: run\n               *  Run the callback on a matching stanza.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The DOM element that triggered the\n               *      Strophe.Handler.\n               *\n               *  Returns:\n               *    A boolean indicating if the handler should remain active.\n               */\n              run: function run(elem) {\n                var result = null;\n\n                try {\n                  result = this.handler(elem);\n                } catch (e) {\n                  Strophe._handleError(e);\n\n                  throw e;\n                }\n\n                return result;\n              },\n\n              /** PrivateFunction: toString\n               *  Get a String representation of the Strophe.Handler object.\n               *\n               *  Returns:\n               *    A String.\n               */\n              toString: function toString() {\n                return \"{Handler: \" + this.handler + \"(\" + this.name + \",\" + this.id + \",\" + this.ns + \")}\";\n              }\n            };\n            /** PrivateClass: Strophe.TimedHandler\n             *  _Private_ helper class for managing timed handlers.\n             *\n             *  A Strophe.TimedHandler encapsulates a user provided callback that\n             *  should be called after a certain period of time or at regular\n             *  intervals.  The return value of the callback determines whether the\n             *  Strophe.TimedHandler will continue to fire.\n             *\n             *  Users will not use Strophe.TimedHandler objects directly, but instead\n             *  they will use Strophe.Connection.addTimedHandler() and\n             *  Strophe.Connection.deleteTimedHandler().\n             */\n\n            /** PrivateConstructor: Strophe.TimedHandler\n             *  Create and initialize a new Strophe.TimedHandler object.\n             *\n             *  Parameters:\n             *    (Integer) period - The number of milliseconds to wait before the\n             *      handler is called.\n             *    (Function) handler - The callback to run when the handler fires.  This\n             *      function should take no arguments.\n             *\n             *  Returns:\n             *    A new Strophe.TimedHandler object.\n             */\n\n            Strophe.TimedHandler = function (period, handler) {\n              this.period = period;\n              this.handler = handler;\n              this.lastCalled = new Date().getTime();\n              this.user = true;\n            };\n\n            Strophe.TimedHandler.prototype = {\n              /** PrivateFunction: run\n               *  Run the callback for the Strophe.TimedHandler.\n               *\n               *  Returns:\n               *    true if the Strophe.TimedHandler should be called again, and false\n               *      otherwise.\n               */\n              run: function run() {\n                this.lastCalled = new Date().getTime();\n                return this.handler();\n              },\n\n              /** PrivateFunction: reset\n               *  Reset the last called time for the Strophe.TimedHandler.\n               */\n              reset: function reset() {\n                this.lastCalled = new Date().getTime();\n              },\n\n              /** PrivateFunction: toString\n               *  Get a string representation of the Strophe.TimedHandler object.\n               *\n               *  Returns:\n               *    The string representation.\n               */\n              toString: function toString() {\n                return \"{TimedHandler: \" + this.handler + \"(\" + this.period + \")}\";\n              }\n            };\n            /** Class: Strophe.Connection\n             *  XMPP Connection manager.\n             *\n             *  This class is the main part of Strophe.  It manages a BOSH or websocket\n             *  connection to an XMPP server and dispatches events to the user callbacks\n             *  as data arrives. It supports SASL PLAIN, SASL DIGEST-MD5, SASL SCRAM-SHA1\n             *  and legacy authentication.\n             *\n             *  After creating a Strophe.Connection object, the user will typically\n             *  call connect() with a user supplied callback to handle connection level\n             *  events like authentication failure, disconnection, or connection\n             *  complete.\n             *\n             *  The user will also have several event handlers defined by using\n             *  addHandler() and addTimedHandler().  These will allow the user code to\n             *  respond to interesting stanzas or do something periodically with the\n             *  connection. These handlers will be active once authentication is\n             *  finished.\n             *\n             *  To send data to the connection, use send().\n             */\n\n            /** Constructor: Strophe.Connection\n             *  Create and initialize a Strophe.Connection object.\n             *\n             *  The transport-protocol for this connection will be chosen automatically\n             *  based on the given service parameter. URLs starting with \"ws://\" or\n             *  \"wss://\" will use WebSockets, URLs starting with \"http://\", \"https://\"\n             *  or without a protocol will use BOSH.\n             *\n             *  To make Strophe connect to the current host you can leave out the protocol\n             *  and host part and just pass the path, e.g.\n             *\n             *  > let conn = new Strophe.Connection(\"/http-bind/\");\n             *\n             *  Options common to both Websocket and BOSH:\n             *  ------------------------------------------\n             *\n             *  cookies:\n             *\n             *  The *cookies* option allows you to pass in cookies to be added to the\n             *  document. These cookies will then be included in the BOSH XMLHttpRequest\n             *  or in the websocket connection.\n             *\n             *  The passed in value must be a map of cookie names and string values.\n             *\n             *  > { \"myCookie\": {\n             *  >     \"value\": \"1234\",\n             *  >     \"domain\": \".example.org\",\n             *  >     \"path\": \"/\",\n             *  >     \"expires\": expirationDate\n             *  >     }\n             *  > }\n             *\n             *  Note that cookies can't be set in this way for other domains (i.e. cross-domain).\n             *  Those cookies need to be set under those domains, for example they can be\n             *  set server-side by making a XHR call to that domain to ask it to set any\n             *  necessary cookies.\n             *\n             *  mechanisms:\n             *\n             *  The *mechanisms* option allows you to specify the SASL mechanisms that this\n             *  instance of Strophe.Connection (and therefore your XMPP client) will\n             *  support.\n             *\n             *  The value must be an array of objects with Strophe.SASLMechanism\n             *  prototypes.\n             *\n             *  If nothing is specified, then the following mechanisms (and their\n             *  priorities) are registered:\n             *\n             *      SCRAM-SHA1 - 70\n             *      DIGEST-MD5 - 60\n             *      PLAIN - 50\n             *      OAUTH-BEARER - 40\n             *      OAUTH-2 - 30\n             *      ANONYMOUS - 20\n             *      EXTERNAL - 10\n             *\n             *  explicitResourceBinding:\n             *\n             *  If `explicitResourceBinding` is set to a truthy value, then the XMPP client\n             *  needs to explicitly call `Strophe.Connection.prototype.bind` once the XMPP\n             *  server has advertised the \"urn:ietf:params:xml:ns:xmpp-bind\" feature.\n             *\n             *  Making this step explicit allows client authors to first finish other\n             *  stream related tasks, such as setting up an XEP-0198 Stream Management\n             *  session, before binding the JID resource for this session.\n             *\n             *  WebSocket options:\n             *  ------------------\n             *\n             *  If you want to connect to the current host with a WebSocket connection you\n             *  can tell Strophe to use WebSockets through a \"protocol\" attribute in the\n             *  optional options parameter. Valid values are \"ws\" for WebSocket and \"wss\"\n             *  for Secure WebSocket.\n             *  So to connect to \"wss://CURRENT_HOSTNAME/xmpp-websocket\" you would call\n             *\n             *  > let conn = new Strophe.Connection(\"/xmpp-websocket/\", {protocol: \"wss\"});\n             *\n             *  Note that relative URLs _NOT_ starting with a \"/\" will also include the path\n             *  of the current site.\n             *\n             *  Also because downgrading security is not permitted by browsers, when using\n             *  relative URLs both BOSH and WebSocket connections will use their secure\n             *  variants if the current connection to the site is also secure (https).\n             *\n             *  BOSH options:\n             *  -------------\n             *\n             *  By adding \"sync\" to the options, you can control if requests will\n             *  be made synchronously or not. The default behaviour is asynchronous.\n             *  If you want to make requests synchronous, make \"sync\" evaluate to true.\n             *  > let conn = new Strophe.Connection(\"/http-bind/\", {sync: true});\n             *\n             *  You can also toggle this on an already established connection.\n             *  > conn.options.sync = true;\n             *\n             *  The *customHeaders* option can be used to provide custom HTTP headers to be\n             *  included in the XMLHttpRequests made.\n             *\n             *  The *keepalive* option can be used to instruct Strophe to maintain the\n             *  current BOSH session across interruptions such as webpage reloads.\n             *\n             *  It will do this by caching the sessions tokens in sessionStorage, and when\n             *  \"restore\" is called it will check whether there are cached tokens with\n             *  which it can resume an existing session.\n             *\n             *  The *withCredentials* option should receive a Boolean value and is used to\n             *  indicate wether cookies should be included in ajax requests (by default\n             *  they're not).\n             *  Set this value to true if you are connecting to a BOSH service\n             *  and for some reason need to send cookies to it.\n             *  In order for this to work cross-domain, the server must also enable\n             *  credentials by setting the Access-Control-Allow-Credentials response header\n             *  to \"true\". For most usecases however this setting should be false (which\n             *  is the default).\n             *  Additionally, when using Access-Control-Allow-Credentials, the\n             *  Access-Control-Allow-Origin header can't be set to the wildcard \"*\", but\n             *  instead must be restricted to actual domains.\n             *\n             *  The *contentType* option can be set to change the default Content-Type\n             *  of \"text/xml; charset=utf-8\", which can be useful to reduce the amount of\n             *  CORS preflight requests that are sent to the server.\n             *\n             *  Parameters:\n             *    (String) service - The BOSH or WebSocket service URL.\n             *    (Object) options - A hash of configuration options\n             *\n             *  Returns:\n             *    A new Strophe.Connection object.\n             */\n\n            Strophe.Connection = function (service, options) {\n              var _this2 = this;\n\n              // The service URL\n              this.service = service; // Configuration options\n\n              this.options = options || {};\n              var proto = this.options.protocol || \"\"; // Select protocal based on service or options\n\n              if (service.indexOf(\"ws:\") === 0 || service.indexOf(\"wss:\") === 0 || proto.indexOf(\"ws\") === 0) {\n                this._proto = new Strophe.Websocket(this);\n              } else {\n                this._proto = new Strophe.Bosh(this);\n              }\n              /* The connected JID. */\n\n\n              this.jid = \"\";\n              /* the JIDs domain */\n\n              this.domain = null;\n              /* stream:features */\n\n              this.features = null; // SASL\n\n              this._sasl_data = {};\n              this.do_session = false;\n              this.do_bind = false; // handler lists\n\n              this.timedHandlers = [];\n              this.handlers = [];\n              this.removeTimeds = [];\n              this.removeHandlers = [];\n              this.addTimeds = [];\n              this.addHandlers = [];\n              this.protocolErrorHandlers = {\n                'HTTP': {},\n                'websocket': {}\n              };\n              this._idleTimeout = null;\n              this._disconnectTimeout = null;\n              this.authenticated = false;\n              this.connected = false;\n              this.disconnecting = false;\n              this.do_authentication = true;\n              this.paused = false;\n              this.restored = false;\n              this._data = [];\n              this._uniqueId = 0;\n              this._sasl_success_handler = null;\n              this._sasl_failure_handler = null;\n              this._sasl_challenge_handler = null; // Max retries before disconnecting\n\n              this.maxRetries = 5; // Call onIdle callback every 1/10th of a second\n\n              this._idleTimeout = setTimeout(function () {\n                return _this2._onIdle();\n              }, 100);\n              utils.addCookies(this.options.cookies);\n              this.registerSASLMechanisms(this.options.mechanisms); // initialize plugins\n\n              for (var k in Strophe._connectionPlugins) {\n                if (Object.prototype.hasOwnProperty.call(Strophe._connectionPlugins, k)) {\n                  var F = function F() {};\n\n                  F.prototype = Strophe._connectionPlugins[k];\n                  this[k] = new F();\n                  this[k].init(this);\n                }\n              }\n            };\n\n            Strophe.Connection.prototype = {\n              /** Function: reset\n               *  Reset the connection.\n               *\n               *  This function should be called after a connection is disconnected\n               *  before that connection is reused.\n               */\n              reset: function reset() {\n                this._proto._reset(); // SASL\n\n\n                this.do_session = false;\n                this.do_bind = false; // handler lists\n\n                this.timedHandlers = [];\n                this.handlers = [];\n                this.removeTimeds = [];\n                this.removeHandlers = [];\n                this.addTimeds = [];\n                this.addHandlers = [];\n                this.authenticated = false;\n                this.connected = false;\n                this.disconnecting = false;\n                this.restored = false;\n                this._data = [];\n                this._requests = [];\n                this._uniqueId = 0;\n              },\n\n              /** Function: pause\n               *  Pause the request manager.\n               *\n               *  This will prevent Strophe from sending any more requests to the\n               *  server.  This is very useful for temporarily pausing\n               *  BOSH-Connections while a lot of send() calls are happening quickly.\n               *  This causes Strophe to send the data in a single request, saving\n               *  many request trips.\n               */\n              pause: function pause() {\n                this.paused = true;\n              },\n\n              /** Function: resume\n               *  Resume the request manager.\n               *\n               *  This resumes after pause() has been called.\n               */\n              resume: function resume() {\n                this.paused = false;\n              },\n\n              /** Function: getUniqueId\n               *  Generate a unique ID for use in <iq/> elements.\n               *\n               *  All <iq/> stanzas are required to have unique id attributes.  This\n               *  function makes creating these easy.  Each connection instance has\n               *  a counter which starts from zero, and the value of this counter\n               *  plus a colon followed by the suffix becomes the unique id. If no\n               *  suffix is supplied, the counter is used as the unique id.\n               *\n               *  Suffixes are used to make debugging easier when reading the stream\n               *  data, and their use is recommended.  The counter resets to 0 for\n               *  every new connection for the same reason.  For connections to the\n               *  same server that authenticate the same way, all the ids should be\n               *  the same, which makes it easy to see changes.  This is useful for\n               *  automated testing as well.\n               *\n               *  Parameters:\n               *    (String) suffix - A optional suffix to append to the id.\n               *\n               *  Returns:\n               *    A unique string to be used for the id attribute.\n               */\n              getUniqueId: function getUniqueId(suffix) {\n                var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n                  var r = Math.random() * 16 | 0,\n                      v = c === 'x' ? r : r & 0x3 | 0x8;\n                  return v.toString(16);\n                });\n\n                if (typeof suffix === \"string\" || typeof suffix === \"number\") {\n                  return uuid + \":\" + suffix;\n                } else {\n                  return uuid + \"\";\n                }\n              },\n\n              /** Function: addProtocolErrorHandler\n               *  Register a handler function for when a protocol (websocker or HTTP)\n               *  error occurs.\n               *\n               *  NOTE: Currently only HTTP errors for BOSH requests are handled.\n               *  Patches that handle websocket errors would be very welcome.\n               *\n               *  Parameters:\n               *    (String) protocol - 'HTTP' or 'websocket'\n               *    (Integer) status_code - Error status code (e.g 500, 400 or 404)\n               *    (Function) callback - Function that will fire on Http error\n               *\n               *  Example:\n               *  function onError(err_code){\n               *    //do stuff\n               *  }\n               *\n               *  let conn = Strophe.connect('http://example.com/http-bind');\n               *  conn.addProtocolErrorHandler('HTTP', 500, onError);\n               *  // Triggers HTTP 500 error and onError handler will be called\n               *  conn.connect('user_jid@incorrect_jabber_host', 'secret', onConnect);\n               */\n              addProtocolErrorHandler: function addProtocolErrorHandler(protocol, status_code, callback) {\n                this.protocolErrorHandlers[protocol][status_code] = callback;\n              },\n\n              /** Function: connect\n               *  Starts the connection process.\n               *\n               *  As the connection process proceeds, the user supplied callback will\n               *  be triggered multiple times with status updates.  The callback\n               *  should take two arguments - the status code and the error condition.\n               *\n               *  The status code will be one of the values in the Strophe.Status\n               *  constants.  The error condition will be one of the conditions\n               *  defined in RFC 3920 or the condition 'strophe-parsererror'.\n               *\n               *  The Parameters _wait_, _hold_ and _route_ are optional and only relevant\n               *  for BOSH connections. Please see XEP 124 for a more detailed explanation\n               *  of the optional parameters.\n               *\n               *  Parameters:\n               *    (String) jid - The user's JID.  This may be a bare JID,\n               *      or a full JID.  If a node is not supplied, SASL OAUTHBEARER or\n               *      SASL ANONYMOUS authentication will be attempted (OAUTHBEARER will\n               *      process the provided password value as an access token).\n               *    (String) pass - The user's password.\n               *    (Function) callback - The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (String) route - The optional route value.\n               *    (String) authcid - The optional alternative authentication identity\n               *      (username) if intending to impersonate another user.\n               *      When using the SASL-EXTERNAL authentication mechanism, for example\n               *      with client certificates, then the authcid value is used to\n               *      determine whether an authorization JID (authzid) should be sent to\n               *      the server. The authzid should not be sent to the server if the\n               *      authzid and authcid are the same. So to prevent it from being sent\n               *      (for example when the JID is already contained in the client\n               *      certificate), set authcid to that same JID. See XEP-178 for more\n               *      details.\n               */\n              connect: function connect(jid, pass, callback, wait, hold, route, authcid) {\n                this.jid = jid;\n                /** Variable: authzid\n                 *  Authorization identity.\n                 */\n\n                this.authzid = Strophe.getBareJidFromJid(this.jid);\n                /** Variable: authcid\n                 *  Authentication identity (User name).\n                 */\n\n                this.authcid = authcid || Strophe.getNodeFromJid(this.jid);\n                /** Variable: pass\n                 *  Authentication identity (User password).\n                 */\n\n                this.pass = pass;\n                /** Variable: servtype\n                 *  Digest MD5 compatibility.\n                 */\n\n                this.servtype = \"xmpp\";\n                this.connect_callback = callback;\n                this.disconnecting = false;\n                this.connected = false;\n                this.authenticated = false;\n                this.restored = false; // parse jid for domain\n\n                this.domain = Strophe.getDomainFromJid(this.jid);\n\n                this._changeConnectStatus(Strophe.Status.CONNECTING, null);\n\n                this._proto._connect(wait, hold, route);\n              },\n\n              /** Function: attach\n               *  Attach to an already created and authenticated BOSH session.\n               *\n               *  This function is provided to allow Strophe to attach to BOSH\n               *  sessions which have been created externally, perhaps by a Web\n               *  application.  This is often used to support auto-login type features\n               *  without putting user credentials into the page.\n               *\n               *  Parameters:\n               *    (String) jid - The full JID that is bound by the session.\n               *    (String) sid - The SID of the BOSH session.\n               *    (String) rid - The current RID of the BOSH session.  This RID\n               *      will be used by the next request.\n               *    (Function) callback The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              attach: function attach(jid, sid, rid, callback, wait, hold, wind) {\n                if (this._proto instanceof Strophe.Bosh) {\n                  this._proto._attach(jid, sid, rid, callback, wait, hold, wind);\n                } else {\n                  var error = new Error('The \"attach\" method can only be used with a BOSH connection.');\n                  error.name = 'StropheSessionError';\n                  throw error;\n                }\n              },\n\n              /** Function: restore\n               *  Attempt to restore a cached BOSH session.\n               *\n               *  This function is only useful in conjunction with providing the\n               *  \"keepalive\":true option when instantiating a new Strophe.Connection.\n               *\n               *  When \"keepalive\" is set to true, Strophe will cache the BOSH tokens\n               *  RID (Request ID) and SID (Session ID) and then when this function is\n               *  called, it will attempt to restore the session from those cached\n               *  tokens.\n               *\n               *  This function must therefore be called instead of connect or attach.\n               *\n               *  For an example on how to use it, please see examples/restore.js\n               *\n               *  Parameters:\n               *    (String) jid - The user's JID.  This may be a bare JID or a full JID.\n               *    (Function) callback - The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              restore: function restore(jid, callback, wait, hold, wind) {\n                if (this._sessionCachingSupported()) {\n                  this._proto._restore(jid, callback, wait, hold, wind);\n                } else {\n                  var error = new Error('The \"restore\" method can only be used with a BOSH connection.');\n                  error.name = 'StropheSessionError';\n                  throw error;\n                }\n              },\n\n              /** PrivateFunction: _sessionCachingSupported\n               * Checks whether sessionStorage and JSON are supported and whether we're\n               * using BOSH.\n               */\n              _sessionCachingSupported: function _sessionCachingSupported() {\n                if (this._proto instanceof Strophe.Bosh) {\n                  if (!JSON) {\n                    return false;\n                  }\n\n                  try {\n                    sessionStorage.setItem('_strophe_', '_strophe_');\n                    sessionStorage.removeItem('_strophe_');\n                  } catch (e) {\n                    return false;\n                  }\n\n                  return true;\n                }\n\n                return false;\n              },\n\n              /** Function: xmlInput\n               *  User overrideable function that receives XML data coming into the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.xmlInput = function (elem) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Due to limitations of current Browsers' XML-Parsers the opening and closing\n               *  <stream> tag for WebSocket-Connoctions will be passed as selfclosing here.\n               *\n               *  BOSH-Connections will have all stanzas wrapped in a <body> tag. See\n               *  <Strophe.Bosh.strip> if you want to strip this tag.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML data received by the connection.\n               */\n              xmlInput: function xmlInput(elem) {\n                return;\n              },\n\n              /** Function: xmlOutput\n               *  User overrideable function that receives XML data sent to the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.xmlOutput = function (elem) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Due to limitations of current Browsers' XML-Parsers the opening and closing\n               *  <stream> tag for WebSocket-Connoctions will be passed as selfclosing here.\n               *\n               *  BOSH-Connections will have all stanzas wrapped in a <body> tag. See\n               *  <Strophe.Bosh.strip> if you want to strip this tag.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XMLdata sent by the connection.\n               */\n              xmlOutput: function xmlOutput(elem) {\n                return;\n              },\n\n              /** Function: rawInput\n               *  User overrideable function that receives raw data coming into the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.rawInput = function (data) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Parameters:\n               *    (String) data - The data received by the connection.\n               */\n              rawInput: function rawInput(data) {\n                return;\n              },\n\n              /** Function: rawOutput\n               *  User overrideable function that receives raw data sent to the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.rawOutput = function (data) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Parameters:\n               *    (String) data - The data sent by the connection.\n               */\n              rawOutput: function rawOutput(data) {\n                return;\n              },\n\n              /** Function: nextValidRid\n               *  User overrideable function that receives the new valid rid.\n               *\n               *  The default function does nothing. User code can override this with\n               *  > Strophe.Connection.nextValidRid = function (rid) {\n               *  >    (user code)\n               *  > };\n               *\n               *  Parameters:\n               *    (Number) rid - The next valid rid\n               */\n              nextValidRid: function nextValidRid(rid) {\n                return;\n              },\n\n              /** Function: send\n               *  Send a stanza.\n               *\n               *  This function is called to push data onto the send queue to\n               *  go out over the wire.  Whenever a request is sent to the BOSH\n               *  server, all pending data is sent and the queue is flushed.\n               *\n               *  Parameters:\n               *    (XMLElement |\n               *     [XMLElement] |\n               *     Strophe.Builder) elem - The stanza to send.\n               */\n              send: function send(elem) {\n                if (elem === null) {\n                  return;\n                }\n\n                if (typeof elem.sort === \"function\") {\n                  for (var i = 0; i < elem.length; i++) {\n                    this._queueData(elem[i]);\n                  }\n                } else if (typeof elem.tree === \"function\") {\n                  this._queueData(elem.tree());\n                } else {\n                  this._queueData(elem);\n                }\n\n                this._proto._send();\n              },\n\n              /** Function: flush\n               *  Immediately send any pending outgoing data.\n               *\n               *  Normally send() queues outgoing data until the next idle period\n               *  (100ms), which optimizes network use in the common cases when\n               *  several send()s are called in succession. flush() can be used to\n               *  immediately send all pending data.\n               */\n              flush: function flush() {\n                // cancel the pending idle period and run the idle function\n                // immediately\n                clearTimeout(this._idleTimeout);\n\n                this._onIdle();\n              },\n\n              /** Function: sendPresence\n               *  Helper function to send presence stanzas. The main benefit is for\n               *  sending presence stanzas for which you expect a responding presence\n               *  stanza with the same id (for example when leaving a chat room).\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza to send.\n               *    (Function) callback - The callback function for a successful request.\n               *    (Function) errback - The callback function for a failed or timed\n               *      out request.  On timeout, the stanza will be null.\n               *    (Integer) timeout - The time specified in milliseconds for a\n               *      timeout to occur.\n               *\n               *  Returns:\n               *    The id used to send the presence.\n               */\n              sendPresence: function sendPresence(elem, callback, errback, timeout) {\n                var _this3 = this;\n\n                var timeoutHandler = null;\n\n                if (typeof elem.tree === \"function\") {\n                  elem = elem.tree();\n                }\n\n                var id = elem.getAttribute('id');\n\n                if (!id) {\n                  // inject id if not found\n                  id = this.getUniqueId(\"sendPresence\");\n                  elem.setAttribute(\"id\", id);\n                }\n\n                if (typeof callback === \"function\" || typeof errback === \"function\") {\n                  var handler = this.addHandler(function (stanza) {\n                    // remove timeout handler if there is one\n                    if (timeoutHandler) {\n                      _this3.deleteTimedHandler(timeoutHandler);\n                    }\n\n                    if (stanza.getAttribute('type') === 'error') {\n                      if (errback) {\n                        errback(stanza);\n                      }\n                    } else if (callback) {\n                      callback(stanza);\n                    }\n                  }, null, 'presence', null, id); // if timeout specified, set up a timeout handler.\n\n                  if (timeout) {\n                    timeoutHandler = this.addTimedHandler(timeout, function () {\n                      // get rid of normal handler\n                      _this3.deleteHandler(handler); // call errback on timeout with null stanza\n\n\n                      if (errback) {\n                        errback(null);\n                      }\n\n                      return false;\n                    });\n                  }\n                }\n\n                this.send(elem);\n                return id;\n              },\n\n              /** Function: sendIQ\n               *  Helper function to send IQ stanzas.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza to send.\n               *    (Function) callback - The callback function for a successful request.\n               *    (Function) errback - The callback function for a failed or timed\n               *      out request.  On timeout, the stanza will be null.\n               *    (Integer) timeout - The time specified in milliseconds for a\n               *      timeout to occur.\n               *\n               *  Returns:\n               *    The id used to send the IQ.\n              */\n              sendIQ: function sendIQ(elem, callback, errback, timeout) {\n                var _this4 = this;\n\n                var timeoutHandler = null;\n\n                if (typeof elem.tree === \"function\") {\n                  elem = elem.tree();\n                }\n\n                var id = elem.getAttribute('id');\n\n                if (!id) {\n                  // inject id if not found\n                  id = this.getUniqueId(\"sendIQ\");\n                  elem.setAttribute(\"id\", id);\n                }\n\n                if (typeof callback === \"function\" || typeof errback === \"function\") {\n                  var handler = this.addHandler(function (stanza) {\n                    // remove timeout handler if there is one\n                    if (timeoutHandler) {\n                      _this4.deleteTimedHandler(timeoutHandler);\n                    }\n\n                    var iqtype = stanza.getAttribute('type');\n\n                    if (iqtype === 'result') {\n                      if (callback) {\n                        callback(stanza);\n                      }\n                    } else if (iqtype === 'error') {\n                      if (errback) {\n                        errback(stanza);\n                      }\n                    } else {\n                      var error = new Error(\"Got bad IQ type of \".concat(iqtype));\n                      error.name = \"StropheError\";\n                      throw error;\n                    }\n                  }, null, 'iq', ['error', 'result'], id); // if timeout specified, set up a timeout handler.\n\n                  if (timeout) {\n                    timeoutHandler = this.addTimedHandler(timeout, function () {\n                      // get rid of normal handler\n                      _this4.deleteHandler(handler); // call errback on timeout with null stanza\n\n\n                      if (errback) {\n                        errback(null);\n                      }\n\n                      return false;\n                    });\n                  }\n                }\n\n                this.send(elem);\n                return id;\n              },\n\n              /** PrivateFunction: _queueData\n               *  Queue outgoing data for later sending.  Also ensures that the data\n               *  is a DOMElement.\n               */\n              _queueData: function _queueData(element) {\n                if (element === null || !element.tagName || !element.childNodes) {\n                  var error = new Error(\"Cannot queue non-DOMElement.\");\n                  error.name = \"StropheError\";\n                  throw error;\n                }\n\n                this._data.push(element);\n              },\n\n              /** PrivateFunction: _sendRestart\n               *  Send an xmpp:restart stanza.\n               */\n              _sendRestart: function _sendRestart() {\n                var _this5 = this;\n\n                this._data.push(\"restart\");\n\n                this._proto._sendRestart();\n\n                this._idleTimeout = setTimeout(function () {\n                  return _this5._onIdle();\n                }, 100);\n              },\n\n              /** Function: addTimedHandler\n               *  Add a timed handler to the connection.\n               *\n               *  This function adds a timed handler.  The provided handler will\n               *  be called every period milliseconds until it returns false,\n               *  the connection is terminated, or the handler is removed.  Handlers\n               *  that wish to continue being invoked should return true.\n               *\n               *  Because of method binding it is necessary to save the result of\n               *  this function if you wish to remove a handler with\n               *  deleteTimedHandler().\n               *\n               *  Note that user handlers are not active until authentication is\n               *  successful.\n               *\n               *  Parameters:\n               *    (Integer) period - The period of the handler.\n               *    (Function) handler - The callback function.\n               *\n               *  Returns:\n               *    A reference to the handler that can be used to remove it.\n               */\n              addTimedHandler: function addTimedHandler(period, handler) {\n                var thand = new Strophe.TimedHandler(period, handler);\n                this.addTimeds.push(thand);\n                return thand;\n              },\n\n              /** Function: deleteTimedHandler\n               *  Delete a timed handler for a connection.\n               *\n               *  This function removes a timed handler from the connection.  The\n               *  handRef parameter is *not* the function passed to addTimedHandler(),\n               *  but is the reference returned from addTimedHandler().\n               *\n               *  Parameters:\n               *    (Strophe.TimedHandler) handRef - The handler reference.\n               */\n              deleteTimedHandler: function deleteTimedHandler(handRef) {\n                // this must be done in the Idle loop so that we don't change\n                // the handlers during iteration\n                this.removeTimeds.push(handRef);\n              },\n\n              /** Function: addHandler\n               *  Add a stanza handler for the connection.\n               *\n               *  This function adds a stanza handler to the connection.  The\n               *  handler callback will be called for any stanza that matches\n               *  the parameters.  Note that if multiple parameters are supplied,\n               *  they must all match for the handler to be invoked.\n               *\n               *  The handler will receive the stanza that triggered it as its argument.\n               *  *The handler should return true if it is to be invoked again;\n               *  returning false will remove the handler after it returns.*\n               *\n               *  As a convenience, the ns parameters applies to the top level element\n               *  and also any of its immediate children.  This is primarily to make\n               *  matching /iq/query elements easy.\n               *\n               *  Options\n               *  ~~~~~~~\n               *  With the options argument, you can specify boolean flags that affect how\n               *  matches are being done.\n               *\n               *  Currently two flags exist:\n               *\n               *  - matchBareFromJid:\n               *      When set to true, the from parameter and the\n               *      from attribute on the stanza will be matched as bare JIDs instead\n               *      of full JIDs. To use this, pass {matchBareFromJid: true} as the\n               *      value of options. The default value for matchBareFromJid is false.\n               *\n               *  - ignoreNamespaceFragment:\n               *      When set to true, a fragment specified on the stanza's namespace\n               *      URL will be ignored when it's matched with the one configured for\n               *      the handler.\n               *\n               *      This means that if you register like this:\n               *      >   connection.addHandler(\n               *      >       handler,\n               *      >       'http://jabber.org/protocol/muc',\n               *      >       null, null, null, null,\n               *      >       {'ignoreNamespaceFragment': true}\n               *      >   );\n               *\n               *      Then a stanza with XML namespace of\n               *      'http://jabber.org/protocol/muc#user' will also be matched. If\n               *      'ignoreNamespaceFragment' is false, then only stanzas with\n               *      'http://jabber.org/protocol/muc' will be matched.\n               *\n               *  Deleting the handler\n               *  ~~~~~~~~~~~~~~~~~~~~\n               *  The return value should be saved if you wish to remove the handler\n               *  with deleteHandler().\n               *\n               *  Parameters:\n               *    (Function) handler - The user callback.\n               *    (String) ns - The namespace to match.\n               *    (String) name - The stanza name to match.\n               *    (String|Array) type - The stanza type (or types if an array) to match.\n               *    (String) id - The stanza id attribute to match.\n               *    (String) from - The stanza from attribute to match.\n               *    (String) options - The handler options\n               *\n               *  Returns:\n               *    A reference to the handler that can be used to remove it.\n               */\n              addHandler: function addHandler(handler, ns, name, type, id, from, options) {\n                var hand = new Strophe.Handler(handler, ns, name, type, id, from, options);\n                this.addHandlers.push(hand);\n                return hand;\n              },\n\n              /** Function: deleteHandler\n               *  Delete a stanza handler for a connection.\n               *\n               *  This function removes a stanza handler from the connection.  The\n               *  handRef parameter is *not* the function passed to addHandler(),\n               *  but is the reference returned from addHandler().\n               *\n               *  Parameters:\n               *    (Strophe.Handler) handRef - The handler reference.\n               */\n              deleteHandler: function deleteHandler(handRef) {\n                // this must be done in the Idle loop so that we don't change\n                // the handlers during iteration\n                this.removeHandlers.push(handRef); // If a handler is being deleted while it is being added,\n                // prevent it from getting added\n\n                var i = this.addHandlers.indexOf(handRef);\n\n                if (i >= 0) {\n                  this.addHandlers.splice(i, 1);\n                }\n              },\n\n              /** Function: registerSASLMechanisms\n               *\n               * Register the SASL mechanisms which will be supported by this instance of\n               * Strophe.Connection (i.e. which this XMPP client will support).\n               *\n               *  Parameters:\n               *    (Array) mechanisms - Array of objects with Strophe.SASLMechanism prototypes\n               *\n               */\n              registerSASLMechanisms: function registerSASLMechanisms(mechanisms) {\n                this.mechanisms = {};\n                mechanisms = mechanisms || [Strophe.SASLAnonymous, Strophe.SASLExternal, Strophe.SASLMD5, Strophe.SASLOAuthBearer, Strophe.SASLXOAuth2, Strophe.SASLPlain, Strophe.SASLSHA1];\n                mechanisms.forEach(this.registerSASLMechanism.bind(this));\n              },\n\n              /** Function: registerSASLMechanism\n               *\n               * Register a single SASL mechanism, to be supported by this client.\n               *\n               *  Parameters:\n               *    (Object) mechanism - Object with a Strophe.SASLMechanism prototype\n               *\n               */\n              registerSASLMechanism: function registerSASLMechanism(mechanism) {\n                this.mechanisms[mechanism.prototype.name] = mechanism;\n              },\n\n              /** Function: disconnect\n               *  Start the graceful disconnection process.\n               *\n               *  This function starts the disconnection process.  This process starts\n               *  by sending unavailable presence and sending BOSH body of type\n               *  terminate.  A timeout handler makes sure that disconnection happens\n               *  even if the BOSH server does not respond.\n               *  If the Connection object isn't connected, at least tries to abort all pending requests\n               *  so the connection object won't generate successful requests (which were already opened).\n               *\n               *  The user supplied connection callback will be notified of the\n               *  progress as this process happens.\n               *\n               *  Parameters:\n               *    (String) reason - The reason the disconnect is occuring.\n               */\n              disconnect: function disconnect(reason) {\n                this._changeConnectStatus(Strophe.Status.DISCONNECTING, reason);\n\n                Strophe.warn(\"Disconnect was called because: \" + reason);\n\n                if (this.connected) {\n                  var pres = false;\n                  this.disconnecting = true;\n\n                  if (this.authenticated) {\n                    pres = $pres({\n                      'xmlns': Strophe.NS.CLIENT,\n                      'type': 'unavailable'\n                    });\n                  } // setup timeout handler\n\n\n                  this._disconnectTimeout = this._addSysTimedHandler(3000, this._onDisconnectTimeout.bind(this));\n\n                  this._proto._disconnect(pres);\n                } else {\n                  Strophe.warn(\"Disconnect was called before Strophe connected to the server\");\n\n                  this._proto._abortAllRequests();\n\n                  this._doDisconnect();\n                }\n              },\n\n              /** PrivateFunction: _changeConnectStatus\n               *  _Private_ helper function that makes sure plugins and the user's\n               *  callback are notified of connection status changes.\n               *\n               *  Parameters:\n               *    (Integer) status - the new connection status, one of the values\n               *      in Strophe.Status\n               *    (String) condition - the error condition or null\n               *    (XMLElement) elem - The triggering stanza.\n               */\n              _changeConnectStatus: function _changeConnectStatus(status, condition, elem) {\n                // notify all plugins listening for status changes\n                for (var k in Strophe._connectionPlugins) {\n                  if (Object.prototype.hasOwnProperty.call(Strophe._connectionPlugins, k)) {\n                    var plugin = this[k];\n\n                    if (plugin.statusChanged) {\n                      try {\n                        plugin.statusChanged(status, condition);\n                      } catch (err) {\n                        Strophe.error(\"\".concat(k, \" plugin caused an exception changing status: \").concat(err));\n                      }\n                    }\n                  }\n                } // notify the user's callback\n\n\n                if (this.connect_callback) {\n                  try {\n                    this.connect_callback(status, condition, elem);\n                  } catch (e) {\n                    Strophe._handleError(e);\n\n                    Strophe.error(\"User connection callback caused an exception: \".concat(e));\n                  }\n                }\n              },\n\n              /** PrivateFunction: _doDisconnect\n               *  _Private_ function to disconnect.\n               *\n               *  This is the last piece of the disconnection logic.  This resets the\n               *  connection and alerts the user's connection callback.\n               */\n              _doDisconnect: function _doDisconnect(condition) {\n                if (typeof this._idleTimeout === \"number\") {\n                  clearTimeout(this._idleTimeout);\n                } // Cancel Disconnect Timeout\n\n\n                if (this._disconnectTimeout !== null) {\n                  this.deleteTimedHandler(this._disconnectTimeout);\n                  this._disconnectTimeout = null;\n                }\n\n                Strophe.debug(\"_doDisconnect was called\");\n\n                this._proto._doDisconnect();\n\n                this.authenticated = false;\n                this.disconnecting = false;\n                this.restored = false; // delete handlers\n\n                this.handlers = [];\n                this.timedHandlers = [];\n                this.removeTimeds = [];\n                this.removeHandlers = [];\n                this.addTimeds = [];\n                this.addHandlers = []; // tell the parent we disconnected\n\n                this._changeConnectStatus(Strophe.Status.DISCONNECTED, condition);\n\n                this.connected = false;\n              },\n\n              /** PrivateFunction: _dataRecv\n               *  _Private_ handler to processes incoming data from the the connection.\n               *\n               *  Except for _connect_cb handling the initial connection request,\n               *  this function handles the incoming data for all requests.  This\n               *  function also fires stanza handlers that match each incoming\n               *  stanza.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The request that has data ready.\n               *    (string) req - The stanza a raw string (optiona).\n               */\n              _dataRecv: function _dataRecv(req, raw) {\n                var _this6 = this;\n\n                Strophe.debug(\"_dataRecv called\");\n\n                var elem = this._proto._reqToData(req);\n\n                if (elem === null) {\n                  return;\n                }\n\n                if (this.xmlInput !== Strophe.Connection.prototype.xmlInput) {\n                  if (elem.nodeName === this._proto.strip && elem.childNodes.length) {\n                    this.xmlInput(elem.childNodes[0]);\n                  } else {\n                    this.xmlInput(elem);\n                  }\n                }\n\n                if (this.rawInput !== Strophe.Connection.prototype.rawInput) {\n                  if (raw) {\n                    this.rawInput(raw);\n                  } else {\n                    this.rawInput(Strophe.serialize(elem));\n                  }\n                } // remove handlers scheduled for deletion\n\n\n                while (this.removeHandlers.length > 0) {\n                  var hand = this.removeHandlers.pop();\n                  var i = this.handlers.indexOf(hand);\n\n                  if (i >= 0) {\n                    this.handlers.splice(i, 1);\n                  }\n                } // add handlers scheduled for addition\n\n\n                while (this.addHandlers.length > 0) {\n                  this.handlers.push(this.addHandlers.pop());\n                } // handle graceful disconnect\n\n\n                if (this.disconnecting && this._proto._emptyQueue()) {\n                  this._doDisconnect();\n\n                  return;\n                }\n\n                var type = elem.getAttribute(\"type\");\n\n                if (type !== null && type === \"terminate\") {\n                  // Don't process stanzas that come in after disconnect\n                  if (this.disconnecting) {\n                    return;\n                  } // an error occurred\n\n\n                  var cond = elem.getAttribute(\"condition\");\n                  var conflict = elem.getElementsByTagName(\"conflict\");\n\n                  if (cond !== null) {\n                    if (cond === \"remote-stream-error\" && conflict.length > 0) {\n                      cond = \"conflict\";\n                    }\n\n                    this._changeConnectStatus(Strophe.Status.CONNFAIL, cond);\n                  } else {\n                    this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.UNKOWN_REASON);\n                  }\n\n                  this._doDisconnect(cond);\n\n                  return;\n                } // send each incoming stanza through the handler chain\n\n\n                Strophe.forEachChild(elem, null, function (child) {\n                  // process handlers\n                  var newList = _this6.handlers;\n                  _this6.handlers = [];\n\n                  for (var _i5 = 0; _i5 < newList.length; _i5++) {\n                    var _hand = newList[_i5]; // encapsulate 'handler.run' not to lose the whole handler list if\n                    // one of the handlers throws an exception\n\n                    try {\n                      if (_hand.isMatch(child) && (_this6.authenticated || !_hand.user)) {\n                        if (_hand.run(child)) {\n                          _this6.handlers.push(_hand);\n                        }\n                      } else {\n                        _this6.handlers.push(_hand);\n                      }\n                    } catch (e) {\n                      // if the handler throws an exception, we consider it as false\n                      Strophe.warn('Removing Strophe handlers due to uncaught exception: ' + e.message);\n                    }\n                  }\n                });\n              },\n\n              /** Attribute: mechanisms\n               *  SASL Mechanisms available for Connection.\n               */\n              mechanisms: {},\n\n              /** PrivateFunction: _connect_cb\n               *  _Private_ handler for initial connection request.\n               *\n               *  This handler is used to process the initial connection request\n               *  response from the BOSH server. It is used to set up authentication\n               *  handlers and start the authentication process.\n               *\n               *  SASL authentication will be attempted if available, otherwise\n               *  the code will fall back to legacy authentication.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The current request.\n               *    (Function) _callback - low level (xmpp) connect callback function.\n               *      Useful for plugins with their own xmpp connect callback (when they\n               *      want to do something special).\n               */\n              _connect_cb: function _connect_cb(req, _callback, raw) {\n                Strophe.debug(\"_connect_cb was called\");\n                this.connected = true;\n                var bodyWrap;\n\n                try {\n                  bodyWrap = this._proto._reqToData(req);\n                } catch (e) {\n                  if (e.name !== Strophe.ErrorCondition.BAD_FORMAT) {\n                    throw e;\n                  }\n\n                  this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.BAD_FORMAT);\n\n                  this._doDisconnect(Strophe.ErrorCondition.BAD_FORMAT);\n                }\n\n                if (!bodyWrap) {\n                  return;\n                }\n\n                if (this.xmlInput !== Strophe.Connection.prototype.xmlInput) {\n                  if (bodyWrap.nodeName === this._proto.strip && bodyWrap.childNodes.length) {\n                    this.xmlInput(bodyWrap.childNodes[0]);\n                  } else {\n                    this.xmlInput(bodyWrap);\n                  }\n                }\n\n                if (this.rawInput !== Strophe.Connection.prototype.rawInput) {\n                  if (raw) {\n                    this.rawInput(raw);\n                  } else {\n                    this.rawInput(Strophe.serialize(bodyWrap));\n                  }\n                }\n\n                var conncheck = this._proto._connect_cb(bodyWrap);\n\n                if (conncheck === Strophe.Status.CONNFAIL) {\n                  return;\n                } // Check for the stream:features tag\n\n\n                var hasFeatures;\n\n                if (bodyWrap.getElementsByTagNameNS) {\n                  hasFeatures = bodyWrap.getElementsByTagNameNS(Strophe.NS.STREAM, \"features\").length > 0;\n                } else {\n                  hasFeatures = bodyWrap.getElementsByTagName(\"stream:features\").length > 0 || bodyWrap.getElementsByTagName(\"features\").length > 0;\n                }\n\n                if (!hasFeatures) {\n                  this._proto._no_auth_received(_callback);\n\n                  return;\n                }\n\n                var matched = [];\n                var mechanisms = bodyWrap.getElementsByTagName(\"mechanism\");\n\n                if (mechanisms.length > 0) {\n                  for (var i = 0; i < mechanisms.length; i++) {\n                    var mech = Strophe.getText(mechanisms[i]);\n                    if (this.mechanisms[mech]) matched.push(this.mechanisms[mech]);\n                  }\n                }\n\n                if (matched.length === 0) {\n                  if (bodyWrap.getElementsByTagName(\"auth\").length === 0) {\n                    // There are no matching SASL mechanisms and also no legacy\n                    // auth available.\n                    this._proto._no_auth_received(_callback);\n\n                    return;\n                  }\n                }\n\n                if (this.do_authentication !== false) {\n                  this.authenticate(matched);\n                }\n              },\n\n              /** Function: sortMechanismsByPriority\n               *\n               *  Sorts an array of objects with prototype SASLMechanism according to\n               *  their priorities.\n               *\n               *  Parameters:\n               *    (Array) mechanisms - Array of SASL mechanisms.\n               *\n               */\n              sortMechanismsByPriority: function sortMechanismsByPriority(mechanisms) {\n                // Sorting mechanisms according to priority.\n                for (var i = 0; i < mechanisms.length - 1; ++i) {\n                  var higher = i;\n\n                  for (var j = i + 1; j < mechanisms.length; ++j) {\n                    if (mechanisms[j].prototype.priority > mechanisms[higher].prototype.priority) {\n                      higher = j;\n                    }\n                  }\n\n                  if (higher !== i) {\n                    var swap = mechanisms[i];\n                    mechanisms[i] = mechanisms[higher];\n                    mechanisms[higher] = swap;\n                  }\n                }\n\n                return mechanisms;\n              },\n\n              /** Function: authenticate\n               * Set up authentication\n               *\n               *  Continues the initial connection request by setting up authentication\n               *  handlers and starting the authentication process.\n               *\n               *  SASL authentication will be attempted if available, otherwise\n               *  the code will fall back to legacy authentication.\n               *\n               *  Parameters:\n               *    (Array) matched - Array of SASL mechanisms supported.\n               *\n               */\n              authenticate: function authenticate(matched) {\n                if (!this._attemptSASLAuth(matched)) {\n                  this._attemptLegacyAuth();\n                }\n              },\n\n              /** PrivateFunction: _attemptSASLAuth\n               *\n               *  Iterate through an array of SASL mechanisms and attempt authentication\n               *  with the highest priority (enabled) mechanism.\n               *\n               *  Parameters:\n               *    (Array) mechanisms - Array of SASL mechanisms.\n               *\n               *  Returns:\n               *    (Boolean) mechanism_found - true or false, depending on whether a\n               *          valid SASL mechanism was found with which authentication could be\n               *          started.\n               */\n              _attemptSASLAuth: function _attemptSASLAuth(mechanisms) {\n                mechanisms = this.sortMechanismsByPriority(mechanisms || []);\n                var mechanism_found = false;\n\n                for (var i = 0; i < mechanisms.length; ++i) {\n                  if (!mechanisms[i].prototype.test(this)) {\n                    continue;\n                  }\n\n                  this._sasl_success_handler = this._addSysHandler(this._sasl_success_cb.bind(this), null, \"success\", null, null);\n                  this._sasl_failure_handler = this._addSysHandler(this._sasl_failure_cb.bind(this), null, \"failure\", null, null);\n                  this._sasl_challenge_handler = this._addSysHandler(this._sasl_challenge_cb.bind(this), null, \"challenge\", null, null);\n                  this._sasl_mechanism = new mechanisms[i]();\n\n                  this._sasl_mechanism.onStart(this);\n\n                  var request_auth_exchange = $build(\"auth\", {\n                    'xmlns': Strophe.NS.SASL,\n                    'mechanism': this._sasl_mechanism.name\n                  });\n\n                  if (this._sasl_mechanism.isClientFirst) {\n                    var response = this._sasl_mechanism.onChallenge(this, null);\n\n                    request_auth_exchange.t(btoa(response));\n                  }\n\n                  this.send(request_auth_exchange.tree());\n                  mechanism_found = true;\n                  break;\n                }\n\n                return mechanism_found;\n              },\n\n              /** PrivateFunction: _sasl_challenge_cb\n               *  _Private_ handler for the SASL challenge\n               *\n               */\n              _sasl_challenge_cb: function _sasl_challenge_cb(elem) {\n                var challenge = atob(Strophe.getText(elem));\n\n                var response = this._sasl_mechanism.onChallenge(this, challenge);\n\n                var stanza = $build('response', {\n                  'xmlns': Strophe.NS.SASL\n                });\n\n                if (response !== \"\") {\n                  stanza.t(btoa(response));\n                }\n\n                this.send(stanza.tree());\n                return true;\n              },\n\n              /** PrivateFunction: _attemptLegacyAuth\n               *\n               *  Attempt legacy (i.e. non-SASL) authentication.\n               */\n              _attemptLegacyAuth: function _attemptLegacyAuth() {\n                if (Strophe.getNodeFromJid(this.jid) === null) {\n                  // we don't have a node, which is required for non-anonymous\n                  // client connections\n                  this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.MISSING_JID_NODE);\n\n                  this.disconnect(Strophe.ErrorCondition.MISSING_JID_NODE);\n                } else {\n                  // Fall back to legacy authentication\n                  this._changeConnectStatus(Strophe.Status.AUTHENTICATING, null);\n\n                  this._addSysHandler(this._onLegacyAuthIQResult.bind(this), null, null, null, \"_auth_1\");\n\n                  this.send($iq({\n                    'type': \"get\",\n                    'to': this.domain,\n                    'id': \"_auth_1\"\n                  }).c(\"query\", {\n                    xmlns: Strophe.NS.AUTH\n                  }).c(\"username\", {}).t(Strophe.getNodeFromJid(this.jid)).tree());\n                }\n              },\n\n              /** PrivateFunction: _onLegacyAuthIQResult\n               *  _Private_ handler for legacy authentication.\n               *\n               *  This handler is called in response to the initial <iq type='get'/>\n               *  for legacy authentication.  It builds an authentication <iq/> and\n               *  sends it, creating a handler (calling back to _auth2_cb()) to\n               *  handle the result\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza that triggered the callback.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onLegacyAuthIQResult: function _onLegacyAuthIQResult(elem) {\n                // build plaintext auth iq\n                var iq = $iq({\n                  type: \"set\",\n                  id: \"_auth_2\"\n                }).c('query', {\n                  xmlns: Strophe.NS.AUTH\n                }).c('username', {}).t(Strophe.getNodeFromJid(this.jid)).up().c('password').t(this.pass);\n\n                if (!Strophe.getResourceFromJid(this.jid)) {\n                  // since the user has not supplied a resource, we pick\n                  // a default one here.  unlike other auth methods, the server\n                  // cannot do this for us.\n                  this.jid = Strophe.getBareJidFromJid(this.jid) + '/strophe';\n                }\n\n                iq.up().c('resource', {}).t(Strophe.getResourceFromJid(this.jid));\n\n                this._addSysHandler(this._auth2_cb.bind(this), null, null, null, \"_auth_2\");\n\n                this.send(iq.tree());\n                return false;\n              },\n\n              /** PrivateFunction: _sasl_success_cb\n               *  _Private_ handler for succesful SASL authentication.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _sasl_success_cb: function _sasl_success_cb(elem) {\n                var _this7 = this;\n\n                if (this._sasl_data[\"server-signature\"]) {\n                  var serverSignature;\n                  var success = atob(Strophe.getText(elem));\n                  var attribMatch = /([a-z]+)=([^,]+)(,|$)/;\n                  var matches = success.match(attribMatch);\n\n                  if (matches[1] === \"v\") {\n                    serverSignature = matches[2];\n                  }\n\n                  if (serverSignature !== this._sasl_data[\"server-signature\"]) {\n                    // remove old handlers\n                    this.deleteHandler(this._sasl_failure_handler);\n                    this._sasl_failure_handler = null;\n\n                    if (this._sasl_challenge_handler) {\n                      this.deleteHandler(this._sasl_challenge_handler);\n                      this._sasl_challenge_handler = null;\n                    }\n\n                    this._sasl_data = {};\n                    return this._sasl_failure_cb(null);\n                  }\n                }\n\n                Strophe.info(\"SASL authentication succeeded.\");\n\n                if (this._sasl_mechanism) {\n                  this._sasl_mechanism.onSuccess();\n                } // remove old handlers\n\n\n                this.deleteHandler(this._sasl_failure_handler);\n                this._sasl_failure_handler = null;\n\n                if (this._sasl_challenge_handler) {\n                  this.deleteHandler(this._sasl_challenge_handler);\n                  this._sasl_challenge_handler = null;\n                }\n\n                var streamfeature_handlers = [];\n\n                var wrapper = function wrapper(handlers, elem) {\n                  while (handlers.length) {\n                    _this7.deleteHandler(handlers.pop());\n                  }\n\n                  _this7._onStreamFeaturesAfterSASL(elem);\n\n                  return false;\n                };\n\n                streamfeature_handlers.push(this._addSysHandler(function (elem) {\n                  return wrapper(streamfeature_handlers, elem);\n                }, null, \"stream:features\", null, null));\n                streamfeature_handlers.push(this._addSysHandler(function (elem) {\n                  return wrapper(streamfeature_handlers, elem);\n                }, Strophe.NS.STREAM, \"features\", null, null)); // we must send an xmpp:restart now\n\n                this._sendRestart();\n\n                return false;\n              },\n\n              /** PrivateFunction: _onStreamFeaturesAfterSASL\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onStreamFeaturesAfterSASL: function _onStreamFeaturesAfterSASL(elem) {\n                // save stream:features for future usage\n                this.features = elem;\n\n                for (var i = 0; i < elem.childNodes.length; i++) {\n                  var child = elem.childNodes[i];\n\n                  if (child.nodeName === 'bind') {\n                    this.do_bind = true;\n                  }\n\n                  if (child.nodeName === 'session') {\n                    this.do_session = true;\n                  }\n                }\n\n                if (!this.do_bind) {\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null);\n\n                  return false;\n                } else if (!this.options.explicitResourceBinding) {\n                  this.bind();\n                } else {\n                  this._changeConnectStatus(Strophe.Status.BINDREQUIRED, null);\n                }\n\n                return false;\n              },\n\n              /** Function: bind\n               *\n               *  Sends an IQ to the XMPP server to bind a JID resource for this session.\n               *\n               *  https://tools.ietf.org/html/rfc6120#section-7.5\n               *\n               *  If `explicitResourceBinding` was set to a truthy value in the options\n               *  passed to the Strophe.Connection constructor, then this function needs\n               *  to be called explicitly by the client author.\n               *\n               *  Otherwise it'll be called automatically as soon as the XMPP server\n               *  advertises the \"urn:ietf:params:xml:ns:xmpp-bind\" stream feature.\n               */\n              bind: function bind() {\n                if (!this.do_bind) {\n                  Strophe.log(Strophe.LogLevel.INFO, \"Strophe.Connection.prototype.bind called but \\\"do_bind\\\" is false\");\n                  return;\n                }\n\n                this._addSysHandler(this._onResourceBindResultIQ.bind(this), null, null, null, \"_bind_auth_2\");\n\n                var resource = Strophe.getResourceFromJid(this.jid);\n\n                if (resource) {\n                  this.send($iq({\n                    type: \"set\",\n                    id: \"_bind_auth_2\"\n                  }).c('bind', {\n                    xmlns: Strophe.NS.BIND\n                  }).c('resource', {}).t(resource).tree());\n                } else {\n                  this.send($iq({\n                    type: \"set\",\n                    id: \"_bind_auth_2\"\n                  }).c('bind', {\n                    xmlns: Strophe.NS.BIND\n                  }).tree());\n                }\n              },\n\n              /** PrivateFunction: _onResourceBindIQ\n               *  _Private_ handler for binding result and session start.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onResourceBindResultIQ: function _onResourceBindResultIQ(elem) {\n                if (elem.getAttribute(\"type\") === \"error\") {\n                  Strophe.warn(\"Resource binding failed.\");\n                  var conflict = elem.getElementsByTagName(\"conflict\");\n                  var condition;\n\n                  if (conflict.length > 0) {\n                    condition = Strophe.ErrorCondition.CONFLICT;\n                  }\n\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, condition, elem);\n\n                  return false;\n                } // TODO - need to grab errors\n\n\n                var bind = elem.getElementsByTagName(\"bind\");\n\n                if (bind.length > 0) {\n                  var jidNode = bind[0].getElementsByTagName(\"jid\");\n\n                  if (jidNode.length > 0) {\n                    this.jid = Strophe.getText(jidNode[0]);\n\n                    if (this.do_session) {\n                      this._establishSession();\n                    } else {\n                      this.authenticated = true;\n\n                      this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n                    }\n                  }\n                } else {\n                  Strophe.warn(\"Resource binding failed.\");\n\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                  return false;\n                }\n              },\n\n              /** PrivateFunction: _establishSession\n               *  Send IQ request to establish a session with the XMPP server.\n               *\n               *  See https://xmpp.org/rfcs/rfc3921.html#session\n               *\n               *  Note: The protocol for session establishment has been determined as\n               *  unnecessary and removed in RFC-6121.\n               */\n              _establishSession: function _establishSession() {\n                if (!this.do_session) {\n                  throw new Error(\"Strophe.Connection.prototype._establishSession \" + \"called but apparently \".concat(Strophe.NS.SESSION, \" wasn't advertised by the server\"));\n                }\n\n                this._addSysHandler(this._onSessionResultIQ.bind(this), null, null, null, \"_session_auth_2\");\n\n                this.send($iq({\n                  type: \"set\",\n                  id: \"_session_auth_2\"\n                }).c('session', {\n                  xmlns: Strophe.NS.SESSION\n                }).tree());\n              },\n\n              /** PrivateFunction: _onSessionResultIQ\n               *  _Private_ handler for the server's IQ response to a client's session\n               *  request.\n               *\n               *  This sets Connection.authenticated to true on success, which\n               *  starts the processing of user handlers.\n               *\n               *  See https://xmpp.org/rfcs/rfc3921.html#session\n               *\n               *  Note: The protocol for session establishment has been determined as\n               *  unnecessary and removed in RFC-6121.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onSessionResultIQ: function _onSessionResultIQ(elem) {\n                if (elem.getAttribute(\"type\") === \"result\") {\n                  this.authenticated = true;\n\n                  this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n                } else if (elem.getAttribute(\"type\") === \"error\") {\n                  Strophe.warn(\"Session creation failed.\");\n\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                  return false;\n                }\n\n                return false;\n              },\n\n              /** PrivateFunction: _sasl_failure_cb\n               *  _Private_ handler for SASL authentication failure.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _sasl_failure_cb: function _sasl_failure_cb(elem) {\n                // delete unneeded handlers\n                if (this._sasl_success_handler) {\n                  this.deleteHandler(this._sasl_success_handler);\n                  this._sasl_success_handler = null;\n                }\n\n                if (this._sasl_challenge_handler) {\n                  this.deleteHandler(this._sasl_challenge_handler);\n                  this._sasl_challenge_handler = null;\n                }\n\n                if (this._sasl_mechanism) this._sasl_mechanism.onFailure();\n\n                this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                return false;\n              },\n\n              /** PrivateFunction: _auth2_cb\n               *  _Private_ handler to finish legacy authentication.\n               *\n               *  This handler is called when the result from the jabber:iq:auth\n               *  <iq/> stanza is returned.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza that triggered the callback.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _auth2_cb: function _auth2_cb(elem) {\n                if (elem.getAttribute(\"type\") === \"result\") {\n                  this.authenticated = true;\n\n                  this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n                } else if (elem.getAttribute(\"type\") === \"error\") {\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                  this.disconnect('authentication failed');\n                }\n\n                return false;\n              },\n\n              /** PrivateFunction: _addSysTimedHandler\n               *  _Private_ function to add a system level timed handler.\n               *\n               *  This function is used to add a Strophe.TimedHandler for the\n               *  library code.  System timed handlers are allowed to run before\n               *  authentication is complete.\n               *\n               *  Parameters:\n               *    (Integer) period - The period of the handler.\n               *    (Function) handler - The callback function.\n               */\n              _addSysTimedHandler: function _addSysTimedHandler(period, handler) {\n                var thand = new Strophe.TimedHandler(period, handler);\n                thand.user = false;\n                this.addTimeds.push(thand);\n                return thand;\n              },\n\n              /** PrivateFunction: _addSysHandler\n               *  _Private_ function to add a system level stanza handler.\n               *\n               *  This function is used to add a Strophe.Handler for the\n               *  library code.  System stanza handlers are allowed to run before\n               *  authentication is complete.\n               *\n               *  Parameters:\n               *    (Function) handler - The callback function.\n               *    (String) ns - The namespace to match.\n               *    (String) name - The stanza name to match.\n               *    (String) type - The stanza type attribute to match.\n               *    (String) id - The stanza id attribute to match.\n               */\n              _addSysHandler: function _addSysHandler(handler, ns, name, type, id) {\n                var hand = new Strophe.Handler(handler, ns, name, type, id);\n                hand.user = false;\n                this.addHandlers.push(hand);\n                return hand;\n              },\n\n              /** PrivateFunction: _onDisconnectTimeout\n               *  _Private_ timeout handler for handling non-graceful disconnection.\n               *\n               *  If the graceful disconnect process does not complete within the\n               *  time allotted, this handler finishes the disconnect anyway.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onDisconnectTimeout: function _onDisconnectTimeout() {\n                Strophe.debug(\"_onDisconnectTimeout was called\");\n\n                this._changeConnectStatus(Strophe.Status.CONNTIMEOUT, null);\n\n                this._proto._onDisconnectTimeout(); // actually disconnect\n\n\n                this._doDisconnect();\n\n                return false;\n              },\n\n              /** PrivateFunction: _onIdle\n               *  _Private_ handler to process events during idle cycle.\n               *\n               *  This handler is called every 100ms to fire timed handlers that\n               *  are ready and keep poll requests going.\n               */\n              _onIdle: function _onIdle() {\n                var _this8 = this;\n\n                // add timed handlers scheduled for addition\n                // NOTE: we add before remove in the case a timed handler is\n                // added and then deleted before the next _onIdle() call.\n                while (this.addTimeds.length > 0) {\n                  this.timedHandlers.push(this.addTimeds.pop());\n                } // remove timed handlers that have been scheduled for deletion\n\n\n                while (this.removeTimeds.length > 0) {\n                  var thand = this.removeTimeds.pop();\n                  var i = this.timedHandlers.indexOf(thand);\n\n                  if (i >= 0) {\n                    this.timedHandlers.splice(i, 1);\n                  }\n                } // call ready timed handlers\n\n\n                var now = new Date().getTime();\n                var newList = [];\n\n                for (var _i6 = 0; _i6 < this.timedHandlers.length; _i6++) {\n                  var _thand = this.timedHandlers[_i6];\n\n                  if (this.authenticated || !_thand.user) {\n                    var since = _thand.lastCalled + _thand.period;\n\n                    if (since - now <= 0) {\n                      if (_thand.run()) {\n                        newList.push(_thand);\n                      }\n                    } else {\n                      newList.push(_thand);\n                    }\n                  }\n                }\n\n                this.timedHandlers = newList;\n                clearTimeout(this._idleTimeout);\n\n                this._proto._onIdle(); // reactivate the timer only if connected\n\n\n                if (this.connected) {\n                  this._idleTimeout = setTimeout(function () {\n                    return _this8._onIdle();\n                  }, 100);\n                }\n              }\n            };\n            /** Class: Strophe.SASLMechanism\n             *\n             *  encapsulates SASL authentication mechanisms.\n             *\n             *  User code may override the priority for each mechanism or disable it completely.\n             *  See <priority> for information about changing priority and <test> for informatian on\n             *  how to disable a mechanism.\n             *\n             *  By default, all mechanisms are enabled and the priorities are\n             *\n             *      OAUTHBEARER - 60\n             *      SCRAM-SHA1 - 50\n             *      DIGEST-MD5 - 40\n             *      PLAIN - 30\n             *      ANONYMOUS - 20\n             *      EXTERNAL - 10\n             *\n             *  See: Strophe.Connection.addSupportedSASLMechanisms\n             */\n\n            /**\n             * PrivateConstructor: Strophe.SASLMechanism\n             * SASL auth mechanism abstraction.\n             *\n             *  Parameters:\n             *    (String) name - SASL Mechanism name.\n             *    (Boolean) isClientFirst - If client should send response first without challenge.\n             *    (Number) priority - Priority.\n             *\n             *  Returns:\n             *    A new Strophe.SASLMechanism object.\n             */\n\n            Strophe.SASLMechanism = function (name, isClientFirst, priority) {\n              /** PrivateVariable: name\n               *  Mechanism name.\n               */\n              this.name = name;\n              /** PrivateVariable: isClientFirst\n               *  If client sends response without initial server challenge.\n               */\n\n              this.isClientFirst = isClientFirst;\n              /** Variable: priority\n               *  Determines which <SASLMechanism> is chosen for authentication (Higher is better).\n               *  Users may override this to prioritize mechanisms differently.\n               *\n               *  In the default configuration the priorities are\n               *\n               *  SCRAM-SHA1 - 40\n               *  DIGEST-MD5 - 30\n               *  Plain - 20\n               *\n               *  Example: (This will cause Strophe to choose the mechanism that the server sent first)\n               *\n               *  > Strophe.SASLMD5.priority = Strophe.SASLSHA1.priority;\n               *\n               *  See <SASL mechanisms> for a list of available mechanisms.\n               *\n               */\n\n              this.priority = priority;\n            };\n\n            Strophe.SASLMechanism.prototype = {\n              /**\n               *  Function: test\n               *  Checks if mechanism able to run.\n               *  To disable a mechanism, make this return false;\n               *\n               *  To disable plain authentication run\n               *  > Strophe.SASLPlain.test = function() {\n               *  >   return false;\n               *  > }\n               *\n               *  See <SASL mechanisms> for a list of available mechanisms.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - Target Connection.\n               *\n               *  Returns:\n               *    (Boolean) If mechanism was able to run.\n               */\n              test: function test(connection) {\n                return true;\n              },\n\n              /** PrivateFunction: onStart\n               *  Called before starting mechanism on some connection.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - Target Connection.\n               */\n              onStart: function onStart(connection) {\n                this._connection = connection;\n              },\n\n              /** PrivateFunction: onChallenge\n               *  Called by protocol implementation on incoming challenge. If client is\n               *  first (isClientFirst === true) challenge will be null on the first call.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - Target Connection.\n               *    (String) challenge - current challenge to handle.\n               *\n               *  Returns:\n               *    (String) Mechanism response.\n               */\n              onChallenge: function onChallenge(connection, challenge) {\n                throw new Error(\"You should implement challenge handling!\");\n              },\n\n              /** PrivateFunction: onFailure\n               *  Protocol informs mechanism implementation about SASL failure.\n               */\n              onFailure: function onFailure() {\n                this._connection = null;\n              },\n\n              /** PrivateFunction: onSuccess\n               *  Protocol informs mechanism implementation about SASL success.\n               */\n              onSuccess: function onSuccess() {\n                this._connection = null;\n              }\n            };\n            /** Constants: SASL mechanisms\n             *  Available authentication mechanisms\n             *\n             *  Strophe.SASLAnonymous - SASL ANONYMOUS authentication.\n             *  Strophe.SASLPlain - SASL PLAIN authentication.\n             *  Strophe.SASLMD5 - SASL DIGEST-MD5 authentication\n             *  Strophe.SASLSHA1 - SASL SCRAM-SHA1 authentication\n             *  Strophe.SASLOAuthBearer - SASL OAuth Bearer authentication\n             *  Strophe.SASLExternal - SASL EXTERNAL authentication\n             *  Strophe.SASLXOAuth2 - SASL X-OAuth2 authentication\n             */\n            // Building SASL callbacks\n\n            /** PrivateConstructor: SASLAnonymous\n             *  SASL ANONYMOUS authentication.\n             */\n\n            Strophe.SASLAnonymous = function () {};\n\n            Strophe.SASLAnonymous.prototype = new Strophe.SASLMechanism(\"ANONYMOUS\", false, 20);\n\n            Strophe.SASLAnonymous.prototype.test = function (connection) {\n              return connection.authcid === null;\n            };\n            /** PrivateConstructor: SASLPlain\n             *  SASL PLAIN authentication.\n             */\n\n\n            Strophe.SASLPlain = function () {};\n\n            Strophe.SASLPlain.prototype = new Strophe.SASLMechanism(\"PLAIN\", true, 50);\n\n            Strophe.SASLPlain.prototype.test = function (connection) {\n              return connection.authcid !== null;\n            };\n\n            Strophe.SASLPlain.prototype.onChallenge = function (connection) {\n              var auth_str = connection.authzid;\n              auth_str = auth_str + \"\\0\";\n              auth_str = auth_str + connection.authcid;\n              auth_str = auth_str + \"\\0\";\n              auth_str = auth_str + connection.pass;\n              return utils.utf16to8(auth_str);\n            };\n            /** PrivateConstructor: SASLSHA1\n             *  SASL SCRAM SHA 1 authentication.\n             */\n\n\n            Strophe.SASLSHA1 = function () {};\n\n            Strophe.SASLSHA1.prototype = new Strophe.SASLMechanism(\"SCRAM-SHA-1\", true, 70);\n\n            Strophe.SASLSHA1.prototype.test = function (connection) {\n              return connection.authcid !== null;\n            };\n\n            Strophe.SASLSHA1.prototype.onChallenge = function (connection, challenge, test_cnonce) {\n              var cnonce = test_cnonce || MD5.hexdigest(\"\" + Math.random() * 1234567890);\n              var auth_str = \"n=\" + utils.utf16to8(connection.authcid);\n              auth_str += \",r=\";\n              auth_str += cnonce;\n              connection._sasl_data.cnonce = cnonce;\n              connection._sasl_data[\"client-first-message-bare\"] = auth_str;\n              auth_str = \"n,,\" + auth_str;\n\n              this.onChallenge = function (connection, challenge) {\n                var nonce, salt, iter, Hi, U, U_old, i, k;\n                var responseText = \"c=biws,\";\n                var authMessage = \"\".concat(connection._sasl_data[\"client-first-message-bare\"], \",\").concat(challenge, \",\");\n                var cnonce = connection._sasl_data.cnonce;\n                var attribMatch = /([a-z]+)=([^,]+)(,|$)/;\n\n                while (challenge.match(attribMatch)) {\n                  var matches = challenge.match(attribMatch);\n                  challenge = challenge.replace(matches[0], \"\");\n\n                  switch (matches[1]) {\n                    case \"r\":\n                      nonce = matches[2];\n                      break;\n\n                    case \"s\":\n                      salt = matches[2];\n                      break;\n\n                    case \"i\":\n                      iter = matches[2];\n                      break;\n                  }\n                }\n\n                if (nonce.substr(0, cnonce.length) !== cnonce) {\n                  connection._sasl_data = {};\n                  return connection._sasl_failure_cb();\n                }\n\n                responseText += \"r=\" + nonce;\n                authMessage += responseText;\n                salt = atob(salt);\n                salt += \"\\x00\\x00\\x00\\x01\";\n                var pass = utils.utf16to8(connection.pass);\n                Hi = U_old = SHA1.core_hmac_sha1(pass, salt);\n\n                for (i = 1; i < iter; i++) {\n                  U = SHA1.core_hmac_sha1(pass, SHA1.binb2str(U_old));\n\n                  for (k = 0; k < 5; k++) {\n                    Hi[k] ^= U[k];\n                  }\n\n                  U_old = U;\n                }\n\n                Hi = SHA1.binb2str(Hi);\n                var clientKey = SHA1.core_hmac_sha1(Hi, \"Client Key\");\n                var serverKey = SHA1.str_hmac_sha1(Hi, \"Server Key\");\n                var clientSignature = SHA1.core_hmac_sha1(SHA1.str_sha1(SHA1.binb2str(clientKey)), authMessage);\n                connection._sasl_data[\"server-signature\"] = SHA1.b64_hmac_sha1(serverKey, authMessage);\n\n                for (k = 0; k < 5; k++) {\n                  clientKey[k] ^= clientSignature[k];\n                }\n\n                responseText += \",p=\" + btoa(SHA1.binb2str(clientKey));\n                return responseText;\n              };\n\n              return auth_str;\n            };\n            /** PrivateConstructor: SASLMD5\n             *  SASL DIGEST MD5 authentication.\n             */\n\n\n            Strophe.SASLMD5 = function () {};\n\n            Strophe.SASLMD5.prototype = new Strophe.SASLMechanism(\"DIGEST-MD5\", false, 60);\n\n            Strophe.SASLMD5.prototype.test = function (connection) {\n              return connection.authcid !== null;\n            };\n            /** PrivateFunction: _quote\n             *  _Private_ utility function to backslash escape and quote strings.\n             *\n             *  Parameters:\n             *    (String) str - The string to be quoted.\n             *\n             *  Returns:\n             *    quoted string\n             */\n\n\n            Strophe.SASLMD5.prototype._quote = function (str) {\n              return '\"' + str.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, '\\\\\"') + '\"'; //\" end string workaround for emacs\n            };\n\n            Strophe.SASLMD5.prototype.onChallenge = function (connection, challenge, test_cnonce) {\n              var attribMatch = /([a-z]+)=(\"[^\"]+\"|[^,\"]+)(?:,|$)/;\n              var cnonce = test_cnonce || MD5.hexdigest(\"\" + Math.random() * 1234567890);\n              var realm = \"\";\n              var host = null;\n              var nonce = \"\";\n              var qop = \"\";\n\n              while (challenge.match(attribMatch)) {\n                var matches = challenge.match(attribMatch);\n                challenge = challenge.replace(matches[0], \"\");\n                matches[2] = matches[2].replace(/^\"(.+)\"$/, \"$1\");\n\n                switch (matches[1]) {\n                  case \"realm\":\n                    realm = matches[2];\n                    break;\n\n                  case \"nonce\":\n                    nonce = matches[2];\n                    break;\n\n                  case \"qop\":\n                    qop = matches[2];\n                    break;\n\n                  case \"host\":\n                    host = matches[2];\n                    break;\n                }\n              }\n\n              var digest_uri = connection.servtype + \"/\" + connection.domain;\n\n              if (host !== null) {\n                digest_uri = digest_uri + \"/\" + host;\n              }\n\n              var cred = utils.utf16to8(connection.authcid + \":\" + realm + \":\" + this._connection.pass);\n              var A1 = MD5.hash(cred) + \":\" + nonce + \":\" + cnonce;\n              var A2 = 'AUTHENTICATE:' + digest_uri;\n              var responseText = \"\";\n              responseText += 'charset=utf-8,';\n              responseText += 'username=' + this._quote(utils.utf16to8(connection.authcid)) + ',';\n              responseText += 'realm=' + this._quote(realm) + ',';\n              responseText += 'nonce=' + this._quote(nonce) + ',';\n              responseText += 'nc=00000001,';\n              responseText += 'cnonce=' + this._quote(cnonce) + ',';\n              responseText += 'digest-uri=' + this._quote(digest_uri) + ',';\n              responseText += 'response=' + MD5.hexdigest(MD5.hexdigest(A1) + \":\" + nonce + \":00000001:\" + cnonce + \":auth:\" + MD5.hexdigest(A2)) + \",\";\n              responseText += 'qop=auth';\n\n              this.onChallenge = function () {\n                return \"\";\n              };\n\n              return responseText;\n            };\n            /** PrivateConstructor: SASLOAuthBearer\n             *  SASL OAuth Bearer authentication.\n             */\n\n\n            Strophe.SASLOAuthBearer = function () {};\n\n            Strophe.SASLOAuthBearer.prototype = new Strophe.SASLMechanism(\"OAUTHBEARER\", true, 40);\n\n            Strophe.SASLOAuthBearer.prototype.test = function (connection) {\n              return connection.pass !== null;\n            };\n\n            Strophe.SASLOAuthBearer.prototype.onChallenge = function (connection) {\n              var auth_str = 'n,';\n\n              if (connection.authcid !== null) {\n                auth_str = auth_str + 'a=' + connection.authzid;\n              }\n\n              auth_str = auth_str + ',';\n              auth_str = auth_str + \"\\x01\";\n              auth_str = auth_str + 'auth=Bearer ';\n              auth_str = auth_str + connection.pass;\n              auth_str = auth_str + \"\\x01\";\n              auth_str = auth_str + \"\\x01\";\n              return utils.utf16to8(auth_str);\n            };\n            /** PrivateConstructor: SASLExternal\n             *  SASL EXTERNAL authentication.\n             *\n             *  The EXTERNAL mechanism allows a client to request the server to use\n             *  credentials established by means external to the mechanism to\n             *  authenticate the client. The external means may be, for instance,\n             *  TLS services.\n             */\n\n\n            Strophe.SASLExternal = function () {};\n\n            Strophe.SASLExternal.prototype = new Strophe.SASLMechanism(\"EXTERNAL\", true, 10);\n\n            Strophe.SASLExternal.prototype.onChallenge = function (connection) {\n              /** According to XEP-178, an authzid SHOULD NOT be presented when the\n               * authcid contained or implied in the client certificate is the JID (i.e.\n               * authzid) with which the user wants to log in as.\n               *\n               * To NOT send the authzid, the user should therefore set the authcid equal\n               * to the JID when instantiating a new Strophe.Connection object.\n               */\n              return connection.authcid === connection.authzid ? '' : connection.authzid;\n            };\n            /** PrivateConstructor: SASLXOAuth2\n             *  SASL X-OAuth2 authentication.\n             */\n\n\n            Strophe.SASLXOAuth2 = function () {};\n\n            Strophe.SASLXOAuth2.prototype = new Strophe.SASLMechanism(\"X-OAUTH2\", true, 30);\n\n            Strophe.SASLXOAuth2.prototype.test = function (connection) {\n              return connection.pass !== null;\n            };\n\n            Strophe.SASLXOAuth2.prototype.onChallenge = function (connection) {\n              var auth_str = \"\\0\";\n\n              if (connection.authcid !== null) {\n                auth_str = auth_str + connection.authzid;\n              }\n\n              auth_str = auth_str + \"\\0\";\n              auth_str = auth_str + connection.pass;\n              return utils.utf16to8(auth_str);\n            };\n            var core = {\n              'Strophe': Strophe,\n              '$build': $build,\n              '$iq': $iq,\n              '$msg': $msg,\n              '$pres': $pres,\n              'SHA1': SHA1,\n              'MD5': MD5,\n              'b64_hmac_sha1': SHA1.b64_hmac_sha1,\n              'b64_sha1': SHA1.b64_sha1,\n              'str_hmac_sha1': SHA1.str_hmac_sha1,\n              'str_sha1': SHA1.str_sha1\n            };\n\n            /*\n                This program is distributed under the terms of the MIT license.\n                Please see the LICENSE file for details.\n\n                Copyright 2006-2008, OGG, LLC\n            */\n            var Strophe$1 = core.Strophe;\n            var $build$1 = core.$build;\n            /** PrivateClass: Strophe.Request\n             *  _Private_ helper class that provides a cross implementation abstraction\n             *  for a BOSH related XMLHttpRequest.\n             *\n             *  The Strophe.Request class is used internally to encapsulate BOSH request\n             *  information.  It is not meant to be used from user's code.\n             */\n\n            /** PrivateConstructor: Strophe.Request\n             *  Create and initialize a new Strophe.Request object.\n             *\n             *  Parameters:\n             *    (XMLElement) elem - The XML data to be sent in the request.\n             *    (Function) func - The function that will be called when the\n             *      XMLHttpRequest readyState changes.\n             *    (Integer) rid - The BOSH rid attribute associated with this request.\n             *    (Integer) sends - The number of times this same request has been sent.\n             */\n\n            Strophe$1.Request = function (elem, func, rid, sends) {\n              this.id = ++Strophe$1._requestId;\n              this.xmlData = elem;\n              this.data = Strophe$1.serialize(elem); // save original function in case we need to make a new request\n              // from this one.\n\n              this.origFunc = func;\n              this.func = func;\n              this.rid = rid;\n              this.date = NaN;\n              this.sends = sends || 0;\n              this.abort = false;\n              this.dead = null;\n\n              this.age = function () {\n                if (!this.date) {\n                  return 0;\n                }\n\n                var now = new Date();\n                return (now - this.date) / 1000;\n              };\n\n              this.timeDead = function () {\n                if (!this.dead) {\n                  return 0;\n                }\n\n                var now = new Date();\n                return (now - this.dead) / 1000;\n              };\n\n              this.xhr = this._newXHR();\n            };\n\n            Strophe$1.Request.prototype = {\n              /** PrivateFunction: getResponse\n               *  Get a response from the underlying XMLHttpRequest.\n               *\n               *  This function attempts to get a response from the request and checks\n               *  for errors.\n               *\n               *  Throws:\n               *    \"parsererror\" - A parser error occured.\n               *    \"bad-format\" - The entity has sent XML that cannot be processed.\n               *\n               *  Returns:\n               *    The DOM element tree of the response.\n               */\n              getResponse: function getResponse() {\n                var node = null;\n\n                if (this.xhr.responseXML && this.xhr.responseXML.documentElement) {\n                  node = this.xhr.responseXML.documentElement;\n\n                  if (node.tagName === \"parsererror\") {\n                    Strophe$1.error(\"invalid response received\");\n                    Strophe$1.error(\"responseText: \" + this.xhr.responseText);\n                    Strophe$1.error(\"responseXML: \" + Strophe$1.serialize(this.xhr.responseXML));\n                    throw new Error(\"parsererror\");\n                  }\n                } else if (this.xhr.responseText) {\n                  // In React Native, we may get responseText but no responseXML.  We can try to parse it manually.\n                  Strophe$1.debug(\"Got responseText but no responseXML; attempting to parse it with DOMParser...\");\n                  node = new DOMParser().parseFromString(this.xhr.responseText, 'application/xml').documentElement;\n\n                  if (!node) {\n                    throw new Error('Parsing produced null node');\n                  } else if (node.querySelector('parsererror')) {\n                    Strophe$1.error(\"invalid response received: \" + node.querySelector('parsererror').textContent);\n                    Strophe$1.error(\"responseText: \" + this.xhr.responseText);\n                    var error = new Error();\n                    error.name = Strophe$1.ErrorCondition.BAD_FORMAT;\n                    throw error;\n                  }\n                }\n\n                return node;\n              },\n\n              /** PrivateFunction: _newXHR\n               *  _Private_ helper function to create XMLHttpRequests.\n               *\n               *  This function creates XMLHttpRequests across all implementations.\n               *\n               *  Returns:\n               *    A new XMLHttpRequest.\n               */\n              _newXHR: function _newXHR() {\n                var xhr = null;\n\n                if (window.XMLHttpRequest) {\n                  xhr = new XMLHttpRequest();\n\n                  if (xhr.overrideMimeType) {\n                    xhr.overrideMimeType(\"text/xml; charset=utf-8\");\n                  }\n                } else if (window.ActiveXObject) {\n                  xhr = new ActiveXObject(\"Microsoft.XMLHTTP\");\n                } // use Function.bind() to prepend ourselves as an argument\n\n\n                xhr.onreadystatechange = this.func.bind(null, this);\n                return xhr;\n              }\n            };\n            /** Class: Strophe.Bosh\n             *  _Private_ helper class that handles BOSH Connections\n             *\n             *  The Strophe.Bosh class is used internally by Strophe.Connection\n             *  to encapsulate BOSH sessions. It is not meant to be used from user's code.\n             */\n\n            /** File: bosh.js\n             *  A JavaScript library to enable BOSH in Strophejs.\n             *\n             *  this library uses Bidirectional-streams Over Synchronous HTTP (BOSH)\n             *  to emulate a persistent, stateful, two-way connection to an XMPP server.\n             *  More information on BOSH can be found in XEP 124.\n             */\n\n            /** PrivateConstructor: Strophe.Bosh\n             *  Create and initialize a Strophe.Bosh object.\n             *\n             *  Parameters:\n             *    (Strophe.Connection) connection - The Strophe.Connection that will use BOSH.\n             *\n             *  Returns:\n             *    A new Strophe.Bosh object.\n             */\n\n            Strophe$1.Bosh = function (connection) {\n              this._conn = connection;\n              /* request id for body tags */\n\n              this.rid = Math.floor(Math.random() * 4294967295);\n              /* The current session ID. */\n\n              this.sid = null; // default BOSH values\n\n              this.hold = 1;\n              this.wait = 60;\n              this.window = 5;\n              this.errors = 0;\n              this.inactivity = null;\n              this.lastResponseHeaders = null;\n              this._requests = [];\n            };\n\n            Strophe$1.Bosh.prototype = {\n              /** Variable: strip\n               *\n               *  BOSH-Connections will have all stanzas wrapped in a <body> tag when\n               *  passed to <Strophe.Connection.xmlInput> or <Strophe.Connection.xmlOutput>.\n               *  To strip this tag, User code can set <Strophe.Bosh.strip> to \"body\":\n               *\n               *  > Strophe.Bosh.prototype.strip = \"body\";\n               *\n               *  This will enable stripping of the body tag in both\n               *  <Strophe.Connection.xmlInput> and <Strophe.Connection.xmlOutput>.\n               */\n              strip: null,\n\n              /** PrivateFunction: _buildBody\n               *  _Private_ helper function to generate the <body/> wrapper for BOSH.\n               *\n               *  Returns:\n               *    A Strophe.Builder with a <body/> element.\n               */\n              _buildBody: function _buildBody() {\n                var bodyWrap = $build$1('body', {\n                  'rid': this.rid++,\n                  'xmlns': Strophe$1.NS.HTTPBIND\n                });\n\n                if (this.sid !== null) {\n                  bodyWrap.attrs({\n                    'sid': this.sid\n                  });\n                }\n\n                if (this._conn.options.keepalive && this._conn._sessionCachingSupported()) {\n                  this._cacheSession();\n                }\n\n                return bodyWrap;\n              },\n\n              /** PrivateFunction: _reset\n               *  Reset the connection.\n               *\n               *  This function is called by the reset function of the Strophe Connection\n               */\n              _reset: function _reset() {\n                this.rid = Math.floor(Math.random() * 4294967295);\n                this.sid = null;\n                this.errors = 0;\n\n                if (this._conn._sessionCachingSupported()) {\n                  window.sessionStorage.removeItem('strophe-bosh-session');\n                }\n\n                this._conn.nextValidRid(this.rid);\n              },\n\n              /** PrivateFunction: _connect\n               *  _Private_ function that initializes the BOSH connection.\n               *\n               *  Creates and sends the Request that initializes the BOSH connection.\n               */\n              _connect: function _connect(wait, hold, route) {\n                this.wait = wait || this.wait;\n                this.hold = hold || this.hold;\n                this.errors = 0;\n\n                var body = this._buildBody().attrs({\n                  \"to\": this._conn.domain,\n                  \"xml:lang\": \"en\",\n                  \"wait\": this.wait,\n                  \"hold\": this.hold,\n                  \"content\": \"text/xml; charset=utf-8\",\n                  \"ver\": \"1.6\",\n                  \"xmpp:version\": \"1.0\",\n                  \"xmlns:xmpp\": Strophe$1.NS.BOSH\n                });\n\n                if (route) {\n                  body.attrs({\n                    'route': route\n                  });\n                }\n\n                var _connect_cb = this._conn._connect_cb;\n\n                this._requests.push(new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, _connect_cb.bind(this._conn)), body.tree().getAttribute(\"rid\")));\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _attach\n               *  Attach to an already created and authenticated BOSH session.\n               *\n               *  This function is provided to allow Strophe to attach to BOSH\n               *  sessions which have been created externally, perhaps by a Web\n               *  application.  This is often used to support auto-login type features\n               *  without putting user credentials into the page.\n               *\n               *  Parameters:\n               *    (String) jid - The full JID that is bound by the session.\n               *    (String) sid - The SID of the BOSH session.\n               *    (String) rid - The current RID of the BOSH session.  This RID\n               *      will be used by the next request.\n               *    (Function) callback The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              _attach: function _attach(jid, sid, rid, callback, wait, hold, wind) {\n                this._conn.jid = jid;\n                this.sid = sid;\n                this.rid = rid;\n                this._conn.connect_callback = callback;\n                this._conn.domain = Strophe$1.getDomainFromJid(this._conn.jid);\n                this._conn.authenticated = true;\n                this._conn.connected = true;\n                this.wait = wait || this.wait;\n                this.hold = hold || this.hold;\n                this.window = wind || this.window;\n\n                this._conn._changeConnectStatus(Strophe$1.Status.ATTACHED, null);\n              },\n\n              /** PrivateFunction: _restore\n               *  Attempt to restore a cached BOSH session\n               *\n               *  Parameters:\n               *    (String) jid - The full JID that is bound by the session.\n               *      This parameter is optional but recommended, specifically in cases\n               *      where prebinded BOSH sessions are used where it's important to know\n               *      that the right session is being restored.\n               *    (Function) callback The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              _restore: function _restore(jid, callback, wait, hold, wind) {\n                var session = JSON.parse(window.sessionStorage.getItem('strophe-bosh-session'));\n\n                if (typeof session !== \"undefined\" && session !== null && session.rid && session.sid && session.jid && (typeof jid === \"undefined\" || jid === null || Strophe$1.getBareJidFromJid(session.jid) === Strophe$1.getBareJidFromJid(jid) || // If authcid is null, then it's an anonymous login, so\n                // we compare only the domains:\n                Strophe$1.getNodeFromJid(jid) === null && Strophe$1.getDomainFromJid(session.jid) === jid)) {\n                  this._conn.restored = true;\n\n                  this._attach(session.jid, session.sid, session.rid, callback, wait, hold, wind);\n                } else {\n                  var error = new Error(\"_restore: no restoreable session.\");\n                  error.name = \"StropheSessionError\";\n                  throw error;\n                }\n              },\n\n              /** PrivateFunction: _cacheSession\n               *  _Private_ handler for the beforeunload event.\n               *\n               *  This handler is used to process the Bosh-part of the initial request.\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               */\n              _cacheSession: function _cacheSession() {\n                if (this._conn.authenticated) {\n                  if (this._conn.jid && this.rid && this.sid) {\n                    window.sessionStorage.setItem('strophe-bosh-session', JSON.stringify({\n                      'jid': this._conn.jid,\n                      'rid': this.rid,\n                      'sid': this.sid\n                    }));\n                  }\n                } else {\n                  window.sessionStorage.removeItem('strophe-bosh-session');\n                }\n              },\n\n              /** PrivateFunction: _connect_cb\n               *  _Private_ handler for initial connection request.\n               *\n               *  This handler is used to process the Bosh-part of the initial request.\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               */\n              _connect_cb: function _connect_cb(bodyWrap) {\n                var typ = bodyWrap.getAttribute(\"type\");\n\n                if (typ !== null && typ === \"terminate\") {\n                  // an error occurred\n                  var cond = bodyWrap.getAttribute(\"condition\");\n                  Strophe$1.error(\"BOSH-Connection failed: \" + cond);\n                  var conflict = bodyWrap.getElementsByTagName(\"conflict\");\n\n                  if (cond !== null) {\n                    if (cond === \"remote-stream-error\" && conflict.length > 0) {\n                      cond = \"conflict\";\n                    }\n\n                    this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, cond);\n                  } else {\n                    this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, \"unknown\");\n                  }\n\n                  this._conn._doDisconnect(cond);\n\n                  return Strophe$1.Status.CONNFAIL;\n                } // check to make sure we don't overwrite these if _connect_cb is\n                // called multiple times in the case of missing stream:features\n\n\n                if (!this.sid) {\n                  this.sid = bodyWrap.getAttribute(\"sid\");\n                }\n\n                var wind = bodyWrap.getAttribute('requests');\n\n                if (wind) {\n                  this.window = parseInt(wind, 10);\n                }\n\n                var hold = bodyWrap.getAttribute('hold');\n\n                if (hold) {\n                  this.hold = parseInt(hold, 10);\n                }\n\n                var wait = bodyWrap.getAttribute('wait');\n\n                if (wait) {\n                  this.wait = parseInt(wait, 10);\n                }\n\n                var inactivity = bodyWrap.getAttribute('inactivity');\n\n                if (inactivity) {\n                  this.inactivity = parseInt(inactivity, 10);\n                }\n              },\n\n              /** PrivateFunction: _disconnect\n               *  _Private_ part of Connection.disconnect for Bosh\n               *\n               *  Parameters:\n               *    (Request) pres - This stanza will be sent before disconnecting.\n               */\n              _disconnect: function _disconnect(pres) {\n                this._sendTerminate(pres);\n              },\n\n              /** PrivateFunction: _doDisconnect\n               *  _Private_ function to disconnect.\n               *\n               *  Resets the SID and RID.\n               */\n              _doDisconnect: function _doDisconnect() {\n                this.sid = null;\n                this.rid = Math.floor(Math.random() * 4294967295);\n\n                if (this._conn._sessionCachingSupported()) {\n                  window.sessionStorage.removeItem('strophe-bosh-session');\n                }\n\n                this._conn.nextValidRid(this.rid);\n              },\n\n              /** PrivateFunction: _emptyQueue\n               * _Private_ function to check if the Request queue is empty.\n               *\n               *  Returns:\n               *    True, if there are no Requests queued, False otherwise.\n               */\n              _emptyQueue: function _emptyQueue() {\n                return this._requests.length === 0;\n              },\n\n              /** PrivateFunction: _callProtocolErrorHandlers\n               *  _Private_ function to call error handlers registered for HTTP errors.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The request that is changing readyState.\n               */\n              _callProtocolErrorHandlers: function _callProtocolErrorHandlers(req) {\n                var reqStatus = this._getRequestStatus(req);\n\n                var err_callback = this._conn.protocolErrorHandlers.HTTP[reqStatus];\n\n                if (err_callback) {\n                  err_callback.call(this, reqStatus);\n                }\n              },\n\n              /** PrivateFunction: _hitError\n               *  _Private_ function to handle the error count.\n               *\n               *  Requests are resent automatically until their error count reaches\n               *  5.  Each time an error is encountered, this function is called to\n               *  increment the count and disconnect if the count is too high.\n               *\n               *  Parameters:\n               *    (Integer) reqStatus - The request status.\n               */\n              _hitError: function _hitError(reqStatus) {\n                this.errors++;\n                Strophe$1.warn(\"request errored, status: \" + reqStatus + \", number of errors: \" + this.errors);\n\n                if (this.errors > 4) {\n                  this._conn._onDisconnectTimeout();\n                }\n              },\n\n              /** PrivateFunction: _no_auth_received\n               *\n               * Called on stream start/restart when no stream:features\n               * has been received and sends a blank poll request.\n               */\n              _no_auth_received: function _no_auth_received(callback) {\n                Strophe$1.warn(\"Server did not yet offer a supported authentication \" + \"mechanism. Sending a blank poll request.\");\n\n                if (callback) {\n                  callback = callback.bind(this._conn);\n                } else {\n                  callback = this._conn._connect_cb.bind(this._conn);\n                }\n\n                var body = this._buildBody();\n\n                this._requests.push(new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, callback), body.tree().getAttribute(\"rid\")));\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _onDisconnectTimeout\n               *  _Private_ timeout handler for handling non-graceful disconnection.\n               *\n               *  Cancels all remaining Requests and clears the queue.\n               */\n              _onDisconnectTimeout: function _onDisconnectTimeout() {\n                this._abortAllRequests();\n              },\n\n              /** PrivateFunction: _abortAllRequests\n               *  _Private_ helper function that makes sure all pending requests are aborted.\n               */\n              _abortAllRequests: function _abortAllRequests() {\n                while (this._requests.length > 0) {\n                  var req = this._requests.pop();\n\n                  req.abort = true;\n                  req.xhr.abort();\n\n                  req.xhr.onreadystatechange = function () {};\n                }\n              },\n\n              /** PrivateFunction: _onIdle\n               *  _Private_ handler called by Strophe.Connection._onIdle\n               *\n               *  Sends all queued Requests or polls with empty Request if there are none.\n               */\n              _onIdle: function _onIdle() {\n                var data = this._conn._data; // if no requests are in progress, poll\n\n                if (this._conn.authenticated && this._requests.length === 0 && data.length === 0 && !this._conn.disconnecting) {\n                  Strophe$1.debug(\"no requests during idle cycle, sending blank request\");\n                  data.push(null);\n                }\n\n                if (this._conn.paused) {\n                  return;\n                }\n\n                if (this._requests.length < 2 && data.length > 0) {\n                  var body = this._buildBody();\n\n                  for (var i = 0; i < data.length; i++) {\n                    if (data[i] !== null) {\n                      if (data[i] === \"restart\") {\n                        body.attrs({\n                          \"to\": this._conn.domain,\n                          \"xml:lang\": \"en\",\n                          \"xmpp:restart\": \"true\",\n                          \"xmlns:xmpp\": Strophe$1.NS.BOSH\n                        });\n                      } else {\n                        body.cnode(data[i]).up();\n                      }\n                    }\n                  }\n\n                  delete this._conn._data;\n                  this._conn._data = [];\n\n                  this._requests.push(new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, this._conn._dataRecv.bind(this._conn)), body.tree().getAttribute(\"rid\")));\n\n                  this._throttledRequestHandler();\n                }\n\n                if (this._requests.length > 0) {\n                  var time_elapsed = this._requests[0].age();\n\n                  if (this._requests[0].dead !== null) {\n                    if (this._requests[0].timeDead() > Math.floor(Strophe$1.SECONDARY_TIMEOUT * this.wait)) {\n                      this._throttledRequestHandler();\n                    }\n                  }\n\n                  if (time_elapsed > Math.floor(Strophe$1.TIMEOUT * this.wait)) {\n                    Strophe$1.warn(\"Request \" + this._requests[0].id + \" timed out, over \" + Math.floor(Strophe$1.TIMEOUT * this.wait) + \" seconds since last activity\");\n\n                    this._throttledRequestHandler();\n                  }\n                }\n              },\n\n              /** PrivateFunction: _getRequestStatus\n               *\n               *  Returns the HTTP status code from a Strophe.Request\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The Strophe.Request instance.\n               *    (Integer) def - The default value that should be returned if no\n               *          status value was found.\n               */\n              _getRequestStatus: function _getRequestStatus(req, def) {\n                var reqStatus;\n\n                if (req.xhr.readyState === 4) {\n                  try {\n                    reqStatus = req.xhr.status;\n                  } catch (e) {\n                    // ignore errors from undefined status attribute. Works\n                    // around a browser bug\n                    Strophe$1.error(\"Caught an error while retrieving a request's status, \" + \"reqStatus: \" + reqStatus);\n                  }\n                }\n\n                if (typeof reqStatus === \"undefined\") {\n                  reqStatus = typeof def === 'number' ? def : 0;\n                }\n\n                return reqStatus;\n              },\n\n              /** PrivateFunction: _onRequestStateChange\n               *  _Private_ handler for Strophe.Request state changes.\n               *\n               *  This function is called when the XMLHttpRequest readyState changes.\n               *  It contains a lot of error handling logic for the many ways that\n               *  requests can fail, and calls the request callback when requests\n               *  succeed.\n               *\n               *  Parameters:\n               *    (Function) func - The handler for the request.\n               *    (Strophe.Request) req - The request that is changing readyState.\n               */\n              _onRequestStateChange: function _onRequestStateChange(func, req) {\n                Strophe$1.debug(\"request id \" + req.id + \".\" + req.sends + \" state changed to \" + req.xhr.readyState);\n\n                if (req.abort) {\n                  req.abort = false;\n                  return;\n                }\n\n                if (req.xhr.readyState !== 4) {\n                  // The request is not yet complete\n                  return;\n                }\n\n                var reqStatus = this._getRequestStatus(req);\n\n                this.lastResponseHeaders = req.xhr.getAllResponseHeaders();\n\n                if (this.disconnecting && reqStatus >= 400) {\n                  this._hitError(reqStatus);\n\n                  this._callProtocolErrorHandlers(req);\n\n                  return;\n                }\n\n                var valid_request = reqStatus > 0 && reqStatus < 500;\n                var too_many_retries = req.sends > this._conn.maxRetries;\n\n                if (valid_request || too_many_retries) {\n                  // remove from internal queue\n                  this._removeRequest(req);\n\n                  Strophe$1.debug(\"request id \" + req.id + \" should now be removed\");\n                }\n\n                if (reqStatus === 200) {\n                  // request succeeded\n                  var reqIs0 = this._requests[0] === req;\n                  var reqIs1 = this._requests[1] === req; // if request 1 finished, or request 0 finished and request\n                  // 1 is over Strophe.SECONDARY_TIMEOUT seconds old, we need to\n                  // restart the other - both will be in the first spot, as the\n                  // completed request has been removed from the queue already\n\n                  if (reqIs1 || reqIs0 && this._requests.length > 0 && this._requests[0].age() > Math.floor(Strophe$1.SECONDARY_TIMEOUT * this.wait)) {\n                    this._restartRequest(0);\n                  }\n\n                  this._conn.nextValidRid(Number(req.rid) + 1);\n\n                  Strophe$1.debug(\"request id \" + req.id + \".\" + req.sends + \" got 200\");\n                  func(req); // call handler\n\n                  this.errors = 0;\n                } else if (reqStatus === 0 || reqStatus >= 400 && reqStatus < 600 || reqStatus >= 12000) {\n                  // request failed\n                  Strophe$1.error(\"request id \" + req.id + \".\" + req.sends + \" error \" + reqStatus + \" happened\");\n\n                  this._hitError(reqStatus);\n\n                  this._callProtocolErrorHandlers(req);\n\n                  if (reqStatus >= 400 && reqStatus < 500) {\n                    this._conn._changeConnectStatus(Strophe$1.Status.DISCONNECTING, null);\n\n                    this._conn._doDisconnect();\n                  }\n                } else {\n                  Strophe$1.error(\"request id \" + req.id + \".\" + req.sends + \" error \" + reqStatus + \" happened\");\n                }\n\n                if (!valid_request && !too_many_retries) {\n                  this._throttledRequestHandler();\n                } else if (too_many_retries && !this._conn.connected) {\n                  this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, \"giving-up\");\n                }\n              },\n\n              /** PrivateFunction: _processRequest\n               *  _Private_ function to process a request in the queue.\n               *\n               *  This function takes requests off the queue and sends them and\n               *  restarts dead requests.\n               *\n               *  Parameters:\n               *    (Integer) i - The index of the request in the queue.\n               */\n              _processRequest: function _processRequest(i) {\n                var _this = this;\n\n                var req = this._requests[i];\n\n                var reqStatus = this._getRequestStatus(req, -1); // make sure we limit the number of retries\n\n\n                if (req.sends > this._conn.maxRetries) {\n                  this._conn._onDisconnectTimeout();\n\n                  return;\n                }\n\n                var time_elapsed = req.age();\n                var primary_timeout = !isNaN(time_elapsed) && time_elapsed > Math.floor(Strophe$1.TIMEOUT * this.wait);\n                var secondary_timeout = req.dead !== null && req.timeDead() > Math.floor(Strophe$1.SECONDARY_TIMEOUT * this.wait);\n                var server_error = req.xhr.readyState === 4 && (reqStatus < 1 || reqStatus >= 500);\n\n                if (primary_timeout || secondary_timeout || server_error) {\n                  if (secondary_timeout) {\n                    Strophe$1.error(\"Request \".concat(this._requests[i].id, \" timed out (secondary), restarting\"));\n                  }\n\n                  req.abort = true;\n                  req.xhr.abort(); // setting to null fails on IE6, so set to empty function\n\n                  req.xhr.onreadystatechange = function () {};\n\n                  this._requests[i] = new Strophe$1.Request(req.xmlData, req.origFunc, req.rid, req.sends);\n                  req = this._requests[i];\n                }\n\n                if (req.xhr.readyState === 0) {\n                  Strophe$1.debug(\"request id \" + req.id + \".\" + req.sends + \" posting\");\n\n                  try {\n                    var content_type = this._conn.options.contentType || \"text/xml; charset=utf-8\";\n                    req.xhr.open(\"POST\", this._conn.service, this._conn.options.sync ? false : true);\n\n                    if (typeof req.xhr.setRequestHeader !== 'undefined') {\n                      // IE9 doesn't have setRequestHeader\n                      req.xhr.setRequestHeader(\"Content-Type\", content_type);\n                    }\n\n                    if (this._conn.options.withCredentials) {\n                      req.xhr.withCredentials = true;\n                    }\n                  } catch (e2) {\n                    Strophe$1.error(\"XHR open failed: \" + e2.toString());\n\n                    if (!this._conn.connected) {\n                      this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, \"bad-service\");\n                    }\n\n                    this._conn.disconnect();\n\n                    return;\n                  } // Fires the XHR request -- may be invoked immediately\n                  // or on a gradually expanding retry window for reconnects\n\n\n                  var sendFunc = function sendFunc() {\n                    req.date = new Date();\n\n                    if (_this._conn.options.customHeaders) {\n                      var headers = _this._conn.options.customHeaders;\n\n                      for (var header in headers) {\n                        if (Object.prototype.hasOwnProperty.call(headers, header)) {\n                          req.xhr.setRequestHeader(header, headers[header]);\n                        }\n                      }\n                    }\n\n                    req.xhr.send(req.data);\n                  }; // Implement progressive backoff for reconnects --\n                  // First retry (send === 1) should also be instantaneous\n\n\n                  if (req.sends > 1) {\n                    // Using a cube of the retry number creates a nicely\n                    // expanding retry window\n                    var backoff = Math.min(Math.floor(Strophe$1.TIMEOUT * this.wait), Math.pow(req.sends, 3)) * 1000;\n                    setTimeout(function () {\n                      // XXX: setTimeout should be called only with function expressions (23974bc1)\n                      sendFunc();\n                    }, backoff);\n                  } else {\n                    sendFunc();\n                  }\n\n                  req.sends++;\n\n                  if (this._conn.xmlOutput !== Strophe$1.Connection.prototype.xmlOutput) {\n                    if (req.xmlData.nodeName === this.strip && req.xmlData.childNodes.length) {\n                      this._conn.xmlOutput(req.xmlData.childNodes[0]);\n                    } else {\n                      this._conn.xmlOutput(req.xmlData);\n                    }\n                  }\n\n                  if (this._conn.rawOutput !== Strophe$1.Connection.prototype.rawOutput) {\n                    this._conn.rawOutput(req.data);\n                  }\n                } else {\n                  Strophe$1.debug(\"_processRequest: \" + (i === 0 ? \"first\" : \"second\") + \" request has readyState of \" + req.xhr.readyState);\n                }\n              },\n\n              /** PrivateFunction: _removeRequest\n               *  _Private_ function to remove a request from the queue.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The request to remove.\n               */\n              _removeRequest: function _removeRequest(req) {\n                Strophe$1.debug(\"removing request\");\n\n                for (var i = this._requests.length - 1; i >= 0; i--) {\n                  if (req === this._requests[i]) {\n                    this._requests.splice(i, 1);\n                  }\n                } // IE6 fails on setting to null, so set to empty function\n\n\n                req.xhr.onreadystatechange = function () {};\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _restartRequest\n               *  _Private_ function to restart a request that is presumed dead.\n               *\n               *  Parameters:\n               *    (Integer) i - The index of the request in the queue.\n               */\n              _restartRequest: function _restartRequest(i) {\n                var req = this._requests[i];\n\n                if (req.dead === null) {\n                  req.dead = new Date();\n                }\n\n                this._processRequest(i);\n              },\n\n              /** PrivateFunction: _reqToData\n               * _Private_ function to get a stanza out of a request.\n               *\n               * Tries to extract a stanza out of a Request Object.\n               * When this fails the current connection will be disconnected.\n               *\n               *  Parameters:\n               *    (Object) req - The Request.\n               *\n               *  Returns:\n               *    The stanza that was passed.\n               */\n              _reqToData: function _reqToData(req) {\n                try {\n                  return req.getResponse();\n                } catch (e) {\n                  if (e.message !== \"parsererror\") {\n                    throw e;\n                  }\n\n                  this._conn.disconnect(\"strophe-parsererror\");\n                }\n              },\n\n              /** PrivateFunction: _sendTerminate\n               *  _Private_ function to send initial disconnect sequence.\n               *\n               *  This is the first step in a graceful disconnect.  It sends\n               *  the BOSH server a terminate body and includes an unavailable\n               *  presence if authentication has completed.\n               */\n              _sendTerminate: function _sendTerminate(pres) {\n                Strophe$1.debug(\"_sendTerminate was called\");\n\n                var body = this._buildBody().attrs({\n                  type: \"terminate\"\n                });\n\n                if (pres) {\n                  body.cnode(pres.tree());\n                }\n\n                var req = new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, this._conn._dataRecv.bind(this._conn)), body.tree().getAttribute(\"rid\"));\n\n                this._requests.push(req);\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _send\n               *  _Private_ part of the Connection.send function for BOSH\n               *\n               * Just triggers the RequestHandler to send the messages that are in the queue\n               */\n              _send: function _send() {\n                var _this2 = this;\n\n                clearTimeout(this._conn._idleTimeout);\n\n                this._throttledRequestHandler();\n\n                this._conn._idleTimeout = setTimeout(function () {\n                  return _this2._conn._onIdle();\n                }, 100);\n              },\n\n              /** PrivateFunction: _sendRestart\n               *\n               *  Send an xmpp:restart stanza.\n               */\n              _sendRestart: function _sendRestart() {\n                this._throttledRequestHandler();\n\n                clearTimeout(this._conn._idleTimeout);\n              },\n\n              /** PrivateFunction: _throttledRequestHandler\n               *  _Private_ function to throttle requests to the connection window.\n               *\n               *  This function makes sure we don't send requests so fast that the\n               *  request ids overflow the connection window in the case that one\n               *  request died.\n               */\n              _throttledRequestHandler: function _throttledRequestHandler() {\n                if (!this._requests) {\n                  Strophe$1.debug(\"_throttledRequestHandler called with \" + \"undefined requests\");\n                } else {\n                  Strophe$1.debug(\"_throttledRequestHandler called with \" + this._requests.length + \" requests\");\n                }\n\n                if (!this._requests || this._requests.length === 0) {\n                  return;\n                }\n\n                if (this._requests.length > 0) {\n                  this._processRequest(0);\n                }\n\n                if (this._requests.length > 1 && Math.abs(this._requests[0].rid - this._requests[1].rid) < this.window) {\n                  this._processRequest(1);\n                }\n              }\n            };\n\n            /*\n                This program is distributed under the terms of the MIT license.\n                Please see the LICENSE file for details.\n\n                Copyright 2006-2008, OGG, LLC\n            */\n            var Strophe$2 = core.Strophe;\n            var $build$2 = core.$build;\n            /** Class: Strophe.WebSocket\n             *  _Private_ helper class that handles WebSocket Connections\n             *\n             *  The Strophe.WebSocket class is used internally by Strophe.Connection\n             *  to encapsulate WebSocket sessions. It is not meant to be used from user's code.\n             */\n\n            /** File: websocket.js\n             *  A JavaScript library to enable XMPP over Websocket in Strophejs.\n             *\n             *  This file implements XMPP over WebSockets for Strophejs.\n             *  If a Connection is established with a Websocket url (ws://...)\n             *  Strophe will use WebSockets.\n             *  For more information on XMPP-over-WebSocket see RFC 7395:\n             *  http://tools.ietf.org/html/rfc7395\n             *\n             *  WebSocket support implemented by Andreas Guth (andreas.guth@rwth-aachen.de)\n             */\n\n            /** PrivateConstructor: Strophe.Websocket\n             *  Create and initialize a Strophe.WebSocket object.\n             *  Currently only sets the connection Object.\n             *\n             *  Parameters:\n             *    (Strophe.Connection) connection - The Strophe.Connection that will use WebSockets.\n             *\n             *  Returns:\n             *    A new Strophe.WebSocket object.\n             */\n\n            Strophe$2.Websocket = function (connection) {\n              this._conn = connection;\n              this.strip = \"wrapper\";\n              var service = connection.service;\n\n              if (service.indexOf(\"ws:\") !== 0 && service.indexOf(\"wss:\") !== 0) {\n                // If the service is not an absolute URL, assume it is a path and put the absolute\n                // URL together from options, current URL and the path.\n                var new_service = \"\";\n\n                if (connection.options.protocol === \"ws\" && window.location.protocol !== \"https:\") {\n                  new_service += \"ws\";\n                } else {\n                  new_service += \"wss\";\n                }\n\n                new_service += \"://\" + window.location.host;\n\n                if (service.indexOf(\"/\") !== 0) {\n                  new_service += window.location.pathname + service;\n                } else {\n                  new_service += service;\n                }\n\n                connection.service = new_service;\n              }\n            };\n\n            Strophe$2.Websocket.prototype = {\n              /** PrivateFunction: _buildStream\n               *  _Private_ helper function to generate the <stream> start tag for WebSockets\n               *\n               *  Returns:\n               *    A Strophe.Builder with a <stream> element.\n               */\n              _buildStream: function _buildStream() {\n                return $build$2(\"open\", {\n                  \"xmlns\": Strophe$2.NS.FRAMING,\n                  \"to\": this._conn.domain,\n                  \"version\": '1.0'\n                });\n              },\n\n              /** PrivateFunction: _check_streamerror\n               * _Private_ checks a message for stream:error\n               *\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               *    connectstatus - The ConnectStatus that will be set on error.\n               *  Returns:\n               *     true if there was a streamerror, false otherwise.\n               */\n              _check_streamerror: function _check_streamerror(bodyWrap, connectstatus) {\n                var errors;\n\n                if (bodyWrap.getElementsByTagNameNS) {\n                  errors = bodyWrap.getElementsByTagNameNS(Strophe$2.NS.STREAM, \"error\");\n                } else {\n                  errors = bodyWrap.getElementsByTagName(\"stream:error\");\n                }\n\n                if (errors.length === 0) {\n                  return false;\n                }\n\n                var error = errors[0];\n                var condition = \"\";\n                var text = \"\";\n                var ns = \"urn:ietf:params:xml:ns:xmpp-streams\";\n\n                for (var i = 0; i < error.childNodes.length; i++) {\n                  var e = error.childNodes[i];\n\n                  if (e.getAttribute(\"xmlns\") !== ns) {\n                    break;\n                  }\n\n                  if (e.nodeName === \"text\") {\n                    text = e.textContent;\n                  } else {\n                    condition = e.nodeName;\n                  }\n                }\n\n                var errorString = \"WebSocket stream error: \";\n\n                if (condition) {\n                  errorString += condition;\n                } else {\n                  errorString += \"unknown\";\n                }\n\n                if (text) {\n                  errorString += \" - \" + text;\n                }\n\n                Strophe$2.error(errorString); // close the connection on stream_error\n\n                this._conn._changeConnectStatus(connectstatus, condition);\n\n                this._conn._doDisconnect();\n\n                return true;\n              },\n\n              /** PrivateFunction: _reset\n               *  Reset the connection.\n               *\n               *  This function is called by the reset function of the Strophe Connection.\n               *  Is not needed by WebSockets.\n               */\n              _reset: function _reset() {\n                return;\n              },\n\n              /** PrivateFunction: _connect\n               *  _Private_ function called by Strophe.Connection.connect\n               *\n               *  Creates a WebSocket for a connection and assigns Callbacks to it.\n               *  Does nothing if there already is a WebSocket.\n               */\n              _connect: function _connect() {\n                // Ensure that there is no open WebSocket from a previous Connection.\n                this._closeSocket(); // Create the new WobSocket\n\n\n                this.socket = new WebSocket(this._conn.service, \"xmpp\");\n                this.socket.onopen = this._onOpen.bind(this);\n                this.socket.onerror = this._onError.bind(this);\n                this.socket.onclose = this._onClose.bind(this);\n                this.socket.onmessage = this._connect_cb_wrapper.bind(this);\n              },\n\n              /** PrivateFunction: _connect_cb\n               *  _Private_ function called by Strophe.Connection._connect_cb\n               *\n               * checks for stream:error\n               *\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               */\n              _connect_cb: function _connect_cb(bodyWrap) {\n                var error = this._check_streamerror(bodyWrap, Strophe$2.Status.CONNFAIL);\n\n                if (error) {\n                  return Strophe$2.Status.CONNFAIL;\n                }\n              },\n\n              /** PrivateFunction: _handleStreamStart\n               * _Private_ function that checks the opening <open /> tag for errors.\n               *\n               * Disconnects if there is an error and returns false, true otherwise.\n               *\n               *  Parameters:\n               *    (Node) message - Stanza containing the <open /> tag.\n               */\n              _handleStreamStart: function _handleStreamStart(message) {\n                var error = false; // Check for errors in the <open /> tag\n\n                var ns = message.getAttribute(\"xmlns\");\n\n                if (typeof ns !== \"string\") {\n                  error = \"Missing xmlns in <open />\";\n                } else if (ns !== Strophe$2.NS.FRAMING) {\n                  error = \"Wrong xmlns in <open />: \" + ns;\n                }\n\n                var ver = message.getAttribute(\"version\");\n\n                if (typeof ver !== \"string\") {\n                  error = \"Missing version in <open />\";\n                } else if (ver !== \"1.0\") {\n                  error = \"Wrong version in <open />: \" + ver;\n                }\n\n                if (error) {\n                  this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, error);\n\n                  this._conn._doDisconnect();\n\n                  return false;\n                }\n\n                return true;\n              },\n\n              /** PrivateFunction: _connect_cb_wrapper\n               * _Private_ function that handles the first connection messages.\n               *\n               * On receiving an opening stream tag this callback replaces itself with the real\n               * message handler. On receiving a stream error the connection is terminated.\n               */\n              _connect_cb_wrapper: function _connect_cb_wrapper(message) {\n                if (message.data.indexOf(\"<open \") === 0 || message.data.indexOf(\"<?xml\") === 0) {\n                  // Strip the XML Declaration, if there is one\n                  var data = message.data.replace(/^(<\\?.*?\\?>\\s*)*/, \"\");\n                  if (data === '') return;\n                  var streamStart = new DOMParser().parseFromString(data, \"text/xml\").documentElement;\n\n                  this._conn.xmlInput(streamStart);\n\n                  this._conn.rawInput(message.data); //_handleStreamSteart will check for XML errors and disconnect on error\n\n\n                  if (this._handleStreamStart(streamStart)) {\n                    //_connect_cb will check for stream:error and disconnect on error\n                    this._connect_cb(streamStart);\n                  }\n                } else if (message.data.indexOf(\"<close \") === 0) {\n                  // <close xmlns=\"urn:ietf:params:xml:ns:xmpp-framing />\n                  // Parse the raw string to an XML element\n                  var parsedMessage = new DOMParser().parseFromString(message.data, \"text/xml\").documentElement; // Report this input to the raw and xml handlers\n\n                  this._conn.xmlInput(parsedMessage);\n\n                  this._conn.rawInput(message.data);\n\n                  var see_uri = parsedMessage.getAttribute(\"see-other-uri\");\n\n                  if (see_uri) {\n                    var service = this._conn.service; // Valid scenarios: WSS->WSS, WS->ANY\n\n                    var isSecureRedirect = service.indexOf(\"wss:\") >= 0 && see_uri.indexOf(\"wss:\") >= 0 || service.indexOf(\"ws:\") >= 0;\n\n                    if (isSecureRedirect) {\n                      this._conn._changeConnectStatus(Strophe$2.Status.REDIRECT, \"Received see-other-uri, resetting connection\");\n\n                      this._conn.reset();\n\n                      this._conn.service = see_uri;\n\n                      this._connect();\n                    }\n                  } else {\n                    this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, \"Received closing stream\");\n\n                    this._conn._doDisconnect();\n                  }\n                } else {\n                  var string = this._streamWrap(message.data);\n\n                  var elem = new DOMParser().parseFromString(string, \"text/xml\").documentElement;\n                  this.socket.onmessage = this._onMessage.bind(this);\n\n                  this._conn._connect_cb(elem, null, message.data);\n                }\n              },\n\n              /** PrivateFunction: _disconnect\n               *  _Private_ function called by Strophe.Connection.disconnect\n               *\n               *  Disconnects and sends a last stanza if one is given\n               *\n               *  Parameters:\n               *    (Request) pres - This stanza will be sent before disconnecting.\n               */\n              _disconnect: function _disconnect(pres) {\n                if (this.socket && this.socket.readyState !== WebSocket.CLOSED) {\n                  if (pres) {\n                    this._conn.send(pres);\n                  }\n\n                  var close = $build$2(\"close\", {\n                    \"xmlns\": Strophe$2.NS.FRAMING\n                  });\n\n                  this._conn.xmlOutput(close.tree());\n\n                  var closeString = Strophe$2.serialize(close);\n\n                  this._conn.rawOutput(closeString);\n\n                  try {\n                    this.socket.send(closeString);\n                  } catch (e) {\n                    Strophe$2.warn(\"Couldn't send <close /> tag.\");\n                  }\n                }\n\n                this._conn._doDisconnect();\n              },\n\n              /** PrivateFunction: _doDisconnect\n               *  _Private_ function to disconnect.\n               *\n               *  Just closes the Socket for WebSockets\n               */\n              _doDisconnect: function _doDisconnect() {\n                Strophe$2.debug(\"WebSockets _doDisconnect was called\");\n\n                this._closeSocket();\n              },\n\n              /** PrivateFunction _streamWrap\n               *  _Private_ helper function to wrap a stanza in a <stream> tag.\n               *  This is used so Strophe can process stanzas from WebSockets like BOSH\n               */\n              _streamWrap: function _streamWrap(stanza) {\n                return \"<wrapper>\" + stanza + '</wrapper>';\n              },\n\n              /** PrivateFunction: _closeSocket\n               *  _Private_ function to close the WebSocket.\n               *\n               *  Closes the socket if it is still open and deletes it\n               */\n              _closeSocket: function _closeSocket() {\n                if (this.socket) {\n                  try {\n                    this.socket.onclose = null;\n                    this.socket.onerror = null;\n                    this.socket.onmessage = null;\n                    this.socket.close();\n                  } catch (e) {\n                    Strophe$2.debug(e.message);\n                  }\n                }\n\n                this.socket = null;\n              },\n\n              /** PrivateFunction: _emptyQueue\n               * _Private_ function to check if the message queue is empty.\n               *\n               *  Returns:\n               *    True, because WebSocket messages are send immediately after queueing.\n               */\n              _emptyQueue: function _emptyQueue() {\n                return true;\n              },\n\n              /** PrivateFunction: _onClose\n               * _Private_ function to handle websockets closing.\n               *\n               * Nothing to do here for WebSockets\n               */\n              _onClose: function _onClose(e) {\n                if (this._conn.connected && !this._conn.disconnecting) {\n                  Strophe$2.error(\"Websocket closed unexpectedly\");\n\n                  this._conn._doDisconnect();\n                } else if (e && e.code === 1006 && !this._conn.connected && this.socket) {\n                  // in case the onError callback was not called (Safari 10 does not\n                  // call onerror when the initial connection fails) we need to\n                  // dispatch a CONNFAIL status update to be consistent with the\n                  // behavior on other browsers.\n                  Strophe$2.error(\"Websocket closed unexcectedly\");\n\n                  this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, \"The WebSocket connection could not be established or was disconnected.\");\n\n                  this._conn._doDisconnect();\n                } else {\n                  Strophe$2.debug(\"Websocket closed\");\n                }\n              },\n\n              /** PrivateFunction: _no_auth_received\n               *\n               * Called on stream start/restart when no stream:features\n               * has been received.\n               */\n              _no_auth_received: function _no_auth_received(callback) {\n                Strophe$2.error(\"Server did not offer a supported authentication mechanism\");\n\n                this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, Strophe$2.ErrorCondition.NO_AUTH_MECH);\n\n                if (callback) {\n                  callback.call(this._conn);\n                }\n\n                this._conn._doDisconnect();\n              },\n\n              /** PrivateFunction: _onDisconnectTimeout\n               *  _Private_ timeout handler for handling non-graceful disconnection.\n               *\n               *  This does nothing for WebSockets\n               */\n              _onDisconnectTimeout: function _onDisconnectTimeout() {},\n\n              /** PrivateFunction: _abortAllRequests\n               *  _Private_ helper function that makes sure all pending requests are aborted.\n               */\n              _abortAllRequests: function _abortAllRequests() {},\n\n              /** PrivateFunction: _onError\n               * _Private_ function to handle websockets errors.\n               *\n               * Parameters:\n               * (Object) error - The websocket error.\n               */\n              _onError: function _onError(error) {\n                Strophe$2.error(\"Websocket error \" + error);\n\n                this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, \"The WebSocket connection could not be established or was disconnected.\");\n\n                this._disconnect();\n              },\n\n              /** PrivateFunction: _onIdle\n               *  _Private_ function called by Strophe.Connection._onIdle\n               *\n               *  sends all queued stanzas\n               */\n              _onIdle: function _onIdle() {\n                var data = this._conn._data;\n\n                if (data.length > 0 && !this._conn.paused) {\n                  for (var i = 0; i < data.length; i++) {\n                    if (data[i] !== null) {\n                      var stanza = void 0;\n\n                      if (data[i] === \"restart\") {\n                        stanza = this._buildStream().tree();\n                      } else {\n                        stanza = data[i];\n                      }\n\n                      var rawStanza = Strophe$2.serialize(stanza);\n\n                      this._conn.xmlOutput(stanza);\n\n                      this._conn.rawOutput(rawStanza);\n\n                      this.socket.send(rawStanza);\n                    }\n                  }\n\n                  this._conn._data = [];\n                }\n              },\n\n              /** PrivateFunction: _onMessage\n               * _Private_ function to handle websockets messages.\n               *\n               * This function parses each of the messages as if they are full documents.\n               * [TODO : We may actually want to use a SAX Push parser].\n               *\n               * Since all XMPP traffic starts with\n               *  <stream:stream version='1.0'\n               *                 xml:lang='en'\n               *                 xmlns='jabber:client'\n               *                 xmlns:stream='http://etherx.jabber.org/streams'\n               *                 id='3697395463'\n               *                 from='SERVER'>\n               *\n               * The first stanza will always fail to be parsed.\n               *\n               * Additionally, the seconds stanza will always be <stream:features> with\n               * the stream NS defined in the previous stanza, so we need to 'force'\n               * the inclusion of the NS in this stanza.\n               *\n               * Parameters:\n               * (string) message - The websocket message.\n               */\n              _onMessage: function _onMessage(message) {\n                var elem; // check for closing stream\n\n                var close = '<close xmlns=\"urn:ietf:params:xml:ns:xmpp-framing\" />';\n\n                if (message.data === close) {\n                  this._conn.rawInput(close);\n\n                  this._conn.xmlInput(message);\n\n                  if (!this._conn.disconnecting) {\n                    this._conn._doDisconnect();\n                  }\n\n                  return;\n                } else if (message.data.search(\"<open \") === 0) {\n                  // This handles stream restarts\n                  elem = new DOMParser().parseFromString(message.data, \"text/xml\").documentElement;\n\n                  if (!this._handleStreamStart(elem)) {\n                    return;\n                  }\n                } else {\n                  var data = this._streamWrap(message.data);\n\n                  elem = new DOMParser().parseFromString(data, \"text/xml\").documentElement;\n                }\n\n                if (this._check_streamerror(elem, Strophe$2.Status.ERROR)) {\n                  return;\n                } //handle unavailable presence stanza before disconnecting\n\n\n                if (this._conn.disconnecting && elem.firstChild.nodeName === \"presence\" && elem.firstChild.getAttribute(\"type\") === \"unavailable\") {\n                  this._conn.xmlInput(elem);\n\n                  this._conn.rawInput(Strophe$2.serialize(elem)); // if we are already disconnecting we will ignore the unavailable stanza and\n                  // wait for the </stream:stream> tag before we close the connection\n\n\n                  return;\n                }\n\n                this._conn._dataRecv(elem, message.data);\n              },\n\n              /** PrivateFunction: _onOpen\n               * _Private_ function to handle websockets connection setup.\n               *\n               * The opening stream tag is sent here.\n               */\n              _onOpen: function _onOpen() {\n                Strophe$2.debug(\"Websocket open\");\n\n                var start = this._buildStream();\n\n                this._conn.xmlOutput(start.tree());\n\n                var startString = Strophe$2.serialize(start);\n\n                this._conn.rawOutput(startString);\n\n                this.socket.send(startString);\n              },\n\n              /** PrivateFunction: _reqToData\n               * _Private_ function to get a stanza out of a request.\n               *\n               * WebSockets don't use requests, so the passed argument is just returned.\n               *\n               *  Parameters:\n               *    (Object) stanza - The stanza.\n               *\n               *  Returns:\n               *    The stanza that was passed.\n               */\n              _reqToData: function _reqToData(stanza) {\n                return stanza;\n              },\n\n              /** PrivateFunction: _send\n               *  _Private_ part of the Connection.send function for WebSocket\n               *\n               * Just flushes the messages that are in the queue\n               */\n              _send: function _send() {\n                this._conn.flush();\n              },\n\n              /** PrivateFunction: _sendRestart\n               *\n               *  Send an xmpp:restart stanza.\n               */\n              _sendRestart: function _sendRestart() {\n                clearTimeout(this._conn._idleTimeout);\n\n                this._conn._onIdle.bind(this._conn)();\n              }\n            };\n\n            global$1.Strophe = core.Strophe;\n            global$1.$build = core.$build;\n            global$1.$iq = core.$iq;\n            global$1.$msg = core.$msg;\n            global$1.$pres = core.$pres;\n\n            return core;\n\n}));\n","import { $iq, Strophe } from 'strophe.js';\n\nStrophe.addConnectionPlugin('disco',\n{\n    _connection: null,\n    _identities : [],\n    _features : [],\n    _items : [],\n    /** Function: init\n     * Plugin init\n     *\n     * Parameters:\n     *   (Strophe.Connection) conn - Strophe connection\n     */\n    init: function(conn)\n    {\n    this._connection = conn;\n        this._identities = [];\n        this._features   = [];\n        this._items      = [];\n        // disco info\n        conn.addHandler(this._onDiscoInfo.bind(this), Strophe.NS.DISCO_INFO, 'iq', 'get', null, null);\n        // disco items\n        conn.addHandler(this._onDiscoItems.bind(this), Strophe.NS.DISCO_ITEMS, 'iq', 'get', null, null);\n    },\n    /** Function: addIdentity\n     * See http://xmpp.org/registrar/disco-categories.html\n     * Parameters:\n     *   (String) category - category of identity (like client, automation, etc ...)\n     *   (String) type - type of identity (like pc, web, bot , etc ...)\n     *   (String) name - name of identity in natural language\n     *   (String) lang - lang of name parameter\n     *\n     * Returns:\n     *   Boolean\n     */\n    addIdentity: function(category, type, name, lang)\n    {\n        for (var i=0; i<this._identities.length; i++)\n        {\n            if (this._identities[i].category == category &&\n                this._identities[i].type == type &&\n                this._identities[i].name == name &&\n                this._identities[i].lang == lang)\n            {\n                return false;\n            }\n        }\n        this._identities.push({category: category, type: type, name: name, lang: lang});\n        return true;\n    },\n    /** Function: addFeature\n     *\n     * Parameters:\n     *   (String) var_name - feature name (like jabber:iq:version)\n     *\n     * Returns:\n     *   boolean\n     */\n    addFeature: function(var_name)\n    {\n        for (var i=0; i<this._features.length; i++)\n        {\n             if (this._features[i] == var_name)\n                 return false;\n        }\n        this._features.push(var_name);\n        return true;\n    },\n    /** Function: removeFeature\n     *\n     * Parameters:\n     *   (String) var_name - feature name (like jabber:iq:version)\n     *\n     * Returns:\n     *   boolean\n     */\n    removeFeature: function(var_name)\n    {\n        for (var i=0; i<this._features.length; i++)\n        {\n             if (this._features[i] === var_name){\n                 this._features.splice(i,1);\n                 return true;\n             }\n        }\n        return false;\n    },\n    /** Function: addItem\n     *\n     * Parameters:\n     *   (String) jid\n     *   (String) name\n     *   (String) node\n     *   (Function) call_back\n     *\n     * Returns:\n     *   boolean\n     */\n    addItem: function(jid, name, node, call_back)\n    {\n        if (node && !call_back)\n            return false;\n        this._items.push({jid: jid, name: name, node: node, call_back: call_back});\n        return true;\n    },\n    /** Function: info\n     * Info query\n     *\n     * Parameters:\n     *   (Function) call_back\n     *   (String) jid\n     *   (String) node\n     */\n    info: function(jid, node, success, error, timeout)\n    {\n        var attrs = {xmlns: Strophe.NS.DISCO_INFO};\n        if (node)\n            attrs.node = node;\n\n        var info = $iq({from:this._connection.jid,\n                         to:jid, type:'get'}).c('query', attrs);\n        this._connection.sendIQ(info, success, error, timeout);\n    },\n    /** Function: items\n     * Items query\n     *\n     * Parameters:\n     *   (Function) call_back\n     *   (String) jid\n     *   (String) node\n     */\n    items: function(jid, node, success, error, timeout)\n    {\n        var attrs = {xmlns: Strophe.NS.DISCO_ITEMS};\n        if (node)\n            attrs.node = node;\n\n        var items = $iq({from:this._connection.jid,\n                         to:jid, type:'get'}).c('query', attrs);\n        this._connection.sendIQ(items, success, error, timeout);\n    },\n\n    /** PrivateFunction: _buildIQResult\n     */\n    _buildIQResult: function(stanza, query_attrs)\n    {\n        var id   =  stanza.getAttribute('id');\n        var from = stanza.getAttribute('from');\n        var iqresult = $iq({type: 'result', id: id});\n\n        if (from !== null) {\n            iqresult.attrs({to: from});\n        }\n\n        return iqresult.c('query', query_attrs);\n    },\n\n    /** PrivateFunction: _onDiscoInfo\n     * Called when receive info request\n     */\n    _onDiscoInfo: function(stanza)\n    {\n        var node = stanza.getElementsByTagName('query')[0].getAttribute('node');\n        var attrs = {xmlns: Strophe.NS.DISCO_INFO};\n        var i;\n        if (node)\n        {\n            attrs.node = node;\n        }\n        var iqresult = this._buildIQResult(stanza, attrs);\n        for (i=0; i<this._identities.length; i++)\n        {\n            attrs = {category: this._identities[i].category,\n                         type    : this._identities[i].type};\n            if (this._identities[i].name)\n                attrs.name = this._identities[i].name;\n            if (this._identities[i].lang)\n                attrs['xml:lang'] = this._identities[i].lang;\n            iqresult.c('identity', attrs).up();\n        }\n        for (i=0; i<this._features.length; i++)\n        {\n            iqresult.c('feature', {'var':this._features[i]}).up();\n        }\n        this._connection.send(iqresult.tree());\n        return true;\n    },\n    /** PrivateFunction: _onDiscoItems\n     * Called when receive items request\n     */\n    _onDiscoItems: function(stanza)\n    {\n        var query_attrs = {xmlns: Strophe.NS.DISCO_ITEMS};\n        var node = stanza.getElementsByTagName('query')[0].getAttribute('node');\n        var items, i;\n        if (node)\n        {\n            query_attrs.node = node;\n            items = [];\n            for (i = 0; i < this._items.length; i++)\n            {\n                if (this._items[i].node == node)\n                {\n                    items = this._items[i].call_back(stanza);\n                    break;\n                }\n            }\n        }\n        else\n        {\n            items = this._items;\n        }\n        var iqresult = this._buildIQResult(stanza, query_attrs);\n        for (i = 0; i < items.length; i++)\n        {\n            var attrs = {jid:  items[i].jid};\n            if (items[i].name)\n                attrs.name = items[i].name;\n            if (items[i].node)\n                attrs.node = items[i].node;\n            iqresult.c('item', attrs).up();\n        }\n        this._connection.send(iqresult.tree());\n        return true;\n    }\n});\n","import { $build, Strophe } from 'strophe.js';\n\n/**\n* StropheJS - Stream Management XEP-0198\n*\n* This plugin implements stream management ACK capabilities of the specs XEP-0198.\n* Note: Resumption is not supported in this current implementation.\n*\n* Reference: http://xmpp.org/extensions/xep-0198.html\n*\n* @class streamManagement\n*/\nStrophe.addConnectionPlugin('streamManagement', {\n\n\t/**\n\t* @property {Boolean} logging: Set to true to enable logging regarding out of sync stanzas.\n\t*/\n\tlogging: false,\n\n\t/**\n\t* @property {Boolean} autoSendCountOnEveryIncomingStanza: Set to true to send an 'a' response after every stanza.\n\t* @default false\n\t* @public\n\t*/\n\tautoSendCountOnEveryIncomingStanza: false,\n\n\t/**\n\t* @property {Integer} requestResponseInterval: Set this value to send a request for counter on very interval\n\t* number of stanzas sent. Set to 0 to disable.\n\t* @default 5\n\t* @public\n\t*/\n\trequestResponseInterval: 5,\n\n\t/**\n\t* @property {Pointer} _c: Strophe connection instance.\n\t* @private\n\t*/\n\t_c: null,\n\n\t/**\n\t* @property {String} _NS XMPP Namespace.\n\t* @private\n\t*/\n\t_NS: 'urn:xmpp:sm:3',\n\n\t/**\n\t* @property {Boolean} _isStreamManagementEnabled\n\t* @private\n\t*/\n\t_isStreamManagementEnabled: false,\n\n\t/**\n\t* @property {Integer} _serverProcesssedStanzasCounter: Keeps count of stanzas confirmed processed by the server.\n\t* The server is the source of truth of this value. It is the 'h' attribute on the latest 'a' element received\n\t* from the server.\n\t* @private\n\t*/\n\t_serverProcesssedStanzasCounter: null,\n\n\t/**\n\t* @property {Integer} _clientProcessedStanzasCounter: Counter of stanzas received by the client from the server.\n\t* Client is the source of truth of this value. It is the 'h' attribute in the 'a' sent from the client to\n\t* the server.\n\t* @private\n\t*/\n\t_clientProcessedStanzasCounter: null,\n\n\t/**\n\t* @property {Integer} _clientSentStanzasCounter\n\t* @private\n\t*/\n\t_clientSentStanzasCounter: null,\n\n\t/**\n\t* Stores a reference to Strophe connection xmlOutput function to wrap counting functionality.\n\t* @method _originalXMLOutput\n\t* @type {Handler}\n\t* @private\n\t*/\n\t_originalXMLOutput: null,\n\n\t/**\n\t* @property {Handler} _requestHandler: Stores reference to handler that process count request from server.\n\t* @private\n\t*/\n\t_requestHandler: null,\n\n\t/**\n\t* @property {Handler} _incomingHandler: Stores reference to handler that processes incoming stanzas count.\n\t* @private\n\t*/\n\t_incomingHandler: null,\n\n\t/**\n\t* @property {Integer} _requestResponseIntervalCount: Counts sent stanzas since last response request.\n\t*/\n\t_requestResponseIntervalCount: 0,\n\n\t/**\n\t * @property {boolean} _isSupported: indicates whether or not the server has advertised support for the stream\n\t * management namespace.\n\t */\n\t_isSupported: false,\n\n\t/**\n\t* @property {Queue} _unacknowledgedStanzas: Maintains a list of packet ids for stanzas which have yet to be acknowledged.\n\t*/\n\t_unacknowledgedStanzas: [],\n\n\t/**\n\t* @property {Array} _acknowledgedStanzaListeners: Stores callbacks for each stanza acknowledged by the server.\n\t* Provides the packet id of the stanza as a parameter.\n\t* @private\n\t*/\n\t_acknowledgedStanzaListeners: [],\n\n\taddAcknowledgedStanzaListener: function(listener) {\n\t\tthis._acknowledgedStanzaListeners.push(listener);\n\t},\n\n\tenable: function(resume) {\n\t\tif (!this._isSupported) {\n\t\t\tthrow new Error('The server doesn\\'t support urn:xmpp:sm:3 namespace');\n\t\t} else if (this._connectionStatus !== Strophe.Status.CONNECTED) {\n\t\t\tthrow new Error('enable() can only be called in the CONNECTED state');\n\t\t}\n\t\tthis._c.send($build('enable', { xmlns: this._NS, resume }));\n\t\tthis._c.flush();\n\t\tthis._c.pause();\n\t},\n\n\tgetResumeToken: function() {\n\t\treturn this._resumeToken;\n\t},\n\n\tisSupported() {\n\t\treturn this._isSupported;\n\t},\n\n\tresume: function() {\n\t\tif (!this.getResumeToken()) {\n\t\t\tthrow new Error('No resume token');\n\t\t}\n\t\tif (this._connectionStatus !== Strophe.Status.DISCONNECTED) {\n\t\t\tthrow new Error('resume() can only be called in the DISCONNECTED state');\n\t\t}\n\n\t\tthis._c.options.explicitResourceBinding = true;\n\t\tthis._resuming = true;\n\n\t\tthis._originalConnect.apply(this._c, this._connectArgs);\n\t},\n\n\trequestAcknowledgement: function() {\n\t\tif (this._connectionStatus !== Strophe.Status.CONNECTED) {\n\t\t\tthrow new Error('requestAcknowledgement() can only be called in the CONNECTED state');\n\t\t}\n\t\tthis._requestResponseIntervalCount = 0;\n\t\tthis._c.send($build('r', { xmlns: this._NS }));\n\t},\n\n\tgetOutgoingCounter: function() {\n\t\treturn this._clientSentStanzasCounter;\n\t},\n\n\tgetIncomingCounter: function() {\n\t\treturn this._clientProcessedStanzasCounter;\n\t},\n\n\tinit: function(conn) {\n\t\tthis._c = conn;\n\t\tStrophe.addNamespace('SM', this._NS);\n\n\t\t// Storing original xmlOutput function to use additional logic\n\t\tthis._originalXMLOutput = this._c.xmlOutput;\n\t\tthis._c.xmlOutput = this.xmlOutput.bind(this);\n\n\t\tthis._originalConnect = this._c.connect;\n\t\tthis._c.connect = this._interceptConnectArgs.bind(this);\n\n\t\tthis._originalOnStreamFeaturesAfterSASL = this._c._onStreamFeaturesAfterSASL;\n\t\tthis._c._onStreamFeaturesAfterSASL = this._onStreamFeaturesAfterSASL.bind(this);\n\n\t\tthis._originalDoDisconnect = this._c._doDisconnect;\n\t\tthis._c._doDisconnect = this._interceptDoDisconnect.bind(this);\n\n\t\tthis._originalDisconnect = this._c.disconnect;\n\t\tthis._c.disconnect = this._interceptDisconnect.bind(this);\n\t},\n\n\t_interceptDisconnect: function() {\n\t\tthis._resumeToken = undefined;\n\t\tthis._originalDisconnect.apply(this._c, arguments);\n\t},\n\n\t_interceptDoDisconnect: function() {\n\t\tif (this.getResumeToken()\n\t\t\t\t&& !this._resuming\n\t\t\t\t&& this._c.connected && !this._c.disconnecting) {\n\t\t\tthis._resumeState = {\n\t\t\t\thandlers: this._c.handlers,\n\t\t\t\ttimedHandlers: this._c.timedHandlers,\n\t\t\t\tremoveTimeds: this._c.removeTimeds,\n\t\t\t\tremoveHandlers: this._c.removeHandlers,\n\t\t\t\taddTimeds: this._c.addTimeds,\n\t\t\t\taddHandlers: this._c.addHandlers\n\t\t\t};\n\t\t\tthis._storedJid = this._c.jid;\n\n\t\t\tthis.logging && Strophe.debug('SM stored resume state, handler count: ' + this._resumeState.handlers.length);\n\t\t}\n\n\t\t// Remove any queued stanzas from the buffer that have failed to send while the socket was closed,\n\t\t// as they would interfere with the resume flow. They will be resent anyway.\n\t\tthis._c._data = [];\n\n\t\tthis._originalDoDisconnect.apply(this._c, arguments);\n\t},\n\n\t_interceptConnectArgs: function() {\n\t\tthis._connectArgs = arguments;\n\n\t\tthis._originalConnect.apply(this._c, arguments);\n\t},\n\n\t_onStreamFeaturesAfterSASL: function(elem) {\n\t\tthis._isSupported = elem.getElementsByTagNameNS(this._NS, \"sm\").length > 0;\n\n\t\treturn this._originalOnStreamFeaturesAfterSASL.apply(this._c, arguments);\n\t},\n\n\tstatusChanged: function (status) {\n\t\tthis._connectionStatus = status;\n\t\tif (!this.getResumeToken()\n\t\t\t&& (status === Strophe.Status.CONNECTED || status === Strophe.Status.DISCONNECTED)) {\n\t\t\tthis.logging && Strophe.debug('SM reset state');\n\n\t\t\tthis._serverProcesssedStanzasCounter = 0;\n\t\t\tthis._clientProcessedStanzasCounter = 0;\n\n\t\t\tthis._clientSentStanzasCounter = 0;\n\n\t\t\tthis._isStreamManagementEnabled = false;\n\t\t\tthis._requestResponseIntervalCount = 0;\n\n\t\t\t// FIXME not described in JSDocs\n\t\t\tthis._resuming = false;\n\n\t\t\tif (status === Strophe.Status.DISCONNECTED) {\n\t\t\t\tthis._isSupported = false;\n\t\t\t}\n\n\t\t\tthis._unacknowledgedStanzas = [];\n\n\t\t\tif (this._requestHandler) {\n\t\t\t\tthis._c.deleteHandler(this._requestHandler);\n\t\t\t}\n\n\t\t\tif (this._incomingHandler) {\n\t\t\t\tthis._c.deleteHandler(this._incomingHandler);\n\t\t\t}\n\n\t\t\tthis._requestHandler = this._c.addHandler(this._handleServerRequestHandler.bind(this), this._NS, 'r');\n\t\t\tthis._ackHandler = this._c.addHandler(this._handleServerAck.bind(this), this._NS, 'a');\n\t\t\tthis._incomingHandler = this._c.addHandler(this._incomingStanzaHandler.bind(this));\n\n\t\t\t// FIXME handler instances stored, but never used\n\t\t\tthis._enabledHandler = this._c._addSysHandler(this._handleEnabled.bind(this), this._NS, 'enabled');\n\t\t\tthis._resumeFailedHandler = this._c._addSysHandler(this._handleResumeFailed.bind(this), this._NS, 'failed');\n\t\t\tthis._resumedHandler =  this._c._addSysHandler(this._handleResumed.bind(this), this._NS,'resumed');\n\n\t\t} else if (status === Strophe.Status.BINDREQUIRED)  {\n\t\t\tthis._c.jid = this._storedJid;\n\n\t\t\t// Restore Strophe handlers\n\t\t\tfor (const property in this._resumeState) {\n\t\t\t\tthis._c[property] = this._resumeState[property];\n\t\t\t}\n\n\t\t\t// FIXME check conditions if there's session ID and if enabled\n\t\t\tthis._c.send($build('resume', {\n\t\t\t\txmlns: this._NS,\n\t\t\t\th: this._clientProcessedStanzasCounter,\n\t\t\t\tprevid: this._resumeToken\n\t\t\t}));\n\t\t\tthis._c.flush();\n\t\t} else if (status === Strophe.Status.ERROR) {\n\t\t\tthis.logging && Strophe.debug('SM cleared resume token on error');\n\t\t\tthis._resumeToken = undefined;\n\t\t}\n\t},\n\n\t/**\n\t* This method overrides the send method implemented by Strophe.Connection\n\t* to count outgoing stanzas\n\t*\n\t* @method Send\n\t* @public\n\t*/\n\txmlOutput: function(elem) {\n\t\tif (Strophe.isTagEqual(elem, 'iq') ||\n\t\t\tStrophe.isTagEqual(elem, 'presence') ||\n\t\t\tStrophe.isTagEqual(elem, 'message')) {\n\t\t\tthis._increaseSentStanzasCounter(elem);\n\t\t}\n\n\t\treturn this._originalXMLOutput.call(this._c, elem);\n\t},\n\n\t_handleEnabled: function(elem) {\n\t\tthis._isStreamManagementEnabled = true;\n\t\t// FIXME fail if requested, but not enabled\n\t\tthis._resumeToken = elem.getAttribute('resume') === 'true' && elem.getAttribute('id');\n\n\t\tthis._c.resume();\n\n\t\treturn true;\n\t},\n\n\t_handleResumeFailed: function(elem) {\n\t\tconst error = elem && elem.firstElementChild && elem.firstElementChild.tagName;\n\n\t\tthis._c._changeConnectStatus(Strophe.Status.ERROR, error, elem);\n\t\tthis._c._doDisconnect();\n\n\t\treturn true;\n\t},\n\n\t_handleResumed: function(elem) {\n\t\t// FIXME check if in the correct state\n\t\tvar handledCount = parseInt(elem.getAttribute('h'));\n\t\tthis._handleAcknowledgedStanzas(handledCount, this._serverProcesssedStanzasCounter);\n\n\t\tthis._resuming = false;\n\t\tthis._c.do_bind = false; // No need to bind our resource anymore\n\t\tthis._c.authenticated = true;\n\t\tthis._c.restored = true;\n\n\t\tif (this._unacknowledgedStanzas.length > 0) {\n\t\t\tthis.logging && Strophe.debug('SM Sending unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t\tfor(const stanza of this._unacknowledgedStanzas) {\n\t\t\t\tthis._c.send(stanza);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.logging && Strophe.debug('SM No unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t}\n\n\t\tthis._c._changeConnectStatus(Strophe.Status.CONNECTED, null);\n\n\t\treturn true;\n\t},\n\n\t_incomingStanzaHandler: function(elem) {\n\t\tif (Strophe.isTagEqual(elem, 'iq') || Strophe.isTagEqual(elem, 'presence') || Strophe.isTagEqual(elem, 'message'))  {\n\t\t\tthis._increaseReceivedStanzasCounter();\n\n\t\t\tif (this.autoSendCountOnEveryIncomingStanza) {\n\t\t\t\tthis._answerProcessedStanzas();\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t},\n\n\t_handleAcknowledgedStanzas: function(reportedHandledCount, lastKnownHandledCount) {\n\t\tvar delta = reportedHandledCount - lastKnownHandledCount;\n\n\t\tif (delta < 0) {\n\t\t\tthis._throwError('New reported stanza count lower than previous. New: ' + reportedHandledCount + ' - Previous: ' + lastKnownHandledCount);\n\t\t}\n\n\t\tif (delta > this._unacknowledgedStanzas.length) {\n\t\t\tthis._throwError('Higher reported acknowledge count than unacknowledged stanzas. Reported Acknowledge Count: ' + delta + ' - Unacknowledge Stanza Count: ' + this._unacknowledgedStanzas.length + ' - New: ' + reportedHandledCount + ' - Previous: ' + lastKnownHandledCount);\n\t\t}\n\n\t\tfor(var i = 0; i < delta; i++) {\n\t\t\tvar stanza = this._unacknowledgedStanzas.shift();\n\t\t\tfor (var j = 0; j < this._acknowledgedStanzaListeners.length; j++) {\n\t\t\t\tthis._acknowledgedStanzaListeners[j](stanza);\n\t\t\t}\n\t\t}\n\n\t\tif (this.logging && this._unacknowledgedStanzas.length > 0) {\n\t\t\tStrophe.warn('SM Unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t}\n\n\t\tthis._serverProcesssedStanzasCounter = reportedHandledCount;\n\n\t\tif (this.requestResponseInterval > 0) {\n\t\t\tthis._requestResponseIntervalCount = 0;\n\t\t}\n\t},\n\n\t_handleServerRequestHandler: function() {\n\t\tthis._answerProcessedStanzas();\n\n\t\treturn true;\n\t},\n\n\t_handleServerAck: function(elem){\n\t\tvar handledCount = parseInt(elem.getAttribute('h'));\n\t\tthis._handleAcknowledgedStanzas(handledCount, this._serverProcesssedStanzasCounter);\n\n\t\treturn true;\n\t},\n\n\t_answerProcessedStanzas: function() {\n\t\tif (this._isStreamManagementEnabled) {\n\t\t\tthis._c.send($build('a', { xmlns: this._NS, h: this._clientProcessedStanzasCounter }));\n\t\t}\n\t},\n\n\t_increaseSentStanzasCounter: function(elem) {\n\t\tif (this._isStreamManagementEnabled) {\n\t\t\tif (this._unacknowledgedStanzas.indexOf(elem) !== -1) {\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._unacknowledgedStanzas.push(elem);\n\t\t\tthis._clientSentStanzasCounter++;\n\n\t\t\tif (this.requestResponseInterval > 0) {\n\t\t\t\tthis._requestResponseIntervalCount++;\n\n\t\t\t\tif (this._requestResponseIntervalCount === this.requestResponseInterval) {\n\t\t\t\t\t// FIXME Can not call send from onIdle.\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tif (this._connectionStatus === Strophe.Status.CONNECTED) {\n\t\t\t\t\t\t\tthis.requestAcknowledgement();\n\t\t\t\t\t\t}\n\t\t\t\t\t}, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t_increaseReceivedStanzasCounter: function() {\n\t\tif (this._isStreamManagementEnabled) {\n\t\t\tthis._clientProcessedStanzasCounter++;\n\t\t}\n\t},\n\n\t_throwError: function(msg) {\n\t\tStrophe.error(msg);\n\t\tthrow new Error(msg);\n\t}\n\n});\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction bytesToUuid(buf, offset) {\n  const i = offset || 0;\n  const bth = byteToHex; // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n\n  return (bth[buf[i + 0]] + bth[buf[i + 1]] + bth[buf[i + 2]] + bth[buf[i + 3]] + '-' + bth[buf[i + 4]] + bth[buf[i + 5]] + '-' + bth[buf[i + 6]] + bth[buf[i + 7]] + '-' + bth[buf[i + 8]] + bth[buf[i + 9]] + '-' + bth[buf[i + 10]] + bth[buf[i + 11]] + bth[buf[i + 12]] + bth[buf[i + 13]] + bth[buf[i + 14]] + bth[buf[i + 15]]).toLowerCase();\n}\n\nvar _default = bytesToUuid;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"v1\", {\n  enumerable: true,\n  get: function () {\n    return _v.default;\n  }\n});\nObject.defineProperty(exports, \"v3\", {\n  enumerable: true,\n  get: function () {\n    return _v2.default;\n  }\n});\nObject.defineProperty(exports, \"v4\", {\n  enumerable: true,\n  get: function () {\n    return _v3.default;\n  }\n});\nObject.defineProperty(exports, \"v5\", {\n  enumerable: true,\n  get: function () {\n    return _v4.default;\n  }\n});\n\nvar _v = _interopRequireDefault(require(\"./v1.js\"));\n\nvar _v2 = _interopRequireDefault(require(\"./v3.js\"));\n\nvar _v3 = _interopRequireDefault(require(\"./v4.js\"));\n\nvar _v4 = _interopRequireDefault(require(\"./v5.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n/*\n * Browser-compatible JavaScript MD5\n *\n * Modification of JavaScript MD5\n * https://github.com/blueimp/JavaScript-MD5\n *\n * Copyright 2011, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n *\n * Based on\n * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n * Digest Algorithm, as defined in RFC 1321.\n * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n * Distributed under the BSD License\n * See http://pajhome.org.uk/crypt/md5 for more info.\n */\nfunction md5(bytes) {\n  if (typeof bytes === 'string') {\n    const msg = unescape(encodeURIComponent(bytes)); // UTF8 escape\n\n    bytes = new Uint8Array(msg.length);\n\n    for (let i = 0; i < msg.length; ++i) {\n      bytes[i] = msg.charCodeAt(i);\n    }\n  }\n\n  return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));\n}\n/*\n * Convert an array of little-endian words to an array of bytes\n */\n\n\nfunction md5ToHexEncodedArray(input) {\n  const output = [];\n  const length32 = input.length * 32;\n  const hexTab = '0123456789abcdef';\n\n  for (let i = 0; i < length32; i += 8) {\n    const x = input[i >> 5] >>> i % 32 & 0xff;\n    const hex = parseInt(hexTab.charAt(x >>> 4 & 0x0f) + hexTab.charAt(x & 0x0f), 16);\n    output.push(hex);\n  }\n\n  return output;\n}\n/**\n * Calculate output length with padding and bit length\n */\n\n\nfunction getOutputLength(inputLength8) {\n  return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;\n}\n/*\n * Calculate the MD5 of an array of little-endian words, and a bit length.\n */\n\n\nfunction wordsToMd5(x, len) {\n  /* append padding */\n  x[len >> 5] |= 0x80 << len % 32;\n  x[getOutputLength(len) - 1] = len;\n  let a = 1732584193;\n  let b = -271733879;\n  let c = -1732584194;\n  let d = 271733878;\n\n  for (let i = 0; i < x.length; i += 16) {\n    const olda = a;\n    const oldb = b;\n    const oldc = c;\n    const oldd = d;\n    a = md5ff(a, b, c, d, x[i], 7, -680876936);\n    d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);\n    c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);\n    b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);\n    a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);\n    d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);\n    c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);\n    b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);\n    a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);\n    d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);\n    c = md5ff(c, d, a, b, x[i + 10], 17, -42063);\n    b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);\n    a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);\n    d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);\n    c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);\n    b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);\n    a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);\n    d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);\n    c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);\n    b = md5gg(b, c, d, a, x[i], 20, -373897302);\n    a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);\n    d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);\n    c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);\n    b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);\n    a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);\n    d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);\n    c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);\n    b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);\n    a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);\n    d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);\n    c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);\n    b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);\n    a = md5hh(a, b, c, d, x[i + 5], 4, -378558);\n    d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);\n    c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);\n    b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);\n    a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);\n    d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);\n    c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);\n    b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);\n    a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);\n    d = md5hh(d, a, b, c, x[i], 11, -358537222);\n    c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);\n    b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);\n    a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);\n    d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);\n    c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);\n    b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);\n    a = md5ii(a, b, c, d, x[i], 6, -198630844);\n    d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);\n    c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);\n    b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);\n    a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);\n    d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);\n    c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);\n    b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);\n    a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);\n    d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);\n    c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);\n    b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);\n    a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);\n    d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);\n    c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);\n    b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);\n    a = safeAdd(a, olda);\n    b = safeAdd(b, oldb);\n    c = safeAdd(c, oldc);\n    d = safeAdd(d, oldd);\n  }\n\n  return [a, b, c, d];\n}\n/*\n * Convert an array bytes to an array of little-endian words\n * Characters >255 have their high-byte silently ignored.\n */\n\n\nfunction bytesToWords(input) {\n  if (input.length === 0) {\n    return [];\n  }\n\n  const length8 = input.length * 8;\n  const output = new Uint32Array(getOutputLength(length8));\n\n  for (let i = 0; i < length8; i += 8) {\n    output[i >> 5] |= (input[i / 8] & 0xff) << i % 32;\n  }\n\n  return output;\n}\n/*\n * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n * to work around bugs in some JS interpreters.\n */\n\n\nfunction safeAdd(x, y) {\n  const lsw = (x & 0xffff) + (y & 0xffff);\n  const msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n  return msw << 16 | lsw & 0xffff;\n}\n/*\n * Bitwise rotate a 32-bit number to the left.\n */\n\n\nfunction bitRotateLeft(num, cnt) {\n  return num << cnt | num >>> 32 - cnt;\n}\n/*\n * These functions implement the four basic operations the algorithm uses.\n */\n\n\nfunction md5cmn(q, a, b, x, s, t) {\n  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);\n}\n\nfunction md5ff(a, b, c, d, x, s, t) {\n  return md5cmn(b & c | ~b & d, a, b, x, s, t);\n}\n\nfunction md5gg(a, b, c, d, x, s, t) {\n  return md5cmn(b & d | c & ~d, a, b, x, s, t);\n}\n\nfunction md5hh(a, b, c, d, x, s, t) {\n  return md5cmn(b ^ c ^ d, a, b, x, s, t);\n}\n\nfunction md5ii(a, b, c, d, x, s, t) {\n  return md5cmn(c ^ (b | ~d), a, b, x, s, t);\n}\n\nvar _default = md5;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = rng;\n// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\n// getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n// find the complete implementation of crypto (msCrypto) on IE11.\nconst getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\nconst rnds8 = new Uint8Array(16);\n\nfunction rng() {\n  if (!getRandomValues) {\n    throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n  }\n\n  return getRandomValues(rnds8);\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n// Adapted from Chris Veness' SHA1 code at\n// http://www.movable-type.co.uk/scripts/sha1.html\nfunction f(s, x, y, z) {\n  switch (s) {\n    case 0:\n      return x & y ^ ~x & z;\n\n    case 1:\n      return x ^ y ^ z;\n\n    case 2:\n      return x & y ^ x & z ^ y & z;\n\n    case 3:\n      return x ^ y ^ z;\n  }\n}\n\nfunction ROTL(x, n) {\n  return x << n | x >>> 32 - n;\n}\n\nfunction sha1(bytes) {\n  const K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6];\n  const H = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];\n\n  if (typeof bytes === 'string') {\n    const msg = unescape(encodeURIComponent(bytes)); // UTF8 escape\n\n    bytes = [];\n\n    for (let i = 0; i < msg.length; ++i) {\n      bytes.push(msg.charCodeAt(i));\n    }\n  }\n\n  bytes.push(0x80);\n  const l = bytes.length / 4 + 2;\n  const N = Math.ceil(l / 16);\n  const M = new Array(N);\n\n  for (let i = 0; i < N; ++i) {\n    const arr = new Uint32Array(16);\n\n    for (let j = 0; j < 16; ++j) {\n      arr[j] = bytes[i * 64 + j * 4] << 24 | bytes[i * 64 + j * 4 + 1] << 16 | bytes[i * 64 + j * 4 + 2] << 8 | bytes[i * 64 + j * 4 + 3];\n    }\n\n    M[i] = arr;\n  }\n\n  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);\n  M[N - 1][14] = Math.floor(M[N - 1][14]);\n  M[N - 1][15] = (bytes.length - 1) * 8 & 0xffffffff;\n\n  for (let i = 0; i < N; ++i) {\n    const W = new Uint32Array(80);\n\n    for (let t = 0; t < 16; ++t) {\n      W[t] = M[i][t];\n    }\n\n    for (let t = 16; t < 80; ++t) {\n      W[t] = ROTL(W[t - 3] ^ W[t - 8] ^ W[t - 14] ^ W[t - 16], 1);\n    }\n\n    let a = H[0];\n    let b = H[1];\n    let c = H[2];\n    let d = H[3];\n    let e = H[4];\n\n    for (let t = 0; t < 80; ++t) {\n      const s = Math.floor(t / 20);\n      const T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[t] >>> 0;\n      e = d;\n      d = c;\n      c = ROTL(b, 30) >>> 0;\n      b = a;\n      a = T;\n    }\n\n    H[0] = H[0] + a >>> 0;\n    H[1] = H[1] + b >>> 0;\n    H[2] = H[2] + c >>> 0;\n    H[3] = H[3] + d >>> 0;\n    H[4] = H[4] + e >>> 0;\n  }\n\n  return [H[0] >> 24 & 0xff, H[0] >> 16 & 0xff, H[0] >> 8 & 0xff, H[0] & 0xff, H[1] >> 24 & 0xff, H[1] >> 16 & 0xff, H[1] >> 8 & 0xff, H[1] & 0xff, H[2] >> 24 & 0xff, H[2] >> 16 & 0xff, H[2] >> 8 & 0xff, H[2] & 0xff, H[3] >> 24 & 0xff, H[3] >> 16 & 0xff, H[3] >> 8 & 0xff, H[3] & 0xff, H[4] >> 24 & 0xff, H[4] >> 16 & 0xff, H[4] >> 8 & 0xff, H[4] & 0xff];\n}\n\nvar _default = sha1;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _rng = _interopRequireDefault(require(\"./rng.js\"));\n\nvar _bytesToUuid = _interopRequireDefault(require(\"./bytesToUuid.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\nlet _nodeId;\n\nlet _clockseq; // Previous uuid creation time\n\n\nlet _lastMSecs = 0;\nlet _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details\n\nfunction v1(options, buf, offset) {\n  let i = buf && offset || 0;\n  const b = buf || [];\n  options = options || {};\n  let node = options.node || _nodeId;\n  let clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not\n  // specified.  We do this lazily to minimize issues related to insufficient\n  // system entropy.  See #189\n\n  if (node == null || clockseq == null) {\n    const seedBytes = options.random || (options.rng || _rng.default)();\n\n    if (node == null) {\n      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];\n    }\n\n    if (clockseq == null) {\n      // Per 4.2.2, randomize (14 bit) clockseq\n      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;\n    }\n  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n\n\n  let msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n\n  let nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)\n\n  const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression\n\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n\n\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  } // Per 4.2.1.2 Throw error if too many uuids are requested\n\n\n  if (nsecs >= 10000) {\n    throw new Error(\"uuid.v1(): Can't create more than 10M uuids/sec\");\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n\n  msecs += 12219292800000; // `time_low`\n\n  const tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff; // `time_mid`\n\n  const tmh = msecs / 0x100000000 * 10000 & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff; // `time_high_and_version`\n\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n\n  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n\n  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`\n\n  b[i++] = clockseq & 0xff; // `node`\n\n  for (let n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf || (0, _bytesToUuid.default)(b);\n}\n\nvar _default = v1;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _v = _interopRequireDefault(require(\"./v35.js\"));\n\nvar _md = _interopRequireDefault(require(\"./md5.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst v3 = (0, _v.default)('v3', 0x30, _md.default);\nvar _default = v3;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\nexports.URL = exports.DNS = void 0;\n\nvar _bytesToUuid = _interopRequireDefault(require(\"./bytesToUuid.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction uuidToBytes(uuid) {\n  // Note: We assume we're being passed a valid uuid string\n  const bytes = [];\n  uuid.replace(/[a-fA-F0-9]{2}/g, function (hex) {\n    bytes.push(parseInt(hex, 16));\n  });\n  return bytes;\n}\n\nfunction stringToBytes(str) {\n  str = unescape(encodeURIComponent(str)); // UTF8 escape\n\n  const bytes = [];\n\n  for (let i = 0; i < str.length; ++i) {\n    bytes.push(str.charCodeAt(i));\n  }\n\n  return bytes;\n}\n\nconst DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';\nexports.DNS = DNS;\nconst URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';\nexports.URL = URL;\n\nfunction _default(name, version, hashfunc) {\n  function generateUUID(value, namespace, buf, offset) {\n    const off = buf && offset || 0;\n    if (typeof value === 'string') value = stringToBytes(value);\n    if (typeof namespace === 'string') namespace = uuidToBytes(namespace);\n\n    if (!Array.isArray(value)) {\n      throw TypeError('value must be an array of bytes');\n    }\n\n    if (!Array.isArray(namespace) || namespace.length !== 16) {\n      throw TypeError('namespace must be uuid string or an Array of 16 byte values');\n    } // Per 4.3\n\n\n    const bytes = hashfunc(namespace.concat(value));\n    bytes[6] = bytes[6] & 0x0f | version;\n    bytes[8] = bytes[8] & 0x3f | 0x80;\n\n    if (buf) {\n      for (let idx = 0; idx < 16; ++idx) {\n        buf[off + idx] = bytes[idx];\n      }\n    }\n\n    return buf || (0, _bytesToUuid.default)(bytes);\n  } // Function#name is not settable on some platforms (#270)\n\n\n  try {\n    generateUUID.name = name; // eslint-disable-next-line no-empty\n  } catch (err) {} // For CommonJS default export support\n\n\n  generateUUID.DNS = DNS;\n  generateUUID.URL = URL;\n  return generateUUID;\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _rng = _interopRequireDefault(require(\"./rng.js\"));\n\nvar _bytesToUuid = _interopRequireDefault(require(\"./bytesToUuid.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction v4(options, buf, offset) {\n  if (typeof options === 'string') {\n    buf = options === 'binary' ? new Uint8Array(16) : null;\n    options = null;\n  }\n\n  options = options || {};\n\n  const rnds = options.random || (options.rng || _rng.default)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    const start = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[start + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return (0, _bytesToUuid.default)(rnds);\n}\n\nvar _default = v4;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _v = _interopRequireDefault(require(\"./v35.js\"));\n\nvar _sha = _interopRequireDefault(require(\"./sha1.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst v5 = (0, _v.default)('v5', 0x50, _sha.default);\nvar _default = v5;\nexports.default = _default;","\"use strict\";function e(e,r){if(!s)return!1;const n=e.buffer;let u=g.get(n);if(null==u){if((u=t.validate(n))&&r)try{new t.Instance(new t.Module(n)).exports[0]()}catch(e){u=!1}g.set(n,u)}return u}const t=WebAssembly,r=(...e)=>Uint8Array.of(0,97,115,109,1,0,0,0,...e),n=(...e)=>Uint32Array.of(1836278016,1,...e),u=(...e)=>n(1610679297,33751040,...e,40239360,259),i=(...e)=>r(1,4,1,96,0,0,3,2,1,0,...e,11,0,10,4,110,97,109,101,2,3,1,0,0),o=(...e)=>Uint16Array.of(24832,28019,1,0,1025,24577,0,515,1,...e),a=(...e)=>o(...e,2842,4096,28164,28001,357,260,256,560,259,0),s=\"object\"==typeof t,f=e=>s&&\"function\"==typeof e,g=new WeakMap,l=n(1610679553,58589440,117440770,805372165,101318656,1107297281,268438272,1835101700,17039717,36700416,259),c=o(773,1,2561,269,11,65,65,65,3068,2816,2560,28164,28001,613,259,0),p=n(1610679297,33751040,134873089,100664833,185276736),y=r(2,8,1,1,97,1,98,3,127,1,6,6,1,127,1,65,0,11,7,5,1,1,97,3,1,0,8,4,110,97,109,101,2,1,0),b=Uint16Array.of(24832,28019,1,0,1537,24577,512,32639,515,1,2058,1537,16640,16640,2816,2560,28164,28001,613,259,0),m=a(3082,2561,17152,0,0,252),A=a(2058,1537,16640,49152),d=u(101318657,301990913,268438272,1835101700,17039717),U=i(5,4,1,3,1,1,10,7,1,5,0,254,3,0),x=u(84344833,6357249,17369600,4259847,186257917,1845758464),w=i(10,7,1,5,0,208,112,26);module.exports={support:(t=1)=>s&&e(Uint32Array.of(1836278016,t)),get supportStreaming(){return f(t.instantiateStreaming)},feature:{get bigInt(){return e(l,!0)},get bulk(){return e(c)},get exceptions(){return e(p)},get mutableGlobal(){return e(y)},get multiValue(){return e(b)},get saturateConversions(){return e(m)},get signExtensions(){return e(A)},get tailCall(){return e(d)},get threads(){return e(U)},get simd(){return e(x)},get references(){return e(w)},get typeReflection(){return f(t.Memory.type)},get funcReferences(){return f(t.Function)}}};","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\n\nlet logDisabled_ = true;\nlet deprecationWarnings_ = true;\n\n/**\n * Extract browser version out of the provided user agent string.\n *\n * @param {!string} uastring userAgent string.\n * @param {!string} expr Regular expression used as match criteria.\n * @param {!number} pos position in the version string to be returned.\n * @return {!number} browser version.\n */\nexport function extractVersion(uastring, expr, pos) {\n  const match = uastring.match(expr);\n  return match && match.length >= pos && parseInt(match[pos], 10);\n}\n\n// Wraps the peerconnection event eventNameToWrap in a function\n// which returns the modified event object (or false to prevent\n// the event).\nexport function wrapPeerConnectionEvent(window, eventNameToWrap, wrapper) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  const proto = window.RTCPeerConnection.prototype;\n  const nativeAddEventListener = proto.addEventListener;\n  proto.addEventListener = function(nativeEventName, cb) {\n    if (nativeEventName !== eventNameToWrap) {\n      return nativeAddEventListener.apply(this, arguments);\n    }\n    const wrappedCallback = (e) => {\n      const modifiedEvent = wrapper(e);\n      if (modifiedEvent) {\n        if (cb.handleEvent) {\n          cb.handleEvent(modifiedEvent);\n        } else {\n          cb(modifiedEvent);\n        }\n      }\n    };\n    this._eventMap = this._eventMap || {};\n    if (!this._eventMap[eventNameToWrap]) {\n      this._eventMap[eventNameToWrap] = new Map();\n    }\n    this._eventMap[eventNameToWrap].set(cb, wrappedCallback);\n    return nativeAddEventListener.apply(this, [nativeEventName,\n      wrappedCallback]);\n  };\n\n  const nativeRemoveEventListener = proto.removeEventListener;\n  proto.removeEventListener = function(nativeEventName, cb) {\n    if (nativeEventName !== eventNameToWrap || !this._eventMap\n        || !this._eventMap[eventNameToWrap]) {\n      return nativeRemoveEventListener.apply(this, arguments);\n    }\n    if (!this._eventMap[eventNameToWrap].has(cb)) {\n      return nativeRemoveEventListener.apply(this, arguments);\n    }\n    const unwrappedCb = this._eventMap[eventNameToWrap].get(cb);\n    this._eventMap[eventNameToWrap].delete(cb);\n    if (this._eventMap[eventNameToWrap].size === 0) {\n      delete this._eventMap[eventNameToWrap];\n    }\n    if (Object.keys(this._eventMap).length === 0) {\n      delete this._eventMap;\n    }\n    return nativeRemoveEventListener.apply(this, [nativeEventName,\n      unwrappedCb]);\n  };\n\n  Object.defineProperty(proto, 'on' + eventNameToWrap, {\n    get() {\n      return this['_on' + eventNameToWrap];\n    },\n    set(cb) {\n      if (this['_on' + eventNameToWrap]) {\n        this.removeEventListener(eventNameToWrap,\n            this['_on' + eventNameToWrap]);\n        delete this['_on' + eventNameToWrap];\n      }\n      if (cb) {\n        this.addEventListener(eventNameToWrap,\n            this['_on' + eventNameToWrap] = cb);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n}\n\nexport function disableLog(bool) {\n  if (typeof bool !== 'boolean') {\n    return new Error('Argument type: ' + typeof bool +\n        '. Please use a boolean.');\n  }\n  logDisabled_ = bool;\n  return (bool) ? 'adapter.js logging disabled' :\n      'adapter.js logging enabled';\n}\n\n/**\n * Disable or enable deprecation warnings\n * @param {!boolean} bool set to true to disable warnings.\n */\nexport function disableWarnings(bool) {\n  if (typeof bool !== 'boolean') {\n    return new Error('Argument type: ' + typeof bool +\n        '. Please use a boolean.');\n  }\n  deprecationWarnings_ = !bool;\n  return 'adapter.js deprecation warnings ' + (bool ? 'disabled' : 'enabled');\n}\n\nexport function log() {\n  if (typeof window === 'object') {\n    if (logDisabled_) {\n      return;\n    }\n    if (typeof console !== 'undefined' && typeof console.log === 'function') {\n      console.log.apply(console, arguments);\n    }\n  }\n}\n\n/**\n * Shows a deprecation warning suggesting the modern and spec-compatible API.\n */\nexport function deprecated(oldMethod, newMethod) {\n  if (!deprecationWarnings_) {\n    return;\n  }\n  console.warn(oldMethod + ' is deprecated, please use ' + newMethod +\n      ' instead.');\n}\n\n/**\n * Browser detector.\n *\n * @return {object} result containing browser and version\n *     properties.\n */\nexport function detectBrowser(window) {\n  // Returned result object.\n  const result = {browser: null, version: null};\n\n  // Fail early if it's not a browser\n  if (typeof window === 'undefined' || !window.navigator) {\n    result.browser = 'Not a browser.';\n    return result;\n  }\n\n  const {navigator} = window;\n\n  if (navigator.mozGetUserMedia) { // Firefox.\n    result.browser = 'firefox';\n    result.version = extractVersion(navigator.userAgent,\n        /Firefox\\/(\\d+)\\./, 1);\n  } else if (navigator.webkitGetUserMedia ||\n      (window.isSecureContext === false && window.webkitRTCPeerConnection &&\n       !window.RTCIceGatherer)) {\n    // Chrome, Chromium, Webview, Opera.\n    // Version matches Chrome/WebRTC version.\n    // Chrome 74 removed webkitGetUserMedia on http as well so we need the\n    // more complicated fallback to webkitRTCPeerConnection.\n    result.browser = 'chrome';\n    result.version = extractVersion(navigator.userAgent,\n        /Chrom(e|ium)\\/(\\d+)\\./, 2);\n  } else if (window.RTCPeerConnection &&\n      navigator.userAgent.match(/AppleWebKit\\/(\\d+)\\./)) { // Safari.\n    result.browser = 'safari';\n    result.version = extractVersion(navigator.userAgent,\n        /AppleWebKit\\/(\\d+)\\./, 1);\n    result.supportsUnifiedPlan = window.RTCRtpTransceiver &&\n        'currentDirection' in window.RTCRtpTransceiver.prototype;\n  } else { // Default fallthrough: not supported.\n    result.browser = 'Not a supported browser.';\n    return result;\n  }\n\n  return result;\n}\n\n/**\n * Checks if something is an object.\n *\n * @param {*} val The something you want to check.\n * @return true if val is an object, false otherwise.\n */\nfunction isObject(val) {\n  return Object.prototype.toString.call(val) === '[object Object]';\n}\n\n/**\n * Remove all empty objects and undefined values\n * from a nested object -- an enhanced and vanilla version\n * of Lodash's `compact`.\n */\nexport function compactObject(data) {\n  if (!isObject(data)) {\n    return data;\n  }\n\n  return Object.keys(data).reduce(function(accumulator, key) {\n    const isObj = isObject(data[key]);\n    const value = isObj ? compactObject(data[key]) : data[key];\n    const isEmptyObject = isObj && !Object.keys(value).length;\n    if (value === undefined || isEmptyObject) {\n      return accumulator;\n    }\n    return Object.assign(accumulator, {[key]: value});\n  }, {});\n}\n\n/* iterates the stats graph recursively. */\nexport function walkStats(stats, base, resultSet) {\n  if (!base || resultSet.has(base.id)) {\n    return;\n  }\n  resultSet.set(base.id, base);\n  Object.keys(base).forEach(name => {\n    if (name.endsWith('Id')) {\n      walkStats(stats, stats.get(base[name]), resultSet);\n    } else if (name.endsWith('Ids')) {\n      base[name].forEach(id => {\n        walkStats(stats, stats.get(id), resultSet);\n      });\n    }\n  });\n}\n\n/* filter getStats for a sender/receiver track. */\nexport function filterStats(result, track, outbound) {\n  const streamStatsType = outbound ? 'outbound-rtp' : 'inbound-rtp';\n  const filteredResult = new Map();\n  if (track === null) {\n    return filteredResult;\n  }\n  const trackStats = [];\n  result.forEach(value => {\n    if (value.type === 'track' &&\n        value.trackIdentifier === track.id) {\n      trackStats.push(value);\n    }\n  });\n  trackStats.forEach(trackStat => {\n    result.forEach(stats => {\n      if (stats.type === streamStatsType && stats.trackId === trackStat.id) {\n        walkStats(result, stats, filteredResult);\n      }\n    });\n  });\n  return filteredResult;\n}\n\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\nimport * as utils from '../utils.js';\nconst logging = utils.log;\n\nexport function shimGetUserMedia(window, browserDetails) {\n  const navigator = window && window.navigator;\n\n  if (!navigator.mediaDevices) {\n    return;\n  }\n\n  const constraintsToChrome_ = function(c) {\n    if (typeof c !== 'object' || c.mandatory || c.optional) {\n      return c;\n    }\n    const cc = {};\n    Object.keys(c).forEach(key => {\n      if (key === 'require' || key === 'advanced' || key === 'mediaSource') {\n        return;\n      }\n      const r = (typeof c[key] === 'object') ? c[key] : {ideal: c[key]};\n      if (r.exact !== undefined && typeof r.exact === 'number') {\n        r.min = r.max = r.exact;\n      }\n      const oldname_ = function(prefix, name) {\n        if (prefix) {\n          return prefix + name.charAt(0).toUpperCase() + name.slice(1);\n        }\n        return (name === 'deviceId') ? 'sourceId' : name;\n      };\n      if (r.ideal !== undefined) {\n        cc.optional = cc.optional || [];\n        let oc = {};\n        if (typeof r.ideal === 'number') {\n          oc[oldname_('min', key)] = r.ideal;\n          cc.optional.push(oc);\n          oc = {};\n          oc[oldname_('max', key)] = r.ideal;\n          cc.optional.push(oc);\n        } else {\n          oc[oldname_('', key)] = r.ideal;\n          cc.optional.push(oc);\n        }\n      }\n      if (r.exact !== undefined && typeof r.exact !== 'number') {\n        cc.mandatory = cc.mandatory || {};\n        cc.mandatory[oldname_('', key)] = r.exact;\n      } else {\n        ['min', 'max'].forEach(mix => {\n          if (r[mix] !== undefined) {\n            cc.mandatory = cc.mandatory || {};\n            cc.mandatory[oldname_(mix, key)] = r[mix];\n          }\n        });\n      }\n    });\n    if (c.advanced) {\n      cc.optional = (cc.optional || []).concat(c.advanced);\n    }\n    return cc;\n  };\n\n  const shimConstraints_ = function(constraints, func) {\n    if (browserDetails.version >= 61) {\n      return func(constraints);\n    }\n    constraints = JSON.parse(JSON.stringify(constraints));\n    if (constraints && typeof constraints.audio === 'object') {\n      const remap = function(obj, a, b) {\n        if (a in obj && !(b in obj)) {\n          obj[b] = obj[a];\n          delete obj[a];\n        }\n      };\n      constraints = JSON.parse(JSON.stringify(constraints));\n      remap(constraints.audio, 'autoGainControl', 'googAutoGainControl');\n      remap(constraints.audio, 'noiseSuppression', 'googNoiseSuppression');\n      constraints.audio = constraintsToChrome_(constraints.audio);\n    }\n    if (constraints && typeof constraints.video === 'object') {\n      // Shim facingMode for mobile & surface pro.\n      let face = constraints.video.facingMode;\n      face = face && ((typeof face === 'object') ? face : {ideal: face});\n      const getSupportedFacingModeLies = browserDetails.version < 66;\n\n      if ((face && (face.exact === 'user' || face.exact === 'environment' ||\n                    face.ideal === 'user' || face.ideal === 'environment')) &&\n          !(navigator.mediaDevices.getSupportedConstraints &&\n            navigator.mediaDevices.getSupportedConstraints().facingMode &&\n            !getSupportedFacingModeLies)) {\n        delete constraints.video.facingMode;\n        let matches;\n        if (face.exact === 'environment' || face.ideal === 'environment') {\n          matches = ['back', 'rear'];\n        } else if (face.exact === 'user' || face.ideal === 'user') {\n          matches = ['front'];\n        }\n        if (matches) {\n          // Look for matches in label, or use last cam for back (typical).\n          return navigator.mediaDevices.enumerateDevices()\n          .then(devices => {\n            devices = devices.filter(d => d.kind === 'videoinput');\n            let dev = devices.find(d => matches.some(match =>\n              d.label.toLowerCase().includes(match)));\n            if (!dev && devices.length && matches.includes('back')) {\n              dev = devices[devices.length - 1]; // more likely the back cam\n            }\n            if (dev) {\n              constraints.video.deviceId = face.exact ? {exact: dev.deviceId} :\n                                                        {ideal: dev.deviceId};\n            }\n            constraints.video = constraintsToChrome_(constraints.video);\n            logging('chrome: ' + JSON.stringify(constraints));\n            return func(constraints);\n          });\n        }\n      }\n      constraints.video = constraintsToChrome_(constraints.video);\n    }\n    logging('chrome: ' + JSON.stringify(constraints));\n    return func(constraints);\n  };\n\n  const shimError_ = function(e) {\n    if (browserDetails.version >= 64) {\n      return e;\n    }\n    return {\n      name: {\n        PermissionDeniedError: 'NotAllowedError',\n        PermissionDismissedError: 'NotAllowedError',\n        InvalidStateError: 'NotAllowedError',\n        DevicesNotFoundError: 'NotFoundError',\n        ConstraintNotSatisfiedError: 'OverconstrainedError',\n        TrackStartError: 'NotReadableError',\n        MediaDeviceFailedDueToShutdown: 'NotAllowedError',\n        MediaDeviceKillSwitchOn: 'NotAllowedError',\n        TabCaptureError: 'AbortError',\n        ScreenCaptureError: 'AbortError',\n        DeviceCaptureError: 'AbortError'\n      }[e.name] || e.name,\n      message: e.message,\n      constraint: e.constraint || e.constraintName,\n      toString() {\n        return this.name + (this.message && ': ') + this.message;\n      }\n    };\n  };\n\n  const getUserMedia_ = function(constraints, onSuccess, onError) {\n    shimConstraints_(constraints, c => {\n      navigator.webkitGetUserMedia(c, onSuccess, e => {\n        if (onError) {\n          onError(shimError_(e));\n        }\n      });\n    });\n  };\n  navigator.getUserMedia = getUserMedia_.bind(navigator);\n\n  // Even though Chrome 45 has navigator.mediaDevices and a getUserMedia\n  // function which returns a Promise, it does not accept spec-style\n  // constraints.\n  if (navigator.mediaDevices.getUserMedia) {\n    const origGetUserMedia = navigator.mediaDevices.getUserMedia.\n        bind(navigator.mediaDevices);\n    navigator.mediaDevices.getUserMedia = function(cs) {\n      return shimConstraints_(cs, c => origGetUserMedia(c).then(stream => {\n        if (c.audio && !stream.getAudioTracks().length ||\n            c.video && !stream.getVideoTracks().length) {\n          stream.getTracks().forEach(track => {\n            track.stop();\n          });\n          throw new DOMException('', 'NotFoundError');\n        }\n        return stream;\n      }, e => Promise.reject(shimError_(e))));\n    };\n  }\n}\n","/*\n *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\nexport function shimGetDisplayMedia(window, getSourceId) {\n  if (window.navigator.mediaDevices &&\n    'getDisplayMedia' in window.navigator.mediaDevices) {\n    return;\n  }\n  if (!(window.navigator.mediaDevices)) {\n    return;\n  }\n  // getSourceId is a function that returns a promise resolving with\n  // the sourceId of the screen/window/tab to be shared.\n  if (typeof getSourceId !== 'function') {\n    console.error('shimGetDisplayMedia: getSourceId argument is not ' +\n        'a function');\n    return;\n  }\n  window.navigator.mediaDevices.getDisplayMedia =\n    function getDisplayMedia(constraints) {\n      return getSourceId(constraints)\n        .then(sourceId => {\n          const widthSpecified = constraints.video && constraints.video.width;\n          const heightSpecified = constraints.video &&\n            constraints.video.height;\n          const frameRateSpecified = constraints.video &&\n            constraints.video.frameRate;\n          constraints.video = {\n            mandatory: {\n              chromeMediaSource: 'desktop',\n              chromeMediaSourceId: sourceId,\n              maxFrameRate: frameRateSpecified || 3\n            }\n          };\n          if (widthSpecified) {\n            constraints.video.mandatory.maxWidth = widthSpecified;\n          }\n          if (heightSpecified) {\n            constraints.video.mandatory.maxHeight = heightSpecified;\n          }\n          return window.navigator.mediaDevices.getUserMedia(constraints);\n        });\n    };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\nimport * as utils from '../utils.js';\n\nexport {shimGetUserMedia} from './getusermedia';\nexport {shimGetDisplayMedia} from './getdisplaymedia';\n\nexport function shimMediaStream(window) {\n  window.MediaStream = window.MediaStream || window.webkitMediaStream;\n}\n\nexport function shimOnTrack(window) {\n  if (typeof window === 'object' && window.RTCPeerConnection && !('ontrack' in\n      window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'ontrack', {\n      get() {\n        return this._ontrack;\n      },\n      set(f) {\n        if (this._ontrack) {\n          this.removeEventListener('track', this._ontrack);\n        }\n        this.addEventListener('track', this._ontrack = f);\n      },\n      enumerable: true,\n      configurable: true\n    });\n    const origSetRemoteDescription =\n        window.RTCPeerConnection.prototype.setRemoteDescription;\n    window.RTCPeerConnection.prototype.setRemoteDescription =\n      function setRemoteDescription() {\n        if (!this._ontrackpoly) {\n          this._ontrackpoly = (e) => {\n            // onaddstream does not fire when a track is added to an existing\n            // stream. But stream.onaddtrack is implemented so we use that.\n            e.stream.addEventListener('addtrack', te => {\n              let receiver;\n              if (window.RTCPeerConnection.prototype.getReceivers) {\n                receiver = this.getReceivers()\n                  .find(r => r.track && r.track.id === te.track.id);\n              } else {\n                receiver = {track: te.track};\n              }\n\n              const event = new Event('track');\n              event.track = te.track;\n              event.receiver = receiver;\n              event.transceiver = {receiver};\n              event.streams = [e.stream];\n              this.dispatchEvent(event);\n            });\n            e.stream.getTracks().forEach(track => {\n              let receiver;\n              if (window.RTCPeerConnection.prototype.getReceivers) {\n                receiver = this.getReceivers()\n                  .find(r => r.track && r.track.id === track.id);\n              } else {\n                receiver = {track};\n              }\n              const event = new Event('track');\n              event.track = track;\n              event.receiver = receiver;\n              event.transceiver = {receiver};\n              event.streams = [e.stream];\n              this.dispatchEvent(event);\n            });\n          };\n          this.addEventListener('addstream', this._ontrackpoly);\n        }\n        return origSetRemoteDescription.apply(this, arguments);\n      };\n  } else {\n    // even if RTCRtpTransceiver is in window, it is only used and\n    // emitted in unified-plan. Unfortunately this means we need\n    // to unconditionally wrap the event.\n    utils.wrapPeerConnectionEvent(window, 'track', e => {\n      if (!e.transceiver) {\n        Object.defineProperty(e, 'transceiver',\n          {value: {receiver: e.receiver}});\n      }\n      return e;\n    });\n  }\n}\n\nexport function shimGetSendersWithDtmf(window) {\n  // Overrides addTrack/removeTrack, depends on shimAddTrackRemoveTrack.\n  if (typeof window === 'object' && window.RTCPeerConnection &&\n      !('getSenders' in window.RTCPeerConnection.prototype) &&\n      'createDTMFSender' in window.RTCPeerConnection.prototype) {\n    const shimSenderWithDtmf = function(pc, track) {\n      return {\n        track,\n        get dtmf() {\n          if (this._dtmf === undefined) {\n            if (track.kind === 'audio') {\n              this._dtmf = pc.createDTMFSender(track);\n            } else {\n              this._dtmf = null;\n            }\n          }\n          return this._dtmf;\n        },\n        _pc: pc\n      };\n    };\n\n    // augment addTrack when getSenders is not available.\n    if (!window.RTCPeerConnection.prototype.getSenders) {\n      window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n        this._senders = this._senders || [];\n        return this._senders.slice(); // return a copy of the internal state.\n      };\n      const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n      window.RTCPeerConnection.prototype.addTrack =\n        function addTrack(track, stream) {\n          let sender = origAddTrack.apply(this, arguments);\n          if (!sender) {\n            sender = shimSenderWithDtmf(this, track);\n            this._senders.push(sender);\n          }\n          return sender;\n        };\n\n      const origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;\n      window.RTCPeerConnection.prototype.removeTrack =\n        function removeTrack(sender) {\n          origRemoveTrack.apply(this, arguments);\n          const idx = this._senders.indexOf(sender);\n          if (idx !== -1) {\n            this._senders.splice(idx, 1);\n          }\n        };\n    }\n    const origAddStream = window.RTCPeerConnection.prototype.addStream;\n    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n      this._senders = this._senders || [];\n      origAddStream.apply(this, [stream]);\n      stream.getTracks().forEach(track => {\n        this._senders.push(shimSenderWithDtmf(this, track));\n      });\n    };\n\n    const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n    window.RTCPeerConnection.prototype.removeStream =\n      function removeStream(stream) {\n        this._senders = this._senders || [];\n        origRemoveStream.apply(this, [stream]);\n\n        stream.getTracks().forEach(track => {\n          const sender = this._senders.find(s => s.track === track);\n          if (sender) { // remove sender\n            this._senders.splice(this._senders.indexOf(sender), 1);\n          }\n        });\n      };\n  } else if (typeof window === 'object' && window.RTCPeerConnection &&\n             'getSenders' in window.RTCPeerConnection.prototype &&\n             'createDTMFSender' in window.RTCPeerConnection.prototype &&\n             window.RTCRtpSender &&\n             !('dtmf' in window.RTCRtpSender.prototype)) {\n    const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n    window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n      const senders = origGetSenders.apply(this, []);\n      senders.forEach(sender => sender._pc = this);\n      return senders;\n    };\n\n    Object.defineProperty(window.RTCRtpSender.prototype, 'dtmf', {\n      get() {\n        if (this._dtmf === undefined) {\n          if (this.track.kind === 'audio') {\n            this._dtmf = this._pc.createDTMFSender(this.track);\n          } else {\n            this._dtmf = null;\n          }\n        }\n        return this._dtmf;\n      }\n    });\n  }\n}\n\nexport function shimGetStats(window) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n\n  const origGetStats = window.RTCPeerConnection.prototype.getStats;\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    const [selector, onSucc, onErr] = arguments;\n\n    // If selector is a function then we are in the old style stats so just\n    // pass back the original getStats format to avoid breaking old users.\n    if (arguments.length > 0 && typeof selector === 'function') {\n      return origGetStats.apply(this, arguments);\n    }\n\n    // When spec-style getStats is supported, return those when called with\n    // either no arguments or the selector argument is null.\n    if (origGetStats.length === 0 && (arguments.length === 0 ||\n        typeof selector !== 'function')) {\n      return origGetStats.apply(this, []);\n    }\n\n    const fixChromeStats_ = function(response) {\n      const standardReport = {};\n      const reports = response.result();\n      reports.forEach(report => {\n        const standardStats = {\n          id: report.id,\n          timestamp: report.timestamp,\n          type: {\n            localcandidate: 'local-candidate',\n            remotecandidate: 'remote-candidate'\n          }[report.type] || report.type\n        };\n        report.names().forEach(name => {\n          standardStats[name] = report.stat(name);\n        });\n        standardReport[standardStats.id] = standardStats;\n      });\n\n      return standardReport;\n    };\n\n    // shim getStats with maplike support\n    const makeMapStats = function(stats) {\n      return new Map(Object.keys(stats).map(key => [key, stats[key]]));\n    };\n\n    if (arguments.length >= 2) {\n      const successCallbackWrapper_ = function(response) {\n        onSucc(makeMapStats(fixChromeStats_(response)));\n      };\n\n      return origGetStats.apply(this, [successCallbackWrapper_,\n        selector]);\n    }\n\n    // promise-support\n    return new Promise((resolve, reject) => {\n      origGetStats.apply(this, [\n        function(response) {\n          resolve(makeMapStats(fixChromeStats_(response)));\n        }, reject]);\n    }).then(onSucc, onErr);\n  };\n}\n\nexport function shimSenderReceiverGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\n      window.RTCRtpSender && window.RTCRtpReceiver)) {\n    return;\n  }\n\n  // shim sender stats.\n  if (!('getStats' in window.RTCRtpSender.prototype)) {\n    const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n    if (origGetSenders) {\n      window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n        const senders = origGetSenders.apply(this, []);\n        senders.forEach(sender => sender._pc = this);\n        return senders;\n      };\n    }\n\n    const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n    if (origAddTrack) {\n      window.RTCPeerConnection.prototype.addTrack = function addTrack() {\n        const sender = origAddTrack.apply(this, arguments);\n        sender._pc = this;\n        return sender;\n      };\n    }\n    window.RTCRtpSender.prototype.getStats = function getStats() {\n      const sender = this;\n      return this._pc.getStats().then(result =>\n        /* Note: this will include stats of all senders that\n         *   send a track with the same id as sender.track as\n         *   it is not possible to identify the RTCRtpSender.\n         */\n        utils.filterStats(result, sender.track, true));\n    };\n  }\n\n  // shim receiver stats.\n  if (!('getStats' in window.RTCRtpReceiver.prototype)) {\n    const origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;\n    if (origGetReceivers) {\n      window.RTCPeerConnection.prototype.getReceivers =\n        function getReceivers() {\n          const receivers = origGetReceivers.apply(this, []);\n          receivers.forEach(receiver => receiver._pc = this);\n          return receivers;\n        };\n    }\n    utils.wrapPeerConnectionEvent(window, 'track', e => {\n      e.receiver._pc = e.srcElement;\n      return e;\n    });\n    window.RTCRtpReceiver.prototype.getStats = function getStats() {\n      const receiver = this;\n      return this._pc.getStats().then(result =>\n        utils.filterStats(result, receiver.track, false));\n    };\n  }\n\n  if (!('getStats' in window.RTCRtpSender.prototype &&\n      'getStats' in window.RTCRtpReceiver.prototype)) {\n    return;\n  }\n\n  // shim RTCPeerConnection.getStats(track).\n  const origGetStats = window.RTCPeerConnection.prototype.getStats;\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    if (arguments.length > 0 &&\n        arguments[0] instanceof window.MediaStreamTrack) {\n      const track = arguments[0];\n      let sender;\n      let receiver;\n      let err;\n      this.getSenders().forEach(s => {\n        if (s.track === track) {\n          if (sender) {\n            err = true;\n          } else {\n            sender = s;\n          }\n        }\n      });\n      this.getReceivers().forEach(r => {\n        if (r.track === track) {\n          if (receiver) {\n            err = true;\n          } else {\n            receiver = r;\n          }\n        }\n        return r.track === track;\n      });\n      if (err || (sender && receiver)) {\n        return Promise.reject(new DOMException(\n          'There are more than one sender or receiver for the track.',\n          'InvalidAccessError'));\n      } else if (sender) {\n        return sender.getStats();\n      } else if (receiver) {\n        return receiver.getStats();\n      }\n      return Promise.reject(new DOMException(\n        'There is no sender or receiver for the track.',\n        'InvalidAccessError'));\n    }\n    return origGetStats.apply(this, arguments);\n  };\n}\n\nexport function shimAddTrackRemoveTrackWithNative(window) {\n  // shim addTrack/removeTrack with native variants in order to make\n  // the interactions with legacy getLocalStreams behave as in other browsers.\n  // Keeps a mapping stream.id => [stream, rtpsenders...]\n  window.RTCPeerConnection.prototype.getLocalStreams =\n    function getLocalStreams() {\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n      return Object.keys(this._shimmedLocalStreams)\n        .map(streamId => this._shimmedLocalStreams[streamId][0]);\n    };\n\n  const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n  window.RTCPeerConnection.prototype.addTrack =\n    function addTrack(track, stream) {\n      if (!stream) {\n        return origAddTrack.apply(this, arguments);\n      }\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n\n      const sender = origAddTrack.apply(this, arguments);\n      if (!this._shimmedLocalStreams[stream.id]) {\n        this._shimmedLocalStreams[stream.id] = [stream, sender];\n      } else if (this._shimmedLocalStreams[stream.id].indexOf(sender) === -1) {\n        this._shimmedLocalStreams[stream.id].push(sender);\n      }\n      return sender;\n    };\n\n  const origAddStream = window.RTCPeerConnection.prototype.addStream;\n  window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n    this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n\n    stream.getTracks().forEach(track => {\n      const alreadyExists = this.getSenders().find(s => s.track === track);\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.',\n            'InvalidAccessError');\n      }\n    });\n    const existingSenders = this.getSenders();\n    origAddStream.apply(this, arguments);\n    const newSenders = this.getSenders()\n      .filter(newSender => existingSenders.indexOf(newSender) === -1);\n    this._shimmedLocalStreams[stream.id] = [stream].concat(newSenders);\n  };\n\n  const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n  window.RTCPeerConnection.prototype.removeStream =\n    function removeStream(stream) {\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n      delete this._shimmedLocalStreams[stream.id];\n      return origRemoveStream.apply(this, arguments);\n    };\n\n  const origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;\n  window.RTCPeerConnection.prototype.removeTrack =\n    function removeTrack(sender) {\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n      if (sender) {\n        Object.keys(this._shimmedLocalStreams).forEach(streamId => {\n          const idx = this._shimmedLocalStreams[streamId].indexOf(sender);\n          if (idx !== -1) {\n            this._shimmedLocalStreams[streamId].splice(idx, 1);\n          }\n          if (this._shimmedLocalStreams[streamId].length === 1) {\n            delete this._shimmedLocalStreams[streamId];\n          }\n        });\n      }\n      return origRemoveTrack.apply(this, arguments);\n    };\n}\n\nexport function shimAddTrackRemoveTrack(window, browserDetails) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  // shim addTrack and removeTrack.\n  if (window.RTCPeerConnection.prototype.addTrack &&\n      browserDetails.version >= 65) {\n    return shimAddTrackRemoveTrackWithNative(window);\n  }\n\n  // also shim pc.getLocalStreams when addTrack is shimmed\n  // to return the original streams.\n  const origGetLocalStreams = window.RTCPeerConnection.prototype\n      .getLocalStreams;\n  window.RTCPeerConnection.prototype.getLocalStreams =\n    function getLocalStreams() {\n      const nativeStreams = origGetLocalStreams.apply(this);\n      this._reverseStreams = this._reverseStreams || {};\n      return nativeStreams.map(stream => this._reverseStreams[stream.id]);\n    };\n\n  const origAddStream = window.RTCPeerConnection.prototype.addStream;\n  window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n    this._streams = this._streams || {};\n    this._reverseStreams = this._reverseStreams || {};\n\n    stream.getTracks().forEach(track => {\n      const alreadyExists = this.getSenders().find(s => s.track === track);\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.',\n            'InvalidAccessError');\n      }\n    });\n    // Add identity mapping for consistency with addTrack.\n    // Unless this is being used with a stream from addTrack.\n    if (!this._reverseStreams[stream.id]) {\n      const newStream = new window.MediaStream(stream.getTracks());\n      this._streams[stream.id] = newStream;\n      this._reverseStreams[newStream.id] = stream;\n      stream = newStream;\n    }\n    origAddStream.apply(this, [stream]);\n  };\n\n  const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n  window.RTCPeerConnection.prototype.removeStream =\n    function removeStream(stream) {\n      this._streams = this._streams || {};\n      this._reverseStreams = this._reverseStreams || {};\n\n      origRemoveStream.apply(this, [(this._streams[stream.id] || stream)]);\n      delete this._reverseStreams[(this._streams[stream.id] ?\n          this._streams[stream.id].id : stream.id)];\n      delete this._streams[stream.id];\n    };\n\n  window.RTCPeerConnection.prototype.addTrack =\n    function addTrack(track, stream) {\n      if (this.signalingState === 'closed') {\n        throw new DOMException(\n          'The RTCPeerConnection\\'s signalingState is \\'closed\\'.',\n          'InvalidStateError');\n      }\n      const streams = [].slice.call(arguments, 1);\n      if (streams.length !== 1 ||\n          !streams[0].getTracks().find(t => t === track)) {\n        // this is not fully correct but all we can manage without\n        // [[associated MediaStreams]] internal slot.\n        throw new DOMException(\n          'The adapter.js addTrack polyfill only supports a single ' +\n          ' stream which is associated with the specified track.',\n          'NotSupportedError');\n      }\n\n      const alreadyExists = this.getSenders().find(s => s.track === track);\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.',\n            'InvalidAccessError');\n      }\n\n      this._streams = this._streams || {};\n      this._reverseStreams = this._reverseStreams || {};\n      const oldStream = this._streams[stream.id];\n      if (oldStream) {\n        // this is using odd Chrome behaviour, use with caution:\n        // https://bugs.chromium.org/p/webrtc/issues/detail?id=7815\n        // Note: we rely on the high-level addTrack/dtmf shim to\n        // create the sender with a dtmf sender.\n        oldStream.addTrack(track);\n\n        // Trigger ONN async.\n        Promise.resolve().then(() => {\n          this.dispatchEvent(new Event('negotiationneeded'));\n        });\n      } else {\n        const newStream = new window.MediaStream([track]);\n        this._streams[stream.id] = newStream;\n        this._reverseStreams[newStream.id] = stream;\n        this.addStream(newStream);\n      }\n      return this.getSenders().find(s => s.track === track);\n    };\n\n  // replace the internal stream id with the external one and\n  // vice versa.\n  function replaceInternalStreamId(pc, description) {\n    let sdp = description.sdp;\n    Object.keys(pc._reverseStreams || []).forEach(internalId => {\n      const externalStream = pc._reverseStreams[internalId];\n      const internalStream = pc._streams[externalStream.id];\n      sdp = sdp.replace(new RegExp(internalStream.id, 'g'),\n          externalStream.id);\n    });\n    return new RTCSessionDescription({\n      type: description.type,\n      sdp\n    });\n  }\n  function replaceExternalStreamId(pc, description) {\n    let sdp = description.sdp;\n    Object.keys(pc._reverseStreams || []).forEach(internalId => {\n      const externalStream = pc._reverseStreams[internalId];\n      const internalStream = pc._streams[externalStream.id];\n      sdp = sdp.replace(new RegExp(externalStream.id, 'g'),\n          internalStream.id);\n    });\n    return new RTCSessionDescription({\n      type: description.type,\n      sdp\n    });\n  }\n  ['createOffer', 'createAnswer'].forEach(function(method) {\n    const nativeMethod = window.RTCPeerConnection.prototype[method];\n    const methodObj = {[method]() {\n      const args = arguments;\n      const isLegacyCall = arguments.length &&\n          typeof arguments[0] === 'function';\n      if (isLegacyCall) {\n        return nativeMethod.apply(this, [\n          (description) => {\n            const desc = replaceInternalStreamId(this, description);\n            args[0].apply(null, [desc]);\n          },\n          (err) => {\n            if (args[1]) {\n              args[1].apply(null, err);\n            }\n          }, arguments[2]\n        ]);\n      }\n      return nativeMethod.apply(this, arguments)\n      .then(description => replaceInternalStreamId(this, description));\n    }};\n    window.RTCPeerConnection.prototype[method] = methodObj[method];\n  });\n\n  const origSetLocalDescription =\n      window.RTCPeerConnection.prototype.setLocalDescription;\n  window.RTCPeerConnection.prototype.setLocalDescription =\n    function setLocalDescription() {\n      if (!arguments.length || !arguments[0].type) {\n        return origSetLocalDescription.apply(this, arguments);\n      }\n      arguments[0] = replaceExternalStreamId(this, arguments[0]);\n      return origSetLocalDescription.apply(this, arguments);\n    };\n\n  // TODO: mangle getStats: https://w3c.github.io/webrtc-stats/#dom-rtcmediastreamstats-streamidentifier\n\n  const origLocalDescription = Object.getOwnPropertyDescriptor(\n      window.RTCPeerConnection.prototype, 'localDescription');\n  Object.defineProperty(window.RTCPeerConnection.prototype,\n      'localDescription', {\n        get() {\n          const description = origLocalDescription.get.apply(this);\n          if (description.type === '') {\n            return description;\n          }\n          return replaceInternalStreamId(this, description);\n        }\n      });\n\n  window.RTCPeerConnection.prototype.removeTrack =\n    function removeTrack(sender) {\n      if (this.signalingState === 'closed') {\n        throw new DOMException(\n          'The RTCPeerConnection\\'s signalingState is \\'closed\\'.',\n          'InvalidStateError');\n      }\n      // We can not yet check for sender instanceof RTCRtpSender\n      // since we shim RTPSender. So we check if sender._pc is set.\n      if (!sender._pc) {\n        throw new DOMException('Argument 1 of RTCPeerConnection.removeTrack ' +\n            'does not implement interface RTCRtpSender.', 'TypeError');\n      }\n      const isLocal = sender._pc === this;\n      if (!isLocal) {\n        throw new DOMException('Sender was not created by this connection.',\n            'InvalidAccessError');\n      }\n\n      // Search for the native stream the senders track belongs to.\n      this._streams = this._streams || {};\n      let stream;\n      Object.keys(this._streams).forEach(streamid => {\n        const hasTrack = this._streams[streamid].getTracks()\n          .find(track => sender.track === track);\n        if (hasTrack) {\n          stream = this._streams[streamid];\n        }\n      });\n\n      if (stream) {\n        if (stream.getTracks().length === 1) {\n          // if this is the last track of the stream, remove the stream. This\n          // takes care of any shimmed _senders.\n          this.removeStream(this._reverseStreams[stream.id]);\n        } else {\n          // relying on the same odd chrome behaviour as above.\n          stream.removeTrack(sender.track);\n        }\n        this.dispatchEvent(new Event('negotiationneeded'));\n      }\n    };\n}\n\nexport function shimPeerConnection(window, browserDetails) {\n  if (!window.RTCPeerConnection && window.webkitRTCPeerConnection) {\n    // very basic support for old versions.\n    window.RTCPeerConnection = window.webkitRTCPeerConnection;\n  }\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n\n  // shim implicit creation of RTCSessionDescription/RTCIceCandidate\n  if (browserDetails.version < 53) {\n    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']\n        .forEach(function(method) {\n          const nativeMethod = window.RTCPeerConnection.prototype[method];\n          const methodObj = {[method]() {\n            arguments[0] = new ((method === 'addIceCandidate') ?\n                window.RTCIceCandidate :\n                window.RTCSessionDescription)(arguments[0]);\n            return nativeMethod.apply(this, arguments);\n          }};\n          window.RTCPeerConnection.prototype[method] = methodObj[method];\n        });\n  }\n}\n\n// Attempt to fix ONN in plan-b mode.\nexport function fixNegotiationNeeded(window, browserDetails) {\n  utils.wrapPeerConnectionEvent(window, 'negotiationneeded', e => {\n    const pc = e.target;\n    if (browserDetails.version < 72 || (pc.getConfiguration &&\n        pc.getConfiguration().sdpSemantics === 'plan-b')) {\n      if (pc.signalingState !== 'stable') {\n        return;\n      }\n    }\n    return e;\n  });\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport * as utils from '../utils';\n\nexport function shimGetUserMedia(window, browserDetails) {\n  const navigator = window && window.navigator;\n  const MediaStreamTrack = window && window.MediaStreamTrack;\n\n  navigator.getUserMedia = function(constraints, onSuccess, onError) {\n    // Replace Firefox 44+'s deprecation warning with unprefixed version.\n    utils.deprecated('navigator.getUserMedia',\n        'navigator.mediaDevices.getUserMedia');\n    navigator.mediaDevices.getUserMedia(constraints).then(onSuccess, onError);\n  };\n\n  if (!(browserDetails.version > 55 &&\n      'autoGainControl' in navigator.mediaDevices.getSupportedConstraints())) {\n    const remap = function(obj, a, b) {\n      if (a in obj && !(b in obj)) {\n        obj[b] = obj[a];\n        delete obj[a];\n      }\n    };\n\n    const nativeGetUserMedia = navigator.mediaDevices.getUserMedia.\n        bind(navigator.mediaDevices);\n    navigator.mediaDevices.getUserMedia = function(c) {\n      if (typeof c === 'object' && typeof c.audio === 'object') {\n        c = JSON.parse(JSON.stringify(c));\n        remap(c.audio, 'autoGainControl', 'mozAutoGainControl');\n        remap(c.audio, 'noiseSuppression', 'mozNoiseSuppression');\n      }\n      return nativeGetUserMedia(c);\n    };\n\n    if (MediaStreamTrack && MediaStreamTrack.prototype.getSettings) {\n      const nativeGetSettings = MediaStreamTrack.prototype.getSettings;\n      MediaStreamTrack.prototype.getSettings = function() {\n        const obj = nativeGetSettings.apply(this, arguments);\n        remap(obj, 'mozAutoGainControl', 'autoGainControl');\n        remap(obj, 'mozNoiseSuppression', 'noiseSuppression');\n        return obj;\n      };\n    }\n\n    if (MediaStreamTrack && MediaStreamTrack.prototype.applyConstraints) {\n      const nativeApplyConstraints =\n        MediaStreamTrack.prototype.applyConstraints;\n      MediaStreamTrack.prototype.applyConstraints = function(c) {\n        if (this.kind === 'audio' && typeof c === 'object') {\n          c = JSON.parse(JSON.stringify(c));\n          remap(c, 'autoGainControl', 'mozAutoGainControl');\n          remap(c, 'noiseSuppression', 'mozNoiseSuppression');\n        }\n        return nativeApplyConstraints.apply(this, [c]);\n      };\n    }\n  }\n}\n","/*\n *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nexport function shimGetDisplayMedia(window, preferredMediaSource) {\n  if (window.navigator.mediaDevices &&\n    'getDisplayMedia' in window.navigator.mediaDevices) {\n    return;\n  }\n  if (!(window.navigator.mediaDevices)) {\n    return;\n  }\n  window.navigator.mediaDevices.getDisplayMedia =\n    function getDisplayMedia(constraints) {\n      if (!(constraints && constraints.video)) {\n        const err = new DOMException('getDisplayMedia without video ' +\n            'constraints is undefined');\n        err.name = 'NotFoundError';\n        // from https://heycam.github.io/webidl/#idl-DOMException-error-names\n        err.code = 8;\n        return Promise.reject(err);\n      }\n      if (constraints.video === true) {\n        constraints.video = {mediaSource: preferredMediaSource};\n      } else {\n        constraints.video.mediaSource = preferredMediaSource;\n      }\n      return window.navigator.mediaDevices.getUserMedia(constraints);\n    };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport * as utils from '../utils';\nexport {shimGetUserMedia} from './getusermedia';\nexport {shimGetDisplayMedia} from './getdisplaymedia';\n\nexport function shimOnTrack(window) {\n  if (typeof window === 'object' && window.RTCTrackEvent &&\n      ('receiver' in window.RTCTrackEvent.prototype) &&\n      !('transceiver' in window.RTCTrackEvent.prototype)) {\n    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {\n      get() {\n        return {receiver: this.receiver};\n      }\n    });\n  }\n}\n\nexport function shimPeerConnection(window, browserDetails) {\n  if (typeof window !== 'object' ||\n      !(window.RTCPeerConnection || window.mozRTCPeerConnection)) {\n    return; // probably media.peerconnection.enabled=false in about:config\n  }\n  if (!window.RTCPeerConnection && window.mozRTCPeerConnection) {\n    // very basic support for old versions.\n    window.RTCPeerConnection = window.mozRTCPeerConnection;\n  }\n\n  if (browserDetails.version < 53) {\n    // shim away need for obsolete RTCIceCandidate/RTCSessionDescription.\n    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']\n        .forEach(function(method) {\n          const nativeMethod = window.RTCPeerConnection.prototype[method];\n          const methodObj = {[method]() {\n            arguments[0] = new ((method === 'addIceCandidate') ?\n                window.RTCIceCandidate :\n                window.RTCSessionDescription)(arguments[0]);\n            return nativeMethod.apply(this, arguments);\n          }};\n          window.RTCPeerConnection.prototype[method] = methodObj[method];\n        });\n  }\n\n  const modernStatsTypes = {\n    inboundrtp: 'inbound-rtp',\n    outboundrtp: 'outbound-rtp',\n    candidatepair: 'candidate-pair',\n    localcandidate: 'local-candidate',\n    remotecandidate: 'remote-candidate'\n  };\n\n  const nativeGetStats = window.RTCPeerConnection.prototype.getStats;\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    const [selector, onSucc, onErr] = arguments;\n    return nativeGetStats.apply(this, [selector || null])\n      .then(stats => {\n        if (browserDetails.version < 53 && !onSucc) {\n          // Shim only promise getStats with spec-hyphens in type names\n          // Leave callback version alone; misc old uses of forEach before Map\n          try {\n            stats.forEach(stat => {\n              stat.type = modernStatsTypes[stat.type] || stat.type;\n            });\n          } catch (e) {\n            if (e.name !== 'TypeError') {\n              throw e;\n            }\n            // Avoid TypeError: \"type\" is read-only, in old versions. 34-43ish\n            stats.forEach((stat, i) => {\n              stats.set(i, Object.assign({}, stat, {\n                type: modernStatsTypes[stat.type] || stat.type\n              }));\n            });\n          }\n        }\n        return stats;\n      })\n      .then(onSucc, onErr);\n  };\n}\n\nexport function shimSenderGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\n      window.RTCRtpSender)) {\n    return;\n  }\n  if (window.RTCRtpSender && 'getStats' in window.RTCRtpSender.prototype) {\n    return;\n  }\n  const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n  if (origGetSenders) {\n    window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n      const senders = origGetSenders.apply(this, []);\n      senders.forEach(sender => sender._pc = this);\n      return senders;\n    };\n  }\n\n  const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n  if (origAddTrack) {\n    window.RTCPeerConnection.prototype.addTrack = function addTrack() {\n      const sender = origAddTrack.apply(this, arguments);\n      sender._pc = this;\n      return sender;\n    };\n  }\n  window.RTCRtpSender.prototype.getStats = function getStats() {\n    return this.track ? this._pc.getStats(this.track) :\n        Promise.resolve(new Map());\n  };\n}\n\nexport function shimReceiverGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\n      window.RTCRtpSender)) {\n    return;\n  }\n  if (window.RTCRtpSender && 'getStats' in window.RTCRtpReceiver.prototype) {\n    return;\n  }\n  const origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;\n  if (origGetReceivers) {\n    window.RTCPeerConnection.prototype.getReceivers = function getReceivers() {\n      const receivers = origGetReceivers.apply(this, []);\n      receivers.forEach(receiver => receiver._pc = this);\n      return receivers;\n    };\n  }\n  utils.wrapPeerConnectionEvent(window, 'track', e => {\n    e.receiver._pc = e.srcElement;\n    return e;\n  });\n  window.RTCRtpReceiver.prototype.getStats = function getStats() {\n    return this._pc.getStats(this.track);\n  };\n}\n\nexport function shimRemoveStream(window) {\n  if (!window.RTCPeerConnection ||\n      'removeStream' in window.RTCPeerConnection.prototype) {\n    return;\n  }\n  window.RTCPeerConnection.prototype.removeStream =\n    function removeStream(stream) {\n      utils.deprecated('removeStream', 'removeTrack');\n      this.getSenders().forEach(sender => {\n        if (sender.track && stream.getTracks().includes(sender.track)) {\n          this.removeTrack(sender);\n        }\n      });\n    };\n}\n\nexport function shimRTCDataChannel(window) {\n  // rename DataChannel to RTCDataChannel (native fix in FF60):\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1173851\n  if (window.DataChannel && !window.RTCDataChannel) {\n    window.RTCDataChannel = window.DataChannel;\n  }\n}\n\nexport function shimAddTransceiver(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origAddTransceiver = window.RTCPeerConnection.prototype.addTransceiver;\n  if (origAddTransceiver) {\n    window.RTCPeerConnection.prototype.addTransceiver =\n      function addTransceiver() {\n        this.setParametersPromises = [];\n        const initParameters = arguments[1];\n        const shouldPerformCheck = initParameters &&\n                                  'sendEncodings' in initParameters;\n        if (shouldPerformCheck) {\n          // If sendEncodings params are provided, validate grammar\n          initParameters.sendEncodings.forEach((encodingParam) => {\n            if ('rid' in encodingParam) {\n              const ridRegex = /^[a-z0-9]{0,16}$/i;\n              if (!ridRegex.test(encodingParam.rid)) {\n                throw new TypeError('Invalid RID value provided.');\n              }\n            }\n            if ('scaleResolutionDownBy' in encodingParam) {\n              if (!(parseFloat(encodingParam.scaleResolutionDownBy) >= 1.0)) {\n                throw new RangeError('scale_resolution_down_by must be >= 1.0');\n              }\n            }\n            if ('maxFramerate' in encodingParam) {\n              if (!(parseFloat(encodingParam.maxFramerate) >= 0)) {\n                throw new RangeError('max_framerate must be >= 0.0');\n              }\n            }\n          });\n        }\n        const transceiver = origAddTransceiver.apply(this, arguments);\n        if (shouldPerformCheck) {\n          // Check if the init options were applied. If not we do this in an\n          // asynchronous way and save the promise reference in a global object.\n          // This is an ugly hack, but at the same time is way more robust than\n          // checking the sender parameters before and after the createOffer\n          // Also note that after the createoffer we are not 100% sure that\n          // the params were asynchronously applied so we might miss the\n          // opportunity to recreate offer.\n          const {sender} = transceiver;\n          const params = sender.getParameters();\n          if (!('encodings' in params) ||\n              // Avoid being fooled by patched getParameters() below.\n              (params.encodings.length === 1 &&\n               Object.keys(params.encodings[0]).length === 0)) {\n            params.encodings = initParameters.sendEncodings;\n            sender.sendEncodings = initParameters.sendEncodings;\n            this.setParametersPromises.push(sender.setParameters(params)\n              .then(() => {\n                delete sender.sendEncodings;\n              }).catch(() => {\n                delete sender.sendEncodings;\n              })\n            );\n          }\n        }\n        return transceiver;\n      };\n  }\n}\n\nexport function shimGetParameters(window) {\n  if (!(typeof window === 'object' && window.RTCRtpSender)) {\n    return;\n  }\n  const origGetParameters = window.RTCRtpSender.prototype.getParameters;\n  if (origGetParameters) {\n    window.RTCRtpSender.prototype.getParameters =\n      function getParameters() {\n        const params = origGetParameters.apply(this, arguments);\n        if (!('encodings' in params)) {\n          params.encodings = [].concat(this.sendEncodings || [{}]);\n        }\n        return params;\n      };\n  }\n}\n\nexport function shimCreateOffer(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origCreateOffer = window.RTCPeerConnection.prototype.createOffer;\n  window.RTCPeerConnection.prototype.createOffer = function createOffer() {\n    if (this.setParametersPromises && this.setParametersPromises.length) {\n      return Promise.all(this.setParametersPromises)\n      .then(() => {\n        return origCreateOffer.apply(this, arguments);\n      })\n      .finally(() => {\n        this.setParametersPromises = [];\n      });\n    }\n    return origCreateOffer.apply(this, arguments);\n  };\n}\n\nexport function shimCreateAnswer(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origCreateAnswer = window.RTCPeerConnection.prototype.createAnswer;\n  window.RTCPeerConnection.prototype.createAnswer = function createAnswer() {\n    if (this.setParametersPromises && this.setParametersPromises.length) {\n      return Promise.all(this.setParametersPromises)\n      .then(() => {\n        return origCreateAnswer.apply(this, arguments);\n      })\n      .finally(() => {\n        this.setParametersPromises = [];\n      });\n    }\n    return origCreateAnswer.apply(this, arguments);\n  };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n'use strict';\nimport * as utils from '../utils';\n\nexport function shimLocalStreamsAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n  if (!('getLocalStreams' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.getLocalStreams =\n      function getLocalStreams() {\n        if (!this._localStreams) {\n          this._localStreams = [];\n        }\n        return this._localStreams;\n      };\n  }\n  if (!('addStream' in window.RTCPeerConnection.prototype)) {\n    const _addTrack = window.RTCPeerConnection.prototype.addTrack;\n    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n      if (!this._localStreams) {\n        this._localStreams = [];\n      }\n      if (!this._localStreams.includes(stream)) {\n        this._localStreams.push(stream);\n      }\n      // Try to emulate Chrome's behaviour of adding in audio-video order.\n      // Safari orders by track id.\n      stream.getAudioTracks().forEach(track => _addTrack.call(this, track,\n        stream));\n      stream.getVideoTracks().forEach(track => _addTrack.call(this, track,\n        stream));\n    };\n\n    window.RTCPeerConnection.prototype.addTrack =\n      function addTrack(track, ...streams) {\n        if (streams) {\n          streams.forEach((stream) => {\n            if (!this._localStreams) {\n              this._localStreams = [stream];\n            } else if (!this._localStreams.includes(stream)) {\n              this._localStreams.push(stream);\n            }\n          });\n        }\n        return _addTrack.apply(this, arguments);\n      };\n  }\n  if (!('removeStream' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.removeStream =\n      function removeStream(stream) {\n        if (!this._localStreams) {\n          this._localStreams = [];\n        }\n        const index = this._localStreams.indexOf(stream);\n        if (index === -1) {\n          return;\n        }\n        this._localStreams.splice(index, 1);\n        const tracks = stream.getTracks();\n        this.getSenders().forEach(sender => {\n          if (tracks.includes(sender.track)) {\n            this.removeTrack(sender);\n          }\n        });\n      };\n  }\n}\n\nexport function shimRemoteStreamsAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n  if (!('getRemoteStreams' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.getRemoteStreams =\n      function getRemoteStreams() {\n        return this._remoteStreams ? this._remoteStreams : [];\n      };\n  }\n  if (!('onaddstream' in window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'onaddstream', {\n      get() {\n        return this._onaddstream;\n      },\n      set(f) {\n        if (this._onaddstream) {\n          this.removeEventListener('addstream', this._onaddstream);\n          this.removeEventListener('track', this._onaddstreampoly);\n        }\n        this.addEventListener('addstream', this._onaddstream = f);\n        this.addEventListener('track', this._onaddstreampoly = (e) => {\n          e.streams.forEach(stream => {\n            if (!this._remoteStreams) {\n              this._remoteStreams = [];\n            }\n            if (this._remoteStreams.includes(stream)) {\n              return;\n            }\n            this._remoteStreams.push(stream);\n            const event = new Event('addstream');\n            event.stream = stream;\n            this.dispatchEvent(event);\n          });\n        });\n      }\n    });\n    const origSetRemoteDescription =\n      window.RTCPeerConnection.prototype.setRemoteDescription;\n    window.RTCPeerConnection.prototype.setRemoteDescription =\n      function setRemoteDescription() {\n        const pc = this;\n        if (!this._onaddstreampoly) {\n          this.addEventListener('track', this._onaddstreampoly = function(e) {\n            e.streams.forEach(stream => {\n              if (!pc._remoteStreams) {\n                pc._remoteStreams = [];\n              }\n              if (pc._remoteStreams.indexOf(stream) >= 0) {\n                return;\n              }\n              pc._remoteStreams.push(stream);\n              const event = new Event('addstream');\n              event.stream = stream;\n              pc.dispatchEvent(event);\n            });\n          });\n        }\n        return origSetRemoteDescription.apply(pc, arguments);\n      };\n  }\n}\n\nexport function shimCallbacksAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n  const prototype = window.RTCPeerConnection.prototype;\n  const origCreateOffer = prototype.createOffer;\n  const origCreateAnswer = prototype.createAnswer;\n  const setLocalDescription = prototype.setLocalDescription;\n  const setRemoteDescription = prototype.setRemoteDescription;\n  const addIceCandidate = prototype.addIceCandidate;\n\n  prototype.createOffer =\n    function createOffer(successCallback, failureCallback) {\n      const options = (arguments.length >= 2) ? arguments[2] : arguments[0];\n      const promise = origCreateOffer.apply(this, [options]);\n      if (!failureCallback) {\n        return promise;\n      }\n      promise.then(successCallback, failureCallback);\n      return Promise.resolve();\n    };\n\n  prototype.createAnswer =\n    function createAnswer(successCallback, failureCallback) {\n      const options = (arguments.length >= 2) ? arguments[2] : arguments[0];\n      const promise = origCreateAnswer.apply(this, [options]);\n      if (!failureCallback) {\n        return promise;\n      }\n      promise.then(successCallback, failureCallback);\n      return Promise.resolve();\n    };\n\n  let withCallback = function(description, successCallback, failureCallback) {\n    const promise = setLocalDescription.apply(this, [description]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.setLocalDescription = withCallback;\n\n  withCallback = function(description, successCallback, failureCallback) {\n    const promise = setRemoteDescription.apply(this, [description]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.setRemoteDescription = withCallback;\n\n  withCallback = function(candidate, successCallback, failureCallback) {\n    const promise = addIceCandidate.apply(this, [candidate]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.addIceCandidate = withCallback;\n}\n\nexport function shimGetUserMedia(window) {\n  const navigator = window && window.navigator;\n\n  if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n    // shim not needed in Safari 12.1\n    const mediaDevices = navigator.mediaDevices;\n    const _getUserMedia = mediaDevices.getUserMedia.bind(mediaDevices);\n    navigator.mediaDevices.getUserMedia = (constraints) => {\n      return _getUserMedia(shimConstraints(constraints));\n    };\n  }\n\n  if (!navigator.getUserMedia && navigator.mediaDevices &&\n    navigator.mediaDevices.getUserMedia) {\n    navigator.getUserMedia = function getUserMedia(constraints, cb, errcb) {\n      navigator.mediaDevices.getUserMedia(constraints)\n      .then(cb, errcb);\n    }.bind(navigator);\n  }\n}\n\nexport function shimConstraints(constraints) {\n  if (constraints && constraints.video !== undefined) {\n    return Object.assign({},\n      constraints,\n      {video: utils.compactObject(constraints.video)}\n    );\n  }\n\n  return constraints;\n}\n\nexport function shimRTCIceServerUrls(window) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  // migrate from non-spec RTCIceServer.url to RTCIceServer.urls\n  const OrigPeerConnection = window.RTCPeerConnection;\n  window.RTCPeerConnection =\n    function RTCPeerConnection(pcConfig, pcConstraints) {\n      if (pcConfig && pcConfig.iceServers) {\n        const newIceServers = [];\n        for (let i = 0; i < pcConfig.iceServers.length; i++) {\n          let server = pcConfig.iceServers[i];\n          if (!server.hasOwnProperty('urls') &&\n              server.hasOwnProperty('url')) {\n            utils.deprecated('RTCIceServer.url', 'RTCIceServer.urls');\n            server = JSON.parse(JSON.stringify(server));\n            server.urls = server.url;\n            delete server.url;\n            newIceServers.push(server);\n          } else {\n            newIceServers.push(pcConfig.iceServers[i]);\n          }\n        }\n        pcConfig.iceServers = newIceServers;\n      }\n      return new OrigPeerConnection(pcConfig, pcConstraints);\n    };\n  window.RTCPeerConnection.prototype = OrigPeerConnection.prototype;\n  // wrap static methods. Currently just generateCertificate.\n  if ('generateCertificate' in OrigPeerConnection) {\n    Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {\n      get() {\n        return OrigPeerConnection.generateCertificate;\n      }\n    });\n  }\n}\n\nexport function shimTrackEventTransceiver(window) {\n  // Add event.transceiver member over deprecated event.receiver\n  if (typeof window === 'object' && window.RTCTrackEvent &&\n      'receiver' in window.RTCTrackEvent.prototype &&\n      !('transceiver' in window.RTCTrackEvent.prototype)) {\n    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {\n      get() {\n        return {receiver: this.receiver};\n      }\n    });\n  }\n}\n\nexport function shimCreateOfferLegacy(window) {\n  const origCreateOffer = window.RTCPeerConnection.prototype.createOffer;\n  window.RTCPeerConnection.prototype.createOffer =\n    function createOffer(offerOptions) {\n      if (offerOptions) {\n        if (typeof offerOptions.offerToReceiveAudio !== 'undefined') {\n          // support bit values\n          offerOptions.offerToReceiveAudio =\n            !!offerOptions.offerToReceiveAudio;\n        }\n        const audioTransceiver = this.getTransceivers().find(transceiver =>\n          transceiver.receiver.track.kind === 'audio');\n        if (offerOptions.offerToReceiveAudio === false && audioTransceiver) {\n          if (audioTransceiver.direction === 'sendrecv') {\n            if (audioTransceiver.setDirection) {\n              audioTransceiver.setDirection('sendonly');\n            } else {\n              audioTransceiver.direction = 'sendonly';\n            }\n          } else if (audioTransceiver.direction === 'recvonly') {\n            if (audioTransceiver.setDirection) {\n              audioTransceiver.setDirection('inactive');\n            } else {\n              audioTransceiver.direction = 'inactive';\n            }\n          }\n        } else if (offerOptions.offerToReceiveAudio === true &&\n            !audioTransceiver) {\n          this.addTransceiver('audio');\n        }\n\n        if (typeof offerOptions.offerToReceiveVideo !== 'undefined') {\n          // support bit values\n          offerOptions.offerToReceiveVideo =\n            !!offerOptions.offerToReceiveVideo;\n        }\n        const videoTransceiver = this.getTransceivers().find(transceiver =>\n          transceiver.receiver.track.kind === 'video');\n        if (offerOptions.offerToReceiveVideo === false && videoTransceiver) {\n          if (videoTransceiver.direction === 'sendrecv') {\n            if (videoTransceiver.setDirection) {\n              videoTransceiver.setDirection('sendonly');\n            } else {\n              videoTransceiver.direction = 'sendonly';\n            }\n          } else if (videoTransceiver.direction === 'recvonly') {\n            if (videoTransceiver.setDirection) {\n              videoTransceiver.setDirection('inactive');\n            } else {\n              videoTransceiver.direction = 'inactive';\n            }\n          }\n        } else if (offerOptions.offerToReceiveVideo === true &&\n            !videoTransceiver) {\n          this.addTransceiver('video');\n        }\n      }\n      return origCreateOffer.apply(this, arguments);\n    };\n}\n\nexport function shimAudioContext(window) {\n  if (typeof window !== 'object' || window.AudioContext) {\n    return;\n  }\n  window.AudioContext = window.webkitAudioContext;\n}\n","/*\n *  Copyright (c) 2017 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport SDPUtils from 'sdp';\nimport * as utils from './utils';\n\nexport function shimRTCIceCandidate(window) {\n  // foundation is arbitrarily chosen as an indicator for full support for\n  // https://w3c.github.io/webrtc-pc/#rtcicecandidate-interface\n  if (!window.RTCIceCandidate || (window.RTCIceCandidate && 'foundation' in\n      window.RTCIceCandidate.prototype)) {\n    return;\n  }\n\n  const NativeRTCIceCandidate = window.RTCIceCandidate;\n  window.RTCIceCandidate = function RTCIceCandidate(args) {\n    // Remove the a= which shouldn't be part of the candidate string.\n    if (typeof args === 'object' && args.candidate &&\n        args.candidate.indexOf('a=') === 0) {\n      args = JSON.parse(JSON.stringify(args));\n      args.candidate = args.candidate.substr(2);\n    }\n\n    if (args.candidate && args.candidate.length) {\n      // Augment the native candidate with the parsed fields.\n      const nativeCandidate = new NativeRTCIceCandidate(args);\n      const parsedCandidate = SDPUtils.parseCandidate(args.candidate);\n      const augmentedCandidate = Object.assign(nativeCandidate,\n          parsedCandidate);\n\n      // Add a serializer that does not serialize the extra attributes.\n      augmentedCandidate.toJSON = function toJSON() {\n        return {\n          candidate: augmentedCandidate.candidate,\n          sdpMid: augmentedCandidate.sdpMid,\n          sdpMLineIndex: augmentedCandidate.sdpMLineIndex,\n          usernameFragment: augmentedCandidate.usernameFragment,\n        };\n      };\n      return augmentedCandidate;\n    }\n    return new NativeRTCIceCandidate(args);\n  };\n  window.RTCIceCandidate.prototype = NativeRTCIceCandidate.prototype;\n\n  // Hook up the augmented candidate in onicecandidate and\n  // addEventListener('icecandidate', ...)\n  utils.wrapPeerConnectionEvent(window, 'icecandidate', e => {\n    if (e.candidate) {\n      Object.defineProperty(e, 'candidate', {\n        value: new window.RTCIceCandidate(e.candidate),\n        writable: 'false'\n      });\n    }\n    return e;\n  });\n}\n\nexport function shimMaxMessageSize(window, browserDetails) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n\n  if (!('sctp' in window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'sctp', {\n      get() {\n        return typeof this._sctp === 'undefined' ? null : this._sctp;\n      }\n    });\n  }\n\n  const sctpInDescription = function(description) {\n    if (!description || !description.sdp) {\n      return false;\n    }\n    const sections = SDPUtils.splitSections(description.sdp);\n    sections.shift();\n    return sections.some(mediaSection => {\n      const mLine = SDPUtils.parseMLine(mediaSection);\n      return mLine && mLine.kind === 'application'\n          && mLine.protocol.indexOf('SCTP') !== -1;\n    });\n  };\n\n  const getRemoteFirefoxVersion = function(description) {\n    // TODO: Is there a better solution for detecting Firefox?\n    const match = description.sdp.match(/mozilla...THIS_IS_SDPARTA-(\\d+)/);\n    if (match === null || match.length < 2) {\n      return -1;\n    }\n    const version = parseInt(match[1], 10);\n    // Test for NaN (yes, this is ugly)\n    return version !== version ? -1 : version;\n  };\n\n  const getCanSendMaxMessageSize = function(remoteIsFirefox) {\n    // Every implementation we know can send at least 64 KiB.\n    // Note: Although Chrome is technically able to send up to 256 KiB, the\n    //       data does not reach the other peer reliably.\n    //       See: https://bugs.chromium.org/p/webrtc/issues/detail?id=8419\n    let canSendMaxMessageSize = 65536;\n    if (browserDetails.browser === 'firefox') {\n      if (browserDetails.version < 57) {\n        if (remoteIsFirefox === -1) {\n          // FF < 57 will send in 16 KiB chunks using the deprecated PPID\n          // fragmentation.\n          canSendMaxMessageSize = 16384;\n        } else {\n          // However, other FF (and RAWRTC) can reassemble PPID-fragmented\n          // messages. Thus, supporting ~2 GiB when sending.\n          canSendMaxMessageSize = 2147483637;\n        }\n      } else if (browserDetails.version < 60) {\n        // Currently, all FF >= 57 will reset the remote maximum message size\n        // to the default value when a data channel is created at a later\n        // stage. :(\n        // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831\n        canSendMaxMessageSize =\n          browserDetails.version === 57 ? 65535 : 65536;\n      } else {\n        // FF >= 60 supports sending ~2 GiB\n        canSendMaxMessageSize = 2147483637;\n      }\n    }\n    return canSendMaxMessageSize;\n  };\n\n  const getMaxMessageSize = function(description, remoteIsFirefox) {\n    // Note: 65536 bytes is the default value from the SDP spec. Also,\n    //       every implementation we know supports receiving 65536 bytes.\n    let maxMessageSize = 65536;\n\n    // FF 57 has a slightly incorrect default remote max message size, so\n    // we need to adjust it here to avoid a failure when sending.\n    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1425697\n    if (browserDetails.browser === 'firefox'\n         && browserDetails.version === 57) {\n      maxMessageSize = 65535;\n    }\n\n    const match = SDPUtils.matchPrefix(description.sdp,\n      'a=max-message-size:');\n    if (match.length > 0) {\n      maxMessageSize = parseInt(match[0].substr(19), 10);\n    } else if (browserDetails.browser === 'firefox' &&\n                remoteIsFirefox !== -1) {\n      // If the maximum message size is not present in the remote SDP and\n      // both local and remote are Firefox, the remote peer can receive\n      // ~2 GiB.\n      maxMessageSize = 2147483637;\n    }\n    return maxMessageSize;\n  };\n\n  const origSetRemoteDescription =\n      window.RTCPeerConnection.prototype.setRemoteDescription;\n  window.RTCPeerConnection.prototype.setRemoteDescription =\n    function setRemoteDescription() {\n      this._sctp = null;\n      // Chrome decided to not expose .sctp in plan-b mode.\n      // As usual, adapter.js has to do an 'ugly worakaround'\n      // to cover up the mess.\n      if (browserDetails.browser === 'chrome' && browserDetails.version >= 76) {\n        const {sdpSemantics} = this.getConfiguration();\n        if (sdpSemantics === 'plan-b') {\n          Object.defineProperty(this, 'sctp', {\n            get() {\n              return typeof this._sctp === 'undefined' ? null : this._sctp;\n            },\n            enumerable: true,\n            configurable: true,\n          });\n        }\n      }\n\n      if (sctpInDescription(arguments[0])) {\n        // Check if the remote is FF.\n        const isFirefox = getRemoteFirefoxVersion(arguments[0]);\n\n        // Get the maximum message size the local peer is capable of sending\n        const canSendMMS = getCanSendMaxMessageSize(isFirefox);\n\n        // Get the maximum message size of the remote peer.\n        const remoteMMS = getMaxMessageSize(arguments[0], isFirefox);\n\n        // Determine final maximum message size\n        let maxMessageSize;\n        if (canSendMMS === 0 && remoteMMS === 0) {\n          maxMessageSize = Number.POSITIVE_INFINITY;\n        } else if (canSendMMS === 0 || remoteMMS === 0) {\n          maxMessageSize = Math.max(canSendMMS, remoteMMS);\n        } else {\n          maxMessageSize = Math.min(canSendMMS, remoteMMS);\n        }\n\n        // Create a dummy RTCSctpTransport object and the 'maxMessageSize'\n        // attribute.\n        const sctp = {};\n        Object.defineProperty(sctp, 'maxMessageSize', {\n          get() {\n            return maxMessageSize;\n          }\n        });\n        this._sctp = sctp;\n      }\n\n      return origSetRemoteDescription.apply(this, arguments);\n    };\n}\n\nexport function shimSendThrowTypeError(window) {\n  if (!(window.RTCPeerConnection &&\n      'createDataChannel' in window.RTCPeerConnection.prototype)) {\n    return;\n  }\n\n  // Note: Although Firefox >= 57 has a native implementation, the maximum\n  //       message size can be reset for all data channels at a later stage.\n  //       See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831\n\n  function wrapDcSend(dc, pc) {\n    const origDataChannelSend = dc.send;\n    dc.send = function send() {\n      const data = arguments[0];\n      const length = data.length || data.size || data.byteLength;\n      if (dc.readyState === 'open' &&\n          pc.sctp && length > pc.sctp.maxMessageSize) {\n        throw new TypeError('Message too large (can send a maximum of ' +\n          pc.sctp.maxMessageSize + ' bytes)');\n      }\n      return origDataChannelSend.apply(dc, arguments);\n    };\n  }\n  const origCreateDataChannel =\n    window.RTCPeerConnection.prototype.createDataChannel;\n  window.RTCPeerConnection.prototype.createDataChannel =\n    function createDataChannel() {\n      const dataChannel = origCreateDataChannel.apply(this, arguments);\n      wrapDcSend(dataChannel, this);\n      return dataChannel;\n    };\n  utils.wrapPeerConnectionEvent(window, 'datachannel', e => {\n    wrapDcSend(e.channel, e.target);\n    return e;\n  });\n}\n\n\n/* shims RTCConnectionState by pretending it is the same as iceConnectionState.\n * See https://bugs.chromium.org/p/webrtc/issues/detail?id=6145#c12\n * for why this is a valid hack in Chrome. In Firefox it is slightly incorrect\n * since DTLS failures would be hidden. See\n * https://bugzilla.mozilla.org/show_bug.cgi?id=1265827\n * for the Firefox tracking bug.\n */\nexport function shimConnectionState(window) {\n  if (!window.RTCPeerConnection ||\n      'connectionState' in window.RTCPeerConnection.prototype) {\n    return;\n  }\n  const proto = window.RTCPeerConnection.prototype;\n  Object.defineProperty(proto, 'connectionState', {\n    get() {\n      return {\n        completed: 'connected',\n        checking: 'connecting'\n      }[this.iceConnectionState] || this.iceConnectionState;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(proto, 'onconnectionstatechange', {\n    get() {\n      return this._onconnectionstatechange || null;\n    },\n    set(cb) {\n      if (this._onconnectionstatechange) {\n        this.removeEventListener('connectionstatechange',\n            this._onconnectionstatechange);\n        delete this._onconnectionstatechange;\n      }\n      if (cb) {\n        this.addEventListener('connectionstatechange',\n            this._onconnectionstatechange = cb);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  ['setLocalDescription', 'setRemoteDescription'].forEach((method) => {\n    const origMethod = proto[method];\n    proto[method] = function() {\n      if (!this._connectionstatechangepoly) {\n        this._connectionstatechangepoly = e => {\n          const pc = e.target;\n          if (pc._lastConnectionState !== pc.connectionState) {\n            pc._lastConnectionState = pc.connectionState;\n            const newEvent = new Event('connectionstatechange', e);\n            pc.dispatchEvent(newEvent);\n          }\n          return e;\n        };\n        this.addEventListener('iceconnectionstatechange',\n          this._connectionstatechangepoly);\n      }\n      return origMethod.apply(this, arguments);\n    };\n  });\n}\n\nexport function removeExtmapAllowMixed(window, browserDetails) {\n  /* remove a=extmap-allow-mixed for webrtc.org < M71 */\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  if (browserDetails.browser === 'chrome' && browserDetails.version >= 71) {\n    return;\n  }\n  if (browserDetails.browser === 'safari' && browserDetails.version >= 605) {\n    return;\n  }\n  const nativeSRD = window.RTCPeerConnection.prototype.setRemoteDescription;\n  window.RTCPeerConnection.prototype.setRemoteDescription =\n  function setRemoteDescription(desc) {\n    if (desc && desc.sdp && desc.sdp.indexOf('\\na=extmap-allow-mixed') !== -1) {\n      const sdp = desc.sdp.split('\\n').filter((line) => {\n        return line.trim() !== 'a=extmap-allow-mixed';\n      }).join('\\n');\n      // Safari enforces read-only-ness of RTCSessionDescription fields.\n      if (window.RTCSessionDescription &&\n          desc instanceof window.RTCSessionDescription) {\n        arguments[0] = new window.RTCSessionDescription({\n          type: desc.type,\n          sdp,\n        });\n      } else {\n        desc.sdp = sdp;\n      }\n    }\n    return nativeSRD.apply(this, arguments);\n  };\n}\n\nexport function shimAddIceCandidateNullOrEmpty(window, browserDetails) {\n  // Support for addIceCandidate(null or undefined)\n  // as well as addIceCandidate({candidate: \"\", ...})\n  // https://bugs.chromium.org/p/chromium/issues/detail?id=978582\n  // Note: must be called before other polyfills which change the signature.\n  if (!(window.RTCPeerConnection && window.RTCPeerConnection.prototype)) {\n    return;\n  }\n  const nativeAddIceCandidate =\n      window.RTCPeerConnection.prototype.addIceCandidate;\n  if (!nativeAddIceCandidate || nativeAddIceCandidate.length === 0) {\n    return;\n  }\n  window.RTCPeerConnection.prototype.addIceCandidate =\n    function addIceCandidate() {\n      if (!arguments[0]) {\n        if (arguments[1]) {\n          arguments[1].apply(null);\n        }\n        return Promise.resolve();\n      }\n      // Firefox 68+ emits and processes {candidate: \"\", ...}, ignore\n      // in older versions.\n      // Native support for ignoring exists for Chrome M77+.\n      // Safari ignores as well, exact version unknown but works in the same\n      // version that also ignores addIceCandidate(null).\n      if (((browserDetails.browser === 'chrome' && browserDetails.version < 78)\n           || (browserDetails.browser === 'firefox'\n               && browserDetails.version < 68)\n           || (browserDetails.browser === 'safari'))\n          && arguments[0] && arguments[0].candidate === '') {\n        return Promise.resolve();\n      }\n      return nativeAddIceCandidate.apply(this, arguments);\n    };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n\n'use strict';\n\nimport {adapterFactory} from './adapter_factory.js';\n\nconst adapter =\n  adapterFactory({window: typeof window === 'undefined' ? undefined : window});\nexport default adapter;\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\nimport * as utils from './utils';\n\n  // Browser shims.\nimport * as chromeShim from './chrome/chrome_shim';\nimport * as firefoxShim from './firefox/firefox_shim';\nimport * as safariShim from './safari/safari_shim';\nimport * as commonShim from './common_shim';\nimport * as sdp from 'sdp';\n\n// Shimming starts here.\nexport function adapterFactory({window} = {}, options = {\n  shimChrome: true,\n  shimFirefox: true,\n  shimSafari: true,\n}) {\n  // Utils.\n  const logging = utils.log;\n  const browserDetails = utils.detectBrowser(window);\n\n  const adapter = {\n    browserDetails,\n    commonShim,\n    extractVersion: utils.extractVersion,\n    disableLog: utils.disableLog,\n    disableWarnings: utils.disableWarnings,\n    // Expose sdp as a convenience. For production apps include directly.\n    sdp,\n  };\n\n  // Shim browser if found.\n  switch (browserDetails.browser) {\n    case 'chrome':\n      if (!chromeShim || !chromeShim.shimPeerConnection ||\n          !options.shimChrome) {\n        logging('Chrome shim is not included in this adapter release.');\n        return adapter;\n      }\n      if (browserDetails.version === null) {\n        logging('Chrome shim can not determine version, not shimming.');\n        return adapter;\n      }\n      logging('adapter.js shimming chrome.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = chromeShim;\n\n      // Must be called before shimPeerConnection.\n      commonShim.shimAddIceCandidateNullOrEmpty(window, browserDetails);\n\n      chromeShim.shimGetUserMedia(window, browserDetails);\n      chromeShim.shimMediaStream(window, browserDetails);\n      chromeShim.shimPeerConnection(window, browserDetails);\n      chromeShim.shimOnTrack(window, browserDetails);\n      chromeShim.shimAddTrackRemoveTrack(window, browserDetails);\n      chromeShim.shimGetSendersWithDtmf(window, browserDetails);\n      chromeShim.shimGetStats(window, browserDetails);\n      chromeShim.shimSenderReceiverGetStats(window, browserDetails);\n      chromeShim.fixNegotiationNeeded(window, browserDetails);\n\n      commonShim.shimRTCIceCandidate(window, browserDetails);\n      commonShim.shimConnectionState(window, browserDetails);\n      commonShim.shimMaxMessageSize(window, browserDetails);\n      commonShim.shimSendThrowTypeError(window, browserDetails);\n      commonShim.removeExtmapAllowMixed(window, browserDetails);\n      break;\n    case 'firefox':\n      if (!firefoxShim || !firefoxShim.shimPeerConnection ||\n          !options.shimFirefox) {\n        logging('Firefox shim is not included in this adapter release.');\n        return adapter;\n      }\n      logging('adapter.js shimming firefox.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = firefoxShim;\n\n      // Must be called before shimPeerConnection.\n      commonShim.shimAddIceCandidateNullOrEmpty(window, browserDetails);\n\n      firefoxShim.shimGetUserMedia(window, browserDetails);\n      firefoxShim.shimPeerConnection(window, browserDetails);\n      firefoxShim.shimOnTrack(window, browserDetails);\n      firefoxShim.shimRemoveStream(window, browserDetails);\n      firefoxShim.shimSenderGetStats(window, browserDetails);\n      firefoxShim.shimReceiverGetStats(window, browserDetails);\n      firefoxShim.shimRTCDataChannel(window, browserDetails);\n      firefoxShim.shimAddTransceiver(window, browserDetails);\n      firefoxShim.shimGetParameters(window, browserDetails);\n      firefoxShim.shimCreateOffer(window, browserDetails);\n      firefoxShim.shimCreateAnswer(window, browserDetails);\n\n      commonShim.shimRTCIceCandidate(window, browserDetails);\n      commonShim.shimConnectionState(window, browserDetails);\n      commonShim.shimMaxMessageSize(window, browserDetails);\n      commonShim.shimSendThrowTypeError(window, browserDetails);\n      break;\n    case 'safari':\n      if (!safariShim || !options.shimSafari) {\n        logging('Safari shim is not included in this adapter release.');\n        return adapter;\n      }\n      logging('adapter.js shimming safari.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = safariShim;\n\n      // Must be called before shimCallbackAPI.\n      commonShim.shimAddIceCandidateNullOrEmpty(window, browserDetails);\n\n      safariShim.shimRTCIceServerUrls(window, browserDetails);\n      safariShim.shimCreateOfferLegacy(window, browserDetails);\n      safariShim.shimCallbacksAPI(window, browserDetails);\n      safariShim.shimLocalStreamsAPI(window, browserDetails);\n      safariShim.shimRemoteStreamsAPI(window, browserDetails);\n      safariShim.shimTrackEventTransceiver(window, browserDetails);\n      safariShim.shimGetUserMedia(window, browserDetails);\n      safariShim.shimAudioContext(window, browserDetails);\n\n      commonShim.shimRTCIceCandidate(window, browserDetails);\n      commonShim.shimMaxMessageSize(window, browserDetails);\n      commonShim.shimSendThrowTypeError(window, browserDetails);\n      commonShim.removeExtmapAllowMixed(window, browserDetails);\n      break;\n    default:\n      logging('Unsupported browser!');\n      break;\n  }\n\n  return adapter;\n}\n","/**\n * Enumeration of the video types that are signaled to the bridge\n * @type {{CAMERA: string, DESKTOP: string, DESKTOP_HIGH_FPS: string, NONE: string}}\n */\nconst BridgeVideoType = {\n    /**\n     * The camera video type.\n     */\n    CAMERA: 'camera',\n\n    /**\n     * The low fps desktop video type.\n     */\n    DESKTOP: 'desktop',\n\n    /**\n     * The high fps desktop video type.\n     */\n    DESKTOP_HIGH_FPS: 'desktop_high_fps',\n\n    /**\n     * Video type when no local source is present.\n     */\n    NONE: 'none'\n};\n\nmodule.exports = BridgeVideoType;\n","/**\n * The possible camera facing modes. For now support only 'user' and\n * 'environment' because 'left' and 'right' are not used anywhere in our\n * projects at the time of this writing. For more information please refer to\n * https://w3c.github.io/mediacapture-main/getusermedia.html\n * #def-constraint-facingMode.\n *\n * @enum {string}\n */\nconst CameraFacingMode = {\n    /**\n     * The mode which specifies the environment-facing camera.\n     */\n    ENVIRONMENT: 'environment',\n\n    /**\n     * The mode which specifies the user-facing camera.\n     */\n    USER: 'user'\n};\n\nmodule.exports = CameraFacingMode;\n","/**\n * Enumeration of the codec mime types\n * @type {{H264: string, OPUS: string, ULPFEC: string, VP8: string, VP9: string}}\n */\nconst CodecMimeType = {\n    /**\n     * The h264 codec mime type.\n     */\n    H264: 'h264',\n\n    /**\n     * The opus codec mime type.\n     */\n    OPUS: 'opus',\n\n    /**\n     * The ulpfec codec mime type.\n     */\n    ULPFEC: 'ulpfec',\n\n    /**\n     * The vp8 codec mime type.\n     */\n    VP8: 'vp8',\n\n    /**\n     * The vp9 codec mime type.\n     */\n    VP9: 'vp9'\n\n};\n\nmodule.exports = CodecMimeType;\n","export enum RTCEvents {\n    /**\n     * Indicates error while create answer call.\n     */\n    CREATE_ANSWER_FAILED = 'rtc.create_answer_failed',\n\n    /**\n     * Indicates error while create offer call.\n     */\n    CREATE_OFFER_FAILED = 'rtc.create_offer_failed',\n    DATA_CHANNEL_OPEN = 'rtc.data_channel_open',\n    ENDPOINT_CONN_STATUS_CHANGED = 'rtc.endpoint_conn_status_changed',\n    DOMINANT_SPEAKER_CHANGED = 'rtc.dominant_speaker_changed',\n    LASTN_ENDPOINT_CHANGED = 'rtc.lastn_endpoint_changed',\n    FORWARDED_SOURCES_CHANGED = 'rtc.forwarded_sources_changed',\n\n    /**\n     * Event emitted when the user granted/blocked a permission for the camera / mic.\n     * Used to keep track of the granted permissions on browsers which don't\n     * support the Permissions API.\n     */\n    PERMISSIONS_CHANGED = 'rtc.permissions_changed',\n\n    SENDER_VIDEO_CONSTRAINTS_CHANGED = 'rtc.sender_video_constraints_changed',\n\n    /**\n     * Event emitted when {@link RTC.setLastN} method is called to update with\n     * the new value set.\n     * The first argument is the value passed to {@link RTC.setLastN}.\n     */\n    LASTN_VALUE_CHANGED = 'rtc.lastn_value_changed',\n\n    /**\n     * Event emitted when ssrc for a local track is extracted and stored\n     * in {@link TraceablePeerConnection}.\n     * @param {JitsiLocalTrack} track which ssrc was updated\n     * @param {string} ssrc that was stored\n     */\n    LOCAL_TRACK_SSRC_UPDATED = 'rtc.local_track_ssrc_updated',\n\n    /**\n     * The max enabled resolution of a local video track was changed.\n     */\n    LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED = 'rtc.local_track_max_enabled_resolution_changed',\n\n    TRACK_ATTACHED = 'rtc.track_attached',\n\n    /**\n     * Event fired when we remote track is added to the conference.\n     * 1st event argument is the added <tt>JitsiRemoteTrack</tt> instance.\n     **/\n    REMOTE_TRACK_ADDED = 'rtc.remote_track_added',\n\n    // FIXME get rid of this event in favour of NO_DATA_FROM_SOURCE event\n    // (currently implemented for local tracks only)\n    REMOTE_TRACK_MUTE = 'rtc.remote_track_mute',\n\n    /**\n     * Indicates that the remote track has been removed from the conference.\n     * 1st event argument is the removed {@link JitsiRemoteTrack} instance.\n     */\n    REMOTE_TRACK_REMOVED = 'rtc.remote_track_removed',\n\n    // FIXME get rid of this event in favour of NO_DATA_FROM_SOURCE event\n    // (currently implemented for local tracks only)\n    REMOTE_TRACK_UNMUTE = 'rtc.remote_track_unmute',\n\n    /**\n     * Indicates error while set local description.\n     */\n    SET_LOCAL_DESCRIPTION_FAILED = 'rtc.set_local_description_failed',\n\n    /**\n     * Indicates error while set remote description.\n     */\n    SET_REMOTE_DESCRIPTION_FAILED = 'rtc.set_remote_description_failed',\n    AUDIO_OUTPUT_DEVICE_CHANGED = 'rtc.audio_output_device_changed',\n    DEVICE_LIST_CHANGED = 'rtc.device_list_changed',\n\n    /**\n     * Indicates that the list with available devices will change.\n     */\n    DEVICE_LIST_WILL_CHANGE = 'rtc.device_list_will_change',\n    DEVICE_LIST_AVAILABLE = 'rtc.device_list_available',\n\n    /**\n     * Indicates that a message from another participant is received on\n     * data channel.\n     */\n    ENDPOINT_MESSAGE_RECEIVED = 'rtc.endpoint_message_received',\n\n    /**\n     * Indicates that the remote endpoint stats have been received on data channel.\n     */\n    ENDPOINT_STATS_RECEIVED = 'rtc.endpoint_stats_received',\n\n    /**\n     * Designates an event indicating that the local ICE username fragment of\n     * the jingle session has changed.\n     * The first argument of the vent is <tt>TraceablePeerConnection</tt> which\n     * is the source of the event.\n     * The second argument is the actual \"ufrag\" string.\n     */\n    LOCAL_UFRAG_CHANGED = 'rtc.local_ufrag_changed',\n\n    /**\n     * Designates an event indicating that the local ICE username fragment of\n     * the jingle session has changed.\n     * The first argument of the vent is <tt>TraceablePeerConnection</tt> which\n     * is the source of the event.\n     * The second argument is the actual \"ufrag\" string.\n     */\n    REMOTE_UFRAG_CHANGED = 'rtc.remote_ufrag_changed'\n};\n\nexport const CREATE_ANSWER_FAILED = RTCEvents.CREATE_ANSWER_FAILED;\nexport const CREATE_OFFER_FAILED = RTCEvents.CREATE_OFFER_FAILED;\nexport const DATA_CHANNEL_OPEN = RTCEvents.DATA_CHANNEL_OPEN;\nexport const ENDPOINT_CONN_STATUS_CHANGED = RTCEvents.ENDPOINT_CONN_STATUS_CHANGED;\nexport const DOMINANT_SPEAKER_CHANGED = RTCEvents.DOMINANT_SPEAKER_CHANGED;\nexport const LASTN_ENDPOINT_CHANGED = RTCEvents.LASTN_ENDPOINT_CHANGED;\nexport const FORWARDED_SOURCES_CHANGED = RTCEvents.FORWARDED_SOURCES_CHANGED;\nexport const PERMISSIONS_CHANGED = RTCEvents.PERMISSIONS_CHANGED;\nexport const SENDER_VIDEO_CONSTRAINTS_CHANGED = RTCEvents.SENDER_VIDEO_CONSTRAINTS_CHANGED;\nexport const LASTN_VALUE_CHANGED = RTCEvents.LASTN_VALUE_CHANGED;\nexport const LOCAL_TRACK_SSRC_UPDATED = RTCEvents.LOCAL_TRACK_SSRC_UPDATED;\nexport const LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED = RTCEvents.LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED;\nexport const TRACK_ATTACHED = RTCEvents.TRACK_ATTACHED;\nexport const REMOTE_TRACK_ADDED = RTCEvents.REMOTE_TRACK_ADDED;\nexport const REMOTE_TRACK_MUTE = RTCEvents.REMOTE_TRACK_MUTE;\nexport const REMOTE_TRACK_REMOVED = RTCEvents.REMOTE_TRACK_REMOVED;\nexport const REMOTE_TRACK_UNMUTE = RTCEvents.REMOTE_TRACK_UNMUTE;\nexport const SET_LOCAL_DESCRIPTION_FAILED = RTCEvents.SET_LOCAL_DESCRIPTION_FAILED;\nexport const SET_REMOTE_DESCRIPTION_FAILED = RTCEvents.SET_REMOTE_DESCRIPTION_FAILED;\nexport const AUDIO_OUTPUT_DEVICE_CHANGED = RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED;\nexport const DEVICE_LIST_CHANGED = RTCEvents.DEVICE_LIST_CHANGED;\nexport const DEVICE_LIST_WILL_CHANGE = RTCEvents.DEVICE_LIST_WILL_CHANGE;\nexport const DEVICE_LIST_AVAILABLE = RTCEvents.DEVICE_LIST_AVAILABLE;\nexport const ENDPOINT_MESSAGE_RECEIVED = RTCEvents.ENDPOINT_MESSAGE_RECEIVED;\nexport const ENDPOINT_STATS_RECEIVED = RTCEvents.ENDPOINT_STATS_RECEIVED;\nexport const LOCAL_UFRAG_CHANGED = RTCEvents.LOCAL_UFRAG_CHANGED;\nexport const REMOTE_UFRAG_CHANGED = RTCEvents.REMOTE_UFRAG_CHANGED;\n\n// TODO: this was a pre-ES6 module using module.exports = RTCEvents which doesn't translate well\n// it is used in a number of places and should be updated to use the named export\n\nexport default RTCEvents;","const Resolutions = {\n    '2160': {\n        width: 3840,\n        height: 2160\n    },\n    '4k': {\n        width: 3840,\n        height: 2160\n    },\n    '1080': {\n        width: 1920,\n        height: 1080\n    },\n    'fullhd': {\n        width: 1920,\n        height: 1080\n    },\n    '720': {\n        width: 1280,\n        height: 720\n    },\n    'hd': {\n        width: 1280,\n        height: 720\n    },\n    '540': {\n        width: 960,\n        height: 540\n    },\n    'qhd': {\n        width: 960,\n        height: 540\n    },\n    '480': {\n        width: 640,\n        height: 480\n    },\n    'vga': {\n        width: 640,\n        height: 480\n    },\n    '360': {\n        width: 640,\n        height: 360\n    },\n    '240': {\n        width: 320,\n        height: 240\n    },\n    '180': {\n        width: 320,\n        height: 180\n    }\n};\n\nmodule.exports = Resolutions;\n","/**\n * Enumeration of the video types\n */\nexport enum VideoType {\n    /**\n     * The camera video type.\n     */\n    CAMERA = 'camera',\n\n    /**\n     * The desktop video type.\n     */\n    DESKTOP = 'desktop'\n};\n","const AuthenticationEvents = {\n    /**\n     * Event callback arguments:\n     * function(authenticationEnabled, userIdentity)\n     * authenticationEnabled - indicates whether authentication has been enabled\n     *                         in this session\n     * userIdentity - if user has been logged in then it contains user name. If\n     *                contains 'null' or 'undefined' then user is not logged in.\n     */\n    IDENTITY_UPDATED: 'authentication.identity_updated'\n};\n\nmodule.exports = AuthenticationEvents;\n","export const LOCAL_JID = 'local'\n","export enum XMPPEvents {\n    /**\n     * Indicates error while adding ice candidate.\n     */\n    ADD_ICE_CANDIDATE_FAILED = 'xmpp.add_ice_candidate_failed',\n\n    // Designates an event indicating that the focus has asked us to mute our\n    // audio.\n    AUDIO_MUTED_BY_FOCUS = 'xmpp.audio_muted_by_focus',\n\n    // Designates an event indicating that the focus has asked us to disable our\n    // camera.\n    VIDEO_MUTED_BY_FOCUS = 'xmpp.video_muted_by_focus',\n    AUTHENTICATION_REQUIRED = 'xmpp.authentication_required',\n    BRIDGE_DOWN = 'xmpp.bridge_down',\n\n    /**\n     * Triggered when 'session-accept' is received from the responder.\n     */\n    CALL_ACCEPTED = 'xmpp.callaccepted.jingle',\n\n    // Designates an event indicating that an offer (e.g. Jingle\n    // session-initiate) was received.\n    CALL_INCOMING = 'xmpp.callincoming.jingle',\n\n    // Triggered when Jicofo kills our media session, this can happen while\n    // we're still in the MUC, when it decides to terminate the media session.\n    // For example when the session is idle for too long, because we're the only\n    // person in the conference room.\n    CALL_ENDED = 'xmpp.callended.jingle',\n    CHAT_ERROR_RECEIVED = 'xmpp.chat_error_received',\n    SETTINGS_ERROR_RECEIVED = 'xmpp.settings_error_received',\n\n    // The conference properties (as advertised by jicofo) have changed\n    CONFERENCE_PROPERTIES_CHANGED = 'xmpp.conference_properties_changed',\n\n    /**\n     * This event is triggered when the ICE connects for the first time.\n     */\n    CONNECTION_ESTABLISHED = 'xmpp.connection.connected',\n\n    // Designates an event indicating that the connection to the XMPP server\n    // failed.\n    CONNECTION_FAILED = 'xmpp.connection.failed',\n\n    // Designates an event indicating that the media (ICE) connection was\n    // interrupted. This should go to the RTC module.\n    CONNECTION_INTERRUPTED = 'xmpp.connection.interrupted',\n\n    // Designates an event indicating that the media (ICE) connection was\n    // restored. This should go to the RTC module.\n    CONNECTION_RESTORED = 'xmpp.connection.restored',\n\n    // Designates an event indicating that the media (ICE) connection failed.\n    // This should go to the RTC module.\n    CONNECTION_ICE_FAILED = 'xmpp.connection.ice.failed',\n\n    // Designates an event indicating that the call has been migrated to a different\n    // bridge and that the client needs to be restarted for a successful transition.\n    CONNECTION_RESTARTED = 'xmpp.connection.restart',\n\n    /**\n     * Designates an event indicating connection status changes.\n     */\n    CONNECTION_STATUS_CHANGED = 'xmpp.connection.status.changed',\n\n    // Designates an event indicating that the display name of a participant\n    // has changed.\n    DISPLAY_NAME_CHANGED = 'xmpp.display_name_changed',\n\n    /**\n     * Chat room instance have been added to Strophe.emuc plugin.\n     */\n    EMUC_ROOM_ADDED = 'xmpp.emuc_room_added',\n\n    /**\n     * Chat room instance have been removed from Strophe.emuc plugin.\n     */\n    EMUC_ROOM_REMOVED = 'xmpp.emuc_room_removed',\n    ETHERPAD = 'xmpp.etherpad',\n    FOCUS_DISCONNECTED = 'xmpp.focus_disconnected',\n    FOCUS_LEFT = 'xmpp.focus_left',\n    GRACEFUL_SHUTDOWN = 'xmpp.graceful_shutdown',\n\n    /**\n     * Event fired when 'transport-replace' Jingle message has been received,\n     * before the new offer is set on the PeerConnection.\n     */\n    ICE_RESTARTING = 'rtc.ice_restarting',\n\n    /**\n     * Event fired after the 'transport-replace' message has been processed\n     * and the new offer has been set successfully.\n     */\n    ICE_RESTART_SUCCESS = 'rtc.ice_restart_success',\n\n    /**\n     * Designates an event indicating that we were kicked from the XMPP MUC.\n     * @param {boolean} isSelfPresence - whether it is for local participant\n     * or another participant.\n     * @param {string} actorJid - the jid of the participant who was initiator\n     * of the kick.\n     * @param {?string} participantJid - when it is not a kick for local participant,\n     * this is the jid of the participant which was kicked.\n     */\n    KICKED = 'xmpp.kicked',\n\n    // Designates an event indicating that our role in the XMPP MUC has changed.\n    LOCAL_ROLE_CHANGED = 'xmpp.localrole_changed',\n\n    /**\n     * Event fired when the unique meeting id is set.\n     */\n    MEETING_ID_SET = 'xmpp.meeting_id_set',\n\n    // Designates an event indicating that an XMPP message in the MUC was\n    // received.\n    MESSAGE_RECEIVED = 'xmpp.message_received',\n\n    // Designates an event indicating that an invite XMPP message in the MUC was\n    // received.\n    INVITE_MESSAGE_RECEIVED = 'xmpp.invite_message_received',\n\n    // Designates an event indicating that a private XMPP message in the MUC was\n    // received.\n    PRIVATE_MESSAGE_RECEIVED = 'xmpp.private_message_received',\n\n    // Designates an event indicating that a bot participant type had changed\n    MUC_MEMBER_BOT_TYPE_CHANGED = 'xmpp.muc_member_bot_type_changed',\n\n    // Designates an event indicating that the XMPP MUC was destroyed.\n    MUC_DESTROYED = 'xmpp.muc_destroyed',\n\n    // Designates an event indicating that we are currently in process of joining the XMPP MUC.\n    MUC_JOIN_IN_PROGRESS = 'xmpp.muc_join_in_progress',\n\n    // Designates an event indicating that we have joined the XMPP MUC.\n    MUC_JOINED = 'xmpp.muc_joined',\n\n    // Designates an event indicating that a participant joined the XMPP MUC.\n    MUC_MEMBER_JOINED = 'xmpp.muc_member_joined',\n\n    // Designates an event indicating that a participant left the XMPP MUC.\n    MUC_MEMBER_LEFT = 'xmpp.muc_member_left',\n\n    // Designates an event indicating that a participant joined the lobby XMPP MUC.\n    MUC_LOBBY_MEMBER_JOINED = 'xmpp.muc_lobby_member_joined',\n\n    // Designates an event indicating that a participant in the lobby XMPP MUC has been updated\n    MUC_LOBBY_MEMBER_UPDATED = 'xmpp.muc_lobby_member_updated',\n\n    // Designates an event indicating that a participant left the XMPP MUC.\n    MUC_LOBBY_MEMBER_LEFT = 'xmpp.muc_lobby_member_left',\n\n    // Designates an event indicating that a participant was denied access to a conference from the lobby XMPP MUC.\n    MUC_DENIED_ACCESS = 'xmpp.muc_denied access',\n\n    // Designates an event indicating that local participant left the muc\n    MUC_LEFT = 'xmpp.muc_left',\n\n    // Designates an event indicating that the MUC role of a participant has\n    // changed.\n    MUC_ROLE_CHANGED = 'xmpp.muc_role_changed',\n\n    // Designates an event indicating that the MUC has been locked or unlocked.\n    MUC_LOCK_CHANGED = 'xmpp.muc_lock_changed',\n\n    // Designates an event indicating that the MUC members only config has changed.\n    MUC_MEMBERS_ONLY_CHANGED = 'xmpp.muc_members_only_changed',\n\n    // Designates an event indicating that a participant in the XMPP MUC has\n    // advertised that they have audio muted (or unmuted).\n    PARTICIPANT_AUDIO_MUTED = 'xmpp.audio_muted',\n\n    // Designates an event indicating that a participant in the XMPP MUC has\n    // advertised that they have video muted (or unmuted).\n    PARTICIPANT_VIDEO_MUTED = 'xmpp.video_muted',\n\n    // Designates an event indicating that the video type (e.g. 'camera' or\n    // 'screen') for a participant has changed.\n    // Note = currently this event fires every time we receive presence from\n    // someone (regardless of whether or not the \"video type\" changed).\n    PARTICIPANT_VIDEO_TYPE_CHANGED = 'xmpp.video_type',\n\n    /**\n     * Indicates that the features of the participant has been changed.\n     */\n    PARTICIPANT_FEATURES_CHANGED = 'xmpp.participant_features_changed',\n    PASSWORD_REQUIRED = 'xmpp.password_required',\n\n    /**\n     * Indicates that phone number changed.\n     */\n    PHONE_NUMBER_CHANGED = 'conference.phoneNumberChanged',\n    PRESENCE_RECEIVED = 'xmpp.presence_received',\n    PRESENCE_STATUS = 'xmpp.presence_status',\n    PROMPT_FOR_LOGIN = 'xmpp.prompt_for_login',\n\n    // xmpp is connected and obtained user media\n    READY_TO_JOIN = 'xmpp.ready_to_join',\n\n    /**\n     * Indicates that recording state changed.\n     */\n    RECORDER_STATE_CHANGED = 'xmpp.recorderStateChanged',\n\n    // Designates an event indicating that we received statistics from a\n    // participant in the MUC.\n    REMOTE_STATS = 'xmpp.remote_stats',\n\n    /**\n     * Indicates that the offer / answer renegotiation has failed.\n     */\n    RENEGOTIATION_FAILED = 'xmpp.renegotiation_failed',\n    RESERVATION_ERROR = 'xmpp.room_reservation_error',\n    ROOM_CONNECT_ERROR = 'xmpp.room_connect_error',\n    ROOM_CONNECT_NOT_ALLOWED_ERROR = 'xmpp.room_connect_error.not_allowed',\n    ROOM_JOIN_ERROR = 'xmpp.room_join_error',\n    ROOM_CONNECT_MEMBERS_ONLY_ERROR = 'xmpp.room_connect_error.members_only',\n\n    /**\n     * Indicates that max users limit has been reached.\n     */\n    ROOM_MAX_USERS_ERROR = 'xmpp.room_max_users_error',\n\n    // Designates an event indicating that we sent an XMPP message to the MUC.\n    SENDING_CHAT_MESSAGE = 'xmpp.sending_chat_message',\n\n    // Designates an event indicating that we sent a private XMPP message to\n    // a specific user of the muc.\n    SENDING_PRIVATE_CHAT_MESSAGE = 'xmpp.sending_private_chat_message',\n\n    /**\n     * Event fired after receiving the confirmation about session accept.\n     */\n    SESSION_ACCEPT = 'xmpp.session_accept',\n\n    /**\n     * Event fired if we receive an error after sending the session accept.\n     */\n    SESSION_ACCEPT_ERROR = 'xmpp.session_accept_error',\n\n    /**\n     * Event fired when we do not get our 'session-accept' acknowledged by\n     * Jicofo. It most likely means that there is serious problem with our\n     * connection or XMPP server and we should reload the conference.\n     *\n     * We have seen that to happen in BOSH requests race condition when the BOSH\n     * request table containing the 'session-accept' was discarded by Prosody.\n     * Jicofo does send the RESULT immediately without any condition, so missing\n     * packets means that most likely it has never seen our IQ.\n     */\n    SESSION_ACCEPT_TIMEOUT = 'xmpp.session_accept_timeout',\n\n    /**\n     * Event fired after successful sending of jingle source-add.\n     */\n    SOURCE_ADD = 'xmpp.source_add',\n\n    /**\n     * Event fired after receiving an error sending of jingle source-add.\n     */\n    SOURCE_ADD_ERROR = 'xmpp.source_add_error',\n\n    /**\n     * Event fired after successful sending of jingle source-remove.\n     */\n    SOURCE_REMOVE = 'xmpp.source_remove',\n\n    /**\n     * Event fired after receiving an error sending of jingle source-remove.\n     */\n    SOURCE_REMOVE_ERROR = 'xmpp.source_remove_error',\n\n    /**\n     * Event fired when speaker stats update message is received.\n     */\n    SPEAKER_STATS_RECEIVED = 'xmpp.speaker_stats_received',\n\n    /**\n     * Event fired when conference creation timestamp is received.\n     */\n    CONFERENCE_TIMESTAMP_RECEIVED = 'xmpp.conference_timestamp_received',\n\n    /**\n     * Event fired when we receive a message for AV moderation approved for the local participant.\n     */\n    AV_MODERATION_APPROVED = 'xmpp.av_moderation.approved',\n\n    /**\n    * Event fired when we receive a message for AV moderation rejected for the local participant.\n    */\n    AV_MODERATION_REJECTED = 'xmpp.av_moderation.rejected',\n\n    /**\n     * Event fired when we receive a message for AV moderation.\n     */\n    AV_MODERATION_RECEIVED = 'xmpp.av_moderation.received',\n\n    /**\n     * Event fired when the moderation enable/disable changes.\n     */\n    AV_MODERATION_CHANGED = 'xmpp.av_moderation.changed',\n\n    /**\n     * Event fired when we receive message that a new jid was approved.\n     */\n    AV_MODERATION_PARTICIPANT_APPROVED = 'xmpp.av_moderation.participant.approved',\n\n    /**\n     * Event fired when we receive message that a new jid was approved.\n     */\n    AV_MODERATION_PARTICIPANT_REJECTED = 'xmpp.av_moderation.participant.rejected',\n\n    /**\n     * Event fired when a participant is requested to join a given (breakout) room.\n     */\n    BREAKOUT_ROOMS_MOVE_TO_ROOM = 'xmpp.breakout-rooms.move-to-room',\n\n    /**\n     * Event fired when we receive a message for breakout rooms.\n     */\n    BREAKOUT_ROOMS_EVENT = 'xmpp.breakout-rooms.event',\n\n    /**\n     * Event fired when the breakout rooms data was updated.\n     */\n    BREAKOUT_ROOMS_UPDATED = 'xmpp.breakout-rooms.updated',\n\n    // Designates an event indicating that we should join the conference with\n    // audio and/or video muted.\n    START_MUTED_FROM_FOCUS = 'xmpp.start_muted_from_focus',\n\n    // Designates an event indicating that the subject of the XMPP MUC has\n    // changed.\n    SUBJECT_CHANGED = 'xmpp.subject_changed',\n\n    // FIXME: how does it belong to XMPP ? - it's detected by the PeerConnection\n    // suspending detected\n    SUSPEND_DETECTED = 'xmpp.suspend_detected',\n\n    /**\n     * Notifies for transcription status changes. The event provides the\n     * following parameters to its listeners:\n     *\n     * @param {String} status - The new status.\n     */\n    TRANSCRIPTION_STATUS_CHANGED = 'xmpp.transcription_status_changed',\n\n    /**\n     * Event fired when 'transport-info' with new ICE candidates is received.\n     */\n    TRANSPORT_INFO = 'xmpp.transportinfo.jingle',\n\n    /**\n     * Indicates that video SIP GW state changed.\n     *\n     * @param {VideoSIPGWConstants} status - Any of the following statuses:\n     * STATUS_BUSY, STATUS_AVAILABLE or STATUS_UNDEFINED.\n     */\n    VIDEO_SIP_GW_AVAILABILITY_CHANGED = 'xmpp.videoSIPGWAvailabilityChanged',\n\n    /**\n     * Indicates that video SIP GW Session state changed.\n     * The statuses are any of the following statuses:\n     * STATE_ON, STATE_OFF, STATE_PENDING, STATE_RETRYING, STATE_FAILED.\n     * {@see VideoSIPGWConstants}\n     *\n     * @param {options} event - {address, oldState, newState, displayName}.\n     */\n    VIDEO_SIP_GW_SESSION_STATE_CHANGED = 'xmpp.videoSIPGWSessionStateChanged',\n\n    // Designates an event indicating that the local ICE connection state has\n    // changed.\n    ICE_CONNECTION_STATE_CHANGED = 'xmpp.ice_connection_state_changed',\n\n    /**\n     * Event which is emitted when the body in an XMPP message in the MUC\n     * contains JSON\n     * TODO: this event contains a typo (xmmp vs xmpp) but it's unlikely this can be changed now\n     */\n    JSON_MESSAGE_RECEIVED = 'xmmp.json_message_received'\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.amdO = {};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","// startup\n// Load entry module and return exports\n// This entry module used 'module' so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(4449);\n"],"names":["root","factory","exports","module","define","amd","self","JitsiConferenceErrors","AUTHENTICATION_REQUIRED","CHAT_ERROR","SETTINGS_ERROR","CONFERENCE_DESTROYED","CONFERENCE_MAX_USERS","CONNECTION_ERROR","CONFERENCE_RESTARTED","NOT_ALLOWED_ERROR","MEMBERS_ONLY_ERROR","CONFERENCE_ACCESS_DENIED","FOCUS_DISCONNECTED","FOCUS_LEFT","GRACEFUL_SHUTDOWN","ICE_FAILED","INCOMPATIBLE_SERVER_VERSIONS","OFFER_ANSWER_FAILED","PASSWORD_NOT_SUPPORTED","PASSWORD_REQUIRED","RESERVATION_ERROR","VIDEOBRIDGE_NOT_AVAILABLE","JitsiConferenceEvents","AUDIO_INPUT_STATE_CHANGE","AUDIO_UNMUTE_PERMISSIONS_CHANGED","AUTH_STATUS_CHANGED","BEFORE_STATISTICS_DISPOSED","CONFERENCE_ERROR","CONFERENCE_FAILED","CONFERENCE_JOIN_IN_PROGRESS","CONFERENCE_JOINED","CONFERENCE_LEFT","CONFERENCE_UNIQUE_ID_SET","CONNECTION_ESTABLISHED","CONNECTION_INTERRUPTED","CONNECTION_RESTORED","DATA_CHANNEL_OPENED","DISPLAY_NAME_CHANGED","DOMINANT_SPEAKER_CHANGED","CONFERENCE_CREATED_TIMESTAMP","DTMF_SUPPORT_CHANGED","ENDPOINT_MESSAGE_RECEIVED","ENDPOINT_STATS_RECEIVED","JVB121_STATUS","KICKED","PARTICIPANT_KICKED","LAST_N_ENDPOINTS_CHANGED","FORWARDED_SOURCES_CHANGED","LOCK_STATE_CHANGED","SERVER_REGION_CHANGED","_MEDIA_SESSION_STARTED","_MEDIA_SESSION_ACTIVE_CHANGED","MEMBERS_ONLY_CHANGED","MESSAGE_RECEIVED","NO_AUDIO_INPUT","NOISY_MIC","NON_PARTICIPANT_MESSAGE_RECEIVED","PRIVATE_MESSAGE_RECEIVED","PARTICIPANT_CONN_STATUS_CHANGED","PARTCIPANT_FEATURES_CHANGED","PARTICIPANT_PROPERTY_CHANGED","P2P_STATUS","PHONE_NUMBER_CHANGED","PROPERTIES_CHANGED","RECORDER_STATE_CHANGED","VIDEO_SIP_GW_AVAILABILITY_CHANGED","VIDEO_SIP_GW_SESSION_STATE_CHANGED","START_MUTED_POLICY_CHANGED","STARTED_MUTED","SUBJECT_CHANGED","SUSPEND_DETECTED","TALK_WHILE_MUTED","TRACK_ADDED","TRACK_AUDIO_LEVEL_CHANGED","TRACK_MUTE_CHANGED","TRACK_REMOVED","TRACK_UNMUTE_REJECTED","TRANSCRIPTION_STATUS_CHANGED","USER_JOINED","USER_LEFT","USER_ROLE_CHANGED","USER_STATUS_CHANGED","VIDEO_UNMUTE_PERMISSIONS_CHANGED","BOT_TYPE_CHANGED","LOBBY_USER_JOINED","LOBBY_USER_UPDATED","LOBBY_USER_LEFT","AV_MODERATION_APPROVED","AV_MODERATION_REJECTED","AV_MODERATION_CHANGED","AV_MODERATION_PARTICIPANT_APPROVED","AV_MODERATION_PARTICIPANT_REJECTED","FACIAL_EXPRESSION_ADDED","BREAKOUT_ROOMS_MOVE_TO_ROOM","BREAKOUT_ROOMS_UPDATED","SUBTITLES_RECEIVED","ANALYTICS_EVENT_RECEIVED","TRACK_UPDATED","CALLSTATS_SCRIPT_URL","JitsiTrackErrors","CONSTRAINT_FAILED","ELECTRON_DESKTOP_PICKER_ERROR","ELECTRON_DESKTOP_PICKER_NOT_FOUND","GENERAL","NOT_FOUND","PERMISSION_DENIED","SCREENSHARING_GENERIC_ERROR","SCREENSHARING_USER_CANCELED","TIMEOUT","TRACK_IS_DISPOSED","TRACK_NO_STREAM_FOUND","UNSUPPORTED_RESOLUTION","TRACK_ERROR_TO_MESSAGE_MAP","JitsiTrackError","error","options","devices","name","this","gum","constraints","Array","isArray","slice","undefined","message","join","constraintName","constraint","video","indexOf","failedConstraintName","mandatory","minWidth","minHeight","getResolutionFromFailedConstraint","Error","stack","prototype","Object","create","constructor","AnalyticsEvents","TYPE_OPERATIONAL","TYPE_PAGE","TYPE_TRACK","TYPE_UI","ACTION_JINGLE_RESTART","ACTION_JINGLE_SA_TIMEOUT","ACTION_JINGLE_SI_RECEIVED","ACTION_JINGLE_SI_TIMEOUT","ACTION_JINGLE_TERMINATE","ACTION_JINGLE_TR_RECEIVED","ACTION_JINGLE_TR_SUCCESS","ACTION_P2P_DECLINED","ACTION_P2P_ESTABLISHED","ACTION_P2P_FAILED","ACTION_P2P_SWITCH_TO_JVB","AVAILABLE_DEVICE","CONNECTION_DISCONNECTED","FEEDBACK","ICE_DURATION","ICE_ESTABLISHMENT_DURATION_DIFF","ICE_STATE_CHANGED","NO_BYTES_SENT","TRACK_UNMUTED","createConferenceEvent","action","attributes","source","type","createConnectionStageReachedEvent","stage","actionSubject","createGetUserMediaEvent","createJingleEvent","createP2PEvent","createRemotelyMutedEvent","mediaType","createRtpStatsEvent","Events","AUDIO_LEVEL","BEFORE_DISPOSED","BYTE_SENT_STATS","CONNECTION_STATS","LONG_TASKS_STATS","CHROME","OPERA","FIREFOX","INTERNET_EXPLORER","SAFARI","NWJS","ELECTRON","REACT_NATIVE","UNKNOWN","bowserNameToJitsiName","_detectElectron","userAgent","navigator","match","version","_detectNWJS","_detectReactNative","product","length","DummyLocalStorage","EventEmitter","key","value","super","defineProperty","enumerable","configurable","writable","clear","_storage","keys","getItem","keyName","setItem","keyValue","removeItem","n","serialize","JSON","stringify","JitsiLocalStorage","window","localStorage","_localStorageDisabled","ignore","console","warn","isLocalStorageDisabled","emit","dontEmitChangedEvent","i","localStorageContent","jitsiLocalStorage","logger","getLogger","browserInfo","_bowser","Bowser","detectedBrowserInfo","bowser","detectors","getBrowserName","getBrowserVersion","Number","parseInt","_detectChromiumBased","_detect","_name","_version","getName","isChrome","isOpera","isFirefox","isIExplorer","isSafari","isNWJS","isElectron","isReactNative","getVersion","_checkCondition","checkTree","satisfies","isVersionGreaterThan","isVersionLessThan","isVersionEqualTo","info","doesVideoMuteByStreamRemove","isChromiumBased","isWebKitBased","isIosBrowser","maxTouchPoints","platform","Boolean","test","isEngine","mediaDevices","getUserMedia","RTCRtpTransceiver","isTwa","matchMedia","matches","isSupported","_getSafariVersion","_getChromiumBasedVersion","isSupportedAndroidBrowser","isSupportedIOSBrowser","_getIOSVersion","isUserInteractionRequiredForUnmute","supportsVideoMuteOnConnInterrupted","supportsBandwidthStatistics","supportsCodecPreferences","RTCRtpReceiver","getCapabilities","supportsDeviceChangeEvent","ondevicechange","addEventListener","supportsLocalCandidateRttStatistics","supportsPerformanceObserver","PerformanceObserver","supportedEntryTypes","supportsReceiverStats","supportsRTTStatistics","supportsVP9","usesSdpMungingForSimulcast","usesAdapter","usesRidsForSimulcast","supportsGetDisplayMedia","getDisplayMedia","supportsEncodedTransform","RTCRtpScriptTransform","supportsInsertableStreams","RTCRtpSender","createEncodedStreams","stream","ReadableStream","postMessage","supportsAudioRed","codecs","some","codec","mimeType","supportsUnifiedPlan","supportsVADDetection","supportsRTX","process","versions","chromium","ua","reset","disposed","analyticsHandlers","Set","cache","permanentProperties","conferenceName","addPermanentProperties","browser","dispose","size","forEach","handler","setAnalyticsHandlers","handlers","_setUserProperties","event","_sendEvent","setUserProperties","properties","setConferenceName","sendEvent","eventName","_verifyRequiredFields","objectType","containerType","containerId","objectId","_maybeCacheEvent","push","splice","e","require","wrtcFuncNames","reportType","_fabrics","CallStats","msg","backend","log","backendInitialized","atLeastOneFabric","defaultInstance","callStatsInstance","fabrics","values","hasFabric","debug","_addNewFabric","_emptyReportQueue","csInstance","defaultConfID","confID","defaultPC","peerconnection","report","reportsQueue","errorData","data","_reportError","pc","eventData","sendFabricEvent","associateMstWithUserID","callStatsId","ssrc","usageLabel","cs","_error","reportError","theBackend","tryCatchMethods","methodName","originalMethod","theArguments","apply","GlobalOnErrorHandler","debugMethods","originalReportError","args","call","exception","CallStatsBackend","callstats","_traceAndCatchBackendCalls","userID","aliasName","userName","callStatsID","callStatsSecret","configParams","applicationName","applicationVersion","siteID","initialize","_initCallback","getWiFiStatsMethod","attachWifiStatsHandler","then","result","parse","addresses","catch","devicesData","_reportEvent","conferenceID","overall","comment","Promise","resolve","reject","sendUserFeedback","status","reason","mute","tpc","remoteUserID","add","fabricAttributes","remoteEndpointType","isP2P","endpointType","peer","server","ret","addNewFabric","fabricUsage","multiplex","_addNewFabricCallback","success","associateStreamWithVideoTag","isLocal","streamEndpointId","sendDominantSpeakerEvent","sendTerminateEvent","fabricEvent","fabricTerminated","delete","sendIceConnectionFailedEvent","sendCreateOfferFailed","sendCreateAnswerFailed","sendResumeOrHoldEvent","isResume","sendScreenSharingEvent","start","sendSetLocalDescFailed","sendSetRemoteDescFailed","sendAddIceCandidateFailed","AudioContext","webkitAudioContext","context","LocalStatsCollector","interval","callback","intervalId","intervalMilis","audioLevel","safeCounterIncrement","number","nextValue","MAX_SAFE_INTEGER","calculateAverage","valueArray","reduce","a","b","filterPositiveValues","filter","suspend","isLocalStatsSupported","resume","analyser","createAnalyser","smoothingTimeConstant","fftSize","createMediaStreamSource","connect","setInterval","array","Uint8Array","frequencyBinCount","getByteTimeDomainData","samples","maxVolume","parseFloat","toFixed","timeDomainDataToAudioLevel","newLevel","lastLevel","diff","animateLevel","stop","clearInterval","RunningAverage","average","addNext","getAverage","PerformanceObserverStats","emitter","statsInterval","eventEmitter","longTasks","maxDuration","performanceStatsInterval","stats","getLongTasksStats","avgRatePerMinute","maxDurationMs","startObserver","longTaskEventHandler","list","entries","getEntries","task","Math","max","duration","observer","observe","buffered","startTime","Date","now","longTasksIntervalId","_lastTimeStamp","rate","StatisticsEvents","stopObserver","disconnect","MediaType","calculatePacketLoss","lostPackets","totalPackets","round","SsrcStats","loss","bitrate","download","upload","resolution","framerate","ConferenceStats","bandwidth","packetLoss","transport","StatsCollector","audioLevelsInterval","baselineAudioLevelsReport","currentAudioLevelsReport","currentStatsReport","previousStatsReport","audioLevelReportHistory","audioLevelsIntervalId","conferenceStats","audioLevelsIntervalMilis","speakerList","statsIntervalId","statsIntervalMilis","ssrc2stats","Map","setLoss","setResolution","addBitrate","resetBitrate","setFramerate","setCodec","setSpeakerList","errorCallback","callErrorHandler","startAudioLevelStats","audioLevels","getAudioLevels","hasOwnProperty","getStats","processAudioLevelReport","processStats","processStatsReport","_processAndEmitReport","bitrateDownload","bitrateUpload","resolutions","framerates","audioCodec","videoCodec","audioBitrateDownload","audioBitrateUpload","videoBitrateDownload","videoBitrateUpload","ssrcStats","isDownloadStream","packetsTotal","packetsLost","track","getTrackBySSRC","isAudioTrack","participantId","getParticipantId","width","height","userResolutions","userFramerates","codecDesc","userCodecs","audio","total","avgAudioLevels","localAvgAudioLevels","avgAudioLevel","sum","currentValue","getNonNegativeValue","v","isNaN","_calculateBitrate","before","fieldName","bytesNow","bytesBefore","bytesProcessed","timeMs","timestamp","bitrateKbps","byteSentStats","nominated","state","availableIncomingBitrate","availableOutgoingBitrate","remoteUsedCandidate","get","remoteCandidateId","localUsedCandidate","localCandidateId","ip","address","port","localip","protocol","conferenceStatsTransport","t","p2p","localCandidateType","candidateType","remoteCandidateType","networkType","rtt","currentRoundTripTime","id","set","packetsNow","packetsBefore","packetsDiff","packetsLostNow","packetsLostBefore","packetsLostDiff","frameHeight","frameWidth","frameRate","framesPerSecond","bytesSent","codecId","codecShortType","split","kind","VIDEO","remoteSource","localVideoTracks","getLocalTracks","getLocalSSRC","framesSent","numberOfActiveStreams","getActiveSimulcastStreams","trackIdentifier","getSsrcByTrackId","AUDIO","_instances","isCallstatsLoaded","_initCallStatsBackend","isBackendInitialized","initBackend","Statistics","xmpp","rtpStatsMap","callStatsIntegrationEnabled","enableCallStats","disableThirdPartyRequests","callStatsApplicationLogsDisabled","ScriptUtil","customScriptUrl","loadCallStatsAPI","callsStatsInstances","instances","init","audioLevelsEnabled","disableAudioLevels","pcStatsInterval","longTasksStatsInterval","analytics","analyticsEventEmitter","startRemoteStats","stopRemoteStats","rtpStats","RTPStats","localStats","startLocalStats","LocalStats","addAudioLevelListener","listener","on","removeAudioLevelListener","removeListener","addBeforeDisposedListener","removeBeforeDisposedListener","addConnectionStatsListener","removeConnectionStatsListener","addByteSentStatsListener","removeByteSentStatsListener","addLongTasksStatsListener","attachLongTasksStats","conference","performanceObserverStats","removeLongTasksStatsListener","from","callStats","stopCallStats","tpcId","_stopRemoteStats","removeAllListeners","stopLocalStats","startCallStats","has","newInstance","_getAllCallStatsInstances","csInstances","statistics","isCallstatsEnabled","sendConnectionResumeOrHoldEvent","instance","sendMuteEvent","muted","roomJid","sendActiveDeviceListEvent","globalSet","userId","sendGetUserMediaFailed","err","formatJitsiTrackErrorForCallStats","sendLog","m","globalSubSet","next","csPerStats","sendApplicationLog","sendFeedback","rating","LOCAL_JID","reportGlobalError","sendAnalyticsAndLog","eventToLog","sendAnalytics","addAnalyticsEventListener","removeAnalyticsEventListener","JitsiConferenceEventManager","xmppListeners","session","p2pJingleSession","jvbJingleSession","isMuted","getType","JitsiTrackEvents","setupChatRoomListeners","chatRoom","room","chatRoomForwarder","EventEmitterForwarder","addListener","XMPPEvents","jingleSession","rtc","closeBridgeChannel","features","participant","getParticipantById","Strophe","setFeatures","offerIq","_setBridgeChannel","actor","mutedByFocusActor","setAudioMute","isMutedByFocus","mutedVideoByFocusActor","setVideoMute","isVideoMutedByFocus","forward","_onMucJoined","isJvbConnectionInterrupted","connectionTimes","_onConferenceRestarted","connection","emuc","doLeave","roomjid","_onIceConnectionFailed","jid","resource","getStatus","setTerminator","setInitiator","setParticipantPropertyListener","node","setProperty","tagName","substring","onMemberKicked","bind","onSuspendDetected","onMemberJoined","_onMemberBotTypeChanged","onMemberLeft","onDisplayNameChanged","role","onLocalRoleChanged","isModerator","recorderSession","logObject","getError","onUserRoleChanged","AuthenticationEvents","authEnabled","authIdentity","txt","myJid","ts","_status","payload","addPresenceListener","myUserId","startAudioMuted","startVideoMuted","updated","startMutedPolicy","setupRTCListeners","RTCEvents","onRemoteTrackAdded","onRemoteTrackRemoved","dominant","previous","participants","_hidden","lastDominantSpeaker","performance","ufrag","isVideoTrack","videoType","VideoType","removeXMPPListeners","setupXMPPListeners","_addConferenceXMPPListener","onIncomingCall","onCallAccepted","onTransportInfo","onCallEnded","audioMuted","videoMuted","config","ignoreStartMuted","createdTimestamp","actorJid","actorParticipant","getParticipants","find","p","getJid","enabled","setupStatisticsListeners","level","setAudioLevel","startSilent","onByteSentStatsReceived","LOCAL_TRACK_STOPPED","TRACK_AUDIO_OUTPUT_CHANGED","TRACK_VIDEOTYPE_CHANGED","NO_DATA_FROM_SOURCE","TRACK_STREAMING_STATUS_CHANGED","ParticipantConnectionStatus","ACTIVE","INACTIVE","INTERRUPTED","RESTORING","ParticipantConnectionStatusHandler","isConnectionActiveByJvb","isInLastN","isRestoringTimedout","isVideoMuted","isVideoTrackFrozen","trackTimers","connStatusFromJvb","outOfLastNTimeout","p2pRtcMuteTimeout","rtcMuteTimeout","rtcMutedTimestamp","enteredLastNTimestamp","restoringTimers","connectionStatusMap","_getVideoFrozenTimeout","isP2PActive","_onEndpointConnStatusChanged","onEndpointConnStatusChanged","_onP2PStatus","refreshConnectionStatusForAll","_onUserLeft","onUserLeft","_onTrackRtcMuted","onTrackRtcMuted","_onTrackRtcUnmuted","onTrackRtcUnmuted","_onRemoteTrackAdded","_onRemoteTrackRemoved","_onSignallingMuteChanged","onSignallingMuteChanged","_onTrackVideoTypeChanged","onTrackVideoTypeChanged","_onLastNChanged","_onLastNValueChanged","off","participantIds","clearTimeout","clearRtcMutedTimestamp","endpointId","isActive","figureOutConnectionStatus","_changeConnectionStatus","newStatus","getConnectionStatus","getId","_setConnectionStatus","remoteTrack","hasAnyVideoRTCMuted","hasAnyVideoTrackWebRTCMuted","timeout","inP2PMode","isRestoringTimedOut","_isRestoringTimedout","audioOnlyMode","getLastN","isConnActiveByJvb","newState","_getNewStateForP2PMode","_getNewStateForJvbMode","_clearRestoringTimer","oldConnectionStatus","connectionStatus","nowMs","maybeSendParticipantConnectionStatusEvent","startedMs","videoTracks","getTracksByMediaType","participantConnectionStatus","createParticipantConnectionStatusEvent","leavingLastN","enteringLastN","rTimer","setTimeout","JitsiParticipant","displayName","hidden","statsID","identity","isReplacing","isReplaced","_jid","_id","_conference","_displayName","_supportsDTMF","_tracks","_role","_statsID","_connectionStatus","_properties","_identity","_isReplacing","_isReplaced","_features","getConference","getProperty","getTracks","jitsiTrack","isWebRTCTrackMuted","oldValue","getDisplayName","getStatsID","isHidden","isHiddenFromRecorder","user","isAudioMuted","_isMediaTypeMuted","getRole","setRole","newRole","setIsReplacing","newIsReplacing","setIsReplaced","newIsReplaced","supportsDTMF","getFeatures","hasFeature","feature","newFeatures","getBotType","_botType","setBotType","newBotType","JitsiConnectionEvents","CONNECTION_FAILED","WRONG_STATE","DISPLAY_NAME_REQUIRED","JitsiConnectionErrors","CONNECTION_DROPPED_ERROR","OTHER_ERROR","SERVER_ERROR","Deferred","promise","clearRejectTimeout","_timeout","setRejectTimeout","ms","Listenable","removeEventListener","kJitsiE2EE","Symbol","E2EEcontext","sharedKey","baseUrl","ljm","document","querySelector","idx","src","lastIndexOf","workerUrl","workerBlob","Blob","URL","createObjectURL","_worker","Worker","onerror","operation","cleanup","cleanupAll","handleReceiver","receiver","transform","receiverStreams","readableStream","readable","writableStream","handleSender","sender","senderStreams","setKey","keyIndex","KeyHandler","e2eeCtx","E2EEContext","_enabling","_onMediaSessionStarted","_onLocalTrackAdded","_setupReceiverE2EEForTrack","_trackMuteChanged","isEnabled","_setEnabled","setLocalParticipantProperty","_restartMediaSessions","setEncryptionKey","getMediaSessions","_setupSenderE2EEForTrack","localTracks","findReceiverForTrack","findSenderForTrack","ExternallyManagedKeyHandler","keyInfo","encryptionKey","index","v4","OLM_MESSAGE_TYPE","OLM_MESSAGE_TYPES","kOlmData","OlmAdapterEvents","OLM_ID_KEY_READY","PARTICIPANT_E2EE_CHANNEL_READY","PARTICIPANT_KEY_UPDATED","OlmAdapter","_conf","_init","_key","_keyIndex","_reqs","_sessionInitialization","_bootstrapOlm","_onEndpointMessageReceived","_onConferenceLeft","_onParticipantLeft","_onParticipantPropertyChanged","promises","localParticipantId","FEATURE_E2EE","_sendSessionInit","allSettled","Olm","pId","olmData","_getParticipantOlmData","uuid","uuidv4","JITSI_MEET_MUC_TYPE","olm","ciphertext","_encryptKeyInfo","d","_sendMessage","updateCurrentKey","clearParticipantSession","free","clearAllParticipantsSessions","_olmAccount","Account","idKeys","identity_keys","_idKey","curve25519","get_library_version","_onIdKeyReady","idKey","_onParticipantE2EEChannelReady","base64js","encrypt","_sendError","Session","create_outbound","otKey","ack","pendingSessionUuid","create_inbound","body","remove_one_time_keys","decrypt","json","safeJsonParse","lastKey","isEqual","newValue","isE2EEEnabled","sendMessage","generate_one_time_keys","otKeys","one_time_keys","mark_keys_as_published","events","ManagedKeyHandler","_conferenceJoined","_olmAdapter","_rotateKey","debounce","_rotateKeyImpl","_ratchetKey","_ratchetKeyImpl","_onParticipantKeyUpdated","_onParticipantJoined","initSessions","_generateKey","updateKey","material","async","keyBytes","crypto","subtle","importKey","newKey","textEncoder","TextEncoder","deriveBits","salt","encode","hash","ArrayBuffer","ratchet","getRandomValues","E2EEncryption","e2ee","_externallyManaged","externallyManagedKey","_keyHandler","testing","disableE2EE","enableEncodedTransformSupport","setEnabled","flags","_sourceNameSignaling","sourceNameSignaling","_sendMultipleVideoStreams","sendMultipleVideoStreams","_usesUnifiedPlan","enableUnifiedOnChrome","isMultiStreamSupportEnabled","isSourceNameSignalingEnabled","IDENTITY_PROPERTIES","IDENTITY_PROPERTIES_FOR_COMPARE","compareIdentities","res","parseDiscoInfo","identities","$","each","_","el","getAttribute","category","Caps","disco","rooms","externalFeatures","_addChatRoom","_removeChatRoom","addFeature","submit","external","_generateVersion","_updateRoomWithExternalFeatures","removeFeature","sendPresence","removeFromPresence","children","f","addOrReplaceInPresence","getFeaturesAndIdentities","_getDiscoInfo","response","_fixChatRoomPresenceMap","xmlns","ver","_notifyVersionChanged","sortedIdentities","sort","accumulatedValue","tmp","sortedFeatures","b64_sha1","generateSha","_identities","NETWORK_INFO_EVENT","_current","isOnline","updateNetworkInfo","ResumeTask","stropheConnection","_stropheConn","_resumeRetryN","_retryDelay","retryDelay","schedule","_cancelResume","_networkOnlineListener","NetworkInfo","_scheduleResume","_resumeTimeout","min","retry","minDelay","base","floor","random","pow","getJitterDelay","_resumeConnection","streamManagement","resumeToken","getResumeToken","url","service","search","pattern","oldToken","replace","toString","cancel","LastRequestTracker","_lastSuccess","_lastFailedMessage","startTracking","xmppConnection","originalRawInput","rawInput","rawMessage","includes","connected","getLastFailedMessage","getTimeSinceLastSuccess","getConnectionPluginDefinition","ConnectionPluginListenable","PingConnectionPlugin","ConnectionPlugin","getTimeSinceLastServerResponse","onPingThresholdExceeded","pingOptions","failedPings","_onPingThresholdExceeded","_getTimeSinceLastServerResponse","pingInterval","pingTimeout","pingThreshold","threshold","pingTimestampsToKeep","pingExecIntervals","ping","_addPingExecutionTimestamp","iq","$iq","to","c","sendIQ2","startInterval","remoteJid","_lastServerCheck","errmsg","stopInterval","getTime","shift","getPingSuspendTime","pingIntervals","maxInterval","previousTS","currentInterval","XmppConnection","CONN_STATUS_CHANGED","CONN_SHARD_CHANGED","Status","enableWebsocketResume","websocketKeepAlive","websocketKeepAliveUrl","serviceUrl","shard","xmppPing","_options","_usesWebsocket","startsWith","maxRetries","_rawInputTracker","LastSuccessTracker","_resumeTask","_deferredIQs","addConnectionPlugin","_onPingErrorThresholdExceeded","_oneSuccessfulConnect","websocket","_proto","socket","isUsingWebSocket","readyState","WebSocket","OPEN","disconnecting","domain","lastResponseHeaders","pingDomain","_maybeStartWSKeepAlive","plugin","addHandler","attach","sid","rid","_stropheConnectionCb","pass","targetCallback","blockCallback","_maybeEnableStreamResume","_keepAliveAndCheckShard","_processDeferredIQs","_tryResumingConnection","_wsKeepAlive","_clearDeferredIQs","deferred","closeWebsocket","_closeSocket","_onClose","flush","enable","intervalWithJitter","fetch","responseShard","headers","timeLeft","sendIQ","send","stanza","elem","errback","sendUnavailableBeacon","sendBeacon","_changeConnectStatus","_buildBody","attrs","pres","$pres","cnode","tree","_abortAllRequests","_doDisconnect","JitsiTranscriptionStatus","ON","OFF","AVModeration","_xmpp","_mainRoom","_moderationEnabledByType","_whitelistAudio","_whitelistVideo","_onMessage","avModerationComponentAddress","$msg","up","approve","jidToWhitelist","jidToBlacklist","obj","removed","media","approved","whitelists","newWhitelists","oldList","newList","x","FEATURE_KEY","BREAKOUT_ROOM_ACTIONS","ADD","REMOVE","MOVE_TO_ROOM","BREAKOUT_ROOM_EVENTS","BreakoutRooms","_handleMessages","_rooms","createBreakoutRoom","subject","removeBreakoutRoom","breakoutRoomJid","sendParticipantToRoom","participantJid","getComponentAddress","breakoutRoomsComponentAddress","_setIsBreakoutRoom","isBreakoutRoom","_isBreakoutRoom","_setMainRoomJid","_mainRoomJid","getMainRoomJid","EMAIL_COMMAND","Lobby","mainRoom","maybeJoinLobbyRoom","_maybeJoinLobbyRoom","lobbyRoomJid","lobbySupported","setMembersOnly","disable","lobbyRoom","membersOnlyEnabled","sendPrivateMessage","getLocalId","myroomjid","addMessageListener","removeMessageHandler","leave","setLobbyRoomJid","joined","email","roomName","customDomain","createRoom","disableDiscoInfo","disableFocus","enableLobby","nick","isHiddenDomain","botType","members","getBreakoutRooms","avatar","j","clean","isSelfPresence","invitePassword","denyAccess","kick","approveAccess","mainRoomJid","memberRoomJid","msgToSend","_callStatsUserName","_machineId","externalStorage","callStatsUserName","username","UsernameGenerator","generateCallStatsUserName","machineId","amDid","jitsiMeetId","_p8","generateJitsiMeetId","sessionId","substr","createExpBackoffTimer","step","count","Moderator","origin","location","Settings","xmppService","getNextTimeout","getNextErrorTimeout","externalAuthEnabled","sipGatewayEnabled","attachEvent","isExternalAuthEnabled","isSipGatewayEnabled","onMucMemberLeft","setFocusUserJid","focusJid","focusUserJid","getFocusUserJid","getFocusComponent","focusComponent","hosts","focus","createConferenceIq","machineUID","disableRtx","audioPacketDelay","startBitrate","minBitrate","rtcstatsEnabled","callstatsDisabled","parseSessionId","resultIq","attr","parseConfigOptions","authenticationEnabled","IDENTITY_UPDATED","allocateConferenceFocus","_allocateConferenceFocusSuccess","_allocateConferenceFocusError","invalidSession","reservationErr","errorCode","errorTextNode","errorMsg","text","anonymousdomain","waitMs","retrySec","authenticate","errorIq","prop","getLoginUrl","urlCallback","failureCallback","_getLoginUrl","popup","urlCb","failureCb","str","decodeURIComponent","getPopupLoginUrl","logout","logoutUrl","parser","packet2JSON","xmlElement","nodes","child","json2packet","packet","filterNodeFromPresenceJSON","nodeName","MEMBERS_AFFILIATIONS","ChatRoom","password","XMPP","replaceParticipant","presMap","presHandlers","_removeConnListeners","inProgressEmitted","focusMucJid","noBridgeAvailable","moderator","lobby","avModeration","breakoutRooms","initPresenceMap","lastPresences","phoneNumber","phonePin","participantPropertyListener","locked","transcriptionStatus","xns","statsId","presenceUpdateTime","onConnStatusChanged","fromJoin","billingId","presenceSyncTime","discoRoomInfo","getInfo","meetingIdValEl","setMeetingId","membersOnly","lobbyRoomField","isBreakoutField","breakoutMainRoomField","meetingId","createNonAnonymousRoom","getForm","form","formSubmit","CONNECTED","onPresence","member","statusEl","getElementsByTagName","textContent","hasStatusUpdate","hasVersionUpdate","xElement","getElementsByTagNameNS","mucUserItem","isReplaceParticipant","affiliation","isFocus","hiddenDomain","isTranscriber","innerHTML","toLowerCase","fromHiddenDomain","presence","xEl","remove","extractIdentityInformation","userInfo","tags","hiddenFromRecorderFeatureEnabled","tag","groupInfo","group","_extractFeatures","_initFocus","memberOfThis","displayJids","restartByTerminateSupported","supportsRestartByTerminate","att","phone","pin","processNode","var","focusFeatures","tagHandlers","elementName","setSubject","onParticipantLeft","skipEvents","onPresenceUnavailable","destroySelect","reasonSelect","isKick","membersKeys","actorSelect","actorNick","onMessage","settingsErrorMsg","subjectText","stamp","dateParts","invite","passwordSelect","jsonMessage","parsedJson","tryParseJSONAndVerify","onPresenceError","lobbyRoomNode","lobbyRoomOldNode","setAffiliation","grantIQ","kickIQ","lockRoom","onSuccess","onError","onNotSupported","formsubmit","formToSubmit","addToPresence","matchingNodes","getFromPresence","removePresenceListener","handlerIdx","mucJid","getMemberRole","peerJid","addAudioInfoToPresence","audioMutedTagName","addVideoInfoToPresence","videoMutedTagName","getMediaPresenceInfo","mutedNode","codecTypeNode","videoTypeNode","codecType","getLastPresence","mucNick","isSIPCallingSupported","dial","rayo","hangup","getLobby","getAVModeration","getPhoneNumber","getPhonePin","getMeetingId","muteParticipant","iqToFocus","onMute","onMuteVideo","onMucLeft","doReject","MucConnectionPlugin","isRoomCreated","_createSourceExtension","owner","sourceCompactJson","$build","s","FeatureFlags","_createSsrcGroupExtension","ssrcGroupCompactJson","semantics","_getOrCreateRtpDescription","jingle","description","content","appendChild","expandSourcesFromJson","jsonMessageXml","sources","audioRtpDescription","videoRtpDescription","ssrcMap","ssrcs","ownerSources","videoSources","videoSsrcGroups","audioSources","audioSsrcGroups","MediaDirection","ScreenObtainer","obtainStream","_createObtainStreamMethod","onFailure","JitsiMeetNW","obtainDesktopStream","jitsiError","obtainScreenOnElectron","obtainScreenFromGetDisplayMediaRN","obtainScreenFromGetDisplayMedia","_getAudioConstraints","audioQuality","stereo","autoGainControl","channelCount","echoCancellation","noiseSuppression","JitsiMeetScreenObtainer","openDesktopPicker","desktopSharingFrameRate","desktopSharingSources","streamId","streamType","screenShareAudio","audioConstraints","optionalConstraints","optional","chromeMediaSource","chromeMediaSourceId","minFrameRate","maxFrameRate","maxWidth","screen","maxHeight","sourceId","sourceType","cursor","errorDetails","errorName","errorStack","setDesktopSharingFrameRate","maxFps","SDPUtil","filterSpecialChars","iceparams","mediadesc","sessiondesc","pwd","findLine","parseICEUfrag","parseICEPwd","line","buildICEUfrag","frag","buildICEPwd","parseMID","parseMSIDAttribute","ssrcLines","msidLine","parseMLine","parts","proto","pop","fmt","buildMLine","mline","parseRTPMap","clockrate","channels","parseSCTPMap","parseSCTPPort","buildRTPMap","parseCrypto","parseFingerprint","fingerprint","parseFmtp","parseICECandidate","candidate","elems","foundation","component","priority","generation","tcptype","network","buildICECandidate","cand","hasOwnAttribute","parseSSRC","desc","lines","parseSourceNameLine","sourceNameLine","ssrcSdpLine","parseRTCPFB","pt","params","parseExtmap","direction","uri","haystack","needle","sessionpart","findLines","needles","candidateToJingle","candidateFromJingle","parsePrimaryVideoSsrc","videoMLine","numSsrcs","map","ssrcInfo","numGroups","ssrcGroups","primarySsrc","fidGroup","simGroup","generateSsrc","RandomUtil","getSsrcAttribute","mLine","attributeName","ssrcLine","attribute","parseGroupSsrcs","ssrcGroup","ssrcStr","getMedia","sdp","getUfrag","ufragLines","preferCodec","codecName","matchingPayloadTypes","rtp","payloadTypes","payloads","reverse","payloadIndex","unshift","stripCodec","highProfile","h264Pts","removePts","stripH264HighCodec","CodecMimeType","fmtp","item","rtxApts","rtxPts","keepPts","rtcpFb","SDP","mediaI","raw","arrayEquals","array1","array2","l","equals","SDPDiffer","mySDP","otherSDP","failICE","removeTcpCandidates","removeUdpCandidates","addMlineForNewLocalSource","mid","clonedeep","RECVONLY","msid","concat","groups","mids","getMediaSsrcMap","mediaSSRCs","mediaindex","linessrc","containsSSRC","medias","toJingle","thecreator","assrcline","creator","amidline","rtpmap","afmtpline","fmtpParameters","k","rtcpFbToJingle","availableSsrc","ssrcParameters","sourceName","ridLines","rids","ridLine","ridInfo","extmapLines","extmap","SENDONLY","senders","SENDRECV","transportToJingle","sctpport","sctpmap","sctpAttrs","streams","setupLine","setup","iceParameters","payloadtype","feedback","rtcpFbFromJingle","feedbackElementTrrInt","fb","hasAttribute","fromJingle","contents","jingle2media","sctp","payloadType","setAttribute","__","parameter","hdrExt","userSources","nonUserSources","isUserSource","sourceStr","getNewMedia","myMedias","othersMedias","newMedia","othersMediaIdx","myMedia","othersMedia","otherSsrcGroup","matched","mySsrcGroup","modify","sdpMediaSsrcs","modified","ssrcNum","mediaSsrc","AsyncQueue","_queue","_processQueueTasks","_stopped","kill","finishedCallback","shutdown","JingleSessionState","PENDING","ENDED","JingleSession","localJid","mediaConstraints","pcConfig","isInitiator","usedrip","dripContainer","_signalingLayer","initiatorJid","responderJid","signalingLayer","doInitialize","addIceCandidates","getState","addSources","removeSources","terminate","failure","acceptOffer","_getInitiatorJid","MediaSessionEvents","IQ_TIMEOUT","JingleSessionPC","jingleContents","videoContents","maxFrameHeightSel","_bridgeSessionId","_cachedOldLocalSdp","_cachedNewLocalSdp","_iceCheckingStartedTimestamp","_gatheringStartedTimestamp","localRecvMaxFrameHeight","_localVideoActive","_remoteVideoActive","_gatheringReported","lasticecandidate","closed","remoteRecvMaxFrameHeight","modificationQueue","wasConnected","establishmentDuration","_xmppListeners","onXmppStatusChanged","_removeSenderVideoConstraintsChangeListener","_assertNotEnded","isReconnect","wasstable","webrtcIceUdpDisable","webrtcIceTcpDisable","pcOptions","gatherStats","maxstats","capScreenshareBitrate","enableInsertableStreams","videoQuality","forceTurnRelay","usesUnifiedPlan","disableSimulcast","abtestSuspendVideo","_abtestSuspendVideoEnabled","preferH264","disableH264","preferredCodec","H264","createPeerConnection","onicecandidate","ev","phase","initiator","sendIceCandidate","onsignalingstatechange","signalingState","connectionState","oniceconnectionstatechange","isStable","iceConnectionState","reconnect","usesTerminateForRestart","enableIceRestart","iceStarted","onconnectionstatechange","icestate","onnegotiationneeded","remoteDescription","workFunction","oldSdp","localDescription","_renegotiate","configureSenderVideoEncodings","newSdp","notifyMySSRCUpdate","getRemoteRecvMaxFrameHeight","localSDP","ice","sdpMLineIndex","jcand","errorMesssage","sendIceCandidates","candidates","cands","sdpMid","fingerprintLine","required","newJingleErrorHandler","sendIceFailedNotification","sessionInfo","iceCandidates","rtcCandidate","RTCIceCandidate","iceCandidate","addIceCandidate","outerHTML","readSsrcInfo","ssrcElement","setSSRCOwner","setTrackSourceName","i3","ssrcInfoElement","jidOrEndpointId","generateRecvonlySsrc","getConfiguredVideoCodec","jingleOffer","setOfferAnswerCycle","sendSessionAccept","addTracks","localTrack","addTrack","all","createOffer","offerSdp","setLocalDescription","sendSessionInitiate","setAnswer","jingleAnswer","remoteSdp","RTCSessionDescription","_responderRenegotiate","jingleOfferAnswerIq","newRemoteSdp","_processNewJingleOfferIq","oldLocalSdp","bridgeSessionId","sendContentModify","newLocalSdp","setVideoCodecs","preferred","disabled","current","replaceTransport","jingleOfferElem","enableForcedReload","sendTransportAccept","originalOffer","clone","newFingerprint","accept","responder","maxFrameHeight","sessionModify","setReceiverVideoConstraint","transportAccept","medialines","sendTransportReject","transportReject","setSenderVideoConstraint","jitsiLocalTrack","getLocalVideoTracks","getSourceName","getLocalVideoTrack","setSenderVideoConstraints","sendSessionTerminate","sessionTerminate","reasonDescription","restart","requestRestart","onTerminated","reasonCondition","reasonText","close","_parseSsrcInfoFromSourceAdd","sourceAddElem","currentRemoteSdp","addSsrcInfo","i1","i2","addRemoteStream","_addOrRemoveRemoteStream","removeRemoteStream","removeRemoteStreamsOnLeave","finishCallback","removeSsrcInfo","getRemoteSourceInfoByParticipant","_processRemoteRemoveSource","newLocalSDP","isAdd","logPrefix","errMsg","addOrRemoveSsrcInfo","_parseSsrcInfoFromSourceRemove","_processRemoteAddSource","findIndex","desiredDirection","getDesiredMediaDirection","optionalRemoteSdp","_initiatorRenegotiate","setRemoteDescription","createAnswer","answer","offer","replaceTrack","oldTrack","newTrack","clearRecvonlySsrc","shouldRenegotiate","sourceRemoveElem","_verifyNoSSRCChanged","operationName","oldSDP","currentLocalSDP","sdpDiff","addedMedia","removedMedia","addTrackAsUnmute","_addRemoveTrackAsMuteUnmute","removeTrackAsMute","isMute","oldLocalSDP","removeTrackMute","addTrackUnmute","setMediaTransferActive","audioActive","videoActive","logAudioStr","logVideoStr","isSessionActive","audioActiveChanged","setAudioTransferActive","pcVideoActiveChanged","setVideoTransferActive","modifyContents","newVideoSenders","parseVideoSenders","newMaxFrameHeight","parseMaxFrameHeight","_modifyRemoteVideoActive","remoteVideoSenders","isRemoteVideoActive","newSDP","getSignaledSourceInfo","sdpDiffer","mediaIndex","signaledSsrcs","removedAnySSRCs","ctx","sourceInfo","request","errResponse","errorElSel","code","errorReasonSel","errorMsgSel","getIceConnectionState","getConnectionState","abTesting","enableSuspendVideoTest","integerHash","_parseIceCandidates","parseCandidates","candidateAttrs","JingleConnectionPlugin","iceConfig","sessions","jvbIceConfig","jvb","p2pIceConfig","offerToReceiveAudio","offerToReceiveVideo","onJingle","fromJid","sess","jsonMessages","audioVideoSsrcs","logMessage","endpoint","startMuted","iceUfrag","icePwd","dtlsFingerprint","successTime","newP2PJingleSession","me","getStunAndTurnCredentials","v2Res","onReceiveStunAndTurnCredentials","v1Res","iceservers","dict","urls","credential","temp","useTurnUdp","iceServers","getLog","updateLog","href","StropheLogger","logIncoming","rawOutput","logOutgoing","RAYO_XMLNS","RayoConnectionPlugin","onRayo","roomPass","req","callResource","lastErrorStatus","resetLastErrorStatusRegExpr","lastErrorStatusRegExpr","FAILURE_REGEX","DEFAULT_STUN_SERVERS","FEATURE_JIGASI","token","disconnectInProgress","authenticatedUser","trace","errStatusCapture","exec","createConnection","bosh","deploymentInfo","details","shard_changed","suspend_time","time_since_last_success","_initStrophePlugins","caps","initFeaturesList","enableOpusRed","enableRemb","enableTcc","enableLipSync","getConnection","connectionHandler","credentials","statusStr","_maybeSendDeploymentInfoStat","_sysMessageHandler","deleteHandler","sendDiscoInfo","_resetState","sendDeploymentInfo","_processDiscoInfoIdentities","anonymousConnectionFailed","connectionFailed","lastErrorMsg","wasIntentionalDisconnect","_getConnectionFailedReasonDetails","lastFailedRawMessage","_parseConnectionFailedMessage","speakerStatsComponentAddress","conferenceDurationComponentAddress","processLobbyFeatures","fr","endsWith","region","_onPrivateMessage","_connect","_addSysHandler","_onSystemMessage","foundIceServers","attaching","configDomain","hostname","onCreateResource","getRoomJid","mucNickname","muc","getJingleLog","getXmppLog","getSessions","disconnectListener","_cleanupXmppConnection","evType","sync","p2pStunServers","stunServers","iceTransportPolicy","headersArr","trim","header","sendFacialExpressionEvent","expression","facialExpression","jsonString","users","created_timestamp","force","acceptedStatuses","aprops","authenticateAndUpgradeRole","rejectPromise","onLoginSuccessful","roomPassword","canceled","authenticationError","connectionError","CodecSelection","disabledCodec","_getCodecMimeType","jvbCodec","p2pCodec","jvbPreferredCodec","_isCodecSupported","p2pPreferredCodec","_selectPreferredCodec","mediaSession","currentCodec","selectedCodec","enforcePreferredCodec","remoteParticipants","remote","peerMediaInfo","getPeerMediaInfo","peerCodec","getPreferredCodec","BridgeChannel","wsUrl","TypeError","_channel","_eventEmitter","_mode","_areRetriesEnabled","_closedFromClient","datachannel","createDataChannel","_handleChannel","_wsUrl","_initWebSocket","ws","_startConnectionRetries","timeoutS","reload","isOpen","_retryTimeout","_stopConnectionRetries","_retryWebSocketConnection","closeEvent","createBridgeChannelClosedEvent","once","mode","sendEndpointStatsMessage","_send","colibriClass","msgPayload","sendSetLastNMessage","lastN","sendSelectedEndpointsMessage","endpointIds","selectedEndpoints","sendReceiverVideoConstraintMessage","maxFrameHeightPixels","sendNewReceiverVideoConstraintsMessage","sendVideoTypeMessage","sendSourceVideoTypeMessage","channel","onopen","onmessage","dominantSpeakerEndpoint","previousSpeakers","active","lastNEndpoints","forwardedSources","videoConstraints","onclose","jsonObject","DEFAULT_CONSTRAINTS","ideal","audioOutputDeviceId","audioOutputChanged","disableAP","disableAEC","disableNS","disableAGC","featureDetectionAudioEl","createElement","isAudioOutputDeviceChangeAvailable","setSinkId","availableDevicesPollTimer","availableDevices","emptyFuncton","updateGrantedPermissions","um","audioTracksReceived","getAudioTracks","videoTracksReceived","getVideoTracks","grantedPermissions","sendDeviceListToAnalytics","deviceList","audioInputDeviceCount","audioOutputDeviceCount","videoInputDeviceCount","videoOutputDeviceCount","device","deviceId","groupId","label","updateKnownDevices","pds","newDevices","mediaDeviceInfoToJSON","facing","compareAvailableMediaDevices","rtcUtils","origAttachMediaStream","RTCPeerConnectionType","RTCPeerConnection","attachMediaStream","getStreamID","getTrackID","element","srcObject","arguments","isDeviceChangeAvailable","getAudioOutputDevice","ex","pcConstraints","googScreencastMinBitrate","googCpuOveruseDetection","screenObtainer","isDeviceListAvailable","enumerateDevices","ds","_getUserMedia","umDevices","gumTimeout","timeoutExpired","_getDesktopMedia","_getMissingTracks","requestedDevices","missingDevices","audioDeviceRequested","videoDeviceRequested","obtainAudioAndVideoPermissions","otherOptions","mediaStreamsMetaData","maybeRequestDesktopDevice","desktopSharingSourceDevice","matchingDevice","maybeRequestCaptureDevices","requestedCaptureDevices","Resolutions","r","cameraDeviceId","facingMode","CameraFacingMode","micDeviceId","assign","getConstraints","desktopStream","desktopAudioTracks","desktopAudioStream","MediaStream","desktopVideoTracks","desktopVideoStream","avStream","audioTracks","audioStream","effects","videoStream","stopMediaStream","deviceType","mediaStream","release","isDesktopSharingEnabled","setAudioOutputDevice","getCurrentlyAvailableMediaDevices","arePermissionsGrantedForAvailableDevices","getEventDataForActiveDevice","deviceData","setSuspendVideo","googSuspendBelowMinBitrate","trackHandler2Prop","JitsiTrack","streamInactiveHandler","trackMediaType","containers","_streamInactiveHandler","_setStream","_addMediaStreamInactiveHandler","onended","oninactive","_setHandler","_unregisterHandlers","videoTrack","getVideoType","isLocalAudioTrack","getOriginalStream","getStreamId","getTrack","getTrackLabel","getTrackId","getUsageLabel","_maybeFireTrackAttached","container","_onTrackAttach","RTCUtils","_attachTTFMTracker","detach","_onTrackDetach","isScreenSharing","newAudioLevel","getMSID","trackId","setAudioOutput","JitsiLocalTrack","rtcId","_setEffectInProgress","effect","_startStreamEffect","displaySurface","getSettings","metadata","maxEnabledResolution","_constraints","_prevSetMuted","_facingMode","_trackEnded","_hasSentData","_testDataSent","_realDeviceId","_sourceName","_trackMutedTS","_onDeviceListWillChange","oldRealDeviceId","_setRealDeviceIdFromDeviceList","_onAudioOutputDeviceChanged","_initNoDataFromSourceHandlers","_addStreamToConferenceAsUnmute","_addLocalTrackAsUnmute","_fireNoDataFromSourceEvent","isReceivingData","createNoDataFromSourceEvent","_isNoDataFromSourceEventsEnabled","_queueSetMuted","setMuted","_setMuted","_removeStreamFromConferenceAsMute","successCallback","_removeLocalTrackAsMute","_sendMuteStatus","_setTrackMuteStatus","logMuteInfo","_streamEffect","_stopStreamEffect","stopStream","streamOptions","getDeviceId","getCameraFacingMode","streamsInfo","PRESENTER","streamInfo","cont","_sendBridgeVideoTypeMessage","storedMSID","_originalStream","startEffect","stopEffect","_switchCamera","_switchStreamEffect","setEffect","removeTrack","trackSettings","getDuration","isEnded","_stopStreamInProgress","_effectEnabled","setConference","setSourceName","unmute","opts","found","PLAN_B_MIDS","findSimGroup","grp","findFidGroup","addSimGroupSources","sourceGroups","sourceList","findSourcebyId","relatedFidGroup","relatedSsrc","addSourcesToMline","otherSsrc","simGroup2","checkIfMlineForSsrcExists","mlines","Interop","toPlanB","every","sessionMedia","bLine","bundle","msidSemantic","semantic","resStr","toUnifiedPlan","currentDesc","iceRestart","newDesc","oldDesc","newMLine","oldMLine","checkForIceRestart","newIceUfrag","newIcePwd","newMline","mLineForData","ssrc2group","createSourceGroupMap","bundleOnly","existingMline","sessionVersion","resultSdp","SignalingEvents","PEER_MUTED_CHANGED","PEER_VIDEO_TYPE_CHANGED","getSourceNameForJitsiTrack","trackIdx","getMediaTypeFromSourceName","firstLetterOfMediaTypeIdx","firstLetterOfMediaType","SignalingLayer","getSSRCOwner","getPeerSourceInfo","getTrackSourceName","parsePrimarySSRC","parseSecondarySSRC","_getSSRCCount","MLineWrap","getSSRCAttrValue","ssrcNumber","attrName","ssrcObj","removeSSRC","addSSRCAttribute","findGroup","findGroups","findGroupByPrimarySSRC","primarySSRC","findSSRCByMSID","getSSRCCount","containsAnySSRCGroups","getPrimaryVideoSsrc","fecGroup","getRtxSSRC","getSSRCs","getPrimaryVideoSSRCs","videoSSRCs","ssrcGroupInfo","secondarySsrc","dumpSSRCGroups","removeGroupsWithSSRC","removeGroupsBySemantics","replaceSSRC","oldSSRC","newSSRC","addSSRCGroup","SdpTransformWrap","rawSDP","parsedSDP","selectMedia","selectedMLines","toRawSDP","LocalSdpMunger","localEndpointId","_addMutedLocalVideoTracksToSDP","transformer","localVideos","isCamera","isInPeerConnection","isMediaStreamInPc","requiredSSRCs","isSimulcastOn","simulcast","ssrcCache","sdpConsistency","cachedPrimarySsrc","primaryCname","rtxModifier","modifyRtxSsrcs2","_generateMsidAttribute","pcId","_transformMediaIdentifiers","mediaSection","sourceToMsidMap","streamAndTrackIDs","mediaDirection","generatedMsid","maybeAddMutedLocalVideoTracksToSDP","transformStreamIdentifiers","sessionDesc","audioMLine","_injectSourceNames","videoMlines","nameExists","trackIndex","updateAssociatedRtxStream","primarySsrcInfo","rtxSsrc","primarySsrcMsid","primarySsrcCname","cname","previousRtxSSRC","RtxModifier","correspondingRtxSsrcs","clearSsrcCache","setSsrcCache","ssrcMapping","modifyRtxSsrcs","sdpStr","sdpTransformer","videoMLines","primaryVideoSsrcs","correspondingRtxSsrc","stripRtx","fidGroups","SdpConsistency","clearVideoSsrcCache","injectRecvOnly","setPrimarySsrc","hasPrimarySsrcCached","makeVideoPrimarySsrcsConsistent","newPrimarySsrc","SdpSimulcast","_ssrcCache","numOfLayers","_fillSsrcsFromCache","cachedSsrcs","newSsrcs","_parseSimLayers","newMsid","_getSsrcAttribute","newCname","_generateNewSsrcsForSimulcast","addAssociatedAttributes","simSsrcs","simSsrc","_generateSsrc","mungeLocalDescription","simulcastSsrcs","mungeRemoteDescription","mungedSsrcs","mungedSsrcGroups","TrackStreamingStatus","TrackStreamingStatusImpl","isInForwardedSources","restoringTimer","streamingStatusMap","trackTimer","outOfForwardedSourcesTimeout","figureOutStreamingStatus","_onForwardedSourcesChanged","onForwardedSourcesChanged","maybeSendTrackStreamingStatusEvent","_changeStreamingStatus","getTrackStreamingStatus","_setTrackStreamingStatus","isVideoRTCMuted","oldStreamingStatus","streamingStatus","trackStreamingStatus","createTrackStreamingStatusEvent","leavingForwardedSources","enteringForwardedSources","_clearEnteredForwardedSourcesTimestamp","_setEnteredForwardedSourcesTimestamp","enteredForwardedSourcesTimestamp","_getEnteredForwardedSourcesTimestamp","_isCurrentTrack","ttfmTrackerAudioAttached","ttfmTrackerVideoAttached","containerEvents","JitsiRemoteTrack","ownerEndpointId","_trackStreamingStatus","_trackStreamingStatusImpl","_enteredForwardedSourcesTimestamp","_addEventListener","_removeEventListener","hasBeenMuted","_bindTrackHandlers","_containerHandlers","_containerEventHandler","_onTrackMute","_onTrackUnmute","listenerCount","_initTrackStreamingStatus","_disposeTrackStreamingStatus","REMOTE_TRACK_MUTE","REMOTE_TRACK_UNMUTE","setMute","getSSRC","_setVideoType","_playCallback","getConnectionTimes","gumStart","gumEnd","gumDuration","ttfm","_getStatus","_p2pConnStatusRtcMuteTimeout","_peerConnStatusRtcMuteTimeout","_peerConnStatusOutOfLastNTimeout","HD_BITRATE","SIM_LAYER_RIDS","TPCUtils","bitrateSettings","maxBitratesVideo","standardBitrates","low","standard","high","videoBitrates","encodingBitrates","VP8","localStreamEncodingsConfig","maxBitrate","scaleResolutionDownBy","_getStreamEncodings","ensureCorrectOrderOfSsrcs","parsedSdp","reorderedSsrcs","findTransceiver","getTransceivers","insertUnifiedPlanSimulcastReceive","simulcast_03","simulcastLine","transceiverInit","sendEncodings","addTransceiver","calculateEncodingsActiveState","localVideoTrack","newHeight","encoding","isSharingLowFpsScreen","calculateEncodingsBitrates","desktopShareBitrate","desktopBitrate","presenterEnabled","isNewLocalSource","transceiver","currentDirection","setEncodings","parameters","getParameters","encodings","setParameters","transceivers","updateEncodingsResolution","TraceablePeerConnection","audioTransferActive","_dtmfSender","_dtmfTonesQueue","videoTransferActive","remoteTracks","_addedStreams","localSSRCs","localUfrag","remoteUfrag","_dtlsTransport","_peerVideoTypeChanged","_peerMutedChanged","safeConstraints","rtcStatsSFUP2P","tpcUtils","statsinterval","_capScreenshareBitrate","_usesTransceiverCodecPreferences","interop","Simulcast","explodeRemoteSimulcast","localSdpMunger","getLocalEndpointId","_senderVideoMaxHeight","_senderMaxHeights","what","time","onTrack","evt","_remoteTrackAdded","_remoteTrackRemoved","onaddstream","_remoteStreamAdded","onremovestream","_remoteStreamRemoved","ondatachannel","results","names","_processStat","stat","statValue","endTime","times","dumpSDP","isAddOperation","hasLocalSource","hasAnyTracksOfType","mediaTransferActive","_getReceiversByEndpointIds","endpoints","receivers","getRemoteTracks","remoteTrackIds","getReceivers","audioReceivers","getSynchronizationSources","tracks","endpointTracksByMediaType","primarySsrcs","fidLines","getTargetVideoBitrates","toUpperCase","findTrackById","RTC","isUserStreamById","onaddtrack","onremovetrack","streamAudioTracks","audioTrack","streamVideoTracks","remoteSDP","mediaLines","mls","trackSsrc","_createRemoteTrack","remoteTracksMap","userTracksByMediaType","existingTrack","isUserStream","toBeRemoved","_removeRemoteTrack","removeRemoteTracks","removedTracks","remoteTracksByMedia","_extractSSRCMap","groupsMap","groupSSRCs","_getSSRC","_injectSsrcGroupForUnifiedSimulcast","getters","audioMedia","changed","videoMedia","enforceSendRecv","_adjustRemoteMediaDirection","_isSharingScreen","_mungeCodecOrder","codecPreference","VP9","bitrates","hdBitrate","limit","webrtcStream","_addStream","generateNewStreamSSRCInfo","rtxSsrcMapping","promiseChain","_assertTrackBelongs","webRtcStream","addStream","_removeStream","removeStream","doesBelong","defaultCodec","lowFps","findSenderByKind","getSenders","negotiationNeeded","mediaActive","_ensureSimulcastGroupIsLast","localSdp","videoStartIndex","simStartIndex","otherStartIndex","simEndIndex","simStr","otherEndIndex","sdpHead","simStrTrimmed","sdpTail","_adjustLocalMediaDirection","modifiedDirection","desiredAudioDirection","desiredVideoDirection","hasRemoteSource","_mungeOpus","opusMaxAverageBitrate","mLines","OPUS","fmtpOpus","fmtpConfig","sdpChanged","maxaveragebitrate","mungedConfig","_initializeDtlsTransport","onstatechange","currentDescription","firstSsrcs","newSsrcLines","filteredLines","ssrcId","cnameLine","replaceDefaultUnifiedPlanMsid","write","normalizePlanB","videoSender","preference","degradationPreference","encodingsEnabledState","maxBitrates","scaleFactor","layer","sendTones","tones","interToneGap","rtpSender","dtmf","localAudioTrack","createDTMFSender","ontonechange","_onToneChange","toneBuffer","insertDTMF","tone","peerTracks","_removePeerConnection","_createOfferOrAnswer","isOffer","logName","handleSuccess","resolveFn","rejectFn","_processLocalSSRCsMap","handleFailure","eventType","capabilities","ULPFEC","setCodecPreferences","oaPromise","_extractPrimarySSRC","sourceIdentifier","newSSRCNum","oldSSRCNum","usernameFragment","activeStreams","currNumSsrcs","ConnectionQualityEvents","peerConnectionIdCounter","rtcTrackIdCounter","_createLocalTracks","mediaStreamMetaData","metaData","peerConnections","_lastN","_lastNEndpoints","_forwardedSources","_maxFrameHeight","_selectedEndpoints","_lastNChangeListener","_forwardedSourcesChangeListener","_onDeviceListChanged","_updateAudioOutputForAudioTracks","_videoType","BridgeVideoType","destroy","_channelOpenListener","tracksInfo","initializeBridgeChannel","logError","msgType","_receiverVideoConstraints","oldLastNEndpoints","leavingLastNEndpoints","enteringLastNEndpoints","oldForwardedSources","setNewReceiverVideoConstraints","setVideoType","sendSourceVideoType","selectEndpoints","ids","signaling","encodedInsertableStreams","sdpSemantics","bundlePolicy","newConnection","traceablePeerConnection","addLocalTrack","getForwardedSources","localVideo","getLocalAudioTrack","localAudio","pcRemoteTracks","mutePromises","removeLocalTrack","pos","elSelector","sendChannelMessage","setLastN","remoteAudioTracks","LOCAL_STATS_UPDATED","REMOTE_STATS_UPDATED","kSimulcastFormats","layers","target","targetRN","ConnectionQuality","_localStats","connectionQuality","jvbRTT","_lastConnectionQualityUpdate","_remoteStats","_timeIceConnected","_timeVideoUnmuted","ConferenceEvents","_updateLocalConnectionQuality","_broadcastLocalStats","ICE_CONNECTION_STATE_CHANGED","_updateRemoteStats","_updateLocalStats","_maybeUpdateUnmuteTime","LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED","serverRegion","bridgeCount","_calculateConnectionQuality","resolutionName","quality","DESKTOP","activeTPC","getActivePeerConnection","videoQualitySettings","millisSinceStart","simulcastFormat","targetHeight","rampUp","getTarget","maxIncreasePerSecond","prevConnectionQuality","diffSeconds","updateLocalConnectionQuality","isConnectionInterrupted","IceFailedHandling","_actOnIceFailed","explicitlyDisabled","useTerminateForRestart","jvbConnection","jvbConnIceState","_canceled","_iceFailedTimeout","DetectionEvents","DETECTOR_STATE_CHANGE","VAD_NOISY_DEVICE","VAD_REPORT_PUBLISHED","VAD_SCORE_PUBLISHED","VAD_TALK_WHILE_MUTED","NoAudioSignalDetection","_timeoutTrigger","_hasAudioInput","_audioLevel","_trackAdded","_clearTriggerTimeout","_handleAudioInputStateChange","_handleNoAudioInputDetection","_eventFired","_audioTrack","P2PDominantSpeakerDetection","myUserID","createAudioContext","AudioContextImpl","TrackVADEmitter","procNodeSampleRate","vadProcessor","_procNodeSampleRate","_vadProcessor","_localTrack","_bufferResidue","Float32Array","_audioContext","sampleRate","getRequiredPCMFrequency","_vadSampleSize","getSampleLength","_onAudioProcess","_initializeAudioContext","_audioSource","_audioProcessingNode","createScriptProcessor","audioEvent","inData","inputBuffer","getChannelData","completeInData","sampleTimestamp","pcmSample","vadScore","calculateAudioFrameVAD","score","pcmData","_connectAudioGraph","onaudioprocess","destination","_disconnectAudioGraph","_cleanupResources","getDeviceLabel","_destroyed","VADAudioAnalyser","createVADProcessor","_createVADProcessor","_vadEmitter","_isVADEmitterRunning","_detectionServices","_vadInitTracker","_processVADScore","_trackRemoved","addVADDetectionService","vadService","detector","_stopVADEmitter","_startVADEmitter","processVADScore","_changeDetectorsMuteState","changeMuteState","vadEmitter","VADNoiseDetection","_processing","_scoreArray","_audioLvlArray","_active","_calculateNoisyScore","scoreAvg","audioLevelAvg","_setActiveState","_recordValues","avgAudioLvl","_processTimeout","posAudioLevels","VADTalkMutedDetection","_calculateVADScore","E2E_PING_REQUEST","E2E_PING_RESPONSE","ParticipantWrapper","e2eping","requests","lastRequestId","sendRequest","handleResponse","maybeLogRttAndStop","scheduleNext","getDelay","removeParticipant","conferenceSize","totalSeconds","numRequests","maxMessagesPerSecond","requestId","requestMessage","timeSent","Infinity","numRequestsWithResponses","totalNumRequests","E2ePing","maxConferenceSize","participantJoined","participantLeft","messageReceived","conferenceJoined","handleRequest","participantWrapper","Jvb121EventGenerator","_jvb121","evaluateStatus","oldStatus","getParticipantCount","RecordingAdapter","exportRecordedData","setMicDevice","_getAudioStream","SariskaMediaTransport","OggAdapter","_initPromise","_initialize","_mediaRecorder","onstop","_recordedData","format","shouldEnable","_stream","MediaRecorder","ondataavailable","_saveMediaData","AbstractAudioContextAdapter","_sampleRate","_replaceMic","newStream","newSource","WavAdapter","_wavBuffers","_wavLength","_data","_exportMonoWAV","_isInitialized","_createWavHeader","dataLength","buffer","view","DataView","writeUTFBytes","setUint32","setUint16","channelLeft","buffers","len","setUint8","output","offset","inputBuffers","input","sampleCount","bufferCount","o","setInt16","floatTo16BitPCM","string","lng","charCodeAt","FlacAdapter","_onWorkerMessage","_encoder","_stopPromiseResolver","command","_loadWebWorker","_initWorkerPromiseResolver","bps","buf","blob","blobUrl","webkitURL","revokeObjectURL","highPrecisionTime","timing","navigationStart","SessionEventType","freeze","SESSION_STARTED","SEGMENT_STARTED","SEGMENT_ENDED","LOCAL_STORAGE_KEY","sessionManager","_loadMetadata","dataStr","dataObject","Bourne","_sessionsMetadata","_saveMetadata","createSession","sessionToken","sessionTokens","thisSession","newSessionInfo","segments","getSegments","removeSession","_constructSegments","beginSegment","getCurrentSegmentIndex","end","endSegment","sessionStartTime","currentSegment","commit","gapBefore","lastSegment","currentEvent","COMMAND_START","COMMAND_STOP","COMMAND_PING","PROPERTY_STATS","RECORDING_FORMATS","ControllerState","IDLE","STARTING","RECORDING","STOPPING","FAILED","RecordingController","registerEvents","getParticipantsStats","_onStartCommand","_onStopCommand","_onPingCommand","_doStartRecording","_doStopRecording","_updateStats","_switchToNewSession","_registered","addCommandListener","sendCommandOnce","onStateChanged","delegate","_onStateChanged","onNotify","_onNotify","onWarning","_onWarning","startRecording","switchFormat","removeCommand","sendCommand","_getRandomToken","_format","stopRecording","_currentSessionToken","downloadRecordedData","_adapters","fileName","base64Url","style","click","removeChild","downloadBlob","_micDeviceId","String","_state","_isMuted","newFormat","getLocalStats","currentSessionToken","isRecording","recordedBytes","recordedLength","recordingStats","isSelf","localId","_changeState","messageKey","messageParams","_createRecordingAdapter","ReceiverVideoConstraints","_defaultConstraints","defaultConstraints","onStageEndpoints","updateLastN","updateReceiveResolution","updateReceiverVideoConstraints","updateSelectedEndpoints","ReceiveVideoController","_rtc","startLastN","channelLastN","useNewBandwidthAllocationStrategy","remoteEndpointIds","oldConstraints","newConstraints","setPreferredReceiveMaxFrameHeight","setReceiverConstraints","isEndpointsFormat","isSourcesFormat","p2pSession","SendVideoController","_preferredSendMaxFrameHeight","_sourceSenderConstraints","_configureConstraintsForLocalSources","_onSenderConstraintsReceived","_propagateSendMaxFrameHeight","getActiveMediaSession","_senderVideoConstraints","idealHeight","sendMaxFrameHeight","_selectSendMaxFrameHeight","activeMediaSession","setPreferredSendMaxFrameHeight","getFocusRecordingUpdate","jibriStatus","recordingMode","sessionID","getHiddenDomainUpdate","liveStreamViewURLContainer","liveStreamViewURL","modeContainer","sessionIDContainer","getSessionIdFromIq","jibri","getSessionId","sessionIdContainer","isFromFocus","JibriSession","_connection","_setSessionID","setStatus","getID","_sessionID","getInitiator","_initiator","getLiveStreamViewURL","_liveStreamViewURL","getTerminator","_terminator","getMode","setError","setLiveStreamViewURL","appData","broadcastId","_createIQ","recordingXMLUtils","_setErrorFromIq","pathname","AudioOutputProblemDetector","_localAudioLevelCache","_reportedParticipants","_audioProblemCandidates","_numberOfRemoteAudioLevelsReceived","_onLocalAudioLevelsReport","_onRemoteAudioLevelReceived","_clearUserData","numberOfReports","localAudioLevels","remoteAudioLevels","localAudioLevelsString","createAudioOutputProblemEvent","AverageStatReport","calculate","appendReport","ConnectionAvgStats","avgRtpStatsReporter","_n","_sampleIdx","_avgRTT","_avgRemoteRTTMap","_avgRtpStatsReporter","_avgEnd2EndRTT","_onConnectionStats","_calculateAvgStats","_onRemoteStatsUpdated","_processRemoteStats","batchReport","jvbEnd2EndRTT","jvbStatsMonitor","avgRemoteRTT","_calculateAvgRemoteRTT","avgLocalRTT","_resetAvgStats","remoteAvg","avg","validData","rttAvg","AvgRTPStatsReporter","_avgAudioBitrateUp","_avgAudioBitrateDown","_avgVideoBitrateUp","_avgVideoBitrateDown","_avgBandwidthUp","_avgBandwidthDown","_avgPacketLossTotal","_avgPacketLossUp","_avgPacketLossDown","_avgRemoteFPS","_avgRemoteScreenFPS","_avgLocalFPS","_avgLocalScreenFPS","_avgRemoteCameraPixels","_avgRemoteScreenPixels","_avgLocalCameraPixels","_avgLocalScreenPixels","_avgCQ","_cachedTransportStats","_onLocalStatsUpdated","_maybeSendTransportAnalyticsEvent","_onP2PStatusChanged","p2pStatsMonitor","_onJvb121StatusChanged","_resetAvgJvbStats","confSize","_calculateAvgVideoFps","_calculateAvgVideoPixels","peerResolutions","peerPixelsSum","peerCount","myID","peerID","videosResolution","peerAvgPixels","_calculatePeerAvgVideoPixels","videos","peerSsrcCount","peerSsrcPixels","peerFpsSum","videosFps","peerAvgFPS","_calculatePeerAvgVideoFps","peerSsrcFps","transportStats","SpeakerStatsCollector","dominantSpeakerId","SpeakerStats","_onDominantSpeaker","_onUserJoin","_onUserLeave","_onDisplayNameChange","_onFacialExpressionAdd","oldDominantSpeaker","newDominantSpeaker","setDominantSpeaker","savedUser","markAsHasLeft","newName","setDisplayName","addFacialExpression","newStats","speakerStatsToUpdate","newParticipant","totalDominantSpeakerTime","setFacialExpressions","facialExpressions","RecordingResult","wordArray","TrackRecorder","recorder","AUDIO_WEBM","AUDIO_OGG","startRecorder","trackRecorder","stopRecorder","determineCorrectFileType","isTypeSupported","AudioRecorder","jitsiConference","recorders","fileType","instantiateTrackRecorder","updateNames","originalStream","dataEvent","recorderToRemove","getRecordingResults","getFileType","Word","word","begin","getWord","getBeginTime","getEndTime","SphinxService","recordingResult","verify","formatResponse","audioBlob","sphinxURL","toReturn","getURL","audioFileBlob","XMLHttpRequest","onreadystatechange","DONE","responseText","open","setRequestHeader","audioRecorder","objects","filler","BEFORE_STATE","RECORDING_STATE","TRANSCRIBING_STATE","FINISHED_STATE","Transcriber","transcriptionService","counter","transcription","lineLength","blobCallBack","transcriber","getUTCMilliseconds","wordObject","maybeMerge","hasPopulatedArrays","twoDimensionalArray","callBack","merge","arrays","potentialWords","pushWordToSortedArray","lowestWordArray","wordToAdd","updateTranscription","foundSmaller","wordToCompare","getTranscription","ComponentsVersions","processVersions","VideoSIPGWStatusConstants","VideoSIPGWStateConstants","VideoSIPGWErrorConstants","mucResource","getComponentVersion","componentName","STATUS_AVAILABLE","STATUS_UNDEFINED","STATUS_BUSY","STATE_ON","STATE_OFF","STATE_PENDING","STATE_RETRYING","STATE_FAILED","ERROR_NO_CONNECTION","ERROR_SESSION_EXISTS","STATE_CHANGED","JitsiVideoSIPGWSession","sipAddress","VideoSIPGWConstants","_sendJibriIQ","setState","failureReason","oldState","addStateListener","removeStateListener","sipaddress","displayname","nodeTree","VideoSIPGW","sessionStateChangeListener","sessionStateChanged","handleJibriSIPState","Constants","failure_reason","createVideoSIPGWSession","SOURCE_INFO_PRESENCE_ELEMENT","SignalingLayerImpl","ssrcOwners","_localSourceState","_remoteSourceState","_sourceNames","_addLocalSourceInfoToPresence","_doesEndpointSendNewSourceInfo","setChatRoom","oldChatRoom","_audioMuteHandler","_videoMuteHandler","_videoTypeHandler","_sourceInfoHandler","_memberLeftHandler","_bindChatRoomEventHandlers","emitAudioMutedEvent","emitVideoMutedEvent","emitVideoTypeEvent","sourceInfoJSON","emitEventsFromHere","endpointSourceState","newMutedState","oldSourceState","newVideoType","newSourceNames","_findEndpointSourceInfoForMediaType","remoteSourceState","legacyGetPeerMediaInfo","lastPresence","mediaInfo","endpointMediaSource","existingOwner","setTrackMuteStatus","setTrackVideoType","existingName","INITIAL_STATE","localTracksDuration","startedTime","camera","desktop","FINAL_STATE","calculateLocalTrackDuration","newDuration","LocalTracksDuration","newLocalTracksDuration","createLocalTracksDurationEvent","APP","JitsiConference","eventManager","componentsVersions","dtmfManager","somebodySupportsDTMF","wasStopped","avgRtpStatsN","_audioOutputProblemDetector","speakerStatsCollector","deferredStartP2PTask","delay","backToP2PDelay","isP2PConnectionInterrupted","videoSIPGWHandler","recordingManager","_sessions","_chatRoom","getSession","_handleFocusPresence","_handleJibriPresence","_addSession","_emitSessionUpdate","_createSession","_conferenceJoinAnalyticsEventSent","isE2EESupported","_e2eEncryption","_audioSenderLimitReached","_videoSenderLimitReached","handleSubtitles","enableLocalRecording","recordingController","enableAnalytics","iAmRecorder","robot","_room","membersCount","getParticipantsWithoutHidden","resourceCreator","codecSettings","codecSelection","_statsCurrentId","statisticsId","_onIceConnectionInterrupted","_onIceConnectionRestored","_onIceConnectionEstablished","_updateProperties","_sendConferenceJoinAnalyticsEvent","_removeLocalSourceOnReject","_updateRoomPresence","_registerRtcListeners","receiveVideoController","sendVideoController","callStatsThreshold","statisticsDisplayName","callStatsCustomScriptUrl","callStatsConfigParams","enableTalkWhileMuted","_audioAnalyser","vadTalkMutedDetection","enableNoisyMicDetection","vadNoiseDetection","enableNoAudioDetection","_noAudioSignalDetection","hasAudioSignal","jvb121Status","p2pDominantSpeakerDetection","userRegion","transcriptionLanguage","_maybeSetSITimeout","isJoined","isP2PEnabled","isP2PTestModeEnabled","p2pTestMode","onLocalTrackRemoved","_sendConferenceLeftAnalyticsEvent","_delayedIceFailed","_maybeClearSITimeout","leaveError","localtrack","_desktopSharingFrameRate","isAuthEnabled","isLoggedIn","getAuthLogin","getExternalAuthUrl","urlForPopup","getPerformanceStats","longTasksStats","eventId","removeCommandListener","sendTextMessage","sendPrivateTextMessage","nickKey","getTranscriber","localAudioTracks","getTranscriptionStatus","addTrackPromises","_setupNewTrack","_fireMuteChangeEvent","_fireAudioLevelChangeEvent","activeTpc","actorId","_getInitialLocalTracks","trackType","isStartAudioMuted","isStartVideoMuted","muteHandler","audioLevelHandler","oldVideoType","oldTrackBelongsToConference","_doReplaceTrack","replaceTrackPromises","_setNewVideoType","videoTypeChanged","videoTypeTagName","trackVideoType","legacyTypeChanged","presenceChanged","audioMuteChanged","videoMuteChanged","addAsUnmutePromises","removeAsMutePromises","lock","unlock","selectParticipant","selectParticipants","isInteger","RangeError","isVideoActive","features_jigasi","countHidden","grantOwner","revokeOwner","isMyself","isMembersOnly","kickParticipant","_sessionInitiateTimeout","muteMediaType","fullJid","_updateFeatures","_maybeStartOrStopP2P","updateDTMFSupport","botParticipant","mediaSessions","tracksToBeRemoved","kickedParticipantId","kickedParticipant","transportInfo","removedTrack","_onIncomingCallP2P","rejectReason","_shouldBeInP2PMode","_rejectIncomingCall","_acceptP2PIncomingCall","_acceptJvbIncomingCall","_suspendMediaTransferForJvbConnection","webSocket","first","stopOptions","forceJvb121","p2pFailed","_stopP2PSession","isDTMFSupported","pause","peerConnection","startTranscriber","stopTranscriber","getMeetingUniqueId","setStartMutedPolicy","policy","getStartMutedPolicy","removeLocalParticipantProperty","getLocalParticipantProperty","property","overallFeedback","detailedFeedback","getSsrcByTrack","remoteUserId","_fireIncompatibleVersionsEvent","sendEndpointMessage","broadcastEndpointMessage","sendThroughVideobridge","messageType","messageToSend","remoteID","_addRemoteJVBTracks","_addRemoteTracks","_addRemoteP2PTracks","p2pEstablishmentDuration","jvbEstablishmentDuration","done","forceJVB121Ratio","establishmentDurationDiff","_setP2PStatus","_removeRemoteJVBTracks","audioLimitReached","videoLimitReached","_maybeClearDeferredStartP2P","_removeRemoteTracks","_removeRemoteP2PTracks","sessionNickname","_resumeMediaTransferForJvbConnection","_startP2PSession","userLeftEvent","peers","shouldBeInP2P","myId","peersId","hasBotPeer","wasP2PEstablished","skip","muteStatusChanged","audioMuteStatusChanged","videoMuteStatusChanged","getP2PConnectionState","startP2PSession","stopP2PSession","getSpeakerStats","sendFacialExpression","perf","toggleE2EE","setMediaEncryptionKey","isLobbySupported","disableLobby","joinLobby","myLobbyUserId","sendLobbyMessage","addLobbyMessageListener","removeLobbyMessageHandler","lobbyDenyAccess","lobbyApproveAccess","isAVModerationSupported","enableAVModeration","disableAVModeration","avModerationApprove","avModerationReject","getLocalUser","pastMessage","JSON_TYPE_TRANSCRIPTION_RESULT","JSON_TYPE_TRANSLATION_RESULT","translationLanguage","transcriptMessageID","message_id","participantName","newTranscriptMessage","language","final","transcript","is_interim","stability","stable","unstable","finalText","fellowParticipantName","finalPaylaod","startLocalRecording","stopLocalRecording","startSIPVideoCall","stopSIPVideoCall","blacklist","syncWithURL","conferenceConfig","dontParse","paramStr","paramParts","firstParam","part","param","decoded","parseURLParams","initSDKConfig","connectionConfig","clientNode","devConnectionConfig","enableVirtualBackground","enableNoiseCancellation","openBridgeChannel","enableLayerSuspension","DISCO_JIBRI_FEATURE","JitsiConnection","isDev","jwt","parseJwt","errType","errorType","errorMessage","createConnectionFailedEvent","ANALYTICS_CONNECTION_DISCONNECTED","JitsiMediaDevicesEvents","atob","usernameOverride","passwordOverride","setToken","initJitsiConference","getLogs","DEVICE_LIST_CHANGED","PERMISSIONS_CHANGED","PERMISSION_PROMPT_IS_SHOWN","SLOW_GET_USER_MEDIA","AUDIO_PERMISSION_NAME","VIDEO_PERMISSION_NAME","_permissions","_logOutputDevice","permissions","_handlePermissionsChange","_permissionsApiSupported","query","_parsePermissionState","onchange","supported","permissionStatus","deviceID","isDevicePermissionGranted","isMultipleAudioInputSupported","emitEvent","stopActiveDevices","ACTIONS","ProxyConnectionPC","receiveAudio","receiveVideo","_peerConnection","_onError","_onRemoteStream","_onSendMessage","getPeerJid","processMessage","$jingle","ACCEPT","_onSessionAccept","INITIATE","_onSessionInitiate","TERMINATE","_onSessionTerminate","TRANSPORT_INFO","_onTransportInfo","_createPeerConnection","connectionStub","pcConfigStub","roomStub","jitsiRemoteTrack","onRemoteStream","onSendMessage","PRECALL_TEST_RESULTS","_initialized","api","_loadScript","appId","appSecret","disablePrecalltest","execute","makePrecallTest","AudioMixer","_started","_streamsToMix","_streamMSSArray","addMediaStream","_mixedMSD","createMediaStreamDestination","streamMSS","E2ePingEvents","E2E_RTT_CHANGED","timerWorkerScript","JitsiStreamPresenterEffect","videoDiv","firstVideoTrack","_canvas","_ctx","getContext","_desktopElement","_videoElement","_frameRate","autoplay","play","display","_onVideoFrameTimer","_renderVideo","_desktopStream","drawImage","beginPath","lineWidth","strokeStyle","rect","stroke","_videoFrameTimerWorker","captureStream","Module","readyPromiseResolve","moduleOverrides","ENVIRONMENT_IS_WEB","ENVIRONMENT_IS_WORKER","arguments_","importScripts","readBinary","scriptDirectory","currentScript","xhr","responseType","wasmBinary","wasmMemory","out","WebAssembly","HEAPU8","HEAP32","wasmTable","Table","ABORT","updateGlobalBufferAndViews","Int8Array","Int16Array","Int32Array","Uint16Array","Uint32Array","Float64Array","INITIAL_INITIAL_MEMORY","callRuntimeCallbacks","callbacks","func","arg","Memory","byteLength","DYNAMICTOP_PTR","__ATPRERUN__","__ATINIT__","__ATMAIN__","__ATPOSTRUN__","runDependencies","runDependencyWatcher","dependenciesFulfilled","abort","RuntimeError","isDataURI","filename","prefix","path","wasmBinaryFile","getBinary","emscripten_realloc_buffer","grow","___wasm_call_ctors","calledRun","asmLibraryArg","dest","num","copyWithin","requestedSize","oldSize","maxHeapSize","cutDown","overGrownHeapSize","receiveInstance","removeRunDependency","receiveInstantiatedSource","instantiateArrayBuffer","binary","instantiate","instantiateStreaming","instantiateAsync","createWasm","run","doRun","cb","postRun","preRun","runCaller","ready","RnnoiseProcessor","wasmInterface","_wasmInterface","_wasmPcmInput","_malloc","RNNOISE_SAMPLE_LENGTH","_wasmPcmOutput","_free","_wasmPcmInputF32Index","_context","_rnnoise_create","_releaseWasmResources","_copyPCMSampleToWasmBuffer","HEAPF32","_convertTo16BitPCM","f32Array","_rnnoise_destroy","pcmFrame","pcmFrameLength","_rnnoise_process_frame","rnnoiseModule","ScreenshotCaptureEffect","_currentCanvas","_currentCanvasContext","_handleWorkerAction","_initScreenshotCapture","_streamWorker","desktopTrack","_streamHeight","_streamWidth","storedCanvasContext","getImageData","_storedImageData","_handleScreenshot","_shouldProcessScreenshot","nbPixels","diffPixels","pixelmatch","VIRTUAL_BACKGROUND_TYPE","JitsiStreamBackgroundEffect","model","virtualBackground","backgroundType","_virtualImage","crossOrigin","virtualSource","_virtualVideo","_model","_segmentationPixelCount","_onMaskFrameTimer","_outputCanvasElement","_inputVideoElement","_renderMask","runPostProcessing","_outputCanvasCtx","globalCompositeOperation","_segmentationMaskCanvas","_desktopShareDimensions","blurValue","runInference","_runInference","outputMemoryOffset","_getOutputMemoryOffset","background","person","backgroundExp","exp","personExp","_segmentationMask","_segmentationMaskCtx","putImageData","desktopShareTrack","resizeSource","_maskFrameTimerWorker","imageData","inputMemoryOffset","_getInputMemoryOffset","ImageData","onloadeddata","segmentationDimensions","Logger","getAnalyticsAttributesFromOptions","video_requested","ProxyConnectionService","jitsiConnection","_onFatalError","_convertStringToXML","UNAVAILABLE","_selfCloseConnection","xml","xmlDom","DOMParser","parseFromString","isVideo","convertVideoToDesktop","jitsiLocalTracks","createLocalTracks","stringifiedIq","XMLSerializer","serializeToString","onConnectionClosed","createPresenterEffect","MediaStreamTrack","createRnnoiseProcessor","rnnoiseWasmInit","mod","createScreenshotCaptureEffect","createVirtualBackgroundEffect","dispatch","tflite","wasmCheck","simd","createTFLiteSIMDModule","createTFLiteModule","modelBufferOffset","_getModelBufferMemoryOffset","modelResponse","ok","arrayBuffer","_loadModel","constants","recording","BUSY","ERROR","RESOURCE_CONSTRAINT","UNEXPECTED_REQUEST","SERVICE_UNAVAILABLE","FILE","STREAM","sipVideoGW","detection","errors","errorTypes","logLevels","JitsiMediaDevices","enableAnalyticsLogging","enableWindowOnErrorHandler","getGlobalOnErrorHandler","isWebRtcSupported","setLogLevel","setLogLevelById","addGlobalLogTransport","globalTransport","removeGlobalLogTransport","setGlobalLogOptions","oldfirePermissionPromptIsShownEvent","promiseFulfilled","firePermissionPromptIsShownEvent","fireSlowPromiseEvent","restOptions","mStream","currentlyAvailableMediaDevices","setVideoTrackContentHints","createTrackVADEmitter","localAudioDeviceId","createAudioMixer","getActiveAudioDevice","audioDevices","devicePromiseArray","micDevice","devicePromise","outcomeArray","successfulPromises","rejectedPromises","rejectReasons","deviceLabel","isCollectingLocalStats","lineno","colno","setNetworkInfo","createAnalyticsEvent","hint","contentHint","precallTest","util","AuthUtil","isLocalStats","_userId","_isLocalStats","_dominantSpeakerStart","_hasLeft","_facialExpressions","happy","neutral","surprised","angry","fearful","disgusted","sad","getUserId","isDominantSpeaker","isNowDominantSpeaker","timeElapsed","getTotalDominantSpeakerTime","hasLeft","getFacialExpressions","u","y","onload","readbuffer","read","scriptArgs","quit","print","printErr","g","h","w","thisProgram","noExitRuntime","A","I","M","E","R","TextDecoder","S","subarray","decode","fromCharCode","O","HEAP8","HEAP16","HEAPU16","HEAPU32","HEAPF64","INITIAL_MEMORY","C","T","P","H","ne","W","D","L","onAbort","U","preloadedImages","preloadedAudios","F","q","B","N","G","z","X","hrtime","dateNow","Y","J","te","K","Q","V","strings","USER","LOGNAME","PATH","PWD","HOME","LANG","languages","Z","mappings","printChar","varargs","getStr","get64","ee","onExit","re","hardwareConcurrency","asm","monitorRunDependencies","instantiateWasm","_getInputHeight","_getInputWidth","_getInputChannelCount","_getOutputHeight","_getOutputWidth","_getOutputChannelCount","___errno_location","ae","onRuntimeInitialized","preInit","getTokenAuthUrl","urlPattern","roleUpgrade","srcEvent","Function","oldOnErrorHandler","oldOnUnhandledRejection","onunhandledrejection","errHandler","callUnhandledRejectionHandler","randomInt","randomElement","arr","randomHexDigit","randomHexString","randomAlphanumStr","currentExecutingScript","loadScript","prepend","relativeURL","loadCallback","script","referenceNode","scriptEl","scriptSrc","baseScriptSrc","parentNode","insertBefore","char","abs","generateUsername","internals","firstOptions","reviver","protoAction","scan","SyntaxError","__proto__","safeParse","ignoreError","LogCollector","logStorage","stringifyObjects","storeInterval","maxEntryLength","levels","logLevel","_log","storeLogsIntervalID","queue","totalLen","outputCache","someObject","formatLogMessage","prevMessage","prevMessageText","_flush","_reschedulePublishInterval","reschedule","isReady","cachedQueue","storeLogs","consoleTransport","globalTransports","addGlobalTransport","removeGlobalTransport","transportIdx","globalOptions","getCallerInfo","callerInfo","fileLocation","column","disableCallerInfo","transports","logPrefixes","toISOString","fullLogParts","methods","setGlobalOptions","setLevel","TRACE","DEBUG","INFO","LOG","WARN","idLoggers","loggers","curLevel","grammar","reg","subtype","sessionConfig","raddr","maxMessageSize","RegExp","dir2","clksrcExt","mediaClockValue","rateNumerator","rateDenominator","writer","parseParams","parseFmtpConfig","parsePayloads","parseRemoteCandidates","parseImageAttributes","parseSimulcastStreamList","toIntIfInt","parseReg","needsBlank","keyLocation","rawName","attachProperties","validLine","paramReducer","acc","expr","scid","paused","formatRegExp","formatStr","makeLine","defaultOuterOrder","defaultInnerOrder","outerOrder","innerOrder","transformUtils","parseSsrcs","writeSsrcs","processVideo","validateDescription","_buildNewToOldSsrcMap","newSsrcList","oldSsrcList","newSsrc","oldSsrc","_fillInSourceDataFromCache","newSimSsrcs","ssrcsToReplace","ssrcsToAdd","_generateSourceData","addAssociatedStream","_restoreSimulcast","enableConferenceFlag","order","relatedGroup","relatedSsrcs","relatedSSRC","simulcastGroup","nuke","implodeRemoteSimulcast","invalid","assertGoogConference","xGoogleFlag","removeGoogConference","previous_async","only_once","fn","called","noConflict","_toString","_isArray","_each","iterator","_map","_keys","nextTick","setImmediate","completed","eachSeries","iterate","forEachSeries","eachLimit","_eachLimit","forEachLimit","started","running","replenish","doParallel","doSeries","_asyncMap","eachfn","mapSeries","mapLimit","_mapLimit","doParallelLimit","memo","inject","foldl","reduceRight","reversed","foldr","_filter","filterSeries","select","selectSeries","_reject","rejectSeries","main_callback","detect","detectSeries","any","sortBy","criteria","left","right","auto","tasks","remainingTasks","listeners","taskComplete","theCallback","taskCallback","safeResults","rkey","requires","attempts","wrappedTask","wrappedCallback","wrappedResults","retryAttempt","finalAttempt","seriesCallback","series","waterfall","wrapIterator","_parallel","parallel","parallelLimit","makeCallback","_concat","concatSeries","whilst","doWhilst","until","doUntil","worker","concurrency","_insert","drain","saturated","workers","empty","idle","priorityQueue","_compareTasks","sequence","compare","beg","_binarySearch","cargo","working","drained","_console_fn","dir","memoize","hasher","queues","memoized","unmemoized","unmemoize","timesSeries","seq","fns","that","newargs","nextargs","compose","_applyEach","go","applyEach","applyEachSeries","forever","b64","lens","getLens","validLen","placeHoldersLen","toByteArray","Arr","_byteLength","curByte","revLookup","fromByteArray","uint8","extraBytes","maxChunkLength","len2","encodeChunk","lookup","toStringTag","__esModule","default","getFirstMatch","getSecondMatch","matchAndReturnConst","getWindowsVersionName","getMacOSVersionName","getAndroidVersionName","getVersionPrecision","compareVersions","getBrowserAlias","BROWSER_ALIASES_MAP","getBrowserTypeByAlias","BROWSER_MAP","ENGINE_MAP","OS_MAP","PLATFORMS_MAP","Bada","BlackBerry","Chrome","Chromium","Epiphany","Firefox","Focus","Generic","Googlebot","Maxthon","Opera","PhantomJS","Puffin","QupZilla","QQ","QQLite","Safari","Sailfish","SeaMonkey","Sleipnir","Swing","Tizen","Vivaldi","WeChat","Roku","amazon_silk","android","bada","blackberry","chrome","epiphany","firefox","generic","googlebot","google_search","ie","k_meleon","maxthon","edge","mz","naver","opera","opera_coast","phantomjs","puffin","qupzilla","qq","qqlite","safari","sailfish","samsung_internet","seamonkey","sleipnir","swing","tizen","uc","vivaldi","webos","wechat","yandex","tablet","mobile","tv","WindowsPhone","Windows","MacOS","iOS","Android","WebOS","Linux","ChromeOS","PlayStation4","EdgeHTML","Blink","Trident","Presto","Gecko","WebKit","getParser","getResult","_ua","parsedResult","getUA","parseBrowser","describe","getBrowser","getOS","os","parseOS","getOSName","getOSVersion","getPlatform","parsePlatform","getPlatformType","getEngine","engine","parseEngine","getEngineName","isOS","isPlatform","isBrowser","compareVersion","is","versionName","vendor","scriptReadyRegex","fullPageUrl","pageUrl","scripts","supportsScriptReadyState","isNotOpera","hasNativeCurrentScriptAccessor","stackTraceLimit","hasStackBeforeThrowing","hasStackAfterThrowing","getScriptUrlFromStack","skipStackDepth","ignoreMessage","_nearestExecutingScript","eligibleScripts","getScriptFromUrl","getSoleInlineScript","thrownErr","near","far","ReflectOwnKeys","Reflect","ReflectApply","ownKeys","getOwnPropertySymbols","getOwnPropertyNames","NumberIsNaN","errorListener","resolver","eventTargetAgnosticAddListener","addErrorHandlerIfEventEmitter","_events","_eventsCount","_maxListeners","defaultMaxListeners","checkListener","_getMaxListeners","_addListener","existing","warning","newListener","warned","onceWrapper","fired","wrapFn","_onceWrap","wrapped","_listeners","unwrap","evlistener","unwrapListeners","arrayClone","copy","wrapListener","getPrototypeOf","setMaxListeners","getMaxListeners","doError","er","prependListener","prependOnceListener","position","originalListener","spliceOne","rawListeners","eventNames","WINDOW","JS_MD5_NO_WINDOW","WEB_WORKER","NODE_JS","JS_MD5_NO_NODE_JS","global","COMMON_JS","JS_MD5_NO_COMMON_JS","AMD","ARRAY_BUFFER","JS_MD5_NO_ARRAY_BUFFER","HEX_CHARS","EXTRA","SHIFT","OUTPUT_TYPES","BASE64_ENCODE_CHAR","blocks","buffer8","JS_MD5_NO_ARRAY_BUFFER_IS_VIEW","isView","createOutputMethod","outputType","Md5","update","createMethod","method","nodeWrap","eval","Buffer","nodeMethod","createHash","digest","sharedMemory","h0","h1","h2","h3","bytes","hBytes","finalized","hashed","notString","lastByteIndex","finalize","bc","da","hex","base64","v1","v2","v3","base64Str","md5","HASH_UNDEFINED","argsTag","boolTag","dateTag","funcTag","genTag","mapTag","numberTag","objectTag","promiseTag","regexpTag","setTag","stringTag","symbolTag","weakMapTag","arrayBufferTag","dataViewTag","float32Tag","float64Tag","int8Tag","int16Tag","int32Tag","uint8Tag","uint8ClampedTag","uint16Tag","uint32Tag","reFlags","reIsHostCtor","reIsUint","cloneableTags","freeGlobal","freeSelf","freeExports","nodeType","freeModule","moduleExports","addMapEntry","pair","addSetEntry","arrayReduce","iteratee","accumulator","initAccum","isHostObject","mapToArray","overArg","setToArray","uid","arrayProto","funcProto","objectProto","coreJsData","maskSrcKey","IE_PROTO","funcToString","objectToString","reIsNative","getPrototype","objectCreate","propertyIsEnumerable","nativeGetSymbols","nativeIsBuffer","isBuffer","nativeKeys","getNative","WeakMap","nativeCreate","dataViewCtorString","toSource","mapCtorString","promiseCtorString","setCtorString","weakMapCtorString","symbolProto","symbolValueOf","valueOf","Hash","entry","ListCache","MapCache","Stack","__data__","assignValue","object","objValue","eq","assocIndexOf","baseClone","isDeep","isFull","customizer","isObject","isArr","initCloneArray","copyArray","getTag","isFunc","cloneBuffer","isPrototype","initCloneObject","copyObject","getSymbols","copySymbols","baseAssign","cloneFunc","symbol","Ctor","cloneArrayBuffer","dataView","byteOffset","cloneDataView","typedArray","cloneTypedArray","cloneMap","regexp","lastIndex","cloneRegExp","cloneSet","initCloneByTag","stacked","props","keysFunc","symbolsFunc","arrayPush","baseGetAllKeys","getAllKeys","arrayEach","subValue","getMapData","getValue","isFunction","baseIsNative","pairs","LARGE_ARRAY_SIZE","isIndex","other","ctorString","isArrayLike","isLength","inherited","isObjectLike","isArrayLikeObject","isArguments","baseTimes","skipIndexes","arrayLikeKeys","baseKeys","reTrim","reIsBadHex","reIsBinary","reIsOctal","freeParseInt","nativeMax","nativeMin","toNumber","isSymbol","isBinary","wait","lastArgs","lastThis","maxWait","timerId","lastCallTime","lastInvokeTime","leading","maxing","trailing","invokeFunc","thisArg","leadingEdge","timerExpired","shouldInvoke","timeSinceLastCall","trailingEdge","remainingWait","debounced","isInvoking","arrayTag","errorTag","typedArrayTags","freeProcess","nodeUtil","binding","nodeIsTypedArray","isTypedArray","arraySome","predicate","nativeObjectToString","symToStringTag","SetCache","baseGetTag","isOwn","unmasked","getRawTag","baseIsArguments","baseIsEqual","bitmask","equalFunc","objIsArr","othIsArr","objTag","othTag","objIsObj","othIsObj","isSameTag","equalArrays","convert","isPartial","equalByTag","objIsWrapped","othIsWrapped","objUnwrapped","othUnwrapped","objProps","objLength","skipCtor","othValue","compared","objCtor","othCtor","equalObjects","baseIsEqualDeep","arrLength","othLength","seen","arrValue","othIndex","isMasked","resIndex","arrayFilter","baseUnary","isArg","isBuff","isType","img1","img2","isPixelData","defaultOptions","a32","b32","identical","diffMask","drawGrayPixel","alpha","maxDelta","delta","colorDelta","includeAA","antialiased","drawPixel","diffColorAlt","diffColor","aaColor","BYTES_PER_ELEMENT","img","x1","y1","x0","y0","x2","y2","minX","minY","maxX","maxY","zeroes","hasManySiblings","pos2","yOnly","r1","g1","b1","a1","r2","g2","b2","a2","blend","rgb2y","rgb2i","rgb2q","val","SDPUtils","localCName","generateIdentifier","splitLines","splitSections","getDescription","sections","getMediaSections","matchPrefix","parseCandidate","relatedAddress","relatedPort","tcpType","writeCandidate","parseIceOptions","parseRtpMap","parsed","clockRate","numChannels","writeRtpMap","preferredPayloadType","writeExtmap","headerExtension","preferredId","kv","writeFmtp","parseRtcpFb","writeRtcpFb","rtcpFeedback","parseSsrcMedia","sp","colon","parseSsrcGroup","getMid","algorithm","getDtlsParameters","fingerprints","writeDtlsParameters","setupType","fp","parseCryptoLine","cryptoSuite","keyParams","sessionParams","writeCryptoLine","writeCryptoKeyParams","parseCryptoKeyParams","keyMethod","keySalt","lifeTime","mkiValue","mkiLength","getCryptoParameters","getIceParameters","writeIceParameters","iceLite","parseRtpParameters","headerExtensions","fecMechanisms","rtcp","rtpmapline","fmtps","writeRtpDescription","maxptime","extension","parseRtpEncodingParameters","encodingParameters","hasRed","hasUlpfec","flows","apt","encParam","codecPayloadType","rtx","fec","mechanism","parseRtcpParameters","rtcpParameters","remoteSsrc","rsize","reducedSize","compound","mux","writeRtcpParameters","parseMsid","spec","planB","msidParts","parseSctpDescription","maxSizeLine","sctpPort","sctpMapLines","writeSctpDescription","generateSessionId","writeSessionBoilerplate","sessId","sessVer","sessUser","getDirection","getKind","isRejected","parseOLine","netType","addressType","isValidSDP","charAt","global$1","_typeof","_toConsumableArray","arr2","_arrayWithoutHoles","iter","_iterableToArray","_nonIterableSpread","safe_add","lsw","str2binl","bin","md5_cmn","cnt","md5_ff","md5_gg","md5_hh","md5_ii","core_md5","olda","oldb","oldc","oldd","MD5","hexdigest","binarray","hex_tab","binl2hex","binl2str","core_sha1","olde","rol","safe_add$1","sha1_ft","sha1_kt","core_hmac_sha1","bkey","str2binb","ipad","opad","binb2b64","triplet","binb2str","SHA1","b64_hmac_sha1","str_hmac_sha1","str_sha1","utils","cookies","cookieName","expires","cookieObj","isObj","cookieValue","escape","unescape","cookie","Builder","VERSION","NS","HTTPBIND","BOSH","CLIENT","AUTH","ROSTER","PROFILE","DISCO_INFO","DISCO_ITEMS","MUC","SASL","FRAMING","BIND","SESSION","STANZAS","XHTML_IM","XHTML","css","validTag","validAttribute","validCSS","CONNECTING","CONNFAIL","AUTHENTICATING","AUTHFAIL","DISCONNECTED","DISCONNECTING","ATTACHED","REDIRECT","CONNTIMEOUT","BINDREQUIRED","ErrorCondition","BAD_FORMAT","CONFLICT","MISSING_JID_NODE","NO_AUTH_MECH","UNKNOWN_REASON","LogLevel","FATAL","ElementType","NORMAL","TEXT","CDATA","FRAGMENT","SECONDARY_TIMEOUT","addNamespace","forEachChild","elemName","childNodes","childNode","isTagEqual","_xmlGenerator","_makeGenerator","doc","implementation","createDocument","documentMode","_getIEXmlDom","xmlGenerator","docStrings","ActiveXObject","xmlTextNode","xmlescape","xmlunescape","createTextNode","xmlHtmlNode","html","loadXML","getText","nodeValue","copyElement","_i","createHtml","cssText","cssAttrs","cssName","cssValue","_i2","createDocumentFragment","_i3","_i4","escapeNode","unescapeNode","getNodeFromJid","getDomainFromJid","bare","getBareJidFromJid","getResourceFromJid","_handleError","fatal","sourceURL","lineNumber","getNamedItem","_requestId","_connectionPlugins","ptype","moreattrs","removeAttribute","impNode","xmlGen","importNode","newElem","fragment","xhtml","Handler","ns","matchBare","matchBareFromJid","getNamespace","elNamespace","ignoreNamespaceFragment","namespaceMatch","_this","nsMatch","isMatch","elem_type","TimedHandler","period","lastCalled","Connection","_this2","Websocket","Bosh","_sasl_data","do_session","do_bind","timedHandlers","removeTimeds","removeHandlers","addTimeds","addHandlers","protocolErrorHandlers","_idleTimeout","_disconnectTimeout","authenticated","do_authentication","restored","_uniqueId","_sasl_success_handler","_sasl_failure_handler","_sasl_challenge_handler","_onIdle","registerSASLMechanisms","mechanisms","_reset","_requests","getUniqueId","suffix","addProtocolErrorHandler","status_code","hold","route","authcid","authzid","servtype","connect_callback","wind","_attach","restore","_sessionCachingSupported","_restore","sessionStorage","xmlInput","xmlOutput","nextValidRid","_queueData","_this3","timeoutHandler","deleteTimedHandler","addTimedHandler","_this4","iqtype","_sendRestart","_this5","thand","handRef","hand","SASLAnonymous","SASLExternal","SASLMD5","SASLOAuthBearer","SASLXOAuth2","SASLPlain","SASLSHA1","registerSASLMechanism","_addSysTimedHandler","_onDisconnectTimeout","_disconnect","condition","statusChanged","_dataRecv","_this6","_reqToData","strip","_emptyQueue","cond","conflict","UNKOWN_REASON","_i5","_hand","_connect_cb","_callback","bodyWrap","mech","_no_auth_received","sortMechanismsByPriority","higher","swap","_attemptSASLAuth","_attemptLegacyAuth","mechanism_found","_sasl_success_cb","_sasl_failure_cb","_sasl_challenge_cb","_sasl_mechanism","onStart","request_auth_exchange","isClientFirst","onChallenge","btoa","challenge","_onLegacyAuthIQResult","_auth2_cb","_this7","serverSignature","streamfeature_handlers","wrapper","_onStreamFeaturesAfterSASL","explicitResourceBinding","_onResourceBindResultIQ","jidNode","_establishSession","_onSessionResultIQ","_this8","_i6","_thand","SASLMechanism","auth_str","test_cnonce","cnonce","nonce","Hi","U_old","authMessage","attribMatch","clientKey","serverKey","clientSignature","_quote","realm","host","digest_uri","cred","A1","A2","core","Strophe$1","$build$1","Request","sends","xmlData","origFunc","date","NaN","dead","age","timeDead","_newXHR","getResponse","responseXML","documentElement","overrideMimeType","_conn","inactivity","keepalive","_cacheSession","_onRequestStateChange","_throttledRequestHandler","typ","_sendTerminate","_callProtocolErrorHandlers","reqStatus","_getRequestStatus","err_callback","HTTP","_hitError","time_elapsed","def","getAllResponseHeaders","valid_request","too_many_retries","_removeRequest","reqIs0","_restartRequest","_processRequest","primary_timeout","secondary_timeout","server_error","content_type","contentType","withCredentials","e2","sendFunc","customHeaders","backoff","Strophe$2","$build$2","new_service","_buildStream","_check_streamerror","connectstatus","errorString","_onOpen","_connect_cb_wrapper","_handleStreamStart","streamStart","parsedMessage","see_uri","_streamWrap","CLOSED","closeString","rawStanza","firstChild","startString","_items","conn","_onDiscoInfo","_onDiscoItems","addIdentity","lang","var_name","addItem","call_back","items","_buildIQResult","query_attrs","iqresult","logging","autoSendCountOnEveryIncomingStanza","requestResponseInterval","_c","_NS","_isStreamManagementEnabled","_serverProcesssedStanzasCounter","_clientProcessedStanzasCounter","_clientSentStanzasCounter","_originalXMLOutput","_requestHandler","_incomingHandler","_requestResponseIntervalCount","_isSupported","_unacknowledgedStanzas","_acknowledgedStanzaListeners","addAcknowledgedStanzaListener","_resumeToken","_resuming","_originalConnect","_connectArgs","requestAcknowledgement","getOutgoingCounter","getIncomingCounter","_interceptConnectArgs","_originalOnStreamFeaturesAfterSASL","_originalDoDisconnect","_interceptDoDisconnect","_originalDisconnect","_interceptDisconnect","_resumeState","_storedJid","previd","_handleServerRequestHandler","_ackHandler","_handleServerAck","_incomingStanzaHandler","_enabledHandler","_handleEnabled","_resumeFailedHandler","_handleResumeFailed","_resumedHandler","_handleResumed","_increaseSentStanzasCounter","firstElementChild","handledCount","_handleAcknowledgedStanzas","_increaseReceivedStanzasCounter","_answerProcessedStanzas","reportedHandledCount","lastKnownHandledCount","_throwError","byteToHex","bth","_v","_v2","_v3","_v4","_interopRequireDefault","getOutputLength","inputLength8","safeAdd","md5cmn","md5ff","md5gg","md5hh","md5ii","encodeURIComponent","length32","hexTab","md5ToHexEncodedArray","wordsToMd5","length8","bytesToWords","rnds8","msCrypto","ROTL","ceil","_rng","_bytesToUuid","_nodeId","_clockseq","_lastMSecs","_lastNSecs","clockseq","seedBytes","rng","msecs","nsecs","dt","tl","tmh","_md","_default","hashfunc","generateUUID","namespace","stringToBytes","uuidToBytes","DNS","rnds","_sha","validate","Instance","of","support","supportStreaming","bigInt","bulk","exceptions","mutableGlobal","multiValue","saturateConversions","signExtensions","tailCall","threads","references","typeReflection","funcReferences","logDisabled_","deprecationWarnings_","extractVersion","uastring","wrapPeerConnectionEvent","eventNameToWrap","nativeAddEventListener","nativeEventName","modifiedEvent","handleEvent","_eventMap","nativeRemoveEventListener","unwrappedCb","disableLog","bool","disableWarnings","deprecated","oldMethod","newMethod","detectBrowser","mozGetUserMedia","webkitGetUserMedia","isSecureContext","webkitRTCPeerConnection","RTCIceGatherer","compactObject","isEmptyObject","walkStats","resultSet","filterStats","outbound","streamStatsType","filteredResult","trackStats","trackStat","shimGetUserMedia","browserDetails","constraintsToChrome_","cc","exact","oldname_","oc","mix","advanced","shimConstraints_","remap","face","getSupportedFacingModeLies","getSupportedConstraints","dev","shimError_","PermissionDeniedError","PermissionDismissedError","InvalidStateError","DevicesNotFoundError","ConstraintNotSatisfiedError","TrackStartError","MediaDeviceFailedDueToShutdown","MediaDeviceKillSwitchOn","TabCaptureError","ScreenCaptureError","DeviceCaptureError","origGetUserMedia","DOMException","shimGetDisplayMedia","getSourceId","widthSpecified","heightSpecified","frameRateSpecified","shimMediaStream","webkitMediaStream","shimOnTrack","_ontrack","origSetRemoteDescription","_ontrackpoly","Event","dispatchEvent","shimGetSendersWithDtmf","shimSenderWithDtmf","_dtmf","_pc","_senders","origAddTrack","origRemoveTrack","origAddStream","origRemoveStream","origGetSenders","shimGetStats","origGetStats","selector","onSucc","onErr","fixChromeStats_","standardReport","standardStats","localcandidate","remotecandidate","makeMapStats","successCallbackWrapper_","shimSenderReceiverGetStats","origGetReceivers","srcElement","shimAddTrackRemoveTrackWithNative","getLocalStreams","_shimmedLocalStreams","existingSenders","newSenders","newSender","shimAddTrackRemoveTrack","origGetLocalStreams","nativeStreams","_reverseStreams","_streams","replaceInternalStreamId","internalId","externalStream","internalStream","replaceExternalStreamId","alreadyExists","oldStream","nativeMethod","methodObj","origSetLocalDescription","origLocalDescription","getOwnPropertyDescriptor","streamid","shimPeerConnection","fixNegotiationNeeded","getConfiguration","nativeGetUserMedia","nativeGetSettings","applyConstraints","nativeApplyConstraints","preferredMediaSource","mediaSource","RTCTrackEvent","mozRTCPeerConnection","modernStatsTypes","inboundrtp","outboundrtp","candidatepair","nativeGetStats","shimSenderGetStats","shimReceiverGetStats","shimRemoveStream","shimRTCDataChannel","DataChannel","RTCDataChannel","shimAddTransceiver","origAddTransceiver","setParametersPromises","initParameters","shouldPerformCheck","encodingParam","maxFramerate","shimGetParameters","origGetParameters","shimCreateOffer","origCreateOffer","finally","shimCreateAnswer","origCreateAnswer","shimLocalStreamsAPI","_localStreams","_addTrack","shimRemoteStreamsAPI","getRemoteStreams","_remoteStreams","_onaddstream","_onaddstreampoly","shimCallbacksAPI","withCallback","shimConstraints","errcb","shimRTCIceServerUrls","OrigPeerConnection","newIceServers","generateCertificate","shimTrackEventTransceiver","shimCreateOfferLegacy","offerOptions","audioTransceiver","setDirection","videoTransceiver","shimAudioContext","shimRTCIceCandidate","NativeRTCIceCandidate","nativeCandidate","parsedCandidate","augmentedCandidate","toJSON","shimMaxMessageSize","_sctp","sctpInDescription","getRemoteFirefoxVersion","getCanSendMaxMessageSize","remoteIsFirefox","canSendMaxMessageSize","getMaxMessageSize","canSendMMS","remoteMMS","POSITIVE_INFINITY","shimSendThrowTypeError","wrapDcSend","dc","origDataChannelSend","origCreateDataChannel","dataChannel","shimConnectionState","checking","_onconnectionstatechange","origMethod","_connectionstatechangepoly","_lastConnectionState","newEvent","removeExtmapAllowMixed","nativeSRD","shimAddIceCandidateNullOrEmpty","nativeAddIceCandidate","adapter","shimChrome","shimFirefox","shimSafari","commonShim","chromeShim","browserShim","firefoxShim","safariShim","adapterFactory","CAMERA","DESKTOP_HIGH_FPS","NONE","ENVIRONMENT","CREATE_ANSWER_FAILED","CREATE_OFFER_FAILED","DATA_CHANNEL_OPEN","ENDPOINT_CONN_STATUS_CHANGED","LASTN_ENDPOINT_CHANGED","SENDER_VIDEO_CONSTRAINTS_CHANGED","LASTN_VALUE_CHANGED","LOCAL_TRACK_SSRC_UPDATED","TRACK_ATTACHED","REMOTE_TRACK_ADDED","REMOTE_TRACK_REMOVED","SET_LOCAL_DESCRIPTION_FAILED","SET_REMOTE_DESCRIPTION_FAILED","AUDIO_OUTPUT_DEVICE_CHANGED","DEVICE_LIST_WILL_CHANGE","DEVICE_LIST_AVAILABLE","LOCAL_UFRAG_CHANGED","REMOTE_UFRAG_CHANGED","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","loaded","__webpack_modules__","amdO","getter","definition","globalThis","nmd","paths","__webpack_exports__"],"sourceRoot":""}