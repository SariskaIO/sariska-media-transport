{"version":3,"file":"sariska-media-transport.min.js","mappings":"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G,KAAK,IAAI,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,OAAO,OAAO,KAAK,GAAG,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,OAAO,EAAE,KAAK,IAAI,KAAK,IAAI,KAAK,EAAE,KAAK,IAAI,KAAK,EAAE,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,OAAO,EAAE,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,EAAE,OAAO,KAAK,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,OAAO,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,OAAO,WAAW,KAAK,GAAG,KAAK,EAAE,OAAO,MAAM,KAAK,GAAG,KAAK,GAAG,OAAO,GAAG,KAAK,GAAG,KAAK,GAAG,OAAO,KAAK,KAAK,EAAE,OAAO,QAAQ,KAAK,EAAE,OAAO,MAAM,KAAK,GAAG,OAAO,MAAM,KAAK,GAAG,OAAO,MAA2B,KAAK,GAAG,OAAO,IAAI,KAAK,GAAG,OAAO,IAAI,KAAK,GAAG,OAAO,IAAI,KAAK,GAAG,OAAO,IAAI,KAAK,EAAE,OAAO,IAAI,KAAK,IAAI,OAAO,GAAG,KAAK,GAAG,OAAO,GAAG,KAAK,EAAE,OAAO,GAAG,KAAK,EAAE,OAAO,EA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","sources":["webpack://SariskaMediaTransport/webpack/universalModuleDefinition","webpack://SariskaMediaTransport/./node_modules/@hapi/bourne/lib/index.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/logger/lib/LogCollector.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/logger/lib/Logger.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/logger/lib/index.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/sdp-interop/node_modules/sdp-transform/lib/grammar.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/sdp-interop/node_modules/sdp-transform/lib/index.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/sdp-interop/node_modules/sdp-transform/lib/parser.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/sdp-interop/node_modules/sdp-transform/lib/writer.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/sdp-simulcast/lib/index.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/sdp-simulcast/lib/transform-utils.js","webpack://SariskaMediaTransport/./node_modules/async/lib/async.js","webpack://SariskaMediaTransport/./JitsiConferenceErrors.js","webpack://SariskaMediaTransport/./JitsiConferenceEvents.js","webpack://SariskaMediaTransport/./modules/statistics/constants.js","webpack://SariskaMediaTransport/./JitsiTrackErrors.js","webpack://SariskaMediaTransport/./JitsiTrackError.js","webpack://SariskaMediaTransport/./service/statistics/AnalyticsEvents.js","webpack://SariskaMediaTransport/./service/statistics/Events.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/js-utils/browser-detection/browsers.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/js-utils/browser-detection/BrowserDetection.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/js-utils/jitsi-local-storage/index.js","webpack://SariskaMediaTransport/./modules/browser/BrowserCapabilities.js","webpack://SariskaMediaTransport/./modules/browser/index.js","webpack://SariskaMediaTransport/./modules/statistics/AnalyticsAdapter.js","webpack://SariskaMediaTransport/./modules/statistics/CallStats.js","webpack://SariskaMediaTransport/./modules/statistics/LocalStatsCollector.js","webpack://SariskaMediaTransport/./modules/util/MathUtil.js","webpack://SariskaMediaTransport/./modules/statistics/PerformanceObserverStats.js","webpack://SariskaMediaTransport/./service/RTC/MediaType.js","webpack://SariskaMediaTransport/./modules/statistics/RTPStatsCollector.js","webpack://SariskaMediaTransport/./modules/statistics/statistics.js","webpack://SariskaMediaTransport/./JitsiConferenceEventManager.js","webpack://SariskaMediaTransport/./JitsiTrackEvents.js","webpack://SariskaMediaTransport/./modules/connectivity/ParticipantConnectionStatus.js","webpack://SariskaMediaTransport/./JitsiParticipant.js","webpack://SariskaMediaTransport/./JitsiConnectionEvents.js","webpack://SariskaMediaTransport/./JitsiConnectionErrors.js","webpack://SariskaMediaTransport/./modules/util/Deferred.js","webpack://SariskaMediaTransport/./modules/util/Listenable.js","webpack://SariskaMediaTransport/./modules/e2ee/E2EEContext.js","webpack://SariskaMediaTransport/./modules/e2ee/KeyHandler.js","webpack://SariskaMediaTransport/./modules/e2ee/ExternallyManagedKeyHandler.js","webpack://SariskaMediaTransport/./node_modules/uuid/wrapper.mjs","webpack://SariskaMediaTransport/./modules/e2ee/OlmAdapter.js","webpack://SariskaMediaTransport/./modules/e2ee/ManagedKeyHandler.js","webpack://SariskaMediaTransport/./modules/e2ee/crypto-utils.js","webpack://SariskaMediaTransport/./modules/e2ee/E2EEncryption.js","webpack://SariskaMediaTransport/./modules/xmpp/Caps.js","webpack://SariskaMediaTransport/./modules/connectivity/NetworkInfo.js","webpack://SariskaMediaTransport/./modules/xmpp/ResumeTask.js","webpack://SariskaMediaTransport/./modules/util/Retry.js","webpack://SariskaMediaTransport/./modules/xmpp/StropheLastSuccess.js","webpack://SariskaMediaTransport/./modules/xmpp/ConnectionPlugin.js","webpack://SariskaMediaTransport/./modules/xmpp/strophe.ping.js","webpack://SariskaMediaTransport/./modules/xmpp/XmppConnection.js","webpack://SariskaMediaTransport/./JitsiTranscriptionStatus.js","webpack://SariskaMediaTransport/./modules/xmpp/AVModeration.js","webpack://SariskaMediaTransport/./modules/xmpp/BreakoutRooms.js","webpack://SariskaMediaTransport/./modules/xmpp/Lobby.js","webpack://SariskaMediaTransport/./modules/settings/Settings.js","webpack://SariskaMediaTransport/./modules/xmpp/moderator.js","webpack://SariskaMediaTransport/./modules/xmpp/ChatRoom.js","webpack://SariskaMediaTransport/./modules/xmpp/strophe.emuc.js","webpack://SariskaMediaTransport/./modules/flags/FeatureFlags.js","webpack://SariskaMediaTransport/./modules/xmpp/JingleHelperFunctions.js","webpack://SariskaMediaTransport/./modules/RTC/ScreenObtainer.js","webpack://SariskaMediaTransport/./modules/sdp/SDPUtil.js","webpack://SariskaMediaTransport/./modules/sdp/SDP.js","webpack://SariskaMediaTransport/./modules/sdp/SDPDiffer.js","webpack://SariskaMediaTransport/./modules/util/AsyncQueue.js","webpack://SariskaMediaTransport/./modules/xmpp/JingleSessionState.js","webpack://SariskaMediaTransport/./modules/xmpp/JingleSession.js","webpack://SariskaMediaTransport/./modules/xmpp/MediaSessionEvents.js","webpack://SariskaMediaTransport/./modules/xmpp/JingleSessionPC.js","webpack://SariskaMediaTransport/./modules/xmpp/strophe.jingle.js","webpack://SariskaMediaTransport/./modules/xmpp/strophe.logger.js","webpack://SariskaMediaTransport/./modules/xmpp/strophe.rayo.js","webpack://SariskaMediaTransport/./modules/xmpp/strophe.util.js","webpack://SariskaMediaTransport/./modules/xmpp/xmpp.js","webpack://SariskaMediaTransport/./authenticateAndUpgradeRole.js","webpack://SariskaMediaTransport/./modules/RTC/CodecSelection.js","webpack://SariskaMediaTransport/./modules/RTC/BridgeChannel.js","webpack://SariskaMediaTransport/./modules/RTC/RTCUtils.js","webpack://SariskaMediaTransport/./modules/RTC/JitsiTrack.js","webpack://SariskaMediaTransport/./modules/RTC/JitsiLocalTrack.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/sdp-interop/lib/transform.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/sdp-interop/lib/interop.js","webpack://SariskaMediaTransport/./service/RTC/SignalingEvents.js","webpack://SariskaMediaTransport/./service/RTC/SignalingLayer.js","webpack://SariskaMediaTransport/./modules/sdp/SdpTransformUtil.js","webpack://SariskaMediaTransport/./modules/sdp/LocalSdpMunger.js","webpack://SariskaMediaTransport/./modules/sdp/RtxModifier.js","webpack://SariskaMediaTransport/./modules/sdp/SdpConsistency.js","webpack://SariskaMediaTransport/./modules/sdp/SdpSimulcast.ts","webpack://SariskaMediaTransport/./modules/RTC/JitsiRemoteTrack.js","webpack://SariskaMediaTransport/./modules/RTC/TPCUtils.js","webpack://SariskaMediaTransport/./modules/RTC/TraceablePeerConnection.js","webpack://SariskaMediaTransport/./modules/RTC/RTC.js","webpack://SariskaMediaTransport/./service/connectivity/ConnectionQualityEvents.js","webpack://SariskaMediaTransport/./modules/connectivity/ConnectionQuality.js","webpack://SariskaMediaTransport/./modules/connectivity/IceFailedHandling.js","webpack://SariskaMediaTransport/./modules/detection/DetectionEvents.js","webpack://SariskaMediaTransport/./modules/detection/NoAudioSignalDetection.js","webpack://SariskaMediaTransport/./modules/detection/P2PDominantSpeakerDetection.js","webpack://SariskaMediaTransport/./modules/webaudio/WebAudioUtils.js","webpack://SariskaMediaTransport/./modules/detection/TrackVADEmitter.js","webpack://SariskaMediaTransport/./modules/detection/VADAudioAnalyser.js","webpack://SariskaMediaTransport/./modules/detection/VADNoiseDetection.js","webpack://SariskaMediaTransport/./modules/detection/VADTalkMutedDetection.js","webpack://SariskaMediaTransport/./service/e2eping/E2ePingEvents.js","webpack://SariskaMediaTransport/./modules/e2eping/e2eping.js","webpack://SariskaMediaTransport/./modules/event/Jvb121EventGenerator.js","webpack://SariskaMediaTransport/./modules/local-recording/recording/RecordingAdapter.js","webpack://SariskaMediaTransport/./modules/local-recording/recording/OggAdapter.js","webpack://SariskaMediaTransport/./modules/local-recording/recording/AbstractAudioContextAdapter.js","webpack://SariskaMediaTransport/./modules/local-recording/recording/WavAdapter.js","webpack://SariskaMediaTransport/./modules/local-recording/recording/flac/FlacAdapter.js","webpack://SariskaMediaTransport/./modules/local-recording/recording/flac/messageTypes.js","webpack://SariskaMediaTransport/./modules/local-recording/session/SessionManager.js","webpack://SariskaMediaTransport/./modules/local-recording/controller/RecordingController.js","webpack://SariskaMediaTransport/./modules/local-recording/recording/Utils.js","webpack://SariskaMediaTransport/./modules/qualitycontrol/ReceiveVideoController.js","webpack://SariskaMediaTransport/./modules/qualitycontrol/SendVideoController.js","webpack://SariskaMediaTransport/./modules/recording/recordingXMLUtils.js","webpack://SariskaMediaTransport/./modules/recording/JibriSession.js","webpack://SariskaMediaTransport/./modules/recording/RecordingManager.js","webpack://SariskaMediaTransport/./modules/statistics/AudioOutputProblemDetector.js","webpack://SariskaMediaTransport/./modules/statistics/AvgRTPStatsReporter.js","webpack://SariskaMediaTransport/./modules/statistics/SpeakerStatsCollector.js","webpack://SariskaMediaTransport/./modules/transcription/recordingResult.js","webpack://SariskaMediaTransport/./modules/transcription/trackRecorder.js","webpack://SariskaMediaTransport/./modules/transcription/audioRecorder.js","webpack://SariskaMediaTransport/./modules/transcription/word.js","webpack://SariskaMediaTransport/./modules/transcription/transcriptionServices/SphinxTranscriptionService.js","webpack://SariskaMediaTransport/./modules/transcription/transcriptionServices/AbstractTranscriptionService.js","webpack://SariskaMediaTransport/./modules/transcription/transcriber.js","webpack://SariskaMediaTransport/./modules/version/ComponentsVersions.js","webpack://SariskaMediaTransport/./modules/videosipgw/VideoSIPGWConstants.js","webpack://SariskaMediaTransport/./modules/videosipgw/JitsiVideoSIPGWSession.js","webpack://SariskaMediaTransport/./modules/videosipgw/VideoSIPGW.js","webpack://SariskaMediaTransport/./modules/xmpp/SignalingLayerImpl.js","webpack://SariskaMediaTransport/./modules/statistics/LocalTracksDuration.js","webpack://SariskaMediaTransport/./JitsiConference.js","webpack://SariskaMediaTransport/./modules/util/parseURLParams.js","webpack://SariskaMediaTransport/./config/index.js","webpack://SariskaMediaTransport/./JitsiConnection.js","webpack://SariskaMediaTransport/./JitsiMediaDevicesEvents.js","webpack://SariskaMediaTransport/./JitsiMediaDevices.js","webpack://SariskaMediaTransport/./modules/detection/ActiveDeviceDetector.js","webpack://SariskaMediaTransport/./modules/proxyconnection/constants.js","webpack://SariskaMediaTransport/./modules/proxyconnection/ProxyConnectionPC.js","webpack://SariskaMediaTransport/./modules/proxyconnection/ProxyConnectionService.js","webpack://SariskaMediaTransport/./modules/statistics/PrecallTest.js","webpack://SariskaMediaTransport/./modules/webaudio/AudioMixer.js","webpack://SariskaMediaTransport/./modules/stream-effects/presenter/TimeWorker.js","webpack://SariskaMediaTransport/./modules/stream-effects/presenter/JitsiStreamPresenterEffect.js","webpack://SariskaMediaTransport/./node_modules/rnnoise-wasm/dist/index.js","webpack://SariskaMediaTransport/./modules/stream-effects/rnnoise/RnnoiseProcessor.js","webpack://SariskaMediaTransport/./modules/stream-effects/rnnoise/index.js","webpack://SariskaMediaTransport/./modules/stream-effects/screenshot-capture/constants.js","webpack://SariskaMediaTransport/./modules/stream-effects/screenshot-capture/worker.js","webpack://SariskaMediaTransport/./modules/stream-effects/screenshot-capture/ScreenshotCaptureEffect.js","webpack://SariskaMediaTransport/./modules/stream-effects/virtual-background/constants.js","webpack://SariskaMediaTransport/./modules/stream-effects/virtual-background/TimerWorker.js","webpack://SariskaMediaTransport/./modules/stream-effects/virtual-background/JitsiStreamBackgroundEffect.js","webpack://SariskaMediaTransport/./modules/stream-effects/virtual-background/index.js","webpack://SariskaMediaTransport/./SariskaMediaTransport.js","webpack://SariskaMediaTransport/./modules/stream-effects/presenter/index.js","webpack://SariskaMediaTransport/./modules/stream-effects/screenshot-capture/index.js","webpack://SariskaMediaTransport/./modules/recording/recordingConstants.js","webpack://SariskaMediaTransport/./dom/var/arr.js","webpack://SariskaMediaTransport/./dom/var/getProto.js","webpack://SariskaMediaTransport/./dom/var/slice.js","webpack://SariskaMediaTransport/./dom/var/flat.js","webpack://SariskaMediaTransport/./dom/var/push.js","webpack://SariskaMediaTransport/./dom/var/indexOf.js","webpack://SariskaMediaTransport/./dom/var/class2type.js","webpack://SariskaMediaTransport/./dom/var/toString.js","webpack://SariskaMediaTransport/./dom/var/hasOwn.js","webpack://SariskaMediaTransport/./dom/var/fnToString.js","webpack://SariskaMediaTransport/./dom/var/ObjectFunctionString.js","webpack://SariskaMediaTransport/./dom/var/document.js","webpack://SariskaMediaTransport/./dom/core/DOMEval.js","webpack://SariskaMediaTransport/./dom/core/toType.js","webpack://SariskaMediaTransport/./dom/core.js","webpack://SariskaMediaTransport/./dom/var/isWindow.js","webpack://SariskaMediaTransport/./dom/var/support.js","webpack://SariskaMediaTransport/./dom/core/nodeName.js","webpack://SariskaMediaTransport/./dom/var/documentElement.js","webpack://SariskaMediaTransport/./dom/var/pop.js","webpack://SariskaMediaTransport/./dom/selector/var/whitespace.js","webpack://SariskaMediaTransport/./dom/var/isIE.js","webpack://SariskaMediaTransport/./dom/selector/rbuggyQSA.js","webpack://SariskaMediaTransport/./dom/selector/contains.js","webpack://SariskaMediaTransport/./dom/selector/escapeSelector.js","webpack://SariskaMediaTransport/./dom/var/sort.js","webpack://SariskaMediaTransport/./dom/selector/uniqueSort.js","webpack://SariskaMediaTransport/./dom/selector.js","webpack://SariskaMediaTransport/./dom/core/access.js","webpack://SariskaMediaTransport/./dom/var/rnothtmlwhite.js","webpack://SariskaMediaTransport/./dom/attributes/attr.js","webpack://SariskaMediaTransport/./dom/attributes/prop.js","webpack://SariskaMediaTransport/./dom/core/stripAndCollapse.js","webpack://SariskaMediaTransport/./dom/core/var/rsingleTag.js","webpack://SariskaMediaTransport/./dom/traversing/var/rneedsContext.js","webpack://SariskaMediaTransport/./dom/traversing/findFilter.js","webpack://SariskaMediaTransport/./dom/core/init.js","webpack://SariskaMediaTransport/./dom/attributes/classes.js","webpack://SariskaMediaTransport/./dom/exports/global.js","webpack://SariskaMediaTransport/./dom/attributes/val.js","webpack://SariskaMediaTransport/./dom/core/parseXML.js","webpack://SariskaMediaTransport/./dom/manipulation.js","webpack://SariskaMediaTransport/./dom/jquery.js","webpack://SariskaMediaTransport/./index.js","webpack://SariskaMediaTransport/./modules/statistics/SpeakerStats.js","webpack://SariskaMediaTransport/./modules/stream-effects/virtual-background/tflite-simd.js","webpack://SariskaMediaTransport/./modules/stream-effects/virtual-background/tflite.js","webpack://SariskaMediaTransport/./modules/util/AuthUtil.js","webpack://SariskaMediaTransport/./modules/util/EventEmitterForwarder.js","webpack://SariskaMediaTransport/./modules/util/GlobalOnErrorHandler.js","webpack://SariskaMediaTransport/./modules/util/RandomUtil.js","webpack://SariskaMediaTransport/./modules/util/ScriptUtil.js","webpack://SariskaMediaTransport/./modules/util/StringUtils.js","webpack://SariskaMediaTransport/./modules/util/UsernameGenerator.js","webpack://SariskaMediaTransport/./service/RTC/BridgeVideoType.js","webpack://SariskaMediaTransport/./service/RTC/CameraFacingMode.js","webpack://SariskaMediaTransport/./service/RTC/CodecMimeType.js","webpack://SariskaMediaTransport/./service/RTC/MediaDirection.js","webpack://SariskaMediaTransport/./service/RTC/RTCEvents.js","webpack://SariskaMediaTransport/./service/RTC/Resolutions.js","webpack://SariskaMediaTransport/./service/RTC/VideoType.js","webpack://SariskaMediaTransport/./service/authentication/AuthenticationEvents.js","webpack://SariskaMediaTransport/./service/statistics/constants.js","webpack://SariskaMediaTransport/./service/xmpp/XMPPEvents.js","webpack://SariskaMediaTransport/./node_modules/base64-js/index.js","webpack://SariskaMediaTransport/./node_modules/bowser/es5.js","webpack://SariskaMediaTransport/./node_modules/current-executing-script/dist/currentExecutingScript.js","webpack://SariskaMediaTransport/./node_modules/events/events.js","webpack://SariskaMediaTransport/./node_modules/js-md5/src/md5.js","webpack://SariskaMediaTransport/./node_modules/lodash.clonedeep/index.js","webpack://SariskaMediaTransport/./node_modules/lodash.debounce/index.js","webpack://SariskaMediaTransport/./node_modules/lodash.isequal/index.js","webpack://SariskaMediaTransport/./node_modules/pixelmatch/index.js","webpack://SariskaMediaTransport/./node_modules/sdp-transform/lib/grammar.js","webpack://SariskaMediaTransport/./node_modules/sdp-transform/lib/index.js","webpack://SariskaMediaTransport/./node_modules/sdp-transform/lib/parser.js","webpack://SariskaMediaTransport/./node_modules/sdp-transform/lib/writer.js","webpack://SariskaMediaTransport/./node_modules/sdp/sdp.js","webpack://SariskaMediaTransport/./node_modules/strophe.js/dist/strophe.umd.js","webpack://SariskaMediaTransport/./node_modules/strophejs-plugin-disco/lib/strophe.disco.js","webpack://SariskaMediaTransport/./node_modules/strophejs-plugin-stream-management/lib/strophe.stream-management.js","webpack://SariskaMediaTransport/./node_modules/uuid/dist/bytesToUuid.js","webpack://SariskaMediaTransport/./node_modules/uuid/dist/index.js","webpack://SariskaMediaTransport/./node_modules/uuid/dist/md5-browser.js","webpack://SariskaMediaTransport/./node_modules/uuid/dist/rng-browser.js","webpack://SariskaMediaTransport/./node_modules/uuid/dist/sha1-browser.js","webpack://SariskaMediaTransport/./node_modules/uuid/dist/v1.js","webpack://SariskaMediaTransport/./node_modules/uuid/dist/v3.js","webpack://SariskaMediaTransport/./node_modules/uuid/dist/v35.js","webpack://SariskaMediaTransport/./node_modules/uuid/dist/v4.js","webpack://SariskaMediaTransport/./node_modules/uuid/dist/v5.js","webpack://SariskaMediaTransport/./node_modules/wasm-check/dist/wasm-check.min.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/utils.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/chrome/getusermedia.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/chrome/getdisplaymedia.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/chrome/chrome_shim.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/firefox/getusermedia.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/firefox/getdisplaymedia.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/firefox/firefox_shim.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/safari/safari_shim.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/common_shim.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/adapter_core.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/adapter_factory.js","webpack://SariskaMediaTransport/webpack/bootstrap","webpack://SariskaMediaTransport/webpack/runtime/amd options","webpack://SariskaMediaTransport/webpack/runtime/compat get default export","webpack://SariskaMediaTransport/webpack/runtime/define property getters","webpack://SariskaMediaTransport/webpack/runtime/global","webpack://SariskaMediaTransport/webpack/runtime/hasOwnProperty shorthand","webpack://SariskaMediaTransport/webpack/runtime/make namespace object","webpack://SariskaMediaTransport/webpack/runtime/node module decorator","webpack://SariskaMediaTransport/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SariskaMediaTransport\"] = factory();\n\telse\n\t\troot[\"SariskaMediaTransport\"] = factory();\n})(self, function() {\nreturn ","'use strict';\n\n\nconst internals = {\n    suspectRx: /\"(?:_|\\\\u005[Ff])(?:_|\\\\u005[Ff])(?:p|\\\\u0070)(?:r|\\\\u0072)(?:o|\\\\u006[Ff])(?:t|\\\\u0074)(?:o|\\\\u006[Ff])(?:_|\\\\u005[Ff])(?:_|\\\\u005[Ff])\"\\s*\\:/\n};\n\n\nexports.parse = function (text, ...args) {\n\n    // Normalize arguments\n\n    const firstOptions = typeof args[0] === 'object' && args[0];\n    const reviver = args.length > 1 || !firstOptions ? args[0] : undefined;\n    const options = (args.length > 1 && args[1]) || firstOptions || {};\n\n    // Parse normally, allowing exceptions\n\n    const obj = JSON.parse(text, reviver);\n\n    // options.protoAction: 'error' (default) / 'remove' / 'ignore'\n\n    if (options.protoAction === 'ignore') {\n        return obj;\n    }\n\n    // Ignore null and non-objects\n\n    if (!obj ||\n        typeof obj !== 'object') {\n\n        return obj;\n    }\n\n    // Check original string for potential exploit\n\n    if (!text.match(internals.suspectRx)) {\n        return obj;\n    }\n\n    // Scan result for proto keys\n\n    exports.scan(obj, options);\n\n    return obj;\n};\n\n\nexports.scan = function (obj, options = {}) {\n\n    let next = [obj];\n\n    while (next.length) {\n        const nodes = next;\n        next = [];\n\n        for (const node of nodes) {\n            if (Object.prototype.hasOwnProperty.call(node, '__proto__')) {      // Avoid calling node.hasOwnProperty directly\n                if (options.protoAction !== 'remove') {\n                    throw new SyntaxError('Object contains forbidden prototype property');\n                }\n\n                delete node.__proto__;\n            }\n\n            for (const key in node) {\n                const value = node[key];\n                if (value &&\n                    typeof value === 'object') {\n\n                    next.push(node[key]);\n                }\n            }\n        }\n    }\n};\n\n\nexports.safeParse = function (text, reviver) {\n\n    try {\n        return exports.parse(text, reviver);\n    }\n    catch (ignoreError) {\n        return null;\n    }\n};\n","/* Copyright @ 2016-present 8x8, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Logger = require('./Logger.js');\n\n/**\n * Creates new <tt>LogCollector</tt>. Class implements <tt>LoggerTransport</tt>\n * and thus can be added as global transport in order to capture all the logs.\n *\n * It captures subsequent log lines created whenever <tt>Logger</tt> logs\n * a message and stores them in a queue in order to batch log entries. There are\n * time and size limit constraints which determine how often batch entries are\n * stored. Whenever one of these limits is exceeded the <tt>LogCollector</tt>\n * will use the <tt>logStorage</tt> object given as an argument to save\n * the batch log entry.\n *\n * @param {Object} logStorage an object which allows to store the logs collected\n * @param {function(string|object[])} logStorage.storeLogs a method called when\n * this <tt>LogCollector</tt> requests log entry storage. The method's argument\n * is an array which can contain <tt>string</tt>s and <tt>object</tt>s. If given\n * item is an object it means that it's an aggregated message. That is a message\n * which is the same as the previous one and it's representation has\n * the following format:\n * {\n *   {string} text: 'the text of some duplicated message'\n *   {number} count: 3 // how many times the message appeared in a row\n * }\n * If a message \"B\" after an aggregated message \"A\" is different, then it breaks\n * the sequence of \"A\". Which means that even if the next message \"C\" is\n * the same as \"A\" it will start a new aggregated message \"C\".\n * @param {function()} logStorage.isReady a method which should return\n * a <tt>boolean</tt> to tell the collector that it's ready to store. During the\n * time storage is not ready log batches will be cached and stored on the next\n * occasion (flush or interval timeout).\n *\n * @param {Object} options the <tt>LogCollector</tt> configuration options.\n * @param {number} options.maxEntryLength the size limit for a single log entry\n * to be stored. The <tt>LogCollector</tt> will push the entry as soon as it\n * reaches or exceeds this limit given that <tt>logStorage.isReady</tt>\n * returns <tt>true</tt>. Otherwise the log entry will be cached until the log\n * storage becomes ready. Note that the \"is ready\" condition is checked every\n * <tt>options.storeInterval</tt> milliseconds.\n * @param {number} options.storeInterval how often the logs should be stored in\n * case <tt>maxEntryLength</tt> was not exceeded.\n * @param {boolean} options.stringifyObjects indicates whether or not object\n * arguments should be \"stringified\" with <tt>JSON.stringify</tt> when a log\n * message is composed. Note that objects logged on the error log level are\n * always stringified.\n *\n * @constructor\n */\nfunction LogCollector(logStorage, options) {\n    this.logStorage = logStorage;\n    this.stringifyObjects = options && options.stringifyObjects ? options.stringifyObjects : false;\n    this.storeInterval = options && options.storeInterval ? options.storeInterval: 30000;\n    this.maxEntryLength = options && options.maxEntryLength ? options.maxEntryLength : 10000;\n    // Bind the log method for each level to the corresponding method name\n    // in order to implement \"global log transport\" object.\n    Object.keys(Logger.levels).forEach(\n    function (logLevel) {\n        var methodName = Logger.levels[logLevel];\n        this[methodName] = function () {\n            this._log.apply(this, arguments);\n        }.bind(this, logLevel);\n    }.bind(this));\n    /**\n     * The ID of store logs interval if one is currently scheduled or\n     * <tt>null</tt> otherwise.\n     * @type {number|null}\n     */\n    this.storeLogsIntervalID = null;\n    /**\n     * The log messages that are to be batched into log entry when\n     * {@link LogCollector._flush} method is called.\n     * @type {string[]}\n     */\n    this.queue = [];\n    /**\n     * The total length of all messages currently stored in the {@link queue}.\n     * @type {number}\n     */\n    this.totalLen = 0;\n    /**\n     * An array used to temporarily store log batches, before the storage gets\n     * ready.\n     * @type {string[]}\n     */\n    this.outputCache = [];\n}\n\n/**\n * Method called inside of {@link formatLogMessage} in order to covert an\n * <tt>Object</tt> argument to string. The conversion will happen when either\n * 'stringifyObjects' option is enabled or on the {@link Logger.levels.ERROR}\n * log level. The default implementation uses <tt>JSON.stringify</tt> and\n * returns \"[object with circular refs?]\" instead of an object if it fails.\n *\n * @param {object} someObject the <tt>object</tt> to be stringified.\n *\n * @return {string} the result of <tt>JSON.stringify</tt> or\n * \"[object with circular refs?]\" if any error occurs during \"stringification\".\n *\n * @protected\n */\nLogCollector.prototype.stringify = function (someObject) {\n    try {\n        return JSON.stringify(someObject);\n    } catch (error) {\n        return '[object with circular refs?]';\n    }\n};\n\n/**\n * Formats log entry for the given logging level and arguments passed to the\n * <tt>Logger</tt>'s log method. The first argument is log level and the next\n * arguments have to be captured using JS built-in 'arguments' variable.\n *\n * @param {Logger.levels} logLevel provides the logging level of the message to\n * be logged.\n * @param {Date} timestamp - The {@code Date} when a message has been logged.\n *\n * @return {string|null} a non-empty string representation of the log entry\n * crafted from the log arguments. If the return value is <tt>null</tt> then\n * the message wil be discarded by this <tt>LogCollector</tt>.\n *\n * @protected\n */\nLogCollector.prototype.formatLogMessage = function (\nlogLevel /* timestamp, arg2, arg3, arg4... */) {\n    var msg = '';\n    for (var i = 1, len = arguments.length; i < len; i++) {\n        var arg = arguments[i];\n        // objects logged on error level are always converted to JSON\n        if ((this.stringifyObjects || logLevel === Logger.levels.ERROR) &&\n            typeof arg === 'object') {\n            arg = this.stringify(arg);\n        }\n        msg += arg;\n        if (i !== len - 1) {\n            msg += ' ';\n        }\n    }\n    return msg.length ? msg : null;\n};\n\n/**\n * The log method bound to each of the logging levels in order to implement\n * \"global log transport\" object.\n *\n * @private\n */\nLogCollector.prototype._log = function() {\n\n    // var logLevel = arguments[0]; first argument is the log level\n    var timestamp = arguments[1];\n    var msg = this.formatLogMessage.apply(this, arguments);\n    if (msg) {\n        // The same as the previous message aggregation logic\n        var prevMessage = this.queue[this.queue.length - 1];\n        var prevMessageText = prevMessage && prevMessage.text;\n        if (prevMessageText === msg) {\n            prevMessage.count += 1;\n        } else {\n            this.queue.push({\n                text: msg,\n                timestamp: timestamp,\n                count: 1\n            });\n            this.totalLen += msg.length;\n        }\n    }\n\n    if (this.totalLen >= this.maxEntryLength) {\n        this._flush(true /* force */, true /* reschedule */);\n    }\n};\n\n/**\n * Starts periodical \"store logs\" task which will be triggered at the interval\n * specified in the constructor options.\n */\nLogCollector.prototype.start = function () {\n    this._reschedulePublishInterval();\n};\n\n/**\n * Reschedules the periodical \"store logs\" task which will store the next batch\n * log entry in the storage.\n * @private\n */\nLogCollector.prototype._reschedulePublishInterval = function () {\n    if (this.storeLogsIntervalID) {\n        window.clearTimeout(this.storeLogsIntervalID);\n        this.storeLogsIntervalID = null;\n    }\n    // It's actually a timeout, because it is rescheduled on every flush\n    this.storeLogsIntervalID = window.setTimeout(\n        this._flush.bind(\n            this, false /* do not force */, true /* reschedule */),\n        this.storeInterval);\n};\n\n/**\n * Call this method to flush the log entry buffer and store it in the log\n * storage immediately (given that the storage is ready).\n */\nLogCollector.prototype.flush = function() {\n    this._flush(\n        false /* do not force, as it will not be stored anyway */,\n        true /* reschedule next update */ );\n};\n\n/**\n * Stores the next batch log entry in the log storage.\n * @param {boolean} force enforce current logs batch to be stored or cached if\n * there is anything to be logged, but the storage is not ready yet. One of\n * legitimate reasons to force is when the logs length exceeds size limit which\n * could result in truncation.\n * @param {boolean} reschedule <tt>true</tt> if the next periodic task should be\n * scheduled after the log entry is stored. <tt>false</tt> will end the periodic\n * task cycle.\n * @private\n */\nLogCollector.prototype._flush = function(force, reschedule) {\n    // Publish only if there's anything to be logged\n    if (this.totalLen > 0 && (this.logStorage.isReady() || force)) {\n        //FIXME avoid truncating\n        // right now we don't care if the message size is \"slightly\" exceeded\n        if (this.logStorage.isReady()) {\n            // Sends all cached logs\n            if (this.outputCache.length) {\n                this.outputCache.forEach(\n                    function (cachedQueue) {\n                        this.logStorage.storeLogs(cachedQueue);\n                    }.bind(this)\n                );\n                // Clear the cache\n                this.outputCache = [];\n            }\n            // Send current batch\n            this.logStorage.storeLogs(this.queue);\n        } else {\n            this.outputCache.push(this.queue);\n        }\n\n        this.queue = [];\n        this.totalLen = 0;\n    }\n\n    if (reschedule) {\n        this._reschedulePublishInterval();\n    }\n};\n\n/**\n * Stops the periodical \"store logs\" task and immediately stores any pending\n * log entries as a batch.\n */\nLogCollector.prototype.stop = function() {\n    // Flush and stop publishing logs\n    this._flush(false /* do not force */, false /* do not reschedule */);\n};\n\nmodule.exports = LogCollector;\n","/* Copyright @ 2015-present 8x8, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/*jslint latedef:false*/\n\n/**\n * Ordered log levels.\n */\nvar levels = {\n    \"trace\": 0,\n    \"debug\": 1,\n    \"info\": 2,\n    \"log\": 3,\n    \"warn\": 4,\n    \"error\": 5\n};\n\n/**\n * The default transport - console\n * @type LoggerTransport\n */\nLogger.consoleTransport = console;\n\n/**\n * The array which stores currently registered global transports.\n * @type {[LoggerTransport]}\n */\nvar globalTransports = [ Logger.consoleTransport ];\n\n/**\n * Adds given {@link LoggerTransport} instance to the list of global\n * transports which means that it'll be used by all {@link Logger}s\n * @param {LoggerTransport} transport\n */\nLogger.addGlobalTransport = function(transport) {\n    if (globalTransports.indexOf(transport) === -1) {\n        globalTransports.push(transport);\n    }\n};\n\n/**\n * Removes given {@link LoggerTransport} instance from the list of global\n * transports\n * @param {LoggerTransport} transport\n */\nLogger.removeGlobalTransport = function(transport) {\n    var transportIdx = globalTransports.indexOf(transport);\n    if (transportIdx !== -1) {\n        globalTransports.splice(transportIdx, 1);\n    }\n};\n\n/**\n * The global configuration options.\n */\nvar globalOptions = {};\n\n/**\n * Sets global options which will be used by all loggers. Changing these works\n * even after other loggers are created.\n */\nLogger.setGlobalOptions = function(options) {\n    globalOptions = options || {};\n};\n\n/**\n * Parses Error's object stack trace and extracts information about the last\n * caller before the log method was called.\n * @returns JS object with info about the caller - method name, file location,\n * line and column.\n */\nfunction getCallerInfo() {\n    var callerInfo = {\n        methodName: \"\",\n        fileLocation: \"\",\n        line: null,\n        column: null\n    };\n    //gets the part of the stack without the logger wrappers\n    var error = new Error();\n    var stack = error.stack? error.stack.split(\"\\n\") : [];\n    if(!stack || stack.length < 3) {\n        return callerInfo;\n    }\n    var m = null;\n    if(stack[3]) {\n        m = stack[3].match(/\\s*at\\s*(.+?)\\s*\\((\\S*)\\s*:(\\d*)\\s*:(\\d*)\\)/);\n    }\n    if(!m || m.length <= 4) {\n        //Firefox && Safari\n        if(stack[2].indexOf(\"log@\") === 0){\n            //Safari\n            callerInfo.methodName = stack[3].substr(0, stack[3].indexOf(\"@\"));\n        } else {\n            //Firefox\n            callerInfo.methodName = stack[2].substr(0, stack[2].indexOf(\"@\"));\n        }\n        return callerInfo;\n    }\n\n    callerInfo.methodName = m[1];\n    callerInfo.fileLocation = m[2];\n    callerInfo.line = m[3];\n    callerInfo.column = m[4];\n    return callerInfo;\n}\n\n/**\n * Logs messages using the transports and level from the logger.\n * @param logger a logger instance.\n * @param level the log level of the message. See the levels variable.\n * @param arguments array with arguments that will be logged.\n */\nfunction log() {\n    var logger = arguments[0], level = arguments[1],\n        args = Array.prototype.slice.call(arguments, 2);\n    if(levels[level] < logger.level) {\n        return;\n    }\n\n    var callerInfo\n        = !(logger.options.disableCallerInfo || globalOptions.disableCallerInfo) &&\n            getCallerInfo();\n    var transports = globalTransports.concat(logger.transports);\n    for(var i = 0; i < transports.length; i++) {\n        var t = transports[i];\n        var l = t[level];\n        if(l && typeof(l) === \"function\") {\n            var logPrefixes = [];\n\n            logPrefixes.push(new Date().toISOString());\n\n            if (logger.id) {\n                logPrefixes.push(\"[\" + logger.id + \"]\");\n            }\n\n            if (callerInfo && callerInfo.methodName.length > 1) {\n                logPrefixes.push(\"<\" + callerInfo.methodName + \">: \");\n            }\n\n            var fullLogParts = logPrefixes.concat(args);\n\n            l.bind(t).apply(t, fullLogParts);\n        }\n    }\n}\n\n/**\n *\n * Constructs new logger object.\n * @param level the logging level for the new logger\n * @param id optional identifier for the logger instance.\n * @param {LoggerTransport} transports optional list of handlers(objects) for\n * the logs. The handlers must support - log, warn, error, debug, info, trace.\n * @param options optional configuration file for how the logger should behave.\n * @param {boolean} options.disableCallerInfo Whether the call site of a logger\n * method invocation should be included in the log. Defaults to false, so the\n * call site will be included.\n */\nfunction Logger(level, id, transports, options) {\n    this.id = id;\n    this.options = options || {};\n    this.transports = transports;\n    if(!this.transports) {\n        this.transports = [];\n    }\n    this.level = levels[level];\n    var methods = Object.keys(levels);\n    for(var i = 0; i < methods.length; i++){\n        this[methods[i]] =\n            log.bind(null, this, methods[i]);\n    }\n}\n\n/**\n * Sets the log level for the logger.\n * @param level the new log level.\n */\nLogger.prototype.setLevel = function (level) {\n    this.level = levels[level];\n};\nmodule.exports = Logger;\n\n/**\n * Enum for the supported log levels.\n */\nLogger.levels = {\n    TRACE: \"trace\",\n    DEBUG: \"debug\",\n    INFO: \"info\",\n    LOG: \"log\",\n    WARN: \"warn\",\n    ERROR: \"error\"\n};\n","/* Copyright @ 2015-present 8x8, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Logger = require(\"./Logger\");\nvar LogCollector = require(\"./LogCollector\");\n\n/**\n * Definition of the log method\n * @name log_method\n * @function\n * @param {...*} log_args the arguments to be logged\n */\n/**\n * The logger's transport type definition.\n *\n * @typedef {object} LoggerTransport\n *\n * @property {log_method} trace method called to log on {@link Logger.levels.TRACE} logging level\n * @property {log_method} debug method called to log on {@link Logger.levels.DEBUG} logging level\n * @property {log_method} info method called to log on {@link Logger.levels.INFO} logging level\n * @property {log_method} log method called to log on {@link Logger.levels.LOG} logging level\n * @property {log_method} warn method called to log on {@link Logger.levels.WARN} logging level\n * @property {log_method} error method called to log on {@link Logger.levels.ERROR} logging level\n */\n\n/**\n * Map with the created loggers with ID.\n */\nvar idLoggers = {};\n\n/**\n * Array with the loggers without id.\n */\nvar loggers = [];\n\n/**\n * Log level for the lbrary.\n */\nvar curLevel = Logger.levels.TRACE;\n\n\nmodule.exports = {\n    /**\n     * Adds given {@link LoggerTransport} instance to the list of global\n     * transports which means that it'll be used by all {@link Logger}s\n     * @param {LoggerTransport} transport\n     */\n    addGlobalTransport: function(transport) {\n        Logger.addGlobalTransport(transport);\n    },\n    /**\n     * Removes given {@link LoggerTransport} instance from the list of global\n     * transports\n     * @param {LoggerTransport} transport\n     */\n    removeGlobalTransport: function(transport) {\n        Logger.removeGlobalTransport(transport);\n    },\n    /**\n    * Sets global options which will be used by all loggers. Changing these\n    * works even after other loggers are created.\n    */\n    setGlobalOptions: function(options) {\n        Logger.setGlobalOptions(options);\n    },\n    /**\n     * Creates new logger.\n     * @arguments the same as Logger constructor\n     */\n    getLogger: function(id, transports, options) {\n        var logger = new Logger(curLevel, id, transports, options);\n        if(id) {\n            idLoggers[id] = idLoggers[id] || [];\n            idLoggers[id].push(logger);\n        } else {\n            loggers.push(logger);\n        }\n        return logger;\n    },\n    /**\n     * Changes the log level for the existing loggers by id.\n     * @param level the new log level.\n     * @param id if specified the level will be changed only for loggers with the\n     * same id. Otherwise the operation will affect all loggers that don't\n     * have id.\n     */\n    setLogLevelById: function(level, id) {\n        var l = id? (idLoggers[id] || []) : loggers;\n        for(var i = 0; i < l.length; i++) {\n            l[i].setLevel(level);\n        }\n    },\n    /**\n     * Changes the log level for all existing loggers.\n     * @param level the new log level.\n     */\n    setLogLevel: function (level) {\n        curLevel = level;\n        var i = 0;\n        for(; i < loggers.length; i++) {\n            loggers[i].setLevel(level);\n        }\n\n        for(var id in idLoggers) {\n            var l = idLoggers[id] || [];\n            for(i = 0; i < l.length; i++) {\n                l[i].setLevel(level);\n            }\n        }\n    },\n    /**\n     * The supported log levels.\n     */\n    levels: Logger.levels,\n    /**\n     * Exports the <tt>LogCollector</tt>.\n     */\n    LogCollector: LogCollector\n};\n","var grammar = module.exports = {\n  v: [{\n    name: 'version',\n    reg: /^(\\d*)$/\n  }],\n  o: [{\n    // o=- 20518 0 IN IP4 203.0.113.1\n    // NB: sessionId will be a String in most cases because it is huge\n    name: 'origin',\n    reg: /^(\\S*) (\\d*) (\\d*) (\\S*) IP(\\d) (\\S*)/,\n    names: ['username', 'sessionId', 'sessionVersion', 'netType', 'ipVer', 'address'],\n    format: '%s %s %d %s IP%d %s'\n  }],\n  // default parsing of these only (though some of these feel outdated)\n  s: [{ name: 'name' }],\n  i: [{ name: 'description' }],\n  u: [{ name: 'uri' }],\n  e: [{ name: 'email' }],\n  p: [{ name: 'phone' }],\n  z: [{ name: 'timezones' }], // TODO: this one can actually be parsed properly...\n  r: [{ name: 'repeats' }],   // TODO: this one can also be parsed properly\n  // k: [{}], // outdated thing ignored\n  t: [{\n    // t=0 0\n    name: 'timing',\n    reg: /^(\\d*) (\\d*)/,\n    names: ['start', 'stop'],\n    format: '%d %d'\n  }],\n  c: [{\n    // c=IN IP4 10.47.197.26\n    name: 'connection',\n    reg: /^IN IP(\\d) (\\S*)/,\n    names: ['version', 'ip'],\n    format: 'IN IP%d %s'\n  }],\n  b: [{\n    // b=AS:4000\n    push: 'bandwidth',\n    reg: /^(TIAS|AS|CT|RR|RS):(\\d*)/,\n    names: ['type', 'limit'],\n    format: '%s:%s'\n  }],\n  m: [{\n    // m=video 51744 RTP/AVP 126 97 98 34 31\n    // NB: special - pushes to session\n    // TODO: rtp/fmtp should be filtered by the payloads found here?\n    reg: /^(\\w*) (\\d*) ([\\w/]*)(?: (.*))?/,\n    names: ['type', 'port', 'protocol', 'payloads'],\n    format: '%s %d %s %s'\n  }],\n  a: [\n    {\n      // a=rtpmap:110 opus/48000/2\n      push: 'rtp',\n      reg: /^rtpmap:(\\d*) ([\\w\\-.]*)(?:\\s*\\/(\\d*)(?:\\s*\\/(\\S*))?)?/,\n      names: ['payload', 'codec', 'rate', 'encoding'],\n      format: function (o) {\n        return (o.encoding)\n          ? 'rtpmap:%d %s/%s/%s'\n          : o.rate\n            ? 'rtpmap:%d %s/%s'\n            : 'rtpmap:%d %s';\n      }\n    },\n    {\n      // a=fmtp:108 profile-level-id=24;object=23;bitrate=64000\n      // a=fmtp:111 minptime=10; useinbandfec=1\n      push: 'fmtp',\n      reg: /^fmtp:(\\d*) ([\\S| ]*)/,\n      names: ['payload', 'config'],\n      format: 'fmtp:%d %s'\n    },\n    {\n      // a=control:streamid=0\n      name: 'control',\n      reg: /^control:(.*)/,\n      format: 'control:%s'\n    },\n    {\n      // a=rtcp:65179 IN IP4 193.84.77.194\n      name: 'rtcp',\n      reg: /^rtcp:(\\d*)(?: (\\S*) IP(\\d) (\\S*))?/,\n      names: ['port', 'netType', 'ipVer', 'address'],\n      format: function (o) {\n        return (o.address != null)\n          ? 'rtcp:%d %s IP%d %s'\n          : 'rtcp:%d';\n      }\n    },\n    {\n      // a=rtcp-fb:98 trr-int 100\n      push: 'rtcpFbTrrInt',\n      reg: /^rtcp-fb:(\\*|\\d*) trr-int (\\d*)/,\n      names: ['payload', 'value'],\n      format: 'rtcp-fb:%s trr-int %d'\n    },\n    {\n      // a=rtcp-fb:98 nack rpsi\n      push: 'rtcpFb',\n      reg: /^rtcp-fb:(\\*|\\d*) ([\\w-_]*)(?: ([\\w-_]*))?/,\n      names: ['payload', 'type', 'subtype'],\n      format: function (o) {\n        return (o.subtype != null)\n          ? 'rtcp-fb:%s %s %s'\n          : 'rtcp-fb:%s %s';\n      }\n    },\n    {\n      // a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n      // a=extmap:1/recvonly URI-gps-string\n      // a=extmap:3 urn:ietf:params:rtp-hdrext:encrypt urn:ietf:params:rtp-hdrext:smpte-tc 25@600/24\n      push: 'ext',\n      reg: /^extmap:(\\d+)(?:\\/(\\w+))?(?: (urn:ietf:params:rtp-hdrext:encrypt))? (\\S*)(?: (\\S*))?/,\n      names: ['value', 'direction', 'encrypt-uri', 'uri', 'config'],\n      format: function (o) {\n        return (\n          'extmap:%d' +\n          (o.direction ? '/%s' : '%v') +\n          (o['encrypt-uri'] ? ' %s' : '%v') +\n          ' %s' +\n          (o.config ? ' %s' : '')\n        );\n      }\n    },\n    {\n      // a=extmap-allow-mixed\n      name: 'extmapAllowMixed',\n      reg: /^(extmap-allow-mixed)/\n    },\n    {\n      // a=crypto:1 AES_CM_128_HMAC_SHA1_80 inline:PS1uQCVeeCFCanVmcjkpPywjNWhcYD0mXXtxaVBR|2^20|1:32\n      push: 'crypto',\n      reg: /^crypto:(\\d*) ([\\w_]*) (\\S*)(?: (\\S*))?/,\n      names: ['id', 'suite', 'config', 'sessionConfig'],\n      format: function (o) {\n        return (o.sessionConfig != null)\n          ? 'crypto:%d %s %s %s'\n          : 'crypto:%d %s %s';\n      }\n    },\n    {\n      // a=setup:actpass\n      name: 'setup',\n      reg: /^setup:(\\w*)/,\n      format: 'setup:%s'\n    },\n    {\n      // a=connection:new\n      name: 'connectionType',\n      reg: /^connection:(new|existing)/,\n      format: 'connection:%s'\n    },\n    {\n      // a=mid:1\n      name: 'mid',\n      reg: /^mid:([^\\s]*)/,\n      format: 'mid:%s'\n    },\n    {\n      // a=msid:0c8b064d-d807-43b4-b434-f92a889d8587 98178685-d409-46e0-8e16-7ef0db0db64a\n      name: 'msid',\n      reg: /^msid:(.*)/,\n      format: 'msid:%s'\n    },\n    {\n      // a=ptime:20\n      name: 'ptime',\n      reg: /^ptime:(\\d*(?:\\.\\d*)*)/,\n      format: 'ptime:%d'\n    },\n    {\n      // a=maxptime:60\n      name: 'maxptime',\n      reg: /^maxptime:(\\d*(?:\\.\\d*)*)/,\n      format: 'maxptime:%d'\n    },\n    {\n      // a=sendrecv\n      name: 'direction',\n      reg: /^(sendrecv|recvonly|sendonly|inactive)/\n    },\n    {\n      // a=ice-lite\n      name: 'icelite',\n      reg: /^(ice-lite)/\n    },\n    {\n      // a=ice-ufrag:F7gI\n      name: 'iceUfrag',\n      reg: /^ice-ufrag:(\\S*)/,\n      format: 'ice-ufrag:%s'\n    },\n    {\n      // a=ice-pwd:x9cml/YzichV2+XlhiMu8g\n      name: 'icePwd',\n      reg: /^ice-pwd:(\\S*)/,\n      format: 'ice-pwd:%s'\n    },\n    {\n      // a=fingerprint:SHA-1 00:11:22:33:44:55:66:77:88:99:AA:BB:CC:DD:EE:FF:00:11:22:33\n      name: 'fingerprint',\n      reg: /^fingerprint:(\\S*) (\\S*)/,\n      names: ['type', 'hash'],\n      format: 'fingerprint:%s %s'\n    },\n    {\n      // a=candidate:0 1 UDP 2113667327 203.0.113.1 54400 typ host\n      // a=candidate:1162875081 1 udp 2113937151 192.168.34.75 60017 typ host generation 0 network-id 3 network-cost 10\n      // a=candidate:3289912957 2 udp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 generation 0 network-id 3 network-cost 10\n      // a=candidate:229815620 1 tcp 1518280447 192.168.150.19 60017 typ host tcptype active generation 0 network-id 3 network-cost 10\n      // a=candidate:3289912957 2 tcp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 tcptype passive generation 0 network-id 3 network-cost 10\n      push:'candidates',\n      reg: /^candidate:(\\S*) (\\d*) (\\S*) (\\d*) (\\S*) (\\d*) typ (\\S*)(?: raddr (\\S*) rport (\\d*))?(?: tcptype (\\S*))?(?: generation (\\d*))?(?: network-id (\\d*))?(?: network-cost (\\d*))?/,\n      names: ['foundation', 'component', 'transport', 'priority', 'ip', 'port', 'type', 'raddr', 'rport', 'tcptype', 'generation', 'network-id', 'network-cost'],\n      format: function (o) {\n        var str = 'candidate:%s %d %s %d %s %d typ %s';\n\n        str += (o.raddr != null) ? ' raddr %s rport %d' : '%v%v';\n\n        // NB: candidate has three optional chunks, so %void middles one if it's missing\n        str += (o.tcptype != null) ? ' tcptype %s' : '%v';\n\n        if (o.generation != null) {\n          str += ' generation %d';\n        }\n\n        str += (o['network-id'] != null) ? ' network-id %d' : '%v';\n        str += (o['network-cost'] != null) ? ' network-cost %d' : '%v';\n        return str;\n      }\n    },\n    {\n      // a=end-of-candidates (keep after the candidates line for readability)\n      name: 'endOfCandidates',\n      reg: /^(end-of-candidates)/\n    },\n    {\n      // a=remote-candidates:1 203.0.113.1 54400 2 203.0.113.1 54401 ...\n      name: 'remoteCandidates',\n      reg: /^remote-candidates:(.*)/,\n      format: 'remote-candidates:%s'\n    },\n    {\n      // a=ice-options:google-ice\n      name: 'iceOptions',\n      reg: /^ice-options:(\\S*)/,\n      format: 'ice-options:%s'\n    },\n    {\n      // a=ssrc:2566107569 cname:t9YU8M1UxTF8Y1A1\n      push: 'ssrcs',\n      reg: /^ssrc:(\\d*) ([\\w_-]*)(?::(.*))?/,\n      names: ['id', 'attribute', 'value'],\n      format: function (o) {\n        var str = 'ssrc:%d';\n        if (o.attribute != null) {\n          str += ' %s';\n          if (o.value != null) {\n            str += ':%s';\n          }\n        }\n        return str;\n      }\n    },\n    {\n      // a=ssrc-group:FEC 1 2\n      // a=ssrc-group:FEC-FR 3004364195 1080772241\n      push: 'ssrcGroups',\n      // token-char = %x21 / %x23-27 / %x2A-2B / %x2D-2E / %x30-39 / %x41-5A / %x5E-7E\n      reg: /^ssrc-group:([\\x21\\x23\\x24\\x25\\x26\\x27\\x2A\\x2B\\x2D\\x2E\\w]*) (.*)/,\n      names: ['semantics', 'ssrcs'],\n      format: 'ssrc-group:%s %s'\n    },\n    {\n      // a=msid-semantic: WMS Jvlam5X3SX1OP6pn20zWogvaKJz5Hjf9OnlV\n      name: 'msidSemantic',\n      reg: /^msid-semantic:\\s?(\\w*) (\\S*)/,\n      names: ['semantic', 'token'],\n      format: 'msid-semantic: %s %s' // space after ':' is not accidental\n    },\n    {\n      // a=group:BUNDLE audio video\n      push: 'groups',\n      reg: /^group:(\\w*) (.*)/,\n      names: ['type', 'mids'],\n      format: 'group:%s %s'\n    },\n    {\n      // a=rtcp-mux\n      name: 'rtcpMux',\n      reg: /^(rtcp-mux)/\n    },\n    {\n      // a=rtcp-rsize\n      name: 'rtcpRsize',\n      reg: /^(rtcp-rsize)/\n    },\n    {\n      // a=sctpmap:5000 webrtc-datachannel 1024\n      name: 'sctpmap',\n      reg: /^sctpmap:([\\w_/]*) (\\S*)(?: (\\S*))?/,\n      names: ['sctpmapNumber', 'app', 'maxMessageSize'],\n      format: function (o) {\n        return (o.maxMessageSize != null)\n          ? 'sctpmap:%s %s %s'\n          : 'sctpmap:%s %s';\n      }\n    },\n    {\n      // a=x-google-flag:conference\n      name: 'xGoogleFlag',\n      reg: /^x-google-flag:([^\\s]*)/,\n      format: 'x-google-flag:%s'\n    },\n    {\n      // a=rid:1 send max-width=1280;max-height=720;max-fps=30;depend=0\n      push: 'rids',\n      reg: /^rid:([\\d\\w]+) (\\w+)(?: ([\\S| ]*))?/,\n      names: ['id', 'direction', 'params'],\n      format: function (o) {\n        return (o.params) ? 'rid:%s %s %s' : 'rid:%s %s';\n      }\n    },\n    {\n      // a=imageattr:97 send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320] recv [x=330,y=250]\n      // a=imageattr:* send [x=800,y=640] recv *\n      // a=imageattr:100 recv [x=320,y=240]\n      push: 'imageattrs',\n      reg: new RegExp(\n        // a=imageattr:97\n        '^imageattr:(\\\\d+|\\\\*)' +\n        // send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320]\n        '[\\\\s\\\\t]+(send|recv)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*)' +\n        // recv [x=330,y=250]\n        '(?:[\\\\s\\\\t]+(recv|send)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*))?'\n      ),\n      names: ['pt', 'dir1', 'attrs1', 'dir2', 'attrs2'],\n      format: function (o) {\n        return 'imageattr:%s %s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    {\n      // a=simulcast:send 1,2,3;~4,~5 recv 6;~7,~8\n      // a=simulcast:recv 1;4,5 send 6;7\n      name: 'simulcast',\n      reg: new RegExp(\n        // a=simulcast:\n        '^simulcast:' +\n        // send 1,2,3;~4,~5\n        '(send|recv) ([a-zA-Z0-9\\\\-_~;,]+)' +\n        // space + recv 6;~7,~8\n        '(?:\\\\s?(send|recv) ([a-zA-Z0-9\\\\-_~;,]+))?' +\n        // end\n        '$'\n      ),\n      names: ['dir1', 'list1', 'dir2', 'list2'],\n      format: function (o) {\n        return 'simulcast:%s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    {\n      // old simulcast draft 03 (implemented by Firefox)\n      //   https://tools.ietf.org/html/draft-ietf-mmusic-sdp-simulcast-03\n      // a=simulcast: recv pt=97;98 send pt=97\n      // a=simulcast: send rid=5;6;7 paused=6,7\n      name: 'simulcast_03',\n      reg: /^simulcast:[\\s\\t]+([\\S+\\s\\t]+)$/,\n      names: ['value'],\n      format: 'simulcast: %s'\n    },\n    {\n      // a=framerate:25\n      // a=framerate:29.97\n      name: 'framerate',\n      reg: /^framerate:(\\d+(?:$|\\.\\d+))/,\n      format: 'framerate:%s'\n    },\n    {\n      // RFC4570\n      // a=source-filter: incl IN IP4 239.5.2.31 10.1.15.5\n      name: 'sourceFilter',\n      reg: /^source-filter: *(excl|incl) (\\S*) (IP4|IP6|\\*) (\\S*) (.*)/,\n      names: ['filterMode', 'netType', 'addressTypes', 'destAddress', 'srcList'],\n      format: 'source-filter: %s %s %s %s %s'\n    },\n    {\n      // a=bundle-only\n      name: 'bundleOnly',\n      reg: /^(bundle-only)/\n    },\n    {\n      // a=label:1\n      name: 'label',\n      reg: /^label:(.+)/,\n      format: 'label:%s'\n    },\n    {\n      // RFC version 26 for SCTP over DTLS\n      // https://tools.ietf.org/html/draft-ietf-mmusic-sctp-sdp-26#section-5\n      name: 'sctpPort',\n      reg: /^sctp-port:(\\d+)$/,\n      format: 'sctp-port:%s'\n    },\n    {\n      // RFC version 26 for SCTP over DTLS\n      // https://tools.ietf.org/html/draft-ietf-mmusic-sctp-sdp-26#section-6\n      name: 'maxMessageSize',\n      reg: /^max-message-size:(\\d+)$/,\n      format: 'max-message-size:%s'\n    },\n    {\n      // RFC7273\n      // a=ts-refclk:ptp=IEEE1588-2008:39-A7-94-FF-FE-07-CB-D0:37\n      push:'tsRefClocks',\n      reg: /^ts-refclk:([^\\s=]*)(?:=(\\S*))?/,\n      names: ['clksrc', 'clksrcExt'],\n      format: function (o) {\n        return 'ts-refclk:%s' + (o.clksrcExt != null ? '=%s' : '');\n      }\n    },\n    {\n      // RFC7273\n      // a=mediaclk:direct=963214424\n      name:'mediaClk',\n      reg: /^mediaclk:(?:id=(\\S*))? *([^\\s=]*)(?:=(\\S*))?(?: *rate=(\\d+)\\/(\\d+))?/,\n      names: ['id', 'mediaClockName', 'mediaClockValue', 'rateNumerator', 'rateDenominator'],\n      format: function (o) {\n        var str = 'mediaclk:';\n        str += (o.id != null ? 'id=%s %s' : '%v%s');\n        str += (o.mediaClockValue != null ? '=%s' : '');\n        str += (o.rateNumerator != null ? ' rate=%s' : '');\n        str += (o.rateDenominator != null ? '/%s' : '');\n        return str;\n      }\n    },\n    {\n      // a=keywds:keywords\n      name: 'keywords',\n      reg: /^keywds:(.+)$/,\n      format: 'keywds:%s'\n    },\n    {\n      // a=content:main\n      name: 'content',\n      reg: /^content:(.+)/,\n      format: 'content:%s'\n    },\n    // BFCP https://tools.ietf.org/html/rfc4583\n    {\n      // a=floorctrl:c-s\n      name: 'bfcpFloorCtrl',\n      reg: /^floorctrl:(c-only|s-only|c-s)/,\n      format: 'floorctrl:%s'\n    },\n    {\n      // a=confid:1\n      name: 'bfcpConfId',\n      reg: /^confid:(\\d+)/,\n      format: 'confid:%s'\n    },\n    {\n      // a=userid:1\n      name: 'bfcpUserId',\n      reg: /^userid:(\\d+)/,\n      format: 'userid:%s'\n    },\n    {\n      // a=floorid:1\n      name: 'bfcpFloorId',\n      reg: /^floorid:(.+) (?:m-stream|mstrm):(.+)/,\n      names: ['id', 'mStream'],\n      format: 'floorid:%s mstrm:%s'\n    },\n    {\n      // any a= that we don't understand is kept verbatim on media.invalid\n      push: 'invalid',\n      names: ['value']\n    }\n  ]\n};\n\n// set sensible defaults to avoid polluting the grammar with boring details\nObject.keys(grammar).forEach(function (key) {\n  var objs = grammar[key];\n  objs.forEach(function (obj) {\n    if (!obj.reg) {\n      obj.reg = /(.*)/;\n    }\n    if (!obj.format) {\n      obj.format = '%s';\n    }\n  });\n});\n","var parser = require('./parser');\nvar writer = require('./writer');\n\nexports.write = writer;\nexports.parse = parser.parse;\nexports.parseParams = parser.parseParams;\nexports.parseFmtpConfig = parser.parseFmtpConfig; // Alias of parseParams().\nexports.parsePayloads = parser.parsePayloads;\nexports.parseRemoteCandidates = parser.parseRemoteCandidates;\nexports.parseImageAttributes = parser.parseImageAttributes;\nexports.parseSimulcastStreamList = parser.parseSimulcastStreamList;\n","var toIntIfInt = function (v) {\n  return String(Number(v)) === v ? Number(v) : v;\n};\n\nvar attachProperties = function (match, location, names, rawName) {\n  if (rawName && !names) {\n    location[rawName] = toIntIfInt(match[1]);\n  }\n  else {\n    for (var i = 0; i < names.length; i += 1) {\n      if (match[i+1] != null) {\n        location[names[i]] = toIntIfInt(match[i+1]);\n      }\n    }\n  }\n};\n\nvar parseReg = function (obj, location, content) {\n  var needsBlank = obj.name && obj.names;\n  if (obj.push && !location[obj.push]) {\n    location[obj.push] = [];\n  }\n  else if (needsBlank && !location[obj.name]) {\n    location[obj.name] = {};\n  }\n  var keyLocation = obj.push ?\n    {} :  // blank object that will be pushed\n    needsBlank ? location[obj.name] : location; // otherwise, named location or root\n\n  attachProperties(content.match(obj.reg), keyLocation, obj.names, obj.name);\n\n  if (obj.push) {\n    location[obj.push].push(keyLocation);\n  }\n};\n\nvar grammar = require('./grammar');\nvar validLine = RegExp.prototype.test.bind(/^([a-z])=(.*)/);\n\nexports.parse = function (sdp) {\n  var session = {}\n    , media = []\n    , location = session; // points at where properties go under (one of the above)\n\n  // parse lines we understand\n  sdp.split(/(\\r\\n|\\r|\\n)/).filter(validLine).forEach(function (l) {\n    var type = l[0];\n    var content = l.slice(2);\n    if (type === 'm') {\n      media.push({rtp: [], fmtp: []});\n      location = media[media.length-1]; // point at latest media line\n    }\n\n    for (var j = 0; j < (grammar[type] || []).length; j += 1) {\n      var obj = grammar[type][j];\n      if (obj.reg.test(content)) {\n        return parseReg(obj, location, content);\n      }\n    }\n  });\n\n  session.media = media; // link it up\n  return session;\n};\n\nvar paramReducer = function (acc, expr) {\n  var s = expr.split(/=(.+)/, 2);\n  if (s.length === 2) {\n    acc[s[0]] = toIntIfInt(s[1]);\n  } else if (s.length === 1 && expr.length > 1) {\n    acc[s[0]] = undefined;\n  }\n  return acc;\n};\n\nexports.parseParams = function (str) {\n  return str.split(/;\\s?/).reduce(paramReducer, {});\n};\n\n// For backward compatibility - alias will be removed in 3.0.0\nexports.parseFmtpConfig = exports.parseParams;\n\nexports.parsePayloads = function (str) {\n  return str.toString().split(' ').map(Number);\n};\n\nexports.parseRemoteCandidates = function (str) {\n  var candidates = [];\n  var parts = str.split(' ').map(toIntIfInt);\n  for (var i = 0; i < parts.length; i += 3) {\n    candidates.push({\n      component: parts[i],\n      ip: parts[i + 1],\n      port: parts[i + 2]\n    });\n  }\n  return candidates;\n};\n\nexports.parseImageAttributes = function (str) {\n  return str.split(' ').map(function (item) {\n    return item.substring(1, item.length-1).split(',').reduce(paramReducer, {});\n  });\n};\n\nexports.parseSimulcastStreamList = function (str) {\n  return str.split(';').map(function (stream) {\n    return stream.split(',').map(function (format) {\n      var scid, paused = false;\n\n      if (format[0] !== '~') {\n        scid = toIntIfInt(format);\n      } else {\n        scid = toIntIfInt(format.substring(1, format.length));\n        paused = true;\n      }\n\n      return {\n        scid: scid,\n        paused: paused\n      };\n    });\n  });\n};\n","var grammar = require('./grammar');\n\n// customized util.format - discards excess arguments and can void middle ones\nvar formatRegExp = /%[sdv%]/g;\nvar format = function (formatStr) {\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  return formatStr.replace(formatRegExp, function (x) {\n    if (i >= len) {\n      return x; // missing argument\n    }\n    var arg = args[i];\n    i += 1;\n    switch (x) {\n    case '%%':\n      return '%';\n    case '%s':\n      return String(arg);\n    case '%d':\n      return Number(arg);\n    case '%v':\n      return '';\n    }\n  });\n  // NB: we discard excess arguments - they are typically undefined from makeLine\n};\n\nvar makeLine = function (type, obj, location) {\n  var str = obj.format instanceof Function ?\n    (obj.format(obj.push ? location : location[obj.name])) :\n    obj.format;\n\n  var args = [type + '=' + str];\n  if (obj.names) {\n    for (var i = 0; i < obj.names.length; i += 1) {\n      var n = obj.names[i];\n      if (obj.name) {\n        args.push(location[obj.name][n]);\n      }\n      else { // for mLine and push attributes\n        args.push(location[obj.names[i]]);\n      }\n    }\n  }\n  else {\n    args.push(location[obj.name]);\n  }\n  return format.apply(null, args);\n};\n\n// RFC specified order\n// TODO: extend this with all the rest\nvar defaultOuterOrder = [\n  'v', 'o', 's', 'i',\n  'u', 'e', 'p', 'c',\n  'b', 't', 'r', 'z', 'a'\n];\nvar defaultInnerOrder = ['i', 'c', 'b', 'a'];\n\n\nmodule.exports = function (session, opts) {\n  opts = opts || {};\n  // ensure certain properties exist\n  if (session.version == null) {\n    session.version = 0; // 'v=0' must be there (only defined version atm)\n  }\n  if (session.name == null) {\n    session.name = ' '; // 's= ' must be there if no meaningful name set\n  }\n  session.media.forEach(function (mLine) {\n    if (mLine.payloads == null) {\n      mLine.payloads = '';\n    }\n  });\n\n  var outerOrder = opts.outerOrder || defaultOuterOrder;\n  var innerOrder = opts.innerOrder || defaultInnerOrder;\n  var sdp = [];\n\n  // loop through outerOrder for matching properties on session\n  outerOrder.forEach(function (type) {\n    grammar[type].forEach(function (obj) {\n      if (obj.name in session && session[obj.name] != null) {\n        sdp.push(makeLine(type, obj, session));\n      }\n      else if (obj.push in session && session[obj.push] != null) {\n        session[obj.push].forEach(function (el) {\n          sdp.push(makeLine(type, obj, el));\n        });\n      }\n    });\n  });\n\n  // then for each media line, follow the innerOrder\n  session.media.forEach(function (mLine) {\n    sdp.push(makeLine('m', grammar.m[0], mLine));\n\n    innerOrder.forEach(function (type) {\n      grammar[type].forEach(function (obj) {\n        if (obj.name in mLine && mLine[obj.name] != null) {\n          sdp.push(makeLine(type, obj, mLine));\n        }\n        else if (obj.push in mLine && mLine[obj.push] != null) {\n          mLine[obj.push].forEach(function (el) {\n            sdp.push(makeLine(type, obj, el));\n          });\n        }\n      });\n    });\n  });\n\n  return sdp.join('\\r\\n') + '\\r\\n';\n};\n","/* Copyright @ 2016 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar transform = require('sdp-transform');\nvar transformUtils = require('./transform-utils');\nvar parseSsrcs = transformUtils.parseSsrcs;\nvar writeSsrcs = transformUtils.writeSsrcs;\n\n//region Constants\n\nvar DEFAULT_NUM_OF_LAYERS = 3;\n\n//endregion\n\nfunction getSsrcAttribute (mLine, ssrc, attributeName) {\n    return mLine\n        .ssrcs\n        .filter(function(ssrcInfo) { return ssrcInfo.id === ssrc; })\n        .filter(function(ssrcInfo) { return ssrcInfo.attribute === attributeName; })\n        .map(function(ssrcInfo) { return ssrcInfo.value; })[0];\n}\n\n//region Ctor\n\nfunction Simulcast(options) {\n\n    this.options = options ? options : {};\n\n    if (!this.options.numOfLayers) {\n        this.options.numOfLayers = DEFAULT_NUM_OF_LAYERS;\n    }\n    console.log(\"SdpSimulcast: using \" + this.options.numOfLayers + \" layers\");\n\n    /**\n     * An IN-ORDER list of the simulcast ssrcs\n     * @type {list<number>}\n     */\n    this.ssrcCache = [];\n}\n\n//endregion\n\n//region Stateless private utility functions\n\n/**\n * Returns a random integer between min (included) and max (excluded)\n * Using Math.round() gives a non-uniform distribution!\n * @returns {number}\n */\nfunction generateSSRC() {\n    var min = 0, max = 0xffffffff;\n    return Math.floor(Math.random() * (max - min)) + min;\n};\n\nfunction processVideo(session, action) {\n    if (session == null || !Array.isArray(session.media)) {\n        return;\n    }\n\n    session.media.forEach(function (mLine) {\n        if (mLine.type === 'video') {\n            action(mLine);\n        }\n    });\n};\n\nfunction validateDescription(desc)\n{\n    return desc && desc != null\n        && desc.type && desc.type != ''\n        && desc.sdp && desc.sdp != '';\n}\n\nfunction explodeRemoteSimulcast(mLine) {\n\n    if (!mLine || !Array.isArray(mLine.ssrcGroups)) {\n        return;\n    }\n\n    var sources = parseSsrcs(mLine);\n    var order = [];\n\n    // Find the SIM group and explode its sources.\n    var j = mLine.ssrcGroups.length;\n    while (j--) {\n\n        if (mLine.ssrcGroups[j].semantics !== 'SIM') {\n            continue;\n        }\n\n        var simulcastSsrcs = mLine.ssrcGroups[j].ssrcs.split(' ');\n\n        for (var i = 0; i < simulcastSsrcs.length; i++) {\n\n            var ssrc = simulcastSsrcs[i];\n            order.push(ssrc);\n\n            var parts = sources[ssrc].msid.split(' ');\n            sources[ssrc].msid = [parts[0], '/', i, ' ', parts[1], '/', i].join('');\n            sources[ssrc].cname = [sources[ssrc].cname, '/', i].join('');\n\n            // Remove all the groups that this SSRC participates in.\n            mLine.ssrcGroups.forEach(function (relatedGroup) {\n                if (relatedGroup.semantics === 'SIM') {\n                    return;\n                }\n\n                var relatedSsrcs = relatedGroup.ssrcs.split(' ');\n                if (relatedSsrcs.indexOf(ssrc) === -1) {\n                    return;\n                }\n\n                // Nuke all the related SSRCs.\n                relatedSsrcs.forEach(function (relatedSSRC) {\n                    sources[relatedSSRC].msid = sources[ssrc].msid;\n                    sources[relatedSSRC].cname = sources[ssrc].cname;\n                    if (relatedSSRC !== ssrc) {\n                        order.push(relatedSSRC);\n                    }\n                });\n\n                // Schedule the related group for nuking.\n            })\n        }\n\n        mLine.ssrcs = writeSsrcs(sources, order);\n        mLine.ssrcGroups.splice(j, 1);\n    };\n}\n\nfunction implodeRemoteSimulcast(mLine) {\n\n    if (!mLine || !Array.isArray(mLine.ssrcGroups)) {\n        console.info('Halt: There are no SSRC groups in the remote ' +\n                'description.');\n        return;\n    }\n\n    var sources = parseSsrcs(mLine);\n\n    // Find the SIM group and nuke it.\n    mLine.ssrcGroups.forEach(function (simulcastGroup) {\n        if (simulcastGroup.semantics !== 'SIM') {\n            return;\n        }\n\n        console.info(\"Imploding SIM group: \" + simulcastGroup.ssrcs);\n        // Schedule the SIM group for nuking.\n        simulcastGroup.nuke = true;\n\n        var simulcastSsrcs = simulcastGroup.ssrcs.split(' ');\n\n        // Nuke all the higher layer SSRCs.\n        for (var i = 1; i < simulcastSsrcs.length; i++) {\n\n            var ssrc = simulcastSsrcs[i];\n            delete sources[ssrc];\n\n            // Remove all the groups that this SSRC participates in.\n            mLine.ssrcGroups.forEach(function (relatedGroup) {\n                if (relatedGroup.semantics === 'SIM') {\n                    return;\n                }\n\n                var relatedSsrcs = relatedGroup.ssrcs.split(' ');\n                if (relatedSsrcs.indexOf(ssrc) === -1) {\n                    return;\n                }\n\n                // Nuke all the related SSRCs.\n                relatedSsrcs.forEach(function (relatedSSRC) {\n                    delete sources[relatedSSRC];\n                });\n\n                // Schedule the related group for nuking.\n                relatedGroup.nuke = true;\n            })\n        }\n\n        return;\n    });\n\n    mLine.ssrcs = writeSsrcs(sources);\n\n    // Nuke all the scheduled groups.\n    var i = mLine.ssrcGroups.length;\n    while (i--) {\n        if (mLine.ssrcGroups[i].nuke) {\n            mLine.ssrcGroups.splice(i, 1);\n        }\n    }\n}\n\nfunction removeGoogConference(mLine) {\n    if (!mLine || typeof mLine.xGoogleFlag === 'undefined') {\n        return;\n    }\n\n    mLine.xGoogleFlag = undefined;\n}\n\nfunction assertGoogConference(mLine) {\n    if (!mLine) {\n        return;\n    }\n\n    if (!Array.isArray(mLine.invalid)) {\n        mLine.invalid = [];\n    }\n\n    if (!mLine.invalid.some(\n            function (i) { return i.value === 'x-google-flag:conference' })) {\n        mLine.invalid.push({'value': 'x-google-flag:conference'});\n    }\n}\n\nSimulcast.prototype.clearSsrcCache = function() {\n    this.ssrcCache = [];\n}\n\n/**\n * When we start as video muted, all of the video\n *  ssrcs get generated so we can include them as part\n *  of the original session-accept.  That means we\n *  need this library to restore to those same ssrcs\n *  the first time we unmute, so we need the ability to\n *  force its cache\n */\nSimulcast.prototype.setSsrcCache = function(ssrcs) {\n    this.ssrcCache = ssrcs;\n}\n\n//endregion\n\n//region \"Private\" functions\n\n/**\n * Given a video mLine, return a list of the video ssrcs\n *  in simulcast layer order (returns a list of just\n *  the primary ssrc if there are no simulcast layers)\n */\nSimulcast.prototype._parseSimLayers = function (mLine) {\n    var simGroup = mLine.ssrcGroups &&\n        mLine.ssrcGroups.find(function(group) { return group.semantics === \"SIM\"; });\n    if (simGroup) {\n        return simGroup.ssrcs\n            .split(\" \")\n            .map(function(ssrcStr) { return parseInt(ssrcStr) });\n    } else {\n        return [mLine.ssrcs[0].id];\n    }\n}\n\nSimulcast.prototype._buildNewToOldSsrcMap = function (newSsrcList, oldSsrcList) {\n    var ssrcMap = {};\n    for (var i = 0; i < newSsrcList.length; ++i) {\n        var newSsrc = newSsrcList[i];\n        var oldSsrc = oldSsrcList[i] || null;\n        ssrcMap[newSsrc] = oldSsrc;\n    }\n    return ssrcMap;\n}\n\nSimulcast.prototype._fillInSourceDataFromCache = function(mLine) {\n    console.log(\"SdpSimulcast restoring from cache: \", this.ssrcCache);\n    var newSimSsrcs = this._parseSimLayers(mLine);\n    console.log(\"SdpSimulcast Parsed new sim ssrcs: \", newSimSsrcs);\n    var newMsid = getSsrcAttribute(mLine, newSimSsrcs[0], \"msid\");\n    var newCname = getSsrcAttribute(mLine, newSimSsrcs[0], \"cname\");\n    var ssrcsToReplace = this._buildNewToOldSsrcMap(newSimSsrcs, this.ssrcCache);\n    console.log(\"SdpSimulcast built replacement map: \", ssrcsToReplace);\n    // New sdp might only have 1 layer, so not every cached ssrc will have a new one\n    //  to replace directly\n    var ssrcsToAdd = this.ssrcCache\n        .filter(function(ssrc) { return Object.values(ssrcsToReplace).indexOf(ssrc) === -1; });\n    console.log(\"SdpSimulcast built ssrcs to add: \", ssrcsToAdd);\n\n    // First do the replacements\n    mLine.ssrcs.forEach(function(ssrc) {\n        if (ssrcsToReplace[ssrc.id]) {\n            ssrc.id = ssrcsToReplace[ssrc.id];\n        }\n    });\n    // Now the adds\n    ssrcsToAdd.forEach(function(ssrc) {\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"msid\",\n            value: newMsid\n        });\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"cname\",\n            value: newCname\n        });\n    });\n    mLine.ssrcGroups = mLine.ssrcGroups || [];\n    mLine.ssrcGroups.push({\n        semantics: \"SIM\",\n        ssrcs: this.ssrcCache.join(\" \")\n    });\n    return mLine;\n}\n\nSimulcast.prototype._generateSourceData = function(mLine, primarySsrc) {\n    var addAssociatedStream = function(mLine, ssrc) {\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"cname\",\n            value: primarySsrcCname\n        });\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"msid\",\n            value: primarySsrcMsid\n        });\n    }\n    var primarySsrcMsid = getSsrcAttribute(mLine, primarySsrc, \"msid\");\n    var primarySsrcCname = getSsrcAttribute(mLine, primarySsrc, \"cname\");\n\n    // In Unified-plan mode, the a=ssrc lines with the msid attribute are not present\n    // in the answers that Chrome and Safari generate for an offer received from Jicofo.\n    // Generate these a=ssrc lines using the msid values from the a=msid line.\n    if (this.options.usesUnifiedPlan && !primarySsrcMsid) {\n        primarySsrcMsid = mLine.msid;\n        var primarySsrcs = mLine.ssrcs;\n        primarySsrcs.forEach(ssrc => {\n            mLine.ssrcs.push({\n                id: ssrc.id,\n                attribute: \"msid\",\n                value: primarySsrcMsid\n            });\n        });\n    }\n\n    // Generate sim layers\n    var simSsrcs = [];\n    for (var i = 0; i < this.options.numOfLayers - 1; ++i) {\n        var simSsrc = generateSSRC();\n        addAssociatedStream(mLine, simSsrc);\n        simSsrcs.push(simSsrc);\n    }\n    mLine.ssrcGroups = mLine.ssrcGroups || [];\n    mLine.ssrcGroups.push({\n        semantics: \"SIM\",\n        ssrcs: primarySsrc + \" \" + simSsrcs.join(\" \")\n    });\n    return mLine;\n}\n\n\n\n// Assumptions:\n//  1) 'mLine' contains only a single primary video source\n//   (i.e. it will not already have simulcast streams inserted)\n//  2) 'mLine' MAY already contain an RTX stream for its video source\n//  3) 'mLine' is in sendrecv or sendonly state\n// Guarantees:\n//  1) return mLine will contain 2 additional simulcast layers\n//   generated\n//  2) if the base video ssrc in mLine has been seen before,\n//   then the same generated simulcast streams from before will\n//   be used again\n//  3) if rtx is enabled for the mLine, all generated simulcast\n//   streams will have rtx streams generated as well\n//  4) if rtx has been generated for a src before, we will generate\n//   the same rtx stream again\nSimulcast.prototype._restoreSimulcast = function(mLine) {\n    // First, find the primary video source in the given\n    // mLine and see if we've seen it before.\n    var primarySsrc;\n    var numSsrcs = mLine.ssrcs && mLine.ssrcs\n        .map(function(ssrcInfo) { return ssrcInfo.id; })\n        .filter(function(ssrc, index, array) {\n            return array.indexOf(ssrc) === index;\n        })\n        .length || 0;\n    var numGroups = (mLine.ssrcGroups && mLine.ssrcGroups.length) || 0;\n\n    if (numSsrcs === 0 || numSsrcs > 2) {\n        // Unsupported scenario\n        return mLine;\n    }\n    if (numSsrcs == 2 && numGroups === 0) {\n        // Unsupported scenario\n        return mLine;\n    }\n\n    if (numSsrcs === 1) {\n        primarySsrc = mLine.ssrcs[0].id;\n    } else {\n        // There must be an FID group, so parse\n        //  that and pull the primary ssrc from there\n        var fidGroup = mLine.ssrcGroups.filter(function(group) { return group.semantics === \"FID\"; })[0];\n        if (fidGroup) {\n            primarySsrc = parseInt(fidGroup.ssrcs.split(\" \")[0]);\n        } else {\n            // Unsupported scenario\n            return mLine;\n        }\n    }\n    console.log(\"SdpSimulcast: current ssrc cache: \", this.ssrcCache);\n    console.log(\"SdpSimulcast: parsed primary ssrc \" + primarySsrc);\n\n    var seenPrimarySsrc = this.ssrcCache.indexOf(primarySsrc) !== -1;\n\n    if (seenPrimarySsrc) {\n        console.log(\"SdpSimulcast: Have seen primary ssrc before, \" +\n            \"filling in data from cache\");\n        mLine = this._fillInSourceDataFromCache(mLine);\n    } else {\n        console.log(\"SdpSimulcast: Have not seen primary ssrc before, \" +\n            \"generating source data\");\n        mLine = this._generateSourceData(mLine, primarySsrc);\n    }\n    // Now update the cache to match whatever we've just put into this sdp\n    this.ssrcCache = this._parseSimLayers(mLine);\n    return mLine;\n}\n\n//endregion\n\n//region \"Public\" functions\n\n/**\n *\n * @param desc\n * @param enableConferenceFlag\n * @returns {RTCSessionDescription}\n */\nSimulcast.prototype.mungeRemoteDescription = function (desc, enableConferenceFlag) {\n\n    if (!validateDescription(desc)) {\n        return desc;\n    }\n\n    var session = transform.parse(desc.sdp);\n\n    var self = this;\n    processVideo(session, function (mLine) {\n\n        // Handle simulcast reception.\n        if (self.options.explodeRemoteSimulcast) {\n            explodeRemoteSimulcast(mLine);\n        } else {\n            implodeRemoteSimulcast(mLine);\n        }\n\n        // Add or remove \"x-google-conference\" from the remote description based on whether the client\n        // has enabled simulcast for the local video source. For cases where we disable simulcast for desktop share,\n        // it is necessary to remove the flag so that Chrome stops sending T1 temporal layers. It also fixes other\n        // issues related to screensharing like https://bugs.chromium.org/p/chromium/issues/detail?id=1093819.\n        if (!self.options.usesUnifiedPlan && enableConferenceFlag) {\n            assertGoogConference(mLine);\n        } else {\n            removeGoogConference(mLine);\n        }\n    });\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: transform.write(session)\n    });\n};\n\n/**\n *\n * NOTE this method should be called only if simulcast is supported by\n * the current browser, otherwise local SDP should not be munged.\n * @param desc\n * @returns {RTCSessionDescription}\n */\nSimulcast.prototype.mungeLocalDescription = function (desc) {\n\n    if (!validateDescription(desc)) {\n        return desc;\n    }\n\n    var session = transform.parse(desc.sdp);\n\n    var self = this;\n    processVideo(session, function (mLine) {\n        if (mLine.direction == 'recvonly' || mLine.direction == 'inactive')\n        {\n            return;\n        }\n        self._restoreSimulcast(mLine);\n    });\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: transform.write(session)\n    });\n};\n\n//endregion\n\nmodule.exports = Simulcast;\n","/* Copyright @ 2015 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * FIXME\n * @param sources FIXME\n * @param order An array of SSRCs which will be used to order the entries in\n * the returned array. Sources whose SSRC appears in 'order' will be added first,\n * in the specified order, and all other sources will be added afterwards (in\n * no specific order).\n * @returns {Array} FIXME\n */\nexports.writeSsrcs = function(sources, order) {\n  var ssrcs = [];\n\n  // expand sources to ssrcs\n  if (typeof sources !== 'undefined' &&\n      Object.keys(sources).length !== 0) {\n\n    if (!Array.isArray(order)) {\n      order = []\n    }\n\n    // Add the sources that appear in 'order' first.\n    for (var i = 0; i < order.length; i++) {\n      var ssrc = order[i];\n      var source = sources[ssrc];\n      Object.keys(source).forEach(function (attribute) {\n        ssrcs.push({\n          id: ssrc,\n          attribute: attribute,\n          value: source[attribute]\n        });\n      });\n    }\n\n    // Now add the rest of the sources.\n    Object.keys(sources).forEach(function (ssrc) {\n      ssrc = parseInt(ssrc); // Object.keys() returns string\n      if (order.indexOf(ssrc) >= 0) {\n        // Already added.\n        return;\n      }\n\n      var source = sources[ssrc];\n      Object.keys(source).forEach(function (attribute) {\n        ssrcs.push({\n          id: ssrc,\n          attribute: attribute,\n          value: source[attribute]\n        });\n      });\n    });\n  }\n\n  return ssrcs;\n};\n\nexports.parseSsrcs = function (mLine) {\n  var sources = {};\n  // group sources attributes by ssrc.\n  if (typeof mLine.ssrcs !== 'undefined' && Array.isArray(mLine.ssrcs)) {\n    mLine.ssrcs.forEach(function (ssrc) {\n      if (!sources[ssrc.id])\n        sources[ssrc.id] = {};\n      sources[ssrc.id][ssrc.attribute] = ssrc.value;\n    });\n  }\n  return sources;\n};\n\n","/*!\n * async\n * https://github.com/caolan/async\n *\n * Copyright 2010-2014 Caolan McMahon\n * Released under the MIT license\n */\n/*jshint onevar: false, indent:4 */\n/*global setImmediate: false, setTimeout: false, console: false */\n(function () {\n\n    var async = {};\n\n    // global on the server, window in the browser\n    var root, previous_async;\n\n    root = this;\n    if (root != null) {\n      previous_async = root.async;\n    }\n\n    async.noConflict = function () {\n        root.async = previous_async;\n        return async;\n    };\n\n    function only_once(fn) {\n        var called = false;\n        return function() {\n            if (called) throw new Error(\"Callback was already called.\");\n            called = true;\n            fn.apply(root, arguments);\n        }\n    }\n\n    //// cross-browser compatiblity functions ////\n\n    var _toString = Object.prototype.toString;\n\n    var _isArray = Array.isArray || function (obj) {\n        return _toString.call(obj) === '[object Array]';\n    };\n\n    var _each = function (arr, iterator) {\n        if (arr.forEach) {\n            return arr.forEach(iterator);\n        }\n        for (var i = 0; i < arr.length; i += 1) {\n            iterator(arr[i], i, arr);\n        }\n    };\n\n    var _map = function (arr, iterator) {\n        if (arr.map) {\n            return arr.map(iterator);\n        }\n        var results = [];\n        _each(arr, function (x, i, a) {\n            results.push(iterator(x, i, a));\n        });\n        return results;\n    };\n\n    var _reduce = function (arr, iterator, memo) {\n        if (arr.reduce) {\n            return arr.reduce(iterator, memo);\n        }\n        _each(arr, function (x, i, a) {\n            memo = iterator(memo, x, i, a);\n        });\n        return memo;\n    };\n\n    var _keys = function (obj) {\n        if (Object.keys) {\n            return Object.keys(obj);\n        }\n        var keys = [];\n        for (var k in obj) {\n            if (obj.hasOwnProperty(k)) {\n                keys.push(k);\n            }\n        }\n        return keys;\n    };\n\n    //// exported async module functions ////\n\n    //// nextTick implementation with browser-compatible fallback ////\n    if (typeof process === 'undefined' || !(process.nextTick)) {\n        if (typeof setImmediate === 'function') {\n            async.nextTick = function (fn) {\n                // not a direct alias for IE10 compatibility\n                setImmediate(fn);\n            };\n            async.setImmediate = async.nextTick;\n        }\n        else {\n            async.nextTick = function (fn) {\n                setTimeout(fn, 0);\n            };\n            async.setImmediate = async.nextTick;\n        }\n    }\n    else {\n        async.nextTick = process.nextTick;\n        if (typeof setImmediate !== 'undefined') {\n            async.setImmediate = function (fn) {\n              // not a direct alias for IE10 compatibility\n              setImmediate(fn);\n            };\n        }\n        else {\n            async.setImmediate = async.nextTick;\n        }\n    }\n\n    async.each = function (arr, iterator, callback) {\n        callback = callback || function () {};\n        if (!arr.length) {\n            return callback();\n        }\n        var completed = 0;\n        _each(arr, function (x) {\n            iterator(x, only_once(done) );\n        });\n        function done(err) {\n          if (err) {\n              callback(err);\n              callback = function () {};\n          }\n          else {\n              completed += 1;\n              if (completed >= arr.length) {\n                  callback();\n              }\n          }\n        }\n    };\n    async.forEach = async.each;\n\n    async.eachSeries = function (arr, iterator, callback) {\n        callback = callback || function () {};\n        if (!arr.length) {\n            return callback();\n        }\n        var completed = 0;\n        var iterate = function () {\n            iterator(arr[completed], function (err) {\n                if (err) {\n                    callback(err);\n                    callback = function () {};\n                }\n                else {\n                    completed += 1;\n                    if (completed >= arr.length) {\n                        callback();\n                    }\n                    else {\n                        iterate();\n                    }\n                }\n            });\n        };\n        iterate();\n    };\n    async.forEachSeries = async.eachSeries;\n\n    async.eachLimit = function (arr, limit, iterator, callback) {\n        var fn = _eachLimit(limit);\n        fn.apply(null, [arr, iterator, callback]);\n    };\n    async.forEachLimit = async.eachLimit;\n\n    var _eachLimit = function (limit) {\n\n        return function (arr, iterator, callback) {\n            callback = callback || function () {};\n            if (!arr.length || limit <= 0) {\n                return callback();\n            }\n            var completed = 0;\n            var started = 0;\n            var running = 0;\n\n            (function replenish () {\n                if (completed >= arr.length) {\n                    return callback();\n                }\n\n                while (running < limit && started < arr.length) {\n                    started += 1;\n                    running += 1;\n                    iterator(arr[started - 1], function (err) {\n                        if (err) {\n                            callback(err);\n                            callback = function () {};\n                        }\n                        else {\n                            completed += 1;\n                            running -= 1;\n                            if (completed >= arr.length) {\n                                callback();\n                            }\n                            else {\n                                replenish();\n                            }\n                        }\n                    });\n                }\n            })();\n        };\n    };\n\n\n    var doParallel = function (fn) {\n        return function () {\n            var args = Array.prototype.slice.call(arguments);\n            return fn.apply(null, [async.each].concat(args));\n        };\n    };\n    var doParallelLimit = function(limit, fn) {\n        return function () {\n            var args = Array.prototype.slice.call(arguments);\n            return fn.apply(null, [_eachLimit(limit)].concat(args));\n        };\n    };\n    var doSeries = function (fn) {\n        return function () {\n            var args = Array.prototype.slice.call(arguments);\n            return fn.apply(null, [async.eachSeries].concat(args));\n        };\n    };\n\n\n    var _asyncMap = function (eachfn, arr, iterator, callback) {\n        arr = _map(arr, function (x, i) {\n            return {index: i, value: x};\n        });\n        if (!callback) {\n            eachfn(arr, function (x, callback) {\n                iterator(x.value, function (err) {\n                    callback(err);\n                });\n            });\n        } else {\n            var results = [];\n            eachfn(arr, function (x, callback) {\n                iterator(x.value, function (err, v) {\n                    results[x.index] = v;\n                    callback(err);\n                });\n            }, function (err) {\n                callback(err, results);\n            });\n        }\n    };\n    async.map = doParallel(_asyncMap);\n    async.mapSeries = doSeries(_asyncMap);\n    async.mapLimit = function (arr, limit, iterator, callback) {\n        return _mapLimit(limit)(arr, iterator, callback);\n    };\n\n    var _mapLimit = function(limit) {\n        return doParallelLimit(limit, _asyncMap);\n    };\n\n    // reduce only has a series version, as doing reduce in parallel won't\n    // work in many situations.\n    async.reduce = function (arr, memo, iterator, callback) {\n        async.eachSeries(arr, function (x, callback) {\n            iterator(memo, x, function (err, v) {\n                memo = v;\n                callback(err);\n            });\n        }, function (err) {\n            callback(err, memo);\n        });\n    };\n    // inject alias\n    async.inject = async.reduce;\n    // foldl alias\n    async.foldl = async.reduce;\n\n    async.reduceRight = function (arr, memo, iterator, callback) {\n        var reversed = _map(arr, function (x) {\n            return x;\n        }).reverse();\n        async.reduce(reversed, memo, iterator, callback);\n    };\n    // foldr alias\n    async.foldr = async.reduceRight;\n\n    var _filter = function (eachfn, arr, iterator, callback) {\n        var results = [];\n        arr = _map(arr, function (x, i) {\n            return {index: i, value: x};\n        });\n        eachfn(arr, function (x, callback) {\n            iterator(x.value, function (v) {\n                if (v) {\n                    results.push(x);\n                }\n                callback();\n            });\n        }, function (err) {\n            callback(_map(results.sort(function (a, b) {\n                return a.index - b.index;\n            }), function (x) {\n                return x.value;\n            }));\n        });\n    };\n    async.filter = doParallel(_filter);\n    async.filterSeries = doSeries(_filter);\n    // select alias\n    async.select = async.filter;\n    async.selectSeries = async.filterSeries;\n\n    var _reject = function (eachfn, arr, iterator, callback) {\n        var results = [];\n        arr = _map(arr, function (x, i) {\n            return {index: i, value: x};\n        });\n        eachfn(arr, function (x, callback) {\n            iterator(x.value, function (v) {\n                if (!v) {\n                    results.push(x);\n                }\n                callback();\n            });\n        }, function (err) {\n            callback(_map(results.sort(function (a, b) {\n                return a.index - b.index;\n            }), function (x) {\n                return x.value;\n            }));\n        });\n    };\n    async.reject = doParallel(_reject);\n    async.rejectSeries = doSeries(_reject);\n\n    var _detect = function (eachfn, arr, iterator, main_callback) {\n        eachfn(arr, function (x, callback) {\n            iterator(x, function (result) {\n                if (result) {\n                    main_callback(x);\n                    main_callback = function () {};\n                }\n                else {\n                    callback();\n                }\n            });\n        }, function (err) {\n            main_callback();\n        });\n    };\n    async.detect = doParallel(_detect);\n    async.detectSeries = doSeries(_detect);\n\n    async.some = function (arr, iterator, main_callback) {\n        async.each(arr, function (x, callback) {\n            iterator(x, function (v) {\n                if (v) {\n                    main_callback(true);\n                    main_callback = function () {};\n                }\n                callback();\n            });\n        }, function (err) {\n            main_callback(false);\n        });\n    };\n    // any alias\n    async.any = async.some;\n\n    async.every = function (arr, iterator, main_callback) {\n        async.each(arr, function (x, callback) {\n            iterator(x, function (v) {\n                if (!v) {\n                    main_callback(false);\n                    main_callback = function () {};\n                }\n                callback();\n            });\n        }, function (err) {\n            main_callback(true);\n        });\n    };\n    // all alias\n    async.all = async.every;\n\n    async.sortBy = function (arr, iterator, callback) {\n        async.map(arr, function (x, callback) {\n            iterator(x, function (err, criteria) {\n                if (err) {\n                    callback(err);\n                }\n                else {\n                    callback(null, {value: x, criteria: criteria});\n                }\n            });\n        }, function (err, results) {\n            if (err) {\n                return callback(err);\n            }\n            else {\n                var fn = function (left, right) {\n                    var a = left.criteria, b = right.criteria;\n                    return a < b ? -1 : a > b ? 1 : 0;\n                };\n                callback(null, _map(results.sort(fn), function (x) {\n                    return x.value;\n                }));\n            }\n        });\n    };\n\n    async.auto = function (tasks, callback) {\n        callback = callback || function () {};\n        var keys = _keys(tasks);\n        var remainingTasks = keys.length\n        if (!remainingTasks) {\n            return callback();\n        }\n\n        var results = {};\n\n        var listeners = [];\n        var addListener = function (fn) {\n            listeners.unshift(fn);\n        };\n        var removeListener = function (fn) {\n            for (var i = 0; i < listeners.length; i += 1) {\n                if (listeners[i] === fn) {\n                    listeners.splice(i, 1);\n                    return;\n                }\n            }\n        };\n        var taskComplete = function () {\n            remainingTasks--\n            _each(listeners.slice(0), function (fn) {\n                fn();\n            });\n        };\n\n        addListener(function () {\n            if (!remainingTasks) {\n                var theCallback = callback;\n                // prevent final callback from calling itself if it errors\n                callback = function () {};\n\n                theCallback(null, results);\n            }\n        });\n\n        _each(keys, function (k) {\n            var task = _isArray(tasks[k]) ? tasks[k]: [tasks[k]];\n            var taskCallback = function (err) {\n                var args = Array.prototype.slice.call(arguments, 1);\n                if (args.length <= 1) {\n                    args = args[0];\n                }\n                if (err) {\n                    var safeResults = {};\n                    _each(_keys(results), function(rkey) {\n                        safeResults[rkey] = results[rkey];\n                    });\n                    safeResults[k] = args;\n                    callback(err, safeResults);\n                    // stop subsequent errors hitting callback multiple times\n                    callback = function () {};\n                }\n                else {\n                    results[k] = args;\n                    async.setImmediate(taskComplete);\n                }\n            };\n            var requires = task.slice(0, Math.abs(task.length - 1)) || [];\n            var ready = function () {\n                return _reduce(requires, function (a, x) {\n                    return (a && results.hasOwnProperty(x));\n                }, true) && !results.hasOwnProperty(k);\n            };\n            if (ready()) {\n                task[task.length - 1](taskCallback, results);\n            }\n            else {\n                var listener = function () {\n                    if (ready()) {\n                        removeListener(listener);\n                        task[task.length - 1](taskCallback, results);\n                    }\n                };\n                addListener(listener);\n            }\n        });\n    };\n\n    async.retry = function(times, task, callback) {\n        var DEFAULT_TIMES = 5;\n        var attempts = [];\n        // Use defaults if times not passed\n        if (typeof times === 'function') {\n            callback = task;\n            task = times;\n            times = DEFAULT_TIMES;\n        }\n        // Make sure times is a number\n        times = parseInt(times, 10) || DEFAULT_TIMES;\n        var wrappedTask = function(wrappedCallback, wrappedResults) {\n            var retryAttempt = function(task, finalAttempt) {\n                return function(seriesCallback) {\n                    task(function(err, result){\n                        seriesCallback(!err || finalAttempt, {err: err, result: result});\n                    }, wrappedResults);\n                };\n            };\n            while (times) {\n                attempts.push(retryAttempt(task, !(times-=1)));\n            }\n            async.series(attempts, function(done, data){\n                data = data[data.length - 1];\n                (wrappedCallback || callback)(data.err, data.result);\n            });\n        }\n        // If a callback is passed, run this as a controll flow\n        return callback ? wrappedTask() : wrappedTask\n    };\n\n    async.waterfall = function (tasks, callback) {\n        callback = callback || function () {};\n        if (!_isArray(tasks)) {\n          var err = new Error('First argument to waterfall must be an array of functions');\n          return callback(err);\n        }\n        if (!tasks.length) {\n            return callback();\n        }\n        var wrapIterator = function (iterator) {\n            return function (err) {\n                if (err) {\n                    callback.apply(null, arguments);\n                    callback = function () {};\n                }\n                else {\n                    var args = Array.prototype.slice.call(arguments, 1);\n                    var next = iterator.next();\n                    if (next) {\n                        args.push(wrapIterator(next));\n                    }\n                    else {\n                        args.push(callback);\n                    }\n                    async.setImmediate(function () {\n                        iterator.apply(null, args);\n                    });\n                }\n            };\n        };\n        wrapIterator(async.iterator(tasks))();\n    };\n\n    var _parallel = function(eachfn, tasks, callback) {\n        callback = callback || function () {};\n        if (_isArray(tasks)) {\n            eachfn.map(tasks, function (fn, callback) {\n                if (fn) {\n                    fn(function (err) {\n                        var args = Array.prototype.slice.call(arguments, 1);\n                        if (args.length <= 1) {\n                            args = args[0];\n                        }\n                        callback.call(null, err, args);\n                    });\n                }\n            }, callback);\n        }\n        else {\n            var results = {};\n            eachfn.each(_keys(tasks), function (k, callback) {\n                tasks[k](function (err) {\n                    var args = Array.prototype.slice.call(arguments, 1);\n                    if (args.length <= 1) {\n                        args = args[0];\n                    }\n                    results[k] = args;\n                    callback(err);\n                });\n            }, function (err) {\n                callback(err, results);\n            });\n        }\n    };\n\n    async.parallel = function (tasks, callback) {\n        _parallel({ map: async.map, each: async.each }, tasks, callback);\n    };\n\n    async.parallelLimit = function(tasks, limit, callback) {\n        _parallel({ map: _mapLimit(limit), each: _eachLimit(limit) }, tasks, callback);\n    };\n\n    async.series = function (tasks, callback) {\n        callback = callback || function () {};\n        if (_isArray(tasks)) {\n            async.mapSeries(tasks, function (fn, callback) {\n                if (fn) {\n                    fn(function (err) {\n                        var args = Array.prototype.slice.call(arguments, 1);\n                        if (args.length <= 1) {\n                            args = args[0];\n                        }\n                        callback.call(null, err, args);\n                    });\n                }\n            }, callback);\n        }\n        else {\n            var results = {};\n            async.eachSeries(_keys(tasks), function (k, callback) {\n                tasks[k](function (err) {\n                    var args = Array.prototype.slice.call(arguments, 1);\n                    if (args.length <= 1) {\n                        args = args[0];\n                    }\n                    results[k] = args;\n                    callback(err);\n                });\n            }, function (err) {\n                callback(err, results);\n            });\n        }\n    };\n\n    async.iterator = function (tasks) {\n        var makeCallback = function (index) {\n            var fn = function () {\n                if (tasks.length) {\n                    tasks[index].apply(null, arguments);\n                }\n                return fn.next();\n            };\n            fn.next = function () {\n                return (index < tasks.length - 1) ? makeCallback(index + 1): null;\n            };\n            return fn;\n        };\n        return makeCallback(0);\n    };\n\n    async.apply = function (fn) {\n        var args = Array.prototype.slice.call(arguments, 1);\n        return function () {\n            return fn.apply(\n                null, args.concat(Array.prototype.slice.call(arguments))\n            );\n        };\n    };\n\n    var _concat = function (eachfn, arr, fn, callback) {\n        var r = [];\n        eachfn(arr, function (x, cb) {\n            fn(x, function (err, y) {\n                r = r.concat(y || []);\n                cb(err);\n            });\n        }, function (err) {\n            callback(err, r);\n        });\n    };\n    async.concat = doParallel(_concat);\n    async.concatSeries = doSeries(_concat);\n\n    async.whilst = function (test, iterator, callback) {\n        if (test()) {\n            iterator(function (err) {\n                if (err) {\n                    return callback(err);\n                }\n                async.whilst(test, iterator, callback);\n            });\n        }\n        else {\n            callback();\n        }\n    };\n\n    async.doWhilst = function (iterator, test, callback) {\n        iterator(function (err) {\n            if (err) {\n                return callback(err);\n            }\n            var args = Array.prototype.slice.call(arguments, 1);\n            if (test.apply(null, args)) {\n                async.doWhilst(iterator, test, callback);\n            }\n            else {\n                callback();\n            }\n        });\n    };\n\n    async.until = function (test, iterator, callback) {\n        if (!test()) {\n            iterator(function (err) {\n                if (err) {\n                    return callback(err);\n                }\n                async.until(test, iterator, callback);\n            });\n        }\n        else {\n            callback();\n        }\n    };\n\n    async.doUntil = function (iterator, test, callback) {\n        iterator(function (err) {\n            if (err) {\n                return callback(err);\n            }\n            var args = Array.prototype.slice.call(arguments, 1);\n            if (!test.apply(null, args)) {\n                async.doUntil(iterator, test, callback);\n            }\n            else {\n                callback();\n            }\n        });\n    };\n\n    async.queue = function (worker, concurrency) {\n        if (concurrency === undefined) {\n            concurrency = 1;\n        }\n        function _insert(q, data, pos, callback) {\n          if (!q.started){\n            q.started = true;\n          }\n          if (!_isArray(data)) {\n              data = [data];\n          }\n          if(data.length == 0) {\n             // call drain immediately if there are no tasks\n             return async.setImmediate(function() {\n                 if (q.drain) {\n                     q.drain();\n                 }\n             });\n          }\n          _each(data, function(task) {\n              var item = {\n                  data: task,\n                  callback: typeof callback === 'function' ? callback : null\n              };\n\n              if (pos) {\n                q.tasks.unshift(item);\n              } else {\n                q.tasks.push(item);\n              }\n\n              if (q.saturated && q.tasks.length === q.concurrency) {\n                  q.saturated();\n              }\n              async.setImmediate(q.process);\n          });\n        }\n\n        var workers = 0;\n        var q = {\n            tasks: [],\n            concurrency: concurrency,\n            saturated: null,\n            empty: null,\n            drain: null,\n            started: false,\n            paused: false,\n            push: function (data, callback) {\n              _insert(q, data, false, callback);\n            },\n            kill: function () {\n              q.drain = null;\n              q.tasks = [];\n            },\n            unshift: function (data, callback) {\n              _insert(q, data, true, callback);\n            },\n            process: function () {\n                if (!q.paused && workers < q.concurrency && q.tasks.length) {\n                    var task = q.tasks.shift();\n                    if (q.empty && q.tasks.length === 0) {\n                        q.empty();\n                    }\n                    workers += 1;\n                    var next = function () {\n                        workers -= 1;\n                        if (task.callback) {\n                            task.callback.apply(task, arguments);\n                        }\n                        if (q.drain && q.tasks.length + workers === 0) {\n                            q.drain();\n                        }\n                        q.process();\n                    };\n                    var cb = only_once(next);\n                    worker(task.data, cb);\n                }\n            },\n            length: function () {\n                return q.tasks.length;\n            },\n            running: function () {\n                return workers;\n            },\n            idle: function() {\n                return q.tasks.length + workers === 0;\n            },\n            pause: function () {\n                if (q.paused === true) { return; }\n                q.paused = true;\n                q.process();\n            },\n            resume: function () {\n                if (q.paused === false) { return; }\n                q.paused = false;\n                q.process();\n            }\n        };\n        return q;\n    };\n    \n    async.priorityQueue = function (worker, concurrency) {\n        \n        function _compareTasks(a, b){\n          return a.priority - b.priority;\n        };\n        \n        function _binarySearch(sequence, item, compare) {\n          var beg = -1,\n              end = sequence.length - 1;\n          while (beg < end) {\n            var mid = beg + ((end - beg + 1) >>> 1);\n            if (compare(item, sequence[mid]) >= 0) {\n              beg = mid;\n            } else {\n              end = mid - 1;\n            }\n          }\n          return beg;\n        }\n        \n        function _insert(q, data, priority, callback) {\n          if (!q.started){\n            q.started = true;\n          }\n          if (!_isArray(data)) {\n              data = [data];\n          }\n          if(data.length == 0) {\n             // call drain immediately if there are no tasks\n             return async.setImmediate(function() {\n                 if (q.drain) {\n                     q.drain();\n                 }\n             });\n          }\n          _each(data, function(task) {\n              var item = {\n                  data: task,\n                  priority: priority,\n                  callback: typeof callback === 'function' ? callback : null\n              };\n              \n              q.tasks.splice(_binarySearch(q.tasks, item, _compareTasks) + 1, 0, item);\n\n              if (q.saturated && q.tasks.length === q.concurrency) {\n                  q.saturated();\n              }\n              async.setImmediate(q.process);\n          });\n        }\n        \n        // Start with a normal queue\n        var q = async.queue(worker, concurrency);\n        \n        // Override push to accept second parameter representing priority\n        q.push = function (data, priority, callback) {\n          _insert(q, data, priority, callback);\n        };\n        \n        // Remove unshift function\n        delete q.unshift;\n\n        return q;\n    };\n\n    async.cargo = function (worker, payload) {\n        var working     = false,\n            tasks       = [];\n\n        var cargo = {\n            tasks: tasks,\n            payload: payload,\n            saturated: null,\n            empty: null,\n            drain: null,\n            drained: true,\n            push: function (data, callback) {\n                if (!_isArray(data)) {\n                    data = [data];\n                }\n                _each(data, function(task) {\n                    tasks.push({\n                        data: task,\n                        callback: typeof callback === 'function' ? callback : null\n                    });\n                    cargo.drained = false;\n                    if (cargo.saturated && tasks.length === payload) {\n                        cargo.saturated();\n                    }\n                });\n                async.setImmediate(cargo.process);\n            },\n            process: function process() {\n                if (working) return;\n                if (tasks.length === 0) {\n                    if(cargo.drain && !cargo.drained) cargo.drain();\n                    cargo.drained = true;\n                    return;\n                }\n\n                var ts = typeof payload === 'number'\n                            ? tasks.splice(0, payload)\n                            : tasks.splice(0, tasks.length);\n\n                var ds = _map(ts, function (task) {\n                    return task.data;\n                });\n\n                if(cargo.empty) cargo.empty();\n                working = true;\n                worker(ds, function () {\n                    working = false;\n\n                    var args = arguments;\n                    _each(ts, function (data) {\n                        if (data.callback) {\n                            data.callback.apply(null, args);\n                        }\n                    });\n\n                    process();\n                });\n            },\n            length: function () {\n                return tasks.length;\n            },\n            running: function () {\n                return working;\n            }\n        };\n        return cargo;\n    };\n\n    var _console_fn = function (name) {\n        return function (fn) {\n            var args = Array.prototype.slice.call(arguments, 1);\n            fn.apply(null, args.concat([function (err) {\n                var args = Array.prototype.slice.call(arguments, 1);\n                if (typeof console !== 'undefined') {\n                    if (err) {\n                        if (console.error) {\n                            console.error(err);\n                        }\n                    }\n                    else if (console[name]) {\n                        _each(args, function (x) {\n                            console[name](x);\n                        });\n                    }\n                }\n            }]));\n        };\n    };\n    async.log = _console_fn('log');\n    async.dir = _console_fn('dir');\n    /*async.info = _console_fn('info');\n    async.warn = _console_fn('warn');\n    async.error = _console_fn('error');*/\n\n    async.memoize = function (fn, hasher) {\n        var memo = {};\n        var queues = {};\n        hasher = hasher || function (x) {\n            return x;\n        };\n        var memoized = function () {\n            var args = Array.prototype.slice.call(arguments);\n            var callback = args.pop();\n            var key = hasher.apply(null, args);\n            if (key in memo) {\n                async.nextTick(function () {\n                    callback.apply(null, memo[key]);\n                });\n            }\n            else if (key in queues) {\n                queues[key].push(callback);\n            }\n            else {\n                queues[key] = [callback];\n                fn.apply(null, args.concat([function () {\n                    memo[key] = arguments;\n                    var q = queues[key];\n                    delete queues[key];\n                    for (var i = 0, l = q.length; i < l; i++) {\n                      q[i].apply(null, arguments);\n                    }\n                }]));\n            }\n        };\n        memoized.memo = memo;\n        memoized.unmemoized = fn;\n        return memoized;\n    };\n\n    async.unmemoize = function (fn) {\n      return function () {\n        return (fn.unmemoized || fn).apply(null, arguments);\n      };\n    };\n\n    async.times = function (count, iterator, callback) {\n        var counter = [];\n        for (var i = 0; i < count; i++) {\n            counter.push(i);\n        }\n        return async.map(counter, iterator, callback);\n    };\n\n    async.timesSeries = function (count, iterator, callback) {\n        var counter = [];\n        for (var i = 0; i < count; i++) {\n            counter.push(i);\n        }\n        return async.mapSeries(counter, iterator, callback);\n    };\n\n    async.seq = function (/* functions... */) {\n        var fns = arguments;\n        return function () {\n            var that = this;\n            var args = Array.prototype.slice.call(arguments);\n            var callback = args.pop();\n            async.reduce(fns, args, function (newargs, fn, cb) {\n                fn.apply(that, newargs.concat([function () {\n                    var err = arguments[0];\n                    var nextargs = Array.prototype.slice.call(arguments, 1);\n                    cb(err, nextargs);\n                }]))\n            },\n            function (err, results) {\n                callback.apply(that, [err].concat(results));\n            });\n        };\n    };\n\n    async.compose = function (/* functions... */) {\n      return async.seq.apply(null, Array.prototype.reverse.call(arguments));\n    };\n\n    var _applyEach = function (eachfn, fns /*args...*/) {\n        var go = function () {\n            var that = this;\n            var args = Array.prototype.slice.call(arguments);\n            var callback = args.pop();\n            return eachfn(fns, function (fn, cb) {\n                fn.apply(that, args.concat([cb]));\n            },\n            callback);\n        };\n        if (arguments.length > 2) {\n            var args = Array.prototype.slice.call(arguments, 2);\n            return go.apply(this, args);\n        }\n        else {\n            return go;\n        }\n    };\n    async.applyEach = doParallel(_applyEach);\n    async.applyEachSeries = doSeries(_applyEach);\n\n    async.forever = function (fn, callback) {\n        function next(err) {\n            if (err) {\n                if (callback) {\n                    return callback(err);\n                }\n                throw err;\n            }\n            fn(next);\n        }\n        next();\n    };\n\n    // Node.js\n    if (typeof module !== 'undefined' && module.exports) {\n        module.exports = async;\n    }\n    // AMD / RequireJS\n    else if (typeof define !== 'undefined' && define.amd) {\n        define([], function () {\n            return async;\n        });\n    }\n    // included directly via <script> tag\n    else {\n        root.async = async;\n    }\n\n}());\n","/**\n * The errors for the conference.\n */\n\n/**\n * Indicates that client must be authenticated to create the conference.\n */\nexport const AUTHENTICATION_REQUIRED = 'conference.authenticationRequired';\n\n/**\n * Indicates that chat error occurred.\n */\nexport const CHAT_ERROR = 'conference.chatError';\n\n/**\n * Indicates that a settings error occurred.\n */\nexport const SETTINGS_ERROR = 'conference.settingsError';\n\n/**\n * Indicates that conference has been destroyed.\n */\nexport const CONFERENCE_DESTROYED = 'conference.destroyed';\n\n/**\n * Indicates that max users limit has been reached.\n */\nexport const CONFERENCE_MAX_USERS = 'conference.max_users';\n\n/**\n * Indicates that a connection error occurred when trying to join a conference.\n */\nexport const CONNECTION_ERROR = 'conference.connectionError';\n\n/**\n * Indicates that the client has been forced to restart by jicofo when the\n * conference was migrated from one bridge to another.\n */\nexport const CONFERENCE_RESTARTED = 'conference.restarted';\n\n/**\n * Indicates that a connection error is due to not allowed,\n * occurred when trying to join a conference.\n */\nexport const NOT_ALLOWED_ERROR = 'conference.connectionError.notAllowed';\n\n/**\n * Indicates that a connection error is due to not allowed,\n * occurred when trying to join a conference, only approved members are allowed to join.\n */\nexport const MEMBERS_ONLY_ERROR = 'conference.connectionError.membersOnly';\n\n/**\n * Indicates that a connection error is due to denied access to the room,\n * occurred after joining a lobby room and access is denied by the room moderators.\n */\nexport const CONFERENCE_ACCESS_DENIED = 'conference.connectionError.accessDenied';\n\n/**\n * Indicates that focus error happened.\n */\nexport const FOCUS_DISCONNECTED = 'conference.focusDisconnected';\n\n/**\n * Indicates that focus left the conference.\n */\nexport const FOCUS_LEFT = 'conference.focusLeft';\n\n/**\n * Indicates that graceful shutdown happened.\n */\nexport const GRACEFUL_SHUTDOWN = 'conference.gracefulShutdown';\n\n/**\n * Indicates that the media connection has failed.\n */\nexport const ICE_FAILED = 'conference.iceFailed';\n\n/**\n * Indicates that the versions of the server side components are incompatible\n * with the client side.\n */\nexport const INCOMPATIBLE_SERVER_VERSIONS\n    = 'conference.incompatible_server_versions';\n\n/**\n * Indicates that offer/answer had failed.\n */\nexport const OFFER_ANSWER_FAILED = 'conference.offerAnswerFailed';\n\n/**\n * Indicates that password cannot be set for this conference.\n */\nexport const PASSWORD_NOT_SUPPORTED = 'conference.passwordNotSupported';\n\n/**\n * Indicates that a password is required in order to join the conference.\n */\nexport const PASSWORD_REQUIRED = 'conference.passwordRequired';\n\n/**\n * Indicates that reservation system returned error.\n */\nexport const RESERVATION_ERROR = 'conference.reservationError';\n\n/**\n * Indicates that there is no available videobridge.\n */\nexport const VIDEOBRIDGE_NOT_AVAILABLE = 'conference.videobridgeNotAvailable';\n","/**\n * The events for the conference.\n */\n\n/**\n * Event indicates that the current conference audio input switched between audio\n * input states,i.e. with or without audio input.\n */\nexport const AUDIO_INPUT_STATE_CHANGE = 'conference.audio_input_state_changed';\n\n/**\n * Event indicates that the permission for unmuting audio has changed based on the number of audio senders in the call\n * and the audio sender limit configured in Jicofo.\n */\nexport const AUDIO_UNMUTE_PERMISSIONS_CHANGED = 'conference.audio_unmute_permissions_changed';\n\n/**\n * Indicates that authentication status changed.\n */\nexport const AUTH_STATUS_CHANGED = 'conference.auth_status_changed';\n\n/**\n * Fired just before the statistics module is disposed and it's the last chance\n * to submit some logs to the statistics service (ex. CallStats if enabled),\n * before it's disconnected.\n */\nexport const BEFORE_STATISTICS_DISPOSED = 'conference.beforeStatisticsDisposed';\n\n/**\n * Indicates that an error occured.\n */\nexport const CONFERENCE_ERROR = 'conference.error';\n\n/**\n * Indicates that conference failed.\n */\nexport const CONFERENCE_FAILED = 'conference.failed';\n\n/**\n * Indicates that conference is in progress of joining.\n */\nexport const CONFERENCE_JOIN_IN_PROGRESS = 'conference.join_in_progress';\n\n/**\n * Indicates that conference has been joined. The event does NOT provide any\n * parameters to its listeners.\n */\nexport const CONFERENCE_JOINED = 'conference.joined';\n\n/**\n * Indicates that conference has been left.\n */\nexport const CONFERENCE_LEFT = 'conference.left';\n\n/**\n * Indicates that the conference unique identifier has been set.\n */\nexport const CONFERENCE_UNIQUE_ID_SET = 'conference.unique_id_set';\n\n/**\n * Indicates that the connection to the conference has been established\n * XXX This is currently fired whenVthe *ICE* connection enters 'connected'\n * state for the first time.\n */\nexport const CONNECTION_ESTABLISHED = 'conference.connectionEstablished';\n\n/**\n * Indicates that the connection to the conference has been interrupted for some\n * reason.\n * XXX This is currently fired when the *ICE* connection is interrupted.\n */\nexport const CONNECTION_INTERRUPTED = 'conference.connectionInterrupted';\n\n/**\n * Indicates that the connection to the conference has been restored.\n * XXX This is currently fired when the *ICE* connection is restored.\n */\nexport const CONNECTION_RESTORED = 'conference.connectionRestored';\n\n/**\n * A connection to the video bridge's data channel has been established.\n */\nexport const DATA_CHANNEL_OPENED = 'conference.dataChannelOpened';\n\n/**\n * A user has changed it display name\n */\nexport const DISPLAY_NAME_CHANGED = 'conference.displayNameChanged';\n\n/**\n * The dominant speaker was changed.\n */\nexport const DOMINANT_SPEAKER_CHANGED = 'conference.dominantSpeaker';\n\n/**\n * UTC conference timestamp when first participant joined.\n */\nexport const CONFERENCE_CREATED_TIMESTAMP = 'conference.createdTimestamp';\n\n/**\n * Indicates that DTMF support changed.\n */\nexport const DTMF_SUPPORT_CHANGED = 'conference.dtmfSupportChanged';\n\n/**\n * Indicates that a message from another participant is received on data\n * channel.\n */\nexport const ENDPOINT_MESSAGE_RECEIVED = 'conference.endpoint_message_received';\n\n/**\n * Indicates that a message for the remote endpoint statistics has been received on the bridge channel.\n */\nexport const ENDPOINT_STATS_RECEIVED = 'conference.endpoint_stats_received';\n\n/**\n * NOTE This is lib-jitsi-meet internal event and can be removed at any time !\n *\n * Event emitted when conference transits, between one to one and multiparty JVB\n * conference. If the conference switches to P2P it's neither one to one nor\n * a multiparty JVB conference, but P2P (the status argument of this event will\n * be <tt>false</tt>).\n *\n * The first argument is a boolean which carries the previous value and\n * the seconds argument is a boolean with the new status. The event is emitted\n * only if the previous and the new values are different.\n *\n * @type {string}\n */\nexport const JVB121_STATUS = 'conference.jvb121Status';\n\n/**\n * You are kicked from the conference.\n * @param {JitsiParticipant} the participant that initiated the kick.\n */\nexport const KICKED = 'conference.kicked';\n\n/**\n * Participant was kicked from the conference.\n * @param {JitsiParticipant} the participant that initiated the kick.\n * @param {JitsiParticipant} the participant that was kicked.\n */\nexport const PARTICIPANT_KICKED = 'conference.participant_kicked';\n\n/**\n * The Last N set is changed.\n *\n * @param {Array<string>|null} leavingEndpointIds the ids of all the endpoints\n * which are leaving Last N\n * @param {Array<string>|null} enteringEndpointIds the ids of all the endpoints\n * which are entering Last N\n */\nexport const LAST_N_ENDPOINTS_CHANGED = 'conference.lastNEndpointsChanged';\n\n/**\n * Indicates that the room has been locked or unlocked.\n */\nexport const LOCK_STATE_CHANGED = 'conference.lock_state_changed';\n\n/**\n * Indicates that the region of the media server (jitsi-videobridge) that we\n * are connected to changed (or was initially set).\n * @type {string} the region.\n */\nexport const SERVER_REGION_CHANGED = 'conference.server_region_changed';\n\n/**\n * An event(library-private) fired when a new media session is added to the conference.\n * @type {string}\n * @private\n */\nexport const _MEDIA_SESSION_STARTED = 'conference.media_session.started';\n\n/**\n * An event(library-private) fired when the conference switches the currently active media session.\n * @type {string}\n * @private\n */\nexport const _MEDIA_SESSION_ACTIVE_CHANGED = 'conference.media_session.active_changed';\n\n/**\n * Indicates that the conference had changed to members only enabled/disabled.\n * The first argument of this event is a <tt>boolean</tt> which when set to\n * <tt>true</tt> means that the conference is running in members only mode.\n * You may need to use Lobby if supported to ask for permissions to enter the conference.\n */\nexport const MEMBERS_ONLY_CHANGED = 'conference.membersOnlyChanged';\n\n/**\n * New text message was received.\n */\nexport const MESSAGE_RECEIVED = 'conference.messageReceived';\n\n/**\n * Event indicates that the current selected input device has no signal\n */\nexport const NO_AUDIO_INPUT = 'conference.no_audio_input';\n\n/**\n * Event indicates that the current microphone used by the conference is noisy.\n */\nexport const NOISY_MIC = 'conference.noisy_mic';\n\n/**\n * Indicates that a message from the local user or from the Prosody backend\n * was received on the data channel.\n */\nexport const NON_PARTICIPANT_MESSAGE_RECEIVED = 'conference.non_participant_message_received';\n\n/**\n * New private text message was received.\n */\nexport const PRIVATE_MESSAGE_RECEIVED = 'conference.privateMessageReceived';\n\n/**\n * Event fired when JVB sends notification about interrupted/restored user's\n * ICE connection status or we detect local problem with the video track.\n * First argument is the ID of the participant and\n * the seconds is a string indicating if the connection is currently\n * - active - the connection is active\n * - inactive - the connection is inactive, was intentionally interrupted by\n * the bridge\n * - interrupted - a network problem occurred\n * - restoring - the connection was inactive and is restoring now\n *\n * The current status value can be obtained by calling\n * JitsiParticipant.getConnectionStatus().\n */\nexport const PARTICIPANT_CONN_STATUS_CHANGED\n    = 'conference.participant_conn_status_changed';\n\n/**\n * Indicates that the features of the participant has been changed.\n */\nexport const PARTCIPANT_FEATURES_CHANGED\n    = 'conference.partcipant_features_changed';\n\n/**\n * Indicates that a the value of a specific property of a specific participant\n * has changed.\n */\nexport const PARTICIPANT_PROPERTY_CHANGED\n    = 'conference.participant_property_changed';\n\n/**\n * Indicates that the conference has switched between JVB and P2P connections.\n * The first argument of this event is a <tt>boolean</tt> which when set to\n * <tt>true</tt> means that the conference is running on the P2P connection.\n */\nexport const P2P_STATUS = 'conference.p2pStatus';\n\n/**\n * Indicates that phone number changed.\n */\nexport const PHONE_NUMBER_CHANGED = 'conference.phoneNumberChanged';\n\n/**\n * The conference properties changed.\n * @type {string}\n */\nexport const PROPERTIES_CHANGED = 'conference.propertiesChanged';\n\n/**\n * Indicates that recording state changed.\n */\nexport const RECORDER_STATE_CHANGED = 'conference.recorderStateChanged';\n\n/**\n * Indicates that video SIP GW state changed.\n * @param {VideoSIPGWConstants} status.\n */\nexport const VIDEO_SIP_GW_AVAILABILITY_CHANGED\n    = 'conference.videoSIPGWAvailabilityChanged';\n\n/**\n * Indicates that video SIP GW Session state changed.\n * @param {options} event - {\n *     {string} address,\n *     {VideoSIPGWConstants} oldState,\n *     {VideoSIPGWConstants} newState,\n *     {string} displayName}\n * }.\n */\nexport const VIDEO_SIP_GW_SESSION_STATE_CHANGED\n    = 'conference.videoSIPGWSessionStateChanged';\n\n/**\n * Indicates that start muted settings changed.\n */\nexport const START_MUTED_POLICY_CHANGED\n    = 'conference.start_muted_policy_changed';\n\n/**\n * Indicates that the local user has started muted.\n */\nexport const STARTED_MUTED = 'conference.started_muted';\n\n/**\n * Indicates that subject of the conference has changed.\n */\nexport const SUBJECT_CHANGED = 'conference.subjectChanged';\n\n/**\n * Indicates that DTMF support changed.\n */\nexport const SUSPEND_DETECTED = 'conference.suspendDetected';\n\n/**\n * Event indicates that local user is talking while he muted himself\n */\nexport const TALK_WHILE_MUTED = 'conference.talk_while_muted';\n\n/**\n * A new media track was added to the conference. The event provides the\n * following parameters to its listeners:\n *\n * @param {JitsiTrack} track the added JitsiTrack\n */\nexport const TRACK_ADDED = 'conference.trackAdded';\n\n/**\n * Audio levels of a media track ( attached to the conference) was changed.\n */\nexport const TRACK_AUDIO_LEVEL_CHANGED = 'conference.audioLevelsChanged';\n\n/**\n * A media track ( attached to the conference) mute status was changed.\n * @param {JitsiParticipant|null} the participant that initiated the mute\n * if it is a remote mute.\n */\nexport const TRACK_MUTE_CHANGED = 'conference.trackMuteChanged';\n\n/**\n * The media track was removed from the conference. The event provides the\n * following parameters to its listeners:\n *\n * @param {JitsiTrack} track the removed JitsiTrack\n */\nexport const TRACK_REMOVED = 'conference.trackRemoved';\n\n/**\n * The source-add for unmuting of a media track was rejected by Jicofo.\n *\n */\nexport const TRACK_UNMUTE_REJECTED = 'conference.trackUnmuteRejected';\n\n/**\n * Notifies for transcription status changes. The event provides the\n * following parameters to its listeners:\n *\n * @param {String} status - The new status.\n */\nexport const TRANSCRIPTION_STATUS_CHANGED\n    = 'conference.transcriptionStatusChanged';\n\n\n/**\n * A new user joined the conference.\n */\nexport const USER_JOINED = 'conference.userJoined';\n\n/**\n * A user has left the conference.\n */\nexport const USER_LEFT = 'conference.userLeft';\n\n/**\n * User role changed.\n */\nexport const USER_ROLE_CHANGED = 'conference.roleChanged';\n\n/**\n * User status changed.\n */\nexport const USER_STATUS_CHANGED = 'conference.statusChanged';\n\n/**\n * Event indicates that the permission for unmuting video has changed based on the number of video senders in the call\n * and the video sender limit configured in Jicofo.\n */\nexport const VIDEO_UNMUTE_PERMISSIONS_CHANGED = 'conference.video_unmute_permissions_changed';\n\n/**\n * Event indicates that the bot participant type changed.\n */\nexport const BOT_TYPE_CHANGED = 'conference.bot_type_changed';\n\n/**\n * A new user joined the lobby room.\n */\nexport const LOBBY_USER_JOINED = 'conference.lobby.userJoined';\n\n/**\n * A user from the lobby room has been update.\n */\nexport const LOBBY_USER_UPDATED = 'conference.lobby.userUpdated';\n\n/**\n * A user left the lobby room.\n */\nexport const LOBBY_USER_LEFT = 'conference.lobby.userLeft';\n\n/**\n * The local participant was approved to be able to unmute.\n * @param {options} event - {\n *     {MediaType} mediaType\n * }.\n */\nexport const AV_MODERATION_APPROVED = 'conference.av_moderation.approved';\n\n/**\n * The local participant was blocked to be able to unmute.\n * @param {options} event - {\n *     {MediaType} mediaType\n * }.\n */\nexport const AV_MODERATION_REJECTED = 'conference.av_moderation.rejected';\n\n/**\n * AV Moderation was enabled/disabled. The actor is the participant that is currently in the meeting,\n * or undefined if that participant has left the meeting.\n *\n * @param {options} event - {\n *     {boolean} enabled,\n *     {MediaType} mediaType,\n *     {JitsiParticipant} actor\n * }.\n */\nexport const AV_MODERATION_CHANGED = 'conference.av_moderation.changed';\n\n/**\n * AV Moderation, report for user being approved to unmute.\n * @param {options} event - {\n *     {JitsiParticipant} participant,\n *     {MediaType} mediaType\n * }.\n */\nexport const AV_MODERATION_PARTICIPANT_APPROVED = 'conference.av_moderation.participant.approved';\n\n/**\n * AV Moderation, report for user being blocked to unmute.\n * @param {options} event - {\n *     {JitsiParticipant} participant,\n *     {MediaType} mediaType\n * }.\n */\nexport const AV_MODERATION_PARTICIPANT_REJECTED = 'conference.av_moderation.participant.rejected';\n\n/**\n * A new facial expression is added with its duration for a participant\n */\nexport const FACIAL_EXPRESSION_ADDED = 'conference.facial_expression.added';\n\n/**\n * Event fired when a participant is requested to join a given (breakout) room.\n */\nexport const BREAKOUT_ROOMS_MOVE_TO_ROOM = 'conference.breakout-rooms.move-to-room';\n\n/**\n * Event fired when the breakout rooms data was updated.\n */\nexport const BREAKOUT_ROOMS_UPDATED = 'conference.breakout-rooms.updated';\n\n\nexport const SUBTITLES_RECEIVED = 'conference.subtitles.received';\n\nexport const ANALYTICS_EVENT_RECEIVED = 'analytics.event.received';\n\nexport const TRACK_UPDATED = \"TRACK_UPDATED\";","export const CALLSTATS_SCRIPT_URL = 'https://api.callstats.io/static/callstats-ws.min.js';\n\n/**\n * The number of remote speakers for which the audio levels will be calculated using\n * RTCRtpReceiver#getSynchronizationSources. Limit the number of endpoints to save cpu on the client as this API call\n * is known to take longer to execute when there are many audio receivers.\n */\nexport const SPEAKERS_AUDIO_LEVELS = 5;\n","/**\n * The errors for the JitsiTrack objects.\n */\n\n/**\n * An error which indicates that some of requested constraints in\n * getUserMedia call were not satisfied.\n */\nexport const CONSTRAINT_FAILED = 'gum.constraint_failed';\n\n/**\n * A generic error which indicates an error occurred while selecting\n * a DesktopCapturerSource from the electron app.\n */\nexport const ELECTRON_DESKTOP_PICKER_ERROR\n    = 'gum.electron_desktop_picker_error';\n\n/**\n * An error which indicates a custom desktop picker could not be detected\n * for the electron app.\n */\nexport const ELECTRON_DESKTOP_PICKER_NOT_FOUND\n    = 'gum.electron_desktop_picker_not_found';\n\n/**\n * Generic getUserMedia error.\n */\nexport const GENERAL = 'gum.general';\n\n/**\n * An error which indicates that requested device was not found.\n */\nexport const NOT_FOUND = 'gum.not_found';\n\n/**\n * An error which indicates that user denied permission to share requested\n * device.\n */\nexport const PERMISSION_DENIED = 'gum.permission_denied';\n\n/**\n * Generic error for screensharing failure.\n */\nexport const SCREENSHARING_GENERIC_ERROR\n    = 'gum.screensharing_generic_error';\n\n/**\n * An error which indicates that user canceled screen sharing window\n * selection dialog.\n */\nexport const SCREENSHARING_USER_CANCELED\n    = 'gum.screensharing_user_canceled';\n\n\n/**\n * Indicates that the timeout passed to the obtainAudioAndVideoPermissions has expired without GUM resolving.\n */\nexport const TIMEOUT = 'gum.timeout';\n\n/**\n * An error which indicates that track has been already disposed and cannot\n * be longer used.\n */\nexport const TRACK_IS_DISPOSED = 'track.track_is_disposed';\n\n/**\n * An error which indicates that track has no MediaStream associated.\n */\nexport const TRACK_NO_STREAM_FOUND = 'track.no_stream_found';\n\n/**\n * An error which indicates that requested video resolution is not supported\n * by a webcam.\n */\nexport const UNSUPPORTED_RESOLUTION = 'gum.unsupported_resolution';\n","import * as JitsiTrackErrors from './JitsiTrackErrors';\n\nconst TRACK_ERROR_TO_MESSAGE_MAP = {};\n\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.UNSUPPORTED_RESOLUTION]\n    = 'Video resolution is not supported: ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.SCREENSHARING_USER_CANCELED]\n    = 'User canceled screen sharing prompt';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.SCREENSHARING_GENERIC_ERROR]\n    = 'Unknown error from screensharing';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_ERROR]\n    = 'Unkown error from desktop picker';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_NOT_FOUND]\n    = 'Failed to detect desktop picker';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.GENERAL]\n    = 'Generic getUserMedia error';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.PERMISSION_DENIED]\n    = 'User denied permission to use device(s): ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.NOT_FOUND]\n    = 'Requested device(s) was/were not found: ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.CONSTRAINT_FAILED]\n    = 'Constraint could not be satisfied: ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.TIMEOUT]\n    = 'Could not start media source. Timeout occured!';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.TRACK_IS_DISPOSED]\n    = 'Track has been already disposed';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.TRACK_NO_STREAM_FOUND]\n    = 'Track does not have an associated Media Stream';\n\n// FIXME: Using prototype inheritance because otherwise instanceof is not\n// working properly (see https://github.com/babel/babel/issues/3083)\n\n/**\n *\n * Represents an error that occurred to a JitsiTrack. Can represent various\n * types of errors. For error descriptions (@see JitsiTrackErrors).\n *\n * @extends Error\n *\n *\n * @constructor\n * @param {Object|string} error - error object or error name\n * @param {Object|string} (options) - getUserMedia constraints object or\n * error message\n * @param {('audio'|'video'|'desktop'|'screen'|'audiooutput')[]} (devices) -\n * list of getUserMedia requested devices\n */\nfunction JitsiTrackError(error, options, devices) {\n    if (typeof error === 'object' && typeof error.name !== 'undefined') {\n        /**\n         * Additional information about original getUserMedia error\n         * and constraints.\n         * @type {{\n         *     error: Object,\n         *     constraints: Object,\n         *     devices: Array.<'audio'|'video'|'desktop'|'screen'>\n         * }}\n         */\n        this.gum = {\n            error,\n            constraints: options,\n            devices: devices && Array.isArray(devices)\n                ? devices.slice(0)\n                : undefined\n        };\n\n        switch (error.name) {\n        case 'NotAllowedError':\n        case 'PermissionDeniedError':\n        case 'SecurityError':\n            this.name = JitsiTrackErrors.PERMISSION_DENIED;\n            this.message\n                = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                    + (this.gum.devices || []).join(', ');\n            break;\n        case 'DevicesNotFoundError':\n        case 'NotFoundError':\n            this.name = JitsiTrackErrors.NOT_FOUND;\n            this.message\n                = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                    + (this.gum.devices || []).join(', ');\n            break;\n        case 'ConstraintNotSatisfiedError':\n        case 'OverconstrainedError': {\n            const constraintName = error.constraintName || error.constraint;\n\n            // we treat deviceId as unsupported resolution, as we want to\n            // retry and finally if everything fails to remove deviceId from\n            // mandatory constraints\n            if (options\n                    && options.video\n                    && (!devices || devices.indexOf('video') > -1)\n                    && (constraintName === 'minWidth'\n                        || constraintName === 'maxWidth'\n                        || constraintName === 'minHeight'\n                        || constraintName === 'maxHeight'\n                        || constraintName === 'width'\n                        || constraintName === 'height'\n                        || constraintName === 'deviceId')) {\n                this.name = JitsiTrackErrors.UNSUPPORTED_RESOLUTION;\n                this.message\n                    = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                        + getResolutionFromFailedConstraint(\n                            constraintName,\n                            options);\n            } else {\n                this.name = JitsiTrackErrors.CONSTRAINT_FAILED;\n                this.message\n                    = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                        + error.constraintName;\n            }\n            break;\n        }\n\n        default:\n            this.name = JitsiTrackErrors.GENERAL;\n            this.message\n                = error.message || TRACK_ERROR_TO_MESSAGE_MAP[this.name];\n            break;\n        }\n    } else if (typeof error === 'string') {\n        if (TRACK_ERROR_TO_MESSAGE_MAP[error]) {\n            this.name = error;\n            this.message = options || TRACK_ERROR_TO_MESSAGE_MAP[error];\n        } else {\n            // this is some generic error that do not fit any of our\n            // pre-defined errors, so don't give it any specific name, just\n            // store message\n            this.message = error;\n        }\n    } else {\n        throw new Error('Invalid arguments');\n    }\n\n    this.stack = error.stack || new Error().stack;\n}\n\nJitsiTrackError.prototype = Object.create(Error.prototype);\nJitsiTrackError.prototype.constructor = JitsiTrackError;\n\n/**\n * Gets failed resolution constraint from corresponding object.\n * @param {string} failedConstraintName\n * @param {Object} constraints\n * @returns {string|number}\n */\nfunction getResolutionFromFailedConstraint(failedConstraintName, constraints) {\n    if (constraints && constraints.video && constraints.video.mandatory) {\n        switch (failedConstraintName) {\n        case 'width':\n            return constraints.video.mandatory.minWidth;\n        case 'height':\n            return constraints.video.mandatory.minHeight;\n        default:\n            return constraints.video.mandatory[failedConstraintName] || '';\n        }\n    }\n\n    return '';\n}\n\nexport default JitsiTrackError;\n","/**\n * This class exports constants and factory methods related to the analytics\n * API provided by AnalyticsAdapter. In order for entries in a database to be\n * somewhat easily traceable back to the code which produced them, events sent\n * through analytics should be defined here.\n *\n * Since the AnalyticsAdapter API can be used in different ways, for some events\n * it is more convenient to just define the event name as a constant. For other\n * events a factory function is easier.\n *\n * A general approach for adding a new event:\n * 1. Determine the event type: track, UI, page, or operational. If in doubt use\n * operational.\n * 2. Determine whether the event is related to other existing events, and\n * which fields are desired to be set: name, action, actionSubject, source.\n * 3. If the name is sufficient (the other fields are not important), use a\n * constant. Otherwise use a factory function.\n *\n * Note that the AnalyticsAdapter uses the events passed to its functions for\n * its own purposes, and might modify them. Because of this, factory functions\n * should create new objects.\n *\n */\n\n/**\n * The constant which identifies an event of type \"operational\".\n * @type {string}\n */\nexport const TYPE_OPERATIONAL = 'operational';\n\n/**\n * The constant which identifies an event of type \"page\".\n * @type {string}\n */\nexport const TYPE_PAGE = 'page';\n\n/**\n * The constant which identifies an event of type \"track\".\n * @type {string}\n */\nexport const TYPE_TRACK = 'track';\n\n/**\n * The constant which identifies an event of type \"ui\".\n * @type {string}\n */\nexport const TYPE_UI = 'ui';\n\n/**\n * The \"action\" value for Jingle events which indicates that the Jingle session\n * was restarted (TODO: verify/fix the documentation)\n * @type {string}\n */\nexport const ACTION_JINGLE_RESTART = 'restart';\n\n/**\n * The \"action\" value for Jingle events which indicates that a session-accept\n * timed out (TODO: verify/fix the documentation)\n * @type {string}\n */\nexport const ACTION_JINGLE_SA_TIMEOUT = 'session-accept.timeout';\n\n/**\n * The \"action\" value for Jingle events which indicates that a session-initiate\n * was received.\n * @type {string}\n */\nexport const ACTION_JINGLE_SI_RECEIVED = 'session-initiate.received';\n\n/**\n * The \"action\" value for Jingle events which indicates that a session-initiate\n * not arrived within a timeout (the value is specified in\n * the {@link JingleSessionPC}.\n * @type {string}\n */\nexport const ACTION_JINGLE_SI_TIMEOUT = 'session-initiate.timeout';\n\n/**\n * A constant for the \"terminate\" action for Jingle events. TODO: verify/fix\n * the documentation)\n * @type {string}\n */\nexport const ACTION_JINGLE_TERMINATE = 'terminate';\n\n/**\n * The \"action\" value for Jingle events which indicates that a transport-replace\n * was received.\n * @type {string}\n */\nexport const ACTION_JINGLE_TR_RECEIVED\n    = 'transport-replace.received';\n\n/**\n * The \"action\" value for Jingle events which indicates that a transport-replace\n * succeeded (TODO: verify/fix the documentation)\n * @type {string}\n */\nexport const ACTION_JINGLE_TR_SUCCESS\n    = 'transport-replace.success';\n\n/**\n * The \"action\" value for P2P events which indicates that P2P session initiate message has been rejected by the client\n * because the mandatory requirements were not met.\n * @type {string}\n */\nexport const ACTION_P2P_DECLINED = 'decline';\n\n/**\n * The \"action\" value for P2P events which indicates that a connection was\n * established (TODO: verify/fix the documentation)\n * @type {string}\n */\nexport const ACTION_P2P_ESTABLISHED = 'established';\n\n/**\n * The \"action\" value for P2P events which indicates that something failed.\n * @type {string}\n */\nexport const ACTION_P2P_FAILED = 'failed';\n\n/**\n * The \"action\" value for P2P events which indicates that a switch to\n * jitsi-videobridge happened.\n * @type {string}\n */\nexport const ACTION_P2P_SWITCH_TO_JVB = 'switch.to.jvb';\n\n/**\n * The name of an event which indicates an available device. We send one such\n * event per available device once when the available devices are first known,\n * and every time that they change\n * @type {string}\n *\n * Properties:\n *      audio_input_device_count: the number of audio input devices available at\n *          the time the event was sent.\n *      audio_output_device_count: the number of audio output devices available\n *          at the time the event was sent.\n *      video_input_device_count: the number of video input devices available at\n *          the time the event was sent.\n *      video_output_device_count: the number of video output devices available\n *          at the time the event was sent.\n *      device_id: an identifier of the device described in this event.\n *      device_group_id:\n *      device_kind: one of 'audioinput', 'audiooutput', 'videoinput' or\n *          'videooutput'.\n *      device_label: a string which describes the device.\n */\nexport const AVAILABLE_DEVICE = 'available.device';\n\n/**\n * This appears to be fired only in certain cases when the XMPP connection\n * disconnects (and it was intentional?). It is currently never observed to\n * fire in production.\n *\n * TODO: document\n *\n * Properties:\n *      message: an error message\n */\nexport const CONNECTION_DISCONNECTED = 'connection.disconnected';\n\n/**\n * Indicates that the user of the application provided feedback in terms of a\n * rating (an integer from 1 to 5) and an optional comment.\n * Properties:\n *      value: the user's rating (an integer from 1 to 5)\n *      comment: the user's comment\n */\nexport const FEEDBACK = 'feedback';\n\n/**\n * Indicates the duration of a particular phase of the ICE connectivity\n * establishment.\n *\n * Properties:\n *      phase: the ICE phase (e.g. 'gathering', 'checking', 'establishment')\n *      value: the duration in milliseconds.\n *      p2p: whether the associated ICE connection is p2p or towards a\n *          jitsi-videobridge\n *      initiator: whether the local Jingle peer is the initiator or responder\n *          in the Jingle session. XXX we probably actually care about the ICE\n *          role (controlling vs controlled), and we assume that this correlates\n *          with the Jingle initiator.\n */\nexport const ICE_DURATION = 'ice.duration';\n\n/**\n * Indicates the difference in milliseconds between the ICE establishment time\n * for the P2P and JVB connections (e.g. a value of 10 would indicate that the\n * P2P connection took 10ms more than JVB connection to establish).\n *\n * Properties:\n *      value: the difference in establishment durations in milliseconds.\n *\n */\nexport const ICE_ESTABLISHMENT_DURATION_DIFF\n    = 'ice.establishment.duration.diff';\n\n/**\n * Indicates that the ICE state has changed.\n *\n * Properties:\n *      state: the ICE state which was entered (e.g. 'checking', 'connected',\n *          'completed', etc).\n *      value: the time in milliseconds (as reported by\n *          window.performance.now()) that the state change occurred.\n *      p2p: whether the associated ICE connection is p2p or towards a\n *          jitsi-videobridge\n *      signalingState: The signaling state of the associated PeerConnection\n *      reconnect: whether the associated Jingle session is in the process of\n *          reconnecting (or is it ICE? TODO: verify/fix the documentation)\n */\nexport const ICE_STATE_CHANGED = 'ice.state.changed';\n\n/**\n * Indicates that no bytes have been sent for the track.\n *\n * Properties:\n *      mediaType: the media type of the local track ('audio' or 'video').\n */\nexport const NO_BYTES_SENT = 'track.no-bytes-sent';\n\n/**\n * Indicates that a track was unmuted (?).\n *\n * Properties:\n *      mediaType: the media type of the local track ('audio' or 'video').\n *      trackType: the type of the track ('local' or 'remote').\n *      value: TODO: document\n */\nexport const TRACK_UNMUTED = 'track.unmuted';\n\n/**\n * Creates an operational event which indicates that we have received a\n * \"bridge down\" event from jicofo.\n */\nexport const createBridgeDownEvent = function() {\n    const bridgeDown = 'bridge.down';\n\n    return {\n        action: bridgeDown,\n        actionSubject: bridgeDown,\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an event which indicates that the XMPP connection failed\n * @param errorType TODO\n * @param errorMessage TODO\n * @param detail connection failed details.\n */\nexport const createConnectionFailedEvent\n    = function(errorType, errorMessage, details) {\n        return {\n            type: TYPE_OPERATIONAL,\n            action: 'connection.failed',\n            attributes: {\n                'error_type': errorType,\n                'error_message': errorMessage,\n                ...details\n            }\n        };\n    };\n\n/**\n * Creates a conference event.\n *\n * @param {string} action - The action of the event.\n * @param {Object} attributes - The attributes to be added to the event.\n * @returns {{type: string, source: string, action: string, attributes: object}}\n */\nexport function createConferenceEvent(action, attributes) {\n    return {\n        action,\n        attributes,\n        source: 'conference',\n        type: TYPE_OPERATIONAL\n    };\n}\n\n/**\n * Creates an operational event which indicates that a particular connection\n * stage was reached (i.e. the XMPP connection transitioned to the \"connected\"\n * state).\n *\n * @param stage the stage which was reached\n * @param attributes additional attributes for the event. This should be an\n * object with a \"value\" property indicating a timestamp in milliseconds\n * relative to the beginning of the document's lifetime.\n *\n */\nexport const createConnectionStageReachedEvent = function(stage, attributes) {\n    const action = 'connection.stage.reached';\n\n    return {\n        action,\n        actionSubject: stage,\n        attributes,\n        source: action,\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an operational event for the end-to-end round trip time to a\n * specific remote participant.\n * @param participantId the ID of the remote participant.\n * @param region the region of the remote participant\n * @param rtt the rtt\n */\nexport const createE2eRttEvent = function(participantId, region, rtt) {\n    const attributes = {\n        'participant_id': participantId,\n        region,\n        rtt\n    };\n\n    return {\n        attributes,\n        name: 'e2e_rtt',\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an event which indicates that the focus has left the MUC.\n */\nexport const createFocusLeftEvent = function() {\n    const action = 'focus.left';\n\n    return {\n        action,\n        actionSubject: action,\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an event related to a getUserMedia call.\n *\n * @param action the type of the result that the event represents: 'error',\n * 'success', 'warning', etc.\n * @param attributes the attributes to attach to the event.\n * @returns {{type: string, source: string, name: string}}\n */\nexport const createGetUserMediaEvent = function(action, attributes = {}) {\n    return {\n        type: TYPE_OPERATIONAL,\n        source: 'get.user.media',\n        action,\n        attributes\n    };\n};\n\n/**\n * Creates an event related to remote participant connection status changes.\n *\n * @param attributes the attributes to attach to the event.\n * @returns {{type: string, source: string, name: string}}\n */\nexport const createParticipantConnectionStatusEvent = function(attributes = {}) {\n    const action = 'duration';\n\n    return {\n        type: TYPE_OPERATIONAL,\n        source: 'peer.conn.status',\n        action,\n        attributes\n    };\n};\n\n/**\n * Creates an event for a Jingle-related event.\n * @param action the action of the event\n * @param attributes attributes to add to the event.\n */\nexport const createJingleEvent = function(action, attributes = {}) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action,\n        source: 'jingle',\n        attributes\n    };\n};\n\n/**\n * Creates an event which indicates that a local track was not able to read\n * data from its source (a camera or a microphone).\n *\n * @param mediaType {String} the media type of the local track ('audio' or\n * 'video').\n */\nexport const createNoDataFromSourceEvent = function(mediaType, value) {\n    return {\n        attributes: {\n            'media_type': mediaType,\n            value\n        },\n        action: 'track.no.data.from.source',\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an event for a p2p-related event.\n * @param action the action of the event\n * @param attributes attributes to add to the event.\n */\nexport const createP2PEvent = function(action, attributes = {}) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action,\n        source: 'p2p',\n        attributes\n    };\n};\n\n/**\n * Indicates that we received a remote command to mute.\n */\nexport const createRemotelyMutedEvent = function(mediaType) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'remotely.muted',\n        mediaType\n    };\n};\n\n/**\n * Creates an event which contains RTP statistics such as RTT and packet loss.\n *\n * All average RTP stats are currently reported under 1 event name, but with\n * different properties that allows to distinguish between a P2P call, a\n * call relayed through TURN or the JVB, and multiparty vs 1:1.\n *\n * The structure of the event is:\n *\n * {\n *      p2p: true,\n *      conferenceSize: 2,\n *      localCandidateType: \"relay\",\n *      remoteCandidateType: \"relay\",\n *      transportType: \"udp\",\n *\n *      // Average RTT of 200ms\n *      \"rtt.avg\": 200,\n *      \"rtt.samples\": \"[100, 200, 300]\",\n *\n *      // Average packet loss of 10%\n *      \"packet.loss.avg\": 10,\n *      \"packet.loss.samples\": '[5, 10, 15]'\n *\n *      // Difference in milliseconds in the end-to-end RTT between p2p and jvb.\n *      // The e2e RTT through jvb is 15ms shorter:\n *      \"rtt.diff\": 15,\n *\n *      // End-to-end RTT through JVB is ms.\n *      \"end2end.rtt.avg\" = 100\n * }\n *\n * Note that the value of the \"samples\" properties are (JSON encoded) strings,\n * and not JSON arrays, as events' attributes can not be nested. The samples are\n * currently included for debug purposes only and can be removed anytime soon\n * from the structure.\n *\n * Also note that not all of values are present in each event, as values are\n * obtained and calculated as part of different process/event pipe. For example\n * {@link ConnectionAvgStats} instances are doing the reports for each\n * {@link TraceablePeerConnection} and work independently from the main stats\n * pipe.\n */\nexport const createRtpStatsEvent = function(attributes) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'rtp.stats',\n        attributes\n    };\n};\n\n/**\n * Creates an event which contains the round trip time (RTT) to a set of\n * regions.\n *\n * @param attributes\n * @returns {{type: string, action: string, attributes: *}}\n */\nexport const createRttByRegionEvent = function(attributes) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'rtt.by.region',\n        attributes\n    };\n};\n\n/**\n * Creates an event which contains the local and remote ICE candidate types\n * for the transport that is currently selected.\n *\n * @param attributes\n * @returns {{type: string, action: string, attributes: *}}\n */\nexport const createTransportStatsEvent = function(attributes) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'transport.stats',\n        attributes\n    };\n};\n\n/**\n * Creates an event which contains information about the audio output problem (the user id of the affected participant,\n * the local audio levels and the remote audio levels that triggered the event).\n *\n * @param {string} userID - The user id of the affected participant.\n * @param {*} localAudioLevels - The local audio levels.\n * @param {*} remoteAudioLevels - The audio levels received from the participant.\n */\nexport function createAudioOutputProblemEvent(userID, localAudioLevels, remoteAudioLevels) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'audio.output.problem',\n        attributes: {\n            userID,\n            localAudioLevels,\n            remoteAudioLevels\n        }\n    };\n}\n\n/**\n * Creates an event which contains an information related to the bridge channel close event.\n *\n * @param {string} code - A code from {@link https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent}\n * @param {string} reason - A string which describes the reason for closing the bridge channel.\n * @returns {{type: string, action: string, attributes: { code: string, reason: string }}}\n */\nexport const createBridgeChannelClosedEvent = function(code, reason) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'bridge-channel.error',\n        attributes: {\n            code,\n            reason\n        }\n    };\n};\n\n/**\n * Creates an event which indicates the Time To First Media (TTFM).\n * It is measured in milliseconds relative to the beginning of the document's\n * lifetime (i.e. the origin used by window.performance.now()), and it excludes\n * the following:\n * 1. The delay due to getUserMedia()\n * 2. The period between the MUC being joined and the reception of the Jingle\n * session-initiate from jicofo. This is because jicofo will not start a Jingle\n * session until there are at least 2 participants in the room.\n *\n * @param attributes the attributes to add to the event. Currently used fields:\n *      mediaType: the media type of the local track ('audio' or 'video').\n *      muted: whether the track has ever been muted (?)\n *      value: the TTMF in milliseconds.\n */\nexport const createTtfmEvent = function(attributes) {\n    return createConnectionStageReachedEvent('ttfm', attributes);\n};\n","/**\n * Notifies about audio level in RTP statistics by SSRC.\n *\n * @param ssrc - The synchronization source identifier (SSRC) of the\n * endpoint/participant whose audio level is being reported.\n * @param {number} audioLevel - The audio level of <tt>ssrc</tt> according to\n * RTP statistics.\n * @param {boolean} isLocal - <tt>true</tt> if <tt>ssrc</tt> identifies the\n * local endpoint/participant; otherwise, <tt>false</tt>.\n */\nexport const AUDIO_LEVEL = 'statistics.audioLevel';\n\n/**\n * An event fired just before the statistics module gets disposes and it's\n * the last chance to submit some logs that will end up in stats services like\n * CallStats (if enabled).\n */\nexport const BEFORE_DISPOSED = 'statistics.before_disposed';\n\n/**\n * An event carrying all statistics by ssrc.\n */\nexport const BYTE_SENT_STATS = 'statistics.byte_sent_stats';\n\n/**\n * An event carrying connection statistics.\n *\n * @param {object} connectionStats - The connection statistics carried by the\n * event such as <tt>bandwidth</tt>, <tt>bitrate</tt>, <tt>packetLoss</tt>,\n * <tt>resolution</tt>, and <tt>transport</tt>.\n */\nexport const CONNECTION_STATS = 'statistics.connectionstats';\n\n/**\n * An event carrying performance stats.\n */\nexport const LONG_TASKS_STATS = 'statistics.long_tasks_stats';\n","// TODO: Maybe fix the values to 'Chrome', 'Internet Explorer', etc. Currently\n// this values needs to be as they are becuse they are going to analytics,\n// callstats, etc.\n\nexport const CHROME = 'chrome';\n\nexport const OPERA = 'opera';\n\nexport const FIREFOX = 'firefox';\n\nexport const INTERNET_EXPLORER = 'iexplorer';\n\nexport const SAFARI = 'safari';\n\nexport const NWJS = 'nwjs';\n\nexport const ELECTRON = 'electron';\n\nexport const REACT_NATIVE = 'react-native';\n\nexport const UNKNOWN = 'unknown';\n","import Bowser from 'bowser';\n\nimport {\n    CHROME,\n    OPERA,\n    FIREFOX,\n    INTERNET_EXPLORER,\n    SAFARI,\n    NWJS,\n    ELECTRON,\n    REACT_NATIVE,\n    UNKNOWN\n} from './browsers.js';\n\n/**\n * Maps the names of the browsers from bowser to the internal names defined in\n * ./browsers.js\n */\nconst bowserNameToJitsiName = {\n    'Chrome': CHROME,\n    'Chromium': CHROME,\n    'Opera': OPERA,\n    'Firefox': FIREFOX,\n    'Internet Explorer': INTERNET_EXPLORER,\n    'Safari': SAFARI\n};\n\n/**\n * Detects a Chromium based environent.\n *\n * NOTE: Here we cannot check solely for \"Chrome\" in the UA, because Edge has\n * it too. We need to check explicitly for chromium based Edge first and then\n * detect other chromium based browsers.\n *\n * @returns {Object|undefined} - The name (CHROME) and version.\n */\nfunction _detectChromiumBased() {\n    const userAgent = navigator.userAgent;\n    const browserInfo = {\n        name: UNKNOWN,\n        version: undefined\n    };\n\n    if (userAgent.match(/Chrome/) && !userAgent.match(/Edge/)) {\n        // Edge is currenly supported only on desktop and android.\n        if (userAgent.match(/Edg(A?)/)) {\n            // Compare the underlying chromium version.\n            const version = userAgent.match(/Chrome\\/([\\d.]+)/)[1];\n\n            if (Number.parseInt(version, 10) > 72) {\n                browserInfo.name = CHROME;\n                browserInfo.version = version;\n            }\n        } else {\n            browserInfo.name = CHROME;\n            browserInfo.version = userAgent.match(/Chrome\\/([\\d.]+)/)[1];\n        }\n    }\n\n    return browserInfo;\n}\n\n/**\n * Detects Electron environment.\n *\n * @returns {Object|undefined} - The name (ELECTRON) and version.\n */\nfunction _detectElectron() {\n    const userAgent = navigator.userAgent;\n\n    if (userAgent.match(/Electron/)) {\n        const version = userAgent.match(/Electron(?:\\s|\\/)([\\d.]+)/)[1];\n\n        return {\n            name: ELECTRON,\n            version\n        };\n    } else if (typeof window.JitsiMeetElectron !== 'undefined') {\n        return {\n            name: ELECTRON,\n            version: undefined\n        };\n    }\n}\n\n/**\n * Detects NWJS environment.\n *\n * @returns {Object|undefined} - The name (NWJS) and version.\n */\nfunction _detectNWJS() {\n    const userAgent = navigator.userAgent;\n\n    if (userAgent.match(/JitsiMeetNW/)) {\n        const version = userAgent.match(/JitsiMeetNW\\/([\\d.]+)/)[1];\n\n        return {\n            name: NWJS,\n            version\n        };\n    }\n}\n\n/**\n * Detects React Native environment.\n * @returns {Object|undefined} - The name (REACT_NATIVE) and version.\n */\nfunction _detectReactNative() {\n    const match\n        = navigator.userAgent.match(/\\b(react[ \\t_-]*native)(?:\\/(\\S+))?/i);\n    let version;\n\n    // If we're remote debugging a React Native app, it may be treated as\n    // Chrome. Check navigator.product as well and always return some version\n    // even if we can't get the real one.\n\n    if (match || navigator.product === 'ReactNative') {\n        let name;\n\n        if (match && match.length > 2) {\n            name = match[1];\n            version = match[2];\n        }\n        name || (name = 'react-native');\n        version || (version = 'unknown');\n\n        return {\n            name: REACT_NATIVE,\n            version\n        };\n    }\n}\n\n/**\n * Returns information about the current browser.\n * @param {Object} - The bowser instance.\n * @returns {Object} - The name and version of the browser.\n */\nfunction _detect(bowser) {\n    let browserInfo;\n    const detectors = [\n        _detectReactNative,\n        _detectElectron,\n        _detectNWJS\n    ];\n\n    // Try all browser detectors\n    for (let i = 0; i < detectors.length; i++) {\n        browserInfo = detectors[i]();\n        if (browserInfo) {\n            return browserInfo;\n        }\n    }\n\n    const name = bowser.getBrowserName();\n\n    if (name in bowserNameToJitsiName) {\n        return {\n            name: bowserNameToJitsiName[name],\n            version: bowser.getBrowserVersion()\n        };\n    }\n\n    // Detect other browsers with the Chrome engine, such as Vivaldi and Brave.\n    browserInfo = _detectChromiumBased();\n    if (browserInfo) {\n        return browserInfo;\n    }\n\n    return {\n        name: UNKNOWN,\n        version: undefined\n    };\n}\n\n/**\n * Implements browser detection.\n */\nexport default class BrowserDetection {\n    /**\n     * Creates new BrowserDetection instance.\n     *\n     * @param {Object} [browserInfo] - Information about the browser.\n     * @param {string} browserInfo.name - The name of the browser.\n     * @param {string} browserInfo.version - The version of the browser.\n     */\n    constructor(browserInfo) {\n        let name, version;\n\n        this._bowser = Bowser.getParser(navigator.userAgent);\n        if (typeof browserInfo === 'undefined') {\n            const detectedBrowserInfo = _detect(this._bowser);\n\n            name = detectedBrowserInfo.name;\n            version = detectedBrowserInfo.version;\n        } else if (browserInfo.name in bowserNameToJitsiName) {\n            name = bowserNameToJitsiName[browserInfo.name];\n            version = browserInfo.version;\n        } else {\n            name = UNKNOWN;\n            version = undefined;\n        }\n\n        this._name = name;\n        this._version = version;\n    }\n\n    /**\n     * Gets current browser name.\n     * @returns {string}\n     */\n    getName() {\n        return this._name;\n    }\n\n    /**\n     * Checks if current browser is Chrome.\n     * @returns {boolean}\n     */\n    isChrome() {\n        return this._name === CHROME;\n    }\n\n    /**\n     * Checks if current browser is Opera.\n     * @returns {boolean}\n     */\n    isOpera() {\n        return this._name === OPERA;\n    }\n\n    /**\n     * Checks if current browser is Firefox.\n     * @returns {boolean}\n     */\n    isFirefox() {\n        return this._name === FIREFOX;\n    }\n\n    /**\n     * Checks if current browser is Internet Explorer.\n     * @returns {boolean}\n     */\n    isIExplorer() {\n        return this._name === INTERNET_EXPLORER;\n    }\n\n    /**\n     * Checks if current browser is Safari.\n     * @returns {boolean}\n     */\n    isSafari() {\n        return this._name === SAFARI;\n    }\n\n    /**\n     * Checks if current environment is NWJS.\n     * @returns {boolean}\n     */\n    isNWJS() {\n        return this._name === NWJS;\n    }\n\n    /**\n     * Checks if current environment is Electron.\n     * @returns {boolean}\n     */\n    isElectron() {\n        return this._name === ELECTRON;\n    }\n\n    /**\n     * Checks if current environment is React Native.\n     * @returns {boolean}\n     */\n    isReactNative() {\n        return this._name === REACT_NATIVE;\n    }\n\n    /**\n     * Returns the version of the current browser.\n     * @returns {string}\n     */\n    getVersion() {\n        return this._version;\n    }\n\n    /**\n     * Check if the parsed browser matches the passed condition.\n     *\n     * @param {Object} checkTree - It's one or two layered object, which can include a\n     * platform or an OS on the first layer and should have browsers specs on the\n     * bottom layer.\n     * Eg. { chrome: '>71.1.0' }\n     *     { windows: { chrome: '<70.2' } }\n     * @returns {boolean | undefined} - Returns true if the browser satisfies the set\n     * conditions, false if not and undefined when the browser is not defined in the\n     * checktree object or when the current browser's version is unknown.\n     * @private\n     */\n    _checkCondition(checkTree) {\n        if (this._version) {\n            return this._bowser.satisfies(checkTree);\n        }\n    }\n\n    /**\n     * Compares the passed version with the current browser version.\n     *\n     * @param {*} version - The version to compare with. Anything different\n     * than string will be converted to string.\n     * @returns {boolean|undefined} - Returns true if the current version is\n     * greater than the passed version and false otherwise. Returns undefined if\n     * the current browser version is unknown.\n     */\n    isVersionGreaterThan(version) {\n        return this._checkCondition({ [this._name]: `>${version}` });\n    }\n\n    /**\n     * Compares the passed version with the current browser version.\n     *\n     * @param {*} version - The version to compare with. Anything different\n     * than string will be converted to string.\n     * @returns {boolean|undefined} - Returns true if the current version is\n     * lower than the passed version and false otherwise. Returns undefined if\n     * the current browser version is unknown.\n     */\n    isVersionLessThan(version) {\n        return this._checkCondition({ [this._name]: `<${version}` });\n    }\n\n    /**\n     * Compares the passed version with the current browser version.\n     *\n     * @param {*} version - The version to compare with. Anything different\n     * than string will be converted to string.\n     * @returns {boolean|undefined} - Returns true if the current version is\n     * equal to the passed version and false otherwise. Returns undefined if\n     * the current browser version is unknown.\n     * A loose-equality operator is used here so that it matches the sub-versions as well.\n     */\n    isVersionEqualTo(version) {\n        return this._checkCondition({ [this._name]: `~${version}` });\n    }\n}\n","import EventEmitter from 'events';\n\n/**\n * Dummy implementation of Storage interface.\n */\nclass DummyLocalStorage extends EventEmitter {\n\n    /**\n     * The object used for storage.\n     */\n    _storage = {};\n\n    /**\n     * Empties all keys out of the storage.\n     *\n     * @returns {void}\n     */\n    clear() {\n        this._storage = {};\n    }\n\n    /**\n     * Returns the number of data items stored in the Storage object.\n     *\n     * @returns {number} - The number of data items stored in the Storage object.\n     */\n    get length() {\n        return Object.keys(this._storage).length;\n    }\n\n    /**\n     * Will return that key's value associated to the passed key name.\n     *\n     * @param {string} keyName - The key name.\n     * @returns {*} - The key value.\n     */\n    getItem(keyName) {\n        return this._storage[keyName];\n    }\n\n    /**\n     * When passed a key name and value, will add that key to the storage,\n     * or update that key's value if it already exists.\n     *\n     * @param {string} keyName - The key name.\n     * @param {*} keyValue - The key value.\n     * @returns {void}\n     */\n    setItem(keyName, keyValue) {\n        this._storage[keyName] = keyValue;\n    }\n\n    /**\n     * When passed a key name, will remove that key from the storage.\n     *\n     * @param {string} keyName - The key name.\n     * @returns {void}\n     */\n    removeItem(keyName) {\n        delete this._storage[keyName];\n    }\n\n    /**\n     * When passed a number n, this method will return the name of the nth key in the storage.\n     *\n     * @param {number} idx - The index of the key.\n     * @returns {string} - The nth key name.\n     */\n    key(n) {\n        const keys = Object.keys(this._storage);\n\n        if (keys.length <= n) {\n            return undefined;\n        }\n\n        return keys[n];\n    }\n\n    /**\n     * Serializes the content of the storage.\n     *\n     * @returns {string} - The serialized content.\n     */\n    serialize() {\n        return JSON.stringify(this._storage);\n    }\n}\n\n/**\n * Wrapper class for browser's local storage object.\n */\nclass JitsiLocalStorage extends EventEmitter {\n    /**\n     * @constructor\n     * @param {Storage} storage browser's local storage object.\n     */\n    constructor() {\n        super();\n\n        try {\n            this._storage = window.localStorage;\n            this._localStorageDisabled = false;\n        } catch (ignore) {\n            // localStorage throws an exception.\n        }\n\n        if (!this._storage) { // Handles the case when window.localStorage is undefined or throws an exception.\n            console.warn('Local storage is disabled.');\n            this._storage = new DummyLocalStorage();\n            this._localStorageDisabled = true;\n        }\n    }\n\n    /**\n     * Returns true if window.localStorage is disabled and false otherwise.\n     *\n     * @returns {boolean} - True if window.localStorage is disabled and false otherwise.\n     */\n    isLocalStorageDisabled() {\n        return this._localStorageDisabled;\n    }\n\n    /**\n     * Empties all keys out of the storage.\n     *\n     * @returns {void}\n     */\n    clear() {\n        this._storage.clear();\n        this.emit('changed');\n    }\n\n    /**\n     * Returns the number of data items stored in the Storage object.\n     *\n     * @returns {number} - The number of data items stored in the Storage object.\n     */\n    get length() {\n        return this._storage.length;\n    }\n\n    /**\n     * Returns that passed key's value.\n     * @param {string} keyName the name of the key you want to retrieve\n     * the value of.\n     * @returns {String|null} the value of the key. If the key does not exist,\n     * null is returned.\n     */\n    getItem(keyName) {\n        return this._storage.getItem(keyName);\n    }\n\n    /**\n     * Adds a key to the storage, or update key's value if it already exists.\n     * @param {string} keyName - the name of the key you want to create/update.\n     * @param {string} keyValue - the value you want to give the key you are\n     * creating/updating.\n     * @param {boolean} dontEmitChangedEvent - If true a changed event won't be emitted.\n     */\n    setItem(keyName, keyValue, dontEmitChangedEvent = false) {\n        this._storage.setItem(keyName, keyValue);\n\n        if (!dontEmitChangedEvent) {\n            this.emit('changed');\n        }\n    }\n\n    /**\n     * Remove a key from the storage.\n     * @param {string} keyName the name of the key you want to remove.\n     */\n    removeItem(keyName) {\n        this._storage.removeItem(keyName);\n        this.emit('changed');\n    }\n\n    /**\n     * Returns the name of the nth key in the list, or null if n is greater\n     * than or equal to the number of key/value pairs in the object.\n     *\n     * @param {number} i - The index of the key in the list.\n     * @returns {string}\n     */\n    key(i) {\n        return this._storage.key(i);\n    }\n\n    /**\n     * Serializes the content of the storage.\n     *\n     * @returns {string} - The serialized content.\n     */\n    serialize() {\n        if (this.isLocalStorageDisabled()) {\n            return this._storage.serialize();\n        }\n\n        const length = this._storage.length;\n        const localStorageContent = {};\n\n        for (let i = 0; i < length; i++) {\n            const key = this._storage.key(i);\n\n            localStorageContent[key] = this._storage.getItem(key);\n        }\n\n        return JSON.stringify(localStorageContent);\n    }\n}\n\nexport const jitsiLocalStorage = new JitsiLocalStorage();\n","import { BrowserDetection } from '@jitsi/js-utils';\nimport { getLogger } from '@jitsi/logger';\n\nconst logger = getLogger(__filename);\n\n/* Minimum required Chrome / Chromium version. This applies also to derivatives. */\nconst MIN_REQUIRED_CHROME_VERSION = 72;\nconst MIN_REQUIRED_SAFARI_VERSION = 14;\nconst MIN_REQUIRED_IOS_VERSION = 14;\n\n// TODO: Move this code to js-utils.\n\n// NOTE: Now we are extending BrowserDetection in order to preserve\n// RTCBrowserType interface but maybe it worth exporting BrowserCapabilities\n// and BrowserDetection as separate objects in future.\n\n/**\n * Implements browser capabilities for lib-jitsi-meet.\n */\nexport default class BrowserCapabilities extends BrowserDetection {\n    /**\n     * Creates new BrowserCapabilities instance.\n     */\n    constructor() {\n        super();\n        logger.info(\n            `This appears to be ${this.getName()}, ver: ${this.getVersion()}`);\n    }\n\n    /**\n     * Tells whether or not the <tt>MediaStream/tt> is removed from the <tt>PeerConnection</tt> and disposed on video\n     * mute (in order to turn off the camera device). This is needed on Firefox because of the following bug\n     * https://bugzilla.mozilla.org/show_bug.cgi?id=1735951\n     *\n     * @return {boolean} <tt>true</tt> if the current browser supports this strategy or <tt>false</tt> otherwise.\n     */\n    doesVideoMuteByStreamRemove() {\n        return this.isChromiumBased() || this.isWebKitBased() || this.isFirefox();\n    }\n\n    /**\n     * Checks if the current browser is Chromium based, i.e., it's either Chrome / Chromium or uses it as its engine,\n     * but doesn't identify as Chrome.\n     *\n     * This includes the following browsers:\n     * - Chrome and Chromium.\n     * - Other browsers which use the Chrome engine, but are detected as Chrome, such as Brave and Vivaldi.\n     * - Browsers which are NOT Chrome but use it as their engine, and have custom detection code: Opera, Electron\n     *   and NW.JS.\n     * This excludes\n     * - Chrome on iOS since it uses WKWebView.\n     */\n    isChromiumBased() {\n        return (this.isChrome()\n            || this.isElectron()\n            || this.isNWJS()\n            || this.isOpera())\n            && !this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current platform is iOS.\n     *\n     * @returns {boolean}\n     */\n    isIosBrowser() {\n        const { userAgent, maxTouchPoints, platform } = navigator;\n\n        return Boolean(userAgent.match(/iP(ad|hone|od)/i))\n            || (maxTouchPoints && maxTouchPoints > 2 && /MacIntel/.test(platform));\n    }\n\n    /**\n     * Checks if the current browser is WebKit based. It's either\n     * Safari or uses WebKit as its engine.\n     *\n     * This includes Chrome and Firefox on iOS\n     *\n     * @returns {boolean}\n     */\n    isWebKitBased() {\n        // https://trac.webkit.org/changeset/236144/webkit/trunk/LayoutTests/webrtc/video-addLegacyTransceiver.html\n        return this._bowser.isEngine('webkit')\n            && typeof navigator.mediaDevices !== 'undefined'\n            && typeof navigator.mediaDevices.getUserMedia !== 'undefined'\n            && typeof window.RTCRtpTransceiver !== 'undefined'\n            // eslint-disable-next-line no-undef\n            && Object.keys(RTCRtpTransceiver.prototype).indexOf('currentDirection') > -1;\n    }\n\n    /**\n     * Checks whether current running context is a Trusted Web Application.\n     *\n     * @returns {boolean} Whether the current context is a TWA.\n     */\n    isTwa() {\n        return 'matchMedia' in window && window.matchMedia('(display-mode:standalone)').matches;\n    }\n\n    /**\n     * Checks if the current browser is supported.\n     *\n     * @returns {boolean} true if the browser is supported, false otherwise.\n     */\n    isSupported() {\n        if (this.isSafari() && this._getSafariVersion() < MIN_REQUIRED_SAFARI_VERSION) {\n            return false;\n        }\n\n        return (this.isChromiumBased() && this._getChromiumBasedVersion() >= MIN_REQUIRED_CHROME_VERSION)\n            || this.isFirefox()\n            || this.isReactNative()\n            || this.isWebKitBased();\n    }\n\n    /**\n     * Returns whether the browser is supported for Android\n     * @returns {boolean} true if the browser is supported for Android devices\n     */\n    isSupportedAndroidBrowser() {\n        return this.isChromiumBased() || this.isFirefox();\n    }\n\n    /**\n     * Returns whether the browser is supported for iOS\n     * @returns {boolean} true if the browser is supported for iOS devices\n     */\n    isSupportedIOSBrowser() {\n        return this._getIOSVersion() >= MIN_REQUIRED_IOS_VERSION;\n    }\n\n    /**\n     * Returns whether or not the current environment needs a user interaction\n     * with the page before any unmute can occur.\n     *\n     * @returns {boolean}\n     */\n    isUserInteractionRequiredForUnmute() {\n        return this.isFirefox() && this.isVersionLessThan('68');\n    }\n\n    /**\n     * Checks if the current browser triggers 'onmute'/'onunmute' events when\n     * user's connection is interrupted and the video stops playback.\n     * @returns {*|boolean} 'true' if the event is supported or 'false'\n     * otherwise.\n     */\n    supportsVideoMuteOnConnInterrupted() {\n        return this.isChromiumBased() || this.isReactNative();\n    }\n\n    /**\n     * Checks if the current browser reports upload and download bandwidth\n     * statistics.\n     * @return {boolean}\n     */\n    supportsBandwidthStatistics() {\n        // FIXME bandwidth stats are currently not implemented for FF on our\n        // side, but not sure if not possible ?\n        return !this.isFirefox() && !this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current browser supports setting codec preferences on the transceiver.\n     * @returns {boolean}\n     */\n    supportsCodecPreferences() {\n        return Boolean(window.RTCRtpTransceiver\n            && 'setCodecPreferences' in window.RTCRtpTransceiver.prototype\n            && window.RTCRtpReceiver\n            && typeof window.RTCRtpReceiver.getCapabilities !== 'undefined')\n\n            // this is not working on Safari because of the following bug\n            // https://bugs.webkit.org/show_bug.cgi?id=215567\n            && !this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current browser support the device change event.\n     * @return {boolean}\n     */\n    supportsDeviceChangeEvent() {\n        return navigator.mediaDevices\n            && typeof navigator.mediaDevices.ondevicechange !== 'undefined'\n            && typeof navigator.mediaDevices.addEventListener !== 'undefined';\n    }\n\n    /**\n     * Checks if the current browser supports RTT statistics for srflx local\n     * candidates through the legacy getStats() API.\n     */\n    supportsLocalCandidateRttStatistics() {\n        return this.isChromiumBased() || this.isReactNative() || this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current browser supports the Long Tasks API that lets us observe\n     * performance measurement events and be notified of tasks that take longer than\n     * 50ms to execute on the main thread.\n     */\n    supportsPerformanceObserver() {\n        return typeof window.PerformanceObserver !== 'undefined'\n            && PerformanceObserver.supportedEntryTypes.indexOf('longtask') > -1;\n    }\n\n    /**\n     * Checks if the current browser supports audio level stats on the receivers.\n     */\n    supportsReceiverStats() {\n        return typeof window.RTCRtpReceiver !== 'undefined'\n            && Object.keys(RTCRtpReceiver.prototype).indexOf('getSynchronizationSources') > -1\n\n            // Disable this on Safari because it is reporting 0.000001 as the audio levels for all\n            // remote audio tracks.\n            && !this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current browser reports round trip time statistics for\n     * the ICE candidate pair.\n     * @return {boolean}\n     */\n    supportsRTTStatistics() {\n        // Firefox does not seem to report RTT for ICE candidate pair:\n        // eslint-disable-next-line max-len\n        // https://www.w3.org/TR/webrtc-stats/#dom-rtcicecandidatepairstats-currentroundtriptime\n        // It does report mozRTT for RTP streams, but at the time of this\n        // writing it's value does not make sense most of the time\n        // (is reported as 1):\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=1241066\n        // For Chrome and others we rely on 'googRtt'.\n        return !this.isFirefox();\n    }\n\n    /**\n     * Returns true if VP9 is supported by the client on the browser. VP9 is currently disabled on Firefox and Safari\n     * because of issues with rendering. Please check https://bugzilla.mozilla.org/show_bug.cgi?id=1492500,\n     * https://bugs.webkit.org/show_bug.cgi?id=231071 and https://bugs.webkit.org/show_bug.cgi?id=231074 for details.\n     */\n    supportsVP9() {\n        return this.isChromiumBased() || this.isReactNative();\n    }\n\n    /**\n     * Checks if the browser uses SDP munging for turning on simulcast.\n     *\n     * @returns {boolean}\n     */\n    usesSdpMungingForSimulcast() {\n        return this.isChromiumBased() || this.isReactNative() || this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the browser uses webrtc-adapter. All browsers except React Native do.\n     *\n     * @returns {boolean}\n     */\n    usesAdapter() {\n        return !this.isReactNative();\n    }\n\n    /**\n     * Checks if the browser uses RIDs/MIDs for siganling the simulcast streams\n     * to the bridge instead of the ssrcs.\n     */\n    usesRidsForSimulcast() {\n        return false;\n    }\n\n    /**\n     * Checks if the browser supports getDisplayMedia.\n     * @returns {boolean} {@code true} if the browser supports getDisplayMedia.\n     */\n    supportsGetDisplayMedia() {\n        return typeof navigator.getDisplayMedia !== 'undefined'\n            || (typeof navigator.mediaDevices !== 'undefined'\n                && typeof navigator.mediaDevices.getDisplayMedia\n                    !== 'undefined');\n    }\n\n    /**\n     * Checks if the browser supports WebRTC Encoded Transform, an alternative\n     * to insertable streams.\n     *\n     * NOTE: At the time of this writing the only browser supporting this is\n     * Safari / WebKit, behind a flag.\n     *\n     * @returns {boolean} {@code true} if the browser supports it.\n     */\n    supportsEncodedTransform() {\n        return Boolean(window.RTCRtpScriptTransform);\n    }\n\n    /**\n     * Checks if the browser supports insertable streams, needed for E2EE.\n     * @returns {boolean} {@code true} if the browser supports insertable streams.\n     */\n    supportsInsertableStreams() {\n        if (!(typeof window.RTCRtpSender !== 'undefined'\n            && window.RTCRtpSender.prototype.createEncodedStreams)) {\n            return false;\n        }\n\n        // Feature-detect transferable streams which we need to operate in a worker.\n        // See https://groups.google.com/a/chromium.org/g/blink-dev/c/1LStSgBt6AM/m/hj0odB8pCAAJ\n        const stream = new ReadableStream();\n\n        try {\n            window.postMessage(stream, '*', [ stream ]);\n\n            return true;\n        } catch {\n            return false;\n        }\n    }\n\n    /**\n     * Whether the browser supports the RED format for audio.\n     */\n    supportsAudioRed() {\n        return Boolean(window.RTCRtpSender\n            && window.RTCRtpSender.getCapabilities\n            && window.RTCRtpSender.getCapabilities('audio').codecs.some(codec => codec.mimeType === 'audio/red')\n            && window.RTCRtpReceiver\n            && window.RTCRtpReceiver.getCapabilities\n            && window.RTCRtpReceiver.getCapabilities('audio').codecs.some(codec => codec.mimeType === 'audio/red'));\n    }\n\n    /**\n     * Checks if the browser supports unified plan.\n     *\n     * @returns {boolean}\n     */\n    supportsUnifiedPlan() {\n        return !this.isReactNative();\n    }\n\n    /**\n     * Checks if the browser supports voice activity detection via the @type {VADAudioAnalyser} service.\n     *\n     * @returns {boolean}\n     */\n    supportsVADDetection() {\n        return this.isChromiumBased();\n    }\n\n    /**\n     * Check if the browser supports the RTP RTX feature (and it is usable).\n     *\n     * @returns {boolean}\n     */\n    supportsRTX() {\n        // Disable RTX on Firefox up to 96 because we prefer simulcast over RTX\n        // see https://bugzilla.mozilla.org/show_bug.cgi?id=1738504\n        return !(this.isFirefox() && this.isVersionLessThan('96'));\n    }\n\n    /**\n     * Returns the version of a Chromium based browser.\n     *\n     * @returns {Number}\n     */\n    _getChromiumBasedVersion() {\n        if (this.isChromiumBased()) {\n            // NW.JS doesn't expose the Chrome version in the UA string.\n            if (this.isNWJS()) {\n                // eslint-disable-next-line no-undef\n                return Number.parseInt(process.versions.chromium, 10);\n            }\n\n            // Here we process all browsers which use the Chrome engine but\n            // don't necessarily identify as Chrome. We cannot use the version\n            // comparing functions because the Electron, Opera and NW.JS\n            // versions are inconsequential here, as we need to know the actual\n            // Chrome engine version.\n            const ua = navigator.userAgent;\n\n            if (ua.match(/Chrome/)) {\n                const version\n                    = Number.parseInt(ua.match(/Chrome\\/([\\d.]+)/)[1], 10);\n\n                return version;\n            }\n        }\n\n        return -1;\n    }\n\n    /**\n     * Returns the version of a Safari browser.\n     *\n     * @returns {Number}\n     */\n    _getSafariVersion() {\n        if (this.isSafari()) {\n            return Number.parseInt(this.getVersion(), 10);\n        }\n\n        return -1;\n    }\n\n    /**\n     * Returns the version of an ios browser.\n     *\n     * @returns {Number}\n     */\n    _getIOSVersion() {\n        if (this.isWebKitBased()) {\n            return Number.parseInt(this.getVersion(), 10);\n        }\n\n        return -1;\n    }\n}\n","import BrowserCapabilities from './BrowserCapabilities';\n\nexport default new BrowserCapabilities();\n","import { getLogger } from '@jitsi/logger';\n\nimport {\n    TYPE_OPERATIONAL,\n    TYPE_PAGE,\n    TYPE_TRACK,\n    TYPE_UI\n} from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\n\nconst MAX_CACHE_SIZE = 100;\n\n// eslist-disable-line no-undef\nconst logger = getLogger(__filename);\n\n/**\n * This class provides an API to lib-jitsi-meet and its users for sending\n * analytics events. It serves as a bridge to different backend implementations\n * (\"analytics handlers\") and a cache for events attempted to be sent before\n * the analytics handlers were enabled.\n *\n * The API is designed to be an easy replacement for the previous version of\n * this adapter, and is meant to be extended with more convenience methods.\n *\n *\n * The API calls are translated to objects with the following structure, which\n * are then passed to the sendEvent(event) function of the underlying handlers:\n *\n * {\n *    type,\n *\n *    action,\n *    actionSubject,\n *    actionSubjectId,\n *    attributes,\n *    categories,\n *    containerId,\n *    containerType,\n *    name,\n *    objectId,\n *    objectType,\n *    source,\n *    tags\n * }\n *\n * The 'type' is one of 'operational', 'page', 'track' or 'ui', and some of the\n * other properties are considered required according to the type.\n *\n * For events with type 'page', the required properties are: name.\n *\n * For events with type 'operational' and 'ui', the required properties are:\n * action, actionSubject, source\n *\n * For events with type 'page', the required properties are:\n * action, actionSubject, source, containerType, containerId, objectType,\n * objectId\n */\nclass AnalyticsAdapter {\n    /**\n     * Creates new AnalyticsAdapter instance.\n     */\n    constructor() {\n        this.reset();\n    }\n\n    /**\n     * Reset the state to the initial one.\n     *\n     * @returns {void}\n     */\n    reset() {\n        /**\n         * Whether this AnalyticsAdapter has been disposed of or not. Once this\n         * is set to true, the AnalyticsAdapter is disabled and does not accept\n         * any more events, and it can not be re-enabled.\n         * @type {boolean}\n         */\n        this.disposed = false;\n\n        /**\n         * The set of handlers to which events will be sent.\n         * @type {Set<any>}\n         */\n        this.analyticsHandlers = new Set();\n\n        /**\n         * The cache of events which are not sent yet. The cache is enabled\n         * while this field is truthy, and disabled otherwise.\n         * @type {Array}\n         */\n        this.cache = [];\n\n        /**\n         * Map of properties that will be added to every event. Note that the\n         * keys will be prefixed with \"permanent.\".\n         */\n        this.permanentProperties = {};\n\n        /**\n         * The name of the conference that this AnalyticsAdapter is associated\n         * with.\n         * @type {null}\n         */\n        this.conferenceName = '';\n\n        this.addPermanentProperties({\n            'user_agent': navigator.userAgent,\n            'browser_name': browser.getName()\n        });\n    }\n\n    /**\n     * Dispose analytics. Clears all handlers.\n     */\n    dispose() {\n        logger.warn('Disposing of analytics adapter.');\n\n        if (this.analyticsHandlers && this.analyticsHandlers.size > 0) {\n            this.analyticsHandlers.forEach(handler => {\n                if (typeof handler.dispose === 'function') {\n                    handler.dispose();\n                }\n            });\n        }\n\n        this.setAnalyticsHandlers([]);\n        this.disposed = true;\n    }\n\n    /**\n     * Sets the handlers that are going to be used to send analytics. Sends any\n     * cached events.\n     * @param {Array} handlers the handlers\n     */\n    setAnalyticsHandlers(handlers) {\n        if (this.disposed) {\n            return;\n        }\n\n        this.analyticsHandlers = new Set(handlers);\n\n        this._setUserProperties();\n\n        // Note that we disable the cache even if the set of handlers is empty.\n        const cache = this.cache;\n\n        this.cache = null;\n        if (cache) {\n            cache.forEach(event => this._sendEvent(event));\n        }\n    }\n\n    /**\n     * Set the user properties to the analytics handlers.\n     *\n     * @returns {void}\n     */\n    _setUserProperties() {\n        this.analyticsHandlers.forEach(handler => {\n            try {\n                handler.setUserProperties(this.permanentProperties);\n            } catch (error) {\n                logger.warn('Error in setUserProperties method of one of the '\n                    + `analytics handlers: ${error}`);\n            }\n        });\n    }\n\n    /**\n     * Adds a set of permanent properties to this this AnalyticsAdapter.\n     * Permanent properties will be added as \"attributes\" to events sent to\n     * the underlying \"analytics handlers\", and their keys will be prefixed\n     * by \"permanent_\", i.e. adding a permanent property {key: \"value\"} will\n     * result in {\"permanent_key\": \"value\"} object to be added to the\n     * \"attributes\" field of events.\n     *\n     * @param {Object} properties the properties to add\n     */\n    addPermanentProperties(properties) {\n        this.permanentProperties = {\n            ...this.permanentProperties,\n            ...properties\n        };\n\n        this._setUserProperties();\n    }\n\n    /**\n     * Sets the name of the conference that this AnalyticsAdapter is associated\n     * with.\n     * @param name the name to set.\n     */\n    setConferenceName(name) {\n        this.conferenceName = name;\n        this.addPermanentProperties({ 'conference_name': name });\n    }\n\n    /**\n     * Sends an event with a given name and given properties. The first\n     * parameter is either a string or an object. If it is a string, it is used\n     * as the event name and the second parameter is used at the attributes to\n     * attach to the event. If it is an object, it represents the whole event,\n     * including any desired attributes, and the second parameter is ignored.\n     *\n     * @param {String|Object} eventName either a string to be used as the name\n     * of the event, or an event object. If an event object is passed, the\n     * properties parameters is ignored.\n     * @param {Object} properties the properties/attributes to attach to the\n     * event, if eventName is a string.\n     */\n    sendEvent(eventName, properties = {}) {\n        if (this.disposed) {\n            return;\n        }\n\n        let event = null;\n\n        if (typeof eventName === 'string') {\n            event = {\n                type: TYPE_OPERATIONAL,\n                action: eventName,\n                actionSubject: eventName,\n                source: eventName,\n                attributes: properties\n            };\n        } else if (typeof eventName === 'object') {\n            event = eventName;\n        }\n\n        if (!this._verifyRequiredFields(event)) {\n            logger.error(\n                `Dropping a mis-formatted event: ${JSON.stringify(event)}`);\n\n            return;\n        }\n\n        this._sendEvent(event);\n    }\n\n    /**\n     * Checks whether an event has all of the required fields set, and tries\n     * to fill in some of the missing fields with reasonable default values.\n     * Returns true if after this operation the event has all of the required\n     * fields set, and false otherwise (if some of the required fields were not\n     * set and the attempt to fill them in with a default failed).\n     *\n     * @param event the event object.\n     * @return {boolean} true if the event (after the call to this function)\n     * contains all of the required fields, and false otherwise.\n     * @private\n     */\n    _verifyRequiredFields(event) {\n        if (!event) {\n            return false;\n        }\n\n        if (!event.type) {\n            event.type = TYPE_OPERATIONAL;\n        }\n\n        const type = event.type;\n\n        if (type !== TYPE_OPERATIONAL && type !== TYPE_PAGE\n            && type !== TYPE_UI && type !== TYPE_TRACK) {\n            logger.error(`Unknown event type: ${type}`);\n\n            return false;\n        }\n\n        if (type === TYPE_PAGE) {\n            return Boolean(event.name);\n        }\n\n        // Try to set some reasonable default values in case some of the\n        // parameters required by the handler API are missing.\n        event.action = event.action || event.name || event.actionSubject;\n        event.actionSubject = event.actionSubject || event.name || event.action;\n        event.source = event.source || event.name || event.action\n            || event.actionSubject;\n\n        if (!event.action || !event.actionSubject || !event.source) {\n            logger.error(\n                'Required field missing (action, actionSubject or source)');\n\n            return false;\n        }\n\n        // Track events have additional required fields.\n        if (type === TYPE_TRACK) {\n            event.objectType = event.objectType || 'generic-object-type';\n            event.containerType = event.containerType || 'conference';\n            if (event.containerType === 'conference' && !event.containerId) {\n                event.containerId = this.conferenceName;\n            }\n\n\n            if (!event.objectType || !event.objectId\n                || !event.containerType || !event.containerId) {\n                logger.error(\n                    'Required field missing (containerId, containerType, '\n                        + 'objectId or objectType)');\n\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Saves an event to the cache, if the cache is enabled.\n     * @param event the event to save.\n     * @returns {boolean} true if the event was saved, and false otherwise (i.e.\n     * if the cache was disabled).\n     * @private\n     */\n    _maybeCacheEvent(event) {\n        if (this.cache) {\n            this.cache.push(event);\n\n            // We limit the size of the cache, in case the user fails to ever\n            // set the analytics handlers.\n            if (this.cache.length > MAX_CACHE_SIZE) {\n                this.cache.splice(0, 1);\n            }\n\n            return true;\n        }\n\n        return false;\n\n    }\n\n    /**\n     *\n     * @param event\n     * @private\n     */\n    _sendEvent(event) {\n        if (this._maybeCacheEvent(event)) {\n            // The event was consumed by the cache.\n        } else {\n            this.analyticsHandlers.forEach(handler => {\n                try {\n                    handler.sendEvent(event);\n                } catch (e) {\n                    logger.warn(`Error sending analytics event: ${e}`);\n                }\n            });\n        }\n    }\n}\n\nexport default new AnalyticsAdapter();\n","/* global callstats */\n\nimport browser from '../browser';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nconst logger = require('@jitsi/logger').getLogger(__filename);\n\n/**\n * We define enumeration of wrtcFuncNames as we need them before\n * callstats is initialized to queue events.\n * @const\n * @see http://www.callstats.io/api/#enumeration-of-wrtcfuncnames\n */\nconst wrtcFuncNames = {\n    createOffer: 'createOffer',\n    createAnswer: 'createAnswer',\n    setLocalDescription: 'setLocalDescription',\n    setRemoteDescription: 'setRemoteDescription',\n    addIceCandidate: 'addIceCandidate',\n    getUserMedia: 'getUserMedia',\n    iceConnectionFailure: 'iceConnectionFailure',\n    signalingError: 'signalingError',\n    applicationLog: 'applicationLog'\n};\n\n/**\n * We define enumeration of fabricEvent as we need them before\n * callstats is initialized to queue events.\n * @const\n * @see http://www.callstats.io/api/#enumeration-of-fabricevent\n */\nconst fabricEvent = {\n    fabricHold: 'fabricHold',\n    fabricResume: 'fabricResume',\n    audioMute: 'audioMute',\n    audioUnmute: 'audioUnmute',\n    videoPause: 'videoPause',\n    videoResume: 'videoResume',\n    fabricUsageEvent: 'fabricUsageEvent',\n    fabricStats: 'fabricStats',\n    fabricTerminated: 'fabricTerminated',\n    screenShareStart: 'screenShareStart',\n    screenShareStop: 'screenShareStop',\n    dominantSpeaker: 'dominantSpeaker',\n    activeDeviceList: 'activeDeviceList'\n};\n\n/**\n * The user id to report to callstats as destination.\n * @type {string}\n */\nconst DEFAULT_REMOTE_USER = 'jitsi';\n\n/**\n * Type of pending reports, can be event or an error.\n * @type {{ERROR: string, EVENT: string}}\n */\nconst reportType = {\n    ERROR: 'error',\n    EVENT: 'event',\n    MST_WITH_USERID: 'mstWithUserID'\n};\n\n/**\n * Set of currently existing {@link CallStats} instances.\n * @type {Set<CallStats>}\n */\nlet _fabrics;\n\n/**\n * An instance of this class is a wrapper for the CallStats API fabric. A fabric\n * reports one peer connection to the CallStats backend and is allocated with\n * {@link callstats.addNewFabric}. It has a bunch of instance methods for\n * reporting various events. A fabric is considered disposed when\n * {@link CallStats.sendTerminateEvent} is executed.\n *\n * Currently only one backend instance can be created ever and it's done using\n * {@link CallStats.initBackend}. At the time of this writing there is no way to\n * explicitly shutdown the backend, but it's supposed to close it's connection\n * automatically, after all fabrics have been terminated.\n */\nexport default class CallStats {\n    /**\n     * A callback passed to {@link callstats.addNewFabric}.\n     * @param {string} error 'success' means ok\n     * @param {string} msg some more details\n     * @private\n     */\n    static _addNewFabricCallback(error, msg) {\n        if (CallStats.backend && error !== 'success') {\n            logger.error(`Monitoring status: ${error} msg: ${msg}`);\n        }\n    }\n\n    /**\n     * Callback passed to {@link callstats.initialize} (backend initialization)\n     * @param {string} error 'success' means ok\n     * @param {String} msg\n     * @private\n     */\n    static _initCallback(error, msg) {\n        logger.log(`CallStats Status: err=${error} msg=${msg}`);\n\n        // there is no lib, nothing to report to\n        if (error !== 'success') {\n            return;\n        }\n\n        CallStats.backendInitialized = true;\n\n        // I hate that\n        let atLeastOneFabric = false;\n        let defaultInstance = null;\n\n        for (const callStatsInstance of CallStats.fabrics.values()) {\n            if (!callStatsInstance.hasFabric) {\n                logger.debug('addNewFabric - initCallback');\n                if (callStatsInstance._addNewFabric()) {\n                    atLeastOneFabric = true;\n                    if (!defaultInstance) {\n                        defaultInstance = callStatsInstance;\n                    }\n                }\n            }\n        }\n\n        if (!atLeastOneFabric) {\n            return;\n        }\n\n        CallStats._emptyReportQueue(defaultInstance);\n    }\n\n    /**\n     * Empties report queue.\n     *\n     * @param {CallStats} csInstance - The callstats instance.\n     * @private\n     */\n    static _emptyReportQueue(csInstance) {\n        // There is no conference ID nor a PeerConnection available when some of\n        // the events are scheduled on the reportsQueue, so those will be\n        // reported on the first initialized fabric.\n        const defaultConfID = csInstance.confID;\n        const defaultPC = csInstance.peerconnection;\n\n        // notify callstats about failures if there were any\n        for (const report of CallStats.reportsQueue) {\n            if (report.type === reportType.ERROR) {\n                const errorData = report.data;\n\n                CallStats._reportError(\n                    csInstance,\n                    errorData.type,\n                    errorData.error,\n                    errorData.pc || defaultPC);\n            } else if (report.type === reportType.EVENT) {\n                // if we have and event to report and we failed to add\n                // fabric this event will not be reported anyway, returning\n                // an error\n                const eventData = report.data;\n\n                CallStats.backend.sendFabricEvent(\n                    report.pc || defaultPC,\n                    eventData.event,\n                    defaultConfID,\n                    eventData.eventData);\n            } else if (report.type === reportType.MST_WITH_USERID) {\n                const data = report.data;\n\n                CallStats.backend.associateMstWithUserID(\n                    report.pc || defaultPC,\n                    data.callStatsId,\n                    defaultConfID,\n                    data.ssrc,\n                    data.usageLabel,\n                    data.containerId\n                );\n            }\n        }\n        CallStats.reportsQueue.length = 0;\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Reports an error to callstats.\n     *\n     * @param {CallStats} [cs]\n     * @param type the type of the error, which will be one of the wrtcFuncNames\n     * @param error the error\n     * @param pc the peerconnection\n     * @private\n     */\n    static _reportError(cs, type, error, pc) {\n        let _error = error;\n\n        if (!_error) {\n            logger.warn('No error is passed!');\n            _error = new Error('Unknown error');\n        }\n        if (CallStats.backendInitialized && cs) {\n            CallStats.backend.reportError(pc, cs.confID, type, _error);\n        } else {\n            CallStats.reportsQueue.push({\n                type: reportType.ERROR,\n                data: {\n                    error: _error,\n                    pc,\n                    type\n                }\n            });\n        }\n\n        // else just ignore it\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Reports an error to callstats.\n     *\n     * @param {CallStats} cs\n     * @param event the type of the event, which will be one of the fabricEvent\n     * @param eventData additional data to pass to event\n     * @private\n     */\n    static _reportEvent(cs, event, eventData) {\n        const pc = cs && cs.peerconnection;\n        const confID = cs && cs.confID;\n\n        if (CallStats.backendInitialized && cs) {\n            CallStats.backend.sendFabricEvent(pc, event, confID, eventData);\n        } else {\n            CallStats.reportsQueue.push({\n                confID,\n                pc,\n                type: reportType.EVENT,\n                data: { event,\n                    eventData }\n            });\n        }\n    }\n\n    /**\n     * Wraps some of the CallStats API method and logs their calls with\n     * arguments on the debug logging level. Also wraps some of the backend\n     * methods execution into try catch blocks to not crash the app in case\n     * there is a problem with the backend itself.\n     * @param {callstats} theBackend\n     * @private\n     */\n    static _traceAndCatchBackendCalls(theBackend) {\n        const tryCatchMethods = [\n            'associateMstWithUserID',\n            'sendFabricEvent',\n            'sendUserFeedback'\n\n            // 'reportError', - this one needs special handling - see code below\n        ];\n\n        for (const methodName of tryCatchMethods) {\n            const originalMethod = theBackend[methodName];\n\n            theBackend[methodName] = function(...theArguments) {\n                try {\n                    return originalMethod.apply(theBackend, theArguments);\n                } catch (e) {\n                    GlobalOnErrorHandler.callErrorHandler(e);\n                }\n            };\n        }\n        const debugMethods = [\n            'associateMstWithUserID',\n            'sendFabricEvent',\n            'sendUserFeedback'\n\n            // 'reportError', - this one needs special handling - see code below\n        ];\n\n        for (const methodName of debugMethods) {\n            const originalMethod = theBackend[methodName];\n\n            theBackend[methodName] = function(...theArguments) {\n                logger.debug(methodName, theArguments);\n                originalMethod.apply(theBackend, theArguments);\n            };\n        }\n        const originalReportError = theBackend.reportError;\n\n        /* eslint-disable max-params */\n        theBackend.reportError = function(pc, cs, type, ...args) {\n            // Logs from the logger are submitted on the applicationLog event\n            // \"type\". Logging the arguments on the logger will create endless\n            // loop, because it will put all the logs to the logger queue again.\n            if (type === wrtcFuncNames.applicationLog) {\n                // NOTE otherArguments are not logged to the console on purpose\n                // to not log the whole log batch\n                // FIXME check the current logging level (currently not exposed\n                // by the logger implementation)\n                // NOTE it is not safe to log whole objects on react-native as\n                // those contain too many circular references and may crash\n                // the app.\n                if (!browser.isReactNative()) {\n                    console && console.debug('reportError', pc, cs, type);\n                }\n            } else {\n                logger.debug('reportError', pc, cs, type, ...args);\n            }\n            try {\n                originalReportError.call(theBackend, pc, cs, type, ...args);\n            } catch (exception) {\n                if (type === wrtcFuncNames.applicationLog) {\n                    console && console.error('reportError', exception);\n                } else {\n                    GlobalOnErrorHandler.callErrorHandler(exception);\n                }\n            }\n        };\n\n        /* eslint-enable max-params */\n    }\n\n    /**\n     * Returns the Set with the currently existing {@link CallStats} instances.\n     * Lazily initializes the Set to allow any Set polyfills to be applied.\n     * @type {Set<CallStats>}\n     */\n    static get fabrics() {\n        if (!_fabrics) {\n            _fabrics = new Set();\n        }\n\n        return _fabrics;\n    }\n\n    /**\n     * Initializes the CallStats backend. Should be called only if\n     * {@link CallStats.isBackendInitialized} returns <tt>false</tt>.\n     * @param {object} options\n     * @param {String} options.callStatsID CallStats credentials - ID\n     * @param {String} options.callStatsSecret CallStats credentials - secret\n     * @param {string} options.aliasName the <tt>aliasName</tt> part of\n     * the <tt>userID</tt> aka endpoint ID, see CallStats docs for more info.\n     * @param {string} options.userName the <tt>userName</tt> part of\n     * the <tt>userID</tt> aka display name, see CallStats docs for more info.\n     * @param {object} options.configParams the set of parameters\n     * to enable/disable certain features in the library. See CallStats docs for more info.\n     *\n     */\n    static initBackend(options) {\n        if (CallStats.backend) {\n            throw new Error('CallStats backend has been initialized already!');\n        }\n        try {\n            const CallStatsBackend = callstats;\n\n            CallStats.backend = new CallStatsBackend();\n            CallStats._traceAndCatchBackendCalls(CallStats.backend);\n            CallStats.userID = {\n                aliasName: options.aliasName,\n                userName: options.userName\n            };\n            CallStats.callStatsID = options.callStatsID;\n            CallStats.callStatsSecret = options.callStatsSecret;\n\n            const configParams = { ...options.configParams };\n\n            if (options.applicationName) {\n                configParams.applicationVersion = `${options.applicationName} (${browser.getName()})`;\n            }\n\n            if (options.confID) {\n                // we first check is there a tenant in the confID\n                const match = options.confID.match(/.*\\/(.*)\\/.*/);\n\n                // if there is no tenant, we will just set '/'\n                configParams.siteID = options.siteID || (match && match[1]) || '/';\n            }\n\n            // userID is generated or given by the origin server\n            CallStats.backend.initialize(\n                CallStats.callStatsID,\n                CallStats.callStatsSecret,\n                CallStats.userID,\n                CallStats._initCallback,\n                undefined,\n                configParams);\n\n            const getWiFiStatsMethod = options.getWiFiStatsMethod;\n\n            if (getWiFiStatsMethod) {\n                CallStats.backend.attachWifiStatsHandler(getWiFiStatsMethod);\n\n                getWiFiStatsMethod().then(result => {\n                    if (result) {\n                        logger.info('Reported wifi addresses:'\n                            , JSON.parse(result).addresses);\n                    }\n                })\n                .catch(() => {});// eslint-disable-line no-empty-function\n            }\n\n            return true;\n        } catch (e) {\n            // The callstats.io API failed to initialize (e.g. because its\n            // download did not succeed in general or on time). Further attempts\n            // to utilize it cannot possibly succeed.\n            GlobalOnErrorHandler.callErrorHandler(e);\n            CallStats.backend = null;\n            logger.error(e);\n\n            return false;\n        }\n    }\n\n    /**\n     * Checks if the CallStats backend has been created. It does not mean that\n     * it has been initialized, but only that the API instance has been\n     * allocated successfully.\n     * @return {boolean} <tt>true</tt> if backend exists or <tt>false</tt>\n     * otherwise\n     */\n    static isBackendInitialized() {\n        return Boolean(CallStats.backend);\n    }\n\n    /**\n     * Notifies CallStats about active device.\n     * @param {{deviceList: {String:String}}} devicesData list of devices with\n     * their data\n     * @param {CallStats} cs callstats instance related to the event\n     */\n    static sendActiveDeviceListEvent(devicesData, cs) {\n        CallStats._reportEvent(cs, fabricEvent.activeDeviceList, devicesData);\n    }\n\n    /**\n     * Notifies CallStats that there is a log we want to report.\n     *\n     * @param {Error} e error to send or {String} message\n     * @param {CallStats} cs callstats instance related to the error (optional)\n     */\n    static sendApplicationLog(e, cs) {\n        try {\n            CallStats._reportError(\n                cs,\n                wrtcFuncNames.applicationLog,\n                e,\n                cs && cs.peerconnection);\n        } catch (error) {\n            // If sendApplicationLog fails it should not be printed to\n            // the logger, because it will try to push the logs again\n            // (through sendApplicationLog) and an endless loop is created.\n            if (console && (typeof console.error === 'function')) {\n                // FIXME send analytics event as well\n                console.error('sendApplicationLog failed', error);\n            }\n        }\n    }\n\n    /**\n     * Sends the given feedback through CallStats.\n     *\n     * @param {string} conferenceID the conference ID for which the feedback\n     * will be reported.\n     * @param overall an integer between 1 and 5 indicating the\n     * user feedback\n     * @param comment detailed feedback from the user.\n     */\n    static sendFeedback(conferenceID, overall, comment) {\n        return new Promise((resolve, reject) => {\n            if (CallStats.backend) {\n                CallStats.backend.sendUserFeedback(\n                    conferenceID,\n                    {\n                        userID: CallStats.userID,\n                        overall,\n                        comment\n                    },\n                    (status, message) => {\n                        if (status === 'success') {\n                            resolve(message);\n                        } else {\n                            reject(message);\n                        }\n                    });\n            } else {\n                const reason = 'Failed to submit feedback to CallStats - no backend';\n\n                logger.error(reason);\n                reject(reason);\n            }\n        });\n    }\n\n    /**\n     * Notifies CallStats that getUserMedia failed.\n     *\n     * @param {Error} e error to send\n     * @param {CallStats} cs callstats instance related to the error (optional)\n     */\n    static sendGetUserMediaFailed(e, cs) {\n        CallStats._reportError(cs, wrtcFuncNames.getUserMedia, e, null);\n    }\n\n    /**\n     * Notifies CallStats for mute events\n     * @param mute {boolean} true for muted and false for not muted\n     * @param type {String} \"audio\"/\"video\"\n     * @param {CallStats} cs callstats instance related to the event\n     */\n    static sendMuteEvent(mute, type, cs) {\n        let event;\n\n        if (type === 'video') {\n            event = mute ? fabricEvent.videoPause : fabricEvent.videoResume;\n        } else {\n            event = mute ? fabricEvent.audioMute : fabricEvent.audioUnmute;\n        }\n\n        CallStats._reportEvent(cs, event);\n    }\n\n    /**\n     * Creates new CallStats instance that handles all callstats API calls for\n     * given {@link TraceablePeerConnection}. Each instance is meant to handle\n     * one CallStats fabric added with 'addFabric' API method for the\n     * {@link TraceablePeerConnection} instance passed in the constructor.\n     * @param {TraceablePeerConnection} tpc\n     * @param {Object} options\n     * @param {string} options.confID the conference ID that wil be used to\n     * report the session.\n     * @param {string} [options.remoteUserID='jitsi'] the remote user ID to\n     * which given <tt>tpc</tt> is connected.\n     */\n    constructor(tpc, options) {\n        this.confID = options.confID;\n        this.tpc = tpc;\n        this.peerconnection = tpc.peerconnection;\n        this.remoteUserID = options.remoteUserID || DEFAULT_REMOTE_USER;\n        this.hasFabric = false;\n\n        CallStats.fabrics.add(this);\n\n        if (CallStats.backendInitialized) {\n            this._addNewFabric();\n\n            // if this is the first fabric let's try to empty the\n            // report queue. Reports all events that we recorded between\n            // backend initialization and receiving the first fabric\n            if (CallStats.fabrics.size === 1) {\n                CallStats._emptyReportQueue(this);\n            }\n        }\n    }\n\n    /**\n     * Initializes CallStats fabric by calling \"addNewFabric\" for\n     * the peer connection associated with this instance.\n     * @return {boolean} true if the call was successful or false otherwise.\n     */\n    _addNewFabric() {\n        logger.info('addNewFabric', this.remoteUserID);\n        try {\n            const fabricAttributes = {\n                remoteEndpointType:\n                    this.tpc.isP2P\n                        ? CallStats.backend.endpointType.peer\n                        : CallStats.backend.endpointType.server\n            };\n            const ret\n                = CallStats.backend.addNewFabric(\n                    this.peerconnection,\n                    this.remoteUserID,\n                    CallStats.backend.fabricUsage.multiplex,\n                    this.confID,\n                    fabricAttributes,\n                    CallStats._addNewFabricCallback);\n\n            this.hasFabric = true;\n\n            const success = ret.status === 'success';\n\n            if (!success) {\n                logger.error('callstats fabric not initilized', ret.message);\n            }\n\n            return success;\n\n        } catch (error) {\n            GlobalOnErrorHandler.callErrorHandler(error);\n\n            return false;\n        }\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Lets CallStats module know where is given SSRC rendered by providing\n     * renderer tag ID.\n     * If the lib is not initialized yet queue the call for later, when it's\n     * ready.\n     * @param {number} ssrc the SSRC of the stream\n     * @param {boolean} isLocal indicates whether this the stream is local\n     * @param {string|null} streamEndpointId if the stream is not local the it\n     * needs to contain the stream owner's ID\n     * @param {string} usageLabel meaningful usage label of this stream like\n     *        'microphone', 'camera' or 'screen'.\n     * @param {string} containerId  the id of media 'audio' or 'video' tag which\n     *        renders the stream.\n     */\n    associateStreamWithVideoTag(\n            ssrc,\n            isLocal,\n            streamEndpointId,\n            usageLabel,\n            containerId) {\n        if (!CallStats.backend) {\n            return;\n        }\n\n        const callStatsId = isLocal ? CallStats.userID : streamEndpointId;\n\n        if (CallStats.backendInitialized) {\n            CallStats.backend.associateMstWithUserID(\n                this.peerconnection,\n                callStatsId,\n                this.confID,\n                ssrc,\n                usageLabel,\n                containerId);\n        } else {\n            CallStats.reportsQueue.push({\n                type: reportType.MST_WITH_USERID,\n                pc: this.peerconnection,\n                data: {\n                    callStatsId,\n                    containerId,\n                    ssrc,\n                    usageLabel\n                }\n            });\n        }\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Notifies CallStats that we are the new dominant speaker in the\n     * conference.\n     */\n    sendDominantSpeakerEvent() {\n        CallStats._reportEvent(this, fabricEvent.dominantSpeaker);\n    }\n\n    /**\n     * Notifies CallStats that the fabric for the underlying peerconnection was\n     * closed and no evens should be reported, after this call.\n     */\n    sendTerminateEvent() {\n        if (CallStats.backendInitialized) {\n            CallStats.backend.sendFabricEvent(\n                this.peerconnection,\n                CallStats.backend.fabricEvent.fabricTerminated,\n                this.confID);\n        }\n        CallStats.fabrics.delete(this);\n    }\n\n    /**\n     * Notifies CallStats for ice connection failed\n     */\n    sendIceConnectionFailedEvent() {\n        CallStats._reportError(\n            this,\n            wrtcFuncNames.iceConnectionFailure,\n            null,\n            this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to create offer.\n     *\n     * @param {Error} e error to send\n     */\n    sendCreateOfferFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.createOffer, e, this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to create answer.\n     *\n     * @param {Error} e error to send\n     */\n    sendCreateAnswerFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.createAnswer, e, this.peerconnection);\n    }\n\n    /**\n     * Sends either resume or hold event for the fabric associated with\n     * the underlying peerconnection.\n     * @param {boolean} isResume true to resume or false to hold\n     */\n    sendResumeOrHoldEvent(isResume) {\n        CallStats._reportEvent(\n            this,\n            isResume ? fabricEvent.fabricResume : fabricEvent.fabricHold);\n    }\n\n    /**\n     * Notifies CallStats for screen sharing events\n     * @param {boolean} start true for starting screen sharing and\n     * false for not stopping\n     * @param {string|null} ssrc - optional ssrc value, used only when\n     * starting screen sharing.\n     */\n    sendScreenSharingEvent(start, ssrc) {\n        let eventData;\n\n        if (ssrc) {\n            eventData = { ssrc };\n        }\n\n        CallStats._reportEvent(\n            this,\n            start ? fabricEvent.screenShareStart : fabricEvent.screenShareStop,\n            eventData);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to set local description.\n     *\n     * @param {Error} e error to send\n     */\n    sendSetLocalDescFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.setLocalDescription, e, this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to set remote description.\n     *\n     * @param {Error} e error to send\n     */\n    sendSetRemoteDescFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.setRemoteDescription, e, this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to add ICE candidate.\n     *\n     * @param {Error} e error to send\n     */\n    sendAddIceCandidateFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.addIceCandidate, e, this.peerconnection);\n    }\n}\n\n/**\n * The CallStats API backend instance\n * @type {callstats}\n */\nCallStats.backend = null;\n\n// some errors/events may happen before CallStats init\n// in this case we accumulate them in this array\n// and send them to callstats on init\nCallStats.reportsQueue = [];\n\n/**\n * Whether the library was successfully initialized(the backend) using its\n * initialize method.\n * @type {boolean}\n */\nCallStats.backendInitialized = false;\n\n/**\n * Part of the CallStats credentials - application ID\n * @type {string}\n */\nCallStats.callStatsID = null;\n\n/**\n * Part of the CallStats credentials - application secret\n * @type {string}\n */\nCallStats.callStatsSecret = null;\n\n/**\n * Local CallStats user ID structure. Can be set only once when\n * {@link backend} is initialized, so it's static for the time being.\n * See CallStats API for more info:\n * https://www.callstats.io/api/#userid\n * @type {object}\n */\nCallStats.userID = null;\n","/**\n * Provides statistics for the local stream.\n */\n\n/**\n * Size of the webaudio analyzer buffer.\n * @type {number}\n */\nconst WEBAUDIO_ANALYZER_FFT_SIZE = 2048;\n\n/**\n * Value of the webaudio analyzer smoothing time parameter.\n * @type {number}\n */\nconst WEBAUDIO_ANALYZER_SMOOTING_TIME = 0.8;\n\nwindow.AudioContext = window.AudioContext || window.webkitAudioContext;\n\nlet context = null;\n\nif (window.AudioContext) {\n    context = new AudioContext();\n\n    // XXX Not all browsers define a suspend method on AudioContext. As the\n    // invocation is at the (ES6 module) global execution level, it breaks the\n    // loading of the lib-jitsi-meet library in such browsers and, consequently,\n    // the loading of the very Web app that uses the lib-jitsi-meet library. For\n    // example, Google Chrome 40 on Android does not define the method but we\n    // still want to be able to load the lib-jitsi-meet library there and\n    // display a page which notifies the user that the Web app is not supported\n    // there.\n    context.suspend && context.suspend();\n}\n\n/**\n * Converts time domain data array to audio level.\n * @param samples the time domain data array.\n * @returns {number} the audio level\n */\nfunction timeDomainDataToAudioLevel(samples) {\n\n    let maxVolume = 0;\n\n    const length = samples.length;\n\n    for (let i = 0; i < length; i++) {\n        if (maxVolume < samples[i]) {\n            maxVolume = samples[i];\n        }\n    }\n\n    return parseFloat(((maxVolume - 127) / 128).toFixed(3));\n}\n\n/**\n * Animates audio level change\n * @param newLevel the new audio level\n * @param lastLevel the last audio level\n * @returns {Number} the audio level to be set\n */\nfunction animateLevel(newLevel, lastLevel) {\n    let value = 0;\n    const diff = lastLevel - newLevel;\n\n    if (diff > 0.2) {\n        value = lastLevel - 0.2;\n    } else if (diff < -0.4) {\n        value = lastLevel + 0.4;\n    } else {\n        value = newLevel;\n    }\n\n    return parseFloat(value.toFixed(3));\n}\n\n\n/**\n * <tt>LocalStatsCollector</tt> calculates statistics for the local stream.\n *\n * @param stream the local stream\n * @param interval stats refresh interval given in ms.\n * @param callback function that receives the audio levels.\n * @constructor\n */\nexport default function LocalStatsCollector(stream, interval, callback) {\n    this.stream = stream;\n    this.intervalId = null;\n    this.intervalMilis = interval;\n    this.audioLevel = 0;\n    this.callback = callback;\n}\n\n/**\n * Starts the collecting the statistics.\n */\nLocalStatsCollector.prototype.start = function() {\n    if (!LocalStatsCollector.isLocalStatsSupported()) {\n        return;\n    }\n    context.resume();\n    const analyser = context.createAnalyser();\n\n    analyser.smoothingTimeConstant = WEBAUDIO_ANALYZER_SMOOTING_TIME;\n    analyser.fftSize = WEBAUDIO_ANALYZER_FFT_SIZE;\n\n    const source = context.createMediaStreamSource(this.stream);\n\n    source.connect(analyser);\n\n    this.intervalId = setInterval(\n        () => {\n            const array = new Uint8Array(analyser.frequencyBinCount);\n\n            analyser.getByteTimeDomainData(array);\n            const audioLevel = timeDomainDataToAudioLevel(array);\n\n            // Set the audio levels always as NoAudioSignalDetection now\n            // uses audio levels from LocalStatsCollector and waits for\n            // atleast 4 secs for a no audio signal before displaying the\n            // notification on the UI.\n            this.audioLevel = animateLevel(audioLevel, this.audioLevel);\n            this.callback(this.audioLevel);\n        },\n        this.intervalMilis\n    );\n};\n\n/**\n * Stops collecting the statistics.\n */\nLocalStatsCollector.prototype.stop = function() {\n    if (this.intervalId) {\n        clearInterval(this.intervalId);\n        this.intervalId = null;\n    }\n};\n\n/**\n * Checks if the environment has the necessary conditions to support\n * collecting stats from local streams.\n *\n * @returns {boolean}\n */\nLocalStatsCollector.isLocalStatsSupported = function() {\n    return Boolean(context);\n};\n","\n/**\n * The method will increase the given number by 1. If the given counter is equal\n * or greater to {@link Number.MAX_SAFE_INTEGER} then it will be rolled back to\n * 1.\n * @param {number} number - An integer counter value to be incremented.\n * @return {number} the next counter value increased by 1 (see the description\n * above for exception).\n */\nexport function safeCounterIncrement(number) {\n    let nextValue = number;\n\n    if (number >= Number.MAX_SAFE_INTEGER) {\n        nextValue = 0;\n    }\n\n    return nextValue + 1;\n}\n\n/**\n * Calculates the average value of am Array of numbers.\n *\n * @param {Float32Array} valueArray - Array of numbers.\n * @returns {number} - Number array average.\n */\nexport function calculateAverage(valueArray) {\n    return valueArray.length > 0 ? valueArray.reduce((a, b) => a + b) / valueArray.length : 0;\n}\n\n/**\n * Calculates a unique hash for a given string similar to Java's\n * implementation of String.hashCode()\n *\n * @param {String} string - String whose hash has to be calculated.\n * @returns {number} - Unique hash code calculated.\n */\nexport function hashString(string) {\n    let hash = 0;\n\n    for (let i = 0; i < string.length; i++) {\n        hash += Math.pow(string.charCodeAt(i) * 31, string.length - i);\n\n        /* eslint-disable no-bitwise */\n        hash = hash & hash; // Convert to 32bit integer\n    }\n\n    return Math.abs(hash);\n}\n\n/**\n * Returns only the positive values from an array of numbers.\n *\n * @param {Float32Array} valueArray - Array of vad scores.\n * @returns {Array} - Array of positive numbers.\n */\nexport function filterPositiveValues(valueArray) {\n    return valueArray.filter(value => value >= 0);\n}\n\n/**\n * This class calculates a simple running average that continually changes\n * as more data points are collected and added.\n */\nexport class RunningAverage {\n    /**\n     * Creates an instance of the running average calculator.\n     */\n    constructor() {\n        this.average = 0;\n        this.n = 0;\n    }\n\n    /**\n     * Adds a new data point to the existing set of values and recomputes\n     * the running average.\n     * @param {number} value\n     * @returns {void}\n     */\n    addNext(value) {\n        if (typeof value !== 'number') {\n            return;\n        }\n        this.n += 1;\n        this.average = this.average + ((value - this.average) / this.n);\n    }\n\n    /**\n     * Obtains the average value for the current subset of values.\n     * @returns {number} - computed average.\n     */\n    getAverage() {\n        return this.average;\n    }\n}\n","\nimport { getLogger } from '@jitsi/logger';\n\nimport * as StatisticsEvents from '../../service/statistics/Events';\nimport { RunningAverage } from '../util/MathUtil';\n\nconst logger = getLogger(__filename);\nconst MILLI_SECONDS = 1000;\nconst SECONDS = 60;\n\n/**\n * This class creates an observer that monitors browser's performance measurement events\n * as they are recorded in the browser's performance timeline and computes an average and\n * a maximum value for the long task events. Tasks are classified as long tasks if they take\n * longer than 50ms to execute on the main thread.\n */\nexport class PerformanceObserverStats {\n    /**\n     * Creates a new instance of Performance observer statistics.\n     *\n     * @param {*} emitter Event emitter for emitting stats periodically\n     * @param {*} statsInterval interval for calculating the stats\n     */\n    constructor(emitter, statsInterval) {\n        this.eventEmitter = emitter;\n        this.longTasks = 0;\n        this.maxDuration = 0;\n        this.performanceStatsInterval = statsInterval;\n        this.stats = new RunningAverage();\n    }\n\n    /**\n     * Obtains the average rate of long tasks observed per min and the\n     * duration of the longest task recorded by the observer.\n     * @returns {Object}\n     */\n    getLongTasksStats() {\n        return {\n            avgRatePerMinute: (this.stats.getAverage() * SECONDS).toFixed(2), // calc rate per min\n            maxDurationMs: this.maxDuration\n        };\n    }\n\n    /**\n     * Starts the performance observer by registering the callback function\n     * that calculates the performance statistics periodically.\n     * @returns {void}\n     */\n    startObserver() {\n        // Create a handler for when the long task event is fired.\n        this.longTaskEventHandler = list => {\n            const entries = list.getEntries();\n\n            for (const task of entries) {\n                this.longTasks++;\n                this.maxDuration = Math.max(this.maxDuration, task.duration).toFixed(3);\n            }\n        };\n\n        // Create an observer for monitoring long tasks.\n        logger.info('Creating a Performance Observer for monitoring Long Tasks');\n        this.observer = new PerformanceObserver(this.longTaskEventHandler);\n        this.observer.observe({ type: 'longtask',\n            buffered: true });\n        const startTime = Date.now();\n\n        // Calculate the average # of events/sec and emit a stats event.\n        this.longTasksIntervalId = setInterval(() => {\n            const now = Date.now();\n            const interval = this._lastTimeStamp\n                ? (now - this._lastTimeStamp) / MILLI_SECONDS\n                : (now - startTime) / MILLI_SECONDS;\n            const rate = this.longTasks / interval;\n\n            this.stats.addNext(rate);\n            this.eventEmitter.emit(\n                StatisticsEvents.LONG_TASKS_STATS, this.getLongTasksStats());\n\n            // Reset the counter and start counting events again.\n            this.longTasks = 0;\n            this._lastTimeStamp = Date.now();\n        }, this.performanceStatsInterval);\n    }\n\n    /**\n     * Stops the performance observer.\n     * @returns {void}\n     */\n    stopObserver() {\n        this.observer && this.observer.disconnect();\n        this.longTaskEventHandler = null;\n        if (this.longTasksIntervalId) {\n            clearInterval(this.longTasksIntervalId);\n            this.longTasksIntervalId = null;\n        }\n    }\n}\n","/**\n * The audio type.\n */\nexport const AUDIO = 'audio';\n\n/**\n * The presenter type.\n */\nexport const PRESENTER = 'presenter';\n\n/**\n * The video type.\n */\nexport const VIDEO = 'video';\n","import { getLogger } from '@jitsi/logger';\n\nimport * as MediaType from '../../service/RTC/MediaType';\nimport * as StatisticsEvents from '../../service/statistics/Events';\nimport browser from '../browser';\n\nconst GlobalOnErrorHandler = require('../util/GlobalOnErrorHandler');\n\nconst logger = getLogger(__filename);\n\n/**\n * Calculates packet lost percent using the number of lost packets and the\n * number of all packet.\n * @param lostPackets the number of lost packets\n * @param totalPackets the number of all packets.\n * @returns {number} packet loss percent\n */\nfunction calculatePacketLoss(lostPackets, totalPackets) {\n    if (!totalPackets || totalPackets <= 0\n            || !lostPackets || lostPackets <= 0) {\n        return 0;\n    }\n\n    return Math.round((lostPackets / totalPackets) * 100);\n}\n\n/**\n * Holds \"statistics\" for a single SSRC.\n * @constructor\n */\nfunction SsrcStats() {\n    this.loss = {};\n    this.bitrate = {\n        download: 0,\n        upload: 0\n    };\n    this.resolution = {};\n    this.framerate = 0;\n    this.codec = '';\n}\n\n/**\n * Sets the \"loss\" object.\n * @param loss the value to set.\n */\nSsrcStats.prototype.setLoss = function(loss) {\n    this.loss = loss || {};\n};\n\n/**\n * Sets resolution that belong to the ssrc represented by this instance.\n * @param resolution new resolution value to be set.\n */\nSsrcStats.prototype.setResolution = function(resolution) {\n    this.resolution = resolution || {};\n};\n\n/**\n * Adds the \"download\" and \"upload\" fields from the \"bitrate\" parameter to\n * the respective fields of the \"bitrate\" field of this object.\n * @param bitrate an object holding the values to add.\n */\nSsrcStats.prototype.addBitrate = function(bitrate) {\n    this.bitrate.download += bitrate.download;\n    this.bitrate.upload += bitrate.upload;\n};\n\n/**\n * Resets the bit rate for given <tt>ssrc</tt> that belong to the peer\n * represented by this instance.\n */\nSsrcStats.prototype.resetBitrate = function() {\n    this.bitrate.download = 0;\n    this.bitrate.upload = 0;\n};\n\n/**\n * Sets the \"framerate\".\n * @param framerate the value to set.\n */\nSsrcStats.prototype.setFramerate = function(framerate) {\n    this.framerate = framerate || 0;\n};\n\nSsrcStats.prototype.setCodec = function(codec) {\n    this.codec = codec || '';\n};\n\n/**\n *\n */\nfunction ConferenceStats() {\n\n    /**\n     * The bandwidth\n     * @type {{}}\n     */\n    this.bandwidth = {};\n\n    /**\n     * The bit rate\n     * @type {{}}\n     */\n    this.bitrate = {};\n\n    /**\n     * The packet loss rate\n     * @type {{}}\n     */\n    this.packetLoss = null;\n\n    /**\n     * Array with the transport information.\n     * @type {Array}\n     */\n    this.transport = [];\n}\n\n/* eslint-disable max-params */\n\n/**\n * <tt>StatsCollector</tt> registers for stats updates of given\n * <tt>peerconnection</tt> in given <tt>interval</tt>. On each update particular\n * stats are extracted and put in {@link SsrcStats} objects. Once the processing\n * is done <tt>audioLevelsUpdateCallback</tt> is called with <tt>this</tt>\n * instance as an event source.\n *\n * @param peerconnection WebRTC PeerConnection object.\n * @param audioLevelsInterval\n * @param statsInterval stats refresh interval given in ms.\n * @param eventEmitter\n * @constructor\n */\nexport default function StatsCollector(peerconnection, audioLevelsInterval, statsInterval, eventEmitter) {\n    this.peerconnection = peerconnection;\n    this.baselineAudioLevelsReport = null;\n    this.currentAudioLevelsReport = null;\n    this.currentStatsReport = null;\n    this.previousStatsReport = null;\n    this.audioLevelReportHistory = {};\n    this.audioLevelsIntervalId = null;\n    this.eventEmitter = eventEmitter;\n    this.conferenceStats = new ConferenceStats();\n\n    // Updates stats interval\n    this.audioLevelsIntervalMilis = audioLevelsInterval;\n\n    this.speakerList = [];\n    this.statsIntervalId = null;\n    this.statsIntervalMilis = statsInterval;\n\n    /**\n     * Maps SSRC numbers to {@link SsrcStats}.\n     * @type {Map<number,SsrcStats}\n     */\n    this.ssrc2stats = new Map();\n}\n\n/**\n * Set the list of the remote speakers for which audio levels are to be calculated.\n *\n * @param {Array<string>} speakerList - Endpoint ids.\n * @returns {void}\n */\nStatsCollector.prototype.setSpeakerList = function(speakerList) {\n    this.speakerList = speakerList;\n};\n\n/**\n * Stops stats updates.\n */\nStatsCollector.prototype.stop = function() {\n    if (this.audioLevelsIntervalId) {\n        clearInterval(this.audioLevelsIntervalId);\n        this.audioLevelsIntervalId = null;\n    }\n\n    if (this.statsIntervalId) {\n        clearInterval(this.statsIntervalId);\n        this.statsIntervalId = null;\n    }\n};\n\n/**\n * Callback passed to <tt>getStats</tt> method.\n * @param error an error that occurred on <tt>getStats</tt> call.\n */\nStatsCollector.prototype.errorCallback = function(error) {\n    GlobalOnErrorHandler.callErrorHandler(error);\n    logger.error('Get stats error', error);\n    this.stop();\n};\n\n/**\n * Starts stats updates.\n */\nStatsCollector.prototype.start = function(startAudioLevelStats) {\n    if (startAudioLevelStats) {\n        if (browser.supportsReceiverStats()) {\n            logger.info('Using RTCRtpSynchronizationSource for remote audio levels');\n        }\n        this.audioLevelsIntervalId = setInterval(\n            () => {\n                if (browser.supportsReceiverStats()) {\n                    const audioLevels = this.peerconnection.getAudioLevels(this.speakerList);\n\n                    for (const ssrc in audioLevels) {\n                        if (audioLevels.hasOwnProperty(ssrc)) {\n                            // Use a scaling factor of 2.5 to report the same\n                            // audio levels that getStats reports.\n                            const audioLevel = audioLevels[ssrc] * 2.5;\n\n                            this.eventEmitter.emit(\n                                StatisticsEvents.AUDIO_LEVEL,\n                                this.peerconnection,\n                                Number.parseInt(ssrc, 10),\n                                audioLevel,\n                                false /* isLocal */);\n                        }\n                    }\n                } else {\n                    // Interval updates\n                    this.peerconnection.getStats()\n                        .then(report => {\n                            this.currentAudioLevelsReport = typeof report?.result === 'function'\n                                ? report.result()\n                                : report;\n                            this.processAudioLevelReport();\n                            this.baselineAudioLevelsReport = this.currentAudioLevelsReport;\n                        })\n                        .catch(error => this.errorCallback(error));\n                }\n            },\n            this.audioLevelsIntervalMilis\n        );\n    }\n\n    const processStats = () => {\n        // Interval updates\n        this.peerconnection.getStats()\n            .then(report => {\n                this.currentStatsReport = typeof report?.result === 'function'\n                    ? report.result()\n                    : report;\n\n                try {\n                    this.processStatsReport();\n                } catch (error) {\n                    GlobalOnErrorHandler.callErrorHandler(error);\n                    logger.error('Processing of RTP stats failed:', error);\n                }\n                this.previousStatsReport = this.currentStatsReport;\n            })\n            .catch(error => this.errorCallback(error));\n    };\n\n    processStats();\n    this.statsIntervalId = setInterval(processStats, this.statsIntervalMilis);\n};\n\n/**\n *\n */\nStatsCollector.prototype._processAndEmitReport = function() {\n    // process stats\n    const totalPackets = {\n        download: 0,\n        upload: 0\n    };\n    const lostPackets = {\n        download: 0,\n        upload: 0\n    };\n    let bitrateDownload = 0;\n    let bitrateUpload = 0;\n    const resolutions = {};\n    const framerates = {};\n    const codecs = {};\n    let audioBitrateDownload = 0;\n    let audioBitrateUpload = 0;\n    let audioCodec;\n    let videoBitrateDownload = 0;\n    let videoBitrateUpload = 0;\n    let videoCodec;\n\n    for (const [ ssrc, ssrcStats ] of this.ssrc2stats) {\n        // process packet loss stats\n        const loss = ssrcStats.loss;\n        const type = loss.isDownloadStream ? 'download' : 'upload';\n\n        totalPackets[type] += loss.packetsTotal;\n        lostPackets[type] += loss.packetsLost;\n\n        // process bitrate stats\n        bitrateDownload += ssrcStats.bitrate.download;\n        bitrateUpload += ssrcStats.bitrate.upload;\n\n        // collect resolutions and framerates\n        const track = this.peerconnection.getTrackBySSRC(ssrc);\n\n        if (track) {\n            if (track.isAudioTrack()) {\n                audioBitrateDownload += ssrcStats.bitrate.download;\n                audioBitrateUpload += ssrcStats.bitrate.upload;\n                audioCodec = ssrcStats.codec;\n            } else {\n                videoBitrateDownload += ssrcStats.bitrate.download;\n                videoBitrateUpload += ssrcStats.bitrate.upload;\n                videoCodec = ssrcStats.codec;\n            }\n\n            const participantId = track.getParticipantId();\n\n            if (participantId) {\n                const resolution = ssrcStats.resolution;\n\n                if (resolution.width\n                        && resolution.height\n                        && resolution.width !== -1\n                        && resolution.height !== -1) {\n                    const userResolutions = resolutions[participantId] || {};\n\n                    userResolutions[ssrc] = resolution;\n                    resolutions[participantId] = userResolutions;\n                }\n                if (ssrcStats.framerate !== 0) {\n                    const userFramerates = framerates[participantId] || {};\n\n                    userFramerates[ssrc] = ssrcStats.framerate;\n                    framerates[participantId] = userFramerates;\n                }\n                if (audioCodec && videoCodec) {\n                    const codecDesc = {\n                        'audio': audioCodec,\n                        'video': videoCodec\n                    };\n\n                    const userCodecs = codecs[participantId] || {};\n\n                    userCodecs[ssrc] = codecDesc;\n                    codecs[participantId] = userCodecs;\n                }\n            } else {\n                logger.error(`No participant ID returned by ${track}`);\n            }\n        }\n\n        ssrcStats.resetBitrate();\n    }\n\n    this.conferenceStats.bitrate = {\n        'upload': bitrateUpload,\n        'download': bitrateDownload\n    };\n\n    this.conferenceStats.bitrate.audio = {\n        'upload': audioBitrateUpload,\n        'download': audioBitrateDownload\n    };\n\n    this.conferenceStats.bitrate.video = {\n        'upload': videoBitrateUpload,\n        'download': videoBitrateDownload\n    };\n\n    this.conferenceStats.packetLoss = {\n        total:\n            calculatePacketLoss(\n                lostPackets.download + lostPackets.upload,\n                totalPackets.download + totalPackets.upload),\n        download:\n            calculatePacketLoss(lostPackets.download, totalPackets.download),\n        upload:\n            calculatePacketLoss(lostPackets.upload, totalPackets.upload)\n    };\n\n    const avgAudioLevels = {};\n    let localAvgAudioLevels;\n\n    Object.keys(this.audioLevelReportHistory).forEach(ssrc => {\n        const { data, isLocal } = this.audioLevelReportHistory[ssrc];\n        const avgAudioLevel = data.reduce((sum, currentValue) => sum + currentValue) / data.length;\n\n        if (isLocal) {\n            localAvgAudioLevels = avgAudioLevel;\n        } else {\n            const track = this.peerconnection.getTrackBySSRC(Number(ssrc));\n\n            if (track) {\n                const participantId = track.getParticipantId();\n\n                if (participantId) {\n                    avgAudioLevels[participantId] = avgAudioLevel;\n                }\n            }\n        }\n    });\n    this.audioLevelReportHistory = {};\n\n    this.eventEmitter.emit(\n        StatisticsEvents.CONNECTION_STATS,\n        this.peerconnection,\n        {\n            'bandwidth': this.conferenceStats.bandwidth,\n            'bitrate': this.conferenceStats.bitrate,\n            'packetLoss': this.conferenceStats.packetLoss,\n            'resolution': resolutions,\n            'framerate': framerates,\n            'codec': codecs,\n            'transport': this.conferenceStats.transport,\n            localAvgAudioLevels,\n            avgAudioLevels\n        });\n    this.conferenceStats.transport = [];\n};\n\n/**\n * Converts the value to a non-negative number.\n * If the value is either invalid or negative then 0 will be returned.\n * @param {*} v\n * @return {number}\n * @private\n */\nStatsCollector.prototype.getNonNegativeValue = function(v) {\n    let value = v;\n\n    if (typeof value !== 'number') {\n        value = Number(value);\n    }\n\n    if (isNaN(value)) {\n        return 0;\n    }\n\n    return Math.max(0, value);\n};\n\n/**\n * Calculates bitrate between before and now using a supplied field name and its\n * value in the stats.\n * @param {RTCInboundRtpStreamStats|RTCSentRtpStreamStats} now the current stats\n * @param {RTCInboundRtpStreamStats|RTCSentRtpStreamStats} before the\n * previous stats.\n * @param fieldName the field to use for calculations.\n * @return {number} the calculated bitrate between now and before.\n * @private\n */\nStatsCollector.prototype._calculateBitrate = function(now, before, fieldName) {\n    const bytesNow = this.getNonNegativeValue(now[fieldName]);\n    const bytesBefore = this.getNonNegativeValue(before[fieldName]);\n    const bytesProcessed = Math.max(0, bytesNow - bytesBefore);\n\n    const timeMs = now.timestamp - before.timestamp;\n    let bitrateKbps = 0;\n\n    if (timeMs > 0) {\n        // TODO is there any reason to round here?\n        bitrateKbps = Math.round((bytesProcessed * 8) / timeMs);\n    }\n\n    return bitrateKbps;\n};\n\n/**\n * Stats processing for spec-compliant RTCPeerConnection#getStats.\n */\nStatsCollector.prototype.processStatsReport = function() {\n    if (!this.previousStatsReport) {\n        return;\n    }\n    const byteSentStats = {};\n\n    this.currentStatsReport.forEach(now => {\n        // RTCIceCandidatePairStats - https://w3c.github.io/webrtc-stats/#candidatepair-dict*\n        if (now.type === 'candidate-pair' && now.nominated && now.state === 'succeeded') {\n            const availableIncomingBitrate = now.availableIncomingBitrate;\n            const availableOutgoingBitrate = now.availableOutgoingBitrate;\n\n            if (availableIncomingBitrate || availableOutgoingBitrate) {\n                this.conferenceStats.bandwidth = {\n                    'download': Math.round(availableIncomingBitrate / 1000),\n                    'upload': Math.round(availableOutgoingBitrate / 1000)\n                };\n            }\n\n            const remoteUsedCandidate = this.currentStatsReport.get(now.remoteCandidateId);\n            const localUsedCandidate = this.currentStatsReport.get(now.localCandidateId);\n\n            // RTCIceCandidateStats\n            // https://w3c.github.io/webrtc-stats/#icecandidate-dict*\n            if (remoteUsedCandidate && localUsedCandidate) {\n                const remoteIpAddress = browser.isChromiumBased()\n                    ? remoteUsedCandidate.ip\n                    : remoteUsedCandidate.address;\n                const remotePort = remoteUsedCandidate.port;\n                const ip = `${remoteIpAddress}:${remotePort}`;\n\n                const localIpAddress = browser.isChromiumBased()\n                    ? localUsedCandidate.ip\n                    : localUsedCandidate.address;\n                const localPort = localUsedCandidate.port;\n                const localip = `${localIpAddress}:${localPort}`;\n                const type = remoteUsedCandidate.protocol;\n\n                // Save the address unless it has been saved already.\n                const conferenceStatsTransport = this.conferenceStats.transport;\n\n                if (!conferenceStatsTransport.some(t =>\n                    t.ip === ip\n                    && t.type === type\n                    && t.localip === localip)) {\n                    conferenceStatsTransport.push({\n                        ip,\n                        type,\n                        localip,\n                        p2p: this.peerconnection.isP2P,\n                        localCandidateType: localUsedCandidate.candidateType,\n                        remoteCandidateType: remoteUsedCandidate.candidateType,\n                        networkType: localUsedCandidate.networkType,\n                        rtt: now.currentRoundTripTime * 1000\n                    });\n                }\n            }\n\n        // RTCReceivedRtpStreamStats\n        // https://w3c.github.io/webrtc-stats/#receivedrtpstats-dict*\n        // RTCSentRtpStreamStats\n        // https://w3c.github.io/webrtc-stats/#sentrtpstats-dict*\n        } else if (now.type === 'inbound-rtp' || now.type === 'outbound-rtp') {\n            const before = this.previousStatsReport.get(now.id);\n            const ssrc = this.getNonNegativeValue(now.ssrc);\n\n            if (!before || !ssrc) {\n                return;\n            }\n\n            let ssrcStats = this.ssrc2stats.get(ssrc);\n\n            if (!ssrcStats) {\n                ssrcStats = new SsrcStats();\n                this.ssrc2stats.set(ssrc, ssrcStats);\n            }\n\n            let isDownloadStream = true;\n            let key = 'packetsReceived';\n\n            if (now.type === 'outbound-rtp') {\n                isDownloadStream = false;\n                key = 'packetsSent';\n            }\n\n            let packetsNow = now[key];\n\n            if (!packetsNow || packetsNow < 0) {\n                packetsNow = 0;\n            }\n\n            const packetsBefore = this.getNonNegativeValue(before[key]);\n            const packetsDiff = Math.max(0, packetsNow - packetsBefore);\n\n            const packetsLostNow = this.getNonNegativeValue(now.packetsLost);\n            const packetsLostBefore = this.getNonNegativeValue(before.packetsLost);\n            const packetsLostDiff = Math.max(0, packetsLostNow - packetsLostBefore);\n\n            ssrcStats.setLoss({\n                packetsTotal: packetsDiff + packetsLostDiff,\n                packetsLost: packetsLostDiff,\n                isDownloadStream\n            });\n\n            // Get the resolution and framerate for only remote video sources here. For the local video sources,\n            // 'track' stats will be used since they have the updated resolution based on the simulcast streams\n            // currently being sent. Promise based getStats reports three 'outbound-rtp' streams and there will be\n            // more calculations needed to determine what is the highest resolution stream sent by the client if the\n            // 'outbound-rtp' stats are used.\n            if (now.type === 'inbound-rtp') {\n                const resolution = {\n                    height: now.frameHeight,\n                    width: now.frameWidth\n                };\n                const frameRate = now.framesPerSecond;\n\n                if (resolution.height && resolution.width) {\n                    ssrcStats.setResolution(resolution);\n                }\n                ssrcStats.setFramerate(Math.round(frameRate || 0));\n\n                ssrcStats.addBitrate({\n                    'download': this._calculateBitrate(now, before, 'bytesReceived'),\n                    'upload': 0\n                });\n            } else {\n                byteSentStats[ssrc] = this.getNonNegativeValue(now.bytesSent);\n                ssrcStats.addBitrate({\n                    'download': 0,\n                    'upload': this._calculateBitrate(now, before, 'bytesSent')\n                });\n            }\n\n            const codec = this.currentStatsReport.get(now.codecId);\n\n            if (codec) {\n                /**\n                 * The mime type has the following form: video/VP8 or audio/ISAC,\n                 * so we what to keep just the type after the '/', audio and video\n                 * keys will be added on the processing side.\n                 */\n                const codecShortType = codec.mimeType.split('/')[1];\n\n                codecShortType && ssrcStats.setCodec(codecShortType);\n            }\n\n        // Use track stats for resolution and framerate of the local video source.\n        // RTCVideoHandlerStats - https://w3c.github.io/webrtc-stats/#vststats-dict*\n        // RTCMediaHandlerStats - https://w3c.github.io/webrtc-stats/#mststats-dict*\n        } else if (now.type === 'track' && now.kind === MediaType.VIDEO && !now.remoteSource) {\n            const resolution = {\n                height: now.frameHeight,\n                width: now.frameWidth\n            };\n            const localVideoTracks = this.peerconnection.getLocalTracks(MediaType.VIDEO);\n\n            if (!localVideoTracks?.length) {\n                return;\n            }\n\n            const ssrc = this.peerconnection.getLocalSSRC(localVideoTracks[0]);\n\n            if (!ssrc) {\n                return;\n            }\n            let ssrcStats = this.ssrc2stats.get(ssrc);\n\n            if (!ssrcStats) {\n                ssrcStats = new SsrcStats();\n                this.ssrc2stats.set(ssrc, ssrcStats);\n            }\n            if (resolution.height && resolution.width) {\n                ssrcStats.setResolution(resolution);\n            }\n\n            // Calculate the frame rate. 'framesSent' is the total aggregate value for all the simulcast streams.\n            // Therefore, it needs to be divided by the total number of active simulcast streams.\n            let frameRate = now.framesPerSecond;\n\n            if (!frameRate) {\n                const before = this.previousStatsReport.get(now.id);\n\n                if (before) {\n                    const timeMs = now.timestamp - before.timestamp;\n\n                    if (timeMs > 0 && now.framesSent) {\n                        const numberOfFramesSinceBefore = now.framesSent - before.framesSent;\n\n                        frameRate = (numberOfFramesSinceBefore / timeMs) * 1000;\n                    }\n                }\n\n                if (!frameRate) {\n                    return;\n                }\n            }\n\n            // Get the number of simulcast streams currently enabled from TPC.\n            const numberOfActiveStreams = this.peerconnection.getActiveSimulcastStreams();\n\n            // Reset frame rate to 0 when video is suspended as a result of endpoint falling out of last-n.\n            frameRate = numberOfActiveStreams ? Math.round(frameRate / numberOfActiveStreams) : 0;\n            ssrcStats.setFramerate(frameRate);\n        }\n    });\n\n    this.eventEmitter.emit(StatisticsEvents.BYTE_SENT_STATS, this.peerconnection, byteSentStats);\n    this._processAndEmitReport();\n};\n\n/**\n * Stats processing logic.\n */\nStatsCollector.prototype.processAudioLevelReport = function() {\n    if (!this.baselineAudioLevelsReport) {\n        return;\n    }\n\n    this.currentAudioLevelsReport.forEach(now => {\n        if (now.type !== 'track') {\n            return;\n        }\n\n        // Audio level\n        const audioLevel = now.audioLevel;\n\n        if (!audioLevel) {\n            return;\n        }\n\n        const trackIdentifier = now.trackIdentifier;\n        const ssrc = this.peerconnection.getSsrcByTrackId(trackIdentifier);\n\n        if (ssrc) {\n            const isLocal\n                = ssrc === this.peerconnection.getLocalSSRC(\n                this.peerconnection.getLocalTracks(MediaType.AUDIO));\n\n            this.eventEmitter.emit(\n                StatisticsEvents.AUDIO_LEVEL,\n                this.peerconnection,\n                ssrc,\n                audioLevel,\n                isLocal);\n        }\n    });\n};\n\n","import EventEmitter from 'events';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport JitsiTrackError from '../../JitsiTrackError';\nimport { FEEDBACK } from '../../service/statistics/AnalyticsEvents';\nimport * as StatisticsEvents from '../../service/statistics/Events';\nimport browser from '../browser';\nimport ScriptUtil from '../util/ScriptUtil';\n\nimport analytics from './AnalyticsAdapter';\nimport CallStats from './CallStats';\nimport LocalStats from './LocalStatsCollector';\nimport { PerformanceObserverStats } from './PerformanceObserverStats';\nimport RTPStats from './RTPStatsCollector';\nimport { CALLSTATS_SCRIPT_URL } from './constants';\n\nconst logger = require('@jitsi/logger').getLogger(__filename);\n\n/**\n * Stores all active {@link Statistics} instances.\n * @type {Set<Statistics>}\n */\nlet _instances;\n\n/**\n * True if callstats API is loaded\n */\nlet isCallstatsLoaded = false;\n\n/**\n * Since callstats.io is a third party, we cannot guarantee the quality of their\n * service. More specifically, their server may take noticeably long time to\n * respond. Consequently, it is in our best interest (in the sense that the\n * intergration of callstats.io is pretty important to us but not enough to\n * allow it to prevent people from joining a conference) to (1) start\n * downloading their API as soon as possible and (2) do the downloading\n * asynchronously.\n *\n * @param {StatisticsOptions} options - Options to use for downloading and\n * initializing callstats backend.\n */\nfunction loadCallStatsAPI(options) {\n    if (!isCallstatsLoaded) {\n        ScriptUtil.loadScript(\n            options.customScriptUrl || CALLSTATS_SCRIPT_URL,\n            /* async */ true,\n            /* prepend */ true,\n            /* relativeURL */ undefined,\n            /* loadCallback */ () => _initCallStatsBackend(options)\n        );\n        isCallstatsLoaded = true;\n    }\n}\n\n/**\n * Initializes Callstats backend.\n *\n * @param {StatisticsOptions} options - The options to use for initializing\n * callstats backend.\n * @private\n */\nfunction _initCallStatsBackend(options) {\n    if (CallStats.isBackendInitialized()) {\n        return;\n    }\n\n    if (!CallStats.initBackend({\n        callStatsID: options.callStatsID,\n        callStatsSecret: options.callStatsSecret,\n        userName: options.userName,\n        aliasName: options.aliasName,\n        applicationName: options.applicationName,\n        getWiFiStatsMethod: options.getWiFiStatsMethod,\n        confID: options.confID,\n        siteID: options.siteID,\n        configParams: options.configParams\n    })) {\n        logger.error('CallStats Backend initialization failed bad');\n    }\n}\n\n/**\n * callstats strips any additional fields from Error except for \"name\", \"stack\",\n * \"message\" and \"constraintName\". So we need to bundle additional information\n * from JitsiTrackError into error passed to callstats to preserve valuable\n * information about error.\n * @param {JitsiTrackError} error\n */\nfunction formatJitsiTrackErrorForCallStats(error) {\n    const err = new Error();\n\n    // Just copy original stack from error\n    err.stack = error.stack;\n\n    // Combine name from error's name plus (possibly) name of original GUM error\n    err.name = (error.name || 'Unknown error') + (error.gum && error.gum.error\n        && error.gum.error.name ? ` - ${error.gum.error.name}` : '');\n\n    // Put all constraints into this field. For constraint failed errors we will\n    // still know which exactly constraint failed as it will be a part of\n    // message.\n    err.constraintName = error.gum && error.gum.constraints\n        ? JSON.stringify(error.gum.constraints) : '';\n\n    // Just copy error's message.\n    err.message = error.message;\n\n    return err;\n}\n\n/**\n * Init statistic options\n * @param options\n */\nStatistics.init = function(options) {\n    Statistics.audioLevelsEnabled = !options.disableAudioLevels;\n    if (typeof options.pcStatsInterval === 'number') {\n        Statistics.pcStatsInterval = options.pcStatsInterval;\n    }\n\n    if (typeof options.audioLevelsInterval === 'number') {\n        Statistics.audioLevelsInterval = options.audioLevelsInterval;\n    }\n\n    if (typeof options.longTasksStatsInterval === 'number') {\n        Statistics.longTasksStatsInterval = options.longTasksStatsInterval;\n    }\n\n    Statistics.disableThirdPartyRequests = options.disableThirdPartyRequests;\n};\n\n/**\n * The options to configure Statistics.\n * @typedef {Object} StatisticsOptions\n * @property {string} applicationName - The application name to pass to\n * callstats.\n * @property {string} aliasName - The alias name to use when initializing callstats.\n * @property {string} userName - The user name to use when initializing callstats.\n * @property {string} confID - The callstats conference ID to use.\n * @property {string} callStatsID - Callstats credentials - the id.\n * @property {string} callStatsSecret - Callstats credentials - the secret.\n * @property {string} customScriptUrl - A custom lib url to use when downloading\n * callstats library.\n * @property {string} roomName - The room name we are currently in.\n * @property {string} configParams - The set of parameters\n * to enable/disable certain features in the library. See CallStats docs for more info.\n */\n/**\n *\n * @param xmpp\n * @param {StatisticsOptions} options - The options to use creating the\n * Statistics.\n */\nexport default function Statistics(xmpp, options) {\n    /**\n     * {@link RTPStats} mapped by {@link TraceablePeerConnection.id} which\n     * collect RTP statistics for each peerconnection.\n     * @type {Map<string, RTPStats}\n     */\n    this.rtpStatsMap = new Map();\n    this.eventEmitter = new EventEmitter();\n    this.xmpp = xmpp;\n    this.options = options || {};\n\n    this.callStatsIntegrationEnabled\n        = this.options.callStatsID && this.options.callStatsSecret && this.options.enableCallStats\n\n            // Even though AppID and AppSecret may be specified, the integration\n            // of callstats.io may be disabled because of globally-disallowed\n            // requests to any third parties.\n            && (Statistics.disableThirdPartyRequests !== true);\n    if (this.callStatsIntegrationEnabled) {\n        this.callStatsApplicationLogsDisabled\n            = this.options.callStatsApplicationLogsDisabled;\n        if (browser.isReactNative()) {\n            _initCallStatsBackend(this.options);\n        } else {\n            loadCallStatsAPI(this.options);\n        }\n\n        if (!this.options.confID) {\n            logger.warn('\"confID\" is not defined');\n        }\n    }\n\n    /**\n     * Stores {@link CallStats} instances for each\n     * {@link TraceablePeerConnection} (one {@link CallStats} instance serves\n     * one TPC). The instances are mapped by {@link TraceablePeerConnection.id}.\n     * @type {Map<number, CallStats>}\n     */\n    this.callsStatsInstances = new Map();\n\n    Statistics.instances.add(this);\n}\nStatistics.audioLevelsEnabled = false;\nStatistics.audioLevelsInterval = 200;\nStatistics.pcStatsInterval = 10000;\nStatistics.disableThirdPartyRequests = false;\nStatistics.analytics = analytics;\n\nObject.defineProperty(Statistics, 'instances', {\n    /**\n     * Returns the Set holding all active {@link Statistics} instances. Lazily\n     * initializes the Set to allow any Set polyfills to be applied.\n     * @type {Set<Statistics>}\n     */\n    get() {\n        if (!_instances) {\n            _instances = new Set();\n        }\n\n        return _instances;\n    }\n});\n\n/**\n * Starts collecting RTP stats for given peerconnection.\n * @param {TraceablePeerConnection} peerconnection\n */\nStatistics.prototype.startRemoteStats = function(peerconnection) {\n    this.stopRemoteStats(peerconnection);\n\n    try {\n        const rtpStats\n            = new RTPStats(\n                peerconnection,\n                Statistics.audioLevelsInterval,\n                Statistics.pcStatsInterval,\n                this.eventEmitter);\n\n        rtpStats.start(Statistics.audioLevelsEnabled);\n        this.rtpStatsMap.set(peerconnection.id, rtpStats);\n    } catch (e) {\n        logger.error(`Failed to start collecting remote statistics: ${e}`);\n    }\n};\n\nStatistics.localStats = [];\n\nStatistics.startLocalStats = function(stream, callback) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n    const localStats = new LocalStats(stream, Statistics.audioLevelsInterval,\n        callback);\n\n    this.localStats.push(localStats);\n    localStats.start();\n};\n\nStatistics.prototype.addAudioLevelListener = function(listener) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n    this.eventEmitter.on(StatisticsEvents.AUDIO_LEVEL, listener);\n};\n\nStatistics.prototype.removeAudioLevelListener = function(listener) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n    this.eventEmitter.removeListener(StatisticsEvents.AUDIO_LEVEL, listener);\n};\n\nStatistics.prototype.addBeforeDisposedListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.BEFORE_DISPOSED, listener);\n};\n\nStatistics.prototype.removeBeforeDisposedListener = function(listener) {\n    this.eventEmitter.removeListener(\n        StatisticsEvents.BEFORE_DISPOSED, listener);\n};\n\nStatistics.prototype.addConnectionStatsListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.CONNECTION_STATS, listener);\n};\n\nStatistics.prototype.removeConnectionStatsListener = function(listener) {\n    this.eventEmitter.removeListener(\n        StatisticsEvents.CONNECTION_STATS,\n        listener);\n};\n\nStatistics.prototype.addByteSentStatsListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.BYTE_SENT_STATS, listener);\n};\n\nStatistics.prototype.removeByteSentStatsListener = function(listener) {\n    this.eventEmitter.removeListener(StatisticsEvents.BYTE_SENT_STATS,\n        listener);\n};\n\n/**\n * Add a listener that would be notified on a LONG_TASKS_STATS event.\n *\n * @param {Function} listener a function that would be called when notified.\n * @returns {void}\n */\nStatistics.prototype.addLongTasksStatsListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.LONG_TASKS_STATS, listener);\n};\n\n/**\n * Creates an instance of {@link PerformanceObserverStats} and starts the\n * observer that records the stats periodically.\n *\n * @returns {void}\n */\nStatistics.prototype.attachLongTasksStats = function(conference) {\n    if (!browser.supportsPerformanceObserver()) {\n        logger.warn('Performance observer for long tasks not supported by browser!');\n\n        return;\n    }\n\n    this.performanceObserverStats = new PerformanceObserverStats(\n        this.eventEmitter,\n        Statistics.longTasksStatsInterval);\n\n    conference.on(\n        JitsiConferenceEvents.CONFERENCE_JOINED,\n        () => this.performanceObserverStats.startObserver());\n    conference.on(\n        JitsiConferenceEvents.CONFERENCE_LEFT,\n        () => this.performanceObserverStats.stopObserver());\n};\n\n/**\n * Obtains the current value of the LongTasks event statistics.\n *\n * @returns {Object|null} stats object if the observer has been\n * created, null otherwise.\n */\nStatistics.prototype.getLongTasksStats = function() {\n    return this.performanceObserverStats\n        ? this.performanceObserverStats.getLongTasksStats()\n        : null;\n};\n\n/**\n * Removes the given listener for the LONG_TASKS_STATS event.\n *\n * @param {Function} listener the listener we want to remove.\n * @returns {void}\n */\nStatistics.prototype.removeLongTasksStatsListener = function(listener) {\n    this.eventEmitter.removeListener(StatisticsEvents.LONG_TASKS_STATS, listener);\n};\n\n/**\n * Updates the list of speakers for which the audio levels are to be calculated. This is needed for the jvb pc only.\n *\n * @param {Array<string>} speakerList The list of remote endpoint ids.\n * @returns {void}\n */\nStatistics.prototype.setSpeakerList = function(speakerList) {\n    for (const rtpStats of Array.from(this.rtpStatsMap.values())) {\n        if (!rtpStats.peerconnection.isP2P) {\n            rtpStats.setSpeakerList(speakerList);\n        }\n    }\n};\n\nStatistics.prototype.dispose = function() {\n    try {\n        // NOTE Before reading this please see the comment in stopCallStats...\n        //\n        // Here we prevent from emitting the event twice in case it will be\n        // triggered from stopCallStats.\n        // If the event is triggered from here it means that the logs will not\n        // be submitted anyway (because there is no CallStats instance), but\n        // we're doing that for the sake of some kind of consistency.\n        if (!this.callsStatsInstances.size) {\n            this.eventEmitter.emit(StatisticsEvents.BEFORE_DISPOSED);\n        }\n        for (const callStats of this.callsStatsInstances.values()) {\n            this.stopCallStats(callStats.tpc);\n        }\n        for (const tpcId of this.rtpStatsMap.keys()) {\n            this._stopRemoteStats(tpcId);\n        }\n        if (this.eventEmitter) {\n            this.eventEmitter.removeAllListeners();\n        }\n    } finally {\n        Statistics.instances.delete(this);\n    }\n};\n\nStatistics.stopLocalStats = function(stream) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n\n    for (let i = 0; i < Statistics.localStats.length; i++) {\n        if (Statistics.localStats[i].stream === stream) {\n            const localStats = Statistics.localStats.splice(i, 1);\n\n            localStats[0].stop();\n            break;\n        }\n    }\n};\n\n/**\n * Stops remote RTP stats for given peerconnection ID.\n * @param {string} tpcId {@link TraceablePeerConnection.id}\n * @private\n */\nStatistics.prototype._stopRemoteStats = function(tpcId) {\n    const rtpStats = this.rtpStatsMap.get(tpcId);\n\n    if (rtpStats) {\n        rtpStats.stop();\n        this.rtpStatsMap.delete(tpcId);\n    }\n};\n\n/**\n * Stops collecting RTP stats for given peerconnection\n * @param {TraceablePeerConnection} tpc\n */\nStatistics.prototype.stopRemoteStats = function(tpc) {\n    this._stopRemoteStats(tpc.id);\n};\n\n// CALSTATS METHODS\n\n/**\n * Initializes the callstats.io API.\n * @param {TraceablePeerConnection} tpc the {@link TraceablePeerConnection}\n * instance for which CalStats will be started.\n * @param {string} remoteUserID\n */\nStatistics.prototype.startCallStats = function(tpc, remoteUserID) {\n    if (!this.callStatsIntegrationEnabled) {\n        return;\n    } else if (this.callsStatsInstances.has(tpc.id)) {\n        logger.error('CallStats instance for ${tpc} exists already');\n\n        return;\n    }\n\n    logger.info(`Starting CallStats for ${tpc}...`);\n\n    const newInstance\n        = new CallStats(\n            tpc,\n            {\n                confID: this.options.confID,\n                remoteUserID\n            });\n\n    this.callsStatsInstances.set(tpc.id, newInstance);\n};\n\n/**\n * Obtains the list of *all* {@link CallStats} instances collected from every\n * valid {@link Statistics} instance.\n * @return {Set<CallStats>}\n * @private\n */\nStatistics._getAllCallStatsInstances = function() {\n    const csInstances = new Set();\n\n    for (const statistics of Statistics.instances) {\n        for (const cs of statistics.callsStatsInstances.values()) {\n            csInstances.add(cs);\n        }\n    }\n\n    return csInstances;\n};\n\n/**\n * Removes the callstats.io instances.\n */\nStatistics.prototype.stopCallStats = function(tpc) {\n    const callStatsInstance = this.callsStatsInstances.get(tpc.id);\n\n    if (callStatsInstance) {\n        // FIXME the original purpose of adding BEFORE_DISPOSED event was to be\n        // able to submit the last log batch from jitsi-meet to CallStats. After\n        // recent changes we dispose the CallStats earlier\n        // (before Statistics.dispose), so we need to emit this event here to\n        // give this last chance for final log batch submission.\n        //\n        // Eventually there should be a separate module called \"log storage\"\n        // which should emit proper events when it's underlying\n        // CallStats instance is going away.\n        if (this.callsStatsInstances.size === 1) {\n            this.eventEmitter.emit(StatisticsEvents.BEFORE_DISPOSED);\n        }\n        this.callsStatsInstances.delete(tpc.id);\n\n        // The fabric needs to be terminated when being stopped\n        callStatsInstance.sendTerminateEvent();\n    }\n};\n\n/**\n * Returns true if the callstats integration is enabled, otherwise returns\n * false.\n *\n * @returns true if the callstats integration is enabled, otherwise returns\n * false.\n */\nStatistics.prototype.isCallstatsEnabled = function() {\n    return this.callStatsIntegrationEnabled;\n};\n\n/**\n * Logs either resume or hold event for the given peer connection.\n * @param {TraceablePeerConnection} tpc the connection for which event will be\n * reported\n * @param {boolean} isResume true for resume or false for hold\n */\nStatistics.prototype.sendConnectionResumeOrHoldEvent = function(tpc, isResume) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendResumeOrHoldEvent(isResume);\n    }\n};\n\n/**\n * Notifies CallStats and analytics (if present) for ice connection failed\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendIceConnectionFailedEvent = function(tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendIceConnectionFailedEvent();\n    }\n};\n\n/**\n * Notifies CallStats for mute events\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n * @param {boolean} muted true for muted and false for not muted\n * @param {String} type \"audio\"/\"video\"\n */\nStatistics.prototype.sendMuteEvent = function(tpc, muted, type) {\n    const instance = tpc && this.callsStatsInstances.get(tpc.id);\n\n    CallStats.sendMuteEvent(muted, type, instance);\n};\n\n/**\n * Notifies CallStats for screen sharing events\n * @param start {boolean} true for starting screen sharing and\n * false for not stopping\n * @param {string|null} ssrc - optional ssrc value, used only when\n * starting screen sharing.\n */\nStatistics.prototype.sendScreenSharingEvent\n    = function(start, ssrc) {\n        for (const cs of this.callsStatsInstances.values()) {\n            cs.sendScreenSharingEvent(start, ssrc);\n        }\n    };\n\n/**\n * Notifies the statistics module that we are now the dominant speaker of the\n * conference.\n * @param {String} roomJid - The room jid where the speaker event occurred.\n */\nStatistics.prototype.sendDominantSpeakerEvent = function(roomJid) {\n    for (const cs of this.callsStatsInstances.values()) {\n        cs.sendDominantSpeakerEvent();\n    }\n\n    // xmpp send dominant speaker event\n    this.xmpp.sendDominantSpeakerEvent(roomJid);\n};\n\n/**\n * Notifies about active device.\n * @param {{deviceList: {String:String}}} devicesData - list of devices with\n *      their data\n */\nStatistics.sendActiveDeviceListEvent = function(devicesData) {\n    const globalSet = Statistics._getAllCallStatsInstances();\n\n    if (globalSet.size) {\n        for (const cs of globalSet) {\n            CallStats.sendActiveDeviceListEvent(devicesData, cs);\n        }\n    } else {\n        CallStats.sendActiveDeviceListEvent(devicesData, null);\n    }\n};\n\n/* eslint-disable max-params */\n\n/**\n * Lets the underlying statistics module know where is given SSRC rendered by\n * providing renderer tag ID.\n * @param {TraceablePeerConnection} tpc the connection to which the stream\n * belongs to\n * @param {number} ssrc the SSRC of the stream\n * @param {boolean} isLocal\n * @param {string} userId\n * @param {string} usageLabel  meaningful usage label of this stream like\n *        'microphone', 'camera' or 'screen'.\n * @param {string} containerId the id of media 'audio' or 'video' tag which\n *        renders the stream.\n */\nStatistics.prototype.associateStreamWithVideoTag = function(\n        tpc,\n        ssrc,\n        isLocal,\n        userId,\n        usageLabel,\n        containerId) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.associateStreamWithVideoTag(\n            ssrc,\n            isLocal,\n            userId,\n            usageLabel,\n            containerId);\n    }\n};\n\n/* eslint-enable max-params */\n\n/**\n * Notifies CallStats that getUserMedia failed.\n *\n * @param {Error} e error to send\n */\nStatistics.sendGetUserMediaFailed = function(e) {\n    const error\n        = e instanceof JitsiTrackError\n            ? formatJitsiTrackErrorForCallStats(e) : e;\n    const globalSet = Statistics._getAllCallStatsInstances();\n\n    if (globalSet.size) {\n        for (const cs of globalSet) {\n            CallStats.sendGetUserMediaFailed(error, cs);\n        }\n    } else {\n        CallStats.sendGetUserMediaFailed(error, null);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to create offer.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendCreateOfferFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendCreateOfferFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to create answer.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occured.\n */\nStatistics.prototype.sendCreateAnswerFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendCreateAnswerFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to set local description.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendSetLocalDescFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendSetLocalDescFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to set remote description.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendSetRemoteDescFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendSetRemoteDescFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to add ICE candidate.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendAddIceCandidateFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendAddIceCandidateFailed(e);\n    }\n};\n\n/**\n * Adds to CallStats an application log.\n *\n * @param {String} m a log message to send or an {Error} object to be reported\n */\nStatistics.sendLog = function(m) {\n    const globalSubSet = new Set();\n\n    // FIXME we don't want to duplicate logs over P2P instance, but\n    // here we should go over instances and call this method for each\n    // unique conference ID rather than selecting the first one.\n    // We don't have such use case though, so leaving as is for now.\n    for (const stats of Statistics.instances) {\n        if (stats.callStatsApplicationLogsDisabled) {\n            return;\n        }\n\n        if (stats.callsStatsInstances.size) {\n            globalSubSet.add(stats.callsStatsInstances.values().next().value);\n        }\n    }\n\n    if (globalSubSet.size) {\n        for (const csPerStats of globalSubSet) {\n            CallStats.sendApplicationLog(m, csPerStats);\n        }\n    } else {\n        CallStats.sendApplicationLog(m, null);\n    }\n};\n\n/**\n * Sends the given feedback through CallStats.\n *\n * @param overall an integer between 1 and 5 indicating the user's rating.\n * @param comment the comment from the user.\n * @returns {Promise} Resolves when callstats feedback has been submitted\n * successfully.\n */\nStatistics.prototype.sendFeedback = function(overall, comment) {\n    // Statistics.analytics.sendEvent is currently fire and forget, without\n    // confirmation of successful send.\n    Statistics.analytics.sendEvent(\n        FEEDBACK,\n        {\n            rating: overall,\n            comment\n        });\n\n    return CallStats.sendFeedback(this.options.confID, overall, comment);\n};\n\nStatistics.LOCAL_JID = require('../../service/statistics/constants').LOCAL_JID;\n\n/**\n * Reports global error to CallStats.\n *\n * @param {Error} error\n */\nStatistics.reportGlobalError = function(error) {\n    if (error instanceof JitsiTrackError && error.gum) {\n        Statistics.sendGetUserMediaFailed(error);\n    } else {\n        Statistics.sendLog(error);\n    }\n};\n\n/**\n * Sends event to analytics and logs a message to the logger/console. Console\n * messages might also be logged to callstats automatically.\n *\n * @param {string | Object} event the event name, or an object which\n * represents the entire event.\n * @param {Object} properties properties to attach to the event (if an event\n * name as opposed to an event object is provided).\n */\nStatistics.sendAnalyticsAndLog = function(event, properties = {}) {\n    if (!event) {\n        logger.warn('No event or event name given.');\n\n        return;\n    }\n\n    let eventToLog;\n\n    // Also support an API with a single object as an event.\n    if (typeof event === 'object') {\n        eventToLog = event;\n    } else {\n        eventToLog = {\n            name: event,\n            properties\n        };\n    }\n\n    logger.log(JSON.stringify(eventToLog));\n\n    // We do this last, because it may modify the object which is passed.\n    this.analytics.sendEvent(event, properties);\n};\n\n/**\n * Sends event to analytics.\n *\n * @param {string | Object} eventName the event name, or an object which\n * represents the entire event.\n * @param {Object} properties properties to attach to the event\n */\n\nStatistics.sendAnalytics = function(eventName, properties = {}) {\n    this.analytics.sendEvent(eventName, properties);\n    Statistics.analyticsEventEmitter.emit(JitsiConferenceEvents.ANALYTICS_EVENT_RECEIVED, eventName, properties);\n};\n\n\nStatistics.prototype.addAnalyticsEventListener = function(listener) {\n    Statistics.analyticsEventEmitter.on(JitsiConferenceEvents.ANALYTICS_EVENT_RECEIVED, listener);\n};\n\n\nStatistics.prototype.removeAnalyticsEventListener = function(listener) {\n    Statistics.analyticsEventEmitter.removeListener(JitsiConferenceEvents.ANALYTICS_EVENT_RECEIVED, listener);\n};\n\n\n\n\n\n","import { getLogger } from '@jitsi/logger';\nimport { Strophe } from 'strophe.js';\n\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport { SPEAKERS_AUDIO_LEVELS } from './modules/statistics/constants';\nimport Statistics from './modules/statistics/statistics';\nimport EventEmitterForwarder from './modules/util/EventEmitterForwarder';\nimport * as MediaType from './service/RTC/MediaType';\nimport RTCEvents from './service/RTC/RTCEvents';\nimport VideoType from './service/RTC/VideoType';\nimport AuthenticationEvents\n    from './service/authentication/AuthenticationEvents';\nimport {\n    ACTION_JINGLE_SA_TIMEOUT,\n    createBridgeDownEvent,\n    createConnectionStageReachedEvent,\n    createFocusLeftEvent,\n    createJingleEvent,\n    createRemotelyMutedEvent\n} from './service/statistics/AnalyticsEvents';\nimport XMPPEvents from './service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * Setups all event listeners related to conference\n * @param conference {JitsiConference} the conference\n */\nexport default function JitsiConferenceEventManager(conference) {\n    this.conference = conference;\n    this.xmppListeners = {};\n\n    // Listeners related to the conference only\n    conference.on(JitsiConferenceEvents.TRACK_MUTE_CHANGED,\n        track => {\n            if (!track.isLocal() || !conference.statistics) {\n                return;\n            }\n            const session\n                = track.isP2P\n                    ? conference.p2pJingleSession : conference.jvbJingleSession;\n\n            // TPC will be null, before the conference starts, but the event\n            // still should be queued\n            const tpc = (session && session.peerconnection) || null;\n\n            conference.statistics.sendMuteEvent(\n                tpc,\n                track.isMuted(),\n                track.getType());\n        });\n}\n\n/**\n * Setups event listeners related to conference.chatRoom\n */\nJitsiConferenceEventManager.prototype.setupChatRoomListeners = function() {\n    const conference = this.conference;\n    const chatRoom = conference.room;\n\n    this.chatRoomForwarder = new EventEmitterForwarder(chatRoom,\n        this.conference.eventEmitter);\n\n    chatRoom.addListener(XMPPEvents.ICE_RESTARTING, jingleSession => {\n        if (!jingleSession.isP2P) {\n            // If using DataChannel as bridge channel, it must be closed\n            // before ICE restart, otherwise Chrome will not trigger \"opened\"\n            // event for the channel established with the new bridge.\n            // TODO: This may be bypassed when using a WebSocket as bridge\n            // channel.\n            conference.rtc.closeBridgeChannel();\n        }\n\n        // else: there are no DataChannels in P2P session (at least for now)\n    });\n\n    chatRoom.addListener(XMPPEvents.PARTICIPANT_FEATURES_CHANGED, (from, features) => {\n        const participant = conference.getParticipantById(Strophe.getResourceFromJid(from));\n\n        if (participant) {\n            participant.setFeatures(features);\n            conference.eventEmitter.emit(JitsiConferenceEvents.PARTCIPANT_FEATURES_CHANGED, participant);\n        }\n    });\n\n    chatRoom.addListener(\n        XMPPEvents.ICE_RESTART_SUCCESS,\n        (jingleSession, offerIq) => {\n            // The JVB data chanel needs to be reopened in case the conference\n            // has been moved to a new bridge.\n            !jingleSession.isP2P\n                && conference._setBridgeChannel(\n                    offerIq, jingleSession.peerconnection);\n        });\n\n\n    chatRoom.addListener(XMPPEvents.AUDIO_MUTED_BY_FOCUS,\n        actor => {\n            // TODO: Add a way to differentiate between commands which caused\n            // us to mute and those that did not change our state (i.e. we were\n            // already muted).\n            Statistics.sendAnalytics(createRemotelyMutedEvent(MediaType.AUDIO));\n\n            conference.mutedByFocusActor = actor;\n\n            // set isMutedByFocus when setAudioMute Promise ends\n            conference.rtc.setAudioMute(true).then(\n                () => {\n                    conference.isMutedByFocus = true;\n                    conference.mutedByFocusActor = null;\n                })\n                .catch(\n                    error => {\n                        conference.mutedByFocusActor = null;\n                        logger.warn(\n                            'Error while audio muting due to focus request', error);\n                    });\n        }\n    );\n\n    chatRoom.addListener(XMPPEvents.VIDEO_MUTED_BY_FOCUS,\n        actor => {\n            // TODO: Add a way to differentiate between commands which caused\n            // us to mute and those that did not change our state (i.e. we were\n            // already muted).\n            Statistics.sendAnalytics(createRemotelyMutedEvent(MediaType.VIDEO));\n\n            conference.mutedVideoByFocusActor = actor;\n\n            // set isVideoMutedByFocus when setVideoMute Promise ends\n            conference.rtc.setVideoMute(true).then(\n                () => {\n                    conference.isVideoMutedByFocus = true;\n                    conference.mutedVideoByFocusActor = null;\n                })\n                .catch(\n                    error => {\n                        conference.mutedVideoByFocusActor = null;\n                        logger.warn(\n                            'Error while video muting due to focus request', error);\n                    });\n        }\n    );\n\n    this.chatRoomForwarder.forward(XMPPEvents.SUBJECT_CHANGED,\n        JitsiConferenceEvents.SUBJECT_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_JOINED,\n        JitsiConferenceEvents.CONFERENCE_JOINED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_JOIN_IN_PROGRESS,\n        JitsiConferenceEvents.CONFERENCE_JOIN_IN_PROGRESS);\n\n    this.chatRoomForwarder.forward(XMPPEvents.MEETING_ID_SET,\n        JitsiConferenceEvents.CONFERENCE_UNIQUE_ID_SET);\n\n    // send some analytics events\n    chatRoom.addListener(XMPPEvents.MUC_JOINED,\n        () => {\n            this.conference._onMucJoined();\n\n            this.conference.isJvbConnectionInterrupted = false;\n\n            // TODO: Move all of the 'connectionTimes' logic to its own module.\n            Object.keys(chatRoom.connectionTimes).forEach(key => {\n                const event\n                    = createConnectionStageReachedEvent(\n                        `conference_${key}`,\n                        { value: chatRoom.connectionTimes[key] });\n\n                Statistics.sendAnalytics(event);\n            });\n\n            // TODO: Move all of the 'connectionTimes' logic to its own module.\n            Object.keys(chatRoom.xmpp.connectionTimes).forEach(key => {\n                const event\n                    = createConnectionStageReachedEvent(\n                        `xmpp_${key}`,\n                        { value: chatRoom.xmpp.connectionTimes[key] });\n\n                Statistics.sendAnalytics(event);\n            });\n        });\n\n    chatRoom.addListener(XMPPEvents.RENEGOTIATION_FAILED, (e, session) => {\n        if (!session.isP2P) {\n            conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n        }\n    });\n\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_JOIN_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONNECTION_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONNECTION_ERROR);\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.NOT_ALLOWED_ERROR);\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_MEMBERS_ONLY_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.MEMBERS_ONLY_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_MAX_USERS_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONFERENCE_MAX_USERS);\n\n    this.chatRoomForwarder.forward(XMPPEvents.PASSWORD_REQUIRED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.PASSWORD_REQUIRED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.AUTHENTICATION_REQUIRED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.AUTHENTICATION_REQUIRED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.BRIDGE_DOWN,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.VIDEOBRIDGE_NOT_AVAILABLE);\n    chatRoom.addListener(\n        XMPPEvents.BRIDGE_DOWN,\n        () => Statistics.sendAnalytics(createBridgeDownEvent()));\n\n    chatRoom.addListener(XMPPEvents.CONNECTION_RESTARTED,\n        jingleSession => {\n            conference._onConferenceRestarted(jingleSession);\n        });\n\n    this.chatRoomForwarder.forward(XMPPEvents.RESERVATION_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.RESERVATION_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.GRACEFUL_SHUTDOWN,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.GRACEFUL_SHUTDOWN);\n\n    chatRoom.addListener(XMPPEvents.CONNECTION_ICE_FAILED,\n        jingleSession => {\n            conference._onIceConnectionFailed(jingleSession);\n        });\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_DESTROYED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONFERENCE_DESTROYED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.CHAT_ERROR_RECEIVED,\n        JitsiConferenceEvents.CONFERENCE_ERROR,\n        JitsiConferenceErrors.CHAT_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.SETTINGS_ERROR_RECEIVED,\n        JitsiConferenceEvents.CONFERENCE_ERROR,\n        JitsiConferenceErrors.SETTINGS_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.FOCUS_DISCONNECTED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.FOCUS_DISCONNECTED);\n\n    chatRoom.addListener(XMPPEvents.FOCUS_LEFT,\n        () => {\n            Statistics.sendAnalytics(createFocusLeftEvent());\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.CONFERENCE_FAILED,\n                JitsiConferenceErrors.FOCUS_LEFT);\n        });\n\n    chatRoom.addListener(XMPPEvents.SESSION_ACCEPT_TIMEOUT,\n        jingleSession => {\n            Statistics.sendAnalyticsAndLog(\n                createJingleEvent(\n                    ACTION_JINGLE_SA_TIMEOUT,\n                    { p2p: jingleSession.isP2P }));\n        });\n\n    chatRoom.addListener(XMPPEvents.RECORDER_STATE_CHANGED,\n        (session, jid) => {\n\n            if (jid) {\n                const resource = Strophe.getResourceFromJid(jid);\n                const participant = conference.getParticipantById(resource) || resource;\n\n                if (session.getStatus() === 'off') {\n                    session.setTerminator(participant);\n                } else if (session.getStatus() === 'on') {\n                    session.setInitiator(participant);\n                }\n            }\n\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.RECORDER_STATE_CHANGED,\n                session);\n        });\n\n    this.chatRoomForwarder.forward(XMPPEvents.TRANSCRIPTION_STATUS_CHANGED,\n        JitsiConferenceEvents.TRANSCRIPTION_STATUS_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.VIDEO_SIP_GW_AVAILABILITY_CHANGED,\n        JitsiConferenceEvents.VIDEO_SIP_GW_AVAILABILITY_CHANGED);\n\n    this.chatRoomForwarder.forward(\n        XMPPEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED,\n        JitsiConferenceEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.PHONE_NUMBER_CHANGED,\n        JitsiConferenceEvents.PHONE_NUMBER_CHANGED);\n\n    chatRoom.setParticipantPropertyListener((node, from) => {\n        const participant = conference.getParticipantById(from);\n\n        if (!participant) {\n            return;\n        }\n\n        participant.setProperty(\n            node.tagName.substring('jitsi_participant_'.length),\n            node.value);\n    });\n\n    chatRoom.addListener(XMPPEvents.KICKED,\n        conference.onMemberKicked.bind(conference));\n    chatRoom.addListener(XMPPEvents.SUSPEND_DETECTED,\n        conference.onSuspendDetected.bind(conference));\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOCK_CHANGED,\n        JitsiConferenceEvents.LOCK_STATE_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_MEMBERS_ONLY_CHANGED,\n        JitsiConferenceEvents.MEMBERS_ONLY_CHANGED);\n\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_JOINED,\n        conference.onMemberJoined.bind(conference));\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOBBY_MEMBER_JOINED,\n        JitsiConferenceEvents.LOBBY_USER_JOINED);\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOBBY_MEMBER_UPDATED,\n        JitsiConferenceEvents.LOBBY_USER_UPDATED);\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOBBY_MEMBER_LEFT,\n        JitsiConferenceEvents.LOBBY_USER_LEFT);\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_BOT_TYPE_CHANGED,\n        conference._onMemberBotTypeChanged.bind(conference));\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_LEFT,\n        conference.onMemberLeft.bind(conference));\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LEFT,\n        JitsiConferenceEvents.CONFERENCE_LEFT);\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_DENIED_ACCESS,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONFERENCE_ACCESS_DENIED);\n\n    chatRoom.addListener(XMPPEvents.DISPLAY_NAME_CHANGED,\n        conference.onDisplayNameChanged.bind(conference));\n\n    chatRoom.addListener(XMPPEvents.LOCAL_ROLE_CHANGED, role => {\n        conference.onLocalRoleChanged(role);\n\n        // log all events for the recorder operated by the moderator\n        if (conference.statistics && conference.isModerator()) {\n            conference.on(JitsiConferenceEvents.RECORDER_STATE_CHANGED,\n                recorderSession => {\n                    const logObject = {\n                        error: recorderSession.getError(),\n                        id: 'recorder_status',\n                        status: recorderSession.getStatus()\n                    };\n\n                    Statistics.sendLog(JSON.stringify(logObject));\n                });\n        }\n    });\n\n    chatRoom.addListener(XMPPEvents.MUC_ROLE_CHANGED,\n        conference.onUserRoleChanged.bind(conference));\n\n    chatRoom.addListener(AuthenticationEvents.IDENTITY_UPDATED,\n        (authEnabled, authIdentity) => {\n            conference.authEnabled = authEnabled;\n            conference.authIdentity = authIdentity;\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.AUTH_STATUS_CHANGED, authEnabled,\n                authIdentity);\n        });\n\n    chatRoom.addListener(\n        XMPPEvents.MESSAGE_RECEIVED,\n\n        // eslint-disable-next-line max-params\n        (jid, txt, myJid, ts) => {\n            const id = Strophe.getResourceFromJid(jid);\n            if (txt.indexOf(\"Transcript\") !== -1 || txt.indexOf(\"Fellow Jitser\") !== -1) {\n                return;\n            }\n          \n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.MESSAGE_RECEIVED,\n                id, txt, ts);\n        });\n\n    chatRoom.addListener(\n        XMPPEvents.PRIVATE_MESSAGE_RECEIVED,\n\n        // eslint-disable-next-line max-params\n        (jid, txt, myJid, ts) => {\n            const id = Strophe.getResourceFromJid(jid);\n\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.PRIVATE_MESSAGE_RECEIVED,\n                id, txt, ts);\n        });\n\n    chatRoom.addListener(XMPPEvents.PRESENCE_STATUS,\n        (jid, status) => {\n            const id = Strophe.getResourceFromJid(jid);\n            const participant = conference.getParticipantById(id);\n\n            if (!participant || participant._status === status) {\n                return;\n            }\n            participant._status = status;\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.USER_STATUS_CHANGED, id, status);\n        });\n\n    chatRoom.addListener(XMPPEvents.JSON_MESSAGE_RECEIVED,\n        (from, payload) => {\n            const id = Strophe.getResourceFromJid(from);\n            const participant = conference.getParticipantById(id);\n\n            if (participant) {\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n                    participant, payload);\n            } else {\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.NON_PARTICIPANT_MESSAGE_RECEIVED,\n                    id, payload);\n            }\n        });\n\n    chatRoom.addPresenceListener('startmuted', (data, from) => {\n        let isModerator = false;\n\n        if (conference.myUserId() === from && conference.isModerator()) {\n            isModerator = true;\n        } else {\n            const participant = conference.getParticipantById(from);\n\n            if (participant && participant.isModerator()) {\n                isModerator = true;\n            }\n        }\n\n        if (!isModerator) {\n            return;\n        }\n\n        const startAudioMuted = data.attributes.audio === 'true';\n        const startVideoMuted = data.attributes.video === 'true';\n\n        let updated = false;\n\n        if (startAudioMuted !== conference.startMutedPolicy.audio) {\n            conference.startMutedPolicy.audio = startAudioMuted;\n            updated = true;\n        }\n\n        if (startVideoMuted !== conference.startMutedPolicy.video) {\n            conference.startMutedPolicy.video = startVideoMuted;\n            updated = true;\n        }\n\n        if (updated) {\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.START_MUTED_POLICY_CHANGED,\n                conference.startMutedPolicy\n            );\n        }\n    });\n\n    if (conference.statistics) {\n        // FIXME ICE related events should end up in RTCEvents eventually\n        chatRoom.addListener(XMPPEvents.CONNECTION_ICE_FAILED,\n            session => {\n                conference.statistics.sendIceConnectionFailedEvent(\n                    session.peerconnection);\n            });\n\n        // FIXME XMPPEvents.ADD_ICE_CANDIDATE_FAILED is never emitted\n        chatRoom.addListener(XMPPEvents.ADD_ICE_CANDIDATE_FAILED,\n            (e, pc) => {\n                conference.statistics.sendAddIceCandidateFailed(e, pc);\n            });\n    }\n\n    // Breakout rooms.\n    this.chatRoomForwarder.forward(XMPPEvents.BREAKOUT_ROOMS_MOVE_TO_ROOM,\n        JitsiConferenceEvents.BREAKOUT_ROOMS_MOVE_TO_ROOM);\n    this.chatRoomForwarder.forward(XMPPEvents.BREAKOUT_ROOMS_UPDATED,\n        JitsiConferenceEvents.BREAKOUT_ROOMS_UPDATED);\n};\n\n/**\n * Setups event listeners related to conference.rtc\n */\nJitsiConferenceEventManager.prototype.setupRTCListeners = function() {\n    const conference = this.conference;\n    const rtc = conference.rtc;\n\n    rtc.addListener(\n        RTCEvents.REMOTE_TRACK_ADDED,\n        conference.onRemoteTrackAdded.bind(conference));\n\n    rtc.addListener(\n        RTCEvents.REMOTE_TRACK_REMOVED,\n        conference.onRemoteTrackRemoved.bind(conference));\n\n    rtc.addListener(RTCEvents.DOMINANT_SPEAKER_CHANGED,\n        (dominant, previous) => {\n            if (conference.participants[dominant]?._hidden) {\n                return;\n            } \n            if (conference.lastDominantSpeaker !== dominant && conference.room) {\n                conference.lastDominantSpeaker = dominant;\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.DOMINANT_SPEAKER_CHANGED, dominant, previous);\n\n                if (previous && previous.length) {\n                    const speakerList = previous.slice(0);\n\n                    // Add the dominant speaker to the top of the list (exclude self).\n                    if (conference.myUserId !== dominant) {\n                        speakerList.splice(0, 0, dominant);\n                    }\n\n                    // Trim the list to the top 5 speakers only.\n                    if (speakerList.length > SPEAKERS_AUDIO_LEVELS) {\n                        speakerList.splice(SPEAKERS_AUDIO_LEVELS, speakerList.length - SPEAKERS_AUDIO_LEVELS);\n                    }\n                    conference.statistics && conference.statistics.setSpeakerList(speakerList);\n                }\n                if (conference.statistics && conference.myUserId() === dominant) {\n                    // We are the new dominant speaker.\n                    conference.statistics.sendDominantSpeakerEvent(conference.room.roomjid);\n                }\n            }\n        });\n\n    rtc.addListener(RTCEvents.DATA_CHANNEL_OPEN, () => {\n        const now = window.performance.now();\n        const key = 'data.channel.opened';\n\n        // TODO: Move all of the 'connectionTimes' logic to its own module.\n        logger.log(`(TIME) ${key}:\\t`, now);\n        conference.room.connectionTimes[key] = now;\n        Statistics.sendAnalytics(\n            createConnectionStageReachedEvent(key, { value: now }));\n\n        conference.eventEmitter.emit(JitsiConferenceEvents.DATA_CHANNEL_OPENED);\n    });\n\n    rtc.addListener(RTCEvents.ENDPOINT_MESSAGE_RECEIVED,\n        (from, payload) => {\n            const participant = conference.getParticipantById(from);\n\n            if (participant) {\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n                    participant, payload);\n            } else {\n                logger.warn(\n                    'Ignored ENDPOINT_MESSAGE_RECEIVED for not existing '\n                        + `participant: ${from}`,\n                    payload);\n            }\n        });\n\n    rtc.addListener(RTCEvents.ENDPOINT_STATS_RECEIVED,\n        (from, payload) => {\n            const participant = conference.getParticipantById(from);\n\n            if (participant) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.ENDPOINT_STATS_RECEIVED, participant, payload);\n            } else {\n                logger.warn(`Ignoring ENDPOINT_STATS_RECEIVED for a non-existant participant: ${from}`);\n            }\n        });\n\n    rtc.addListener(RTCEvents.LOCAL_UFRAG_CHANGED,\n        (tpc, ufrag) => {\n            if (!tpc.isP2P) {\n                Statistics.sendLog(\n                    JSON.stringify({\n                        id: 'local_ufrag',\n                        value: ufrag\n                    }));\n            }\n        });\n    rtc.addListener(RTCEvents.REMOTE_UFRAG_CHANGED,\n        (tpc, ufrag) => {\n            if (!tpc.isP2P) {\n                Statistics.sendLog(\n                    JSON.stringify({\n                        id: 'remote_ufrag',\n                        value: ufrag\n                    }));\n            }\n        });\n\n    rtc.addListener(RTCEvents.CREATE_ANSWER_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendCreateAnswerFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.CREATE_OFFER_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendCreateOfferFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.SET_LOCAL_DESCRIPTION_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendSetLocalDescFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.SET_REMOTE_DESCRIPTION_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendSetRemoteDescFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.LOCAL_TRACK_SSRC_UPDATED,\n        (track, ssrc) => {\n            // when starting screen sharing, the track is created and when\n            // we do set local description and we process the ssrc we\n            // will be notified for it and we will report it with the event\n            // for screen sharing\n            if (track.isVideoTrack() && track.videoType === VideoType.DESKTOP) {\n                conference.statistics.sendScreenSharingEvent(true, ssrc);\n            }\n        });\n};\n\n/**\n * Removes event listeners related to conference.xmpp\n */\nJitsiConferenceEventManager.prototype.removeXMPPListeners = function() {\n    const conference = this.conference;\n\n    Object.keys(this.xmppListeners).forEach(eventName => {\n        conference.xmpp.removeListener(\n            eventName,\n            this.xmppListeners[eventName]);\n    });\n    this.xmppListeners = {};\n};\n\n\n/**\n * Setups event listeners related to conference.xmpp\n */\nJitsiConferenceEventManager.prototype.setupXMPPListeners = function() {\n    const conference = this.conference;\n\n    this._addConferenceXMPPListener(\n        XMPPEvents.CALL_INCOMING,\n        conference.onIncomingCall.bind(conference));\n    this._addConferenceXMPPListener(\n        XMPPEvents.CALL_ACCEPTED,\n        conference.onCallAccepted.bind(conference));\n    this._addConferenceXMPPListener(\n        XMPPEvents.TRANSPORT_INFO,\n        conference.onTransportInfo.bind(conference));\n    this._addConferenceXMPPListener(\n        XMPPEvents.CALL_ENDED,\n        conference.onCallEnded.bind(conference));\n\n    this._addConferenceXMPPListener(XMPPEvents.START_MUTED_FROM_FOCUS,\n        (audioMuted, videoMuted) => {\n            if (conference.options.config.ignoreStartMuted) {\n                return;\n            }\n\n            conference.startAudioMuted = audioMuted;\n            conference.startVideoMuted = videoMuted;\n\n            // mute existing local tracks because this is initial mute from\n            // Jicofo\n            conference.getLocalTracks().forEach(track => {\n                switch (track.getType()) {\n                case MediaType.AUDIO:\n                    conference.startAudioMuted && track.mute();\n                    break;\n                case MediaType.VIDEO:\n                    conference.startVideoMuted && track.mute();\n                    break;\n                }\n            });\n\n            conference.eventEmitter.emit(JitsiConferenceEvents.STARTED_MUTED);\n        });\n\n    this._addConferenceXMPPListener(XMPPEvents.CONFERENCE_TIMESTAMP_RECEIVED,\n        createdTimestamp => {\n            conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_CREATED_TIMESTAMP, createdTimestamp);\n        });\n\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_CHANGED,\n        (value, mediaType, actorJid) => {\n            const actorParticipant = conference.getParticipants().find(p => p.getJid() === actorJid);\n\n            conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_CHANGED, {\n                enabled: value,\n                mediaType,\n                actor: actorParticipant\n            });\n        });\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_PARTICIPANT_APPROVED,\n        (mediaType, jid) => {\n            const participant = conference.getParticipantById(Strophe.getResourceFromJid(jid));\n\n            if (participant) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_PARTICIPANT_APPROVED, {\n                    participant,\n                    mediaType\n                });\n            }\n        });\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_PARTICIPANT_REJECTED,\n        (mediaType, jid) => {\n            const participant = conference.getParticipantById(Strophe.getResourceFromJid(jid));\n\n            if (participant) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_PARTICIPANT_REJECTED, {\n                    participant,\n                    mediaType\n                });\n            }\n        });\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_APPROVED,\n        value => conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_APPROVED, { mediaType: value }));\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_REJECTED,\n        value => {\n            conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_REJECTED, { mediaType: value });\n        });\n};\n\n/**\n * Add XMPP listener and save its reference for remove on leave conference.\n */\nJitsiConferenceEventManager.prototype._addConferenceXMPPListener = function(\n        eventName, listener) {\n    this.xmppListeners[eventName] = listener;\n    this.conference.xmpp.addListener(eventName, listener);\n};\n\n/**\n * Setups event listeners related to conference.statistics\n */\nJitsiConferenceEventManager.prototype.setupStatisticsListeners = function() {\n    const conference = this.conference;\n\n    if (!conference.statistics) {\n        return;\n    }\n\n    /* eslint-disable max-params */\n    conference.statistics.addAudioLevelListener((tpc, ssrc, level, isLocal) => {\n        conference.rtc.setAudioLevel(tpc, ssrc, level, isLocal);\n    });\n\n    /* eslint-enable max-params */\n\n    // Forward the \"before stats disposed\" event\n    conference.statistics.addBeforeDisposedListener(() => {\n        conference.eventEmitter.emit(\n            JitsiConferenceEvents.BEFORE_STATISTICS_DISPOSED);\n    });\n\n    // if we are in startSilent mode we will not be sending/receiving so nothing to detect\n    if (!conference.options.config.startSilent) {\n        conference.statistics.addByteSentStatsListener((tpc, stats) => {\n            conference.getLocalTracks(MediaType.AUDIO).forEach(track => {\n                const ssrc = tpc.getLocalSSRC(track);\n\n                if (!ssrc || !stats.hasOwnProperty(ssrc)) {\n                    return;\n                }\n\n                track.onByteSentStatsReceived(tpc, stats[ssrc]);\n            });\n        });\n    }\n};\n","/**\n * The media track was removed to the conference.\n */\nexport const LOCAL_TRACK_STOPPED = 'track.stopped';\n\n/**\n * Audio levels of a this track was changed.\n * The first argument is a number with audio level value in range [0, 1].\n * The second argument is a <tt>TraceablePeerConnection</tt> which is the peer\n * connection which measured the audio level (one audio track can be added\n * to multiple peer connection at the same time). This argument is optional for\n * local tracks for which we can measure audio level without the peer\n * connection (the value will be <tt>undefined</tt>).\n *\n * NOTE The second argument should be treated as library internal and can be\n * removed at any time.\n */\nexport const TRACK_AUDIO_LEVEL_CHANGED = 'track.audioLevelsChanged';\n\n/**\n * The audio output of the track was changed.\n */\nexport const TRACK_AUDIO_OUTPUT_CHANGED = 'track.audioOutputChanged';\n\n/**\n * A media track mute status was changed.\n */\nexport const TRACK_MUTE_CHANGED = 'track.trackMuteChanged';\n\n/**\n * The video type(\"camera\" or \"desktop\") of the track was changed.\n */\nexport const TRACK_VIDEOTYPE_CHANGED = 'track.videoTypeChanged';\n\n/**\n * Indicates that the track is not receiving any data even though we expect it\n * to receive data (i.e. the stream is not stopped).\n */\nexport const NO_DATA_FROM_SOURCE = 'track.no_data_from_source';\n\n/**\n * Indicates that the local audio track is not receiving any audio input from\n * the microphone that is currently selected.\n */\nexport const NO_AUDIO_INPUT = 'track.no_audio_input';\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport { createParticipantConnectionStatusEvent } from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\nimport Statistics from '../statistics/statistics';\n\nconst logger = getLogger(__filename);\n\n/**\n * Default value of 500 milliseconds for {@link ParticipantConnectionStatus.outOfLastNTimeout}.\n *\n * @type {number}\n */\nconst DEFAULT_NOT_IN_LAST_N_TIMEOUT = 500;\n\n/**\n * Default value of 2500 milliseconds for {@link ParticipantConnectionStatus.p2pRtcMuteTimeout}.\n */\nconst DEFAULT_P2P_RTC_MUTE_TIMEOUT = 2500;\n\n/**\n * Default value of 10000 milliseconds for {@link ParticipantConnectionStatus.rtcMuteTimeout}.\n *\n * @type {number}\n */\nconst DEFAULT_RTC_MUTE_TIMEOUT = 10000;\n\n/**\n * The time to wait a track to be restored. Track which was out of lastN\n * should be inactive and when entering lastN it becomes restoring and when\n * data is received from bridge it will become active, but if no data is\n * received for some time we set status of that participant connection to\n * interrupted.\n * @type {number}\n */\nconst DEFAULT_RESTORING_TIMEOUT = 10000;\n\n/**\n * Participant connection statuses.\n *\n * @type {{\n *      ACTIVE: string,\n *      INACTIVE: string,\n *      INTERRUPTED: string,\n *      RESTORING: string\n * }}\n */\nexport const ParticipantConnectionStatus = {\n    /**\n     * Status indicating that connection is currently active.\n     */\n    ACTIVE: 'active',\n\n    /**\n     * Status indicating that connection is currently inactive.\n     * Inactive means the connection was stopped on purpose from the bridge,\n     * like exiting lastN or adaptivity decided to drop video because of not\n     * enough bandwidth.\n     */\n    INACTIVE: 'inactive',\n\n    /**\n     * Status indicating that connection is currently interrupted.\n     */\n    INTERRUPTED: 'interrupted',\n\n    /**\n     * Status indicating that connection is currently restoring.\n     */\n    RESTORING: 'restoring'\n};\n\n/**\n * Class is responsible for emitting\n * JitsiConferenceEvents.PARTICIPANT_CONN_STATUS_CHANGED events.\n */\nexport default class ParticipantConnectionStatusHandler {\n    /* eslint-disable max-params*/\n    /**\n     * Calculates the new {@link ParticipantConnectionStatus} based on\n     * the values given for some specific remote user. It is assumed that\n     * the conference is currently in the JVB mode (in contrary to the P2P mode)\n     * @param {boolean} isConnectionActiveByJvb true if the JVB did not get any\n     * data from the user for the last 15 seconds.\n     * @param {boolean} isInLastN indicates whether the user is in the last N\n     * set. When set to false it means that JVB is not sending any video for\n     * the user.\n     * @param {boolean} isRestoringTimedout if true it means that the user has\n     * been outside of last N too long to be considered\n     * {@link ParticipantConnectionStatus.RESTORING}.\n     * @param {boolean} isVideoMuted true if the user is video muted and we\n     * should not expect to receive any video.\n     * @param {boolean} isVideoTrackFrozen if the current browser support video\n     * frozen detection then it will be set to true when the video track is\n     * frozen. If the current browser does not support frozen detection the it's\n     * always false.\n     * @return {ParticipantConnectionStatus} the new connection status for\n     * the user for whom the values above were provided.\n     * @private\n     */\n    static _getNewStateForJvbMode(\n            isConnectionActiveByJvb,\n            isInLastN,\n            isRestoringTimedout,\n            isVideoMuted,\n            isVideoTrackFrozen) {\n        if (!isConnectionActiveByJvb) {\n            // when there is a connection problem signaled from jvb\n            // it means no media was flowing for at least 15secs, so both audio\n            // and video are most likely interrupted\n            return ParticipantConnectionStatus.INTERRUPTED;\n        } else if (isVideoMuted) {\n            // If the connection is active according to JVB and the user is\n            // video muted there is no way for the connection to be inactive,\n            // because the detection logic below only makes sense for video.\n            return ParticipantConnectionStatus.ACTIVE;\n        }\n\n        // Logic when isVideoTrackFrozen is supported\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n            if (!isVideoTrackFrozen) {\n                // If the video is playing we're good\n                return ParticipantConnectionStatus.ACTIVE;\n            } else if (isInLastN) {\n                return isRestoringTimedout\n                    ? ParticipantConnectionStatus.INTERRUPTED\n                    : ParticipantConnectionStatus.RESTORING;\n            }\n\n            return ParticipantConnectionStatus.INACTIVE;\n        }\n\n        // Because this browser is incapable of detecting frozen video we must\n        // rely on the lastN value\n        return isInLastN\n            ? ParticipantConnectionStatus.ACTIVE\n            : ParticipantConnectionStatus.INACTIVE;\n    }\n\n    /* eslint-enable max-params*/\n\n    /**\n     * In P2P mode we don't care about any values coming from the JVB and\n     * the connection status can be only active or interrupted.\n     * @param {boolean} isVideoMuted the user if video muted\n     * @param {boolean} isVideoTrackFrozen true if the video track for\n     * the remote user is currently frozen. If the current browser does not\n     * support video frozen detection then it's always false.\n     * @return {ParticipantConnectionStatus}\n     * @private\n     */\n    static _getNewStateForP2PMode(isVideoMuted, isVideoTrackFrozen) {\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            // There's no way to detect problems in P2P when there's no video\n            // track frozen detection...\n            return ParticipantConnectionStatus.ACTIVE;\n        }\n\n        return isVideoMuted || !isVideoTrackFrozen\n            ? ParticipantConnectionStatus.ACTIVE\n            : ParticipantConnectionStatus.INTERRUPTED;\n    }\n\n    /**\n     * Creates new instance of <tt>ParticipantConnectionStatus</tt>.\n     *\n     * @constructor\n     * @param {RTC} rtc the RTC service instance\n     * @param {JitsiConference} conference parent conference instance\n     * @param {Object} options\n     * @param {number} [options.p2pRtcMuteTimeout=2500] custom value for\n     * {@link ParticipantConnectionStatus.p2pRtcMuteTimeout}.\n     * @param {number} [options.rtcMuteTimeout=2000] custom value for\n     * {@link ParticipantConnectionStatus.rtcMuteTimeout}.\n     * @param {number} [options.outOfLastNTimeout=500] custom value for\n     * {@link ParticipantConnectionStatus.outOfLastNTimeout}.\n     */\n    constructor(rtc, conference, options) {\n        this.rtc = rtc;\n        this.conference = conference;\n\n        /**\n         * A map of the \"endpoint ID\"(which corresponds to the resource part\n         * of MUC JID(nickname)) to the timeout callback IDs scheduled using\n         * window.setTimeout.\n         * @type {Object.<string, number>}\n         */\n        this.trackTimers = {};\n\n        /**\n         * This map holds the endpoint connection status received from the JVB\n         * (as it might be different than the one stored in JitsiParticipant).\n         * Required for getting back in sync when remote video track is removed.\n         * @type {Object.<string, boolean>}\n         */\n        this.connStatusFromJvb = { };\n\n        /**\n         * If video track frozen detection through RTC mute event is supported,\n         * we wait some time until video track is considered frozen. But because\n         * when the user falls out of last N it is expected for the video to\n         * freeze this timeout must be significantly reduced in \"out of last N\"\n         * case.\n         *\n         * Basically this value is used instead of {@link rtcMuteTimeout} when\n         * user is not in last N.\n         * @type {number}\n         */\n        this.outOfLastNTimeout\n            = typeof options.outOfLastNTimeout === 'number'\n                ? options.outOfLastNTimeout : DEFAULT_NOT_IN_LAST_N_TIMEOUT;\n\n        /**\n         * How long we are going to wait for the corresponding signaling mute event after the RTC video track muted\n         * event is fired on the Media stream, before the connection interrupted is fired. The default value is\n         * {@link DEFAULT_P2P_RTC_MUTE_TIMEOUT}.\n         *\n         * @type {number} amount of time in milliseconds.\n         */\n        this.p2pRtcMuteTimeout = typeof options.p2pRtcMuteTimeout === 'number'\n            ? options.p2pRtcMuteTimeout : DEFAULT_P2P_RTC_MUTE_TIMEOUT;\n\n        /**\n         * How long we're going to wait after the RTC video track muted event\n         * for the corresponding signalling mute event, before the connection\n         * interrupted is fired. The default value is\n         * {@link DEFAULT_RTC_MUTE_TIMEOUT}.\n         *\n         * @type {number} amount of time in milliseconds\n         */\n        this.rtcMuteTimeout\n            = typeof options.rtcMuteTimeout === 'number'\n                ? options.rtcMuteTimeout : DEFAULT_RTC_MUTE_TIMEOUT;\n\n        /**\n         * This map holds a timestamp indicating  when participant's video track\n         * was RTC muted (it is assumed that each participant can have only 1\n         * video track at a time). The purpose of storing the timestamp is to\n         * avoid the transition to disconnected status in case of legitimate\n         * video mute operation where the signalling video muted event can\n         * arrive shortly after RTC muted event.\n         *\n         * The key is participant's ID which is the same as endpoint id in\n         * the Colibri conference allocated on the JVB.\n         *\n         * The value is a timestamp measured in milliseconds obtained with\n         * <tt>Date.now()</tt>.\n         *\n         * FIXME merge this logic with NO_DATA_FROM_SOURCE event\n         *       implemented in JitsiLocalTrack by extending the event to\n         *       the remote track and allowing to set different timeout for\n         *       local and remote tracks.\n         *\n         * @type {Object.<string, number>}\n         */\n        this.rtcMutedTimestamp = { };\n        logger.info(`RtcMuteTimeout set to: ${this.rtcMuteTimeout}`);\n\n        /**\n         * This map holds the timestamps indicating when participant's video\n         * entered lastN set. Participants entering lastN will have connection\n         * status restoring and when we start receiving video will become\n         * active, but if video is not received for certain time\n         * {@link DEFAULT_RESTORING_TIMEOUT} that participant connection status\n         * will become interrupted.\n         *\n         * @type {Map<string, number>}\n         */\n        this.enteredLastNTimestamp = new Map();\n\n        /**\n         * A map of the \"endpoint ID\"(which corresponds to the resource part\n         * of MUC JID(nickname)) to the restoring timeout callback IDs\n         * scheduled using window.setTimeout.\n         *\n         * @type {Map<string, number>}\n         */\n        this.restoringTimers = new Map();\n\n        /**\n         * A map that holds the current connection status (along with all the internal events that happen\n         * while in that state).\n         *\n         * The goal is to send this information to the analytics backend for post-mortem analysis.\n         */\n        this.connectionStatusMap = new Map();\n    }\n\n    /**\n     * Gets the video frozen timeout for given user.\n     * @param {string} id endpoint/participant ID\n     * @return {number} how long are we going to wait since RTC video muted\n     * even, before a video track is considered frozen.\n     * @private\n     */\n    _getVideoFrozenTimeout(id) {\n        return this.rtc.isInLastN(id)\n            ? this.rtcMuteTimeout\n            : this.conference.isP2PActive() ? this.p2pRtcMuteTimeout : this.outOfLastNTimeout;\n    }\n\n    /**\n     * Initializes <tt>ParticipantConnectionStatus</tt> and bind required event\n     * listeners.\n     */\n    init() {\n\n        this._onEndpointConnStatusChanged\n            = this.onEndpointConnStatusChanged.bind(this);\n\n        this.rtc.addListener(\n            RTCEvents.ENDPOINT_CONN_STATUS_CHANGED,\n            this._onEndpointConnStatusChanged);\n\n        // Handles P2P status changes\n        this._onP2PStatus = this.refreshConnectionStatusForAll.bind(this);\n        this.conference.on(JitsiConferenceEvents.P2P_STATUS, this._onP2PStatus);\n\n        // Used to send analytics events for the participant that left the call.\n        this._onUserLeft = this.onUserLeft.bind(this);\n        this.conference.on(JitsiConferenceEvents.USER_LEFT, this._onUserLeft);\n\n        // On some browsers MediaStreamTrack trigger \"onmute\"/\"onunmute\"\n        // events for video type tracks when they stop receiving data which is\n        // often a sign that remote user is having connectivity issues\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n\n            this._onTrackRtcMuted = this.onTrackRtcMuted.bind(this);\n            this.rtc.addListener(\n                RTCEvents.REMOTE_TRACK_MUTE, this._onTrackRtcMuted);\n\n            this._onTrackRtcUnmuted = this.onTrackRtcUnmuted.bind(this);\n            this.rtc.addListener(\n                RTCEvents.REMOTE_TRACK_UNMUTE, this._onTrackRtcUnmuted);\n\n            // Track added/removed listeners are used to bind \"mute\"/\"unmute\"\n            // event handlers\n            this._onRemoteTrackAdded = this.onRemoteTrackAdded.bind(this);\n            this.conference.on(\n                JitsiConferenceEvents.TRACK_ADDED,\n                this._onRemoteTrackAdded);\n\n            this._onRemoteTrackRemoved = this.onRemoteTrackRemoved.bind(this);\n            this.conference.on(\n                JitsiConferenceEvents.TRACK_REMOVED,\n                this._onRemoteTrackRemoved);\n\n            // Listened which will be bound to JitsiRemoteTrack to listen for\n            // signalling mute/unmute events.\n            this._onSignallingMuteChanged\n                = this.onSignallingMuteChanged.bind(this);\n\n            // Used to send an analytics event when the video type changes.\n            this._onTrackVideoTypeChanged\n                = this.onTrackVideoTypeChanged.bind(this);\n        }\n\n        this._onLastNChanged = this._onLastNChanged.bind(this);\n        this.conference.on(\n            JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED,\n            this._onLastNChanged);\n\n        this._onLastNValueChanged\n            = this.refreshConnectionStatusForAll.bind(this);\n        this.rtc.on(\n            RTCEvents.LASTN_VALUE_CHANGED, this._onLastNValueChanged);\n    }\n\n    /**\n     * Removes all event listeners and disposes of all resources held by this\n     * instance.\n     */\n    dispose() {\n\n        this.rtc.removeListener(\n            RTCEvents.ENDPOINT_CONN_STATUS_CHANGED,\n            this._onEndpointConnStatusChanged);\n\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n            this.rtc.removeListener(\n                RTCEvents.REMOTE_TRACK_MUTE,\n                this._onTrackRtcMuted);\n            this.rtc.removeListener(\n                RTCEvents.REMOTE_TRACK_UNMUTE,\n                this._onTrackRtcUnmuted);\n\n            this.conference.off(\n                JitsiConferenceEvents.TRACK_ADDED,\n                this._onRemoteTrackAdded);\n            this.conference.off(\n                JitsiConferenceEvents.TRACK_REMOVED,\n                this._onRemoteTrackRemoved);\n        }\n\n        this.conference.off(\n            JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED,\n            this._onLastNChanged);\n\n        this.rtc.removeListener(\n            RTCEvents.LASTN_VALUE_CHANGED, this._onLastNValueChanged);\n\n        this.conference.off(\n            JitsiConferenceEvents.P2P_STATUS, this._onP2PStatus);\n\n        this.conference.off(\n            JitsiConferenceEvents.USER_LEFT, this._onUserLeft);\n\n        const participantIds = Object.keys(this.trackTimers);\n\n        for (const participantId of participantIds) {\n            this.clearTimeout(participantId);\n            this.clearRtcMutedTimestamp(participantId);\n        }\n\n        for (const id in this.connectionStatusMap) {\n            if (this.connectionStatusMap.hasOwnProperty(id)) {\n                this.onUserLeft(id);\n            }\n        }\n\n        // Clear RTC connection status cache\n        this.connStatusFromJvb = {};\n    }\n\n    /**\n     * Handles RTCEvents.ENDPOINT_CONN_STATUS_CHANGED triggered when we receive\n     * notification over the data channel from the bridge about endpoint's\n     * connection status update.\n     * @param {string} endpointId - The endpoint ID(MUC nickname/resource JID).\n     * @param {boolean} isActive - true if the connection is OK or false otherwise.\n     */\n    onEndpointConnStatusChanged(endpointId, isActive) {\n\n        logger.debug(\n            `Detector RTCEvents.ENDPOINT_CONN_STATUS_CHANGED(${Date.now()}): ${\n                endpointId}: ${isActive}`);\n\n        // Filter out events for the local JID for now\n        if (endpointId !== this.conference.myUserId()) {\n            // Store the status received over the data channels\n            this.connStatusFromJvb[endpointId] = isActive;\n            this.figureOutConnectionStatus(endpointId);\n        }\n    }\n\n    /**\n     * Changes connection status.\n     * @param {JitsiParticipant} participant\n     * @param newStatus\n     */\n    _changeConnectionStatus(participant, newStatus) {\n        if (participant.getConnectionStatus() !== newStatus) {\n\n            const endpointId = participant.getId();\n\n            participant._setConnectionStatus(newStatus);\n\n            logger.debug(\n                `Emit endpoint conn status(${Date.now()}) ${endpointId}: ${\n                    newStatus}`);\n\n            // Log the event on CallStats\n            Statistics.sendLog(\n                JSON.stringify({\n                    id: 'peer.conn.status',\n                    participant: endpointId,\n                    status: newStatus\n                }));\n\n\n            this.conference.eventEmitter.emit(\n                JitsiConferenceEvents.PARTICIPANT_CONN_STATUS_CHANGED,\n                endpointId, newStatus);\n        }\n    }\n\n    /**\n     * Reset the postponed \"connection interrupted\" event which was previously\n     * scheduled as a timeout on RTC 'onmute' event.\n     *\n     * @param {string} participantId - The participant for which the \"connection\n     * interrupted\" timeout was scheduled.\n     */\n    clearTimeout(participantId) {\n        if (this.trackTimers[participantId]) {\n            window.clearTimeout(this.trackTimers[participantId]);\n            this.trackTimers[participantId] = null;\n        }\n    }\n\n    /**\n     * Clears the timestamp of the RTC muted event for participant's video track\n     * @param {string} participantId the id of the conference participant which\n     * is the same as the Colibri endpoint ID of the video channel allocated for\n     * the user on the videobridge.\n     */\n    clearRtcMutedTimestamp(participantId) {\n        this.rtcMutedTimestamp[participantId] = null;\n    }\n\n    /**\n     * Bind signalling mute event listeners for video {JitsiRemoteTrack} when\n     * a new one is added to the conference.\n     *\n     * @param {JitsiTrack} remoteTrack - The {JitsiTrack} which is being added to\n     * the conference.\n     */\n    onRemoteTrackAdded(remoteTrack) {\n        if (!remoteTrack.isLocal()\n                && remoteTrack.getType() === MediaType.VIDEO) {\n\n            logger.debug(\n                `Detector on remote track added for: ${\n                    remoteTrack.getParticipantId()}`);\n\n            remoteTrack.on(\n                JitsiTrackEvents.TRACK_MUTE_CHANGED,\n                this._onSignallingMuteChanged);\n            remoteTrack.on(\n                JitsiTrackEvents.TRACK_VIDEOTYPE_CHANGED,\n                videoType => this._onTrackVideoTypeChanged(remoteTrack, videoType));\n        }\n    }\n\n    /**\n     * Removes all event listeners bound to the remote video track and clears\n     * any related timeouts.\n     *\n     * @param {JitsiRemoteTrack} remoteTrack - The remote track which is being\n     * removed from the conference.\n     */\n    onRemoteTrackRemoved(remoteTrack) {\n        if (!remoteTrack.isLocal()\n                && remoteTrack.getType() === MediaType.VIDEO) {\n\n            const endpointId = remoteTrack.getParticipantId();\n\n            logger.debug(`Detector on remote track removed: ${endpointId}`);\n\n            remoteTrack.off(\n                JitsiTrackEvents.TRACK_MUTE_CHANGED,\n                this._onSignallingMuteChanged);\n\n            this.clearTimeout(endpointId);\n            this.clearRtcMutedTimestamp(endpointId);\n\n            this.figureOutConnectionStatus(endpointId);\n        }\n    }\n\n    /**\n     * Checks if given participant's video is considered frozen.\n     * @param {JitsiParticipant} participant - The participant.\n     * @return {boolean} <tt>true</tt> if the video has frozen for given\n     * participant or <tt>false</tt> when it's either not considered frozen\n     * (yet) or if freeze detection is not supported by the current browser.\n     *\n     * FIXME merge this logic with NO_DATA_FROM_SOURCE event\n     *       implemented in JitsiLocalTrack by extending the event to\n     *       the remote track and allowing to set different timeout for\n     *       local and remote tracks.\n     *\n     */\n    isVideoTrackFrozen(participant) {\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            return false;\n        }\n\n        const id = participant.getId();\n        const hasAnyVideoRTCMuted = participant.hasAnyVideoTrackWebRTCMuted();\n        const rtcMutedTimestamp = this.rtcMutedTimestamp[id];\n        const timeout = this._getVideoFrozenTimeout(id);\n\n        return hasAnyVideoRTCMuted\n            && typeof rtcMutedTimestamp === 'number'\n            && (Date.now() - rtcMutedTimestamp) >= timeout;\n    }\n\n    /**\n     * Goes over every participant and updates connectivity status.\n     * Should be called when a parameter which affects all of the participants\n     * is changed (P2P for example).\n     */\n    refreshConnectionStatusForAll() {\n        const participants = this.conference.getParticipants();\n\n        for (const participant of participants) {\n            this.figureOutConnectionStatus(participant.getId());\n        }\n    }\n\n    /**\n     * Figures out (and updates) the current connectivity status for\n     * the participant identified by the given id.\n     *\n     * @param {string} id - The participant's id (MUC nickname or Colibri endpoint ID).\n     */\n    figureOutConnectionStatus(id) {\n        const participant = this.conference.getParticipantById(id);\n\n        if (!participant) {\n            // Probably the participant is no longer in the conference\n            // (at the time of writing this code, participant is\n            // detached from the conference and TRACK_REMOVED events are\n            // fired),\n            // so we don't care, but let's print a log message for debugging purposes.\n            logger.debug(`figure out conn status - no participant for: ${id}`);\n\n            return;\n        }\n\n        const inP2PMode = this.conference.isP2PActive();\n        const isRestoringTimedOut = this._isRestoringTimedout(id);\n        const audioOnlyMode = this.conference.getLastN() === 0;\n\n        // NOTE Overriding videoMuted to true for audioOnlyMode should disable\n        // any detection based on video playback or the last N.\n        const isVideoMuted = participant.isVideoMuted() || audioOnlyMode;\n        const isVideoTrackFrozen = this.isVideoTrackFrozen(participant);\n        const isInLastN = this.rtc.isInLastN(id);\n        let isConnActiveByJvb = this.connStatusFromJvb[id];\n\n        if (typeof isConnActiveByJvb !== 'boolean') {\n            // If no status was received from the JVB it means that it's active\n            // (the bridge does not send notification unless there is a problem)\n            isConnActiveByJvb = true;\n        }\n\n        const newState\n            = inP2PMode\n                ? ParticipantConnectionStatusHandler._getNewStateForP2PMode(\n                    isVideoMuted,\n                    isVideoTrackFrozen)\n                : ParticipantConnectionStatusHandler._getNewStateForJvbMode(\n                    isConnActiveByJvb,\n                    isInLastN,\n                    isRestoringTimedOut,\n                    isVideoMuted,\n                    isVideoTrackFrozen);\n\n        // if the new state is not restoring clear timers and timestamps\n        // that we use to track the restoring state\n        if (newState !== ParticipantConnectionStatus.RESTORING) {\n            this._clearRestoringTimer(id);\n        }\n\n        logger.debug(\n            `Figure out conn status for ${id}, is video muted: ${\n                isVideoMuted} is active(jvb): ${\n                isConnActiveByJvb} video track frozen: ${\n                isVideoTrackFrozen} p2p mode: ${\n                inP2PMode} is in last N: ${\n                isInLastN} currentStatus => newStatus: ${\n                participant.getConnectionStatus()} => ${newState}`);\n\n        const oldConnectionStatus = this.connectionStatusMap[id] || {};\n\n        // Send an analytics event (guard on either the p2p flag or the connection status has changed\n        // since the last time this code block run).\n        if (!('p2p' in oldConnectionStatus)\n            || !('connectionStatus' in oldConnectionStatus)\n            || oldConnectionStatus.p2p !== inP2PMode\n            || oldConnectionStatus.connectionStatus !== newState) {\n\n            const nowMs = Date.now();\n\n            this.maybeSendParticipantConnectionStatusEvent(id, nowMs);\n\n            this.connectionStatusMap[id] = {\n                ...oldConnectionStatus,\n                connectionStatus: newState,\n                p2p: inP2PMode,\n                startedMs: nowMs\n            };\n\n            // sometimes (always?) we're late to hook the TRACK_VIDEOTYPE_CHANGED event and the\n            // video type is not in oldConnectionStatus.\n            if (!('videoType' in this.connectionStatusMap[id])) {\n                const videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\n\n                if (Array.isArray(videoTracks) && videoTracks.length !== 0) {\n                    this.connectionStatusMap[id].videoType = videoTracks[0].videoType;\n                }\n            }\n        }\n        this._changeConnectionStatus(participant, newState);\n    }\n\n    /**\n     * Computes the duration of the current connection status for the participant with the specified id (i.e. 15 seconds\n     * in the INTERRUPTED state) and sends a participant connection status event.\n     * @param {string} id - The jid of the participant.\n     * @param {Number} nowMs - The current time (in millis).\n     * @returns {void}\n     */\n    maybeSendParticipantConnectionStatusEvent(id, nowMs) {\n        const participantConnectionStatus = this.connectionStatusMap[id];\n\n        if (participantConnectionStatus\n            && 'startedMs' in participantConnectionStatus\n            && 'videoType' in participantConnectionStatus\n            && 'connectionStatus' in participantConnectionStatus\n            && 'p2p' in participantConnectionStatus) {\n            participantConnectionStatus.value = nowMs - participantConnectionStatus.startedMs;\n            Statistics.sendAnalytics(\n                createParticipantConnectionStatusEvent(participantConnectionStatus));\n        }\n    }\n\n    /**\n     * On change in Last N set check all leaving and entering participants to\n     * change their corresponding statuses.\n     *\n     * @param {Array<string>} leavingLastN - The array of ids leaving lastN.\n     * @param {Array<string>} enteringLastN - The array of ids entering lastN.\n     * @private\n     */\n    _onLastNChanged(leavingLastN = [], enteringLastN = []) {\n        const now = Date.now();\n\n        logger.debug(`LastN endpoints changed leaving=${leavingLastN}, entering=${enteringLastN} at ${now}`);\n\n        // If the browser doesn't fire the mute/onmute events when the remote peer stops/starts sending media,\n        // calculate the connection status for all the endpoints since it won't get triggered automatically on\n        // the endpoint that has started/stopped receiving media.\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            this.refreshConnectionStatusForAll();\n        }\n\n        for (const id of leavingLastN) {\n            this.enteredLastNTimestamp.delete(id);\n            this._clearRestoringTimer(id);\n            browser.supportsVideoMuteOnConnInterrupted() && this.figureOutConnectionStatus(id);\n        }\n        for (const id of enteringLastN) {\n            // store the timestamp this id is entering lastN\n            this.enteredLastNTimestamp.set(id, now);\n            browser.supportsVideoMuteOnConnInterrupted() && this.figureOutConnectionStatus(id);\n        }\n    }\n\n    /**\n     * Clears the restoring timer for participant's video track and the\n     * timestamp for entering lastN.\n     *\n     * @param {string} participantId - The id of the conference participant which\n     * is the same as the Colibri endpoint ID of the video channel allocated for\n     * the user on the videobridge.\n     */\n    _clearRestoringTimer(participantId) {\n        const rTimer = this.restoringTimers.get(participantId);\n\n        if (rTimer) {\n            clearTimeout(rTimer);\n            this.restoringTimers.delete(participantId);\n        }\n    }\n\n    /**\n     * Checks whether a track had stayed enough in restoring state, compares\n     * current time and the time the track entered in lastN. If it hasn't\n     * timedout and there is no timer added, add new timer in order to give it\n     * more time to become active or mark it as interrupted on next check.\n     *\n     * @param {string} participantId - The id of the conference participant which\n     * is the same as the Colibri endpoint ID of the video channel allocated for\n     * the user on the videobridge.\n     * @returns {boolean} <tt>true</tt> if the track was in restoring state\n     * more than the timeout ({@link DEFAULT_RESTORING_TIMEOUT}.) in order to\n     * set its status to interrupted.\n     * @private\n     */\n    _isRestoringTimedout(participantId) {\n        const enteredLastNTimestamp\n            = this.enteredLastNTimestamp.get(participantId);\n\n        if (enteredLastNTimestamp\n            && (Date.now() - enteredLastNTimestamp)\n                >= DEFAULT_RESTORING_TIMEOUT) {\n            return true;\n        }\n\n        // still haven't reached timeout, if there is no timer scheduled,\n        // schedule one so we can track the restoring state and change it after\n        // reaching the timeout\n        const rTimer = this.restoringTimers.get(participantId);\n\n        if (!rTimer) {\n            this.restoringTimers.set(participantId, setTimeout(\n                () => this.figureOutConnectionStatus(participantId),\n                DEFAULT_RESTORING_TIMEOUT));\n        }\n\n        return false;\n    }\n\n    /**\n     * Sends a last/final participant connection status event for the participant that left the conference.\n     * @param {string} id - The id of the participant that left the conference.\n     * @returns {void}\n     */\n    onUserLeft(id) {\n        this.maybeSendParticipantConnectionStatusEvent(id, Date.now());\n        delete this.connectionStatusMap[id];\n    }\n\n    /**\n     * Handles RTC 'onmute' event for the video track.\n     *\n     * @param {JitsiRemoteTrack} track - The video track for which 'onmute' event\n     * will be processed.\n     */\n    onTrackRtcMuted(track) {\n        const participantId = track.getParticipantId();\n        const participant = this.conference.getParticipantById(participantId);\n\n        logger.debug(`Detector track RTC muted: ${participantId}`, Date.now());\n        if (!participant) {\n            logger.error(`No participant for id: ${participantId}`);\n\n            return;\n        }\n        this.rtcMutedTimestamp[participantId] = Date.now();\n        if (!participant.isVideoMuted()) {\n            // If the user is not muted according to the signalling we'll give\n            // it some time, before the connection interrupted event is\n            // triggered.\n            this.clearTimeout(participantId);\n\n            // The timeout is reduced when user is not in the last N\n            const timeout = this._getVideoFrozenTimeout(participantId);\n\n            this.trackTimers[participantId] = window.setTimeout(() => {\n                logger.debug(\n                    `Set RTC mute timeout for: ${participantId}\\\n                     of ${timeout} ms`);\n                this.clearTimeout(participantId);\n                this.figureOutConnectionStatus(participantId);\n            }, timeout);\n        }\n    }\n\n    /**\n     * Handles RTC 'onunmute' event for the video track.\n     *\n     * @param {JitsiRemoteTrack} track - The video track for which 'onunmute'\n     * event will be processed.\n     */\n    onTrackRtcUnmuted(track) {\n        const participantId = track.getParticipantId();\n\n        logger.debug(\n            `Detector track RTC unmuted: ${participantId}`, Date.now());\n\n        this.clearTimeout(participantId);\n        this.clearRtcMutedTimestamp(participantId);\n\n        this.figureOutConnectionStatus(participantId);\n    }\n\n    /**\n     * Here the signalling \"mute\"/\"unmute\" events are processed.\n     *\n     * @param {JitsiRemoteTrack} track - The remote video track for which\n     * the signalling mute/unmute event will be processed.\n     */\n    onSignallingMuteChanged(track) {\n        const participantId = track.getParticipantId();\n\n        logger.debug(\n            `Detector on track signalling mute changed: ${participantId}`,\n            track.isMuted());\n\n        this.figureOutConnectionStatus(participantId);\n    }\n\n    /**\n     * Sends a participant connection status event as a result of the video type\n     * changing.\n     * @param {JitsiRemoteTrack} track - The track.\n     * @param {VideoType} type - The video type.\n     * @returns {void}\n     */\n    onTrackVideoTypeChanged(track, type) {\n        const id = track.getParticipantId();\n        const nowMs = Date.now();\n\n        this.maybeSendParticipantConnectionStatusEvent(id, nowMs);\n\n        this.connectionStatusMap[id] = {\n            ...this.connectionStatusMap[id] || {},\n            videoType: type,\n            startedMs: nowMs\n        };\n    }\n}\n","\nimport { Strophe } from 'strophe.js';\n\n\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport { ParticipantConnectionStatus }\n    from './modules/connectivity/ParticipantConnectionStatus';\nimport * as MediaType from './service/RTC/MediaType';\n\n/**\n * Represents a participant in (i.e. a member of) a conference.\n */\nexport default class JitsiParticipant {\n\n    /* eslint-disable max-params */\n\n    /**\n     * Initializes a new JitsiParticipant instance.\n     *\n     * @constructor\n     * @param jid the conference XMPP jid\n     * @param conference\n     * @param displayName\n     * @param {Boolean} hidden - True if the new JitsiParticipant instance is to\n     * represent a hidden participant; otherwise, false.\n     * @param {string} statsID - optional participant statsID\n     * @param {string} status - the initial status if any.\n     * @param {object} identity - the xmpp identity\n     * @param {boolean?} isReplacing - whether this is a participant replacing another into the meeting.\n     * @param {boolean?} isReplaced - whether this is a participant to be kicked and replaced into the meeting.\n     */\n    constructor(jid, conference, displayName, hidden, statsID, status, identity, isReplacing, isReplaced) {\n        this._jid = jid;\n        this._id = Strophe.getResourceFromJid(jid);\n        this._conference = conference;\n        this._displayName = displayName;\n        this._supportsDTMF = false;\n        this._tracks = [];\n        this._role = 'none';\n        this._status = status;\n        this._hidden = hidden;\n        this._statsID = statsID;\n        this._connectionStatus = ParticipantConnectionStatus.ACTIVE;\n        this._properties = {};\n        this._identity = identity;\n        this._isReplacing = isReplacing;\n        this._isReplaced = isReplaced;\n        this._features = new Set();\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * @returns {JitsiConference} The conference that this participant belongs\n     * to.\n     */\n    getConference() {\n        return this._conference;\n    }\n\n    /**\n     * Gets the value of a property of this participant.\n     */\n    getProperty(name) {\n        return this._properties[name];\n    }\n\n    /**\n     * Checks whether this <tt>JitsiParticipant</tt> has any video tracks which\n     * are muted according to their underlying WebRTC <tt>MediaStreamTrack</tt>\n     * muted status.\n     * @return {boolean} <tt>true</tt> if this <tt>participant</tt> contains any\n     * video <tt>JitsiTrack</tt>s which are muted as defined in\n     * {@link JitsiTrack.isWebRTCTrackMuted}.\n     */\n    hasAnyVideoTrackWebRTCMuted() {\n        return (\n            this.getTracks().some(\n                jitsiTrack =>\n                    jitsiTrack.getType() === MediaType.VIDEO\n                        && jitsiTrack.isWebRTCTrackMuted()));\n    }\n\n    /**\n     * Updates participant's connection status.\n     * @param {string} state the current participant connection state.\n     * {@link ParticipantConnectionStatus}.\n     * @private\n     */\n    _setConnectionStatus(status) {\n        this._connectionStatus = status;\n    }\n\n    /**\n     * Return participant's connectivity status.\n     *\n     * @returns {string} the connection status\n     * <tt>ParticipantConnectionStatus</tt> of the user.\n     * {@link ParticipantConnectionStatus}.\n     */\n    getConnectionStatus() {\n        return this._connectionStatus;\n    }\n\n    /**\n     * Sets the value of a property of this participant, and fires an event if\n     * the value has changed.\n     * @name the name of the property.\n     * @value the value to set.\n     */\n    setProperty(name, value) {\n        const oldValue = this._properties[name];\n\n        if (value !== oldValue) {\n            this._properties[name] = value;\n            this._conference.eventEmitter.emit(\n                JitsiConferenceEvents.PARTICIPANT_PROPERTY_CHANGED,\n                this,\n                name,\n                oldValue,\n                value);\n        }\n    }\n\n    /**\n     * @returns {Array.<JitsiTrack>} The list of media tracks for this\n     * participant.\n     */\n    getTracks() {\n        return this._tracks.slice();\n    }\n\n    /**\n     * @param {MediaType} mediaType\n     * @returns {Array.<JitsiTrack>} an array of media tracks for this\n     * participant, for given media type.\n     */\n    getTracksByMediaType(mediaType) {\n        return this.getTracks().filter(track => track.getType() === mediaType);\n    }\n\n    /**\n     * @returns {String} The ID of this participant.\n     */\n    getId() {\n        return this._id;\n    }\n\n    /**\n     * @returns {String} The JID of this participant.\n     */\n    getJid() {\n        return this._jid;\n    }\n\n    /**\n     * @returns {String} The human-readable display name of this participant.\n     */\n    getDisplayName() {\n        return this._displayName;\n    }\n\n    /**\n     * @returns {String} The stats ID of this participant.\n     */\n    getStatsID() {\n        return this._statsID;\n    }\n\n    /**\n     * @returns {String} The status of the participant.\n     */\n    getStatus() {\n        return this._status;\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant is a moderator or not.\n     */\n    isModerator() {\n        return this._role === 'moderator';\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant is a hidden participant. Some\n     * special system participants may want to join hidden (like for example the\n     * recorder).\n     */\n    isHidden() {\n        return this._hidden;\n    }\n\n    /**\n     * @returns {Boolean} Wheter this participants replaces another participant\n     * from the meeting.\n     */\n    isReplacing() {\n        return this._isReplacing;\n    }\n\n    /**\n     * @returns {Boolean} Wheter this participants will be replaced by another\n     * participant in the meeting.\n     */\n    isReplaced() {\n        return this._isReplaced;\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant has muted their audio.\n     */\n    isAudioMuted() {\n        return this._isMediaTypeMuted(MediaType.AUDIO);\n    }\n\n    /**\n     * Determines whether all JitsiTracks which are of a specific MediaType and\n     * which belong to this JitsiParticipant are muted.\n     *\n     * @param {MediaType} mediaType - The MediaType of the JitsiTracks to be\n     * checked.\n     * @private\n     * @returns {Boolean} True if all JitsiTracks which are of the specified\n     * mediaType and which belong to this JitsiParticipant are muted; otherwise,\n     * false.\n     */\n    _isMediaTypeMuted(mediaType) {\n        return this.getTracks().reduce(\n            (muted, track) =>\n                muted && (track.getType() !== mediaType || track.isMuted()),\n            true);\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant has muted their video.\n     */\n    isVideoMuted() {\n        return this._isMediaTypeMuted(MediaType.VIDEO);\n    }\n\n    /**\n     * @returns {String} The role of this participant.\n     */\n    getRole() {\n        return this._role;\n    }\n\n    /**\n     * Sets a new participant role.\n     * @param {String} newRole - the new role.\n     */\n    setRole(newRole) {\n        this._role = newRole;\n    }\n\n    /**\n     * Sets whether participant is replacing another based on jwt.\n     * @param {String} newIsReplacing - whether is replacing.\n     */\n    setIsReplacing(newIsReplacing) {\n        this._isReplacing = newIsReplacing;\n    }\n\n    /**\n     * Sets whether participant is being replaced by another based on jwt.\n     * @param {boolean} newIsReplaced - whether is being replaced.\n     */\n    setIsReplaced(newIsReplaced) {\n        this._isReplaced = newIsReplaced;\n    }\n\n    /**\n     *\n     */\n    supportsDTMF() {\n        return this._supportsDTMF;\n    }\n\n    /**\n     * Returns a set with the features for the participant.\n     * @returns {Promise<Set<String>, Error>}\n     */\n    getFeatures() {\n        return Promise.resolve(this._features);\n    }\n\n    /**\n     * Checks current set features.\n     * @param {String} feature - the feature to check.\n     * @return {boolean} <tt>true</tt> if this <tt>participant</tt> contains the\n     * <tt>feature</tt>.\n     */\n    hasFeature(feature) {\n        return this._features.has(feature);\n    }\n\n    /**\n     * Set new features.\n     * @param {Set<String>|undefined} newFeatures - Sets new features.\n     */\n    setFeatures(newFeatures) {\n        this._features = newFeatures || new Set();\n    }\n\n    /**\n     * Returns the bot type for the participant.\n     *\n     * @returns {string|undefined} - The bot type of the participant.\n     */\n    getBotType() {\n        return this._botType;\n    }\n\n    /**\n     * Sets the bot type for the participant.\n     * @param {String} newBotType - The new bot type to set.\n     */\n    setBotType(newBotType) {\n        this._botType = newBotType;\n    }\n}\n","/**\n * The events for the connection.\n */\n\n/**\n * Indicates that the connection has been disconnected. The event provides\n * the following parameters to its listeners:\n *\n * @param msg {string} a message associated with the disconnect such as the\n * last (known) error message\n */\nexport const CONNECTION_DISCONNECTED = 'connection.connectionDisconnected';\n\n/**\n * Indicates that the connection has been established. The event provides\n * the following parameters to its listeners:\n *\n * @param id {string} the ID of the local endpoint/participant/peer (within\n * the context of the established connection)\n */\nexport const CONNECTION_ESTABLISHED = 'connection.connectionEstablished';\n\n/**\n * Indicates that the connection has been failed for some reason. The event\n * provides the following parameters to its listeners:\n *\n * @param errType {JitsiConnectionErrors} the type of error associated with\n * the failure\n * @param errReason {string} the error (message) associated with the failure\n * @param credentials {object} the credentials used to connect (if any)\n * @param errReasonDetails {object} an optional object with details about\n * the error, like shard moving, suspending. Used for analytics purposes.\n */\nexport const CONNECTION_FAILED = 'connection.connectionFailed';\n\n/**\n * Indicates that the performed action cannot be executed because the\n * connection is not in the correct state(connected, disconnected, etc.)\n */\nexport const WRONG_STATE = 'connection.wrongState';\n\n/**\n * Indicates that the display name is required over this connection and need to be supplied when\n * joining the room.\n * There are cases like lobby room where display name is required.\n */\nexport const DISPLAY_NAME_REQUIRED = 'connection.display_name_required';\n","/**\n * The errors for the connection.\n */\n\n/**\n * Indicates that the connection was dropped with an error which was most likely\n * caused by some networking issues. The dropped term in this context means that\n * the connection was closed unexpectedly (not on user's request).\n *\n * One example is 'item-not-found' error thrown by Prosody when the BOSH session\n * times out after 60 seconds of inactivity. On the other hand 'item-not-found'\n * could also happen when BOSH request is sent to the server with the session-id\n * that is not know to the server. But this should not happen in lib-jitsi-meet\n * case as long as the service is configured correctly (there is no bug).\n */\nexport const CONNECTION_DROPPED_ERROR = 'connection.droppedError';\n\n/**\n * Not specified errors.\n */\nexport const OTHER_ERROR = 'connection.otherError';\n\n/**\n * Indicates that a password is required in order to join the conference.\n */\nexport const PASSWORD_REQUIRED = 'connection.passwordRequired';\n\n/**\n * Indicates that the connection was dropped, because of too many 5xx HTTP\n * errors on BOSH requests.\n */\nexport const SERVER_ERROR = 'connection.serverError';\n","\n/**\n * Promise-like object which can be passed around for resolving it later. It\n * implements the \"thenable\" interface, so it can be used wherever a Promise\n * could be used.\n *\n * In addition a \"reject on timeout\" functionality is provided.\n */\nexport default class Deferred {\n    /**\n     * Instantiates a Deferred object.\n     */\n    constructor() {\n        this.promise = new Promise((resolve, reject) => {\n            this.resolve = (...args) => {\n                this.clearRejectTimeout();\n                resolve(...args);\n            };\n            this.reject = (...args) => {\n                this.clearRejectTimeout();\n                reject(...args);\n            };\n        });\n        this.then = this.promise.then.bind(this.promise);\n        this.catch = this.promise.catch.bind(this.promise);\n    }\n\n    /**\n     * Clears the reject timeout.\n     */\n    clearRejectTimeout() {\n        clearTimeout(this._timeout);\n    }\n\n    /**\n     * Rejects the promise after the given timeout.\n     */\n    setRejectTimeout(ms) {\n        this._timeout = setTimeout(() => {\n            this.reject(new Error('timeout'));\n        }, ms);\n    }\n}\n","import EventEmitter from 'events';\n\n/**\n * The class implements basic event operations - add/remove listener.\n * NOTE: The purpose of the class is to be extended in order to add\n * this functionality to other classes.\n */\nexport default class Listenable {\n    /**\n     * Creates new instance.\n     * @param {EventEmitter} eventEmitter\n     * @constructor\n     */\n    constructor(eventEmitter = new EventEmitter()) {\n        this.eventEmitter = eventEmitter;\n\n        // aliases for addListener/removeListener\n        this.addEventListener = this.on = this.addListener;\n        this.removeEventListener = this.off = this.removeListener;\n    }\n\n    /**\n     * Adds new listener.\n     * @param {String} eventName the name of the event\n     * @param {Function} listener the listener.\n     * @returns {Function} - The unsubscribe function.\n     */\n    addListener(eventName, listener) {\n        this.eventEmitter.addListener(eventName, listener);\n\n        return () => this.removeEventListener(eventName, listener);\n    }\n\n    /**\n     * Removes listener.\n     * @param {String} eventName the name of the event that triggers the\n     * listener\n     * @param {Function} listener the listener.\n     */\n    removeListener(eventName, listener) {\n        this.eventEmitter.removeListener(eventName, listener);\n    }\n}\n","/* global RTCRtpScriptTransform */\n\nimport { getLogger } from '@jitsi/logger';\n\nconst logger = getLogger(__filename);\n\n// Flag to set on senders / receivers to avoid setting up the encryption transform\n// more than once.\nconst kJitsiE2EE = Symbol('kJitsiE2EE');\n\n/**\n * Context encapsulating the cryptography bits required for E2EE.\n * This uses the WebRTC Insertable Streams API which is explained in\n *   https://github.com/alvestrand/webrtc-media-streams/blob/master/explainer.md\n * that provides access to the encoded frames and allows them to be transformed.\n *\n * The encoded frame format is explained below in the _encodeFunction method.\n * High level design goals were:\n * - do not require changes to existing SFUs and retain (VP8) metadata.\n * - allow the SFU to rewrite SSRCs, timestamp, pictureId.\n * - allow for the key to be rotated frequently.\n */\nexport default class E2EEcontext {\n    /**\n     * Build a new E2EE context instance, which will be used in a given conference.\n     * @param {boolean} [options.sharedKey] - whether there is a uniques key shared amoung all participants.\n     */\n    constructor({ sharedKey } = {}) {\n        // Determine the URL for the worker script. Relative URLs are relative to\n        // the entry point, not the script that launches the worker.\n        let baseUrl = '';\n        const ljm = document.querySelector('script[src*=\"lib-jitsi-meet\"]');\n\n        if (ljm) {\n            const idx = ljm.src.lastIndexOf('/');\n\n            baseUrl = `${ljm.src.substring(0, idx)}/`;\n        }\n\n        let workerUrl = `${baseUrl}lib-jitsi-meet.e2ee-worker.js`;\n\n        // If there is no baseUrl then we create the worker in a normal way\n        // as you cant load scripts inside blobs from relative paths.\n        // See: https://www.html5rocks.com/en/tutorials/workers/basics/#toc-inlineworkers-loadingscripts\n        if (baseUrl && baseUrl !== '/') {\n            // Initialize the E2EE worker. In order to avoid CORS issues, start the worker and have it\n            // synchronously load the JS.\n            const workerBlob\n                = new Blob([ `importScripts(\"${workerUrl}\");` ], { type: 'application/javascript' });\n\n            workerUrl = window.URL.createObjectURL(workerBlob);\n        }\n\n        this._worker = new Worker(workerUrl, { name: 'E2EE Worker' });\n\n        this._worker.onerror = e => logger.error(e);\n\n        this._worker.postMessage({\n            operation: 'initialize',\n            sharedKey\n        });\n    }\n\n    /**\n     * Cleans up all state associated with the given participant. This is needed when a\n     * participant leaves the current conference.\n     *\n     * @param {string} participantId - The participant that just left.\n     */\n    cleanup(participantId) {\n        this._worker.postMessage({\n            operation: 'cleanup',\n            participantId\n        });\n    }\n\n    /**\n     * Cleans up all state associated with all participants in the conference. This is needed when disabling e2ee.\n     *\n     */\n    cleanupAll() {\n        this._worker.postMessage({\n            operation: 'cleanupAll'\n        });\n    }\n\n    /**\n     * Handles the given {@code RTCRtpReceiver} by creating a {@code TransformStream} which will inject\n     * a frame decoder.\n     *\n     * @param {RTCRtpReceiver} receiver - The receiver which will get the decoding function injected.\n     * @param {string} kind - The kind of track this receiver belongs to.\n     * @param {string} participantId - The participant id that this receiver belongs to.\n     */\n    handleReceiver(receiver, kind, participantId) {\n        if (receiver[kJitsiE2EE]) {\n            return;\n        }\n        receiver[kJitsiE2EE] = true;\n\n        if (window.RTCRtpScriptTransform) {\n            const options = {\n                operation: 'decode',\n                participantId\n            };\n\n            receiver.transform = new RTCRtpScriptTransform(this._worker, options);\n        } else {\n            const receiverStreams = receiver.createEncodedStreams();\n\n            this._worker.postMessage({\n                operation: 'decode',\n                readableStream: receiverStreams.readable,\n                writableStream: receiverStreams.writable,\n                participantId\n            }, [ receiverStreams.readable, receiverStreams.writable ]);\n        }\n    }\n\n    /**\n     * Handles the given {@code RTCRtpSender} by creating a {@code TransformStream} which will inject\n     * a frame encoder.\n     *\n     * @param {RTCRtpSender} sender - The sender which will get the encoding function injected.\n     * @param {string} kind - The kind of track this sender belongs to.\n     * @param {string} participantId - The participant id that this sender belongs to.\n     */\n    handleSender(sender, kind, participantId) {\n        if (sender[kJitsiE2EE]) {\n            return;\n        }\n        sender[kJitsiE2EE] = true;\n\n        if (window.RTCRtpScriptTransform) {\n            const options = {\n                operation: 'encode',\n                participantId\n            };\n\n            sender.transform = new RTCRtpScriptTransform(this._worker, options);\n        } else {\n            const senderStreams = sender.createEncodedStreams();\n\n            this._worker.postMessage({\n                operation: 'encode',\n                readableStream: senderStreams.readable,\n                writableStream: senderStreams.writable,\n                participantId\n            }, [ senderStreams.readable, senderStreams.writable ]);\n        }\n    }\n\n    /**\n     * Set the E2EE key for the specified participant.\n     *\n     * @param {string} participantId - the ID of the participant who's key we are setting.\n     * @param {Uint8Array | boolean} key - they key for the given participant.\n     * @param {Number} keyIndex - the key index.\n     */\n    setKey(participantId, key, keyIndex) {\n        this._worker.postMessage({\n            operation: 'setKey',\n            key,\n            keyIndex,\n            participantId\n        });\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport browser from '../browser';\nimport Deferred from '../util/Deferred';\nimport Listenable from '../util/Listenable';\n\nimport E2EEContext from './E2EEContext';\n\nconst logger = getLogger(__filename);\n\n/**\n * Abstract class that integrates {@link E2EEContext} with a key management system.\n */\nexport class KeyHandler extends Listenable {\n    /**\n     * Build a new KeyHandler instance, which will be used in a given conference.\n     * @param {JitsiConference} conference - the current conference.\n     * @param {object} options - the options passed to {E2EEContext}, see implemention.\n     */\n    constructor(conference, options = {}) {\n        super();\n\n        this.conference = conference;\n        this.e2eeCtx = new E2EEContext(options);\n\n        this.enabled = false;\n        this._enabling = undefined;\n\n        // Conference media events in order to attach the encryptor / decryptor.\n        // FIXME add events to TraceablePeerConnection which will allow to see when there's new receiver or sender\n        // added instead of shenanigans around conference track events and track muted.\n        //\n\n        this.conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n            this._onMediaSessionStarted.bind(this));\n        this.conference.on(\n            JitsiConferenceEvents.TRACK_ADDED,\n            track => track.isLocal() && this._onLocalTrackAdded(track));\n        this.conference.rtc.on(\n            RTCEvents.REMOTE_TRACK_ADDED,\n            (track, tpc) => this._setupReceiverE2EEForTrack(tpc, track));\n        this.conference.on(\n            JitsiConferenceEvents.TRACK_MUTE_CHANGED,\n            this._trackMuteChanged.bind(this));\n    }\n\n    /**\n     * Indicates whether E2EE is currently enabled or not.\n     *\n     * @returns {boolean}\n     */\n    isEnabled() {\n        return this.enabled;\n    }\n\n    /**\n     * Enables / disables End-To-End encryption.\n     *\n     * @param {boolean} enabled - whether E2EE should be enabled or not.\n     * @returns {void}\n     */\n    async setEnabled(enabled) {\n        if (enabled === this.enabled) {\n            return;\n        }\n\n        this._enabling && await this._enabling;\n\n        this._enabling = new Deferred();\n\n        this.enabled = enabled;\n\n        if (!enabled) {\n            this.e2eeCtx.cleanupAll();\n        }\n\n        this._setEnabled && await this._setEnabled(enabled);\n\n        this.conference.setLocalParticipantProperty('e2ee.enabled', enabled);\n\n        this.conference._restartMediaSessions();\n\n        this._enabling.resolve();\n    }\n\n    /**\n     * Sets the key for End-to-End encryption.\n     *\n     * @returns {void}\n     */\n    setEncryptionKey() {\n        throw new Error('Not implemented by subclass');\n    }\n\n    /**\n     * Setup E2EE on the new track that has been added to the conference, apply it on all the open peerconnections.\n     * @param {JitsiLocalTrack} track - the new track that's being added to the conference.\n     * @private\n     */\n    _onLocalTrackAdded(track) {\n        for (const session of this.conference._getMediaSessions()) {\n            this._setupSenderE2EEForTrack(session, track);\n        }\n    }\n\n    /**\n     * Setups E2E encryption for the new session.\n     * @param {JingleSessionPC} session - the new media session.\n     * @private\n     */\n    _onMediaSessionStarted(session) {\n        const localTracks = this.conference.getLocalTracks();\n\n        for (const track of localTracks) {\n            this._setupSenderE2EEForTrack(session, track);\n        }\n    }\n\n    /**\n     * Setup E2EE for the receiving side.\n     *\n     * @private\n     */\n    _setupReceiverE2EEForTrack(tpc, track) {\n        if (!this.enabled) {\n            return;\n        }\n\n        const receiver = tpc.findReceiverForTrack(track.track);\n\n        if (receiver) {\n            this.e2eeCtx.handleReceiver(receiver, track.getType(), track.getParticipantId());\n        } else {\n            logger.warn(`Could not handle E2EE for ${track}: receiver not found in: ${tpc}`);\n        }\n    }\n\n    /**\n     * Setup E2EE for the sending side.\n     *\n     * @param {JingleSessionPC} session - the session which sends the media produced by the track.\n     * @param {JitsiLocalTrack} track - the local track for which e2e encoder will be configured.\n     * @private\n     */\n    _setupSenderE2EEForTrack(session, track) {\n        if (!this.enabled) {\n            return;\n        }\n\n        const pc = session.peerconnection;\n        const sender = pc && pc.findSenderForTrack(track.track);\n\n        if (sender) {\n            this.e2eeCtx.handleSender(sender, track.getType(), track.getParticipantId());\n        } else {\n            logger.warn(`Could not handle E2EE for ${track}: sender not found in ${pc}`);\n        }\n    }\n\n    /**\n     * Setup E2EE on the sender that is created for the unmuted local video track.\n     * @param {JitsiLocalTrack} track - the track for which muted status has changed.\n     * @private\n     */\n    _trackMuteChanged(track) {\n        if (browser.doesVideoMuteByStreamRemove() && track.isLocal() && track.isVideoTrack() && !track.isMuted()) {\n            for (const session of this.conference._getMediaSessions()) {\n                this._setupSenderE2EEForTrack(session, track);\n            }\n        }\n    }\n}\n","import { KeyHandler } from './KeyHandler';\n\n/**\n * This module integrates {@link E2EEContext} with {external} in order to set the keys for encryption.\n */\nexport class ExternallyManagedKeyHandler extends KeyHandler {\n    /**\n     * Build a new ExternallyManagedKeyHandler instance, which will be used in a given conference.\n     * @param conference - the current conference.\n     */\n    constructor(conference) {\n        super(conference, { sharedKey: true });\n    }\n\n    /**\n     * Sets the key and index for End-to-End encryption.\n     *\n     * @param {CryptoKey} [keyInfo.encryptionKey] - encryption key.\n     * @param {Number} [keyInfo.index] - the index of the encryption key.\n     * @returns {void}\n     */\n    setKey(keyInfo) {\n        this.e2eeCtx.setKey(undefined, { encryptionKey: keyInfo.encryptionKey }, keyInfo.index);\n    }\n}\n","import uuid from './dist/index.js';\nexport const v1 = uuid.v1;\nexport const v3 = uuid.v3;\nexport const v4 = uuid.v4;\nexport const v5 = uuid.v5;\n","/* global Olm */\n\nimport { getLogger } from '@jitsi/logger';\nimport base64js from 'base64-js';\nimport isEqual from 'lodash.isequal';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport Deferred from '../util/Deferred';\nimport Listenable from '../util/Listenable';\nimport { FEATURE_E2EE, JITSI_MEET_MUC_TYPE } from '../xmpp/xmpp';\n\nconst logger = getLogger(__filename);\n\nconst REQ_TIMEOUT = 5 * 1000;\nconst OLM_MESSAGE_TYPE = 'olm';\nconst OLM_MESSAGE_TYPES = {\n    ERROR: 'error',\n    KEY_INFO: 'key-info',\n    KEY_INFO_ACK: 'key-info-ack',\n    SESSION_ACK: 'session-ack',\n    SESSION_INIT: 'session-init'\n};\n\nconst kOlmData = Symbol('OlmData');\n\nconst OlmAdapterEvents = {\n    OLM_ID_KEY_READY: 'olm.id_key_ready',\n    PARTICIPANT_E2EE_CHANNEL_READY: 'olm.participant_e2ee_channel_ready',\n    PARTICIPANT_KEY_UPDATED: 'olm.partitipant_key_updated'\n};\n\n/**\n * This class implements an End-to-End Encrypted communication channel between every two peers\n * in the conference. This channel uses libolm to achieve E2EE.\n *\n * The created channel is then used to exchange the secret key that each participant will use\n * to encrypt the actual media (see {@link E2EEContext}).\n *\n * A simple JSON message based protocol is implemented, which follows a request - response model:\n * - session-init: Initiates an olm session establishment procedure. This message will be sent\n *                 by the participant who just joined, to everyone else.\n * - session-ack: Completes the olm session etablishment. This messsage may contain ancilliary\n *                encrypted data, more specifically the sender's current key.\n * - key-info: Includes the sender's most up to date key information.\n * - key-info-ack: Acknowledges the reception of a key-info request. In addition, it may contain\n *                 the sender's key information, if available.\n * - error: Indicates a request processing error has occurred.\n *\n * These requessts and responses are transport independent. Currently they are sent using XMPP\n * MUC private messages.\n */\nexport class OlmAdapter extends Listenable {\n    /**\n     * Creates an adapter instance for the given conference.\n     */\n    constructor(conference) {\n        super();\n\n        this._conf = conference;\n        this._init = new Deferred();\n        this._key = undefined;\n        this._keyIndex = -1;\n        this._reqs = new Map();\n        this._sessionInitialization = undefined;\n\n        if (OlmAdapter.isSupported()) {\n            this._bootstrapOlm();\n\n            this._conf.on(JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED, this._onEndpointMessageReceived.bind(this));\n            this._conf.on(JitsiConferenceEvents.CONFERENCE_LEFT, this._onConferenceLeft.bind(this));\n            this._conf.on(JitsiConferenceEvents.USER_LEFT, this._onParticipantLeft.bind(this));\n            this._conf.on(JitsiConferenceEvents.PARTICIPANT_PROPERTY_CHANGED,\n                this._onParticipantPropertyChanged.bind(this));\n        } else {\n            this._init.reject(new Error('Olm not supported'));\n        }\n    }\n\n    /**\n     * Starts new olm sessions with every other participant that has the participantId \"smaller\" the localParticipantId.\n     */\n    async initSessions() {\n        if (this._sessionInitialization) {\n            throw new Error('OlmAdapter initSessions called multiple times');\n        } else {\n            this._sessionInitialization = new Deferred();\n\n            await this._init;\n\n            const promises = [];\n            const localParticipantId = this._conf.myUserId();\n\n            for (const participant of this._conf.getParticipants()) {\n                if (participant.hasFeature(FEATURE_E2EE) && localParticipantId < participant.getId()) {\n                    promises.push(this._sendSessionInit(participant));\n                }\n            }\n\n            await Promise.allSettled(promises);\n\n            // TODO: retry failed ones.\n\n            this._sessionInitialization.resolve();\n            this._sessionInitialization = undefined;\n        }\n    }\n\n    /**\n     * Indicates if olm is supported on the current platform.\n     *\n     * @returns {boolean}\n     */\n    static isSupported() {\n        return typeof window.Olm !== 'undefined';\n    }\n\n    /**\n     * Updates the current participant key and distributes it to all participants in the conference\n     * by sending a key-info message.\n     *\n     * @param {Uint8Array|boolean} key - The new key.\n     * @retrns {Promise<Number>}\n     */\n    async updateKey(key) {\n        // Store it locally for new sessions.\n        this._key = key;\n        this._keyIndex++;\n\n        // Broadcast it.\n        const promises = [];\n\n        for (const participant of this._conf.getParticipants()) {\n            const pId = participant.getId();\n            const olmData = this._getParticipantOlmData(participant);\n\n            // TODO: skip those who don't support E2EE.\n            if (!olmData.session) {\n                logger.warn(`Tried to send key to participant ${pId} but we have no session`);\n\n                // eslint-disable-next-line no-continue\n                continue;\n            }\n\n            const uuid = uuidv4();\n            const data = {\n                [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                olm: {\n                    type: OLM_MESSAGE_TYPES.KEY_INFO,\n                    data: {\n                        ciphertext: this._encryptKeyInfo(olmData.session),\n                        uuid\n                    }\n                }\n            };\n            const d = new Deferred();\n\n            d.setRejectTimeout(REQ_TIMEOUT);\n            d.catch(() => {\n                this._reqs.delete(uuid);\n            });\n            this._reqs.set(uuid, d);\n            promises.push(d);\n\n            this._sendMessage(data, pId);\n        }\n\n        await Promise.allSettled(promises);\n\n        // TODO: retry failed ones?\n\n        return this._keyIndex;\n    }\n\n    /**\n     * Updates the current participant key.\n     * @param {Uint8Array|boolean} key - The new key.\n     * @returns {number}\n    */\n    updateCurrentKey(key) {\n        this._key = key;\n\n        return this._keyIndex;\n    }\n\n    /**\n     * Frees the olmData session for the given participant.\n     *\n     */\n    clearParticipantSession(participant) {\n        const olmData = this._getParticipantOlmData(participant);\n\n        if (olmData.session) {\n            olmData.session.free();\n            olmData.session = undefined;\n        }\n    }\n\n\n    /**\n     * Frees the olmData sessions for all participants.\n     *\n     */\n    clearAllParticipantsSessions() {\n        for (const participant of this._conf.getParticipants()) {\n            this.clearParticipantSession(participant);\n        }\n    }\n\n    /**\n     * Internal helper to bootstrap the olm library.\n     *\n     * @returns {Promise<void>}\n     * @private\n     */\n    async _bootstrapOlm() {\n        logger.debug('Initializing Olm...');\n\n        try {\n            await Olm.init();\n\n            this._olmAccount = new Olm.Account();\n            this._olmAccount.create();\n\n            const idKeys = JSON.parse(this._olmAccount.identity_keys());\n\n            this._idKey = idKeys.curve25519;\n\n            logger.debug(`Olm ${Olm.get_library_version().join('.')} initialized`);\n            this._init.resolve();\n            this._onIdKeyReady(this._idKey);\n        } catch (e) {\n            logger.error('Failed to initialize Olm', e);\n            this._init.reject(e);\n        }\n\n    }\n\n    /**\n     * Publishes our own Olmn id key in presence.\n     * @private\n     */\n    _onIdKeyReady(idKey) {\n        logger.debug(`Olm id key ready: ${idKey}`);\n\n        // Publish it in presence.\n        this._conf.setLocalParticipantProperty('e2ee.idKey', idKey);\n    }\n\n    /**\n     * Event posted when the E2EE signalling channel has been established with the given participant.\n     * @private\n     */\n    _onParticipantE2EEChannelReady(id) {\n        logger.debug(`E2EE channel with participant ${id} is ready`);\n    }\n\n    /**\n     * Internal helper for encrypting the current key information for a given participant.\n     *\n     * @param {Olm.Session} session - Participant's session.\n     * @returns {string} - The encrypted text with the key information.\n     * @private\n     */\n    _encryptKeyInfo(session) {\n        const keyInfo = {};\n\n        if (this._key !== undefined) {\n            keyInfo.key = this._key ? base64js.fromByteArray(this._key) : false;\n            keyInfo.keyIndex = this._keyIndex;\n        }\n\n        return session.encrypt(JSON.stringify(keyInfo));\n    }\n\n    /**\n     * Internal helper for getting the olm related data associated with a participant.\n     *\n     * @param {JitsiParticipant} participant - Participant whose data wants to be extracted.\n     * @returns {Object}\n     * @private\n     */\n    _getParticipantOlmData(participant) {\n        participant[kOlmData] = participant[kOlmData] || {};\n\n        return participant[kOlmData];\n    }\n\n    /**\n     * Handles leaving the conference, cleaning up olm sessions.\n     *\n     * @private\n     */\n    async _onConferenceLeft() {\n        logger.debug('Conference left');\n\n        await this._init;\n\n        for (const participant of this._conf.getParticipants()) {\n            this._onParticipantLeft(participant.getId(), participant);\n        }\n\n        if (this._olmAccount) {\n            this._olmAccount.free();\n            this._olmAccount = undefined;\n        }\n    }\n\n    /**\n     * Main message handler. Handles 1-to-1 messages received from other participants\n     * and send the appropriate replies.\n     *\n     * @private\n     */\n    async _onEndpointMessageReceived(participant, payload) {\n        if (payload[JITSI_MEET_MUC_TYPE] !== OLM_MESSAGE_TYPE) {\n            return;\n        }\n\n        if (!payload.olm) {\n            logger.warn('Incorrectly formatted message');\n\n            return;\n        }\n\n        await this._init;\n\n        const msg = payload.olm;\n        const pId = participant.getId();\n        const olmData = this._getParticipantOlmData(participant);\n\n        switch (msg.type) {\n        case OLM_MESSAGE_TYPES.SESSION_INIT: {\n            if (olmData.session) {\n                logger.warn(`Participant ${pId} already has a session`);\n\n                this._sendError(participant, 'Session already established');\n            } else {\n                // Create a session for communicating with this participant.\n\n                const session = new Olm.Session();\n\n                session.create_outbound(this._olmAccount, msg.data.idKey, msg.data.otKey);\n                olmData.session = session;\n\n                // Send ACK\n                const ack = {\n                    [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                    olm: {\n                        type: OLM_MESSAGE_TYPES.SESSION_ACK,\n                        data: {\n                            ciphertext: this._encryptKeyInfo(session),\n                            uuid: msg.data.uuid\n                        }\n                    }\n                };\n\n                this._sendMessage(ack, pId);\n                this._onParticipantE2EEChannelReady(pId);\n            }\n            break;\n        }\n        case OLM_MESSAGE_TYPES.SESSION_ACK: {\n            if (olmData.session) {\n                logger.warn(`Participant ${pId} already has a session`);\n\n                this._sendError(participant, 'No session found');\n            } else if (msg.data.uuid === olmData.pendingSessionUuid) {\n                const { ciphertext } = msg.data;\n                const d = this._reqs.get(msg.data.uuid);\n                const session = new Olm.Session();\n\n                session.create_inbound(this._olmAccount, ciphertext.body);\n\n                // Remove OT keys that have been used to setup this session.\n                this._olmAccount.remove_one_time_keys(session);\n\n                // Decrypt first message.\n                const data = session.decrypt(ciphertext.type, ciphertext.body);\n\n                olmData.session = session;\n                olmData.pendingSessionUuid = undefined;\n\n                this._onParticipantE2EEChannelReady(pId);\n\n                this._reqs.delete(msg.data.uuid);\n                d.resolve();\n\n                const json = safeJsonParse(data);\n\n                if (json.key) {\n                    const key = base64js.toByteArray(json.key);\n                    const keyIndex = json.keyIndex;\n\n                    olmData.lastKey = key;\n                    this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_KEY_UPDATED, pId, key, keyIndex);\n                }\n            } else {\n                logger.warn('Received ACK with the wrong UUID');\n\n                this._sendError(participant, 'Invalid UUID');\n            }\n            break;\n        }\n        case OLM_MESSAGE_TYPES.ERROR: {\n            logger.error(msg.data.error);\n\n            break;\n        }\n        case OLM_MESSAGE_TYPES.KEY_INFO: {\n            if (olmData.session) {\n                const { ciphertext } = msg.data;\n                const data = olmData.session.decrypt(ciphertext.type, ciphertext.body);\n                const json = safeJsonParse(data);\n\n                if (json.key !== undefined && json.keyIndex !== undefined) {\n                    const key = json.key ? base64js.toByteArray(json.key) : false;\n                    const keyIndex = json.keyIndex;\n\n                    if (!isEqual(olmData.lastKey, key)) {\n                        olmData.lastKey = key;\n                        this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_KEY_UPDATED, pId, key, keyIndex);\n                    }\n\n                    // Send ACK.\n                    const ack = {\n                        [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                        olm: {\n                            type: OLM_MESSAGE_TYPES.KEY_INFO_ACK,\n                            data: {\n                                ciphertext: this._encryptKeyInfo(olmData.session),\n                                uuid: msg.data.uuid\n                            }\n                        }\n                    };\n\n                    this._sendMessage(ack, pId);\n                }\n            } else {\n                logger.debug(`Received key info message from ${pId} but we have no session for them!`);\n\n                this._sendError(participant, 'No session found while processing key-info');\n            }\n            break;\n        }\n        case OLM_MESSAGE_TYPES.KEY_INFO_ACK: {\n            if (olmData.session) {\n                const { ciphertext } = msg.data;\n                const data = olmData.session.decrypt(ciphertext.type, ciphertext.body);\n                const json = safeJsonParse(data);\n\n                if (json.key !== undefined && json.keyIndex !== undefined) {\n                    const key = json.key ? base64js.toByteArray(json.key) : false;\n                    const keyIndex = json.keyIndex;\n\n                    if (!isEqual(olmData.lastKey, key)) {\n                        olmData.lastKey = key;\n                        this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_KEY_UPDATED, pId, key, keyIndex);\n                    }\n                }\n\n                const d = this._reqs.get(msg.data.uuid);\n\n                this._reqs.delete(msg.data.uuid);\n                d.resolve();\n            } else {\n                logger.debug(`Received key info ack message from ${pId} but we have no session for them!`);\n\n                this._sendError(participant, 'No session found while processing key-info-ack');\n            }\n            break;\n        }\n        }\n    }\n\n    /**\n     * Handles a participant leaving. When a participant leaves their olm session is destroyed.\n     *\n     * @private\n     */\n    _onParticipantLeft(id, participant) {\n        logger.debug(`Participant ${id} left`);\n\n        this.clearParticipantSession(participant);\n    }\n\n    /**\n    * Handles an update in a participant's presence property.\n    *\n    * @param {JitsiParticipant} participant - The participant.\n    * @param {string} name - The name of the property that changed.\n    * @param {*} oldValue - The property's previous value.\n    * @param {*} newValue - The property's new value.\n    * @private\n    */\n    async _onParticipantPropertyChanged(participant, name, oldValue, newValue) {\n        switch (name) {\n        case 'e2ee.enabled':\n            if (newValue && this._conf.isE2EEEnabled()) {\n                const localParticipantId = this._conf.myUserId();\n                const participantId = participant.getId();\n                const participantFeatures = await participant.getFeatures();\n\n                if (participantFeatures.has(FEATURE_E2EE) && localParticipantId < participantId) {\n                    if (this._sessionInitialization) {\n                        await this._sessionInitialization;\n                    }\n                    await this._sendSessionInit(participant);\n\n                    const olmData = this._getParticipantOlmData(participant);\n                    const uuid = uuidv4();\n                    const data = {\n                        [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                        olm: {\n                            type: OLM_MESSAGE_TYPES.KEY_INFO,\n                            data: {\n                                ciphertext: this._encryptKeyInfo(olmData.session),\n                                uuid\n                            }\n                        }\n                    };\n\n                    this._sendMessage(data, participantId);\n                }\n            }\n            break;\n        }\n    }\n\n    /**\n     * Builds and sends an error message to the target participant.\n     *\n     * @param {JitsiParticipant} participant - The target participant.\n     * @param {string} error - The error message.\n     * @returns {void}\n     */\n    _sendError(participant, error) {\n        const pId = participant.getId();\n        const err = {\n            [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n            olm: {\n                type: OLM_MESSAGE_TYPES.ERROR,\n                data: {\n                    error\n                }\n            }\n        };\n\n        this._sendMessage(err, pId);\n    }\n\n    /**\n     * Internal helper to send the given object to the given participant ID.\n     * This function merely exists so the transport can be easily swapped.\n     * Currently messages are transmitted via XMPP MUC private messages.\n     *\n     * @param {object} data - The data that will be sent to the target participant.\n     * @param {string} participantId - ID of the target participant.\n     */\n    _sendMessage(data, participantId) {\n        this._conf.sendMessage(data, participantId);\n    }\n\n    /**\n     * Builds and sends the session-init request to the target participant.\n     *\n     * @param {JitsiParticipant} participant - Participant to whom we'll send the request.\n     * @returns {Promise} - The promise will be resolved when the session-ack is received.\n     * @private\n     */\n    _sendSessionInit(participant) {\n        const pId = participant.getId();\n        const olmData = this._getParticipantOlmData(participant);\n\n        if (olmData.session) {\n            logger.warn(`Tried to send session-init to ${pId} but we already have a session`);\n\n            return Promise.reject();\n        }\n\n        if (olmData.pendingSessionUuid !== undefined) {\n            logger.warn(`Tried to send session-init to ${pId} but we already have a pending session`);\n\n            return Promise.reject();\n        }\n\n        // Generate a One Time Key.\n        this._olmAccount.generate_one_time_keys(1);\n\n        const otKeys = JSON.parse(this._olmAccount.one_time_keys());\n        const otKey = Object.values(otKeys.curve25519)[0];\n\n        if (!otKey) {\n            return Promise.reject(new Error('No one-time-keys generated'));\n        }\n\n        // Mark the OT keys (one really) as published so they are not reused.\n        this._olmAccount.mark_keys_as_published();\n\n        const uuid = uuidv4();\n        const init = {\n            [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n            olm: {\n                type: OLM_MESSAGE_TYPES.SESSION_INIT,\n                data: {\n                    idKey: this._idKey,\n                    otKey,\n                    uuid\n                }\n            }\n        };\n\n        const d = new Deferred();\n\n        d.setRejectTimeout(REQ_TIMEOUT);\n        d.catch(() => {\n            this._reqs.delete(uuid);\n            olmData.pendingSessionUuid = undefined;\n        });\n        this._reqs.set(uuid, d);\n\n        this._sendMessage(init, pId);\n\n        // Store the UUID for matching with the ACK.\n        olmData.pendingSessionUuid = uuid;\n\n        return d;\n    }\n}\n\n/**\n * Helper to ensure JSON parsing always returns an object.\n *\n * @param {string} data - The data that needs to be parsed.\n * @returns {object} - Parsed data or empty object in case of failure.\n */\nfunction safeJsonParse(data) {\n    try {\n        return JSON.parse(data);\n    } catch (e) {\n        return {};\n    }\n}\n\nOlmAdapter.events = OlmAdapterEvents;\n","import { getLogger } from '@jitsi/logger';\nimport debounce from 'lodash.debounce';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nimport { KeyHandler } from './KeyHandler';\nimport { OlmAdapter } from './OlmAdapter';\nimport { importKey, ratchet } from './crypto-utils';\n\nconst logger = getLogger(__filename);\n\n// Period which we'll wait before updating / rotating our keys when a participant\n// joins or leaves.\nconst DEBOUNCE_PERIOD = 5000;\n\n/**\n * This module integrates {@link E2EEContext} with {@link OlmAdapter} in order to distribute the keys for encryption.\n */\nexport class ManagedKeyHandler extends KeyHandler {\n    /**\n     * Build a new AutomaticKeyHandler instance, which will be used in a given conference.\n     */\n    constructor(conference) {\n        super(conference);\n\n        this._key = undefined;\n        this._conferenceJoined = false;\n\n        this._olmAdapter = new OlmAdapter(conference);\n\n        this._rotateKey = debounce(this._rotateKeyImpl, DEBOUNCE_PERIOD);\n        this._ratchetKey = debounce(this._ratchetKeyImpl, DEBOUNCE_PERIOD);\n\n        // Olm signalling events.\n        this._olmAdapter.on(\n            OlmAdapter.events.PARTICIPANT_KEY_UPDATED,\n            this._onParticipantKeyUpdated.bind(this));\n\n        this.conference.on(\n            JitsiConferenceEvents.PARTICIPANT_PROPERTY_CHANGED,\n            this._onParticipantPropertyChanged.bind(this));\n        this.conference.on(\n            JitsiConferenceEvents.USER_JOINED,\n            this._onParticipantJoined.bind(this));\n        this.conference.on(\n            JitsiConferenceEvents.USER_LEFT,\n            this._onParticipantLeft.bind(this));\n        this.conference.on(\n                JitsiConferenceEvents.CONFERENCE_JOINED,\n                () => {\n                    this._conferenceJoined = true;\n                });\n    }\n\n    /**\n     * When E2EE is enabled it initializes sessions and sets the key.\n     * Cleans up the sessions when disabled.\n     *\n     * @param {boolean} enabled - whether E2EE should be enabled or not.\n     * @returns {void}\n     */\n    async _setEnabled(enabled) {\n        if (enabled) {\n            await this._olmAdapter.initSessions();\n        } else {\n            this._olmAdapter.clearAllParticipantsSessions();\n        }\n\n        // Generate a random key in case we are enabling.\n        this._key = enabled ? this._generateKey() : false;\n\n        // Send it to others using the E2EE olm channel.\n        const index = await this._olmAdapter.updateKey(this._key);\n\n        // Set our key so we begin encrypting.\n        this.e2eeCtx.setKey(this.conference.myUserId(), this._key, index);\n    }\n\n    /**\n     * Handles an update in a participant's presence property.\n     *\n     * @param {JitsiParticipant} participant - The participant.\n     * @param {string} name - The name of the property that changed.\n     * @param {*} oldValue - The property's previous value.\n     * @param {*} newValue - The property's new value.\n     * @private\n     */\n    async _onParticipantPropertyChanged(participant, name, oldValue, newValue) {\n        switch (name) {\n        case 'e2ee.idKey':\n            logger.debug(`Participant ${participant.getId()} updated their id key: ${newValue}`);\n            break;\n        case 'e2ee.enabled':\n            if (!newValue && this.enabled) {\n                this._olmAdapter.clearParticipantSession(participant);\n            }\n            break;\n        }\n    }\n\n    /**\n     * Advances (using ratcheting) the current key when a new participant joins the conference.\n     * @private\n     */\n    _onParticipantJoined() {\n        if (this._conferenceJoined && this.enabled) {\n            this._ratchetKey();\n        }\n    }\n\n    /**\n     * Rotates the current key when a participant leaves the conference.\n     * @private\n     */\n    _onParticipantLeft(id) {\n        this.e2eeCtx.cleanup(id);\n\n        if (this.enabled) {\n            this._rotateKey();\n        }\n    }\n\n    /**\n     * Rotates the local key. Rotating the key implies creating a new one, then distributing it\n     * to all participants and once they all received it, start using it.\n     *\n     * @private\n     */\n    async _rotateKeyImpl() {\n        logger.debug('Rotating key');\n\n        this._key = this._generateKey();\n        const index = await this._olmAdapter.updateKey(this._key);\n\n        this.e2eeCtx.setKey(this.conference.myUserId(), this._key, index);\n    }\n\n    /**\n     * Advances the current key by using ratcheting.\n     *\n     * @private\n     */\n    async _ratchetKeyImpl() {\n        logger.debug('Ratchetting key');\n\n        const material = await importKey(this._key);\n        const newKey = await ratchet(material);\n\n        this._key = new Uint8Array(newKey);\n\n        const index = this._olmAdapter.updateCurrentKey(this._key);\n\n        this.e2eeCtx.setKey(this.conference.myUserId(), this._key, index);\n    }\n\n    /**\n     * Handles an update in a participant's key.\n     *\n     * @param {string} id - The participant ID.\n     * @param {Uint8Array | boolean} key - The new key for the participant.\n     * @param {Number} index - The new key's index.\n     * @private\n     */\n    _onParticipantKeyUpdated(id, key, index) {\n        logger.debug(`Participant ${id} updated their key`);\n\n        this.e2eeCtx.setKey(id, key, index);\n    }\n\n    /**\n     * Generates a new 256 bit random key.\n     *\n     * @returns {Uint8Array}\n     * @private\n     */\n    _generateKey() {\n        return window.crypto.getRandomValues(new Uint8Array(32));\n    }\n}\n","/**\n * Derives a set of keys from the master key.\n * @param {CryptoKey} material - master key to derive from\n *\n * See https://tools.ietf.org/html/draft-omara-sframe-00#section-4.3.1\n */\nexport async function deriveKeys(material) {\n    const info = new ArrayBuffer();\n    const textEncoder = new TextEncoder();\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/deriveKey#HKDF\n    // https://developer.mozilla.org/en-US/docs/Web/API/HkdfParams\n    const encryptionKey = await crypto.subtle.deriveKey({\n        name: 'HKDF',\n        salt: textEncoder.encode('JFrameEncryptionKey'),\n        hash: 'SHA-256',\n        info\n    }, material, {\n        name: 'AES-GCM',\n        length: 128\n    }, false, [ 'encrypt', 'decrypt' ]);\n\n    return {\n        material,\n        encryptionKey\n    };\n}\n\n/**\n * Ratchets a key. See\n * https://tools.ietf.org/html/draft-omara-sframe-00#section-4.3.5.1\n * @param {CryptoKey} material - base key material\n * @returns {ArrayBuffer} - ratcheted key material\n */\nexport async function ratchet(material) {\n    const textEncoder = new TextEncoder();\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/deriveBits\n    return crypto.subtle.deriveBits({\n        name: 'HKDF',\n        salt: textEncoder.encode('JFrameRatchetKey'),\n        hash: 'SHA-256',\n        info: new ArrayBuffer()\n    }, material, 256);\n}\n\n/**\n * Converts a raw key into a WebCrypto key object with default options\n * suitable for our usage.\n * @param {ArrayBuffer} keyBytes - raw key\n * @param {Array} keyUsages - key usages, see importKey documentation\n * @returns {CryptoKey} - the WebCrypto key.\n */\nexport async function importKey(keyBytes) {\n    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey\n    return crypto.subtle.importKey('raw', keyBytes, 'HKDF', false, [ 'deriveBits', 'deriveKey' ]);\n}\n","import browser from '../browser';\n\nimport { ExternallyManagedKeyHandler } from './ExternallyManagedKeyHandler';\nimport { ManagedKeyHandler } from './ManagedKeyHandler';\nimport { OlmAdapter } from './OlmAdapter';\n\n/**\n * This module integrates {@link KeyHandler} with {@link JitsiConference} in order to enable E2E encryption.\n */\nexport class E2EEncryption {\n    /**\n     * A constructor.\n     * @param {JitsiConference} conference - The conference instance for which E2E encryption is to be enabled.\n     */\n    constructor(conference) {\n        const { e2ee = {} } = conference.options.config;\n\n        this._externallyManaged = e2ee.externallyManagedKey;\n\n        if (this._externallyManaged) {\n            this._keyHandler = new ExternallyManagedKeyHandler(conference);\n        } else {\n            this._keyHandler = new ManagedKeyHandler(conference);\n        }\n    }\n\n    /**\n     * Indicates if E2EE is supported in the current platform.\n     *\n     * @param {object} config - Global configuration.\n     * @returns {boolean}\n     */\n    static isSupported(config) {\n        const { e2ee = {} } = config;\n\n        if (!e2ee.externallyManagedKey && !OlmAdapter.isSupported()) {\n            return false;\n        }\n\n        return !(config.testing && config.testing.disableE2EE)\n            && (browser.supportsInsertableStreams()\n                || (config.enableEncodedTransformSupport && browser.supportsEncodedTransform()));\n    }\n\n    /**\n     * Indicates whether E2EE is currently enabled or not.\n     *\n     * @returns {boolean}\n     */\n    isEnabled() {\n        return this._keyHandler.isEnabled();\n    }\n\n    /**\n     * Enables / disables End-To-End encryption.\n     *\n     * @param {boolean} enabled - whether E2EE should be enabled or not.\n     * @returns {void}\n     */\n    async setEnabled(enabled) {\n        await this._keyHandler.setEnabled(enabled);\n    }\n\n    /**\n     * Sets the key and index for End-to-End encryption.\n     *\n     * @param {CryptoKey} [keyInfo.encryptionKey] - encryption key.\n     * @param {Number} [keyInfo.index] - the index of the encryption key.\n     * @returns {void}\n     */\n    setEncryptionKey(keyInfo) {\n        this._keyHandler.setKey(keyInfo);\n    }\n}\n","/* global $ */\n\nimport { b64_sha1, Strophe } from 'strophe.js'; // eslint-disable-line camelcase\n\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport Listenable from '../util/Listenable';\n\n/**\n * The property\n */\nconst IDENTITY_PROPERTIES = [ 'category', 'type', 'lang', 'name' ];\nconst IDENTITY_PROPERTIES_FOR_COMPARE = [ 'category', 'type', 'lang' ];\nconst HASH = 'sha-1';\n\n/**\n *\n * @param a\n * @param b\n */\nfunction compareIdentities(a, b) {\n    let res = 0;\n\n    IDENTITY_PROPERTIES_FOR_COMPARE.some(key =>\n        (res = ((a[key] > b[key]) && 1) || ((a[key] < b[key]) && -1)) !== 0\n    );\n\n    return res;\n}\n\n/**\n * Produces a sha-1 from provided identity and features values.\n *\n * @param {Array<Object>} identities - The identity objects.\n * @param {Array<string>} features - The features.\n * @returns {string}\n */\nfunction generateSha(identities, features) {\n    const sortedIdentities = identities.sort(compareIdentities).reduce(\n        (accumulatedValue, identity) => `${\n            IDENTITY_PROPERTIES.reduce(\n                (tmp, key, idx) =>\n                    tmp\n                        + (idx === 0 ? '' : '/')\n                        + (identity[key] ? identity[key] : ''),\n                '')\n        }<`, '');\n    const sortedFeatures = features.sort().reduce(\n        (tmp, feature) => `${tmp + feature}<`, '');\n\n    return b64_sha1(sortedIdentities + sortedFeatures);\n}\n\n/**\n * Parses the disco-info node and returns the sets of features and identities.\n * @param {String} node The node with results to parse.\n * @returns {{features: Set<any>, identities: Set<any>}}\n */\nexport function parseDiscoInfo(node) {\n    const features = new Set();\n    const identities = new Set();\n\n    $(node).find('>query>feature')\n        .each((_, el) => features.add(el.getAttribute('var')));\n    $(node).find('>query>identity')\n        .each((_, el) => identities.add({\n            type: el.getAttribute('type'),\n            name: el.getAttribute('name'),\n            category: el.getAttribute('category')\n        }));\n\n    return {\n        features,\n        identities\n    };\n}\n\n/**\n * Implements xep-0115 ( http://xmpp.org/extensions/xep-0115.html )\n */\nexport default class Caps extends Listenable {\n    /**\n     * Constructs new Caps instance.\n     * @param {Strophe.Connection} connection the strophe connection object\n     * @param {String} node the value of the node attribute of the \"c\" xml node\n     * that will be sent to the other participants\n     */\n    constructor(connection = {}, node = 'http://jitsi.org/jitsimeet') {\n        super();\n        this.node = node;\n        this.disco = connection.disco;\n        if (!this.disco) {\n            throw new Error(\n                'Missing strophe-plugins '\n                + '(disco plugin is required)!');\n        }\n\n        this.version = '';\n        this.rooms = new Set();\n\n        // We keep track of features added outside the library and we publish them\n        // in the presence of the participant for simplicity, avoiding the disco info request-response.\n        this.externalFeatures = new Set();\n\n        const emuc = connection.emuc;\n\n        emuc.addListener(XMPPEvents.EMUC_ROOM_ADDED,\n            room => this._addChatRoom(room));\n        emuc.addListener(XMPPEvents.EMUC_ROOM_REMOVED,\n            room => this._removeChatRoom(room));\n        Object.keys(emuc.rooms).forEach(jid => {\n            this._addChatRoom(emuc.rooms[jid]);\n        });\n\n        Strophe.addNamespace('CAPS', 'http://jabber.org/protocol/caps');\n        this.disco.addFeature(Strophe.NS.CAPS);\n    }\n\n    /**\n     * Adds new feature to the list of supported features for the local\n     * participant\n     * @param {String} feature the name of the feature.\n     * @param {boolean} submit if true - new presence with updated \"c\" node\n     * will be sent.\n     * @param {boolean} external whether this feature was added externally to the library.\n     * We put features used directly by the clients (is jibri, remote-control enabled etc.) in the presence\n     * to avoid additional disco-info queries by those clients.\n     */\n    addFeature(feature, submit = false, external = false) {\n        this.disco.addFeature(feature);\n        this._generateVersion();\n\n        if (external && !this.externalFeatures.has(feature)) {\n            this.externalFeatures.add(feature);\n            this.rooms.forEach(room => this._updateRoomWithExternalFeatures(room));\n        }\n\n        if (submit) {\n            this.submit();\n        }\n    }\n\n    /**\n     * Removes a feature from the list of supported features for the local\n     * participant\n     * @param {String} feature the name of the feature.\n     * @param {boolean} submit if true - new presence with updated \"c\" node\n     * will be sent.\n     * @param {boolean} external whether this feature was added externally to the library.\n     */\n    removeFeature(feature, submit = false, external = false) {\n        this.disco.removeFeature(feature);\n        this._generateVersion();\n\n        if (external && this.externalFeatures.has(feature)) {\n            this.externalFeatures.delete(feature);\n            this.rooms.forEach(room => this._updateRoomWithExternalFeatures(room));\n        }\n\n        if (submit) {\n            this.submit();\n        }\n    }\n\n    /**\n     * Sends new presence stanza for every room from the list of rooms.\n     */\n    submit() {\n        this.rooms.forEach(room => room.sendPresence());\n    }\n\n    /**\n     * Updates the presences in the room based on the current values in externalFeatures.\n     * @param {ChatRoom} room the room to update.\n     * @private\n     */\n    _updateRoomWithExternalFeatures(room) {\n        if (this.externalFeatures.size === 0) {\n            room.removeFromPresence('features');\n        } else {\n            const children = [];\n\n            this.externalFeatures.forEach(f => {\n                children.push({\n                    'tagName': 'feature',\n                    attributes: { 'var': f }\n                });\n            });\n\n            room.addOrReplaceInPresence('features', { children });\n        }\n    }\n\n    /**\n     * Returns a set with the features for a host.\n     * @param {String} jid the jid of the host\n     * @param {int} timeout the timeout in ms for reply from the host.\n     * @returns {Promise<Set<String>, Error>}\n     */\n    getFeaturesAndIdentities(jid, node, timeout = 5000) {\n        return this._getDiscoInfo(jid, node, timeout);\n    }\n\n    /**\n     * Returns a set with the features and identities for a host.\n     * @param {String} jid the jid of the host\n     * @param {String|null} node the node to query\n     * @param {int} timeout the timeout in ms for reply from the host.\n     * @returns {Promise<Object>}\n     * @private\n     */\n    _getDiscoInfo(jid, node, timeout) {\n        return new Promise((resolve, reject) =>\n            this.disco.info(jid, node, response => {\n                resolve(parseDiscoInfo(response));\n            }, reject, timeout)\n        );\n    }\n\n    /**\n     * Adds ChatRoom instance to the list of rooms. Adds listeners to the room\n     * and adds \"c\" element to the presences of the room.\n     * @param {ChatRoom} room the room.\n     */\n    _addChatRoom(room) {\n        this.rooms.add(room);\n        this._fixChatRoomPresenceMap(room);\n\n        this._updateRoomWithExternalFeatures(room);\n    }\n\n    /**\n     * Removes ChatRoom instance from the list of rooms. Removes listeners\n     * added from the Caps class.\n     * @param {ChatRoom} room the room.\n     */\n    _removeChatRoom(room) {\n        this.rooms.delete(room);\n    }\n\n    /**\n     * Creates/updates the \"c\" xml node into the presence of the passed room.\n     * @param {ChatRoom} room the room.\n     */\n    _fixChatRoomPresenceMap(room) {\n        room.addOrReplaceInPresence('c', {\n            attributes: {\n                xmlns: Strophe.NS.CAPS,\n                hash: HASH,\n                node: this.node,\n                ver: this.version\n            }\n        });\n    }\n\n    /**\n     * Handles this.version changes.\n     */\n    _notifyVersionChanged() {\n        // update the version for all rooms\n        this.rooms.forEach(room => this._fixChatRoomPresenceMap(room));\n    }\n\n    /**\n     * Generates the value for the \"ver\" attribute.\n     */\n    _generateVersion() {\n        this.version\n            = generateSha(this.disco._identities, this.disco._features);\n\n        this._notifyVersionChanged();\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport Listenable from '../util/Listenable';\n\nexport const NETWORK_INFO_EVENT = 'NETWORK_INFO_CHANGED';\n\nconst logger = getLogger(__filename);\n\n/**\n * Module provides information about the current status of the internet\n * connection. Lib-jitsi-meet doesn't have any logic for detecting internet\n * online/offline, but rather it relies on the information supplied by the app\n * that uses it. By default the online state is assumed and the lib acts as if\n * it was connected. See {@link JitsiMeetJS.setNetworkInfo}.\n */\nexport class NetworkInfo extends Listenable {\n    /**\n     * Creates new {@link NetworkInfo} instance.\n     */\n    constructor() {\n        super();\n        this._current = {\n            isOnline: true\n        };\n    }\n\n    /**\n     * Updates the network info state.\n     * @param {boolean} isOnline - {@code true} if internet is online or {@code false} otherwise.\n     */\n    updateNetworkInfo({ isOnline }) {\n        logger.debug('updateNetworkInfo', { isOnline });\n        this._current = {\n            isOnline: isOnline === true\n        };\n        this.eventEmitter.emit(NETWORK_INFO_EVENT, this._current);\n    }\n\n    /**\n     * Returns the online/offline internet status. By default the value is {@code true} and changes only if\n     * the lib's user wires the state through {@link JitsiMeetJS.setNetworkInfo} like the jitsi-meet does. Because of\n     * that any logic should still assume that the internet may be offline and should handle the failure gracefully.\n     * It's only a good hint in the other way around: to pause internet operations until it comes back online.\n     * @returns {boolean}\n     */\n    isOnline() {\n        return this._current.isOnline === true;\n    }\n}\n\nconst networkInfo = new NetworkInfo();\n\nexport default networkInfo;\n","import { getLogger } from '@jitsi/logger';\n\nimport {\n    default as NetworkInfo,\n    NETWORK_INFO_EVENT\n} from '../connectivity/NetworkInfo';\nimport { getJitterDelay } from '../util/Retry';\n\nconst logger = getLogger(__filename);\n\n/**\n * The class contains the logic for triggering connection resume via XEP-0198 stream management.\n * It does two things, the first one is it tracks the internet online/offline status and it makes sure that\n * the reconnect is attempted only while online. The seconds thing is that it tracks the retry attempts and extends\n * the retry interval using the full jitter pattern.\n */\nexport default class ResumeTask {\n    /**\n     * Initializes new {@code RetryTask}.\n     * @param {Strophe.Connection} stropheConnection - The Strophe connection instance.\n     */\n    constructor(stropheConnection) {\n        this._stropheConn = stropheConnection;\n\n        /**\n         * The counter increased before each resume retry attempt, used to calculate exponential backoff.\n         * @type {number}\n         * @private\n         */\n        this._resumeRetryN = 0;\n\n        this._retryDelay = undefined;\n    }\n\n    /**\n     * @returns {number|undefined} - How much the app will wait before trying to resume the XMPP connection. When\n     * 'undefined' it means that no resume task was not scheduled.\n     */\n    get retryDelay() {\n        return this._retryDelay;\n    }\n\n    /**\n     * Called by {@link XmppConnection} when the connection drops and it's a signal it wants to schedule a reconnect.\n     *\n     * @returns {void}\n     */\n    schedule() {\n        this._cancelResume();\n\n        this._resumeRetryN += 1;\n\n        this._networkOnlineListener\n            = NetworkInfo.addEventListener(\n                NETWORK_INFO_EVENT,\n                ({ isOnline }) => {\n                    if (isOnline) {\n                        this._scheduleResume();\n                    } else {\n                        this._cancelResume();\n                    }\n                });\n\n        NetworkInfo.isOnline() && this._scheduleResume();\n    }\n\n    /**\n     * Schedules a delayed timeout which will execute the resume action.\n     * @private\n     * @returns {void}\n     */\n    _scheduleResume() {\n        if (this._resumeTimeout) {\n\n            // NO-OP\n            return;\n        }\n\n        // The retry delay will be:\n        //   1st retry: 1.5s - 3s\n        //   2nd retry: 3s - 9s\n        //   3rd and next retry: 4.5s - 27s\n        this._resumeRetryN = Math.min(3, this._resumeRetryN);\n        this._retryDelay = getJitterDelay(\n            /* retry */ this._resumeRetryN,\n            /* minDelay */ this._resumeRetryN * 1500,\n            3);\n\n        logger.info(`Will try to resume the XMPP connection in ${this.retryDelay}ms`);\n\n        this._resumeTimeout = setTimeout(() => this._resumeConnection(), this.retryDelay);\n    }\n\n    /**\n     * Cancels the delayed resume task.\n     *\n     * @private\n     * @returns {void}\n     */\n    _cancelResume() {\n        if (this._resumeTimeout) {\n            logger.info('Canceling connection resume task');\n            clearTimeout(this._resumeTimeout);\n            this._resumeTimeout = undefined;\n            this._retryDelay = undefined;\n        }\n    }\n\n    /**\n     * Resumes the XMPP connection using the stream management plugin.\n     *\n     * @private\n     * @returns {void}\n     */\n    _resumeConnection() {\n        const { streamManagement } = this._stropheConn;\n        const resumeToken = streamManagement.getResumeToken();\n\n        // Things may have changed since when the task was scheduled\n        if (!resumeToken) {\n            return;\n        }\n\n        logger.info('Trying to resume the XMPP connection');\n\n        const url = new URL(this._stropheConn.service);\n        let { search } = url;\n        const pattern = /(previd=)([\\w-]+)/;\n        const oldToken = search.match(pattern);\n\n        // Replace previd if the previd value has changed.\n        if (oldToken && oldToken.indexOf(resumeToken) === -1) {\n            search = search.replace(pattern, `$1${resumeToken}`);\n\n        // Append previd if it doesn't exist.\n        } else if (!oldToken) {\n            search += search.indexOf('?') === -1 ? `?previd=${resumeToken}` : `&previd=${resumeToken}`;\n        }\n\n        url.search = search;\n\n        this._stropheConn.service = url.toString();\n\n        streamManagement.resume();\n    }\n\n    /**\n     * Cancels the retry task. It's called by {@link XmppConnection} when it's no longer interested in reconnecting for\n     * example when the disconnect method is called.\n     *\n     * @returns {void}\n     */\n    cancel() {\n        this._cancelResume();\n        this._resumeRetryN = 0;\n        if (this._networkOnlineListener) {\n            this._networkOnlineListener();\n            this._networkOnlineListener = null;\n        }\n    }\n}\n","/**\n* Gets next timeout using the full jitter pattern.\n*\n* NOTE that there are no checks for argument correctness, so either do the math or use defaults.\n*\n* @param {number} retry - The retry number.\n* @param {number} minDelay - The minimal delay in milliseconds.\n* @param {number} base - The exponent base.\n* @returns {number} - The amount of waiting before trying another time given in milliseconds.\n* @private\n*/\nexport function getJitterDelay(retry, minDelay = 500, base = 2) {\n    return Math.floor((Math.random() * ((Math.pow(base, retry) * 1000) - minDelay)) + minDelay);\n}\n","/**\n * Attaches to the {@link Strophe.Connection.rawInput} which is called whenever any data is received from the server.\n */\nexport default class LastRequestTracker {\n    /**\n     * Initializes new instance.\n     */\n    constructor() {\n        this._lastSuccess = null;\n        this._lastFailedMessage = null;\n    }\n\n    /**\n     * Starts tracking requests on the given connection.\n     *\n     * @param {XmppConnection} xmppConnection - The XMPP connection which manages the given {@code stropheConnection}.\n     * @param {Object} stropheConnection - Strophe connection instance.\n     */\n    startTracking(xmppConnection, stropheConnection) {\n        const originalRawInput = stropheConnection.rawInput;\n\n        stropheConnection.rawInput = (...args) => {\n            const rawMessage = args[0];\n\n            if (rawMessage.includes('failure')) {\n                this._lastFailedMessage = rawMessage;\n            }\n\n            // It's okay to use rawInput callback only once the connection has been established, otherwise it will\n            // treat 'item-not-found' or other connection error on websocket reconnect as successful stanza received.\n            if (xmppConnection.connected) {\n                this._lastSuccess = Date.now();\n            }\n            originalRawInput.apply(stropheConnection, args);\n        };\n    }\n\n    /**\n     * Returns the last raw failed incoming message on the xmpp connection.\n     *\n     * @returns {string|null}\n     */\n    getLastFailedMessage() {\n        return this._lastFailedMessage;\n    }\n\n    /**\n     * Returns how many milliseconds have passed since the last successful BOSH request.\n     *\n     * @returns {number|null}\n     */\n    getTimeSinceLastSuccess() {\n        return this._lastSuccess\n            ? Date.now() - this._lastSuccess\n            : null;\n    }\n}\n","import Listenable from '../util/Listenable';\n\n/**\n * Creates ConnectionPlugin class that extends the passed class.\n * @param {Class} base the definition of the class that will be extended by\n * ConnectionPlugin\n */\nfunction getConnectionPluginDefinition(base = class {}) {\n    /**\n     * Base class for strophe connection plugins.\n     */\n    return class extends base {\n        /**\n         *\n         */\n        constructor(...args) {\n            super(...args);\n            this.connection = null;\n        }\n\n        /**\n         *\n         * @param connection\n         */\n        init(connection) {\n            this.connection = connection;\n        }\n    };\n}\n\n/**\n * ConnectionPlugin class.\n */\nexport default getConnectionPluginDefinition();\n\n/**\n * ConnectionPlugin class that extends Listenable.\n */\nexport const ConnectionPluginListenable\n    = getConnectionPluginDefinition(Listenable);\n","import { getLogger } from '@jitsi/logger';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nimport ConnectionPlugin from './ConnectionPlugin';\n\n\nconst logger = getLogger(__filename);\n\n/**\n * Default ping every 10 sec\n */\nconst PING_DEFAULT_INTERVAL = 10000;\n\n/**\n * Default ping timeout error after 5 sec of waiting.\n */\nconst PING_DEFAULT_TIMEOUT = 5000;\n\n/**\n * Default value for how many ping failures will be tolerated before the WebSocket connection is killed.\n * The worst case scenario in case of ping timing out without a response is (25 seconds at the time of this writing):\n * PING_THRESHOLD * PING_INTERVAL + PING_TIMEOUT\n */\nconst PING_DEFAULT_THRESHOLD = 2;\n\n/**\n * XEP-0199 ping plugin.\n *\n * Registers \"urn:xmpp:ping\" namespace under Strophe.NS.PING.\n */\nexport default class PingConnectionPlugin extends ConnectionPlugin {\n    /**\n     * Constructs new object\n     * @param {Object} options\n     * @param {Function} options.onPingThresholdExceeded - Callback called when ping fails too many times (controlled\n     * by the {@link PING_THRESHOLD} constant).\n     * @param {Function} options._getTimeSinceLastServerResponse - A function to obtain the last seen\n     * response from the server.\n     * @param {Object} options.pingOptions - The ping options if any.\n     * @constructor\n     */\n    constructor({ getTimeSinceLastServerResponse, onPingThresholdExceeded, pingOptions = {} }) {\n        super();\n        this.failedPings = 0;\n        this._onPingThresholdExceeded = onPingThresholdExceeded;\n        this._getTimeSinceLastServerResponse = getTimeSinceLastServerResponse;\n\n        this.pingInterval = typeof pingOptions.interval === 'number' ? pingOptions.interval : PING_DEFAULT_INTERVAL;\n        this.pingTimeout = typeof pingOptions.timeout === 'number' ? pingOptions.timeout : PING_DEFAULT_TIMEOUT;\n        this.pingThreshold = typeof pingOptions.threshold === 'number'\n            ? pingOptions.threshold : PING_DEFAULT_THRESHOLD;\n\n        // The number of timestamps of send pings to keep.\n        // The current value is 2 minutes.\n        this.pingTimestampsToKeep = Math.round(120000 / this.pingInterval);\n        this.pingExecIntervals = new Array(this.pingTimestampsToKeep);\n    }\n\n    /**\n     * Initializes the plugin. Method called by Strophe.\n     * @param connection Strophe connection instance.\n     */\n    init(connection) {\n        super.init(connection);\n        Strophe.addNamespace('PING', 'urn:xmpp:ping');\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Sends \"ping\" to given <tt>jid</tt>\n     * @param jid the JID to which ping request will be sent.\n     * @param success callback called on success.\n     * @param error callback called on error.\n     * @param timeout ms how long are we going to wait for the response. On\n     * timeout <tt>error<//t> callback is called with undefined error argument.\n     */\n    ping(jid, success, error, timeout) {\n        this._addPingExecutionTimestamp();\n\n        const iq = $iq({\n            type: 'get',\n            to: jid\n        });\n\n        iq.c('ping', { xmlns: Strophe.NS.PING });\n        this.connection.sendIQ2(iq, { timeout })\n            .then(success, error);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Starts to send ping in given interval to specified remote JID.\n     * This plugin supports only one such task and <tt>stopInterval</tt>\n     * must be called before starting a new one.\n     * @param remoteJid remote JID to which ping requests will be sent to.\n     */\n    startInterval(remoteJid) {\n        clearInterval(this.intervalId);\n        this.intervalId = window.setInterval(() => {\n\n            // when there were some server responses in the interval since the last time we checked (_lastServerCheck)\n            // let's skip the ping\n\n            const now = Date.now();\n\n            if (this._getTimeSinceLastServerResponse() < now - this._lastServerCheck) {\n                // do this just to keep in sync the intervals so we can detect suspended device\n                this._addPingExecutionTimestamp();\n\n                this._lastServerCheck = now;\n                this.failedPings = 0;\n\n                return;\n            }\n\n            this.ping(remoteJid, () => {\n                // server response is measured on raw input and ping response time is measured after all the xmpp\n                // processing is done in js, so there can be some misalignment when we do the check above.\n                // That's why we store the last time we got the response\n                this._lastServerCheck = this._getTimeSinceLastServerResponse() + Date.now();\n\n                this.failedPings = 0;\n            }, error => {\n                this.failedPings += 1;\n                const errmsg = `Ping ${error ? 'error' : 'timeout'}`;\n\n                if (this.failedPings >= this.pingThreshold) {\n                    GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n                    logger.error(errmsg, error);\n                    this._onPingThresholdExceeded && this._onPingThresholdExceeded();\n                } else {\n                    logger.warn(errmsg, error);\n                }\n            }, this.pingTimeout);\n        }, this.pingInterval);\n        logger.info(`XMPP pings will be sent every ${this.pingInterval} ms`);\n    }\n\n    /**\n     * Stops current \"ping\"  interval task.\n     */\n    stopInterval() {\n        if (this.intervalId) {\n            window.clearInterval(this.intervalId);\n            this.intervalId = null;\n            this.failedPings = 0;\n            logger.info('Ping interval cleared');\n        }\n    }\n\n    /**\n     * Adds the current time to the array of send ping timestamps.\n     * @private\n     */\n    _addPingExecutionTimestamp() {\n        this.pingExecIntervals.push(new Date().getTime());\n\n        // keep array length to PING_TIMESTAMPS_TO_KEEP\n        if (this.pingExecIntervals.length > this.pingTimestampsToKeep) {\n            this.pingExecIntervals.shift();\n        }\n    }\n\n    /**\n     * Returns the maximum time between the recent sent pings, if there is a\n     * big value it means the computer was inactive for some time(suspended).\n     * Checks the maximum gap between sending pings, considering and the\n     * current time. Trying to detect computer inactivity (sleep).\n     *\n     * @returns {int} the time ping was suspended, if it was not 0 is returned.\n     */\n    getPingSuspendTime() {\n        const pingIntervals = this.pingExecIntervals.slice();\n\n        // we need current time, as if ping was sent now\n        // if computer sleeps we will get correct interval after next\n        // scheduled ping, bet we sometimes need that interval before waiting\n        // for the next ping, on closing the connection on error.\n        pingIntervals.push(new Date().getTime());\n\n        let maxInterval = 0;\n        let previousTS = pingIntervals[0];\n\n        pingIntervals.forEach(e => {\n            const currentInterval = e - previousTS;\n\n            if (currentInterval > maxInterval) {\n                maxInterval = currentInterval;\n            }\n\n            previousTS = e;\n        });\n\n        // remove the interval between the ping sent\n        // this way in normal execution there is no suspend and the return\n        // will be 0 or close to 0.\n        maxInterval -= this.pingInterval;\n\n        // make sure we do not return less than 0\n        return Math.max(maxInterval, 0);\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport { $pres, Strophe } from 'strophe.js';\nimport 'strophejs-plugin-stream-management';\n\nimport Listenable from '../util/Listenable';\n\nimport ResumeTask from './ResumeTask';\nimport LastSuccessTracker from './StropheLastSuccess';\nimport PingConnectionPlugin from './strophe.ping';\n\nconst logger = getLogger(__filename);\n\n/**\n * The lib-jitsi-meet layer for {@link Strophe.Connection}.\n */\nexport default class XmppConnection extends Listenable {\n    /**\n     * The list of {@link XmppConnection} events.\n     *\n     * @returns {Object}\n     */\n    static get Events() {\n        return {\n            CONN_STATUS_CHANGED: 'CONN_STATUS_CHANGED',\n            CONN_SHARD_CHANGED: 'CONN_SHARD_CHANGED'\n        };\n    }\n\n    /**\n     * The list of Xmpp connection statuses.\n     *\n     * @returns {Strophe.Status}\n     */\n    static get Status() {\n        return Strophe.Status;\n    }\n\n    /**\n     * Initializes new connection instance.\n     *\n     * @param {Object} options\n     * @param {String} options.serviceUrl - The BOSH or WebSocket service URL.\n     * @param {String} options.shard - The BOSH or WebSocket is connecting to this shard.\n     * Useful for detecting when shard changes.\n     * @param {String} [options.enableWebsocketResume=true] - True/false to control the stream resumption functionality.\n     * It will enable automatically by default if supported by the XMPP server.\n     * @param {Number} [options.websocketKeepAlive=60000] - The websocket keep alive interval.\n     * It's the interval + a up to a minute of jitter. Pass -1 to disable.\n     * The keep alive is HTTP GET request to {@link options.serviceUrl} or to {@link options.websocketKeepAliveUrl}.\n     * @param {Number} [options.websocketKeepAliveUrl] - The websocket keep alive url to use if any,\n     * if missing the serviceUrl url will be used.\n     * @param {Object} [options.xmppPing] - The xmpp ping settings.\n     */\n    constructor({ enableWebsocketResume, websocketKeepAlive, websocketKeepAliveUrl, serviceUrl, shard, xmppPing }) {\n        super();\n        this._options = {\n            enableWebsocketResume: typeof enableWebsocketResume === 'undefined' ? true : enableWebsocketResume,\n            pingOptions: xmppPing,\n            shard,\n            websocketKeepAlive: typeof websocketKeepAlive === 'undefined' ? 60 * 1000 : Number(websocketKeepAlive),\n            websocketKeepAliveUrl\n        };\n\n        this._stropheConn = new Strophe.Connection(serviceUrl);\n        this._usesWebsocket = serviceUrl.startsWith('ws:') || serviceUrl.startsWith('wss:');\n\n        // The default maxRetries is 5, which is too long.\n        this._stropheConn.maxRetries = 3;\n\n        this._rawInputTracker = new LastSuccessTracker();\n        this._rawInputTracker.startTracking(this, this._stropheConn);\n\n        this._resumeTask = new ResumeTask(this._stropheConn);\n\n        /**\n         * @typedef DeferredSendIQ Object\n         * @property {Element} iq - The IQ to send.\n         * @property {function} resolve - The resolve method of the deferred Promise.\n         * @property {function} reject - The reject method of the deferred Promise.\n         * @property {number} timeout - The ID of the timeout task that needs to be cleared, before sending the IQ.\n         */\n        /**\n         * Deferred IQs to be sent upon reconnect.\n         * @type {Array<DeferredSendIQ>}\n         * @private\n         */\n        this._deferredIQs = [];\n\n        // Ping plugin is mandatory for the Websocket mode to work correctly. It's used to detect when the connection\n        // is broken (WebSocket/TCP connection not closed gracefully).\n        this.addConnectionPlugin(\n            'ping',\n            new PingConnectionPlugin({\n                getTimeSinceLastServerResponse: () => this.getTimeSinceLastSuccess(),\n                onPingThresholdExceeded: () => this._onPingErrorThresholdExceeded(),\n                pingOptions: xmppPing\n            }));\n\n        // tracks whether this is the initial connection or a reconnect\n        this._oneSuccessfulConnect = false;\n    }\n\n    /**\n     * A getter for the connected state.\n     *\n     * @returns {boolean}\n     */\n    get connected() {\n        const websocket = this._stropheConn && this._stropheConn._proto && this._stropheConn._proto.socket;\n\n        return (this._status === Strophe.Status.CONNECTED || this._status === Strophe.Status.ATTACHED)\n            && (!this.isUsingWebSocket || (websocket && websocket.readyState === WebSocket.OPEN));\n    }\n\n    /**\n     * Retrieves the feature discovery plugin instance.\n     *\n     * @returns {Strophe.Connection.disco}\n     */\n    get disco() {\n        return this._stropheConn.disco;\n    }\n\n    /**\n     * A getter for the disconnecting state.\n     *\n     * @returns {boolean}\n     */\n    get disconnecting() {\n        return this._stropheConn.disconnecting === true;\n    }\n\n    /**\n     * A getter for the domain.\n     *\n     * @returns {string|null}\n     */\n    get domain() {\n        return this._stropheConn.domain;\n    }\n\n    /**\n     * Tells if Websocket is used as the transport for the current XMPP connection. Returns true for Websocket or false\n     * for BOSH.\n     * @returns {boolean}\n     */\n    get isUsingWebSocket() {\n        return this._usesWebsocket;\n    }\n\n    /**\n     * A getter for the JID.\n     *\n     * @returns {string|null}\n     */\n    get jid() {\n        return this._stropheConn.jid;\n    }\n\n    /**\n     * Returns headers for the last BOSH response received.\n     *\n     * @returns {string}\n     */\n    get lastResponseHeaders() {\n        return this._stropheConn._proto && this._stropheConn._proto.lastResponseHeaders;\n    }\n\n    /**\n     * A getter for the logger plugin instance.\n     *\n     * @returns {*}\n     */\n    get logger() {\n        return this._stropheConn.logger;\n    }\n\n    /**\n     * A getter for the connection options.\n     *\n     * @returns {*}\n     */\n    get options() {\n        return this._stropheConn.options;\n    }\n\n    /**\n     * A getter for the domain to be used for ping.\n     */\n    get pingDomain() {\n        return this._options.pingOptions?.domain || this.domain;\n    }\n\n    /**\n     * A getter for the service URL.\n     *\n     * @returns {string}\n     */\n    get service() {\n        return this._stropheConn.service;\n    }\n\n    /**\n     * Sets new value for shard.\n     * @param value the new shard value.\n     */\n    set shard(value) {\n        this._options.shard = value;\n\n        // shard setting changed so let's schedule a new keep-alive check if connected\n        if (this._oneSuccessfulConnect) {\n            this._maybeStartWSKeepAlive();\n        }\n    }\n\n    /**\n     * Returns the current connection status.\n     *\n     * @returns {Strophe.Status}\n     */\n    get status() {\n        return this._status;\n    }\n\n    /**\n     * Adds a connection plugin to this instance.\n     *\n     * @param {string} name - The name of the plugin or rather a key under which it will be stored on this connection\n     * instance.\n     * @param {ConnectionPluginListenable} plugin - The plugin to add.\n     */\n    addConnectionPlugin(name, plugin) {\n        this[name] = plugin;\n        plugin.init(this);\n    }\n\n    /**\n     * See {@link Strophe.Connection.addHandler}\n     *\n     * @returns {void}\n     */\n    addHandler(...args) {\n        this._stropheConn.addHandler(...args);\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Wraps {@link Strophe.Connection.attach} method in order to intercept the connection status updates.\n     * See {@link Strophe.Connection.attach} for the params description.\n     *\n     * @returns {void}\n     */\n    attach(jid, sid, rid, callback, ...args) {\n        this._stropheConn.attach(jid, sid, rid, this._stropheConnectionCb.bind(this, callback), ...args);\n    }\n\n    /**\n     * Wraps Strophe.Connection.connect method in order to intercept the connection status updates.\n     * See {@link Strophe.Connection.connect} for the params description.\n     *\n     * @returns {void}\n     */\n    connect(jid, pass, callback, ...args) {\n        this._stropheConn.connect(jid, pass, this._stropheConnectionCb.bind(this, callback), ...args);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Handles {@link Strophe.Status} updates for the current connection.\n     *\n     * @param {function} targetCallback - The callback passed by the {@link XmppConnection} consumer to one of\n     * the connect methods.\n     * @param {Strophe.Status} status - The new connection status.\n     * @param {*} args - The rest of the arguments passed by Strophe.\n     * @private\n     */\n    _stropheConnectionCb(targetCallback, status, ...args) {\n        this._status = status;\n\n        let blockCallback = false;\n\n        if (status === Strophe.Status.CONNECTED || status === Strophe.Status.ATTACHED) {\n            this._maybeEnableStreamResume();\n\n            // after connecting - immediately check whether shard changed,\n            // we need this only when using websockets as bosh checks headers from every response\n            if (this._usesWebsocket && this._oneSuccessfulConnect) {\n                this._keepAliveAndCheckShard();\n            }\n            this._oneSuccessfulConnect = true;\n\n            this._maybeStartWSKeepAlive();\n            this._processDeferredIQs();\n            this._resumeTask.cancel();\n            this.ping.startInterval(this._options.pingOptions?.domain || this.domain);\n        } else if (status === Strophe.Status.DISCONNECTED) {\n            this.ping.stopInterval();\n\n            // FIXME add RECONNECTING state instead of blocking the DISCONNECTED update\n            blockCallback = this._tryResumingConnection();\n            if (!blockCallback) {\n                clearTimeout(this._wsKeepAlive);\n            }\n        }\n\n        if (!blockCallback) {\n            targetCallback(status, ...args);\n            this.eventEmitter.emit(XmppConnection.Events.CONN_STATUS_CHANGED, status);\n        }\n    }\n\n    /**\n     * Clears the list of IQs and rejects deferred Promises with an error.\n     *\n     * @private\n     */\n    _clearDeferredIQs() {\n        for (const deferred of this._deferredIQs) {\n            deferred.reject(new Error('disconnect'));\n        }\n        this._deferredIQs = [];\n    }\n\n    /**\n     * The method is meant to be used for testing. It's a shortcut for closing the WebSocket.\n     *\n     * @returns {void}\n     */\n    closeWebsocket() {\n        if (this._stropheConn && this._stropheConn._proto) {\n            this._stropheConn._proto._closeSocket();\n            this._stropheConn._proto._onClose(null);\n        }\n    }\n\n    /**\n     * See {@link Strophe.Connection.disconnect}.\n     *\n     * @returns {void}\n     */\n    disconnect(...args) {\n        this._resumeTask.cancel();\n        clearTimeout(this._wsKeepAlive);\n        this._clearDeferredIQs();\n        this._stropheConn.disconnect(...args);\n    }\n\n    /**\n     * See {@link Strophe.Connection.flush}.\n     *\n     * @returns {void}\n     */\n    flush(...args) {\n        this._stropheConn.flush(...args);\n    }\n\n    /**\n     * See {@link LastRequestTracker.getTimeSinceLastSuccess}.\n     *\n     * @returns {number|null}\n     */\n    getTimeSinceLastSuccess() {\n        return this._rawInputTracker.getTimeSinceLastSuccess();\n    }\n\n    /**\n     * See {@link LastRequestTracker.getLastFailedMessage}.\n     *\n     * @returns {string|null}\n     */\n    getLastFailedMessage() {\n        return this._rawInputTracker.getLastFailedMessage();\n    }\n\n    /**\n     * Requests a resume token from the server if enabled and all requirements are met.\n     *\n     * @private\n     */\n    _maybeEnableStreamResume() {\n        if (!this._options.enableWebsocketResume) {\n\n            return;\n        }\n\n        const { streamManagement } = this._stropheConn;\n\n        if (!this.isUsingWebSocket) {\n            logger.warn('Stream resume enabled, but WebSockets are not enabled');\n        } else if (!streamManagement) {\n            logger.warn('Stream resume enabled, but Strophe streamManagement plugin is not installed');\n        } else if (!streamManagement.isSupported()) {\n            logger.warn('Stream resume enabled, but XEP-0198 is not supported by the server');\n        } else if (!streamManagement.getResumeToken()) {\n            logger.info('Enabling XEP-0198 stream management');\n            streamManagement.enable(/* resume */ true);\n        }\n    }\n\n    /**\n     * Starts the Websocket keep alive if enabled.\n     *\n     * @private\n     * @returns {void}\n     */\n    _maybeStartWSKeepAlive() {\n        const { websocketKeepAlive } = this._options;\n\n        if (this._usesWebsocket && websocketKeepAlive > 0) {\n            this._wsKeepAlive || logger.info(`WebSocket keep alive interval: ${websocketKeepAlive}ms`);\n            clearTimeout(this._wsKeepAlive);\n\n            const intervalWithJitter = /* base */ websocketKeepAlive + /* jitter */ (Math.random() * 60 * 1000);\n\n            logger.debug(`Scheduling next WebSocket keep-alive in ${intervalWithJitter}ms`);\n\n            this._wsKeepAlive = setTimeout(\n                () => this._keepAliveAndCheckShard()\n                    .then(() => this._maybeStartWSKeepAlive()),\n                intervalWithJitter);\n        }\n    }\n\n    /**\n     * Do a http GET to the shard and if shard change will throw an event.\n     *\n     * @private\n     * @returns {Promise}\n     */\n    _keepAliveAndCheckShard() {\n        const { shard, websocketKeepAliveUrl } = this._options;\n        const url = websocketKeepAliveUrl ? websocketKeepAliveUrl\n            : this.service.replace('wss://', 'https://').replace('ws://', 'http://');\n\n        return fetch(url)\n            .then(response => {\n\n                // skips header checking if there is no info in options\n                if (!shard) {\n                    return;\n                }\n\n                const responseShard = response.headers.get('x-jitsi-shard');\n\n                if (responseShard !== shard) {\n                    logger.error(\n                        `Detected that shard changed from ${shard} to ${responseShard}`);\n                    this.eventEmitter.emit(XmppConnection.Events.CONN_SHARD_CHANGED);\n                }\n            })\n            .catch(error => {\n                logger.error(`Websocket Keep alive failed for url: ${url}`, { error });\n            });\n    }\n\n    /**\n     * Goes over the list of {@link DeferredSendIQ} tasks and sends them.\n     *\n     * @private\n     * @returns {void}\n     */\n    _processDeferredIQs() {\n        for (const deferred of this._deferredIQs) {\n            if (deferred.iq) {\n                clearTimeout(deferred.timeout);\n\n                const timeLeft = Date.now() - deferred.start;\n\n                this.sendIQ(\n                    deferred.iq,\n                    result => deferred.resolve(result),\n                    error => deferred.reject(error),\n                    timeLeft);\n            }\n        }\n\n        this._deferredIQs = [];\n    }\n\n    /**\n     * Send a stanza. This function is called to push data onto the send queue to go out over the wire.\n     *\n     * @param {Element|Strophe.Builder} stanza - The stanza to send.\n     * @returns {void}\n     */\n    send(stanza) {\n        if (!this.connected) {\n            throw new Error('Not connected');\n        }\n        this._stropheConn.send(stanza);\n    }\n\n    /**\n     * Helper function to send IQ stanzas.\n     *\n     * @param {Element} elem - The stanza to send.\n     * @param {Function} callback - The callback function for a successful request.\n     * @param {Function} errback - The callback function for a failed or timed out request.  On timeout, the stanza will\n     * be null.\n     * @param {number} timeout - The time specified in milliseconds for a timeout to occur.\n     * @returns {number} - The id used to send the IQ.\n     */\n    sendIQ(elem, callback, errback, timeout) {\n        if (!this.connected) {\n            errback('Not connected');\n\n            return;\n        }\n\n        return this._stropheConn.sendIQ(elem, callback, errback, timeout);\n    }\n\n    /**\n     * Sends an IQ immediately if connected or puts it on the send queue otherwise(in contrary to other send methods\n     * which would fail immediately if disconnected).\n     *\n     * @param {Element} iq - The IQ to send.\n     * @param {number} timeout - How long to wait for the response. The time when the connection is reconnecting is\n     * included, which means that the IQ may never be sent and still fail with a timeout.\n     */\n    sendIQ2(iq, { timeout }) {\n        return new Promise((resolve, reject) => {\n            if (this.connected) {\n                this.sendIQ(\n                    iq,\n                    result => resolve(result),\n                    error => reject(error),\n                    timeout);\n            } else {\n                const deferred = {\n                    iq,\n                    resolve,\n                    reject,\n                    start: Date.now(),\n                    timeout: setTimeout(() => {\n                        // clears the IQ on timeout and invalidates the deferred task\n                        deferred.iq = undefined;\n\n                        // Strophe calls with undefined on timeout\n                        reject(undefined);\n                    }, timeout)\n                };\n\n                this._deferredIQs.push(deferred);\n            }\n        });\n    }\n\n    /**\n     * Called by the ping plugin when ping fails too many times.\n     *\n     * @returns {void}\n     */\n    _onPingErrorThresholdExceeded() {\n        if (this.isUsingWebSocket) {\n            logger.warn('Ping error threshold exceeded - killing the WebSocket');\n            this.closeWebsocket();\n        }\n    }\n\n    /**\n     *  Helper function to send presence stanzas. The main benefit is for sending presence stanzas for which you expect\n     *  a responding presence stanza with the same id (for example when leaving a chat room).\n     *\n     * @param {Element} elem - The stanza to send.\n     * @param {Function} callback - The callback function for a successful request.\n     * @param {Function} errback - The callback function for a failed or timed out request. On timeout, the stanza will\n     * be null.\n     * @param {number} timeout - The time specified in milliseconds for a timeout to occur.\n     * @returns {number} - The id used to send the presence.\n     */\n    sendPresence(elem, callback, errback, timeout) {\n        if (!this.connected) {\n            errback('Not connected');\n\n            return;\n        }\n        this._stropheConn.sendPresence(elem, callback, errback, timeout);\n    }\n\n    /**\n     * The method gracefully closes the BOSH connection by using 'navigator.sendBeacon'.\n     *\n     * @returns {boolean} - true if the beacon was sent.\n     */\n    sendUnavailableBeacon() {\n        if (!navigator.sendBeacon || this._stropheConn.disconnecting || !this._stropheConn.connected) {\n            return false;\n        }\n\n        this._stropheConn._changeConnectStatus(Strophe.Status.DISCONNECTING);\n        this._stropheConn.disconnecting = true;\n\n        const body = this._stropheConn._proto._buildBody()\n            .attrs({\n                type: 'terminate'\n            });\n        const pres = $pres({\n            xmlns: Strophe.NS.CLIENT,\n            type: 'unavailable'\n        });\n\n        body.cnode(pres.tree());\n\n        const res = navigator.sendBeacon(\n            this.service.indexOf('https://') === -1 ? `https:${this.service}` : this.service,\n            Strophe.serialize(body.tree()));\n\n        logger.info(`Successfully send unavailable beacon ${res}`);\n\n        this._stropheConn._proto._abortAllRequests();\n        this._stropheConn._doDisconnect();\n\n        return true;\n    }\n\n    /**\n     * Tries to use stream management plugin to resume dropped XMPP connection. The streamManagement plugin clears\n     * the resume token if any connection error occurs which would put it in unrecoverable state, so as long as\n     * the token is present it means the connection can be resumed.\n     *\n     * @private\n     * @returns {boolean}\n     */\n    _tryResumingConnection() {\n        const { streamManagement } = this._stropheConn;\n        const resumeToken = streamManagement && streamManagement.getResumeToken();\n\n        if (resumeToken) {\n            this._resumeTask.schedule();\n\n            return true;\n        }\n\n        return false;\n    }\n}\n","/**\n * The transciption is on.\n *\n * @type {String}\n */\nexport const ON = 'on';\n\n/**\n * The transciption is off.\n *\n * @type {String}\n */\nexport const OFF = 'off';\n","import { getLogger } from '@jitsi/logger';\nimport { $msg } from 'strophe.js';\n\nimport * as MediaType from '../../service/RTC/MediaType';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * The AVModeration logic.\n */\nexport default class AVModeration {\n\n    /**\n     * Constructs AV moderation room.\n     *\n     * @param {ChatRoom} room the main room.\n     */\n    constructor(room) {\n        this._xmpp = room.xmpp;\n\n        this._mainRoom = room;\n\n        this._moderationEnabledByType = {\n            [MediaType.AUDIO]: false,\n            [MediaType.VIDEO]: false\n        };\n\n        this._whitelistAudio = [];\n        this._whitelistVideo = [];\n\n        this._onMessage = this._onMessage.bind(this);\n        this._xmpp.addListener(XMPPEvents.AV_MODERATION_RECEIVED, this._onMessage);\n    }\n\n    /**\n     * Stops listening for events.\n     */\n    dispose() {\n        this._xmpp.removeListener(XMPPEvents.AV_MODERATION_RECEIVED, this._onMessage);\n    }\n\n    /**\n     * Whether AV moderation is supported on backend.\n     *\n     * @returns {boolean} whether AV moderation is supported on backend.\n     */\n    isSupported() {\n        return Boolean(this._xmpp.avModerationComponentAddress);\n    }\n\n    /**\n     * Enables or disables AV Moderation by sending a msg with command to the component.\n     */\n    enable(state, mediaType) {\n        if (!this.isSupported() || !this._mainRoom.isModerator()) {\n            logger.error(`Cannot enable:${state} AV moderation supported:${this.isSupported()}, \n                moderator:${this._mainRoom.isModerator()}`);\n\n            return;\n        }\n\n        if (state === this._moderationEnabledByType[mediaType]) {\n            logger.warn(`Moderation already in state:${state} for mediaType:${mediaType}`);\n\n            return;\n        }\n\n        // send the enable/disable message\n        const msg = $msg({ to: this._xmpp.avModerationComponentAddress });\n\n        msg.c('av_moderation', {\n            enable: state,\n            mediaType\n        }).up();\n\n        this._xmpp.connection.send(msg);\n    }\n\n    /**\n     * Approves that a participant can unmute by sending a msg with its jid to the component.\n     */\n    approve(mediaType, jid) {\n        if (!this.isSupported() || !this._mainRoom.isModerator()) {\n            logger.error(`Cannot approve in AV moderation supported:${this.isSupported()}, \n                moderator:${this._mainRoom.isModerator()}`);\n\n            return;\n        }\n\n        // send a message to whitelist the jid and approve it to unmute\n        const msg = $msg({ to: this._xmpp.avModerationComponentAddress });\n\n        msg.c('av_moderation', {\n            mediaType,\n            jidToWhitelist: jid }).up();\n\n        this._xmpp.connection.send(msg);\n    }\n\n    /**\n     * Rejects that a participant can unmute by sending a msg with its jid to the component.\n     */\n    reject(mediaType, jid) {\n        if (!this.isSupported() || !this._mainRoom.isModerator()) {\n            logger.error(`Cannot reject in AV moderation supported:${this.isSupported()},\n                moderator:${this._mainRoom.isModerator()}`);\n\n            return;\n        }\n\n        // send a message to remove from whitelist the jid and reject it to unmute\n        const msg = $msg({ to: this._xmpp.avModerationComponentAddress });\n\n        msg.c('av_moderation', {\n            mediaType,\n            jidToBlacklist: jid\n        }).up();\n\n        this._xmpp.connection.send(msg);\n    }\n\n    /**\n     * Receives av_moderation parsed messages as json.\n     * @param obj the parsed json content of the message to process.\n     * @private\n     */\n    _onMessage(obj) {\n        const { removed, mediaType: media, enabled, approved, actor, whitelists: newWhitelists } = obj;\n\n        if (newWhitelists) {\n            const oldList = media === MediaType.AUDIO\n                ? this._whitelistAudio\n                : this._whitelistVideo;\n            const newList = Array.isArray(newWhitelists[media]) ? newWhitelists[media] : [];\n\n            if (removed) {\n                oldList.filter(x => !newList.includes(x))\n                    .forEach(jid => this._xmpp.eventEmitter\n                        .emit(XMPPEvents.AV_MODERATION_PARTICIPANT_REJECTED, media, jid));\n            } else {\n                newList.filter(x => !oldList.includes(x))\n                    .forEach(jid => this._xmpp.eventEmitter\n                        .emit(XMPPEvents.AV_MODERATION_PARTICIPANT_APPROVED, media, jid));\n            }\n\n            if (media === MediaType.AUDIO) {\n                this._whitelistAudio = newList;\n            } else {\n                this._whitelistVideo = newList;\n            }\n        } else if (enabled !== undefined && this._moderationEnabledByType[media] !== enabled) {\n            this._moderationEnabledByType[media] = enabled;\n\n            this._xmpp.eventEmitter.emit(XMPPEvents.AV_MODERATION_CHANGED, enabled, media, actor);\n        } else if (removed) {\n            this._xmpp.eventEmitter.emit(XMPPEvents.AV_MODERATION_REJECTED, media);\n        } else if (approved) {\n            this._xmpp.eventEmitter.emit(XMPPEvents.AV_MODERATION_APPROVED, media);\n        }\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport { $msg } from 'strophe.js';\n\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nconst FEATURE_KEY = 'features/breakout-rooms';\nconst BREAKOUT_ROOM_ACTIONS = {\n    ADD: `${FEATURE_KEY}/add`,\n    REMOVE: `${FEATURE_KEY}/remove`,\n    MOVE_TO_ROOM: `${FEATURE_KEY}/move-to-room`\n};\nconst BREAKOUT_ROOM_EVENTS = {\n    MOVE_TO_ROOM: `${FEATURE_KEY}/move-to-room`,\n    UPDATE: `${FEATURE_KEY}/update`\n};\n\nconst logger = getLogger(__filename);\n\n/**\n * Helper class for handling breakout rooms.\n */\nexport default class BreakoutRooms {\n\n    /**\n     * Constructs lobby room.\n     *\n     * @param {ChatRoom} room the room we are in.\n     */\n    constructor(room) {\n        this.room = room;\n\n        this._handleMessages = this._handleMessages.bind(this);\n        this.room.xmpp.addListener(XMPPEvents.BREAKOUT_ROOMS_EVENT, this._handleMessages);\n\n        this._rooms = {};\n    }\n\n    /**\n     * Stops listening for events.\n     */\n    dispose() {\n        this.room.xmpp.removeListener(XMPPEvents.BREAKOUT_ROOMS_EVENT, this._handleMessages);\n    }\n\n    /**\n     * Creates a breakout room with the given subject.\n     *\n     * @param {string} subject - A subject for the breakout room.\n     */\n    createBreakoutRoom(subject) {\n        if (!this.isSupported() || !this.room.isModerator()) {\n            logger.error(`Cannot create breakout room - supported:${this.isSupported()}, \n                moderator:${this.room.isModerator()}`);\n\n            return;\n        }\n\n        const message = {\n            type: BREAKOUT_ROOM_ACTIONS.ADD,\n            subject\n        };\n\n        this._sendMessage(message);\n    }\n\n    /**\n     * Removes a breakout room.\n     *\n     * @param {string} breakoutRoomJid - JID of the room to be removed.\n     */\n    removeBreakoutRoom(breakoutRoomJid) {\n        if (!this.isSupported() || !this.room.isModerator()) {\n            logger.error(`Cannot remove breakout room - supported:${this.isSupported()}, \n                moderator:${this.room.isModerator()}`);\n\n            return;\n        }\n\n        const message = {\n            type: BREAKOUT_ROOM_ACTIONS.REMOVE,\n            breakoutRoomJid\n        };\n\n        this._sendMessage(message);\n    }\n\n    /**\n     * Sends the given participant to the given room.\n     *\n     * @param {string} participantJid - JID of the participant to be sent to a room.\n     * @param {string} roomJid - JID of the target room.\n     */\n    sendParticipantToRoom(participantJid, roomJid) {\n        if (!this.isSupported() || !this.room.isModerator()) {\n            logger.error(`Cannot send participant to room - supported:${this.isSupported()}, \n                moderator:${this.room.isModerator()}`);\n\n            return;\n        }\n\n        const message = {\n            type: BREAKOUT_ROOM_ACTIONS.MOVE_TO_ROOM,\n            participantJid,\n            roomJid\n        };\n\n        this._sendMessage(message);\n    }\n\n    /**\n     * Whether Breakout Rooms support is enabled in the backend or not.\n     */\n    isSupported() {\n        return Boolean(this.getComponentAddress());\n    }\n\n    /**\n     * Gets the address of the Breakout Rooms XMPP component.\n     *\n     * @returns The address of the component.\n     */\n    getComponentAddress() {\n        return this.room.xmpp.breakoutRoomsComponentAddress;\n    }\n\n    /**\n     * Stores if the current room is a breakout room.\n     *\n     * @param {boolean} isBreakoutRoom - Whether this room is a breakout room.\n     */\n    _setIsBreakoutRoom(isBreakoutRoom) {\n        this._isBreakoutRoom = isBreakoutRoom;\n    }\n\n    /**\n     * Checks whether this room is a breakout room.\n     *\n     * @returns True if the room is a breakout room, false otherwise.\n     */\n    isBreakoutRoom() {\n        return this._isBreakoutRoom;\n    }\n\n    /**\n     * Sets the main room JID associated with this breakout room. Only applies when\n     * in a breakout room.\n     *\n     * @param {string} jid - The main room JID.\n     */\n    _setMainRoomJid(jid) {\n        this._mainRoomJid = jid;\n    }\n\n    /**\n     * Gets the main room's JID associated with this breakout room.\n     *\n     * @returns The main room JID.\n     */\n    getMainRoomJid() {\n        return this._mainRoomJid;\n    }\n\n    /**\n     * Handles a message for managing breakout rooms.\n     *\n     * @param {object} payload - Arbitrary data.\n     */\n    _handleMessages(payload) {\n        switch (payload.event) {\n        case BREAKOUT_ROOM_EVENTS.MOVE_TO_ROOM:\n            this.room.eventEmitter.emit(XMPPEvents.BREAKOUT_ROOMS_MOVE_TO_ROOM, payload.roomJid);\n            break;\n        case BREAKOUT_ROOM_EVENTS.UPDATE: {\n            this._rooms = payload.rooms;\n            this.room.eventEmitter.emit(XMPPEvents.BREAKOUT_ROOMS_UPDATED, payload);\n            break;\n        }\n        }\n    }\n\n    /**\n     * Helper to send a breakout rooms message to the component.\n     *\n     * @param {Object} message - Command that needs to be sent.\n     */\n    _sendMessage(message) {\n        const msg = $msg({ to: this.getComponentAddress() });\n\n        msg.c('breakout_rooms', message).up();\n\n        this.room.xmpp.connection.send(msg);\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport { $msg, Strophe } from 'strophe.js';\n\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * The command type for updating a lobby participant's e-mail address.\n *\n * @type {string}\n */\nconst EMAIL_COMMAND = 'email';\n\n/**\n * The Lobby room implementation. Setting a room to members only, joining the lobby room\n * approving or denying access to participants from the lobby room.\n */\nexport default class Lobby {\n\n    /**\n     * Constructs lobby room.\n     *\n     * @param {ChatRoom} room the main room.\n     */\n    constructor(room) {\n        this.xmpp = room.xmpp;\n        this.mainRoom = room;\n\n        const maybeJoinLobbyRoom = this._maybeJoinLobbyRoom.bind(this);\n\n        this.mainRoom.addEventListener(\n            XMPPEvents.LOCAL_ROLE_CHANGED,\n            maybeJoinLobbyRoom);\n\n        this.mainRoom.addEventListener(\n            XMPPEvents.MUC_MEMBERS_ONLY_CHANGED,\n            maybeJoinLobbyRoom);\n\n        this.mainRoom.addEventListener(\n            XMPPEvents.ROOM_CONNECT_MEMBERS_ONLY_ERROR,\n            jid => {\n                this.lobbyRoomJid = jid;\n            });\n    }\n\n    /**\n     * Whether lobby is supported on backend.\n     *\n     * @returns {boolean} whether lobby is supported on backend.\n     */\n    isSupported() {\n        return this.xmpp.lobbySupported;\n    }\n\n    /**\n     * Enables lobby by setting the main room to be members only and joins the lobby chat room.\n     *\n     * @returns {Promise}\n     */\n    enable() {\n        if (!this.isSupported()) {\n            return Promise.reject(new Error('Lobby not supported!'));\n        }\n\n        return new Promise((resolve, reject) => {\n            this.mainRoom.setMembersOnly(true, resolve, reject);\n        });\n    }\n\n    /**\n     * Disable lobby by setting the main room to be non members only and levaes the lobby chat room if joined.\n     *\n     * @returns {void}\n     */\n    disable() {\n        if (!this.isSupported() || !this.mainRoom.isModerator()\n                || !this.lobbyRoom || !this.mainRoom.membersOnlyEnabled) {\n            return;\n        }\n\n        this.mainRoom.setMembersOnly(false);\n    }\n\n    /**\n     * Broadcast a message to all participants in the lobby room\n     * @param {Object} message The message to send\n     *\n     * @returns {void}\n     */\n    sendMessage(message) {\n        if (this.lobbyRoom) {\n            this.lobbyRoom.sendMessage(JSON.stringify(message), 'json-message');\n        }\n    }\n\n    /**\n     * Sends a private message to a participant in a lobby room.\n     * @param {string} id The message to send\n     * @param {Object} message The message to send\n     *\n     * @returns {void}\n     */\n    sendPrivateMessage(id, message) {\n        if (this.lobbyRoom) {\n            this.lobbyRoom.sendPrivateMessage(id, JSON.stringify(message), 'json-message');\n        }\n    }\n\n    /**\n     * Gets the local id for a participant in a lobby room.\n     * This is used for lobby room private chat messages.\n     *\n     * @returns {string}\n     */\n    getLocalId() {\n        if (this.lobbyRoom) {\n            return Strophe.getResourceFromJid(this.lobbyRoom.myroomjid);\n        }\n    }\n\n    /**\n     * Adds a message listener to the lobby room.\n     * @param {Function} listener The listener function,\n     * called when a new message is received in the lobby room.\n     *\n     * @returns {Function} Handler returned to be able to remove it later.\n     */\n    addMessageListener(listener) {\n        if (this.lobbyRoom) {\n            const handler = (participantId, message) => {\n                listener(message, Strophe.getResourceFromJid(participantId));\n            };\n\n            this.lobbyRoom.on(XMPPEvents.JSON_MESSAGE_RECEIVED, handler);\n\n            return handler;\n        }\n    }\n\n    /**\n     * Remove a message handler from the lobby room.\n     * @param {Function} handler The handler function to remove.\n     *\n     * @returns {void}\n     */\n    removeMessageHandler(handler) {\n        if (this.lobbyRoom) {\n            this.lobbyRoom.off(XMPPEvents.JSON_MESSAGE_RECEIVED, handler);\n        }\n    }\n\n    /**\n     * Leaves the lobby room.\n     *\n     * @returns {Promise}\n     */\n    leave() {\n        if (this.lobbyRoom) {\n            return this.lobbyRoom.leave()\n                .then(() => {\n                    this.lobbyRoom = undefined;\n                    logger.info('Lobby room left!');\n                })\n                .catch(() => {}); // eslint-disable-line no-empty-function\n        }\n\n        return Promise.reject(\n                new Error('The lobby has already been left'));\n    }\n\n    /**\n     * We had received a jid for the lobby room.\n     *\n     * @param jid the lobby room jid to join.\n     */\n    setLobbyRoomJid(jid) {\n        this.lobbyRoomJid = jid;\n    }\n\n    /**\n     * Checks the state of mainRoom, lobbyRoom and current user role to decide whether to join lobby room.\n     * @private\n     */\n    _maybeJoinLobbyRoom() {\n        if (!this.isSupported()) {\n            return;\n        }\n\n        const isModerator = this.mainRoom.joined && this.mainRoom.isModerator();\n\n        if (isModerator && this.mainRoom.membersOnlyEnabled && !this.lobbyRoom) {\n            // join the lobby\n            this.join()\n                .then(() => logger.info('Joined lobby room'))\n                .catch(e => logger.error('Failed joining lobby', e));\n        }\n    }\n\n    /**\n     * Joins a lobby room setting display name and eventually avatar(using the email provided).\n     *\n     * @param {string} username is required.\n     * @param {string} email is optional.\n     * @returns {Promise} resolves once we join the room.\n     */\n    join(displayName, email) {\n        const isModerator = this.mainRoom.joined && this.mainRoom.isModerator();\n\n        if (!this.lobbyRoomJid) {\n            return Promise.reject(new Error('Missing lobbyRoomJid, cannot join lobby room.'));\n        }\n\n        const roomName = Strophe.getNodeFromJid(this.lobbyRoomJid);\n        const customDomain = Strophe.getDomainFromJid(this.lobbyRoomJid);\n\n        this.lobbyRoom = this.xmpp.createRoom(\n            roomName, {\n                customDomain,\n                disableDiscoInfo: true,\n                disableFocus: true,\n                enableLobby: false\n            }\n        );\n\n        if (displayName) {\n            // remove previously set nickname\n            this.lobbyRoom.addOrReplaceInPresence('nick', {\n                attributes: { xmlns: 'http://jabber.org/protocol/nick' },\n                value: displayName\n            });\n        }\n\n        if (isModerator) {\n            this.lobbyRoom.addPresenceListener(EMAIL_COMMAND, (node, from) => {\n                this.mainRoom.eventEmitter.emit(XMPPEvents.MUC_LOBBY_MEMBER_UPDATED, from, { email: node.value });\n            });\n            this.lobbyRoom.addEventListener(\n                XMPPEvents.MUC_MEMBER_JOINED,\n                // eslint-disable-next-line max-params\n                (from, nick, role, isHiddenDomain, statsID, status, identity, botType, jid) => {\n                    // we need to ignore joins on lobby for participants that are already in the main room\n                    if (Object.values(this.mainRoom.members).find(m => m.jid === jid)) {\n                        return;\n                    }\n\n                    // Check if the user is a member if any breakout room.\n                    for (const room of Object.values(this.mainRoom.getBreakoutRooms()._rooms)) {\n                        if (Object.values(room.participants).find(p => p.jid === jid)) {\n                            return;\n                        }\n                    }\n\n                    // we emit the new event on the main room so we can propagate\n                    // events to the conference\n                    this.mainRoom.eventEmitter.emit(\n                        XMPPEvents.MUC_LOBBY_MEMBER_JOINED,\n                        Strophe.getResourceFromJid(from),\n                        nick,\n                        identity ? identity.avatar : undefined\n                    );\n                });\n            this.lobbyRoom.addEventListener(\n                XMPPEvents.MUC_MEMBER_LEFT, from => {\n                    // we emit the new event on the main room so we can propagate\n                    // events to the conference\n                    this.mainRoom.eventEmitter.emit(\n                        XMPPEvents.MUC_LOBBY_MEMBER_LEFT,\n                        Strophe.getResourceFromJid(from)\n                    );\n                });\n            this.lobbyRoom.addEventListener(\n                XMPPEvents.MUC_DESTROYED,\n                () => {\n                    // let's make sure we emit that all lobby users had left\n                    Object.keys(this.lobbyRoom.members)\n                        .forEach(j => this.mainRoom.eventEmitter.emit(\n                            XMPPEvents.MUC_LOBBY_MEMBER_LEFT, Strophe.getResourceFromJid(j)));\n\n                    this.lobbyRoom.clean();\n\n                    this.lobbyRoom = undefined;\n                    logger.info('Lobby room left(destroyed)!');\n                });\n        } else {\n            // this should only be handled by those waiting in lobby\n            this.lobbyRoom.addEventListener(XMPPEvents.KICKED, isSelfPresence => {\n                if (isSelfPresence) {\n                    this.mainRoom.eventEmitter.emit(XMPPEvents.MUC_DENIED_ACCESS);\n\n                    this.lobbyRoom.clean();\n\n                    return;\n                }\n            });\n\n            // As there is still reference of the main room\n            // the invite will be detected and addressed to its eventEmitter, even though we are not in it\n            // the invite message should be received directly to the xmpp conn in general\n            this.mainRoom.addEventListener(\n                XMPPEvents.INVITE_MESSAGE_RECEIVED,\n                (roomJid, from, txt, invitePassword) => {\n                    logger.debug(`Received approval to join ${roomJid} ${from} ${txt}`);\n                    if (roomJid === this.mainRoom.roomjid) {\n                        // we are now allowed, so let's join\n                        this.mainRoom.join(invitePassword);\n                    }\n                });\n            this.lobbyRoom.addEventListener(\n                XMPPEvents.MUC_DESTROYED,\n                (reason, jid) => {\n                    // we are receiving the jid of the main room\n                    // means we are invited to join, maybe lobby was disabled\n                    if (jid) {\n                        this.mainRoom.join();\n\n                        return;\n                    }\n\n                    this.lobbyRoom.clean();\n\n                    this.mainRoom.eventEmitter.emit(XMPPEvents.MUC_DESTROYED, reason);\n                });\n\n            // If participant retries joining shared password while waiting in the lobby\n            // and succeeds make sure we leave lobby\n            this.mainRoom.addEventListener(\n                XMPPEvents.MUC_JOINED,\n                () => {\n                    this.leave();\n                });\n        }\n\n        return new Promise((resolve, reject) => {\n            this.lobbyRoom.addEventListener(XMPPEvents.MUC_JOINED, () => {\n                resolve();\n\n                // send our email, as we do not handle this on initial presence we need a second one\n                if (email && !isModerator) {\n                    this.lobbyRoom.addOrReplaceInPresence(EMAIL_COMMAND, { value: email })\n                        && this.lobbyRoom.sendPresence();\n                }\n            });\n            this.lobbyRoom.addEventListener(XMPPEvents.ROOM_JOIN_ERROR, reject);\n            this.lobbyRoom.addEventListener(XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR, reject);\n            this.lobbyRoom.addEventListener(XMPPEvents.ROOM_CONNECT_ERROR, reject);\n\n            this.lobbyRoom.join();\n        });\n\n    }\n\n    /**\n     * Should be possible only for moderators.\n     * @param id\n     */\n    denyAccess(id) {\n        if (!this.isSupported() || !this.mainRoom.isModerator()) {\n            return;\n        }\n\n        const jid = Object.keys(this.lobbyRoom.members)\n            .find(j => Strophe.getResourceFromJid(j) === id);\n\n        if (jid) {\n            this.lobbyRoom.kick(jid);\n        } else {\n            logger.error(`Not found member for ${id} in lobby room.`);\n        }\n    }\n\n    /**\n     * Should be possible only for moderators.\n     * @param id\n     */\n    approveAccess(id) {\n        if (!this.isSupported() || !this.mainRoom.isModerator()) {\n            return;\n        }\n\n        // Get the main room JID. If we are in a breakout room we'll use the main\n        // room's lobby.\n        let mainRoomJid = this.mainRoom.roomjid;\n\n        if (this.mainRoom.getBreakoutRooms().isBreakoutRoom()) {\n            mainRoomJid = this.mainRoom.getBreakoutRooms().getMainRoomJid();\n        }\n\n        const memberRoomJid = Object.keys(this.lobbyRoom.members)\n            .find(j => Strophe.getResourceFromJid(j) === id);\n\n        if (memberRoomJid) {\n            const jid = this.lobbyRoom.members[memberRoomJid].jid;\n            const msgToSend\n                = $msg({ to: mainRoomJid })\n                    .c('x', { xmlns: 'http://jabber.org/protocol/muc#user' })\n                    .c('invite', { to: jid });\n\n            this.xmpp.connection.sendIQ(msgToSend,\n                () => { }, // eslint-disable-line no-empty-function\n                e => {\n                    logger.error(`Error sending invite for ${jid}`, e);\n                });\n        } else {\n            logger.error(`Not found member for ${memberRoomJid} in lobby room.`);\n        }\n    }\n}\n","import { jitsiLocalStorage } from '@jitsi/js-utils';\nimport { getLogger } from '@jitsi/logger';\n\nconst logger = getLogger(__filename);\n\nimport UsernameGenerator from '../util/UsernameGenerator';\n\nlet _callStatsUserName;\n\nlet _machineId;\n\n/**\n *\n */\nexport default {\n\n    /**\n     * The storage used to store the settings.\n     */\n    _storage: jitsiLocalStorage,\n\n    /**\n     * Initializes the Settings class.\n     *\n     * @param {Storage|undefined} externalStorage - Object that implements the Storage interface. This object will be\n     * used for storing data instead of jitsiLocalStorage if specified.\n     */\n    init(externalStorage) {\n        this._storage = externalStorage || jitsiLocalStorage;\n    },\n\n    /**\n     * Returns fake username for callstats\n     * @returns {string} fake username for callstats\n     */\n    get callStatsUserName() {\n        if (!_callStatsUserName) {\n            _callStatsUserName = this._storage.getItem('callStatsUserName');\n            if (!_callStatsUserName) {\n                _callStatsUserName = generateCallStatsUserName();\n                this._storage.setItem('callStatsUserName', _callStatsUserName);\n            }\n        }\n\n        return _callStatsUserName;\n    },\n\n    /**\n     * Returns current machine id.\n     * @returns {string} machine id\n     */\n    get machineId() {\n        if (!_machineId) {\n            const amDid = this._storage.getItem('billingId');\n\n            _machineId = amDid || this._storage.getItem('jitsiMeetId');\n\n            if (amDid) {\n                this._storage.setItem('jitsiMeetId', amDid);\n            } else if (!_machineId) {\n                _machineId = generateJitsiMeetId();\n                this._storage.setItem('jitsiMeetId', _machineId);\n            }\n        }\n\n        return _machineId;\n    },\n\n    /**\n     * Returns current session id.\n     * @returns {string} current session id\n     */\n    get sessionId() {\n        // We may update sessionId in localStorage from another JitsiConference\n        // instance and that's why we should always re-read it.\n        return this._storage.getItem('sessionId');\n    },\n\n    /**\n     * Save current session id.\n     * @param {string} sessionId session id\n     */\n    set sessionId(sessionId) {\n        if (sessionId) {\n            this._storage.setItem('sessionId', sessionId);\n        } else {\n            this._storage.removeItem('sessionId');\n        }\n    }\n};\n\n/**\n * Generate fake username for callstats.\n * @returns {string} fake random username\n */\nfunction generateCallStatsUserName() {\n    const username = UsernameGenerator.generateUsername();\n\n    logger.log('generated callstats uid', username);\n\n    return username;\n}\n\n/**\n * Generate unique id.\n * @returns {string} random unique id\n */\nfunction generateJitsiMeetId() {\n    const jitsiMeetId = generateUniqueId();\n\n    logger.log('generated id', jitsiMeetId);\n\n    return jitsiMeetId;\n}\n\n/**\n *\n */\nfunction generateUniqueId() {\n    return _p8() + _p8() + _p8() + _p8();\n}\n\n/**\n *\n */\nfunction _p8() {\n    return `${Math.random().toString(16)}000000000`.substr(2, 8);\n}\n","/* global $ */\n\nimport { getLogger } from '@jitsi/logger';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport Settings from '../settings/Settings';\n\nconst AuthenticationEvents\n    = require('../../service/authentication/AuthenticationEvents');\nconst XMPPEvents = require('../../service/xmpp/XMPPEvents');\nconst GlobalOnErrorHandler = require('../util/GlobalOnErrorHandler');\n\nconst logger = getLogger(__filename);\n\n/**\n *\n * @param step\n */\nfunction createExpBackoffTimer(step) {\n    let count = 1;\n\n    return function(reset) {\n        // Reset call\n        if (reset) {\n            count = 1;\n\n            return;\n        }\n\n        // Calculate next timeout\n        const timeout = Math.pow(2, count - 1);\n\n        count += 1;\n\n        return timeout * step;\n    };\n}\n\n/* eslint-disable max-params */\n\n/**\n *\n * @param roomName\n * @param xmpp\n * @param emitter\n * @param options\n */\nexport default function Moderator(roomName, xmpp, emitter, options) {\n    this.roomName = roomName;\n    this.xmppService = xmpp;\n    this.getNextTimeout = createExpBackoffTimer(1000);\n    this.getNextErrorTimeout = createExpBackoffTimer(1000);\n\n    // External authentication stuff\n    this.externalAuthEnabled = false;\n    this.options = options;\n\n    // Whether SIP gateway (jigasi) support is enabled. This is set\n    // based on conference properties received in presence.\n    this.sipGatewayEnabled = false;\n\n    this.eventEmitter = emitter;\n\n    this.connection = this.xmppService.connection;\n\n    // FIXME: Message listener that talks to POPUP window\n    /**\n     *\n     * @param event\n     */\n    function listener(event) {\n        if (event.data && event.data.sessionId) {\n            if (event.origin !== window.location.origin) {\n                logger.warn(\n                    `Ignoring sessionId from different origin: ${\n                        event.origin}`);\n\n                return;\n            }\n            Settings.sessionId = event.data.sessionId;\n\n            // After popup is closed we will authenticate\n        }\n    }\n\n    // Register\n    if (window.addEventListener) {\n        window.addEventListener('message', listener, false);\n    } else {\n        window.attachEvent('onmessage', listener);\n    }\n}\n\n/* eslint-enable max-params */\n\nModerator.prototype.isExternalAuthEnabled = function() {\n    return this.externalAuthEnabled;\n};\n\nModerator.prototype.isSipGatewayEnabled = function() {\n    return this.sipGatewayEnabled;\n};\n\nModerator.prototype.onMucMemberLeft = function(jid) {\n    const resource = Strophe.getResourceFromJid(jid);\n\n    if (resource === 'focus') {\n        logger.info(\n            'Focus has left the room - leaving conference');\n        this.eventEmitter.emit(XMPPEvents.FOCUS_LEFT);\n    }\n};\n\nModerator.prototype.setFocusUserJid = function(focusJid) {\n    if (!this.focusUserJid) {\n        this.focusUserJid = focusJid;\n        logger.info(`Focus jid set to:  ${this.focusUserJid}`);\n    }\n};\n\nModerator.prototype.getFocusUserJid = function() {\n    return this.focusUserJid;\n};\n\nModerator.prototype.getFocusComponent = function() {\n    // Get focus component address\n    let focusComponent = this.options.connection.hosts.focus;\n\n    // If not specified use default:  'focus.domain'\n\n    if (!focusComponent) {\n        focusComponent = `focus.${this.options.connection.hosts.domain}`;\n    }\n\n    return focusComponent;\n};\n\nModerator.prototype.createConferenceIq = function() {\n    // Generate create conference IQ\n    const elem = $iq({ to: this.getFocusComponent(),\n        type: 'set' });\n\n    // Session Id used for authentication\n    const { sessionId } = Settings;\n    const machineUID = Settings.machineId;\n    const config = this.options.conference;\n\n    logger.info(`Session ID: ${sessionId} machine UID: ${machineUID}`);\n\n    elem.c('conference', {\n        xmlns: 'http://jitsi.org/protocol/focus',\n        room: this.roomName,\n        'machine-uid': machineUID\n    });\n\n    if (sessionId) {\n        elem.attrs({ 'session-id': sessionId });\n    }\n\n    elem.c(\n        'property', {\n            name: 'disableRtx',\n            value: Boolean(config.disableRtx)\n        }).up();\n\n    if (config.audioPacketDelay !== undefined) {\n        elem.c(\n            'property', {\n                name: 'audioPacketDelay',\n                value: config.audioPacketDelay\n            }).up();\n    }\n    if (config.startBitrate) {\n        elem.c(\n            'property', {\n                name: 'startBitrate',\n                value: config.startBitrate\n            }).up();\n    }\n    if (config.minBitrate) {\n        elem.c(\n            'property', {\n                name: 'minBitrate',\n                value: config.minBitrate\n            }).up();\n    }\n\n    if (this.options.conference.startAudioMuted !== undefined) {\n        elem.c(\n            'property', {\n                name: 'startAudioMuted',\n                value: this.options.conference.startAudioMuted\n            }).up();\n    }\n    if (this.options.conference.startVideoMuted !== undefined) {\n        elem.c(\n            'property', {\n                name: 'startVideoMuted',\n                value: this.options.conference.startVideoMuted\n            }).up();\n    }\n\n    // this flag determines whether the bridge will include this call in its\n    // rtcstats reporting or not. If the site admin hasn't set the flag in\n    // config.js, then the client defaults to false (see\n    // react/features/rtcstats/functions.js in jitsi-meet). The server-side\n    // components default to true to match the pre-existing behavior so we only\n    // signal if false.\n    const rtcstatsEnabled = this.options.conference?.analytics?.rtcstatsEnabled ?? false;\n\n    if (!rtcstatsEnabled) {\n        elem.c(\n            'property', {\n                name: 'rtcstatsEnabled',\n                value: rtcstatsEnabled\n            }).up();\n    }\n\n    const { callStatsID, callStatsSecret, disableThirdPartyRequests, enableCallStats } = this.options.conference;\n    const callstatsDisabled = !callStatsID || !callStatsSecret || !enableCallStats\n\n        // Even though AppID and AppSecret may be specified, the integration\n        // of callstats.io may be disabled because of globally-disallowed\n        // requests to any third parties.\n        || disableThirdPartyRequests === true;\n\n    // since the default is true across all the server-side components, only signal if false.\n    if (callstatsDisabled) {\n        elem.c(\n            'property', {\n                name: 'callstatsEnabled',\n                value: !callstatsDisabled\n            }).up();\n    }\n    elem.up();\n\n    return elem;\n};\n\n\nModerator.prototype.parseSessionId = function(resultIq) {\n    // eslint-disable-next-line newline-per-chained-call\n    const sessionId = $(resultIq).find('conference').attr('session-id');\n\n    if (sessionId) {\n        logger.info(`Received sessionId:  ${sessionId}`);\n        Settings.sessionId = sessionId;\n    }\n};\n\nModerator.prototype.parseConfigOptions = function(resultIq) {\n    // eslint-disable-next-line newline-per-chained-call\n    this.setFocusUserJid($(resultIq).find('conference').attr('focusjid'));\n\n    const authenticationEnabled\n        = $(resultIq).find(\n            '>conference>property'\n            + '[name=\\'authentication\\'][value=\\'true\\']').length > 0;\n\n    logger.info(`Authentication enabled: ${authenticationEnabled}`);\n\n    this.externalAuthEnabled = $(resultIq).find(\n        '>conference>property'\n            + '[name=\\'externalAuth\\'][value=\\'true\\']').length > 0;\n\n    logger.info(\n        `External authentication enabled: ${this.externalAuthEnabled}`);\n\n    if (!this.externalAuthEnabled) {\n        // We expect to receive sessionId in 'internal' authentication mode\n        this.parseSessionId(resultIq);\n    }\n\n    // eslint-disable-next-line newline-per-chained-call\n    const authIdentity = $(resultIq).find('>conference').attr('identity');\n\n    this.eventEmitter.emit(AuthenticationEvents.IDENTITY_UPDATED,\n        authenticationEnabled, authIdentity);\n\n    // Check if jicofo has jigasi support enabled.\n    if ($(resultIq).find(\n        '>conference>property'\n        + '[name=\\'sipGatewayEnabled\\'][value=\\'true\\']').length) {\n        this.sipGatewayEnabled = true;\n    }\n\n    logger.info(`Sip gateway enabled:  ${this.sipGatewayEnabled}`);\n};\n\n// FIXME We need to show the fact that we're waiting for the focus to the user\n// (or that the focus is not available)\n/**\n * Allocates the conference focus.\n *\n * @param {Function} callback - the function to be called back upon the\n * successful allocation of the conference focus\n * @returns {Promise} - Resolved when Jicofo allows to join the room. It's never\n * rejected and it'll keep on pinging Jicofo forever.\n */\nModerator.prototype.allocateConferenceFocus = function() {\n    return new Promise(resolve => {\n        // Try to use focus user JID from the config\n        this.setFocusUserJid(this.options.connection.focusUserJid);\n\n        // Send create conference IQ\n        this.connection.sendIQ(\n            this.createConferenceIq(),\n            result => this._allocateConferenceFocusSuccess(result, resolve),\n            error => this._allocateConferenceFocusError(error, resolve));\n\n        // XXX We're pressed for time here because we're beginning a complex\n        // and/or lengthy conference-establishment process which supposedly\n        // involves multiple RTTs. We don't have the time to wait for Strophe to\n        // decide to send our IQ.\n        this.connection.flush();\n    });\n};\n\n/**\n * Invoked by {@link #allocateConferenceFocus} upon its request receiving an\n * error result.\n *\n * @param error - the error result of the request that\n * {@link #allocateConferenceFocus} sent\n * @param {Function} callback - the function to be called back upon the\n * successful allocation of the conference focus\n */\nModerator.prototype._allocateConferenceFocusError = function(error, callback) {\n    // If the session is invalid, remove and try again without session ID to get\n    // a new one\n    const invalidSession\n        = $(error).find('>error>session-invalid').length\n            || $(error).find('>error>not-acceptable').length;\n\n    if (invalidSession) {\n        logger.info('Session expired! - removing');\n        Settings.sessionId = undefined;\n    }\n    if ($(error).find('>error>graceful-shutdown').length) {\n        this.eventEmitter.emit(XMPPEvents.GRACEFUL_SHUTDOWN);\n\n        return;\n    }\n\n    // Check for error returned by the reservation system\n    const reservationErr = $(error).find('>error>reservation-error');\n\n    if (reservationErr.length) {\n        // Trigger error event\n        const errorCode = reservationErr.attr('error-code');\n        const errorTextNode = $(error).find('>error>text');\n        let errorMsg;\n\n        if (errorTextNode) {\n            errorMsg = errorTextNode.text();\n        }\n        this.eventEmitter.emit(\n            XMPPEvents.RESERVATION_ERROR,\n            errorCode,\n            errorMsg);\n\n        return;\n    }\n\n    // Not authorized to create new room\n    if ($(error).find('>error>not-authorized').length) {\n        logger.warn('Unauthorized to start the conference', error);\n        const toDomain = Strophe.getDomainFromJid(error.getAttribute('to'));\n\n        if (toDomain !== this.options.connection.hosts.anonymousdomain) {\n            // FIXME \"is external\" should come either from the focus or\n            // config.js\n            this.externalAuthEnabled = true;\n        }\n        this.eventEmitter.emit(XMPPEvents.AUTHENTICATION_REQUIRED);\n\n        return;\n    }\n    const waitMs = this.getNextErrorTimeout();\n    const errmsg = `Focus error, retry after ${waitMs}`;\n\n    GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n    logger.error(errmsg, error);\n\n    // Show message\n    const focusComponent = this.getFocusComponent();\n    const retrySec = waitMs / 1000;\n\n    // FIXME: message is duplicated ? Do not show in case of session invalid\n    // which means just a retry\n\n    if (!invalidSession) {\n        this.eventEmitter.emit(\n            XMPPEvents.FOCUS_DISCONNECTED,\n            focusComponent,\n            retrySec);\n    }\n\n    // Reset response timeout\n    this.getNextTimeout(true);\n    window.setTimeout(\n        () => this.allocateConferenceFocus().then(callback),\n        waitMs);\n};\n\n/**\n * Invoked by {@link #allocateConferenceFocus} upon its request receiving a\n * success (i.e. non-error) result.\n *\n * @param result - the success (i.e. non-error) result of the request that\n * {@link #allocateConferenceFocus} sent\n * @param {Function} callback - the function to be called back upon the\n * successful allocation of the conference focus\n */\nModerator.prototype._allocateConferenceFocusSuccess = function(\n        result,\n        callback) {\n    // Setup config options\n    this.parseConfigOptions(result);\n\n    // Reset the error timeout (because we haven't failed here).\n    this.getNextErrorTimeout(true);\n\n    // eslint-disable-next-line newline-per-chained-call\n    if ($(result).find('conference').attr('ready') === 'true') {\n        // Reset the non-error timeout (because we've succeeded here).\n        this.getNextTimeout(true);\n\n        // Exec callback\n        callback();\n    } else {\n        const waitMs = this.getNextTimeout();\n\n        logger.info(`Waiting for the focus... ${waitMs}`);\n        window.setTimeout(\n            () => this.allocateConferenceFocus().then(callback),\n            waitMs);\n    }\n};\n\nModerator.prototype.authenticate = function() {\n    return new Promise((resolve, reject) => {\n        this.connection.sendIQ(\n            this.createConferenceIq(),\n            result => {\n                this.parseSessionId(result);\n                resolve();\n            },\n            errorIq => reject({\n                error: $(errorIq).find('iq>error :first')\n                    .prop('tagName'),\n                message: $(errorIq).find('iq>error>text')\n                    .text()\n            })\n        );\n    });\n};\n\nModerator.prototype.getLoginUrl = function(urlCallback, failureCallback) {\n    this._getLoginUrl(/* popup */ false, urlCallback, failureCallback);\n};\n\n/**\n *\n * @param {boolean} popup false for {@link Moderator#getLoginUrl} or true for\n * {@link Moderator#getPopupLoginUrl}\n * @param urlCb\n * @param failureCb\n */\nModerator.prototype._getLoginUrl = function(popup, urlCb, failureCb) {\n    const iq = $iq({ to: this.getFocusComponent(),\n        type: 'get' });\n    const attrs = {\n        xmlns: 'http://jitsi.org/protocol/focus',\n        room: this.roomName,\n        'machine-uid': Settings.machineId\n    };\n    let str = 'auth url'; // for logger\n\n    if (popup) {\n        attrs.popup = true;\n        str = `POPUP ${str}`;\n    }\n    iq.c('login-url', attrs);\n\n    /**\n     * Implements a failure callback which reports an error message and an error\n     * through (1) GlobalOnErrorHandler, (2) logger, and (3) failureCb.\n     *\n     * @param {string} errmsg the error messsage to report\n     * @param {*} error the error to report (in addition to errmsg)\n     */\n    function reportError(errmsg, err) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n        logger.error(errmsg, err);\n        failureCb(err);\n    }\n    this.connection.sendIQ(\n        iq,\n        result => {\n            // eslint-disable-next-line newline-per-chained-call\n            let url = $(result).find('login-url').attr('url');\n\n            url = decodeURIComponent(url);\n            if (url) {\n                logger.info(`Got ${str}: ${url}`);\n                urlCb(url);\n            } else {\n                reportError(`Failed to get ${str} from the focus`, result);\n            }\n        },\n        reportError.bind(undefined, `Get ${str} error`)\n    );\n};\n\nModerator.prototype.getPopupLoginUrl = function(urlCallback, failureCallback) {\n    this._getLoginUrl(/* popup */ true, urlCallback, failureCallback);\n};\n\nModerator.prototype.logout = function(callback) {\n    const iq = $iq({ to: this.getFocusComponent(),\n        type: 'set' });\n    const { sessionId } = Settings;\n\n    if (!sessionId) {\n        callback();\n\n        return;\n    }\n    iq.c('logout', {\n        xmlns: 'http://jitsi.org/protocol/focus',\n        'session-id': sessionId\n    });\n    this.connection.sendIQ(\n        iq,\n        result => {\n            // eslint-disable-next-line newline-per-chained-call\n            let logoutUrl = $(result).find('logout').attr('logout-url');\n\n            if (logoutUrl) {\n                logoutUrl = decodeURIComponent(logoutUrl);\n            }\n            logger.info(`Log out OK, url: ${logoutUrl}`, result);\n            Settings.sessionId = undefined;\n            callback(logoutUrl);\n        },\n        error => {\n            const errmsg = 'Logout error';\n\n            GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n            logger.error(errmsg, error);\n        }\n    );\n};\n","/* global $ */\n\nimport { getLogger } from '@jitsi/logger';\nimport isEqual from 'lodash.isequal';\nimport { $iq, $msg, $pres, Strophe } from 'strophe.js';\n\nimport * as JitsiTranscriptionStatus from '../../JitsiTranscriptionStatus';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport Listenable from '../util/Listenable';\n\nimport AVModeration from './AVModeration';\nimport BreakoutRooms from './BreakoutRooms';\nimport Lobby from './Lobby';\nimport XmppConnection from './XmppConnection';\nimport Moderator from './moderator';\n\nconst logger = getLogger(__filename);\n\nexport const parser = {\n    packet2JSON(xmlElement, nodes) {\n        for (const child of Array.from(xmlElement.children)) {\n            const node = {\n                attributes: {},\n                children: [],\n                tagName: child.tagName\n            };\n\n            for (const attr of Array.from(child.attributes)) {\n                node.attributes[attr.name] = attr.value;\n            }\n            const text = Strophe.getText(child);\n\n            if (text) {\n                // Using Strophe.getText will do work for traversing all direct\n                // child text nodes but returns an escaped value, which is not\n                // desirable at this point.\n                node.value = Strophe.xmlunescape(text);\n            }\n            nodes.push(node);\n            this.packet2JSON(child, node.children);\n        }\n    },\n    json2packet(nodes, packet) {\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n\n            if (node) {\n                packet.c(node.tagName, node.attributes);\n                if (node.value) {\n                    packet.t(node.value);\n                }\n                if (node.children) {\n                    this.json2packet(node.children, packet);\n                }\n                packet.up();\n            }\n        }\n\n        // packet.up();\n    }\n};\n\n/**\n * Returns array of JS objects from the presence JSON associated with the passed\n / nodeName\n * @param pres the presence JSON\n * @param nodeName the name of the node (videomuted, audiomuted, etc)\n */\nexport function filterNodeFromPresenceJSON(pres, nodeName) {\n    const res = [];\n\n    for (let i = 0; i < pres.length; i++) {\n        if (pres[i].tagName === nodeName) {\n            res.push(pres[i]);\n        }\n    }\n\n    return res;\n}\n\n// XXX As ChatRoom constructs XMPP stanzas and Strophe is build around the idea\n// of chaining function calls, allow long function call chains.\n/* eslint-disable newline-per-chained-call */\n\n/**\n * Array of affiliations that are allowed in members only room.\n * @type {string[]}\n */\nconst MEMBERS_AFFILIATIONS = [ 'owner', 'admin', 'member' ];\n\n/**\n *\n */\nexport default class ChatRoom extends Listenable {\n\n    /* eslint-disable max-params */\n\n    /**\n     *\n     * @param {XmppConnection} connection - The XMPP connection instance.\n     * @param jid\n     * @param password\n     * @param XMPP\n     * @param options\n     * @param {boolean} options.disableFocus - when set to {@code false} will\n     * not invite Jicofo into the room.\n     * @param {boolean} options.disableDiscoInfo - when set to {@code false} will skip disco info.\n     * This is intended to be used only for lobby rooms.\n     * @param {boolean} options.enableLobby - when set to {@code false} will skip creating lobby room.\n     */\n    constructor(connection, jid, password, XMPP, options) {\n        super();\n        this.xmpp = XMPP;\n        this.connection = connection;\n        this.roomjid = Strophe.getBareJidFromJid(jid);\n        this.myroomjid = jid;\n        this.password = password;\n        this.replaceParticipant = false;\n        logger.info(`Joined MUC as ${this.myroomjid}`);\n        this.members = {};\n        this.presMap = {};\n        this.presHandlers = {};\n        this._removeConnListeners = [];\n        this.joined = false;\n        this.inProgressEmitted = false;\n        this.role = null;\n        this.focusMucJid = null;\n        this.noBridgeAvailable = false;\n        this.options = options || {};\n        this.moderator\n            = new Moderator(this.roomjid, this.xmpp, this.eventEmitter, {\n                connection: this.xmpp.options,\n                conference: this.options\n            });\n        if (typeof this.options.enableLobby === 'undefined' || this.options.enableLobby) {\n            this.lobby = new Lobby(this);\n        }\n        this.avModeration = new AVModeration(this);\n        this.breakoutRooms = new BreakoutRooms(this);\n        this.initPresenceMap(options);\n        this.lastPresences = {};\n        this.phoneNumber = null;\n        this.phonePin = null;\n        this.connectionTimes = {};\n        this.participantPropertyListener = null;\n\n        this.locked = false;\n        this.transcriptionStatus = JitsiTranscriptionStatus.OFF;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     *\n     */\n    initPresenceMap(options = {}) {\n        this.presMap.to = this.myroomjid;\n        this.presMap.xns = 'http://jabber.org/protocol/muc';\n        this.presMap.nodes = [];\n\n        if (options.statsId) {\n            this.presMap.nodes.push({\n                'tagName': 'stats-id',\n                'value': options.statsId\n            });\n        }\n\n        this.presenceUpdateTime = Date.now();\n    }\n\n    /**\n     * Joins the chat room.\n     * @param {string} password - Password to unlock room on joining.\n     * @returns {Promise} - resolved when join completes. At the time of this\n     * writing it's never rejected.\n     */\n    join(password, replaceParticipant) {\n        this.password = password;\n        this.replaceParticipant = replaceParticipant;\n\n        return new Promise(resolve => {\n            this.options.disableFocus\n                && logger.info(`Conference focus disabled for ${this.roomjid}`);\n\n            const preJoin\n                = this.options.disableFocus\n                    ? Promise.resolve()\n                    : this.moderator.allocateConferenceFocus();\n\n            preJoin.then(() => {\n                this.sendPresence(true);\n                this._removeConnListeners.push(\n                    this.connection.addEventListener(\n                        XmppConnection.Events.CONN_STATUS_CHANGED,\n                        this.onConnStatusChanged.bind(this))\n                );\n                resolve();\n            });\n        });\n    }\n\n    /**\n     *\n     * @param fromJoin - Whether this is initial presence to join the room.\n     */\n    sendPresence(fromJoin) {\n        const to = this.presMap.to;\n\n        if (!this.connection || !this.connection.connected || !to || (!this.joined && !fromJoin)) {\n            // Too early to send presence - not initialized\n            return;\n        }\n\n        const pres = $pres({ to });\n\n        // xep-0045 defines: \"including in the initial presence stanza an empty\n        // <x/> element qualified by the 'http://jabber.org/protocol/muc'\n        // namespace\" and subsequent presences should not include that or it can\n        // be considered as joining, and server can send us the message history\n        // for the room on every presence\n        if (fromJoin) {\n            if (this.replaceParticipant) {\n                pres.c('flip_device').up();\n            }\n\n            pres.c('x', { xmlns: this.presMap.xns });\n\n            if (this.password) {\n                pres.c('password').t(this.password).up();\n            }\n            if (this.options.billingId) {\n                pres.c('billingid').t(this.options.billingId).up();\n            }\n\n            pres.up();\n        }\n\n        parser.json2packet(this.presMap.nodes, pres);\n\n        // we store time we last synced presence state\n        this.presenceSyncTime = Date.now();\n\n        this.connection.send(pres);\n        if (fromJoin) {\n            // XXX We're pressed for time here because we're beginning a complex\n            // and/or lengthy conference-establishment process which supposedly\n            // involves multiple RTTs. We don't have the time to wait for\n            // Strophe to decide to send our IQ.\n            this.connection.flush();\n        }\n    }\n\n    /**\n     * Sends the presence unavailable, signaling the server\n     * we want to leave the room.\n     */\n    doLeave() {\n        logger.log('do leave', this.myroomjid);\n        const pres = $pres({ to: this.myroomjid,\n            type: 'unavailable' });\n\n        this.presMap.length = 0;\n\n        // XXX Strophe is asynchronously sending by default. Unfortunately, that\n        // means that there may not be enough time to send the unavailable\n        // presence. Switching Strophe to synchronous sending is not much of an\n        // option because it may lead to a noticeable delay in navigating away\n        // from the current location. As a compromise, we will try to increase\n        // the chances of sending the unavailable presence within the short time\n        // span that we have upon unloading by invoking flush() on the\n        // connection. We flush() once before sending/queuing the unavailable\n        // presence in order to attemtp to have the unavailable presence at the\n        // top of the send queue. We flush() once more after sending/queuing the\n        // unavailable presence in order to attempt to have it sent as soon as\n        // possible.\n        // FIXME do not use Strophe.Connection in the ChatRoom directly\n        !this.connection.isUsingWebSocket && this.connection.flush();\n        this.connection.send(pres);\n        this.connection.flush();\n    }\n\n    /**\n     *\n     */\n    discoRoomInfo() {\n        // https://xmpp.org/extensions/xep-0045.html#disco-roominfo\n\n        const getInfo\n            = $iq({\n                type: 'get',\n                to: this.roomjid\n            })\n                .c('query', { xmlns: Strophe.NS.DISCO_INFO });\n\n        this.connection.sendIQ(getInfo, result => {\n            const locked\n                = $(result).find('>query>feature[var=\"muc_passwordprotected\"]')\n                    .length\n                    === 1;\n\n            if (locked !== this.locked) {\n                this.eventEmitter.emit(XMPPEvents.MUC_LOCK_CHANGED, locked);\n                this.locked = locked;\n            }\n\n            const meetingIdValEl\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_meetingId\"]>value');\n\n            if (meetingIdValEl.length) {\n                this.setMeetingId(meetingIdValEl.text());\n            } else {\n                logger.warn('No meeting ID from backend');\n            }\n\n            const membersOnly = $(result).find('>query>feature[var=\"muc_membersonly\"]').length === 1;\n\n            const lobbyRoomField\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_lobbyroom\"]>value');\n\n            if (this.lobby) {\n                this.lobby.setLobbyRoomJid(lobbyRoomField && lobbyRoomField.length ? lobbyRoomField.text() : undefined);\n            }\n\n            const isBreakoutField\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_isbreakout\"]>value');\n            const isBreakoutRoom = Boolean(isBreakoutField?.text());\n\n            this.breakoutRooms._setIsBreakoutRoom(isBreakoutRoom);\n\n            const breakoutMainRoomField\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_breakout_main_room\"]>value');\n\n            if (breakoutMainRoomField?.length) {\n                this.breakoutRooms._setMainRoomJid(breakoutMainRoomField.text());\n            }\n\n            if (membersOnly !== this.membersOnlyEnabled) {\n                this.membersOnlyEnabled = membersOnly;\n                this.eventEmitter.emit(XMPPEvents.MUC_MEMBERS_ONLY_CHANGED, membersOnly);\n            }\n\n        }, error => {\n            GlobalOnErrorHandler.callErrorHandler(error);\n            logger.error('Error getting room info: ', error);\n        });\n    }\n\n    /**\n     * Sets the meeting unique Id (received from the backend).\n     *\n     * @param {string} meetingId - The new meetings id.\n     * @returns {void}\n     */\n    setMeetingId(meetingId) {\n        if (this.meetingId !== meetingId) {\n            if (this.meetingId) {\n                logger.warn(`Meeting Id changed from:${this.meetingId} to:${meetingId}`);\n            }\n            this.meetingId = meetingId;\n            this.eventEmitter.emit(XMPPEvents.MEETING_ID_SET, meetingId);\n        }\n    }\n\n    /**\n     *\n     */\n    createNonAnonymousRoom() {\n        // http://xmpp.org/extensions/xep-0045.html#createroom-reserved\n\n        if (this.options.disableDiscoInfo) {\n            return;\n        }\n\n        const getForm = $iq({ type: 'get',\n            to: this.roomjid })\n            .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' })\n            .c('x', { xmlns: 'jabber:x:data',\n                type: 'submit' });\n\n        this.connection.sendIQ(getForm, form => {\n            if (!$(form).find(\n                    '>query>x[xmlns=\"jabber:x:data\"]'\n                    + '>field[var=\"muc#roomconfig_whois\"]').length) {\n                const errmsg = 'non-anonymous rooms not supported';\n\n                GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n                logger.error(errmsg);\n\n                return;\n            }\n\n            const formSubmit = $iq({ to: this.roomjid,\n                type: 'set' })\n                .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' });\n\n            formSubmit.c('x', { xmlns: 'jabber:x:data',\n                type: 'submit' });\n\n            formSubmit.c('field', { 'var': 'FORM_TYPE' })\n                .c('value')\n                .t('http://jabber.org/protocol/muc#roomconfig').up().up();\n\n            formSubmit.c('field', { 'var': 'muc#roomconfig_whois' })\n                .c('value').t('anyone').up().up();\n\n            this.connection.sendIQ(formSubmit);\n\n        }, error => {\n            GlobalOnErrorHandler.callErrorHandler(error);\n            logger.error('Error getting room configuration form: ', error);\n        });\n    }\n\n    /**\n     * Handles Xmpp Connection status updates.\n     *\n     * @param {Strophe.Status} status - The Strophe connection status.\n     */\n    onConnStatusChanged(status) {\n        // Send cached presence when the XMPP connection is re-established.\n        if (status === XmppConnection.Status.CONNECTED) {\n            this.sendPresence();\n        }\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresence(pres) {\n        const from = pres.getAttribute('from');\n        const member = {};\n        const statusEl = pres.getElementsByTagName('status')[0];\n\n        if (statusEl) {\n            member.status = statusEl.textContent || '';\n        }\n        let hasStatusUpdate = false;\n        let hasVersionUpdate = false;\n        const xElement\n            = pres.getElementsByTagNameNS(\n                'http://jabber.org/protocol/muc#user', 'x')[0];\n        const mucUserItem\n            = xElement && xElement.getElementsByTagName('item')[0];\n\n        member.isReplaceParticipant\n            = pres.getElementsByTagName('flip_device').length;\n\n        member.affiliation\n            = mucUserItem && mucUserItem.getAttribute('affiliation');\n        member.role = mucUserItem && mucUserItem.getAttribute('role');\n\n        // Focus recognition\n        const jid = mucUserItem && mucUserItem.getAttribute('jid');\n\n        member.jid = jid;\n        member.isFocus\n            = jid && jid.indexOf(`${this.moderator.getFocusUserJid()}/`) === 0;\n        member.isHiddenDomain\n            = jid && jid.indexOf('@') > 0\n                && this.options.hiddenDomain\n                    === jid.substring(jid.indexOf('@') + 1, jid.indexOf('/'));\n\n        const isTranscriber = pres.getElementsByTagName('nick');\n\n        if (isTranscriber[0] && isTranscriber[0].innerHTML.toLowerCase() === \"transcriber\") {\n              member.isHiddenDomain = true;\n        }\n        \n        this.eventEmitter.emit(XMPPEvents.PRESENCE_RECEIVED, {\n            fromHiddenDomain: member.isHiddenDomain,\n            presence: pres\n        });\n\n        const xEl = pres.querySelector('x');\n\n        if (xEl) {\n            xEl.remove();\n        }\n\n        const nodes = [];\n\n        parser.packet2JSON(pres, nodes);\n        this.lastPresences[from] = nodes;\n\n        // process nodes to extract data needed for MUC_JOINED and\n        // MUC_MEMBER_JOINED events\n        const extractIdentityInformation = node => {\n            const identity = {};\n            const userInfo = node.children.find(c => c.tagName === 'user');\n\n            if (userInfo) {\n                identity.user = {};\n                for (const tag of [ 'id', 'name', 'avatar' ]) {\n                    const child\n                        = userInfo.children.find(c => c.tagName === tag);\n\n                    if (child) {\n                        identity.user[tag] = child.value;\n                    }\n                }\n            }\n            const groupInfo = node.children.find(c => c.tagName === 'group');\n\n            if (groupInfo) {\n                identity.group = groupInfo.value;\n            }\n\n            return identity;\n        };\n\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n\n            switch (node.tagName) {\n            case 'bot': {\n                const { attributes } = node;\n\n                if (!attributes) {\n                    break;\n                }\n                const { type } = attributes;\n\n                member.botType = type;\n                break;\n            }\n            case 'nick':\n                member.nick = node.value;\n                break;\n            case 'userId':\n                member.id = node.value;\n                break;\n            case 'stats-id':\n                member.statsID = node.value;\n                break;\n            case 'identity':\n                member.identity = extractIdentityInformation(node);\n                break;\n            case 'features': {\n                member.features = this._extractFeatures(node);\n                break;\n            }\n            case 'stat': {\n                const { attributes } = node;\n\n                if (!attributes) {\n                    break;\n                }\n                const { name } = attributes;\n\n                if (name === 'version') {\n                    member.version = attributes.value;\n                }\n                break;\n            }\n            }\n        }\n\n        if (!this.joined && !this.inProgressEmitted) {\n            const now = this.connectionTimes['muc.join.started'] = window.performance.now();\n\n            logger.log('(TIME) MUC join started:\\t', now);\n\n            this.eventEmitter.emit(XMPPEvents.MUC_JOIN_IN_PROGRESS);\n            this.inProgressEmitted = true;\n        }\n\n        if (from === this.myroomjid) {\n            const newRole\n                = member.affiliation === 'owner' ? member.role : 'none';\n\n            if (this.role !== newRole) {\n                this.role = newRole;\n                this.eventEmitter.emit(\n                    XMPPEvents.LOCAL_ROLE_CHANGED,\n                    this.role);\n            }\n            if (!this.joined) {\n                this.joined = true;\n                const now = this.connectionTimes['muc.joined']\n                    = window.performance.now();\n\n                logger.log('(TIME) MUC joined:\\t', now);\n\n                // set correct initial state of locked\n                if (this.password) {\n                    this.locked = true;\n                }\n\n                // Re-send presence in case any presence updates were added,\n                // but blocked from sending, during the join process.\n                // send the presence only if there was a modification after we had synced it\n                if (this.presenceUpdateTime >= this.presenceSyncTime) {\n                    this.sendPresence();\n                }\n\n                this.eventEmitter.emit(XMPPEvents.MUC_JOINED);\n\n                // Now let's check the disco-info to retrieve the\n                // meeting Id if any\n                !this.options.disableDiscoInfo && this.discoRoomInfo();\n            }\n        } else if (jid === undefined) {\n            logger.info('Ignoring member with undefined JID');\n        } else if (this.members[from] === undefined) {\n            // new participant\n            this.members[from] = member;\n            logger.log('entered', from, member);\n            hasStatusUpdate = member.status !== undefined;\n            hasVersionUpdate = member.version !== undefined;\n            if (member.isFocus) {\n                this._initFocus(from, member.features);\n            } else {\n                // identity is being added to member joined, so external\n                // services can be notified for that (currently identity is\n                // not used inside library)\n                this.eventEmitter.emit(\n                    XMPPEvents.MUC_MEMBER_JOINED,\n                    from,\n                    member.nick,\n                    member.role,\n                    member.isHiddenDomain,\n                    member.statsID,\n                    member.status,\n                    member.identity,\n                    member.botType,\n                    member.jid,\n                    member.features,\n                    member.isReplaceParticipant);\n\n                // we are reporting the status with the join\n                // so we do not want a second event about status update\n                hasStatusUpdate = false;\n            }\n        } else {\n            // Presence update for existing participant\n            // Watch role change:\n            const memberOfThis = this.members[from];\n\n            if (memberOfThis.role !== member.role) {\n                memberOfThis.role = member.role;\n                this.eventEmitter.emit(\n                    XMPPEvents.MUC_ROLE_CHANGED, from, member.role);\n            }\n\n            // affiliation changed\n            if (memberOfThis.affiliation !== member.affiliation) {\n                memberOfThis.affiliation = member.affiliation;\n            }\n\n            // fire event that botType had changed\n            if (memberOfThis.botType !== member.botType) {\n                memberOfThis.botType = member.botType;\n                this.eventEmitter.emit(\n                    XMPPEvents.MUC_MEMBER_BOT_TYPE_CHANGED,\n                    from,\n                    member.botType);\n            }\n\n            if (member.isFocus) {\n                // From time to time first few presences of the focus are not\n                // containing it's jid. That way we can mark later the focus\n                // member instead of not marking it at all and not starting the\n                // conference.\n                // FIXME: Maybe there is a better way to handle this issue. It\n                // seems there is some period of time in prosody that the\n                // configuration form is received but not applied. And if any\n                // participant joins during that period of time the first\n                // presence from the focus won't contain\n                // <item jid=\"focus...\" />.\n                // By default we are disabling the waiting for form submission in order to use the room\n                // and we had enabled by default that jids are public in the room ,\n                // so this case should not happen, if public jid is turned off we will receive the jid\n                // when we become moderator in the room\n                memberOfThis.isFocus = true;\n                this._initFocus(from, member.features);\n            }\n\n            // store the new display name\n            if (member.displayName) {\n                memberOfThis.displayName = member.displayName;\n            }\n\n            // update stored status message to be able to detect changes\n            if (memberOfThis.status !== member.status) {\n                hasStatusUpdate = true;\n                memberOfThis.status = member.status;\n            }\n\n            if (memberOfThis.version !== member.version) {\n                hasVersionUpdate = true;\n                memberOfThis.version = member.version;\n            }\n\n            if (!isEqual(memberOfThis.features, member.features)) {\n                memberOfThis.features = member.features;\n                this.eventEmitter.emit(XMPPEvents.PARTICIPANT_FEATURES_CHANGED, from, member.features);\n            }\n        }\n\n        // after we had fired member or room joined events, lets fire events\n        // for the rest info we got in presence\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n\n            switch (node.tagName) {\n            case 'nick':\n                if (!member.isFocus) {\n                    const displayName\n                        = this.xmpp.options.displayJids\n                            ? Strophe.getResourceFromJid(from)\n                            : member.nick;\n\n                    this.eventEmitter.emit(\n                        XMPPEvents.DISPLAY_NAME_CHANGED,\n                        from,\n                        displayName);\n                }\n                break;\n            case 'bridgeNotAvailable':\n                if (member.isFocus && !this.noBridgeAvailable) {\n                    this.noBridgeAvailable = true;\n                    this.eventEmitter.emit(XMPPEvents.BRIDGE_DOWN);\n                }\n                break;\n            case 'conference-properties':\n                if (member.isFocus) {\n                    const properties = {};\n\n                    for (let j = 0; j < node.children.length; j++) {\n                        const { attributes } = node.children[j];\n\n                        if (attributes && attributes.key) {\n                            properties[attributes.key] = attributes.value;\n                        }\n                    }\n\n                    this.eventEmitter.emit(XMPPEvents.CONFERENCE_PROPERTIES_CHANGED, properties);\n\n                    // Log if Jicofo supports restart by terminate only once. This conference property does not change\n                    // during the call.\n                    if (typeof this.restartByTerminateSupported === 'undefined') {\n                        this.restartByTerminateSupported = properties['support-terminate-restart'] === 'true';\n                        logger.info(`Jicofo supports restart by terminate: ${this.supportsRestartByTerminate()}`);\n                    }\n                }\n                break;\n            case 'transcription-status': {\n                const { attributes } = node;\n\n                if (!attributes) {\n                    break;\n                }\n\n                const { status } = attributes;\n\n                if (status && status !== this.transcriptionStatus) {\n                    this.transcriptionStatus = status;\n                    this.eventEmitter.emit(\n                        XMPPEvents.TRANSCRIPTION_STATUS_CHANGED,\n                        status\n                    );\n                }\n\n\n                break;\n            }\n            case 'call-control': {\n                const att = node.attributes;\n\n                if (!att) {\n                    break;\n                }\n                this.phoneNumber = att.phone || null;\n                this.phonePin = att.pin || null;\n                this.eventEmitter.emit(XMPPEvents.PHONE_NUMBER_CHANGED);\n                break;\n            }\n            default:\n                this.processNode(node, from);\n            }\n        }\n\n        // Trigger status message update if necessary\n        if (hasStatusUpdate) {\n            this.eventEmitter.emit(\n                XMPPEvents.PRESENCE_STATUS,\n                from,\n                member.status);\n        }\n\n        if (hasVersionUpdate) {\n            logger.info(`Received version for ${jid}: ${member.version}`);\n        }\n    }\n\n    /**\n     * Extracts the features from the presence.\n     * @param node the node to process.\n     * @return features the Set of features where extracted data is added.\n     * @private\n     */\n    _extractFeatures(node) {\n        const features = new Set();\n\n        for (let j = 0; j < node.children.length; j++) {\n            const { attributes } = node.children[j];\n\n            if (attributes && attributes.var) {\n                features.add(attributes.var);\n            }\n        }\n\n        return features;\n    }\n\n    /**\n     * Initialize some properties when the focus participant is verified.\n     * @param from jid of the focus\n     * @param features the features reported in jicofo presence\n     */\n    _initFocus(from, features) {\n        this.focusMucJid = from;\n        this.focusFeatures = features;\n    }\n\n    /**\n     * Sets the special listener to be used for \"command\"s whose name starts\n     * with \"jitsi_participant_\".\n     */\n    setParticipantPropertyListener(listener) {\n        this.participantPropertyListener = listener;\n    }\n\n    /**\n     * Checks if Jicofo supports restarting Jingle session after 'session-terminate'.\n     * @returns {boolean}\n     */\n    supportsRestartByTerminate() {\n        return this.restartByTerminateSupported;\n    }\n\n    /**\n     *\n     * @param node\n     * @param from\n     */\n    processNode(node, from) {\n        // make sure we catch all errors coming from any handler\n        // otherwise we can remove the presence handler from strophe\n        try {\n            let tagHandlers = this.presHandlers[node.tagName];\n\n            if (node.tagName.startsWith('jitsi_participant_')) {\n                tagHandlers = [ this.participantPropertyListener ];\n            }\n\n            if (tagHandlers) {\n                tagHandlers.forEach(handler => {\n                    handler(node, Strophe.getResourceFromJid(from), from);\n                });\n            }\n        } catch (e) {\n            GlobalOnErrorHandler.callErrorHandler(e);\n            logger.error(`Error processing:${node.tagName} node.`, e);\n        }\n    }\n\n    /**\n     * Send text message to the other participants in the conference\n     * @param message\n     * @param elementName\n     */\n    sendMessage(message, elementName) {\n        const msg = $msg({ to: this.roomjid,\n            type: 'groupchat' });\n\n        // We are adding the message in a packet extension. If this element\n        // is different from 'body', we add a custom namespace.\n        // e.g. for 'json-message' extension of message stanza.\n        if (elementName === 'body') {\n            msg.c(elementName, {}, message);\n        } else {\n            msg.c(elementName, { xmlns: 'http://jitsi.org/jitmeet' }, message);\n        }\n\n        this.connection.send(msg);\n        this.eventEmitter.emit(XMPPEvents.SENDING_CHAT_MESSAGE, message);\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Send private text message to another participant of the conference\n     * @param id id/muc resource of the receiver\n     * @param message\n     * @param elementName\n     */\n    sendPrivateMessage(id, message, elementName) {\n        const msg = $msg({ to: `${this.roomjid}/${id}`,\n            type: 'chat' });\n\n        // We are adding the message in packet. If this element is different\n        // from 'body', we add our custom namespace for the same.\n        // e.g. for 'json-message' message extension.\n        if (elementName === 'body') {\n            msg.c(elementName, message).up();\n        } else {\n            msg.c(elementName, { xmlns: 'http://jitsi.org/jitmeet' }, message)\n                .up();\n        }\n\n        this.connection.send(msg);\n        this.eventEmitter.emit(\n            XMPPEvents.SENDING_PRIVATE_CHAT_MESSAGE, message);\n    }\n    /* eslint-enable max-params */\n\n    /**\n     *\n     * @param subject\n     */\n    setSubject(subject) {\n        const msg = $msg({ to: this.roomjid,\n            type: 'groupchat' });\n\n        msg.c('subject', subject);\n        this.connection.send(msg);\n    }\n\n    /**\n     * Called when participant leaves.\n     * @param jid the jid of the participant that leaves\n     * @param skipEvents optional params to skip any events, including check\n     * whether this is the focus that left\n     */\n    onParticipantLeft(jid, skipEvents) {\n        delete this.lastPresences[jid];\n\n        if (skipEvents) {\n            return;\n        }\n\n        this.eventEmitter.emit(XMPPEvents.MUC_MEMBER_LEFT, jid);\n\n        this.moderator.onMucMemberLeft(jid);\n    }\n\n    /**\n     *\n     * @param pres\n     * @param from\n     */\n    onPresenceUnavailable(pres, from) {\n        // ignore presence\n        if ($(pres).find('>ignore[xmlns=\"http://jitsi.org/jitmeet/\"]').length) {\n            return true;\n        }\n\n        // room destroyed ?\n        const destroySelect = $(pres).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>destroy');\n\n        if (destroySelect.length) {\n            let reason;\n            const reasonSelect\n                = $(pres).find(\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n                        + '>destroy>reason');\n\n            if (reasonSelect.length) {\n                reason = reasonSelect.text();\n            }\n\n            this.eventEmitter.emit(XMPPEvents.MUC_DESTROYED, reason, destroySelect.attr('jid'));\n            this.connection.emuc.doLeave(this.roomjid);\n\n            return true;\n        }\n\n        // Status code 110 indicates that this notification is \"self-presence\".\n        const isSelfPresence\n            = $(pres)\n                .find(\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>'\n                        + 'status[code=\"110\"]')\n                .length;\n        const isKick\n            = $(pres)\n                .find(\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n                        + '>status[code=\"307\"]')\n                .length;\n        const membersKeys = Object.keys(this.members);\n        const isReplaceParticipant = $(pres).find('flip_device').length;\n\n        if (isKick) {\n            const actorSelect\n                = $(pres)\n                .find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>item>actor');\n            let actorNick;\n\n            if (actorSelect.length) {\n                actorNick = actorSelect.attr('nick');\n            }\n\n            let reason;\n            const reasonSelect\n                = $(pres).find(\n                '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n                + '>item>reason');\n\n            if (reasonSelect.length) {\n                reason = reasonSelect.text();\n            }\n\n            // we first fire the kicked so we can show the participant\n            // who kicked, before notifying that participant left\n            // we fire kicked for us and for any participant kicked\n            this.eventEmitter.emit(\n                XMPPEvents.KICKED,\n                isSelfPresence,\n                actorNick,\n                Strophe.getResourceFromJid(from),\n                reason,\n                isReplaceParticipant);\n        }\n\n        if (isSelfPresence) {\n            // If the status code is 110 this means we're leaving and we would\n            // like to remove everyone else from our view, so we trigger the\n            // event.\n            membersKeys.forEach(jid => {\n                const member = this.members[jid];\n\n                delete this.members[jid];\n                this.onParticipantLeft(jid, member.isFocus);\n            });\n            this.connection.emuc.doLeave(this.roomjid);\n\n            // we fire muc_left only if this is not a kick,\n            // kick has both statuses 110 and 307.\n            if (!isKick) {\n                this.eventEmitter.emit(XMPPEvents.MUC_LEFT);\n            }\n        } else {\n            delete this.members[from];\n            this.onParticipantLeft(from, false);\n        }\n    }\n\n    /**\n     *\n     * @param msg\n     * @param from\n     */\n    onMessage(msg, from) {\n        const type = msg.getAttribute('type');\n\n        if (type === 'error') {\n            const settingsErrorMsg = $(msg).find('>settings-error>text').text();\n\n            if (settingsErrorMsg.length) {\n                this.eventEmitter.emit(XMPPEvents.SETTINGS_ERROR_RECEIVED, settingsErrorMsg);\n\n                return true;\n            }\n            const errorMsg = $(msg).find('>error>text').text();\n\n            this.eventEmitter.emit(XMPPEvents.CHAT_ERROR_RECEIVED, errorMsg);\n\n            return true;\n        }\n\n        const txt = $(msg).find('>body').text();\n        const subject = $(msg).find('>subject');\n\n        if (subject.length) {\n            const subjectText = subject.text();\n\n            if (subjectText || subjectText === '') {\n                this.eventEmitter.emit(XMPPEvents.SUBJECT_CHANGED, subjectText);\n                logger.log(`Subject is changed to ${subjectText}`);\n            }\n        }\n\n        // xep-0203 delay\n        let stamp = $(msg).find('>delay').attr('stamp');\n\n        if (!stamp) {\n            // or xep-0091 delay, UTC timestamp\n            stamp = $(msg).find('>[xmlns=\"jabber:x:delay\"]').attr('stamp');\n\n            if (stamp) {\n                // the format is CCYYMMDDThh:mm:ss\n                const dateParts\n                    = stamp.match(/(\\d{4})(\\d{2})(\\d{2}T\\d{2}:\\d{2}:\\d{2})/);\n\n                stamp = `${dateParts[1]}-${dateParts[2]}-${dateParts[3]}Z`;\n            }\n        }\n\n        if (from === this.roomjid) {\n            let invite;\n\n            if ($(msg).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>status[code=\"104\"]').length) {\n                this.discoRoomInfo();\n            } else if ((invite = $(msg).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>invite'))\n                        && invite.length) {\n                const passwordSelect = $(msg).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>password');\n                let password;\n\n                if (passwordSelect && passwordSelect.length) {\n                    password = passwordSelect.text();\n                }\n\n                this.eventEmitter.emit(XMPPEvents.INVITE_MESSAGE_RECEIVED,\n                    from, invite.attr('from'), txt, password);\n            }\n        }\n\n        const jsonMessage = $(msg).find('>json-message').text();\n\n        if (jsonMessage) {\n            const parsedJson = this.xmpp.tryParseJSONAndVerify(jsonMessage);\n\n            // We emit this event if the message is a valid json, and is not\n            // delivered after a delay, i.e. stamp is undefined.\n            // e.g. - subtitles should not be displayed if delayed.\n            if (parsedJson && stamp === undefined) {\n                this.eventEmitter.emit(XMPPEvents.JSON_MESSAGE_RECEIVED,\n                    from, parsedJson);\n\n                return;\n            }\n        }\n\n        if (txt) {\n            if (type === 'chat') {\n                this.eventEmitter.emit(XMPPEvents.PRIVATE_MESSAGE_RECEIVED,\n                        from, txt, this.myroomjid, stamp);\n            } else if (type === 'groupchat') {\n                this.eventEmitter.emit(XMPPEvents.MESSAGE_RECEIVED,\n                        from, txt, this.myroomjid, stamp);\n            }\n        }\n    }\n\n    /**\n     *\n     * @param pres\n     * @param from\n     */\n    onPresenceError(pres, from) {\n        if ($(pres)\n                .find(\n                    '>error[type=\"auth\"]'\n                        + '>not-authorized['\n                        + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]')\n                .length) {\n            logger.log('on password required', from);\n            this.eventEmitter.emit(XMPPEvents.PASSWORD_REQUIRED);\n        } else if ($(pres)\n                .find(\n                    '>error[type=\"cancel\"]'\n                        + '>not-allowed['\n                        + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]')\n                .length) {\n            const toDomain = Strophe.getDomainFromJid(pres.getAttribute('to'));\n\n            if (toDomain === this.xmpp.options.hosts.anonymousdomain) {\n                // enter the room by replying with 'not-authorized'. This would\n                // result in reconnection from authorized domain.\n                // We're either missing Jicofo/Prosody config for anonymous\n                // domains or something is wrong.\n                this.eventEmitter.emit(XMPPEvents.ROOM_JOIN_ERROR);\n\n            } else {\n                logger.warn('onPresError ', pres);\n                this.eventEmitter.emit(\n                    XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR);\n            }\n        } else if ($(pres).find('>error>service-unavailable').length) {\n            logger.warn('Maximum users limit for the room has been reached',\n                pres);\n            this.eventEmitter.emit(XMPPEvents.ROOM_MAX_USERS_ERROR);\n        } else if ($(pres)\n            .find(\n                '>error[type=\"auth\"]'\n                + '>registration-required['\n                + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]').length) {\n\n            // let's extract the lobby jid from the custom field\n            const lobbyRoomNode = $(pres).find('>error[type=\"auth\"]>lobbyroom');\n            let lobbyRoomJid;\n\n            if (lobbyRoomNode.length) {\n                lobbyRoomJid = lobbyRoomNode.text();\n            } else {\n                // let's fallback to old location of lobbyroom node, TODO: to be removed in the future once\n                // everything is updated\n                const lobbyRoomOldNode = $(pres).find('>lobbyroom');\n\n                if (lobbyRoomOldNode.length) {\n                    lobbyRoomJid = lobbyRoomOldNode.text();\n                }\n            }\n\n            this.eventEmitter.emit(XMPPEvents.ROOM_CONNECT_MEMBERS_ONLY_ERROR, lobbyRoomJid);\n        } else {\n            logger.warn('onPresError ', pres);\n            this.eventEmitter.emit(XMPPEvents.ROOM_CONNECT_ERROR);\n        }\n    }\n\n    /**\n     *\n     * @param jid\n     * @param affiliation\n     */\n    setAffiliation(jid, affiliation) {\n        const grantIQ = $iq({\n            to: this.roomjid,\n            type: 'set'\n        })\n        .c('query', { xmlns: 'http://jabber.org/protocol/muc#admin' })\n        .c('item', {\n            affiliation,\n            nick: Strophe.getResourceFromJid(jid)\n        })\n        .c('reason').t(`Your affiliation has been changed to '${affiliation}'.`)\n        .up().up().up();\n\n        this.connection.sendIQ(\n            grantIQ,\n            result => logger.log('Set affiliation of participant with jid: ', jid, 'to', affiliation, result),\n            error => logger.log('Set affiliation of participant error: ', error));\n    }\n\n    /**\n     *\n     * @param jid\n     * @param reason\n     */\n    kick(jid, reason = 'You have been kicked.') {\n        const kickIQ = $iq({ to: this.roomjid,\n            type: 'set' })\n            .c('query', { xmlns: 'http://jabber.org/protocol/muc#admin' })\n            .c('item', { nick: Strophe.getResourceFromJid(jid),\n                role: 'none' })\n            .c('reason').t(reason).up().up().up();\n\n        this.connection.sendIQ(\n            kickIQ,\n            result => logger.log('Kick participant with jid: ', jid, result),\n            error => logger.log('Kick participant error: ', error));\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     *\n     * @param key\n     * @param onSuccess\n     * @param onError\n     * @param onNotSupported\n     */\n    lockRoom(key, onSuccess, onError, onNotSupported) {\n        // http://xmpp.org/extensions/xep-0045.html#roomconfig\n        this.connection.sendIQ(\n            $iq({\n                to: this.roomjid,\n                type: 'get'\n            })\n                .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' }),\n            res => {\n                if ($(res)\n                        .find(\n                            '>query>x[xmlns=\"jabber:x:data\"]'\n                                + '>field[var=\"muc#roomconfig_roomsecret\"]')\n                        .length) {\n                    const formsubmit\n                        = $iq({\n                            to: this.roomjid,\n                            type: 'set'\n                        })\n                            .c('query', {\n                                xmlns: 'http://jabber.org/protocol/muc#owner'\n                            });\n\n                    formsubmit.c('x', {\n                        xmlns: 'jabber:x:data',\n                        type: 'submit'\n                    });\n                    formsubmit\n                        .c('field', { 'var': 'FORM_TYPE' })\n                        .c('value')\n                        .t('http://jabber.org/protocol/muc#roomconfig')\n                        .up()\n                        .up();\n                    formsubmit\n                        .c('field', { 'var': 'muc#roomconfig_roomsecret' })\n                        .c('value')\n                        .t(key)\n                        .up()\n                        .up();\n                    formsubmit\n                        .c('field',\n                             { 'var': 'muc#roomconfig_passwordprotectedroom' })\n                        .c('value')\n                        .t(key === null || key.length === 0 ? '0' : '1')\n                        .up()\n                        .up();\n\n                    // if members only enabled\n                    if (this.membersOnlyEnabled) {\n                        formsubmit\n                            .c('field', { 'var': 'muc#roomconfig_membersonly' })\n                            .c('value')\n                            .t('true')\n                            .up()\n                            .up();\n                    }\n\n                    // Fixes a bug in prosody 0.9.+\n                    // https://prosody.im/issues/issue/373\n                    formsubmit\n                        .c('field', { 'var': 'muc#roomconfig_whois' })\n                        .c('value')\n                        .t('anyone')\n                        .up()\n                        .up();\n\n                    this.connection.sendIQ(\n                        formsubmit,\n                        () => {\n\n                            // we set the password in chat room so we can use it\n                            // later when dialing out\n                            this.password = key;\n                            onSuccess();\n                        },\n                        onError);\n                } else {\n                    onNotSupported();\n                }\n            },\n            onError);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Turns off or on the members only config for the main room.\n     *\n     * @param {boolean} enabled - Whether to turn it on or off.\n     * @param onSuccess - optional callback.\n     * @param onError - optional callback.\n     */\n    setMembersOnly(enabled, onSuccess, onError) {\n        if (enabled && Object.values(this.members).filter(m => !m.isFocus).length) {\n            // first grant membership to all that are in the room\n            // currently there is a bug in prosody where it handles only the first item\n            // that's why we will send iq per member\n            Object.values(this.members).forEach(m => {\n                if (m.jid && !MEMBERS_AFFILIATIONS.includes(m.affiliation)) {\n                    this.xmpp.connection.sendIQ(\n                        $iq({\n                            to: this.roomjid,\n                            type: 'set' })\n                        .c('query', {\n                            xmlns: 'http://jabber.org/protocol/muc#admin' })\n                        .c('item', {\n                            'affiliation': 'member',\n                            'jid': m.jid\n                        }).up().up());\n                }\n            });\n        }\n\n        const errorCallback = onError ? onError : () => {}; // eslint-disable-line no-empty-function\n\n        this.xmpp.connection.sendIQ(\n            $iq({\n                to: this.roomjid,\n                type: 'get'\n            }).c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' }),\n            res => {\n                if ($(res).find('>query>x[xmlns=\"jabber:x:data\"]>field[var=\"muc#roomconfig_membersonly\"]').length) {\n                    const formToSubmit\n                        = $iq({\n                            to: this.roomjid,\n                            type: 'set'\n                        }).c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' });\n\n                    formToSubmit.c('x', {\n                        xmlns: 'jabber:x:data',\n                        type: 'submit'\n                    });\n                    formToSubmit\n                        .c('field', { 'var': 'FORM_TYPE' })\n                        .c('value')\n                        .t('http://jabber.org/protocol/muc#roomconfig')\n                        .up()\n                        .up();\n                    formToSubmit\n                        .c('field', { 'var': 'muc#roomconfig_membersonly' })\n                        .c('value')\n                        .t(enabled ? 'true' : 'false')\n                        .up()\n                        .up();\n\n                    // if room is locked from other participant or we are locking it\n                    if (this.locked) {\n                        formToSubmit\n                            .c('field',\n                                { 'var': 'muc#roomconfig_passwordprotectedroom' })\n                            .c('value')\n                            .t('1')\n                            .up()\n                            .up();\n                    }\n\n                    this.xmpp.connection.sendIQ(formToSubmit, onSuccess, errorCallback);\n                } else {\n                    errorCallback(new Error('Setting members only room not supported!'));\n                }\n            },\n            errorCallback);\n    }\n\n    /**\n     * Adds the key to the presence map, overriding any previous value.\n     * This method is used by jibri.\n     *\n     * @param key The key to add or replace.\n     * @param values The new values.\n     * @returns {boolean|null} <tt>true</tt> if the operation succeeded or <tt>false</tt> when no add or replce was\n     * performed as the value was already there.\n     * @deprecated Use 'addOrReplaceInPresence' instead. TODO: remove it from here and jibri.\n     */\n    addToPresence(key, values) {\n        return this.addOrReplaceInPresence(key, values);\n    }\n\n    /**\n     * Adds the key to the presence map, overriding any previous value.\n     * @param key The key to add or replace.\n     * @param values The new values.\n     * @returns {boolean|null} <tt>true</tt> if the operation succeeded or <tt>false</tt> when no add or replace was\n     * performed as the value was already there.\n     */\n    addOrReplaceInPresence(key, values) {\n        values.tagName = key;\n\n        const matchingNodes = this.presMap.nodes.filter(node => key === node.tagName);\n\n        // if we have found just one, let's check is it the same\n        if (matchingNodes.length === 1 && isEqual(matchingNodes[0], values)) {\n            return false;\n        }\n\n        this.removeFromPresence(key);\n        this.presMap.nodes.push(values);\n        this.presenceUpdateTime = Date.now();\n\n        return true;\n    }\n\n    /**\n     * Retrieves a value from the presence map.\n     *\n     * @param {string} key - The key to find the value for.\n     * @returns {Object?}\n     */\n    getFromPresence(key) {\n        return this.presMap.nodes.find(node => key === node.tagName);\n    }\n\n    /**\n     * Removes a key from the presence map.\n     * @param key\n     */\n    removeFromPresence(key) {\n        const nodes = this.presMap.nodes.filter(node => key !== node.tagName);\n\n        this.presMap.nodes = nodes;\n        this.presenceUpdateTime = Date.now();\n    }\n\n    /**\n     *\n     * @param name\n     * @param handler\n     */\n    addPresenceListener(name, handler) {\n        if (typeof handler !== 'function') {\n            throw new Error('\"handler\" is not a function');\n        }\n        let tagHandlers = this.presHandlers[name];\n\n        if (!tagHandlers) {\n            this.presHandlers[name] = tagHandlers = [];\n        }\n        if (tagHandlers.indexOf(handler) === -1) {\n            tagHandlers.push(handler);\n        } else {\n            logger.warn(\n                `Trying to add the same handler more than once for: ${name}`);\n        }\n    }\n\n    /**\n     *\n     * @param name\n     * @param handler\n     */\n    removePresenceListener(name, handler) {\n        const tagHandlers = this.presHandlers[name];\n        const handlerIdx = tagHandlers ? tagHandlers.indexOf(handler) : -1;\n\n        // eslint-disable-next-line no-negated-condition\n        if (handlerIdx !== -1) {\n            tagHandlers.splice(handlerIdx, 1);\n        } else {\n            logger.warn(`Handler for: ${name} was not registered`);\n        }\n    }\n\n    /**\n     * Checks if the user identified by given <tt>mucJid</tt> is the conference\n     * focus.\n     * @param mucJid the full MUC address of the user to be checked.\n     * @returns {boolean|null} <tt>true</tt> if MUC user is the conference focus\n     * or <tt>false</tt> if is not. When given <tt>mucJid</tt> does not exist in\n     * the MUC then <tt>null</tt> is returned.\n     */\n    isFocus(mucJid) {\n        const member = this.members[mucJid];\n\n        if (member) {\n            return member.isFocus;\n        }\n\n        return null;\n    }\n\n    /**\n     *\n     */\n    isModerator() {\n        return this.role === 'moderator';\n    }\n\n    /**\n     *\n     * @param peerJid\n     */\n    getMemberRole(peerJid) {\n        if (this.members[peerJid]) {\n            return this.members[peerJid].role;\n        }\n\n        return null;\n    }\n\n    /**\n     *\n     * @param mute\n     */\n    addAudioInfoToPresence(mute) {\n        const audioMutedTagName = 'audiomuted';\n\n        // we skip adding it as muted is default value\n        if (mute && !this.getFromPresence(audioMutedTagName)) {\n            return false;\n        }\n\n        return this.addOrReplaceInPresence(\n            audioMutedTagName,\n            {\n                value: mute.toString()\n            });\n    }\n\n    /**\n     *\n     * @param mute\n     */\n    addVideoInfoToPresence(mute) {\n        const videoMutedTagName = 'videomuted';\n\n        // we skip adding it as muted is default value\n        if (mute && !this.getFromPresence(videoMutedTagName)) {\n            return false;\n        }\n\n        return this.addOrReplaceInPresence(\n            videoMutedTagName,\n            {\n                value: mute.toString()\n            });\n    }\n\n    /**\n     * Obtains the info about given media advertised in the MUC presence of\n     * the participant identified by the given endpoint JID.\n     * @param {string} endpointId the endpoint ID mapped to the participant\n     * which corresponds to MUC nickname.\n     * @param {MediaType} mediaType the type of the media for which presence\n     * info will be obtained.\n     * @return {PeerMediaInfo} presenceInfo an object with media presence\n     * info or <tt>null</tt> either if there is no presence available or if\n     * the media type given is invalid.\n     */\n    getMediaPresenceInfo(endpointId, mediaType) {\n        // Will figure out current muted status by looking up owner's presence\n        const pres = this.lastPresences[`${this.roomjid}/${endpointId}`];\n\n        if (!pres) {\n            // No presence available\n            return null;\n        }\n        const data = {\n            muted: true, // muted by default\n            videoType: undefined // no video type by default\n        };\n        let mutedNode = null;\n\n        if (mediaType === MediaType.AUDIO) {\n            mutedNode = filterNodeFromPresenceJSON(pres, 'audiomuted');\n        } else if (mediaType === MediaType.VIDEO) {\n            mutedNode = filterNodeFromPresenceJSON(pres, 'videomuted');\n            const codecTypeNode = filterNodeFromPresenceJSON(pres, 'jitsi_participant_codecType');\n            const videoTypeNode = filterNodeFromPresenceJSON(pres, 'videoType');\n\n            if (videoTypeNode.length > 0) {\n                data.videoType = videoTypeNode[0].value;\n            }\n            if (codecTypeNode.length > 0) {\n                data.codecType = codecTypeNode[0].value;\n            }\n        } else {\n            logger.error(`Unsupported media type: ${mediaType}`);\n\n            return null;\n        }\n\n        if (mutedNode.length > 0) {\n            data.muted = mutedNode[0].value === 'true';\n        }\n\n        return data;\n    }\n\n    /**\n     * Returns the last presence advertised by a MUC member.\n     * @param {string} mucNick\n     * @returns {*}\n     */\n    getLastPresence(mucNick) {\n        return this.lastPresences[`${this.roomjid}/${mucNick}`];\n    }\n\n    /**\n     * Returns true if the SIP calls are supported and false otherwise\n     */\n    isSIPCallingSupported() {\n        if (this.moderator) {\n            return this.moderator.isSipGatewayEnabled();\n        }\n\n        return false;\n    }\n\n    /**\n     * Dials a number.\n     * @param number the number\n     */\n    dial(number) {\n        return this.connection.rayo.dial(number, 'fromnumber',\n            Strophe.getBareJidFromJid(this.myroomjid), this.password,\n            this.focusMucJid);\n    }\n\n    /**\n     * Hangup an existing call\n     */\n    hangup() {\n        return this.connection.rayo.hangup();\n    }\n\n    /**\n     *\n     * @returns {Lobby}\n     */\n    getLobby() {\n        return this.lobby;\n    }\n\n    /**\n     * @returns {AVModeration}\n     */\n    getAVModeration() {\n        return this.avModeration;\n    }\n\n    /**\n     * @returns {BreakoutRooms}\n     */\n    getBreakoutRooms() {\n        return this.breakoutRooms;\n    }\n\n    /**\n     * Returns the phone number for joining the conference.\n     */\n    getPhoneNumber() {\n        return this.phoneNumber;\n    }\n\n    /**\n     * Returns the pin for joining the conference with phone.\n     */\n    getPhonePin() {\n        return this.phonePin;\n    }\n\n    /**\n     * Returns the meeting unique ID if any came from backend.\n     *\n     * @returns {string} - The meeting ID.\n     */\n    getMeetingId() {\n        return this.meetingId;\n    }\n\n    /**\n     * Mutes remote participant.\n     * @param jid of the participant\n     * @param mute\n     * @param mediaType\n     */\n    muteParticipant(jid, mute, mediaType) {\n        logger.info('set mute', mute, jid);\n        const iqToFocus = $iq(\n            { to: this.focusMucJid,\n                type: 'set' })\n            .c('mute', {\n                xmlns: `http://jitsi.org/jitmeet/${mediaType}`,\n                jid\n            })\n            .t(mute.toString())\n            .up();\n\n        this.connection.sendIQ(\n            iqToFocus,\n            result => logger.log('set mute', result),\n            error => logger.log('set mute error', error));\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMute(iq) {\n        const from = iq.getAttribute('from');\n\n        if (from !== this.focusMucJid) {\n            logger.warn('Ignored mute from non focus peer');\n\n            return;\n        }\n        const mute = $(iq).find('mute');\n\n        if (mute.length && mute.text() === 'true') {\n            this.eventEmitter.emit(XMPPEvents.AUDIO_MUTED_BY_FOCUS, mute.attr('actor'));\n        } else {\n            // XXX Why do we support anything but muting? Why do we encode the\n            // value in the text of the element? Why do we use a separate XML\n            // namespace?\n            logger.warn('Ignoring a mute request which does not explicitly '\n                + 'specify a positive mute command.');\n        }\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMuteVideo(iq) {\n        const from = iq.getAttribute('from');\n\n        if (from !== this.focusMucJid) {\n            logger.warn('Ignored mute from non focus peer');\n\n            return;\n        }\n        const mute = $(iq).find('mute');\n\n        if (mute.length && mute.text() === 'true') {\n            this.eventEmitter.emit(XMPPEvents.VIDEO_MUTED_BY_FOCUS, mute.attr('actor'));\n        } else {\n            // XXX Why do we support anything but muting? Why do we encode the\n            // value in the text of the element? Why do we use a separate XML\n            // namespace?\n            logger.warn('Ignoring a mute request which does not explicitly '\n                + 'specify a positive mute command.');\n        }\n    }\n\n    /**\n     * Clean any listeners or resources, executed on leaving.\n     */\n    clean() {\n        this._removeConnListeners.forEach(remove => remove());\n        this._removeConnListeners = [];\n\n        this.joined = false;\n        this.inProgressEmitted = false;\n    }\n\n    /**\n     * Leaves the room. Closes the jingle session.\n     * @returns {Promise} which is resolved if XMPPEvents.MUC_LEFT is received\n     * less than 5s after sending presence unavailable. Otherwise the promise is\n     * rejected.\n     */\n    leave() {\n        this.avModeration.dispose();\n        this.breakoutRooms.dispose();\n\n        const promises = [];\n\n        this.lobby?.lobbyRoom && promises.push(this.lobby.leave());\n\n        promises.push(new Promise((resolve, reject) => {\n            let timeout = -1;\n\n            const onMucLeft = (doReject = false) => {\n                this.eventEmitter.removeListener(XMPPEvents.MUC_LEFT, onMucLeft);\n                clearTimeout(timeout);\n                if (doReject) {\n                    // The timeout expired. Make sure we clean the EMUC state.\n                    this.connection.emuc.doLeave(this.roomjid);\n                    reject(new Error('The timeout for the confirmation about leaving the room expired.'));\n                } else {\n                    resolve();\n                }\n            };\n\n            timeout = setTimeout(() => onMucLeft(true), 5000);\n\n            this.clean();\n            this.eventEmitter.on(XMPPEvents.MUC_LEFT, onMucLeft);\n            this.doLeave();\n        }));\n\n        return Promise.allSettled(promises);\n    }\n}\n\n/* eslint-enable newline-per-chained-call */\n","/* global $ */\n\nimport { getLogger } from '@jitsi/logger';\nimport { Strophe } from 'strophe.js';\n\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nimport ChatRoom from './ChatRoom';\nimport { ConnectionPluginListenable } from './ConnectionPlugin';\n\nconst logger = getLogger(__filename);\n\n/**\n * MUC connection plugin.\n */\nexport default class MucConnectionPlugin extends ConnectionPluginListenable {\n    /**\n     *\n     * @param xmpp\n     */\n    constructor(xmpp) {\n        super();\n        this.xmpp = xmpp;\n        this.rooms = {};\n    }\n\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n\n        // add handlers (just once)\n        this.connection.addHandler(this.onPresence.bind(this), null,\n            'presence', null, null, null, null);\n        this.connection.addHandler(this.onPresenceUnavailable.bind(this),\n            null, 'presence', 'unavailable', null);\n        this.connection.addHandler(this.onPresenceError.bind(this), null,\n            'presence', 'error', null);\n        this.connection.addHandler(this.onMessage.bind(this), null,\n            'message', null, null);\n        this.connection.addHandler(this.onMute.bind(this),\n            'http://jitsi.org/jitmeet/audio', 'iq', 'set', null, null);\n        this.connection.addHandler(this.onMuteVideo.bind(this),\n            'http://jitsi.org/jitmeet/video', 'iq', 'set', null, null);\n    }\n\n    /**\n     *\n     * @param jid\n     * @param password\n     * @param options\n     */\n    createRoom(jid, password, options) {\n        const roomJid = Strophe.getBareJidFromJid(jid);\n\n        if (this.isRoomCreated(roomJid)) {\n            const errmsg = 'You are already in the room!';\n\n            logger.error(errmsg);\n            throw new Error(errmsg);\n        }\n        this.rooms[roomJid] = new ChatRoom(this.connection, jid,\n            password, this.xmpp, options);\n        this.eventEmitter.emit(\n            XMPPEvents.EMUC_ROOM_ADDED, this.rooms[roomJid]);\n\n        return this.rooms[roomJid];\n    }\n\n    /**\n     *  Check if a room with the passed JID is already created.\n     *\n     * @param {string} roomJid - The JID of the room.\n     * @returns {boolean}\n     */\n    isRoomCreated(roomJid) {\n        return roomJid in this.rooms;\n    }\n\n    /**\n     *\n     * @param jid\n     */\n    doLeave(jid) {\n        this.eventEmitter.emit(\n            XMPPEvents.EMUC_ROOM_REMOVED, this.rooms[jid]);\n        delete this.rooms[jid];\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresence(pres) {\n        const from = pres.getAttribute('from');\n\n        // What is this for? A workaround for something?\n        if (pres.getAttribute('type')) {\n            return true;\n        }\n\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        // Parse status.\n        if ($(pres).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n            + '>status[code=\"201\"]').length) {\n            room.createNonAnonymousRoom();\n        }\n\n        room.onPresence(pres);\n\n        return true;\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresenceUnavailable(pres) {\n        const from = pres.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        room.onPresenceUnavailable(pres, from);\n\n        return true;\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresenceError(pres) {\n        const from = pres.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        room.onPresenceError(pres, from);\n\n        return true;\n    }\n\n    /**\n     *\n     * @param msg\n     */\n    onMessage(msg) {\n        // FIXME: this is a hack. but jingle on muc makes nickchanges hard\n        const from = msg.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        room.onMessage(msg, from);\n\n        return true;\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMute(iq) {\n        const from = iq.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        // Returning false would result in the listener being deregistered by Strophe\n        if (!room) {\n            return true;\n        }\n\n        room.onMute(iq);\n\n        return true;\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMuteVideo(iq) {\n        const from = iq.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        // Returning false would result in the listener being deregistered by Strophe\n        if (!room) {\n            return true;\n        }\n\n        room.onMuteVideo(iq);\n\n        return true;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nconst logger = getLogger('FeatureFlags');\n\n/**\n * A global module for accessing information about different feature flags state.\n */\nclass FeatureFlags {\n    /**\n     * Configures the module.\n     *\n     * @param {boolean} flags.sourceNameSignaling - Enables source names in the signaling.\n     */\n    init(flags) {\n        this._sourceNameSignaling = Boolean(flags.sourceNameSignaling);\n        this._sendMultipleVideoStreams = Boolean(flags.sendMultipleVideoStreams);\n\n        logger.info(`Source name signaling: ${this._sourceNameSignaling},`\n            + ` Send multiple video streams: ${this._sendMultipleVideoStreams}`);\n    }\n\n    /**\n     * Checks if multiple local video streams support is enabled.\n     *\n     * @returns {boolean}\n     */\n    isMultiStreamSupportEnabled() {\n        return this._sourceNameSignaling && this._sendMultipleVideoStreams;\n    }\n\n    /**\n     * Checks if the source name signaling is enabled.\n     *\n     * @returns {boolean}\n     */\n    isSourceNameSignalingEnabled() {\n        return this._sourceNameSignaling;\n    }\n}\n\nexport default new FeatureFlags();\n","/* global $ */\n\nimport { getLogger } from '@jitsi/logger';\nimport { $build } from 'strophe.js';\n\nimport * as MediaType from '../../service/RTC/MediaType';\nimport FeatureFlags from '../flags/FeatureFlags';\n\nconst logger = getLogger(__filename);\n\n/**\n * Creates a \"source\" XML element for the source described in compact JSON format in [sourceCompactJson].\n * @param {*} owner the endpoint ID of the owner of the source.\n * @param {*} sourceCompactJson the compact JSON representation of the source.\n * @returns the created \"source\" XML element.\n */\nfunction _createSourceExtension(owner, sourceCompactJson) {\n    const node = $build('source', {\n        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0',\n        ssrc: sourceCompactJson.s,\n        name: FeatureFlags.isSourceNameSignalingEnabled() ? sourceCompactJson.n : undefined\n    });\n\n    if (sourceCompactJson.m) {\n        node.c('parameter', {\n            name: 'msid',\n            value: sourceCompactJson.m\n        }).up();\n    }\n    node.c('ssrc-info', {\n        xmlns: 'http://jitsi.org/jitmeet',\n        owner\n    }).up();\n\n    return node.node;\n}\n\n/**\n * Creates an \"ssrc-group\" XML element for the SSRC group described in compact JSON format in [ssrcGroupCompactJson].\n * @param {*} ssrcGroupCompactJson the compact JSON representation of the SSRC group.\n * @returns the created \"ssrc-group\" element.\n */\nfunction _createSsrcGroupExtension(ssrcGroupCompactJson) {\n    const node = $build('ssrc-group', {\n        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0',\n        semantics: _getSemantics(ssrcGroupCompactJson[0])\n    });\n\n    for (let i = 1; i < ssrcGroupCompactJson.length; i++) {\n        node.c('source', {\n            xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0',\n            ssrc: ssrcGroupCompactJson[i]\n        }).up();\n    }\n\n    return node.node;\n}\n\n/**\n * Finds in a Jingle IQ the RTP description element with the given media type. If one does not exists, create it (as\n *  well as the required  \"content\" parent element) and adds it to the IQ.\n * @param {*} iq\n * @param {*} mediaType The media type, \"audio\" or \"video\".\n * @returns the RTP description element with the given media type.\n */\nfunction _getOrCreateRtpDescription(iq, mediaType) {\n    const jingle = $(iq).find('jingle')[0];\n    let content = $(jingle).find(`content[name=\"${mediaType}\"]`);\n    let description;\n\n    if (content.length) {\n        content = content[0];\n    } else {\n        // I'm not suree if \"creator\" and \"senders\" are required.\n        content = $build('content', {\n            name: mediaType\n        }).node;\n        jingle.appendChild(content);\n    }\n\n    description = $(content).find('description');\n\n    if (description.length) {\n        description = description[0];\n    } else {\n        description = $build('description', {\n            xmlns: 'urn:xmpp:jingle:apps:rtp:1',\n            media: mediaType\n        }).node;\n        content.appendChild(description);\n    }\n\n    return description;\n}\n\n/**\n * Converts the short string representing SSRC group semantics in compact JSON format to the standard representation\n * (i.e. convert \"f\" to \"FID\" and \"s\" to \"SIM\").\n * @param {*} str the compact JSON format representation of an SSRC group's semantics.\n * @returns the SSRC group semantics corresponding to [str].\n */\nfunction _getSemantics(str) {\n    if (str === 'f') {\n        return 'FID';\n    } else if (str === 's') {\n        return 'SIM';\n    }\n\n    return null;\n}\n\n/**\n * Reads a JSON-encoded message (from a \"json-message\" element) and extracts source descriptions. Adds the extracted\n * source descriptions to the given Jingle IQ in the standard Jingle format.\n *\n * Encoding sources in this compact JSON format instead of standard Jingle was introduced in order to reduce the\n * network traffic and load on the XMPP server. The format is described in Jicofo [TODO: insert link].\n *\n * @param {*} iq the IQ to which source descriptions will be added.\n * @param {*} jsonMessageXml The XML node for the \"json-message\" element.\n * @returns {Map<string, Array<string>} The audio and video ssrcs extracted from the JSON-encoded message with remote\n * endpoint id as the key.\n */\nexport function expandSourcesFromJson(iq, jsonMessageXml) {\n    let json;\n\n    try {\n        json = JSON.parse(jsonMessageXml.textContent);\n    } catch (error) {\n        logger.error(`json-message XML contained invalid JSON, ignoring: ${jsonMessageXml.textContent}`);\n\n        return null;\n    }\n\n    if (!json?.sources) {\n        // It might be a message of a different type, no need to log.\n        return null;\n    }\n\n    // This is where we'll add \"source\" and \"ssrc-group\" elements. Create them elements if they don't exist.\n    const audioRtpDescription = _getOrCreateRtpDescription(iq, MediaType.AUDIO);\n    const videoRtpDescription = _getOrCreateRtpDescription(iq, MediaType.VIDEO);\n    const ssrcMap = new Map();\n\n    for (const owner in json.sources) {\n        if (json.sources.hasOwnProperty(owner)) {\n            const ssrcs = [];\n            const ownerSources = json.sources[owner];\n\n            // The video sources, video ssrc-groups, audio sources and audio ssrc-groups are encoded in that order in\n            // the elements of the array.\n            const videoSources = ownerSources?.length && ownerSources[0];\n            const videoSsrcGroups = ownerSources?.length > 1 && ownerSources[1];\n            const audioSources = ownerSources?.length > 2 && ownerSources[2];\n            const audioSsrcGroups = ownerSources?.length > 3 && ownerSources[3];\n\n            if (videoSources?.length) {\n                for (let i = 0; i < videoSources.length; i++) {\n                    videoRtpDescription.appendChild(_createSourceExtension(owner, videoSources[i]));\n                    ssrcs.push(videoSources[i]?.s);\n                }\n            }\n\n            if (videoSsrcGroups?.length) {\n                for (let i = 0; i < videoSsrcGroups.length; i++) {\n                    videoRtpDescription.appendChild(_createSsrcGroupExtension(videoSsrcGroups[i]));\n                }\n            }\n            if (audioSources?.length) {\n                for (let i = 0; i < audioSources.length; i++) {\n                    audioRtpDescription.appendChild(_createSourceExtension(owner, audioSources[i]));\n                    ssrcs.push(audioSources[i]?.s);\n                }\n            }\n\n            if (audioSsrcGroups?.length) {\n                for (let i = 0; i < audioSsrcGroups.length; i++) {\n                    audioRtpDescription.appendChild(_createSsrcGroupExtension(audioSsrcGroups[i]));\n                }\n            }\n            ssrcMap.set(owner, ssrcs);\n        }\n    }\n\n    return ssrcMap;\n}\n","\nimport JitsiTrackError from '../../JitsiTrackError';\nimport * as JitsiTrackErrors from '../../JitsiTrackErrors';\nimport browser from '../browser';\n\nconst logger = require('@jitsi/logger').getLogger(__filename);\n\n/**\n * The default frame rate for Screen Sharing.\n */\nexport const SS_DEFAULT_FRAME_RATE = 5;\n\n/**\n * Handles obtaining a stream from a screen capture on different browsers.\n */\nconst ScreenObtainer = {\n    /**\n     * If not <tt>null</tt> it means that the initialization process is still in\n     * progress. It is used to make desktop stream request wait and continue\n     * after it's done.\n     * {@type Promise|null}\n     */\n\n    obtainStream: null,\n\n    /**\n     * Initializes the function used to obtain a screen capture\n     * (this.obtainStream).\n     *\n     * @param {object} options\n     */\n    init(options = {}) {\n        this.options = options;\n        this.obtainStream = this._createObtainStreamMethod();\n\n        if (!this.obtainStream) {\n            logger.info('Desktop sharing disabled');\n        }\n    },\n\n    /**\n     * Returns a method which will be used to obtain the screen sharing stream\n     * (based on the browser type).\n     *\n     * @returns {Function}\n     * @private\n     */\n    _createObtainStreamMethod() {\n        if (browser.isNWJS()) {\n            return (onSuccess, onFailure) => {\n                window.JitsiMeetNW.obtainDesktopStream(\n                    onSuccess,\n                    (error, constraints) => {\n                        let jitsiError;\n\n                        // FIXME:\n                        // This is very very dirty fix for recognising that the\n                        // user have clicked the cancel button from the Desktop\n                        // sharing pick window. The proper solution would be to\n                        // detect this in the NWJS application by checking the\n                        // streamId === \"\". Even better solution would be to\n                        // stop calling GUM from the NWJS app and just pass the\n                        // streamId to lib-jitsi-meet. This way the desktop\n                        // sharing implementation for NWJS and chrome extension\n                        // will be the same and lib-jitsi-meet will be able to\n                        // control the constraints, check the streamId, etc.\n                        //\n                        // I cannot find documentation about \"InvalidStateError\"\n                        // but this is what we are receiving from GUM when the\n                        // streamId for the desktop sharing is \"\".\n\n                        if (error && error.name === 'InvalidStateError') {\n                            jitsiError = new JitsiTrackError(\n                                JitsiTrackErrors.SCREENSHARING_USER_CANCELED\n                            );\n                        } else {\n                            jitsiError = new JitsiTrackError(\n                                error, constraints, [ 'desktop' ]);\n                        }\n                        (typeof onFailure === 'function')\n                            && onFailure(jitsiError);\n                    });\n            };\n        } else if (browser.isElectron()) {\n            return this.obtainScreenOnElectron;\n        } else if (browser.isReactNative() && browser.supportsGetDisplayMedia()) {\n            return this.obtainScreenFromGetDisplayMediaRN;\n        } else if (browser.supportsGetDisplayMedia()) {\n            return this.obtainScreenFromGetDisplayMedia;\n        }\n        logger.log('Screen sharing not supported on ', browser.getName());\n\n        return null;\n    },\n\n    /**\n     * Gets the appropriate constraints for audio sharing.\n     *\n     * @returns {Object|boolean}\n     */\n    _getAudioConstraints() {\n        const { audioQuality } = this.options;\n        const audio = audioQuality?.stereo ? {\n            autoGainControl: false,\n            channelCount: 2,\n            echoCancellation: false,\n            noiseSuppression: false\n        } : true;\n\n        return audio;\n    },\n\n    /**\n     * Checks whether obtaining a screen capture is supported in the current\n     * environment.\n     * @returns {boolean}\n     */\n    isSupported() {\n        return this.obtainStream !== null;\n    },\n\n    /**\n     * Obtains a screen capture stream on Electron.\n     *\n     * @param onSuccess - Success callback.\n     * @param onFailure - Failure callback.\n     */\n    obtainScreenOnElectron(onSuccess, onFailure) {\n        if (window.JitsiMeetScreenObtainer && window.JitsiMeetScreenObtainer.openDesktopPicker) {\n            const { desktopSharingFrameRate, desktopSharingSources } = this.options;\n\n            window.JitsiMeetScreenObtainer.openDesktopPicker(\n                {\n                    desktopSharingSources: desktopSharingSources || [ 'screen', 'window' ]\n                },\n                (streamId, streamType, screenShareAudio = false) => {\n                    if (streamId) {\n                        let audioConstraints = false;\n\n                        if (screenShareAudio) {\n                            audioConstraints = {};\n                            const optionalConstraints = this._getAudioConstraints();\n\n                            if (typeof optionalConstraints !== 'boolean') {\n                                audioConstraints = {\n                                    optional: optionalConstraints\n                                };\n                            }\n\n                            // Audio screen sharing for electron only works for screen type devices.\n                            // i.e. when the user shares the whole desktop.\n                            // Note. The documentation specifies that chromeMediaSourceId should not be present\n                            // which, in the case a users has multiple monitors, leads to them being shared all\n                            // at once. However we tested with chromeMediaSourceId present and it seems to be\n                            // working properly.\n                            if (streamType === 'screen') {\n                                audioConstraints.mandatory = {\n                                    chromeMediaSource: 'desktop'\n                                };\n                            }\n                        }\n\n                        const constraints = {\n                            audio: audioConstraints,\n                            video: {\n                                mandatory: {\n                                    chromeMediaSource: 'desktop',\n                                    chromeMediaSourceId: streamId,\n                                    minFrameRate: desktopSharingFrameRate?.min ?? SS_DEFAULT_FRAME_RATE,\n                                    maxFrameRate: desktopSharingFrameRate?.max ?? SS_DEFAULT_FRAME_RATE,\n                                    maxWidth: window.screen.width,\n                                    maxHeight: window.screen.height\n                                }\n                            }\n                        };\n\n                        // We have to use the old API on Electron to get a desktop stream.\n                        navigator.mediaDevices.getUserMedia(constraints)\n                            .then(stream => onSuccess({\n                                stream,\n                                sourceId: streamId,\n                                sourceType: streamType\n                            }), onFailure);\n                    } else {\n                        // As noted in Chrome Desktop Capture API:\n                        // If user didn't select any source (i.e. canceled the prompt)\n                        // then the callback is called with an empty streamId.\n                        onFailure(new JitsiTrackError(JitsiTrackErrors.SCREENSHARING_USER_CANCELED));\n                    }\n                },\n                err => onFailure(new JitsiTrackError(\n                    JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_ERROR,\n                    err\n                ))\n            );\n        } else {\n            onFailure(new JitsiTrackError(JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_NOT_FOUND));\n        }\n    },\n\n    /**\n     * Obtains a screen capture stream using getDisplayMedia.\n     *\n     * @param callback - The success callback.\n     * @param errorCallback - The error callback.\n     */\n    obtainScreenFromGetDisplayMedia(callback, errorCallback) {\n        let getDisplayMedia;\n\n        if (navigator.getDisplayMedia) {\n            getDisplayMedia = navigator.getDisplayMedia.bind(navigator);\n        } else {\n            // eslint-disable-next-line max-len\n            getDisplayMedia = navigator.mediaDevices.getDisplayMedia.bind(navigator.mediaDevices);\n        }\n\n        const { desktopSharingFrameRate } = this.options;\n        const video = typeof desktopSharingFrameRate === 'object' ? { frameRate: desktopSharingFrameRate } : true;\n        const audio = this._getAudioConstraints();\n\n        // At the time of this writing 'min' constraint for fps is not supported by getDisplayMedia.\n        video.frameRate && delete video.frameRate.min;\n\n        const constraints = {\n            video,\n            audio,\n            cursor: 'always'\n        };\n\n        logger.info('Using getDisplayMedia for screen sharing', constraints);\n\n        getDisplayMedia(constraints)\n            .then(stream => {\n                callback({\n                    stream,\n                    sourceId: stream.id\n                });\n            })\n            .catch(error => {\n                const errorDetails = {\n                    errorName: error && error.name,\n                    errorMsg: error && error.message,\n                    errorStack: error && error.stack\n                };\n\n                logger.error('getDisplayMedia error', constraints, errorDetails);\n\n                if (errorDetails.errorMsg && errorDetails.errorMsg.indexOf('denied by system') !== -1) {\n                    // On Chrome this is the only thing different between error returned when user cancels\n                    // and when no permission was given on the OS level.\n                    errorCallback(new JitsiTrackError(JitsiTrackErrors.PERMISSION_DENIED));\n\n                    return;\n                }\n\n                errorCallback(new JitsiTrackError(JitsiTrackErrors.SCREENSHARING_USER_CANCELED));\n            });\n    },\n\n    /**\n     * Obtains a screen capture stream using getDisplayMedia.\n     *\n     * @param callback - The success callback.\n     * @param errorCallback - The error callback.\n     */\n    obtainScreenFromGetDisplayMediaRN(callback, errorCallback) {\n        logger.info('Using getDisplayMedia for screen sharing');\n\n        navigator.mediaDevices.getDisplayMedia({ video: true })\n            .then(stream => {\n                callback({\n                    stream,\n                    sourceId: stream.id });\n            })\n            .catch(() => {\n                errorCallback(new JitsiTrackError(JitsiTrackErrors\n                    .SCREENSHARING_USER_CANCELED));\n            });\n    },\n\n    /**\n     * Sets the max frame rate to be used for a desktop track capture.\n     *\n     * @param {number} maxFps capture frame rate to be used for desktop tracks.\n     * @returns {void}\n     */\n    setDesktopSharingFrameRate(maxFps) {\n        logger.info(`Setting the desktop capture rate to ${maxFps}`);\n\n        this.options.desktopSharingFrameRate = {\n            min: SS_DEFAULT_FRAME_RATE,\n            max: maxFps\n        };\n    }\n};\n\nexport default ScreenObtainer;\n","import { getLogger } from '@jitsi/logger';\nconst logger = getLogger(__filename);\n\nimport CodecMimeType from '../../service/RTC/CodecMimeType';\nimport MediaDirection from '../../service/RTC/MediaDirection';\nimport browser from '../browser';\nimport RandomUtil from '../util/RandomUtil';\n\nconst SDPUtil = {\n    filterSpecialChars(text) {\n        // XXX Neither one of the falsy values (e.g. null, undefined, false,\n        // \"\", etc.) \"contain\" special chars.\n        // eslint-disable-next-line no-useless-escape\n        return text ? text.replace(/[\\\\\\/\\{,\\}\\+]/g, '') : text;\n    },\n    iceparams(mediadesc, sessiondesc) {\n        let data = null;\n        let pwd, ufrag;\n\n        if ((ufrag = SDPUtil.findLine(mediadesc, 'a=ice-ufrag:', sessiondesc))\n                && (pwd\n                    = SDPUtil.findLine(\n                        mediadesc,\n                        'a=ice-pwd:',\n                        sessiondesc))) {\n            data = {\n                ufrag: SDPUtil.parseICEUfrag(ufrag),\n                pwd: SDPUtil.parseICEPwd(pwd)\n            };\n        }\n\n        return data;\n    },\n    parseICEUfrag(line) {\n        return line.substring(12);\n    },\n    buildICEUfrag(frag) {\n        return `a=ice-ufrag:${frag}`;\n    },\n    parseICEPwd(line) {\n        return line.substring(10);\n    },\n    buildICEPwd(pwd) {\n        return `a=ice-pwd:${pwd}`;\n    },\n    parseMID(line) {\n        return line.substring(6);\n    },\n\n    /**\n     * Finds the MSID attribute in the given array of SSRC attribute lines and returns the value.\n     *\n     * @param {string[]} ssrcLines - an array of lines similar to 'a:213123 msid:stream-id track-id'.\n     * @returns {undefined|string}\n     */\n    parseMSIDAttribute(ssrcLines) {\n        const msidLine = ssrcLines.find(line => line.indexOf(' msid:') > 0);\n\n        if (!msidLine) {\n            return undefined;\n        }\n\n        const v = msidLine.substring(msidLine.indexOf(' msid:') + 6 /* the length of ' msid:' */);\n\n        return SDPUtil.filterSpecialChars(v);\n    },\n    parseMLine(line) {\n        const data = {};\n        const parts = line.substring(2).split(' ');\n\n        data.media = parts.shift();\n        data.port = parts.shift();\n        data.proto = parts.shift();\n        if (parts[parts.length - 1] === '') { // trailing whitespace\n            parts.pop();\n        }\n        data.fmt = parts;\n\n        return data;\n    },\n    buildMLine(mline) {\n        return (\n            `m=${mline.media} ${mline.port} ${mline.proto} ${\n                mline.fmt.join(' ')}`);\n    },\n    parseRTPMap(line) {\n        const data = {};\n        let parts = line.substring(9).split(' ');\n\n        data.id = parts.shift();\n        parts = parts[0].split('/');\n        data.name = parts.shift();\n        data.clockrate = parts.shift();\n        data.channels = parts.length ? parts.shift() : '1';\n\n        return data;\n    },\n\n    /**\n     * Parses SDP line \"a=sctpmap:...\" and extracts SCTP port from it.\n     * @param line eg. \"a=sctpmap:5000 webrtc-datachannel\"\n     * @returns [SCTP port number, protocol, streams]\n     */\n    parseSCTPMap(line) {\n        const parts = line.substring(10).split(' ');\n        const sctpPort = parts[0];\n        const protocol = parts[1];\n\n        // Stream count is optional\n        const streamCount = parts.length > 2 ? parts[2] : null;\n\n\n        return [ sctpPort, protocol, streamCount ];// SCTP port\n    },\n    parseSCTPPort(line) {\n        return line.substring(12);\n    },\n    buildRTPMap(el) {\n        let line\n            = `a=rtpmap:${el.getAttribute('id')} ${el.getAttribute('name')}/${\n                el.getAttribute('clockrate')}`;\n\n        if (el.getAttribute('channels')\n            && el.getAttribute('channels') !== '1') {\n            line += `/${el.getAttribute('channels')}`;\n        }\n\n        return line;\n    },\n    parseCrypto(line) {\n        const data = {};\n        const parts = line.substring(9).split(' ');\n\n        data.tag = parts.shift();\n        data['crypto-suite'] = parts.shift();\n        data['key-params'] = parts.shift();\n        if (parts.length) {\n            data['session-params'] = parts.join(' ');\n        }\n\n        return data;\n    },\n    parseFingerprint(line) { // RFC 4572\n        const data = {};\n        const parts = line.substring(14).split(' ');\n\n        data.hash = parts.shift();\n        data.fingerprint = parts.shift();\n\n        // TODO assert that fingerprint satisfies 2UHEX *(\":\" 2UHEX) ?\n        return data;\n    },\n    parseFmtp(line) {\n        const data = [];\n        let parts = line.split(' ');\n\n        parts.shift();\n        parts = parts.join(' ').split(';');\n        for (let i = 0; i < parts.length; i++) {\n            let key = parts[i].split('=')[0];\n\n            while (key.length && key[0] === ' ') {\n                key = key.substring(1);\n            }\n            const value = parts[i].split('=')[1];\n\n            if (key && value) {\n                data.push({ name: key,\n                    value });\n            } else if (key) {\n                // rfc 4733 (DTMF) style stuff\n                data.push({ name: '',\n                    value: key });\n            }\n        }\n\n        return data;\n    },\n    parseICECandidate(line) {\n        const candidate = {};\n        const elems = line.split(' ');\n\n        candidate.foundation = elems[0].substring(12);\n        candidate.component = elems[1];\n        candidate.protocol = elems[2].toLowerCase();\n        candidate.priority = elems[3];\n        candidate.ip = elems[4];\n        candidate.port = elems[5];\n\n        // elems[6] => \"typ\"\n        candidate.type = elems[7];\n        candidate.generation = 0; // default value, may be overwritten below\n        for (let i = 8; i < elems.length; i += 2) {\n            switch (elems[i]) {\n            case 'raddr':\n                candidate['rel-addr'] = elems[i + 1];\n                break;\n            case 'rport':\n                candidate['rel-port'] = elems[i + 1];\n                break;\n            case 'generation':\n                candidate.generation = elems[i + 1];\n                break;\n            case 'tcptype':\n                candidate.tcptype = elems[i + 1];\n                break;\n            default: // TODO\n                logger.debug(\n                    `parseICECandidate not translating \"${\n                        elems[i]}\" = \"${elems[i + 1]}\"`);\n            }\n        }\n        candidate.network = '1';\n\n        // not applicable to SDP -- FIXME: should be unique, not just random\n        // eslint-disable-next-line newline-per-chained-call\n        candidate.id = Math.random().toString(36).substr(2, 10);\n\n        return candidate;\n    },\n    buildICECandidate(cand) {\n        let line = [\n            `a=candidate:${cand.foundation}`,\n            cand.component,\n            cand.protocol,\n            cand.priority,\n            cand.ip,\n            cand.port,\n            'typ',\n            cand.type\n        ].join(' ');\n\n        line += ' ';\n        switch (cand.type) {\n        case 'srflx':\n        case 'prflx':\n        case 'relay':\n            if (cand.hasOwnAttribute('rel-addr')\n                    && cand.hasOwnAttribute('rel-port')) {\n                line += 'raddr';\n                line += ' ';\n                line += cand['rel-addr'];\n                line += ' ';\n                line += 'rport';\n                line += ' ';\n                line += cand['rel-port'];\n                line += ' ';\n            }\n            break;\n        }\n        if (cand.hasOwnAttribute('tcptype')) {\n            line += 'tcptype';\n            line += ' ';\n            line += cand.tcptype;\n            line += ' ';\n        }\n        line += 'generation';\n        line += ' ';\n        line += cand.hasOwnAttribute('generation') ? cand.generation : '0';\n\n        return line;\n    },\n    parseSSRC(desc) {\n        // proprietary mapping of a=ssrc lines\n        // TODO: see \"Jingle RTP Source Description\" by Juberti and P. Thatcher\n        // on google docs and parse according to that\n        const data = new Map();\n        const lines = desc.split('\\r\\n');\n\n        for (let i = 0; i < lines.length; i++) {\n            if (lines[i].substring(0, 7) === 'a=ssrc:') {\n                // FIXME: Use regex to smartly find the ssrc.\n                const ssrc = lines[i].split('a=ssrc:')[1].split(' ')[0];\n\n                if (!data.get(ssrc)) {\n                    data.set(ssrc, []);\n                }\n\n                data.get(ssrc).push(lines[i]);\n            }\n        }\n\n        return data;\n    },\n\n    /**\n     * Gets the source name out of the name attribute \"a=ssrc:254321 name:name1\".\n     *\n     * @param {string[]} ssrcLines\n     * @returns {string | undefined}\n     */\n    parseSourceNameLine(ssrcLines) {\n        const sourceNameLine = ssrcLines.find(ssrcSdpLine => ssrcSdpLine.indexOf(' name:') > 0);\n\n        // Everything past the \"name:\" part\n        return sourceNameLine?.substring(sourceNameLine.indexOf(' name:') + 6);\n    },\n    parseRTCPFB(line) {\n        const parts = line.substr(10).split(' ');\n        const data = {};\n\n        data.pt = parts.shift();\n        data.type = parts.shift();\n        data.params = parts;\n\n        return data;\n    },\n    parseExtmap(line) {\n        const parts = line.substr(9).split(' ');\n        const data = {};\n\n        data.value = parts.shift();\n        if (data.value.indexOf('/') === -1) {\n            data.direction = 'both';\n        } else {\n            data.direction = data.value.substr(data.value.indexOf('/') + 1);\n            data.value = data.value.substr(0, data.value.indexOf('/'));\n        }\n        data.uri = parts.shift();\n        data.params = parts;\n\n        return data;\n    },\n    findLine(haystack, needle, sessionpart) {\n        let lines = haystack.split('\\r\\n');\n\n        for (let i = 0; i < lines.length; i++) {\n            if (lines[i].substring(0, needle.length) === needle) {\n                return lines[i];\n            }\n        }\n        if (!sessionpart) {\n            return false;\n        }\n\n        // search session part\n        lines = sessionpart.split('\\r\\n');\n        for (let j = 0; j < lines.length; j++) {\n            if (lines[j].substring(0, needle.length) === needle) {\n                return lines[j];\n            }\n        }\n\n        return false;\n    },\n    findLines(haystack, needle, sessionpart) {\n        let lines = haystack.split('\\r\\n');\n        const needles = [];\n\n        for (let i = 0; i < lines.length; i++) {\n            if (lines[i].substring(0, needle.length) === needle) {\n                needles.push(lines[i]);\n            }\n        }\n        if (needles.length || !sessionpart) {\n            return needles;\n        }\n\n        // search session part\n        lines = sessionpart.split('\\r\\n');\n        for (let j = 0; j < lines.length; j++) {\n            if (lines[j].substring(0, needle.length) === needle) {\n                needles.push(lines[j]);\n            }\n        }\n\n        return needles;\n    },\n    candidateToJingle(line) {\n        // a=candidate:2979166662 1 udp 2113937151 192.168.2.100 57698 typ host\n        // generation 0\n        //      <candidate component=... foundation=... generation=... id=...\n        // ip=... network=... port=... priority=... protocol=... type=.../>\n        if (line.indexOf('candidate:') === 0) {\n            // eslint-disable-next-line no-param-reassign\n            line = `a=${line}`;\n        } else if (line.substring(0, 12) !== 'a=candidate:') {\n            logger.warn(\n                'parseCandidate called with a line that is not a candidate'\n                    + ' line');\n            logger.warn(line);\n\n            return null;\n        }\n        if (line.substring(line.length - 2) === '\\r\\n') { // chomp it\n            // eslint-disable-next-line no-param-reassign\n            line = line.substring(0, line.length - 2);\n        }\n        const candidate = {};\n        const elems = line.split(' ');\n\n        if (elems[6] !== 'typ') {\n            logger.warn('did not find typ in the right place');\n            logger.warn(line);\n\n            return null;\n        }\n        candidate.foundation = elems[0].substring(12);\n        candidate.component = elems[1];\n        candidate.protocol = elems[2].toLowerCase();\n        candidate.priority = elems[3];\n        candidate.ip = elems[4];\n        candidate.port = elems[5];\n\n        // elems[6] => \"typ\"\n        candidate.type = elems[7];\n\n        candidate.generation = '0'; // default, may be overwritten below\n        for (let i = 8; i < elems.length; i += 2) {\n            switch (elems[i]) {\n            case 'raddr':\n                candidate['rel-addr'] = elems[i + 1];\n                break;\n            case 'rport':\n                candidate['rel-port'] = elems[i + 1];\n                break;\n            case 'generation':\n                candidate.generation = elems[i + 1];\n                break;\n            case 'tcptype':\n                candidate.tcptype = elems[i + 1];\n                break;\n            default: // TODO\n                logger.debug(`not translating \"${elems[i]}\" = \"${elems[i + 1]}\"`);\n            }\n        }\n        candidate.network = '1';\n\n        // not applicable to SDP -- FIXME: should be unique, not just random\n        // eslint-disable-next-line newline-per-chained-call\n        candidate.id = Math.random().toString(36).substr(2, 10);\n\n        return candidate;\n    },\n    candidateFromJingle(cand) {\n        let line = 'a=candidate:';\n\n        line += cand.getAttribute('foundation');\n        line += ' ';\n        line += cand.getAttribute('component');\n        line += ' ';\n\n        let protocol = cand.getAttribute('protocol');\n\n        // use tcp candidates for FF\n\n        if (browser.isFirefox() && protocol.toLowerCase() === 'ssltcp') {\n            protocol = 'tcp';\n        }\n\n        line += protocol; // .toUpperCase(); // chrome M23 doesn't like this\n        line += ' ';\n        line += cand.getAttribute('priority');\n        line += ' ';\n        line += cand.getAttribute('ip');\n        line += ' ';\n        line += cand.getAttribute('port');\n        line += ' ';\n        line += 'typ';\n        line += ` ${cand.getAttribute('type')}`;\n        line += ' ';\n        switch (cand.getAttribute('type')) {\n        case 'srflx':\n        case 'prflx':\n        case 'relay':\n            if (cand.getAttribute('rel-addr')\n                    && cand.getAttribute('rel-port')) {\n                line += 'raddr';\n                line += ' ';\n                line += cand.getAttribute('rel-addr');\n                line += ' ';\n                line += 'rport';\n                line += ' ';\n                line += cand.getAttribute('rel-port');\n                line += ' ';\n            }\n            break;\n        }\n        if (protocol.toLowerCase() === 'tcp') {\n            line += 'tcptype';\n            line += ' ';\n            line += cand.getAttribute('tcptype');\n            line += ' ';\n        }\n        line += 'generation';\n        line += ' ';\n        line += cand.getAttribute('generation') || '0';\n\n        return `${line}\\r\\n`;\n    },\n\n    /**\n     * Parse the 'most' primary video ssrc from the given m line\n     * @param {object} mLine object as parsed from transform.parse\n     * @return {number} the primary video ssrc from the given m line\n     */\n    parsePrimaryVideoSsrc(videoMLine) {\n        const numSsrcs = videoMLine.ssrcs\n            .map(ssrcInfo => ssrcInfo.id)\n            .filter((ssrc, index, array) => array.indexOf(ssrc) === index)\n            .length;\n        const numGroups\n            = (videoMLine.ssrcGroups && videoMLine.ssrcGroups.length) || 0;\n\n        if (numSsrcs > 1 && numGroups === 0) {\n            // Ambiguous, can't figure out the primary\n            return;\n        }\n        let primarySsrc = null;\n\n        if (numSsrcs === 1) {\n            primarySsrc = videoMLine.ssrcs[0].id;\n        } else if (numSsrcs === 2) {\n            // Can figure it out if there's an FID group\n            const fidGroup\n                = videoMLine.ssrcGroups.find(\n                    group => group.semantics === 'FID');\n\n            if (fidGroup) {\n                primarySsrc = fidGroup.ssrcs.split(' ')[0];\n            }\n        } else if (numSsrcs >= 3) {\n            // Can figure it out if there's a sim group\n            const simGroup\n                = videoMLine.ssrcGroups.find(\n                    group => group.semantics === 'SIM');\n\n            if (simGroup) {\n                primarySsrc = simGroup.ssrcs.split(' ')[0];\n            }\n        }\n\n        return primarySsrc;\n    },\n\n    /**\n     * Generate an ssrc\n     * @returns {number} an ssrc\n     */\n    generateSsrc() {\n        return RandomUtil.randomInt(1, 0xffffffff);\n    },\n\n    /**\n     * Get an attribute for the given ssrc with the given attributeName\n     *  from the given mline\n     * @param {object} mLine an mLine object as parsed from transform.parse\n     * @param {number} ssrc the ssrc for which an attribute is desired\n     * @param {string} attributeName the name of the desired attribute\n     * @returns {string} the value corresponding to the given ssrc\n     *  and attributeName\n     */\n    getSsrcAttribute(mLine, ssrc, attributeName) {\n        for (let i = 0; i < mLine.ssrcs.length; ++i) {\n            const ssrcLine = mLine.ssrcs[i];\n\n            if (ssrcLine.id === ssrc\n                && ssrcLine.attribute === attributeName) {\n                return ssrcLine.value;\n            }\n        }\n    },\n\n    /**\n     * Parses the ssrcs from the group sdp line and\n     *  returns them as a list of numbers\n     * @param {object} the ssrcGroup object as parsed from\n     *  sdp-transform\n     * @returns {list<number>} a list of the ssrcs in the group\n     *  parsed as numbers\n     */\n    parseGroupSsrcs(ssrcGroup) {\n        return ssrcGroup\n            .ssrcs\n            .split(' ')\n            .map(ssrcStr => parseInt(ssrcStr, 10));\n    },\n\n    /**\n     * Get the mline of the given type from the given sdp\n     * @param {object} sdp sdp as parsed from transform.parse\n     * @param {string} type the type of the desired mline (e.g. \"video\")\n     * @returns {object} a media object\n     */\n    getMedia(sdp, type) {\n        return sdp.media.find(m => m.type === type);\n    },\n\n    /**\n     * Extracts the ICE username fragment from an SDP string.\n     * @param {string} sdp the SDP in raw text format\n     */\n    getUfrag(sdp) {\n        const ufragLines\n            = sdp.split('\\n').filter(line => line.startsWith('a=ice-ufrag:'));\n\n        if (ufragLines.length > 0) {\n            return ufragLines[0].substr('a=ice-ufrag:'.length);\n        }\n    },\n\n    /**\n     * Sets the given codecName as the preferred codec by moving it to the beginning\n     * of the payload types list (modifies the given mline in place). All instances\n     * of the codec are moved up.\n     * @param {object} mLine the mline object from an sdp as parsed by transform.parse\n     * @param {string} codecName the name of the preferred codec\n     */\n    preferCodec(mline, codecName) {\n        if (!mline || !codecName) {\n            return;\n        }\n\n        const matchingPayloadTypes = mline.rtp\n            .filter(rtp => rtp.codec && rtp.codec.toLowerCase() === codecName.toLowerCase())\n            .map(rtp => rtp.payload);\n\n        if (matchingPayloadTypes) {\n            // Call toString() on payloads to get around an issue within SDPTransform that sets\n            // payloads as a number, instead of a string, when there is only one payload.\n            const payloadTypes\n                = mline.payloads\n                .toString()\n                .split(' ')\n                .map(p => parseInt(p, 10));\n\n            for (const pt of matchingPayloadTypes.reverse()) {\n                const payloadIndex = payloadTypes.indexOf(pt);\n\n                payloadTypes.splice(payloadIndex, 1);\n                payloadTypes.unshift(pt);\n            }\n            mline.payloads = payloadTypes.join(' ');\n        }\n    },\n\n    /**\n     * Strips the given codec from the given mline. All related RTX payload\n     * types are also stripped. If the resulting mline would have no codecs,\n     * it's disabled.\n     *\n     * @param {object} mLine the mline object from an sdp as parsed by transform.parse.\n     * @param {string} codecName the name of the codec which will be stripped.\n     * @param {boolean} highProfile determines if only the high profile H264 codec needs to be\n     * stripped from the sdp when the passed codecName is H264.\n     */\n    stripCodec(mLine, codecName, highProfile = false) {\n        if (!mLine || !codecName) {\n            return;\n        }\n\n        const h264Pts = [];\n        let removePts = [];\n        const stripH264HighCodec = codecName.toLowerCase() === CodecMimeType.H264 && highProfile;\n\n        for (const rtp of mLine.rtp) {\n            if (rtp.codec\n                && rtp.codec.toLowerCase() === codecName.toLowerCase()) {\n                if (stripH264HighCodec) {\n                    h264Pts.push(rtp.payload);\n                } else {\n                    removePts.push(rtp.payload);\n                }\n            }\n        }\n\n        // high profile H264 codecs have 64 as the first two bytes of the profile-level-id.\n        if (stripH264HighCodec) {\n            removePts = mLine.fmtp\n                .filter(item => h264Pts.indexOf(item.payload) > -1 && item.config.includes('profile-level-id=64'))\n                .map(item => item.payload);\n        }\n\n        if (removePts.length > 0) {\n            // We also need to remove the payload types that are related to RTX\n            // for the codecs we want to disable.\n            const rtxApts = removePts.map(item => `apt=${item}`);\n            const rtxPts = mLine.fmtp.filter(\n                item => rtxApts.indexOf(item.config) !== -1);\n\n            removePts.push(...rtxPts.map(item => item.payload));\n\n            // Call toString() on payloads to get around an issue within\n            // SDPTransform that sets payloads as a number, instead of a string,\n            // when there is only one payload.\n            const allPts = mLine.payloads\n                .toString()\n                .split(' ')\n                .map(Number);\n            const keepPts = allPts.filter(pt => removePts.indexOf(pt) === -1);\n\n            if (keepPts.length === 0) {\n                // There are no other codecs, disable the stream.\n                mLine.port = 0;\n                mLine.direction = MediaDirection.INACTIVE;\n                mLine.payloads = '*';\n            } else {\n                mLine.payloads = keepPts.join(' ');\n            }\n\n            mLine.rtp = mLine.rtp.filter(\n                item => keepPts.indexOf(item.payload) !== -1);\n            mLine.fmtp = mLine.fmtp.filter(\n                item => keepPts.indexOf(item.payload) !== -1);\n            if (mLine.rtcpFb) {\n                mLine.rtcpFb = mLine.rtcpFb.filter(\n                    item => keepPts.indexOf(item.payload) !== -1);\n            }\n        }\n    }\n};\n\nexport default SDPUtil;\n","/* global $ */\n\nimport clonedeep from 'lodash.clonedeep';\nimport transform from 'sdp-transform';\n\nimport MediaDirection from '../../service/RTC/MediaDirection';\nimport browser from '../browser';\nimport FeatureFlags from '../flags/FeatureFlags';\n\nimport SDPUtil from './SDPUtil';\n\n/**\n *\n * @param sdp\n */\nexport default function SDP(sdp) {\n    const media = sdp.split('\\r\\nm=');\n\n    for (let i = 1, length = media.length; i < length; i++) {\n        let mediaI = `m=${media[i]}`;\n\n        if (i !== length - 1) {\n            mediaI += '\\r\\n';\n        }\n        media[i] = mediaI;\n    }\n    const session = `${media.shift()}\\r\\n`;\n\n    this.media = media;\n    this.raw = session + media.join('');\n    this.session = session;\n}\n\n/**\n * A flag will make {@link transportToJingle} and {@link jingle2media} replace\n * ICE candidates IPs with invalid value of '1.1.1.1' which will cause ICE\n * failure. The flag is used in the automated testing.\n * @type {boolean}\n */\nSDP.prototype.failICE = false;\n\n/**\n * Whether or not to remove TCP ice candidates when translating from/to jingle.\n * @type {boolean}\n */\nSDP.prototype.removeTcpCandidates = false;\n\n/**\n * Whether or not to remove UDP ice candidates when translating from/to jingle.\n * @type {boolean}\n */\nSDP.prototype.removeUdpCandidates = false;\n\n/**\n * Adds a new m-line to the description so that a new local source can then be attached to the transceiver that gets\n * added after a reneogtiation cycle.\n *\n * @param {Mediatype} mediaType media type of the new source that is being added.\n */\nSDP.prototype.addMlineForNewLocalSource = function(mediaType) {\n    const mid = this.media.length;\n    const sdp = transform.parse(this.raw);\n    const mline = clonedeep(sdp.media.find(m => m.type === mediaType));\n\n    // Edit media direction, mid and remove the existing ssrc lines in the m-line.\n    mline.mid = mid;\n    mline.direction = MediaDirection.RECVONLY;\n\n    // Remove the ssrcs and source groups.\n    mline.msid = undefined;\n    mline.ssrcs = undefined;\n    mline.ssrcGroups = undefined;\n\n    sdp.media = sdp.media.concat(mline);\n\n    // We regenerate the BUNDLE group (since we added a new m-line)\n    sdp.groups.forEach(group => {\n        if (group.type === 'BUNDLE') {\n            const mids = group.mids.split(' ');\n\n            mids.push(mid);\n            group.mids = mids.join(' ');\n        }\n    });\n    this.raw = transform.write(sdp);\n};\n\n/**\n * Returns map of MediaChannel mapped per channel idx.\n */\nSDP.prototype.getMediaSsrcMap = function() {\n    const mediaSSRCs = {};\n\n    for (let mediaindex = 0; mediaindex < this.media.length; mediaindex++) {\n        const mid\n            = SDPUtil.parseMID(\n                SDPUtil.findLine(this.media[mediaindex], 'a=mid:'));\n        const media = {\n            mediaindex,\n            mid,\n            ssrcs: {},\n            ssrcGroups: []\n        };\n\n        mediaSSRCs[mediaindex] = media;\n\n        SDPUtil.findLines(this.media[mediaindex], 'a=ssrc:').forEach(line => {\n            const linessrc = line.substring(7).split(' ')[0];\n\n            // allocate new ChannelSsrc\n\n            if (!media.ssrcs[linessrc]) {\n                media.ssrcs[linessrc] = {\n                    ssrc: linessrc,\n                    lines: []\n                };\n            }\n            media.ssrcs[linessrc].lines.push(line);\n        });\n        SDPUtil.findLines(this.media[mediaindex], 'a=ssrc-group:').forEach(line => {\n            const idx = line.indexOf(' ');\n            const semantics = line.substr(0, idx).substr(13);\n            const ssrcs = line.substr(14 + semantics.length).split(' ');\n\n            if (ssrcs.length) {\n                media.ssrcGroups.push({\n                    semantics,\n                    ssrcs\n                });\n            }\n        });\n    }\n\n    return mediaSSRCs;\n};\n\n/**\n * Returns <tt>true</tt> if this SDP contains given SSRC.\n * @param ssrc the ssrc to check.\n * @returns {boolean} <tt>true</tt> if this SDP contains given SSRC.\n */\nSDP.prototype.containsSSRC = function(ssrc) {\n    // FIXME this code is really strange - improve it if you can\n    const medias = this.getMediaSsrcMap();\n    let result = false;\n\n    Object.keys(medias).forEach(mediaindex => {\n        if (result) {\n            return;\n        }\n        if (medias[mediaindex].ssrcs[ssrc]) {\n            result = true;\n        }\n    });\n\n    return result;\n};\n\n// add content's to a jingle element\nSDP.prototype.toJingle = function(elem, thecreator) {\n    // https://xmpp.org/extensions/xep-0338.html\n    SDPUtil.findLines(this.session, 'a=group:').forEach(line => {\n        const parts = line.split(' ');\n        const semantics = parts.shift().substr(8);\n\n        elem.c('group', { xmlns: 'urn:xmpp:jingle:apps:grouping:0',\n            semantics });\n        for (let j = 0; j < parts.length; j++) {\n            elem.c('content', { name: parts[j] }).up();\n        }\n        elem.up();\n    });\n\n    for (let i = 0; i < this.media.length; i++) {\n        const mline = SDPUtil.parseMLine(this.media[i].split('\\r\\n')[0]);\n\n        if (!(mline.media === 'audio'\n              || mline.media === 'video'\n              || mline.media === 'application')) {\n            continue; // eslint-disable-line no-continue\n        }\n\n        let ssrc;\n        const assrcline = SDPUtil.findLine(this.media[i], 'a=ssrc:');\n\n        if (assrcline) {\n            ssrc = assrcline.substring(7).split(' ')[0]; // take the first\n        } else {\n            ssrc = false;\n        }\n\n        elem.c('content', { creator: thecreator,\n            name: mline.media });\n        const amidline = SDPUtil.findLine(this.media[i], 'a=mid:');\n\n        if (amidline) {\n            // prefer identifier from a=mid if present\n            const mid = SDPUtil.parseMID(amidline);\n\n            elem.attrs({ name: mid });\n        }\n\n        if (mline.media === 'audio' || mline.media === 'video') {\n            elem.c('description',\n                { xmlns: 'urn:xmpp:jingle:apps:rtp:1',\n                    media: mline.media });\n            if (ssrc) {\n                elem.attrs({ ssrc });\n            }\n            for (let j = 0; j < mline.fmt.length; j++) {\n                const rtpmap\n                    = SDPUtil.findLine(\n                        this.media[i],\n                        `a=rtpmap:${mline.fmt[j]}`);\n\n                elem.c('payload-type', SDPUtil.parseRTPMap(rtpmap));\n\n                // put any 'a=fmtp:' + mline.fmt[j] lines into <param name=foo\n                // value=bar/>\n                const afmtpline\n                    = SDPUtil.findLine(\n                        this.media[i],\n                        `a=fmtp:${mline.fmt[j]}`);\n\n                if (afmtpline) {\n                    const fmtpParameters = SDPUtil.parseFmtp(afmtpline);\n\n                    // eslint-disable-next-line max-depth\n                    for (let k = 0; k < fmtpParameters.length; k++) {\n                        elem.c('parameter', fmtpParameters[k]).up();\n                    }\n                }\n\n                // XEP-0293 -- map a=rtcp-fb\n                this.rtcpFbToJingle(i, elem, mline.fmt[j]);\n\n                elem.up();\n            }\n\n            if (ssrc) {\n                const ssrcMap = SDPUtil.parseSSRC(this.media[i]);\n\n                for (const [ availableSsrc, ssrcParameters ] of ssrcMap) {\n                    const sourceName = SDPUtil.parseSourceNameLine(ssrcParameters);\n\n                    elem.c('source', {\n                        ssrc: availableSsrc,\n                        name: FeatureFlags.isSourceNameSignalingEnabled() ? sourceName : undefined,\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                    });\n\n                    const msid = SDPUtil.parseMSIDAttribute(ssrcParameters);\n\n                    // eslint-disable-next-line max-depth\n                    if (msid) {\n                        elem.c('parameter');\n                        elem.attrs({ name: 'msid' });\n                        elem.attrs({ value: msid });\n                        elem.up();\n                    }\n\n                    elem.up();\n                }\n\n                // XEP-0339 handle ssrc-group attributes\n                const ssrcGroupLines\n                    = SDPUtil.findLines(this.media[i], 'a=ssrc-group:');\n\n                ssrcGroupLines.forEach(line => {\n                    const idx = line.indexOf(' ');\n                    const semantics = line.substr(0, idx).substr(13);\n                    const ssrcs = line.substr(14 + semantics.length).split(' ');\n\n                    if (ssrcs.length) {\n                        elem.c('ssrc-group', { semantics,\n                            xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0' });\n                        ssrcs.forEach(s => elem.c('source', { ssrc: s }).up());\n                        elem.up();\n                    }\n                });\n            }\n\n            const ridLines = SDPUtil.findLines(this.media[i], 'a=rid:');\n\n            if (ridLines.length && browser.usesRidsForSimulcast()) {\n                // Map a line which looks like \"a=rid:2 send\" to just\n                // the rid (\"2\")\n                const rids = ridLines\n                    .map(ridLine => ridLine.split(':')[1])\n                    .map(ridInfo => ridInfo.split(' ')[0]);\n\n                rids.forEach(rid => {\n                    elem.c('source', {\n                        rid,\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                    });\n                    elem.up();\n                });\n                const unifiedSimulcast\n                    = SDPUtil.findLine(this.media[i], 'a=simulcast:');\n\n                if (unifiedSimulcast) {\n                    elem.c('rid-group', {\n                        semantics: 'SIM',\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                    });\n                    rids.forEach(rid => {\n                        elem.c('source', { rid }).up();\n                    });\n                    elem.up();\n                }\n            }\n\n            if (SDPUtil.findLine(this.media[i], 'a=rtcp-mux')) {\n                elem.c('rtcp-mux').up();\n            }\n\n            // XEP-0293 -- map a=rtcp-fb:*\n            this.rtcpFbToJingle(i, elem, '*');\n\n            // XEP-0294\n            const extmapLines = SDPUtil.findLines(this.media[i], 'a=extmap:');\n\n            for (let j = 0; j < extmapLines.length; j++) {\n                const extmap = SDPUtil.parseExtmap(extmapLines[j]);\n\n                elem.c('rtp-hdrext', {\n                    xmlns: 'urn:xmpp:jingle:apps:rtp:rtp-hdrext:0',\n                    uri: extmap.uri,\n                    id: extmap.value\n                });\n\n                // eslint-disable-next-line max-depth\n                if (extmap.hasOwnProperty('direction')) {\n\n                    // eslint-disable-next-line max-depth\n                    switch (extmap.direction) {\n                    case MediaDirection.SENDONLY:\n                        elem.attrs({ senders: 'responder' });\n                        break;\n                    case MediaDirection.RECVONLY:\n                        elem.attrs({ senders: 'initiator' });\n                        break;\n                    case MediaDirection.SENDRECV:\n                        elem.attrs({ senders: 'both' });\n                        break;\n                    case MediaDirection.INACTIVE:\n                        elem.attrs({ senders: 'none' });\n                        break;\n                    }\n                }\n\n                // TODO: handle params\n                elem.up();\n            }\n            elem.up(); // end of description\n        }\n\n        // map ice-ufrag/pwd, dtls fingerprint, candidates\n        this.transportToJingle(i, elem);\n\n        const m = this.media[i];\n\n        if (SDPUtil.findLine(m, `a=${MediaDirection.SENDRECV}`, this.session)) {\n            elem.attrs({ senders: 'both' });\n        } else if (SDPUtil.findLine(m, `a=${MediaDirection.SENDONLY}`, this.session)) {\n            elem.attrs({ senders: 'initiator' });\n        } else if (SDPUtil.findLine(m, `a=${MediaDirection.RECVONLY}`, this.session)) {\n            elem.attrs({ senders: 'responder' });\n        } else if (SDPUtil.findLine(m, `a=${MediaDirection.INACTIVE}`, this.session)) {\n            elem.attrs({ senders: 'none' });\n        }\n\n        // Reject an m-line only when port is 0 and a=bundle-only is not present in the section.\n        // The port is automatically set to 0 when bundle-only is used.\n        if (mline.port === '0' && !SDPUtil.findLine(m, 'a=bundle-only', this.session)) {\n            // estos hack to reject an m-line\n            elem.attrs({ senders: 'rejected' });\n        }\n        elem.up(); // end of content\n    }\n    elem.up();\n\n    return elem;\n};\n\nSDP.prototype.transportToJingle = function(mediaindex, elem) {\n    elem.c('transport');\n\n    // XEP-0343 DTLS/SCTP\n    const sctpport\n        = SDPUtil.findLine(this.media[mediaindex], 'a=sctp-port:', this.session);\n    const sctpmap\n        = SDPUtil.findLine(this.media[mediaindex], 'a=sctpmap:', this.session);\n\n    if (sctpport) {\n        const sctpAttrs = SDPUtil.parseSCTPPort(sctpport);\n\n        elem.c('sctpmap', {\n            xmlns: 'urn:xmpp:jingle:transports:dtls-sctp:1',\n            number: sctpAttrs, /* SCTP port */\n            protocol: 'webrtc-datachannel' /* protocol */\n        });\n\n        // The parser currently requires streams to be present\n        elem.attrs({ streams: 0 });\n        elem.up();\n    } else if (sctpmap) {\n        const sctpAttrs = SDPUtil.parseSCTPMap(sctpmap);\n\n        elem.c('sctpmap', {\n            xmlns: 'urn:xmpp:jingle:transports:dtls-sctp:1',\n            number: sctpAttrs[0], /* SCTP port */\n            protocol: sctpAttrs[1] /* protocol */\n        });\n\n        // Optional stream count attribute\n        if (sctpAttrs.length > 2) {\n            elem.attrs({ streams: sctpAttrs[2] });\n        } else {\n            elem.attrs({ streams: 0 });\n        }\n        elem.up();\n    }\n\n    // XEP-0320\n    const fingerprints\n        = SDPUtil.findLines(\n            this.media[mediaindex],\n            'a=fingerprint:',\n            this.session);\n\n    fingerprints.forEach(line => {\n        const fingerprint = SDPUtil.parseFingerprint(line);\n\n        fingerprint.xmlns = 'urn:xmpp:jingle:apps:dtls:0';\n        elem.c('fingerprint').t(fingerprint.fingerprint);\n        delete fingerprint.fingerprint;\n\n        const setupLine\n            = SDPUtil.findLine(\n                this.media[mediaindex],\n                'a=setup:',\n                this.session);\n\n        if (setupLine) {\n            fingerprint.setup = setupLine.substr(8);\n        }\n        elem.attrs(fingerprint);\n        elem.up(); // end of fingerprint\n    });\n    const iceParameters = SDPUtil.iceparams(this.media[mediaindex], this.session);\n\n    if (iceParameters) {\n        iceParameters.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\n        elem.attrs(iceParameters);\n\n        // XEP-0176\n        const candidateLines\n            = SDPUtil.findLines(\n                this.media[mediaindex],\n                'a=candidate:',\n                this.session);\n\n        candidateLines.forEach(line => { // add any a=candidate lines\n            const candidate = SDPUtil.candidateToJingle(line);\n\n            if (this.failICE) {\n                candidate.ip = '1.1.1.1';\n            }\n            const protocol\n                = candidate && typeof candidate.protocol === 'string'\n                    ? candidate.protocol.toLowerCase()\n                    : '';\n\n            if ((this.removeTcpCandidates\n                    && (protocol === 'tcp' || protocol === 'ssltcp'))\n                || (this.removeUdpCandidates && protocol === 'udp')) {\n                return;\n            }\n            elem.c('candidate', candidate).up();\n        });\n    }\n    elem.up(); // end of transport\n};\n\n// XEP-0293\nSDP.prototype.rtcpFbToJingle = function(mediaindex, elem, payloadtype) {\n    const lines\n        = SDPUtil.findLines(\n            this.media[mediaindex],\n            `a=rtcp-fb:${payloadtype}`);\n\n    lines.forEach(line => {\n        const feedback = SDPUtil.parseRTCPFB(line);\n\n        if (feedback.type === 'trr-int') {\n            elem.c('rtcp-fb-trr-int', {\n                xmlns: 'urn:xmpp:jingle:apps:rtp:rtcp-fb:0',\n                value: feedback.params[0]\n            });\n            elem.up();\n        } else {\n            elem.c('rtcp-fb', {\n                xmlns: 'urn:xmpp:jingle:apps:rtp:rtcp-fb:0',\n                type: feedback.type\n            });\n            if (feedback.params.length > 0) {\n                elem.attrs({ 'subtype': feedback.params[0] });\n            }\n            elem.up();\n        }\n    });\n};\n\nSDP.prototype.rtcpFbFromJingle = function(elem, payloadtype) { // XEP-0293\n    let sdp = '';\n    const feedbackElementTrrInt\n        = elem.find(\n            '>rtcp-fb-trr-int[xmlns=\"urn:xmpp:jingle:apps:rtp:rtcp-fb:0\"]');\n\n    if (feedbackElementTrrInt.length) {\n        sdp += 'a=rtcp-fb:* trr-int ';\n        if (feedbackElementTrrInt.attr('value')) {\n            sdp += feedbackElementTrrInt.attr('value');\n        } else {\n            sdp += '0';\n        }\n        sdp += '\\r\\n';\n    }\n\n    const feedbackElements = elem.find('>rtcp-fb[xmlns=\"urn:xmpp:jingle:apps:rtp:rtcp-fb:0\"]');\n\n    feedbackElements.each((_, fb) => {\n        sdp += `a=rtcp-fb:${payloadtype} ${fb.getAttribute('type')}`;\n        if (fb.hasAttribute('subtype')) {\n            sdp += ` ${fb.getAttribute('subtype')}`;\n        }\n        sdp += '\\r\\n';\n    });\n\n    return sdp;\n};\n\n// construct an SDP from a jingle stanza\nSDP.prototype.fromJingle = function(jingle) {\n    const sessionId = Date.now();\n\n    // Use a unique session id for every TPC.\n    this.raw = 'v=0\\r\\n'\n        + `o=- ${sessionId} 2 IN IP4 0.0.0.0\\r\\n`\n        + 's=-\\r\\n'\n        + 't=0 0\\r\\n';\n\n    // http://tools.ietf.org/html/draft-ietf-mmusic-sdp-bundle-negotiation-04\n    // #section-8\n    const groups\n        = $(jingle).find('>group[xmlns=\"urn:xmpp:jingle:apps:grouping:0\"]');\n\n    if (groups.length) {\n        groups.each((idx, group) => {\n            const contents\n                = $(group)\n                    .find('>content')\n                    .map((_, content) => content.getAttribute('name'))\n                    .get();\n\n            if (contents.length > 0) {\n                this.raw\n                    += `a=group:${\n                        group.getAttribute('semantics')\n                            || group.getAttribute('type')} ${\n                        contents.join(' ')}\\r\\n`;\n            }\n        });\n    }\n\n    this.session = this.raw;\n    jingle.find('>content').each((_, content) => {\n        const m = this.jingle2media($(content));\n\n        this.media.push(m);\n    });\n\n    // reconstruct msid-semantic -- apparently not necessary\n    /*\n     var msid = SDPUtil.parseSSRC(this.raw);\n     if (msid.hasOwnProperty('mslabel')) {\n     this.session += \"a=msid-semantic: WMS \" + msid.mslabel + \"\\r\\n\";\n     }\n     */\n\n    this.raw = this.session + this.media.join('');\n};\n\n// translate a jingle content element into an an SDP media part\nSDP.prototype.jingle2media = function(content) {\n    const desc = content.find('>description');\n    const transport = content.find('>transport[xmlns=\"urn:xmpp:jingle:transports:ice-udp:1\"]');\n    let sdp = '';\n    const sctp = transport.find(\n        '>sctpmap[xmlns=\"urn:xmpp:jingle:transports:dtls-sctp:1\"]');\n\n    const media = { media: desc.attr('media') };\n\n    media.port = '9';\n    if (content.attr('senders') === 'rejected') {\n        // estos hack to reject an m-line.\n        media.port = '0';\n    }\n    if (transport.find('>fingerprint[xmlns=\"urn:xmpp:jingle:apps:dtls:0\"]').length) {\n        media.proto = sctp.length ? 'UDP/DTLS/SCTP' : 'UDP/TLS/RTP/SAVPF';\n    } else {\n        media.proto = 'UDP/TLS/RTP/SAVPF';\n    }\n    if (sctp.length) {\n        sdp += `m=application ${media.port} UDP/DTLS/SCTP webrtc-datachannel\\r\\n`;\n        sdp += `a=sctp-port:${sctp.attr('number')}\\r\\n`;\n        sdp += 'a=max-message-size:262144\\r\\n';\n    } else {\n        media.fmt\n            = desc\n                .find('>payload-type')\n                .map((_, payloadType) => payloadType.getAttribute('id'))\n                .get();\n        sdp += `${SDPUtil.buildMLine(media)}\\r\\n`;\n    }\n\n    sdp += 'c=IN IP4 0.0.0.0\\r\\n';\n    if (!sctp.length) {\n        sdp += 'a=rtcp:1 IN IP4 0.0.0.0\\r\\n';\n    }\n\n    // XEP-0176 ICE parameters\n    if (transport.length) {\n        if (transport.attr('ufrag')) {\n            sdp += `${SDPUtil.buildICEUfrag(transport.attr('ufrag'))}\\r\\n`;\n        }\n        if (transport.attr('pwd')) {\n            sdp += `${SDPUtil.buildICEPwd(transport.attr('pwd'))}\\r\\n`;\n        }\n        transport.find('>fingerprint[xmlns=\"urn:xmpp:jingle:apps:dtls:0\"]').each((_, fingerprint) => {\n            sdp += `a=fingerprint:${fingerprint.getAttribute('hash')}`;\n            sdp += ` ${$(fingerprint).text()}`;\n            sdp += '\\r\\n';\n            if (fingerprint.hasAttribute('setup')) {\n                sdp += `a=setup:${fingerprint.getAttribute('setup')}\\r\\n`;\n            }\n        });\n    }\n\n    // XEP-0176 ICE candidates\n    transport.find('>candidate')\n        .each((_, candidate) => {\n            let protocol = candidate.getAttribute('protocol');\n\n            protocol\n                = typeof protocol === 'string' ? protocol.toLowerCase() : '';\n\n            if ((this.removeTcpCandidates\n                    && (protocol === 'tcp' || protocol === 'ssltcp'))\n                || (this.removeUdpCandidates && protocol === 'udp')) {\n                return;\n            } else if (this.failICE) {\n                candidate.setAttribute('ip', '1.1.1.1');\n            }\n\n            sdp += SDPUtil.candidateFromJingle(candidate);\n        });\n\n    switch (content.attr('senders')) {\n    case 'initiator':\n        sdp += `a=${MediaDirection.SENDONLY}\\r\\n`;\n        break;\n    case 'responder':\n        sdp += `a=${MediaDirection.RECVONLY}\\r\\n`;\n        break;\n    case 'none':\n        sdp += `a=${MediaDirection.INACTIVE}\\r\\n`;\n        break;\n    case 'both':\n        sdp += `a=${MediaDirection.SENDRECV}\\r\\n`;\n        break;\n    }\n    sdp += `a=mid:${content.attr('name')}\\r\\n`;\n\n    // <description><rtcp-mux/></description>\n    // see http://code.google.com/p/libjingle/issues/detail?id=309 -- no spec\n    // though\n    // and http://mail.jabber.org/pipermail/jingle/2011-December/001761.html\n    if (desc.find('>rtcp-mux').length) {\n        sdp += 'a=rtcp-mux\\r\\n';\n    }\n\n    desc.find('>payload-type').each((_, payloadType) => {\n        sdp += `${SDPUtil.buildRTPMap(payloadType)}\\r\\n`;\n        if ($(payloadType).find('>parameter').length) {\n            sdp += `a=fmtp:${payloadType.getAttribute('id')} `;\n            sdp\n                += $(payloadType)\n                    .find('>parameter')\n                    .map((__, parameter) => {\n                        const name = parameter.getAttribute('name');\n\n                        return (\n                            (name ? `${name}=` : '')\n                                + parameter.getAttribute('value'));\n                    })\n                    .get()\n                    .join('; ');\n            sdp += '\\r\\n';\n        }\n\n        // xep-0293\n        sdp += this.rtcpFbFromJingle($(payloadType), payloadType.getAttribute('id'));\n    });\n\n    // xep-0293\n    sdp += this.rtcpFbFromJingle(desc, '*');\n\n    // xep-0294\n    desc\n        .find('>rtp-hdrext[xmlns=\"urn:xmpp:jingle:apps:rtp:rtp-hdrext:0\"]')\n        .each((_, hdrExt) => {\n            sdp\n                += `a=extmap:${hdrExt.getAttribute('id')} ${\n                    hdrExt.getAttribute('uri')}\\r\\n`;\n        });\n\n    // XEP-0339 handle ssrc-group attributes\n    desc\n        .find('>ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n        .each((_, ssrcGroup) => {\n            const semantics = ssrcGroup.getAttribute('semantics');\n            const ssrcs\n                = $(ssrcGroup)\n                    .find('>source')\n                    .map((__, source) => source.getAttribute('ssrc'))\n                    .get();\n\n            if (ssrcs.length) {\n                sdp += `a=ssrc-group:${semantics} ${ssrcs.join(' ')}\\r\\n`;\n            }\n        });\n\n    // XEP-0339 handle source attributes\n    let userSources = '';\n    let nonUserSources = '';\n\n    desc\n        .find('>source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n        .each((_, source) => {\n            const ssrc = source.getAttribute('ssrc');\n            let isUserSource = true;\n            let sourceStr = '';\n\n            $(source)\n                .find('>parameter')\n                .each((__, parameter) => {\n                    const name = parameter.getAttribute('name');\n                    let value = parameter.getAttribute('value');\n\n                    value = SDPUtil.filterSpecialChars(value);\n                    sourceStr += `a=ssrc:${ssrc} ${name}`;\n\n                    if (value && value.length) {\n                        sourceStr += `:${value}`;\n                    }\n\n                    sourceStr += '\\r\\n';\n\n                    if (value?.includes('mixedmslabel')) {\n                        isUserSource = false;\n                    }\n                });\n\n            if (isUserSource) {\n                userSources += sourceStr;\n            } else {\n                nonUserSources += sourceStr;\n            }\n        });\n\n    // The sdp-interop package is relying the mixedmslabel m line to be the first one in order to set the direction\n    // to sendrecv.\n    sdp += nonUserSources + userSources;\n\n    return sdp;\n};\n","import FeatureFlags from '../flags/FeatureFlags';\n\nimport SDPUtil from './SDPUtil';\n\n// this could be useful in Array.prototype.\n/**\n *\n * @param array1\n * @param array2\n */\nfunction arrayEquals(array1, array2) {\n    // if the other array is a falsy value, return\n    if (!array2) {\n        return false;\n    }\n\n    // compare lengths - can save a lot of time\n    if (array1.length !== array2.length) {\n        return false;\n    }\n\n    for (let i = 0, l = array1.length; i < l; i++) {\n        // Check if we have nested arrays\n        if (array1[i] instanceof Array && array2[i] instanceof Array) {\n            // recurse into the nested arrays\n            if (!array1[i].equals(array2[i])) {\n                return false;\n            }\n        } else if (array1[i] !== array2[i]) {\n            // Warning - two different object instances will never be\n            // equal: {x:20} != {x:20}\n            return false;\n        }\n    }\n\n    return true;\n}\n\n/**\n *\n * @param mySDP\n * @param otherSDP\n */\nexport default function SDPDiffer(mySDP, otherSDP) {\n    this.mySDP = mySDP;\n    this.otherSDP = otherSDP;\n    if (!mySDP) {\n        throw new Error('\"mySDP\" is undefined!');\n    } else if (!otherSDP) {\n        throw new Error('\"otherSDP\" is undefined!');\n    }\n}\n\n/**\n * Returns map of MediaChannel that contains media contained in\n * 'mySDP', but not contained in 'otherSdp'. Mapped by channel idx.\n */\nSDPDiffer.prototype.getNewMedia = function() {\n\n    const myMedias = this.mySDP.getMediaSsrcMap();\n    const othersMedias = this.otherSDP.getMediaSsrcMap();\n    const newMedia = {};\n\n    Object.keys(othersMedias).forEach(othersMediaIdx => {\n        const myMedia = myMedias[othersMediaIdx];\n        const othersMedia = othersMedias[othersMediaIdx];\n\n        if (!myMedia && othersMedia) {\n            // Add whole channel\n            newMedia[othersMediaIdx] = othersMedia;\n\n            return;\n        }\n\n        // Look for new ssrcs across the channel\n        Object.keys(othersMedia.ssrcs).forEach(ssrc => {\n            if (Object.keys(myMedia.ssrcs).indexOf(ssrc) === -1) {\n                // Allocate channel if we've found ssrc that doesn't exist in\n                // our channel\n                if (!newMedia[othersMediaIdx]) {\n                    newMedia[othersMediaIdx] = {\n                        mediaindex: othersMedia.mediaindex,\n                        mid: othersMedia.mid,\n                        ssrcs: {},\n                        ssrcGroups: []\n                    };\n                }\n                newMedia[othersMediaIdx].ssrcs[ssrc] = othersMedia.ssrcs[ssrc];\n            } else if (othersMedia.ssrcs[ssrc].lines\n                        && myMedia.ssrcs[ssrc].lines) {\n                // we want to detect just changes in adding/removing msid\n                const myContainMsid = myMedia.ssrcs[ssrc].lines.find(\n                    line => line.indexOf('msid') !== -1) !== undefined;\n                const newContainMsid = othersMedia.ssrcs[ssrc].lines.find(\n                    line => line.indexOf('msid') !== -1) !== undefined;\n\n                if (myContainMsid !== newContainMsid) {\n                    if (!newMedia[othersMediaIdx]) {\n                        newMedia[othersMediaIdx] = {\n                            mediaindex: othersMedia.mediaindex,\n                            mid: othersMedia.mid,\n                            ssrcs: {},\n                            ssrcGroups: []\n                        };\n                    }\n                    newMedia[othersMediaIdx].ssrcs[ssrc]\n                        = othersMedia.ssrcs[ssrc];\n                }\n            }\n        });\n\n        // Look for new ssrc groups across the channels\n        othersMedia.ssrcGroups.forEach(otherSsrcGroup => {\n\n            // try to match the other ssrc-group with an ssrc-group of ours\n            let matched = false;\n\n            for (let i = 0; i < myMedia.ssrcGroups.length; i++) {\n                const mySsrcGroup = myMedia.ssrcGroups[i];\n\n                if (otherSsrcGroup.semantics === mySsrcGroup.semantics\n                    && arrayEquals(otherSsrcGroup.ssrcs, mySsrcGroup.ssrcs)) {\n\n                    matched = true;\n                    break;\n                }\n            }\n\n            if (!matched) {\n                // Allocate channel if we've found an ssrc-group that doesn't\n                // exist in our channel\n\n                if (!newMedia[othersMediaIdx]) {\n                    newMedia[othersMediaIdx] = {\n                        mediaindex: othersMedia.mediaindex,\n                        mid: othersMedia.mid,\n                        ssrcs: {},\n                        ssrcGroups: []\n                    };\n                }\n                newMedia[othersMediaIdx].ssrcGroups.push(otherSsrcGroup);\n            }\n        });\n    });\n\n    return newMedia;\n};\n\n/**\n * TODO: document!\n */\nSDPDiffer.prototype.toJingle = function(modify) {\n    const sdpMediaSsrcs = this.getNewMedia();\n\n    let modified = false;\n\n    Object.keys(sdpMediaSsrcs).forEach(mediaindex => {\n        modified = true;\n        const media = sdpMediaSsrcs[mediaindex];\n\n        modify.c('content', { name: media.mid });\n\n        modify.c('description',\n            { xmlns: 'urn:xmpp:jingle:apps:rtp:1',\n                media: media.mid });\n\n        // FIXME: not completely sure this operates on blocks and / or handles\n        // different ssrcs correctly\n        // generate sources from lines\n        Object.keys(media.ssrcs).forEach(ssrcNum => {\n            const mediaSsrc = media.ssrcs[ssrcNum];\n            const ssrcLines = mediaSsrc.lines;\n            const sourceName = SDPUtil.parseSourceNameLine(ssrcLines);\n\n            modify.c('source', { xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0' });\n            modify.attrs({\n                name: FeatureFlags.isSourceNameSignalingEnabled() ? sourceName : undefined,\n                ssrc: mediaSsrc.ssrc\n            });\n\n            // Only MSID attribute is sent\n            const msid = SDPUtil.parseMSIDAttribute(ssrcLines);\n\n            if (msid) {\n                modify.c('parameter');\n                modify.attrs({ name: 'msid' });\n                modify.attrs({ value: msid });\n                modify.up();\n            }\n\n            modify.up(); // end of source\n        });\n\n        // generate source groups from lines\n        media.ssrcGroups.forEach(ssrcGroup => {\n            if (ssrcGroup.ssrcs.length) {\n\n                modify.c('ssrc-group', {\n                    semantics: ssrcGroup.semantics,\n                    xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                });\n\n                ssrcGroup.ssrcs.forEach(ssrc => {\n                    modify.c('source', { ssrc })\n                        .up(); // end of source\n                });\n                modify.up(); // end of ssrc-group\n            }\n        });\n\n        modify.up(); // end of description\n        modify.up(); // end of content\n    });\n\n    return modified;\n};\n","import { getLogger } from '@jitsi/logger';\nimport async from 'async';\n\nconst logger = getLogger(__filename);\n\n/**\n * A queue for async task execution.\n */\nexport default class AsyncQueue {\n    /**\n     * Creates new instance.\n     */\n    constructor() {\n        this._queue = async.queue(this._processQueueTasks.bind(this), 1);\n        this._stopped = false;\n    }\n\n    /**\n     * Removes any pending tasks from the queue.\n     */\n    clear() {\n        this._queue.kill();\n    }\n\n    /**\n     * Internal task processing implementation which makes things work.\n     */\n    _processQueueTasks(task, finishedCallback) {\n        try {\n            task(finishedCallback);\n        } catch (error) {\n            logger.error(`Task failed: ${error?.stack}`);\n            finishedCallback(error);\n        }\n    }\n\n    /**\n     * The 'task' function will be given a callback it MUST call with either:\n     *  1) No arguments if it was successful or\n     *  2) An error argument if there was an error\n     * If the task wants to process the success or failure of the task, it\n     * should pass the {@code callback} to the push function, e.g.:\n     * queue.push(task, (err) => {\n     *     if (err) {\n     *         // error handling\n     *     } else {\n     *         // success handling\n     *     }\n     * });\n     *\n     * @param {function} task - The task to be executed. See the description above.\n     * @param {function} [callback] - Optional callback to be called after the task has been executed.\n     */\n    push(task, callback) {\n        if (this._stopped) {\n            callback && callback(new Error('The queue has been stopped'));\n\n            return;\n        }\n        this._queue.push(task, callback);\n    }\n\n    /**\n     * Shutdowns the queue. All already queued tasks will execute, but no future tasks can be added. If a task is added\n     * after the queue has been shutdown then the callback will be called with an error.\n     */\n    shutdown() {\n        this._stopped = true;\n    }\n}\n","/**\n * The pending Jingle session state which means the session as defined in\n * XEP-0166(before 'session-invite/session-accept' took place).\n *\n * @type {string}\n */\nexport const PENDING = 'pending';\n\n/**\n * The active Jingle session state as defined in XEP-0166\n * (after 'session-invite'/'session-accept').\n *\n * @type {string}\n */\nexport const ACTIVE = 'active';\n\n/**\n * The ended Jingle session state as defined in XEP-0166\n * (after 'session-terminate').\n * @type {string}\n */\nexport const ENDED = 'ended';\n","import { getLogger } from '@jitsi/logger';\n\nimport Listenable from '../util/Listenable';\n\nimport * as JingleSessionState from './JingleSessionState';\n\nconst logger = getLogger(__filename);\n\n/**\n * JingleSession provides an API to manage a single Jingle session. We will\n * have different implementations depending on the underlying interface used\n * (i.e. WebRTC and ORTC) and here we hold the code common to all of them.\n */\nexport default class JingleSession extends Listenable {\n\n    /* eslint-disable max-params */\n\n    /**\n     * Creates new <tt>JingleSession</tt>.\n     * @param {string} sid the Jingle session identifier\n     * @param {string} localJid our JID\n     * @param {string} remoteJid the JID of the remote peer\n     * @param {XmppConnection} connection the XMPP connection\n     * @param {Object} mediaConstraints the media constraints object passed to the PeerConnection onCreateAnswer/Offer.\n     * @param {Object} pcConfig The {@code RTCConfiguration} object passed to the PeerConnection's constructor.\n     * @param {boolean} isInitiator indicates if it will be the side which initiates the session.\n     */\n    constructor(\n            sid,\n            localJid,\n            remoteJid,\n            connection,\n            mediaConstraints,\n            pcConfig,\n            isInitiator) {\n        super();\n        this.sid = sid;\n        this.localJid = localJid;\n        this.remoteJid = remoteJid;\n        this.connection = connection;\n        this.mediaConstraints = mediaConstraints;\n        this.pcConfig = pcConfig;\n\n        /**\n         * Indicates whether this instance is an initiator or an answerer of\n         * the Jingle session.\n         * @type {boolean}\n         */\n        this.isInitiator = isInitiator;\n\n        /**\n         * Whether to use dripping or not. Dripping is sending trickle\n         * candidates not one-by-one.\n         */\n        this.usedrip = true;\n\n        /**\n         *  When dripping is used, stores ICE candidates which are to be sent.\n         */\n        this.dripContainer = [];\n\n        /**\n         * The chat room instance associated with the session.\n         * @type {ChatRoom}\n         */\n        this.room = null;\n\n        /**\n         * The signaling layer.\n         * @type {SignalingLayerImpl | null}\n         * @private\n         */\n        this._signalingLayer = null;\n\n        /**\n         * Jingle session state - uninitialized until {@link initialize} is\n         * called @type {JingleSessionState}\n         */\n        this.state = null;\n\n        /**\n         * The RTC service instance\n         * @type {RTC}\n         */\n        this.rtc = null;\n    }\n\n    /**\n     * Returns XMPP address of this session's initiator.\n     * @return {string}\n     */\n    get initiatorJid() {\n        return this.isInitiator ? this.localJid : this.remoteJid;\n    }\n\n    /**\n     * Returns XMPP address of this session's responder.\n     * @return {string}\n     */\n    get responderJid() {\n        return this.isInitiator ? this.remoteJid : this.localJid;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Prepares this object to initiate a session.\n     * @param {ChatRoom} room the chat room for the conference associated with\n     * this session\n     * @param {RTC} rtc the RTC service instance\n     * @param {SignalingLayerImpl} signalingLayer - The signaling layer instance.\n     * @param {object} options - the options, see implementing class's\n     * {@link #doInitialize} description for more details.\n     */\n    initialize(room, rtc, signalingLayer, options) {\n        if (this.state !== null) {\n            const errmsg\n                = `attempt to initiate on session ${this.sid}\n                   in state ${this.state}`;\n\n            logger.error(errmsg);\n            throw new Error(errmsg);\n        }\n\n        // TODO decouple from room\n        this.room = room;\n        this.rtc = rtc;\n        this._signalingLayer = signalingLayer;\n        this.state = JingleSessionState.PENDING;\n        this.doInitialize(options);\n    }\n\n    /**\n     * The implementing class finishes initialization here. Called at the end of\n     * {@link initialize}.\n     * @param {Object} options - The options specific to the implementing class.\n     * @protected\n     */\n    doInitialize(options) { } // eslint-disable-line no-unused-vars, no-empty-function, max-len\n\n    /* eslint-disable no-unused-vars, no-empty-function */\n\n    /**\n     * Adds the ICE candidates found in the 'contents' array as remote\n     * candidates?\n     * Note: currently only used on transport-info\n     *\n     * @param contents\n     */\n    addIceCandidates(contents) {}\n\n    /* eslint-enable no-unused-vars, no-empty-function */\n\n    /**\n     * Returns current state of this <tt>JingleSession</tt> instance.\n     * @returns {JingleSessionState} the current state of this session instance.\n     */\n    getState() {\n        return this.state;\n    }\n\n    /* eslint-disable no-unused-vars, no-empty-function */\n\n    /**\n     * Handles an 'add-source' event.\n     *\n     * @param contents an array of Jingle 'content' elements.\n     */\n    addSources(contents) {}\n\n    /**\n     * Handles a 'remove-source' event.\n     *\n     * @param contents an array of Jingle 'content' elements.\n     */\n    removeSources(contents) {}\n\n    /**\n     * Terminates this Jingle session by sending session-terminate\n     * @param success a callback called once the 'session-terminate' packet has\n     * been acknowledged with RESULT.\n     * @param failure a callback called when either timeout occurs or ERROR\n     * response is received.\n     * @param {Object} options\n     * @param {string} [options.reason] XMPP Jingle error condition\n     * @param {string} [options.reasonDescription] some meaningful error message\n     * @param {boolean} [options.requestRestart=false] set to true to ask Jicofo to start a new session one this once is\n     * terminated.\n     * @param {boolean} [options.sendSessionTerminate=true] set to false to skip\n     * sending session-terminate. It may not make sense to send it if the XMPP\n     * connection has been closed already or if the remote peer has disconnected\n     */\n    terminate(success, failure, options) {}\n\n    /**\n     * Handles an offer from the remote peer (prepares to accept a session).\n     * @param jingle the 'jingle' XML element.\n     * @param success callback called when we the incoming session has been\n     * accepted\n     * @param failure callback called when we fail for any reason, will supply\n     * error object with details(which is meant more to be printed to the logger\n     * than analysed in the code, as the error is unrecoverable anyway)\n     */\n    acceptOffer(jingle, success, failure) {}\n\n    /**\n     * Returns the JID of the initiator of the jingle session.\n     */\n    _getInitiatorJid() {\n        return this.isInitiator ? this.localJid : this.remoteJid;\n    }\n\n    /* eslint-enable no-unused-vars, no-empty-function */\n}\n","export default {\n    /**\n     * Event triggered when the remote party signals it's receive video max frame height.\n     */\n    REMOTE_VIDEO_CONSTRAINTS_CHANGED: 'media_session.REMOTE_VIDEO_CONSTRAINTS_CHANGED'\n};\n","/* global $ */\n\nimport { getLogger } from '@jitsi/logger';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport * as CodecMimeType from '../../service/RTC/CodecMimeType';\nimport MediaDirection from '../../service/RTC/MediaDirection';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport {\n    ICE_DURATION,\n    ICE_STATE_CHANGED\n} from '../../service/statistics/AnalyticsEvents';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport { SS_DEFAULT_FRAME_RATE } from '../RTC/ScreenObtainer';\nimport FeatureFlags from '../flags/FeatureFlags';\nimport SDP from '../sdp/SDP';\nimport SDPDiffer from '../sdp/SDPDiffer';\nimport SDPUtil from '../sdp/SDPUtil';\nimport Statistics from '../statistics/statistics';\nimport AsyncQueue from '../util/AsyncQueue';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport { integerHash } from '../util/StringUtils';\n\nimport browser from './../browser';\nimport JingleSession from './JingleSession';\nimport * as JingleSessionState from './JingleSessionState';\nimport MediaSessionEvents from './MediaSessionEvents';\nimport XmppConnection from './XmppConnection';\n\nconst logger = getLogger(__filename);\n\n/**\n * Constant tells how long we're going to wait for IQ response, before timeout\n * error is  triggered.\n * @type {number}\n */\nconst IQ_TIMEOUT = 10000;\n\n/*\n * The default number of samples (per stat) to keep when webrtc stats gathering\n * is enabled in TraceablePeerConnection.\n */\nconst DEFAULT_MAX_STATS = 300;\n\n/**\n * The time duration for which the client keeps gathering ICE candidates to be sent out in a single IQ.\n * @type {number} timeout in ms.\n */\nconst ICE_CAND_GATHERING_TIMEOUT = 150;\n\n/**\n * Reads the endpoint ID given a string which represents either the endpoint's full JID, or the endpoint ID itself.\n * @param {String} jidOrEndpointId A string which is either the full JID of a participant, or the ID of an\n * endpoint/participant.\n * @returns The endpoint ID associated with 'jidOrEndpointId'.\n */\nfunction getEndpointId(jidOrEndpointId) {\n    return Strophe.getResourceFromJid(jidOrEndpointId) || jidOrEndpointId;\n}\n\n/**\n * @typedef {Object} JingleSessionPCOptions\n * @property {Object} abTesting - A/B testing related options (ask George).\n * @property {boolean} abTesting.enableSuspendVideoTest - enables the suspend\n * video test ?(ask George).\n * @property {boolean} disableH264 - Described in the config.js[1].\n * @property {boolean} disableRtx - Described in the config.js[1].\n * @property {boolean} disableSimulcast - Described in the config.js[1].\n * @property {boolean} enableInsertableStreams - Set to true when the insertable streams constraints is to be enabled\n * on the PeerConnection.\n * @property {boolean} enableLayerSuspension - Described in the config.js[1].\n * @property {boolean} failICE - it's an option used in the tests. Set to\n * <tt>true</tt> to block any real candidates and make the ICE fail.\n * @property {boolean} gatherStats - Described in the config.js[1].\n * @property {object} p2p - Peer to peer related options (FIXME those could be\n * fetched from config.p2p on the upper level).\n * @property {boolean} preferH264 - Described in the config.js[1].\n * @property {Object} testing - Testing and/or experimental options.\n * @property {boolean} webrtcIceUdpDisable - Described in the config.js[1].\n * @property {boolean} webrtcIceTcpDisable - Described in the config.js[1].\n *\n * [1]: https://github.com/jitsi/jitsi-meet/blob/master/config.js\n */\n/**\n *\n */\nexport default class JingleSessionPC extends JingleSession {\n    /**\n     * Parses 'senders' attribute of the video content.\n     * @param {jQuery} jingleContents\n     * @return {string|null} one of the values of content \"senders\" attribute\n     * defined by Jingle. If there is no \"senders\" attribute or if the value is\n     * invalid then <tt>null</tt> will be returned.\n     * @private\n     */\n    static parseVideoSenders(jingleContents) {\n        const videoContents = jingleContents.find('>content[name=\"video\"]');\n\n        if (videoContents.length) {\n            const senders = videoContents[0].getAttribute('senders');\n\n            if (senders === 'both'\n                || senders === 'initiator'\n                || senders === 'responder'\n                || senders === 'none') {\n                return senders;\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Parses the video max frame height value out of the 'content-modify' IQ.\n     *\n     * @param {jQuery} jingleContents - A jQuery selector pointing to the '>jingle' element.\n     * @returns {Number|null}\n     */\n    static parseMaxFrameHeight(jingleContents) {\n        const maxFrameHeightSel = jingleContents.find('>content[name=\"video\"]>max-frame-height');\n\n        return maxFrameHeightSel.length ? Number(maxFrameHeightSel.text()) : null;\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Creates new <tt>JingleSessionPC</tt>\n     * @param {string} sid the Jingle Session ID - random string which identifies the session\n     * @param {string} localJid our JID\n     * @param {string} remoteJid remote peer JID\n     * @param {XmppConnection} connection - The XMPP connection instance.\n     * @param mediaConstraints the media constraints object passed to createOffer/Answer, as defined\n     * by the WebRTC standard\n     * @param pcConfig The {@code RTCConfiguration} to use for the WebRTC peer connection.\n     * @param {boolean} isP2P indicates whether this instance is meant to be used in a direct, peer to\n     * peer connection or <tt>false</tt> if it's a JVB connection.\n     * @param {boolean} isInitiator indicates if it will be the side which initiates the session.\n     * @constructor\n     *\n     * @implements {SignalingLayer}\n     */\n    constructor(\n            sid,\n            localJid,\n            remoteJid,\n            connection,\n            mediaConstraints,\n            pcConfig,\n            isP2P,\n            isInitiator) {\n        super(\n            sid,\n            localJid,\n            remoteJid, connection, mediaConstraints, pcConfig, isInitiator);\n\n        /**\n         * The bridge session's identifier. One Jingle session can during\n         * it's lifetime participate in multiple bridge sessions managed by\n         * Jicofo. A new bridge session is started whenever Jicofo sends\n         * 'session-initiate' or 'transport-replace'.\n         *\n         * @type {?string}\n         * @private\n         */\n        this._bridgeSessionId = null;\n\n        /**\n         * The oldest SDP passed to {@link notifyMySSRCUpdate} while the XMPP connection was offline that will be\n         * used to update Jicofo once the XMPP connection goes back online.\n         * @type {SDP|undefined}\n         * @private\n         */\n        this._cachedOldLocalSdp = undefined;\n\n        /**\n         * The latest SDP passed to {@link notifyMySSRCUpdate} while the XMPP connection was offline that will be\n         * used to update Jicofo once the XMPP connection goes back online.\n         * @type {SDP|undefined}\n         * @private\n         */\n        this._cachedNewLocalSdp = undefined;\n\n        /**\n         * Stores result of {@link window.performance.now()} at the time when\n         * ICE enters 'checking' state.\n         * @type {number|null} null if no value has been stored yet\n         * @private\n         */\n        this._iceCheckingStartedTimestamp = null;\n\n        /**\n         * Stores result of {@link window.performance.now()} at the time when\n         * first ICE candidate is spawned by the peerconnection to mark when\n         * ICE gathering started. That's, because ICE gathering state changed\n         * events are not supported by most of the browsers, so we try something\n         * that will work everywhere. It may not be as accurate, but given that\n         * 'host' candidate usually comes first, the delay should be minimal.\n         * @type {number|null} null if no value has been stored yet\n         * @private\n         */\n        this._gatheringStartedTimestamp = null;\n\n        /**\n         * Local preference for the receive video max frame height.\n         *\n         * @type {Number|undefined}\n         */\n        this.localRecvMaxFrameHeight = undefined;\n\n        /**\n         * Indicates whether or not this session is willing to send/receive\n         * video media. When set to <tt>false</tt> the underlying peer\n         * connection will disable local video transfer and the remote peer will\n         * be will be asked to stop sending video via 'content-modify' IQ\n         * (the senders attribute of video contents will be adjusted\n         * accordingly). Note that this notification is sent only in P2P\n         * session, because Jicofo does not support it yet. Obviously when\n         * the value is changed from <tt>false</tt> to <tt>true</tt> another\n         * notification will be sent to resume video transfer on the remote\n         * side.\n         * @type {boolean}\n         * @private\n         */\n        this._localVideoActive = true;\n\n        /**\n         * Indicates whether or not the remote peer has video transfer active.\n         * When set to <tt>true</tt> it means that remote peer is neither\n         * sending nor willing to receive video. In such case we'll ask\n         * our peerconnection to stop sending video by calling\n         * {@link TraceablePeerConnection.setVideoTransferActive} with\n         * <tt>false</tt>.\n         * @type {boolean}\n         * @private\n         */\n        this._remoteVideoActive = true;\n\n        /**\n         * Marks that ICE gathering duration has been reported already. That\n         * prevents reporting it again, after eventual 'transport-replace' (JVB\n         * conference migration/ICE restart).\n         * @type {boolean}\n         * @private\n         */\n        this._gatheringReported = false;\n\n        this.lasticecandidate = false;\n        this.closed = false;\n\n        /**\n         * Indicates whether or not this <tt>JingleSessionPC</tt> is used in\n         * a peer to peer type of session.\n         * @type {boolean} <tt>true</tt> if it's a peer to peer\n         * session or <tt>false</tt> if it's a JVB session\n         */\n        this.isP2P = isP2P;\n\n        /**\n         * Remote preference for the receive video max frame height.\n         *\n         * @type {Number|undefined}\n         */\n        this.remoteRecvMaxFrameHeight = undefined;\n\n        /**\n         * The queue used to serialize operations done on the peerconnection.\n         *\n         * @type {AsyncQueue}\n         */\n        this.modificationQueue = new AsyncQueue();\n\n        /**\n         * Flag used to guarantee that the connection established event is\n         * triggered just once.\n         * @type {boolean}\n         */\n        this.wasConnected = false;\n\n        /**\n         * Keeps track of how long (in ms) it took from ICE start to ICE\n         * connect.\n         *\n         * @type {number}\n         */\n        this.establishmentDuration = undefined;\n\n        this._xmppListeners = [];\n        this._xmppListeners.push(\n            connection.addEventListener(\n                XmppConnection.Events.CONN_STATUS_CHANGED,\n                this.onXmppStatusChanged.bind(this))\n        );\n\n        this._removeSenderVideoConstraintsChangeListener = undefined;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Checks whether or not this session instance is still operational.\n     * @private\n     * @returns {boolean} {@code true} if operation or {@code false} otherwise.\n     */\n    _assertNotEnded() {\n        return this.state !== JingleSessionState.ENDED;\n    }\n\n    /**\n     * @inheritDoc\n     * @param {JingleSessionPCOptions} options  - a set of config options.\n     */\n    doInitialize(options) {\n        this.failICE = Boolean(options.failICE);\n        this.lasticecandidate = false;\n        this.options = options;\n\n        /**\n         * {@code true} if reconnect is in progress.\n         * @type {boolean}\n         */\n        this.isReconnect = false;\n\n        /**\n         * Set to {@code true} if the connection was ever stable\n         * @type {boolean}\n         */\n        this.wasstable = false;\n        this.webrtcIceUdpDisable = Boolean(options.webrtcIceUdpDisable);\n        this.webrtcIceTcpDisable = Boolean(options.webrtcIceTcpDisable);\n\n        const pcOptions = { disableRtx: options.disableRtx };\n\n        if (options.gatherStats) {\n            pcOptions.maxstats = DEFAULT_MAX_STATS;\n        }\n        pcOptions.capScreenshareBitrate = false;\n        pcOptions.enableInsertableStreams = options.enableInsertableStreams;\n        pcOptions.videoQuality = options.videoQuality;\n        pcOptions.forceTurnRelay = options.forceTurnRelay;\n        pcOptions.audioQuality = options.audioQuality;\n        pcOptions.usesUnifiedPlan = this.usesUnifiedPlan\n            = browser.supportsUnifiedPlan()\n                && (browser.isFirefox()\n                    || browser.isWebKitBased()\n                    || (browser.isChromiumBased()\n\n                        // Provide a way to control the behavior for jvb and p2p connections independently.\n                        && this.isP2P\n                        ? options.p2p?.enableUnifiedOnChrome ?? true\n                        : options.enableUnifiedOnChrome ?? true));\n\n        if (this.isP2P) {\n            // simulcast needs to be disabled for P2P (121) calls\n            pcOptions.disableSimulcast = true;\n            const abtestSuspendVideo = this._abtestSuspendVideoEnabled(options);\n\n            if (typeof abtestSuspendVideo !== 'undefined') {\n                pcOptions.abtestSuspendVideo = abtestSuspendVideo;\n            }\n        } else {\n            // H264 does not support simulcast, so it needs to be disabled.\n            pcOptions.disableSimulcast\n                = options.disableSimulcast\n                    || (options.preferH264 && !options.disableH264)\n                    || (options.videoQuality && options.videoQuality.preferredCodec === CodecMimeType.H264);\n\n            // Disable simulcast for low fps screenshare and enable it for high fps screenshare.\n            // testing.capScreenshareBitrate config.js setting has now been deprecated.\n            pcOptions.capScreenshareBitrate = pcOptions.disableSimulcast\n                || !(typeof options.desktopSharingFrameRate?.max === 'number'\n                    && options.desktopSharingFrameRate?.max > SS_DEFAULT_FRAME_RATE);\n\n            // add the capScreenshareBitrate to the permanent properties so that it's included with every event that we\n            // send to the analytics backend.\n            Statistics.analytics.addPermanentProperties({ capScreenshareBitrate: pcOptions.capScreenshareBitrate });\n        }\n\n        if (options.startSilent) {\n            pcOptions.startSilent = true;\n        }\n\n        this.peerconnection\n            = this.rtc.createPeerConnection(\n                    this._signalingLayer,\n                    this.pcConfig,\n                    this.isP2P,\n                    pcOptions);\n\n        this.peerconnection.onicecandidate = ev => {\n            if (!ev) {\n                // There was an incomplete check for ev before which left\n                // the last line of the function unprotected from a potential\n                // throw of an exception. Consequently, it may be argued that\n                // the check is unnecessary. Anyway, I'm leaving it and making\n                // the check complete.\n                return;\n            }\n\n            // XXX this is broken, candidate is not parsed.\n            const candidate = ev.candidate;\n            const now = window.performance.now();\n\n            if (candidate) {\n                if (this._gatheringStartedTimestamp === null) {\n                    this._gatheringStartedTimestamp = now;\n                }\n\n                // Discard candidates of disabled protocols.\n                let protocol = candidate.protocol;\n\n                if (typeof protocol === 'string') {\n                    protocol = protocol.toLowerCase();\n                    if (protocol === 'tcp' || protocol === 'ssltcp') {\n                        if (this.webrtcIceTcpDisable) {\n                            return;\n                        }\n                    } else if (protocol === 'udp') {\n                        if (this.webrtcIceUdpDisable) {\n                            return;\n                        }\n                    }\n                }\n            } else if (!this._gatheringReported) {\n                // End of gathering\n                Statistics.sendAnalytics(\n                    ICE_DURATION,\n                    {\n                        phase: 'gathering',\n                        value: now - this._gatheringStartedTimestamp,\n                        p2p: this.isP2P,\n                        initiator: this.isInitiator\n                    });\n                this._gatheringReported = true;\n            }\n            this.sendIceCandidate(candidate);\n        };\n\n        // Note there is a change in the spec about closed:\n        // This value moved into the RTCPeerConnectionState enum in\n        // the May 13, 2016 draft of the specification, as it reflects the state\n        // of the RTCPeerConnection, not the signaling connection. You now\n        // detect a closed connection by checking for connectionState to be\n        // \"closed\" instead.\n        // I suppose at some point this will be moved to onconnectionstatechange\n        this.peerconnection.onsignalingstatechange = () => {\n            if (this.peerconnection.signalingState === 'stable') {\n                this.wasstable = true;\n            } else if (this.peerconnection.signalingState === 'closed'\n                || this.peerconnection.connectionState === 'closed') {\n                this.room.eventEmitter.emit(XMPPEvents.SUSPEND_DETECTED, this);\n            }\n        };\n\n        /**\n         * The oniceconnectionstatechange event handler contains the code to\n         * execute when the iceconnectionstatechange event, of type Event,\n         * is received by this RTCPeerConnection. Such an event is sent when\n         * the value of RTCPeerConnection.iceConnectionState changes.\n         */\n        this.peerconnection.oniceconnectionstatechange = () => {\n            const now = window.performance.now();\n            let isStable = false;\n\n            if (!this.isP2P) {\n                this.room.connectionTimes[\n                    `ice.state.${this.peerconnection.iceConnectionState}`]\n                    = now;\n            }\n            logger.log(`(TIME) ICE ${this.peerconnection.iceConnectionState} ${this.isP2P ? 'P2P' : 'JVB'}:\\t`, now);\n\n            Statistics.sendAnalytics(\n                ICE_STATE_CHANGED,\n                {\n                    p2p: this.isP2P,\n                    state: this.peerconnection.iceConnectionState,\n                    'signaling_state': this.peerconnection.signalingState,\n                    reconnect: this.isReconnect,\n                    value: now\n                });\n\n            this.room.eventEmitter.emit(\n                XMPPEvents.ICE_CONNECTION_STATE_CHANGED,\n                this,\n                this.peerconnection.iceConnectionState);\n            switch (this.peerconnection.iceConnectionState) {\n            case 'checking':\n                this._iceCheckingStartedTimestamp = now;\n                break;\n            case 'connected':\n                // Informs interested parties that the connection has been restored. This includes the case when\n                // media connection to the bridge has been restored after an ICE failure by using session-terminate.\n                if (this.peerconnection.signalingState === 'stable') {\n                    isStable = true;\n                    const usesTerminateForRestart = !this.options.enableIceRestart\n                        && this.room.supportsRestartByTerminate();\n\n                    if (this.isReconnect || usesTerminateForRestart) {\n                        this.room.eventEmitter.emit(\n                            XMPPEvents.CONNECTION_RESTORED, this);\n                    }\n                }\n\n                // Add a workaround for an issue on chrome in Unified plan when the local endpoint is the offerer.\n                // The 'signalingstatechange' event for 'stable' is handled after the 'iceconnectionstatechange' event\n                // for 'completed' is handled by the client. This prevents the client from firing a\n                // CONNECTION_ESTABLISHED event for the p2p session. As a result, the offerer continues to stay on the\n                // jvb connection while the remote peer switches to the p2p connection breaking the media flow between\n                // the endpoints.\n                // TODO - file a chromium bug and add the information here.\n                if (!this.wasConnected\n                    && (this.wasstable\n                        || isStable\n                        || (this.usesUnifiedPlan && this.isInitiator && browser.isChromiumBased()))) {\n\n                    Statistics.sendAnalytics(\n                        ICE_DURATION,\n                        {\n                            phase: 'checking',\n                            value: now - this._iceCheckingStartedTimestamp,\n                            p2p: this.isP2P,\n                            initiator: this.isInitiator\n                        });\n\n                    // Switch between ICE gathering and ICE checking whichever\n                    // started first (scenarios are different for initiator\n                    // vs responder)\n                    const iceStarted\n                        = Math.min(\n                            this._iceCheckingStartedTimestamp,\n                            this._gatheringStartedTimestamp);\n\n                    this.establishmentDuration = now - iceStarted;\n\n                    Statistics.sendAnalytics(\n                        ICE_DURATION,\n                        {\n                            phase: 'establishment',\n                            value: this.establishmentDuration,\n                            p2p: this.isP2P,\n                            initiator: this.isInitiator\n                        });\n\n                    this.wasConnected = true;\n                    this.room.eventEmitter.emit(\n                        XMPPEvents.CONNECTION_ESTABLISHED, this);\n                }\n                this.isReconnect = false;\n                break;\n            case 'disconnected':\n                this.isReconnect = true;\n\n                // Informs interested parties that the connection has been\n                // interrupted.\n                if (this.wasstable) {\n                    this.room.eventEmitter.emit(\n                        XMPPEvents.CONNECTION_INTERRUPTED, this);\n                }\n                break;\n            case 'failed':\n                this.room.eventEmitter.emit(\n                    XMPPEvents.CONNECTION_ICE_FAILED, this);\n                break;\n            }\n        };\n\n\n        /**\n         * The connection state event is fired whenever the aggregate of underlying\n         * transports change their state.\n         */\n        this.peerconnection.onconnectionstatechange = () => {\n            const icestate = this.peerconnection.iceConnectionState;\n\n            switch (this.peerconnection.connectionState) {\n            case 'failed':\n                // Since version 76 Chrome no longer switches ICE connection\n                // state to failed (see\n                // https://bugs.chromium.org/p/chromium/issues/detail?id=982793\n                // for details) we use this workaround to recover from lost connections\n                if (icestate === 'disconnected') {\n                    this.room.eventEmitter.emit(\n                        XMPPEvents.CONNECTION_ICE_FAILED, this);\n                }\n                break;\n            }\n        };\n\n        /**\n         * The negotiationneeded event is fired whenever we shake the media on the\n         * RTCPeerConnection object.\n         */\n        this.peerconnection.onnegotiationneeded = () => {\n            const state = this.peerconnection.signalingState;\n            const remoteDescription = this.peerconnection.remoteDescription;\n\n            if (this.usesUnifiedPlan\n                && !this.isP2P\n                && state === 'stable'\n                && remoteDescription\n                && typeof remoteDescription.sdp === 'string') {\n                logger.info(`${this} onnegotiationneeded fired on ${this.peerconnection}`);\n\n                const workFunction = finishedCallback => {\n                    const oldSdp = new SDP(this.peerconnection.localDescription.sdp);\n\n                    this._renegotiate()\n                        .then(() => this.peerconnection.configureSenderVideoEncodings())\n                        .then(() => {\n                            const newSdp = new SDP(this.peerconnection.localDescription.sdp);\n\n                            this.notifyMySSRCUpdate(oldSdp, newSdp);\n                        })\n                        .then(() => finishedCallback(), error => finishedCallback(error));\n                };\n\n                this.modificationQueue.push(\n                    workFunction,\n                    error => {\n                        if (error) {\n                            logger.error(`${this} onnegotiationneeded error`, error);\n                        } else {\n                            logger.debug(`${this} onnegotiationneeded executed - OK`);\n                        }\n                    });\n            }\n        };\n    }\n\n    /**\n     * Remote preference for receive video max frame height.\n     *\n     * @returns {Number|undefined}\n     */\n    getRemoteRecvMaxFrameHeight() {\n        if (this.isP2P) {\n            return this.remoteRecvMaxFrameHeight;\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Sends given candidate in Jingle 'transport-info' message.\n     * @param {RTCIceCandidate} candidate the WebRTC ICE candidate instance\n     * @private\n     */\n    sendIceCandidate(candidate) {\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n        if (candidate && candidate.candidate.length && !this.lasticecandidate) {\n            const ice = SDPUtil.iceparams(localSDP.media[candidate.sdpMLineIndex], localSDP.session);\n            const jcand = SDPUtil.candidateToJingle(candidate.candidate);\n\n            if (!(ice && jcand)) {\n                const errorMesssage = 'failed to get ice && jcand';\n\n                GlobalOnErrorHandler.callErrorHandler(new Error(errorMesssage));\n                logger.error(errorMesssage);\n\n                return;\n            }\n            ice.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\n\n            if (this.usedrip) {\n                if (this.dripContainer.length === 0) {\n                    setTimeout(() => {\n                        if (this.dripContainer.length === 0) {\n                            return;\n                        }\n                        this.sendIceCandidates(this.dripContainer);\n                        this.dripContainer = [];\n                    }, ICE_CAND_GATHERING_TIMEOUT);\n                }\n                this.dripContainer.push(candidate);\n            } else {\n                this.sendIceCandidates([ candidate ]);\n            }\n        } else {\n            logger.log(`${this} sendIceCandidate: last candidate`);\n\n            // FIXME: remember to re-think in ICE-restart\n            this.lasticecandidate = true;\n        }\n    }\n\n    /**\n     * Sends given candidates in Jingle 'transport-info' message.\n     * @param {Array<RTCIceCandidate>} candidates an array of the WebRTC ICE\n     * candidate instances\n     * @private\n     */\n    sendIceCandidates(candidates) {\n        if (!this._assertNotEnded('sendIceCandidates')) {\n\n            return;\n        }\n\n        logger.log(`${this} sendIceCandidates ${JSON.stringify(candidates)}`);\n        const cand = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\n                action: 'transport-info',\n                initiator: this.initiatorJid,\n                sid: this.sid });\n\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n        for (let mid = 0; mid < localSDP.media.length; mid++) {\n            const cands = candidates.filter(el => el.sdpMLineIndex === mid);\n            const mline\n                = SDPUtil.parseMLine(localSDP.media[mid].split('\\r\\n')[0]);\n\n            if (cands.length > 0) {\n                const ice\n                    = SDPUtil.iceparams(localSDP.media[mid], localSDP.session);\n\n                ice.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\n                cand.c('content', {\n                    creator: this.initiatorJid === this.localJid\n                        ? 'initiator' : 'responder',\n                    name: cands[0].sdpMid ? cands[0].sdpMid : mline.media\n                }).c('transport', ice);\n                for (let i = 0; i < cands.length; i++) {\n                    const candidate\n                        = SDPUtil.candidateToJingle(cands[i].candidate);\n\n                    // Mangle ICE candidate if 'failICE' test option is enabled\n\n                    if (this.failICE) {\n                        candidate.ip = '1.1.1.1';\n                    }\n                    cand.c('candidate', candidate).up();\n                }\n\n                // add fingerprint\n                const fingerprintLine\n                    = SDPUtil.findLine(\n                        localSDP.media[mid],\n                        'a=fingerprint:', localSDP.session);\n\n                if (fingerprintLine) {\n                    const tmp = SDPUtil.parseFingerprint(fingerprintLine);\n\n                    tmp.required = true;\n                    cand.c(\n                        'fingerprint',\n                        { xmlns: 'urn:xmpp:jingle:apps:dtls:0' })\n                        .t(tmp.fingerprint);\n                    delete tmp.fingerprint;\n                    cand.attrs(tmp);\n                    cand.up();\n                }\n                cand.up(); // transport\n                cand.up(); // content\n            }\n        }\n\n        // might merge last-candidate notification into this, but it is called\n        // a lot later. See webrtc issue #2340\n        // logger.log('was this the last candidate', this.lasticecandidate);\n        this.connection.sendIQ(\n            cand, null, this.newJingleErrorHandler(cand), IQ_TIMEOUT);\n    }\n\n    /**\n     * Sends Jingle 'session-info' message which includes custom Jitsi Meet\n     * 'ice-state' element with the text value 'failed' to let Jicofo know\n     * that the ICE connection has entered the failed state. It can then\n     * choose to re-create JVB channels and send 'transport-replace' to\n     * retry the connection.\n     */\n    sendIceFailedNotification() {\n        const sessionInfo\n            = $iq({\n                to: this.remoteJid,\n                type: 'set' })\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\n                action: 'session-info',\n                initiator: this.initiatorJid,\n                sid: this.sid })\n            .c('ice-state', { xmlns: 'http://jitsi.org/protocol/focus' })\n            .t('failed')\n            .up();\n\n        this._bridgeSessionId\n            && sessionInfo.c(\n                'bridge-session', {\n                    xmlns: 'http://jitsi.org/protocol/focus',\n                    id: this._bridgeSessionId\n                });\n\n        this.connection.sendIQ2(\n            sessionInfo, {\n                /*\n                 * This message will be often sent when there are connectivity\n                 * issues, so make it slightly longer than Prosody's default BOSH\n                 * inactivity timeout of 60 seconds.\n                 */\n                timeout: 65\n            })\n            .catch(this.newJingleErrorHandler(sessionInfo));\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    addIceCandidates(elem) {\n        if (this.peerconnection.signalingState === 'closed') {\n            logger.warn(`${this} Ignored add ICE candidate when in closed state`);\n\n            return;\n        }\n\n        const iceCandidates = [];\n\n        elem.find('>content>transport>candidate')\n            .each((idx, candidate) => {\n                let line = SDPUtil.candidateFromJingle(candidate);\n\n                line = line.replace('\\r\\n', '').replace('a=', '');\n\n                // FIXME this code does not care to handle\n                // non-bundle transport\n                const rtcCandidate = new RTCIceCandidate({\n                    sdpMLineIndex: 0,\n\n                    // FF comes up with more complex names like audio-23423,\n                    // Given that it works on both Chrome and FF without\n                    // providing it, let's leave it like this for the time\n                    // being...\n                    // sdpMid: 'audio',\n                    sdpMid: '',\n                    candidate: line\n                });\n\n                iceCandidates.push(rtcCandidate);\n            });\n\n        if (!iceCandidates.length) {\n            logger.error(`${this} No ICE candidates to add ?`, elem[0] && elem[0].outerHTML);\n\n            return;\n        }\n\n        // We want to have this task queued, so that we know it is executed,\n        // after the initial sRD/sLD offer/answer cycle was done (based on\n        // the assumption that candidates are spawned after the offer/answer\n        // and XMPP preserves order).\n        const workFunction = finishedCallback => {\n            for (const iceCandidate of iceCandidates) {\n                this.peerconnection.addIceCandidate(iceCandidate)\n                    .then(\n                        () => logger.debug(`${this} addIceCandidate ok!`),\n                        err => logger.error(`${this} addIceCandidate failed!`, err));\n            }\n\n            finishedCallback();\n            logger.debug(`${this} ICE candidates task finished`);\n        };\n\n        logger.debug(`${this} Queued add (${iceCandidates.length}) ICE candidates task`);\n        this.modificationQueue.push(workFunction);\n    }\n\n    /**\n     *\n     * @param contents\n     */\n    readSsrcInfo(contents) {\n        const ssrcs\n            = $(contents).find(\n                '>description>'\n                    + 'source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\n\n        ssrcs.each((i, ssrcElement) => {\n            const ssrc = Number(ssrcElement.getAttribute('ssrc'));\n\n            if (this.isP2P) {\n                // In P2P all SSRCs are owner by the remote peer\n                this._signalingLayer.setSSRCOwner(\n                    ssrc, Strophe.getResourceFromJid(this.remoteJid));\n            } else {\n                if (FeatureFlags.isSourceNameSignalingEnabled()) {\n                    // Only set sourceName for non-P2P case\n                    if (ssrcElement.hasAttribute('name')) {\n                        const sourceName = ssrcElement.getAttribute('name');\n\n                        this._signalingLayer.setTrackSourceName(ssrc, sourceName);\n                    }\n                }\n                $(ssrcElement)\n                    .find('>ssrc-info[xmlns=\"http://jitsi.org/jitmeet\"]')\n                    .each((i3, ssrcInfoElement) => {\n                        const owner = ssrcInfoElement.getAttribute('owner');\n\n                        if (owner && owner.length) {\n                            if (isNaN(ssrc) || ssrc < 0) {\n                                logger.warn(`${this} Invalid SSRC ${ssrc} value received for ${owner}`);\n                            } else {\n                                this._signalingLayer.setSSRCOwner(\n                                    ssrc,\n                                    getEndpointId(owner));\n                            }\n                        }\n                    });\n            }\n        });\n    }\n\n    /**\n     * Makes the underlying TraceablePeerConnection generate new SSRC for\n     * the recvonly video stream.\n     * @deprecated\n     */\n    generateRecvonlySsrc() {\n        if (this.peerconnection) {\n            this.peerconnection.generateRecvonlySsrc();\n        } else {\n            logger.error(`${this} Unable to generate recvonly SSRC - no peerconnection`);\n        }\n    }\n\n    /**\n     * Returns the video codec configured as the preferred codec on the peerconnection.\n     */\n    getConfiguredVideoCodec() {\n        return this.peerconnection.getConfiguredVideoCodec();\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Accepts incoming Jingle 'session-initiate' and should send\n     * 'session-accept' in result.\n     * @param jingleOffer jQuery selector pointing to the jingle element of\n     * the offer IQ\n     * @param success callback called when we accept incoming session\n     * successfully and receive RESULT packet to 'session-accept' sent.\n     * @param failure function(error) called if for any reason we fail to accept\n     * the incoming offer. 'error' argument can be used to log some details\n     * about the error.\n     * @param {Array<JitsiLocalTrack>} [localTracks] the optional list of\n     * the local tracks that will be added, before the offer/answer cycle\n     * executes. We allow the localTracks to optionally be passed in so that\n     * the addition of the local tracks and the processing of the initial offer\n     * can all be done atomically. We want to make sure that any other\n     * operations which originate in the XMPP Jingle messages related with\n     * this session to be executed with an assumption that the initial\n     * offer/answer cycle has been executed already.\n     */\n    acceptOffer(jingleOffer, success, failure, localTracks) {\n        this.setOfferAnswerCycle(\n            jingleOffer,\n            () => {\n                // FIXME we may not care about RESULT packet for session-accept\n                // then we should either call 'success' here immediately or\n                // modify sendSessionAccept method to do that\n                this.sendSessionAccept(() => {\n                    success();\n\n                    this.room.eventEmitter.emit(XMPPEvents.SESSION_ACCEPT, this);\n                },\n                error => {\n                    failure(error);\n\n                    this.room.eventEmitter.emit(XMPPEvents.SESSION_ACCEPT_ERROR, this, error);\n                });\n            },\n            failure,\n            localTracks);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Creates an offer and sends Jingle 'session-initiate' to the remote peer.\n     * @param {Array<JitsiLocalTrack>} localTracks the local tracks that will be\n     * added, before the offer/answer cycle executes (for the local track\n     * addition to be an atomic operation together with the offer/answer).\n     */\n    invite(localTracks = []) {\n        if (!this.isInitiator) {\n            throw new Error('Trying to invite from the responder session');\n        }\n        const workFunction = finishedCallback => {\n            const addTracks = [];\n\n            for (const localTrack of localTracks) {\n                addTracks.push(this.peerconnection.addTrack(localTrack, this.isInitiator));\n            }\n\n            Promise.all(addTracks)\n                .then(() => this.peerconnection.createOffer(this.mediaConstraints))\n                .then(offerSdp => this.peerconnection.setLocalDescription(offerSdp))\n                .then(() => {\n                    // NOTE that the offer is obtained from the localDescription getter as it needs to go though\n                    // the transformation chain.\n                    this.sendSessionInitiate(this.peerconnection.localDescription.sdp);\n                })\n                .then(() => finishedCallback(), error => finishedCallback(error));\n        };\n\n        logger.debug(`${this} Queued invite task`);\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error(`${this} invite error`, error);\n                } else {\n                    logger.debug(`${this} invite executed - OK`);\n                }\n            });\n    }\n\n    /**\n     * Sends 'session-initiate' to the remote peer.\n     *\n     * NOTE this method is synchronous and we're not waiting for the RESULT\n     * response which would delay the startup process.\n     *\n     * @param {string} offerSdp  - The local session description which will be\n     * used to generate an offer.\n     * @private\n     */\n    sendSessionInitiate(offerSdp) {\n        let init = $iq({\n            to: this.remoteJid,\n            type: 'set'\n        }).c('jingle', {\n            xmlns: 'urn:xmpp:jingle:1',\n            action: 'session-initiate',\n            initiator: this.initiatorJid,\n            sid: this.sid\n        });\n\n        new SDP(offerSdp).toJingle(\n            init,\n            this.isInitiator ? 'initiator' : 'responder');\n        init = init.tree();\n        logger.debug(`${this} Session-initiate: `, init);\n        this.connection.sendIQ(init,\n            () => {\n                logger.info(`${this} Got RESULT for \"session-initiate\"`);\n            },\n            error => {\n                logger.error(`${this} \"session-initiate\" error`, error);\n            },\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Sets the answer received from the remote peer.\n     * @param jingleAnswer\n     */\n    setAnswer(jingleAnswer) {\n        if (!this.isInitiator) {\n            throw new Error('Trying to set an answer on the responder session');\n        }\n        this.setOfferAnswerCycle(\n            jingleAnswer,\n            () => {\n                logger.info(`${this} setAnswer - succeeded`);\n                if (this.usesUnifiedPlan && browser.isChromiumBased()) {\n                    const workFunction = finishedCallback => {\n                        // This hack is needed for Chrome to create a decoder for the ssrcs in the remote SDP when\n                        // the local endpoint is the offerer and starts muted.\n                        const remoteSdp = this.peerconnection.remoteDescription.sdp;\n                        const remoteDescription = new RTCSessionDescription({\n                            type: 'offer',\n                            sdp: remoteSdp\n                        });\n\n                        return this._responderRenegotiate(remoteDescription)\n                        .then(() => finishedCallback(), error => finishedCallback(error));\n                    };\n\n                    logger.debug(`${this} Queued responderRenegotiate task`);\n                    this.modificationQueue.push(\n                        workFunction,\n                        error => {\n                            if (error) {\n                                logger.error(`${this} failed to renegotiate a decoder for muted endpoint ${error}`);\n                            } else {\n                                logger.debug(`${this} renegotiate a decoder for muted endpoint`);\n                            }\n                        });\n                }\n            },\n            error => {\n                logger.error(`${this} setAnswer failed: `, error);\n            });\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * This is a setRemoteDescription/setLocalDescription cycle which starts at\n     * converting Strophe Jingle IQ into remote offer SDP. Once converted\n     * setRemoteDescription, createAnswer and setLocalDescription calls follow.\n     * @param jingleOfferAnswerIq jQuery selector pointing to the jingle element\n     *        of the offer (or answer) IQ\n     * @param success callback called when sRD/sLD cycle finishes successfully.\n     * @param failure callback called with an error object as an argument if we\n     *        fail at any point during setRD, createAnswer, setLD.\n     * @param {Array<JitsiLocalTrack>} [localTracks] the optional list of\n     * the local tracks that will be added, before the offer/answer cycle\n     * executes (for the local track addition to be an atomic operation together\n     * with the offer/answer).\n     */\n    setOfferAnswerCycle(jingleOfferAnswerIq, success, failure, localTracks = []) {\n        const workFunction = finishedCallback => {\n            const addTracks = [];\n\n            for (const track of localTracks) {\n                addTracks.push(this.peerconnection.addTrack(track, this.isInitiator));\n            }\n\n            const newRemoteSdp\n                = this._processNewJingleOfferIq(jingleOfferAnswerIq);\n            const oldLocalSdp\n                = this.peerconnection.localDescription.sdp;\n\n            const bridgeSession\n                = $(jingleOfferAnswerIq)\n                    .find('>bridge-session['\n                        + 'xmlns=\"http://jitsi.org/protocol/focus\"]');\n            const bridgeSessionId = bridgeSession.attr('id');\n\n            if (bridgeSessionId !== this._bridgeSessionId) {\n                this._bridgeSessionId = bridgeSessionId;\n            }\n\n            Promise.all(addTracks)\n                .then(() => this._renegotiate(newRemoteSdp.raw))\n                .then(() => {\n                    if (this.state === JingleSessionState.PENDING) {\n                        this.state = JingleSessionState.ACTIVE;\n\n                        // #1 Sync up video transfer active/inactive only after\n                        // the initial O/A cycle. We want to adjust the video\n                        // media direction only in the local SDP and the Jingle\n                        // contents direction included in the initial\n                        // offer/answer is mapped to the remote SDP. Jingle\n                        // 'content-modify' IQ is processed in a way that it\n                        // will only modify local SDP when remote peer is no\n                        // longer interested in receiving video content.\n                        // Changing media direction in the remote SDP will mess\n                        // up our SDP translation chain (simulcast, video mute,\n                        // RTX etc.)\n                        //\n                        // #2 Sends the max frame height if it was set, before the session-initiate/accept\n                        if (this.isP2P\n                            && (!this._localVideoActive || this.localRecvMaxFrameHeight)) {\n                            this.sendContentModify();\n                        }\n                    }\n\n                    // Old local SDP will be available when we're setting answer\n                    // for the first time, but not when offer and it's fine\n                    // since we're generating an answer now it will contain all\n                    // our SSRCs\n                    if (oldLocalSdp) {\n                        const newLocalSdp\n                            = new SDP(this.peerconnection.localDescription.sdp);\n\n                        this.notifyMySSRCUpdate(\n                            new SDP(oldLocalSdp), newLocalSdp);\n                    }\n                })\n                .then(() => finishedCallback(), error => finishedCallback(error));\n        };\n\n        logger.debug(`${this} Queued setOfferAnswerCycle task`);\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error(`${this} setOfferAnswerCycle task failed: ${error}`);\n                    failure(error);\n                } else {\n                    logger.debug(`${this} setOfferAnswerCycle task done`);\n                    success();\n                }\n            });\n    }\n\n    /**\n     * Updates the codecs on the peerconnection and initiates a renegotiation for the\n     * new codec config to take effect.\n     *\n     * @param {CodecMimeType} preferred the preferred codec.\n     * @param {CodecMimeType} disabled the codec that needs to be disabled.\n     */\n    setVideoCodecs(preferred = null, disabled = null) {\n        const current = this.peerconnection.getConfiguredVideoCodec();\n\n        if (this._assertNotEnded() && preferred !== current) {\n            logger.info(`${this} Switching video codec from ${current} to ${preferred}`);\n            this.peerconnection.setVideoCodecs(preferred, disabled);\n\n            // Initiate a renegotiate for the codec setting to take effect.\n            const workFunction = finishedCallback => {\n                this._renegotiate().then(\n                    () => {\n                        logger.debug(`${this} setVideoCodecs task is done`);\n\n                        return finishedCallback();\n                    }, error => {\n                        logger.error(`${this} setVideoCodecs task failed: ${error}`);\n\n                        return finishedCallback(error);\n                    });\n            };\n\n            logger.debug(`${this} Queued setVideoCodecs task`);\n\n            // Queue and execute\n            this.modificationQueue.push(workFunction);\n        }\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Although it states \"replace transport\" it does accept full Jingle offer\n     * which should contain new ICE transport details.\n     * @param jingleOfferElem an element Jingle IQ that contains new offer and\n     *        transport info.\n     * @param success callback called when we succeed to accept new offer.\n     * @param failure function(error) called when we fail to accept new offer.\n     */\n    replaceTransport(jingleOfferElem, success, failure) {\n        if (this.options.enableForcedReload) {\n            const sdp = new SDP(this.peerconnection.localDescription.sdp);\n\n            this.sendTransportAccept(sdp, success, failure);\n            this.room.eventEmitter.emit(XMPPEvents.CONNECTION_RESTARTED, this);\n\n            return;\n        }\n        this.room.eventEmitter.emit(XMPPEvents.ICE_RESTARTING, this);\n\n        // We need to first reject the 'data' section to have the SCTP stack\n        // cleaned up to signal the known data channel is now invalid. After\n        // that the original offer is set to have the SCTP connection\n        // established with the new bridge.\n        const originalOffer = jingleOfferElem.clone();\n\n        jingleOfferElem\n            .find('>content[name=\\'data\\']')\n            .attr('senders', 'rejected');\n\n        // Remove all remote sources in order to reset the client's state\n        // for the remote MediaStreams. When a conference is moved to\n        // another bridge it will start streaming with a sequence number\n        // that is not in sync with the most recently seen by the client.\n        // The symptoms include frozen or black video and lots of \"failed to\n        // unprotect SRTP packets\" in Chrome logs.\n        jingleOfferElem\n            .find('>content>description>source')\n            .remove();\n        jingleOfferElem\n            .find('>content>description>ssrc-group')\n            .remove();\n\n        // On the JVB it's not a real ICE restart and all layers are re-initialized from scratch as Jicofo does\n        // the restart by re-allocating new channels. Chrome (or WebRTC stack) needs to have the DTLS transport layer\n        // reset to start a new handshake with fresh DTLS transport on the bridge. Make it think that the DTLS\n        // fingerprint has changed by setting an all zeros key.\n        const newFingerprint = jingleOfferElem.find('>content>transport>fingerprint');\n\n        newFingerprint.attr('hash', 'sha-1');\n        newFingerprint.text('00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00');\n\n        // First set an offer with a rejected 'data' section\n        this.setOfferAnswerCycle(\n            jingleOfferElem,\n            () => {\n                // Now set the original offer(with the 'data' section)\n                this.setOfferAnswerCycle(\n                    originalOffer,\n                    () => {\n                        const localSDP\n                            = new SDP(this.peerconnection.localDescription.sdp);\n\n                        this.sendTransportAccept(localSDP, success, failure);\n\n                        this.room.eventEmitter.emit(\n                            XMPPEvents.ICE_RESTART_SUCCESS,\n                            this,\n                            originalOffer);\n                    },\n                    failure);\n            },\n            failure\n        );\n    }\n\n    /**\n     * Sends Jingle 'session-accept' message.\n     * @param {function()} success callback called when we receive 'RESULT'\n     *        packet for the 'session-accept'\n     * @param {function(error)} failure called when we receive an error response\n     *        or when the request has timed out.\n     * @private\n     */\n    sendSessionAccept(success, failure) {\n        // NOTE: since we're just reading from it, we don't need to be within\n        //  the modification queue to access the local description\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\n        const accept = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\n                action: 'session-accept',\n                initiator: this.initiatorJid,\n                responder: this.responderJid,\n                sid: this.sid });\n\n        if (this.webrtcIceTcpDisable) {\n            localSDP.removeTcpCandidates = true;\n        }\n        if (this.webrtcIceUdpDisable) {\n            localSDP.removeUdpCandidates = true;\n        }\n        if (this.failICE) {\n            localSDP.failICE = true;\n        }\n        localSDP.toJingle(\n            accept,\n            this.initiatorJid === this.localJid ? 'initiator' : 'responder');\n\n        logger.info(`${this} Sending session-accept`);\n        logger.debug(accept.tree());\n        this.connection.sendIQ(accept,\n            success,\n            this.newJingleErrorHandler(accept, error => {\n                failure(error);\n\n                // 'session-accept' is a critical timeout and we'll\n                // have to restart\n                this.room.eventEmitter.emit(\n                    XMPPEvents.SESSION_ACCEPT_TIMEOUT, this);\n            }),\n            IQ_TIMEOUT);\n\n        // XXX Videobridge needs WebRTC's answer (ICE ufrag and pwd, DTLS\n        // fingerprint and setup) ASAP in order to start the connection\n        // establishment.\n        //\n        // FIXME Flushing the connection at this point triggers an issue with\n        // BOSH request handling in Prosody on slow connections.\n        //\n        // The problem is that this request will be quite large and it may take\n        // time before it reaches Prosody. In the meantime Strophe may decide\n        // to send the next one. And it was observed that a small request with\n        // 'transport-info' usually follows this one. It does reach Prosody\n        // before the previous one was completely received. 'rid' on the server\n        // is increased and Prosody ignores the request with 'session-accept'.\n        // It will never reach Jicofo and everything in the request table is\n        // lost. Removing the flush does not guarantee it will never happen, but\n        // makes it much less likely('transport-info' is bundled with\n        // 'session-accept' and any immediate requests).\n        //\n        // this.connection.flush();\n    }\n\n    /**\n     * Will send 'content-modify' IQ in order to ask the remote peer to\n     * either stop or resume sending video media or to adjust sender's video constraints.\n     * @private\n     */\n    sendContentModify() {\n        const maxFrameHeight = this.localRecvMaxFrameHeight;\n        const senders = this._localVideoActive ? 'both' : 'none';\n\n        let sessionModify\n            = $iq({\n                to: this.remoteJid,\n                type: 'set'\n            })\n                .c('jingle', {\n                    xmlns: 'urn:xmpp:jingle:1',\n                    action: 'content-modify',\n                    initiator: this.initiatorJid,\n                    sid: this.sid\n                })\n                .c('content', {\n                    name: MediaType.VIDEO,\n                    senders\n                });\n\n        if (typeof maxFrameHeight !== 'undefined') {\n            sessionModify = sessionModify\n                .c('max-frame-height', { xmlns: 'http://jitsi.org/jitmeet/video' })\n                .t(maxFrameHeight);\n        }\n\n        logger.info(`${this} sending content-modify, video senders: ${senders}, max frame height: ${maxFrameHeight}`);\n        logger.debug(sessionModify.tree());\n\n        this.connection.sendIQ(\n            sessionModify,\n            null,\n            this.newJingleErrorHandler(sessionModify),\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Adjust the preference for max video frame height that the local party is willing to receive. Signals\n     * the remote party.\n     *\n     * @param {Number} maxFrameHeight - the new value to set.\n     */\n    setReceiverVideoConstraint(maxFrameHeight) {\n        logger.info(`${this} setReceiverVideoConstraint - max frame height: ${maxFrameHeight}`);\n\n        this.localRecvMaxFrameHeight = maxFrameHeight;\n\n        if (this.isP2P) {\n            // Tell the remote peer about our receive constraint. If Jingle session is not yet active the state will\n            // be synced after offer/answer.\n            if (this.state === JingleSessionState.ACTIVE) {\n                this.sendContentModify();\n            }\n        } else {\n            this.rtc.setReceiverVideoConstraint(maxFrameHeight);\n        }\n    }\n\n    /**\n     * Sends Jingle 'transport-accept' message which is a response to\n     * 'transport-replace'.\n     * @param localSDP the 'SDP' object with local session description\n     * @param success callback called when we receive 'RESULT' packet for\n     *        'transport-replace'\n     * @param failure function(error) called when we receive an error response\n     *        or when the request has timed out.\n     * @private\n     */\n    sendTransportAccept(localSDP, success, failure) {\n        const transportAccept = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'transport-accept',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            });\n\n        localSDP.media.forEach((medialines, idx) => {\n            const mline = SDPUtil.parseMLine(medialines.split('\\r\\n')[0]);\n\n            transportAccept.c('content',\n                {\n                    creator:\n                        this.initiatorJid === this.localJid\n                            ? 'initiator'\n                            : 'responder',\n                    name: mline.media\n                }\n            );\n            localSDP.transportToJingle(idx, transportAccept);\n            transportAccept.up();\n        });\n\n        logger.info(`${this} Sending transport-accept`);\n        logger.debug(transportAccept.tree());\n\n        this.connection.sendIQ(transportAccept,\n            success,\n            this.newJingleErrorHandler(transportAccept, failure),\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Sends Jingle 'transport-reject' message which is a response to\n     * 'transport-replace'.\n     * @param success callback called when we receive 'RESULT' packet for\n     *        'transport-replace'\n     * @param failure function(error) called when we receive an error response\n     *        or when the request has timed out.\n     *\n     * FIXME method should be marked as private, but there's some spaghetti that\n     *       needs to be fixed prior doing that\n     */\n    sendTransportReject(success, failure) {\n        // Send 'transport-reject', so that the focus will\n        // know that we've failed\n        const transportReject = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'transport-reject',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            });\n\n        logger.info(`${this} Sending 'transport-reject'`);\n        logger.debug(transportReject.tree());\n\n        this.connection.sendIQ(transportReject,\n            success,\n            this.newJingleErrorHandler(transportReject, failure),\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Sets the resolution constraint on the local camera track.\n     * @param {number} maxFrameHeight - The user preferred max frame height.\n     * @returns {Promise} promise that will be resolved when the operation is\n     * successful and rejected otherwise.\n     */\n    setSenderVideoConstraint(maxFrameHeight) {\n        if (this._assertNotEnded()) {\n            logger.info(`${this} setSenderVideoConstraint: ${maxFrameHeight}`);\n\n            // RN doesn't support RTCRtpSenders yet, aggresive layer suspension on RN is implemented\n            // by changing the media direction in the SDP. This is applicable to jvb sessions only.\n            if (!this.isP2P && browser.isReactNative() && typeof maxFrameHeight !== 'undefined') {\n                const videoActive = maxFrameHeight > 0;\n\n                return this.setMediaTransferActive(true, videoActive);\n            }\n\n            const promise = typeof maxFrameHeight === 'undefined'\n                ? this.peerconnection.configureSenderVideoEncodings()\n                : this.peerconnection.setSenderVideoConstraints(maxFrameHeight);\n\n            return promise;\n        }\n\n        return Promise.resolve();\n    }\n\n    /**\n     * @inheritDoc\n     */\n    terminate(success, failure, options) {\n        if (this.state === JingleSessionState.ENDED) {\n            return;\n        }\n\n        if (!options || Boolean(options.sendSessionTerminate)) {\n            const sessionTerminate\n                = $iq({\n                    to: this.remoteJid,\n                    type: 'set'\n                })\n                    .c('jingle', {\n                        xmlns: 'urn:xmpp:jingle:1',\n                        action: 'session-terminate',\n                        initiator: this.initiatorJid,\n                        sid: this.sid\n                    })\n                    .c('reason')\n                    .c((options && options.reason) || 'success')\n                    .up();\n\n            if (options && options.reasonDescription) {\n                sessionTerminate\n                    .c('text')\n                    .t(options.reasonDescription)\n                    .up()\n                    .up();\n            } else {\n                sessionTerminate.up();\n            }\n\n            this._bridgeSessionId\n                && sessionTerminate.c(\n                    'bridge-session', {\n                        xmlns: 'http://jitsi.org/protocol/focus',\n                        id: this._bridgeSessionId,\n                        restart: options && options.requestRestart === true\n                    }).up();\n\n            logger.info(`${this} Sending session-terminate`);\n            logger.debug(sessionTerminate.tree());\n\n            this.connection.sendIQ(\n                sessionTerminate,\n                success,\n                this.newJingleErrorHandler(sessionTerminate, failure),\n                IQ_TIMEOUT);\n        } else {\n            logger.info(`${this} Skipped sending session-terminate`);\n        }\n\n        // this should result in 'onTerminated' being called by strope.jingle.js\n        this.connection.jingle.terminate(this.sid);\n    }\n\n    /**\n     *\n     * @param reasonCondition\n     * @param reasonText\n     */\n    onTerminated(reasonCondition, reasonText) {\n        // Do something with reason and reasonCondition when we start to care\n        // this.reasonCondition = reasonCondition;\n        // this.reasonText = reasonText;\n        logger.info(`${this} Session terminated`, reasonCondition, reasonText);\n\n        this._xmppListeners.forEach(removeListener => removeListener());\n        this._xmppListeners = [];\n\n        if (this._removeSenderVideoConstraintsChangeListener) {\n            this._removeSenderVideoConstraintsChangeListener();\n        }\n\n        this.close();\n    }\n\n    /**\n     * Handles XMPP connection state changes.\n     *\n     * @param {XmppConnection.Status} status - The new status.\n     */\n    onXmppStatusChanged(status) {\n        if (status === XmppConnection.Status.CONNECTED && this._cachedOldLocalSdp) {\n            logger.info(`${this} Sending SSRC update on reconnect`);\n            this.notifyMySSRCUpdate(\n                this._cachedOldLocalSdp,\n                this._cachedNewLocalSdp);\n        }\n    }\n\n    /**\n     * Parse the information from the xml sourceAddElem and translate it\n     *  into sdp lines\n     * @param {jquery xml element} sourceAddElem the source-add\n     *  element from jingle\n     * @param {SDP object} currentRemoteSdp the current remote\n     *  sdp (as of this new source-add)\n     * @returns {list} a list of SDP line strings that should\n     *  be added to the remote SDP\n     */\n    _parseSsrcInfoFromSourceAdd(sourceAddElem, currentRemoteSdp) {\n        const addSsrcInfo = [];\n        const self = this;\n\n        $(sourceAddElem).each((i1, content) => {\n            const name = $(content).attr('name');\n            let lines = '';\n\n            $(content)\n                .find('ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n                .each(function() {\n                    // eslint-disable-next-line no-invalid-this\n                    const semantics = this.getAttribute('semantics');\n                    const ssrcs\n                        = $(this) // eslint-disable-line no-invalid-this\n                            .find('>source')\n                            .map(function() {\n                                // eslint-disable-next-line no-invalid-this\n                                return this.getAttribute('ssrc');\n                            })\n                            .get();\n\n                    if (ssrcs.length) {\n                        lines += `a=ssrc-group:${semantics} ${ssrcs.join(' ')}\\r\\n`;\n                    }\n                });\n\n            // handles both >source and >description>source\n            const tmp\n                = $(content).find(\n                    'source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\n\n            /* eslint-disable no-invalid-this */\n            tmp.each(function() {\n                const ssrc = $(this).attr('ssrc');\n\n                if (currentRemoteSdp.containsSSRC(ssrc)) {\n\n                    // Do not print the warning for unified plan p2p case since ssrcs are never removed from the SDP.\n                    !(self.usesUnifiedPlan && self.isP2P)\n                        && logger.warn(`${self} Source-add request for existing SSRC: ${ssrc}`);\n\n                    return;\n                }\n\n                // eslint-disable-next-line newline-per-chained-call\n                $(this).find('>parameter').each(function() {\n                    lines += `a=ssrc:${ssrc} ${$(this).attr('name')}`;\n                    if ($(this).attr('value') && $(this).attr('value').length) {\n                        lines += `:${$(this).attr('value')}`;\n                    }\n                    lines += '\\r\\n';\n                });\n            });\n\n            /* eslint-enable no-invalid-this */\n            currentRemoteSdp.media.forEach((media, i2) => {\n                if (!SDPUtil.findLine(media, `a=mid:${name}`)) {\n                    return;\n                }\n                if (!addSsrcInfo[i2]) {\n                    addSsrcInfo[i2] = '';\n                }\n                addSsrcInfo[i2] += lines;\n            });\n        });\n\n        return addSsrcInfo;\n    }\n\n    /**\n     * Handles a Jingle source-add message for this Jingle session.\n     * @param elem An array of Jingle \"content\" elements.\n     */\n    addRemoteStream(elem) {\n        this._addOrRemoveRemoteStream(true /* add */, elem);\n    }\n\n    /**\n     * Handles a Jingle source-remove message for this Jingle session.\n     * @param elem An array of Jingle \"content\" elements.\n     */\n    removeRemoteStream(elem) {\n        this._addOrRemoveRemoteStream(false /* remove */, elem);\n    }\n\n    /**\n     * Handles the deletion of SSRCs associated with a remote user from the remote description when the user leaves.\n     *\n     * @param {string} id Endpoint id of the participant that has left the call.\n     * @returns {void}\n     */\n    removeRemoteStreamsOnLeave(id) {\n        const workFunction = finishCallback => {\n            const removeSsrcInfo = this.peerconnection.getRemoteSourceInfoByParticipant(id);\n\n            if (removeSsrcInfo.length) {\n                const oldLocalSdp = new SDP(this.peerconnection.localDescription.sdp);\n                const newRemoteSdp = this._processRemoteRemoveSource(removeSsrcInfo);\n\n                this._renegotiate(newRemoteSdp.raw)\n                    .then(() => {\n                        const newLocalSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n                        this.notifyMySSRCUpdate(oldLocalSdp, newLocalSDP);\n                        finishCallback();\n                    })\n                    .catch(err => finishCallback(err));\n            } else {\n                finishCallback();\n            }\n        };\n\n        logger.debug(`${this} Queued removeRemoteStreamsOnLeave task for participant ${id}`);\n\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error(`${this} removeRemoteStreamsOnLeave error:`, error);\n                } else {\n                    logger.info(`${this} removeRemoteStreamsOnLeave done!`);\n                }\n            });\n    }\n\n    /**\n     * Handles either Jingle 'source-add' or 'source-remove' message for this\n     * Jingle session.\n     * @param {boolean} isAdd <tt>true</tt> for 'source-add' or <tt>false</tt>\n     * otherwise.\n     * @param {Array<Element>} elem an array of Jingle \"content\" elements.\n     * @private\n     */\n    _addOrRemoveRemoteStream(isAdd, elem) {\n        const logPrefix = isAdd ? 'addRemoteStream' : 'removeRemoteStream';\n\n        if (isAdd) {\n            this.readSsrcInfo(elem);\n        }\n\n        const workFunction = finishedCallback => {\n            if (!this.peerconnection.localDescription\n                || !this.peerconnection.localDescription.sdp) {\n                const errMsg = `${logPrefix} - localDescription not ready yet`;\n\n                logger.error(errMsg);\n                finishedCallback(errMsg);\n\n                return;\n            }\n\n            logger.log(`${this} Processing ${logPrefix}`);\n\n            const oldLocalSdp = new SDP(this.peerconnection.localDescription.sdp);\n            const sdp = new SDP(this.peerconnection.remoteDescription.sdp);\n            const addOrRemoveSsrcInfo\n                = isAdd\n                    ? this._parseSsrcInfoFromSourceAdd(elem, sdp)\n                    : this._parseSsrcInfoFromSourceRemove(elem, sdp);\n            const newRemoteSdp\n                = isAdd\n                    ? this._processRemoteAddSource(addOrRemoveSsrcInfo)\n                    : this._processRemoteRemoveSource(addOrRemoveSsrcInfo);\n\n            // Add a workaround for a bug in Chrome (unified plan) for p2p connection. When the media direction on\n            // the transceiver goes from \"inactive\" (both users join muted) to \"recvonly\" (peer unmutes), the browser\n            // doesn't seem to create a decoder if the signaling state changes from \"have-local-offer\" to \"stable\".\n            // Therefore, initiate a responder renegotiate even if the endpoint is the offerer to workaround this issue.\n            // TODO - open a chrome bug and update the comments.\n            const remoteDescription = new RTCSessionDescription({\n                type: 'offer',\n                sdp: newRemoteSdp.raw\n            });\n            const promise = isAdd && this.usesUnifiedPlan && this.isP2P && browser.isChromiumBased()\n                ? this._responderRenegotiate(remoteDescription)\n                : this._renegotiate(newRemoteSdp.raw);\n\n            promise.then(() => {\n                const newLocalSdp = new SDP(this.peerconnection.localDescription.sdp);\n\n                logger.log(`${this} ${logPrefix} - OK`);\n                this.notifyMySSRCUpdate(oldLocalSdp, newLocalSdp);\n                finishedCallback();\n            }, error => {\n                logger.error(`${this} ${logPrefix} failed:`, error);\n                finishedCallback(error);\n            });\n        };\n\n        logger.debug(`${this} Queued ${logPrefix} task`);\n\n        // Queue and execute\n        this.modificationQueue.push(workFunction);\n    }\n\n    /**\n     * Takes in a jingle offer iq, returns the new sdp offer\n     * @param {jquery xml element} offerIq the incoming offer\n     * @returns {SDP object} the jingle offer translated to SDP\n     */\n    _processNewJingleOfferIq(offerIq) {\n        const remoteSdp = new SDP('');\n\n        if (this.webrtcIceTcpDisable) {\n            remoteSdp.removeTcpCandidates = true;\n        }\n        if (this.webrtcIceUdpDisable) {\n            remoteSdp.removeUdpCandidates = true;\n        }\n        if (this.failICE) {\n            remoteSdp.failICE = true;\n        }\n\n        remoteSdp.fromJingle(offerIq);\n        this.readSsrcInfo($(offerIq).find('>content'));\n\n        return remoteSdp;\n    }\n\n    /**\n     * Remove the given ssrc lines from the current remote sdp\n     * @param {list} removeSsrcInfo a list of SDP line strings that\n     *  should be removed from the remote SDP\n     * @returns type {SDP Object} the new remote SDP (after removing the lines\n     *  in removeSsrcInfo\n     */\n    _processRemoteRemoveSource(removeSsrcInfo) {\n        const remoteSdp = this.usesUnifiedPlan\n            ? new SDP(this.peerconnection.peerconnection.remoteDescription.sdp)\n            : new SDP(this.peerconnection.remoteDescription.sdp);\n\n        removeSsrcInfo.forEach((lines, idx) => {\n            // eslint-disable-next-line no-param-reassign\n            lines = lines.split('\\r\\n');\n            lines.pop(); // remove empty last element;\n            if (this.usesUnifiedPlan) {\n                lines.forEach(line => {\n                    const mid = remoteSdp.media.findIndex(mLine => mLine.includes(line));\n\n                    if (mid > -1) {\n                        const mediaType = SDPUtil.parseMLine(remoteSdp.media[mid].split('\\r\\n')[0])?.media;\n\n                        if (this.isP2P) {\n                            // Do not remove ssrcs from m-line in p2p mode. If the ssrc is removed and added back to\n                            // the same m-line (on source-add), Chrome/Safari do not render the media even if it is\n                            // being received and decoded from the remote peer. The webrtc spec is not clear about\n                            // m-line re-use and the browser vendors have implemented this differently. Currently work\n                            // around this by changing the media direction, that should be enough for the browser to\n                            // fire the \"removetrack\" event on the associated MediaStream. Also, the current direction\n                            // of the transceiver for p2p will depend on whether a local sources is added or not. It\n                            // will be 'sendrecv' if the local source is present, 'sendonly' otherwise.\n                            const desiredDirection = this.peerconnection.getDesiredMediaDirection(mediaType, false);\n\n                            [ MediaDirection.SENDRECV, MediaDirection.SENDONLY ].forEach(direction => {\n                                remoteSdp.media[mid] = remoteSdp.media[mid]\n                                    .replace(`a=${direction}`, `a=${desiredDirection}`);\n                            });\n                        } else {\n                            // Change the port to 0 to reject the m-line associated with the source. The rejected\n                            // m-lines are recycled when new ssrcs need to be added to the remote description.\n                            const port = SDPUtil.parseMLine(remoteSdp.media[mid].split('\\r\\n')[0])?.port;\n\n                            remoteSdp.media[mid] = remoteSdp.media[mid].replace(`${line}\\r\\n`, '');\n                            remoteSdp.media[mid] = remoteSdp.media[mid].replace(\n                                `m=${mediaType} ${port}`,\n                                `m=${mediaType} 0`);\n                        }\n                    }\n                });\n            } else {\n                lines.forEach(line => {\n                    remoteSdp.media[idx] = remoteSdp.media[idx].replace(`${line}\\r\\n`, '');\n                });\n            }\n        });\n        remoteSdp.raw = remoteSdp.session + remoteSdp.media.join('');\n\n        return remoteSdp;\n    }\n\n    /**\n     * Add the given ssrc lines to the current remote sdp\n     * @param {list} addSsrcInfo a list of SDP line strings that\n     *  should be added to the remote SDP\n     * @returns type {SDP Object} the new remote SDP (after removing the lines\n     *  in removeSsrcInfo\n     */\n    _processRemoteAddSource(addSsrcInfo) {\n        const remoteSdp = new SDP(this.peerconnection.remoteDescription.sdp);\n\n        addSsrcInfo.forEach((lines, idx) => {\n            remoteSdp.media[idx] += lines;\n\n            // Make sure to change the direction to 'sendrecv/sendonly' only for p2p connections. For jvb connections,\n            // a new m-line is added for the new remote sources.\n            if (this.isP2P && this.usesUnifiedPlan) {\n                const mediaType = SDPUtil.parseMLine(remoteSdp.media[idx].split('\\r\\n')[0])?.media;\n                const desiredDirection = this.peerconnection.getDesiredMediaDirection(mediaType, true);\n\n                [ MediaDirection.RECVONLY, MediaDirection.INACTIVE ].forEach(direction => {\n                    remoteSdp.media[idx] = remoteSdp.media[idx]\n                        .replace(`a=${direction}`, `a=${desiredDirection}`);\n                });\n            }\n        });\n        remoteSdp.raw = remoteSdp.session + remoteSdp.media.join('');\n\n        return remoteSdp;\n    }\n\n    /**\n     * Do a new o/a flow using the existing remote description\n     * @param {string} [optionalRemoteSdp] optional, raw remote sdp\n     *  to use.  If not provided, the remote sdp from the\n     *  peerconnection will be used\n     * @returns {Promise} promise which resolves when the\n     *  o/a flow is complete with no arguments or\n     *  rejects with an error {string}\n     */\n    _renegotiate(optionalRemoteSdp) {\n        if (this.peerconnection.signalingState === 'closed') {\n            const error = new Error('Attempted to renegotiate in state closed');\n\n            this.room.eventEmitter.emit(XMPPEvents.RENEGOTIATION_FAILED, error, this);\n\n            return Promise.reject(error);\n        }\n\n        const remoteSdp\n            = optionalRemoteSdp || this.peerconnection.remoteDescription.sdp;\n\n        if (!remoteSdp) {\n            const error = new Error(`Can not renegotiate without remote description, current state: ${this.state}`);\n\n            this.room.eventEmitter.emit(XMPPEvents.RENEGOTIATION_FAILED, error, this);\n\n            return Promise.reject(error);\n        }\n\n        const remoteDescription = new RTCSessionDescription({\n            type: this.isInitiator ? 'answer' : 'offer',\n            sdp: remoteSdp\n        });\n\n        if (this.isInitiator) {\n            return this._initiatorRenegotiate(remoteDescription);\n        }\n\n        return this._responderRenegotiate(remoteDescription);\n    }\n\n    /**\n     * Renegotiate cycle implementation for the responder case.\n     * @param {object} remoteDescription the SDP object as defined by the WebRTC\n     * which will be used as remote description in the cycle.\n     * @private\n     */\n    _responderRenegotiate(remoteDescription) {\n        logger.debug(`${this} Renegotiate: setting remote description`);\n\n        return this.peerconnection.setRemoteDescription(remoteDescription)\n            .then(() => {\n                logger.debug(`${this} Renegotiate: creating answer`);\n\n                return this.peerconnection.createAnswer(this.mediaConstraints)\n                    .then(answer => {\n                        logger.debug(`${this} Renegotiate: setting local description`);\n\n                        return this.peerconnection.setLocalDescription(answer);\n                    });\n            });\n    }\n\n    /**\n     * Renegotiate cycle implementation for the initiator's case.\n     * @param {object} remoteDescription the SDP object as defined by the WebRTC\n     * which will be used as remote description in the cycle.\n     * @private\n     */\n    _initiatorRenegotiate(remoteDescription) {\n        logger.debug(`${this} Renegotiate: creating offer`);\n\n        return this.peerconnection.createOffer(this.mediaConstraints)\n            .then(offer => {\n                logger.debug(`${this} Renegotiate: setting local description`);\n\n                return this.peerconnection.setLocalDescription(offer)\n                    .then(() => {\n                        logger.debug(`${this} Renegotiate: setting remote description`);\n\n                        // eslint-disable-next-line max-len\n                        return this.peerconnection.setRemoteDescription(remoteDescription);\n                    });\n            });\n    }\n\n    /**\n     * Adds a new track to the peerconnection. This method needs to be called only when a secondary JitsiLocalTrack is\n     * being added to the peerconnection for the first time.\n     *\n     * @param {JitsiLocalTrack} localTrack track to be added to the peer connection.\n     * @returns {Promise<void>} that resolves when the track is successfully added to the peerconnection, rejected\n     * otherwise.\n     */\n    addTrack(localTrack) {\n        if (!FeatureFlags.isMultiStreamSupportEnabled()\n            || !this.usesUnifiedPlan\n            || localTrack.type !== MediaType.VIDEO) {\n            return Promise.reject(new Error('Multiple tracks of a given media type are not supported'));\n        }\n\n        const workFunction = finishedCallback => {\n            const remoteSdp = new SDP(this.peerconnection.peerconnection.remoteDescription.sdp);\n\n            // Add a new transceiver by adding a new mline in the remote description.\n            remoteSdp.addMlineForNewLocalSource(MediaType.VIDEO);\n            this._renegotiate(remoteSdp.raw)\n                .then(() => finishedCallback(), error => finishedCallback(error));\n        };\n\n        return new Promise((resolve, reject) => {\n            logger.debug(`${this} Queued renegotiation after addTrack`);\n\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        logger.error(`${this} renegotiation after addTrack error`, error);\n                        reject(error);\n                    } else {\n                        logger.debug(`${this} renegotiation after addTrack executed - OK`);\n\n                        // Replace the track on the newly generated transceiver.\n                        return this.replaceTrack(null, localTrack)\n                            .then(() => resolve())\n                            .catch(() => reject());\n                    }\n                });\n        });\n    }\n\n    /**\n     * Replaces <tt>oldTrack</tt> with <tt>newTrack</tt> and performs a single\n     * offer/answer cycle after both operations are done. Either\n     * <tt>oldTrack</tt> or <tt>newTrack</tt> can be null; replacing a valid\n     * <tt>oldTrack</tt> with a null <tt>newTrack</tt> effectively just removes\n     * <tt>oldTrack</tt>\n     * @param {JitsiLocalTrack|null} oldTrack the current track in use to be\n     * replaced\n     * @param {JitsiLocalTrack|null} newTrack the new track to use\n     * @returns {Promise} which resolves once the replacement is complete\n     *  with no arguments or rejects with an error {string}\n     */\n    replaceTrack(oldTrack, newTrack) {\n        const workFunction = finishedCallback => {\n            logger.debug(`${this} replaceTrack worker started. oldTrack = ${oldTrack}, newTrack = ${newTrack}`);\n\n            const oldLocalSdp = this.peerconnection.localDescription.sdp;\n\n            if (!this.usesUnifiedPlan) {\n                // NOTE the code below assumes that no more than 1 video track\n                // can be added to the peer connection.\n                // Transition from camera to desktop share\n                // or transition from one camera source to another.\n                if (this.peerconnection.options.capScreenshareBitrate\n                    && oldTrack && newTrack && newTrack.isVideoTrack()) {\n                    // Clearing current primary SSRC will make\n                    // the SdpConsistency generate a new one which will result\n                    // with:\n                    // 1. source-remove for the old video stream.\n                    // 2. source-add for the new video stream.\n                    this.peerconnection.clearRecvonlySsrc();\n                }\n\n                // Transition from no video to video (unmute).\n                if (!oldTrack && newTrack && newTrack.isVideoTrack()) {\n                    // Clearing current primary SSRC will make\n                    // the SdpConsistency generate a new one which will result\n                    // with:\n                    // 1. source-remove for the recvonly\n                    // 2. source-add for the new video stream\n                    this.peerconnection.clearRecvonlySsrc();\n\n                // Transition from video to no video\n                } else if (oldTrack && oldTrack.isVideoTrack() && !newTrack) {\n                    // Clearing current primary SSRC and generating the recvonly\n                    // will result in:\n                    // 1. source-remove for the old video stream\n                    // 2. source-add for the recvonly stream\n                    this.peerconnection.clearRecvonlySsrc();\n                    this.peerconnection.generateRecvonlySsrc();\n                }\n            }\n\n            this.peerconnection.replaceTrack(oldTrack, newTrack)\n                .then(shouldRenegotiate => {\n                    let promise = Promise.resolve();\n\n                    logger.debug(`${this} TPC.replaceTrack finished. shouldRenegotiate = ${\n                        shouldRenegotiate}, JingleSessionState = ${this.state}`);\n\n                    if (shouldRenegotiate\n                        && (oldTrack || newTrack)\n                        && this.state === JingleSessionState.ACTIVE) {\n                        promise = this._renegotiate().then(() => {\n                            const newLocalSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n                            this.notifyMySSRCUpdate(new SDP(oldLocalSdp), newLocalSDP);\n                        });\n                    }\n\n                    return promise.then(() => {\n                        if (newTrack?.isVideoTrack()) {\n                            logger.debug(`${this} replaceTrack worker: configuring video stream`);\n\n                            // Configure the video encodings after the track is replaced.\n                            return this.peerconnection.configureSenderVideoEncodings();\n                        }\n                    });\n                })\n                .then(() => finishedCallback(), error => finishedCallback(error));\n        };\n\n        return new Promise((resolve, reject) => {\n            logger.debug(`${this} Queued replaceTrack task. Old track = ${oldTrack}, new track = ${newTrack}`);\n\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        logger.error(`${this} Replace track error:`, error);\n                        reject(error);\n                    } else {\n                        logger.info(`${this}  Replace track done!`);\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Parse the information from the xml sourceRemoveElem and translate it\n     *  into sdp lines\n     * @param {jquery xml element} sourceRemoveElem the source-remove\n     *  element from jingle\n     * @param {SDP object} currentRemoteSdp the current remote\n     *  sdp (as of this new source-remove)\n     * @returns {list} a list of SDP line strings that should\n     *  be removed from the remote SDP\n     */\n    _parseSsrcInfoFromSourceRemove(sourceRemoveElem, currentRemoteSdp) {\n        const removeSsrcInfo = [];\n\n        $(sourceRemoveElem).each((i1, content) => {\n            const name = $(content).attr('name');\n            let lines = '';\n\n            $(content)\n                .find('ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n                .each(function() {\n                    /* eslint-disable no-invalid-this */\n                    const semantics = this.getAttribute('semantics');\n                    const ssrcs\n                        = $(this)\n                            .find('>source')\n                            .map(function() {\n                                return this.getAttribute('ssrc');\n                            })\n                            .get();\n\n                    if (ssrcs.length) {\n                        lines\n                            += `a=ssrc-group:${semantics} ${\n                                ssrcs.join(' ')}\\r\\n`;\n                    }\n\n                    /* eslint-enable no-invalid-this */\n                });\n            const ssrcs = [];\n\n            // handles both >source and >description>source versions\n            const tmp\n                = $(content).find(\n                    'source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\n\n            tmp.each(function() {\n                // eslint-disable-next-line no-invalid-this\n                const ssrc = $(this).attr('ssrc');\n\n                ssrcs.push(ssrc);\n            });\n            currentRemoteSdp.media.forEach((media, i2) => {\n                if (!SDPUtil.findLine(media, `a=mid:${name}`)) {\n                    return;\n                }\n                if (!removeSsrcInfo[i2]) {\n                    removeSsrcInfo[i2] = '';\n                }\n                ssrcs.forEach(ssrc => {\n                    const ssrcLines\n                        = SDPUtil.findLines(media, `a=ssrc:${ssrc}`);\n\n                    if (ssrcLines.length) {\n                        removeSsrcInfo[i2] += `${ssrcLines.join('\\r\\n')}\\r\\n`;\n                    }\n                });\n                removeSsrcInfo[i2] += lines;\n            });\n        });\n\n        return removeSsrcInfo;\n    }\n\n    /**\n     * Will print an error if there is any difference, between the SSRCs given\n     * in the <tt>oldSDP</tt> and the ones currently described in\n     * the peerconnection's local description.\n     * @param {string} operationName the operation's name which will be printed\n     * in the error message.\n     * @param {SDP} oldSDP the old local SDP which will be compared with\n     * the current one.\n     * @return {boolean} <tt>true</tt> if there was any change or <tt>false</tt>\n     * otherwise.\n     * @private\n     */\n    _verifyNoSSRCChanged(operationName, oldSDP) {\n        const currentLocalSDP\n            = new SDP(this.peerconnection.localDescription.sdp);\n        let sdpDiff = new SDPDiffer(oldSDP, currentLocalSDP);\n        const addedMedia = sdpDiff.getNewMedia();\n\n        if (Object.keys(addedMedia).length) {\n            logger.error(`${this} - some SSRC were added on ${operationName}`, addedMedia);\n\n            return false;\n        }\n\n        sdpDiff = new SDPDiffer(currentLocalSDP, oldSDP);\n        const removedMedia = sdpDiff.getNewMedia();\n\n        if (Object.keys(removedMedia).length) {\n            logger.error(`${this} - some SSRCs were removed on ${operationName}`, removedMedia);\n\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Adds local track back to this session, as part of the unmute operation.\n     * @param {JitsiLocalTrack} track\n     * @return {Promise} a promise that will resolve once the local track is\n     * added back to this session and renegotiation succeeds. Will be rejected\n     * with a <tt>string</tt> that provides some error details in case something\n     * goes wrong.\n     */\n    addTrackAsUnmute(track) {\n        return this._addRemoveTrackAsMuteUnmute(\n            false /* add as unmute */, track)\n            .then(() => {\n                // Configure the video encodings after the track is unmuted. If the user joins the call muted and\n                // unmutes it the first time, all the parameters need to be configured.\n                if (track.isVideoTrack()) {\n                    return this.peerconnection.configureSenderVideoEncodings();\n                }\n            });\n    }\n\n    /**\n     * Remove local track as part of the mute operation.\n     * @param {JitsiLocalTrack} track the local track to be removed\n     * @return {Promise} a promise which will be resolved once the local track\n     * is removed from this session and the renegotiation is performed.\n     * The promise will be rejected with a <tt>string</tt> that the describes\n     * the error if anything goes wrong.\n     */\n    removeTrackAsMute(track) {\n        return this._addRemoveTrackAsMuteUnmute(\n            true /* remove as mute */, track);\n    }\n\n    /**\n     * See {@link addTrackAsUnmute} and {@link removeTrackAsMute}.\n     * @param {boolean} isMute <tt>true</tt> for \"remove as mute\" or\n     * <tt>false</tt> for \"add as unmute\".\n     * @param {JitsiLocalTrack} track the track that will be added/removed\n     * @private\n     */\n    _addRemoveTrackAsMuteUnmute(isMute, track) {\n        if (!track) {\n            return Promise.reject('invalid \"track\" argument value');\n        }\n        const operationName = isMute ? 'removeTrackMute' : 'addTrackUnmute';\n        const workFunction = finishedCallback => {\n            const tpc = this.peerconnection;\n\n            if (!tpc) {\n                finishedCallback(\n                    `Error:  tried ${operationName} track with no active peer`\n                        + 'connection');\n\n                return;\n            }\n            const oldLocalSDP = tpc.localDescription.sdp;\n            const operationPromise\n                = isMute\n                    ? tpc.removeTrackMute(track)\n                    : tpc.addTrackUnmute(track);\n\n            operationPromise\n                .then(shouldRenegotiate => {\n                    if (shouldRenegotiate && oldLocalSDP && tpc.remoteDescription.sdp) {\n                        this._renegotiate()\n                            .then(() => {\n                                // The results are ignored, as this check failure is not enough to fail the whole\n                                // operation. It will log an error inside for plan-b.\n                                !this.usesUnifiedPlan && this._verifyNoSSRCChanged(operationName, new SDP(oldLocalSDP));\n                                const newLocalSdp = tpc.localDescription.sdp;\n\n                                // Signal the ssrc if an unmute operation results in a new ssrc being generated.\n                                this.notifyMySSRCUpdate(new SDP(oldLocalSDP), new SDP(newLocalSdp));\n                                finishedCallback();\n                            });\n                    } else {\n                        finishedCallback();\n                    }\n                },\n                finishedCallback /* will be called with an error */);\n        };\n\n        logger.debug(`${this} Queued ${operationName} task`);\n\n        return new Promise((resolve, reject) => {\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        logger.error(`${this} ${operationName} failed`);\n                        reject(error);\n                    } else {\n                        logger.debug(`${this} ${operationName} done`);\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Resumes or suspends media transfer over the underlying peer connection.\n     * @param {boolean} audioActive <tt>true</tt> to enable audio media\n     * transfer or <tt>false</tt> to suspend audio media transmission.\n     * @param {boolean} videoActive <tt>true</tt> to enable video media\n     * transfer or <tt>false</tt> to suspend video media transmission.\n     * @return {Promise} a <tt>Promise</tt> which will resolve once\n     * the operation is done. It will be rejected with an error description as\n     * a string in case anything goes wrong.\n     */\n    setMediaTransferActive(audioActive, videoActive) {\n        if (!this.peerconnection) {\n            return Promise.reject(\n                'Can not modify transfer active state,'\n                    + ' before \"initialize\" is called');\n        }\n\n        const logAudioStr = audioActive ? 'audio active' : 'audio inactive';\n        const logVideoStr = videoActive ? 'video active' : 'video inactive';\n\n        logger.info(`${this} Queued make ${logVideoStr}, ${logAudioStr} task`);\n\n        const workFunction = finishedCallback => {\n            const isSessionActive = this.state === JingleSessionState.ACTIVE;\n\n            // Because the value is modified on the queue it's impossible to\n            // check it's final value reliably prior to submitting the task.\n            // The rule here is that the last submitted state counts.\n            // Check the values here to avoid unnecessary renegotiation cycle.\n            const audioActiveChanged\n                = this.peerconnection.setAudioTransferActive(audioActive);\n\n            if (this._localVideoActive !== videoActive) {\n                this._localVideoActive = videoActive;\n\n                // Do only for P2P - Jicofo will reply with 'bad-request'\n                // We don't want to send 'content-modify', before the initial\n                // O/A (state === JingleSessionState.ACTIVE), because that will\n                // mess up video media direction in the remote SDP.\n                // 'content-modify' when processed only affects the media\n                // direction in the local SDP. We're doing that, because setting\n                // 'inactive' on video media in remote SDP will mess up our SDP\n                // translation chain (simulcast, RTX, video mute etc.).\n                if (this.isP2P && isSessionActive) {\n                    this.sendContentModify();\n                }\n            }\n\n            const pcVideoActiveChanged\n                = this.peerconnection.setVideoTransferActive(\n                    this._localVideoActive && this._remoteVideoActive);\n\n            // Will do the sRD/sLD cycle to update SDPs and adjust the media\n            // direction\n            if (isSessionActive\n                    && (audioActiveChanged || pcVideoActiveChanged)) {\n                this._renegotiate()\n                    .then(\n                        finishedCallback,\n                        finishedCallback /* will be called with an error */);\n            } else {\n                finishedCallback();\n            }\n        };\n\n        return new Promise((resolve, reject) => {\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        logger.error(`${this} Make ${logVideoStr}, ${logAudioStr} task failed!`);\n                        reject(error);\n                    } else {\n                        logger.debug(`${this} Make ${logVideoStr}, ${logAudioStr} task done!`);\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Will put and execute on the queue a session modify task. Currently it\n     * only checks the senders attribute of the video content in order to figure\n     * out if the remote peer has video in the inactive state (stored locally\n     * in {@link _remoteVideoActive} - see field description for more info).\n     * @param {jQuery} jingleContents jQuery selector pointing to the jingle\n     * element of the session modify IQ.\n     * @see {@link _remoteVideoActive}\n     * @see {@link _localVideoActive}\n     */\n    modifyContents(jingleContents) {\n        const newVideoSenders\n            = JingleSessionPC.parseVideoSenders(jingleContents);\n        const newMaxFrameHeight\n            = JingleSessionPC.parseMaxFrameHeight(jingleContents);\n\n        // frame height is optional in our content-modify protocol\n        if (newMaxFrameHeight) {\n            logger.info(`${this} received remote max frame height: ${newMaxFrameHeight}`);\n            this.remoteRecvMaxFrameHeight = newMaxFrameHeight;\n            this.eventEmitter.emit(\n                MediaSessionEvents.REMOTE_VIDEO_CONSTRAINTS_CHANGED, this);\n        }\n\n        if (newVideoSenders === null) {\n            logger.error(\n                `${this} - failed to parse video \"senders\" attribute in`\n                    + '\"content-modify\" action');\n\n            return;\n        }\n\n        const workFunction = finishedCallback => {\n            if (this._assertNotEnded('content-modify')\n                    && this._modifyRemoteVideoActive(newVideoSenders)) {\n                // Will do the sRD/sLD cycle to update SDPs and adjust\n                // the media direction\n                this._renegotiate()\n                    .then(finishedCallback, finishedCallback /* (error) */);\n            } else {\n                finishedCallback();\n            }\n        };\n\n        logger.debug(`${this} queued \"content-modify\" task(video senders=\"${newVideoSenders}\")`);\n\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error(`${this} \"content-modify\" failed`, error);\n                } else {\n                    logger.debug(`${this} \"content-modify\" task(video senders=\"${newVideoSenders}\") done`);\n                }\n            });\n    }\n\n    /**\n     * Processes new value of remote video \"senders\" Jingle attribute and tries\n     * to apply it for {@link _remoteVideoActive}.\n     * @param {string} remoteVideoSenders the value of \"senders\" attribute of\n     * Jingle video content element advertised by remote peer.\n     * @return {boolean} <tt>true</tt> if the change affected state of\n     * the underlying peerconnection and renegotiation is required for\n     * the changes to take effect.\n     * @private\n     */\n    _modifyRemoteVideoActive(remoteVideoSenders) {\n        const isRemoteVideoActive\n            = remoteVideoSenders === 'both'\n                || (remoteVideoSenders === 'initiator' && this.isInitiator)\n                || (remoteVideoSenders === 'responder' && !this.isInitiator);\n\n        if (isRemoteVideoActive !== this._remoteVideoActive) {\n            logger.debug(`${this} new remote video active: ${isRemoteVideoActive}`);\n            this._remoteVideoActive = isRemoteVideoActive;\n        }\n\n        return this.peerconnection.setVideoTransferActive(\n            this._localVideoActive && this._remoteVideoActive);\n    }\n\n    /**\n     * Figures out added/removed ssrcs and send update IQs.\n     * @param oldSDP SDP object for old description.\n     * @param newSDP SDP object for new description.\n     */\n    notifyMySSRCUpdate(oldSDP, newSDP) {\n        if (this.state !== JingleSessionState.ACTIVE) {\n            logger.warn(`${this} Skipping SSRC update in '${this.state} ' state.`);\n\n            return;\n        }\n\n        if (!this.connection.connected) {\n            // The goal is to compare the oldest SDP with the latest one upon reconnect\n            if (!this._cachedOldLocalSdp) {\n                this._cachedOldLocalSdp = oldSDP;\n            }\n            this._cachedNewLocalSdp = newSDP;\n            logger.warn(`${this} Not sending SSRC update while the signaling is disconnected`);\n\n            return;\n        }\n\n        this._cachedOldLocalSdp = undefined;\n        this._cachedNewLocalSdp = undefined;\n\n        const getSignaledSourceInfo = sdpDiffer => {\n            const newMedia = sdpDiffer.getNewMedia();\n            let ssrcs = [];\n            let mediaType = null;\n\n            // It is assumed that sources are signaled one at a time.\n            Object.keys(newMedia).forEach(mediaIndex => {\n                const signaledSsrcs = Object.keys(newMedia[mediaIndex].ssrcs);\n\n                mediaType = newMedia[mediaIndex].mid;\n                if (signaledSsrcs?.length) {\n                    ssrcs = ssrcs.concat(signaledSsrcs);\n                }\n            });\n\n            return {\n                mediaType,\n                ssrcs\n            };\n        };\n\n        // send source-remove IQ.\n        let sdpDiffer = new SDPDiffer(newSDP, oldSDP);\n        const remove = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'source-remove',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            }\n            );\n        const removedAnySSRCs = sdpDiffer.toJingle(remove);\n\n        // context a common object for one run of ssrc update (source-add and source-remove) so we can match them if we\n        // need to\n        const ctx = {};\n\n        if (removedAnySSRCs) {\n            const sourceInfo = getSignaledSourceInfo(sdpDiffer);\n\n            // Log only the SSRCs instead of the full IQ.\n            logger.info(`${this} Sending source-remove for ${sourceInfo.mediaType} ssrcs=${sourceInfo.ssrcs}`);\n            this.connection.sendIQ(\n                remove,\n                () => {\n                    this.room.eventEmitter.emit(XMPPEvents.SOURCE_REMOVE, this, ctx);\n                },\n                this.newJingleErrorHandler(remove, error => {\n                    this.room.eventEmitter.emit(XMPPEvents.SOURCE_REMOVE_ERROR, this, error, ctx);\n                }),\n                IQ_TIMEOUT);\n        }\n\n        // send source-add IQ.\n        sdpDiffer = new SDPDiffer(oldSDP, newSDP);\n        const add = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'source-add',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            }\n            );\n\n        const containsNewSSRCs = sdpDiffer.toJingle(add);\n\n        if (containsNewSSRCs) {\n            const sourceInfo = getSignaledSourceInfo(sdpDiffer);\n\n            // Log only the SSRCs instead of the full IQ.\n            logger.info(`${this} Sending source-add for ${sourceInfo.mediaType} ssrcs=${sourceInfo.ssrcs}`);\n            this.connection.sendIQ(\n                add,\n                () => {\n                    this.room.eventEmitter.emit(XMPPEvents.SOURCE_ADD, this, ctx);\n                },\n                this.newJingleErrorHandler(add, error => {\n                    this.room.eventEmitter.emit(XMPPEvents.SOURCE_ADD_ERROR, this, error, sourceInfo.mediaType, ctx);\n                }),\n                IQ_TIMEOUT);\n        }\n    }\n\n    /**\n     * Method returns function(errorResponse) which is a callback to be passed\n     * to Strophe connection.sendIQ method. An 'error' structure is created that\n     * is passed as 1st argument to given <tt>failureCb</tt>. The format of this\n     * structure is as follows:\n     * {\n     *  code: {XMPP error response code}\n     *  reason: {the name of XMPP error reason element or 'timeout' if the\n      *          request has timed out within <tt>IQ_TIMEOUT</tt> milliseconds}\n     *  source: {request.tree() that provides original request}\n     *  session: {this JingleSessionPC.toString()}\n     * }\n     * @param request Strophe IQ instance which is the request to be dumped into\n     *        the error structure\n     * @param failureCb function(error) called when error response was returned\n     *        or when a timeout has occurred.\n     * @returns {function(this:JingleSessionPC)}\n     */\n    newJingleErrorHandler(request, failureCb) {\n        return errResponse => {\n\n            const error = {};\n\n            // Get XMPP error code and condition(reason)\n            const errorElSel = $(errResponse).find('error');\n\n            if (errorElSel.length) {\n                error.code = errorElSel.attr('code');\n                const errorReasonSel = $(errResponse).find('error :first');\n\n                if (errorReasonSel.length) {\n                    error.reason = errorReasonSel[0].tagName;\n                }\n\n                const errorMsgSel = errorElSel.find('>text');\n\n                if (errorMsgSel.length) {\n                    error.msg = errorMsgSel.text();\n                }\n            }\n\n            if (!errResponse) {\n                error.reason = 'timeout';\n            }\n\n            error.session = this.toString();\n\n            if (failureCb) {\n                failureCb(error);\n            } else if (this.state === JingleSessionState.ENDED\n                        && error.reason === 'item-not-found') {\n                // When remote peer decides to terminate the session, but it\n                // still have few messages on the queue for processing,\n                // it will first send us 'session-terminate' (we enter ENDED)\n                // and then follow with 'item-not-found' for the queued requests\n                // We don't want to have that logged on error level.\n                logger.debug(`${this} Jingle error: ${JSON.stringify(error)}`);\n            } else {\n                GlobalOnErrorHandler.callErrorHandler(\n                    new Error(\n                        `Jingle error: ${JSON.stringify(error)}`));\n            }\n        };\n    }\n\n    /**\n     * Returns the ice connection state for the peer connection.\n     * @returns the ice connection state for the peer connection.\n     */\n    getIceConnectionState() {\n        return this.peerconnection.getConnectionState();\n    }\n\n    /**\n     * Closes the peerconnection.\n     */\n    close() {\n        this.state = JingleSessionState.ENDED;\n        this.establishmentDuration = undefined;\n\n        if (this.peerconnection) {\n            this.peerconnection.onicecandidate = null;\n            this.peerconnection.oniceconnectionstatechange = null;\n            this.peerconnection.onnegotiationneeded = null;\n            this.peerconnection.onsignalingstatechange = null;\n        }\n\n        logger.debug(`${this} Clearing modificationQueue`);\n\n        // Remove any pending tasks from the queue\n        this.modificationQueue.clear();\n\n        logger.debug(`${this} Queued PC close task`);\n        this.modificationQueue.push(finishCallback => {\n            // do not try to close if already closed.\n            this.peerconnection && this.peerconnection.close();\n            finishCallback();\n            logger.debug(`${this} PC close task done!`);\n        });\n\n        logger.debug(`${this} Shutdown modificationQueue!`);\n\n        // No more tasks can go in after the close task\n        this.modificationQueue.shutdown();\n    }\n\n    /**\n     * Converts to string with minor summary.\n     * @return {string}\n     */\n    toString() {\n        return `JingleSessionPC[session=${this.isP2P ? 'P2P' : 'JVB'},initiator=${this.isInitiator},sid=${this.sid}]`;\n    }\n\n    /**\n     * If the A/B test for suspend video is disabled according to the room's\n     * configuration, returns undefined. Otherwise returns a boolean which\n     * indicates whether the suspend video option should be enabled or disabled.\n     * @param {JingleSessionPCOptions} options - The config options.\n     */\n    _abtestSuspendVideoEnabled({ abTesting }) {\n        if (!abTesting || !abTesting.enableSuspendVideoTest) {\n            return;\n        }\n\n        // We want the two participants in a P2P call to agree on the value of\n        // the \"suspend\" option. We use the JID of the initiator, because it is\n        // both randomly selected and agreed upon by both participants.\n        const jid = this._getInitiatorJid();\n\n        return integerHash(jid) % 2 === 0;\n    }\n}\n","/* global $ */\n\nimport { getLogger } from '@jitsi/logger';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport * as MediaType from '../../service/RTC/MediaType';\nimport {\n    ACTION_JINGLE_TR_RECEIVED,\n    ACTION_JINGLE_TR_SUCCESS,\n    createJingleEvent\n} from '../../service/statistics/AnalyticsEvents';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport RandomUtil from '../util/RandomUtil';\n\nimport ConnectionPlugin from './ConnectionPlugin';\nimport { expandSourcesFromJson } from './JingleHelperFunctions';\nimport JingleSessionPC from './JingleSessionPC';\n\nconst logger = getLogger(__filename);\n\n// XXX Strophe is build around the idea of chaining function calls so allow long\n// function call chains.\n/* eslint-disable newline-per-chained-call */\n\n/**\n * Parses the transport XML element and returns the list of ICE candidates formatted as text.\n *\n * @param {*} transport Transport XML element extracted from the IQ.\n * @returns {Array<string>}\n */\nfunction _parseIceCandidates(transport) {\n    const candidates = $(transport).find('>candidate');\n    const parseCandidates = [];\n\n    // Extract the candidate information from the IQ.\n    candidates.each((_, candidate) => {\n        const attributes = candidate.attributes;\n        const candidateAttrs = [];\n\n        for (let i = 0; i < attributes.length; i++) {\n            const attr = attributes[i];\n\n            candidateAttrs.push(`${attr.name}: ${attr.value}`);\n        }\n        parseCandidates.push(candidateAttrs.join(' '));\n    });\n\n    return parseCandidates;\n}\n\n/**\n *\n */\nexport default class JingleConnectionPlugin extends ConnectionPlugin {\n    /**\n     * Creates new <tt>JingleConnectionPlugin</tt>\n     * @param {XMPP} xmpp\n     * @param {EventEmitter} eventEmitter\n     * @param {Object} iceConfig an object that holds the iceConfig to be passed\n     * to the p2p and the jvb <tt>PeerConnection</tt>.\n     */\n    constructor(xmpp, eventEmitter, iceConfig) {\n        super();\n        this.xmpp = xmpp;\n        this.eventEmitter = eventEmitter;\n        this.sessions = {};\n        this.jvbIceConfig = iceConfig.jvb;\n        this.p2pIceConfig = iceConfig.p2p;\n        this.mediaConstraints = {\n            offerToReceiveAudio: true,\n            offerToReceiveVideo: true\n        };\n    }\n\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n        this.connection.addHandler(this.onJingle.bind(this),\n            'urn:xmpp:jingle:1', 'iq', 'set', null, null);\n    }\n\n    /**\n     *\n     * @param iq\n     */\n    onJingle(iq) {\n        const sid = $(iq).find('jingle').attr('sid');\n        const action = $(iq).find('jingle').attr('action');\n        const fromJid = iq.getAttribute('from');\n\n        // send ack first\n        const ack = $iq({ type: 'result',\n            to: fromJid,\n            id: iq.getAttribute('id')\n        });\n\n        let sess = this.sessions[sid];\n\n        if (action !== 'session-initiate') {\n            if (!sess) {\n                ack.attrs({ type: 'error' });\n                ack.c('error', { type: 'cancel' })\n                    .c('item-not-found', {\n                        xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\n                    })\n                    .up()\n                    .c('unknown-session', {\n                        xmlns: 'urn:xmpp:jingle:errors:1'\n                    });\n                logger.warn(`invalid session id: ${sid}`);\n                logger.debug(iq);\n                this.connection.send(ack);\n\n                return true;\n            }\n\n            // local jid is not checked\n            if (fromJid !== sess.remoteJid) {\n                logger.warn(\n                    'jid mismatch for session id', sid, sess.remoteJid, iq);\n                ack.attrs({ type: 'error' });\n                ack.c('error', { type: 'cancel' })\n                    .c('item-not-found', {\n                        xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\n                    })\n                    .up()\n                    .c('unknown-session', {\n                        xmlns: 'urn:xmpp:jingle:errors:1'\n                    });\n                this.connection.send(ack);\n\n                return true;\n            }\n        } else if (sess !== undefined) {\n            // Existing session with same session id. This might be out-of-order\n            // if the sess.remoteJid is the same as from.\n            ack.attrs({ type: 'error' });\n            ack.c('error', { type: 'cancel' })\n                .c('service-unavailable', {\n                    xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\n                })\n                .up();\n            logger.warn('duplicate session id', sid, iq);\n            this.connection.send(ack);\n\n            return true;\n        }\n        const now = window.performance.now();\n\n        // FIXME that should work most of the time, but we'd have to\n        // think how secure it is to assume that user with \"focus\"\n        // nickname is Jicofo.\n        const isP2P = Strophe.getResourceFromJid(fromJid) !== 'focus';\n\n        // see http://xmpp.org/extensions/xep-0166.html#concepts-session\n\n        const jsonMessages = $(iq).find('jingle>json-message');\n\n        if (jsonMessages?.length) {\n            let audioVideoSsrcs;\n\n            logger.info(`Found a JSON-encoded element in ${action}, translating to standard Jingle.`);\n            for (let i = 0; i < jsonMessages.length; i++) {\n                // Currently there is always a single json-message in the IQ with the source information.\n                audioVideoSsrcs = expandSourcesFromJson(iq, jsonMessages[i]);\n            }\n\n            if (audioVideoSsrcs?.size) {\n                const logMessage = [];\n\n                for (const endpoint of audioVideoSsrcs.keys()) {\n                    logMessage.push(`${endpoint}:[${audioVideoSsrcs.get(endpoint)}]`);\n                }\n                logger.debug(`Received ${action} from ${fromJid} with sources=${logMessage.join(', ')}`);\n            }\n\n            // TODO: is there a way to remove the json-message elements once we've extracted the information?\n            // removeChild doesn't seem to work.\n        }\n\n        switch (action) {\n        case 'session-initiate': {\n            logger.log('(TIME) received session-initiate:\\t', now);\n            const startMuted = $(iq).find('jingle>startmuted');\n\n            isP2P && logger.debug(`Received ${action} from ${fromJid}`);\n            if (startMuted?.length) {\n                const audioMuted = startMuted.attr(MediaType.AUDIO);\n                const videoMuted = startMuted.attr(MediaType.VIDEO);\n\n                this.eventEmitter.emit(\n                    XMPPEvents.START_MUTED_FROM_FOCUS,\n                    audioMuted === 'true',\n                    videoMuted === 'true');\n            }\n            const pcConfig = isP2P ? this.p2pIceConfig : this.jvbIceConfig;\n\n            sess\n                = new JingleSessionPC(\n                    $(iq).find('jingle').attr('sid'),\n                    $(iq).attr('to'),\n                    fromJid,\n                    this.connection,\n                    this.mediaConstraints,\n\n                    // Makes a copy in order to prevent exception thrown on RN when either this.p2pIceConfig or\n                    // this.jvbIceConfig is modified and there's a PeerConnection instance holding a reference\n                    JSON.parse(JSON.stringify(pcConfig)),\n                    isP2P,\n                    /* initiator */ false);\n\n            this.sessions[sess.sid] = sess;\n            this.eventEmitter.emit(XMPPEvents.CALL_INCOMING, sess, $(iq).find('>jingle'), now);\n            break;\n        }\n        case 'session-accept': {\n            const ssrcs = [];\n            const contents = $(iq).find('jingle>content');\n\n            // Extract the SSRCs from the session-accept received from a p2p peer.\n            for (const content of contents) {\n                const ssrc = $(content).find('description').attr('ssrc');\n\n                ssrc && ssrcs.push(ssrc);\n            }\n            logger.debug(`Received ${action} from ${fromJid} with ssrcs=${ssrcs}`);\n            this.eventEmitter.emit(XMPPEvents.CALL_ACCEPTED, sess, $(iq).find('>jingle'));\n            break;\n        }\n        case 'content-modify': {\n            const height = $(iq).find('jingle>content[name=\"video\"]>max-frame-height');\n\n            logger.debug(`Received ${action} from ${fromJid} with a max-frame-height=${height?.text()}`);\n            sess.modifyContents($(iq).find('>jingle'));\n            break;\n        }\n        case 'transport-info': {\n            const candidates = _parseIceCandidates($(iq).find('jingle>content>transport'));\n\n            logger.debug(`Received ${action} from ${fromJid} for candidates=${candidates.join(', ')}`);\n            this.eventEmitter.emit(XMPPEvents.TRANSPORT_INFO, sess, $(iq).find('>jingle'));\n            break;\n        }\n        case 'session-terminate': {\n            logger.log('terminating...', sess.sid);\n            let reasonCondition = null;\n            let reasonText = null;\n\n            if ($(iq).find('>jingle>reason').length) {\n                reasonCondition\n                    = $(iq).find('>jingle>reason>:first')[0].tagName;\n                reasonText = $(iq).find('>jingle>reason>text').text();\n            }\n            logger.debug(`Received ${action} from ${fromJid} disconnect reason=${reasonText}`);\n            this.terminate(sess.sid, reasonCondition, reasonText);\n            this.eventEmitter.emit(XMPPEvents.CALL_ENDED, sess, reasonCondition, reasonText);\n            break;\n        }\n        case 'transport-replace': {\n            logger.info('(TIME) Start transport replace:\\t', now);\n            const transport = $(iq).find('jingle>content>transport');\n            const candidates = _parseIceCandidates(transport);\n            const iceUfrag = $(transport).attr('ufrag');\n            const icePwd = $(transport).attr('pwd');\n            const dtlsFingerprint = $(transport).find('>fingerprint')?.text();\n\n            logger.debug(`Received ${action} from ${fromJid} with iceUfrag=${iceUfrag},`\n            + ` icePwd=${icePwd}, DTLS fingerprint=${dtlsFingerprint}, candidates=${candidates.join(', ')}`);\n\n            Statistics.sendAnalytics(createJingleEvent(\n                ACTION_JINGLE_TR_RECEIVED,\n                {\n                    p2p: isP2P,\n                    value: now\n                }));\n\n            sess.replaceTransport($(iq).find('>jingle'), () => {\n                const successTime = window.performance.now();\n\n                logger.info('(TIME) Transport replace success:\\t', successTime);\n                Statistics.sendAnalytics(createJingleEvent(\n                    ACTION_JINGLE_TR_SUCCESS,\n                    {\n                        p2p: isP2P,\n                        value: successTime\n                    }));\n            }, error => {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error('Transport replace failed', error);\n                sess.sendTransportReject();\n            });\n            break;\n        }\n        case 'source-add':\n            sess.addRemoteStream($(iq).find('>jingle>content'));\n            break;\n        case 'source-remove':\n            sess.removeRemoteStream($(iq).find('>jingle>content'));\n            break;\n        default:\n            logger.warn('jingle action not implemented', action);\n            ack.attrs({ type: 'error' });\n            ack.c('error', { type: 'cancel' })\n                .c('bad-request',\n                    { xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas' })\n                .up();\n            break;\n        }\n        this.connection.send(ack);\n\n        return true;\n    }\n\n    /**\n     * Creates new <tt>JingleSessionPC</tt> meant to be used in a direct P2P\n     * connection, configured as 'initiator'.\n     * @param {string} me our JID\n     * @param {string} peer remote participant's JID\n     * @return {JingleSessionPC}\n     */\n    newP2PJingleSession(me, peer) {\n        const sess\n            = new JingleSessionPC(\n                RandomUtil.randomHexString(12),\n                me,\n                peer,\n                this.connection,\n                this.mediaConstraints,\n                this.p2pIceConfig,\n                /* P2P */ true,\n                /* initiator */ true);\n\n        this.sessions[sess.sid] = sess;\n\n        return sess;\n    }\n\n    /**\n     *\n     * @param sid\n     * @param reasonCondition\n     * @param reasonText\n     */\n    terminate(sid, reasonCondition, reasonText) {\n        if (this.sessions.hasOwnProperty(sid)) {\n            if (this.sessions[sid].state !== 'ended') {\n                this.sessions[sid].onTerminated(reasonCondition, reasonText);\n            }\n            delete this.sessions[sid];\n        }\n    }\n\n    /**\n     *\n     */\n    getStunAndTurnCredentials() {\n        // get stun and turn configuration from server via xep-0215\n        // uses time-limited credentials as described in\n        // http://tools.ietf.org/html/draft-uberti-behave-turn-rest-00\n        //\n        // See https://modules.prosody.im/mod_turncredentials.html\n        // for a prosody module which implements this.\n        // Or the new implementation https://modules.prosody.im/mod_external_services which will be in prosody 0.12\n        //\n        // Currently, this doesn't work with updateIce and therefore credentials\n        // with a long validity have to be fetched before creating the\n        // peerconnection.\n        // TODO: implement refresh via updateIce as described in\n        //      https://code.google.com/p/webrtc/issues/detail?id=1650\n        this.connection.sendIQ(\n            $iq({ type: 'get',\n                to: this.xmpp.options.hosts.domain })\n                .c('services', { xmlns: 'urn:xmpp:extdisco:2' }),\n            v2Res => this.onReceiveStunAndTurnCredentials(v2Res),\n            () => {\n                logger.warn('getting turn credentials with extdisco:2 failed, trying extdisco:1');\n                this.connection.sendIQ(\n                    $iq({ type: 'get',\n                        to: this.xmpp.options.hosts.domain })\n                        .c('services', { xmlns: 'urn:xmpp:extdisco:1' }),\n                    v1Res => this.onReceiveStunAndTurnCredentials(v1Res),\n                    () => {\n                        logger.warn('getting turn credentials failed');\n                        logger.warn('is mod_turncredentials or similar installed and configured?');\n                    }\n                );\n            });\n    }\n\n    /**\n     * Parses response when querying for services using urn:xmpp:extdisco:1 or urn:xmpp:extdisco:2.\n     * Stores results in jvbIceConfig and p2pIceConfig.\n     * @param res The response iq.\n     * @return {boolean} Whether something was processed from the supplied message.\n     */\n    onReceiveStunAndTurnCredentials(res) {\n        const iceservers = [];\n\n        $(res).find('>services>service').each((idx, el) => {\n            // eslint-disable-next-line no-param-reassign\n            el = $(el);\n            const dict = {};\n            const type = el.attr('type');\n\n            switch (type) {\n            case 'stun':\n                dict.urls = `stun:${el.attr('host')}`;\n                if (el.attr('port')) {\n                    dict.urls += `:${el.attr('port')}`;\n                }\n                iceservers.push(dict);\n                break;\n            case 'turn':\n            case 'turns': {\n                dict.urls = `${type}:`;\n                dict.username = el.attr('username');\n                dict.urls += el.attr('host');\n                const port = el.attr('port');\n\n                if (port) {\n                    dict.urls += `:${el.attr('port')}`;\n                }\n                const transport = el.attr('transport');\n\n                if (transport && transport !== 'udp') {\n                    dict.urls += `?transport=${transport}`;\n                }\n\n                dict.credential = el.attr('password')\n                        || dict.credential;\n                iceservers.push(dict);\n                break;\n            }\n            }\n        });\n\n        const options = this.xmpp.options;\n\n        // Shuffle ICEServers for loadbalancing\n        for (let i = iceservers.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            const temp = iceservers[i];\n\n            iceservers[i] = iceservers[j];\n            iceservers[j] = temp;\n        }\n\n        let filter;\n\n        if (options.useTurnUdp) {\n            filter = s => s.urls.startsWith('turn');\n        } else {\n            // By default we filter out STUN and TURN/UDP and leave only TURN/TCP.\n            filter = s => s.urls.startsWith('turn') && (s.urls.indexOf('transport=tcp') >= 0);\n        }\n\n        this.jvbIceConfig.iceServers = iceservers.filter(filter);\n        this.p2pIceConfig.iceServers = iceservers;\n\n        return iceservers.length > 0;\n    }\n\n    /**\n     * Returns the data saved in 'updateLog' in a format to be logged.\n     */\n    getLog() {\n        const data = {};\n\n        Object.keys(this.sessions).forEach(sid => {\n            const session = this.sessions[sid];\n            const pc = session.peerconnection;\n\n            if (pc && pc.updateLog) {\n                // FIXME: should probably be a .dump call\n                data[`jingle_${sid}`] = {\n                    updateLog: pc.updateLog,\n                    stats: pc.stats,\n                    url: window.location.href\n                };\n            }\n        });\n\n        return data;\n    }\n}\n\n/* eslint-enable newline-per-chained-call */\n","import { Strophe } from 'strophe.js';\n\nimport ConnectionPlugin from './ConnectionPlugin';\n\n/**\n *  Logs raw stanzas and makes them available for download as JSON\n */\nclass StropheLogger extends ConnectionPlugin {\n    /**\n     *\n     */\n    constructor() {\n        super();\n        this.log = [];\n    }\n\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n        this.connection.rawInput = this.logIncoming.bind(this);\n        this.connection.rawOutput = this.logOutgoing.bind(this);\n    }\n\n    /**\n     *\n     * @param stanza\n     */\n    logIncoming(stanza) {\n        this.log.push([ new Date().getTime(), 'incoming', stanza ]);\n    }\n\n    /**\n     *\n     * @param stanza\n     */\n    logOutgoing(stanza) {\n        this.log.push([ new Date().getTime(), 'outgoing', stanza ]);\n    }\n}\n\n/**\n *\n */\nexport default function() {\n    Strophe.addConnectionPlugin('logger', new StropheLogger());\n}\n","/* global $ */\n\nimport { getLogger } from '@jitsi/logger';\nimport { $iq } from 'strophe.js';\n\nimport ConnectionPlugin from './ConnectionPlugin';\n\nconst logger = getLogger(__filename);\n\nconst RAYO_XMLNS = 'urn:xmpp:rayo:1';\n\n/**\n *\n */\nexport default class RayoConnectionPlugin extends ConnectionPlugin {\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n\n        this.connection.addHandler(\n            this.onRayo.bind(this), RAYO_XMLNS, 'iq', 'set', null, null);\n    }\n\n    /**\n     *\n     * @param iq\n     */\n    onRayo(iq) {\n        logger.info('Rayo IQ', iq);\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     *\n     * @param to\n     * @param from\n     * @param roomName\n     * @param roomPass\n     * @param focusMucJid\n     */\n    dial(to, from, roomName, roomPass, focusMucJid) {\n        return new Promise((resolve, reject) => {\n            if (!focusMucJid) {\n                reject(new Error('Internal error!'));\n\n                return;\n            }\n            const req = $iq({\n                type: 'set',\n                to: focusMucJid\n            });\n\n            req.c('dial', {\n                xmlns: RAYO_XMLNS,\n                to,\n                from\n            });\n            req.c('header', {\n                name: 'JvbRoomName',\n                value: roomName\n            }).up();\n\n            if (roomPass && roomPass.length) {\n                req.c('header', {\n                    name: 'JvbRoomPassword',\n                    value: roomPass\n                }).up();\n            }\n\n            this.connection.sendIQ(\n                req,\n                result => {\n                    logger.info('Dial result ', result);\n\n                    // eslint-disable-next-line newline-per-chained-call\n                    const resource = $(result).find('ref').attr('uri');\n\n                    this.callResource = resource.substr('xmpp:'.length);\n                    logger.info(`Received call resource: ${this.callResource}`);\n                    resolve();\n                },\n                error => {\n                    logger.info('Dial error ', error);\n                    reject(error);\n                });\n        });\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     *\n     */\n    hangup() {\n        return new Promise((resolve, reject) => {\n            if (!this.callResource) {\n                reject(new Error('No call in progress'));\n                logger.warn('No call in progress');\n\n                return;\n            }\n\n            const req = $iq({\n                type: 'set',\n                to: this.callResource\n            });\n\n            req.c('hangup', {\n                xmlns: RAYO_XMLNS\n            });\n\n            this.connection.sendIQ(req, result => {\n                logger.info('Hangup result ', result);\n                this.callResource = null;\n                resolve();\n            }, error => {\n                logger.info('Hangup error ', error);\n                this.callResource = null;\n                reject(new Error('Hangup error '));\n            });\n        });\n    }\n}\n","/**\n * Strophe logger implementation. Logs from level WARN and above.\n */\nimport { getLogger } from '@jitsi/logger';\nimport { Strophe } from 'strophe.js';\n\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nconst logger = getLogger(__filename);\n\n/**\n * This is the last HTTP error status captured from Strophe debug logs.\n * The purpose of storing it is to distinguish between the network and\n * infrastructure reason for connection being dropped (see connectionHandler in\n * xmpp.js). The value will be cleared (-1) if the subsequent request succeeds\n * which means that the failure could be transient.\n *\n * FIXME in the latest Strophe (not released on npm) there is API to handle\n * particular HTTP errors, but there is no way to learn if the subsequent\n * request succeeded in order to tell if the error was one time incident or if\n * it was the reason for dropping the connection by Strophe (the connection is\n * dropped after 5 subsequent failures). Ideally Strophe should provide more\n * details about the reason on why the connection stopped.\n *\n * @type {number}\n */\nlet lastErrorStatus = -1;\n\n/**\n * A regular expression used to catch Strophe's log message indicating that the\n * last BOSH request was successful. When there is such message seen the\n * {@link lastErrorStatus} will be set back to '-1'.\n * @type {RegExp}\n */\nconst resetLastErrorStatusRegExpr = /request id \\d+.\\d+ got 200/;\n\n/**\n * A regular expression used to capture the current value of the BOSH request\n * error status (HTTP error code or '0' or something else).\n * @type {RegExp}\n */\nconst lastErrorStatusRegExpr\n    = /request errored, status: (\\d+), number of errors: \\d+/;\n\n/**\n *\n */\nexport default function() {\n\n    Strophe.log = function(level, msg) {\n        // Our global handler reports uncaught errors to the stats which may\n        // interpret those as partial call failure.\n        // Strophe log entry about secondary request timeout does not mean that\n        // it's a final failure(the request will be restarted), so we lower it's\n        // level here to a warning.\n        logger.trace('Strophe', level, msg);\n        if (typeof msg === 'string'\n                && msg.indexOf('Request ') !== -1\n                && msg.indexOf('timed out (secondary), restarting') !== -1) {\n            // eslint-disable-next-line no-param-reassign\n            level = Strophe.LogLevel.WARN;\n        }\n\n        /* eslint-disable no-case-declarations */\n        switch (level) {\n        case Strophe.LogLevel.DEBUG:\n            // The log message which reports successful status is logged on\n            // Strophe's DEBUG level.\n            if (lastErrorStatus !== -1\n                    && resetLastErrorStatusRegExpr.test(msg)) {\n                logger.debug('Reset lastErrorStatus');\n                lastErrorStatus = -1;\n            }\n            break;\n        case Strophe.LogLevel.WARN:\n            logger.warn(`Strophe: ${msg}`);\n            const errStatusCapture = lastErrorStatusRegExpr.exec(msg);\n\n            if (errStatusCapture && errStatusCapture.length === 2) {\n                lastErrorStatus = parseInt(errStatusCapture[1], 10);\n                logger.debug(`lastErrorStatus set to: ${lastErrorStatus}`);\n            }\n            break;\n        case Strophe.LogLevel.ERROR:\n        case Strophe.LogLevel.FATAL:\n            // eslint-disable-next-line no-param-reassign\n            msg = `Strophe: ${msg}`;\n            GlobalOnErrorHandler.callErrorHandler(new Error(msg));\n            logger.error(msg);\n            break;\n        }\n\n        /* eslint-enable no-case-declarations */\n    };\n\n    /**\n     * Returns error status (HTTP error code) of the last BOSH request.\n     *\n     * @return {number} HTTP error code, '0' for unknown or \"god knows what\"\n     * (this is a hack).\n     */\n    Strophe.getLastErrorStatus = function() {\n        return lastErrorStatus;\n    };\n\n    Strophe.getStatusString = function(status) {\n        switch (status) {\n        case Strophe.Status.BINDREQUIRED:\n            return 'BINDREQUIRED';\n        case Strophe.Status.ERROR:\n            return 'ERROR';\n        case Strophe.Status.CONNECTING:\n            return 'CONNECTING';\n        case Strophe.Status.CONNFAIL:\n            return 'CONNFAIL';\n        case Strophe.Status.AUTHENTICATING:\n            return 'AUTHENTICATING';\n        case Strophe.Status.AUTHFAIL:\n            return 'AUTHFAIL';\n        case Strophe.Status.CONNECTED:\n            return 'CONNECTED';\n        case Strophe.Status.DISCONNECTED:\n            return 'DISCONNECTED';\n        case Strophe.Status.DISCONNECTING:\n            return 'DISCONNECTING';\n        case Strophe.Status.ATTACHED:\n            return 'ATTACHED';\n        default:\n            return 'unknown';\n        }\n    };\n}\n","/* global $ */\n\nimport { getLogger } from '@jitsi/logger';\nimport { $msg, Strophe } from 'strophe.js';\nimport 'strophejs-plugin-disco';\n\nimport * as JitsiConnectionErrors from '../../JitsiConnectionErrors';\nimport * as JitsiConnectionEvents from '../../JitsiConnectionEvents';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport browser from '../browser';\nimport { E2EEncryption } from '../e2ee/E2EEncryption';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport Listenable from '../util/Listenable';\nimport RandomUtil from '../util/RandomUtil';\n\nimport Caps, { parseDiscoInfo } from './Caps';\nimport XmppConnection from './XmppConnection';\nimport MucConnectionPlugin from './strophe.emuc';\nimport JingleConnectionPlugin from './strophe.jingle';\nimport initStropheLogger from './strophe.logger';\nimport RayoConnectionPlugin from './strophe.rayo';\nimport initStropheUtil from './strophe.util';\n\nconst logger = getLogger(__filename);\n\n/**\n* Regex to extract exact error message on jwt error.\n*/\nconst FAILURE_REGEX = /<failure.*><not-allowed\\/><text>(.*)<\\/text><\\/failure>/gi;\n\n/**\n * Creates XMPP connection.\n *\n * @param {Object} options\n * @param {string} [options.token] - JWT token used for authentication(JWT authentication module must be enabled in\n * Prosody).\n * @param {string} options.serviceUrl - The service URL for XMPP connection.\n * @param {string} options.shard - The shard where XMPP connection initially landed.\n * @param {string} options.enableWebsocketResume - True to enable stream resumption.\n * @param {number} [options.websocketKeepAlive] - See {@link XmppConnection} constructor.\n * @param {number} [options.websocketKeepAliveUrl] - See {@link XmppConnection} constructor.\n * @param {Object} [options.xmppPing] - See {@link XmppConnection} constructor.\n * @returns {XmppConnection}\n */\nfunction createConnection({\n    enableWebsocketResume,\n    serviceUrl = '/http-bind',\n    shard,\n    token,\n    websocketKeepAlive,\n    websocketKeepAliveUrl,\n    xmppPing }) {\n\n    // Append token as URL param\n    if (token) {\n        // eslint-disable-next-line no-param-reassign\n        serviceUrl += `${serviceUrl.indexOf('?') === -1 ? '?' : '&'}token=${token}`;\n    }\n\n    return new XmppConnection({\n        enableWebsocketResume,\n        serviceUrl,\n        websocketKeepAlive,\n        websocketKeepAliveUrl,\n        xmppPing,\n        shard\n    });\n}\n\n/**\n * Initializes Strophe plugins that need to work with Strophe.Connection directly rather than the lib-jitsi-meet's\n * {@link XmppConnection} wrapper.\n *\n * @returns {void}\n */\nfunction initStropheNativePlugins() {\n    initStropheUtil();\n    initStropheLogger();\n}\n\n// FIXME: remove once we have a default config template. -saghul\n/**\n * A list of ice servers to use by default for P2P.\n */\nexport const DEFAULT_STUN_SERVERS = [\n    { urls: 'stun:meet-jit-si-turnrelay.jitsi.net:443' }\n];\n\n/**\n * The name of the field used to recognize a chat message as carrying a JSON\n * payload from another endpoint.\n * If the json-message of a chat message contains a valid JSON object, and\n * the JSON has this key, then it is a valid json-message to be sent.\n */\nexport const JITSI_MEET_MUC_TYPE = 'type';\n\n/**\n * The feature used by jigasi participants.\n * @type {string}\n */\nexport const FEATURE_JIGASI = 'http://jitsi.org/protocol/jigasi';\n\n/**\n * The feature used by the lib to mark support for e2ee. We use the feature by putting it in the presence\n * to avoid additional signaling (disco-info).\n * @type {string}\n */\nexport const FEATURE_E2EE = 'https://jitsi.org/meet/e2ee';\n\n/**\n *\n */\nexport default class XMPP extends Listenable {\n    /**\n     * FIXME describe all options\n     * @param {Object} options\n     * @param {String} options.serviceUrl - URL passed to the XMPP client which will be used to establish XMPP\n     * connection with the server.\n     * @param {String} options.bosh - Deprecated, use {@code serviceUrl}.\n     * @param {boolean} options.enableWebsocketResume - Enables XEP-0198 stream management which will make the XMPP\n     * module try to resume the session in case the Websocket connection breaks.\n     * @param {number} [options.websocketKeepAlive] - The websocket keep alive interval. See {@link XmppConnection}\n     * constructor for more details.\n     * @param {number} [options.websocketKeepAliveUrl] - The websocket keep alive url. See {@link XmppConnection}\n     * constructor for more details.\n     * @param {Object} [options.xmppPing] - The xmpp ping settings.\n     * @param {Array<Object>} options.p2pStunServers see {@link JingleConnectionPlugin} for more details.\n     * @param token\n     */\n    constructor(options, token) {\n        super();\n        this.connection = null;\n        this.disconnectInProgress = false;\n        this.connectionTimes = {};\n        this.options = options;\n        this.token = token;\n        this.authenticatedUser = false;\n\n        initStropheNativePlugins();\n\n        const xmppPing = options.xmppPing || {};\n\n        // let's ping the main domain (in case a guest one is used for the connection)\n        xmppPing.domain = options.hosts.domain;\n\n        this.connection = createConnection({\n            enableWebsocketResume: options.enableWebsocketResume,\n\n            // FIXME remove deprecated bosh option at some point\n            serviceUrl: options.serviceUrl || options.bosh,\n            token,\n            websocketKeepAlive: options.websocketKeepAlive,\n            websocketKeepAliveUrl: options.websocketKeepAliveUrl,\n            xmppPing,\n            shard: options.deploymentInfo?.shard\n        });\n\n        // forwards the shard changed event\n        this.connection.on(XmppConnection.Events.CONN_SHARD_CHANGED, () => {\n            /* eslint-disable camelcase */\n            const details = {\n                shard_changed: true,\n                suspend_time: this.connection.ping.getPingSuspendTime(),\n                time_since_last_success: this.connection.getTimeSinceLastSuccess()\n            };\n            /* eslint-enable camelcase */\n\n            this.eventEmitter.emit(\n                JitsiConnectionEvents.CONNECTION_FAILED,\n                JitsiConnectionErrors.OTHER_ERROR,\n                undefined,\n                undefined,\n                details);\n        });\n\n        this._initStrophePlugins();\n\n        this.caps = new Caps(this.connection, /* clientNode */ 'https://jitsi.org/jitsi-meet');\n\n        // Initialize features advertised in disco-info\n        this.initFeaturesList();\n\n        // Setup a disconnect on unload as a way to facilitate API consumers. It\n        // sounds like they would want that. A problem for them though may be if\n        // they wanted to utilize the connected connection in an unload handler\n        // of their own. However, it should be fairly easy for them to do that\n        // by registering their unload handler before us.\n        $(window).on(`${this.options.disableBeforeUnloadHandlers ? '' : 'beforeunload '}unload`, ev => {\n            this.disconnect(ev).catch(() => {\n                // ignore errors in order to not brake the unload.\n            });\n        });\n    }\n\n    /**\n     * Initializes the list of feature advertised through the disco-info\n     * mechanism.\n     */\n    initFeaturesList() {\n        // http://xmpp.org/extensions/xep-0167.html#support\n        // http://xmpp.org/extensions/xep-0176.html#support\n        this.caps.addFeature('urn:xmpp:jingle:1');\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:1');\n        this.caps.addFeature('urn:xmpp:jingle:transports:ice-udp:1');\n        this.caps.addFeature('urn:xmpp:jingle:apps:dtls:0');\n        this.caps.addFeature('urn:xmpp:jingle:transports:dtls-sctp:1');\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:audio');\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:video');\n        this.caps.addFeature('http://jitsi.org/json-encoded-sources');\n\n        if (!(this.options.disableRtx || !browser.supportsRTX())) {\n            this.caps.addFeature('urn:ietf:rfc:4588');\n        }\n        if (this.options.enableOpusRed === true && browser.supportsAudioRed()) {\n            this.caps.addFeature('http://jitsi.org/opus-red');\n        }\n\n        if (typeof this.options.enableRemb === 'undefined' || this.options.enableRemb) {\n            this.caps.addFeature('http://jitsi.org/remb');\n        }\n\n        // Disable TCC on Firefox because of a known issue where BWE is halved on every renegotiation.\n        if (!browser.isFirefox() && (typeof this.options.enableTcc === 'undefined' || this.options.enableTcc)) {\n            this.caps.addFeature('http://jitsi.org/tcc');\n        }\n\n        // this is dealt with by SDP O/A so we don't need to announce this\n        // XEP-0293\n        // this.caps.addFeature('urn:xmpp:jingle:apps:rtp:rtcp-fb:0');\n        // XEP-0294\n        // this.caps.addFeature('urn:xmpp:jingle:apps:rtp:rtp-hdrext:0');\n\n        this.caps.addFeature('urn:ietf:rfc:5761'); // rtcp-mux\n        this.caps.addFeature('urn:ietf:rfc:5888'); // a=group, e.g. bundle\n\n        // this.caps.addFeature('urn:ietf:rfc:5576'); // a=ssrc\n\n        // Enable Lipsync ?\n        if (browser.isChromiumBased() && this.options.enableLipSync === true) {\n            logger.info('Lip-sync enabled !');\n            this.caps.addFeature('http://jitsi.org/meet/lipsync');\n        }\n\n        if (this.connection.rayo) {\n            this.caps.addFeature('urn:xmpp:rayo:client:1');\n        }\n\n        if (E2EEncryption.isSupported(this.options)) {\n            this.caps.addFeature(FEATURE_E2EE, false, true);\n        }\n    }\n\n    /**\n     *\n     */\n    getConnection() {\n        return this.connection;\n    }\n\n    /**\n     * Receive connection status changes and handles them.\n     *\n     * @param {Object} credentials\n     * @param {string} credentials.jid - The user's XMPP ID passed to the\n     * connect method. For example, 'user@xmpp.com'.\n     * @param {string} credentials.password - The password passed to the connect\n     * method.\n     * @param {string} status - One of Strophe's connection status strings.\n     * @param {string} [msg] - The connection error message provided by Strophe.\n     */\n    connectionHandler(credentials = {}, status, msg) {\n        const now = window.performance.now();\n        const statusStr = Strophe.getStatusString(status).toLowerCase();\n\n        this.connectionTimes[statusStr] = now;\n        logger.log(\n            `(TIME) Strophe ${statusStr}${msg ? `[${msg}]` : ''}:\\t`,\n            now);\n\n        this.eventEmitter.emit(XMPPEvents.CONNECTION_STATUS_CHANGED, credentials, status, msg);\n        this._maybeSendDeploymentInfoStat();\n        if (status === Strophe.Status.CONNECTED || status === Strophe.Status.ATTACHED) {\n            // once connected or attached we no longer need this handle, drop it if it exist\n            if (this._sysMessageHandler) {\n                this.connection._stropheConn.deleteHandler(this._sysMessageHandler);\n                this._sysMessageHandler = null;\n            }\n\n            this.sendDiscoInfo && this.connection.jingle.getStunAndTurnCredentials();\n\n            logger.info(`My Jabber ID: ${this.connection.jid}`);\n\n            // XmppConnection emits CONNECTED again on reconnect - a good opportunity to clear any \"last error\" flags\n            this._resetState();\n\n            // make sure we will send the info after the features request succeeds or fails\n            this.sendDeploymentInfo = false;\n            this.sendDiscoInfo && this.caps.getFeaturesAndIdentities(this.options.hosts.domain)\n                .then(({ features, identities }) => {\n                    if (!features.has(Strophe.NS.PING)) {\n                        logger.error(`Ping NOT supported by ${\n                            this.options.hosts.domain} - please enable ping in your XMPP server config`);\n                    }\n\n                    this._processDiscoInfoIdentities(\n                        identities, undefined /* when querying we will query for features */);\n                })\n                .catch(error => {\n                    const errmsg = 'Feature discovery error';\n\n                    GlobalOnErrorHandler.callErrorHandler(\n                        new Error(`${errmsg}: ${error}`));\n                    logger.error(errmsg, error);\n\n                    this._maybeSendDeploymentInfoStat(true);\n                });\n\n            // make sure we don't query again\n            this.sendDiscoInfo = false;\n\n            if (credentials.password) {\n                this.authenticatedUser = true;\n            }\n            if (this.connection && this.connection.connected\n                && Strophe.getResourceFromJid(this.connection.jid)) {\n                // .connected is true while connecting?\n                // this.connection.send($pres());\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_ESTABLISHED,\n                    Strophe.getResourceFromJid(this.connection.jid));\n            }\n        } else if (status === Strophe.Status.CONNFAIL) {\n            if (msg === 'x-strophe-bad-non-anon-jid') {\n                this.anonymousConnectionFailed = true;\n            } else {\n                this.connectionFailed = true;\n            }\n            this.lastErrorMsg = msg;\n            if (msg === 'giving-up') {\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_FAILED,\n                    JitsiConnectionErrors.OTHER_ERROR, msg);\n            }\n        } else if (status === Strophe.Status.ERROR) {\n            this.lastErrorMsg = msg;\n        } else if (status === Strophe.Status.DISCONNECTED) {\n            // Stop ping interval\n            this.connection.ping.stopInterval();\n            const wasIntentionalDisconnect = Boolean(this.disconnectInProgress);\n            const errMsg = msg || this.lastErrorMsg;\n\n            if (this.anonymousConnectionFailed) {\n                // prompt user for username and password\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_FAILED,\n                    JitsiConnectionErrors.PASSWORD_REQUIRED);\n            } else if (this.connectionFailed) {\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_FAILED,\n                    JitsiConnectionErrors.OTHER_ERROR,\n                    errMsg,\n                    undefined, /* credentials */\n                    this._getConnectionFailedReasonDetails());\n            } else if (wasIntentionalDisconnect) {\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_DISCONNECTED, errMsg);\n            } else {\n                // XXX if Strophe drops the connection while not being asked to,\n                // it means that most likely some serious error has occurred.\n                // One currently known case is when a BOSH request fails for\n                // more than 4 times. The connection is dropped without\n                // supplying a reason(error message/event) through the API.\n                logger.error('XMPP connection dropped!');\n\n                // XXX if the last request error is within 5xx range it means it\n                // was a server failure\n                const lastErrorStatus = Strophe.getLastErrorStatus();\n\n                if (lastErrorStatus >= 500 && lastErrorStatus < 600) {\n                    this.eventEmitter.emit(\n                        JitsiConnectionEvents.CONNECTION_FAILED,\n                        JitsiConnectionErrors.SERVER_ERROR,\n                        errMsg || 'server-error',\n                        /* credentials */ undefined,\n                        this._getConnectionFailedReasonDetails());\n                } else {\n                    this.eventEmitter.emit(\n                        JitsiConnectionEvents.CONNECTION_FAILED,\n                        JitsiConnectionErrors.CONNECTION_DROPPED_ERROR,\n                        errMsg || 'connection-dropped-error',\n                        /* credentials */ undefined,\n                        this._getConnectionFailedReasonDetails());\n                }\n            }\n        } else if (status === Strophe.Status.AUTHFAIL) {\n            const lastFailedRawMessage = this.getConnection().getLastFailedMessage();\n\n            // wrong password or username, prompt user\n            this.eventEmitter.emit(\n                JitsiConnectionEvents.CONNECTION_FAILED,\n                JitsiConnectionErrors.PASSWORD_REQUIRED,\n                msg || this._parseConnectionFailedMessage(lastFailedRawMessage),\n                credentials);\n        }\n    }\n\n    /**\n     * Process received identities.\n     * @param {Set<String>} identities The identities to process.\n     * @param {Set<String>} features The features to process, optional. If missing lobby component will be queried\n     * for more features.\n     * @private\n     */\n    _processDiscoInfoIdentities(identities, features) {\n        // check for speakerstats\n        identities.forEach(identity => {\n            if (identity.type === 'av_moderation') {\n                this.avModerationComponentAddress = identity.name;\n            }\n\n            if (identity.type === 'speakerstats') {\n                this.speakerStatsComponentAddress = identity.name;\n            }\n\n            if (identity.type === 'conference_duration') {\n                this.conferenceDurationComponentAddress = identity.name;\n            }\n\n            if (identity.type === 'lobbyrooms') {\n                this.lobbySupported = true;\n                const processLobbyFeatures = f => {\n                    f.forEach(fr => {\n                        if (fr.endsWith('#displayname_required')) {\n                            this.eventEmitter.emit(JitsiConnectionEvents.DISPLAY_NAME_REQUIRED);\n                        }\n                    });\n                };\n\n                if (features) {\n                    processLobbyFeatures(features);\n                } else {\n                    identity.name && this.caps.getFeaturesAndIdentities(identity.name, identity.type)\n                        .then(({ features: f }) => processLobbyFeatures(f))\n                        .catch(e => logger.warn('Error getting features from lobby.', e && e.message));\n                }\n            }\n\n            if (identity.type === 'shard') {\n                this.options.deploymentInfo.shard = this.connection.shard = identity.name;\n            }\n\n            if (identity.type === 'region') {\n                this.options.deploymentInfo.region = this.connection.region = identity.name;\n            }\n\n            if (identity.type === 'breakout_rooms') {\n                this.breakoutRoomsComponentAddress = identity.name;\n            }\n        });\n\n        this._maybeSendDeploymentInfoStat(true);\n\n        if (this.avModerationComponentAddress\n            || this.speakerStatsComponentAddress\n            || this.conferenceDurationComponentAddress\n            || this.breakoutRoomsComponentAddress) {\n            this.connection.addHandler(this._onPrivateMessage.bind(this), null, 'message', null, null);\n        }\n    }\n\n    /**\n    * Parses a raw failure xmpp xml message received on auth failed.\n    *\n    * @param {string} msg - The raw failure message from xmpp.\n    * @returns {string|null} - The parsed message from the raw xmpp message.\n    */\n    _parseConnectionFailedMessage(msg) {\n        if (!msg) {\n            return null;\n        }\n\n        const matches = FAILURE_REGEX.exec(msg);\n\n        return matches ? matches[1] : null;\n    }\n\n    /**\n     *\n     * @param jid\n     * @param password\n     */\n    _connect(jid, password) {\n        // connection.connect() starts the connection process.\n        //\n        // As the connection process proceeds, the user supplied callback will\n        // be triggered multiple times with status updates. The callback should\n        // take two arguments - the status code and the error condition.\n        //\n        // The status code will be one of the values in the Strophe.Status\n        // constants. The error condition will be one of the conditions defined\n        // in RFC 3920 or the condition ‘strophe-parsererror’.\n        //\n        // The Parameters wait, hold and route are optional and only relevant\n        // for BOSH connections. Please see XEP 124 for a more detailed\n        // explanation of the optional parameters.\n        //\n        // Connection status constants for use by the connection handler\n        // callback.\n        //\n        //  Status.ERROR - An error has occurred (websockets specific)\n        //  Status.CONNECTING - The connection is currently being made\n        //  Status.CONNFAIL - The connection attempt failed\n        //  Status.AUTHENTICATING - The connection is authenticating\n        //  Status.AUTHFAIL - The authentication attempt failed\n        //  Status.CONNECTED - The connection has succeeded\n        //  Status.DISCONNECTED - The connection has been terminated\n        //  Status.DISCONNECTING - The connection is currently being terminated\n        //  Status.ATTACHED - The connection has been attached\n\n        this._resetState();\n\n        // we want to send this only on the initial connect\n        this.sendDiscoInfo = true;\n        this.sendDeploymentInfo = true;\n\n        if (this.connection._stropheConn && this.connection._stropheConn._addSysHandler) {\n            this._sysMessageHandler = this.connection._stropheConn._addSysHandler(\n                this._onSystemMessage.bind(this),\n                null,\n                'message'\n            );\n        } else {\n            logger.warn('Cannot attach strophe system handler, jiconop cannot operate');\n        }\n\n        this.connection.connect(\n            jid,\n            password,\n            this.connectionHandler.bind(this, {\n                jid,\n                password\n            }));\n    }\n\n    /**\n     * Receives system messages during the connect/login process and checks for services or\n     * @param msg The received message.\n     * @returns {void}\n     * @private\n     */\n    _onSystemMessage(msg) {\n        // proceed only if the message has any of the expected information\n        if ($(msg).find('>services').length === 0 && $(msg).find('>query').length === 0) {\n            return;\n        }\n\n        this.sendDiscoInfo = false;\n\n        const foundIceServers = this.connection.jingle.onReceiveStunAndTurnCredentials(msg);\n\n        const { features, identities } = parseDiscoInfo(msg);\n\n        this._processDiscoInfoIdentities(identities, features);\n\n        if (foundIceServers || identities.size > 0 || features.size > 0) {\n            this.connection._stropheConn.deleteHandler(this._sysMessageHandler);\n            this._sysMessageHandler = null;\n        }\n    }\n\n    /**\n     * Attach to existing connection. Can be used for optimizations. For\n     * example: if the connection is created on the server we can attach to it\n     * and start using it.\n     *\n     * @param options {object} connecting options - rid, sid, jid and password.\n     */\n    attach(options) {\n        this._resetState();\n\n        // we want to send this only on the initial connect\n        this.sendDiscoInfo = true;\n\n        const now = this.connectionTimes.attaching = window.performance.now();\n\n        logger.log('(TIME) Strophe Attaching:\\t', now);\n        this.connection.attach(options.jid, options.sid,\n            parseInt(options.rid, 10) + 1,\n            this.connectionHandler.bind(this, {\n                jid: options.jid,\n                password: options.password\n            }));\n    }\n\n    /**\n     * Resets any state/flag before starting a new connection.\n     * @private\n     */\n    _resetState() {\n        this.anonymousConnectionFailed = false;\n        this.connectionFailed = false;\n        this.lastErrorMsg = undefined;\n        this.disconnectInProgress = undefined;\n    }\n\n    /**\n     *\n     * @param jid\n     * @param password\n     */\n    connect(jid, password) {\n        if (!jid) {\n            const { anonymousdomain, domain } = this.options.hosts;\n            let configDomain = anonymousdomain || domain;\n\n            // Force authenticated domain if room is appended with '?login=true'\n            // or if we're joining with the token\n\n            // FIXME Do not rely on window.location because (1) React Native\n            // does not have a window.location by default and (2) here we cannot\n            // know for sure that query/search has not be stripped from\n            // window.location by the time the following executes.\n            const { location } = window;\n\n            if (anonymousdomain) {\n                const search = location && location.search;\n\n                if ((search && search.indexOf('login=true') !== -1)\n                        || this.token) {\n                    configDomain = domain;\n                }\n            }\n\n            // eslint-disable-next-line no-param-reassign\n            jid = configDomain || (location && location.hostname);\n        }\n\n        return this._connect(jid, password);\n    }\n\n    /**\n     * Joins or creates a muc with the provided jid, created from the passed\n     * in room name and muc host and onCreateResource result.\n     *\n     * @param {string} roomName - The name of the muc to join.\n     * @param {Object} options - Configuration for how to join the muc.\n     * @param {Function} [onCreateResource] - Callback to invoke when a resource\n     * is to be added to the jid.\n     * @returns {Promise} Resolves with an instance of a strophe muc.\n     */\n    createRoom(roomName, options, onCreateResource) {\n        // Support passing the domain in a String object as part of the room name.\n        const domain = roomName.domain || options.customDomain;\n\n        // There are cases (when using subdomain) where muc can hold an uppercase part\n        let roomjid = `${this.getRoomJid(roomName, domain)}/`;\n        const mucNickname = onCreateResource\n            ? onCreateResource(this.connection.jid, this.authenticatedUser)\n            : RandomUtil.randomHexString(8).toLowerCase();\n\n        logger.info(`JID ${this.connection.jid} using MUC nickname ${mucNickname}`);\n        roomjid += mucNickname;\n\n        return this.connection.emuc.createRoom(roomjid, null, options);\n    }\n\n    /**\n     * Returns the room JID based on the passed room name and domain.\n     *\n     * @param {string} roomName - The room name.\n     * @param {string} domain - The domain.\n     * @returns {string} - The room JID.\n     */\n    getRoomJid(roomName, domain) {\n        return `${roomName}@${domain ? domain : this.options.hosts.muc.toLowerCase()}`;\n    }\n\n    /**\n     * Check if a room with the passed JID is already created.\n     *\n     * @param {string} roomJid - The JID of the room.\n     * @returns {boolean}\n     */\n    isRoomCreated(roomName, domain) {\n        return this.connection.emuc.isRoomCreated(this.getRoomJid(roomName, domain));\n    }\n\n    /**\n     * Returns the jid of the participant associated with the Strophe connection.\n     *\n     * @returns {string} The jid of the participant.\n     */\n    getJid() {\n        return this.connection.jid;\n    }\n\n    /**\n     * Returns the logs from strophe.jingle.\n     * @returns {Object}\n     */\n    getJingleLog() {\n        const jingle = this.connection.jingle;\n\n\n        return jingle ? jingle.getLog() : {};\n    }\n\n    /**\n     * Returns the logs from strophe.\n     */\n    getXmppLog() {\n        return (this.connection.logger || {}).log || null;\n    }\n\n    /**\n     *\n     */\n    dial(...args) {\n        this.connection.rayo.dial(...args);\n    }\n\n    /**\n     * Pings the server.\n     * @param timeout how many ms before a timeout should occur.\n     * @returns {Promise} resolved on ping success and reject on an error or\n     * a timeout.\n     */\n    ping(timeout) {\n        return new Promise((resolve, reject) => {\n            this.connection.ping.ping(this.connection.pingDomain, resolve, reject, timeout);\n        });\n    }\n\n    /**\n     *\n     */\n    getSessions() {\n        return this.connection.jingle.sessions;\n    }\n\n    /**\n     * Disconnects this from the XMPP server (if this is connected).\n     *\n     * @param {Object} ev - Optionally, the event which triggered the necessity to\n     * disconnect from the XMPP server (e.g. beforeunload, unload).\n     * @returns {Promise} - Resolves when the disconnect process is finished or rejects with an error.\n     */\n    disconnect(ev) {\n        if (this.disconnectInProgress) {\n            return this.disconnectInProgress;\n        } else if (!this.connection) {\n            return Promise.resolve();\n        }\n\n        this.disconnectInProgress = new Promise(resolve => {\n            const disconnectListener = (credentials, status) => {\n                if (status === Strophe.Status.DISCONNECTED) {\n                    resolve();\n                    this.eventEmitter.removeListener(XMPPEvents.CONNECTION_STATUS_CHANGED, disconnectListener);\n                }\n            };\n\n            this.eventEmitter.on(XMPPEvents.CONNECTION_STATUS_CHANGED, disconnectListener);\n        });\n\n        this._cleanupXmppConnection(ev);\n\n        return this.disconnectInProgress;\n    }\n\n    /**\n     * The method is supposed to gracefully close the XMPP connection and the main goal is to make sure that the current\n     * participant will be removed from the conference XMPP MUC, so that it doesn't leave a \"ghost\" participant behind.\n     *\n     * @param {Object} ev - Optionally, the event which triggered the necessity to disconnect from the XMPP server\n     * (e.g. beforeunload, unload).\n     * @private\n     * @returns {void}\n     */\n    _cleanupXmppConnection(ev) {\n        // XXX Strophe is asynchronously sending by default. Unfortunately, that means that there may not be enough time\n        // to send an unavailable presence or disconnect at all. Switching Strophe to synchronous sending is not much of\n        // an option because it may lead to a noticeable delay in navigating away from the current location. As\n        // a compromise, we will try to increase the chances of sending an unavailable presence and/or disconnecting\n        // within the short time span that we have upon unloading by invoking flush() on the connection. We flush() once\n        // before disconnect() in order to attempt to have its unavailable presence at the top of the send queue. We\n        // flush() once more after disconnect() in order to attempt to have its unavailable presence sent as soon as\n        // possible.\n        !this.connection.isUsingWebSocket && this.connection.flush();\n\n        if (!this.connection.isUsingWebSocket && ev !== null && typeof ev !== 'undefined') {\n            const evType = ev.type;\n\n            if (evType === 'beforeunload' || evType === 'unload') {\n                // XXX Whatever we said above, synchronous sending is the best (known) way to properly disconnect from\n                // the XMPP server. Consequently, it may be fine to have the source code and comment it in or out\n                // depending on whether we want to run with it for some time.\n                this.connection.options.sync = true;\n\n                // This is needed in some browsers where sync xhr sending is disabled by default on unload.\n                if (this.connection.sendUnavailableBeacon()) {\n\n                    return;\n                }\n            }\n        }\n\n        this.connection.disconnect();\n\n        if (this.connection.options.sync !== true) {\n            this.connection.flush();\n        }\n    }\n\n    /**\n     *\n     */\n    _initStrophePlugins() {\n        const iceConfig = {\n            jvb: { iceServers: [ ] },\n            p2p: { iceServers: [ ] }\n        };\n\n        const p2pStunServers = (this.options.p2p\n            && this.options.p2p.stunServers) || DEFAULT_STUN_SERVERS;\n\n        if (Array.isArray(p2pStunServers)) {\n            logger.info('P2P STUN servers: ', p2pStunServers);\n            iceConfig.p2p.iceServers = p2pStunServers;\n        }\n\n        if (this.options.p2p && this.options.p2p.iceTransportPolicy) {\n            logger.info('P2P ICE transport policy: ',\n                this.options.p2p.iceTransportPolicy);\n\n            iceConfig.p2p.iceTransportPolicy\n                = this.options.p2p.iceTransportPolicy;\n        }\n\n        this.connection.addConnectionPlugin('emuc', new MucConnectionPlugin(this));\n        this.connection.addConnectionPlugin('jingle', new JingleConnectionPlugin(this, this.eventEmitter, iceConfig));\n        this.connection.addConnectionPlugin('rayo', new RayoConnectionPlugin());\n    }\n\n    /**\n     * Returns details about connection failure. Shard change or is it after\n     * suspend.\n     * @returns {object} contains details about a connection failure.\n     * @private\n     */\n    _getConnectionFailedReasonDetails() {\n        const details = {};\n\n        // check for moving between shard if information is available\n        if (this.options.deploymentInfo\n            && this.options.deploymentInfo.shard\n            && this.connection.lastResponseHeaders) {\n\n            // split headers by line\n            const headersArr = this.connection.lastResponseHeaders\n                .trim().split(/[\\r\\n]+/);\n            const headers = {};\n\n            headersArr.forEach(line => {\n                const parts = line.split(': ');\n                const header = parts.shift();\n                const value = parts.join(': ');\n\n                headers[header] = value;\n            });\n\n            /* eslint-disable camelcase */\n            details.shard_changed\n                = this.options.deploymentInfo.shard\n                    !== headers['x-jitsi-shard'];\n            /* eslint-enable camelcase */\n        }\n\n        /* eslint-disable camelcase */\n        // check for possible suspend\n        details.suspend_time = this.connection.ping.getPingSuspendTime();\n        details.time_since_last_success = this.connection.getTimeSinceLastSuccess();\n        /* eslint-enable camelcase */\n\n        return details;\n    }\n\n    /**\n     * Notifies speaker stats component if available that we are the new\n     * dominant speaker in the conference.\n     * @param {String} roomJid - The room jid where the speaker event occurred.\n     */\n    sendDominantSpeakerEvent(roomJid) {\n        // no speaker stats component advertised\n        if (!this.speakerStatsComponentAddress || !roomJid) {\n            return;\n        }\n\n        const msg = $msg({ to: this.speakerStatsComponentAddress });\n\n        msg.c('speakerstats', {\n            xmlns: 'http://jitsi.org/jitmeet',\n            room: roomJid })\n            .up();\n\n        this.connection.send(msg);\n    }\n\n    /**\n     * Sends facial expression to speaker stats component.\n     * @param {String} roomJid - The room jid where the speaker event occurred.\n     * @param {Object} payload - The expression to be sent to the speaker stats.\n     */\n    sendFacialExpressionEvent(roomJid, payload) {\n        // no speaker stats component advertised\n        if (!this.speakerStatsComponentAddress || !roomJid) {\n            return;\n        }\n\n        const msg = $msg({ to: this.speakerStatsComponentAddress });\n\n        msg.c('facialExpression', {\n            xmlns: 'http://jitsi.org/jitmeet',\n            room: roomJid,\n            expression: payload.facialExpression,\n            duration: payload.duration\n        }).up();\n\n        this.connection.send(msg);\n    }\n\n    /**\n     * Check if the given argument is a valid JSON ENDPOINT_MESSAGE string by\n     * parsing it and checking if it has a field called 'type'.\n     *\n     * @param {string} jsonString check if this string is a valid json string\n     * and contains the special structure.\n     * @returns {boolean, object} if given object is a valid JSON string, return\n     * the json object. Otherwise, returns false.\n     */\n    tryParseJSONAndVerify(jsonString) {\n        // ignore empty strings, like message errors\n        if (!jsonString) {\n            return false;\n        }\n\n        try {\n            const json = JSON.parse(jsonString);\n\n            // Handle non-exception-throwing cases:\n            // Neither JSON.parse(false) or JSON.parse(1234) throw errors,\n            // hence the type-checking,\n            // but... JSON.parse(null) returns null, and\n            // typeof null === \"object\",\n            // so we must check for that, too.\n            // Thankfully, null is falsey, so this suffices:\n            if (json && typeof json === 'object') {\n                const type = json[JITSI_MEET_MUC_TYPE];\n\n                if (typeof type !== 'undefined') {\n                    return json;\n                }\n\n                logger.debug('parsing valid json but does not have correct '\n                    + 'structure', 'topic: ', type);\n            }\n        } catch (e) {\n            logger.error(`Error parsing json ${jsonString}`, e);\n\n            return false;\n        }\n\n        return false;\n    }\n\n    /**\n     * A private message is received, message that is not addressed to the muc.\n     * We expect private message coming from plugins component if it is\n     * enabled and running.\n     *\n     * @param {string} msg - The message.\n     */\n    _onPrivateMessage(msg) {\n        const from = msg.getAttribute('from');\n\n        if (!(from === this.speakerStatsComponentAddress\n            || from === this.conferenceDurationComponentAddress\n            || from === this.avModerationComponentAddress\n            || from === this.breakoutRoomsComponentAddress)) {\n            return true;\n        }\n\n        const jsonMessage = $(msg).find('>json-message')\n            .text();\n        const parsedJson = this.tryParseJSONAndVerify(jsonMessage);\n\n        if (!parsedJson) {\n            return true;\n        }\n\n        if (parsedJson[JITSI_MEET_MUC_TYPE] === 'speakerstats' && parsedJson.users) {\n            this.eventEmitter.emit(XMPPEvents.SPEAKER_STATS_RECEIVED, parsedJson.users);\n        } else if (parsedJson[JITSI_MEET_MUC_TYPE] === 'conference_duration' && parsedJson.created_timestamp) {\n            this.eventEmitter.emit(XMPPEvents.CONFERENCE_TIMESTAMP_RECEIVED, parsedJson.created_timestamp);\n        } else if (parsedJson[JITSI_MEET_MUC_TYPE] === 'av_moderation') {\n            this.eventEmitter.emit(XMPPEvents.AV_MODERATION_RECEIVED, parsedJson);\n        } else if (parsedJson[JITSI_MEET_MUC_TYPE] === 'breakout_rooms') {\n            this.eventEmitter.emit(XMPPEvents.BREAKOUT_ROOMS_EVENT, parsedJson);\n        }\n\n        return true;\n    }\n\n    /**\n     * Sends deployment info to stats if not sent already.\n     * We want to try sending it on failure to connect\n     * or when we get a sys message(from jiconop2)\n     * or after success or failure of disco-info\n     * @param force Whether to force sending without checking anything.\n     * @private\n     */\n    _maybeSendDeploymentInfoStat(force) {\n        const acceptedStatuses = [\n            Strophe.Status.ERROR,\n            Strophe.Status.CONNFAIL,\n            Strophe.Status.AUTHFAIL,\n            Strophe.Status.DISCONNECTED,\n            Strophe.Status.CONNTIMEOUT\n        ];\n\n        if (!force && !(acceptedStatuses.includes(this.connection.status) && this.sendDeploymentInfo)) {\n            return;\n        }\n\n        // Log deployment-specific information, if available. Defined outside\n        // the application by individual deployments\n        const aprops = this.options.deploymentInfo;\n\n        if (aprops && Object.keys(aprops).length > 0) {\n            const logObject = {};\n\n            logObject.id = 'deployment_info';\n            for (const attr in aprops) {\n                if (aprops.hasOwnProperty(attr)) {\n                    logObject[attr] = aprops[attr];\n                }\n            }\n\n            Statistics.sendLog(JSON.stringify(logObject));\n        }\n\n        this.sendDeploymentInfo = false;\n    }\n}\n","import {\n    CONNECTION_DISCONNECTED,\n    CONNECTION_ESTABLISHED,\n    CONNECTION_FAILED\n} from './JitsiConnectionEvents';\nimport XMPP from './modules/xmpp/xmpp';\n\n/**\n * @typedef {Object} UpgradeRoleError\n *\n * @property {JitsiConnectionErrors} [connectionError] - One of\n * {@link JitsiConnectionErrors} which occurred when trying to connect to the\n * XMPP server.\n * @property {String} [authenticationError] - One of XMPP error conditions\n * returned by Jicofo on authentication attempt. See\n * {@link https://xmpp.org/rfcs/rfc3920.html#streams-error}.\n * @property {String} [message] - More details about the error.\n * @property {Object} [credentials] - The credentials that failed the\n * authentication.\n * @property {String} [credentials.jid] - The XMPP ID part of the credentials\n * that failed the authentication.\n * @property {string} [credentials.password] - The password part of the\n * credentials that failed the authentication.\n *\n * NOTE If neither one of the errors is present, then the operation has been\n * canceled.\n */\n\n/* eslint-disable no-invalid-this */\n\n/**\n * Connects to the XMPP server using the specified credentials and contacts\n * Jicofo in order to obtain a session ID (which is then stored in the local\n * storage). The user's role of the parent conference will be upgraded to\n * moderator (by Jicofo). It's also used to join the conference when starting\n * from anonymous domain and only authenticated users are allowed to create new\n * rooms.\n *\n * @param {Object} options\n * @param {string} options.id - XMPP user's ID to log in. For example,\n * user@xmpp-server.com.\n * @param {string} options.password - XMPP user's password to log in with.\n * @param {string} [options.roomPassword] - The password to join the MUC with.\n * @param {Function} [options.onLoginSuccessful] - Callback called when logging\n * into the XMPP server was successful. The next step will be to obtain a new\n * session ID from Jicofo and join the MUC using it which will effectively\n * upgrade the user's role to moderator.\n * @returns {Object} A <tt>thenable</tt> which (1) settles when the process of\n * authenticating and upgrading the role of the specified XMPP user finishes and\n * (2) has a <tt>cancel</tt> method that allows the caller to interrupt the\n * process. If the process finishes successfully, the session ID has been stored\n * in the settings and the <tt>thenable</tt> is resolved. If the process\n * finishes with failure, the <tt>thenable</tt> is rejected with reason of type\n * {@link UpgradeRoleError} which will have either <tt>connectionError</tt> or\n * <tt>authenticationError</tt> property set depending on which of the steps has\n * failed. If <tt>cancel</tt> is called before the process finishes, then the\n * thenable will be rejected with an empty object (i.e. no error property will\n * be set on the rejection reason).\n */\nexport default function authenticateAndUpgradeRole({\n    // 1. Log the specified XMPP user in.\n    id,\n    password,\n    onCreateResource,\n\n    // 2. Let the API client/consumer know as soon as the XMPP user has been\n    //    successfully logged in.\n    onLoginSuccessful,\n\n    // 3. Join the MUC.\n    roomPassword\n}) {\n    let canceled = false;\n    let rejectPromise;\n    let xmpp = new XMPP(this.connection.options);\n\n    const process = new Promise((resolve, reject) => {\n        // The process is represented by a Thenable with a cancel method. The\n        // Thenable is implemented using Promise and the cancel using the\n        // Promise's reject function.\n        rejectPromise = reject;\n\n\n        xmpp.addListener(\n            CONNECTION_DISCONNECTED,\n            () => {\n                xmpp = undefined;\n            });\n        xmpp.addListener(\n            CONNECTION_ESTABLISHED,\n            () => {\n                if (canceled) {\n                    return;\n                }\n\n                // Let the caller know that the XMPP login was successful.\n                onLoginSuccessful && onLoginSuccessful();\n\n                // Now authenticate with Jicofo and get a new session ID.\n                const room = xmpp.createRoom(\n                    this.options.name,\n                    this.options.config,\n                    onCreateResource\n                );\n\n                room.moderator.authenticate()\n                    .then(() => {\n                        xmpp && xmpp.disconnect();\n\n                        if (canceled) {\n                            return;\n                        }\n\n                        // At this point we should have the new session ID\n                        // stored in the settings. Jicofo will allow to join the\n                        // room.\n                        this.join(roomPassword);\n\n                        resolve();\n                    })\n                    .catch(({ error, message }) => {\n                        xmpp.disconnect();\n\n                        reject({\n                            authenticationError: error,\n                            message\n                        });\n                    });\n            });\n        xmpp.addListener(\n            CONNECTION_FAILED,\n            (connectionError, message, credentials) => {\n                reject({\n                    connectionError,\n                    credentials,\n                    message\n                });\n                xmpp = undefined;\n            });\n\n        canceled || xmpp.connect(id, password);\n    });\n\n    /**\n     * Cancels the process, if it's in progress, of authenticating and upgrading\n     * the role of the local participant/user.\n     *\n     * @public\n     * @returns {void}\n     */\n    process.cancel = () => {\n        canceled = true;\n        rejectPromise({});\n        xmpp && xmpp.disconnect();\n    };\n\n    return process;\n}\n\n/* eslint-enable no-invalid-this */\n","\nimport { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport CodecMimeType from '../../service/RTC/CodecMimeType';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport browser from '../browser';\n\nconst logger = getLogger(__filename);\n\n/**\n * This class handles the codec selection mechanism for the conference based on the config.js settings.\n * The preferred codec is selected based on the settings and the list of codecs supported by the browser.\n * The preferred codec is published in presence which is then used by the other endpoints in the\n * conference to pick a supported codec at join time and when the call transitions between p2p and jvb\n * connections.\n */\nexport class CodecSelection {\n    /**\n     * Creates a new instance for a given conference.\n     *\n     * @param {JitsiConference} conference the conference instance\n     * @param {*} options\n     * @param {string} options.disabledCodec the codec that needs to be disabled.\n     * @param {boolean} options.enforcePreferredCodec whether codec preference has to be\n     * enforced even when an endpoints that doesn't support the preferred codec joins the call.\n     * Falling back to the standard codec will be skipped when this option is true, endpoints\n     * that do not support the preferred codec may not be able to encode/decode video when this happens.\n     * @param {string} options.jvbCodec the codec that is preferred on jvb connection.\n     * @param {string} options.p2pCodec the codec that is preferred on p2p connection.\n     */\n    constructor(conference, options) {\n        this.conference = conference;\n        this.options = options;\n\n        // VP8 cannot be disabled and it will be the default codec when no preference is set.\n        this.disabledCodec = options.disabledCodec === CodecMimeType.VP8\n            ? undefined\n            : this._getCodecMimeType(options.disabledCodec);\n\n        // Check if the codec values passed are valid.\n        const jvbCodec = this._getCodecMimeType(options.jvbCodec);\n        const p2pCodec = this._getCodecMimeType(options.p2pCodec);\n\n        this.jvbPreferredCodec = jvbCodec && this._isCodecSupported(jvbCodec) ? jvbCodec : CodecMimeType.VP8;\n        this.p2pPreferredCodec = p2pCodec && this._isCodecSupported(p2pCodec) ? p2pCodec : CodecMimeType.VP8;\n        logger.debug(`Codec preferences for the conference are JVB: ${this.jvbPreferredCodec},\n            P2P: ${this.p2pPreferredCodec}`);\n\n        if (this.jvbPreferredCodec === CodecMimeType.VP9 && !browser.supportsVP9()) {\n            this.jvbPreferredCodec = CodecMimeType.VP8;\n        }\n\n        this.conference.on(\n            JitsiConferenceEvents.USER_JOINED,\n            () => this._selectPreferredCodec());\n        this.conference.on(\n            JitsiConferenceEvents.USER_LEFT,\n            () => this._selectPreferredCodec());\n        this.conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n            session => this._onMediaSessionStarted(session));\n    }\n\n    /**\n     * Checks if a given string is a valid video codec mime type.\n     *\n     * @param {string} codec the codec string that needs to be validated.\n     * @returns {CodecMimeType|null} mime type if valid, null otherwise.\n     * @private\n     */\n    _getCodecMimeType(codec) {\n        if (typeof codec === 'string') {\n            return Object.values(CodecMimeType).find(value => value === codec.toLowerCase());\n        }\n\n        return null;\n    }\n\n    /**\n     * Checks if the given codec is supported by the browser.\n     *\n     * @param {CodecMimeType} preferredCodec codec to be checked.\n     * @returns {boolean} true if the given codec is supported, false otherwise.\n     * @private\n     */\n    _isCodecSupported(preferredCodec) {\n        // Skip the check on FF and RN because they do not support the getCapabilities API.\n        // It is safe to assume both of them support all the codecs supported by Chrome.\n        if (browser.isFirefox() || browser.isReactNative()) {\n            return true;\n        }\n\n        return window.RTCRtpReceiver\n            && window.RTCRtpReceiver.getCapabilities\n            && window.RTCRtpReceiver.getCapabilities('video').codecs\n            .some(codec => codec.mimeType.toLowerCase() === `video/${preferredCodec}`);\n    }\n\n    /**\n     * Handles the {@link JitsiConferenceEvents._MEDIA_SESSION_STARTED} event. Codecs need to be\n     * configured on the media session that is newly created.\n     *\n     * @param {JingleSessionPC} mediaSession media session that started.\n     * @returns {void}\n     * @private\n     */\n    _onMediaSessionStarted(mediaSession) {\n        const preferredCodec = mediaSession.isP2P ? this.p2pPreferredCodec : this.jvbPreferredCodec;\n        const disabledCodec = this.disabledCodec && this._isCodecSupported(this.disabledCodec)\n            ? this.disabledCodec\n            : null;\n\n        this._selectPreferredCodec(mediaSession, preferredCodec, disabledCodec);\n    }\n\n    /**\n     * Sets the codec on the media session based on the preferred codec setting and the supported codecs\n     * published by the remote participants in their presence.\n     *\n     * @param {JingleSessionPC} mediaSession session for which the codec selection has to be made.\n     * @param {CodecMimeType} preferredCodec preferred codec.\n     * @param {CodecMimeType} disabledCodec codec that needs to be disabled.\n     */\n    _selectPreferredCodec(mediaSession = null, preferredCodec = null, disabledCodec = null) {\n        const session = mediaSession ? mediaSession : this.conference.jvbJingleSession;\n        const currentCodec = preferredCodec ? preferredCodec : this.jvbPreferredCodec;\n        let selectedCodec = currentCodec;\n\n        if (session && !session.isP2P && !this.options.enforcePreferredCodec) {\n            const remoteParticipants = this.conference.getParticipants().map(participant => participant.getId());\n\n            for (const remote of remoteParticipants) {\n                const peerMediaInfo = session._signalingLayer.getPeerMediaInfo(remote, MediaType.VIDEO);\n                const peerCodec = peerMediaInfo?.codecType;\n\n                if (peerCodec\n                    && peerCodec !== currentCodec\n                    && (peerCodec !== CodecMimeType.VP9 || browser.supportsVP9())) {\n                    selectedCodec = peerCodec;\n                }\n            }\n        }\n        session && session.setVideoCodecs(selectedCodec, disabledCodec);\n    }\n\n    /**\n     * Returns the preferred codec for the conference. The preferred codec for the JVB media session\n     * is the one that gets published in presence and a comparision is made whenever a participant joins\n     * or leaves the call.\n     *\n     * @returns {CodecMimeType} preferred codec.\n     */\n    getPreferredCodec() {\n        return this.jvbPreferredCodec;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport { createBridgeChannelClosedEvent } from '../../service/statistics/AnalyticsEvents';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nconst logger = getLogger(__filename);\n\n/**\n * Handles a WebRTC RTCPeerConnection or a WebSocket instance to communicate\n * with the videobridge.\n */\nexport default class BridgeChannel {\n    /**\n     * Binds \"ondatachannel\" event listener on the given RTCPeerConnection\n     * instance, or creates a WebSocket connection with the videobridge.\n     * At least one of both, peerconnection or wsUrl parameters, must be\n     * given.\n     * @param {RTCPeerConnection} [peerconnection] WebRTC peer connection\n     * instance.\n     * @param {string} [wsUrl] WebSocket URL.\n     * @param {EventEmitter} emitter the EventEmitter instance to use for event emission.\n     */\n    constructor(peerconnection, wsUrl, emitter) {\n        if (!peerconnection && !wsUrl) {\n            throw new TypeError('At least peerconnection or wsUrl must be given');\n        } else if (peerconnection && wsUrl) {\n            throw new TypeError('Just one of peerconnection or wsUrl must be given');\n        }\n\n        if (peerconnection) {\n            logger.debug('constructor() with peerconnection');\n        } else {\n            logger.debug(`constructor() with wsUrl:\"${wsUrl}\"`);\n        }\n\n        // The underlying WebRTC RTCDataChannel or WebSocket instance.\n        // @type {RTCDataChannel|WebSocket}\n        this._channel = null;\n\n        // @type {EventEmitter}\n        this._eventEmitter = emitter;\n\n        // Whether a RTCDataChannel or WebSocket is internally used.\n        // @type {string} \"datachannel\" / \"websocket\"\n        this._mode = null;\n\n        // Indicates whether the connection retries are enabled or not.\n        this._areRetriesEnabled = false;\n\n        // Indicates whether the connection was closed from the client or not.\n        this._closedFromClient = false;\n\n        // If a RTCPeerConnection is given, listen for new RTCDataChannel\n        // event.\n        if (peerconnection) {\n            const datachannel\n                = peerconnection.createDataChannel(\n                    'JVB data channel', {\n                        protocol: 'http://jitsi.org/protocols/colibri'\n                    });\n\n            // Handle the RTCDataChannel.\n            this._handleChannel(datachannel);\n            this._mode = 'datachannel';\n\n        // Otherwise create a WebSocket connection.\n        } else if (wsUrl) {\n            this._areRetriesEnabled = true;\n            this._wsUrl = wsUrl;\n            this._initWebSocket();\n        }\n    }\n\n    /**\n     * Initializes the web socket channel.\n     *\n     * @returns {void}\n     */\n    _initWebSocket() {\n        // Create a WebSocket instance.\n        const ws = new WebSocket(this._wsUrl);\n\n        // Handle the WebSocket.\n        this._handleChannel(ws);\n        this._mode = 'websocket';\n    }\n\n    /**\n     * Starts the websocket connection retries.\n     *\n     * @returns {void}\n     */\n    _startConnectionRetries() {\n        let timeoutS = 1;\n\n        const reload = () => {\n            if (this.isOpen()) {\n                return;\n            }\n            this._initWebSocket(this._wsUrl);\n            timeoutS = Math.min(timeoutS * 2, 60);\n            this._retryTimeout = setTimeout(reload, timeoutS * 1000);\n        };\n\n        this._retryTimeout = setTimeout(reload, timeoutS * 1000);\n    }\n\n    /**\n     * Stops the websocket connection retries.\n     *\n     * @returns {void}\n     */\n    _stopConnectionRetries() {\n        if (this._retryTimeout) {\n            clearTimeout(this._retryTimeout);\n            this._retryTimeout = undefined;\n        }\n    }\n\n    /**\n     * Retries to establish the websocket connection after the connection was closed by the server.\n     *\n     * @param {CloseEvent} closeEvent - The close event that triggered the retries.\n     * @returns {void}\n     */\n    _retryWebSocketConnection(closeEvent) {\n        if (!this._areRetriesEnabled) {\n            return;\n        }\n        const { code, reason } = closeEvent;\n\n        Statistics.sendAnalytics(createBridgeChannelClosedEvent(code, reason));\n        this._areRetriesEnabled = false;\n        this._eventEmitter.once(RTCEvents.DATA_CHANNEL_OPEN, () => {\n            this._stopConnectionRetries();\n            this._areRetriesEnabled = true;\n        });\n        this._startConnectionRetries();\n    }\n\n    /**\n     * The channel mode.\n     * @return {string} \"datachannel\" or \"websocket\" (or null if not yet set).\n     */\n    get mode() {\n        return this._mode;\n    }\n\n    /**\n     * Closes the currently opened channel.\n     */\n    close() {\n        this._closedFromClient = true;\n        this._stopConnectionRetries();\n        this._areRetriesEnabled = false;\n        if (this._channel) {\n            try {\n                this._channel.close();\n            } catch (error) {} // eslint-disable-line no-empty\n\n            this._channel = null;\n        }\n    }\n\n    /**\n     * Whether there is an underlying RTCDataChannel or WebSocket and it's\n     * open.\n     * @return {boolean}\n     */\n    isOpen() {\n        return this._channel && (this._channel.readyState === 'open'\n            || this._channel.readyState === WebSocket.OPEN);\n    }\n\n    /**\n     * Sends local stats via the bridge channel.\n     * @param {Object} payload The payload of the message.\n     * @throws NetworkError/InvalidStateError/Error if the operation fails or if there is no data channel created.\n     */\n    sendEndpointStatsMessage(payload) {\n        this._send({\n            colibriClass: 'EndpointStats',\n            ...payload\n        });\n    }\n\n    /**\n     * Sends message via the channel.\n     * @param {string} to The id of the endpoint that should receive the\n     * message. If \"\" the message will be sent to all participants.\n     * @param  {object} payload The payload of the message.\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\n     * or from WebSocket#send or Error with \"No opened channel\" message.\n     */\n    sendMessage(to, payload) {\n        this._send({\n            colibriClass: 'EndpointMessage',\n            msgPayload: payload,\n            to\n        });\n    }\n\n    /**\n     * Sends a \"lastN value changed\" message via the channel.\n     * @param {number} value The new value for lastN. -1 means unlimited.\n     */\n    sendSetLastNMessage(value) {\n        logger.log(`Sending lastN=${value}.`);\n\n        this._send({\n            colibriClass: 'LastNChangedEvent',\n            lastN: value\n        });\n    }\n\n    /**\n     * Sends a \"selected endpoints changed\" message via the channel.\n     *\n     * @param {Array<string>} endpointIds - The ids of the selected endpoints.\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\n     * or from WebSocket#send or Error with \"No opened channel\" message.\n     */\n    sendSelectedEndpointsMessage(endpointIds) {\n        logger.log(`Sending selected endpoints: ${endpointIds}.`);\n\n        this._send({\n            colibriClass: 'SelectedEndpointsChangedEvent',\n            selectedEndpoints: endpointIds\n        });\n    }\n\n    /**\n     * Sends a \"receiver video constraint\" message via the channel.\n     * @param {Number} maxFrameHeightPixels the maximum frame height,\n     * in pixels, this receiver is willing to receive\n     */\n    sendReceiverVideoConstraintMessage(maxFrameHeightPixels) {\n        logger.log(`Sending ReceiverVideoConstraint with maxFrameHeight=${maxFrameHeightPixels}px`);\n        this._send({\n            colibriClass: 'ReceiverVideoConstraint',\n            maxFrameHeight: maxFrameHeightPixels\n        });\n    }\n\n    /**\n     * Sends a 'ReceiverVideoConstraints' message via the bridge channel.\n     *\n     * @param {ReceiverVideoConstraints} constraints video constraints.\n     */\n    sendNewReceiverVideoConstraintsMessage(constraints) {\n        logger.log(`Sending ReceiverVideoConstraints with ${JSON.stringify(constraints)}`);\n        this._send({\n            colibriClass: 'ReceiverVideoConstraints',\n            ...constraints\n        });\n    }\n\n    /**\n     * Sends a 'VideoTypeMessage' message via the bridge channel.\n     *\n     * @param {string} videoType 'camera', 'desktop' or 'none'.\n     * @deprecated to be replaced with sendSourceVideoTypeMessage\n     */\n    sendVideoTypeMessage(videoType) {\n        logger.debug(`Sending VideoTypeMessage with video type as ${videoType}`);\n        this._send({\n            colibriClass: 'VideoTypeMessage',\n            videoType\n        });\n    }\n\n    /**\n     * Sends a 'VideoTypeMessage' message via the bridge channel.\n     *\n     * @param {BridgeVideoType} videoType - the video type.\n     * @param {SourceName} sourceName - the source name of the video track.\n     * @returns {void}\n     */\n    sendSourceVideoTypeMessage(sourceName, videoType) {\n        logger.info(`Sending SourceVideoTypeMessage with video type ${sourceName}: ${videoType}`);\n        this._send({\n            colibriClass: 'SourceVideoTypeMessage',\n            sourceName,\n            videoType\n        });\n    }\n\n    /**\n     * Set events on the given RTCDataChannel or WebSocket instance.\n     */\n    _handleChannel(channel) {\n        const emitter = this._eventEmitter;\n\n        channel.onopen = () => {\n            logger.info(`${this._mode} channel opened`);\n\n            // Code sample for sending string and/or binary data.\n            // Sends string message to the bridge:\n            //     channel.send(\"Hello bridge!\");\n            // Sends 12 bytes binary message to the bridge:\n            //     channel.send(new ArrayBuffer(12));\n\n            emitter.emit(RTCEvents.DATA_CHANNEL_OPEN);\n        };\n\n        channel.onerror = event => {\n            // WS error events contain no information about the failure (this is available in the onclose event) and\n            // the event references the WS object itself, which causes hangs on mobile.\n            if (this._mode !== 'websocket') {\n                logger.error(`Channel error: ${event.message}`);\n            }\n        };\n\n        channel.onmessage = ({ data }) => {\n            // JSON object.\n            let obj;\n\n            try {\n                obj = JSON.parse(data);\n            } catch (error) {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error('Failed to parse channel message as JSON: ', data, error);\n\n                return;\n            }\n\n            const colibriClass = obj.colibriClass;\n\n            switch (colibriClass) {\n            case 'DominantSpeakerEndpointChangeEvent': {\n                const { dominantSpeakerEndpoint, previousSpeakers = [] } = obj;\n\n                logger.debug(`Dominant speaker: ${dominantSpeakerEndpoint}, previous speakers: ${previousSpeakers}`);\n                emitter.emit(RTCEvents.DOMINANT_SPEAKER_CHANGED, dominantSpeakerEndpoint, previousSpeakers);\n                break;\n            }\n            case 'EndpointConnectivityStatusChangeEvent': {\n                const endpoint = obj.endpoint;\n                const isActive = obj.active === 'true';\n\n                logger.info(`Endpoint connection status changed: ${endpoint} active=${isActive}`);\n                emitter.emit(RTCEvents.ENDPOINT_CONN_STATUS_CHANGED, endpoint, isActive);\n\n                break;\n            }\n            case 'EndpointMessage': {\n                emitter.emit(RTCEvents.ENDPOINT_MESSAGE_RECEIVED, obj.from, obj.msgPayload);\n\n                break;\n            }\n            case 'EndpointStats': {\n                emitter.emit(RTCEvents.ENDPOINT_STATS_RECEIVED, obj.from, obj);\n\n                break;\n            }\n            case 'LastNEndpointsChangeEvent': {\n                // The new/latest list of last-n endpoint IDs (i.e. endpoints for which the bridge is sending video).\n                const lastNEndpoints = obj.lastNEndpoints;\n\n                logger.info(`New forwarded endpoints: ${lastNEndpoints}`);\n                emitter.emit(RTCEvents.LASTN_ENDPOINT_CHANGED, lastNEndpoints);\n\n                break;\n            }\n            case 'SenderVideoConstraints': {\n                const videoConstraints = obj.videoConstraints;\n\n                if (videoConstraints) {\n                    logger.info(`SenderVideoConstraints: ${JSON.stringify(videoConstraints)}`);\n                    emitter.emit(RTCEvents.SENDER_VIDEO_CONSTRAINTS_CHANGED, videoConstraints);\n                }\n                break;\n            }\n            case 'ServerHello': {\n                logger.info(`Received ServerHello, version=${obj.version}.`);\n                break;\n            }\n            default: {\n                logger.debug('Channel JSON-formatted message: ', obj);\n\n                // The received message appears to be appropriately formatted\n                // (i.e. is a JSON object which assigns a value to the\n                // mandatory property colibriClass) so don't just swallow it,\n                // expose it to public consumption.\n                emitter.emit(`rtc.datachannel.${colibriClass}`, obj);\n            }\n            }\n        };\n\n        channel.onclose = event => {\n            logger.info(`Channel closed by ${this._closedFromClient ? 'client' : 'server'}`);\n\n            if (this._mode === 'websocket') {\n                if (!this._closedFromClient) {\n                    logger.error(`Channel closed: ${event.code} ${event.reason}`);\n                    this._retryWebSocketConnection(event);\n                }\n            }\n\n            // Remove the channel.\n            this._channel = null;\n        };\n\n        // Store the channel.\n        this._channel = channel;\n    }\n\n    /**\n     * Sends passed object via the channel.\n     * @param {object} jsonObject The object that will be sent.\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\n     * or from WebSocket#send or Error with \"No opened channel\" message.\n     */\n    _send(jsonObject) {\n        const channel = this._channel;\n\n        if (!this.isOpen()) {\n            logger.error('Bridge Channel send: no opened channel.');\n            throw new Error('No opened channel');\n        }\n\n        channel.send(JSON.stringify(jsonObject));\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport EventEmitter from 'events';\nimport clonedeep from 'lodash.clonedeep';\n\nimport JitsiTrackError from '../../JitsiTrackError';\nimport * as JitsiTrackErrors from '../../JitsiTrackErrors';\nimport CameraFacingMode from '../../service/RTC/CameraFacingMode';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport Resolutions from '../../service/RTC/Resolutions';\nimport VideoType from '../../service/RTC/VideoType';\nimport { AVAILABLE_DEVICE } from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\nimport SDPUtil from '../sdp/SDPUtil';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport Listenable from '../util/Listenable';\n\nimport screenObtainer from './ScreenObtainer';\n\nconst logger = getLogger(__filename);\n\n// Require adapter only for certain browsers. This is being done for\n// react-native, which has its own shims, and while browsers are being migrated\n// over to use adapter's shims.\nif (browser.usesAdapter()) {\n    require('webrtc-adapter');\n}\n\nconst eventEmitter = new EventEmitter();\n\nconst AVAILABLE_DEVICES_POLL_INTERVAL_TIME = 3000; // ms\n\n/**\n * Default MediaStreamConstraints to use for calls to getUserMedia.\n *\n * @private\n */\nconst DEFAULT_CONSTRAINTS = {\n    video: {\n        height: {\n            ideal: 720,\n            max: 720,\n            min: 180\n        },\n        width: {\n            ideal: 1280,\n            max: 1280,\n            min: 320\n        }\n    }\n};\n\n// Currently audio output device change is supported only in Chrome and\n// default output always has 'default' device ID\nlet audioOutputDeviceId = 'default'; // default device\n// whether user has explicitly set a device to use\nlet audioOutputChanged = false;\n\n// Disables all audio processing\nlet disableAP = false;\n\n// Disables Acoustic Echo Cancellation\nlet disableAEC = false;\n\n// Disables Noise Suppression\nlet disableNS = false;\n\n// Disables Automatic Gain Control\nlet disableAGC = false;\n\n// Enables stereo.\nlet stereo = null;\n\nconst featureDetectionAudioEl = document.createElement('audio');\nconst isAudioOutputDeviceChangeAvailable\n    = typeof featureDetectionAudioEl.setSinkId !== 'undefined';\n\nlet availableDevices = [];\nlet availableDevicesPollTimer;\n\n/**\n * An empty function.\n */\nfunction emptyFuncton() {\n    // no-op\n}\n\n/**\n * Creates a constraints object to be passed into a call to getUserMedia.\n *\n * @param {Array} um - An array of user media types to get. The accepted types are \"video\", \"audio\", and \"desktop.\"\n * @param {Object} options - Various values to be added to the constraints.\n * @param {string} options.cameraDeviceId - The device id for the video capture device to get video from.\n * @param {Object} options.constraints - Default constraints object to use as a base for the returned constraints.\n * @param {Object} options.desktopStream - The desktop source id from which to capture a desktop sharing video.\n * @param {string} options.facingMode - Which direction the camera is pointing to (applicable on mobile)\n * @param {string} options.micDeviceId - The device id for the audio capture device to get audio from.\n * @private\n * @returns {Object}\n */\nfunction getConstraints(um = [], options = {}) {\n    // Create a deep copy of the constraints to avoid any modification of\n    // the passed in constraints object.\n    const constraints = clonedeep(options.constraints || DEFAULT_CONSTRAINTS);\n\n    if (um.indexOf('video') >= 0) {\n        // The \"resolution\" option is a shortcut and takes precendence.\n        if (Resolutions[options.resolution]) {\n            const r = Resolutions[options.resolution];\n\n            constraints.video.height = { ideal: r.height };\n            constraints.video.width = { ideal: r.width };\n        }\n\n        if (!constraints.video) {\n            constraints.video = {};\n        }\n\n        // Override the constraints on Safari because of the following webkit bug.\n        // https://bugs.webkit.org/show_bug.cgi?id=210932\n        // Camera doesn't start on older macOS versions if min/max constraints are specified.\n        // TODO: remove this hack when the bug fix is available on Mojave, Sierra and High Sierra.\n        if (browser.isWebKitBased()) {\n            if (constraints.video.height && constraints.video.height.ideal) {\n                constraints.video.height = { ideal: constraints.video.height.ideal };\n            } else {\n                logger.warn('Ideal camera height missing, camera may not start properly');\n            }\n            if (constraints.video.width && constraints.video.width.ideal) {\n                constraints.video.width = { ideal: constraints.video.width.ideal };\n            } else {\n                logger.warn('Ideal camera width missing, camera may not start properly');\n            }\n        }\n        if (options.cameraDeviceId) {\n            constraints.video.deviceId = options.cameraDeviceId;\n        } else {\n            const facingMode = options.facingMode || CameraFacingMode.USER;\n\n            constraints.video.facingMode = facingMode;\n        }\n    } else {\n        constraints.video = false;\n    }\n\n    if (um.indexOf('audio') >= 0) {\n        if (!constraints.audio || typeof constraints.audio === 'boolean') {\n            constraints.audio = {};\n        }\n\n        constraints.audio = {\n            autoGainControl: !disableAGC && !disableAP,\n            deviceId: options.micDeviceId,\n            echoCancellation: !disableAEC && !disableAP,\n            noiseSuppression: !disableNS && !disableAP\n        };\n\n        if (stereo) {\n            Object.assign(constraints.audio, { channelCount: 2 });\n        }\n    } else {\n        constraints.audio = false;\n    }\n\n    return constraints;\n}\n\n/**\n * Updates the granted permissions based on the options we requested and the\n * streams we received.\n * @param um the options we requested to getUserMedia.\n * @param stream the stream we received from calling getUserMedia.\n */\nfunction updateGrantedPermissions(um, stream) {\n    const audioTracksReceived\n        = Boolean(stream) && stream.getAudioTracks().length > 0;\n    const videoTracksReceived\n        = Boolean(stream) && stream.getVideoTracks().length > 0;\n    const grantedPermissions = {};\n\n    if (um.indexOf('video') !== -1) {\n        grantedPermissions.video = videoTracksReceived;\n    }\n    if (um.indexOf('audio') !== -1) {\n        grantedPermissions.audio = audioTracksReceived;\n    }\n\n    eventEmitter.emit(RTCEvents.PERMISSIONS_CHANGED, grantedPermissions);\n}\n\n/**\n * Checks if new list of available media devices differs from previous one.\n * @param {MediaDeviceInfo[]} newDevices - list of new devices.\n * @returns {boolean} - true if list is different, false otherwise.\n */\nfunction compareAvailableMediaDevices(newDevices) {\n    if (newDevices.length !== availableDevices.length) {\n        return true;\n    }\n\n    /* eslint-disable newline-per-chained-call */\n\n    return (\n        newDevices.map(mediaDeviceInfoToJSON).sort().join('')\n            !== availableDevices\n                .map(mediaDeviceInfoToJSON).sort().join(''));\n\n    /* eslint-enable newline-per-chained-call */\n\n    /**\n     *\n     * @param info\n     */\n    function mediaDeviceInfoToJSON(info) {\n        return JSON.stringify({\n            kind: info.kind,\n            deviceId: info.deviceId,\n            groupId: info.groupId,\n            label: info.label,\n            facing: info.facing\n        });\n    }\n}\n\n/**\n * Sends analytics event with the passed device list.\n *\n * @param {Array<MediaDeviceInfo>} deviceList - List with info about the\n * available devices.\n * @returns {void}\n */\nfunction sendDeviceListToAnalytics(deviceList) {\n    const audioInputDeviceCount\n        = deviceList.filter(d => d.kind === 'audioinput').length;\n    const audioOutputDeviceCount\n        = deviceList.filter(d => d.kind === 'audiooutput').length;\n    const videoInputDeviceCount\n        = deviceList.filter(d => d.kind === 'videoinput').length;\n    const videoOutputDeviceCount\n        = deviceList.filter(d => d.kind === 'videooutput').length;\n\n    deviceList.forEach(device => {\n        const attributes = {\n            'audio_input_device_count': audioInputDeviceCount,\n            'audio_output_device_count': audioOutputDeviceCount,\n            'video_input_device_count': videoInputDeviceCount,\n            'video_output_device_count': videoOutputDeviceCount,\n            'device_id': device.deviceId,\n            'device_group_id': device.groupId,\n            'device_kind': device.kind,\n            'device_label': device.label\n        };\n\n        Statistics.sendAnalytics(AVAILABLE_DEVICE, attributes);\n    });\n}\n\n\n/**\n * Update known devices.\n *\n * @param {Array<Object>} pds - The new devices.\n * @returns {void}\n *\n * NOTE: Use this function as a shared callback to handle both the devicechange event  and the polling implementations.\n * This prevents duplication and works around a chrome bug (verified to occur on 68) where devicechange fires twice in\n * a row, which can cause async post devicechange processing to collide.\n */\nfunction updateKnownDevices(pds) {\n    if (compareAvailableMediaDevices(pds)) {\n        onMediaDevicesListChanged(pds);\n    }\n}\n\n/**\n * Event handler for the 'devicechange' event.\n *\n * @param {MediaDeviceInfo[]} devices - list of media devices.\n * @emits RTCEvents.DEVICE_LIST_CHANGED\n */\nfunction onMediaDevicesListChanged(devicesReceived) {\n    availableDevices = devicesReceived.slice(0);\n    logger.info('list of media devices has changed:', availableDevices);\n\n    sendDeviceListToAnalytics(availableDevices);\n\n    // Used by tracks to update the real device id before the consumer of lib-jitsi-meet receives the new device list.\n    eventEmitter.emit(RTCEvents.DEVICE_LIST_WILL_CHANGE, availableDevices);\n\n    eventEmitter.emit(RTCEvents.DEVICE_LIST_CHANGED, availableDevices);\n}\n\n/**\n *\n */\nclass RTCUtils extends Listenable {\n    /**\n     *\n     */\n    constructor() {\n        super(eventEmitter);\n    }\n\n    /**\n     * Depending on the browser, sets difference instance methods for\n     * interacting with user media and adds methods to native WebRTC-related\n     * objects. Also creates an instance variable for peer connection\n     * constraints.\n     *\n     * @param {Object} options\n     * @returns {void}\n     */\n    init(options = {}) {\n        if (typeof options.disableAEC === 'boolean') {\n            disableAEC = options.disableAEC;\n            logger.info(`Disable AEC: ${disableAEC}`);\n        }\n        if (typeof options.disableNS === 'boolean') {\n            disableNS = options.disableNS;\n            logger.info(`Disable NS: ${disableNS}`);\n        }\n        if (typeof options.disableAP === 'boolean') {\n            disableAP = options.disableAP;\n            logger.info(`Disable AP: ${disableAP}`);\n        }\n        if (typeof options.disableAGC === 'boolean') {\n            disableAGC = options.disableAGC;\n            logger.info(`Disable AGC: ${disableAGC}`);\n        }\n        if (typeof options.audioQuality?.stereo === 'boolean') {\n            stereo = options.audioQuality.stereo;\n            logger.info(`Stereo: ${stereo}`);\n        }\n\n        window.clearInterval(availableDevicesPollTimer);\n        availableDevicesPollTimer = undefined;\n\n        if (browser.isReactNative()) {\n            this.RTCPeerConnectionType = RTCPeerConnection;\n\n            this.attachMediaStream = undefined; // Unused on React Native.\n\n            this.getStreamID = function({ id }) {\n                // The react-native-webrtc implementation that we use at the\n                // time of this writing returns a number for the id of\n                // MediaStream. Let's just say that a number contains no special\n                // characters.\n                return (\n                    typeof id === 'number'\n                        ? id\n                        : SDPUtil.filterSpecialChars(id));\n            };\n            this.getTrackID = ({ id }) => id;\n        } else {\n            this.RTCPeerConnectionType = RTCPeerConnection;\n\n            this.attachMediaStream\n                = wrapAttachMediaStream((element, stream) => {\n                    if (element) {\n                        element.srcObject = stream;\n                    }\n                });\n\n            this.getStreamID = ({ id }) => id;\n            this.getTrackID = ({ id }) => id;\n        }\n\n        this.pcConstraints = browser.isChromiumBased() || browser.isReactNative()\n            ? { optional: [\n                { googScreencastMinBitrate: 100 },\n                { googCpuOveruseDetection: true }\n            ] }\n            : {};\n\n        screenObtainer.init(options);\n\n        if (this.isDeviceListAvailable()) {\n            this.enumerateDevices(ds => {\n                availableDevices = ds.slice(0);\n\n                logger.debug('Available devices: ', availableDevices);\n                sendDeviceListToAnalytics(availableDevices);\n\n                eventEmitter.emit(\n                    RTCEvents.DEVICE_LIST_AVAILABLE,\n                    availableDevices);\n\n                if (browser.supportsDeviceChangeEvent()) {\n                    navigator.mediaDevices.addEventListener(\n                        'devicechange',\n                        () => this.enumerateDevices(emptyFuncton));\n                } else {\n                    // Periodically poll enumerateDevices() method to check if\n                    // list of media devices has changed.\n                    availableDevicesPollTimer = window.setInterval(\n                        () => this.enumerateDevices(emptyFuncton),\n                        AVAILABLE_DEVICES_POLL_INTERVAL_TIME);\n                }\n            });\n        }\n    }\n\n    /**\n     *\n     * @param {Function} callback\n     */\n    enumerateDevices(callback) {\n        navigator.mediaDevices.enumerateDevices()\n            .then(devices => {\n                updateKnownDevices(devices);\n                callback(devices);\n            })\n            .catch(error => {\n                logger.warn(`Failed to  enumerate devices. ${error}`);\n                updateKnownDevices([]);\n                callback([]);\n            });\n    }\n\n    /**\n     * Acquires a media stream via getUserMedia that\n     * matches the given constraints\n     *\n     * @param {array} umDevices which devices to acquire (e.g. audio, video)\n     * @param {Object} constraints - Stream specifications to use.\n     * @param {number} timeout - The timeout in ms for GUM.\n     * @returns {Promise}\n     */\n    _getUserMedia(umDevices, constraints = {}, timeout = 0) {\n        return new Promise((resolve, reject) => {\n            let gumTimeout, timeoutExpired = false;\n\n            if (typeof timeout === 'number' && !isNaN(timeout) && timeout > 0) {\n                gumTimeout = setTimeout(() => {\n                    timeoutExpired = true;\n                    gumTimeout = undefined;\n                    reject(new JitsiTrackError(JitsiTrackErrors.TIMEOUT));\n                }, timeout);\n            }\n\n            navigator.mediaDevices.getUserMedia(constraints)\n                .then(stream => {\n                    logger.log('onUserMediaSuccess');\n                    updateGrantedPermissions(umDevices, stream);\n                    if (!timeoutExpired) {\n                        if (typeof gumTimeout !== 'undefined') {\n                            clearTimeout(gumTimeout);\n                        }\n                        resolve(stream);\n                    }\n                })\n                .catch(error => {\n                    logger.warn(`Failed to get access to local media. ${error} ${JSON.stringify(constraints)}`);\n                    const jitsiError = new JitsiTrackError(error, constraints, umDevices);\n\n                    if (!timeoutExpired) {\n                        if (typeof gumTimeout !== 'undefined') {\n                            clearTimeout(gumTimeout);\n                        }\n                        reject(error);\n                    }\n\n                    if (jitsiError.name === JitsiTrackErrors.PERMISSION_DENIED) {\n                        updateGrantedPermissions(umDevices, undefined);\n                    }\n\n                    // else {\n                    // Probably the error is not caused by the lack of permissions and we don't need to update them.\n                    // }\n                });\n        });\n    }\n\n    /**\n     * Acquire a display stream via the screenObtainer. This requires extra\n     * logic compared to use screenObtainer versus normal device capture logic\n     * in RTCUtils#_getUserMedia.\n     *\n     * @returns {Promise} A promise which will be resolved with an object which\n     * contains the acquired display stream. If desktop sharing is not supported\n     * then a rejected promise will be returned.\n     */\n    _getDesktopMedia() {\n        if (!screenObtainer.isSupported()) {\n            return Promise.reject(new Error('Desktop sharing is not supported!'));\n        }\n\n        return new Promise((resolve, reject) => {\n            screenObtainer.obtainStream(\n                stream => {\n                    resolve(stream);\n                },\n                error => {\n                    reject(error);\n                });\n        });\n    }\n\n    /**\n     * Private utility for determining if the passed in MediaStream contains\n     * tracks of the type(s) specified in the requested devices.\n     *\n     * @param {string[]} requestedDevices - The track types that are expected to\n     * be includes in the stream.\n     * @param {MediaStream} stream - The MediaStream to check if it has the\n     * expected track types.\n     * @returns {string[]} An array of string with the missing track types. The\n     * array will be empty if all requestedDevices are found in the stream.\n     */\n    _getMissingTracks(requestedDevices = [], stream) {\n        const missingDevices = [];\n\n        const audioDeviceRequested = requestedDevices.includes('audio');\n        const audioTracksReceived\n            = stream && stream.getAudioTracks().length > 0;\n\n        if (audioDeviceRequested && !audioTracksReceived) {\n            missingDevices.push('audio');\n        }\n\n        const videoDeviceRequested = requestedDevices.includes('video');\n        const videoTracksReceived\n            = stream && stream.getVideoTracks().length > 0;\n\n        if (videoDeviceRequested && !videoTracksReceived) {\n            missingDevices.push('video');\n        }\n\n        return missingDevices;\n    }\n\n    /**\n     * Gets streams from specified device types. This function intentionally\n     * ignores errors for upstream to catch and handle instead.\n     *\n     * @param {Object} options - A hash describing what devices to get and\n     * relevant constraints.\n     * @param {string[]} options.devices - The types of media to capture. Valid\n     * values are \"desktop\", \"audio\", and \"video\".\n     * @param {Object} options.desktopSharingFrameRate\n     * @param {Object} options.desktopSharingFrameRate.min - Minimum fps\n     * @param {Object} options.desktopSharingFrameRate.max - Maximum fps\n     * @param {String} options.desktopSharingSourceDevice - The device id or\n     * label for a video input source that should be used for screensharing.\n     * @returns {Promise} The promise, when successful, will return an array of\n     * meta data for the requested device type, which includes the stream and\n     * track. If an error occurs, it will be deferred to the caller for\n     * handling.\n     */\n    obtainAudioAndVideoPermissions(options) {\n        const {\n            timeout,\n            ...otherOptions\n        } = options;\n\n        const mediaStreamsMetaData = [];\n\n        // Declare private functions to be used in the promise chain below.\n        // These functions are declared in the scope of this function because\n        // they are not being used anywhere else, so only this function needs to\n        // know about them.\n\n        /**\n         * Executes a request for desktop media if specified in options.\n         *\n         * @returns {Promise}\n         */\n        const maybeRequestDesktopDevice = function() {\n            const umDevices = otherOptions.devices || [];\n            const isDesktopDeviceRequested\n                = umDevices.indexOf('desktop') !== -1;\n\n            if (!isDesktopDeviceRequested) {\n                return Promise.resolve();\n            }\n\n            const {\n                desktopSharingSourceDevice\n            } = otherOptions;\n\n            // Attempt to use a video input device as a screenshare source if\n            // the option is defined.\n            if (desktopSharingSourceDevice) {\n                const matchingDevice\n                    = availableDevices && availableDevices.find(device =>\n                        device.kind === 'videoinput'\n                            && (device.deviceId === desktopSharingSourceDevice\n                            || device.label === desktopSharingSourceDevice));\n\n                if (!matchingDevice) {\n                    return Promise.reject(new JitsiTrackError(\n                        { name: 'ConstraintNotSatisfiedError' },\n                        {},\n                        [ desktopSharingSourceDevice ]\n                    ));\n                }\n\n                const requestedDevices = [ 'video' ];\n                const constraints = {\n                    video: {\n                        deviceId: matchingDevice.deviceId\n\n                        // frameRate is omited here on purpose since this is a device that we'll pretend is a screen.\n                    }\n                };\n\n                return this._getUserMedia(requestedDevices, constraints, timeout)\n                    .then(stream => {\n                        return {\n                            sourceType: 'device',\n                            stream\n                        };\n                    });\n            }\n\n            return this._getDesktopMedia();\n        }.bind(this);\n\n        /**\n         * Creates a meta data object about the passed in desktopStream and\n         * pushes the meta data to the internal array mediaStreamsMetaData to be\n         * returned later.\n         *\n         * @param {MediaStreamTrack} desktopStream - A track for a desktop\n         * capture.\n         * @returns {void}\n         */\n        const maybeCreateAndAddDesktopTrack = function(desktopStream) {\n            if (!desktopStream) {\n                return;\n            }\n\n            const { stream, sourceId, sourceType } = desktopStream;\n\n            const desktopAudioTracks = stream.getAudioTracks();\n\n            if (desktopAudioTracks.length) {\n                const desktopAudioStream = new MediaStream(desktopAudioTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: desktopAudioStream,\n                    sourceId,\n                    sourceType,\n                    track: desktopAudioStream.getAudioTracks()[0]\n                });\n            }\n\n            const desktopVideoTracks = stream.getVideoTracks();\n\n            if (desktopVideoTracks.length) {\n                const desktopVideoStream = new MediaStream(desktopVideoTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: desktopVideoStream,\n                    sourceId,\n                    sourceType,\n                    track: desktopVideoStream.getVideoTracks()[0],\n                    videoType: VideoType.DESKTOP\n                });\n            }\n        };\n\n        /**\n         * Executes a request for audio and/or video, as specified in options.\n         * By default both audio and video will be captured if options.devices\n         * is not defined.\n         *\n         * @returns {Promise}\n         */\n        const maybeRequestCaptureDevices = function() {\n            const umDevices = otherOptions.devices || [ 'audio', 'video' ];\n            const requestedCaptureDevices = umDevices.filter(device => device === 'audio' || device === 'video');\n\n            if (!requestedCaptureDevices.length) {\n                return Promise.resolve();\n            }\n\n            const constraints = getConstraints(requestedCaptureDevices, otherOptions);\n\n            logger.info('Got media constraints: ', JSON.stringify(constraints));\n\n            return this._getUserMedia(requestedCaptureDevices, constraints, timeout);\n        }.bind(this);\n\n        /**\n         * Splits the passed in media stream into separate audio and video\n         * streams and creates meta data objects for each and pushes them to the\n         * internal array mediaStreamsMetaData to be returned later.\n         *\n         * @param {MediaStreamTrack} avStream - A track for with audio and/or\n         * video track.\n         * @returns {void}\n         */\n        const maybeCreateAndAddAVTracks = function(avStream) {\n            if (!avStream) {\n                return;\n            }\n\n            const audioTracks = avStream.getAudioTracks();\n\n            if (audioTracks.length) {\n                const audioStream = new MediaStream(audioTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: audioStream,\n                    track: audioStream.getAudioTracks()[0],\n                    effects: otherOptions.effects\n                });\n            }\n\n            const videoTracks = avStream.getVideoTracks();\n\n            if (videoTracks.length) {\n                const videoStream = new MediaStream(videoTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: videoStream,\n                    track: videoStream.getVideoTracks()[0],\n                    videoType: VideoType.CAMERA,\n                    effects: otherOptions.effects\n                });\n            }\n        };\n\n        return maybeRequestDesktopDevice()\n            .then(maybeCreateAndAddDesktopTrack)\n            .then(maybeRequestCaptureDevices)\n            .then(maybeCreateAndAddAVTracks)\n            .then(() => mediaStreamsMetaData)\n            .catch(error => {\n                mediaStreamsMetaData.forEach(({ stream }) => {\n                    this.stopMediaStream(stream);\n                });\n\n                return Promise.reject(error);\n            });\n    }\n\n    /**\n     * Checks whether it is possible to enumerate available cameras/microphones.\n     *\n     * @returns {boolean} {@code true} if the device listing is available;\n     * {@code false}, otherwise.\n     */\n    isDeviceListAvailable() {\n        return Boolean(\n            navigator.mediaDevices\n                && navigator.mediaDevices.enumerateDevices);\n    }\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     * @params {string} [deviceType] - type of device to change. Default is\n     *      undefined or 'input', 'output' - for audio output device change.\n     * @returns {boolean} true if available, false otherwise.\n     */\n    isDeviceChangeAvailable(deviceType) {\n        if (deviceType === 'output' || deviceType === 'audiooutput') {\n            return isAudioOutputDeviceChangeAvailable;\n        }\n\n        // Calling getUserMedia again (for preview) kills the track returned by the first getUserMedia call because of\n        // https://bugs.webkit.org/show_bug.cgi?id=179363. Therefore, do not show microphone/camera options on mobile\n        // Safari.\n        if ((deviceType === 'audioinput' || deviceType === 'input') && browser.isIosBrowser()) {\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * A method to handle stopping of the stream.\n     * One point to handle the differences in various implementations.\n     * @param mediaStream MediaStream object to stop.\n     */\n    stopMediaStream(mediaStream) {\n        if (!mediaStream) {\n            return;\n        }\n\n        mediaStream.getTracks().forEach(track => {\n            if (track.stop) {\n                track.stop();\n            }\n        });\n\n        // leave stop for implementation still using it\n        if (mediaStream.stop) {\n            mediaStream.stop();\n        }\n\n        // The MediaStream implementation of the react-native-webrtc project has\n        // an explicit release method that is to be invoked in order to release\n        // used resources such as memory.\n        if (mediaStream.release) {\n            mediaStream.release();\n        }\n    }\n\n    /**\n     * Returns whether the desktop sharing is enabled or not.\n     * @returns {boolean}\n     */\n    isDesktopSharingEnabled() {\n        return screenObtainer.isSupported();\n    }\n\n    /**\n     * Sets current audio output device.\n     * @param {string} deviceId - id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices(), 'default' for default\n     *      device\n     * @returns {Promise} - resolves when audio output is changed, is rejected\n     *      otherwise\n     */\n    setAudioOutputDevice(deviceId) {\n        if (!this.isDeviceChangeAvailable('output')) {\n            return Promise.reject(\n                new Error('Audio output device change is not supported'));\n        }\n\n        return featureDetectionAudioEl.setSinkId(deviceId)\n            .then(() => {\n                audioOutputDeviceId = deviceId;\n                audioOutputChanged = true;\n\n                logger.log(`Audio output device set to ${deviceId}`);\n\n                eventEmitter.emit(RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                    deviceId);\n            });\n    }\n\n    /**\n     * Sets the capture frame rate for desktop tracks.\n     *\n     * @param {number} maxFps - max fps to be used as the capture frame rate.\n     * @returns {void}\n     */\n    setDesktopSharingFrameRate(maxFps) {\n        screenObtainer.setDesktopSharingFrameRate(maxFps);\n    }\n\n    /**\n     * Returns currently used audio output device id, '' stands for default\n     * device\n     * @returns {string}\n     */\n    getAudioOutputDevice() {\n        return audioOutputDeviceId;\n    }\n\n    /**\n     * Returns list of available media devices if its obtained, otherwise an\n     * empty array is returned/\n     * @returns {Array} list of available media devices.\n     */\n    getCurrentlyAvailableMediaDevices() {\n        return availableDevices;\n    }\n\n    /**\n     * Returns whether available devices have permissions granted\n     * @returns {Boolean}\n     */\n    arePermissionsGrantedForAvailableDevices() {\n        return availableDevices.some(device => Boolean(device.label));\n    }\n\n    /**\n     * Returns event data for device to be reported to stats.\n     * @returns {MediaDeviceInfo} device.\n     */\n    getEventDataForActiveDevice(device) {\n        const deviceList = [];\n        const deviceData = {\n            'deviceId': device.deviceId,\n            'kind': device.kind,\n            'label': device.label,\n            'groupId': device.groupId\n        };\n\n        deviceList.push(deviceData);\n\n        return { deviceList };\n    }\n\n    /**\n     * Configures the given PeerConnection constraints to either enable or\n     * disable (according to the value of the 'enable' parameter) the\n     * 'googSuspendBelowMinBitrate' option.\n     * @param constraints the constraints on which to operate.\n     * @param enable {boolean} whether to enable or disable the suspend video\n     * option.\n     */\n    setSuspendVideo(constraints, enable) {\n        if (!constraints.optional) {\n            constraints.optional = [];\n        }\n\n        // Get rid of all \"googSuspendBelowMinBitrate\" constraints (we assume\n        // that the elements of constraints.optional contain a single property).\n        constraints.optional\n            = constraints.optional.filter(\n                c => !c.hasOwnProperty('googSuspendBelowMinBitrate'));\n\n        if (enable) {\n            constraints.optional.push({ googSuspendBelowMinBitrate: 'true' });\n        }\n    }\n}\n\nconst rtcUtils = new RTCUtils();\n\n/**\n * Wraps original attachMediaStream function to set current audio output device\n * if this is supported.\n * @param {Function} origAttachMediaStream\n * @returns {Function}\n */\nfunction wrapAttachMediaStream(origAttachMediaStream) {\n    return function(element, stream) {\n        // eslint-disable-next-line prefer-rest-params\n        const res = origAttachMediaStream.apply(rtcUtils, arguments);\n\n        if (stream\n                && rtcUtils.isDeviceChangeAvailable('output')\n                && stream.getAudioTracks\n                && stream.getAudioTracks().length\n\n                // we skip setting audio output if there was no explicit change\n                && audioOutputChanged) {\n            element.setSinkId(rtcUtils.getAudioOutputDevice())\n                .catch(function(ex) {\n                    const err\n                        = new JitsiTrackError(ex, null, [ 'audiooutput' ]);\n\n                    GlobalOnErrorHandler.callUnhandledRejectionHandler({\n                        promise: this, // eslint-disable-line no-invalid-this\n                        reason: err\n                    });\n\n                    logger.warn(\n                        'Failed to set audio output device for the element.'\n                            + ' Default audio output device will be used'\n                            + ' instead',\n                        element,\n                        err);\n                });\n        }\n\n        return res;\n    };\n}\n\nexport default rtcUtils;\n","import { getLogger } from '@jitsi/logger';\nimport EventEmitter from 'events';\n\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport browser from '../browser';\n\nimport RTCUtils from './RTCUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * Maps our handler types to MediaStreamTrack properties.\n */\nconst trackHandler2Prop = {\n    'track_mute': 'onmute', // Not supported on FF\n    'track_unmute': 'onunmute',\n    'track_ended': 'onended'\n};\n\n/**\n * Represents a single media track (either audio or video).\n */\nexport default class JitsiTrack extends EventEmitter {\n    /* eslint-disable max-params */\n    /**\n     * Represents a single media track (either audio or video).\n     * @constructor\n     * @param conference the rtc instance\n     * @param stream the WebRTC MediaStream instance\n     * @param track the WebRTC MediaStreamTrack instance, must be part of\n     * the given <tt>stream</tt>.\n     * @param streamInactiveHandler the function that will handle\n     *        onended/oninactive events of the stream.\n     * @param trackMediaType the media type of the JitsiTrack\n     * @param videoType the VideoType for this track if any\n     */\n    constructor(\n            conference,\n            stream,\n            track,\n            streamInactiveHandler,\n            trackMediaType,\n            videoType) {\n        super();\n\n        // aliases for addListener/removeListener\n        this.addEventListener = this.addListener;\n        this.removeEventListener = this.off = this.removeListener;\n\n        /**\n         * Array with the HTML elements that are displaying the streams.\n         * @type {Array}\n         */\n        this.containers = [];\n        this.conference = conference;\n        this.audioLevel = -1;\n        this.type = trackMediaType;\n        this.track = track;\n        this.videoType = videoType;\n        this.handlers = new Map();\n\n        /**\n         * Indicates whether this JitsiTrack has been disposed. If true, this\n         * JitsiTrack is to be considered unusable and operations involving it\n         * are to fail (e.g. {@link JitsiConference#addTrack(JitsiTrack)},\n         * {@link JitsiConference#removeTrack(JitsiTrack)}).\n         * @type {boolean}\n         */\n        this.disposed = false;\n\n        /**\n         * The inactive handler which will be triggered when the underlying\n         * <tt>MediaStream</tt> ends.\n         *\n         * @private\n         * @type {Function}\n         */\n        this._streamInactiveHandler = streamInactiveHandler;\n\n        this._setStream(stream);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Adds onended/oninactive handler to a MediaStream or a MediaStreamTrack.\n     * Firefox doesn't fire a inactive event on the MediaStream, instead it fires\n     * a onended event on the MediaStreamTrack.\n     * @param {Function} handler the handler\n     */\n    _addMediaStreamInactiveHandler(handler) {\n        if (browser.isFirefox()) {\n            this.track.onended = handler;\n        } else {\n            this.stream.oninactive = handler;\n        }\n    }\n\n    /**\n     * Sets handler to the WebRTC MediaStream or MediaStreamTrack object\n     * depending on the passed type.\n     * @param {string} type the type of the handler that is going to be set\n     * @param {Function} handler the handler.\n     */\n    _setHandler(type, handler) {\n        if (!trackHandler2Prop.hasOwnProperty(type)) {\n            logger.error(`Invalid handler type ${type}`);\n\n            return;\n        }\n        if (handler) {\n            this.handlers.set(type, handler);\n        } else {\n            this.handlers.delete(type);\n        }\n\n        if (this.stream) {\n            for (const track of this.stream.getTracks()) {\n                track[trackHandler2Prop[type]] = handler;\n            }\n        }\n    }\n\n    /**\n     * Unregisters all event handlers bound to the underlying media stream/track\n     * @private\n     */\n    _unregisterHandlers() {\n        if (!this.stream) {\n            logger.warn(\n                `${this}: unable to unregister handlers - no stream object`);\n\n            return;\n        }\n\n        for (const type of this.handlers.keys()) {\n            // FIXME Why only video tracks?\n            for (const videoTrack of this.stream.getVideoTracks()) {\n                videoTrack[trackHandler2Prop[type]] = undefined;\n            }\n        }\n        if (this._streamInactiveHandler) {\n            this._addMediaStreamInactiveHandler(undefined);\n        }\n    }\n\n    /**\n     * Sets the stream property of JitsiTrack object and sets all stored\n     * handlers to it.\n     *\n     * @param {MediaStream} stream the new stream.\n     * @protected\n     */\n    _setStream(stream) {\n        if (this.stream === stream) {\n            return;\n        }\n\n        this.stream = stream;\n\n        // TODO Practically, that's like the opposite of _unregisterHandlers\n        // i.e. may be abstracted into a function/method called\n        // _registerHandlers for clarity and easing the maintenance of the two\n        // pieces of source code.\n        if (this.stream) {\n            for (const type of this.handlers.keys()) {\n                this._setHandler(type, this.handlers.get(type));\n            }\n            if (this._streamInactiveHandler) {\n                this._addMediaStreamInactiveHandler(this._streamInactiveHandler);\n            }\n        }\n    }\n\n    /**\n     * Returns the video type (camera or desktop) of this track.\n     */\n    getVideoType() {\n        return this.videoType;\n    }\n\n    /**\n     * Returns the type (audio or video) of this track.\n     */\n    getType() {\n        return this.type;\n    }\n\n    /**\n     * Check if this is an audio track.\n     */\n    isAudioTrack() {\n        return this.getType() === MediaType.AUDIO;\n    }\n\n    /**\n     * Checks whether the underlying WebRTC <tt>MediaStreamTrack</tt> is muted\n     * according to it's 'muted' field status.\n     * @return {boolean} <tt>true</tt> if the underlying\n     * <tt>MediaStreamTrack</tt> is muted or <tt>false</tt> otherwise.\n     */\n    isWebRTCTrackMuted() {\n        return this.track && this.track.muted;\n    }\n\n    /**\n     * Check if this is a video track.\n     */\n    isVideoTrack() {\n        return this.getType() === MediaType.VIDEO;\n    }\n\n    /**\n     * Checks whether this is a local track.\n     * @abstract\n     * @return {boolean} 'true' if it's a local track or 'false' otherwise.\n     */\n    isLocal() {\n        throw new Error('Not implemented by subclass');\n    }\n\n    /**\n     * Check whether this is a local audio track.\n     *\n     * @return {boolean} -  true if track represents a local audio track, false otherwise.\n     */\n    isLocalAudioTrack() {\n        return this.isAudioTrack() && this.isLocal();\n    }\n\n    /**\n     * Returns the WebRTC MediaStream instance.\n     */\n    getOriginalStream() {\n        return this.stream;\n    }\n\n    /**\n     * Returns the ID of the underlying WebRTC Media Stream(if any)\n     * @returns {String|null}\n     */\n    getStreamId() {\n        return this.stream ? this.stream.id : null;\n    }\n\n    /**\n     * Return the underlying WebRTC MediaStreamTrack\n     * @returns {MediaStreamTrack}\n     */\n    getTrack() {\n        return this.track;\n    }\n\n    /**\n     * Return the underlying WebRTC MediaStreamTrack label\n     * @returns {string}\n     */\n    getTrackLabel() {\n        return this.track.label;\n    }\n\n    /**\n     * Returns the ID of the underlying WebRTC MediaStreamTrack(if any)\n     * @returns {String|null}\n     */\n    getTrackId() {\n        return this.track ? this.track.id : null;\n    }\n\n    /**\n     * Return meaningful usage label for this track depending on it's media and\n     * eventual video type.\n     * @returns {string}\n     */\n    getUsageLabel() {\n        if (this.isAudioTrack()) {\n            return 'mic';\n        }\n\n        return this.videoType ? this.videoType : 'default';\n    }\n\n    /**\n     * Eventually will trigger RTCEvents.TRACK_ATTACHED event.\n     * @param container the video/audio container to which this stream is\n     *        attached and for which event will be fired.\n     * @private\n     */\n    _maybeFireTrackAttached(container) {\n        if (this.conference && container) {\n            this.conference._onTrackAttach(this, container);\n        }\n    }\n\n    /**\n     * Attaches the MediaStream of this track to an HTML container.\n     * Adds the container to the list of containers that are displaying the\n     * track.\n     *\n     * @param container the HTML container which can be 'video' or 'audio'\n     * element.\n     *\n     * @returns {void}\n     */\n    attach(container) {\n        if (this.stream) {\n            this._onTrackAttach(container);\n            RTCUtils.attachMediaStream(container, this.stream);\n        }\n        this.containers.push(container);\n        this._maybeFireTrackAttached(container);\n        this._attachTTFMTracker(container);\n    }\n\n    /**\n     * Removes this JitsiTrack from the passed HTML container.\n     *\n     * @param container the HTML container to detach from this JitsiTrack. If\n     * <tt>null</tt> or <tt>undefined</tt>, all containers are removed. A\n     * container can be a 'video', 'audio' or 'object' HTML element instance to\n     * which this JitsiTrack is currently attached.\n     */\n    detach(container) {\n        for (let cs = this.containers, i = cs.length - 1; i >= 0; --i) {\n            const c = cs[i];\n\n            if (!container) {\n                this._onTrackDetach(c);\n                RTCUtils.attachMediaStream(c, null);\n            }\n            if (!container || c === container) {\n                cs.splice(i, 1);\n            }\n        }\n\n        if (container) {\n            this._onTrackDetach(container);\n            RTCUtils.attachMediaStream(container, null);\n        }\n    }\n\n    /**\n     * Called when the track has been attached to a new container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _onTrackAttach(container) { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending JitsiTrack\n    }\n\n    /**\n     * Called when the track has been detached from a container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _onTrackDetach(container) { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending JitsiTrack\n    }\n\n    /**\n     * Attach time to first media tracker only if there is conference and only\n     * for the first element.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _attachTTFMTracker(container) { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending JitsiTrack\n    }\n\n    /**\n     * Removes attached event listeners.\n     *\n     * @returns {Promise}\n     */\n    dispose() {\n        this.removeAllListeners();\n\n        this.disposed = true;\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Returns true if this is a video track and the source of the video is a\n     * screen capture as opposed to a camera.\n     */\n    isScreenSharing() {\n        // FIXME: Should be fixed or removed.\n    }\n\n    /**\n     * Returns id of the track.\n     * @returns {string|null} id of the track or null if this is fake track.\n     */\n    getId() {\n        if (this.stream) {\n            return RTCUtils.getStreamID(this.stream);\n        }\n\n        return null;\n    }\n\n    /**\n     * Checks whether the MediaStream is active/not ended.\n     * When there is no check for active we don't have information and so\n     * will return that stream is active (in case of FF).\n     * @returns {boolean} whether MediaStream is active.\n     */\n    isActive() {\n        if (typeof this.stream.active !== 'undefined') {\n            return this.stream.active;\n        }\n\n        return true;\n    }\n\n    /**\n     * Sets the audio level for the stream\n     * @param {number} audioLevel value between 0 and 1\n     * @param {TraceablePeerConnection} [tpc] the peerconnection instance which\n     * is source for the audio level. It can be <tt>undefined</tt> for\n     * a local track if the audio level was measured outside of the\n     * peerconnection (see /modules/statistics/LocalStatsCollector.js).\n     */\n    setAudioLevel(audioLevel, tpc) {\n        let newAudioLevel = audioLevel;\n\n        // When using getSynchornizationSources on the audio receiver to gather audio levels for\n        // remote tracks, browser reports last known audio levels even when the remote user is\n        // audio muted, we need to reset the value to zero here so that the audio levels are cleared.\n        // Remote tracks have the tpc info present while local tracks do not.\n        if (browser.supportsReceiverStats() && typeof tpc !== 'undefined' && this.isMuted()) {\n            newAudioLevel = 0;\n        }\n\n        if (this.audioLevel !== newAudioLevel) {\n            this.audioLevel = newAudioLevel;\n            this.emit(\n                JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n                newAudioLevel,\n                tpc);\n\n        // LocalStatsCollector reports a value of 0.008 for muted mics\n        // and a value of 0 when there is no audio input.\n        } else if (this.audioLevel === 0\n            && newAudioLevel === 0\n            && this.isLocal()\n            && !this.isWebRTCTrackMuted()) {\n            this.emit(\n                JitsiTrackEvents.NO_AUDIO_INPUT,\n                newAudioLevel);\n        }\n    }\n\n    /**\n     * Returns the msid of the stream attached to the JitsiTrack object or null\n     * if no stream is attached.\n     */\n    getMSID() {\n        const streamId = this.getStreamId();\n        const trackId = this.getTrackId();\n\n        return streamId && trackId ? `${streamId} ${trackId}` : null;\n    }\n\n    /**\n     * Sets new audio output device for track's DOM elements. Video tracks are\n     * ignored.\n     * @param {string} audioOutputDeviceId - id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices(), '' for default device\n     * @emits JitsiTrackEvents.TRACK_AUDIO_OUTPUT_CHANGED\n     * @returns {Promise}\n     */\n    setAudioOutput(audioOutputDeviceId) {\n        if (!RTCUtils.isDeviceChangeAvailable('output')) {\n            return Promise.reject(\n                new Error('Audio output device change is not supported'));\n        }\n\n        // All audio communication is done through audio tracks, so ignore\n        // changing audio output for video tracks at all.\n        if (this.isVideoTrack()) {\n            return Promise.resolve();\n        }\n\n        return (\n            Promise.all(\n                this.containers.map(\n                    element =>\n                        element.setSinkId(audioOutputDeviceId)\n                            .catch(error => {\n                                logger.warn(\n                                    'Failed to change audio output device on'\n                                        + ' element. Default or previously set'\n                                        + ' audio output device will be used.',\n                                    element,\n                                    error);\n                                throw error;\n                            }))\n            )\n                .then(() => {\n                    this.emit(\n                        JitsiTrackEvents.TRACK_AUDIO_OUTPUT_CHANGED,\n                        audioOutputDeviceId);\n                }));\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport JitsiTrackError from '../../JitsiTrackError';\nimport {\n    TRACK_IS_DISPOSED,\n    TRACK_NO_STREAM_FOUND\n} from '../../JitsiTrackErrors';\nimport {\n    LOCAL_TRACK_STOPPED,\n    NO_DATA_FROM_SOURCE,\n    TRACK_MUTE_CHANGED\n} from '../../JitsiTrackEvents';\nimport CameraFacingMode from '../../service/RTC/CameraFacingMode';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport VideoType from '../../service/RTC/VideoType';\nimport {\n    NO_BYTES_SENT,\n    TRACK_UNMUTED,\n    createNoDataFromSourceEvent\n} from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\nimport Statistics from '../statistics/statistics';\n\nimport JitsiTrack from './JitsiTrack';\nimport RTCUtils from './RTCUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * Represents a single media track(either audio or video).\n * One <tt>JitsiLocalTrack</tt> corresponds to one WebRTC MediaStreamTrack.\n */\nexport default class JitsiLocalTrack extends JitsiTrack {\n    /**\n     * Constructs a new JitsiLocalTrack instance.\n     *\n     * @constructor\n     * @param {Object} trackInfo\n     * @param {number} trackInfo.rtcId - The ID assigned by the RTC module.\n     * @param {Object} trackInfo.stream - The WebRTC MediaStream, parent of the track.\n     * @param {Object} trackInfo.track - The underlying WebRTC MediaStreamTrack for new JitsiLocalTrack.\n     * @param {string} trackInfo.mediaType - The MediaType of the JitsiLocalTrack.\n     * @param {string} trackInfo.videoType - The VideoType of the JitsiLocalTrack.\n     * @param {Array<Object>} trackInfo.effects - The effects to be applied to the JitsiLocalTrack.\n     * @param {number} trackInfo.resolution - The the video resolution if it's a video track\n     * @param {string} trackInfo.deviceId - The ID of the local device for this track.\n     * @param {string} trackInfo.facingMode - Thehe camera facing mode used in getUserMedia call (for mobile only).\n     * @param {sourceId} trackInfo.sourceId - The id of the desktop sharing source. NOTE: defined for desktop sharing\n     * tracks only.\n     */\n    constructor({\n        deviceId,\n        facingMode,\n        mediaType,\n        resolution,\n        rtcId,\n        sourceId,\n        sourceType,\n        stream,\n        track,\n        videoType,\n        effects = []\n    }) {\n        super(\n            /* conference */ null,\n            stream,\n            track,\n            /* streamInactiveHandler */ () => this.emit(LOCAL_TRACK_STOPPED),\n            mediaType,\n            videoType);\n\n        this._setEffectInProgress = false;\n        const effect = effects.find(e => e.isEnabled(this));\n\n        if (effect) {\n            this._startStreamEffect(effect);\n        }\n\n        const displaySurface = videoType === VideoType.DESKTOP\n            ? track.getSettings().displaySurface\n            : null;\n\n        /**\n         * Track metadata.\n         */\n        this.metadata = {\n            timestamp: Date.now(),\n            ...displaySurface ? { displaySurface } : {}\n        };\n\n\n        /**\n         * The ID assigned by the RTC module on instance creation.\n         *\n         * @type {number}\n         */\n        this.rtcId = rtcId;\n        this.sourceId = sourceId;\n        this.sourceType = sourceType;\n\n        // Get the resolution from the track itself because it cannot be\n        // certain which resolution webrtc has fallen back to using.\n        this.resolution = track.getSettings().height;\n        this.maxEnabledResolution = resolution;\n\n        // Cache the constraints of the track in case of any this track\n        // model needs to call getUserMedia again, such as when unmuting.\n        this._constraints = track.getConstraints();\n\n        // Safari returns an empty constraints object, construct the constraints using getSettings.\n        if (!Object.keys(this._constraints).length && videoType === VideoType.CAMERA) {\n            this._constraints = {\n                height: track.getSettings().height,\n                width: track.getSettings().width\n            };\n        }\n\n        this.deviceId = deviceId;\n\n        /**\n         * The <tt>Promise</tt> which represents the progress of a previously\n         * queued/scheduled {@link _setMuted} (from the point of view of\n         * {@link _queueSetMuted}).\n         *\n         * @private\n         * @type {Promise}\n         */\n        this._prevSetMuted = Promise.resolve();\n\n        /**\n         * The facing mode of the camera from which this JitsiLocalTrack\n         * instance was obtained.\n         *\n         * @private\n         * @type {CameraFacingMode|undefined}\n         */\n        this._facingMode = facingMode;\n\n        // Currently there is no way to know the MediaStreamTrack ended due to\n        // to device disconnect in Firefox through e.g. \"readyState\" property.\n        // Instead we will compare current track's label with device labels from\n        // enumerateDevices() list.\n        this._trackEnded = false;\n\n        /**\n         * Indicates whether data has been sent or not.\n         */\n        this._hasSentData = false;\n\n        /**\n         * Used only for detection of audio problems. We want to check only once\n         * whether the track is sending data ot not. This flag is set to false\n         * after the check.\n         */\n        this._testDataSent = true;\n\n        // Currently there is no way to determine with what device track was\n        // created (until getConstraints() support), however we can associate\n        // tracks with real devices obtained from enumerateDevices() call as\n        // soon as it's called.\n        // NOTE: this.deviceId corresponds to the device id specified in GUM constraints and this._realDeviceId seems to\n        // correspond to the id of a matching device from the available device list.\n        this._realDeviceId = this.deviceId === '' ? undefined : this.deviceId;\n\n        // The source name that will be signaled for this track.\n        this._sourceName = null;\n\n        this._trackMutedTS = 0;\n\n        this._onDeviceListWillChange = devices => {\n            const oldRealDeviceId = this._realDeviceId;\n\n            this._setRealDeviceIdFromDeviceList(devices);\n\n            if (\n                // Mark track as ended for those browsers that do not support\n                // \"readyState\" property. We do not touch tracks created with\n                // default device ID \"\".\n                (typeof this.getTrack().readyState === 'undefined'\n                    && typeof this._realDeviceId !== 'undefined'\n                    && !devices.find(d => d.deviceId === this._realDeviceId))\n\n                // If there was an associated realDeviceID and after the device change the realDeviceId is undefined\n                // then the associated device has been disconnected and the _trackEnded flag needs to be set. In\n                // addition on some Chrome versions the readyState property is set after the device change event is\n                // triggered which causes issues in jitsi-meet with the selection of a new device because we don't\n                // detect that the old one was removed.\n                || (typeof oldRealDeviceId !== 'undefined' && typeof this._realDeviceId === 'undefined')\n            ) {\n                this._trackEnded = true;\n            }\n        };\n\n        // Subscribe each created local audio track to\n        // RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED event. This is different from\n        // handling this event for remote tracks (which are handled in RTC.js),\n        // because there might be local tracks not attached to a conference.\n        if (this.isAudioTrack() && RTCUtils.isDeviceChangeAvailable('output')) {\n            this._onAudioOutputDeviceChanged = this.setAudioOutput.bind(this);\n            RTCUtils.addListener(\n                RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                this._onAudioOutputDeviceChanged);\n        }\n\n        RTCUtils.addListener(RTCEvents.DEVICE_LIST_WILL_CHANGE, this._onDeviceListWillChange);\n\n        this._initNoDataFromSourceHandlers();\n    }\n\n    /**\n     * Adds stream to conference and marks it as \"unmute\" operation.\n     *\n     * @private\n     * @returns {Promise}\n     */\n    _addStreamToConferenceAsUnmute() {\n        if (!this.conference) {\n            return Promise.resolve();\n        }\n\n        // FIXME it would be good to not included conference as part of this process. Only TraceablePeerConnections to\n        // which the track is attached should care about this action. The TPCs to which the track is not attached can\n        // sync up when track is re-attached. A problem with that is that the \"modify sources\" queue is part of the\n        // JingleSessionPC and it would be excluded from the process. One solution would be to extract class between\n        // TPC and JingleSessionPC which would contain the queue and would notify the signaling layer when local SSRCs\n        // are changed. This would help to separate XMPP from the RTC module.\n        return new Promise((resolve, reject) => {\n            this.conference._addLocalTrackAsUnmute(this)\n                .then(resolve, error => reject(new Error(error)));\n        });\n    }\n\n    /**\n     * Fires NO_DATA_FROM_SOURCE event and logs it to analytics and callstats.\n     *\n     * @private\n     * @returns {void}\n     */\n    _fireNoDataFromSourceEvent() {\n        const value = !this.isReceivingData();\n\n        this.emit(NO_DATA_FROM_SOURCE, value);\n\n        // FIXME: Should we report all of those events\n        Statistics.sendAnalytics(createNoDataFromSourceEvent(this.getType(), value));\n        Statistics.sendLog(JSON.stringify({\n            name: NO_DATA_FROM_SOURCE,\n            log: value\n        }));\n    }\n\n    /**\n     * Sets handlers to the MediaStreamTrack object that will detect camera issues.\n     *\n     * @private\n     * @returns {void}\n     */\n    _initNoDataFromSourceHandlers() {\n        if (!this._isNoDataFromSourceEventsEnabled()) {\n            return;\n        }\n\n        this._setHandler('track_mute', () => {\n            this._trackMutedTS = window.performance.now();\n            this._fireNoDataFromSourceEvent();\n        });\n\n        this._setHandler('track_unmute', () => {\n            this._fireNoDataFromSourceEvent();\n            Statistics.sendAnalyticsAndLog(\n                TRACK_UNMUTED,\n                {\n                    'media_type': this.getType(),\n                    'track_type': 'local',\n                    value: window.performance.now() - this._trackMutedTS\n                });\n        });\n\n        if (this.isVideoTrack() && this.videoType === VideoType.CAMERA) {\n            this._setHandler('track_ended', () => {\n                if (!this.isReceivingData()) {\n                    this._fireNoDataFromSourceEvent();\n                }\n            });\n        }\n    }\n\n    /**\n     * Returns true if no data from source events are enabled for this JitsiLocalTrack and false otherwise.\n     *\n     * @private\n     * @returns {boolean} - True if no data from source events are enabled for this JitsiLocalTrack and false otherwise.\n     */\n    _isNoDataFromSourceEventsEnabled() {\n        // Disable the events for screen sharing.\n        return !this.isVideoTrack() || this.videoType !== VideoType.DESKTOP;\n    }\n\n    /**\n     * Initializes a new Promise to execute {@link #_setMuted}. May be called multiple times in a row and the\n     * invocations of {@link #_setMuted} and, consequently, {@link #mute} and/or {@link #unmute} will be resolved in a\n     * serialized fashion.\n     *\n     * @param {boolean} muted - The value to invoke <tt>_setMuted</tt> with.\n     * @private\n     * @returns {Promise}\n     */\n    _queueSetMuted(muted) {\n        const setMuted = this._setMuted.bind(this, muted);\n\n        this._prevSetMuted = this._prevSetMuted.then(setMuted, setMuted);\n\n        return this._prevSetMuted;\n    }\n\n    /**\n     * Removes stream from conference and marks it as \"mute\" operation.\n     *\n     * @param {Function} successCallback - Callback that will be called when the operation is successful.\n     * @param {Function} errorCallback - Callback that will be called when the operation fails.\n     * @private\n     * @returns {Promise}\n     */\n    _removeStreamFromConferenceAsMute(successCallback, errorCallback) {\n        if (!this.conference) {\n            successCallback();\n\n            return;\n        }\n        this.conference._removeLocalTrackAsMute(this).then(\n            successCallback,\n            error => errorCallback(new Error(error)));\n    }\n\n    /**\n     * Sends mute status for a track to conference if any.\n     *\n     * @param {boolean} mute - If track is muted.\n     * @private\n     * @returns {void}\n     */\n    _sendMuteStatus(mute) {\n        if (this.conference) {\n            this.conference._setTrackMuteStatus(this.getType(), this, mute) && this.conference.room.sendPresence();\n        }\n    }\n\n    /**\n     * Mutes / unmutes this track.\n     *\n     * @param {boolean} muted - If <tt>true</tt>, this track will be muted; otherwise, this track will be unmuted.\n     * @private\n     * @returns {Promise}\n     */\n    _setMuted(muted) {\n        if (this.isMuted() === muted) {\n            return Promise.resolve();\n        }\n\n        if (this.disposed) {\n            return Promise.reject(new JitsiTrackError(TRACK_IS_DISPOSED));\n        }\n\n        let promise = Promise.resolve();\n\n        // A function that will print info about muted status transition\n        const logMuteInfo = () => logger.info(`Mute ${this}: ${muted}`);\n\n        if (this.isAudioTrack()\n                || this.videoType === VideoType.DESKTOP\n                || !browser.doesVideoMuteByStreamRemove()) {\n            logMuteInfo();\n\n            // If we have a stream effect that implements its own mute functionality, prioritize it before\n            // normal mute e.g. the stream effect that implements system audio sharing has a custom\n            // mute state in which if the user mutes, system audio still has to go through.\n            if (this._streamEffect && this._streamEffect.setMuted) {\n                this._streamEffect.setMuted(muted);\n            } else if (this.track) {\n                this.track.enabled = !muted;\n            }\n        } else if (muted) {\n            promise = new Promise((resolve, reject) => {\n                logMuteInfo();\n                this._removeStreamFromConferenceAsMute(\n                    () => {\n                        if (this._streamEffect) {\n                            this._stopStreamEffect();\n                        }\n\n                        // FIXME: Maybe here we should set the SRC for the\n                        // containers to something\n                        // We don't want any events to be fired on this stream\n                        this._unregisterHandlers();\n                        this.stopStream();\n                        this._setStream(null);\n                        resolve();\n                    },\n                    reject);\n            });\n        } else {\n            logMuteInfo();\n\n            // This path is only for camera.\n            const streamOptions = {\n                cameraDeviceId: this.getDeviceId(),\n                devices: [ MediaType.VIDEO ],\n                effects: this._streamEffect ? [ this._streamEffect ] : [],\n                facingMode: this.getCameraFacingMode()\n            };\n\n            promise\n                = RTCUtils.obtainAudioAndVideoPermissions(Object.assign(\n                    {},\n                    streamOptions,\n                    { constraints: { video: this._constraints } }));\n\n            promise = promise.then(streamsInfo => {\n                // The track kind for presenter track is video as well.\n                const mediaType = this.getType() === MediaType.PRESENTER ? MediaType.VIDEO : this.getType();\n                const streamInfo = streamsInfo.find(info => info.track.kind === mediaType);\n\n                if (streamInfo) {\n                    this._setStream(streamInfo.stream);\n                    this.track = streamInfo.track;\n\n                    // This is not good when video type changes after\n                    // unmute, but let's not crash here\n                    if (this.videoType !== streamInfo.videoType) {\n                        logger.warn(\n                            `${this}: video type has changed after unmute!`,\n                            this.videoType, streamInfo.videoType);\n                        this.videoType = streamInfo.videoType;\n                    }\n                } else {\n                    throw new JitsiTrackError(TRACK_NO_STREAM_FOUND);\n                }\n\n                if (this._streamEffect) {\n                    this._startStreamEffect(this._streamEffect);\n                }\n\n                this.containers.map(\n                    cont => RTCUtils.attachMediaStream(cont, this.stream));\n\n                return this._addStreamToConferenceAsUnmute();\n            });\n        }\n\n        return promise\n            .then(() => {\n                this._sendMuteStatus(muted);\n                this.emit(TRACK_MUTE_CHANGED, this);\n            });\n    }\n\n    /**\n     * Sets real device ID by comparing track information with device information. This is temporary solution until\n     * getConstraints() method will be implemented in browsers.\n     *\n     * @param {MediaDeviceInfo[]} devices - The list of devices obtained from enumerateDevices() call.\n     * @private\n     * @returns {void}\n     */\n    _setRealDeviceIdFromDeviceList(devices) {\n        const track = this.getTrack();\n        const kind = `${track.kind}input`;\n        let device = devices.find(d => d.kind === kind && d.label === track.label);\n\n        if (!device && this._realDeviceId === 'default') { // the default device has been changed.\n            // If the default device was 'A' and the default device is changed to 'B' the label for the track will\n            // remain 'Default - A' but the label for the device in the device list will be updated to 'A'. That's\n            // why in order to match it we need to remove the 'Default - ' part.\n            const label = (track.label || '').replace('Default - ', '');\n\n            device = devices.find(d => d.kind === kind && d.label === label);\n        }\n\n        if (device) {\n            this._realDeviceId = device.deviceId;\n        } else {\n            this._realDeviceId = undefined;\n        }\n    }\n\n    /**\n     * Sets the stream property of JitsiLocalTrack object and sets all stored handlers to it.\n     *\n     * @param {MediaStream} stream - The new MediaStream.\n     * @private\n     * @returns {void}\n     */\n    _setStream(stream) {\n        super._setStream(stream);\n\n        if (stream) {\n            // Store the MSID for video mute/unmute purposes.\n            this.storedMSID = this.getMSID();\n            logger.debug(`Setting new MSID: ${this.storedMSID} on ${this}`);\n        } else {\n            logger.debug(`Setting 'null' stream on ${this}`);\n        }\n    }\n\n    /**\n     * Starts the effect process and returns the modified stream.\n     *\n     * @param {Object} effect - Represents effect instance\n     * @private\n     * @returns {void}\n     */\n    _startStreamEffect(effect) {\n        this._streamEffect = effect;\n        this._originalStream = this.stream;\n        this._setStream(this._streamEffect.startEffect(this._originalStream));\n        this.track = this.stream.getTracks()[0];\n    }\n\n    /**\n     * Stops the effect process and returns the original stream.\n     *\n     * @private\n     * @returns {void}\n     */\n    _stopStreamEffect() {\n        if (this._streamEffect) {\n            this._streamEffect.stopEffect();\n            this._setStream(this._originalStream);\n            this._originalStream = null;\n            this.track = this.stream ? this.stream.getTracks()[0] : null;\n        }\n    }\n\n    /**\n     * Switches the camera facing mode if the WebRTC implementation supports the custom MediaStreamTrack._switchCamera\n     * method. Currently, the method in question is implemented in react-native-webrtc only. When such a WebRTC\n     * implementation is executing, the method is the preferred way to switch between the front/user-facing and the\n     * back/environment-facing cameras because it will likely be (as is the case of react-native-webrtc) noticeably\n     * faster that creating a new MediaStreamTrack via a new getUserMedia call with the switched facingMode constraint\n     * value. Moreover, the approach with a new getUserMedia call may not even work: WebRTC on Android and iOS is\n     * either very slow to open the camera a second time or plainly freezes attempting to do that.\n     *\n     * @returns {void}\n     */\n    _switchCamera() {\n        if (this.isVideoTrack()\n                && this.videoType === VideoType.CAMERA\n                && typeof this.track._switchCamera === 'function') {\n            this.track._switchCamera();\n\n            this._facingMode\n                = this._facingMode === CameraFacingMode.ENVIRONMENT\n                    ? CameraFacingMode.USER\n                    : CameraFacingMode.ENVIRONMENT;\n        }\n    }\n\n    /**\n     * Stops the currently used effect (if there is one) and starts the passed effect (if there is one).\n     *\n     * @param {Object|undefined} effect - The new effect to be set.\n     * @private\n     * @returns {void}\n     */\n    _switchStreamEffect(effect) {\n        if (this._streamEffect) {\n            this._stopStreamEffect();\n            this._streamEffect = undefined;\n        }\n        if (effect) {\n            this._startStreamEffect(effect);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     *\n     * Stops sending the media track. And removes it from the HTML. NOTE: Works for local tracks only.\n     *\n     * @extends JitsiTrack#dispose\n     * @returns {Promise}\n     */\n    dispose() {\n        let promise = Promise.resolve();\n\n        // Remove the effect instead of stopping it so that the original stream is restored\n        // on both the local track and on the peerconnection.\n        if (this._streamEffect) {\n            promise = this.setEffect();\n        }\n\n        if (this.conference) {\n            promise = promise.then(() => this.conference.removeTrack(this));\n        }\n\n        if (this.stream) {\n            this.stopStream();\n            this.detach();\n        }\n\n        RTCUtils.removeListener(RTCEvents.DEVICE_LIST_WILL_CHANGE, this._onDeviceListWillChange);\n\n        if (this._onAudioOutputDeviceChanged) {\n            RTCUtils.removeListener(RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                this._onAudioOutputDeviceChanged);\n        }\n\n        return promise.then(() => super.dispose());\n    }\n\n    /**\n     * Returns facing mode for video track from camera. For other cases (e.g. audio track or 'desktop' video track)\n     * returns undefined.\n     *\n     * @returns {CameraFacingMode|undefined}\n     */\n    getCameraFacingMode() {\n        if (this.isVideoTrack() && this.videoType === VideoType.CAMERA) {\n            // MediaStreamTrack#getSettings() is not implemented in many\n            // browsers, so we need feature checking here. Progress on the\n            // respective browser's implementation can be tracked at\n            // https://bugs.chromium.org/p/webrtc/issues/detail?id=2481 for\n            // Chromium and https://bugzilla.mozilla.org/show_bug.cgi?id=1213517\n            // for Firefox. Even if a browser implements getSettings() already,\n            // it might still not return anything for 'facingMode'.\n            const trackSettings = this.track.getSettings?.();\n\n            if (trackSettings && 'facingMode' in trackSettings) {\n                return trackSettings.facingMode;\n            }\n\n            if (typeof this._facingMode !== 'undefined') {\n                return this._facingMode;\n            }\n\n            // In most cases we are showing a webcam. So if we've gotten here,\n            // it should be relatively safe to assume that we are probably\n            // showing the user-facing camera.\n            return CameraFacingMode.USER;\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Returns device id associated with track.\n     *\n     * @returns {string}\n     */\n    getDeviceId() {\n        return this._realDeviceId || this.deviceId;\n    }\n\n    /**\n     * Get the duration of the track.\n     *\n     * @returns {Number} the duration of the track in seconds\n     */\n    getDuration() {\n        return (Date.now() / 1000) - (this.metadata.timestamp / 1000);\n    }\n\n    /**\n     * Returns the participant id which owns the track.\n     *\n     * @returns {string} the id of the participants. It corresponds to the\n     * Colibri endpoint id/MUC nickname in case of Jitsi-meet.\n     */\n    getParticipantId() {\n        return this.conference && this.conference.myUserId();\n    }\n\n    /**\n     * Returns the source name associated with the jitsi track.\n     *\n     * @returns {string | null} source name\n     */\n    getSourceName() {\n        return this._sourceName;\n    }\n\n    /**\n     * Returns if associated MediaStreamTrack is in the 'ended' state\n     *\n     * @returns {boolean}\n     */\n    isEnded() {\n        if (this.isVideoTrack() && this.isMuted()) {\n            // If a video track is muted the readyState will be ended, that's why we need to rely only on the\n            // _trackEnded flag.\n            return this._trackEnded;\n        }\n\n        return this.getTrack().readyState === 'ended' || this._trackEnded;\n    }\n\n    /**\n     * Returns <tt>true</tt>.\n     *\n     * @returns {boolean} <tt>true</tt>\n     */\n    isLocal() {\n        return true;\n    }\n\n    /**\n     * Returns <tt>true</tt> - if the stream is muted and <tt>false</tt> otherwise.\n     *\n     * @returns {boolean} <tt>true</tt> - if the stream is muted and <tt>false</tt> otherwise.\n     */\n    isMuted() {\n        // this.stream will be null when we mute local video on Chrome\n        if (!this.stream) {\n            return true;\n        }\n        if (this.isVideoTrack() && !this.isActive()) {\n            return true;\n        }\n\n        // If currently used stream effect has its own muted state, use that.\n        if (this._streamEffect && this._streamEffect.isMuted) {\n            return this._streamEffect.isMuted();\n        }\n\n        return !this.track || !this.track.enabled;\n    }\n\n    /**\n     * Checks whether the attached MediaStream is receiving data from source or not. If the stream property is null\n     * (because of mute or another reason) this method will return false.\n     * NOTE: This method doesn't indicate problem with the streams directly. For example in case of video mute the\n     * method will return false or if the user has disposed the track.\n     *\n     * @returns {boolean} true if the stream is receiving data and false this otherwise.\n     */\n    isReceivingData() {\n        if (this.isVideoTrack()\n            && (this.isMuted() || this._stopStreamInProgress || this.videoType === VideoType.DESKTOP)) {\n            return true;\n        }\n\n        if (!this.stream) {\n            return false;\n        }\n\n        // In older version of the spec there is no muted property and readyState can have value muted. In the latest\n        // versions readyState can have values \"live\" and \"ended\" and there is muted boolean property. If the stream is\n        // muted that means that we aren't receiving any data from the source. We want to notify the users for error if\n        // the stream is muted or ended on it's creation.\n\n        // For video blur enabled use the original video stream\n        const stream = this._effectEnabled ? this._originalStream : this.stream;\n\n        return stream.getTracks().some(track =>\n            (!('readyState' in track) || track.readyState === 'live')\n                && (!('muted' in track) || track.muted !== true));\n    }\n\n    /**\n     * Asynchronously mutes this track.\n     *\n     * @returns {Promise}\n     */\n    mute() {\n        return this._queueSetMuted(true);\n    }\n\n    /**\n     * Handles bytes sent statistics. NOTE: used only for audio tracks to detect audio issues.\n     *\n     * @param {TraceablePeerConnection} tpc - The peerconnection that is reporting the bytes sent stat.\n     * @param {number} bytesSent - The new value.\n     * @returns {void}\n     */\n    onByteSentStatsReceived(tpc, bytesSent) {\n        if (bytesSent > 0) {\n            this._hasSentData = true;\n        }\n        const iceConnectionState = tpc.getConnectionState();\n\n        if (this._testDataSent && iceConnectionState === 'connected') {\n            setTimeout(() => {\n                if (!this._hasSentData) {\n                    logger.warn(`${this} 'bytes sent' <= 0: \\\n                        ${bytesSent}`);\n\n                    Statistics.analytics.sendEvent(NO_BYTES_SENT, { 'media_type': this.getType() });\n                }\n            }, 3000);\n            this._testDataSent = false;\n        }\n    }\n\n    /**\n     * Sets the JitsiConference object associated with the track. This is temp solution.\n     *\n     * @param conference - JitsiConference object.\n     * @returns {void}\n     */\n    setConference(conference) {\n        this.conference = conference;\n\n        // We want to keep up with postponed events which should have been fired\n        // on \"attach\" call, but for local track we not always have the\n        // conference before attaching. However this may result in duplicated\n        // events if they have been triggered on \"attach\" already.\n        for (let i = 0; i < this.containers.length; i++) {\n            this._maybeFireTrackAttached(this.containers[i]);\n        }\n    }\n\n    /**\n     * Sets the effect and switches between the modified stream and original one.\n     *\n     * @param {Object} effect - Represents the effect instance to be used.\n     * @returns {Promise}\n     */\n    setEffect(effect) {\n        if (typeof this._streamEffect === 'undefined' && typeof effect === 'undefined') {\n            return Promise.resolve();\n        }\n\n        if (typeof effect !== 'undefined' && !effect.isEnabled(this)) {\n            return Promise.reject(new Error('Incompatible effect instance!'));\n        }\n\n        if (this._setEffectInProgress === true) {\n            return Promise.reject(new Error('setEffect already in progress!'));\n        }\n\n        // In case we have an audio track that is being enhanced with an effect, we still want it to be applied,\n        // even if the track is muted. Where as for video the actual track doesn't exists if it's muted.\n        if (this.isMuted() && !this.isAudioTrack()) {\n            this._streamEffect = effect;\n\n            return Promise.resolve();\n        }\n\n        const conference = this.conference;\n\n        if (!conference) {\n            this._switchStreamEffect(effect);\n            if (this.isVideoTrack()) {\n                this.containers.forEach(cont => RTCUtils.attachMediaStream(cont, this.stream));\n            }\n\n            return Promise.resolve();\n        }\n\n        this._setEffectInProgress = true;\n\n        // TODO: Create new JingleSessionPC method for replacing a stream in JitsiLocalTrack without offer answer.\n        return conference.removeTrack(this)\n            .then(() => {\n                this._switchStreamEffect(effect);\n                if (this.isVideoTrack()) {\n                    this.containers.forEach(cont => RTCUtils.attachMediaStream(cont, this.stream));\n                }\n\n                return conference.addTrack(this);\n            })\n            .then(() => {\n                this._setEffectInProgress = false;\n            })\n            .catch(error => {\n                // Any error will be not recovarable and will trigger CONFERENCE_FAILED event. But let's try to cleanup\n                // everyhting related to the effect functionality.\n                this._setEffectInProgress = false;\n                this._switchStreamEffect();\n                logger.error('Failed to switch to the new stream!', error);\n                throw error;\n            });\n    }\n\n    /**\n     * Sets the source name to be used for signaling the jitsi track.\n     *\n     * @param {string} name The source name.\n     */\n    setSourceName(name) {\n        this._sourceName = name;\n    }\n\n    /**\n     * Stops the associated MediaStream.\n     *\n     * @returns {void}\n     */\n    stopStream() {\n        /**\n         * Indicates that we are executing {@link #stopStream} i.e.\n         * {@link RTCUtils#stopMediaStream} for the <tt>MediaStream</tt>\n         * associated with this <tt>JitsiTrack</tt> instance.\n         *\n         * @private\n         * @type {boolean}\n         */\n        this._stopStreamInProgress = true;\n\n        try {\n            RTCUtils.stopMediaStream(this.stream);\n        } finally {\n            this._stopStreamInProgress = false;\n        }\n    }\n\n    /**\n     * Creates a text representation of this local track instance.\n     *\n     * @return {string}\n     */\n    toString() {\n        return `LocalTrack[${this.rtcId},${this.getType()}]`;\n    }\n\n    /**\n     * Asynchronously unmutes this track.\n     *\n     * @returns {Promise}\n     */\n    unmute() {\n        return this._queueSetMuted(false);\n    }\n}\n","/* Copyright @ 2015 - Present, 8x8 Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport transform from 'sdp-transform';\n\n/**\n * Rewrites the source information in the way sdp-transform expects.\n * Source information is split into multiple ssrc objects each containing\n * an id, attribute and value.\n * @param {Object} media - media description to be modified.\n * @returns {void}\n */\nconst write = function(session, opts) {\n    if (typeof session !== 'undefined' && typeof session.media !== 'undefined' && Array.isArray(session.media)) {\n        session.media.forEach(mLine => {\n            if (mLine.sources && mLine.sources.length) {\n                mLine.ssrcs = [];\n                mLine.sources.forEach(source => {\n                    Object.keys(source).forEach(attribute => {\n                        if (attribute === 'id') {\n                            return;\n                        }\n                        mLine.ssrcs.push({\n                            id: source.id,\n                            attribute,\n                            value: source[attribute]\n                        });\n                    });\n                });\n                delete mLine.sources;\n            }\n\n            // join ssrcs in ssrc groups\n            if (mLine.ssrcGroups && mLine.ssrcGroups.length) {\n                mLine.ssrcGroups.forEach(ssrcGroup => {\n                    if (typeof ssrcGroup.ssrcs !== 'undefined'\n                    && Array.isArray(ssrcGroup.ssrcs)) {\n                        ssrcGroup.ssrcs = ssrcGroup.ssrcs.join(' ');\n                    }\n                });\n            }\n        });\n    }\n\n    return transform.write(session, opts);\n};\n\n/**\n * Rewrites the source information that we get from sdp-transform.\n * All the ssrc lines with different attributes that belong to the\n * same ssrc are grouped into a single soure object with multiple key value pairs.\n * @param {Object} media - media description to be modified.\n * @returns {void}\n */\nconst parse = function(sdp) {\n    const session = transform.parse(sdp);\n\n    if (typeof session !== 'undefined' && typeof session.media !== 'undefined' && Array.isArray(session.media)) {\n        session.media.forEach(mLine => {\n            // group sources attributes by ssrc\n            if (typeof mLine.ssrcs !== 'undefined' && Array.isArray(mLine.ssrcs)) {\n                mLine.sources = [];\n                mLine.ssrcs.forEach(ssrc => {\n                    const found = mLine.sources.findIndex(source => source.id === ssrc.id);\n\n                    if (found > -1) {\n                        mLine.sources[found][ssrc.attribute] = ssrc.value;\n                    } else {\n                        const src = { id: ssrc.id };\n\n                        src[ssrc.attribute] = ssrc.value;\n                        mLine.sources.push(src);\n                    }\n                });\n                delete mLine.ssrcs;\n            }\n\n            // split ssrcs in ssrc groups\n            if (typeof mLine.ssrcGroups !== 'undefined' && Array.isArray(mLine.ssrcGroups)) {\n                mLine.ssrcGroups.forEach(ssrcGroup => {\n                    if (typeof ssrcGroup.ssrcs === 'string') {\n                        ssrcGroup.ssrcs = ssrcGroup.ssrcs.split(' ');\n                    }\n                });\n            }\n        });\n    }\n\n    return session;\n};\n\nexport default {\n    write,\n    parse\n};\n","/* Copyright @ 2015 - Present, 8x8 Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport clonedeep from 'lodash.clonedeep';\n\nimport transform from './transform.js';\n\nconst PLAN_B_MIDS = [ 'audio', 'video', 'data' ];\nconst findSimGroup = ssrcGroup => ssrcGroup.find(grp => grp.semantics === 'SIM');\nconst findFidGroup = ssrcGroup => ssrcGroup.find(grp => grp.semantics === 'FID');\n\n/**\n * Add the ssrcs of the SIM group and their corresponding FID group ssrcs\n * to the m-line.\n * @param {Object} mLine - The m-line to which ssrcs have to be added.\n * @param {Object} simGroup - The SIM group whose ssrcs have to be added to\n * the m-line.\n * @param {Object} sourceGroups - inverted source-group map.\n * @param {Array<Object>} sourceList - array containing all the sources.\n */\nfunction addSimGroupSources(mLine, simGroup, sourceGroups, sourceList) {\n    if (!mLine || !simGroup) {\n        return;\n    }\n    const findSourcebyId = src => sourceList.find(source => source.id.toString() === src);\n\n    simGroup.ssrcs.forEach(src => {\n        mLine.sources.push(findSourcebyId(src));\n\n        // find the related FID group member for this ssrc.\n        const relatedFidGroup = sourceGroups[parseInt(src, 10)].find(grp => grp.semantics === 'FID');\n\n        if (relatedFidGroup) {\n            const relatedSsrc = relatedFidGroup.ssrcs.find(s => s !== src);\n\n            mLine.sources.push(findSourcebyId(relatedSsrc));\n            mLine.ssrcGroups.push(relatedFidGroup);\n        }\n    });\n\n    // Add the SIM group last.\n    mLine.ssrcGroups.push(simGroup);\n}\n\n/**\n * Add ssrcs and ssrc-groups to the m-line. When a primary ssrc, i.e., the\n * first ssrc in a SIM group is passed, all the other ssrcs from the SIM\n * group and the other ssrcs from the related FID groups are added to the same\n * m-line since they all belong to the same remote source. Since the ssrcs are\n * not guaranteed to be in the correct order, try to find if a SIM group exists,\n * if not, just add the FID group.\n * @param {Object} mLine - The m-line to which ssrcs have to be added.\n * @param {Object} ssrc - the primary ssrc.\n * @param {Object} sourceGroups - inverted source-group map.\n * @param {Array<Object>} sourceList - array containing all the sources.\n * @returns {void}\n */\nfunction addSourcesToMline(mLine, ssrc, sourceGroups, sourceList) {\n    if (!mLine || !ssrc) {\n        return;\n    }\n    mLine.sources = [];\n    mLine.ssrcGroups = [];\n\n    // If there are no associated ssrc-groups, just add the ssrc and msid.\n    if (!sourceGroups[ssrc.id]) {\n        mLine.sources.push(ssrc);\n        mLine.msid = ssrc.msid;\n\n        return;\n    }\n    const findSourcebyId = src => sourceList.find(source => source.id.toString() === src);\n\n    // Find the SIM and FID groups that this ssrc belongs to.\n    const simGroup = findSimGroup(sourceGroups[ssrc.id]);\n    const fidGroup = findFidGroup(sourceGroups[ssrc.id]);\n\n    // Add the ssrcs for the SIM group and their corresponding FID groups.\n    if (simGroup) {\n        addSimGroupSources(mLine, simGroup, sourceGroups, sourceList);\n    } else if (fidGroup) {\n        // check if the other ssrc from this FID group is part of a SIM group\n        const otherSsrc = fidGroup.ssrcs.find(s => s !== ssrc);\n        const simGroup2 = findSimGroup(sourceGroups[otherSsrc]);\n\n        if (simGroup2) {\n            addSimGroupSources(mLine, simGroup2, sourceGroups, sourceList);\n        } else {\n            // Add the FID group ssrcs.\n            fidGroup.ssrcs.forEach(src => {\n                mLine.sources.push(findSourcebyId(src));\n            });\n            mLine.ssrcGroups.push(fidGroup);\n        }\n    }\n\n    // Set the msid for the media description using the msid attribute of the ssrcs.\n    mLine.msid = mLine.sources[0].msid;\n}\n\n/**\n * Check if a new SDP requests an ICE restart.\n * @param {Object} - the parsed new SDP\n * @param {Object} - the parsed previous SDP\n * @returns {Boolean} - Returns true if an ICE restart is requested otherwise false.\n */\nfunction checkForIceRestart(newDesc, oldDesc) {\n    if (!newDesc || !oldDesc || newDesc.media.length === 0 || oldDesc.media.length === 0) {\n        return false;\n    }\n\n    const newMLine = newDesc.media[0];\n    const oldMLine = oldDesc.media[0];\n\n    return newMLine.iceUfrag !== oldMLine.iceUfrag || newMLine.icePwd !== oldMLine.icePwd;\n}\n\n/**\n * Returns a rejected m-line (with port 0) if its exists in the provided description.\n * @param {Object} desc - the current remote description.\n * @param {String} mediaType - media type.\n * @returns {Object}\n */\nfunction checkForRejectedMlines(desc, mediaType) {\n    if (!desc || !mediaType) {\n        return null;\n    }\n\n    return desc.media.find(m => m.port === 0 && m.type === mediaType);\n}\n\n/**\n * Checks if there is a mline for the given ssrc or its related primary ssrc.\n * We always implode the SIM group to the first ssrc in the SIM group before sRD,\n * so we also check if mline for that ssrc exists.\n * For example:\n * If the following ssrcs are in a SIM group,\n * <ssrc-group xmlns=\\\"urn:xmpp:jingle:apps:rtp:ssma:0\\\" semantics=\\\"SIM\\\">\n *        <source ssrc=\\\"1806330949\\\"/>\n *        <source ssrc=\\\"4173145196\\\"/>\n *        <source ssrc=\\\"2002632207\\\"/>\n * </ssrc-group>\n * This method returns true for any one of the 3 ssrcs if there is a mline for 1806330949.\n * @param {Object} ssrc - ssrc to check.\n * @param {Object} sourceGroups - inverted source-group map.\n * @param {Array<Object>} mlines - mlines in the description\n\n * @returns {Boolean} - Returns true if mline for the given ssrc or the related primary ssrc\n * exists, returns false otherwise.\n */\nfunction checkIfMlineForSsrcExists(ssrc, sourceGroups, mlines) {\n    const findMatchingMline = mline => {\n        if (mline.sources) {\n            return mline.sources.some(source => source.id === ssrc.id);\n        }\n\n        return false;\n    };\n\n    if (!mlines.find(findMatchingMline)) {\n        // check if this ssrc is member of a SIM group. If so, check if there\n        // is a matching m-line for the primary ssrc of the SIM group.\n        if (!sourceGroups[ssrc.id]) {\n            return false;\n        }\n        const simGroup = findSimGroup(sourceGroups[ssrc.id]);\n        const fidGroup = findFidGroup(sourceGroups[ssrc.id]);\n\n        if (simGroup) {\n            return mlines.some(mline => mline.sources\n                && mline.sources.some(src => src.id.toString() === simGroup.ssrcs[0]));\n        } else if (fidGroup && ssrc.id.toString() !== fidGroup.ssrcs[0]) {\n            const otherSsrc = { id: fidGroup.ssrcs[0] };\n\n            return checkIfMlineForSsrcExists(otherSsrc, sourceGroups, mlines);\n\n        }\n\n        return false;\n    }\n\n    return true;\n}\n\n/**\n * Create an inverted sourceGroup map to put all the grouped ssrcs\n * in the same m-line.\n * @param {Array<Object>} sourceGroups\n * @returns {Object} - An inverted sourceGroup map.\n */\nfunction createSourceGroupMap(sourceGroups) {\n    const ssrc2group = {};\n\n    if (!sourceGroups || !Array.isArray(sourceGroups)) {\n        return ssrc2group;\n    }\n    sourceGroups.forEach(group => {\n        if (group.ssrcs && Array.isArray(group.ssrcs)) {\n            group.ssrcs.forEach(ssrc => {\n                if (typeof ssrc2group[ssrc] === 'undefined') {\n                    ssrc2group[ssrc] = [];\n                }\n                ssrc2group[ssrc].push(group);\n            });\n        }\n    });\n\n    return ssrc2group;\n}\n\n/**\n * Interop provides an API for tranforming a Plan B SDP to a Unified Plan SDP and\n * vice versa.\n */\nexport class Interop {\n    /**\n     * This method transforms a Unified Plan SDP to an equivalent Plan B SDP.\n     * @param {RTCSessionDescription} description - The description in Unified plan format.\n     * @returns RTCSessionDescription - The transformed session description.\n     */\n    toPlanB(description) {\n        if (!description || typeof description.sdp !== 'string') {\n            console.warn('An empty description was passed as an argument.');\n\n            return description;\n        }\n\n        // Objectify the SDP for easier manipulation.\n        const session = transform.parse(description.sdp);\n\n        // If the SDP contains no media, there's nothing to transform.\n        if (!session.media || !session.media.length) {\n            console.warn('The description has no media.');\n\n            return description;\n        }\n\n        // Make sure this is a unified plan sdp\n        if (session.media.every(m => PLAN_B_MIDS.indexOf(m.mid) !== -1)) {\n            console.warn('The description does not look like unified plan sdp');\n\n            return description;\n        }\n\n        const media = {};\n        const sessionMedia = session.media;\n\n        session.media = [];\n        sessionMedia.forEach(mLine => {\n            const type = mLine.type;\n\n            if (type === 'application') {\n                mLine.mid = 'data';\n                media[mLine.mid] = mLine;\n\n                return;\n            }\n            if (typeof media[type] === 'undefined') {\n                const bLine = clonedeep(mLine);\n\n                // Copy the msid attribute to all the ssrcs if they belong to the same source group\n                if (bLine.sources && Array.isArray(bLine.sources)) {\n                    bLine.sources.forEach(source => {\n                        mLine.msid ? source.msid = mLine.msid : delete source.msid;\n                    });\n                }\n\n                // Do not signal the FID groups if there is no msid attribute present\n                // on the sources as sesison-accept with this source info will fail strophe\n                // validation and the session will not be established. This behavior is seen\n                // on Firefox (with RTX enabled) when no video source is added at the join time.\n                // FF generates two recvonly ssrcs with no msid and a corresponding FID group in\n                // this case.\n                if (!bLine.ssrcGroups || !mLine.msid) {\n                    bLine.ssrcGroups = [];\n                }\n                delete bLine.msid;\n                bLine.mid = type;\n                media[type] = bLine;\n            } else if (mLine.msid) {\n                // Add sources and source-groups to the existing m-line of the same media type.\n                if (mLine.sources && Array.isArray(mLine.sources)) {\n                    media[type].sources = (media[type].sources || []).concat(mLine.sources);\n                }\n                if (typeof mLine.ssrcGroups !== 'undefined' && Array.isArray(mLine.ssrcGroups)) {\n                    media[type].ssrcGroups = media[type].ssrcGroups.concat(mLine.ssrcGroups);\n                }\n            }\n        });\n        session.media = Object.values(media);\n\n        // Bundle the media only if it is active.\n        const bundle = [];\n\n        Object.values(media).forEach(mline => {\n            if (mline.direction !== 'inactive') {\n                bundle.push(mline.mid);\n            }\n        });\n\n        // We regenerate the BUNDLE group with the new mids.\n        session.groups.forEach(group => {\n            if (group.type === 'BUNDLE') {\n                group.mids = bundle.join(' ');\n            }\n        });\n\n        // msid semantic\n        session.msidSemantic = {\n            semantic: 'WMS',\n            token: '*'\n        };\n        const resStr = transform.write(session);\n\n        return new RTCSessionDescription({\n            type: description.type,\n            sdp: resStr\n        });\n    }\n\n    /**\n     * This method transforms a Plan B SDP to an equivalent Unified Plan SDP.\n     * @param {RTCSessionDescription} description - The description in plan-b format.\n     * @param {RTCSessionDescription} current - The current description set on\n     * the peerconnection in Unified-plan format, i.e., the readonly attribute\n     * remoteDescription on the RTCPeerConnection object.\n     * @returns RTCSessionDescription - The transformed session description.\n     */\n    toUnifiedPlan(description, current = null) {\n        if (!description || typeof description.sdp !== 'string') {\n            console.warn('An empty description was passed as an argument.');\n\n            return description;\n        }\n\n        // Objectify the SDP for easier manipulation.\n        const session = transform.parse(description.sdp);\n\n        // If the SDP contains no media, there's nothing to transform.\n        if (!session.media || !session.media.length) {\n            console.warn('The description has no media.');\n\n            return description;\n        }\n\n        // Make sure this is a plan-b sdp.\n        if (session.media.length > 3 || session.media.every(m => PLAN_B_MIDS.indexOf(m.mid) === -1)) {\n            console.warn('The description does not look like plan-b');\n\n            return description;\n        }\n        const currentDesc = current ? transform.parse(current.sdp) : null;\n        const iceRestart = checkForIceRestart(session, currentDesc);\n        const newIceUfrag = session.media[0].iceUfrag;\n        const newIcePwd = session.media[0].icePwd;\n        const newFingerprint = session.media[0].fingerprint;\n        const media = {};\n\n        session.media.forEach(mLine => {\n            const type = mLine.type;\n\n            if (type === 'application') {\n                if (!currentDesc || !currentDesc.media) {\n                    const newMline = clonedeep(mLine);\n\n                    newMline.mid = Object.keys(media).length.toString();\n                    media[mLine.mid] = newMline;\n\n                    return;\n                }\n                const mLineForData = currentDesc.media.findIndex(m => m.type === type);\n\n                if (mLineForData) {\n                    currentDesc.media[mLineForData] = mLine;\n                    currentDesc.media[mLineForData].mid = mLineForData;\n                }\n\n                return;\n            }\n\n            // Create an inverted sourceGroup map here to put all the grouped SSRCs in the same m-line.\n            const ssrc2group = createSourceGroupMap(mLine.ssrcGroups);\n\n            // If there are no sources advertised for a media type, add the description if this is the first\n            // remote offer, i.e., no current description was passed. Chrome in Unified plan does not produce\n            // recvonly ssrcs unlike Firefox and Safari.\n            if (!mLine.sources) {\n                if (!currentDesc) {\n                    const newMline = clonedeep(mLine);\n\n                    newMline.mid = Object.keys(media).length.toString();\n                    media[mLine.mid] = newMline;\n                }\n\n                return;\n            }\n            mLine.sources.forEach((ssrc, idx) => {\n                // Do not add the receive-only ssrcs that Jicofo sends in the source-add.\n                // These ssrcs do not have the \"msid\" attribute set.\n                if (!ssrc.msid) {\n                    return;\n                }\n\n                // If there is no description set on the peerconnection, create new m-lines.\n                if (!currentDesc || !currentDesc.media) {\n                    if (checkIfMlineForSsrcExists(ssrc, ssrc2group, Object.values(media))) {\n                        return;\n                    }\n                    const newMline = clonedeep(mLine);\n\n                    newMline.mid = Object.keys(media).length.toString();\n                    newMline.direction = idx\n                        ? 'sendonly'\n                        : mLine.direction === 'sendonly' ? 'sendonly' : 'sendrecv';\n                    newMline.bundleOnly = undefined;\n                    addSourcesToMline(newMline, ssrc, ssrc2group, mLine.sources);\n                    media[newMline.mid] = newMline;\n\n                    return;\n                }\n\n                // Create if the m-line for the ssrcs already exists.\n                if (checkIfMlineForSsrcExists(ssrc, ssrc2group, currentDesc.media)) {\n                    return;\n                }\n\n                // Check if a rejected m-line with port 0 exists and recycle it if so.\n                const existingMline = checkForRejectedMlines(currentDesc, type);\n\n                if (existingMline) {\n                    existingMline.port = mLine.port;\n                    existingMline.direction = 'sendonly';\n                    addSourcesToMline(existingMline, ssrc, ssrc2group, mLine.sources);\n\n                    return;\n                }\n\n                // Append a new m-line.\n                const newMline = clonedeep(mLine);\n\n                newMline.mid = currentDesc.media.length.toString();\n                newMline.direction = 'sendonly';\n                addSourcesToMline(newMline, ssrc, ssrc2group, mLine.sources);\n                currentDesc.media.push(newMline);\n            });\n        });\n        session.media = currentDesc ? currentDesc.media : Object.values(media);\n        const mids = [];\n\n        session.media.forEach(mLine => {\n            mids.push(mLine.mid);\n            if (iceRestart) {\n                mLine.iceUfrag = newIceUfrag;\n                mLine.icePwd = newIcePwd;\n                mLine.fingerprint = newFingerprint;\n            }\n        });\n\n        // We regenerate the BUNDLE group (since we regenerated the mids)\n        session.groups.forEach(group => {\n            if (group.type === 'BUNDLE') {\n                group.mids = mids.join(' ');\n            }\n        });\n\n        // msid semantic\n        session.msidSemantic = {\n            semantic: 'WMS',\n            token: '*'\n        };\n\n        // Increment the session version every time.\n        session.origin.sessionVersion++;\n        const resultSdp = transform.write(session);\n\n        return new RTCSessionDescription({\n            type: description.type,\n            sdp: resultSdp\n        });\n    }\n}\n","/**\n * Event triggered when participant's muted status changes.\n * @param {string} endpointId the track owner's identifier (MUC nickname)\n * @param {MediaType} mediaType \"audio\" or \"video\"\n * @param {boolean} isMuted the new muted state\n */\nexport const PEER_MUTED_CHANGED = 'signaling.peerMuted';\n\n/**\n * Event triggered when participant's video type changes.\n * @param {string} endpointId the video owner's ID (MUC nickname)\n * @param {VideoType} videoType the new value\n */\nexport const PEER_VIDEO_TYPE_CHANGED = 'signaling.peerVideoType';\n","\nimport Listenable from '../../modules/util/Listenable';\nimport * as MediaType from '../../service/RTC/MediaType';\n\n/**\n * @typedef {string} EndpointId\n */\n/**\n * @typedef {string} SourceName\n */\n/**\n * @typedef {Object} SourceInfo\n *\n * @property {SourceName} sourceName - Name of the media source.\n * @property {boolean} [muted=false] - Tells if the source is muted (paused?).\n * @property {string} [videoType] - Type of the video for video type.\n */\n\n/**\n * Generates a source name.\n *\n * @param {EndpointId} endpointId - Jitsi Endpoint Id.\n * @param {MediaType} mediaType - the media type string.\n * @param {number} trackIdx - Track index (or sender idx? - to be figured out) starting from 0.\n * @returns {SourceName} eg. endpointA-v0\n */\nexport function getSourceNameForJitsiTrack(endpointId, mediaType, trackIdx) {\n    const firstLetterOfMediaType = mediaType.substring(0, 1);\n\n    return `${endpointId}-${firstLetterOfMediaType}${trackIdx}`;\n}\n\n/**\n * Extracts MediaType from give source name (must be in the correct format as generated by\n * {@link getSourceNameForJitsiTrack}).\n *\n * @param {SourceName} sourceName - the source name.\n * @returns {MediaType}\n */\nexport function getMediaTypeFromSourceName(sourceName) {\n    const firstLetterOfMediaTypeIdx = sourceName.indexOf('-') + 1;\n\n    if (firstLetterOfMediaTypeIdx <= 0) {\n        throw new Error(`Invalid source name: ${sourceName}`);\n    }\n\n    const firstLetterOfMediaType = sourceName.substr(firstLetterOfMediaTypeIdx, 1);\n\n    for (const type of Object.values(MediaType)) {\n        if (type.substr(0, 1) === firstLetterOfMediaType) {\n            return type;\n        }\n    }\n\n    throw new Error(`Invalid source name: ${sourceName}`);\n}\n\n/**\n * An object that carries the info about specific media type advertised by\n * participant in the signaling channel.\n * @typedef {Object} PeerMediaInfo\n * @property {boolean} muted indicates if the media is currently muted\n * @property {VideoType|undefined} videoType the type of the video if applicable\n */\n\n/**\n * Interface used to expose the information carried over the signaling channel\n * which is not available to the RTC module in the media SDP.\n *\n * @interface SignalingLayer\n */\nexport default class SignalingLayer extends Listenable {\n\n    /**\n     * Obtains the endpoint ID for given SSRC.\n     * @param {number} ssrc the SSRC number.\n     * @return {string|null} the endpoint ID for given media SSRC.\n     */\n    getSSRCOwner(ssrc) { // eslint-disable-line no-unused-vars\n        throw new Error('not implemented');\n    }\n\n    /**\n     * Obtains the info about given media advertised in the MUC presence of\n     * the participant identified by the given MUC JID.\n     * @param {string} owner the MUC jid of the participant for whom\n     * {@link PeerMediaInfo} will be obtained.\n     * @param {MediaType} mediaType the type of the media for which presence\n     * info will be obtained.\n     * @return {PeerMediaInfo|null} presenceInfo an object with media presence\n     * info or <tt>null</tt> either if there is no presence available for given\n     * JID or if the media type given is invalid.\n     *\n     * @deprecated This method is to be replaced with getPeerSourceInfo.\n     */\n    getPeerMediaInfo(owner, mediaType) { // eslint-disable-line no-unused-vars\n        throw new Error('not implemented');\n    }\n\n    /**\n     * Obtains the info about a source for given name and endpoint ID.\n     * @param {EndpointId} owner - The owner's endpoint ID.\n     * @param {SourceName} sourceName - The name of the source for which the info is to be obtained.\n     * @returns {SourceInfo | undefined}\n     */\n    getPeerSourceInfo(owner, sourceName) { // eslint-disable-line no-unused-vars\n        throw new Error('not implemented');\n    }\n\n    /**\n     * Obtains the source name for given SSRC.\n     * @param {number} ssrc the track's SSRC identifier.\n     * @returns {SourceName | undefined} the track's source name.\n     */\n    getTrackSourceName(ssrc) { // eslint-disable-line no-unused-vars\n        throw new Error('not implemented');\n    }\n}\n","import * as transform from 'sdp-transform';\n\n/**\n * Parses the primary SSRC of given SSRC group.\n * @param {object} group the SSRC group object as defined by the 'sdp-transform'\n * @return {Number} the primary SSRC number\n */\nexport function parsePrimarySSRC(group) {\n    return parseInt(group.ssrcs.split(' ')[0], 10);\n}\n\n/**\n * Parses the secondary SSRC of given SSRC group.\n * @param {object} group the SSRC group object as defined by the 'sdp-transform'\n * @return {Number} the secondary SSRC number\n */\nexport function parseSecondarySSRC(group) {\n    return parseInt(group.ssrcs.split(' ')[1], 10);\n}\n\n/**\n * Tells how many distinct SSRCs are contained in given media line.\n * @param {Object} mLine the media line object as defined by 'sdp-transform' lib\n * @return {number}\n */\nfunction _getSSRCCount(mLine) {\n    if (!mLine.ssrcs) {\n        return 0;\n    }\n\n    return mLine.ssrcs\n        .map(ssrcInfo => ssrcInfo.id)\n        .filter((ssrc, index, array) => array.indexOf(ssrc) === index)\n        .length;\n}\n\n/**\n * A wrapper around 'sdp-transform' media description object which provides\n * utility methods for common SDP/SSRC related operations.\n */\nclass MLineWrap {\n\n    /**\n     * Creates new <tt>MLineWrap</t>>\n     * @param {Object} mLine the media line object as defined by 'sdp-transform'\n     * lib.\n     */\n    constructor(mLine) {\n        if (!mLine) {\n            throw new Error('mLine is undefined');\n        }\n\n        this.mLine = mLine;\n    }\n\n    /**\n     * Getter for the mLine's \"ssrcs\" array. If the array was undefined an empty\n     * one will be preassigned.\n     *\n     * @return {Array<Object>} an array of 'sdp-transform' SSRC attributes\n     * objects.\n     */\n    get ssrcs() {\n        if (!this.mLine.ssrcs) {\n            this.mLine.ssrcs = [];\n        }\n\n        return this.mLine.ssrcs;\n    }\n\n    /**\n     * Setter for the mLine's \"ssrcs\" array.\n     *\n     * @param {Array<Object>} ssrcs an array of 'sdp-transform' SSRC attributes\n     * objects.\n     */\n    set ssrcs(ssrcs) {\n        this.mLine.ssrcs = ssrcs;\n    }\n\n    /**\n     * Returns the direction of the underlying media description.\n     * @return {string} the media direction name as defined in the SDP.\n     */\n    get direction() {\n        return this.mLine.direction;\n    }\n\n    /**\n     * Modifies the direction of the underlying media description.\n     * @param {string} direction the new direction to be set\n     */\n    set direction(direction) {\n        this.mLine.direction = direction;\n    }\n\n    /**\n     * Exposes the SSRC group array of the underlying media description object.\n     * @return {Array.<Object>}\n     */\n    get ssrcGroups() {\n        if (!this.mLine.ssrcGroups) {\n            this.mLine.ssrcGroups = [];\n        }\n\n        return this.mLine.ssrcGroups;\n    }\n\n    /**\n     * Modifies the SSRC groups array of the underlying media description\n     * object.\n     * @param {Array.<Object>} ssrcGroups\n     */\n    set ssrcGroups(ssrcGroups) {\n        this.mLine.ssrcGroups = ssrcGroups;\n    }\n\n    /**\n     * Obtains value from SSRC attribute.\n     * @param {number} ssrcNumber the SSRC number for which attribute is to be\n     * found\n     * @param {string} attrName the name of the SSRC attribute to be found.\n     * @return {string|undefined} the value of SSRC attribute or\n     * <tt>undefined</tt> if no such attribute exists.\n     */\n    getSSRCAttrValue(ssrcNumber, attrName) {\n        const attribute = this.ssrcs.find(\n            ssrcObj => ssrcObj.id === ssrcNumber\n            && ssrcObj.attribute === attrName);\n\n\n        return attribute && attribute.value;\n    }\n\n    /**\n     * Removes all attributes for given SSRC number.\n     * @param {number} ssrcNum the SSRC number for which all attributes will be\n     * removed.\n     */\n    removeSSRC(ssrcNum) {\n        if (!this.mLine.ssrcs || !this.mLine.ssrcs.length) {\n            return;\n        }\n\n        this.mLine.ssrcs\n            = this.mLine.ssrcs.filter(ssrcObj => ssrcObj.id !== ssrcNum);\n    }\n\n    /**\n     * Adds SSRC attribute\n     * @param {object} ssrcObj the SSRC attribute object as defined in\n     * the 'sdp-transform' lib.\n     */\n    addSSRCAttribute(ssrcObj) {\n        this.ssrcs.push(ssrcObj);\n    }\n\n    /**\n     * Finds a SSRC group matching both semantics and SSRCs in order.\n     * @param {string} semantics the name of the semantics\n     * @param {string} [ssrcs] group SSRCs as a string (like it's defined in\n     * SSRC group object of the 'sdp-transform' lib) e.g. \"1232546 342344 25434\"\n     * @return {object|undefined} the SSRC group object or <tt>undefined</tt> if\n     * not found.\n     */\n    findGroup(semantics, ssrcs) {\n        return this.ssrcGroups.find(\n            group =>\n                group.semantics === semantics\n                    && (!ssrcs || ssrcs === group.ssrcs));\n    }\n\n    /**\n     * Finds all groups matching given semantic's name.\n     * @param {string} semantics the name of the semantics\n     * @return {Array.<object>} an array of SSRC group objects as defined by\n     * the 'sdp-transform' lib.\n     */\n    findGroups(semantics) {\n        return this.ssrcGroups.filter(\n            group => group.semantics === semantics);\n    }\n\n    /**\n     * Finds all groups matching given semantic's name and group's primary SSRC.\n     * @param {string} semantics the name of the semantics\n     * @param {number} primarySSRC the primary SSRC number to be matched\n     * @return {Object} SSRC group object as defined by the 'sdp-transform' lib.\n     */\n    findGroupByPrimarySSRC(semantics, primarySSRC) {\n        return this.ssrcGroups.find(\n            group => group.semantics === semantics\n                && parsePrimarySSRC(group) === primarySSRC);\n    }\n\n    /**\n     * @param {string|null} msid the media stream id or <tt>null</tt> to match\n     * the first SSRC object with any 'msid' value.\n     * @return {Object|undefined} the SSRC object as defined by 'sdp-transform'\n     * lib.\n     */\n    findSSRCByMSID(msid) {\n        return this.ssrcs.find(\n            ssrcObj => ssrcObj.attribute === 'msid'\n                && (msid === null || ssrcObj.value === msid));\n    }\n\n    /**\n     * Gets the SSRC count for the underlying media description.\n     * @return {number}\n     */\n    getSSRCCount() {\n        return _getSSRCCount(this.mLine);\n    }\n\n    /**\n     * Checks whether the underlying media description contains any SSRC groups.\n     * @return {boolean} <tt>true</tt> if there are any SSRC groups or\n     * <tt>false</tt> otherwise.\n     */\n    containsAnySSRCGroups() {\n        return this.mLine.ssrcGroups !== undefined;\n    }\n\n    /**\n     * Finds the primary video SSRC.\n     * @returns {number|undefined} the primary video ssrc\n     * @throws Error if the underlying media description is not a video\n     */\n    getPrimaryVideoSsrc() {\n        const mediaType = this.mLine.type;\n\n        if (mediaType !== 'video') {\n            throw new Error(\n                `getPrimarySsrc doesn't work with '${mediaType}'`);\n        }\n\n        const numSsrcs = _getSSRCCount(this.mLine);\n\n        if (numSsrcs === 1) {\n            // Not using \"ssrcs\" getter on purpose here\n            return this.mLine.ssrcs[0].id;\n        }\n\n        // Look for a SIM, FID, or FEC-FR group\n        if (this.mLine.ssrcGroups) {\n            const simGroup = this.findGroup('SIM');\n\n            if (simGroup) {\n                return parsePrimarySSRC(simGroup);\n            }\n            const fidGroup = this.findGroup('FID');\n\n            if (fidGroup) {\n                return parsePrimarySSRC(fidGroup);\n            }\n            const fecGroup = this.findGroup('FEC-FR');\n\n            if (fecGroup) {\n                return parsePrimarySSRC(fecGroup);\n            }\n        }\n\n    }\n\n    /**\n     * Obtains RTX SSRC from the underlying video description (the\n     * secondary SSRC of the first \"FID\" group found)\n     * @param {number} primarySsrc the video ssrc for which to find the\n     * corresponding rtx ssrc\n     * @returns {number|undefined} the rtx ssrc (or undefined if there isn't\n     * one)\n     */\n    getRtxSSRC(primarySsrc) {\n        const fidGroup = this.findGroupByPrimarySSRC('FID', primarySsrc);\n\n\n        return fidGroup && parseSecondarySSRC(fidGroup);\n    }\n\n    /**\n     * Obtains all SSRCs contained in the underlying media description.\n     * @return {Array.<number>} an array with all SSRC as numbers.\n     */\n    getSSRCs() {\n        return this.ssrcs\n            .map(ssrcInfo => ssrcInfo.id)\n            .filter((ssrc, index, array) => array.indexOf(ssrc) === index);\n    }\n\n    /**\n     * Obtains primary video SSRCs.\n     * @return {Array.<number>} an array of all primary video SSRCs as numbers.\n     * @throws Error if the wrapped media description is not a video.\n     */\n    getPrimaryVideoSSRCs() {\n        const mediaType = this.mLine.type;\n\n        if (mediaType !== 'video') {\n            throw new Error(\n                `getPrimaryVideoSSRCs doesn't work with ${mediaType}`);\n        }\n\n        const videoSSRCs = this.getSSRCs();\n\n        for (const ssrcGroupInfo of this.ssrcGroups) {\n            // Right now, FID and FEC-FR groups are the only ones we parse to\n            // disqualify streams.  If/when others arise we'll\n            // need to add support for them here\n            if (ssrcGroupInfo.semantics === 'FID'\n                    || ssrcGroupInfo.semantics === 'FEC-FR') {\n                // secondary streams should be filtered out\n                const secondarySsrc = parseSecondarySSRC(ssrcGroupInfo);\n\n                videoSSRCs.splice(\n                    videoSSRCs.indexOf(secondarySsrc), 1);\n            }\n        }\n\n        return videoSSRCs;\n    }\n\n    /**\n     * Dumps all SSRC groups of this media description to JSON.\n     */\n    dumpSSRCGroups() {\n        return JSON.stringify(this.mLine.ssrcGroups);\n    }\n\n    /**\n     * Removes all SSRC groups which contain given SSRC number at any position.\n     * @param {number} ssrc the SSRC for which all matching groups are to be\n     * removed.\n     */\n    removeGroupsWithSSRC(ssrc) {\n        if (!this.mLine.ssrcGroups) {\n            return;\n        }\n\n        this.mLine.ssrcGroups = this.mLine.ssrcGroups\n            .filter(groupInfo => groupInfo.ssrcs.indexOf(`${ssrc}`) === -1);\n    }\n\n    /**\n     * Removes groups that match given semantics.\n     * @param {string} semantics e.g. \"SIM\" or \"FID\"\n     */\n    removeGroupsBySemantics(semantics) {\n        if (!this.mLine.ssrcGroups) {\n            return;\n        }\n\n        this.mLine.ssrcGroups\n            = this.mLine.ssrcGroups\n                .filter(groupInfo => groupInfo.semantics !== semantics);\n    }\n\n    /**\n     * Replaces SSRC (does not affect SSRC groups, but only attributes).\n     * @param {number} oldSSRC the old SSRC number\n     * @param {number} newSSRC the new SSRC number\n     */\n    replaceSSRC(oldSSRC, newSSRC) {\n        if (this.mLine.ssrcs) {\n            this.mLine.ssrcs.forEach(ssrcInfo => {\n                if (ssrcInfo.id === oldSSRC) {\n                    ssrcInfo.id = newSSRC;\n                }\n            });\n        }\n    }\n\n    /**\n     * Adds given SSRC group to this media description.\n     * @param {object} group the SSRC group object as defined by\n     * the 'sdp-transform' lib.\n     */\n    addSSRCGroup(group) {\n        this.ssrcGroups.push(group);\n    }\n}\n\n/**\n * Utility class for SDP manipulation using the 'sdp-transform' library.\n *\n * Typical use usage scenario:\n *\n * const transformer = new SdpTransformWrap(rawSdp);\n * const videoMLine = transformer.selectMedia('video);\n * if (videoMLine) {\n *     videoMLiner.addSSRCAttribute({\n *         id: 2342343,\n *         attribute: \"cname\",\n *         value: \"someCname\"\n *     });\n *     rawSdp = transformer.toRawSdp();\n * }\n */\nexport class SdpTransformWrap {\n\n    /**\n     * Creates new instance and parses the raw SDP into objects using\n     * 'sdp-transform' lib.\n     * @param {string} rawSDP the SDP in raw text format.\n     */\n    constructor(rawSDP) {\n        this.parsedSDP = transform.parse(rawSDP);\n    }\n\n    /**\n     * Selects all the m-lines from the SDP for a given media type.\n     *\n     * @param {string} mediaType the name of the media e.g. 'audio', 'video', 'data'.\n     * @return {MLineWrap|null} return {@link MLineWrap} instance for the media line or <tt>null</tt> if not found. The\n     * object returned references the underlying SDP state held by this <tt>SdpTransformWrap</tt> instance (it's not a\n     * copy).\n     */\n    selectMedia(mediaType) {\n        const selectedMLines = this.parsedSDP.media\n            .filter(mLine => mLine.type === mediaType)\n            .map(mLine => new MLineWrap(mLine));\n\n        return selectedMLines ?? null;\n    }\n\n    /**\n     * Converts the currently stored SDP state in this instance to raw text SDP\n     * format.\n     * @return {string}\n     */\n    toRawSDP() {\n        return transform.write(this.parsedSDP);\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport MediaDirection from '../../service/RTC/MediaDirection';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport { getSourceNameForJitsiTrack } from '../../service/RTC/SignalingLayer';\nimport VideoType from '../../service/RTC/VideoType';\nimport FeatureFlags from '../flags/FeatureFlags';\n\nimport { SdpTransformWrap } from './SdpTransformUtil';\n\nconst logger = getLogger(__filename);\n\n/**\n * Fakes local SDP exposed to {@link JingleSessionPC} through the local\n * description getter. Modifies the SDP, so that it will contain muted local\n * video tracks description, even though their underlying {MediaStreamTrack}s\n * are no longer in the WebRTC peerconnection. That prevents from SSRC updates\n * being sent to Jicofo/remote peer and prevents sRD/sLD cycle on the remote\n * side.\n */\nexport default class LocalSdpMunger {\n\n    /**\n     * Creates new <tt>LocalSdpMunger</tt> instance.\n     *\n     * @param {TraceablePeerConnection} tpc\n     * @param {string} localEndpointId - The endpoint id of the local user.\n     */\n    constructor(tpc, localEndpointId) {\n        this.tpc = tpc;\n        this.localEndpointId = localEndpointId;\n    }\n\n    /**\n     * Makes sure that muted local video tracks associated with the parent\n     * {@link TraceablePeerConnection} are described in the local SDP. It's done\n     * in order to prevent from sending 'source-remove'/'source-add' Jingle\n     * notifications when local video track is muted (<tt>MediaStream</tt> is\n     * removed from the peerconnection).\n     *\n     * NOTE 1 video track is assumed\n     *\n     * @param {SdpTransformWrap} transformer the transformer instance which will\n     * be used to process the SDP.\n     * @return {boolean} <tt>true</tt> if there were any modifications to\n     * the SDP wrapped by <tt>transformer</tt>.\n     * @private\n     */\n    _addMutedLocalVideoTracksToSDP(transformer) {\n        // Go over each video tracks and check if the SDP has to be changed\n        const localVideos = this.tpc.getLocalTracks(MediaType.VIDEO);\n\n        if (!localVideos.length) {\n            return false;\n        } else if (localVideos.length !== 1) {\n            logger.error(\n                `${this.tpc} there is more than 1 video track ! `\n                    + 'Strange things may happen !', localVideos);\n        }\n\n        const videoMLine = transformer.selectMedia(MediaType.VIDEO)?.[0];\n\n        if (!videoMLine) {\n            logger.debug(\n                `${this.tpc} unable to hack local video track SDP`\n                    + '- no \"video\" media');\n\n            return false;\n        }\n\n        let modified = false;\n\n        for (const videoTrack of localVideos) {\n            const muted = videoTrack.isMuted();\n            const mediaStream = videoTrack.getOriginalStream();\n            const isCamera = videoTrack.videoType === VideoType.CAMERA;\n\n            // During the mute/unmute operation there are periods of time when\n            // the track's underlying MediaStream is not added yet to\n            // the PeerConnection. The SDP needs to be munged in such case.\n            const isInPeerConnection\n                = mediaStream && this.tpc.isMediaStreamInPc(mediaStream);\n            const shouldFakeSdp = isCamera && (muted || !isInPeerConnection);\n\n            if (!shouldFakeSdp) {\n                continue; // eslint-disable-line no-continue\n            }\n\n            // Inject removed SSRCs\n            const requiredSSRCs\n                = this.tpc.isSimulcastOn()\n                    ? this.tpc.simulcast.ssrcCache\n                    : [ this.tpc.sdpConsistency.cachedPrimarySsrc ];\n\n            if (!requiredSSRCs.length) {\n                logger.error(`No SSRCs stored for: ${videoTrack} in ${this.tpc}`);\n\n                continue; // eslint-disable-line no-continue\n            }\n\n            modified = true;\n\n            // We need to fake sendrecv.\n            // NOTE the SDP produced here goes only to Jicofo and is never set\n            // as localDescription. That's why\n            // TraceablePeerConnection.mediaTransferActive is ignored here.\n            videoMLine.direction = MediaDirection.SENDRECV;\n\n            // Check if the recvonly has MSID\n            const primarySSRC = requiredSSRCs[0];\n\n            // FIXME The cname could come from the stream, but may turn out to\n            // be too complex. It is fine to come up with any value, as long as\n            // we only care about the actual SSRC values when deciding whether\n            // or not an update should be sent.\n            const primaryCname = `injected-${primarySSRC}`;\n\n            for (const ssrcNum of requiredSSRCs) {\n                // Remove old attributes\n                videoMLine.removeSSRC(ssrcNum);\n\n                // Inject\n                videoMLine.addSSRCAttribute({\n                    id: ssrcNum,\n                    attribute: 'cname',\n                    value: primaryCname\n                });\n                videoMLine.addSSRCAttribute({\n                    id: ssrcNum,\n                    attribute: 'msid',\n                    value: videoTrack.storedMSID\n                });\n            }\n            if (requiredSSRCs.length > 1) {\n                const group = {\n                    ssrcs: requiredSSRCs.join(' '),\n                    semantics: 'SIM'\n                };\n\n                if (!videoMLine.findGroup(group.semantics, group.ssrcs)) {\n                    // Inject the group\n                    videoMLine.addSSRCGroup(group);\n                }\n            }\n\n            // Insert RTX\n            // FIXME in P2P RTX is used by Chrome regardless of config option\n            // status. Because of that 'source-remove'/'source-add'\n            // notifications are still sent to remove/add RTX SSRC and FID group\n            if (!this.tpc.options.disableRtx) {\n                this.tpc.rtxModifier.modifyRtxSsrcs2(videoMLine);\n            }\n        }\n\n        return modified;\n    }\n\n    /**\n     * Returns a string that can be set as the MSID attribute for a source.\n     *\n     * @param {string} mediaType - Media type of the source.\n     * @param {string} trackId - Id of the MediaStreamTrack associated with the source.\n     * @param {string} streamId - Id of the MediaStream associated with the source.\n     * @returns {string|null}\n     */\n    _generateMsidAttribute(mediaType, trackId, streamId = null) {\n        if (!(mediaType && trackId)) {\n            logger.warn(`Unable to munge local MSID - track id=${trackId} or media type=${mediaType} is missing`);\n\n            return null;\n        }\n        const pcId = this.tpc.id;\n\n        // Handle a case on Firefox when the browser doesn't produce a 'a:ssrc' line with the 'msid' attribute or has\n        // '-' for the stream id part of the msid line. Jicofo needs an unique identifier to be associated with a ssrc\n        // and uses the msid for that.\n        if (streamId === '-' || !streamId) {\n            return `${this.localEndpointId}-${mediaType}-${pcId} ${trackId}-${pcId}`;\n        }\n\n        return `${streamId}-${pcId} ${trackId}-${pcId}`;\n    }\n\n    /**\n     * Modifies 'cname', 'msid', 'label' and 'mslabel' by appending the id of {@link LocalSdpMunger#tpc} at the end,\n     * preceding by a dash sign.\n     *\n     * @param {MLineWrap} mediaSection - The media part (audio or video) of the session description which will be\n     * modified in place.\n     * @returns {void}\n     * @private\n     */\n    _transformMediaIdentifiers(mediaSection) {\n        const mediaType = mediaSection.mLine?.type;\n        const pcId = this.tpc.id;\n        const sourceToMsidMap = new Map();\n\n        for (const ssrcLine of mediaSection.ssrcs) {\n            switch (ssrcLine.attribute) {\n            case 'cname':\n            case 'label':\n            case 'mslabel':\n                ssrcLine.value = ssrcLine.value && `${ssrcLine.value}-${pcId}`;\n                break;\n            case 'msid': {\n                if (ssrcLine.value) {\n                    const streamAndTrackIDs = ssrcLine.value.split(' ');\n\n                    let streamId = streamAndTrackIDs[0];\n                    const trackId = streamAndTrackIDs[1];\n\n                    // eslint-disable-next-line max-depth\n                    if (FeatureFlags.isMultiStreamSupportEnabled()\n                        && this.tpc.usesUnifiedPlan()\n                        && mediaType === MediaType.VIDEO) {\n\n                        // eslint-disable-next-line max-depth\n                        if (streamId === '-' || !streamId) {\n                            streamId = `${this.localEndpointId}-${mediaType}`;\n                        }\n\n                        // eslint-disable-next-line max-depth\n                        if (!sourceToMsidMap.has(trackId)) {\n                            streamId = `${streamId}-${sourceToMsidMap.size}`;\n                            sourceToMsidMap.set(trackId, streamId);\n                        }\n                    }\n\n                    ssrcLine.value = this._generateMsidAttribute(mediaType, trackId, sourceToMsidMap.get(trackId));\n                } else {\n                    logger.warn(`Unable to munge local MSID - weird format detected: ${ssrcLine.value}`);\n                }\n                break;\n            }\n            }\n        }\n\n        // Additional transformations related to MSID are applicable to Unified-plan implementation only.\n        if (!this.tpc.usesUnifiedPlan()) {\n            return;\n        }\n\n        // If the msid attribute is missing, then remove the ssrc from the transformed description so that a\n        // source-remove is signaled to Jicofo. This happens when the direction of the transceiver (or m-line)\n        // is set to 'inactive' or 'recvonly' on Firefox, Chrome (unified) and Safari.\n        const mediaDirection = mediaSection.mLine?.direction;\n\n        if (mediaDirection === MediaDirection.RECVONLY || mediaDirection === MediaDirection.INACTIVE) {\n            mediaSection.ssrcs = undefined;\n            mediaSection.ssrcGroups = undefined;\n\n        // Add the msid attribute if it is missing when the direction is sendrecv/sendonly. Firefox doesn't produce a\n        // a=ssrc line with msid attribute for p2p connection.\n        } else {\n            const msidLine = mediaSection.mLine?.msid;\n            const trackId = msidLine && msidLine.split(' ')[1];\n            const sources = [ ...new Set(mediaSection.mLine?.ssrcs?.map(s => s.id)) ];\n\n            for (const source of sources) {\n                const msidExists = mediaSection.ssrcs\n                    .find(ssrc => ssrc.id === source && ssrc.attribute === 'msid');\n\n                if (!msidExists) {\n                    const generatedMsid = this._generateMsidAttribute(mediaType, trackId);\n\n                    mediaSection.ssrcs.push({\n                        id: source,\n                        attribute: 'msid',\n                        value: generatedMsid\n                    });\n                }\n            }\n        }\n    }\n\n    /**\n     * Maybe modifies local description to fake local video tracks SDP when\n     * those are muted.\n     *\n     * @param {object} desc the WebRTC SDP object instance for the local\n     * description.\n     * @returns {RTCSessionDescription}\n     */\n    maybeAddMutedLocalVideoTracksToSDP(desc) {\n        if (!desc) {\n            throw new Error('No local description passed in.');\n        }\n\n        const transformer = new SdpTransformWrap(desc.sdp);\n\n        if (this._addMutedLocalVideoTracksToSDP(transformer)) {\n            return new RTCSessionDescription({\n                type: desc.type,\n                sdp: transformer.toRawSDP()\n            });\n        }\n\n        return desc;\n    }\n\n    /**\n     * This transformation will make sure that stream identifiers are unique\n     * across all of the local PeerConnections even if the same stream is used\n     * by multiple instances at the same time.\n     * Each PeerConnection assigns different SSRCs to the same local\n     * MediaStream, but the MSID remains the same as it's used to identify\n     * the stream by the WebRTC backend. The transformation will append\n     * {@link TraceablePeerConnection#id} at the end of each stream's identifier\n     * (\"cname\", \"msid\", \"label\" and \"mslabel\").\n     *\n     * @param {RTCSessionDescription} sessionDesc - The local session\n     * description (this instance remains unchanged).\n     * @return {RTCSessionDescription} - Transformed local session description\n     * (a modified copy of the one given as the input).\n     */\n    transformStreamIdentifiers(sessionDesc) {\n        // FIXME similar check is probably duplicated in all other transformers\n        if (!sessionDesc || !sessionDesc.sdp || !sessionDesc.type) {\n            return sessionDesc;\n        }\n\n        const transformer = new SdpTransformWrap(sessionDesc.sdp);\n        const audioMLine = transformer.selectMedia(MediaType.AUDIO)?.[0];\n\n        if (audioMLine) {\n            this._transformMediaIdentifiers(audioMLine);\n            this._injectSourceNames(audioMLine);\n        }\n\n        const videoMLine = transformer.selectMedia(MediaType.VIDEO)?.[0];\n\n        if (videoMLine) {\n            this._transformMediaIdentifiers(videoMLine);\n            this._injectSourceNames(videoMLine);\n        }\n\n        return new RTCSessionDescription({\n            type: sessionDesc.type,\n            sdp: transformer.toRawSDP()\n        });\n    }\n\n    /**\n     * Injects source names. Source names are need to for multiple streams per endpoint support. The final plan is to\n     * use the \"mid\" attribute for source names, but because the SDP to Jingle conversion still operates in the Plan-B\n     * semantics (one source name per media), a custom \"name\" attribute is injected into SSRC lines..\n     *\n     * @param {MLineWrap} mediaSection - The media part (audio or video) of the session description which will be\n     * modified in place.\n     * @returns {void}\n     * @private\n     */\n    _injectSourceNames(mediaSection) {\n        if (!FeatureFlags.isSourceNameSignalingEnabled()) {\n            return;\n        }\n\n        const sources = [ ...new Set(mediaSection.mLine?.ssrcs?.map(s => s.id)) ];\n        const mediaType = mediaSection.mLine?.type;\n\n        if (!mediaType) {\n            throw new Error('_transformMediaIdentifiers - no media type in mediaSection');\n        }\n\n        for (const source of sources) {\n            const nameExists = mediaSection.ssrcs.find(ssrc => ssrc.id === source && ssrc.attribute === 'name');\n\n            if (!nameExists) {\n                // Inject source names as a=ssrc:3124985624 name:endpointA-v0\n                mediaSection.ssrcs.push({\n                    id: source,\n                    attribute: 'name',\n                    value: getSourceNameForJitsiTrack(this.localEndpointId, mediaType, 0)\n                });\n            }\n        }\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport MediaDirection from '../../service/RTC/MediaDirection';\nimport * as MediaType from '../../service/RTC/MediaType';\n\nimport SDPUtil from './SDPUtil';\nimport { parseSecondarySSRC, SdpTransformWrap } from './SdpTransformUtil';\n\nconst logger = getLogger(__filename);\n\n/**\n * Begin helper functions\n */\n/**\n * Updates or inserts the appropriate rtx information for primarySsrc with\n *  the given rtxSsrc.  If no rtx ssrc for primarySsrc currently exists, it will\n *  add the appropriate ssrc and ssrc group lines.  If primarySsrc already has\n *  an rtx ssrc, the appropriate ssrc and group lines will be updated\n * @param {MLineWrap} mLine\n * @param {object} primarySsrcInfo the info (ssrc, msid & cname) for the\n *  primary ssrc\n * @param {number} rtxSsrc the rtx ssrc to associate with the primary ssrc\n */\nfunction updateAssociatedRtxStream(mLine, primarySsrcInfo, rtxSsrc) {\n    const primarySsrc = primarySsrcInfo.id;\n    const primarySsrcMsid = primarySsrcInfo.msid;\n    const primarySsrcCname = primarySsrcInfo.cname;\n\n    const previousRtxSSRC = mLine.getRtxSSRC(primarySsrc);\n\n    if (previousRtxSSRC === rtxSsrc) {\n        return;\n    }\n    if (previousRtxSSRC) {\n        // Stream already had an rtx ssrc that is different than the one given,\n        //  remove all trace of the old one\n        mLine.removeSSRC(previousRtxSSRC);\n        mLine.removeGroupsWithSSRC(previousRtxSSRC);\n    }\n    mLine.addSSRCAttribute({\n        id: rtxSsrc,\n        attribute: 'cname',\n        value: primarySsrcCname\n    });\n    mLine.addSSRCAttribute({\n        id: rtxSsrc,\n        attribute: 'msid',\n        value: primarySsrcMsid\n    });\n    mLine.addSSRCGroup({\n        semantics: 'FID',\n        ssrcs: `${primarySsrc} ${rtxSsrc}`\n    });\n}\n\n/**\n * End helper functions\n */\n\n/**\n * Adds any missing RTX streams for video streams\n *  and makes sure that they remain consistent\n */\nexport default class RtxModifier {\n    /**\n     * Constructor\n     */\n    constructor() {\n        /**\n         * Map of video ssrc to corresponding RTX\n         *  ssrc\n         */\n        this.correspondingRtxSsrcs = new Map();\n    }\n\n    /**\n     * Clear the cached map of primary video ssrcs to\n     *  their corresponding rtx ssrcs so that they will\n     *  not be used for the next call to modifyRtxSsrcs\n     */\n    clearSsrcCache() {\n        this.correspondingRtxSsrcs.clear();\n    }\n\n    /**\n     * Explicitly set the primary video ssrc -> rtx ssrc\n     *  mapping to be used in modifyRtxSsrcs\n     * @param {Map} ssrcMapping a mapping of primary video\n     *  ssrcs to their corresponding rtx ssrcs\n     */\n    setSsrcCache(ssrcMapping) {\n        logger.debug('Setting ssrc cache to ', ssrcMapping);\n        this.correspondingRtxSsrcs = ssrcMapping;\n    }\n\n    /**\n     * Adds RTX ssrcs for any video ssrcs that don't already have them.  If the video ssrc has been seen before, and\n     * already had an RTX ssrc generated, the same RTX ssrc will be used again.\n     *\n     * @param {string} sdpStr sdp in raw string format\n     * @returns {string} The modified sdp in raw string format.\n     */\n    modifyRtxSsrcs(sdpStr) {\n        let modified = false;\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\n        const videoMLines = sdpTransformer.selectMedia(MediaType.VIDEO);\n\n        if (!videoMLines?.length) {\n            logger.debug(`No 'video' media found in the sdp: ${sdpStr}`);\n\n            return sdpStr;\n        }\n\n        for (const videoMLine of videoMLines) {\n            if (this.modifyRtxSsrcs2(videoMLine)) {\n                modified = true;\n            }\n        }\n\n        return modified ? sdpTransformer.toRawSDP() : sdpStr;\n    }\n\n    /**\n     * Does the same thing as {@link modifyRtxSsrcs}, but takes the {@link MLineWrap} instance wrapping video media as\n     * an argument.\n     * @param {MLineWrap} videoMLine\n     * @return {boolean} <tt>true</tt> if the SDP wrapped by {@link SdpTransformWrap} has been modified or\n     * <tt>false</tt> otherwise.\n     */\n    modifyRtxSsrcs2(videoMLine) {\n        if (videoMLine.direction === MediaDirection.RECVONLY) {\n            return false;\n        }\n        if (videoMLine.getSSRCCount() < 1) {\n            return false;\n        }\n        const primaryVideoSsrcs = videoMLine.getPrimaryVideoSSRCs();\n\n        for (const ssrc of primaryVideoSsrcs) {\n            const msid = videoMLine.getSSRCAttrValue(ssrc, 'msid');\n            const cname = videoMLine.getSSRCAttrValue(ssrc, 'cname');\n            let correspondingRtxSsrc = this.correspondingRtxSsrcs.get(ssrc);\n\n            if (!correspondingRtxSsrc) {\n                // If there's one in the sdp already for it, we'll just set\n                //  that as the corresponding one\n                const previousAssociatedRtxStream = videoMLine.getRtxSSRC(ssrc);\n\n                if (previousAssociatedRtxStream) {\n                    correspondingRtxSsrc = previousAssociatedRtxStream;\n                } else {\n                    correspondingRtxSsrc = SDPUtil.generateSsrc();\n                }\n                this.correspondingRtxSsrcs.set(ssrc, correspondingRtxSsrc);\n            }\n            updateAssociatedRtxStream(\n                videoMLine,\n                {\n                    id: ssrc,\n                    cname,\n                    msid\n                },\n                correspondingRtxSsrc);\n        }\n\n        // FIXME we're not looking into much details whether the SDP has been\n        // modified or not once the precondition requirements are met.\n        return true;\n    }\n\n    /**\n     * Strip all rtx streams from the given sdp.\n     *\n     * @param {string} sdpStr sdp in raw string format\n     * @returns {string} sdp string with all rtx streams stripped\n     */\n    stripRtx(sdpStr) {\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\n        const videoMLines = sdpTransformer.selectMedia(MediaType.VIDEO);\n\n        if (!videoMLines?.length) {\n            logger.debug(`No 'video' media found in the sdp: ${sdpStr}`);\n\n            return sdpStr;\n        }\n\n        for (const videoMLine of videoMLines) {\n            if (videoMLine.direction !== MediaDirection.RECVONLY\n                && videoMLine.getSSRCCount()\n                && videoMLine.containsAnySSRCGroups()) {\n                const fidGroups = videoMLine.findGroups('FID');\n\n                // Remove the fid groups from the mline\n                videoMLine.removeGroupsBySemantics('FID');\n\n                // Get the rtx ssrcs and remove them from the mline\n                for (const fidGroup of fidGroups) {\n                    const rtxSsrc = parseSecondarySSRC(fidGroup);\n\n                    videoMLine.removeSSRC(rtxSsrc);\n                }\n            }\n        }\n\n        return sdpTransformer.toRawSDP();\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport * as MediaType from '../../service/RTC/MediaType';\n\nimport {\n    parsePrimarySSRC,\n    parseSecondarySSRC,\n    SdpTransformWrap\n} from './SdpTransformUtil';\n\nconst logger = getLogger(__filename);\n\n/**\n * Handles the work of keeping video ssrcs consistent across multiple\n * o/a cycles, making it such that all stream operations can be\n * kept local and do not need to be signaled.\n * NOTE: This only keeps the 'primary' video ssrc consistent: meaning\n * the primary video stream\n */\nexport default class SdpConsistency {\n    /**\n     * Constructor\n     * @param {string} logPrefix the log prefix appended to every logged\n     * message, currently used to distinguish for which\n     * <tt>TraceablePeerConnection</tt> the instance works.\n     */\n    constructor(logPrefix) {\n        this.clearVideoSsrcCache();\n        this.logPrefix = logPrefix;\n    }\n\n    /**\n     * Clear the cached video primary and primary rtx ssrcs so that\n     *  they will not be used for the next call to\n     *  makeVideoPrimarySsrcsConsistent\n     */\n    clearVideoSsrcCache() {\n        this.cachedPrimarySsrc = null;\n        this.injectRecvOnly = false;\n    }\n\n    /**\n     * Explicitly set the primary ssrc to be used in\n     *  makeVideoPrimarySsrcsConsistent\n     * @param {number} primarySsrc the primarySsrc to be used\n     *  in future calls to makeVideoPrimarySsrcsConsistent\n     * @throws Error if <tt>primarySsrc</tt> is not a number\n     */\n    setPrimarySsrc(primarySsrc) {\n        if (typeof primarySsrc !== 'number') {\n            throw new Error('Primary SSRC must be a number!');\n        }\n        this.cachedPrimarySsrc = primarySsrc;\n    }\n\n    /**\n     * Checks whether or not there is a primary video SSRC cached already.\n     * @return {boolean}\n     */\n    hasPrimarySsrcCached() {\n        return Boolean(this.cachedPrimarySsrc);\n    }\n\n    /**\n     * Given an sdp string, either:\n     *  1) record the primary video and primary rtx ssrcs to be\n     *   used in future calls to makeVideoPrimarySsrcsConsistent or\n     *  2) change the primary and primary rtx ssrcs in the given sdp\n     *   to match the ones previously cached\n     * @param {string} sdpStr the sdp string to (potentially)\n     *  change to make the video ssrcs consistent\n     * @returns {string} a (potentially) modified sdp string\n     *  with ssrcs consistent with this class' cache\n     */\n    makeVideoPrimarySsrcsConsistent(sdpStr) {\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\n        const videoMLine = sdpTransformer.selectMedia(MediaType.VIDEO)?.[0];\n\n        if (!videoMLine) {\n            logger.debug(`${this.logPrefix} no 'video' media found in the sdp: ${sdpStr}`);\n\n            return sdpStr;\n        }\n\n        if (videoMLine.direction === 'recvonly') {\n            // If the mline is recvonly, we'll add the primary\n            //  ssrc as a recvonly ssrc\n            if (this.cachedPrimarySsrc && this.injectRecvOnly) {\n                videoMLine.addSSRCAttribute({\n                    id: this.cachedPrimarySsrc,\n                    attribute: 'cname',\n                    value: `recvonly-${this.cachedPrimarySsrc}`\n                });\n            } else {\n                logger.info(`${this.logPrefix} no SSRC found for the recvonly video stream!`);\n            }\n        } else {\n            const newPrimarySsrc = videoMLine.getPrimaryVideoSsrc();\n\n            if (!newPrimarySsrc) {\n                logger.info(`${this.logPrefix} sdp-consistency couldn't parse new primary ssrc`);\n\n                return sdpStr;\n            }\n            if (this.cachedPrimarySsrc) {\n                videoMLine.replaceSSRC(newPrimarySsrc, this.cachedPrimarySsrc);\n                for (const group of videoMLine.ssrcGroups) {\n                    if (group.semantics === 'FID') {\n                        const primarySsrc = parsePrimarySSRC(group);\n                        const rtxSsrc = parseSecondarySSRC(group);\n\n                        // eslint-disable-next-line max-depth\n                        if (primarySsrc === newPrimarySsrc) {\n                            group.ssrcs\n                                = `${this.cachedPrimarySsrc} ${rtxSsrc}`;\n                        }\n                    }\n                }\n            } else {\n                this.cachedPrimarySsrc = newPrimarySsrc;\n            }\n            this.injectRecvOnly = true;\n        }\n\n        return sdpTransformer.toRawSDP();\n    }\n}\n","import MediaDirection from '../../service/RTC/MediaDirection';\nimport * as MediaType from '../../service/RTC/MediaType';\n\nimport * as transform from 'sdp-transform';\n\nconst DEFAULT_NUM_OF_LAYERS = 3;\n\ninterface Description {\n    type: RTCSdpType;\n    sdp: string;\n}\n\ninterface Options {\n    numOfLayers?: number\n}\n\n/**\n * This class handles SDP munging for enabling simulcast for local video streams in Unified plan. A set of random SSRCs\n * are generated for the higher layer streams and they are cached for a given mid. The cached SSRCs are then reused on\n * the subsequent iterations while munging the local description. This class also handles imploding of the simulcast\n * SSRCs for remote endpoints into the primary FID group in remote description since Jicofo signals all SSRCs relevant\n * to a given endpoint.\n */\nexport default class SdpSimulcast {\n    private _options: Options;\n    private _ssrcCache: Map<string, Array<number>>;\n\n    /**\n     * Creates a new instance.\n     *\n     * @param options\n     */\n    constructor(options: Options) {\n        this._options = options;\n        this._ssrcCache = new Map();\n\n        if (!this._options.numOfLayers) {\n            this._options.numOfLayers = DEFAULT_NUM_OF_LAYERS;\n        }\n    }\n\n    /**\n     * Updates the given media description using the SSRCs that were cached for the mid associated\n     * with the media description and returns the modified media description.\n     *\n     * @param mLine\n     * @returns\n     */\n     _fillSsrcsFromCache(mLine: transform.MediaDescription) : any {\n        const mid = mLine.mid;\n        const cachedSsrcs = this._ssrcCache.get(mid);\n        const newSsrcs = this._parseSimLayers(mLine);\n        const newMsid = this._getSsrcAttribute(mLine, newSsrcs[0], 'msid');\n        const newCname = this._getSsrcAttribute(mLine, newSsrcs[0], 'cname');\n\n        mLine.ssrcs = [];\n        mLine.ssrcGroups = [];\n\n        for (const ssrc of cachedSsrcs) {\n            mLine.ssrcs.push({\n                id: ssrc,\n                attribute: 'msid',\n                value: newMsid\n            });\n            mLine.ssrcs.push({\n                id: ssrc,\n                attribute: 'cname',\n                value: newCname\n            });\n        }\n\n        mLine.ssrcGroups.push({\n            semantics: 'SIM',\n            ssrcs: cachedSsrcs.join(' ')\n        });\n\n        return mLine;\n    }\n\n    /**\n     * Generates a new set of SSRCs for the higher simulcast layers/streams and adds the attributes and SIM group to\n     * the given media description and returns the modified media description.\n     *\n     * @param mLine\n     * @param primarySsrc\n     * @returns\n     */\n    _generateNewSsrcsForSimulcast(mLine: transform.MediaDescription, primarySsrc: number) : any {\n        const cname = this._getSsrcAttribute(mLine, primarySsrc, 'cname');\n        let msid = this._getSsrcAttribute(mLine, primarySsrc, 'msid');\n        const addAssociatedAttributes = (mLine: transform.MediaDescription, ssrc: number) => {\n            mLine.ssrcs.push({\n                id: ssrc,\n                attribute: 'cname',\n                value: cname\n            });\n            mLine.ssrcs.push({\n                id: ssrc,\n                attribute: 'msid',\n                value: msid\n            });\n        }\n\n        // In Unified-plan mode, the a=ssrc lines with the msid attribute are not present (only cname attributes are\n        // present) in the answers that Chrome and Safari generate for an offer received from Jicofo. Generate these\n        // a=ssrc lines using the msid values from the a=msid line.\n        if (!msid) {\n            msid = mLine.msid;\n            const primarySsrcs = mLine.ssrcs;\n\n            primarySsrcs.forEach(ssrc => {\n                mLine.ssrcs.push({\n                    id: ssrc.id,\n                    attribute: 'msid',\n                    value: msid\n                });\n            })\n        }\n\n        // Generate SIM layers.\n        const simSsrcs = [];\n    \n        for (let i = 0; i < this._options.numOfLayers - 1; ++i) {\n            const simSsrc = this._generateSsrc();\n\n            addAssociatedAttributes(mLine, simSsrc);\n            simSsrcs.push(simSsrc);\n        }\n\n        mLine.ssrcGroups = mLine.ssrcGroups || [];\n        mLine.ssrcGroups.push({\n            semantics: 'SIM',\n            ssrcs: primarySsrc + ' ' + simSsrcs.join(' ')\n        });\n    \n        return mLine;\n    }\n\n    /**\n     * Returns a random number to be used for the SSRC.\n     *\n     * @returns\n     */\n    _generateSsrc() : number {\n        const max = 0xffffffff;\n\n        return Math.floor(Math.random() * max);\n    }\n\n    /**\n     * Returns the requested attribute value for a SSRC from a given media description.\n     *\n     * @param mLine\n     * @param ssrc\n     * @param attributeName\n     * @returns\n     */\n    _getSsrcAttribute(mLine: transform.MediaDescription, ssrc: number, attributeName: string) : string | undefined {\n        return mLine.ssrcs?.find(\n            ssrcInfo => Number(ssrcInfo.id) === ssrc\n            && ssrcInfo.attribute === attributeName)?.value;\n    }\n\n    /**\n     * Returns an array of all the primary SSRCs in the SIM group for a given media description.\n     *\n     * @param mLine\n     * @returns\n     */\n    _parseSimLayers(mLine: transform.MediaDescription) : Array<number> | null {\n        const simGroup = mLine.ssrcGroups?.find(group => group.semantics === 'SIM');\n\n        if (simGroup) {\n            return simGroup.ssrcs.split(' ').map(ssrc => Number(ssrc));\n        }\n\n        if (mLine.ssrcs?.length) {\n            return [ Number(mLine.ssrcs[0].id) ];\n        }\n\n        return null;\n    }\n\n    /**\n     * Munges the given media description to enable simulcast for the video media sections that are in either have\n     * SENDRECV or SENDONLY as the media direction thereby ignoring all the RECVONLY transceivers created for remote\n     * endpoints.\n     * NOTE: This needs to be called only when simulcast is enabled.\n     *\n     * @param description\n     * @returns\n     */\n    mungeLocalDescription(description: Description) : Description {\n        if (!description || !description.sdp) {\n            return description;\n        }\n        const session = transform.parse(description.sdp);\n\n        for (let media of session.media) {\n            // Ignore recvonly and inactive transceivers created for remote sources.\n            if (media.direction === MediaDirection.RECVONLY || media.direction === MediaDirection.INACTIVE) {\n                continue;\n            }\n\n            // Ignore audio m-lines.\n            if (media.type !== MediaType.VIDEO) {\n                continue;\n            }\n            const mid = media.mid;\n            const numSsrcs = new Set(media.ssrcs?.map(ssrcInfo => ssrcInfo.id));\n            const numGroups = media.ssrcGroups?.length ?? 0;\n            let primarySsrc: number;\n\n            // Do not munge if the description has no ssrcs or if simulcast is already enabled.\n            if (numSsrcs.size === 0 || numSsrcs.size > 2 || (numSsrcs.size === 2 && numGroups === 0)) {\n                continue;\n            }\n            if (numSsrcs.size === 1) {\n                primarySsrc = Number(media.ssrcs[0]?.id);\n            } else {\n                const fidGroup = media.ssrcGroups.find(group => group.semantics === 'FID');\n\n                if (fidGroup) {\n                    primarySsrc = Number(fidGroup.ssrcs.split(' ')[0]);\n                }\n            }\n\n            if (this._ssrcCache.has(mid)) {\n                media = this._fillSsrcsFromCache(media);\n            } else {\n                media = this._generateNewSsrcsForSimulcast(media, primarySsrc);\n                const simulcastSsrcs = this._parseSimLayers(media);\n\n                // Update the SSRCs in the cache so that they can re-used for the same mid again.\n                this._ssrcCache.set(mid, simulcastSsrcs);\n            }\n        }\n\n        return new RTCSessionDescription({\n            type: description.type,\n            sdp: transform.write(session)\n        });\n    }\n\n    /**\n     * Munges the given media description by removing the SSRCs and related FID groups for the higher layer streams.\n     *\n     * @param description\n     * @returns\n     */\n    mungeRemoteDescription(description: Description) : Description {\n        if (!description || !description.sdp) {\n            return description;\n        }\n\n        const session = transform.parse(description.sdp);\n\n        for (const media of session.media) {\n            if (media.type !== MediaType.VIDEO) {\n                continue;\n            }\n\n            if (media.direction !== MediaDirection.SENDONLY) {\n                continue;\n            }\n\n            // Ignore m-lines that do not have any SSRCs or SSRC groups. These are the ones associated with remote\n            // sources that have left the call. These will be recycled when a new remote source joins the call.\n            if (!media.ssrcGroups?.length || !media?.ssrcs.length) {\n                continue;\n            }\n\n            // Cache the SSRCs and the source groups.\n            const mungedSsrcs = new Set(media.ssrcs.slice());\n            const mungedSsrcGroups = new Set(media.ssrcGroups.slice());\n            const fidGroups = media.ssrcGroups.filter(group => group.semantics === 'FID');\n            const simGroup = media.ssrcGroups.find(group => group.semantics === 'SIM');\n            const primarySsrc = simGroup?.ssrcs.split(' ')[0];;\n\n            // When simulcast and RTX are both enabled.\n            if (fidGroups.length && simGroup) {\n                const fidGroup = fidGroups.find(group => group.ssrcs.includes(primarySsrc));\n                const secondarySsrc = fidGroup.ssrcs.split(' ')[1];\n\n                for (const ssrcGroup of media.ssrcGroups) {\n                    if (ssrcGroup !== fidGroup) {\n                        mungedSsrcGroups.delete(ssrcGroup);\n                    }\n                }\n                for (const ssrc of media.ssrcs) {\n                    if (ssrc.id.toString() !== primarySsrc\n                        && ssrc.id.toString() !== secondarySsrc) {\n                        mungedSsrcs.delete(ssrc);\n                    }\n                }\n\n            // When simulcast is enabled but RTX is disabled.\n            } else if (simGroup) {\n                mungedSsrcGroups.delete(simGroup);\n\n                for (const ssrc of media.ssrcs) {\n                    if (ssrc.id.toString() !== primarySsrc) {\n                        mungedSsrcs.delete(ssrc);\n                    }\n                }\n            }\n\n            media.ssrcs = Array.from(mungedSsrcs);\n            media.ssrcGroups = Array.from(mungedSsrcGroups);\n        }\n\n        return new RTCSessionDescription ({\n            type: description.type,\n            sdp: transform.write(session)\n        });\n    }\n}\n","import * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport { createTtfmEvent } from '../../service/statistics/AnalyticsEvents';\nimport Statistics from '../statistics/statistics';\n\nimport JitsiTrack from './JitsiTrack';\n\nconst logger = require('@jitsi/logger').getLogger(__filename);\n\nconst RTCEvents = require('../../service/RTC/RTCEvents');\n\nlet ttfmTrackerAudioAttached = false;\nlet ttfmTrackerVideoAttached = false;\n\n/**\n * List of container events that we are going to process. _onContainerEventHandler will be added as listener to the\n * container for every event in the list.\n */\nconst containerEvents = [ 'abort', 'canplaythrough', 'ended', 'error' ];\n\n/* eslint-disable max-params */\n\n/**\n * Represents a single media track (either audio or video).\n */\nexport default class JitsiRemoteTrack extends JitsiTrack {\n    /**\n     * Creates new JitsiRemoteTrack instance.\n     * @param {RTC} rtc the RTC service instance.\n     * @param {JitsiConference} conference the conference to which this track\n     *        belongs to\n     * @param {string} ownerEndpointId the endpoint ID of the track owner\n     * @param {MediaStream} stream WebRTC MediaStream, parent of the track\n     * @param {MediaStreamTrack} track underlying WebRTC MediaStreamTrack for\n     *        the new JitsiRemoteTrack\n     * @param {MediaType} mediaType the type of the media\n     * @param {VideoType} videoType the type of the video if applicable\n     * @param {number} ssrc the SSRC number of the Media Stream\n     * @param {boolean} muted the initial muted state\n     * @param {boolean} isP2P indicates whether or not this track belongs to a\n     * P2P session\n     * @param {String} sourceName the source name signaled for the track\n     * @throws {TypeError} if <tt>ssrc</tt> is not a number.\n     * @constructor\n     */\n    constructor(\n            rtc,\n            conference,\n            ownerEndpointId,\n            stream,\n            track,\n            mediaType,\n            videoType,\n            ssrc,\n            muted,\n            isP2P,\n            sourceName) {\n        super(\n            conference,\n            stream,\n            track,\n            () => {\n                // Nothing to do if the track is inactive.\n            },\n            mediaType,\n            videoType);\n        this.rtc = rtc;\n\n        // Prevent from mixing up type of SSRC which should be a number\n        if (typeof ssrc !== 'number') {\n            throw new TypeError(`SSRC ${ssrc} is not a number`);\n        }\n        this.ssrc = ssrc;\n        this.ownerEndpointId = ownerEndpointId;\n        this.muted = muted;\n        this.isP2P = isP2P;\n        this._sourceName = sourceName;\n\n        logger.debug(`New remote track added: ${this}`);\n\n        // we want to mark whether the track has been ever muted\n        // to detect ttfm events for startmuted conferences, as it can\n        // significantly increase ttfm values\n        this.hasBeenMuted = muted;\n\n        // Bind 'onmute' and 'onunmute' event handlers\n        if (this.rtc && this.track) {\n            this._bindTrackHandlers();\n        }\n        this._containerHandlers = {};\n        containerEvents.forEach(event => {\n            this._containerHandlers[event] = this._containerEventHandler.bind(this, event);\n        });\n    }\n\n    /* eslint-enable max-params */\n    /**\n     * Attaches the track handlers.\n     *\n     * @returns {void}\n     */\n    _bindTrackHandlers() {\n        this.track.addEventListener('mute', () => this._onTrackMute());\n        this.track.addEventListener('unmute', () => this._onTrackUnmute());\n        this.track.addEventListener('ended', () => {\n            logger.debug(`\"onended\" event(${Date.now()}): ${this}`);\n        });\n    }\n\n    /**\n     * Callback invoked when the track is muted. Emits an event notifying\n     * listeners of the mute event.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onTrackMute() {\n        logger.debug(`\"onmute\" event(${Date.now()}): ${this}`);\n\n        this.rtc.eventEmitter.emit(RTCEvents.REMOTE_TRACK_MUTE, this);\n    }\n\n    /**\n     * Callback invoked when the track is unmuted. Emits an event notifying\n     * listeners of the mute event.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onTrackUnmute() {\n        logger.debug(`\"onunmute\" event(${Date.now()}): ${this}`);\n\n        this.rtc.eventEmitter.emit(RTCEvents.REMOTE_TRACK_UNMUTE, this);\n    }\n\n    /**\n     * Sets current muted status and fires an events for the change.\n     * @param value the muted status.\n     */\n    setMute(value) {\n        if (this.muted === value) {\n            return;\n        }\n\n        if (value) {\n            this.hasBeenMuted = true;\n        }\n\n        // we can have a fake video stream\n        if (this.stream) {\n            this.stream.muted = value;\n        }\n\n        this.muted = value;\n        this.emit(JitsiTrackEvents.TRACK_MUTE_CHANGED, this);\n    }\n\n    /**\n     * Returns the current muted status of the track.\n     * @returns {boolean|*|JitsiRemoteTrack.muted} <tt>true</tt> if the track is\n     * muted and <tt>false</tt> otherwise.\n     */\n    isMuted() {\n        return this.muted;\n    }\n\n    /**\n     * Returns the participant id which owns the track.\n     *\n     * @returns {string} the id of the participants. It corresponds to the\n     * Colibri endpoint id/MUC nickname in case of Jitsi-meet.\n     */\n    getParticipantId() {\n        return this.ownerEndpointId;\n    }\n\n    /**\n     * Return false;\n     */\n    isLocal() {\n        return false;\n    }\n\n    /**\n     * Returns the synchronization source identifier (SSRC) of this remote\n     * track.\n     *\n     * @returns {number} the SSRC of this remote track.\n     */\n    getSSRC() {\n        return this.ssrc;\n    }\n\n\n    /**\n     * Returns the tracks source name\n     *\n     * @returns {string} the track's source name\n     */\n    getSourceName() {\n        return this._sourceName;\n    }\n\n    /**\n     * Changes the video type of the track.\n     *\n     * @param {string} type - The new video type(\"camera\", \"desktop\").\n     */\n    _setVideoType(type) {\n        if (this.videoType === type) {\n            return;\n        }\n        this.videoType = type;\n        this.emit(JitsiTrackEvents.TRACK_VIDEOTYPE_CHANGED, type);\n    }\n\n    /**\n     * Handles track play events.\n     */\n    _playCallback() {\n        const type = this.isVideoTrack() ? 'video' : 'audio';\n\n        const now = window.performance.now();\n\n        console.log(`(TIME) Render ${type}:\\t`, now);\n        this.conference.getConnectionTimes()[`${type}.render`] = now;\n\n        // The conference can be started without calling GUM\n        // FIXME if there would be a module for connection times this kind\n        // of logic (gumDuration or ttfm) should end up there\n        const gumStart = window.connectionTimes['obtainPermissions.start'];\n        const gumEnd = window.connectionTimes['obtainPermissions.end'];\n        const gumDuration\n            = !isNaN(gumEnd) && !isNaN(gumStart) ? gumEnd - gumStart : 0;\n\n        // Subtract the muc.joined-to-session-initiate duration because jicofo\n        // waits until there are 2 participants to start Jingle sessions.\n        const ttfm = now\n            - (this.conference.getConnectionTimes()['session.initiate']\n                - this.conference.getConnectionTimes()['muc.joined'])\n            - gumDuration;\n\n        this.conference.getConnectionTimes()[`${type}.ttfm`] = ttfm;\n        console.log(`(TIME) TTFM ${type}:\\t`, ttfm);\n\n        Statistics.sendAnalytics(createTtfmEvent(\n            {\n                'media_type': type,\n                muted: this.hasBeenMuted,\n                value: ttfm\n            }));\n\n    }\n\n    /**\n     * Attach time to first media tracker only if there is conference and only\n     * for the first element.\n     * @param container the HTML container which can be 'video' or 'audio'\n     * element.\n     * @private\n     */\n    _attachTTFMTracker(container) {\n        if ((ttfmTrackerAudioAttached && this.isAudioTrack())\n            || (ttfmTrackerVideoAttached && this.isVideoTrack())) {\n            return;\n        }\n\n        if (this.isAudioTrack()) {\n            ttfmTrackerAudioAttached = true;\n        }\n        if (this.isVideoTrack()) {\n            ttfmTrackerVideoAttached = true;\n        }\n\n        container.addEventListener('canplay', this._playCallback.bind(this));\n    }\n\n    /**\n     * Called when the track has been attached to a new container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or 'audio' element.\n     * @private\n     */\n    _onTrackAttach(container) {\n        containerEvents.forEach(event => {\n            container.addEventListener(event, this._containerHandlers[event]);\n        });\n    }\n\n    /**\n     * Called when the track has been detached from a container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or 'audio' element.\n     * @private\n     */\n    _onTrackDetach(container) {\n        containerEvents.forEach(event => {\n            container.removeEventListener(event, this._containerHandlers[event]);\n        });\n    }\n\n    /**\n     * An event handler for events triggered by the attached container.\n     *\n     * @param {string} type - The type of the event.\n     */\n    _containerEventHandler(type) {\n        logger.debug(`${type} handler was called for a container with attached ${this}`);\n    }\n\n    /**\n     * Returns a string with a description of the current status of the track.\n     *\n     * @returns {string}\n     */\n    _getStatus() {\n        const { enabled, muted, readyState } = this.track;\n\n        return `readyState: ${readyState}, muted: ${muted}, enabled: ${enabled}`;\n    }\n\n    /**\n     * Creates a text representation of this remote track instance.\n     * @return {string}\n     */\n    toString() {\n        return `RemoteTrack[userID: ${this.getParticipantId()}, type: ${this.getType()}, ssrc: ${\n            this.getSSRC()}, p2p: ${this.isP2P}, sourceName: ${this._sourceName}, status: ${this._getStatus()}]`;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport transform from 'sdp-transform';\n\nimport MediaDirection from '../../service/RTC/MediaDirection';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport VideoType from '../../service/RTC/VideoType';\nimport browser from '../browser';\n\nconst logger = getLogger(__filename);\nconst DESKTOP_SHARE_RATE = 500000;\nconst LD_BITRATE = 200000;\nconst SD_BITRATE = 700000;\nconst SIM_LAYER_1_RID = '1';\nconst SIM_LAYER_2_RID = '2';\nconst SIM_LAYER_3_RID = '3';\n\nexport const HD_BITRATE = 2500000;\nexport const HD_SCALE_FACTOR = 1;\nexport const LD_SCALE_FACTOR = 4;\nexport const SD_SCALE_FACTOR = 2;\nexport const SIM_LAYER_RIDS = [ SIM_LAYER_1_RID, SIM_LAYER_2_RID, SIM_LAYER_3_RID ];\n\n/**\n * Handles track related operations on TraceablePeerConnection when browser is\n * running in unified plan mode.\n */\nexport class TPCUtils {\n    /**\n     * Creates a new instance for a given TraceablePeerConnection\n     *\n     * @param peerconnection - the tpc instance for which we have utility functions.\n     */\n    constructor(peerconnection) {\n        this.pc = peerconnection;\n        const bitrateSettings = this.pc.options?.videoQuality?.maxBitratesVideo;\n        const standardBitrates = {\n            low: LD_BITRATE,\n            standard: SD_BITRATE,\n            high: HD_BITRATE\n        };\n\n        // Check if the max. bitrates for video are specified through config.js videoQuality settings.\n        // Right now only VP8 bitrates are configured on the simulcast encodings, VP9 bitrates have to be\n        // configured on the SDP using b:AS line.\n        this.videoBitrates = bitrateSettings ?? standardBitrates;\n        const encodingBitrates = this.videoBitrates.VP8 ?? this.videoBitrates;\n\n        /**\n         * The startup configuration for the stream encodings that are applicable to\n         * the video stream when a new sender is created on the peerconnection. The initial\n         * config takes into account the differences in browser's simulcast implementation.\n         *\n         * Encoding parameters:\n         * active - determine the on/off state of a particular encoding.\n         * maxBitrate - max. bitrate value to be applied to that particular encoding\n         *  based on the encoding's resolution and config.js videoQuality settings if applicable.\n         * rid - Rtp Stream ID that is configured for a particular simulcast stream.\n         * scaleResolutionDownBy - the factor by which the encoding is scaled down from the\n         *  original resolution of the captured video.\n         */\n        this.localStreamEncodingsConfig = [\n            {\n                active: true,\n                maxBitrate: browser.isFirefox() ? encodingBitrates.high : encodingBitrates.low,\n                rid: SIM_LAYER_1_RID,\n                scaleResolutionDownBy: browser.isFirefox() ? HD_SCALE_FACTOR : LD_SCALE_FACTOR\n            },\n            {\n                active: true,\n                maxBitrate: encodingBitrates.standard,\n                rid: SIM_LAYER_2_RID,\n                scaleResolutionDownBy: SD_SCALE_FACTOR\n            },\n            {\n                active: true,\n                maxBitrate: browser.isFirefox() ? encodingBitrates.low : encodingBitrates.high,\n                rid: SIM_LAYER_3_RID,\n                scaleResolutionDownBy: browser.isFirefox() ? LD_SCALE_FACTOR : HD_SCALE_FACTOR\n            }\n        ];\n    }\n\n    /**\n     * Obtains stream encodings that need to be configured on the given track based\n     * on the track media type and the simulcast setting.\n     * @param {JitsiLocalTrack} localTrack\n     */\n    _getStreamEncodings(localTrack) {\n        if (this.pc.isSimulcastOn() && localTrack.isVideoTrack()) {\n            return this.localStreamEncodingsConfig;\n        }\n\n        return localTrack.isVideoTrack()\n            ? [ {\n                active: true,\n                maxBitrate: this.videoBitrates.high\n            } ]\n            : [ { active: true } ];\n    }\n\n    /**\n     * Ensures that the ssrcs associated with a FID ssrc-group appear in the correct order, i.e.,\n     * the primary ssrc first and the secondary rtx ssrc later. This is important for unified\n     * plan since we have only one FID group per media description.\n     * @param {Object} description the webRTC session description instance for the remote\n     * description.\n     * @private\n     */\n    ensureCorrectOrderOfSsrcs(description) {\n        const parsedSdp = transform.parse(description.sdp);\n\n        parsedSdp.media.forEach(mLine => {\n            if (mLine.type === MediaType.AUDIO) {\n                return;\n            }\n            if (!mLine.ssrcGroups || !mLine.ssrcGroups.length) {\n                return;\n            }\n            let reorderedSsrcs = [];\n\n            const ssrcs = new Set();\n\n            mLine.ssrcGroups.map(group =>\n                group.ssrcs\n                    .split(' ')\n                    .filter(Boolean)\n                    .forEach(ssrc => ssrcs.add(ssrc))\n            );\n\n            ssrcs.forEach(ssrc => {\n                const sources = mLine.ssrcs.filter(source => source.id.toString() === ssrc);\n\n                reorderedSsrcs = reorderedSsrcs.concat(sources);\n            });\n            mLine.ssrcs = reorderedSsrcs;\n        });\n\n        return new RTCSessionDescription({\n            type: description.type,\n            sdp: transform.write(parsedSdp)\n        });\n    }\n\n    /**\n     * Returns the transceiver associated with a given RTCRtpSender/RTCRtpReceiver.\n     *\n     * @param {string} mediaType - type of track associated with the transceiver 'audio' or 'video'.\n     * @param {JitsiLocalTrack} localTrack - local track to be used for lookup.\n     * @returns {RTCRtpTransceiver}\n     */\n    findTransceiver(mediaType, localTrack = null) {\n        const transceiver = localTrack?.track && localTrack.getOriginalStream()\n            ? this.pc.peerconnection.getTransceivers().find(t => t.sender?.track?.id === localTrack.getTrackId())\n            : this.pc.peerconnection.getTransceivers().find(t => t.receiver?.track?.kind === mediaType);\n\n        return transceiver;\n    }\n\n    /**\n     * Takes in a *unified plan* offer and inserts the appropriate\n     * parameters for adding simulcast receive support.\n     * @param {Object} desc - A session description object\n     * @param {String} desc.type - the type (offer/answer)\n     * @param {String} desc.sdp - the sdp content\n     *\n     * @return {Object} A session description (same format as above) object\n     * with its sdp field modified to advertise simulcast receive support\n     */\n    insertUnifiedPlanSimulcastReceive(desc) {\n        // a=simulcast line is not needed on browsers where we SDP munging is used for enabling on simulcast.\n        // Remove this check when the client switches to RID/MID based simulcast on all browsers.\n        if (browser.usesSdpMungingForSimulcast()) {\n            return desc;\n        }\n        const sdp = transform.parse(desc.sdp);\n        const idx = sdp.media.findIndex(mline => mline.type === MediaType.VIDEO);\n\n        if (sdp.media[idx].rids && (sdp.media[idx].simulcast_03 || sdp.media[idx].simulcast)) {\n            // Make sure we don't have the simulcast recv line on video descriptions other than\n            // the first video description.\n            sdp.media.forEach((mline, i) => {\n                if (mline.type === MediaType.VIDEO && i !== idx) {\n                    sdp.media[i].rids = undefined;\n                    sdp.media[i].simulcast = undefined;\n\n                    // eslint-disable-next-line camelcase\n                    sdp.media[i].simulcast_03 = undefined;\n                }\n            });\n\n            return new RTCSessionDescription({\n                type: desc.type,\n                sdp: transform.write(sdp)\n            });\n        }\n\n        // In order of highest to lowest spatial quality\n        sdp.media[idx].rids = [\n            {\n                id: SIM_LAYER_1_RID,\n                direction: 'recv'\n            },\n            {\n                id: SIM_LAYER_2_RID,\n                direction: 'recv'\n            },\n            {\n                id: SIM_LAYER_3_RID,\n                direction: 'recv'\n            }\n        ];\n\n        // Firefox 72 has stopped parsing the legacy rid= parameters in simulcast attributes.\n        // eslint-disable-next-line max-len\n        // https://www.fxsitecompat.dev/en-CA/docs/2019/pt-and-rid-in-webrtc-simulcast-attributes-are-no-longer-supported/\n        const simulcastLine = browser.isFirefox() && browser.isVersionGreaterThan(71)\n            ? `recv ${SIM_LAYER_RIDS.join(';')}`\n            : `recv rid=${SIM_LAYER_RIDS.join(';')}`;\n\n        // eslint-disable-next-line camelcase\n        sdp.media[idx].simulcast_03 = {\n            value: simulcastLine\n        };\n\n        return new RTCSessionDescription({\n            type: desc.type,\n            sdp: transform.write(sdp)\n        });\n    }\n\n    /**\n    * Adds {@link JitsiLocalTrack} to the WebRTC peerconnection for the first time.\n    * @param {JitsiLocalTrack} track - track to be added to the peerconnection.\n    * @param {boolean} isInitiator - boolean that indicates if the endpoint is offerer in a p2p connection.\n    * @returns {void}\n    */\n    addTrack(localTrack, isInitiator) {\n        const track = localTrack.getTrack();\n\n        if (isInitiator) {\n            // Use pc.addTransceiver() for the initiator case when local tracks are getting added\n            // to the peerconnection before a session-initiate is sent over to the peer.\n            const transceiverInit = {\n                direction: MediaDirection.SENDRECV,\n                streams: [ localTrack.getOriginalStream() ],\n                sendEncodings: []\n            };\n\n            if (!browser.isFirefox()) {\n                transceiverInit.sendEncodings = this._getStreamEncodings(localTrack);\n            }\n            this.pc.peerconnection.addTransceiver(track, transceiverInit);\n        } else {\n            // Use pc.addTrack() for responder case so that we can re-use the m-lines that were created\n            // when setRemoteDescription was called. pc.addTrack() automatically  attaches to any existing\n            // unused \"recv-only\" transceiver.\n            this.pc.peerconnection.addTrack(track);\n        }\n    }\n\n    /**\n     * Returns the calculated active state of the simulcast encodings based on the frame height requested for the send\n     * stream. All the encodings that have a resolution lower than the frame height requested will be enabled.\n     *\n     * @param {JitsiLocalTrack} localVideoTrack The local video track.\n     * @param {number} newHeight The resolution requested for the video track.\n     * @returns {Array<boolean>}\n     */\n    calculateEncodingsActiveState(localVideoTrack, newHeight) {\n        const localTrack = localVideoTrack.getTrack();\n        const { height } = localTrack.getSettings();\n        const encodingsState = this.localStreamEncodingsConfig\n        .map(encoding => height / encoding.scaleResolutionDownBy)\n        .map((frameHeight, idx) => {\n            let active = localVideoTrack.getVideoType() === VideoType.CAMERA\n\n                // Keep the LD stream enabled even when the LD stream's resolution is higher than of the requested\n                // resolution. This can happen when camera is captured at resolutions higher than 720p but the\n                // requested resolution is 180. Since getParameters doesn't give us information about the resolutions\n                // of the simulcast encodings, we have to rely on our initial config for the simulcast streams.\n                ? newHeight > 0 && this.localStreamEncodingsConfig[idx]?.scaleResolutionDownBy === LD_SCALE_FACTOR\n                    ? true\n                    : frameHeight <= newHeight\n\n                // Keep all the encodings for desktop track active.\n                : true;\n\n            // Disable the lower spatial layers for screensharing in Unified plan when low fps screensharing is in\n            // progress. Sending all three streams often results in the browser suspending the high resolution in low\n            // b/w and cpu cases, especially on the low end machines. Suspending the low resolution streams ensures\n            // that the highest resolution stream is available always. Safari is an exception here since it does not\n            // send the desktop stream at all if only the high resolution stream is enabled.\n            if (this.pc.isSharingLowFpsScreen()\n                && this.pc.usesUnifiedPlan()\n                && !browser.isWebKitBased()\n                && this.localStreamEncodingsConfig[idx].scaleResolutionDownBy !== HD_SCALE_FACTOR) {\n                active = false;\n            }\n\n            return active;\n        });\n\n        return encodingsState;\n    }\n\n    /**\n     * Returns the calculates max bitrates that need to be configured on the simulcast encodings based on the video\n     * type and other considerations associated with screenshare.\n     *\n     * @param {JitsiLocalTrack} localVideoTrack The local video track.\n     * @returns {Array<number>}\n     */\n    calculateEncodingsBitrates(localVideoTrack) {\n        const videoType = localVideoTrack.getVideoType();\n        const desktopShareBitrate = this.pc.options?.videoQuality?.desktopBitrate || DESKTOP_SHARE_RATE;\n        const presenterEnabled = localVideoTrack._originalStream\n            && localVideoTrack._originalStream.id !== localVideoTrack.getStreamId();\n\n        const encodingsBitrates = this.localStreamEncodingsConfig\n        .map(encoding => {\n            const bitrate = this.pc.isSharingLowFpsScreen() && !browser.isWebKitBased()\n\n                // For low fps screensharing, set a max bitrate of 500 Kbps when presenter is not turned on, 2500 Kbps\n                // otherwise.\n                ? presenterEnabled ? HD_BITRATE : desktopShareBitrate\n\n                // For high fps screenshare, 'maxBitrate' setting must be cleared on Chrome in plan-b, because\n                // if simulcast is enabled for screen and maxBitrates are set then Chrome will not send the\n                // desktop stream.\n                : videoType === VideoType.DESKTOP && browser.isChromiumBased() && !this.pc.usesUnifiedPlan()\n                    ? undefined\n                    : encoding.maxBitrate;\n\n            return bitrate;\n        });\n\n        return encodingsBitrates;\n    }\n\n    /**\n     * Replaces the existing track on a RTCRtpSender with the given track.\n     *\n     * @param {JitsiLocalTrack} oldTrack - existing track on the sender that needs to be removed.\n     * @param {JitsiLocalTrack} newTrack - new track that needs to be added to the sender.\n     * @returns {Promise<RTCRtpTransceiver>} - resolved with the associated transceiver when done, rejected otherwise.\n     */\n    replaceTrack(oldTrack, newTrack) {\n        const mediaType = newTrack?.getType() ?? oldTrack?.getType();\n        const track = newTrack?.getTrack() ?? null;\n        let transceiver;\n\n        // If old track exists, replace the track on the corresponding sender.\n        if (oldTrack) {\n            transceiver = this.pc.peerconnection.getTransceivers().find(t => t.sender.track === oldTrack.getTrack());\n\n        // Find the first recvonly transceiver when more than one track of the same media type is being added to the pc.\n        // As part of the track addition, a new m-line was added to the remote description with direction set to\n        // recvonly.\n        } else if (this.pc.getLocalTracks(mediaType)?.length && !newTrack.conference) {\n            transceiver = this.pc.peerconnection.getTransceivers().find(\n                t => t.receiver.track.kind === mediaType\n                && t.direction === MediaDirection.RECVONLY\n                && t.currentDirection === MediaDirection.INACTIVE);\n\n        // For unmute operations, find the transceiver based on the track index in the source name if present, otherwise\n        // it is assumed to be the first local track that was added to the peerconnection.\n        } else {\n            transceiver = this.pc.peerconnection.getTransceivers().find(t => t.receiver.track.kind === mediaType);\n\n            const sourceName = newTrack.getSourceName();\n\n            if (sourceName) {\n                const trackIndex = Number(sourceName.split('-')[1].substring(1));\n\n                if (trackIndex) {\n                    transceiver = this.pc.peerconnection.getTransceivers()\n                        .filter(t => t.receiver.track.kind === mediaType\n                            && t.direction !== MediaDirection.RECVONLY)[trackIndex];\n                }\n            }\n        }\n\n        if (!transceiver) {\n            return Promise.reject(new Error('replace track failed'));\n        }\n        logger.debug(`${this.pc} Replacing ${oldTrack} with ${newTrack}`);\n\n        return transceiver.sender.replaceTrack(track)\n            .then(() => Promise.resolve(transceiver));\n    }\n\n    /**\n    * Enables/disables audio transmission on the peer connection. When\n    * disabled the audio transceiver direction will be set to 'inactive'\n    * which means that no data will be sent nor accepted, but\n    * the connection should be kept alive.\n    * @param {boolean} active - true to enable audio media transmission or\n    * false to disable.\n    * @returns {void}\n    */\n    setAudioTransferActive(active) {\n        this.setMediaTransferActive(MediaType.AUDIO, active);\n    }\n\n    /**\n     * Set the simulcast stream encoding properties on the RTCRtpSender.\n     * @param {JitsiLocalTrack} track - the current track in use for which\n     * the encodings are to be set.\n     * @returns {Promise<void>} - resolved when done.\n     */\n    setEncodings(track) {\n        const mediaType = track.getType();\n        const transceiver = this.findTransceiver(mediaType, track);\n        const parameters = transceiver?.sender?.getParameters();\n\n        // Resolve if the encodings are not available yet. This happens immediately after the track is added to the\n        // peerconnection on chrome in unified-plan. It is ok to ignore and not report the error here since the\n        // action that triggers 'addTrack' (like unmute) will also configure the encodings and set bitrates after that.\n        if (!parameters?.encodings?.length) {\n            return Promise.resolve();\n        }\n        parameters.encodings = this._getStreamEncodings(track);\n\n        return transceiver.sender.setParameters(parameters);\n    }\n\n    /**\n     * Enables/disables media transmission on the peerconnection by changing the direction\n     * on the transceiver for the specified media type.\n     * @param {String} mediaType - 'audio' or 'video'\n     * @param {boolean} active - true to enable media transmission or false\n     * to disable.\n     * @returns {void}\n     */\n    setMediaTransferActive(mediaType, active) {\n        const transceivers = this.pc.peerconnection.getTransceivers()\n            .filter(t => t.receiver && t.receiver.track && t.receiver.track.kind === mediaType);\n        const localTracks = this.pc.getLocalTracks(mediaType);\n\n        logger.info(`${this.pc} ${active ? 'Enabling' : 'Suspending'} ${mediaType} media transfer.`);\n        transceivers.forEach((transceiver, idx) => {\n            if (active) {\n                // The first transceiver is for the local track and only this one can be set to 'sendrecv'\n                if (idx === 0 && localTracks.length) {\n                    transceiver.direction = MediaDirection.SENDRECV;\n                } else {\n                    transceiver.direction = MediaDirection.RECVONLY;\n                }\n            } else {\n                transceiver.direction = MediaDirection.INACTIVE;\n            }\n        });\n    }\n\n    /**\n    * Enables/disables video media transmission on the peer connection. When\n    * disabled the SDP video media direction in the local SDP will be adjusted to\n    * 'inactive' which means that no data will be sent nor accepted, but\n    * the connection should be kept alive.\n    * @param {boolean} active - true to enable video media transmission or\n    * false to disable.\n    * @returns {void}\n    */\n    setVideoTransferActive(active) {\n        this.setMediaTransferActive(MediaType.VIDEO, active);\n    }\n\n    /**\n     * Ensures that the resolution of the stream encodings are consistent with the values\n     * that were configured on the RTCRtpSender when the source was added to the peerconnection.\n     * This should prevent us from overriding the default values if the browser returns\n     * erroneous values when RTCRtpSender.getParameters is used for getting the encodings info.\n     * @param {Object} parameters - the RTCRtpEncodingParameters obtained from the browser.\n     * @returns {void}\n     */\n    updateEncodingsResolution(parameters) {\n        if (!(browser.isWebKitBased() && parameters.encodings && Array.isArray(parameters.encodings))) {\n            return;\n        }\n        const allEqualEncodings\n            = encodings => encodings.every(encoding => typeof encoding.scaleResolutionDownBy !== 'undefined'\n                && encoding.scaleResolutionDownBy === encodings[0].scaleResolutionDownBy);\n\n        // Implement the workaround only when all the encodings report the same resolution.\n        if (allEqualEncodings(parameters.encodings)) {\n            parameters.encodings.forEach((encoding, idx) => {\n                encoding.scaleResolutionDownBy = this.localStreamEncodingsConfig[idx].scaleResolutionDownBy;\n            });\n        }\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport { Interop } from '@jitsi/sdp-interop';\nimport transform from 'sdp-transform';\n\nimport * as CodecMimeType from '../../service/RTC/CodecMimeType';\nimport MediaDirection from '../../service/RTC/MediaDirection';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport * as SignalingEvents from '../../service/RTC/SignalingEvents';\nimport { getSourceNameForJitsiTrack } from '../../service/RTC/SignalingLayer';\nimport * as VideoType from '../../service/RTC/VideoType';\nimport { SS_DEFAULT_FRAME_RATE } from '../RTC/ScreenObtainer';\nimport browser from '../browser';\nimport FeatureFlags from '../flags/FeatureFlags';\nimport LocalSdpMunger from '../sdp/LocalSdpMunger';\nimport RtxModifier from '../sdp/RtxModifier';\nimport SDP from '../sdp/SDP';\nimport SDPUtil from '../sdp/SDPUtil';\nimport SdpConsistency from '../sdp/SdpConsistency';\nimport SdpSimulcast from '../sdp/SdpSimulcast.ts';\nimport { SdpTransformWrap } from '../sdp/SdpTransformUtil';\nimport * as GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nimport JitsiRemoteTrack from './JitsiRemoteTrack';\nimport RTC from './RTC';\nimport RTCUtils from './RTCUtils';\nimport {\n    HD_BITRATE,\n    HD_SCALE_FACTOR,\n    SIM_LAYER_RIDS,\n    TPCUtils\n} from './TPCUtils';\n\n// FIXME SDP tools should end up in some kind of util module\n\nconst logger = getLogger(__filename);\nconst DEGRADATION_PREFERENCE_CAMERA = 'maintain-framerate';\nconst DEGRADATION_PREFERENCE_DESKTOP = 'maintain-resolution';\n\n/* eslint-disable max-params */\n\n/**\n * Creates new instance of 'TraceablePeerConnection'.\n *\n * @param {RTC} rtc the instance of <tt>RTC</tt> service\n * @param {number} id the peer connection id assigned by the parent RTC module.\n * @param {SignalingLayer} signalingLayer the signaling layer instance\n * @param {object} pcConfig The {@code RTCConfiguration} to use for the WebRTC peer connection.\n * @param {object} constraints WebRTC 'PeerConnection' constraints\n * @param {boolean} isP2P indicates whether or not the new instance will be used in a peer to peer connection.\n * @param {object} options <tt>TracablePeerConnection</tt> config options.\n * @param {boolean} options.disableSimulcast if set to 'true' will disable the simulcast.\n * @param {boolean} options.disableRtx if set to 'true' will disable the RTX.\n * @param {string} options.disabledCodec the mime type of the code that should not be negotiated on the peerconnection.\n * @param {string} options.preferredCodec the mime type of the codec that needs to be made the preferred codec for the\n * peerconnection.\n * @param {boolean} options.startSilent If set to 'true' no audio will be sent or received.\n * @param {boolean} options.usesUnifiedPlan Indicates if the  browser is running in unified plan mode.\n *\n * FIXME: initially the purpose of TraceablePeerConnection was to be able to\n * debug the peer connection. Since many other responsibilities have been added\n * it would make sense to extract a separate class from it and come up with\n * a more suitable name.\n *\n * @constructor\n */\nexport default function TraceablePeerConnection(\n        rtc,\n        id,\n        signalingLayer,\n        pcConfig,\n        constraints,\n        isP2P,\n        options) {\n\n    /**\n     * Indicates whether or not this peer connection instance is actively\n     * sending/receiving audio media. When set to <tt>false</tt> the SDP audio\n     * media direction will be adjusted to 'inactive' in order to suspend\n     * the transmission.\n     * @type {boolean}\n     * @private\n     */\n    this.audioTransferActive = !(options.startSilent === true);\n\n    /**\n     * The DTMF sender instance used to send DTMF tones.\n     *\n     * @type {RTCDTMFSender|undefined}\n     * @private\n     */\n    this._dtmfSender = undefined;\n\n    /**\n     * @typedef {Object} TouchToneRequest\n     * @property {string} tones - The DTMF tones string as defined by\n     * {@code RTCDTMFSender.insertDTMF}, 'tones' argument.\n     * @property {number} duration - The amount of time in milliseconds that\n     * each DTMF should last.\n     * @property {string} interToneGap - The length of time in miliseconds to\n     * wait between tones.\n     */\n    /**\n     * TouchToneRequests which are waiting to be played. This queue is filled\n     * if there are touch tones currently being played.\n     *\n     * @type {Array<TouchToneRequest>}\n     * @private\n     */\n    this._dtmfTonesQueue = [];\n\n    /**\n     * Indicates whether or not this peer connection instance is actively\n     * sending/receiving video media. When set to <tt>false</tt> the SDP video\n     * media direction will be adjusted to 'inactive' in order to suspend\n     * the transmission.\n     * @type {boolean}\n     * @private\n     */\n    this.videoTransferActive = true;\n\n    /**\n     * The parent instance of RTC service which created this\n     * <tt>TracablePeerConnection</tt>.\n     * @type {RTC}\n     */\n    this.rtc = rtc;\n\n    /**\n     * The peer connection identifier assigned by the RTC module.\n     * @type {number}\n     */\n    this.id = id;\n\n    /**\n     * Indicates whether or not this instance is used in a peer to peer\n     * connection.\n     * @type {boolean}\n     */\n    this.isP2P = isP2P;\n\n    /**\n     * The map holds remote tracks associated with this peer connection. It maps user's JID to media type and a set of\n     * remote tracks.\n     * @type {Map<string, Map<MediaType, Set<JitsiRemoteTrack>>>}\n     */\n    this.remoteTracks = new Map();\n\n    /**\n     * A map which stores local tracks mapped by {@link JitsiLocalTrack.rtcId}\n     * @type {Map<number, JitsiLocalTrack>}\n     */\n    this.localTracks = new Map();\n\n    /**\n     * Keeps tracks of the WebRTC <tt>MediaStream</tt>s that have been added to\n     * the underlying WebRTC PeerConnection.\n     * @type {Array}\n     * @private\n     */\n    this._addedStreams = [];\n\n    /**\n     * @typedef {Object} TPCGroupInfo\n     * @property {string} semantics the SSRC groups semantics\n     * @property {Array<number>} ssrcs group's SSRCs in order where the first\n     * one is group's primary SSRC, the second one is secondary (RTX) and so\n     * on...\n     */\n    /**\n     * @typedef {Object} TPCSSRCInfo\n     * @property {Array<number>} ssrcs an array which holds all track's SSRCs\n     * @property {Array<TPCGroupInfo>} groups an array stores all track's SSRC\n     * groups\n     */\n    /**\n     * Holds the info about local track's SSRCs mapped per their\n     * {@link JitsiLocalTrack.rtcId}\n     * @type {Map<number, TPCSSRCInfo>}\n     */\n    this.localSSRCs = new Map();\n\n    /**\n     * The local ICE username fragment for this session.\n     */\n    this.localUfrag = null;\n\n    /**\n     * The remote ICE username fragment for this session.\n     */\n    this.remoteUfrag = null;\n\n    /**\n     * The DTLS transport object for the PeerConnection.\n     * Note: this assume only one shared transport exists because we bundled\n     *       all streams on the same underlying transport.\n     */\n    this._dtlsTransport = null;\n\n    /**\n     * The signaling layer which operates this peer connection.\n     * @type {SignalingLayer}\n     */\n    this.signalingLayer = signalingLayer;\n\n    // SignalingLayer listeners\n    this._peerVideoTypeChanged = this._peerVideoTypeChanged.bind(this);\n    this.signalingLayer.on(\n        SignalingEvents.PEER_VIDEO_TYPE_CHANGED,\n        this._peerVideoTypeChanged);\n\n    this._peerMutedChanged = this._peerMutedChanged.bind(this);\n    this.signalingLayer.on(\n        SignalingEvents.PEER_MUTED_CHANGED,\n        this._peerMutedChanged);\n    this.options = options;\n\n    // Make sure constraints is properly formatted in order to provide information about whether or not this\n    // connection is P2P to rtcstats.\n    const safeConstraints = constraints || {};\n\n    safeConstraints.optional = safeConstraints.optional || [];\n\n    // The `optional` parameter needs to be of type array, otherwise chrome will throw an error.\n    // Firefox and Safari just ignore it.\n    if (Array.isArray(safeConstraints.optional)) {\n        safeConstraints.optional.push({ rtcStatsSFUP2P: this.isP2P });\n    } else {\n        logger.warn('Optional param is not an array, rtcstats p2p data is omitted.');\n    }\n\n    this.peerconnection = new RTCUtils.RTCPeerConnectionType(pcConfig, safeConstraints);\n\n    this.tpcUtils = new TPCUtils(this);\n    this.updateLog = [];\n    this.stats = {};\n    this.statsinterval = null;\n\n    /**\n     * Flag used to indicate if simulcast is turned off and a cap of 500 Kbps is applied on screensharing.\n     */\n    this._capScreenshareBitrate = this.options.capScreenshareBitrate;\n\n    /**\n    * Flag used to indicate if the browser is running in unified  plan mode.\n    */\n    this._usesUnifiedPlan = options.usesUnifiedPlan;\n\n    /**\n     * Flag used to indicate if RTCRtpTransceiver#setCodecPreferences is to be used instead of SDP\n     * munging for codec selection.\n     */\n    this._usesTransceiverCodecPreferences = browser.supportsCodecPreferences() && this._usesUnifiedPlan;\n    this._usesTransceiverCodecPreferences\n        && logger.info('Using RTCRtpTransceiver#setCodecPreferences for codec selection');\n\n    /**\n     * @type {number} The max number of stats to keep in this.stats. Limit to\n     * 300 values, i.e. 5 minutes; set to 0 to disable\n     */\n    this.maxstats = options.maxstats;\n\n    this.interop = new Interop();\n\n    if (this._usesUnifiedPlan) {\n        this.simulcast = new SdpSimulcast({ numOfLayers: SIM_LAYER_RIDS.length });\n    } else {\n        const Simulcast = require('@jitsi/sdp-simulcast');\n\n        this.simulcast = new Simulcast(\n            {\n                numOfLayers: SIM_LAYER_RIDS.length,\n                explodeRemoteSimulcast: false,\n                usesUnifiedPlan: false\n            });\n    }\n\n    this.sdpConsistency = new SdpConsistency(this.toString());\n\n    /**\n     * Munges local SDP provided to the Jingle Session in order to prevent from\n     * sending SSRC updates on attach/detach and mute/unmute (for video).\n     * @type {LocalSdpMunger}\n     */\n    this.localSdpMunger = new LocalSdpMunger(this, this.rtc.getLocalEndpointId());\n\n    /**\n     * TracablePeerConnection uses RTC's eventEmitter\n     * @type {EventEmitter}\n     */\n    this.eventEmitter = rtc.eventEmitter;\n    this.rtxModifier = new RtxModifier();\n\n    /**\n     * The height constraint applied on the video sender. The default value is 2160 (4K) when layer suspension is\n     * explicitly disabled.\n     */\n    this._senderVideoMaxHeight = 2160;\n\n    // override as desired\n    this.trace = (what, info) => {\n        logger.debug(what, info);\n\n        this.updateLog.push({\n            time: new Date(),\n            type: what,\n            value: info || ''\n        });\n    };\n    this.onicecandidate = null;\n    this.peerconnection.onicecandidate = event => {\n        this.trace(\n            'onicecandidate',\n            JSON.stringify(event.candidate, null, ' '));\n\n        if (this.onicecandidate !== null) {\n            this.onicecandidate(event);\n        }\n    };\n\n    // Use track events when browser is running in unified plan mode and stream events in plan-b mode.\n    if (this._usesUnifiedPlan) {\n        this.onTrack = evt => {\n            const stream = evt.streams[0];\n\n            this._remoteTrackAdded(stream, evt.track, evt.transceiver);\n            stream.addEventListener('removetrack', e => {\n                this._remoteTrackRemoved(stream, e.track);\n            });\n        };\n        this.peerconnection.addEventListener('track', this.onTrack);\n    } else {\n        this.peerconnection.onaddstream = event => this._remoteStreamAdded(event.stream);\n        this.peerconnection.onremovestream = event => this._remoteStreamRemoved(event.stream);\n    }\n    this.onsignalingstatechange = null;\n    this.peerconnection.onsignalingstatechange = event => {\n        this.trace('onsignalingstatechange', this.signalingState);\n        if (this.onsignalingstatechange !== null) {\n            this.onsignalingstatechange(event);\n        }\n    };\n    this.oniceconnectionstatechange = null;\n    this.peerconnection.oniceconnectionstatechange = event => {\n        this.trace('oniceconnectionstatechange', this.iceConnectionState);\n        if (this.oniceconnectionstatechange !== null) {\n            this.oniceconnectionstatechange(event);\n        }\n    };\n    this.onnegotiationneeded = null;\n    this.peerconnection.onnegotiationneeded = event => {\n        this.trace('onnegotiationneeded');\n        if (this.onnegotiationneeded !== null) {\n            this.onnegotiationneeded(event);\n        }\n    };\n    this.onconnectionstatechange = null;\n    this.peerconnection.onconnectionstatechange = event => {\n        this.trace('onconnectionstatechange', this.connectionState);\n        if (this.onconnectionstatechange !== null) {\n            this.onconnectionstatechange(event);\n        }\n    };\n    this.ondatachannel = null;\n    this.peerconnection.ondatachannel = event => {\n        this.trace('ondatachannel');\n        if (this.ondatachannel !== null) {\n            this.ondatachannel(event);\n        }\n    };\n\n    if (this.maxstats) {\n        this.statsinterval = window.setInterval(() => {\n            this.getStats().then(stats => {\n                if (typeof stats?.result === 'function') {\n                    const results = stats.result();\n\n                    for (let i = 0; i < results.length; ++i) {\n                        const res = results[i];\n\n                        res.names().forEach(name => {\n                            this._processStat(res, name, res.stat(name));\n                        });\n                    }\n                } else {\n                    stats.forEach(r => this._processStat(r, '', r));\n                }\n            });\n        }, 1000);\n    }\n\n    logger.info(`Create new ${this}`);\n}\n\n/* eslint-enable max-params */\n\n/**\n * Process stat and adds it to the array of stats we store.\n * @param report the current stats report.\n * @param name the name of the report, if available\n * @param statValue the value to add.\n * @private\n */\nTraceablePeerConnection.prototype._processStat\n    = function(report, name, statValue) {\n        const id = `${report.id}-${name}`;\n        let s = this.stats[id];\n        const now = new Date();\n\n        if (!s) {\n            this.stats[id] = s = {\n                startTime: now,\n                endTime: now,\n                values: [],\n                times: []\n            };\n        }\n        s.values.push(statValue);\n        s.times.push(now.getTime());\n        if (s.values.length > this.maxstats) {\n            s.values.shift();\n            s.times.shift();\n        }\n        s.endTime = now;\n    };\n\n/**\n * Returns a string representation of a SessionDescription object.\n */\nconst dumpSDP = function(description) {\n    if (typeof description === 'undefined' || description === null) {\n        return '';\n    }\n\n    return `type: ${description.type}\\r\\n${description.sdp}`;\n};\n\n\n/**\n * Forwards the {@link peerconnection.iceConnectionState} state except that it\n * will convert \"completed\" into \"connected\" where both mean that the ICE has\n * succeeded and is up and running. We never see \"completed\" state for\n * the JVB connection, but it started appearing for the P2P one. This method\n * allows to adapt old logic to this new situation.\n * @return {string}\n */\nTraceablePeerConnection.prototype.getConnectionState = function() {\n    const state = this.peerconnection.iceConnectionState;\n\n    if (state === 'completed') {\n        return 'connected';\n    }\n\n    return state;\n};\n\n/**\n * Obtains the media direction for given {@link MediaType}. The method takes\n * into account whether or not there are any local tracks for media and\n * the {@link audioTransferActive} and {@link videoTransferActive} flags.\n * @param {MediaType} mediaType\n * @param {boolean} isAddOperation whether the direction is to be calculated after a source-add action.\n * @return {string} one of the SDP direction constants ('sendrecv, 'recvonly'\n * etc.) which should be used when setting local description on the peer\n * connection.\n * @private\n */\nTraceablePeerConnection.prototype.getDesiredMediaDirection = function(mediaType, isAddOperation = false) {\n    const hasLocalSource = this.hasAnyTracksOfType(mediaType);\n\n    if (this._usesUnifiedPlan) {\n        return isAddOperation\n            ? hasLocalSource ? MediaDirection.SENDRECV : MediaDirection.SENDONLY\n            : hasLocalSource ? MediaDirection.RECVONLY : MediaDirection.INACTIVE;\n    }\n\n    const mediaTransferActive = mediaType === MediaType.AUDIO ? this.audioTransferActive : this.videoTransferActive;\n\n    if (mediaTransferActive) {\n        return hasLocalSource ? MediaDirection.SENDRECV : MediaDirection.RECVONLY;\n    }\n\n    return MediaDirection.INACTIVE;\n};\n\n/**\n * Returns the list of RTCRtpReceivers created for the source of the given media type associated with\n * the set of remote endpoints specified.\n * @param {Array<string>} endpoints list of the endpoints\n * @param {string} mediaType 'audio' or 'video'\n * @returns {Array<RTCRtpReceiver>} list of receivers created by the peerconnection.\n */\nTraceablePeerConnection.prototype._getReceiversByEndpointIds = function(endpoints, mediaType) {\n    let remoteTracks = [];\n    let receivers = [];\n\n    for (const endpoint of endpoints) {\n        remoteTracks = remoteTracks.concat(this.getRemoteTracks(endpoint, mediaType));\n    }\n\n    // Get the ids of the MediaStreamTracks associated with each of these remote tracks.\n    const remoteTrackIds = remoteTracks.map(remote => remote.track?.id);\n\n    receivers = this.peerconnection.getReceivers()\n        .filter(receiver => receiver.track\n            && receiver.track.kind === mediaType\n            && remoteTrackIds.find(trackId => trackId === receiver.track.id));\n\n    return receivers;\n};\n\n/**\n * Tells whether or not this TPC instance is using Simulcast.\n * @return {boolean} <tt>true</tt> if simulcast is enabled and active or\n * <tt>false</tt> if it's turned off.\n */\nTraceablePeerConnection.prototype.isSimulcastOn = function() {\n    return !this.options.disableSimulcast;\n};\n\n/**\n * Handles {@link SignalingEvents.PEER_VIDEO_TYPE_CHANGED}\n * @param {string} endpointId the video owner's ID (MUC nickname)\n * @param {VideoType} videoType the new value\n * @private\n */\nTraceablePeerConnection.prototype._peerVideoTypeChanged = function(\n        endpointId,\n        videoType) {\n    // Check if endpointId has a value to avoid action on random track\n    if (!endpointId) {\n        logger.error(`${this} No endpointID on peerVideoTypeChanged`);\n\n        return;\n    }\n    const videoTrack = this.getRemoteTracks(endpointId, MediaType.VIDEO);\n\n    if (videoTrack.length) {\n        // NOTE 1 track per media type is assumed\n        videoTrack[0]._setVideoType(videoType);\n    }\n};\n\n/**\n * Handles remote track mute / unmute events.\n * @param {string} endpointId the track owner's identifier (MUC nickname)\n * @param {MediaType} mediaType \"audio\" or \"video\"\n * @param {boolean} isMuted the new mute state\n * @private\n */\nTraceablePeerConnection.prototype._peerMutedChanged = function(\n        endpointId,\n        mediaType,\n        isMuted) {\n    // Check if endpointId is a value to avoid doing action on all remote tracks\n    if (!endpointId) {\n        logger.error(`${this} On peerMuteChanged - no endpoint ID`);\n\n        return;\n    }\n    const track = this.getRemoteTracks(endpointId, mediaType);\n\n    if (track.length) {\n        // NOTE 1 track per media type is assumed\n        track[0].setMute(isMuted);\n    }\n};\n\n/**\n * Obtains audio levels of the remote audio tracks by getting the source information on the RTCRtpReceivers.\n * The information relevant to the ssrc is updated each time a RTP packet constaining the ssrc is received.\n * @param {Array<string>} speakerList list of endpoint ids for which audio levels are to be gathered.\n * @returns {Object} containing ssrc and audio level information as a key-value pair.\n */\nTraceablePeerConnection.prototype.getAudioLevels = function(speakerList = []) {\n    const audioLevels = {};\n    const audioReceivers = speakerList.length\n        ? this._getReceiversByEndpointIds(speakerList, MediaType.AUDIO)\n        : this.peerconnection.getReceivers()\n            .filter(receiver => receiver.track && receiver.track.kind === MediaType.AUDIO && receiver.track.enabled);\n\n    audioReceivers.forEach(remote => {\n        const ssrc = remote.getSynchronizationSources();\n\n        if (ssrc && ssrc.length) {\n            // As per spec, this audiolevel is a value between 0..1 (linear), where 1.0\n            // represents 0 dBov, 0 represents silence, and 0.5 represents approximately\n            // 6 dBSPL change in the sound pressure level from 0 dBov.\n            // https://www.w3.org/TR/webrtc/#dom-rtcrtpcontributingsource-audiolevel\n            audioLevels[ssrc[0].source] = ssrc[0].audioLevel;\n        }\n    });\n\n    return audioLevels;\n};\n\n/**\n * Obtains local tracks for given {@link MediaType}. If the <tt>mediaType</tt>\n * argument is omitted the list of all local tracks will be returned.\n * @param {MediaType} [mediaType]\n * @return {Array<JitsiLocalTrack>}\n */\nTraceablePeerConnection.prototype.getLocalTracks = function(mediaType) {\n    let tracks = Array.from(this.localTracks.values());\n\n    if (mediaType !== undefined) {\n        tracks = tracks.filter(track => track.getType() === mediaType);\n    }\n\n    return tracks;\n};\n\n/**\n * Retrieves the local video tracks.\n *\n * @returns {JitsiLocalTrack|undefined} - local video tracks.\n */\nTraceablePeerConnection.prototype.getLocalVideoTracks = function() {\n    return this.getLocalTracks(MediaType.VIDEO);\n};\n\n/**\n * Checks whether or not this {@link TraceablePeerConnection} instance contains any local tracks for given\n * <tt>mediaType</tt>.\n *\n * @param {MediaType} mediaType - The media type.\n * @return {boolean}\n */\nTraceablePeerConnection.prototype.hasAnyTracksOfType = function(mediaType) {\n    if (!mediaType) {\n        throw new Error('\"mediaType\" is required');\n    }\n\n    return this.getLocalTracks(mediaType).length > 0;\n};\n\n/**\n * Obtains all remote tracks currently known to this PeerConnection instance.\n *\n * @param {string} [endpointId] - The track owner's identifier (MUC nickname)\n * @param {MediaType} [mediaType] - The remote tracks will be filtered by their media type if this argument is\n * specified.\n * @return {Array<JitsiRemoteTrack>}\n */\nTraceablePeerConnection.prototype.getRemoteTracks = function(endpointId, mediaType) {\n    let remoteTracks = [];\n    const endpoints = endpointId ? [ endpointId ] : this.remoteTracks.keys();\n\n    for (const endpoint of endpoints) {\n        const endpointTracksByMediaType = this.remoteTracks.get(endpoint);\n\n        if (endpointTracksByMediaType) {\n            for (const trackMediaType of endpointTracksByMediaType.keys()) {\n                // per media type filtering\n                if (!mediaType || mediaType === trackMediaType) {\n                    remoteTracks = remoteTracks.concat(Array.from(endpointTracksByMediaType.get(trackMediaType)));\n                }\n            }\n        }\n    }\n\n    return remoteTracks;\n};\n\n/**\n * Parses the remote description and returns the sdp lines of the sources associated with a remote participant.\n *\n * @param {string} id Endpoint id of the remote participant.\n * @returns {Array<string>} The sdp lines that have the ssrc information.\n */\nTraceablePeerConnection.prototype.getRemoteSourceInfoByParticipant = function(id) {\n    const removeSsrcInfo = [];\n    const remoteTracks = this.getRemoteTracks(id);\n\n    if (!remoteTracks?.length) {\n        return removeSsrcInfo;\n    }\n    const primarySsrcs = remoteTracks.map(track => track.getSSRC());\n    const sdp = new SDP(this.remoteDescription.sdp);\n\n    primarySsrcs.forEach((ssrc, idx) => {\n        for (const media of sdp.media) {\n            let lines = '';\n            let ssrcLines = SDPUtil.findLines(media, `a=ssrc:${ssrc}`);\n\n            if (ssrcLines.length) {\n                if (!removeSsrcInfo[idx]) {\n                    removeSsrcInfo[idx] = '';\n                }\n\n                // Check if there are any FID groups present for the primary ssrc.\n                const fidLines = SDPUtil.findLines(media, `a=ssrc-group:FID ${ssrc}`);\n\n                if (fidLines.length) {\n                    const secondarySsrc = fidLines[0].split(' ')[2];\n\n                    lines += `${fidLines[0]}\\r\\n`;\n                    ssrcLines = ssrcLines.concat(SDPUtil.findLines(media, `a=ssrc:${secondarySsrc}`));\n                }\n                removeSsrcInfo[idx] += `${ssrcLines.join('\\r\\n')}\\r\\n`;\n                removeSsrcInfo[idx] += lines;\n            }\n        }\n    });\n\n    return removeSsrcInfo;\n};\n\n/**\n * Returns the target bitrates configured for the local video source.\n *\n * @returns {Object}\n */\nTraceablePeerConnection.prototype.getTargetVideoBitrates = function() {\n    const currentCodec = this.getConfiguredVideoCodec();\n\n    return this.tpcUtils.videoBitrates[currentCodec.toUpperCase()] || this.tpcUtils.videoBitrates;\n};\n\n/**\n * Tries to find {@link JitsiTrack} for given SSRC number. It will search both\n * local and remote tracks bound to this instance.\n * @param {number} ssrc\n * @return {JitsiTrack|null}\n */\nTraceablePeerConnection.prototype.getTrackBySSRC = function(ssrc) {\n    if (typeof ssrc !== 'number') {\n        throw new Error(`SSRC ${ssrc} is not a number`);\n    }\n    for (const localTrack of this.localTracks.values()) {\n        if (this.getLocalSSRC(localTrack) === ssrc) {\n            return localTrack;\n        }\n    }\n    for (const remoteTrack of this.getRemoteTracks()) {\n        if (remoteTrack.getSSRC() === ssrc) {\n            return remoteTrack;\n        }\n    }\n\n    return null;\n};\n\n/**\n * Tries to find SSRC number for given {@link JitsiTrack} id. It will search\n * both local and remote tracks bound to this instance.\n * @param {string} id\n * @return {number|null}\n */\nTraceablePeerConnection.prototype.getSsrcByTrackId = function(id) {\n\n    const findTrackById = track => track.getTrack().id === id;\n    const localTrack = this.getLocalTracks().find(findTrackById);\n\n    if (localTrack) {\n        return this.getLocalSSRC(localTrack);\n    }\n\n    const remoteTrack = this.getRemoteTracks().find(findTrackById);\n\n    if (remoteTrack) {\n        return remoteTrack.getSSRC();\n    }\n\n    return null;\n};\n\n/**\n * Called when new remote MediaStream is added to the PeerConnection.\n * @param {MediaStream} stream the WebRTC MediaStream for remote participant\n */\nTraceablePeerConnection.prototype._remoteStreamAdded = function(stream) {\n    const streamId = RTC.getStreamID(stream);\n\n    if (!RTC.isUserStreamById(streamId)) {\n        logger.info(`${this} ignored remote 'stream added' event for non-user stream[id=${streamId}]`);\n\n        return;\n    }\n\n    // Bind 'addtrack'/'removetrack' event handlers\n    if (browser.isChromiumBased()) {\n        stream.onaddtrack = event => {\n            this._remoteTrackAdded(stream, event.track);\n        };\n        stream.onremovetrack = event => {\n            this._remoteTrackRemoved(stream, event.track);\n        };\n    }\n\n    // Call remoteTrackAdded for each track in the stream\n    const streamAudioTracks = stream.getAudioTracks();\n\n    for (const audioTrack of streamAudioTracks) {\n        this._remoteTrackAdded(stream, audioTrack);\n    }\n    const streamVideoTracks = stream.getVideoTracks();\n\n    for (const videoTrack of streamVideoTracks) {\n        this._remoteTrackAdded(stream, videoTrack);\n    }\n};\n\n\n/**\n * Called on \"track added\" and \"stream added\" PeerConnection events (because we\n * handle streams on per track basis). Finds the owner and the SSRC for\n * the track and passes that to ChatRoom for further processing.\n * @param {MediaStream} stream the WebRTC MediaStream instance which is\n * the parent of the track\n * @param {MediaStreamTrack} track the WebRTC MediaStreamTrack added for remote\n * participant.\n * @param {RTCRtpTransceiver} transceiver the WebRTC transceiver that is created\n * for the remote participant in unified plan.\n */\nTraceablePeerConnection.prototype._remoteTrackAdded = function(stream, track, transceiver = null) {\n    const streamId = RTC.getStreamID(stream);\n    const mediaType = track.kind;\n\n    if (!this.isP2P && !RTC.isUserStreamById(streamId)) {\n        logger.info(`${this} ignored remote 'stream added' event for non-user stream[id=${streamId}]`);\n\n        return;\n    }\n    logger.info(`${this} adding remote track for stream[id=${streamId},type=${mediaType}]`);\n\n    // look up an associated JID for a stream id\n    if (!mediaType) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `MediaType undefined for remote track, stream id: ${streamId}`\n            ));\n\n        // Abort\n        return;\n    }\n\n    const remoteSDP = this._usesUnifiedPlan\n        ? new SDP(this.peerconnection.remoteDescription.sdp)\n        : new SDP(this.remoteDescription.sdp);\n    let mediaLines;\n\n    // In unified plan mode, find the matching mline using 'mid' if its availble, otherwise use the\n    // 'msid' attribute of the stream.\n    if (this._usesUnifiedPlan) {\n        if (transceiver && transceiver.mid) {\n            const mid = transceiver.mid;\n\n            mediaLines = remoteSDP.media.filter(mls => SDPUtil.findLine(mls, `a=mid:${mid}`));\n        } else {\n            mediaLines = remoteSDP.media.filter(mls => {\n                const msid = SDPUtil.findLine(mls, 'a=msid:');\n\n                return typeof msid !== 'undefined' && streamId === msid.substring(7).split(' ')[0];\n            });\n        }\n    } else {\n        mediaLines = remoteSDP.media.filter(mls => mls.startsWith(`m=${mediaType}`));\n    }\n\n    if (!mediaLines.length) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(`No media lines found in remote SDP for remote stream[id=${streamId},type=${mediaType}]`));\n\n        // Abort\n        return;\n    }\n\n    let ssrcLines = SDPUtil.findLines(mediaLines[0], 'a=ssrc:');\n\n    ssrcLines\n        = ssrcLines.filter(line => line.indexOf(`msid:${streamId}`) !== -1);\n    if (!ssrcLines.length) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(`No SSRC lines found in remote SDP for remote stream[msid=${streamId},type=${mediaType}]`));\n\n        // Abort\n        return;\n    }\n\n    // FIXME the length of ssrcLines[0] not verified, but it will fail\n    // with global error handler anyway\n    const ssrcStr = ssrcLines[0].substring(7).split(' ')[0];\n    const trackSsrc = Number(ssrcStr);\n    const ownerEndpointId = this.signalingLayer.getSSRCOwner(trackSsrc);\n\n    if (isNaN(trackSsrc) || trackSsrc < 0) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `Invalid SSRC for remote stream[ssrc=${trackSsrc},id=${streamId},type=${mediaType}]`));\n\n        // Abort\n        return;\n    } else if (!ownerEndpointId) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `No SSRC owner known for remote stream[ssrc=${trackSsrc},id=${streamId},type=${mediaType}]`));\n\n        // Abort\n        return;\n    }\n\n\n    let sourceName;\n\n    if (FeatureFlags.isSourceNameSignalingEnabled()) {\n        sourceName = this.signalingLayer.getTrackSourceName(trackSsrc);\n\n        // If source name was not signaled, we'll generate one which allows testing signaling\n        // when mixing legacy(mobile) with new clients.\n        if (!sourceName) {\n            sourceName = getSourceNameForJitsiTrack(ownerEndpointId, mediaType, 0);\n        }\n    }\n\n    // eslint-disable-next-line no-undef\n    logger.info(`${this} creating remote track[endpoint=${ownerEndpointId},ssrc=${trackSsrc},`\n        + `type=${mediaType},sourceName=${sourceName}]`);\n\n    const peerMediaInfo\n        = this.signalingLayer.getPeerMediaInfo(ownerEndpointId, mediaType);\n\n    if (!peerMediaInfo) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(`${this}: no peer media info available for ${ownerEndpointId}`));\n\n        return;\n    }\n\n    const muted = peerMediaInfo.muted;\n    const videoType = peerMediaInfo.videoType; // can be undefined\n\n    // eslint-disable-next-line no-undef\n    this._createRemoteTrack(\n        ownerEndpointId, stream, track, mediaType, videoType, trackSsrc, muted, sourceName);\n};\n\n// FIXME cleanup params\n/* eslint-disable max-params */\n\n/**\n * Initializes a new JitsiRemoteTrack instance with the data provided by\n * the signaling layer and SDP.\n *\n * @param {string} ownerEndpointId the owner's endpoint ID (MUC nickname)\n * @param {MediaStream} stream the WebRTC stream instance\n * @param {MediaStreamTrack} track the WebRTC track instance\n * @param {MediaType} mediaType the track's type of the media\n * @param {VideoType} [videoType] the track's type of the video (if applicable)\n * @param {number} ssrc the track's main SSRC number\n * @param {boolean} muted the initial muted status\n * @param {String} sourceName the track's source name\n */\nTraceablePeerConnection.prototype._createRemoteTrack = function(\n        ownerEndpointId,\n        stream,\n        track,\n        mediaType,\n        videoType,\n        ssrc,\n        muted,\n        sourceName) {\n    let remoteTracksMap = this.remoteTracks.get(ownerEndpointId);\n\n    if (!remoteTracksMap) {\n        remoteTracksMap = new Map();\n        remoteTracksMap.set(MediaType.AUDIO, new Set());\n        remoteTracksMap.set(MediaType.VIDEO, new Set());\n        this.remoteTracks.set(ownerEndpointId, remoteTracksMap);\n    }\n\n    const userTracksByMediaType = remoteTracksMap.get(mediaType);\n\n    if (userTracksByMediaType?.size\n        && Array.from(userTracksByMediaType).find(jitsiTrack => jitsiTrack.getTrack() === track)) {\n        // Ignore duplicated event which can originate either from 'onStreamAdded' or 'onTrackAdded'.\n        logger.info(`${this} ignored duplicated track event for track[endpoint=${ownerEndpointId},type=${mediaType}]`);\n\n        return;\n    } else if (userTracksByMediaType?.size && !FeatureFlags.isSourceNameSignalingEnabled()) {\n        logger.error(`${this} received a second remote track for track[endpoint=${ownerEndpointId},type=${mediaType}]`\n            + 'deleting the existing track');\n        const existingTrack = Array.from(userTracksByMediaType)[0];\n\n        // The exisiting track needs to be removed here. This happens on Safari sometimes when a SSRC is removed from\n        // the remote description and the browser doesn't fire a 'removetrack' event on the associated MediaStream.\n        this._remoteTrackRemoved(existingTrack.getOriginalStream(), existingTrack.getTrack());\n    }\n\n    const remoteTrack\n        = new JitsiRemoteTrack(\n                this.rtc,\n                this.rtc.conference,\n                ownerEndpointId,\n                stream,\n                track,\n                mediaType,\n                videoType,\n                ssrc,\n                muted,\n                this.isP2P,\n                sourceName);\n\n    userTracksByMediaType.add(remoteTrack);\n    this.eventEmitter.emit(RTCEvents.REMOTE_TRACK_ADDED, remoteTrack, this);\n};\n\n/* eslint-enable max-params */\n\n/**\n * Handles remote stream removal.\n * @param stream the WebRTC MediaStream object which is being removed from the\n * PeerConnection\n */\nTraceablePeerConnection.prototype._remoteStreamRemoved = function(stream) {\n    if (!RTC.isUserStream(stream)) {\n        const id = RTC.getStreamID(stream);\n\n        logger.info(`Ignored remote 'stream removed' event for stream[id=${id}]`);\n\n        return;\n    }\n\n    // Call remoteTrackRemoved for each track in the stream\n    const streamVideoTracks = stream.getVideoTracks();\n\n    for (const videoTrack of streamVideoTracks) {\n        this._remoteTrackRemoved(stream, videoTrack);\n    }\n    const streamAudioTracks = stream.getAudioTracks();\n\n    for (const audioTrack of streamAudioTracks) {\n        this._remoteTrackRemoved(stream, audioTrack);\n    }\n};\n\n/**\n * Handles remote media track removal.\n *\n * @param {MediaStream} stream - WebRTC MediaStream instance which is the parent of the track.\n * @param {MediaStreamTrack} track - WebRTC MediaStreamTrack which has been removed from the PeerConnection.\n * @returns {void}\n */\nTraceablePeerConnection.prototype._remoteTrackRemoved = function(stream, track) {\n    const streamId = RTC.getStreamID(stream);\n    const trackId = track && RTC.getTrackID(track);\n\n    if (!RTC.isUserStreamById(streamId)) {\n        logger.info(`${this} ignored remote 'stream removed' event for non-user stream[id=${streamId}]`);\n\n        return;\n    }\n\n    if (!streamId) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(`${this} remote track removal failed - no stream ID`));\n\n        return;\n    }\n\n    if (!trackId) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(`${this} remote track removal failed - no track ID`));\n\n        return;\n    }\n\n    const toBeRemoved = this.getRemoteTracks().find(\n        remoteTrack => remoteTrack.getStreamId() === streamId\n        && remoteTrack.getTrackId() === trackId);\n\n    if (!toBeRemoved) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(`${this} remote track removal failed - track not found`));\n\n        return;\n    }\n\n    logger.info(`${this} remote track removed stream[id=${streamId},trackId=${trackId}]`);\n    this._removeRemoteTrack(toBeRemoved);\n};\n\n/**\n * Removes all JitsiRemoteTracks associated with given MUC nickname (resource part of the JID).\n *\n * @param {string} owner - The resource part of the MUC JID.\n * @returns {JitsiRemoteTrack[]} - The array of removed tracks.\n */\nTraceablePeerConnection.prototype.removeRemoteTracks = function(owner) {\n    let removedTracks = [];\n    const remoteTracksByMedia = this.remoteTracks.get(owner);\n\n    if (remoteTracksByMedia) {\n        removedTracks = removedTracks.concat(Array.from(remoteTracksByMedia.get(MediaType.AUDIO)));\n        removedTracks = removedTracks.concat(Array.from(remoteTracksByMedia.get(MediaType.VIDEO)));\n        this.remoteTracks.delete(owner);\n    }\n    logger.debug(`${this} removed remote tracks[endpoint=${owner},count=${removedTracks.length}`);\n\n    return removedTracks;\n};\n\n/**\n * Removes and disposes given <tt>JitsiRemoteTrack</tt> instance. Emits {@link RTCEvents.REMOTE_TRACK_REMOVED}.\n *\n * @param {JitsiRemoteTrack} toBeRemoved - The remote track to be removed.\n * @returns {void}\n */\nTraceablePeerConnection.prototype._removeRemoteTrack = function(toBeRemoved) {\n    toBeRemoved.dispose();\n    const participantId = toBeRemoved.getParticipantId();\n    const userTracksByMediaType = this.remoteTracks.get(participantId);\n\n    if (!userTracksByMediaType) {\n        logger.error(`${this} removeRemoteTrack: no remote tracks map for endpoint=${participantId}`);\n    } else if (!userTracksByMediaType.get(toBeRemoved.getType())?.delete(toBeRemoved)) {\n        logger.error(`${this} Failed to remove ${toBeRemoved} - type mapping messed up ?`);\n    }\n    this.eventEmitter.emit(RTCEvents.REMOTE_TRACK_REMOVED, toBeRemoved);\n};\n\n/**\n * Returns a map with keys msid/mediaType and <tt>TrackSSRCInfo</tt> values.\n * @param {RTCSessionDescription} desc the local description.\n * @return {Map<string,TrackSSRCInfo>}\n */\nTraceablePeerConnection.prototype._extractSSRCMap = function(desc) {\n    /**\n     * Track SSRC infos mapped by stream ID (msid) or mediaType (unfied-plan)\n     * @type {Map<string,TrackSSRCInfo>}\n     */\n    const ssrcMap = new Map();\n\n    /**\n     * Groups mapped by primary SSRC number\n     * @type {Map<number,Array<SSRCGroupInfo>>}\n     */\n    const groupsMap = new Map();\n\n    if (typeof desc !== 'object' || desc === null\n        || typeof desc.sdp !== 'string') {\n        logger.warn('An empty description was passed as an argument');\n\n        return ssrcMap;\n    }\n\n    const session = transform.parse(desc.sdp);\n\n    if (!Array.isArray(session.media)) {\n        return ssrcMap;\n    }\n\n    let media = session.media;\n\n    // For unified plan clients, only the first audio and video mlines will have ssrcs for the local sources.\n    // The rest of the m-lines are for the recv-only sources, one for each remote source.\n    if (this._usesUnifiedPlan) {\n        media = [];\n        [ MediaType.AUDIO, MediaType.VIDEO ].forEach(mediaType => {\n            const mLine = session.media.find(m => m.type === mediaType);\n\n            mLine && media.push(mLine);\n        });\n    }\n\n    for (const mLine of media) {\n        if (!Array.isArray(mLine.ssrcs)) {\n            continue; // eslint-disable-line no-continue\n        }\n\n        if (Array.isArray(mLine.ssrcGroups)) {\n            for (const group of mLine.ssrcGroups) {\n                if (typeof group.semantics !== 'undefined'\n                    && typeof group.ssrcs !== 'undefined') {\n                    // Parse SSRCs and store as numbers\n                    const groupSSRCs = group.ssrcs.split(' ').map(ssrcStr => parseInt(ssrcStr, 10));\n                    const primarySSRC = groupSSRCs[0];\n\n                    // Note that group.semantics is already present\n                    group.ssrcs = groupSSRCs;\n\n                    // eslint-disable-next-line max-depth\n                    if (!groupsMap.has(primarySSRC)) {\n                        groupsMap.set(primarySSRC, []);\n                    }\n                    groupsMap.get(primarySSRC).push(group);\n                }\n            }\n        }\n\n        let ssrcs = mLine.ssrcs;\n\n        // Filter the ssrcs with 'msid' attribute for plan-b clients and 'cname' for unified-plan clients.\n        ssrcs = this._usesUnifiedPlan\n            ? ssrcs.filter(s => s.attribute === 'cname')\n            : ssrcs.filter(s => s.attribute === 'msid');\n\n        for (const ssrc of ssrcs) {\n            // Use the mediaType as key for the source map for unified plan clients since msids are not part of\n            // the standard and the unified plan SDPs do not have a proper msid attribute for the sources.\n            // Also the ssrcs for sources do not change for Unified plan clients since RTCRtpSender#replaceTrack is\n            // used for switching the tracks so it is safe to use the mediaType as the key for the TrackSSRCInfo map.\n            const key = this._usesUnifiedPlan ? mLine.type : ssrc.value;\n            const ssrcNumber = ssrc.id;\n            let ssrcInfo = ssrcMap.get(key);\n\n            if (!ssrcInfo) {\n                ssrcInfo = {\n                    ssrcs: [],\n                    groups: [],\n                    msid: key\n                };\n                ssrcMap.set(key, ssrcInfo);\n            }\n            ssrcInfo.ssrcs.push(ssrcNumber);\n\n            if (groupsMap.has(ssrcNumber)) {\n                const ssrcGroups = groupsMap.get(ssrcNumber);\n\n                for (const group of ssrcGroups) {\n                    ssrcInfo.groups.push(group);\n                }\n            }\n        }\n    }\n\n    return ssrcMap;\n};\n\n/**\n * Takes a SessionDescription object and returns a \"normalized\" version.\n * Currently it takes care of ordering the a=ssrc lines and denoting receive\n * only SSRCs.\n */\nconst normalizePlanB = function(desc) {\n    if (typeof desc !== 'object' || desc === null\n        || typeof desc.sdp !== 'string') {\n        logger.warn('An empty description was passed as an argument');\n\n        return desc;\n    }\n\n    // eslint-disable-next-line no-shadow\n    const transform = require('sdp-transform');\n    const session = transform.parse(desc.sdp);\n\n    if (typeof session !== 'undefined'\n            && typeof session.media !== 'undefined'\n            && Array.isArray(session.media)) {\n        session.media.forEach(mLine => {\n\n            // Chrome appears to be picky about the order in which a=ssrc lines\n            // are listed in an m-line when rtx is enabled (and thus there are\n            // a=ssrc-group lines with FID semantics). Specifically if we have\n            // \"a=ssrc-group:FID S1 S2\" and the \"a=ssrc:S2\" lines appear before\n            // the \"a=ssrc:S1\" lines, SRD fails.\n            // So, put SSRC which appear as the first SSRC in an FID ssrc-group\n            // first.\n            const firstSsrcs = [];\n            const newSsrcLines = [];\n\n            if (typeof mLine.ssrcGroups !== 'undefined'\n                && Array.isArray(mLine.ssrcGroups)) {\n                mLine.ssrcGroups.forEach(group => {\n                    if (typeof group.semantics !== 'undefined'\n                        && group.semantics === 'FID') {\n                        if (typeof group.ssrcs !== 'undefined') {\n                            firstSsrcs.push(Number(group.ssrcs.split(' ')[0]));\n                        }\n                    }\n                });\n            }\n\n            if (Array.isArray(mLine.ssrcs)) {\n                let i;\n\n                for (i = 0; i < mLine.ssrcs.length; i++) {\n                    if (typeof mLine.ssrcs[i] === 'object'\n                        && typeof mLine.ssrcs[i].id !== 'undefined'\n                        && firstSsrcs.indexOf(mLine.ssrcs[i].id) >= 0) {\n                        newSsrcLines.push(mLine.ssrcs[i]);\n                        delete mLine.ssrcs[i];\n                    }\n                }\n\n                for (i = 0; i < mLine.ssrcs.length; i++) {\n                    if (typeof mLine.ssrcs[i] !== 'undefined') {\n                        newSsrcLines.push(mLine.ssrcs[i]);\n                    }\n                }\n\n                mLine.ssrcs = replaceDefaultUnifiedPlanMsid(newSsrcLines);\n            }\n        });\n    }\n\n    const resStr = transform.write(session);\n\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: resStr\n    });\n};\n\n/**\n * Unified plan differentiates a remote track not associated with a stream using\n * the msid \"-\", which can incorrectly trigger an onaddstream event in plan-b.\n * For jitsi, these tracks are actually receive-only ssrcs. To prevent\n * onaddstream from firing, remove the ssrcs with msid \"-\" except the cname\n * line. Normally the ssrcs are not used by the client, as the bridge controls\n * media flow, but keep one reference to the ssrc for the p2p case.\n *\n * @param {Array<Object>} ssrcLines - The ssrc lines from a remote description.\n * @private\n * @returns {Array<Object>} ssrcLines with removed lines referencing msid \"-\".\n */\nfunction replaceDefaultUnifiedPlanMsid(ssrcLines = []) {\n    if (!browser.isChrome() || !browser.isVersionGreaterThan(70)) {\n        return ssrcLines;\n    }\n\n    let filteredLines = [ ...ssrcLines ];\n\n    const problematicSsrcIds = ssrcLines.filter(ssrcLine =>\n        ssrcLine.attribute === 'mslabel' && ssrcLine.value === '-')\n        .map(ssrcLine => ssrcLine.id);\n\n    problematicSsrcIds.forEach(ssrcId => {\n        // Find the cname which is to be modified and left in.\n        const cnameLine = filteredLines.find(line =>\n            line.id === ssrcId && line.attribute === 'cname');\n\n        cnameLine.value = `${MediaDirection.RECVONLY}-${ssrcId}`;\n\n        // Remove all of lines for the ssrc.\n        filteredLines\n            = filteredLines.filter(line => line.id !== ssrcId);\n\n        // But re-add the cname line so there is a reference kept to the ssrc\n        // in the SDP.\n        filteredLines.push(cnameLine);\n    });\n\n    return filteredLines;\n}\n\n/**\n * Makes sure that both audio and video directions are configured as 'sendrecv'.\n * @param {Object} localDescription the SDP object as defined by WebRTC.\n * @param {object} options <tt>TracablePeerConnection</tt> config options.\n */\nconst enforceSendRecv = function(localDescription, options) {\n    if (!localDescription) {\n        throw new Error('No local description passed in.');\n    }\n\n    const transformer = new SdpTransformWrap(localDescription.sdp);\n    const audioMedia = transformer.selectMedia(MediaType.AUDIO)?.[0];\n    let changed = false;\n\n    if (audioMedia && audioMedia.direction !== MediaDirection.SENDRECV) {\n        if (options.startSilent) {\n            audioMedia.direction = MediaDirection.INACTIVE;\n        } else {\n            audioMedia.direction = MediaDirection.SENDRECV;\n        }\n\n        changed = true;\n    }\n\n    const videoMedia = transformer.selectMedia(MediaType.VIDEO)?.[0];\n\n    if (videoMedia && videoMedia.direction !== MediaDirection.SENDRECV) {\n        videoMedia.direction = MediaDirection.SENDRECV;\n        changed = true;\n    }\n\n    if (changed) {\n        return new RTCSessionDescription({\n            type: localDescription.type,\n            sdp: transformer.toRawSDP()\n        });\n    }\n\n    return localDescription;\n};\n\n/**\n *\n * @param {JitsiLocalTrack} localTrack\n */\nTraceablePeerConnection.prototype.getLocalSSRC = function(localTrack) {\n    const ssrcInfo = this._getSSRC(localTrack.rtcId);\n\n    return ssrcInfo && ssrcInfo.ssrcs[0];\n};\n\n/**\n * When doing unified plan simulcast, we'll have a set of ssrcs with the\n * same msid but no ssrc-group, since unified plan signals the simulcast\n * group via the a=simulcast line.  Unfortunately, Jicofo will complain\n * if it sees ssrcs with matching msids but no ssrc-group, so we'll inject\n * an ssrc-group line to make Jicofo happy.\n * @param desc A session description object (with 'type' and 'sdp' fields)\n * @return A session description object with its sdp field modified to\n * contain an inject ssrc-group for simulcast\n */\nTraceablePeerConnection.prototype._injectSsrcGroupForUnifiedSimulcast\n    = function(desc) {\n        const sdp = transform.parse(desc.sdp);\n        const video = sdp.media.find(mline => mline.type === 'video');\n\n        // Check if the browser supports RTX, add only the primary ssrcs to the SIM group if that is the case.\n        video.ssrcGroups = video.ssrcGroups || [];\n        const fidGroups = video.ssrcGroups.filter(group => group.semantics === 'FID');\n\n        if (video.simulcast || video.simulcast_03) {\n            const ssrcs = [];\n\n            if (fidGroups && fidGroups.length) {\n                fidGroups.forEach(group => {\n                    ssrcs.push(group.ssrcs.split(' ')[0]);\n                });\n            } else {\n                video.ssrcs.forEach(ssrc => {\n                    if (ssrc.attribute === 'msid') {\n                        ssrcs.push(ssrc.id);\n                    }\n                });\n            }\n            if (video.ssrcGroups.find(group => group.semantics === 'SIM')) {\n                // Group already exists, no need to do anything\n                return desc;\n            }\n\n            video.ssrcGroups.push({\n                semantics: 'SIM',\n                ssrcs: ssrcs.join(' ')\n            });\n        }\n\n        return new RTCSessionDescription({\n            type: desc.type,\n            sdp: transform.write(sdp)\n        });\n    };\n\n/* eslint-disable-next-line vars-on-top */\nconst getters = {\n    signalingState() {\n        return this.peerconnection.signalingState;\n    },\n    iceConnectionState() {\n        return this.peerconnection.iceConnectionState;\n    },\n    connectionState() {\n        return this.peerconnection.connectionState;\n    },\n    localDescription() {\n        let desc = this.peerconnection.localDescription;\n\n        if (!desc) {\n            logger.debug(`${this} getLocalDescription no localDescription found`);\n\n            return {};\n        }\n\n        this.trace('getLocalDescription::preTransform', dumpSDP(desc));\n\n        // If the browser is running in unified plan mode and this is a jvb connection,\n        // transform the SDP to Plan B first.\n        if (this._usesUnifiedPlan && !this.isP2P) {\n            desc = this.interop.toPlanB(desc);\n            this.trace('getLocalDescription::postTransform (Plan B)',\n                dumpSDP(desc));\n\n            desc = this._injectSsrcGroupForUnifiedSimulcast(desc);\n            this.trace('getLocalDescription::postTransform (inject ssrc group)',\n                dumpSDP(desc));\n        } else if (!this._usesUnifiedPlan) {\n            if (browser.doesVideoMuteByStreamRemove()) {\n                desc = this.localSdpMunger.maybeAddMutedLocalVideoTracksToSDP(desc);\n                logger.debug(\n                    'getLocalDescription::postTransform (munge local SDP)', desc);\n            }\n\n            // What comes out of this getter will be signalled over Jingle to\n            // the other peer, so we need to make sure the media direction is\n            // 'sendrecv' because we won't change the direction later and don't want\n            // the other peer to think we can't send or receive.\n            //\n            // Note that the description we set in chrome does have the accurate\n            // direction (e.g. 'recvonly'), since that is technically what is\n            // happening (check setLocalDescription impl).\n            desc = enforceSendRecv(desc, this.options);\n        }\n\n        // See the method's doc for more info about this transformation.\n        desc = this.localSdpMunger.transformStreamIdentifiers(desc);\n\n        return desc;\n    },\n    remoteDescription() {\n        let desc = this.peerconnection.remoteDescription;\n\n        if (!desc) {\n            logger.debug(`${this} getRemoteDescription no remoteDescription found`);\n\n            return {};\n        }\n        this.trace('getRemoteDescription::preTransform', dumpSDP(desc));\n\n        if (this._usesUnifiedPlan) {\n            if (this.isP2P) {\n                // Adjust the media direction for p2p based on whether a local source has been added.\n                desc = this._adjustRemoteMediaDirection(desc);\n            } else {\n                // If this is a jvb connection, transform the SDP to Plan B first.\n                desc = this.interop.toPlanB(desc);\n                this.trace('getRemoteDescription::postTransform (Plan B)', dumpSDP(desc));\n            }\n        }\n\n        return desc;\n    }\n};\n\nObject.keys(getters).forEach(prop => {\n    Object.defineProperty(\n        TraceablePeerConnection.prototype,\n        prop, {\n            get: getters[prop]\n        }\n    );\n});\n\nTraceablePeerConnection.prototype._getSSRC = function(rtcId) {\n    return this.localSSRCs.get(rtcId);\n};\n\n/**\n * Checks if low fps screensharing is in progress.\n *\n * @private\n * @returns {boolean} Returns true if 5 fps screensharing is in progress, false otherwise.\n */\nTraceablePeerConnection.prototype.isSharingLowFpsScreen = function() {\n    return this._isSharingScreen() && this._capScreenshareBitrate;\n};\n\n/**\n * Checks if screensharing is in progress.\n *\n * @returns {boolean}  Returns true if a desktop track has been added to the peerconnection, false otherwise.\n */\nTraceablePeerConnection.prototype._isSharingScreen = function() {\n    const tracks = this.getLocalVideoTracks();\n\n    return Boolean(tracks.find(track => track.videoType === VideoType.DESKTOP));\n};\n\n/**\n * Munges the order of the codecs in the SDP passed based on the preference\n * set through config.js settings. All instances of the specified codec are\n * moved up to the top of the list when it is preferred. The specified codec\n * is deleted from the list if the configuration specifies that the codec be\n * disabled.\n * @param {RTCSessionDescription} description that needs to be munged.\n * @returns {RTCSessionDescription} the munged description.\n */\nTraceablePeerConnection.prototype._mungeCodecOrder = function(description) {\n    if (!this.codecPreference) {\n        return description;\n    }\n\n    const parsedSdp = transform.parse(description.sdp);\n\n    // Only the m-line that defines the source the browser will be sending should need to change.\n    // This is typically the first m-line with the matching media type.\n    const mLine = parsedSdp.media.find(m => m.type === this.codecPreference.mediaType);\n\n    if (!mLine) {\n        return description;\n    }\n\n    if (this.codecPreference.enable) {\n        SDPUtil.preferCodec(mLine, this.codecPreference.mimeType);\n\n        // Strip the high profile H264 codecs on mobile clients for p2p connection.\n        // High profile codecs give better quality at the expense of higher load which\n        // we do not want on mobile clients.\n        // Jicofo offers only the baseline code for the jvb connection.\n        // TODO - add check for mobile browsers once js-utils provides that check.\n        if (this.codecPreference.mimeType === CodecMimeType.H264 && browser.isReactNative() && this.isP2P) {\n            SDPUtil.stripCodec(mLine, this.codecPreference.mimeType, true /* high profile */);\n        }\n\n        // Set the max bitrate here on the SDP so that the configured max. bitrate is effective\n        // as soon as the browser switches to VP9.\n        if (this.codecPreference.mimeType === CodecMimeType.VP9\n            && this.getConfiguredVideoCodec() === CodecMimeType.VP9) {\n            const bitrates = this.tpcUtils.videoBitrates.VP9 || this.tpcUtils.videoBitrates;\n            const hdBitrate = bitrates.high ? bitrates.high : HD_BITRATE;\n            const limit = Math.floor((this._isSharingScreen() ? HD_BITRATE : hdBitrate) / 1000);\n\n            // Use only the HD bitrate for now as there is no API available yet for configuring\n            // the bitrates on the individual SVC layers.\n            mLine.bandwidth = [ {\n                type: 'AS',\n                limit\n            } ];\n        } else {\n            // Clear the bandwidth limit in SDP when VP9 is no longer the preferred codec.\n            // This is needed on react native clients as react-native-webrtc returns the\n            // SDP that the application passed instead of returning the SDP off the native side.\n            // This line automatically gets cleared on web on every renegotiation.\n            mLine.bandwidth = undefined;\n        }\n    } else {\n        SDPUtil.stripCodec(mLine, this.codecPreference.mimeType);\n    }\n\n    return new RTCSessionDescription({\n        type: description.type,\n        sdp: transform.write(parsedSdp)\n    });\n};\n\n/**\n * Add {@link JitsiLocalTrack} to this TPC.\n * @param {JitsiLocalTrack} track\n * @param {boolean} isInitiator indicates if the endpoint is the offerer.\n * @returns {Promise<void>} - resolved when done.\n */\nTraceablePeerConnection.prototype.addTrack = function(track, isInitiator = false) {\n    const rtcId = track.rtcId;\n\n    logger.info(`${this} adding ${track}`);\n\n    if (this.localTracks.has(rtcId)) {\n\n        return Promise.reject(new Error(`${track} is already in ${this}`));\n    }\n\n    this.localTracks.set(rtcId, track);\n    const webrtcStream = track.getOriginalStream();\n\n    if (this._usesUnifiedPlan) {\n        logger.debug(`${this} TPC.addTrack using unified plan`);\n        if (webrtcStream) {\n            try {\n                this.tpcUtils.addTrack(track, isInitiator);\n            } catch (error) {\n                logger.error(`${this} Adding track=${track} failed: ${error?.message}`);\n\n                return Promise.reject(error);\n            }\n        }\n    } else {\n        // Use addStream API for the plan-b case.\n        if (webrtcStream) {\n            this._addStream(webrtcStream);\n\n        // It's not ok for a track to not have a WebRTC stream if:\n        } else if (!browser.doesVideoMuteByStreamRemove()\n                    || track.isAudioTrack()\n                    || (track.isVideoTrack() && !track.isMuted())) {\n            return Promise.reject(new Error(`${this} no WebRTC stream for track=${track}`));\n        }\n\n        // Muted video tracks do not have WebRTC stream\n        if (browser.doesVideoMuteByStreamRemove() && track.isVideoTrack() && track.isMuted()) {\n            const ssrcInfo = this.generateNewStreamSSRCInfo(track);\n\n            this.sdpConsistency.setPrimarySsrc(ssrcInfo.ssrcs[0]);\n            const simGroup\n                = ssrcInfo.groups.find(groupInfo => groupInfo.semantics === 'SIM');\n\n            if (simGroup) {\n                this.simulcast.setSsrcCache(simGroup.ssrcs);\n            }\n            const fidGroups\n                = ssrcInfo.groups.filter(\n                    groupInfo => groupInfo.semantics === 'FID');\n\n            if (fidGroups) {\n                const rtxSsrcMapping = new Map();\n\n                fidGroups.forEach(fidGroup => {\n                    const primarySsrc = fidGroup.ssrcs[0];\n                    const rtxSsrc = fidGroup.ssrcs[1];\n\n                    rtxSsrcMapping.set(primarySsrc, rtxSsrc);\n                });\n                this.rtxModifier.setSsrcCache(rtxSsrcMapping);\n            }\n        }\n    }\n    let promiseChain = Promise.resolve();\n\n    // On Firefox, the encodings have to be configured on the sender only after the transceiver is created.\n    if (browser.isFirefox()) {\n        promiseChain = promiseChain.then(() => webrtcStream && this.tpcUtils.setEncodings(track));\n    }\n\n    return promiseChain;\n};\n\n/**\n * Adds local track as part of the unmute operation.\n * @param {JitsiLocalTrack} track the track to be added as part of the unmute operation.\n *\n * @return {Promise<boolean>} Promise that resolves to true if the underlying PeerConnection's\n * state has changed and renegotiation is required, false if no renegotiation is needed or\n * Promise is rejected when something goes wrong.\n */\nTraceablePeerConnection.prototype.addTrackUnmute = function(track) {\n    logger.info(`${this} Adding track=${track} as unmute`);\n\n    if (!this._assertTrackBelongs('addTrackUnmute', track)) {\n        // Abort\n\n        return Promise.reject('Track not found on the peerconnection');\n    }\n\n    const webRtcStream = track.getOriginalStream();\n\n    if (!webRtcStream) {\n        logger.error(`${this} Unable to add track=${track} as unmute - no WebRTC stream`);\n\n        return Promise.reject('Stream not found');\n    }\n\n    if (this._usesUnifiedPlan) {\n        return this.tpcUtils.replaceTrack(null, track).then(() => this.isP2P);\n    }\n\n    this._addStream(webRtcStream);\n\n    return Promise.resolve(true);\n};\n\n/**\n * Adds WebRTC media stream to the underlying PeerConnection\n * @param {MediaStream} mediaStream\n * @private\n */\nTraceablePeerConnection.prototype._addStream = function(mediaStream) {\n    this.peerconnection.addStream(mediaStream);\n    this._addedStreams.push(mediaStream);\n};\n\n/**\n * Removes WebRTC media stream from the underlying PeerConection\n * @param {MediaStream} mediaStream\n */\nTraceablePeerConnection.prototype._removeStream = function(mediaStream) {\n    this.peerconnection.removeStream(mediaStream);\n    this._addedStreams\n        = this._addedStreams.filter(stream => stream !== mediaStream);\n};\n\n/**\n * This method when called will check if given <tt>localTrack</tt> belongs to\n * this TPC (that it has been previously added using {@link addTrack}). If the\n * track does not belong an error message will be logged.\n * @param {string} methodName the method name that will be logged in an error\n * message\n * @param {JitsiLocalTrack} localTrack\n * @return {boolean} <tt>true</tt> if given local track belongs to this TPC or\n * <tt>false</tt> otherwise.\n * @private\n */\nTraceablePeerConnection.prototype._assertTrackBelongs = function(\n        methodName,\n        localTrack) {\n    const doesBelong = this.localTracks.has(localTrack?.rtcId);\n\n    if (!doesBelong) {\n        logger.error(`${this} ${methodName}: track=${localTrack} does not belong to pc`);\n    }\n\n    return doesBelong;\n};\n\n/**\n * Returns the codec that is configured on the client as the preferred video codec.\n * This takes into account the current order of codecs in the local description sdp.\n *\n * @returns {CodecMimeType} The codec that is set as the preferred codec to receive\n * video in the local SDP.\n */\nTraceablePeerConnection.prototype.getConfiguredVideoCodec = function() {\n    const sdp = this.peerconnection.localDescription?.sdp;\n    const defaultCodec = CodecMimeType.VP8;\n\n    if (!sdp) {\n        return defaultCodec;\n    }\n    const parsedSdp = transform.parse(sdp);\n    const mLine = parsedSdp.media.find(m => m.type === MediaType.VIDEO);\n    const codec = mLine.rtp[0].codec;\n\n    if (codec) {\n        return Object.values(CodecMimeType).find(value => value === codec.toLowerCase());\n    }\n\n    return defaultCodec;\n};\n\n/**\n * Enables or disables simulcast for screenshare based on the frame rate requested for desktop track capture.\n *\n * @param {number} maxFps framerate to be used for desktop track capture.\n */\nTraceablePeerConnection.prototype.setDesktopSharingFrameRate = function(maxFps) {\n    const lowFps = maxFps <= SS_DEFAULT_FRAME_RATE;\n\n    this._capScreenshareBitrate = this.isSimulcastOn() && lowFps;\n};\n\n/**\n * Sets the codec preference on the peerconnection. The codec preference goes into effect when\n * the next renegotiation happens.\n *\n * @param {CodecMimeType} preferredCodec the preferred codec.\n * @param {CodecMimeType} disabledCodec the codec that needs to be disabled.\n * @returns {void}\n */\nTraceablePeerConnection.prototype.setVideoCodecs = function(preferredCodec = null, disabledCodec = null) {\n    // If both enable and disable are set, disable settings will prevail.\n    const enable = disabledCodec === null;\n    const mimeType = disabledCodec ? disabledCodec : preferredCodec;\n\n    if (this.codecPreference && (preferredCodec || disabledCodec)) {\n        this.codecPreference.enable = enable;\n        this.codecPreference.mimeType = mimeType;\n    } else if (preferredCodec || disabledCodec) {\n        this.codecPreference = {\n            enable,\n            mediaType: MediaType.VIDEO,\n            mimeType\n        };\n    } else {\n        logger.warn(`${this} Invalid codec settings[preferred=${preferredCodec},disabled=${disabledCodec}],\n            atleast one value is needed`);\n    }\n};\n\n/**\n * Tells if the given WebRTC <tt>MediaStream</tt> has been added to\n * the underlying WebRTC PeerConnection.\n * @param {MediaStream} mediaStream\n * @returns {boolean}\n */\nTraceablePeerConnection.prototype.isMediaStreamInPc = function(mediaStream) {\n    return this._addedStreams.indexOf(mediaStream) > -1;\n};\n\n/**\n * Remove local track from this TPC.\n * @param {JitsiLocalTrack} localTrack the track to be removed from this TPC.\n *\n * FIXME It should probably remove a boolean just like {@link removeTrackMute}\n *       The same applies to addTrack.\n */\nTraceablePeerConnection.prototype.removeTrack = function(localTrack) {\n    const webRtcStream = localTrack.getOriginalStream();\n\n    this.trace(\n        'removeStream',\n        localTrack.rtcId, webRtcStream ? webRtcStream.id : undefined);\n\n    if (!this._assertTrackBelongs('removeStream', localTrack)) {\n        // Abort - nothing to be done here\n        return;\n    }\n    this.localTracks.delete(localTrack.rtcId);\n    this.localSSRCs.delete(localTrack.rtcId);\n\n    if (webRtcStream) {\n        this.peerconnection.removeStream(webRtcStream);\n    }\n};\n\n/**\n * Returns the sender corresponding to the given media type.\n * @param {MEDIA_TYPE} mediaType - The media type 'audio' or 'video' to be used for the search.\n * @returns {RTPSender|undefined} - The found sender or undefined if no sender\n * was found.\n */\nTraceablePeerConnection.prototype.findSenderByKind = function(mediaType) {\n    if (this.peerconnection.getSenders) {\n        return this.peerconnection.getSenders().find(s => s.track && s.track.kind === mediaType);\n    }\n};\n\n/**\n * Returns the receiver corresponding to the given MediaStreamTrack.\n *\n * @param {MediaSreamTrack} track - The media stream track used for the search.\n * @returns {RTCRtpReceiver|undefined} - The found receiver or undefined if no receiver\n * was found.\n */\nTraceablePeerConnection.prototype.findReceiverForTrack = function(track) {\n    return this.peerconnection.getReceivers().find(r => r.track === track);\n};\n\n/**\n * Returns the sender corresponding to the given MediaStreamTrack.\n *\n * @param {MediaSreamTrack} track - The media stream track used for the search.\n * @returns {RTCRtpSender|undefined} - The found sender or undefined if no sender\n * was found.\n */\nTraceablePeerConnection.prototype.findSenderForTrack = function(track) {\n    if (this.peerconnection.getSenders) {\n        return this.peerconnection.getSenders().find(s => s.track === track);\n    }\n};\n\n/**\n * Replaces <tt>oldTrack</tt> with <tt>newTrack</tt> from the peer connection.\n * Either <tt>oldTrack</tt> or <tt>newTrack</tt> can be null; replacing a valid\n * <tt>oldTrack</tt> with a null <tt>newTrack</tt> effectively just removes\n * <tt>oldTrack</tt>\n *\n * @param {JitsiLocalTrack|null} oldTrack - The current track in use to be replaced on the pc.\n * @param {JitsiLocalTrack|null} newTrack - The new track to be used.\n *\n * @returns {Promise<boolean>} - If the promise resolves with true, renegotiation will be needed.\n * Otherwise no renegotiation is needed.\n */\nTraceablePeerConnection.prototype.replaceTrack = function(oldTrack, newTrack) {\n    if (!(oldTrack || newTrack)) {\n        logger.info(`${this} replaceTrack called with no new track and no old track`);\n\n        return Promise.resolve();\n    }\n\n    // If a track is being added to the peerconnection for the first time, we want the source signaling to be sent to\n    // Jicofo before the mute state is sent over presence. Therefore, trigger a renegotiation in this case. If we\n    // rely on \"negotiationneeded\" fired by the browser to signal new ssrcs, the mute state in presence will be sent\n    // before the source signaling which is undesirable.\n    const negotiationNeeded = Boolean(!oldTrack || !this.localTracks.has(oldTrack?.rtcId));\n\n    if (this._usesUnifiedPlan) {\n        logger.debug(`${this} TPC.replaceTrack using unified plan`);\n        const mediaType = newTrack?.getType() ?? oldTrack?.getType();\n        const stream = newTrack?.getOriginalStream();\n        const promise = newTrack && !stream\n\n            // Ignore cases when the track is replaced while the device is in a muted state.\n            // The track will be replaced again on the peerconnection when the user unmutes.\n            ? Promise.resolve()\n            : this.tpcUtils.replaceTrack(oldTrack, newTrack);\n\n        return promise\n            .then(transceiver => {\n                oldTrack && this.localTracks.delete(oldTrack.rtcId);\n                newTrack && this.localTracks.set(newTrack.rtcId, newTrack);\n                const mediaActive = mediaType === MediaType.AUDIO\n                    ? this.audioTransferActive\n                    : this.videoTransferActive;\n\n                // Set the transceiver direction only if media is not suspended on the connection. This happens when\n                // the client is using the p2p connection. Transceiver direction is updated when media is resumed on\n                // this connection again.\n                if (transceiver && mediaActive) {\n                    transceiver.direction = newTrack ? MediaDirection.SENDRECV : MediaDirection.RECVONLY;\n                }\n\n                // Avoid configuring the encodings on Chromium/Safari until simulcast is configured\n                // for the newly added track using SDP munging which happens during the renegotiation.\n                const configureEncodingsPromise = browser.usesSdpMungingForSimulcast() || !newTrack\n                    ? Promise.resolve()\n                    : this.tpcUtils.setEncodings(newTrack);\n\n                // Renegotiate only in the case of P2P. We rely on 'negotiationeeded' to be fired for JVB.\n                return configureEncodingsPromise.then(() => this.isP2P || negotiationNeeded);\n            });\n    }\n\n    logger.debug(`${this} TPC.replaceTrack using plan B`);\n\n    let promiseChain = Promise.resolve();\n\n    if (oldTrack) {\n        this.removeTrack(oldTrack);\n    }\n    if (newTrack) {\n        promiseChain = this.addTrack(newTrack);\n    }\n\n    return promiseChain.then(() => true);\n};\n\n/**\n * Removes local track as part of the mute operation.\n * @param {JitsiLocalTrack} localTrack the local track to be remove as part of\n * the mute operation.\n * @return {Promise<boolean>} Promise that resolves to true if the underlying PeerConnection's\n * state has changed and renegotiation is required, false if no renegotiation is needed or\n * Promise is rejected when something goes wrong.\n */\nTraceablePeerConnection.prototype.removeTrackMute = function(localTrack) {\n    const webRtcStream = localTrack.getOriginalStream();\n\n    this.trace(\n        'removeStreamMute',\n        localTrack.rtcId, webRtcStream ? webRtcStream.id : null);\n\n    if (!this._assertTrackBelongs('removeStreamMute', localTrack)) {\n        // Abort - nothing to be done here\n        return Promise.reject('Track not found in the peerconnection');\n    }\n\n    if (this._usesUnifiedPlan) {\n        return this.tpcUtils.replaceTrack(localTrack, null);\n    }\n\n    if (webRtcStream) {\n        logger.info(`${this} Removing track=${localTrack} as mute`);\n        this._removeStream(webRtcStream);\n\n        return Promise.resolve(true);\n    }\n\n    logger.error(`${this} removeStreamMute - no WebRTC stream for track=${localTrack}`);\n\n    return Promise.reject('Stream not found');\n};\n\nTraceablePeerConnection.prototype.createDataChannel = function(label, opts) {\n    this.trace('createDataChannel', label, opts);\n\n    return this.peerconnection.createDataChannel(label, opts);\n};\n\n/**\n * Ensures that the simulcast ssrc-group appears after any other ssrc-groups\n * in the SDP so that simulcast is properly activated.\n *\n * @param {Object} localSdp the WebRTC session description instance for\n * the local description.\n * @private\n */\nTraceablePeerConnection.prototype._ensureSimulcastGroupIsLast = function(localSdp) {\n    let sdpStr = localSdp.sdp;\n\n    const videoStartIndex = sdpStr.indexOf('m=video');\n    const simStartIndex = sdpStr.indexOf('a=ssrc-group:SIM', videoStartIndex);\n    let otherStartIndex = sdpStr.lastIndexOf('a=ssrc-group');\n\n    if (simStartIndex === -1\n        || otherStartIndex === -1\n        || otherStartIndex === simStartIndex) {\n        return localSdp;\n    }\n\n    const simEndIndex = sdpStr.indexOf('\\r\\n', simStartIndex);\n    const simStr = sdpStr.substring(simStartIndex, simEndIndex + 2);\n\n    sdpStr = sdpStr.replace(simStr, '');\n    otherStartIndex = sdpStr.lastIndexOf('a=ssrc-group');\n    const otherEndIndex = sdpStr.indexOf('\\r\\n', otherStartIndex);\n    const sdpHead = sdpStr.slice(0, otherEndIndex);\n    const simStrTrimmed = simStr.trim();\n    const sdpTail = sdpStr.slice(otherEndIndex);\n\n    sdpStr = `${sdpHead}\\r\\n${simStrTrimmed}${sdpTail}`;\n\n    return new RTCSessionDescription({\n        type: localSdp.type,\n        sdp: sdpStr\n    });\n};\n\n/**\n * Will adjust audio and video media direction in the given SDP object to\n * reflect the current status of the {@link audioTransferActive} and\n * {@link videoTransferActive} flags.\n * @param {RTCSessionDescription} localDescription the WebRTC session description instance for\n * the local description.\n * @private\n */\nTraceablePeerConnection.prototype._adjustLocalMediaDirection = function(localDescription) {\n    const transformer = new SdpTransformWrap(localDescription.sdp);\n    let modifiedDirection = false;\n    const audioMedia = transformer.selectMedia(MediaType.AUDIO)?.[0];\n\n    if (audioMedia) {\n        const desiredAudioDirection = this.getDesiredMediaDirection(MediaType.AUDIO);\n\n        if (audioMedia.direction !== desiredAudioDirection) {\n            audioMedia.direction = desiredAudioDirection;\n            logger.info(`${this} Adjusted local audio direction to ${desiredAudioDirection}`);\n            modifiedDirection = true;\n        }\n    } else {\n        logger.warn(`${this} No \"audio\" media found in the local description`);\n    }\n\n    const videoMedia = transformer.selectMedia(MediaType.VIDEO)?.[0];\n\n    if (videoMedia) {\n        const desiredVideoDirection = this.getDesiredMediaDirection(MediaType.VIDEO);\n\n        if (videoMedia.direction !== desiredVideoDirection) {\n            videoMedia.direction = desiredVideoDirection;\n            logger.info(`${this} Adjusted local video direction to ${desiredVideoDirection}`);\n            modifiedDirection = true;\n        }\n    } else {\n        logger.warn(`${this} No \"video\" media found in the local description`);\n    }\n\n    if (modifiedDirection) {\n        return new RTCSessionDescription({\n            type: localDescription.type,\n            sdp: transformer.toRawSDP()\n        });\n    }\n\n    return localDescription;\n};\n\n/**\n * Adjusts the media direction on the remote description based on availability of local and remote sources in a p2p\n * media connection.\n *\n * @param {RTCSessionDescription} remoteDescription the WebRTC session description instance for the remote description.\n * @returns the transformed remoteDescription.\n * @private\n */\nTraceablePeerConnection.prototype._adjustRemoteMediaDirection = function(remoteDescription) {\n    const transformer = new SdpTransformWrap(remoteDescription.sdp);\n\n    [ MediaType.AUDIO, MediaType.VIDEO ].forEach(mediaType => {\n        const media = transformer.selectMedia(mediaType)?.[0];\n        const hasLocalSource = this.hasAnyTracksOfType(mediaType);\n        const hasRemoteSource = this.getRemoteTracks(null, mediaType).length > 0;\n\n        media.direction = hasLocalSource && hasRemoteSource\n            ? MediaDirection.SENDRECV\n            : hasLocalSource\n                ? MediaDirection.RECVONLY\n                : hasRemoteSource ? MediaDirection.SENDONLY : MediaDirection.INACTIVE;\n    });\n\n    return new RTCSessionDescription({\n        type: remoteDescription.type,\n        sdp: transformer.toRawSDP()\n    });\n};\n\n/**\n * Munges the stereo flag as well as the opusMaxAverageBitrate in the SDP, based\n * on values set through config.js, if present.\n *\n * @param {RTCSessionDescription} description that needs to be munged.\n * @returns {RTCSessionDescription} the munged description.\n */\nTraceablePeerConnection.prototype._mungeOpus = function(description) {\n    const { audioQuality } = this.options;\n\n    if (!audioQuality?.stereo && !audioQuality?.opusMaxAverageBitrate) {\n        return description;\n    }\n\n    const parsedSdp = transform.parse(description.sdp);\n    const mLines = parsedSdp.media;\n\n    for (const mLine of mLines) {\n        if (mLine.type === 'audio') {\n            const { payload } = mLine.rtp.find(protocol => protocol.codec === CodecMimeType.OPUS);\n\n            if (!payload) {\n                // eslint-disable-next-line no-continue\n                continue;\n            }\n\n            let fmtpOpus = mLine.fmtp.find(protocol => protocol.payload === payload);\n\n            if (!fmtpOpus) {\n                fmtpOpus = {\n                    payload,\n                    config: ''\n                };\n            }\n\n            const fmtpConfig = transform.parseParams(fmtpOpus.config);\n            let sdpChanged = false;\n\n            if (audioQuality?.stereo) {\n                fmtpConfig.stereo = 1;\n                sdpChanged = true;\n            }\n\n            if (audioQuality?.opusMaxAverageBitrate) {\n                fmtpConfig.maxaveragebitrate = audioQuality.opusMaxAverageBitrate;\n                sdpChanged = true;\n            }\n\n            if (!sdpChanged) {\n                // eslint-disable-next-line no-continue\n                continue;\n            }\n\n            let mungedConfig = '';\n\n            for (const key of Object.keys(fmtpConfig)) {\n                mungedConfig += `${key}=${fmtpConfig[key]}; `;\n            }\n\n            fmtpOpus.config = mungedConfig.trim();\n        }\n    }\n\n    return new RTCSessionDescription({\n        type: description.type,\n        sdp: transform.write(parsedSdp)\n    });\n};\n\n/**\n * Sets up the _dtlsTransport object and initializes callbacks for it.\n */\nTraceablePeerConnection.prototype._initializeDtlsTransport = function() {\n    // We are assuming here that we only have one bundled transport here\n    if (!this.peerconnection.getSenders || this._dtlsTransport) {\n        return;\n    }\n\n    const senders = this.peerconnection.getSenders();\n\n    if (senders.length !== 0 && senders[0].transport) {\n        this._dtlsTransport = senders[0].transport;\n\n        this._dtlsTransport.onerror = error => {\n            logger.error(`${this} DtlsTransport error: ${error}`);\n        };\n\n        this._dtlsTransport.onstatechange = () => {\n            this.trace('dtlsTransport.onstatechange', this._dtlsTransport.state);\n        };\n    }\n};\n\n\n/**\n * Configures the stream encodings depending on the video type and the bitrates configured.\n *\n * @returns {Promise} promise that will be resolved when the operation is successful and rejected otherwise.\n */\nTraceablePeerConnection.prototype.configureSenderVideoEncodings = function() {\n    return this.setSenderVideoConstraints(this._senderVideoMaxHeight);\n};\n\nTraceablePeerConnection.prototype.setLocalDescription = function(description) {\n    let localDescription = description;\n\n    this.trace('setLocalDescription::preTransform', dumpSDP(localDescription));\n\n    // Munge stereo flag and opusMaxAverageBitrate based on config.js\n    localDescription = this._mungeOpus(localDescription);\n\n    if (!this._usesUnifiedPlan) {\n        localDescription = this._adjustLocalMediaDirection(localDescription);\n        localDescription = this._ensureSimulcastGroupIsLast(localDescription);\n    }\n\n    // Munge the order of the codecs based on the preferences set through config.js if we are using SDP munging.\n    if (!this._usesTransceiverCodecPreferences) {\n        localDescription = this._mungeCodecOrder(localDescription);\n    }\n\n    this.trace('setLocalDescription::postTransform', dumpSDP(localDescription));\n\n    return new Promise((resolve, reject) => {\n        this.peerconnection.setLocalDescription(localDescription)\n            .then(() => {\n                this.trace('setLocalDescriptionOnSuccess');\n                const localUfrag = SDPUtil.getUfrag(localDescription.sdp);\n\n                if (localUfrag !== this.localUfrag) {\n                    this.localUfrag = localUfrag;\n                    this.eventEmitter.emit(RTCEvents.LOCAL_UFRAG_CHANGED, this, localUfrag);\n                }\n\n                this._initializeDtlsTransport();\n\n                resolve();\n            }, err => {\n                this.trace('setLocalDescriptionOnFailure', err);\n                this.eventEmitter.emit(RTCEvents.SET_LOCAL_DESCRIPTION_FAILED, err, this);\n                reject(err);\n            });\n    });\n};\n\n/**\n * Enables/disables audio media transmission on this peer connection. When\n * disabled the SDP audio media direction in the local SDP will be adjusted to\n * 'inactive' which means that no data will be sent nor accepted, but\n * the connection should be kept alive.\n * @param {boolean} active <tt>true</tt> to enable audio media transmission or\n * <tt>false</tt> to disable. If the value is not a boolean the call will have\n * no effect.\n * @return {boolean} <tt>true</tt> if the value has changed and sRD/sLD cycle\n * needs to be executed in order for the changes to take effect or\n * <tt>false</tt> if the given value was the same as the previous one.\n * @public\n */\nTraceablePeerConnection.prototype.setAudioTransferActive = function(active) {\n    logger.debug(`${this} audio transfer active: ${active}`);\n    const changed = this.audioTransferActive !== active;\n\n    this.audioTransferActive = active;\n\n    if (this._usesUnifiedPlan) {\n        this.tpcUtils.setAudioTransferActive(active);\n\n        // false means no renegotiation up the chain which is not needed in the Unified mode\n        return false;\n    }\n\n    return changed;\n};\n\nTraceablePeerConnection.prototype.setRemoteDescription = function(description) {\n    let remoteDescription = description;\n\n    this.trace('setRemoteDescription::preTransform', dumpSDP(description));\n\n    // Munge stereo flag and opusMaxAverageBitrate based on config.js\n    remoteDescription = this._mungeOpus(remoteDescription);\n\n    if (this._usesUnifiedPlan) {\n        // Translate the SDP to Unified plan format first for the jvb case, p2p case will only have 2 m-lines.\n        if (!this.isP2P) {\n            const currentDescription = this.peerconnection.remoteDescription;\n\n            remoteDescription = this.interop.toUnifiedPlan(remoteDescription, currentDescription);\n            this.trace('setRemoteDescription::postTransform (Unified)', dumpSDP(remoteDescription));\n        }\n        if (this.isSimulcastOn()) {\n            // Implode the simulcast ssrcs so that the remote sdp has only the first ssrc in the SIM group.\n            remoteDescription = this.simulcast.mungeRemoteDescription(remoteDescription);\n            this.trace('setRemoteDescription::postTransform (simulcast)', dumpSDP(remoteDescription));\n\n            remoteDescription = this.tpcUtils.insertUnifiedPlanSimulcastReceive(remoteDescription);\n            this.trace('setRemoteDescription::postTransform (sim receive)', dumpSDP(remoteDescription));\n        }\n        remoteDescription = this.tpcUtils.ensureCorrectOrderOfSsrcs(remoteDescription);\n        this.trace('setRemoteDescription::postTransform (correct ssrc order)', dumpSDP(remoteDescription));\n    } else {\n        if (this.isSimulcastOn()) {\n            // Implode the simulcast ssrcs so that the remote sdp has only the first ssrc in the SIM group.\n            remoteDescription = this.simulcast.mungeRemoteDescription(\n                remoteDescription,\n                true /* add x-google-conference flag */);\n            this.trace('setRemoteDescription::postTransform (simulcast)', dumpSDP(remoteDescription));\n        }\n        remoteDescription = normalizePlanB(remoteDescription);\n    }\n\n    // Munge the order of the codecs based on the preferences set through config.js.\n    remoteDescription = this._mungeCodecOrder(remoteDescription);\n    this.trace('setRemoteDescription::postTransform (munge codec order)', dumpSDP(remoteDescription));\n\n    return new Promise((resolve, reject) => {\n        this.peerconnection.setRemoteDescription(remoteDescription)\n            .then(() => {\n                this.trace('setRemoteDescriptionOnSuccess');\n                const remoteUfrag = SDPUtil.getUfrag(remoteDescription.sdp);\n\n                if (remoteUfrag !== this.remoteUfrag) {\n                    this.remoteUfrag = remoteUfrag;\n                    this.eventEmitter.emit(RTCEvents.REMOTE_UFRAG_CHANGED, this, remoteUfrag);\n                }\n\n                this._initializeDtlsTransport();\n\n                resolve();\n            }, err => {\n                this.trace('setRemoteDescriptionOnFailure', err);\n                this.eventEmitter.emit(RTCEvents.SET_REMOTE_DESCRIPTION_FAILED, err, this);\n                reject(err);\n            });\n    });\n};\n\n/**\n * Changes the resolution of the video stream that is sent to the peer based on the resolution requested by the peer\n * and user preference, sets the degradation preference on the sender based on the video type, configures the maximum\n * bitrates on the send stream.\n *\n * @param {number} frameHeight - The max frame height to be imposed on the outgoing video stream.\n * @returns {Promise} promise that will be resolved when the operation is successful and rejected otherwise.\n */\nTraceablePeerConnection.prototype.setSenderVideoConstraints = function(frameHeight) {\n    if (frameHeight < 0) {\n        throw new Error(`Invalid frameHeight: ${frameHeight}`);\n    }\n\n    // XXX: This is not yet supported on mobile.\n    if (browser.isReactNative()) {\n        return Promise.resolve();\n    }\n\n    this._senderVideoMaxHeight = frameHeight;\n    const localVideoTrack = this.getLocalVideoTracks()[0];\n\n    if (!localVideoTrack || localVideoTrack.isMuted()) {\n        return Promise.resolve();\n    }\n    const videoSender = this.findSenderByKind(MediaType.VIDEO);\n\n    if (!videoSender) {\n        return Promise.resolve();\n    }\n    const parameters = videoSender.getParameters();\n\n    if (!parameters?.encodings?.length) {\n        return Promise.resolve();\n    }\n\n    // Set the degradation preference.\n    const preference = this.isSharingLowFpsScreen()\n        ? DEGRADATION_PREFERENCE_DESKTOP // Prefer resolution for low fps share.\n        : DEGRADATION_PREFERENCE_CAMERA; // Prefer frame-rate for high fps share and camera.\n\n    parameters.degradationPreference = preference;\n    logger.info(`${this} Setting degradation preference [preference=${preference},track=${localVideoTrack}`);\n\n    // Calculate the encodings active state based on the resolution requested by the bridge.\n    this.encodingsEnabledState = this.tpcUtils.calculateEncodingsActiveState(localVideoTrack, frameHeight);\n    const maxBitrates = this.tpcUtils.calculateEncodingsBitrates(localVideoTrack);\n    const videoType = localVideoTrack.getVideoType();\n\n    if (this.isSimulcastOn()) {\n        for (const encoding in parameters.encodings) {\n            if (parameters.encodings.hasOwnProperty(encoding)) {\n                parameters.encodings[encoding].active = this.encodingsEnabledState[encoding];\n\n                // Firefox doesn't follow the spec and lets application specify the degradation preference on the\n                // encodings.\n                browser.isFirefox() && (parameters.encodings[encoding].degradationPreference = preference);\n\n                // Max bitrates are configured on the encodings only for VP8.\n                if (this.getConfiguredVideoCodec() === CodecMimeType.VP8\n                    && (this.options?.videoQuality?.maxBitratesVideo\n                        || this.isSharingLowFpsScreen()\n                        || this._usesUnifiedPlan)) {\n                    parameters.encodings[encoding].maxBitrate = maxBitrates[encoding];\n                }\n            }\n        }\n        this.tpcUtils.updateEncodingsResolution(parameters);\n\n    // For p2p and cases and where simulcast is explicitly disabled.\n    } else if (frameHeight > 0) {\n        let scaleFactor = HD_SCALE_FACTOR;\n\n        // Do not scale down encodings for desktop tracks for non-simulcast case.\n        if (videoType === VideoType.CAMERA && localVideoTrack.resolution > frameHeight) {\n            scaleFactor = Math.floor(localVideoTrack.resolution / frameHeight);\n        }\n\n        parameters.encodings[0].active = true;\n        parameters.encodings[0].scaleResolutionDownBy = scaleFactor;\n\n        // Firefox doesn't follow the spec and lets application specify the degradation preference on the encodings.\n        browser.isFirefox() && (parameters.encodings[0].degradationPreference = preference);\n\n        // Configure the bitrate.\n        if (this.getConfiguredVideoCodec() === CodecMimeType.VP8 && this.options?.videoQuality?.maxBitratesVideo) {\n            let bitrate = this.getTargetVideoBitrates()?.high;\n\n            if (videoType === VideoType.CAMERA) {\n                bitrate = this.tpcUtils.localStreamEncodingsConfig\n                    .find(layer => layer.scaleResolutionDownBy === scaleFactor)?.maxBitrate ?? bitrate;\n            }\n            parameters.encodings[0].maxBitrate = bitrate;\n        }\n    } else {\n        parameters.encodings[0].active = false;\n    }\n\n    logger.info(`${this} setting max height=${frameHeight},encodings=${JSON.stringify(parameters.encodings)}`);\n\n    return videoSender.setParameters(parameters).then(() => {\n        localVideoTrack.maxEnabledResolution = frameHeight;\n        this.eventEmitter.emit(RTCEvents.LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED, localVideoTrack);\n    });\n};\n\n/**\n * Enables/disables video media transmission on this peer connection. When\n * disabled the SDP video media direction in the local SDP will be adjusted to\n * 'inactive' which means that no data will be sent nor accepted, but\n * the connection should be kept alive.\n * @param {boolean} active <tt>true</tt> to enable video media transmission or\n * <tt>false</tt> to disable. If the value is not a boolean the call will have\n * no effect.\n * @return {boolean} <tt>true</tt> if the value has changed and sRD/sLD cycle\n * needs to be executed in order for the changes to take effect or\n * <tt>false</tt> if the given value was the same as the previous one.\n * @public\n */\nTraceablePeerConnection.prototype.setVideoTransferActive = function(active) {\n    logger.debug(`${this} video transfer active: ${active}`);\n    const changed = this.videoTransferActive !== active;\n\n    this.videoTransferActive = active;\n\n    if (this._usesUnifiedPlan) {\n        this.tpcUtils.setVideoTransferActive(active);\n\n        // false means no renegotiation up the chain which is not needed in the Unified mode\n        return false;\n    }\n\n    return changed;\n};\n\n/**\n * Sends DTMF tones if possible.\n *\n * @param {string} tones - The DTMF tones string as defined by {@code RTCDTMFSender.insertDTMF}, 'tones' argument.\n * @param {number} duration - The amount of time in milliseconds that each DTMF should last. It's 200ms by default.\n * @param {number} interToneGap - The length of time in miliseconds to wait between tones. It's 200ms by default.\n *\n * @returns {void}\n */\nTraceablePeerConnection.prototype.sendTones = function(tones, duration = 200, interToneGap = 200) {\n    if (!this._dtmfSender) {\n        if (this.peerconnection.getSenders) {\n            const rtpSender = this.peerconnection.getSenders().find(s => s.dtmf);\n\n            this._dtmfSender = rtpSender && rtpSender.dtmf;\n            this._dtmfSender && logger.info(`${this} initialized DTMFSender using getSenders`);\n        }\n\n        if (!this._dtmfSender) {\n            const localAudioTrack = Array.from(this.localTracks.values()).find(t => t.isAudioTrack());\n\n            if (this.peerconnection.createDTMFSender && localAudioTrack) {\n                this._dtmfSender = this.peerconnection.createDTMFSender(localAudioTrack.getTrack());\n            }\n            this._dtmfSender && logger.info(`${this} initialized DTMFSender using deprecated createDTMFSender`);\n        }\n\n        if (this._dtmfSender) {\n            this._dtmfSender.ontonechange = this._onToneChange.bind(this);\n        }\n    }\n\n    if (this._dtmfSender) {\n        if (this._dtmfSender.toneBuffer) {\n            this._dtmfTonesQueue.push({\n                tones,\n                duration,\n                interToneGap\n            });\n\n            return;\n        }\n\n        this._dtmfSender.insertDTMF(tones, duration, interToneGap);\n    } else {\n        logger.warn(`${this} sendTones - failed to select DTMFSender`);\n    }\n};\n\n/**\n * Callback ivoked by {@code this._dtmfSender} when it has finished playing\n * a single tone.\n *\n * @param {Object} event - The tonechange event which indicates what characters\n * are left to be played for the current tone.\n * @private\n * @returns {void}\n */\nTraceablePeerConnection.prototype._onToneChange = function(event) {\n    // An empty event.tone indicates the current tones have finished playing.\n    // Automatically start playing any queued tones on finish.\n    if (this._dtmfSender && event.tone === '' && this._dtmfTonesQueue.length) {\n        const { tones, duration, interToneGap } = this._dtmfTonesQueue.shift();\n\n        this._dtmfSender.insertDTMF(tones, duration, interToneGap);\n    }\n};\n\n/**\n * Makes the underlying TraceablePeerConnection generate new SSRC for\n * the recvonly video stream.\n */\nTraceablePeerConnection.prototype.generateRecvonlySsrc = function() {\n    const newSSRC = SDPUtil.generateSsrc();\n\n    logger.info(`${this} generated new recvonly SSRC=${newSSRC}`);\n    this.sdpConsistency.setPrimarySsrc(newSSRC);\n};\n\n/**\n * Makes the underlying TraceablePeerConnection forget the current primary video\n * SSRC.\n */\nTraceablePeerConnection.prototype.clearRecvonlySsrc = function() {\n    logger.info(`${this} Clearing primary video SSRC!`);\n    this.sdpConsistency.clearVideoSsrcCache();\n};\n\n/**\n * Closes underlying WebRTC PeerConnection instance and removes all remote\n * tracks by emitting {@link RTCEvents.REMOTE_TRACK_REMOVED} for each one of\n * them.\n */\nTraceablePeerConnection.prototype.close = function() {\n    this.trace('stop');\n\n    // Off SignalingEvents\n    this.signalingLayer.off(SignalingEvents.PEER_MUTED_CHANGED, this._peerMutedChanged);\n    this.signalingLayer.off(SignalingEvents.PEER_VIDEO_TYPE_CHANGED, this._peerVideoTypeChanged);\n    this._usesUnifiedPlan && this.peerconnection.removeEventListener('track', this.onTrack);\n\n    for (const peerTracks of this.remoteTracks.values()) {\n        for (const remoteTracks of peerTracks.values()) {\n            for (const remoteTrack of remoteTracks) {\n                this._removeRemoteTrack(remoteTrack);\n            }\n        }\n    }\n    this.remoteTracks.clear();\n\n    this._addedStreams = [];\n\n    this._dtmfSender = null;\n    this._dtmfTonesQueue = [];\n\n    if (!this.rtc._removePeerConnection(this)) {\n        logger.error(`${this} RTC._removePeerConnection returned false`);\n    }\n    if (this.statsinterval !== null) {\n        window.clearInterval(this.statsinterval);\n        this.statsinterval = null;\n    }\n    logger.info(`${this} Closing peerconnection`);\n    this.peerconnection.close();\n};\n\nTraceablePeerConnection.prototype.createAnswer = function(constraints) {\n    return this._createOfferOrAnswer(false /* answer */, constraints);\n};\n\nTraceablePeerConnection.prototype.createOffer = function(constraints) {\n    return this._createOfferOrAnswer(true /* offer */, constraints);\n};\n\nTraceablePeerConnection.prototype._createOfferOrAnswer = function(\n        isOffer,\n        constraints) {\n    const logName = isOffer ? 'Offer' : 'Answer';\n\n    this.trace(`create${logName}`, JSON.stringify(constraints, null, ' '));\n\n    const handleSuccess = (resultSdp, resolveFn, rejectFn) => {\n        try {\n            this.trace(\n                `create${logName}OnSuccess::preTransform`, dumpSDP(resultSdp));\n\n            if (!this._usesUnifiedPlan) {\n                // If there are no local video tracks, then a \"recvonly\"\n                // SSRC needs to be generated\n                if (!this.hasAnyTracksOfType(MediaType.VIDEO)\n                    && !this.sdpConsistency.hasPrimarySsrcCached()) {\n                    this.generateRecvonlySsrc();\n                }\n\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = new RTCSessionDescription({\n                    type: resultSdp.type,\n                    sdp: this.sdpConsistency.makeVideoPrimarySsrcsConsistent(\n                        resultSdp.sdp)\n                });\n\n                this.trace(\n                    `create${logName}OnSuccess::postTransform `\n                         + '(make primary audio/video ssrcs consistent)',\n                    dumpSDP(resultSdp));\n            }\n\n            const localVideoTrack = this.getLocalVideoTracks()[0];\n\n            // Configure simulcast for camera tracks and for desktop tracks that need simulcast.\n            if (this.isSimulcastOn() && browser.usesSdpMungingForSimulcast()\n                && (localVideoTrack?.getVideoType() === VideoType.CAMERA\n                || this._usesUnifiedPlan\n                || !this.isSharingLowFpsScreen())) {\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = this.simulcast.mungeLocalDescription(resultSdp);\n                this.trace(`create${logName} OnSuccess::postTransform (simulcast)`, dumpSDP(resultSdp));\n            }\n\n            if (!this.options.disableRtx && browser.usesSdpMungingForSimulcast()) {\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = new RTCSessionDescription({\n                    type: resultSdp.type,\n                    sdp: this.rtxModifier.modifyRtxSsrcs(resultSdp.sdp)\n                });\n\n                this.trace(\n                    `create${logName}`\n                         + 'OnSuccess::postTransform (rtx modifier)',\n                    dumpSDP(resultSdp));\n            }\n\n            const ssrcMap = this._extractSSRCMap(resultSdp);\n\n            this._processLocalSSRCsMap(ssrcMap);\n\n            resolveFn(resultSdp);\n        } catch (e) {\n            this.trace(`create${logName}OnError`, e);\n            this.trace(`create${logName}OnError`, dumpSDP(resultSdp));\n            logger.error(`${this} create${logName}OnError`, e, dumpSDP(resultSdp));\n\n            rejectFn(e);\n        }\n    };\n\n    const handleFailure = (err, rejectFn) => {\n        this.trace(`create${logName}OnFailure`, err);\n        const eventType\n            = isOffer\n                ? RTCEvents.CREATE_OFFER_FAILED\n                : RTCEvents.CREATE_ANSWER_FAILED;\n\n        this.eventEmitter.emit(eventType, err, this);\n\n        rejectFn(err);\n    };\n\n    // Set the codec preference before creating an offer or answer so that the generated SDP will have\n    // the correct preference order.\n    if (this._usesTransceiverCodecPreferences) {\n        const transceiver = this.peerconnection.getTransceivers()\n            .find(t => t.receiver && t.receiver?.track?.kind === MediaType.VIDEO);\n\n        if (transceiver) {\n            let capabilities = RTCRtpReceiver.getCapabilities(MediaType.VIDEO)?.codecs;\n            const mimeType = this.codecPreference?.mimeType;\n            const enable = this.codecPreference?.enable;\n\n            if (capabilities && mimeType && enable) {\n                // Move the desired codec (all variations of it as well) to the beginning of the list.\n                /* eslint-disable-next-line arrow-body-style */\n                capabilities.sort(caps => {\n                    return caps.mimeType.toLowerCase() === `${MediaType.VIDEO}/${mimeType}` ? -1 : 1;\n                });\n            } else if (capabilities && mimeType) {\n                capabilities = capabilities\n                    .filter(caps => caps.mimeType.toLowerCase() !== `${MediaType.VIDEO}/${mimeType}`);\n            }\n\n            // Disable ulpfec on Google Chrome and derivatives because\n            // https://bugs.chromium.org/p/chromium/issues/detail?id=1276427\n            if (browser.isChromiumBased()) {\n                capabilities = capabilities\n                    .filter(caps => caps.mimeType.toLowerCase() !== `${MediaType.VIDEO}/${CodecMimeType.ULPFEC}`);\n            }\n\n            try {\n                transceiver.setCodecPreferences(capabilities);\n            } catch (err) {\n                logger.warn(`${this} Setting codec[preference=${mimeType},enable=${enable}] failed`, err);\n            }\n        }\n    }\n\n    return new Promise((resolve, reject) => {\n        let oaPromise;\n\n        if (isOffer) {\n            oaPromise = this.peerconnection.createOffer(constraints);\n        } else {\n            oaPromise = this.peerconnection.createAnswer(constraints);\n        }\n\n        oaPromise\n            .then(\n                sdp => handleSuccess(sdp, resolve, reject),\n                error => handleFailure(error, reject));\n    });\n};\n\n/**\n * Extract primary SSRC from given {@link TrackSSRCInfo} object.\n * @param {TrackSSRCInfo} ssrcObj\n * @return {number|null} the primary SSRC or <tt>null</tt>\n */\nTraceablePeerConnection.prototype._extractPrimarySSRC = function(ssrcObj) {\n    if (ssrcObj && ssrcObj.groups && ssrcObj.groups.length) {\n        return ssrcObj.groups[0].ssrcs[0];\n    } else if (ssrcObj && ssrcObj.ssrcs && ssrcObj.ssrcs.length) {\n        return ssrcObj.ssrcs[0];\n    }\n\n    return null;\n};\n\n/**\n * Goes over the SSRC map extracted from the latest local description and tries\n * to match them with the local tracks (by MSID). Will update the values\n * currently stored in the {@link TraceablePeerConnection.localSSRCs} map.\n * @param {Map<string,TrackSSRCInfo>} ssrcMap\n * @private\n */\nTraceablePeerConnection.prototype._processLocalSSRCsMap = function(ssrcMap) {\n    for (const track of this.localTracks.values()) {\n        const sourceIdentifier = this._usesUnifiedPlan ? track.getType() : track.storedMSID;\n\n        if (ssrcMap.has(sourceIdentifier)) {\n            const newSSRC = ssrcMap.get(sourceIdentifier);\n\n            if (!newSSRC) {\n                logger.error(`${this} No SSRC found for stream=${sourceIdentifier}`);\n\n                return;\n            }\n            const oldSSRC = this.localSSRCs.get(track.rtcId);\n            const newSSRCNum = this._extractPrimarySSRC(newSSRC);\n            const oldSSRCNum = this._extractPrimarySSRC(oldSSRC);\n\n            // eslint-disable-next-line no-negated-condition\n            if (newSSRCNum !== oldSSRCNum) {\n                oldSSRCNum && logger.error(`${this} Overwriting SSRC for track=${track}] with ssrc=${newSSRC}`);\n                this.localSSRCs.set(track.rtcId, newSSRC);\n                this.eventEmitter.emit(RTCEvents.LOCAL_TRACK_SSRC_UPDATED, track, newSSRCNum);\n            }\n        } else if (!track.isVideoTrack() && !track.isMuted()) {\n            // It is normal to find no SSRCs for a muted video track in\n            // the local SDP as the recv-only SSRC is no longer munged in.\n            // So log the warning only if it's not a muted video track.\n            logger.warn(`${this} No SSRCs found in the local SDP for track=${track}, stream=${sourceIdentifier}`);\n        }\n    }\n};\n\nTraceablePeerConnection.prototype.addIceCandidate = function(candidate) {\n    this.trace('addIceCandidate', JSON.stringify({\n        candidate: candidate.candidate,\n        sdpMid: candidate.sdpMid,\n        sdpMLineIndex: candidate.sdpMLineIndex,\n        usernameFragment: candidate.usernameFragment\n    }, null, ' '));\n\n    return this.peerconnection.addIceCandidate(candidate);\n};\n\n/**\n * Returns the number of simulcast streams that are currently enabled on the peerconnection.\n *\n * @returns {number} The number of simulcast streams currently enabled or 1 when simulcast is disabled.\n */\nTraceablePeerConnection.prototype.getActiveSimulcastStreams = function() {\n    let activeStreams = 1;\n\n    if (this.isSimulcastOn() && this.encodingsEnabledState) {\n        activeStreams = this.encodingsEnabledState.filter(stream => Boolean(stream))?.length;\n    } else if (this.isSimulcastOn()) {\n        activeStreams = SIM_LAYER_RIDS.length;\n    }\n\n    return activeStreams;\n};\n\n/**\n * Obtains call-related stats from the peer connection.\n *\n * @returns {Promise<Object>} Promise which resolves with data providing statistics about\n * the peerconnection.\n */\nTraceablePeerConnection.prototype.getStats = function() {\n    return this.peerconnection.getStats();\n};\n\n/**\n * Generates and stores new SSRC info object for given local track.\n * The method should be called only for a video track being added to this TPC\n * in the muted state (given that the current browser uses this strategy).\n * @param {JitsiLocalTrack} track\n * @return {TPCSSRCInfo}\n */\nTraceablePeerConnection.prototype.generateNewStreamSSRCInfo = function(track) {\n    const rtcId = track.rtcId;\n    let ssrcInfo = this._getSSRC(rtcId);\n\n    if (ssrcInfo) {\n        logger.error(`${this} Overwriting local SSRCs for track id=${rtcId}`);\n    }\n\n    // Configure simulcast for camera tracks and desktop tracks that need simulcast.\n    if (this.isSimulcastOn()\n        && (track.getVideoType() === VideoType.CAMERA || !this.isSharingLowFpsScreen())) {\n        ssrcInfo = {\n            ssrcs: [],\n            groups: []\n        };\n        for (let i = 0; i < SIM_LAYER_RIDS.length; i++) {\n            ssrcInfo.ssrcs.push(SDPUtil.generateSsrc());\n        }\n        ssrcInfo.groups.push({\n            ssrcs: ssrcInfo.ssrcs.slice(),\n            semantics: 'SIM'\n        });\n    } else {\n        ssrcInfo = {\n            ssrcs: [ SDPUtil.generateSsrc() ],\n            groups: []\n        };\n    }\n    if (!this.options.disableRtx) {\n        // Specifically use a for loop here because we'll\n        //  be adding to the list we're iterating over, so we\n        //  only want to iterate through the items originally\n        //  on the list\n        const currNumSsrcs = ssrcInfo.ssrcs.length;\n\n        for (let i = 0; i < currNumSsrcs; ++i) {\n            const primarySsrc = ssrcInfo.ssrcs[i];\n            const rtxSsrc = SDPUtil.generateSsrc();\n\n            ssrcInfo.ssrcs.push(rtxSsrc);\n            ssrcInfo.groups.push({\n                ssrcs: [ primarySsrc, rtxSsrc ],\n                semantics: 'FID'\n            });\n        }\n    }\n    ssrcInfo.msid = track.storedMSID;\n    this.localSSRCs.set(rtcId, ssrcInfo);\n\n    return ssrcInfo;\n};\n\n/**\n * Returns if the peer connection uses Unified plan implementation.\n *\n * @returns {boolean} True if the pc uses Unified plan, false otherwise.\n */\nTraceablePeerConnection.prototype.usesUnifiedPlan = function() {\n    return this._usesUnifiedPlan;\n};\n\n/**\n * Creates a text representation of this <tt>TraceablePeerConnection</tt>\n * instance.\n * @return {string}\n */\nTraceablePeerConnection.prototype.toString = function() {\n    return `TPC[id=${this.id},type=${this.isP2P ? 'P2P' : 'JVB'}]`;\n};\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport BridgeVideoType from '../../service/RTC/BridgeVideoType';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport browser from '../browser';\nimport FeatureFlags from '../flags/FeatureFlags';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport Listenable from '../util/Listenable';\nimport { safeCounterIncrement } from '../util/MathUtil';\n\nimport BridgeChannel from './BridgeChannel';\nimport JitsiLocalTrack from './JitsiLocalTrack';\nimport RTCUtils from './RTCUtils';\nimport TraceablePeerConnection from './TraceablePeerConnection';\n\n\nconst logger = getLogger(__filename);\n\n/**\n * The counter used to generated id numbers assigned to peer connections\n * @type {number}\n */\nlet peerConnectionIdCounter = 0;\n\n/**\n * The counter used to generate id number for the local\n * <code>MediaStreamTrack</code>s.\n * @type {number}\n */\nlet rtcTrackIdCounter = 0;\n\n/**\n * Creates {@code JitsiLocalTrack} instances from the passed in meta information\n * about MedieaTracks.\n *\n * @param {Object[]} mediaStreamMetaData - An array of meta information with\n * MediaTrack instances. Each can look like:\n * {{\n *     stream: MediaStream instance that holds a track with audio or video,\n *     track: MediaTrack within the MediaStream,\n *     videoType: \"camera\" or \"desktop\" or falsy,\n *     sourceId: ID of the desktopsharing source,\n *     sourceType: The desktopsharing source type,\n *     effects: Array of effect types\n * }}\n */\nfunction _createLocalTracks(mediaStreamMetaData = []) {\n    return mediaStreamMetaData.map(metaData => {\n        const {\n            sourceId,\n            sourceType,\n            stream,\n            track,\n            videoType,\n            effects\n        } = metaData;\n\n        const { deviceId, facingMode } = track.getSettings();\n\n        // FIXME Move rtcTrackIdCounter to a static method in JitsiLocalTrack\n        // so RTC does not need to handle ID management. This move would be\n        // safer to do once the old createLocalTracks is removed.\n        rtcTrackIdCounter = safeCounterIncrement(rtcTrackIdCounter);\n\n        return new JitsiLocalTrack({\n            deviceId,\n            facingMode,\n            mediaType: track.kind,\n            rtcId: rtcTrackIdCounter,\n            sourceId,\n            sourceType,\n            stream,\n            track,\n            videoType: videoType || null,\n            effects\n        });\n    });\n}\n\n/**\n *\n */\nexport default class RTC extends Listenable {\n    /**\n     *\n     * @param conference\n     * @param options\n     */\n    constructor(conference, options = {}) {\n        super();\n        this.conference = conference;\n\n        /**\n         * A map of active <tt>TraceablePeerConnection</tt>.\n         * @type {Map.<number, TraceablePeerConnection>}\n         */\n        this.peerConnections = new Map();\n\n        this.localTracks = [];\n\n        this.options = options;\n\n        // BridgeChannel instance.\n        // @private\n        // @type {BridgeChannel}\n        this._channel = null;\n\n        /**\n         * The value specified to the last invocation of setLastN before the\n         * channel completed opening. If non-null, the value will be sent\n         * through a channel (once) as soon as it opens and will then be\n         * discarded.\n         * @private\n         * @type {number}\n         */\n        this._lastN = undefined;\n\n        /**\n         * Defines the last N endpoints list. It can be null or an array once\n         * initialised with a channel last N event.\n         * @type {Array<string>|null}\n         * @private\n         */\n        this._lastNEndpoints = null;\n\n        /**\n         * The number representing the maximum video height the local client\n         * should receive from the bridge.\n         *\n         * @type {number|undefined}\n         * @private\n         */\n        this._maxFrameHeight = undefined;\n\n        /**\n         * The endpoint IDs of currently selected participants.\n         *\n         * @type {Array}\n         * @private\n         */\n        this._selectedEndpoints = null;\n\n        // The last N change listener.\n        this._lastNChangeListener = this._onLastNChanged.bind(this);\n\n        this._onDeviceListChanged = this._onDeviceListChanged.bind(this);\n        this._updateAudioOutputForAudioTracks\n            = this._updateAudioOutputForAudioTracks.bind(this);\n\n        /**\n         * The default video type assumed by the bridge.\n         * @deprecated this will go away with multiple streams support\n         * @type {BridgeVideoType}\n         * @private\n         */\n        this._videoType = BridgeVideoType.NONE;\n\n        // Switch audio output device on all remote audio tracks. Local audio\n        // tracks handle this event by themselves.\n        if (RTCUtils.isDeviceChangeAvailable('output')) {\n            RTCUtils.addListener(\n                RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                this._updateAudioOutputForAudioTracks\n            );\n\n            RTCUtils.addListener(\n                RTCEvents.DEVICE_LIST_CHANGED,\n                this._onDeviceListChanged\n            );\n        }\n    }\n\n    /**\n     * Removes any listeners and stored state from this {@code RTC} instance.\n     *\n     * @returns {void}\n     */\n    destroy() {\n        RTCUtils.removeListener(RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED, this._updateAudioOutputForAudioTracks);\n        RTCUtils.removeListener(RTCEvents.DEVICE_LIST_CHANGED, this._onDeviceListChanged);\n\n        if (this._channelOpenListener) {\n            this.removeListener(\n                RTCEvents.DATA_CHANNEL_OPEN,\n                this._channelOpenListener\n            );\n        }\n    }\n\n    /**\n     * Exposes the private helper for converting a WebRTC MediaStream to a\n     * JitsiLocalTrack.\n     *\n     * @param {Array<Object>} tracksInfo\n     * @returns {Array<JitsiLocalTrack>}\n     */\n    static createLocalTracks(tracksInfo) {\n        return _createLocalTracks(tracksInfo);\n    }\n\n    /**\n     * Creates the local MediaStreams.\n     * @param {object} [options] Optional parameters.\n     * @param {array} options.devices The devices that will be requested.\n     * @param {string} options.resolution Resolution constraints.\n     * @param {string} options.cameraDeviceId\n     * @param {string} options.micDeviceId\n     * @returns {*} Promise object that will receive the new JitsiTracks\n     */\n    static obtainAudioAndVideoPermissions(options) {\n        return RTCUtils.obtainAudioAndVideoPermissions(options)\n            .then(tracksInfo => _createLocalTracks(tracksInfo));\n    }\n\n    /**\n     * Initializes the bridge channel of this instance.\n     * At least one of both, peerconnection or wsUrl parameters, must be\n     * given.\n     * @param {RTCPeerConnection} [peerconnection] WebRTC peer connection\n     * instance.\n     * @param {string} [wsUrl] WebSocket URL.\n     */\n    initializeBridgeChannel(peerconnection, wsUrl) {\n        this._channel = new BridgeChannel(peerconnection, wsUrl, this.eventEmitter);\n\n        this._channelOpenListener = () => {\n            const logError = (error, msgType, value) => {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error(`Cannot send ${msgType}(${JSON.stringify(value)}) endpoint message`, error);\n            };\n\n            // When the channel becomes available, tell the bridge about video selections so that it can do adaptive\n            // simulcast, we want the notification to trigger even if userJid is undefined, or null.\n            if (this._receiverVideoConstraints) {\n                try {\n                    this._channel.sendNewReceiverVideoConstraintsMessage(this._receiverVideoConstraints);\n                } catch (error) {\n                    logError(error, 'ReceiverVideoConstraints', this._receiverVideoConstraints);\n                }\n            }\n            if (this._selectedEndpoints) {\n                try {\n                    this._channel.sendSelectedEndpointsMessage(this._selectedEndpoints);\n                } catch (error) {\n                    logError(error, 'SelectedEndpointsChangedEvent', this._selectedEndpoints);\n                }\n            }\n            if (typeof this._maxFrameHeight !== 'undefined') {\n                try {\n                    this._channel.sendReceiverVideoConstraintMessage(this._maxFrameHeight);\n                } catch (error) {\n                    logError(error, 'ReceiverVideoConstraint', this._maxFrameHeight);\n                }\n            }\n            if (typeof this._lastN !== 'undefined' && this._lastN !== -1) {\n                try {\n                    this._channel.sendSetLastNMessage(this._lastN);\n                } catch (error) {\n                    logError(error, 'LastNChangedEvent', this._lastN);\n                }\n            }\n            if (!FeatureFlags.isSourceNameSignalingEnabled()) {\n                try {\n                    this._channel.sendVideoTypeMessage(this._videoType);\n                } catch (error) {\n                    logError(error, 'VideoTypeMessage', this._videoType);\n                }\n            }\n\n            this.removeListener(RTCEvents.DATA_CHANNEL_OPEN, this._channelOpenListener);\n            this._channelOpenListener = null;\n        };\n        this.addListener(RTCEvents.DATA_CHANNEL_OPEN, this._channelOpenListener);\n\n        // Add Last N change listener.\n        this.addListener(RTCEvents.LASTN_ENDPOINT_CHANGED, this._lastNChangeListener);\n    }\n\n    /**\n     * Callback invoked when the list of known audio and video devices has\n     * been updated. Attempts to update the known available audio output\n     * devices.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onDeviceListChanged() {\n        this._updateAudioOutputForAudioTracks(RTCUtils.getAudioOutputDevice());\n    }\n\n    /**\n     * Receives events when Last N had changed.\n     * @param {array} lastNEndpoints The new Last N endpoints.\n     * @private\n     */\n    _onLastNChanged(lastNEndpoints = []) {\n        const oldLastNEndpoints = this._lastNEndpoints || [];\n        let leavingLastNEndpoints = [];\n        let enteringLastNEndpoints = [];\n\n        this._lastNEndpoints = lastNEndpoints;\n\n        leavingLastNEndpoints = oldLastNEndpoints.filter(\n            id => !this.isInLastN(id));\n\n        enteringLastNEndpoints = lastNEndpoints.filter(\n            id => oldLastNEndpoints.indexOf(id) === -1);\n\n        this.conference.eventEmitter.emit(\n            JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED,\n            leavingLastNEndpoints,\n            enteringLastNEndpoints);\n    }\n\n    /**\n     * Should be called when current media session ends and after the\n     * PeerConnection has been closed using PeerConnection.close() method.\n     */\n    onCallEnded() {\n        if (this._channel) {\n            // The BridgeChannel is not explicitly closed as the PeerConnection\n            // is closed on call ended which triggers datachannel onclose\n            // events. If using a WebSocket, the channel must be closed since\n            // it is not managed by the PeerConnection.\n            // The reference is cleared to disable any logic related to the\n            // channel.\n            if (this._channel && this._channel.mode === 'websocket') {\n                this._channel.close();\n            }\n\n            this._channel = null;\n        }\n    }\n\n    /**\n     * Sets the capture frame rate to be used for desktop tracks.\n     *\n     * @param {number} maxFps framerate to be used for desktop track capture.\n     */\n    setDesktopSharingFrameRate(maxFps) {\n        RTCUtils.setDesktopSharingFrameRate(maxFps);\n    }\n\n    /**\n     * Sets the receiver video constraints that determine how bitrate is allocated to each of the video streams\n     * requested from the bridge. The constraints are cached and sent through the bridge channel once the channel\n     * is established.\n     * @param {*} constraints\n     */\n    setNewReceiverVideoConstraints(constraints) {\n        this._receiverVideoConstraints = constraints;\n\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendNewReceiverVideoConstraintsMessage(constraints);\n        }\n    }\n\n    /**\n     * Sets the maximum video size the local participant should receive from\n     * remote participants. Will cache the value and send it through the channel\n     * once it is created.\n     *\n     * @param {number} maxFrameHeightPixels the maximum frame height, in pixels,\n     * this receiver is willing to receive.\n     * @returns {void}\n     */\n    setReceiverVideoConstraint(maxFrameHeight) {\n        this._maxFrameHeight = maxFrameHeight;\n\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendReceiverVideoConstraintMessage(maxFrameHeight);\n        }\n    }\n\n    /**\n     * Sets the video type and availability for the local video source.\n     *\n     * @param {string} videoType 'camera' for camera, 'desktop' for screenshare and\n     * 'none' for when local video source is muted or removed from the peerconnection.\n     * @returns {void}\n     */\n    setVideoType(videoType) {\n        if (this._videoType !== videoType) {\n            this._videoType = videoType;\n\n            if (this._channel && this._channel.isOpen()) {\n                this._channel.sendVideoTypeMessage(videoType);\n            }\n        }\n    }\n\n    /**\n     * Sends the track's  video type to the JVB.\n     * @param {SourceName} sourceName - the track's source name.\n     * @param {BridgeVideoType} videoType - the track's video type.\n     */\n    sendSourceVideoType(sourceName, videoType) {\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendSourceVideoTypeMessage(sourceName, videoType);\n        }\n    }\n\n    /**\n     * Elects the participants with the given ids to be the selected\n     * participants in order to always receive video for this participant (even\n     * when last n is enabled). If there is no channel we store it and send it\n     * through the channel once it is created.\n     *\n     * @param {Array<string>} ids - The user ids.\n     * @throws NetworkError or InvalidStateError or Error if the operation\n     * fails.\n     * @returns {void}\n     */\n    selectEndpoints(ids) {\n        this._selectedEndpoints = ids;\n\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendSelectedEndpointsMessage(ids);\n        }\n    }\n\n    /**\n     *\n     * @param eventType\n     * @param listener\n     */\n    static addListener(eventType, listener) {\n        RTCUtils.addListener(eventType, listener);\n    }\n\n    /**\n     *\n     * @param eventType\n     * @param listener\n     */\n    static removeListener(eventType, listener) {\n        RTCUtils.removeListener(eventType, listener);\n    }\n\n    /**\n     *\n     * @param options\n     */\n    static init(options = {}) {\n        this.options = options;\n\n        return RTCUtils.init(this.options);\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Creates new <tt>TraceablePeerConnection</tt>\n     * @param {SignalingLayer} signaling The signaling layer that will provide information about the media or\n     * participants which is not carried over SDP.\n     * @param {object} pcConfig The {@code RTCConfiguration} to use for the WebRTC peer connection.\n     * @param {boolean} isP2P Indicates whether or not the new TPC will be used in a peer to peer type of session.\n     * @param {object} options The config options.\n     * @param {boolean} options.enableInsertableStreams - Set to true when the insertable streams constraints is to be\n     * enabled on the PeerConnection.\n     * @param {boolean} options.disableSimulcast If set to 'true' will disable the simulcast.\n     * @param {boolean} options.disableRtx If set to 'true' will disable the RTX.\n     * @param {boolean} options.startSilent If set to 'true' no audio will be sent or received.\n     * @return {TraceablePeerConnection}\n     */\n    createPeerConnection(signaling, pcConfig, isP2P, options) {\n        const pcConstraints = JSON.parse(JSON.stringify(RTCUtils.pcConstraints));\n\n        if (typeof options.abtestSuspendVideo !== 'undefined') {\n            RTCUtils.setSuspendVideo(pcConstraints, options.abtestSuspendVideo);\n\n            Statistics.analytics.addPermanentProperties(\n                { abtestSuspendVideo: options.abtestSuspendVideo });\n        }\n\n        if (options.enableInsertableStreams) {\n            logger.debug('E2EE - setting insertable streams constraints');\n            pcConfig.encodedInsertableStreams = true;\n        }\n\n        const supportsSdpSemantics = browser.isReactNative()\n            || (browser.isChromiumBased() && !options.usesUnifiedPlan);\n\n        if (supportsSdpSemantics) {\n            logger.debug('WebRTC application is running in plan-b mode');\n            pcConfig.sdpSemantics = 'plan-b';\n        }\n\n        if (options.forceTurnRelay) {\n            pcConfig.iceTransportPolicy = 'relay';\n        }\n\n        // Set the RTCBundlePolicy to max-bundle so that only one set of ice candidates is generated.\n        // The default policy generates separate ice candidates for audio and video connections.\n        // This change is necessary for Unified plan to work properly on Chrome and Safari.\n        pcConfig.bundlePolicy = 'max-bundle';\n\n        peerConnectionIdCounter = safeCounterIncrement(peerConnectionIdCounter);\n\n        const newConnection\n            = new TraceablePeerConnection(\n                this,\n                peerConnectionIdCounter,\n                signaling,\n                pcConfig, pcConstraints,\n                isP2P, options);\n\n        this.peerConnections.set(newConnection.id, newConnection);\n\n        return newConnection;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Removed given peer connection from this RTC module instance.\n     * @param {TraceablePeerConnection} traceablePeerConnection\n     * @return {boolean} <tt>true</tt> if the given peer connection was removed\n     * successfully or <tt>false</tt> if there was no peer connection mapped in\n     * this RTC instance.\n     */\n    _removePeerConnection(traceablePeerConnection) {\n        const id = traceablePeerConnection.id;\n\n        if (this.peerConnections.has(id)) {\n            // NOTE Remote tracks are not removed here.\n            this.peerConnections.delete(id);\n\n            return true;\n        }\n\n        return false;\n\n    }\n\n    /**\n     *\n     * @param track\n     */\n    addLocalTrack(track) {\n        if (!track) {\n            throw new Error('track must not be null nor undefined');\n        }\n\n        this.localTracks.push(track);\n\n        track.conference = this.conference;\n    }\n\n    /**\n     * Get local video track.\n     * @returns {JitsiLocalTrack|undefined}\n     */\n    getLocalVideoTrack() {\n        const localVideo = this.getLocalTracks(MediaType.VIDEO);\n\n\n        return localVideo.length ? localVideo[0] : undefined;\n    }\n\n    /**\n     * Get local audio track.\n     * @returns {JitsiLocalTrack|undefined}\n     */\n    getLocalAudioTrack() {\n        const localAudio = this.getLocalTracks(MediaType.AUDIO);\n\n\n        return localAudio.length ? localAudio[0] : undefined;\n    }\n\n    /**\n     * Returns the endpoint id for the local user.\n     * @returns {string}\n     */\n    getLocalEndpointId() {\n        return this.conference.myUserId();\n    }\n\n    /**\n     * Returns the local tracks of the given media type, or all local tracks if\n     * no specific type is given.\n     * @param {MediaType} [mediaType] Optional media type filter.\n     * (audio or video).\n     */\n    getLocalTracks(mediaType) {\n        let tracks = this.localTracks.slice();\n\n        if (mediaType !== undefined) {\n            tracks = tracks.filter(\n                track => track.getType() === mediaType);\n        }\n\n        return tracks;\n    }\n\n    /**\n     * Obtains all remote tracks currently known to this RTC module instance.\n     * @param {MediaType} [mediaType] The remote tracks will be filtered\n     *      by their media type if this argument is specified.\n     * @return {Array<JitsiRemoteTrack>}\n     */\n    getRemoteTracks(mediaType) {\n        let remoteTracks = [];\n\n        for (const tpc of this.peerConnections.values()) {\n            const pcRemoteTracks = tpc.getRemoteTracks(undefined, mediaType);\n\n            if (pcRemoteTracks) {\n                remoteTracks = remoteTracks.concat(pcRemoteTracks);\n            }\n        }\n\n        return remoteTracks;\n    }\n\n    /**\n     * Set mute for all local audio streams attached to the conference.\n     * @param value The mute value.\n     * @returns {Promise}\n     */\n    setAudioMute(value) {\n        const mutePromises = [];\n\n        this.getLocalTracks(MediaType.AUDIO).forEach(audioTrack => {\n            // this is a Promise\n            mutePromises.push(value ? audioTrack.mute() : audioTrack.unmute());\n        });\n\n        // We return a Promise from all Promises so we can wait for their\n        // execution.\n        return Promise.all(mutePromises);\n    }\n\n    /**\n    * Set mute for all local video streams attached to the conference.\n    * @param value The mute value.\n    * @returns {Promise}\n    */\n    setVideoMute(value) {\n        const mutePromises = [];\n\n        this.getLocalTracks(MediaType.VIDEO).concat(this.getLocalTracks(MediaType.PRESENTER))\n            .forEach(videoTrack => {\n                // this is a Promise\n                mutePromises.push(value ? videoTrack.mute() : videoTrack.unmute());\n            });\n\n        // We return a Promise from all Promises so we can wait for their\n        // execution.\n        return Promise.all(mutePromises);\n    }\n\n    /**\n     *\n     * @param track\n     */\n    removeLocalTrack(track) {\n        const pos = this.localTracks.indexOf(track);\n\n        if (pos === -1) {\n            return;\n        }\n\n        this.localTracks.splice(pos, 1);\n    }\n\n    /**\n     *\n     * @param elSelector\n     * @param stream\n     */\n    static attachMediaStream(elSelector, stream) {\n        return RTCUtils.attachMediaStream(elSelector, stream);\n    }\n\n    /**\n     * Returns the id of the given stream.\n     * @param {MediaStream} stream\n     */\n    static getStreamID(stream) {\n        return RTCUtils.getStreamID(stream);\n    }\n\n    /**\n     * Returns the id of the given track.\n     * @param {MediaStreamTrack} track\n     */\n    static getTrackID(track) {\n        return RTCUtils.getTrackID(track);\n    }\n\n    /**\n     * Returns true if retrieving the list of input devices is supported\n     * and false if not.\n     */\n    static isDeviceListAvailable() {\n        return RTCUtils.isDeviceListAvailable();\n    }\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     * @param {string} [deviceType] Type of device to change. Default is\n     *      undefined or 'input', 'output' - for audio output device change.\n     * @returns {boolean} true if available, false otherwise.\n     */\n    static isDeviceChangeAvailable(deviceType) {\n        return RTCUtils.isDeviceChangeAvailable(deviceType);\n    }\n\n    /**\n     * Returns whether the current execution environment supports WebRTC (for\n     * use within this library).\n     *\n     * @returns {boolean} {@code true} if WebRTC is supported in the current\n     * execution environment (for use within this library); {@code false},\n     * otherwise.\n     */\n    static isWebRtcSupported() {\n        return browser.isSupported();\n    }\n\n    /**\n     * Returns currently used audio output device id, '' stands for default\n     * device\n     * @returns {string}\n     */\n    static getAudioOutputDevice() {\n        return RTCUtils.getAudioOutputDevice();\n    }\n\n    /**\n     * Returns list of available media devices if its obtained, otherwise an\n     * empty array is returned/\n     * @returns {array} list of available media devices.\n     */\n    static getCurrentlyAvailableMediaDevices() {\n        return RTCUtils.getCurrentlyAvailableMediaDevices();\n    }\n\n    /**\n     * Returns whether available devices have permissions granted\n     * @returns {Boolean}\n     */\n    static arePermissionsGrantedForAvailableDevices() {\n        return RTCUtils.arePermissionsGrantedForAvailableDevices();\n    }\n\n    /**\n     * Returns event data for device to be reported to stats.\n     * @returns {MediaDeviceInfo} device.\n     */\n    static getEventDataForActiveDevice(device) {\n        return RTCUtils.getEventDataForActiveDevice(device);\n    }\n\n    /**\n     * Sets current audio output device.\n     * @param {string} deviceId Id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices().\n     * @returns {Promise} resolves when audio output is changed, is rejected\n     *      otherwise\n     */\n    static setAudioOutputDevice(deviceId) {\n        return RTCUtils.setAudioOutputDevice(deviceId);\n    }\n\n    /**\n     * Returns <tt>true<tt/> if given WebRTC MediaStream is considered a valid\n     * \"user\" stream which means that it's not a \"receive only\" stream nor a\n     * \"mixed\" JVB stream.\n     *\n     * Clients that implement Unified Plan, such as Firefox use recvonly\n     * \"streams/channels/tracks\" for receiving remote stream/tracks, as opposed\n     * to Plan B where there are only 3 channels: audio, video and data.\n     *\n     * @param {MediaStream} stream The WebRTC MediaStream instance.\n     * @returns {boolean}\n     */\n    static isUserStream(stream) {\n        return RTC.isUserStreamById(RTCUtils.getStreamID(stream));\n    }\n\n    /**\n     * Returns <tt>true<tt/> if a WebRTC MediaStream identified by given stream\n     * ID is considered a valid \"user\" stream which means that it's not a\n     * \"receive only\" stream nor a \"mixed\" JVB stream.\n     *\n     * Clients that implement Unified Plan, such as Firefox use recvonly\n     * \"streams/channels/tracks\" for receiving remote stream/tracks, as opposed\n     * to Plan B where there are only 3 channels: audio, video and data.\n     *\n     * @param {string} streamId The id of WebRTC MediaStream.\n     * @returns {boolean}\n     */\n    static isUserStreamById(streamId) {\n        return streamId && streamId !== 'mixedmslabel'\n            && streamId !== 'default';\n    }\n\n    /**\n     * Allows to receive list of available cameras/microphones.\n     * @param {function} callback Would receive array of devices as an\n     *      argument.\n     */\n    static enumerateDevices(callback) {\n        RTCUtils.enumerateDevices(callback);\n    }\n\n    /**\n     * A method to handle stopping of the stream.\n     * One point to handle the differences in various implementations.\n     * @param {MediaStream} mediaStream MediaStream object to stop.\n     */\n    static stopMediaStream(mediaStream) {\n        RTCUtils.stopMediaStream(mediaStream);\n    }\n\n    /**\n     * Returns whether the desktop sharing is enabled or not.\n     * @returns {boolean}\n     */\n    static isDesktopSharingEnabled() {\n        return RTCUtils.isDesktopSharingEnabled();\n    }\n\n    /**\n     * Closes the currently opened bridge channel.\n     */\n    closeBridgeChannel() {\n        if (this._channel) {\n            this._channel.close();\n            this._channel = null;\n\n            this.removeListener(RTCEvents.LASTN_ENDPOINT_CHANGED, this._lastNChangeListener);\n        }\n    }\n\n    /* eslint-disable max-params */\n    /**\n     *\n     * @param {TraceablePeerConnection} tpc\n     * @param {number} ssrc\n     * @param {number} audioLevel\n     * @param {boolean} isLocal\n     */\n    setAudioLevel(tpc, ssrc, audioLevel, isLocal) {\n        const track = tpc.getTrackBySSRC(ssrc);\n\n        if (!track) {\n            return;\n        } else if (!track.isAudioTrack()) {\n            logger.warn(`Received audio level for non-audio track: ${ssrc}`);\n\n            return;\n        } else if (track.isLocal() !== isLocal) {\n            logger.error(\n                `${track} was expected to ${isLocal ? 'be' : 'not be'} local`);\n        }\n\n        track.setAudioLevel(audioLevel, tpc);\n    }\n\n    /**\n     * Sends message via the bridge channel.\n     * @param {string} to The id of the endpoint that should receive the\n     *      message. If \"\" the message will be sent to all participants.\n     * @param {object} payload The payload of the message.\n     * @throws NetworkError or InvalidStateError or Error if the operation\n     * fails or there is no data channel created.\n     */\n    sendChannelMessage(to, payload) {\n        if (this._channel) {\n            this._channel.sendMessage(to, payload);\n        } else {\n            throw new Error('Channel support is disabled!');\n        }\n    }\n\n    /**\n     * Sends the local stats via the bridge channel.\n     * @param {Object} payload The payload of the message.\n     * @throws NetworkError/InvalidStateError/Error if the operation fails or if there is no data channel created.\n     */\n    sendEndpointStatsMessage(payload) {\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendEndpointStatsMessage(payload);\n        }\n    }\n\n    /**\n     * Selects a new value for \"lastN\". The requested amount of videos are going\n     * to be delivered after the value is in effect. Set to -1 for unlimited or\n     * all available videos.\n     * @param {number} value the new value for lastN.\n     */\n    setLastN(value) {\n        if (this._lastN !== value) {\n            this._lastN = value;\n            if (this._channel && this._channel.isOpen()) {\n                this._channel.sendSetLastNMessage(value);\n            }\n            this.eventEmitter.emit(RTCEvents.LASTN_VALUE_CHANGED, value);\n        }\n    }\n\n    /**\n     * Indicates if the endpoint id is currently included in the last N.\n     * @param {string} id The endpoint id that we check for last N.\n     * @returns {boolean} true if the endpoint id is in the last N or if we\n     * don't have bridge channel support, otherwise we return false.\n     */\n    isInLastN(id) {\n        return !this._lastNEndpoints // lastNEndpoints not initialised yet.\n            || this._lastNEndpoints.indexOf(id) > -1;\n    }\n\n    /**\n     * Updates the target audio output device for all remote audio tracks.\n     *\n     * @param {string} deviceId - The device id of the audio ouput device to\n     * use for all remote tracks.\n     * @private\n     * @returns {void}\n     */\n    _updateAudioOutputForAudioTracks(deviceId) {\n        const remoteAudioTracks = this.getRemoteTracks(MediaType.AUDIO);\n\n        for (const track of remoteAudioTracks) {\n            track.setAudioOutput(deviceId);\n        }\n    }\n}\n","/**\n * Indicates that the local connection statistics were updated.\n */\nexport const LOCAL_STATS_UPDATED = 'cq.local_stats_updated';\n\n/**\n * Indicates that the connection statistics for a particular remote participant\n * were updated.\n */\nexport const REMOTE_STATS_UPDATED = 'cq.remote_stats_updated';\n","import { getLogger } from '@jitsi/logger';\n\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\nimport CodecMimeType from '../../service/RTC/CodecMimeType';\nimport * as RTCEvents from '../../service/RTC/RTCEvents';\nimport * as ConnectionQualityEvents from '../../service/connectivity/ConnectionQualityEvents';\nimport browser from '../browser';\n\nconst Resolutions = require('../../service/RTC/Resolutions');\nconst VideoType = require('../../service/RTC/VideoType');\nconst XMPPEvents = require('../../service/xmpp/XMPPEvents');\n\nconst logger = getLogger(__filename);\n\n/**\n * The value to use for the \"type\" field for messages sent by ConnectionQuality\n * over the data channel.\n */\nconst STATS_MESSAGE_TYPE = 'stats';\n\n/**\n * The value to use for the \"type\" field for messages sent\n * over the data channel that contain facial expression.\n */\nconst FACIAL_EXPRESSION_MESSAGE_TYPE = 'facial_expression';\n\nconst kSimulcastFormats = [\n    { width: 1920,\n        height: 1080,\n        layers: 3,\n        target: 'high',\n        targetRN: 4000000 },\n    { width: 1280,\n        height: 720,\n        layers: 3,\n        target: 'high',\n        targetRN: 2500000 },\n    { width: 960,\n        height: 540,\n        layers: 3,\n        target: 'standard',\n        targetRN: 900000 },\n    { width: 640,\n        height: 360,\n        layers: 2,\n        target: 'standard',\n        targetRN: 500000 },\n    { width: 480,\n        height: 270,\n        layers: 2,\n        target: 'low',\n        targetRN: 350000 },\n    { width: 320,\n        height: 180,\n        layers: 1,\n        target: 'low',\n        targetRN: 150000 }\n];\n\n/**\n * The maximum bitrate to use as a measurement against the participant's current\n * bitrate. This cap helps in the cases where the participant's bitrate is high\n * but not enough to fulfill high targets, such as with 1080p.\n */\nconst MAX_TARGET_BITRATE = 2500;\n\n/**\n * The initial bitrate for video in kbps.\n */\nlet startBitrate = 800;\n\n/**\n * Gets the expected bitrate (in kbps) in perfect network conditions.\n * @param simulcast {boolean} whether simulcast is enabled or not.\n * @param resolution {Resolution} the resolution.\n * @param millisSinceStart {number} the number of milliseconds since sending video started.\n * @param videoQualitySettings {Object} the bitrate and codec settings for the local video source.\n */\nfunction getTarget(simulcast, resolution, millisSinceStart, videoQualitySettings) {\n    let target = 0;\n    let height = Math.min(resolution.height, resolution.width);\n\n    // Find the first format with height no bigger than ours.\n    let simulcastFormat = kSimulcastFormats.find(f => f.height <= height);\n\n    if (simulcastFormat && simulcast && videoQualitySettings.codec === CodecMimeType.VP8) {\n        // Sum the target fields from all simulcast layers for the given\n        // resolution (e.g. 720p + 360p + 180p) for VP8 simulcast.\n        for (height = simulcastFormat.height; height >= 180; height /= 2) {\n            const targetHeight = height;\n\n            simulcastFormat = kSimulcastFormats.find(f => f.height === targetHeight);\n            if (simulcastFormat) {\n                target += browser.isReactNative()\n                    ? simulcastFormat.targetRN\n                    : videoQualitySettings[simulcastFormat.target];\n            } else {\n                break;\n            }\n        }\n    } else if (simulcastFormat) {\n        // For VP9 SVC, H.264 (simulcast automatically disabled) and p2p, target bitrate will be\n        // same as that of the individual stream bitrate.\n        target = browser.isReactNative()\n            ? simulcastFormat.targetRN\n            : videoQualitySettings[simulcastFormat.target];\n    }\n\n    // Allow for an additional 1 second for ramp up -- delay any initial drop\n    // of connection quality by 1 second. Convert target from bps to kbps.\n    return Math.min(target / 1000, rampUp(Math.max(0, millisSinceStart - 1000)));\n}\n\n/**\n * Gets the bitrate to which GCC would have ramped up in perfect network\n * conditions after millisSinceStart milliseconds.\n * @param millisSinceStart {number} the number of milliseconds since sending\n * video was enabled.\n */\nfunction rampUp(millisSinceStart) {\n    if (millisSinceStart > 60000) {\n        return Number.MAX_SAFE_INTEGER;\n    }\n\n    // According to GCC the send side bandwidth estimation grows with at most\n    // 8% per second.\n    // https://tools.ietf.org/html/draft-ietf-rmcat-gcc-02#section-5.5\n    return startBitrate * Math.pow(1.08, millisSinceStart / 1000);\n}\n\n/**\n * A class which monitors the local statistics coming from the RTC modules, and\n * calculates a \"connection quality\" value, in percent, for the media\n * connection. A value of 100% indicates a very good network connection, and a\n * value of 0% indicates a poor connection.\n */\nexport default class ConnectionQuality {\n    /**\n     *\n     * @param conference\n     * @param eventEmitter\n     * @param options\n     */\n    constructor(conference, eventEmitter, options) {\n        this.eventEmitter = eventEmitter;\n\n        /**\n         * The owning JitsiConference.\n         */\n        this._conference = conference;\n\n        /**\n         * Holds statistics about the local connection quality.\n         */\n        this._localStats = {\n            connectionQuality: 100,\n            jvbRTT: undefined\n        };\n\n        /**\n         * The time this._localStats.connectionQuality was last updated.\n         */\n        this._lastConnectionQualityUpdate = -1;\n\n        /**\n         * Conference options.\n         */\n        this._options = options;\n\n        /**\n         * Maps a participant ID to an object holding connection quality\n         * statistics received from this participant.\n         */\n        this._remoteStats = {};\n\n        /**\n         * The time that the ICE state last changed to CONNECTED. We use this\n         * to calculate how much time we as a sender have had to ramp-up.\n         */\n        this._timeIceConnected = -1;\n\n        /**\n         * The time that local video was unmuted. We use this to calculate how\n         * much time we as a sender have had to ramp-up.\n         */\n        this._timeVideoUnmuted = -1;\n\n        // We assume a global startBitrate value for the sake of simplicity.\n        if (this._options.config?.startBitrate > 0) {\n            startBitrate = this._options.config.startBitrate;\n        }\n\n        // TODO: consider ignoring these events and letting the user of\n        // lib-jitsi-meet handle these separately.\n        conference.on(\n            ConferenceEvents.CONNECTION_INTERRUPTED,\n            () => {\n                this._updateLocalConnectionQuality(0);\n                this.eventEmitter.emit(\n                    ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n                    this._localStats);\n                this._broadcastLocalStats();\n            });\n\n        conference.room.addListener(\n            XMPPEvents.ICE_CONNECTION_STATE_CHANGED,\n            (jingleSession, newState) => {\n                if (!jingleSession.isP2P && newState === 'connected') {\n                    this._timeIceConnected = window.performance.now();\n                }\n            });\n\n        // Listen to DataChannel message from other participants in the\n        // conference, and update the _remoteStats field accordingly.\n        // TODO - Delete this when all the mobile endpoints switch to using the new Colibri\n        // message format for sending the endpoint stats.\n        conference.on(\n            ConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n            (participant, payload) => {\n                if (payload.type === STATS_MESSAGE_TYPE) {\n                    this._updateRemoteStats(\n                        participant.getId(), payload.values);\n                }\n            });\n\n        conference.on(\n            ConferenceEvents.ENDPOINT_STATS_RECEIVED,\n            (participant, payload) => {\n                this._updateRemoteStats(participant.getId(), payload);\n            });\n\n        conference.on(\n            ConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n            (participant, payload) => {\n                if (payload.type === FACIAL_EXPRESSION_MESSAGE_TYPE) {\n                    this.eventEmitter.emit(\n                        ConferenceEvents.FACIAL_EXPRESSION_ADDED,\n                        participant.getId(),\n                        payload);\n                }\n            });\n\n        // Listen to local statistics events originating from the RTC module and update the _localStats field.\n        conference.statistics.addConnectionStatsListener(this._updateLocalStats.bind(this));\n\n        // Save the last time we were unmuted.\n        conference.on(\n            ConferenceEvents.TRACK_MUTE_CHANGED,\n            track => {\n                if (track.isVideoTrack()) {\n                    if (track.isMuted()) {\n                        this._timeVideoUnmuted = -1;\n                    } else {\n                        this._maybeUpdateUnmuteTime();\n                    }\n                }\n            });\n        conference.on(\n            ConferenceEvents.TRACK_ADDED,\n            track => {\n                if (track.isVideoTrack() && !track.isMuted()) {\n                    this._maybeUpdateUnmuteTime();\n                }\n            });\n        conference.rtc.on(\n            RTCEvents.LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED,\n            track => {\n                this._localStats.maxEnabledResolution = track.maxEnabledResolution;\n            });\n\n        conference.on(\n            ConferenceEvents.SERVER_REGION_CHANGED,\n            serverRegion => {\n                this._localStats.serverRegion = serverRegion;\n            });\n\n        conference.on(\n            ConferenceEvents.PROPERTIES_CHANGED,\n            properties => {\n                this._localStats.bridgeCount\n                    = Number((properties || {})['bridge-count']);\n            }\n        );\n    }\n\n    /**\n     * Sets _timeVideoUnmuted if it was previously unset. If it was already set,\n     * doesn't change it.\n     */\n    _maybeUpdateUnmuteTime() {\n        if (this._timeVideoUnmuted < 0) {\n            this._timeVideoUnmuted = window.performance.now();\n        }\n    }\n\n    /**\n     * Calculates a new \"connection quality\" value.\n     * @param videoType {VideoType} the type of the video source (camera or a screen capture).\n     * @param isMuted {boolean} whether the local video is muted.\n     * @param resolutionName {Resolution} the input resolution used by the camera.\n     * @returns {*} the newly calculated connection quality.\n     */\n    _calculateConnectionQuality(videoType, isMuted, resolutionName) {\n\n        // resolutionName is an index into Resolutions (where \"720\" is\n        // \"1280x720\" and \"960\" is \"960x720\" ...).\n        const resolution = Resolutions[resolutionName];\n\n        let quality = 100;\n        let packetLoss;\n\n        // TODO: take into account packet loss for received streams\n\n        if (this._localStats.packetLoss) {\n            packetLoss = this._localStats.packetLoss.upload;\n\n            // Ugly Hack Alert (UHA):\n            // The packet loss for the upload direction is calculated based on\n            // incoming RTCP Receiver Reports. Since we don't have RTCP\n            // termination for audio, these reports come from the actual\n            // receivers in the conference and therefore the reported packet\n            // loss includes loss from the bridge to the receiver.\n            // When we are sending video this effect is small, because the\n            // number of video packets is much larger than the number of audio\n            // packets (and our calculation is based on the total number of\n            // received and lost packets).\n            // When video is muted, however, the effect might be significant,\n            // but we don't know what it is. We do know that it is positive, so\n            // as a temporary solution, until RTCP termination is implemented\n            // for the audio streams, we relax the packet loss checks here.\n            if (isMuted) {\n                packetLoss *= 0.5;\n            }\n        }\n\n        if (isMuted || !resolution || videoType === VideoType.DESKTOP\n            || this._timeIceConnected < 0\n            || this._timeVideoUnmuted < 0) {\n\n            // Calculate a value based on packet loss only.\n            if (packetLoss === undefined) {\n                logger.error('Cannot calculate connection quality, unknown '\n                    + 'packet loss.');\n                quality = 100;\n            } else if (packetLoss <= 2) {\n                quality = 100; // Full 5 bars.\n            } else if (packetLoss <= 4) {\n                quality = 70; // 4 bars\n            } else if (packetLoss <= 6) {\n                quality = 50; // 3 bars\n            } else if (packetLoss <= 8) {\n                quality = 30; // 2 bars\n            } else if (packetLoss <= 12) {\n                quality = 10; // 1 bars\n            } else {\n                quality = 0; // Still 1 bar, but slower climb-up.\n            }\n        } else {\n            // Calculate a value based on the send video bitrate on the active TPC.\n            const activeTPC = this._conference.getActivePeerConnection();\n\n            if (activeTPC) {\n                const isSimulcastOn = activeTPC.isSimulcastOn();\n                const videoQualitySettings = activeTPC.getTargetVideoBitrates();\n\n                // Add the codec info as well.\n                videoQualitySettings.codec = activeTPC.getConfiguredVideoCodec();\n\n                // Time since sending of video was enabled.\n                const millisSinceStart = window.performance.now()\n                    - Math.max(this._timeVideoUnmuted, this._timeIceConnected);\n                const statsInterval = this._options.config?.pcStatsInterval ?? 10000;\n\n                // Expected sending bitrate in perfect conditions.\n                let target = getTarget(isSimulcastOn, resolution, millisSinceStart, videoQualitySettings);\n\n                target = Math.min(target, MAX_TARGET_BITRATE);\n\n                // Calculate the quality only after the stats are available (after video was enabled).\n                if (millisSinceStart > statsInterval) {\n                    quality = 100 * this._localStats.bitrate.upload / target;\n                }\n            }\n\n            // Whatever the bitrate, drop early if there is significant loss\n            if (packetLoss && packetLoss >= 10) {\n                quality = Math.min(quality, 30);\n            }\n        }\n\n        // Make sure that the quality doesn't climb quickly\n        if (this._lastConnectionQualityUpdate > 0) {\n            const maxIncreasePerSecond = 2;\n            const prevConnectionQuality = this._localStats.connectionQuality;\n            const diffSeconds = (window.performance.now() - this._lastConnectionQualityUpdate) / 1000;\n\n            quality = Math.min(quality, prevConnectionQuality + (diffSeconds * maxIncreasePerSecond));\n        }\n\n        return Math.min(100, quality);\n    }\n\n    /**\n     * Updates the localConnectionQuality value\n     * @param values {number} the new value. Should be in [0, 100].\n     */\n    _updateLocalConnectionQuality(value) {\n        this._localStats.connectionQuality = value;\n        this._lastConnectionQualityUpdate = window.performance.now();\n    }\n\n    /**\n     * Broadcasts the local statistics to all other participants in the\n     * conference.\n     */\n    _broadcastLocalStats() {\n        // Send only the data that remote participants care about.\n        const data = {\n            bitrate: this._localStats.bitrate,\n            packetLoss: this._localStats.packetLoss,\n            connectionQuality: this._localStats.connectionQuality,\n            jvbRTT: this._localStats.jvbRTT,\n            serverRegion: this._localStats.serverRegion,\n            maxEnabledResolution: this._localStats.maxEnabledResolution,\n            avgAudioLevels: this._localStats.localAvgAudioLevels\n        };\n\n        try {\n            this._conference.sendEndpointStatsMessage(data);\n        } catch (err) {\n            // Ignore the error as we might hit it in the beginning of the call before the channel is ready.\n            // The statistics will be sent again after few seconds and error is logged elseware as well.\n        }\n    }\n\n    /**\n     * Updates the local statistics\n     * @param {TraceablePeerConnection} tpc the peerconnection which emitted\n     * the stats\n     * @param data new statistics\n     */\n    _updateLocalStats(tpc, data) {\n        // Update jvbRTT\n        if (!tpc.isP2P) {\n            const jvbRTT\n                = data.transport\n                    && data.transport.length && data.transport[0].rtt;\n\n            this._localStats.jvbRTT = jvbRTT ? jvbRTT : undefined;\n        }\n\n        // Do not continue with processing of other stats if they do not\n        // originate from the active peerconnection\n        if (tpc !== this._conference.getActivePeerConnection()) {\n            return;\n        }\n\n        let key;\n        const updateLocalConnectionQuality\n            = !this._conference.isConnectionInterrupted();\n        const localVideoTrack\n            = this._conference.getLocalVideoTrack();\n        const videoType\n            = localVideoTrack ? localVideoTrack.videoType : undefined;\n        const isMuted = localVideoTrack ? localVideoTrack.isMuted() : true;\n        const resolution = localVideoTrack\n            ? Math.min(localVideoTrack.resolution, localVideoTrack.maxEnabledResolution) : null;\n\n        if (!isMuted) {\n            this._maybeUpdateUnmuteTime();\n        }\n\n        // Copy the fields already in 'data'.\n        for (key in data) {\n            if (data.hasOwnProperty(key)) {\n                this._localStats[key] = data[key];\n            }\n        }\n\n        // And re-calculate the connectionQuality field.\n        if (updateLocalConnectionQuality) {\n            this._updateLocalConnectionQuality(\n                this._calculateConnectionQuality(\n                    videoType,\n                    isMuted,\n                    resolution));\n        }\n\n        this.eventEmitter.emit(\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n            this._localStats);\n        this._broadcastLocalStats();\n    }\n\n    /**\n     * Updates remote statistics\n     * @param id the id of the remote participant\n     * @param data the statistics received\n     */\n    _updateRemoteStats(id, data) {\n        // Use only the fields we need\n        this._remoteStats[id] = {\n            bitrate: data.bitrate,\n            packetLoss: data.packetLoss,\n            connectionQuality: data.connectionQuality,\n            jvbRTT: data.jvbRTT,\n            serverRegion: data.serverRegion,\n            maxEnabledResolution: data.maxEnabledResolution,\n            avgAudioLevels: data.avgAudioLevels\n        };\n\n        this.eventEmitter.emit(\n            ConnectionQualityEvents.REMOTE_STATS_UPDATED,\n            id,\n            this._remoteStats[id]);\n    }\n\n    /**\n     * Returns the local statistics.\n     * Exported only for use in jitsi-meet-torture.\n     */\n    getStats() {\n        return this._localStats;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceErrors from '../../JitsiConferenceErrors';\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * This class deals with shenanigans around JVB media session's ICE failed status handling.\n *\n * If ICE restarts are NOT explicitly enabled by the {@code enableIceRestart} config option, then the conference will\n * delay emitting the {@JitsiConferenceErrors.ICE_FAILED} event by 15 seconds. If the network info module reports\n * the internet offline status then the time will start counting after the internet comes back online.\n *\n * If ICE restart are enabled, then a delayed ICE failed notification to Jicofo will be sent, only if the ICE connection\n * does not recover soon after or before the XMPP connection is restored (if it was ever broken). If ICE fails while\n * the XMPP connection is not broken then the notifications will be sent after 2 seconds delay.\n */\nexport default class IceFailedHandling {\n    /**\n     * Creates new {@code DelayedIceFailed} task.\n     * @param {JitsiConference} conference\n     */\n    constructor(conference) {\n        this._conference = conference;\n    }\n\n    /**\n     * After making sure there's no way for the ICE connection to recover this method either sends ICE failed\n     * notification to Jicofo or emits the ice failed conference event.\n     * @private\n     * @returns {void}\n     */\n    _actOnIceFailed() {\n        const { enableForcedReload, enableIceRestart } = this._conference.options.config;\n        const explicitlyDisabled = typeof enableIceRestart !== 'undefined' && !enableIceRestart;\n        const supportsRestartByTerminate = this._conference.room.supportsRestartByTerminate();\n        const useTerminateForRestart = supportsRestartByTerminate && !enableIceRestart;\n\n        logger.info('ICE failed,'\n            + ` enableForcedReload: ${enableForcedReload},`\n            + ` enableIceRestart: ${enableIceRestart},`\n            + ` supports restart by terminate: ${supportsRestartByTerminate}`);\n\n        if (explicitlyDisabled || (!enableIceRestart && !supportsRestartByTerminate) || enableForcedReload) {\n            logger.info('ICE failed, but ICE restarts are disabled');\n            const reason = enableForcedReload\n                ? JitsiConferenceErrors.CONFERENCE_RESTARTED\n                : JitsiConferenceErrors.ICE_FAILED;\n\n            this._conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED, reason);\n\n            return;\n        }\n\n        const jvbConnection = this._conference.jvbJingleSession;\n        const jvbConnIceState = jvbConnection && jvbConnection.getIceConnectionState();\n\n        if (!jvbConnection) {\n            logger.warn('Not sending ICE failed - no JVB connection');\n        } else if (jvbConnIceState === 'connected') {\n            logger.info('ICE connection restored - not sending ICE failed');\n        } else {\n            logger.info('Sending ICE failed - the connection did not recover, '\n                + `ICE state: ${jvbConnIceState}, `\n                + `use 'session-terminate': ${useTerminateForRestart}`);\n            if (useTerminateForRestart) {\n                this._conference.jvbJingleSession.terminate(\n                    () => {\n                        logger.info('session-terminate for ice restart - done');\n                    },\n                    error => {\n                        logger.error(`session-terminate for ice restart - error: ${error.message}`);\n                    }, {\n                        reason: 'connectivity-error',\n                        reasonDescription: 'ICE FAILED',\n                        requestRestart: true,\n                        sendSessionTerminate: true\n                    });\n            } else {\n                this._conference.jvbJingleSession.sendIceFailedNotification();\n            }\n        }\n    }\n\n    /**\n     * Starts the task.\n     */\n    start() {\n        //  Using xmpp.ping allows to handle both XMPP being disconnected and internet offline cases. The ping function\n        // uses sendIQ2 method which is resilient to XMPP connection disconnected state and will patiently wait until it\n        // gets reconnected.\n        //  This also handles the case about waiting for the internet to come back online, because ping\n        // will only succeed when the internet is online and then there's a chance for the ICE to recover from FAILED to\n        // CONNECTED which is the extra 2 second timeout after ping.\n        //  The 65 second timeout is given on purpose as there's no chance for XMPP to recover after 65 seconds of no\n        // communication with the server. Such resume attempt will result in unrecoverable conference failed event due\n        // to 'item-not-found' error returned by the server.\n        this._conference.xmpp.ping(65000).then(\n            () => {\n                if (!this._canceled) {\n                    this._iceFailedTimeout = window.setTimeout(() => {\n                        this._iceFailedTimeout = undefined;\n                        this._actOnIceFailed();\n                    }, 2000);\n                }\n            },\n            error => {\n                logger.error('PING error/timeout - not sending ICE failed', error);\n            });\n    }\n\n    /**\n     * Cancels the task.\n     */\n    cancel() {\n        this._canceled = true;\n        window.clearTimeout(this._iceFailedTimeout);\n    }\n}\n","/**\n * Event triggered by a audio detector indicating that its active state has changed from active to inactive or vice\n * versa.\n * @event\n * @type {boolean} - true when service has changed to active false otherwise.\n */\nexport const DETECTOR_STATE_CHANGE = 'detector_state_change';\n\n/** Event triggered by {@link NoAudioSignalDetector} when the local audio device associated with a JitsiConference\n * starts receiving audio levels with the value of 0 meaning no audio is being captured on that device, or when\n * it starts receiving audio levels !== 0 after being in a state of no audio.\n * @event\n * @type {boolean} - true when the current conference audio track has audio input false otherwise.\n */\nexport const AUDIO_INPUT_STATE_CHANGE = 'audio_input_state_changed';\n\n/** Event triggered by NoAudioSignalDetector when the local audio device associated with a JitsiConference goes silent\n * for a period of time, meaning that the device is either broken or hardware/software muted.\n * @event\n * @type {void}\n */\nexport const NO_AUDIO_INPUT = 'no_audio_input_detected';\n\n/**\n *  Event generated by {@link VADNoiseDetection} when the tracked device is considered noisy.\n *  @event\n *  @type {Object}\n */\nexport const VAD_NOISY_DEVICE = 'detection.vad_noise_device';\n\n/**\n * Event generated by VADReportingService when if finishes creating a VAD report for the monitored devices.\n * The generated objects are of type Array<Object>, one score for each monitored device.\n * @event VAD_REPORT_PUBLISHED\n * @type Array<Object> with the following structure:\n * @property {Date} timestamp - Timestamp at which the compute took place.\n * @property {number} avgVAD - Average VAD score over monitored period of time.\n * @property {string} deviceId - Associate local audio device ID.\n */\nexport const VAD_REPORT_PUBLISHED = 'vad-report-published';\n\n/**\n * Event generated by {@link TrackVADEmitter} when PCM sample VAD score is available.\n *\n * @event\n * @type {Object}\n * @property {Date}   timestamp - Exact time at which processed PCM sample was generated.\n * @property {number} score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n * @property {Float32Array} pcmData - Raw PCM data with which the VAD score was calculated.\n * @property {string} deviceId - Device id of the associated track.\n */\nexport const VAD_SCORE_PUBLISHED = 'detection.vad_score_published';\n\n/**\n *  Event generated by {@link VADTalkMutedDetection} when a user is talking while the mic is muted.\n *\n *  @event\n *  @type {Object}\n */\nexport const VAD_TALK_WHILE_MUTED = 'detection.vad_talk_while_muted';\n","import EventEmitter from 'events';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport browser from '../browser';\n\nimport * as DetectionEvents from './DetectionEvents';\n\n// We wait a certain time interval for constant silence input from the current device to account for\n// potential abnormalities and for a better use experience i.e. don't generate event the instant\n// an audio track is added to the tcr.\n// Potential improvement - add this as a configurable parameter.\nconst SILENCE_PERIOD_MS = 4000;\n\n/**\n * Detect if there is no audio input on the current TraceAblePeerConnection selected track. The no audio\n * state must be constant for a configured amount of time in order for the event to be triggered.\n * @fires DetectionEvents.AUDIO_INPUT_STATE_CHANGE\n * @fires DetectionEvents.NO_AUDIO_INPUT\n */\nexport default class NoAudioSignalDetection extends EventEmitter {\n    /**\n     * Creates new NoAudioSignalDetection.\n     *\n     * @param conference the JitsiConference instance that created us.\n     * @constructor\n     */\n    constructor(conference) {\n        super();\n\n        this._conference = conference;\n        this._timeoutTrigger = null;\n        this._hasAudioInput = null;\n\n        if (!browser.supportsReceiverStats()) {\n            conference.statistics.addAudioLevelListener(this._audioLevel.bind(this));\n        }\n        conference.on(JitsiConferenceEvents.TRACK_ADDED, this._trackAdded.bind(this));\n    }\n\n    /**\n     * Clear the timeout state.\n     */\n    _clearTriggerTimeout() {\n        clearTimeout(this._timeoutTrigger);\n        this._timeoutTrigger = null;\n    }\n\n\n    /**\n     * Generated event triggered by a change in the current conference audio input state.\n     *\n     * @param {*} audioLevel - The audio level of the ssrc.\n     * @fires DetectionEvents.AUDIO_INPUT_STATE_CHANGE\n     */\n    _handleAudioInputStateChange(audioLevel) {\n        // Current audio input state of the active local track in the conference, true for audio input false for no\n        // audio input.\n        const status = audioLevel !== 0;\n\n        // If this is the first audio event picked up or the current status is different from the previous trigger\n        // the event.\n        if (this._hasAudioInput === null || this._hasAudioInput !== status) {\n            this._hasAudioInput = status;\n            this.emit(DetectionEvents.AUDIO_INPUT_STATE_CHANGE, this._hasAudioInput);\n        }\n    }\n\n    /**\n     * Generate event triggered by a prolonged period of no audio input.\n     *\n     * @param {number} audioLevel - The audio level of the ssrc.\n     * @fires DetectionEvents.NO_AUDIO_INPUT\n     */\n    _handleNoAudioInputDetection(audioLevel) {\n        if (this._eventFired) {\n            return;\n        }\n\n        if (audioLevel === 0 && !this._timeoutTrigger) {\n            this._timeoutTrigger = setTimeout(() => {\n                this._eventFired = true;\n\n                this.emit(DetectionEvents.NO_AUDIO_INPUT);\n            }, SILENCE_PERIOD_MS);\n        } else if (audioLevel !== 0 && this._timeoutTrigger) {\n            this._clearTriggerTimeout();\n        }\n    }\n\n    /**\n     * Receives audio level events for all send and receive streams on the current TraceablePeerConnection.\n     *\n     * @param {TraceablePeerConnection} tpc - TraceablePeerConnection of the owning conference.\n     * @param {number} ssrc - The synchronization source identifier (SSRC) of the endpoint/participant/stream\n     * being reported.\n     * @param {number} audioLevel - The audio level of the ssrc.\n     * @param {boolean} isLocal - true for local/send streams or false for remote/receive streams.\n     */\n    _audioLevel(tpc, ssrc, audioLevel, isLocal) {\n        // We are interested in the local audio streams\n        if (!isLocal || !this._audioTrack) {\n            return;\n        }\n\n        // Get currently active local tracks from the TraceablePeerConnection\n        const localSSRCs = tpc.localSSRCs.get(this._audioTrack.rtcId);\n\n        // Only target the current active track in the tpc. For some reason audio levels for previous\n        // devices are also picked up from the PeerConnection so we filter them out.\n        if (!localSSRCs || !localSSRCs.ssrcs.includes(ssrc)) {\n            return;\n        }\n\n        // First handle audio input state change. In case the state changed to no input the no audio input event\n        // can try to fire again.\n        this._handleAudioInputStateChange(audioLevel);\n        this._handleNoAudioInputDetection(audioLevel);\n    }\n\n    /**\n     * Notifies NoAudioSignalDetection that a JitsiTrack was added to the associated JitsiConference.\n     * Only take into account local audio tracks.\n     *\n     * @param {JitsiTrack} track - The added JitsiTrack.\n     */\n    _trackAdded(track) {\n        if (track.isLocalAudioTrack()) {\n            // Reset state for the new track.\n            this._audioTrack = track;\n            this._eventFired = false;\n            this._clearTriggerTimeout();\n\n            // Listen for the audio levels on the newly added audio track\n            if (browser.supportsReceiverStats()) {\n                track.on(\n                    JitsiTrackEvents.NO_AUDIO_INPUT,\n                    audioLevel => {\n                        this._handleNoAudioInputDetection(audioLevel);\n                    }\n                );\n                track.on(\n                    JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n                    audioLevel => {\n                        this._handleNoAudioInputDetection(audioLevel);\n                        this._handleAudioInputStateChange(audioLevel);\n                    }\n                );\n            }\n        }\n    }\n}\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport RTCEvents from '../../service/RTC/RTCEvents';\n\n/**\n * The value which we use to say, every sound over this threshold\n * is talking on the mic.\n * @type {number}\n */\nconst SPEECH_DETECT_THRESHOLD = 0.6;\n\n/**\n * The <tt>P2PDominantSpeakerDetection</tt> is activated only when p2p is\n * currently used.\n * Listens for changes in the audio level changes of the local p2p audio track\n * or remote p2p one and fires dominant speaker events to be able to use\n * features depending on those events (speaker stats), to make them work without\n * the video bridge.\n */\nexport default class P2PDominantSpeakerDetection {\n    /**\n     * Creates P2PDominantSpeakerDetection\n     * @param conference the JitsiConference instance that created us.\n     * @constructor\n     */\n    constructor(conference) {\n        this.conference = conference;\n\n        conference.addEventListener(\n            JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED,\n            this._audioLevel.bind(this));\n\n        this.myUserID = this.conference.myUserId();\n    }\n\n    /**\n     * Receives audio level events for all streams in the conference.\n     *\n     * @param {String} id - The participant id\n     * @param {number} audioLevel - The audio level.\n     */\n    _audioLevel(id, audioLevel) {\n\n        // we do not process if p2p is not active\n        // or audio level is under certain threshold\n        // or if the audio level is for local audio track which is muted\n        if (!this.conference.isP2PActive()\n            || audioLevel <= SPEECH_DETECT_THRESHOLD\n            || (id === this.myUserID\n                    && this.conference.getLocalAudioTrack().isMuted())) {\n            return;\n        }\n\n        this.conference.rtc.eventEmitter.emit(\n            RTCEvents.DOMINANT_SPEAKER_CHANGED,\n            id);\n    }\n}\n","/**\n * Adapter that creates AudioContext objects depending on the browser.\n *\n * @returns {AudioContext} - Return a new AudioContext or undefined if the browser does not support it.\n */\nexport function createAudioContext(options) {\n    const AudioContextImpl = window.AudioContext || window.webkitAudioContext;\n\n    if (!AudioContextImpl) {\n        return undefined;\n    }\n\n    return new AudioContextImpl(options);\n}\n","import EventEmitter from 'events';\n\nimport RTC from '../RTC/RTC';\nimport { createAudioContext } from '../webaudio/WebAudioUtils';\n\nimport { VAD_SCORE_PUBLISHED } from './DetectionEvents';\n\n/**\n * Connects an audio JitsiLocalTrack to a vadProcessor using WebAudio ScriptProcessorNode.\n * Once an object is created audio from the local track flows through the ScriptProcessorNode as raw PCM.\n * The PCM is processed by the injected vad module and a voice activity detection score is obtained, the\n * score is published to consumers via an EventEmitter.\n * After work is done with this service the destroy method needs to be called for a proper cleanup.\n *\n * @fires VAD_SCORE_PUBLISHED\n */\nexport default class TrackVADEmitter extends EventEmitter {\n    /**\n     * Constructor.\n     *\n     * @param {number} procNodeSampleRate - Sample rate of the ScriptProcessorNode. Possible values  256, 512, 1024,\n     *  2048, 4096, 8192, 16384. Passing other values will default to closes neighbor.\n     * @param {Object} vadProcessor - VAD processor that allows us to calculate VAD score for PCM samples.\n     * @param {JitsiLocalTrack} jitsiLocalTrack - JitsiLocalTrack corresponding to micDeviceId.\n     */\n    constructor(procNodeSampleRate, vadProcessor, jitsiLocalTrack) {\n        super();\n\n        /**\n         * Sample rate of the ScriptProcessorNode.\n         */\n        this._procNodeSampleRate = procNodeSampleRate;\n\n        /**\n         * VAD Processor that allows us to calculate VAD score for PCM samples\n         */\n        this._vadProcessor = vadProcessor;\n\n        /**\n         * The JitsiLocalTrack instance.\n         */\n        this._localTrack = jitsiLocalTrack;\n\n        /**\n         * Buffer to hold residue PCM resulting after a ScriptProcessorNode callback\n         */\n        this._bufferResidue = new Float32Array([]);\n\n        /**\n         * The AudioContext instance with the preferred sample frequency.\n         */\n        this._audioContext = createAudioContext({ sampleRate: vadProcessor.getRequiredPCMFrequency() });\n\n        /**\n         * PCM Sample size expected by the VAD Processor instance. We cache it here as this value is used extensively,\n         * saves a couple of function calls.\n         */\n        this._vadSampleSize = vadProcessor.getSampleLength();\n\n        /**\n         * Event listener function that will be called by the ScriptProcessNode with raw PCM data, depending on the set\n         * sample rate.\n         */\n        this._onAudioProcess = this._onAudioProcess.bind(this);\n\n        this._initializeAudioContext();\n    }\n\n    /**\n     * Factory method that sets up all the necessary components for the creation of the TrackVADEmitter.\n     *\n     * @param {string} micDeviceId - Target microphone device id.\n     * @param {number} procNodeSampleRate - Sample rate of the proc node.\n     * @param {Object} vadProcessor -Module that calculates the voice activity score for a certain audio PCM sample.\n     * The processor needs to implement the following functions:\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by getSampleLength.\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\n     * @returns {Promise<TrackVADEmitter>} - Promise resolving in a new instance of TrackVADEmitter.\n     */\n    static create(micDeviceId, procNodeSampleRate, vadProcessor) {\n        return RTC.obtainAudioAndVideoPermissions({\n            devices: [ 'audio' ],\n            micDeviceId\n        }).then(localTrack => {\n            // We only expect one audio track when specifying a device id.\n            if (!localTrack[0]) {\n                throw new Error(`Failed to create jitsi local track for device id: ${micDeviceId}`);\n            }\n\n            return new TrackVADEmitter(procNodeSampleRate, vadProcessor, localTrack[0]);\n\n            // We have no exception handling at this point as there is nothing to clean up, the vadProcessor\n            // life cycle is handled by whoever created this instance.\n        });\n    }\n\n    /**\n     * Sets up the audio graph in the AudioContext.\n     *\n     * @returns {void}\n     */\n    _initializeAudioContext() {\n        this._audioSource = this._audioContext.createMediaStreamSource(this._localTrack.stream);\n\n        // TODO AudioProcessingNode is deprecated in the web audio specifications and the recommended replacement\n        // is audio worklet, however at the point of implementation AudioProcessingNode was still de de facto way\n        // of achieving this functionality and supported in all major browsers as opposed to audio worklet which\n        // was only available in Chrome. This todo is just a reminder that we should replace AudioProcessingNode\n        // with audio worklet when it's mature enough and has more browser support.\n        // We don't need stereo for determining the VAD score so we create a single channel processing node.\n        this._audioProcessingNode = this._audioContext.createScriptProcessor(this._procNodeSampleRate, 1, 1);\n    }\n\n    /**\n     * ScriptProcessorNode callback, the input parameters contains the PCM audio that is then sent to rnnoise.\n     * Rnnoise only accepts PCM samples of 480 bytes whereas the webaudio processor node can't sample at a multiple\n     * of 480 thus after each _onAudioProcess callback there will remain and PCM buffer residue equal\n     * to _procNodeSampleRate / 480 which will be added to the next sample buffer and so on.\\\n     *\n     *\n     * @param {AudioProcessingEvent} audioEvent - Audio event.\n     * @returns {void}\n     * @fires VAD_SCORE_PUBLISHED\n     */\n    _onAudioProcess(audioEvent) {\n        // Prepend the residue PCM buffer from the previous process callback.\n        const inData = audioEvent.inputBuffer.getChannelData(0);\n        const completeInData = [ ...this._bufferResidue, ...inData ];\n        const sampleTimestamp = Date.now();\n\n        let i = 0;\n\n        for (; i + this._vadSampleSize < completeInData.length; i += this._vadSampleSize) {\n            const pcmSample = completeInData.slice(i, i + this._vadSampleSize);\n\n            // The VAD processor might change the values inside the array so we make a copy.\n            const vadScore = this._vadProcessor.calculateAudioFrameVAD(pcmSample.slice());\n\n            this.emit(VAD_SCORE_PUBLISHED, {\n                timestamp: sampleTimestamp,\n                score: vadScore,\n                pcmData: pcmSample,\n                deviceId: this._localTrack.getDeviceId()\n            });\n        }\n\n        this._bufferResidue = completeInData.slice(i, completeInData.length);\n    }\n\n    /**\n     * Connects the nodes in the AudioContext to start the flow of audio data.\n     *\n     * @returns {void}\n     */\n    _connectAudioGraph() {\n        this._audioProcessingNode.onaudioprocess = this._onAudioProcess;\n        this._audioSource.connect(this._audioProcessingNode);\n        this._audioProcessingNode.connect(this._audioContext.destination);\n    }\n\n    /**\n     * Disconnects the nodes in the AudioContext.\n     *\n     * @returns {void}\n     */\n    _disconnectAudioGraph() {\n        // Even thought we disconnect the processing node it seems that some callbacks remain queued,\n        // resulting in calls with and uninitialized context.\n        // eslint-disable-next-line no-empty-function\n        this._audioProcessingNode.onaudioprocess = () => {};\n        this._audioProcessingNode.disconnect();\n        this._audioSource.disconnect();\n    }\n\n    /**\n     * Cleanup potentially acquired resources.\n     *\n     * @returns {void}\n     */\n    _cleanupResources() {\n        this._disconnectAudioGraph();\n        this._localTrack.stopStream();\n    }\n\n    /**\n     * Get the associated track device ID.\n     *\n     * @returns {string}\n     */\n    getDeviceId() {\n        return this._localTrack.getDeviceId();\n    }\n\n\n    /**\n     * Get the associated track label.\n     *\n     * @returns {string}\n     */\n    getTrackLabel() {\n        return this._localTrack.getDeviceLabel();\n    }\n\n    /**\n     * Start the emitter by connecting the audio graph.\n     *\n     * @returns {void}\n     */\n    start() {\n        this._connectAudioGraph();\n    }\n\n    /**\n     * Stops the emitter by disconnecting the audio graph.\n     *\n     * @returns {void}\n     */\n    stop() {\n        this._disconnectAudioGraph();\n        this._bufferResidue = [];\n    }\n\n    /**\n     * Destroy TrackVADEmitter instance (release resources and stop callbacks).\n     *\n     * @returns {void}\n     */\n    destroy() {\n        if (this._destroyed) {\n            return;\n        }\n\n        this._cleanupResources();\n        this._destroyed = true;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport { EventEmitter } from 'events';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nimport { VAD_SCORE_PUBLISHED, DETECTOR_STATE_CHANGE } from './DetectionEvents';\nimport TrackVADEmitter from './TrackVADEmitter';\n\nconst logger = getLogger(__filename);\n\n/**\n * Sample rate of TrackVADEmitter, it defines how many audio samples are processed at a time.\n * @type {number}\n */\nconst VAD_EMITTER_SAMPLE_RATE = 4096;\n\n/**\n * Connects a TrackVADEmitter to the target conference local audio track and manages various services that use\n * the data to produce audio analytics (VADTalkMutedDetection and VADNoiseDetection).\n */\nexport default class VADAudioAnalyser extends EventEmitter {\n    /**\n     * Creates <tt>VADAudioAnalyser</tt>\n     * @param {JitsiConference} conference - JitsiConference instance that created us.\n     * @param {Object} createVADProcessor - Function that creates a Voice activity detection processor. The processor\n     * needs to implement the following functions:\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by getSampleLength.\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\n     * @constructor\n     */\n    constructor(conference, createVADProcessor) {\n        super();\n\n        /**\n         * Member function that instantiates a VAD processor.\n         */\n        this._createVADProcessor = createVADProcessor;\n\n        /**\n         * Current {@link TrackVADEmitter}. VAD Emitter uses a {@link JitsiLocalTrack} and VAD processor to generate\n         * period voice probability scores.\n         */\n        this._vadEmitter = null;\n\n        /**\n         * Current state of the _vadEmitter\n         */\n        this._isVADEmitterRunning = false;\n\n        /**\n         * Array of currently attached VAD processing services.\n         */\n        this._detectionServices = [];\n\n        /**\n         * Promise used to chain create and destroy operations associated with TRACK_ADDED and TRACK_REMOVED events\n         * coming from the conference.\n         * Because we have an async created component (VAD Processor) we need to make sure that it's initialized before\n         * we destroy it ( when changing the device for instance), or when we use it from an external point of entry\n         * i.e. (TRACK_MUTE_CHANGED event callback).\n         */\n        this._vadInitTracker = Promise.resolve();\n\n        /**\n         * Listens for {@link TrackVADEmitter} events and processes them.\n         */\n        this._processVADScore = this._processVADScore.bind(this);\n\n        conference.on(JitsiConferenceEvents.TRACK_ADDED, this._trackAdded.bind(this));\n        conference.on(JitsiConferenceEvents.TRACK_REMOVED, this._trackRemoved.bind(this));\n        conference.on(JitsiConferenceEvents.TRACK_MUTE_CHANGED, this._trackMuteChanged.bind(this));\n    }\n\n    /**\n     * Attach a VAD detector service to the analyser and handle it's state changes.\n     *\n     * @param {Object} vadTMDetector\n     */\n    addVADDetectionService(vadService) {\n        this._detectionServices.push(vadService);\n        vadService.on(DETECTOR_STATE_CHANGE, () => {\n            // When the state of a detector changes check if there are any active detectors attached so that\n            // the _vadEmitter doesn't run needlessly.\n            const activeDetector = this._detectionServices.filter(detector => detector.isActive() === true);\n\n            // If there are no active detectors running and the vadEmitter is running then stop the emitter as it is\n            // uses a considerable amount of CPU. Otherwise start the service if it's stopped and there is a detector\n            // that needs it.\n            if (!activeDetector.length && this._isVADEmitterRunning) {\n                this._stopVADEmitter();\n            } else if (!this._isVADEmitterRunning) {\n                this._startVADEmitter();\n            }\n        });\n    }\n\n    /**\n     * Start the {@link TrackVADEmitter} and attach the event listener.\n     * @returns {void}\n     */\n    _startVADEmitter() {\n        if (this._vadEmitter) {\n            this._vadEmitter.on(VAD_SCORE_PUBLISHED, this._processVADScore);\n            this._vadEmitter.start();\n            this._isVADEmitterRunning = true;\n        }\n    }\n\n    /**\n     * Stop the {@link TrackVADEmitter} and detach the event listener.\n     * @returns {void}\n     */\n    _stopVADEmitter() {\n        if (this._vadEmitter) {\n            this._vadEmitter.removeListener(VAD_SCORE_PUBLISHED, this._processVADScore);\n            this._vadEmitter.stop();\n        }\n        this._isVADEmitterRunning = false;\n    }\n\n    /**\n     * Listens for {@link TrackVADEmitter} events and directs them to attached services as needed.\n     *\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n     * @param {Float32Array} pcmData - Raw PCM data with which the VAD score was calculated.\n     * @param {string} vadScore.deviceId - Device id of the associated track.\n     * @listens VAD_SCORE_PUBLISHED\n     */\n    _processVADScore(vadScore) {\n        for (const detector of this._detectionServices) {\n            detector.processVADScore(vadScore);\n        }\n    }\n\n    /**\n     * Change the isMuted state of all attached detection services.\n     *\n     * @param {boolean} isMuted\n     */\n    _changeDetectorsMuteState(isMuted) {\n        for (const detector of this._detectionServices) {\n            detector.changeMuteState(isMuted);\n        }\n    }\n\n    /**\n     * Notifies the detector that a track was added to the associated {@link JitsiConference}.\n     * Only take into account local audio tracks.\n     * @param {JitsiTrack} track - The added track.\n     * @returns {void}\n     * @listens TRACK_ADDED\n     */\n    _trackAdded(track) {\n        if (track.isLocalAudioTrack()) {\n            // Keep a track promise so we take into account successive TRACK_ADD events being generated so that we\n            // destroy/create the processing context in the proper order.\n            this._vadInitTracker = this._vadInitTracker.then(() => this._createVADProcessor())\n                .then(vadProcessor =>\n                    TrackVADEmitter.create(track.getDeviceId(), VAD_EMITTER_SAMPLE_RATE, vadProcessor)\n                )\n                .then(vadEmitter => {\n                    logger.debug('Created VAD emitter for track: ', track.getTrackLabel());\n\n                    this._vadEmitter = vadEmitter;\n\n                    // Iterate through the detection services and set their appropriate mute state, depending on\n                    // service this will trigger a DETECTOR_STATE_CHANGE which in turn might start the _vadEmitter.\n                    this._changeDetectorsMuteState(track.isMuted());\n                })\n                .catch(error => {\n                    logger.warn('Failed to start VADAudioAnalyser', error);\n                });\n        }\n    }\n\n    /**\n     * Notifies the detector that the mute state of a {@link JitsiConference} track has changed. Only takes into account\n     * local audio tracks.\n     * @param {JitsiTrack} track - The track whose mute state has changed.\n     * @returns {void}\n     * @listens TRACK_MUTE_CHANGED\n     */\n    _trackMuteChanged(track) {\n        if (track.isLocalAudioTrack()) {\n            // On a mute toggle reset the state.\n            this._vadInitTracker = this._vadInitTracker.then(() => {\n                // Set mute status for the attached detection services.\n                this._changeDetectorsMuteState(track.isMuted());\n            });\n        }\n    }\n\n    /**\n     * Notifies the detector that a track associated with the {@link JitsiConference} was removed. Only takes into\n     * account local audio tracks. Cleans up resources associated with the track and resets the processing context.\n     *\n     * @param {JitsiTrack} track - The removed track.\n     * @returns {void}\n     * @listens TRACK_REMOVED\n     */\n    _trackRemoved(track) {\n        if (track.isLocalAudioTrack()) {\n            // Use the promise to make sure operations are in sequence.\n            this._vadInitTracker = this._vadInitTracker.then(() => {\n                logger.debug('Removing track from VAD detection - ', track.getTrackLabel());\n\n                // Track was removed, clean up and set appropriate states.\n                if (this._vadEmitter) {\n                    this._stopVADEmitter();\n                    this._vadEmitter.destroy();\n                    this._vadEmitter = null;\n                }\n\n                // Reset state of detectors when active track is removed.\n                for (const detector of this._detectionServices) {\n                    detector.reset();\n                }\n            });\n        }\n    }\n\n\n}\n","import { EventEmitter } from 'events';\n\nimport { calculateAverage, filterPositiveValues } from '../util/MathUtil';\n\nimport { VAD_NOISY_DEVICE, DETECTOR_STATE_CHANGE } from './DetectionEvents';\n\n/**\n * The average value VAD needs to be under over a period of time to be considered noise.\n * @type {number}\n */\nconst VAD_NOISE_AVG_THRESHOLD = 0.2;\n\n/**\n * The average values that audio input need to be over to be considered loud.\n * @type {number}\n */\nconst NOISY_AUDIO_LEVEL_THRESHOLD = 0.040;\n\n/**\n * The value that a VAD score needs to be under in order for processing to begin.\n * @type {number}\n */\nconst VAD_SCORE_TRIGGER = 0.2;\n\n/**\n * The value that a VAD score needs to be under in order for processing to begin.\n * @type {number}\n */\nconst AUDIO_LEVEL_SCORE_TRIGGER = 0.020;\n\n/**\n * Time span over which we calculate an average score used to determine if we trigger the event.\n * @type {number}\n */\nconst PROCESS_TIME_FRAME_SPAN_MS = 1500;\n\n/**\n * Detect if provided VAD score and PCM data is considered noise.\n */\nexport default class VADNoiseDetection extends EventEmitter {\n    /**\n     * Creates <tt>VADNoiseDetection</tt>\n     *\n     * @constructor\n     */\n    constructor() {\n        super();\n\n        /**\n         * Flag which denotes the current state of the detection service i.e.if there is already a processing operation\n         * ongoing.\n         */\n        this._processing = false;\n\n        /**\n         * Buffer that keeps the VAD scores for a period of time.\n         */\n        this._scoreArray = [];\n\n        /**\n         * Buffer that keeps audio level samples for a period of time.\n         */\n        this._audioLvlArray = [];\n\n        /**\n         * Current state of the service, if it's not active no processing will occur.\n         */\n        this._active = false;\n\n        this._calculateNoisyScore = this._calculateNoisyScore.bind(this);\n    }\n\n    /**\n     * Compute cumulative VAD score and PCM audio levels once the PROCESS_TIME_FRAME_SPAN_MS timeout has elapsed.\n     * If the score is above the set threshold fire the event.\n     * @returns {void}\n     * @fires VAD_NOISY_DEVICE\n     */\n    _calculateNoisyScore() {\n        const scoreAvg = calculateAverage(this._scoreArray);\n        const audioLevelAvg = calculateAverage(this._audioLvlArray);\n\n        if (scoreAvg < VAD_NOISE_AVG_THRESHOLD && audioLevelAvg > NOISY_AUDIO_LEVEL_THRESHOLD) {\n            this.emit(VAD_NOISY_DEVICE);\n\n            this._setActiveState(false);\n        }\n\n        // We reset the context in case a new process phase needs to be triggered.\n        this.reset();\n    }\n\n    /**\n     * Record the vad score and average volume in the appropriate buffers.\n     *\n     * @param {number} vadScore\n     * @param {number} avgAudioLvl - average audio level of the PCM sample associated with the VAD score.s\n     */\n    _recordValues(vadScore, avgAudioLvl) {\n        this._scoreArray.push(vadScore);\n        this._audioLvlArray.push(avgAudioLvl);\n    }\n\n    /**\n     * Set the active state of the detection service and notify any listeners.\n     *\n     * @param {boolean} active\n     * @fires DETECTOR_STATE_CHANGE\n     */\n    _setActiveState(active) {\n        this._active = active;\n        this.emit(DETECTOR_STATE_CHANGE, this._active);\n    }\n\n    /**\n     * Change the state according to the muted status of the tracked device.\n     *\n     * @param {boolean} isMuted - Is the device muted or not.\n     */\n    changeMuteState(isMuted) {\n        // This service only needs to run when the microphone is not muted.\n        this._setActiveState(!isMuted);\n        this.reset();\n    }\n\n    /**\n     * Check whether or not the service is active or not.\n     *\n     * @returns {boolean}\n     */\n    isActive() {\n        return this._active;\n    }\n\n    /**\n     * Reset the processing context, clear buffers, cancel the timeout trigger.\n     *\n     * @returns {void}\n     */\n    reset() {\n        this._processing = false;\n        this._scoreArray = [];\n        this._audioLvlArray = [];\n        clearTimeout(this._processTimeout);\n    }\n\n    /**\n     * Listens for {@link TrackVADEmitter} events and processes them.\n     *\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n     * @param {Float32Array} vadScore.pcmData - Raw PCM Data associated with the VAD score.\n     * @param {string} vadScore.deviceId - Device id of the associated track.\n     * @listens VAD_SCORE_PUBLISHED\n     */\n    processVADScore(vadScore) {\n        if (!this._active) {\n            return;\n        }\n\n        // There is a processing phase on going, add score to buffer array.\n        if (this._processing) {\n            // Filter and calculate sample average so we don't have to process one large array at a time.\n            const posAudioLevels = filterPositiveValues(vadScore.pcmData);\n\n            this._recordValues(vadScore.score, calculateAverage(posAudioLevels));\n\n            return;\n        }\n\n        // If the VAD score for the sample is low and audio level has a high enough level we can start listening for\n        // noise\n        if (vadScore.score < VAD_SCORE_TRIGGER) {\n            const posAudioLevels = filterPositiveValues(vadScore.pcmData);\n            const avgAudioLvl = calculateAverage(posAudioLevels);\n\n            if (avgAudioLvl > AUDIO_LEVEL_SCORE_TRIGGER) {\n                this._processing = true;\n                this._recordValues(vadScore.score, avgAudioLvl);\n\n                // Once the preset timeout executes the final score will be calculated.\n                this._processTimeout = setTimeout(this._calculateNoisyScore, PROCESS_TIME_FRAME_SPAN_MS);\n            }\n        }\n    }\n}\n","import { EventEmitter } from 'events';\n\nimport { calculateAverage } from '../util/MathUtil';\n\nimport { VAD_TALK_WHILE_MUTED, DETECTOR_STATE_CHANGE } from './DetectionEvents';\n\n\n/**\n * The threshold which the average VAD values for a span of time needs to exceed to trigger an event.\n * @type {number}\n */\nconst VAD_AVG_THRESHOLD = 0.6;\n\n/**\n * The VAD score needed to trigger the processing algorithm, i.e. if a sample has the VAD score >= VAD_VOICE_LEVEL\n * we start processing all scores for a time span defined by const PROCESS_TIME_FRAME_SPAN_MS.\n * @type {number}\n */\nconst VAD_VOICE_LEVEL = 0.9;\n\n/**\n * Sample rate of TrackVADEmitter, it defines how many audio samples are processed at a time.\n * @type {number}\n */\n\n/**\n * Time span over which we calculate an average score used to determine if we trigger the event.\n * @type {number}\n */\nconst PROCESS_TIME_FRAME_SPAN_MS = 700;\n\n/**\n * Detect if provided VAD score which is generated on a muted device is voice and fires an event.\n */\nexport default class VADTalkMutedDetection extends EventEmitter {\n    /**\n     * Creates <tt>VADTalkMutedDetection</tt>\n     * @constructor\n     */\n    constructor() {\n        super();\n\n        /**\n         * Flag which denotes the current state of the detection service i.e.if there is already a processing operation\n         * ongoing.\n         */\n        this._processing = false;\n\n        /**\n         * Buffer that keeps the VAD scores for a period of time.\n         */\n        this._scoreArray = [];\n\n        /**\n         * Current mute state of the audio track being monitored.\n         */\n        this._active = false;\n\n        this._calculateVADScore = this._calculateVADScore.bind(this);\n    }\n\n    /**\n     * Compute cumulative VAD score function called once the PROCESS_TIME_FRAME_SPAN_MS timeout has elapsed.\n     * @returns {void}\n     * @fires VAD_TALK_WHILE_MUTED\n     */\n    _calculateVADScore() {\n        const score = calculateAverage(this._scoreArray);\n\n        if (score > VAD_AVG_THRESHOLD) {\n            this.emit(VAD_TALK_WHILE_MUTED);\n\n            // Event was fired. Stop event emitter and remove listeners so no residue events kick off after this point\n            // and a single VAD_TALK_WHILE_MUTED is generated per mic muted state.\n            this._setActiveState(false);\n        }\n\n        // We reset the context in case a new process phase needs to be triggered.\n        this.reset();\n    }\n\n    /**\n     * Set the active state of the detection service and notify any listeners.\n     *\n     * @param {boolean} active\n     * @fires DETECTOR_STATE_CHANGE\n     */\n    _setActiveState(active) {\n        this._active = active;\n        this.emit(DETECTOR_STATE_CHANGE, this._active);\n    }\n\n    /**\n     * Change the state according to the muted status of the tracked device.\n     *\n     * @param {boolean} isMuted - Is the device muted or not.\n     */\n    changeMuteState(isMuted) {\n        // This service only needs to run when the microphone is muted.\n        this._setActiveState(isMuted);\n        this.reset();\n    }\n\n    /**\n     * Check whether or not the service is active or not.\n     *\n     * @returns {boolean}\n     */\n    isActive() {\n        return this._active;\n    }\n\n    /**\n     * Listens for {@link TrackVADEmitter} events and processes them.\n     *\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n     * @param {string} vadScore.deviceId - Device id of the associated track.\n     * @listens VAD_SCORE_PUBLISHED\n     */\n    processVADScore(vadScore) {\n        if (!this._active) {\n            return;\n        }\n\n        // There is a processing phase on going, add score to buffer array.\n        if (this._processing) {\n            this._scoreArray.push(vadScore.score);\n\n            return;\n        }\n\n        // Because we remove all listeners on the vadEmitter once the main event is triggered,\n        // there is no need to check for rogue events.\n        if (vadScore.score > VAD_VOICE_LEVEL) {\n            this._processing = true;\n            this._scoreArray.push(vadScore.score);\n\n            // Start gathering VAD scores for the configured period of time.\n            this._processTimeout = setTimeout(this._calculateVADScore, PROCESS_TIME_FRAME_SPAN_MS);\n        }\n    }\n\n    /**\n     * Reset the processing context, clear buffer, cancel the timeout trigger.\n     *\n     * @returns {void}\n     */\n    reset() {\n        this._processing = false;\n        this._scoreArray = [];\n        clearTimeout(this._processTimeout);\n    }\n}\n","/**\n * Indicates that the end-to-end round-trip-time for a participant has changed.\n */\nexport const E2E_RTT_CHANGED = 'e2eping.e2e_rtt_changed';\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport * as E2ePingEvents\n    from '../../service/e2eping/E2ePingEvents';\nimport { createE2eRttEvent } from '../../service/statistics/AnalyticsEvents';\nimport Statistics from '../statistics/statistics';\n\nconst logger = getLogger(__filename);\n\n/**\n * The 'type' of a message which designates an e2e ping request.\n * @type {string}\n */\nconst E2E_PING_REQUEST = 'e2e-ping-request';\n\n/**\n * The 'type' of a message which designates an e2e ping response.\n * @type {string}\n */\nconst E2E_PING_RESPONSE = 'e2e-ping-response';\n\n/**\n * Saves e2e ping related state for a single JitsiParticipant.\n */\nclass ParticipantWrapper {\n    /**\n     * Creates a ParticipantWrapper\n     * @param {JitsiParticipant} participant - The remote participant that this\n     * object wraps.\n     * @param {E2ePing} e2eping\n     */\n    constructor(participant, e2eping) {\n        // The JitsiParticipant\n        this.participant = participant;\n\n        // The E2ePing\n        this.e2eping = e2eping;\n\n        // Caches the ID\n        this.id = participant.getId();\n\n        // Recently sent requests\n        this.requests = {};\n\n        // The ID of the last sent request. We just increment it for each new\n        // request. Start at 1 so we can consider only thruthy values valid.\n        this.lastRequestId = 1;\n\n        this.clearIntervals = this.clearIntervals.bind(this);\n        this.sendRequest = this.sendRequest.bind(this);\n        this.handleResponse = this.handleResponse.bind(this);\n        this.maybeSendAnalytics = this.maybeSendAnalytics.bind(this);\n        this.sendAnalytics = this.sendAnalytics.bind(this);\n\n        // If the data channel was already open (this is likely a participant\n        // joining an existing conference) send a request immediately.\n        if (e2eping.isDataChannelOpen) {\n            this.sendRequest();\n        }\n\n        this.pingInterval = window.setInterval(\n            this.sendRequest, e2eping.pingIntervalMs);\n        this.analyticsInterval = window.setTimeout(\n            this.maybeSendAnalytics, this.e2eping.analyticsIntervalMs);\n    }\n\n    /**\n     * Clears the interval which sends pings.\n     * @type {*}\n     */\n    clearIntervals() {\n        if (this.pingInterval) {\n            window.clearInterval(this.pingInterval);\n        }\n        if (this.analyticsInterval) {\n            window.clearInterval(this.analyticsInterval);\n        }\n    }\n\n    /**\n     * Sends the next ping request.\n     * @type {*}\n     */\n    sendRequest() {\n        const requestId = this.lastRequestId++;\n        const requestMessage = {\n            type: E2E_PING_REQUEST,\n            id: requestId\n        };\n\n        this.e2eping.sendMessage(requestMessage, this.id);\n        this.requests[requestId] = {\n            id: requestId,\n            timeSent: window.performance.now()\n        };\n    }\n\n    /**\n     * Handles a response from this participant.\n     * @type {*}\n     */\n    handleResponse(response) {\n        const request = this.requests[response.id];\n\n        if (request) {\n            request.rtt = window.performance.now() - request.timeSent;\n            this.e2eping.eventEmitter.emit(\n                E2ePingEvents.E2E_RTT_CHANGED,\n                this.participant,\n                request.rtt);\n        }\n\n        this.maybeSendAnalytics();\n    }\n\n    /**\n     * Goes over the requests, clearing ones which we don't need anymore, and\n     * if it finds at least one request with a valid RTT in the last\n     * 'analyticsIntervalMs' then sends an analytics event.\n     * @type {*}\n     */\n    maybeSendAnalytics() {\n        const now = window.performance.now();\n\n        // The RTT we'll report is the minimum RTT measured in the last\n        // analyticsInterval\n        let rtt = Infinity;\n        let request, requestId;\n\n        // It's time to send analytics. Clean up all requests and find the\n        for (requestId in this.requests) {\n            if (this.requests.hasOwnProperty(requestId)) {\n                request = this.requests[requestId];\n\n                if (request.timeSent < now - this.e2eping.analyticsIntervalMs) {\n                    // An old request. We don't care about it anymore.\n                    delete this.requests[requestId];\n                } else if (request.rtt) {\n                    rtt = Math.min(rtt, request.rtt);\n                }\n            }\n        }\n\n        if (rtt < Infinity) {\n            this.sendAnalytics(rtt);\n        }\n    }\n\n    /**\n     * Sends an analytics event for this participant with the given RTT.\n     * @type {*}\n     */\n    sendAnalytics(rtt) {\n        Statistics.sendAnalytics(createE2eRttEvent(\n            this.id,\n            this.participant.getProperty('region'),\n            rtt));\n    }\n}\n\n/**\n * Implements end-to-end ping (from one conference participant to another) via\n * the jitsi-videobridge channel (either WebRTC data channel or web socket).\n *\n * TODO: use a broadcast message instead of individual pings to each remote\n * participant.\n *\n * This class:\n * 1. Sends periodic ping requests to all other participants in the\n * conference.\n * 2. Responds to ping requests from other participants.\n * 3. Fires events with the end-to-end RTT to each participant whenever a\n * response is received.\n * 4. Fires analytics events with the end-to-end RTT periodically.\n */\nexport default class E2ePing {\n    /**\n     * @param {JitsiConference} conference - The conference.\n     * @param {Function} sendMessage - The function to use to send a message.\n     * @param {Object} options\n     */\n    constructor(conference, options, sendMessage) {\n        this.conference = conference;\n        this.eventEmitter = conference.eventEmitter;\n        this.sendMessage = sendMessage;\n\n        // The interval at which pings will be sent (<= 0 disables sending).\n        this.pingIntervalMs = 10000;\n\n        // The interval at which analytics events will be sent.\n        this.analyticsIntervalMs = 60000;\n\n        // Maps a participant ID to its ParticipantWrapper\n        this.participants = {};\n\n        // Whether the WebRTC channel has been opened or not.\n        this.isDataChannelOpen = false;\n\n        if (options && options.e2eping) {\n            if (typeof options.e2eping.pingInterval === 'number') {\n                this.pingIntervalMs = options.e2eping.pingInterval;\n            }\n            if (typeof options.e2eping.analyticsInterval === 'number') {\n                this.analyticsIntervalMs = options.e2eping.analyticsInterval;\n            }\n\n            // We want to report at most once a ping interval.\n            if (this.analyticsIntervalMs > 0 && this.analyticsIntervalMs\n                < this.pingIntervalMs) {\n                this.analyticsIntervalMs = this.pingIntervalMs;\n            }\n        }\n        logger.info(\n            `Initializing e2e ping; pingInterval=${\n                this.pingIntervalMs}, analyticsInterval=${\n                this.analyticsIntervalMs}.`);\n\n        this.participantJoined = this.participantJoined.bind(this);\n        conference.on(\n            JitsiConferenceEvents.USER_JOINED,\n            this.participantJoined);\n\n        this.participantLeft = this.participantLeft.bind(this);\n        conference.on(\n            JitsiConferenceEvents.USER_LEFT,\n            this.participantLeft);\n\n        this.messageReceived = this.messageReceived.bind(this);\n        conference.on(\n            JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n            this.messageReceived);\n\n        this.dataChannelOpened = this.dataChannelOpened.bind(this);\n        conference.on(\n            JitsiConferenceEvents.DATA_CHANNEL_OPENED,\n            this.dataChannelOpened);\n    }\n\n    /**\n     * Notifies this instance that the communications channel has been opened\n     * and it can now send messages via sendMessage.\n     */\n    dataChannelOpened() {\n        this.isDataChannelOpen = true;\n\n        // We don't want to wait the whole interval before sending the first\n        // request, but we can't send it immediately after the participant joins\n        // either, because our data channel might not have initialized.\n        // So once the data channel initializes, send requests to everyone.\n        // Wait an additional 200ms to give a chance to the remote side (if it\n        // also just connected as is the case for the first 2 participants in a\n        // conference) to open its data channel.\n        for (const id in this.participants) {\n            if (this.participants.hasOwnProperty(id)) {\n                const participantWrapper = this.participants[id];\n\n                window.setTimeout(participantWrapper.sendRequest, 200);\n            }\n        }\n    }\n\n    /**\n     * Handles a message that was received.\n     *\n     * @param participant - The message sender.\n     * @param payload - The payload of the message.\n     */\n    messageReceived(participant, payload) {\n        // Listen to E2E PING requests and responses from other participants\n        // in the conference.\n        if (payload.type === E2E_PING_REQUEST) {\n            this.handleRequest(participant.getId(), payload);\n        } else if (payload.type === E2E_PING_RESPONSE) {\n            this.handleResponse(participant.getId(), payload);\n        }\n    }\n\n    /**\n     * Handles a participant joining the conference. Starts to send ping\n     * requests to the participant.\n     *\n     * @param {String} id - The ID of the participant.\n     * @param {JitsiParticipant} participant - The participant that joined.\n     */\n    participantJoined(id, participant) {\n        if (this.pingIntervalMs <= 0) {\n            return;\n        }\n\n        if (this.participants[id]) {\n            logger.info(\n                `Participant wrapper already exists for ${id}. Clearing.`);\n            this.participants[id].clearIntervals();\n            delete this.participants[id];\n        }\n\n        this.participants[id] = new ParticipantWrapper(participant, this);\n    }\n\n    /**\n     * Handles a participant leaving the conference. Stops sending requests.\n     *\n     * @param {String} id - The ID of the participant.\n     */\n    participantLeft(id) {\n        if (this.pingIntervalMs <= 0) {\n            return;\n        }\n\n        if (this.participants[id]) {\n            this.participants[id].clearIntervals();\n            delete this.participants[id];\n        }\n    }\n\n    /**\n     * Handles a ping request coming from another participant.\n     *\n     * @param {string} participantId - The ID of the participant who sent the\n     * request.\n     * @param {Object} request - The request.\n     */\n    handleRequest(participantId, request) {\n        // If it's a valid request, just send a response.\n        if (request && request.id) {\n            const response = {\n                type: E2E_PING_RESPONSE,\n                id: request.id\n            };\n\n            this.sendMessage(response, participantId);\n        } else {\n            logger.info(\n                `Received an invalid e2e ping request from ${participantId}.`);\n        }\n    }\n\n    /**\n     * Handles a ping response coming from another participant\n     * @param {string} participantId - The ID of the participant who sent the\n     * response.\n     * @param {Object} response - The response.\n     */\n    handleResponse(participantId, response) {\n        const participantWrapper = this.participants[participantId];\n\n        if (participantWrapper) {\n            participantWrapper.handleResponse(response);\n        }\n    }\n\n    /**\n     * Stops this E2ePing (i.e. stop sending requests).\n     */\n    stop() {\n        logger.info('Stopping e2eping');\n\n        this.conference.off(\n            JitsiConferenceEvents.USER_JOINED,\n            this.participantJoined);\n        this.conference.off(\n            JitsiConferenceEvents.USER_LEFT,\n            this.participantLeft);\n        this.conference.off(\n            JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n            this.messageReceived);\n        this.conference.off(\n            JitsiConferenceEvents.DATA_CHANNEL_OPENED,\n            this.dataChannelOpened);\n\n        for (const id in this.participants) {\n            if (this.participants.hasOwnProperty(id)) {\n                this.participants[id].clearIntervals();\n            }\n        }\n\n        this.participants = {};\n    }\n}\n\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * Emits {@link JitsiConferenceEvents.JVB121_STATUS} events based on the current\n * P2P status and the conference participants count. See the event description\n * for more info.\n */\nexport default class Jvb121EventGenerator {\n    /**\n     * Creates new <tt>Jvb121EventGenerator</tt> for the given conference.\n     * @param {JitsiConference} conference\n     */\n    constructor(conference) {\n        this._conference = conference;\n\n        /**\n         * Indicates whether it's a one to one JVB conference (<tt>true</tt>)\n         * or a multiparty (<tt>false</tt>). Will be also <tt>false</tt> if\n         * the conference is currently in the P2P mode.\n         * @type {boolean}\n         * @private\n         */\n        this._jvb121 = true;\n\n        this._conference.addEventListener(\n            JitsiConferenceEvents.USER_JOINED, () => this.evaluateStatus());\n        this._conference.addEventListener(\n            JitsiConferenceEvents.USER_LEFT, () => this.evaluateStatus());\n        this._conference.addEventListener(\n            JitsiConferenceEvents.P2P_STATUS, () => this.evaluateStatus());\n    }\n\n    /**\n     * Checks whether the JVB121 value should be updated and a new event\n     * emitted.\n     */\n    evaluateStatus() {\n        const oldStatus = this._jvb121;\n        const newStatus\n            = !this._conference.isP2PActive()\n                && this._conference.getParticipantCount() <= 2;\n\n        if (oldStatus !== newStatus) {\n            this._jvb121 = newStatus;\n            logger.debug(`JVB121 status ${oldStatus} => ${newStatus}`);\n            this._conference.eventEmitter.emit(\n                JitsiConferenceEvents.JVB121_STATUS, oldStatus, newStatus);\n        }\n    }\n}\n","import SariskaMediaTransport from '../../../SariskaMediaTransport';\n\n/**\n * Base class for recording backends.\n */\nexport class RecordingAdapter {\n\n    /**\n     * Starts recording.\n     *\n     * @param {string} micDeviceId - The microphone to record on.\n     * @returns {Promise}\n     */\n    start(/* eslint-disable no-unused-vars */\n            micDeviceId/* eslint-enable no-unused-vars */) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Stops recording.\n     *\n     * @returns {Promise}\n     */\n    stop() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Export the recorded and encoded audio file.\n     *\n     * @returns {Promise<Object>}\n     */\n    exportRecordedData() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Mutes or unmutes the current recording.\n     *\n     * @param {boolean} muted - Whether to mute or to unmute.\n     * @returns {Promise}\n     */\n    setMuted(/* eslint-disable no-unused-vars */\n            muted/* eslint-enable no-unused-vars */) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Changes the current microphone.\n     *\n     * @param {string} micDeviceId - The new microphone device ID.\n     * @returns {Promise}\n     */\n    setMicDevice(/* eslint-disable no-unused-vars */\n            micDeviceId/* eslint-enable no-unused-vars */) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Helper method for getting an audio {@code MediaStream}. Use this instead\n     * of calling browser APIs directly.\n     *\n     * @protected\n     * @param {number} micDeviceId - The ID of the current audio device.\n     * @returns {Promise}\n     */\n    _getAudioStream(micDeviceId) {\n        return SariskaMediaTransport.createLocalTracks({\n            devices: [ 'audio' ],\n            micDeviceId\n        }).then(result => {\n            if (result.length !== 1) {\n                throw new Error('Unexpected number of streams '\n                    + 'from createLocalTracks.');\n            }\n            const mediaStream = result[0].stream;\n\n            if (mediaStream === undefined) {\n                throw new Error('Failed to create local track.');\n            }\n\n            return mediaStream;\n        });\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nconst logger = getLogger(__filename);\nimport { RecordingAdapter } from './RecordingAdapter';\n\n/**\n * Recording adapter that uses {@code MediaRecorder} (default browser encoding\n * with Opus codec).\n */\nexport class OggAdapter extends RecordingAdapter {\n\n    /**\n     * Instance of MediaRecorder.\n     * @private\n     */\n    _mediaRecorder = null;\n\n    /**\n     * Initialization promise.\n     * @private\n     */\n    _initPromise = null;\n\n    /**\n     * The recorded audio file.\n     * @private\n     */\n    _recordedData = null;\n\n    /**\n     * Implements {@link RecordingAdapter#start()}.\n     *\n     * @inheritdoc\n     */\n    start(micDeviceId) {\n        if (!this._initPromise) {\n            this._initPromise = this._initialize(micDeviceId);\n        }\n\n        return this._initPromise.then(() =>\n            new Promise(resolve => {\n                this._mediaRecorder.start();\n                resolve();\n            })\n        );\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#stop()}.\n     *\n     * @inheritdoc\n     */\n    stop() {\n        return new Promise(\n            resolve => {\n                this._mediaRecorder.onstop = () => resolve();\n                this._mediaRecorder.stop();\n            }\n        );\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#exportRecordedData()}.\n     *\n     * @inheritdoc\n     */\n    exportRecordedData() {\n        if (this._recordedData !== null) {\n            return Promise.resolve({\n                data: this._recordedData,\n                format: 'ogg'\n            });\n        }\n\n        return Promise.reject('No audio data recorded.');\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#setMuted()}.\n     *\n     * @inheritdoc\n     */\n    setMuted(muted) {\n        const shouldEnable = !muted;\n\n        if (!this._stream) {\n            return Promise.resolve();\n        }\n\n        const track = this._stream.getAudioTracks()[0];\n\n        if (!track) {\n            logger.error('Cannot mute/unmute. Track not found!');\n\n            return Promise.resolve();\n        }\n\n        if (track.enabled !== shouldEnable) {\n            track.enabled = shouldEnable;\n            logger.log(muted ? 'Mute' : 'Unmute');\n        }\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Initialize the adapter.\n     *\n     * @private\n     * @param {string} micDeviceId - The current microphone device ID.\n     * @returns {Promise}\n     */\n    _initialize(micDeviceId) {\n        if (this._mediaRecorder) {\n            return Promise.resolve();\n        }\n\n        return new Promise((resolve, error) => {\n            this._getAudioStream(micDeviceId)\n            .then(stream => {\n                this._stream = stream;\n                this._mediaRecorder = new MediaRecorder(stream);\n                this._mediaRecorder.ondataavailable\n                    = e => this._saveMediaData(e.data);\n                resolve();\n            })\n            .catch(err => {\n                logger.error(`Error calling getUserMedia(): ${err}`);\n                error();\n            });\n        });\n    }\n\n    /**\n     * Callback for storing the encoded data.\n     *\n     * @private\n     * @param {Blob} data - Encoded data.\n     * @returns {void}\n     */\n    _saveMediaData(data) {\n        this._recordedData = data;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nconst logger = getLogger(__filename);\nimport { RecordingAdapter } from './RecordingAdapter';\n\n/**\n * Base class for {@code AudioContext}-based recording adapters.\n */\nexport class AbstractAudioContextAdapter extends RecordingAdapter {\n    /**\n     * The {@code AudioContext} instance.\n     */\n    _audioContext = null;\n\n    /**\n     * The {@code ScriptProcessorNode} instance.\n     */\n    _audioProcessingNode = null;\n\n    /**\n     * The {@code MediaStreamAudioSourceNode} instance.\n     */\n    _audioSource = null;\n\n    /**\n     * The {@code MediaStream} instance, representing the current audio device.\n     */\n    _stream = null;\n\n    /**\n     * Sample rate.\n     */\n    _sampleRate = 44100;\n\n    /**\n     * Constructor.\n     */\n    constructor() {\n        super();\n\n        // sampleRate is browser and OS dependent.\n        // Setting sampleRate explicitly is in the specs but not implemented\n        // by browsers.\n        // See: https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/\n        //    AudioContext#Browser_compatibility\n        // And https://bugs.chromium.org/p/chromium/issues/detail?id=432248\n\n        this._audioContext = new AudioContext();\n        this._sampleRate = this._audioContext.sampleRate;\n        logger.log(`Current sampleRate ${this._sampleRate}.`);\n    }\n\n    /**\n     * Sets up the audio graph in the AudioContext.\n     *\n     * @protected\n     * @param {string} micDeviceId - The current microphone device ID.\n     * @param {Function} callback - Callback function to\n     * handle AudioProcessingEvents.\n     * @returns {Promise}\n     */\n    _initializeAudioContext(micDeviceId, callback) {\n        if (typeof callback !== 'function') {\n            return Promise.reject('a callback function is required.');\n        }\n\n        return this._getAudioStream(micDeviceId)\n        .then(stream => {\n            this._stream = stream;\n            this._audioSource\n                = this._audioContext.createMediaStreamSource(stream);\n            this._audioProcessingNode\n                = this._audioContext.createScriptProcessor(4096, 1, 1);\n            this._audioProcessingNode.onaudioprocess = callback;\n            logger.debug('AudioContext is set up.');\n        })\n        .catch(err => {\n            logger.error(`Error calling getUserMedia(): ${err}`);\n\n            return Promise.reject(err);\n        });\n    }\n\n    /**\n     * Connects the nodes in the {@code AudioContext} to start the flow of\n     * audio data.\n     *\n     * @protected\n     * @returns {void}\n     */\n    _connectAudioGraph() {\n        this._audioSource.connect(this._audioProcessingNode);\n        this._audioProcessingNode.connect(this._audioContext.destination);\n    }\n\n    /**\n     * Disconnects the nodes in the {@code AudioContext}.\n     *\n     * @protected\n     * @returns {void}\n     */\n    _disconnectAudioGraph() {\n        this._audioProcessingNode.onaudioprocess = undefined;\n        this._audioProcessingNode.disconnect();\n        this._audioSource.disconnect();\n    }\n\n    /**\n     * Replaces the current microphone MediaStream.\n     *\n     * @protected\n     * @param {string} micDeviceId - New microphone ID.\n     * @returns {Promise}\n     */\n    _replaceMic(micDeviceId) {\n        if (this._audioContext && this._audioProcessingNode) {\n            return this._getAudioStream(micDeviceId).then(newStream => {\n                const newSource = this._audioContext\n                    .createMediaStreamSource(newStream);\n\n                this._audioSource.disconnect();\n                newSource.connect(this._audioProcessingNode);\n                this._stream = newStream;\n                this._audioSource = newSource;\n            });\n        }\n\n        return Promise.resolve();\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nconst logger = getLogger(__filename);\n\nimport { AbstractAudioContextAdapter } from './AbstractAudioContextAdapter';\n\nconst WAV_BITS_PER_SAMPLE = 16;\n\n/**\n * Recording adapter for raw WAVE format.\n */\nexport class WavAdapter extends AbstractAudioContextAdapter {\n\n    /**\n     * Length of the WAVE file, in number of samples.\n     */\n    _wavLength = 0;\n\n    /**\n     * The {@code ArrayBuffer}s that stores the PCM bits.\n     */\n    _wavBuffers = [];\n\n    /**\n     * Whether or not the {@code WavAdapter} is in a ready state.\n     */\n    _isInitialized = false;\n\n    /**\n     * Initialization promise.\n     */\n    _initPromise = null;\n\n    /**\n     * Constructor.\n     */\n    constructor() {\n        super();\n        this._onAudioProcess = this._onAudioProcess.bind(this);\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#start()}.\n     *\n     * @inheritdoc\n     */\n    start(micDeviceId) {\n        if (!this._initPromise) {\n            this._initPromise = this._initialize(micDeviceId);\n        }\n\n        return this._initPromise.then(() => {\n            this._wavBuffers = [];\n            this._wavLength = 0;\n\n            this._connectAudioGraph();\n        });\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#stop()}.\n     *\n     * @inheritdoc\n     */\n    stop() {\n        this._disconnectAudioGraph();\n        this._data = this._exportMonoWAV(this._wavBuffers, this._wavLength);\n        this._audioProcessingNode = null;\n        this._audioSource = null;\n        this._isInitialized = false;\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#exportRecordedData()}.\n     *\n     * @inheritdoc\n     */\n    exportRecordedData() {\n        if (this._data !== null) {\n            return Promise.resolve({\n                data: this._data,\n                format: 'wav'\n            });\n        }\n\n        return Promise.reject('No audio data recorded.');\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#setMuted()}.\n     *\n     * @inheritdoc\n     */\n    setMuted(muted) {\n        const shouldEnable = !muted;\n\n        if (!this._stream) {\n            return Promise.resolve();\n        }\n\n        const track = this._stream.getAudioTracks()[0];\n\n        if (!track) {\n            logger.error('Cannot mute/unmute. Track not found!');\n\n            return Promise.resolve();\n        }\n\n        if (track.enabled !== shouldEnable) {\n            track.enabled = shouldEnable;\n            logger.log(muted ? 'Mute' : 'Unmute');\n        }\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#setMicDevice()}.\n     *\n     * @inheritdoc\n     */\n    setMicDevice(micDeviceId) {\n        return this._replaceMic(micDeviceId);\n    }\n\n    /**\n     * Creates a WAVE file header.\n     *\n     * @private\n     * @param {number} dataLength - Length of the payload (PCM data), in bytes.\n     * @returns {Uint8Array}\n     */\n    _createWavHeader(dataLength) {\n        // adapted from\n        // https://github.com/mmig/speech-to-flac/blob/master/encoder.js\n\n        // ref: http://soundfile.sapp.org/doc/WaveFormat/\n\n        // create our WAVE file header\n        const buffer = new ArrayBuffer(44);\n        const view = new DataView(buffer);\n\n        // RIFF chunk descriptor\n        writeUTFBytes(view, 0, 'RIFF');\n\n        // set file size at the end\n        writeUTFBytes(view, 8, 'WAVE');\n\n        // FMT sub-chunk\n        writeUTFBytes(view, 12, 'fmt ');\n        view.setUint32(16, 16, true);\n        view.setUint16(20, 1, true);\n\n        // NumChannels\n        view.setUint16(22, 1, true);\n\n        // SampleRate\n        view.setUint32(24, this._sampleRate, true);\n\n        // ByteRate\n        view.setUint32(28,\n            Number(this._sampleRate) * 1 * WAV_BITS_PER_SAMPLE / 8, true);\n\n        // BlockAlign\n        view.setUint16(32, 1 * Number(WAV_BITS_PER_SAMPLE) / 8, true);\n\n        view.setUint16(34, WAV_BITS_PER_SAMPLE, true);\n\n        // data sub-chunk\n        writeUTFBytes(view, 36, 'data');\n\n        // file length\n        view.setUint32(4, 32 + dataLength, true);\n\n        // data chunk length\n        view.setUint32(40, dataLength, true);\n\n        return new Uint8Array(buffer);\n    }\n\n    /**\n     * Initialize the adapter.\n     *\n     * @private\n     * @param {string} micDeviceId - The current microphone device ID.\n     * @returns {Promise}\n     */\n    _initialize(micDeviceId) {\n        if (this._isInitialized) {\n            return Promise.resolve();\n        }\n\n        return this._initializeAudioContext(micDeviceId, this._onAudioProcess)\n            .then(() => {\n                this._isInitialized = true;\n            });\n    }\n\n    /**\n     * Callback function for handling AudioProcessingEvents.\n     *\n     * @private\n     * @param {AudioProcessingEvent} e - The event containing the raw PCM.\n     * @returns {void}\n     */\n    _onAudioProcess(e) {\n        // See: https://developer.mozilla.org/en-US/docs/Web/API/\n        //      AudioBuffer/getChannelData\n        // The returned value is an Float32Array.\n        const channelLeft = e.inputBuffer.getChannelData(0);\n\n        // Need to copy the Float32Array:\n        // unlike passing to WebWorker, this data is passed by reference,\n        // so we need to copy it, otherwise the resulting audio file will be\n        // just repeating the last segment.\n        this._wavBuffers.push(new Float32Array(channelLeft));\n        this._wavLength += channelLeft.length;\n    }\n\n    /**\n     * Combines buffers and export to a wav file.\n     *\n     * @private\n     * @param {Float32Array[]} buffers - The stored buffers.\n     * @param {number} length - Total length (number of samples).\n     * @returns {Blob}\n     */\n    _exportMonoWAV(buffers, length) {\n        const dataLength = length * 2; // each sample = 16 bit = 2 bytes\n        const buffer = new ArrayBuffer(44 + dataLength);\n        const view = new DataView(buffer);\n\n        // copy WAV header data into the array buffer\n        const header = this._createWavHeader(dataLength);\n        const len = header.length;\n\n        for (let i = 0; i < len; ++i) {\n            view.setUint8(i, header[i]);\n        }\n\n        // write audio data\n        floatTo16BitPCM(view, 44, buffers);\n\n        return new Blob([ view ], { type: 'audio/wav' });\n    }\n}\n\n\n/**\n * Helper function. Writes a UTF string to memory\n * using big endianness. Required by WAVE headers.\n *\n * @param {ArrayBuffer} view - The view to memory.\n * @param {number} offset - Offset.\n * @param {string} string - The string to be written.\n * @returns {void}\n */\nfunction writeUTFBytes(view, offset, string) {\n    const lng = string.length;\n\n    // convert to big endianness\n    for (let i = 0; i < lng; ++i) {\n        view.setUint8(offset + i, string.charCodeAt(i));\n    }\n}\n\n/**\n * Helper function for converting Float32Array to Int16Array.\n *\n * @param {DataView} output - View to the output buffer.\n * @param {number} offset - The offset in output buffer to write from.\n * @param {Float32Array[]} inputBuffers - The input buffers.\n * @returns {void}\n */\nfunction floatTo16BitPCM(output, offset, inputBuffers) {\n\n    let i, j;\n    let input, s, sampleCount;\n    const bufferCount = inputBuffers.length;\n    let o = offset;\n\n    for (i = 0; i < bufferCount; ++i) {\n        input = inputBuffers[i];\n        sampleCount = input.length;\n        for (j = 0; j < sampleCount; ++j, o += 2) {\n            s = Math.max(-1, Math.min(1, input[j]));\n            output.setInt16(o, s < 0 ? s * 0x8000 : s * 0x7FFF, true);\n        }\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nconst logger = getLogger(__filename);\nimport { AbstractAudioContextAdapter } from '../AbstractAudioContextAdapter';\n\nimport {\n    DEBUG,\n    MAIN_THREAD_FINISH,\n    MAIN_THREAD_INIT,\n    MAIN_THREAD_NEW_DATA_ARRIVED,\n    WORKER_BLOB_READY,\n    WORKER_LIBFLAC_READY\n} from './messageTypes';\n\n\n/**\n * Recording adapter that uses libflac.js in the background.\n */\nexport class FlacAdapter extends AbstractAudioContextAdapter {\n\n    /**\n     * Instance of WebWorker (flacEncodeWorker).\n     */\n    _encoder = null;\n\n    /**\n     * Resolve function of the Promise returned by {@code stop()}.\n     * This is called after the WebWorker sends back {@code WORKER_BLOB_READY}.\n     */\n    _stopPromiseResolver = null;\n\n    /**\n     * Resolve function of the Promise that initializes the flacEncodeWorker.\n     */\n    _initWorkerPromiseResolver = null;\n\n    /**\n     * Initialization promise.\n     */\n    _initPromise = null;\n\n    /**\n     * Constructor.\n     */\n    constructor() {\n        super();\n        this._onAudioProcess = this._onAudioProcess.bind(this);\n        this._onWorkerMessage = this._onWorkerMessage.bind(this);\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#start()}.\n     *\n     * @inheritdoc\n     */\n    start(micDeviceId) {\n        if (!this._initPromise) {\n            this._initPromise = this._initialize(micDeviceId);\n        }\n\n        return this._initPromise.then(() => {\n            this._connectAudioGraph();\n        });\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#stop()}.\n     *\n     * @inheritdoc\n     */\n    stop() {\n        if (!this._encoder) {\n            logger.error('Attempting to stop but has nothing to stop.');\n\n            return Promise.reject();\n        }\n\n        return new Promise(resolve => {\n            this._initPromise = null;\n            this._disconnectAudioGraph();\n            this._stopPromiseResolver = resolve;\n            this._encoder.postMessage({\n                command: MAIN_THREAD_FINISH\n            });\n        });\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#exportRecordedData()}.\n     *\n     * @inheritdoc\n     */\n    exportRecordedData() {\n        if (this._data !== null) {\n            return Promise.resolve({\n                data: this._data,\n                format: 'flac'\n            });\n        }\n\n        return Promise.reject('No audio data recorded.');\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#setMuted()}.\n     *\n     * @inheritdoc\n     */\n    setMuted(muted) {\n        const shouldEnable = !muted;\n\n        if (!this._stream) {\n            return Promise.resolve();\n        }\n\n        const track = this._stream.getAudioTracks()[0];\n\n        if (!track) {\n            logger.error('Cannot mute/unmute. Track not found!');\n\n            return Promise.resolve();\n        }\n\n        if (track.enabled !== shouldEnable) {\n            track.enabled = shouldEnable;\n            logger.log(muted ? 'Mute' : 'Unmute');\n        }\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#setMicDevice()}.\n     *\n     * @inheritdoc\n     */\n    setMicDevice(micDeviceId) {\n        return this._replaceMic(micDeviceId);\n    }\n\n    /**\n     * Initialize the adapter.\n     *\n     * @private\n     * @param {string} micDeviceId - The current microphone device ID.\n     * @returns {Promise}\n     */\n    _initialize(micDeviceId) {\n        if (this._encoder !== null) {\n            return Promise.resolve();\n        }\n\n        const promiseInitWorker = new Promise((resolve, reject) => {\n            try {\n                this._loadWebWorker();\n            } catch (e) {\n                reject();\n            }\n\n            // Save the Promise's resolver to resolve it later.\n            // This Promise is only resolved in _onWorkerMessage when we\n            // receive WORKER_LIBFLAC_READY from the WebWorker.\n            this._initWorkerPromiseResolver = resolve;\n\n            // set up listener for messages from the WebWorker\n            this._encoder.onmessage = this._onWorkerMessage;\n\n            this._encoder.postMessage({\n                command: MAIN_THREAD_INIT,\n                config: {\n                    sampleRate: this._sampleRate,\n                    bps: 16\n                }\n            });\n        });\n\n        // Arrow function is used here because we want AudioContext to be\n        // initialized only **after** promiseInitWorker is resolved.\n        return promiseInitWorker\n            .then(() =>\n                this._initializeAudioContext(\n                    micDeviceId,\n                    this._onAudioProcess\n                ));\n    }\n\n    /**\n     * Callback function for handling AudioProcessingEvents.\n     *\n     * @private\n     * @param {AudioProcessingEvent} e - The event containing the raw PCM.\n     * @returns {void}\n     */\n    _onAudioProcess(e) {\n        // Delegates to the WebWorker to do the encoding.\n        // The return of getChannelData() is a Float32Array,\n        // each element representing one sample.\n        const channelLeft = e.inputBuffer.getChannelData(0);\n\n        this._encoder.postMessage({\n            command: MAIN_THREAD_NEW_DATA_ARRIVED,\n            buf: channelLeft\n        });\n    }\n\n    /**\n     * Handler for messages from flacEncodeWorker.\n     *\n     * @private\n     * @param {MessageEvent} e - The event sent by the WebWorker.\n     * @returns {void}\n     */\n    _onWorkerMessage(e) {\n        switch (e.data.command) {\n        case WORKER_BLOB_READY:\n            // Received a Blob representing an encoded FLAC file.\n            this._data = e.data.buf;\n            if (this._stopPromiseResolver !== null) {\n                this._stopPromiseResolver();\n                this._stopPromiseResolver = null;\n                this._encoder.terminate();\n                this._encoder = null;\n            }\n            break;\n        case DEBUG:\n            logger.log(e.data);\n            break;\n        case WORKER_LIBFLAC_READY:\n            logger.log('libflac is ready.');\n            this._initWorkerPromiseResolver();\n            break;\n        default:\n            logger.error(\n                `Unknown event\n                from encoder (WebWorker): \"${e.data.command}\"!`);\n            break;\n        }\n    }\n\n    /**\n     * Loads the WebWorker.\n     *\n     * @private\n     * @returns {void}\n     */\n    _loadWebWorker() {\n        const blob = new Blob([\"importScripts('https://sdk.sariska.io/flacEncodeWorker.min.js');\"], {\"type\": 'application/javascript'});\n        const url = window.URL || window.webkitURL;\n        const blobUrl = url.createObjectURL(blob);\n        this._encoder = new Worker(blobUrl);\n        URL.revokeObjectURL(blobUrl);\n    }\n}","/**\n * Types of messages that are passed between the main thread and the WebWorker\n * ({@code flacEncodeWorker})\n */\n\n// Messages sent by the main thread\n\n/**\n * Message type that signals the termination of encoding,\n * after which no new audio bits should be sent to the\n * WebWorker.\n */\nexport const MAIN_THREAD_FINISH = 'MAIN_THREAD_FINISH';\n\n/**\n * Message type that carries initial parameters for\n * the WebWorker.\n */\nexport const MAIN_THREAD_INIT = 'MAIN_THREAD_INIT';\n\n/**\n * Message type that carries the newly received raw audio bits\n * for the WebWorker to encode.\n */\nexport const MAIN_THREAD_NEW_DATA_ARRIVED = 'MAIN_THREAD_NEW_DATA_ARRIVED';\n\n// Messages sent by the WebWorker\n\n/**\n * Message type that signals libflac is ready to receive audio bits.\n */\nexport const WORKER_LIBFLAC_READY = 'WORKER_LIBFLAC_READY';\n\n/**\n * Message type that carries the encoded FLAC file as a Blob.\n */\nexport const WORKER_BLOB_READY = 'WORKER_BLOB_READY';\n\n// Messages sent by either the main thread or the WebWorker\n\n/**\n * Debug messages.\n */\nexport const DEBUG = 'DEBUG';\n","/* @flow */\n\nimport Bourne from '@hapi/bourne';\nimport { jitsiLocalStorage } from '@jitsi/js-utils';\n\nimport { getLogger } from '@jitsi/logger';\nconst logger = getLogger(__filename);\n\n/**\n * Gets high precision system time.\n *\n * @returns {number}\n */\nfunction highPrecisionTime() {\n    return window.performance\n        && window.performance.now\n        && window.performance.timing\n        && window.performance.timing.navigationStart\n        ? window.performance.now() + window.performance.timing.navigationStart\n        : Date.now();\n}\n\n// Have to use string literal here, instead of Symbols,\n// because these values need to be JSON-serializible.\n\n/**\n * Types of SessionEvents.\n */\nconst SessionEventType = Object.freeze({\n    /**\n     * Start of local recording session. This is recorded when the\n     * {@code RecordingController} receives the signal to start local recording,\n     * before the actual adapter is engaged.\n     */\n    SESSION_STARTED: 'SESSION_STARTED',\n\n    /**\n     * Start of a continuous segment. This is recorded when the adapter is\n     * engaged. Can happen multiple times in a local recording session,\n     * due to browser reloads or switching of recording device.\n     */\n    SEGMENT_STARTED: 'SEGMENT_STARTED',\n\n    /**\n     * End of a continuous segment. This is recorded when the adapter unengages.\n     */\n    SEGMENT_ENDED: 'SEGMENT_ENDED'\n});\n\n/**\n * Represents an event during a local recording session.\n * The event can be either that the adapter started recording, or stopped\n * recording.\n */\n// type SessionEvent = {\n\n//     /**\n//      * The type of the event.\n//      * Should be one of the values in {@code SessionEventType}.\n//      */\n//     type: string,\n\n//     /**\n//      * The timestamp of the event.\n//      */\n//     timestamp: number\n// };\n\n/**\n * Representation of the metadata of a segment.\n */\n// type SegmentInfo = {\n\n//     /**\n//      * The length of gap before this segment, in milliseconds.\n//      * mull if unknown.\n//      */\n//     gapBefore?: ?number,\n\n//     /**\n//      * The duration of this segment, in milliseconds.\n//      * null if unknown or the segment is not finished.\n//      */\n//     duration?: ?number,\n\n//     /**\n//      * The start time, in milliseconds.\n//      */\n//     start?: ?number,\n\n//     /**\n//      * The end time, in milliseconds.\n//      * null if unknown, the segment is not finished, or the recording is\n//      * interrupted (e.g. browser reload).\n//      */\n//     end?: ?number\n// };\n\n/**\n * Representation of metadata of a local recording session.\n */\n// type SessionInfo = {\n\n//     /**\n//      * The session token.\n//      */\n//     sessionToken: string,\n\n//     /**\n//      * The start time of the session.\n//      */\n//     start: ?number,\n\n//     /**\n//      * The recording format.\n//      */\n//     format: string,\n\n//     /**\n//      * Array of segments in the session.\n//      */\n//     segments: SegmentInfo[]\n// }\n\n/**\n * {@code localStorage} key.\n */\nconst LOCAL_STORAGE_KEY = 'localRecordingMetadataVersion1';\n\n/**\n * SessionManager manages the metadata of each segment during each local\n * recording session.\n *\n * A segment is a continuous portion of recording done using the same adapter\n * on the same microphone device.\n *\n * Browser refreshes, switching of microphone will cause new segments to be\n * created.\n *\n * A recording session can consist of one or more segments.\n */\nclass SessionManager {\n\n    /**\n     * The metadata.\n     */\n    _sessionsMetadata = {\n    };\n\n    /**\n     * Constructor.\n     */\n    constructor() {\n        this._loadMetadata();\n    }\n\n    /**\n     * Loads metadata from localStorage.\n     *\n     * @private\n     * @returns {void}\n     */\n    _loadMetadata() {\n        const dataStr = jitsiLocalStorage.getItem(LOCAL_STORAGE_KEY);\n\n        if (dataStr !== null) {\n            try {\n                const dataObject = Bourne.parse(dataStr);\n\n                this._sessionsMetadata = dataObject;\n            } catch (e) {\n                logger.warn('Failed to parse localStorage item.');\n\n                return;\n            }\n        }\n    }\n\n    /**\n     * Persists metadata to localStorage.\n     *\n     * @private\n     * @returns {void}\n     */\n    _saveMetadata() {\n        jitsiLocalStorage.setItem(LOCAL_STORAGE_KEY,\n            JSON.stringify(this._sessionsMetadata));\n    }\n\n    /**\n     * Creates a session if not exists.\n     *\n     * @param {string} sessionToken - The local recording session token.\n     * @param {string} format - The local recording format.\n     * @returns {void}\n     */\n    createSession(sessionToken, format) {\n        if (this._sessionsMetadata[sessionToken] === undefined) {\n            this._sessionsMetadata[sessionToken] = {\n                format,\n                events: []\n            };\n            this._sessionsMetadata[sessionToken].events.push({\n                type: SessionEventType.SESSION_STARTED,\n                timestamp: highPrecisionTime()\n            });\n            this._saveMetadata();\n        } else {\n            logger.warn(`Session ${sessionToken} already exists`);\n        }\n    }\n\n    /**\n     * Gets all the Sessions.\n     *\n     * @returns {SessionInfo[]}\n     */\n    getSessions(){\n        const sessionTokens = Object.keys(this._sessionsMetadata);\n        const output = [];\n\n        for (let i = 0; i < sessionTokens.length; ++i) {\n            const thisSession = this._sessionsMetadata[sessionTokens[i]];\n            const newSessionInfo = {\n                start: thisSession.events[0].timestamp,\n                format: thisSession.format,\n                sessionToken: sessionTokens[i],\n                segments: this.getSegments(sessionTokens[i])\n            };\n\n            output.push(newSessionInfo);\n        }\n\n        output.sort((a, b) => (a.start || 0) - (b.start || 0));\n\n        return output;\n    }\n\n    /**\n     * Removes session metadata.\n     *\n     * @param {string} sessionToken - The session token.\n     * @returns {void}\n     */\n    removeSession(sessionToken) {\n        delete this._sessionsMetadata[sessionToken];\n        this._saveMetadata();\n    }\n\n    /**\n     * Get segments of a given Session.\n     *\n     * @param {string} sessionToken - The session token.\n     * @returns {SegmentInfo[]}\n     */\n    getSegments(sessionToken) {\n        const thisSession = this._sessionsMetadata[sessionToken];\n\n        if (thisSession) {\n            return this._constructSegments(thisSession.events);\n        }\n\n        return [];\n    }\n\n    /**\n     * Marks the start of a new segment.\n     * This should be invoked by {@code RecordingAdapter}s when they need to\n     * start asynchronous operations (such as switching tracks) that interrupts\n     * recording.\n     *\n     * @param {string} sessionToken - The token of the session to start a new\n     * segment in.\n     * @returns {number} - Current segment index.\n     */\n    beginSegment(sessionToken) {\n        if (this._sessionsMetadata[sessionToken] === undefined) {\n            logger.warn('Attempting to add segments to nonexistent'\n                + ` session ${sessionToken}`);\n\n            return -1;\n        }\n        this._sessionsMetadata[sessionToken].events.push({\n            type: SessionEventType.SEGMENT_STARTED,\n            timestamp: highPrecisionTime()\n        });\n        this._saveMetadata();\n\n        return this.getSegments(sessionToken).length - 1;\n    }\n\n    /**\n     * Gets the current segment index. Starting from 0 for the first\n     * segment.\n     *\n     * @param {string} sessionToken - The session token.\n     * @returns {number}\n     */\n    getCurrentSegmentIndex(sessionToken) {\n        if (this._sessionsMetadata[sessionToken] === undefined) {\n            return -1;\n        }\n        const segments = this.getSegments(sessionToken);\n\n        if (segments.length === 0) {\n            return -1;\n        }\n\n        const lastSegment = segments[segments.length - 1];\n\n        if (lastSegment.end) {\n            // last segment is already ended\n            return -1;\n        }\n\n        return segments.length - 1;\n    }\n\n    /**\n     * Marks the end of the last segment in a session.\n     *\n     * @param {string} sessionToken - The session token.\n     * @returns {void}\n     */\n    endSegment(sessionToken) {\n        if (this._sessionsMetadata[sessionToken] === undefined) {\n            logger.warn('Attempting to end a segment in nonexistent'\n                + ` session ${sessionToken}`);\n        } else {\n            this._sessionsMetadata[sessionToken].events.push({\n                type: SessionEventType.SEGMENT_ENDED,\n                timestamp: highPrecisionTime()\n            });\n            this._saveMetadata();\n        }\n    }\n\n    /**\n     * Constructs an array of {@code SegmentInfo} from an array of\n     * {@code SessionEvent}s.\n     *\n     * @private\n     * @param {SessionEvent[]} events - The array of {@code SessionEvent}s.\n     * @returns {SegmentInfo[]}\n     */\n    _constructSegments(events) {\n        if (events.length === 0) {\n            return [];\n        }\n\n        const output = [];\n        let sessionStartTime = null;\n        let currentSegment = {};\n\n        /**\n         * Helper function for adding a new {@code SegmentInfo} object to the\n         * output.\n         *\n         * @returns {void}\n         */\n        function commit() {\n            if (currentSegment.gapBefore === undefined\n                || currentSegment.gapBefore === null) {\n                if (output.length > 0 && output[output.length - 1].end) {\n                    const lastSegment = output[output.length - 1];\n\n                    if (currentSegment.start && lastSegment.end) {\n                        currentSegment.gapBefore = currentSegment.start\n                            - lastSegment.end;\n                    } else {\n                        currentSegment.gapBefore = null;\n                    }\n                } else if (sessionStartTime !== null && output.length === 0) {\n                    currentSegment.gapBefore = currentSegment.start\n                        ? currentSegment.start - sessionStartTime\n                        : null;\n                } else {\n                    currentSegment.gapBefore = null;\n                }\n            }\n            currentSegment.duration = currentSegment.end && currentSegment.start\n                ? currentSegment.end - currentSegment.start\n                : null;\n            output.push(currentSegment);\n            currentSegment = {};\n        }\n\n        for (let i = 0; i < events.length; ++i) {\n            const currentEvent = events[i];\n\n            switch (currentEvent.type) {\n            case SessionEventType.SESSION_STARTED:\n                if (sessionStartTime === null) {\n                    sessionStartTime = currentEvent.timestamp;\n                } else {\n                    logger.warn('Unexpected SESSION_STARTED event.'\n                        , currentEvent);\n                }\n                break;\n            case SessionEventType.SEGMENT_STARTED:\n                if (currentSegment.start === undefined\n                    || currentSegment.start === null) {\n                    currentSegment.start = currentEvent.timestamp;\n                } else {\n                    commit();\n                    currentSegment.start = currentEvent.timestamp;\n                }\n                break;\n\n            case SessionEventType.SEGMENT_ENDED:\n                if (currentSegment.start === undefined\n                    || currentSegment.start === null) {\n                    logger.warn('Unexpected SEGMENT_ENDED event', currentEvent);\n                } else {\n                    currentSegment.end = currentEvent.timestamp;\n                    commit();\n                }\n                break;\n\n            default:\n                logger.warn('Unexpected error during _constructSegments');\n                break;\n            }\n        }\n        if (currentSegment.start) {\n            commit();\n        }\n\n        return output;\n    }\n\n}\n\n/**\n * Global singleton of {@code SessionManager}.\n */\nexport const sessionManager = new SessionManager();\n\n// For debug only. To remove later.\nwindow.sessionManager = sessionManager;\n","/* @flow */\n\nimport Bourne from '@hapi/bourne';\nimport { getLogger } from '@jitsi/logger';\nconst logger = getLogger(__filename);\n\nimport {\n    FlacAdapter,\n    OggAdapter,\n    WavAdapter,\n    downloadBlob\n} from '../recording';\nimport { sessionManager } from '../session';\n\n/**\n * XMPP command for signaling the start of local recording to all clients.\n * Should be sent by the moderator only.\n */\nconst COMMAND_START = 'localRecStart';\n\n/**\n * XMPP command for signaling the stop of local recording to all clients.\n * Should be sent by the moderator only.\n */\nconst COMMAND_STOP = 'localRecStop';\n\n/**\n * One-time command used to trigger the moderator to resend the commands.\n * This is a workaround for newly-joined clients to receive remote presence.\n */\nconst COMMAND_PING = 'localRecPing';\n\n/**\n * One-time command sent upon receiving a {@code COMMAND_PING}.\n * Only the moderator sends this command.\n * This command does not carry any information itself, but rather forces the\n * XMPP server to resend the remote presence.\n */\nconst COMMAND_PONG = 'localRecPong';\n\n/**\n * Participant property key for local recording stats.\n */\nconst PROPERTY_STATS = 'localRecStats';\n\n/**\n * Supported recording formats.\n */\nconst RECORDING_FORMATS = new Set([ 'flac', 'wav', 'ogg' ]);\n\n/**\n * Default recording format.\n */\nconst DEFAULT_RECORDING_FORMAT = 'flac';\n\n/**\n * States of the {@code RecordingController}.\n */\nconst ControllerState = Object.freeze({\n    /**\n     * Idle (not recording).\n     */\n    IDLE: Symbol('IDLE'),\n\n    /**\n     * Starting.\n     */\n    STARTING: Symbol('STARTING'),\n\n    /**\n     * Engaged (recording).\n     */\n    RECORDING: Symbol('RECORDING'),\n\n    /**\n     * Stopping.\n     */\n    STOPPING: Symbol('STOPPING'),\n\n    /**\n     * Failed, due to error during starting / stopping process.\n     */\n    FAILED: Symbol('FAILED')\n});\n\n/**\n * Type of the stats reported by each participant (client).\n */\n// type RecordingStats = {\n\n//     /**\n//      * Current local recording session token used by the participant.\n//      */\n//     currentSessionToken: number,\n\n//     /**\n//      * Whether local recording is engaged on the participant's device.\n//      */\n//     isRecording: boolean,\n\n//     /**\n//      * Total recorded bytes. (Reserved for future use.)\n//      */\n//     recordedBytes: number,\n\n//     /**\n//      * Total recording duration. (Reserved for future use.)\n//      */\n//     recordedLength: number\n// }\n\n/**\n * The component responsible for the coordination of local recording, across\n * multiple participants.\n * Current implementation requires that there is only one moderator in a room.\n */\nexport class RecordingController {\n\n    /**\n     * For each recording session, there is a separate @{code RecordingAdapter}\n     * instance so that encoded bits from the previous sessions can still be\n     * retrieved after they ended.\n     *\n     * @private\n     */\n    _adapters = {};\n\n    /**\n     * The {@code JitsiConference} instance.\n     *\n     * @private\n     */\n    _conference = null;\n\n    /**\n     * Current recording session token.\n     * Session token is a number generated by the moderator, to ensure every\n     * client is in the same recording state.\n     *\n     * @private\n     */\n    _currentSessionToken = -1;\n\n    /**\n     * Current state of {@code RecordingController}.\n     *\n     * @private\n     */\n    _state = ControllerState.IDLE;\n\n    /**\n     * Whether or not the audio is muted in the UI. This is stored as internal\n     * state of {@code RecordingController} because we might have recording\n     * sessions that start muted.\n     */\n    _isMuted = false;\n\n    /**\n     * The ID of the active microphone.\n     *\n     * @private\n     */\n    _micDeviceId = 'default';\n\n    /**\n     * Current recording format. This will be in effect from the next\n     * recording session, i.e., if this value is changed during an on-going\n     * recording session, that on-going session will not use the new format.\n     *\n     * @private\n     */\n    _format = DEFAULT_RECORDING_FORMAT;\n\n    /**\n     * Whether or not the {@code RecordingController} has registered for\n     * XMPP events. Prevents initialization from happening multiple times.\n     *\n     * @private\n     */\n    _registered = false;\n\n\n    constructor() {\n        this.registerEvents = this.registerEvents.bind(this);\n        this.getParticipantsStats = this.getParticipantsStats.bind(this);\n        this._onStartCommand = this._onStartCommand.bind(this);\n        this._onStopCommand = this._onStopCommand.bind(this);\n        this._onPingCommand = this._onPingCommand.bind(this);\n        this._doStartRecording = this._doStartRecording.bind(this);\n        this._doStopRecording = this._doStopRecording.bind(this);\n        this._updateStats = this._updateStats.bind(this);\n        this._switchToNewSession = this._switchToNewSession.bind(this);\n    }\n    /**\n     * Registers listeners for XMPP events.\n     *\n     * @param {JitsiConference} conference - A {@code JitsiConference} instance.\n     * @returns {void}\n     */\n    registerEvents(conference) {\n        if (!this._registered) {\n            this._conference = conference;\n            if (this._conference) {\n                this._conference\n                    .addCommandListener(COMMAND_STOP, this._onStopCommand);\n                this._conference\n                    .addCommandListener(COMMAND_START, this._onStartCommand);\n                this._conference\n                    .addCommandListener(COMMAND_PING, this._onPingCommand);\n                this._registered = true;\n            }\n            if (!this._conference.isModerator()) {\n                this._conference.sendCommandOnce(COMMAND_PING, {});\n            }\n        }\n    }\n\n    /**\n     * Sets the event handler for {@code onStateChanged}.\n     *\n     * @param {Function} delegate - The event handler.\n     * @returns {void}\n     */\n    set onStateChanged(delegate) {\n        this._onStateChanged = delegate;\n    }\n\n    /**\n     * Sets the event handler for {@code onNotify}.\n     *\n     * @param {Function} delegate - The event handler.\n     * @returns {void}\n     */\n    set onNotify(delegate) {\n        this._onNotify = delegate;\n    }\n\n    /**\n     * Sets the event handler for {@code onWarning}.\n     *\n     * @param {Function} delegate - The event handler.\n     * @returns {void}\n     */\n    set onWarning(delegate) {\n        this._onWarning = delegate;\n    }\n\n    /**\n     * Signals the participants to start local recording.\n     *\n     * @returns {void}\n     */\n    startRecording(format) {\n        this.registerEvents();\n        this.switchFormat(format);\n        if (this._conference && this._conference.isModerator()) {\n            this._conference.removeCommand(COMMAND_STOP);\n            this._conference.sendCommand(COMMAND_START, {\n                attributes: {\n                    sessionToken: this._getRandomToken(),\n                    format: this._format\n                }\n            });\n        } else if (this._onWarning) {\n            this._onWarning('localRecording.messages.notModerator');\n        }\n    }\n\n    /**\n     * Signals the participants to stop local recording.\n     *\n     * @returns {void}\n     */\n    stopRecording() {\n        if (this._conference) {\n            if (this._conference.isModerator()) {\n                this._conference.removeCommand(COMMAND_START);\n                this._conference.sendCommand(COMMAND_STOP, {\n                    attributes: {\n                        sessionToken: this._currentSessionToken\n                    }\n                });\n            } else if (this._onWarning) {\n                this._onWarning('localRecording.messages.notModerator');\n            }\n        }\n    }\n\n    /**\n     * Triggers the download of recorded data.\n     * Browser only.\n     *\n     * @param {number} sessionToken - The token of the session to download.\n     * @returns {void}\n     */\n    downloadRecordedData(sessionToken) {\n        if (this._adapters[sessionToken]) {\n            this._adapters[sessionToken].exportRecordedData()\n                .then(args => {\n                    const { data, format } = args;\n\n                    const filename = `session_${sessionToken}`\n                        + `_${this._conference.myUserId()}.${format}`;\n\n                    downloadBlob(data, filename);\n                })\n                .catch(error => {\n                    logger.error('Failed to download audio for'\n                        + ` session ${sessionToken}. Error: ${error}`);\n                });\n        } else {\n            logger.error(`Invalid session token for download ${sessionToken}`);\n        }\n    }\n\n    /**\n     * Changes the current microphone.\n     *\n     * @param {string} micDeviceId - The new microphone device ID.\n     * @returns {void}\n     */\n    setMicDevice(micDeviceId) {\n        if (micDeviceId !== this._micDeviceId) {\n            this._micDeviceId = String(micDeviceId);\n\n            if (this._state === ControllerState.RECORDING) {\n                // sessionManager.endSegment(this._currentSessionToken);\n                logger.log('Before switching microphone...');\n                this._adapters[this._currentSessionToken]\n                    .setMicDevice(this._micDeviceId)\n                    .then(() => {\n                        logger.log('Finished switching microphone.');\n\n                        // sessionManager.beginSegment(this._currentSesoken);\n                    })\n                    .catch(() => {\n                        logger.error('Failed to switch microphone');\n                    });\n            }\n            logger.log(`Switch microphone to ${this._micDeviceId}`);\n        }\n    }\n\n    /**\n     * Mute or unmute audio. When muted, the ongoing local recording should\n     * produce silence.\n     *\n     * @param {boolean} muted - If the audio should be muted.\n     * @returns {void}\n     */\n    setMuted(muted) {\n        this._isMuted = Boolean(muted);\n\n        if (this._state === ControllerState.RECORDING) {\n            this._adapters[this._currentSessionToken].setMuted(this._isMuted);\n        }\n    }\n\n    /**\n     * Switches the recording format.\n     *\n     * @param {string} newFormat - The new format.\n     * @returns {void}\n     */\n    switchFormat(newFormat) {\n        if (!RECORDING_FORMATS.has(newFormat)) {\n            logger.log(`Unknown format ${newFormat}. Ignoring...`);\n\n            return;\n        }\n        this._format = newFormat;\n        logger.log(`Recording format switched to ${newFormat}`);\n\n        // the new format will be used in the next recording session\n    }\n\n    /**\n     * Returns the local recording stats.\n     *\n     * @returns {RecordingStats}\n     */\n    getLocalStats() {\n        return {\n            currentSessionToken: this._currentSessionToken,\n            isRecording: this._state === ControllerState.RECORDING,\n            recordedBytes: 0,\n            recordedLength: 0\n        };\n    }\n    /**\n     * Returns the remote participants' local recording stats.\n     *\n     * @returns {*}\n     */\n    getParticipantsStats() {\n        const members\n            = this._conference.getParticipants()\n            .map(member => {\n                return {\n                    id: member.getId(),\n                    displayName: member.getDisplayName(),\n                    recordingStats:\n                        Bourne.parse(member.getProperty(PROPERTY_STATS) || '{}'),\n                    isSelf: false\n                };\n            });\n\n        // transform into a dictionary for consistent ordering\n        const result = {};\n\n        for (let i = 0; i < members.length; ++i) {\n            result[members[i].id] = members[i];\n        }\n        const localId = this._conference.myUserId();\n\n        result[localId] = {\n            id: localId,\n            displayName: 'localRecording.me',\n            recordingStats: this.getLocalStats(),\n            isSelf: true\n        };\n\n        return result;\n    }\n    /**\n     * Changes the current state of {@code RecordingController}.\n     *\n     * @private\n     * @param {Symbol} newState - The new state.\n     * @returns {void}\n     */\n    _changeState(newState) {\n        if (this._state !== newState) {\n            logger.log(`state change: ${this._state.toString()} -> `\n                + `${newState.toString()}`);\n            this._state = newState;\n        }\n    }\n    /**\n     * Sends out updates about the local recording stats via XMPP.\n     *\n     * @private\n     * @returns {void}\n     */\n    _updateStats() {\n        if (this._conference) {\n            this._conference.setLocalParticipantProperty(PROPERTY_STATS,\n                JSON.stringify(this.getLocalStats()));\n        }\n    }\n    /**\n     * Callback function for XMPP event.\n     *\n     * @private\n     * @param {*} value - The event args.\n     * @returns {void}\n     */\n    _onStartCommand(value) {\n        const { sessionToken, format } = value.attributes;\n\n        if (this._state === ControllerState.IDLE) {\n            this._changeState(ControllerState.STARTING);\n            this._switchToNewSession(sessionToken, format);\n            this._doStartRecording();\n        } else if (this._state === ControllerState.RECORDING\n            && this._currentSessionToken !== sessionToken) {\n            // There is local recording going on, but not for the same session.\n            // This means the current state might be out-of-sync with the\n            // moderator's, so we need to restart the recording.\n            this._changeState(ControllerState.STOPPING);\n            this._doStopRecording().then(() => {\n                this._changeState(ControllerState.STARTING);\n                this._switchToNewSession(sessionToken, format);\n                this._doStartRecording();\n            });\n        }\n    }\n    /**\n     * Callback function for XMPP event.\n     *\n     * @private\n     * @param {*} value - The event args.\n     * @returns {void}\n     */\n    _onStopCommand(value) {\n        if (this._state === ControllerState.RECORDING\n            && this._currentSessionToken === value.attributes.sessionToken) {\n            this._changeState(ControllerState.STOPPING);\n            this._doStopRecording();\n        }\n    }\n    /**\n     * Callback function for XMPP event.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onPingCommand() {\n        if (this._conference.isModerator()) {\n            logger.log('Received ping, sending pong.');\n            this._conference.sendCommandOnce(COMMAND_PONG, {});\n        }\n    }\n\n    /**\n     * Generates a token that can be used to distinguish each local recording\n     * session.\n     *\n     * @returns {number}\n     */\n    _getRandomToken() {\n        return Math.floor(Math.random() * 100000000) + 1;\n    }\n    /**\n     * Starts the recording locally.\n     *\n     * @private\n     * @returns {void}\n     */\n    _doStartRecording() {\n        if (this._state === ControllerState.STARTING) {\n            const delegate = this._adapters[this._currentSessionToken];\n\n            delegate.start(this._micDeviceId)\n            .then(() => {\n                this._changeState(ControllerState.RECORDING);\n                sessionManager.beginSegment(this._currentSessionToken);\n                logger.log('Local recording engaged.');\n\n                if (this._onNotify) {\n                    this._onNotify('localRecording.messages.engaged');\n                }\n                if (this._onStateChanged) {\n                    this._onStateChanged(true);\n                }\n\n                delegate.setMuted(this._isMuted);\n                this._updateStats();\n            })\n            .catch(err => {\n                logger.error('Failed to start local recording.', err);\n            });\n        }\n\n    }\n    /**\n     * Stops the recording locally.\n     *\n     * @private\n     * @returns {Promise<void>}\n     */\n    _doStopRecording() {\n        if (this._state === ControllerState.STOPPING) {\n            const token = this._currentSessionToken;\n\n            return this._adapters[this._currentSessionToken]\n                .stop()\n                .then(() => {\n                    this._changeState(ControllerState.IDLE);\n                    sessionManager.endSegment(this._currentSessionToken);\n                    logger.log('Local recording unengaged.');\n                    this.downloadRecordedData(token);\n\n                    const messageKey\n                        = this._conference.isModerator()\n                            ? 'localRecording.messages.finishedModerator'\n                            : 'localRecording.messages.finished';\n                    const messageParams = {\n                        token\n                    };\n\n                    if (this._onNotify) {\n                        this._onNotify(messageKey, messageParams);\n                    }\n                    if (this._onStateChanged) {\n                        this._onStateChanged(false);\n                    }\n                    this._updateStats();\n                })\n                .catch(err => {\n                    logger.error('Failed to stop local recording.', err);\n                });\n        }\n\n        /* eslint-disable */\n        return Promise.resolve();\n        // FIXME: better ways to satisfy flow and ESLint at the same time?\n        /* eslint-enable */\n\n    }\n    /**\n     * Switches to a new local recording session.\n     *\n     * @param {string} sessionToken - The session Token.\n     * @param {string} format - The recording format for the session.\n     * @returns {void}\n     */\n    _switchToNewSession(sessionToken, format) {\n        this._format = format;\n        this._currentSessionToken = sessionToken;\n        logger.log(`New session: ${this._currentSessionToken}, `\n            + `format: ${this._format}`);\n        this._adapters[sessionToken]\n             = this._createRecordingAdapter();\n        sessionManager.createSession(sessionToken, this._format);\n    }\n\n    /**\n     * Creates a recording adapter according to the current recording format.\n     *\n     * @private\n     * @returns {RecordingAdapter}\n     */\n    _createRecordingAdapter() {\n        logger.debug('[RecordingController] creating recording'\n            + ` adapter for ${this._format} format.`);\n\n        switch (this._format) {\n        case 'ogg':\n            return new OggAdapter();\n        case 'flac':\n            return new FlacAdapter();\n        case 'wav':\n            return new WavAdapter();\n        default:\n            throw new Error(`Unknown format: ${this._format}`);\n        }\n    }\n}","/**\n * Force download of Blob in browser by faking an <a> tag.\n *\n * @param {Blob} blob - Base64 URL.\n * @param {string} fileName - The filename to appear in the download dialog.\n * @returns {void}\n */\nexport function downloadBlob(blob, fileName = 'recording.ogg') {\n    const base64Url = window.URL.createObjectURL(blob);\n\n    // fake a anchor tag\n    const a = document.createElement('a');\n\n    a.style = 'display: none';\n    a.href = base64Url;\n    a.download = fileName;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n}\n","import { getLogger } from '@jitsi/logger';\nimport isEqual from 'lodash.isequal';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport FeatureFlags from '../flags/FeatureFlags';\n\nconst logger = getLogger(__filename);\nconst MAX_HEIGHT_ONSTAGE = 2160;\nconst MAX_HEIGHT_THUMBNAIL = 180;\nconst LASTN_UNLIMITED = -1;\n\n/**\n * This class translates the legacy signaling format between the client and the bridge (that affects bandwidth\n * allocation) to the new format described here https://github.com/jitsi/jitsi-videobridge/blob/master/doc/allocation.md\n */\nexport class ReceiverVideoConstraints {\n    /**\n     * Creates a new instance.\n     */\n    constructor() {\n        // Default constraints used for endpoints that are not explicitly included in constraints.\n        // These constraints are used for endpoints that are thumbnails in the stage view.\n        this._defaultConstraints = { 'maxHeight': MAX_HEIGHT_THUMBNAIL };\n\n        // The number of videos requested from the bridge.\n        this._lastN = LASTN_UNLIMITED;\n\n        // The number representing the maximum video height the local client should receive from the bridge.\n        this._maxFrameHeight = MAX_HEIGHT_ONSTAGE;\n\n        // The endpoint IDs of the participants that are currently selected.\n        this._selectedEndpoints = [];\n\n        this._receiverVideoConstraints = {\n            constraints: {},\n            defaultConstraints: this.defaultConstraints,\n            lastN: this._lastN,\n            onStageEndpoints: [],\n            selectedEndpoints: this._selectedEndpoints\n        };\n    }\n\n    /**\n     * Returns the receiver video constraints that need to be sent on the bridge channel.\n     */\n    get constraints() {\n        this._receiverVideoConstraints.lastN = this._lastN;\n\n        if (!this._selectedEndpoints.length) {\n            return this._receiverVideoConstraints;\n        }\n\n        // The client is assumed to be in TileView if it has selected more than one endpoint, otherwise it is\n        // assumed to be in StageView.\n        this._receiverVideoConstraints.constraints = {};\n        if (this._selectedEndpoints.length > 1) {\n            /**\n             * Tile view.\n             * Only the default constraints are specified here along with lastN (if it is set).\n             * {\n             *  'colibriClass': 'ReceiverVideoConstraints',\n             *  'defaultConstraints': { 'maxHeight': 360 }\n             * }\n             */\n            this._receiverVideoConstraints.defaultConstraints = { 'maxHeight': this._maxFrameHeight };\n            this._receiverVideoConstraints.onStageEndpoints = [];\n            this._receiverVideoConstraints.selectedEndpoints = [];\n        } else {\n            /**\n             * Stage view.\n             * The participant on stage is specified in onStageEndpoints and a higher maxHeight is specified\n             * for that endpoint while a default maxHeight of 180 is applied to all the other endpoints.\n             * {\n             *  'colibriClass': 'ReceiverVideoConstraints',\n             *  'onStageEndpoints': ['A'],\n             *  'defaultConstraints': { 'maxHeight':  180 },\n             *  'constraints': {\n             *      'A': { 'maxHeight': 720 }\n             *   }\n             * }\n             */\n            this._receiverVideoConstraints.constraints[this._selectedEndpoints[0]] = {\n                'maxHeight': this._maxFrameHeight\n            };\n            this._receiverVideoConstraints.defaultConstraints = this._defaultConstraints;\n            this._receiverVideoConstraints.onStageEndpoints = this._selectedEndpoints;\n            this._receiverVideoConstraints.selectedEndpoints = [];\n        }\n\n        return this._receiverVideoConstraints;\n    }\n\n    /**\n     * Updates the lastN field of the ReceiverVideoConstraints sent to the bridge.\n     *\n     * @param {number} value\n     * @returns {boolean} Returns true if the the value has been updated, false otherwise.\n     */\n    updateLastN(value) {\n        const changed = this._lastN !== value;\n\n        if (changed) {\n            this._lastN = value;\n            logger.debug(`Updating ReceiverVideoConstraints lastN(${value})`);\n        }\n\n        return changed;\n    }\n\n    /**\n     * Updates the resolution (height requested) in the contraints field of the ReceiverVideoConstraints\n     * sent to the bridge.\n     *\n     * @param {number} maxFrameHeight\n     * @requires {boolean} Returns true if the the value has been updated, false otherwise.\n     */\n    updateReceiveResolution(maxFrameHeight) {\n        const changed = this._maxFrameHeight !== maxFrameHeight;\n\n        if (changed) {\n            this._maxFrameHeight = maxFrameHeight;\n            logger.debug(`Updating receive maxFrameHeight: ${maxFrameHeight}`);\n        }\n\n        return changed;\n    }\n\n    /**\n     * Updates the receiver constraints sent to the bridge.\n     *\n     * @param {Object} videoConstraints\n     * @returns {boolean} Returns true if the the value has been updated, false otherwise.\n     */\n    updateReceiverVideoConstraints(videoConstraints) {\n        const changed = !isEqual(this._receiverVideoConstraints, videoConstraints);\n\n        if (changed) {\n            this._receiverVideoConstraints = videoConstraints;\n            logger.debug(`Updating ReceiverVideoConstraints ${JSON.stringify(videoConstraints)}`);\n        }\n\n        return changed;\n    }\n\n    /**\n     * Updates the list of selected endpoints.\n     *\n     * @param {Array<string>} ids\n     * @returns {void}\n     */\n    updateSelectedEndpoints(ids) {\n        logger.debug(`Updating selected endpoints: ${JSON.stringify(ids)}`);\n        this._selectedEndpoints = ids;\n    }\n}\n\n/**\n * This class manages the receive video contraints for a given {@link JitsiConference}. These constraints are\n * determined by the application based on how the remote video streams need to be displayed. This class is responsible\n * for communicating these constraints to the bridge over the bridge channel.\n */\nexport class ReceiveVideoController {\n    /**\n     * Creates a new instance for a given conference.\n     *\n     * @param {JitsiConference} conference the conference instance for which the new instance will be managing\n     * the receive video quality constraints.\n     * @param {RTC} rtc the rtc instance which is responsible for initializing the bridge channel.\n     */\n    constructor(conference, rtc) {\n        this._conference = conference;\n        this._rtc = rtc;\n\n        const { config } = conference.options;\n\n        // The number of videos requested from the bridge, -1 represents unlimited or all available videos.\n        this._lastN = config?.startLastN ?? (config?.channelLastN || LASTN_UNLIMITED);\n\n        // The number representing the maximum video height the local client should receive from the bridge.\n        this._maxFrameHeight = MAX_HEIGHT_ONSTAGE;\n\n        // Enable new receiver constraints by default unless it is explicitly disabled through config.js.\n        const useNewReceiverConstraints = config?.useNewBandwidthAllocationStrategy ?? true;\n\n        if (useNewReceiverConstraints) {\n            this._receiverVideoConstraints = new ReceiverVideoConstraints();\n            const lastNUpdated = this._receiverVideoConstraints.updateLastN(this._lastN);\n\n            lastNUpdated && this._rtc.setNewReceiverVideoConstraints(this._receiverVideoConstraints.constraints);\n        } else {\n            this._rtc.setLastN(this._lastN);\n        }\n\n        // The endpoint IDs of the participants that are currently selected.\n        this._selectedEndpoints = [];\n\n        this._conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n            session => this._onMediaSessionStarted(session));\n    }\n\n    /**\n     * Handles the {@link JitsiConferenceEvents.MEDIA_SESSION_STARTED}, that is when the conference creates new media\n     * session. The preferred receive frameHeight is applied on the media session.\n     *\n     * @param {JingleSessionPC} mediaSession - the started media session.\n     * @returns {void}\n     * @private\n     */\n    _onMediaSessionStarted(mediaSession) {\n        if (mediaSession.isP2P || !this._receiverVideoConstraints) {\n            mediaSession.setReceiverVideoConstraint(this._maxFrameHeight);\n        } else {\n            this._receiverVideoConstraints.updateReceiveResolution(this._maxFrameHeight);\n            this._rtc.setNewReceiverVideoConstraints(this._receiverVideoConstraints.constraints);\n        }\n    }\n\n    /**\n     * Returns the lastN value for the conference.\n     *\n     * @returns {number}\n     */\n    getLastN() {\n        return this._lastN;\n    }\n\n    /**\n     * Elects the participants with the given ids to be the selected participants in order to always receive video\n     * for this participant (even when last n is enabled).\n     *\n     * @param {Array<string>} ids - The user ids.\n     * @returns {void}\n     */\n    selectEndpoints(ids) {\n        this._selectedEndpoints = ids;\n\n        if (this._receiverVideoConstraints) {\n            // Filter out the local endpointId from the list of selected endpoints.\n            const remoteEndpointIds = ids.filter(id => id !== this._conference.myUserId());\n            const oldConstraints = JSON.parse(JSON.stringify(this._receiverVideoConstraints.constraints));\n\n            remoteEndpointIds.length && this._receiverVideoConstraints.updateSelectedEndpoints(remoteEndpointIds);\n            const newConstraints = this._receiverVideoConstraints.constraints;\n\n            // Send bridge message only when the constraints change.\n            if (!isEqual(newConstraints, oldConstraints)) {\n                this._rtc.setNewReceiverVideoConstraints(newConstraints);\n            }\n\n            return;\n        }\n        this._rtc.selectEndpoints(ids);\n    }\n\n    /**\n     * Selects a new value for \"lastN\". The requested amount of videos are going to be delivered after the value is\n     * in effect. Set to -1 for unlimited or all available videos.\n     *\n     * @param {number} value the new value for lastN.\n     * @returns {void}\n     */\n    setLastN(value) {\n        if (this._lastN !== value) {\n            this._lastN = value;\n\n            if (this._receiverVideoConstraints) {\n                const lastNUpdated = this._receiverVideoConstraints.updateLastN(value);\n\n                // Send out the message on the bridge channel if lastN was updated.\n                lastNUpdated && this._rtc.setNewReceiverVideoConstraints(this._receiverVideoConstraints.constraints);\n\n                return;\n            }\n            this._rtc.setLastN(value);\n        }\n    }\n\n    /**\n     * Sets the maximum video resolution the local participant should receive from remote participants.\n     *\n     * @param {number|undefined} maxFrameHeight - the new value.\n     * @returns {void}\n     */\n    setPreferredReceiveMaxFrameHeight(maxFrameHeight) {\n        this._maxFrameHeight = maxFrameHeight;\n\n        for (const session of this._conference._getMediaSessions()) {\n            if (session.isP2P || !this._receiverVideoConstraints) {\n                maxFrameHeight && session.setReceiverVideoConstraint(maxFrameHeight);\n            } else {\n                const resolutionUpdated = this._receiverVideoConstraints.updateReceiveResolution(maxFrameHeight);\n\n                resolutionUpdated\n                    && this._rtc.setNewReceiverVideoConstraints(this._receiverVideoConstraints.constraints);\n            }\n        }\n    }\n\n    /**\n     * Sets the receiver constraints for the conference.\n     *\n     * @param {Object} constraints The video constraints.\n     */\n    setReceiverConstraints(constraints) {\n        if (!this._receiverVideoConstraints) {\n            this._receiverVideoConstraints = new ReceiverVideoConstraints();\n        }\n\n        const isEndpointsFormat = Object.keys(constraints).includes('onStageEndpoints', 'selectedEndpoints');\n        const isSourcesFormat = Object.keys(constraints).includes('onStageSources', 'selectedSources');\n\n        if (!FeatureFlags.isSourceNameSignalingEnabled() && isSourcesFormat) {\n            throw new Error(\n                '\"onStageSources\" and \"selectedSources\" are not supported when sourceNameSignaling is disabled.'\n            );\n        }\n\n        if (FeatureFlags.isSourceNameSignalingEnabled() && isEndpointsFormat) {\n            throw new Error(\n                '\"onStageEndpoints\" and \"selectedEndpoints\" are not supported when sourceNameSignaling is enabled.'\n            );\n        }\n        const constraintsChanged = this._receiverVideoConstraints.updateReceiverVideoConstraints(constraints);\n\n        if (constraintsChanged) {\n            this._lastN = constraints.lastN ?? this._lastN;\n            this._selectedEndpoints = constraints.selectedEndpoints ?? this._selectedEndpoints;\n            this._rtc.setNewReceiverVideoConstraints(constraints);\n\n            const p2pSession = this._conference._getMediaSessions().find(session => session.isP2P);\n\n            if (p2pSession) {\n                let maxFrameHeight = Object.values(constraints.constraints)[0]?.maxHeight;\n\n                if (!maxFrameHeight) {\n                    maxFrameHeight = constraints.defaultConstraints?.maxHeight;\n                }\n                maxFrameHeight && p2pSession.setReceiverVideoConstraint(maxFrameHeight);\n            }\n        }\n    }\n}\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport MediaSessionEvents from '../xmpp/MediaSessionEvents';\n\n/**\n * The class manages send video constraints across media sessions({@link JingleSessionPC}) which belong to\n * {@link JitsiConference}. It finds the lowest common value, between the local user's send preference and\n * the remote party's receive preference. Also this module will consider only the active session's receive value,\n * because local tracks are shared and while JVB may have no preference, the remote p2p may have and they may be totally\n * different.\n */\nexport class SendVideoController {\n    /**\n     * Creates new instance for a given conference.\n     *\n     * @param {JitsiConference} conference - the conference instance for which the new instance will be managing\n     * the send video quality constraints.\n     * @param {RTC} rtc - the rtc instance that is responsible for sending the messages on the bridge channel.\n     */\n    constructor(conference, rtc) {\n        this.conference = conference;\n        this.layerSuspensionEnabled = conference.options?.config?.enableLayerSuspension ?? true;\n        this.rtc = rtc;\n        this.conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n            session => this._onMediaSessionStarted(session));\n        this.conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED,\n            () => this._propagateSendMaxFrameHeight());\n        this.rtc.on(\n            RTCEvents.SENDER_VIDEO_CONSTRAINTS_CHANGED,\n            videoConstraints => {\n                // Propagate the sender constraint only if it has changed.\n                if (this._senderVideoConstraints?.idealHeight !== videoConstraints.idealHeight) {\n                    this._senderVideoConstraints = videoConstraints;\n                    this._propagateSendMaxFrameHeight();\n                }\n            });\n    }\n\n    /**\n     * Handles the {@link JitsiConferenceEvents.MEDIA_SESSION_STARTED}, that is when the conference creates new media\n     * session. It doesn't mean it's already active though. For example the JVB connection may be created after\n     * the conference has entered the p2p mode already.\n     *\n     * @param {JingleSessionPC} mediaSession - the started media session.\n     * @private\n     */\n    _onMediaSessionStarted(mediaSession) {\n        mediaSession.addListener(\n            MediaSessionEvents.REMOTE_VIDEO_CONSTRAINTS_CHANGED,\n            session => {\n                if (session === this.conference._getActiveMediaSession()) {\n                    this._propagateSendMaxFrameHeight();\n                }\n            });\n    }\n\n    /**\n     * Figures out the send video constraint as specified by {@link selectSendMaxFrameHeight} and sets it on all media\n     * sessions for the reasons mentioned in this class description.\n     *\n     * @returns {Promise<void[]>}\n     * @private\n     */\n    _propagateSendMaxFrameHeight() {\n        const sendMaxFrameHeight = this.selectSendMaxFrameHeight();\n        const promises = [];\n\n        if (sendMaxFrameHeight >= 0) {\n            for (const session of this.conference._getMediaSessions()) {\n                promises.push(session.setSenderVideoConstraint(sendMaxFrameHeight));\n            }\n        }\n\n        return Promise.all(promises);\n    }\n\n    /**\n     * Selects the lowest common value for the local video send constraint by looking at local user's preference and\n     * the active media session's receive preference set by the remote party.\n     *\n     * @returns {number|undefined}\n     */\n    selectSendMaxFrameHeight() {\n        const activeMediaSession = this.conference._getActiveMediaSession();\n        const remoteRecvMaxFrameHeight = activeMediaSession\n            ? activeMediaSession.isP2P\n                ? activeMediaSession.getRemoteRecvMaxFrameHeight()\n                : this.layerSuspensionEnabled ? this._senderVideoConstraints?.idealHeight : undefined\n            : undefined;\n\n        if (this.preferredSendMaxFrameHeight >= 0 && remoteRecvMaxFrameHeight >= 0) {\n            return Math.min(this.preferredSendMaxFrameHeight, remoteRecvMaxFrameHeight);\n        } else if (remoteRecvMaxFrameHeight >= 0) {\n            return remoteRecvMaxFrameHeight;\n        }\n\n        return this.preferredSendMaxFrameHeight;\n    }\n\n    /**\n     * Sets local preference for max send video frame height.\n     *\n     * @param {number} maxFrameHeight - the new value to set.\n     * @returns {Promise<void[]>} - resolved when the operation is complete.\n     */\n    setPreferredSendMaxFrameHeight(maxFrameHeight) {\n        this.preferredSendMaxFrameHeight = maxFrameHeight;\n\n        return this._propagateSendMaxFrameHeight();\n    }\n}\n","/**\n * A collection of utility functions for taking in XML and parsing it to return\n * certain values.\n */\nexport default {\n    /**\n     * Parses the presence update of the focus and returns an object with the\n     * statuses related to recording.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {Object} The current presence values related to recording.\n     */\n    getFocusRecordingUpdate(presence) {\n        const jibriStatus = presence\n            && presence.getElementsByTagName('jibri-recording-status')[0];\n\n        if (!jibriStatus) {\n            return;\n        }\n\n        return {\n            error: jibriStatus.getAttribute('failure_reason'),\n            initiator: jibriStatus.getAttribute('initiator'),\n            recordingMode: jibriStatus.getAttribute('recording_mode'),\n            sessionID: jibriStatus.getAttribute('session_id'),\n            status: jibriStatus.getAttribute('status')\n        };\n    },\n\n    /**\n     * Parses the presence update from a hidden domain participant and returns\n     * an object with the statuses related to recording.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {Object} The current presence values related to recording.\n     */\n    getHiddenDomainUpdate(presence) {\n        const liveStreamViewURLContainer\n            = presence.getElementsByTagName('live-stream-view-url')[0];\n        const liveStreamViewURL = liveStreamViewURLContainer\n            && liveStreamViewURLContainer.textContent;\n        const modeContainer\n            = presence.getElementsByTagName('mode')[0];\n        const mode = modeContainer\n            && modeContainer.textContent\n            && modeContainer.textContent.toLowerCase();\n        const sessionIDContainer\n            = presence.getElementsByTagName('session_id')[0];\n        const sessionID\n            = sessionIDContainer && sessionIDContainer.textContent;\n\n        return {\n            liveStreamViewURL,\n            mode,\n            sessionID\n        };\n    },\n\n    /**\n     * Returns the recording session ID from a successful IQ.\n     *\n     * @param {Node} response - The response from the IQ.\n     * @returns {string} The session ID of the recording session.\n     */\n    getSessionIdFromIq(response) {\n        const jibri = response && response.getElementsByTagName('jibri')[0];\n\n        return jibri && jibri.getAttribute('session_id');\n    },\n\n    /**\n     * Returns the recording session ID from a presence, if it exists.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {string|undefined} The session ID of the recording session.\n     */\n    getSessionId(presence) {\n        const sessionIdContainer\n            = presence.getElementsByTagName('session_id')[0];\n        const sessionId = sessionIdContainer && sessionIdContainer.textContent;\n\n        return sessionId;\n    },\n\n    /**\n     * Returns whether or not a presence is from the focus.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {boolean} True if the presence is from the focus.\n     */\n    isFromFocus(presence) {\n        return presence.getAttribute('from').includes('focus');\n    }\n};\n","import { $iq } from 'strophe.js';\n\nimport recordingXMLUtils from './recordingXMLUtils';\n\n/**\n * Represents a recording session.\n */\nexport default class JibriSession {\n    /**\n     * Initializes a new JibriSession instance.\n     *\n     * @constructor\n     */\n    constructor(options = {}) {\n        this._connection = options.connection;\n        this._mode = options.mode;\n\n        this._setSessionID(options.sessionID);\n        this.setStatus(options.status);\n    }\n\n    /**\n     * Returns the error related to the session instance, if any.\n     *\n     * @returns {string|undefined}\n     */\n    getError() {\n        return this._error;\n    }\n\n    /**\n     * Returns the session ID of the session instance.\n     *\n     * @returns {string|undefined}\n     */\n    getID() {\n        return this._sessionID;\n    }\n\n    /**\n     * Returns the initiator of the session instance.\n     *\n     * @returns {JitsiParticipant|string} The participant that started the session.\n     */\n    getInitiator() {\n        return this._initiator;\n    }\n\n    /**\n     * Returns the streaming URL of the session.\n     *\n     * @returns {string|undefined}\n     */\n    getLiveStreamViewURL() {\n        return this._liveStreamViewURL;\n    }\n\n    /**\n     * Returns the current status of the session.\n     *\n     * @returns {string|undefined}\n     */\n    getStatus() {\n        return this._status;\n    }\n\n    /**\n     * Returns the jid of the participant that stopped the session.\n     *\n     * @returns {JitsiParticipant|string} The participant that stopped the session.\n     */\n    getTerminator() {\n        return this._terminator;\n    }\n\n    /**\n     * Returns the current recording mode of the session, such as \"file\".\n     *\n     * @returns {string}\n     */\n    getMode() {\n        return this._mode;\n    }\n\n    /**\n     * Sets the last known error message related to the session.\n     *\n     * @param {string} error - The error string explaining why the session\n     * entered an error state.\n     * @returns {void}\n     */\n    setError(error) {\n        this._error = error;\n    }\n\n    /**\n     * Sets the last live stream URL for the session instance. Usually this is\n     * a YouTube URL and usually this is only set for \"stream\" sessions.\n     *\n     * @param {string} url - The live stream URL associated with the session.\n     * @returns {void}\n     */\n    setLiveStreamViewURL(url) {\n        this._liveStreamViewURL = url;\n    }\n\n    /**\n     * Sets the last known status for this recording session.\n     *\n     * @param {string} status - The new status to set.\n     * @returns {void}\n     */\n    setStatus(status) {\n        this._status = status;\n    }\n\n    /**\n     * Sets the participant that started the session.\n     * @param {JitsiParticipant | string} participant - The participant or resource id\n     * if local participant.\n     */\n    setInitiator(participant) {\n        this._initiator = participant;\n    }\n\n    /**\n     * Sets the participant that stopped the session.\n     * @param {JitsiParticipant | string} participant - The participant or the resource id\n     * if local participant.\n     */\n    setTerminator(participant) {\n        this._terminator = participant;\n    }\n\n    /**\n     * Sends a message to start the actual recording.\n     *\n     * @param {Object} options - Additional arguments for starting the\n     * recording.\n     * @param {string} [options.appData] - Data specific to the app/service that\n     * the result file will be uploaded.\n     * @param {string} [options.broadcastId] - The broadcast ID of an\n     * associated YouTube stream, used for knowing the URL from which the stream\n     * can be viewed.\n     * @param {string} options.focusMucJid - The JID of the focus participant\n     * that controls recording.\n     * @param {streamId} options.streamId - Necessary for live streaming, this\n     * is the stream key needed to start a live streaming session with the\n     * streaming service provider.\n     * @returns Promise\n     */\n    start({ appData, broadcastId, focusMucJid, streamId }) {\n        return new Promise((resolve, reject) => {\n            this._connection.sendIQ(\n                this._createIQ({\n                    action: 'start',\n                    appData,\n                    focusMucJid,\n                    broadcastId,\n                    streamId\n                }),\n                result => {\n                    // All users will eventually receive the 'pending' status\n                    // from the backend, but for the user initiating the session\n                    // it's better to give some instant feedback that recording\n                    // is starting so fire 'pending' here manually.\n                    this.setStatus('pending');\n                    this._setSessionID(\n                        recordingXMLUtils.getSessionIdFromIq(result));\n\n                    resolve();\n                },\n                error => {\n                    this._setErrorFromIq(error);\n\n                    reject(error);\n                });\n        });\n    }\n\n    /**\n     * Sends a message to actually stop the recording session.\n     *\n     * @param {Object} options - Additional arguments for stopping the\n     * recording.\n     * @param {Object} options.focusMucJid - The JID of the focus participant\n     * that controls recording.\n     * @returns Promise\n     */\n    stop({ focusMucJid }) {\n        return new Promise((resolve, reject) => {\n            this._connection.sendIQ(\n                this._createIQ({\n                    action: 'stop',\n                    focusMucJid\n                }),\n                resolve,\n                reject);\n        });\n    }\n\n    /**\n     * Generates the message to change the status of the recording session.\n     *\n     * @param {string} status - The new status to which the recording session\n     * should transition.\n     * @param {string} [options.appData] - Data specific to the app/service that\n     * the result file will be uploaded.\n     * @param {string} [options.broadcastId] - The broadcast ID of an\n     * associated YouTube stream, used for knowing the URL from which the stream\n     * can be viewed.\n     * @param {string} options.focusMucJid - The JID of the focus participant\n     * that controls recording.\n     * @param {streamId} options.streamId - Necessary for live streaming, this\n     * is the stream key needed to start a live streaming session with the\n     * streaming service provider.\n     * @returns Object - The XMPP IQ message.\n     */\n    _createIQ({ action, appData, broadcastId, focusMucJid, streamId }) {\n        try {\n            appData = JSON.parse(appData)|| {};\n        } catch(e) {\n            appData = {};\n        }\n        \n        appData[\"base_url\"] = appData[\"base_url\"] ? appData[\"base_url\"] : `${window.location.origin}${window.location.pathname}`;\n        appData[\"token\"] =  this._connection.emuc.xmpp.token;\n        \n        return $iq({\n            to: focusMucJid,\n            type: 'set'\n        })\n        .c('jibri', {\n            'xmlns': 'http://jitsi.org/protocol/jibri',\n            'action': action,\n            'app_data': JSON.stringify(appData),\n            'recording_mode': this._mode,\n            'streamid': streamId,\n            'you_tube_broadcast_id': broadcastId\n        })\n        .up();\n    }\n\n    /**\n     * Handles the error from an iq and stores the error.\n     *\n     * @param {Node} errorIq - The error response from an Iq.\n     * @private\n     * @returns {void}\n     */\n    _setErrorFromIq(errorIq) {\n        const error = errorIq.getElementsByTagName('error')[0];\n\n        this.setError(error.children[0].tagName);\n    }\n\n    /**\n     * Sets the known session ID for this recording session.\n     *\n     * @param {string} sessionID\n     * @private\n     * @returns {void}\n     */\n    _setSessionID(sessionID) {\n        this._sessionID = sessionID;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nimport JibriSession from './JibriSession';\nimport recordingXMLUtils from './recordingXMLUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * A class responsible for starting and stopping recording sessions and emitting\n * state updates for them.\n */\nclass RecordingManager {\n    /**\n     * Initialize {@code RecordingManager} with other objects that are necessary\n     * for starting a recording.\n     *\n     * @param {ChatRoom} chatRoom - The chat room to handle.\n     * @returns {void}\n     */\n    constructor(chatRoom) {\n        /**\n         * All known recording sessions from the current conference.\n         */\n        this._sessions = {};\n\n        this._chatRoom = chatRoom;\n\n        this.onPresence = this.onPresence.bind(this);\n\n        this._chatRoom.eventEmitter.addListener(\n            XMPPEvents.PRESENCE_RECEIVED, this.onPresence);\n    }\n\n    /**\n     * Finds an existing recording session by session ID.\n     *\n     * @param {string} sessionID - The session ID associated with the recording.\n     * @returns {JibriSession|undefined}\n     */\n    getSession(sessionID) {\n        return this._sessions[sessionID];\n    }\n\n    /**\n     * Callback to invoke to parse through a presence update to find recording\n     * related updates (from Jibri participant doing the recording and the\n     * focus which controls recording).\n     *\n     * @param {Object} event - The presence data from the pubsub event.\n     * @param {Node} event.presence - An XMPP presence update.\n     * @param {boolean} event.fromHiddenDomain - Whether or not the update comes\n     * from a participant that is trusted but not visible, as would be the case\n     * with the Jibri recorder participant.\n     * @returns {void}\n     */\n    onPresence({ fromHiddenDomain, presence }) {\n        if (recordingXMLUtils.isFromFocus(presence)) {\n            this._handleFocusPresence(presence);\n        } else if (fromHiddenDomain) {\n            this._handleJibriPresence(presence);\n        }\n    }\n\n    /**\n     * Start a recording session.\n     *\n     * @param {Object} options - Configuration for the recording.\n     * @param {string} [options.appData] - Data specific to the app/service that\n     * the result file will be uploaded.\n     * @param {string} [optional] options.broadcastId - The channel on which a\n     * live stream will occur.\n     * @param {string} options.mode - The mode in which recording should be\n     * started. Recognized values are \"file\" and \"stream\".\n     * @param {string} [optional] options.streamId - The stream key to be used\n     * for live stream broadcasting. Required for live streaming.\n     * @returns {Promise} A promise for starting a recording, which will pass\n     * back the session on success. The promise resolves after receiving an\n     * acknowledgment of the start request success or fail.\n     */\n    startRecording(options) {\n        const session = new JibriSession({\n            ...options,\n            connection: this._chatRoom.connection\n        });\n\n        return session.start({\n            appData: options.appData,\n            broadcastId: options.broadcastId,\n            focusMucJid: this._chatRoom.focusMucJid,\n            streamId: options.streamId\n        })\n            .then(() => {\n                // Only store the session and emit if the session has not been\n                // added already. This is a workaround for the session getting\n                // created due to a presence update to announce a \"pending\"\n                // recording being received before JibriSession#start finishes.\n                if (!this.getSession(session.getID())) {\n                    this._addSession(session);\n                    this._emitSessionUpdate(session);\n                }\n\n                return session;\n            })\n            .catch(error => {\n                this._emitSessionUpdate(session);\n\n                return Promise.reject(error);\n            });\n    }\n\n    /**\n     * Stop a recording session.\n     *\n     * @param {string} sessionID - The ID associated with the recording session\n     * to be stopped.\n     * @returns {Promise} The promise resolves after receiving an\n     * acknowledgment of the stop request success or fail.\n     */\n    stopRecording(sessionID) {\n        const session = this.getSession(sessionID);\n\n        if (session) {\n            return session.stop({ focusMucJid: this._chatRoom.focusMucJid });\n        }\n\n        return Promise.reject(new Error('Could not find session'));\n    }\n\n    /**\n     * Stores a reference to the passed in JibriSession.\n     *\n     * @param {string} session - The JibriSession instance to store.\n     * @returns {void}\n     */\n    _addSession(session) {\n        this._sessions[session.getID()] = session;\n    }\n\n    /**\n     * Create a new instance of a recording session and stores a reference to\n     * it.\n     *\n     * @param {string} sessionID - The session ID of the recording in progress.\n     * @param {string} status - The current status of the recording session.\n     * @param {string} mode - The recording mode of the session.\n     * @returns {JibriSession}\n     */\n    _createSession(sessionID, status, mode) {\n        const session = new JibriSession({\n            connection: this._chatRoom.connection,\n            focusMucJid: this._chatRoom.focusMucJid,\n            mode,\n            sessionID,\n            status\n        });\n\n        this._addSession(session);\n\n        return session;\n    }\n\n    /**\n     * Notifies listeners of an update to a recording session.\n     *\n     * @param {JibriSession} session - The session that has been updated.\n     * @param {string|undefined} initiator - The jid of the initiator of the update.\n     */\n    _emitSessionUpdate(session, initiator) {\n        this._chatRoom.eventEmitter.emit(\n            XMPPEvents.RECORDER_STATE_CHANGED, session, initiator);\n    }\n\n    /**\n     * Parses presence to update an existing JibriSession or to create a new\n     * JibriSession.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {void}\n     */\n    _handleFocusPresence(presence) {\n        const jibriStatus = recordingXMLUtils.getFocusRecordingUpdate(presence);\n\n        if (!jibriStatus) {\n            return;\n        }\n\n        const { error, initiator, recordingMode, sessionID, status } = jibriStatus;\n\n        // We'll look for an existing session or create one (in case we're a\n        // participant joining a call with an existing recording going on).\n        let session = this.getSession(sessionID);\n\n        // Handle the case where a status update is received in presence but\n        // the local participant has joined while the JibriSession has already\n        // ended.\n        if (!session && status === 'off') {\n            logger.warn(\n                'Ignoring recording presence update',\n                'Received a new session with status off.');\n\n            return;\n        }\n\n        // Jicofo sends updates via presence, and any extension in presence\n        // is sent until it is explicitly removed.  It's difficult for\n        // Jicofo to know when a presence has been sent once, so it won't\n        // remove jibri status extension.  This means we may receive the same\n        // status update more than once, so check for that here\n        if (session\n            && session.getStatus() === status\n            && session.getError() === error) {\n            logger.warn('Ignoring duplicate presence update: ',\n                JSON.stringify(jibriStatus));\n\n            return;\n        }\n\n        if (!session) {\n            session = this._createSession(sessionID, status, recordingMode);\n        }\n\n        session.setStatus(status);\n\n        if (error) {\n            session.setError(error);\n        }\n\n        this._emitSessionUpdate(session, initiator);\n    }\n\n    /**\n     * Handles updates from the Jibri which can broadcast a YouTube URL that\n     * needs to be updated in a JibriSession.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {void}\n     */\n    _handleJibriPresence(presence) {\n        const { liveStreamViewURL, mode, sessionID }\n            = recordingXMLUtils.getHiddenDomainUpdate(presence);\n\n        if (!sessionID) {\n            logger.warn(\n                'Ignoring potential jibri presence due to no session id.');\n\n            return;\n        }\n\n        let session = this.getSession(sessionID);\n\n        if (!session) {\n            session = this._createSession(sessionID, '', mode);\n        }\n\n        session.setLiveStreamViewURL(liveStreamViewURL);\n\n        this._emitSessionUpdate(session);\n    }\n}\n\nexport default RecordingManager;\n","import { getLogger } from '@jitsi/logger';\n\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport * as ConnectionQualityEvents from '../../service/connectivity/ConnectionQualityEvents';\nimport { createAudioOutputProblemEvent } from '../../service/statistics/AnalyticsEvents';\n\nimport Statistics from './statistics';\n\nconst logger = getLogger(__filename);\n\n/**\n * Number of local samples that will be used for comparison before and after the remote sample is received.\n */\nconst NUMBER_OF_LOCAL_SAMPLES = 2;\n\n/**\n * Collects the average audio levels per participant from the local stats and the stats received by every remote\n * participant and compares them to detect potential audio problem for a participant.\n */\nexport default class AudioOutputProblemDetector {\n\n    /**\n     * Creates new <tt>AudioOutputProblemDetector</tt> instance.\n     *\n     * @param {JitsiCofnerence} conference - The conference instance to be monitored.\n     */\n    constructor(conference) {\n        this._conference = conference;\n        this._localAudioLevelCache = {};\n        this._reportedParticipants = [];\n        this._audioProblemCandidates = {};\n        this._numberOfRemoteAudioLevelsReceived = {};\n        this._onLocalAudioLevelsReport = this._onLocalAudioLevelsReport.bind(this);\n        this._onRemoteAudioLevelReceived = this._onRemoteAudioLevelReceived.bind(this);\n        this._clearUserData = this._clearUserData.bind(this);\n        this._conference.on(ConnectionQualityEvents.REMOTE_STATS_UPDATED, this._onRemoteAudioLevelReceived);\n        this._conference.statistics.addConnectionStatsListener(this._onLocalAudioLevelsReport);\n        this._conference.on(ConferenceEvents.USER_LEFT, this._clearUserData);\n    }\n\n    /**\n     * A listener for audio level data received by a remote participant.\n     *\n     * @param {string} userID - The user id of the participant that sent the data.\n     * @param {number} audioLevel - The average audio level value.\n     * @returns {void}\n     */\n    _onRemoteAudioLevelReceived(userID, { avgAudioLevels }) {\n        const numberOfReports = (this._numberOfRemoteAudioLevelsReceived[userID] + 1) || 0;\n\n        this._numberOfRemoteAudioLevelsReceived[userID] = numberOfReports;\n\n        if (this._reportedParticipants.indexOf(userID) !== -1 || (userID in this._audioProblemCandidates)\n                || avgAudioLevels <= 0 || numberOfReports < 3) {\n            return;\n        }\n\n        const participant = this._conference.getParticipantById(userID);\n\n        if (participant) {\n            const tracks = participant.getTracksByMediaType(MediaType.AUDIO);\n\n            if (tracks.length > 0 && participant.isAudioMuted()) {\n                // We don't need to report an error if everything seems fine with the participant and its tracks but\n                // the participant is audio muted. Since those are average audio levels we potentially can receive non\n                // zero values for muted track.\n                return;\n            }\n        }\n\n        const localAudioLevels = this._localAudioLevelCache[userID];\n\n        if (!Array.isArray(localAudioLevels) || localAudioLevels.every(audioLevel => audioLevel === 0)) {\n            this._audioProblemCandidates[userID] = {\n                remoteAudioLevels: avgAudioLevels,\n                localAudioLevels: []\n            };\n        }\n    }\n\n    /**\n     * A listener for audio level data retrieved by the local stats.\n     *\n     * @param {TraceablePeerConnection} tpc - The <tt>TraceablePeerConnection</tt> instance used to gather the data.\n     * @param {Object} avgAudioLevels - The average audio levels per participant.\n     * @returns {void}\n     */\n    _onLocalAudioLevelsReport(tpc, { avgAudioLevels }) {\n        if (tpc !== this._conference.getActivePeerConnection()) {\n            return;\n        }\n\n        Object.keys(avgAudioLevels).forEach(userID => {\n            if (this._reportedParticipants.indexOf(userID) !== -1) {\n                return;\n            }\n\n            const localAudioLevels = this._localAudioLevelCache[userID];\n\n            if (!Array.isArray(localAudioLevels)) {\n                this._localAudioLevelCache[userID] = [ ];\n            } else if (localAudioLevels.length >= NUMBER_OF_LOCAL_SAMPLES) {\n                localAudioLevels.shift();\n            }\n\n            this._localAudioLevelCache[userID].push(avgAudioLevels[userID]);\n        });\n\n\n        Object.keys(this._audioProblemCandidates).forEach(userID => {\n            const { localAudioLevels, remoteAudioLevels } = this._audioProblemCandidates[userID];\n\n            localAudioLevels.push(avgAudioLevels[userID]);\n\n            if (localAudioLevels.length === NUMBER_OF_LOCAL_SAMPLES) {\n                if (localAudioLevels.every(audioLevel => typeof audioLevel === 'undefined' || audioLevel === 0)) {\n                    const localAudioLevelsString = JSON.stringify(localAudioLevels);\n\n                    Statistics.sendAnalytics(\n                        createAudioOutputProblemEvent(userID, localAudioLevelsString, remoteAudioLevels));\n                    logger.warn(`A potential problem is detected with the audio output for participant ${\n                        userID}, local audio levels: ${localAudioLevelsString}, remote audio levels: ${\n                        remoteAudioLevels}`);\n                    this._reportedParticipants.push(userID);\n                    this._clearUserData(userID);\n                }\n\n                delete this._audioProblemCandidates[userID];\n            }\n        });\n    }\n\n    /**\n     * Clears the data stored for a participant.\n     *\n     * @param {string} userID - The id of the participant.\n     * @returns {void}\n     */\n    _clearUserData(userID) {\n        delete this._localAudioLevelCache[userID];\n    }\n\n    /**\n     * Disposes the allocated resources.\n     *\n     * @returns {void}\n     */\n    dispose() {\n        this._conference.off(ConnectionQualityEvents.REMOTE_STATS_UPDATED, this._onRemoteAudioLevelReceived);\n        this._conference.off(ConferenceEvents.USER_LEFT, this._clearUserData);\n        this._conference.statistics.removeConnectionStatsListener(this._onLocalAudioLevelsReport);\n        this._localAudioLevelCache = undefined;\n        this._audioProblemCandidates = undefined;\n        this._reportedParticipants = undefined;\n        this._numberOfRemoteAudioLevelsReceived = undefined;\n        this._conference = undefined;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport isEqual from 'lodash.isequal';\n\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport * as VideoType from '../../service/RTC/VideoType';\nimport * as ConnectionQualityEvents\n    from '../../service/connectivity/ConnectionQualityEvents';\nimport {\n    createRtpStatsEvent,\n    createTransportStatsEvent\n} from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\n\nimport Statistics from './statistics';\n\n\nconst logger = getLogger(__filename);\n\n/**\n * This will calculate an average for one, named stat and submit it to\n * the analytics module when requested. It automatically counts the samples.\n */\nclass AverageStatReport {\n    /**\n     * Creates new <tt>AverageStatReport</tt> for given name.\n     * @param {string} name that's the name of the event that will be reported\n     * to the analytics module.\n     */\n    constructor(name) {\n        this.name = name;\n        this.count = 0;\n        this.sum = 0;\n        this.samples = [];\n    }\n\n    /**\n     * Adds the next value that will be included in the average when\n     * {@link calculate} is called.\n     * @param {number} nextValue\n     */\n    addNext(nextValue) {\n        if (typeof nextValue !== 'number') {\n            logger.error(\n                `${this.name} - invalid value for idx: ${this.count}`,\n                nextValue);\n        } else if (!isNaN(nextValue)) {\n            this.sum += nextValue;\n            this.samples.push(nextValue);\n            this.count += 1;\n        }\n    }\n\n    /**\n     * Calculates an average for the samples collected using {@link addNext}.\n     * @return {number|NaN} an average of all collected samples or <tt>NaN</tt>\n     * if no samples were collected.\n     */\n    calculate() {\n        return this.sum / this.count;\n    }\n\n    /**\n     * Appends the report to the analytics \"data\" object. The object will be\n     * set under <tt>prefix</tt> + {@link this.name} key.\n     * @param {Object} report the analytics \"data\" object\n     */\n    appendReport(report) {\n        report[`${this.name}_avg`] = this.calculate();\n        report[`${this.name}_samples`] = JSON.stringify(this.samples);\n    }\n\n    /**\n     * Clears all memory of any samples collected, so that new average can be\n     * calculated using this instance.\n     */\n    reset() {\n        this.samples = [];\n        this.sum = 0;\n        this.count = 0;\n    }\n}\n\n/**\n * Class gathers the stats that are calculated and reported for a\n * {@link TraceablePeerConnection} even if it's not currently active. For\n * example we want to monitor RTT for the JVB connection while in P2P mode.\n */\nclass ConnectionAvgStats {\n    /**\n     * Creates new <tt>ConnectionAvgStats</tt>\n     * @param {AvgRTPStatsReporter} avgRtpStatsReporter\n     * @param {boolean} isP2P\n     * @param {number} n the number of samples, before arithmetic mean is to be\n     * calculated and values submitted to the analytics module.\n     */\n    constructor(avgRtpStatsReporter, isP2P, n) {\n        /**\n         * Is this instance for JVB or P2P connection ?\n         * @type {boolean}\n         */\n        this.isP2P = isP2P;\n\n        /**\n         * How many samples are to be included in arithmetic mean calculation.\n         * @type {number}\n         * @private\n         */\n        this._n = n;\n\n        /**\n         * The current sample index. Starts from 0 and goes up to {@link _n})\n         * when analytics report will be submitted.\n         * @type {number}\n         * @private\n         */\n        this._sampleIdx = 0;\n\n        /**\n         * Average round trip time reported by the ICE candidate pair.\n         * @type {AverageStatReport}\n         */\n        this._avgRTT = new AverageStatReport('rtt');\n\n        /**\n         * Map stores average RTT to the JVB reported by remote participants.\n         * Mapped per participant id {@link JitsiParticipant.getId}.\n         *\n         * This is used only when {@link ConnectionAvgStats.isP2P} equals to\n         * <tt>false</tt>.\n         *\n         * @type {Map<string,AverageStatReport>}\n         * @private\n         */\n        this._avgRemoteRTTMap = new Map();\n\n        /**\n         * The conference for which stats will be collected and reported.\n         * @type {JitsiConference}\n         * @private\n         */\n        this._avgRtpStatsReporter = avgRtpStatsReporter;\n\n        /**\n         * The latest average E2E RTT for the JVB connection only.\n         *\n         * This is used only when {@link ConnectionAvgStats.isP2P} equals to\n         * <tt>false</tt>.\n         *\n         * @type {number}\n         */\n        this._avgEnd2EndRTT = undefined;\n\n        this._onConnectionStats = (tpc, stats) => {\n            if (this.isP2P === tpc.isP2P) {\n                this._calculateAvgStats(stats);\n            }\n        };\n\n        const conference = avgRtpStatsReporter._conference;\n\n        conference.statistics.addConnectionStatsListener(\n            this._onConnectionStats);\n\n        if (!this.isP2P) {\n            this._onUserLeft = id => this._avgRemoteRTTMap.delete(id);\n            conference.on(ConferenceEvents.USER_LEFT, this._onUserLeft);\n\n            this._onRemoteStatsUpdated\n                = (id, data) => this._processRemoteStats(id, data);\n            conference.on(\n                ConnectionQualityEvents.REMOTE_STATS_UPDATED,\n                this._onRemoteStatsUpdated);\n        }\n    }\n\n    /**\n     * Processes next batch of stats.\n     * @param {go figure} data\n     * @private\n     */\n    _calculateAvgStats(data) {\n        if (!data) {\n            logger.error('No stats');\n\n            return;\n        }\n\n        if (browser.supportsRTTStatistics()) {\n            if (data.transport && data.transport.length) {\n                this._avgRTT.addNext(data.transport[0].rtt);\n            }\n        }\n\n        this._sampleIdx += 1;\n\n        if (this._sampleIdx >= this._n) {\n            if (browser.supportsRTTStatistics()) {\n                const conference = this._avgRtpStatsReporter._conference;\n\n                const batchReport = {\n                    p2p: this.isP2P,\n                    'conference_size': conference.getParticipantCount()\n                };\n\n                if (data.transport && data.transport.length) {\n                    Object.assign(batchReport, {\n                        'local_candidate_type':\n                            data.transport[0].localCandidateType,\n                        'remote_candidate_type':\n                            data.transport[0].remoteCandidateType,\n                        'transport_type': data.transport[0].type\n                    });\n                }\n\n                this._avgRTT.appendReport(batchReport);\n\n                if (this.isP2P) {\n                    // Report RTT diff only for P2P.\n                    const jvbEnd2EndRTT = this\n                        ._avgRtpStatsReporter.jvbStatsMonitor._avgEnd2EndRTT;\n\n                    if (!isNaN(jvbEnd2EndRTT)) {\n                        // eslint-disable-next-line dot-notation\n                        batchReport['rtt_diff']\n                            = this._avgRTT.calculate() - jvbEnd2EndRTT;\n                    }\n                } else {\n                    // Report end to end RTT only for JVB.\n                    const avgRemoteRTT = this._calculateAvgRemoteRTT();\n                    const avgLocalRTT = this._avgRTT.calculate();\n\n                    this._avgEnd2EndRTT = avgLocalRTT + avgRemoteRTT;\n\n                    if (!isNaN(avgLocalRTT) && !isNaN(avgRemoteRTT)) {\n                        // eslint-disable-next-line dot-notation\n                        batchReport['end2end_rtt_avg'] = this._avgEnd2EndRTT;\n                    }\n                }\n\n                Statistics.sendAnalytics(createRtpStatsEvent(batchReport));\n            }\n\n            this._resetAvgStats();\n        }\n    }\n\n    /**\n     * Calculates arithmetic mean of all RTTs towards the JVB reported by\n     * participants.\n     * @return {number|NaN} NaN if not available (not enough data)\n     * @private\n     */\n    _calculateAvgRemoteRTT() {\n        let count = 0, sum = 0;\n\n        // FIXME should we ignore RTT for participant\n        // who \"is having connectivity issues\" ?\n        for (const remoteAvg of this._avgRemoteRTTMap.values()) {\n            const avg = remoteAvg.calculate();\n\n            if (!isNaN(avg)) {\n                sum += avg;\n                count += 1;\n                remoteAvg.reset();\n            }\n        }\n\n        return sum / count;\n    }\n\n    /**\n     * Processes {@link ConnectionQualityEvents.REMOTE_STATS_UPDATED} to analyse\n     * RTT towards the JVB reported by each participant.\n     * @param {string} id {@link JitsiParticipant.getId}\n     * @param {go figure in ConnectionQuality.js} data\n     * @private\n     */\n    _processRemoteStats(id, data) {\n        const validData = typeof data.jvbRTT === 'number';\n        let rttAvg = this._avgRemoteRTTMap.get(id);\n\n        if (!rttAvg && validData) {\n            rttAvg = new AverageStatReport(`${id}_stat_rtt`);\n            this._avgRemoteRTTMap.set(id, rttAvg);\n        }\n\n        if (validData) {\n            rttAvg.addNext(data.jvbRTT);\n        } else if (rttAvg) {\n            this._avgRemoteRTTMap.delete(id);\n        }\n    }\n\n    /**\n     * Reset cache of all averages and {@link _sampleIdx}.\n     * @private\n     */\n    _resetAvgStats() {\n        this._avgRTT.reset();\n        if (this._avgRemoteRTTMap) {\n            this._avgRemoteRTTMap.clear();\n        }\n        this._sampleIdx = 0;\n    }\n\n    /**\n     *\n     */\n    dispose() {\n\n        const conference = this._avgRtpStatsReporter._conference;\n\n        conference.statistics.removeConnectionStatsListener(\n            this._onConnectionStats);\n        if (!this.isP2P) {\n            conference.off(\n                ConnectionQualityEvents.REMOTE_STATS_UPDATED,\n                this._onRemoteStatsUpdated);\n            conference.off(\n                ConferenceEvents.USER_LEFT,\n                this._onUserLeft);\n        }\n    }\n}\n\n/**\n * Reports average RTP statistics values (arithmetic mean) to the analytics\n * module for things like bit rate, bandwidth, packet loss etc. It keeps track\n * of the P2P vs JVB conference modes and submits the values under different\n * namespaces (the events for P2P mode have 'p2p.' prefix). Every switch between\n * P2P mode resets the data collected so far and averages are calculated from\n * scratch.\n */\nexport default class AvgRTPStatsReporter {\n    /**\n     * Creates new instance of <tt>AvgRTPStatsReporter</tt>\n     * @param {JitsiConference} conference\n     * @param {number} n the number of samples, before arithmetic mean is to be\n     * calculated and values submitted to the analytics module.\n     */\n    constructor(conference, n) {\n        /**\n         * How many {@link ConnectionQualityEvents.LOCAL_STATS_UPDATED} samples\n         * are to be included in arithmetic mean calculation.\n         * @type {number}\n         * @private\n         */\n        this._n = n;\n\n        if (n > 0) {\n            logger.info(`Avg RTP stats will be calculated every ${n} samples`);\n        } else {\n            logger.info('Avg RTP stats reports are disabled.');\n\n            // Do not initialize\n            return;\n        }\n\n        /**\n         * The current sample index. Starts from 0 and goes up to {@link _n})\n         * when analytics report will be submitted.\n         * @type {number}\n         * @private\n         */\n        this._sampleIdx = 0;\n\n        /**\n         * The conference for which stats will be collected and reported.\n         * @type {JitsiConference}\n         * @private\n         */\n        this._conference = conference;\n\n        /**\n         * Average audio upload bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgAudioBitrateUp\n            = new AverageStatReport('bitrate_audio_upload');\n\n        /**\n         * Average audio download bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgAudioBitrateDown\n            = new AverageStatReport('bitrate_audio_download');\n\n        /**\n         * Average video upload bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgVideoBitrateUp\n            = new AverageStatReport('bitrate_video_upload');\n\n        /**\n         * Average video download bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgVideoBitrateDown\n            = new AverageStatReport('bitrate_video_download');\n\n        /**\n         * Average upload bandwidth\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgBandwidthUp\n            = new AverageStatReport('bandwidth_upload');\n\n        /**\n         * Average download bandwidth\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgBandwidthDown\n            = new AverageStatReport('bandwidth_download');\n\n        /**\n         * Average total packet loss\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgPacketLossTotal\n            = new AverageStatReport('packet_loss_total');\n\n        /**\n         * Average upload packet loss\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgPacketLossUp\n            = new AverageStatReport('packet_loss_upload');\n\n        /**\n         * Average download packet loss\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgPacketLossDown\n            = new AverageStatReport('packet_loss_download');\n\n        /**\n         * Average FPS for remote videos\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteFPS = new AverageStatReport('framerate_remote');\n\n        /**\n         * Average FPS for remote screen streaming videos (reported only if not\n         * a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteScreenFPS\n            = new AverageStatReport('framerate_screen_remote');\n\n        /**\n         * Average FPS for local video (camera)\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalFPS = new AverageStatReport('framerate_local');\n\n        /**\n         * Average FPS for local screen streaming video (reported only if not\n         * a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalScreenFPS\n            = new AverageStatReport('framerate_screen_local');\n\n        /**\n         * Average pixels for remote screen streaming videos (reported only if\n         * not a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteCameraPixels\n            = new AverageStatReport('pixels_remote');\n\n        /**\n         * Average pixels for remote screen streaming videos (reported only if\n         * not a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteScreenPixels\n            = new AverageStatReport('pixels_screen_remote');\n\n        /**\n         * Average pixels for local video (camera)\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalCameraPixels\n            = new AverageStatReport('pixels_local');\n\n        /**\n         * Average pixels for local screen streaming video (reported only if not\n         * a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalScreenPixels\n            = new AverageStatReport('pixels_screen_local');\n\n        /**\n         * Average connection quality as defined by\n         * the {@link ConnectionQuality} module.\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgCQ = new AverageStatReport('connection_quality');\n\n        this._cachedTransportStats = undefined;\n\n        this._onLocalStatsUpdated = data => {\n            this._calculateAvgStats(data);\n            this._maybeSendTransportAnalyticsEvent(data);\n        };\n        conference.on(\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n            this._onLocalStatsUpdated);\n\n        this._onP2PStatusChanged = () => {\n            logger.debug('Resetting average stats calculation');\n            this._resetAvgStats();\n            this.jvbStatsMonitor._resetAvgStats();\n            this.p2pStatsMonitor._resetAvgStats();\n        };\n        conference.on(\n            ConferenceEvents.P2P_STATUS,\n            this._onP2PStatusChanged);\n\n        this._onJvb121StatusChanged = (oldStatus, newStatus) => {\n            // We want to reset only on the transition from false => true,\n            // because otherwise those stats are resetted on JVB <=> P2P\n            // transition.\n            if (newStatus === true) {\n                logger.info('Resetting JVB avg RTP stats');\n                this._resetAvgJvbStats();\n            }\n        };\n        conference.on(\n            ConferenceEvents.JVB121_STATUS,\n            this._onJvb121StatusChanged);\n\n        this.jvbStatsMonitor\n            = new ConnectionAvgStats(this, false /* JVB */, n);\n\n        this.p2pStatsMonitor\n            = new ConnectionAvgStats(this, true /* P2P */, n);\n    }\n\n    /**\n     * Processes next batch of stats reported on\n     * {@link ConnectionQualityEvents.LOCAL_STATS_UPDATED}.\n     * @param {go figure} data\n     * @private\n     */\n    _calculateAvgStats(data) {\n\n        if (!data) {\n            logger.error('No stats');\n\n            return;\n        }\n\n        const isP2P = this._conference.isP2PActive();\n        const confSize = this._conference.getParticipantCount();\n\n        if (!isP2P && confSize < 2) {\n\n            // There's no point in collecting stats for a JVB conference of 1.\n            // That happens for short period of time after everyone leaves\n            // the room, until Jicofo terminates the session.\n            return;\n        }\n\n        /* Uncomment to figure out stats structure\n        for (const key in data) {\n            if (data.hasOwnProperty(key)) {\n                logger.info(`local stat ${key}: `, data[key]);\n            }\n        } */\n\n        const bitrate = data.bitrate;\n        const bandwidth = data.bandwidth;\n        const packetLoss = data.packetLoss;\n        const frameRate = data.framerate;\n        const resolution = data.resolution;\n\n        if (!bitrate) {\n            logger.error('No \"bitrate\"');\n\n            return;\n        } else if (!bandwidth) {\n            logger.error('No \"bandwidth\"');\n\n            return;\n        } else if (!packetLoss) {\n            logger.error('No \"packetloss\"');\n\n            return;\n        } else if (!frameRate) {\n            logger.error('No \"framerate\"');\n\n            return;\n        } else if (!resolution) {\n            logger.error('No resolution');\n\n            return;\n        }\n\n        this._avgAudioBitrateUp.addNext(bitrate.audio.upload);\n        this._avgAudioBitrateDown.addNext(bitrate.audio.download);\n\n        this._avgVideoBitrateUp.addNext(bitrate.video.upload);\n        this._avgVideoBitrateDown.addNext(bitrate.video.download);\n\n        if (browser.supportsBandwidthStatistics()) {\n            this._avgBandwidthUp.addNext(bandwidth.upload);\n            this._avgBandwidthDown.addNext(bandwidth.download);\n        }\n\n        this._avgPacketLossUp.addNext(packetLoss.upload);\n        this._avgPacketLossDown.addNext(packetLoss.download);\n        this._avgPacketLossTotal.addNext(packetLoss.total);\n\n        this._avgCQ.addNext(data.connectionQuality);\n\n        if (frameRate) {\n            this._avgRemoteFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, false /* remote */, VideoType.CAMERA));\n            this._avgRemoteScreenFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, false /* remote */, VideoType.DESKTOP));\n\n            this._avgLocalFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, true /* local */, VideoType.CAMERA));\n            this._avgLocalScreenFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, true /* local */, VideoType.DESKTOP));\n        }\n\n        if (resolution) {\n            this._avgRemoteCameraPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, false /* remote */, VideoType.CAMERA));\n\n            this._avgRemoteScreenPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, false /* remote */, VideoType.DESKTOP));\n\n            this._avgLocalCameraPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, true /* local */, VideoType.CAMERA));\n\n            this._avgLocalScreenPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, true /* local */, VideoType.DESKTOP));\n        }\n\n        this._sampleIdx += 1;\n\n        if (this._sampleIdx >= this._n) {\n\n            const batchReport = {\n                p2p: isP2P,\n                'conference_size': confSize\n            };\n\n            if (data.transport && data.transport.length) {\n                Object.assign(batchReport, {\n                    'local_candidate_type':\n                        data.transport[0].localCandidateType,\n                    'remote_candidate_type':\n                        data.transport[0].remoteCandidateType,\n                    'transport_type': data.transport[0].type\n                });\n            }\n\n            this._avgAudioBitrateUp.appendReport(batchReport);\n            this._avgAudioBitrateDown.appendReport(batchReport);\n\n            this._avgVideoBitrateUp.appendReport(batchReport);\n            this._avgVideoBitrateDown.appendReport(batchReport);\n\n            if (browser.supportsBandwidthStatistics()) {\n                this._avgBandwidthUp.appendReport(batchReport);\n                this._avgBandwidthDown.appendReport(batchReport);\n            }\n            this._avgPacketLossUp.appendReport(batchReport);\n            this._avgPacketLossDown.appendReport(batchReport);\n            this._avgPacketLossTotal.appendReport(batchReport);\n\n            this._avgRemoteFPS.appendReport(batchReport);\n            if (!isNaN(this._avgRemoteScreenFPS.calculate())) {\n                this._avgRemoteScreenFPS.appendReport(batchReport);\n            }\n            this._avgLocalFPS.appendReport(batchReport);\n            if (!isNaN(this._avgLocalScreenFPS.calculate())) {\n                this._avgLocalScreenFPS.appendReport(batchReport);\n            }\n\n            this._avgRemoteCameraPixels.appendReport(batchReport);\n            if (!isNaN(this._avgRemoteScreenPixels.calculate())) {\n                this._avgRemoteScreenPixels.appendReport(batchReport);\n            }\n            this._avgLocalCameraPixels.appendReport(batchReport);\n            if (!isNaN(this._avgLocalScreenPixels.calculate())) {\n                this._avgLocalScreenPixels.appendReport(batchReport);\n            }\n\n            this._avgCQ.appendReport(batchReport);\n\n            Statistics.sendAnalytics(createRtpStatsEvent(batchReport));\n\n            this._resetAvgStats();\n        }\n    }\n\n    /**\n     * Calculates average number of pixels for the report\n     *\n     * @param {map} peerResolutions a map of peer resolutions\n     * @param {boolean} isLocal if the average is to be calculated for the local\n     * video or <tt>false</tt> if for remote videos.\n     * @param {VideoType} videoType\n     * @return {number|NaN} average number of pixels or <tt>NaN</tt> if there\n     * are no samples.\n     * @private\n     */\n    _calculateAvgVideoPixels(peerResolutions, isLocal, videoType) {\n        let peerPixelsSum = 0;\n        let peerCount = 0;\n        const myID = this._conference.myUserId();\n\n        for (const peerID of Object.keys(peerResolutions)) {\n            if (isLocal ? peerID === myID : peerID !== myID) {\n                const participant\n                    = isLocal\n                        ? null\n                        : this._conference.getParticipantById(peerID);\n                const videosResolution = peerResolutions[peerID];\n\n                // Do not continue without participant for non local peerID\n                if ((isLocal || participant) && videosResolution) {\n                    const peerAvgPixels = this._calculatePeerAvgVideoPixels(\n                        videosResolution, participant, videoType);\n\n                    if (!isNaN(peerAvgPixels)) {\n                        peerPixelsSum += peerAvgPixels;\n                        peerCount += 1;\n                    }\n                }\n            }\n        }\n\n        return peerPixelsSum / peerCount;\n    }\n\n    /**\n     * Calculate average pixels for either remote or local participant\n     * @param {object} videos maps resolution per video SSRC\n     * @param {JitsiParticipant|null} participant remote participant or\n     * <tt>null</tt> for local video pixels calculation.\n     * @param {VideoType} videoType the type of the video for which an average\n     * will be calculated.\n     * @return {number|NaN} average video pixels of all participant's videos or\n     * <tt>NaN</tt> if currently not available\n     * @private\n     */\n    _calculatePeerAvgVideoPixels(videos, participant, videoType) {\n        let ssrcs = Object.keys(videos).map(ssrc => Number(ssrc));\n        let videoTracks = null;\n\n        // NOTE that this method is supposed to be called for the stats\n        // received from the current peerconnection.\n        const tpc = this._conference.getActivePeerConnection();\n\n        if (participant) {\n            videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\n            if (videoTracks) {\n                ssrcs\n                    = ssrcs.filter(\n                        ssrc => videoTracks.find(\n                            track =>\n                                !track.isMuted()\n                                    && track.getSSRC() === ssrc\n                                    && track.videoType === videoType));\n            }\n        } else {\n            videoTracks = this._conference.getLocalTracks(MediaType.VIDEO);\n            ssrcs\n                = ssrcs.filter(\n                    ssrc => videoTracks.find(\n                        track =>\n                            !track.isMuted()\n                                && tpc.getLocalSSRC(track) === ssrc\n                                && track.videoType === videoType));\n        }\n\n        let peerPixelsSum = 0;\n        let peerSsrcCount = 0;\n\n        for (const ssrc of ssrcs) {\n            const peerSsrcPixels\n                = Number(videos[ssrc].height) * Number(videos[ssrc].width);\n\n            // FPS is reported as 0 for users with no video\n            if (!isNaN(peerSsrcPixels) && peerSsrcPixels > 0) {\n                peerPixelsSum += peerSsrcPixels;\n                peerSsrcCount += 1;\n            }\n        }\n\n        return peerPixelsSum / peerSsrcCount;\n    }\n\n\n    /**\n     * Calculates average FPS for the report\n     * @param {go figure} frameRate\n     * @param {boolean} isLocal if the average is to be calculated for the local\n     * video or <tt>false</tt> if for remote videos.\n     * @param {VideoType} videoType\n     * @return {number|NaN} average FPS or <tt>NaN</tt> if there are no samples.\n     * @private\n     */\n    _calculateAvgVideoFps(frameRate, isLocal, videoType) {\n        let peerFpsSum = 0;\n        let peerCount = 0;\n        const myID = this._conference.myUserId();\n\n        for (const peerID of Object.keys(frameRate)) {\n            if (isLocal ? peerID === myID : peerID !== myID) {\n                const participant\n                    = isLocal\n                        ? null : this._conference.getParticipantById(peerID);\n                const videosFps = frameRate[peerID];\n\n                // Do not continue without participant for non local peerID\n                if ((isLocal || participant) && videosFps) {\n                    const peerAvgFPS\n                        = this._calculatePeerAvgVideoFps(\n                            videosFps, participant, videoType);\n\n                    if (!isNaN(peerAvgFPS)) {\n                        peerFpsSum += peerAvgFPS;\n                        peerCount += 1;\n                    }\n                }\n            }\n        }\n\n        return peerFpsSum / peerCount;\n    }\n\n    /**\n     * Calculate average FPS for either remote or local participant\n     * @param {object} videos maps FPS per video SSRC\n     * @param {JitsiParticipant|null} participant remote participant or\n     * <tt>null</tt> for local FPS calculation.\n     * @param {VideoType} videoType the type of the video for which an average\n     * will be calculated.\n     * @return {number|NaN} average FPS of all participant's videos or\n     * <tt>NaN</tt> if currently not available\n     * @private\n     */\n    _calculatePeerAvgVideoFps(videos, participant, videoType) {\n        let ssrcs = Object.keys(videos).map(ssrc => Number(ssrc));\n        let videoTracks = null;\n\n        // NOTE that this method is supposed to be called for the stats\n        // received from the current peerconnection.\n        const tpc = this._conference.getActivePeerConnection();\n\n        if (participant) {\n            videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\n            if (videoTracks) {\n                ssrcs\n                    = ssrcs.filter(\n                        ssrc => videoTracks.find(\n                            track => !track.isMuted()\n                                && track.getSSRC() === ssrc\n                                && track.videoType === videoType));\n            }\n        } else {\n            videoTracks = this._conference.getLocalTracks(MediaType.VIDEO);\n            ssrcs\n                = ssrcs.filter(\n                    ssrc => videoTracks.find(\n                        track => !track.isMuted()\n                            && tpc.getLocalSSRC(track) === ssrc\n                            && track.videoType === videoType));\n        }\n\n        let peerFpsSum = 0;\n        let peerSsrcCount = 0;\n\n        for (const ssrc of ssrcs) {\n            const peerSsrcFps = Number(videos[ssrc]);\n\n            // FPS is reported as 0 for users with no video\n            if (!isNaN(peerSsrcFps) && peerSsrcFps > 0) {\n                peerFpsSum += peerSsrcFps;\n                peerSsrcCount += 1;\n            }\n        }\n\n        return peerFpsSum / peerSsrcCount;\n    }\n\n    /**\n     * Sends the 'transport.stats' analytics event whenever we detect that\n     * there is a change in the local or remote candidate type on the transport\n     * that is currently selected.\n     * @param {*} data\n     * @private\n     */\n    _maybeSendTransportAnalyticsEvent(data) {\n        if (!data || !data.transport || !data.transport.length) {\n            return;\n        }\n        const transportStats = {\n            p2p: data.transport[0].p2p,\n            'local_candidate_type': data.transport[0].localCandidateType,\n            'remote_candidate_type': data.transport[0].remoteCandidateType,\n            'transport_type': data.transport[0].type\n        };\n\n        if (!this._cachedTransportStats || !isEqual(transportStats, this._cachedTransportStats)) {\n            this._cachedTransportStats = transportStats;\n            Statistics.sendAnalytics(createTransportStatsEvent(transportStats));\n        }\n    }\n\n    /**\n     * Resets the stats related to JVB connection. Must not be called when in\n     * P2P mode, because then the {@link AverageStatReport} instances are\n     * tracking P2P stats. Note that this should never happen unless something\n     * is wrong with the P2P and JVB121 events.\n     * @private\n     */\n    _resetAvgJvbStats() {\n        this._resetAvgStats();\n        this.jvbStatsMonitor._resetAvgStats();\n    }\n\n    /**\n     * Reset cache of all averages and {@link _sampleIdx}.\n     * @private\n     */\n    _resetAvgStats() {\n        this._avgAudioBitrateUp.reset();\n        this._avgAudioBitrateDown.reset();\n\n        this._avgVideoBitrateUp.reset();\n        this._avgVideoBitrateDown.reset();\n\n        this._avgBandwidthUp.reset();\n        this._avgBandwidthDown.reset();\n\n        this._avgPacketLossUp.reset();\n        this._avgPacketLossDown.reset();\n        this._avgPacketLossTotal.reset();\n\n        this._avgRemoteFPS.reset();\n        this._avgRemoteScreenFPS.reset();\n        this._avgLocalFPS.reset();\n        this._avgLocalScreenFPS.reset();\n\n        this._avgRemoteCameraPixels.reset();\n        this._avgRemoteScreenPixels.reset();\n        this._avgLocalCameraPixels.reset();\n        this._avgLocalScreenPixels.reset();\n\n        this._avgCQ.reset();\n\n        this._sampleIdx = 0;\n    }\n\n    /**\n     * Unregisters all event listeners and stops working.\n     */\n    dispose() {\n        this._conference.off(\n            ConferenceEvents.P2P_STATUS,\n            this._onP2PStatusChanged);\n        this._conference.off(\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n            this._onLocalStatsUpdated);\n        this._conference.off(\n            ConferenceEvents.JVB121_STATUS,\n            this._onJvb121StatusChanged);\n        this.jvbStatsMonitor.dispose();\n        this.p2pStatsMonitor.dispose();\n    }\n}\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nimport SpeakerStats from './SpeakerStats';\n\n/**\n * A collection for tracking speaker stats. Attaches listeners\n * to the conference to automatically update on tracked events.\n */\nexport default class SpeakerStatsCollector {\n    /**\n     * Initializes a new SpeakerStatsCollector instance.\n     *\n     * @constructor\n     * @param {JitsiConference} conference - The conference to track.\n     * @returns {void}\n     */\n    constructor(conference) {\n        this.stats = {\n            users: {\n\n                // userId: SpeakerStats\n            },\n            dominantSpeakerId: null\n        };\n\n        const userId = conference.myUserId();\n\n        this.stats.users[userId] = new SpeakerStats(userId, null, true);\n        this.conference = conference;\n\n        conference.addEventListener(\n            JitsiConferenceEvents.DOMINANT_SPEAKER_CHANGED,\n            this._onDominantSpeaker.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.USER_JOINED,\n            this._onUserJoin.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.USER_LEFT,\n            this._onUserLeave.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.DISPLAY_NAME_CHANGED,\n            this._onDisplayNameChange.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.FACIAL_EXPRESSION_ADDED,\n            this._onFacialExpressionAdd.bind(this));\n        if (conference.xmpp) {\n            conference.xmpp.addListener(\n                XMPPEvents.SPEAKER_STATS_RECEIVED,\n                this._updateStats.bind(this));\n        }\n    }\n\n    /**\n     * Reacts to dominant speaker change events by changing its speaker stats\n     * models to reflect the current dominant speaker.\n     *\n     * @param {string} dominantSpeakerId - The user id of the new\n     * dominant speaker.\n     * @returns {void}\n     * @private\n     */\n    _onDominantSpeaker(dominantSpeakerId) {\n        const oldDominantSpeaker\n            = this.stats.users[this.stats.dominantSpeakerId];\n        const newDominantSpeaker = this.stats.users[dominantSpeakerId];\n\n        oldDominantSpeaker && oldDominantSpeaker.setDominantSpeaker(false);\n        newDominantSpeaker && newDominantSpeaker.setDominantSpeaker(true);\n        this.stats.dominantSpeakerId = dominantSpeakerId;\n    }\n\n    /**\n     * Reacts to user join events by creating a new SpeakerStats model.\n     *\n     * @param {string} userId - The user id of the new user.\n     * @param {JitsiParticipant} - The JitsiParticipant model for the new user.\n     * @returns {void}\n     * @private\n     */\n    _onUserJoin(userId, participant) {\n        if (participant.isHidden()) {\n            return;\n        }\n\n        if (!this.stats.users[userId]) {\n            this.stats.users[userId] = new SpeakerStats(userId, participant.getDisplayName());\n        }\n    }\n\n    /**\n     * Reacts to user leave events by updating the associated user's\n     * SpeakerStats model.\n     *\n     * @param {string} userId - The user id of the user that left.\n     * @returns {void}\n     * @private\n     */\n    _onUserLeave(userId) {\n        const savedUser = this.stats.users[userId];\n\n        if (savedUser) {\n            savedUser.markAsHasLeft();\n        }\n    }\n\n    /**\n     * Reacts to user name change events by updating the last known name\n     * tracked in the associated SpeakerStats model.\n     *\n     * @param {string} userId - The user id of the user that left.\n     * @returns {void}\n     * @private\n     */\n    _onDisplayNameChange(userId, newName) {\n        const savedUser = this.stats.users[userId];\n\n        if (savedUser) {\n            savedUser.setDisplayName(newName);\n        }\n    }\n\n    /**\n     * Adds a new facial expression with its duration of a remote user.\n     *\n     * @param {string} userId - The user id of the user that left.\n     * @param {Object} data - The facial expression with its duration.\n     * @returns {void}\n     * @private\n     */\n    _onFacialExpressionAdd(userId, data) {\n        const savedUser = this.stats.users[userId];\n\n        if (savedUser) {\n            savedUser.addFacialExpression(data.facialExpression, data.duration);\n        }\n    }\n\n    /**\n     * Return a copy of the tracked SpeakerStats models.\n     *\n     * @returns {Object} The keys are the user ids and the values are the\n     * associated user's SpeakerStats model.\n     */\n    getStats() {\n        return this.stats.users;\n    }\n\n    /**\n     * Updates of the current stats is requested, passing the new values.\n     *\n     * @param {Object} newStats - The new values used to update current one.\n     * @private\n     */\n    _updateStats(newStats) {\n        for (const userId in newStats) { // eslint-disable-line guard-for-in\n            let speakerStatsToUpdate;\n            const newParticipant = this.conference.getParticipantById(userId);\n\n            // we want to ignore hidden participants\n            if (!newParticipant || !newParticipant.isHidden()) {\n                if (this.stats.users[userId]) {\n                    speakerStatsToUpdate = this.stats.users[userId];\n\n                    if (!speakerStatsToUpdate.getDisplayName()) {\n                        speakerStatsToUpdate\n                            .setDisplayName(newStats[userId].displayName);\n                    }\n                } else {\n                    speakerStatsToUpdate = new SpeakerStats(\n                        userId, newStats[userId].displayName);\n                    this.stats.users[userId] = speakerStatsToUpdate;\n                    speakerStatsToUpdate.markAsHasLeft();\n                }\n            }\n\n            speakerStatsToUpdate.totalDominantSpeakerTime\n                = newStats[userId].totalDominantSpeakerTime;\n\n            speakerStatsToUpdate.setFacialExpressions(newStats[userId].facialExpressions);\n        }\n    }\n}\n","/* eslint-disable max-params */\n\n/**\n * This object stores variables needed around the recording of an audio stream\n * and passing this recording along with additional information along to\n * different processes\n */\nexport default class RecordingResult {\n    /**\n     * @param blob the recording audio stream as a single blob\n     * @param name the name of the person of the audio stream\n     * @param startTime the time in UTC when recording of the audiostream started\n     * @param wordArray the recorder audio stream transcribed as an array of Word objects\n     */\n    constructor(blob, name, startTime, wordArray) {\n        this.blob = blob;\n        this.name = name;\n        this.startTime = startTime;\n        this.wordArray = wordArray;\n    }\n}\n","/**\n * A TrackRecorder object holds all the information needed for recording a\n * single JitsiTrack (either remote or local)\n * @param track The JitsiTrack the object is going to hold\n */\nexport default class TrackRecorder {\n    /**\n     * @param track The JitsiTrack the object is going to hold\n     */\n    constructor(track) {\n        // The JitsiTrack holding the stream\n        this.track = track;\n\n        // The MediaRecorder recording the stream\n        this.recorder = null;\n\n        // The array of data chunks recorded from the stream\n        // acts as a buffer until the data is stored on disk\n        this.data = null;\n\n        // the name of the person of the JitsiTrack. This can be undefined and/or\n        // not unique\n        this.name = null;\n\n        // the time of the start of the recording\n        this.startTime = null;\n    }\n}\n","import RecordingResult from './recordingResult';\nimport TrackRecorder from './trackRecorder';\n\n/**\n * Possible audio formats MIME types\n */\nconst AUDIO_WEBM = 'audio/webm'; // Supported in chrome\nconst AUDIO_OGG = 'audio/ogg'; // Supported in firefox\n\n/**\n * Starts the recording of a JitsiTrack in a TrackRecorder object.\n * This will also define the timestamp and try to update the name\n * @param trackRecorder the TrackRecorder to start\n */\nfunction startRecorder(trackRecorder) {\n    if (trackRecorder.recorder === undefined) {\n        throw new Error('Passed an object to startRecorder which is not a '\n            + 'TrackRecorder object');\n    }\n    trackRecorder.recorder.start();\n    trackRecorder.startTime = new Date();\n}\n\n/**\n * Stops the recording of a JitsiTrack in a TrackRecorder object.\n * This will also try to update the name\n * @param trackRecorder the TrackRecorder to stop\n */\nfunction stopRecorder(trackRecorder) {\n    if (trackRecorder.recorder === undefined) {\n        throw new Error('Passed an object to stopRecorder which is not a '\n            + 'TrackRecorder object');\n    }\n    trackRecorder.recorder.stop();\n}\n\n/**\n * Determines which kind of audio recording the browser supports\n * chrome supports \"audio/webm\" and firefox supports \"audio/ogg\"\n */\nfunction determineCorrectFileType() {\n    if (MediaRecorder.isTypeSupported(AUDIO_WEBM)) {\n        return AUDIO_WEBM;\n    } else if (MediaRecorder.isTypeSupported(AUDIO_OGG)) {\n        return AUDIO_OGG;\n    }\n    throw new Error(\n        'unable to create a MediaRecorder with the right mimetype!');\n}\n\n/**\n * main exported object of the file, holding all\n * relevant functions and variables for the outside world\n * @param jitsiConference the jitsiConference which this object\n * is going to record\n */\nfunction AudioRecorder(jitsiConference) {\n    // array of TrackRecorders, where each trackRecorder\n    // holds the JitsiTrack, MediaRecorder and recorder data\n    this.recorders = [];\n\n    // get which file type is supported by the current browser\n    this.fileType = determineCorrectFileType();\n\n    // boolean flag for active recording\n    this.isRecording = false;\n\n    // the jitsiconference the object is recording\n    this.jitsiConference = jitsiConference;\n}\n\n/**\n * Add the exported module so that it can be accessed by other files\n */\nAudioRecorder.determineCorrectFileType = determineCorrectFileType;\n\n/**\n * Adds a new TrackRecorder object to the array.\n *\n * @param track the track potentially holding an audio stream\n */\nAudioRecorder.prototype.addTrack = function(track) {\n    if (track.isAudioTrack()) {\n        // create the track recorder\n        const trackRecorder = this.instantiateTrackRecorder(track);\n\n        // push it to the local array of all recorders\n\n        this.recorders.push(trackRecorder);\n\n        // update the name of the trackRecorders\n        this.updateNames();\n\n        // If we're already recording, immediately start recording this new\n        // track.\n        if (this.isRecording) {\n            startRecorder(trackRecorder);\n        }\n    }\n};\n\n/**\n * Creates a TrackRecorder object. Also creates the MediaRecorder and\n * data array for the trackRecorder.\n * @param track the JitsiTrack holding the audio MediaStream(s)\n */\nAudioRecorder.prototype.instantiateTrackRecorder = function(track) {\n    const trackRecorder = new TrackRecorder(track);\n\n    // Create a new stream which only holds the audio track\n    const originalStream = trackRecorder.track.getOriginalStream();\n    const stream = new MediaStream();\n\n    originalStream.getAudioTracks().forEach(t => stream.addTrack(t));\n\n    // Create the MediaRecorder\n    trackRecorder.recorder = new MediaRecorder(stream,\n        { mimeType: this.fileType });\n\n    // array for holding the recorder data. Resets it when\n    // audio already has been recorder once\n    trackRecorder.data = [];\n\n    // function handling a dataEvent, e.g the stream gets new data\n    trackRecorder.recorder.ondataavailable = function(dataEvent) {\n        if (dataEvent.data.size > 0) {\n            trackRecorder.data.push(dataEvent.data);\n        }\n    };\n\n    return trackRecorder;\n};\n\n/**\n * Notifies the module that a specific track has stopped, e.g participant left\n * the conference.\n * if the recording has not started yet, the TrackRecorder will be removed from\n * the array. If the recording has started, the recorder will stop recording\n * but not removed from the array so that the recorded stream can still be\n * accessed\n *\n * @param {JitsiTrack} track the JitsiTrack to remove from the recording session\n */\nAudioRecorder.prototype.removeTrack = function(track) {\n    if (track.isVideoTrack()) {\n        return;\n    }\n\n    const array = this.recorders;\n    let i;\n\n    for (i = 0; i < array.length; i++) {\n        if (array[i].track.getParticipantId() === track.getParticipantId()) {\n            const recorderToRemove = array[i];\n\n            if (this.isRecording) {\n                stopRecorder(recorderToRemove);\n            } else {\n                // remove the TrackRecorder from the array\n                array.splice(i, 1);\n            }\n        }\n    }\n\n    // make sure the names are up to date\n    this.updateNames();\n};\n\n/**\n * Tries to update the name value of all TrackRecorder in the array.\n * If it hasn't changed,it will keep the exiting name. If it changes to a\n * undefined value, the old value will also be kept.\n */\nAudioRecorder.prototype.updateNames = function() {\n    const conference = this.jitsiConference;\n\n    this.recorders.forEach(trackRecorder => {\n        if (trackRecorder.track.isLocal()) {\n            trackRecorder.name = 'the transcriber';\n        } else {\n            const id = trackRecorder.track.getParticipantId();\n            const participant = conference.getParticipantById(id);\n            const newName = participant.getDisplayName();\n\n            if (newName !== 'undefined') {\n                trackRecorder.name = newName;\n            }\n        }\n    });\n};\n\n/**\n * Starts the audio recording of every local and remote track\n */\nAudioRecorder.prototype.start = function() {\n    if (this.isRecording) {\n        throw new Error('audiorecorder is already recording');\n    }\n\n    // set boolean isRecording flag to true so if new participants join the\n    // conference, that track can instantly start recording as well\n    this.isRecording = true;\n\n    // start all the mediaRecorders\n    this.recorders.forEach(trackRecorder => startRecorder(trackRecorder));\n\n    // log that recording has started\n    console.log(\n        `Started the recording of the audio. There are currently ${\n            this.recorders.length} recorders active.`);\n};\n\n/**\n * Stops the audio recording of every local and remote track\n */\nAudioRecorder.prototype.stop = function() {\n    // set the boolean flag to false\n    this.isRecording = false;\n\n    // stop all recorders\n    this.recorders.forEach(trackRecorder => stopRecorder(trackRecorder));\n    console.log('stopped recording');\n};\n\n/**\n * link hacking to download all recorded audio streams\n */\nAudioRecorder.prototype.download = function() {\n    this.recorders.forEach(trackRecorder => {\n        const blob = new Blob(trackRecorder.data, { type: this.fileType });\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement('a');\n\n        document.body.appendChild(a);\n        a.style = 'display: none';\n        a.href = url;\n        a.download = `test.${this.fileType.split('/')[1]}`;\n        a.click();\n        window.URL.revokeObjectURL(url);\n    });\n};\n\n/**\n * returns the audio files of all recorders as an array of objects,\n * which include the name of the owner of the track and the starting time stamp\n * @returns {Array} an array of RecordingResult objects\n */\nAudioRecorder.prototype.getRecordingResults = function() {\n    if (this.isRecording) {\n        throw new Error(\n            'cannot get blobs because the AudioRecorder is still recording!');\n    }\n\n    // make sure the names are up to date before sending them off\n    this.updateNames();\n\n    const array = [];\n\n    this.recorders.forEach(\n        recorder =>\n            array.push(\n                new RecordingResult(\n                    new Blob(recorder.data, { type: this.fileType }),\n                    recorder.name,\n                    recorder.startTime)));\n\n    return array;\n};\n\n/**\n * Gets the mime type of the recorder audio\n * @returns {String} the mime type of the recorder audio\n */\nAudioRecorder.prototype.getFileType = function() {\n    return this.fileType;\n};\n\n/**\n * export the main object AudioRecorder\n */\nexport default AudioRecorder;\n","/**\n * An object representing a transcribed word, with some additional information\n * @param word the word\n * @param begin the time the word was started being uttered\n * @param end the time the word stopped being uttered\n */\nexport default class Word {\n    /**\n     * @param word the word\n     * @param begin the time the word was started being uttered\n     * @param end the time the word stopped being uttered\n     */\n    constructor(word, begin, end) {\n        this.word = word;\n        this.begin = begin;\n        this.end = end;\n    }\n\n    /**\n     * Get the string representation of the word\n     * @returns {*} the word as a string\n     */\n    getWord() {\n        return this.word;\n    }\n\n    /**\n     * Get the time the word started being uttered\n     * @returns {*} the start time as an integer\n     */\n    getBeginTime() {\n        return this.begin;\n    }\n\n    /**\n     * Get the time the word stopped being uttered\n     * @returns {*} the end time as an integer\n     */\n    getEndTime() {\n        return this.end;\n    }\n}\n","/* global config */\n\nimport Word from '../word';\n\nimport audioRecorder from './../audioRecorder';\nimport AbstractTranscriptionService from './AbstractTranscriptionService';\n\n/**\n * Implements a TranscriptionService for a Sphinx4 http server\n */\nexport default class SphinxService extends AbstractTranscriptionService {\n    /**\n     * Implements a TranscriptionService for a Sphinx4 http server\n     */\n    constructor() {\n        super();\n\n        // set the correct url\n        this.url = getURL();\n    }\n\n    /**\n     * Overrides the sendRequest method from AbstractTranscriptionService\n     * it will send the audio stream the a Sphinx4 server to get the transcription\n     *\n     * @param audioFileBlob the recorder audio stream an a single Blob\n     * @param callback the callback function retrieving the server response\n     */\n    sendRequest(audioFileBlob, callback) {\n        console.log(`sending an audio file  to ${this.url}`);\n        console.log(`the audio file being sent: ${audioFileBlob}`);\n        const request = new XMLHttpRequest();\n\n        request.onreadystatechange = function() {\n            if (request.readyState === XMLHttpRequest.DONE\n                && request.status === 200) {\n                callback(request.responseText);\n            } else if (request.readyState === XMLHttpRequest.DONE) {\n                throw new Error(\n                    `unable to accept response from sphinx server. status: ${request.status}`);\n            }\n\n            // if not ready no point to throw an error\n        };\n        request.open('POST', this.url);\n        request.setRequestHeader('Content-Type',\n            audioRecorder.determineCorrectFileType());\n        request.send(audioFileBlob);\n        console.log(`send ${audioFileBlob}`);\n    }\n\n    /**\n     * Overrides the formatResponse method from AbstractTranscriptionService\n     * It will parse the answer from the server in the expected format\n     *\n     * @param response the JSON body retrieved from the Sphinx4 server\n     */\n    formatResponse(response) {\n        const result = JSON.parse(response).objects;\n\n        // make sure to delete the session id object, which is always\n        // the first value in the JSON array\n        result.shift();\n        const array = [];\n\n        result.forEach(\n            word => word.filler\n                || array.push(new Word(word.word, word.start, word.end)));\n\n        return array;\n    }\n\n    /**\n     * checks wether the reply is empty, or doesn't contain a correct JSON object\n     * @param response the server response\n     * @return {boolean} whether the response is valid\n     */\n    verify(response) {\n        console.log(`response from server:${response.toString()}`);\n\n        // test if server responded with a string object\n        if (typeof response !== 'string') {\n            return false;\n        }\n\n        // test if the string can be parsed into valid JSON\n        let json;\n\n        try {\n            json = JSON.parse(response);\n        } catch (error) {\n            console.log(error);\n\n            return false;\n        }\n\n        // check if the JSON has a \"objects\" value\n        if (json.objects === undefined) {\n            return false;\n        }\n\n        // get the \"objects\" value and check for a session ID\n        const array = json.objects;\n\n        if (!(array[0] && array[0]['session-id'])) {\n            return false;\n        }\n\n        // everything seems to be in order\n        return true;\n    }\n}\n\n/**\n * Gets the URL to the Sphinx4 server from the config file. If it's not there,\n * it will throw an error\n *\n * @returns {string} the URL to the sphinx4 server\n */\nfunction getURL() {\n    const message = 'config does not contain an url to a Sphinx4 https server';\n\n    if (config.sphinxURL === undefined) {\n        console.log(message);\n    } else {\n        const toReturn = config.sphinxURL;\n\n        if (toReturn.includes !== undefined && toReturn.includes('https://')) {\n            return toReturn;\n        }\n        console.log(message);\n\n    }\n}\n","/**\n * Abstract class representing an interface to implement a speech-to-text\n * service on.\n */\nexport default class TranscriptionService {\n    /**\n     * Abstract class representing an interface to implement a speech-to-text\n     * service on.\n     */\n    constructor() {\n        throw new Error('TranscriptionService is abstract and cannot be created');\n    }\n\n    /**\n     * This method can be used to send the recorder audio stream and\n     * retrieve the answer from the transcription service from the callback\n     *\n     * @param {RecordingResult} recordingResult a recordingResult object which\n     * includes the recorded audio stream as a blob\n     * @param {Function} callback  which will retrieve the a RecordingResult with\n     *        the answer as a WordArray\n     */\n    send(recordingResult, callback) {\n        this.sendRequest(recordingResult.blob, response => {\n            if (this.verify(response)) {\n                recordingResult.wordArray = this.formatResponse(response);\n            } else {\n                console.log('the retrieved response from the server is not valid!');\n                recordingResult.wordArray = [];\n            }\n            callback(recordingResult);\n        });\n    }\n\n    /**\n     * Abstract method which will rend the recorder audio stream to the implemented\n     * transcription service and will retrieve an answer, which will be\n     * called on the given callback method\n     *\n     * @param {Blob} audioBlob the recorded audio stream as a single Blob\n     * @param {function} callback function which will retrieve the answer\n     *                            from the service\n     */\n    sendRequest(audioBlob, callback) { // eslint-disable-line no-unused-vars\n        throw new Error('TranscriptionService.sendRequest is abstract');\n    }\n\n    /**\n     * Abstract method which will parse the output from the implemented\n     * transcription service to the expected format\n     *\n     * The transcriber class expect an array of word objects, where each word\n     * object is one transcribed word by the service.\n     *\n     * The expected output of this method is an array of word objects, in\n     * the correct order. That is, the first object in the array is the first word\n     * being said, and the last word in the array is the last word being said\n     *\n     * @param response the answer from the speech-to-text server which needs to be\n     *                 formatted\n     * @return {Array<Word>} an array of Word objects\n     */\n    formatResponse(response) { // eslint-disable-line no-unused-vars\n        throw new Error('TranscriptionService.format is abstract');\n    }\n\n    /**\n     * Abstract method which will verify that the response from the server is valid\n     *\n     * @param response the response from the server\n     * @return {boolean} true if response is valid, false otherwise\n     */\n    verify(response) { // eslint-disable-line no-unused-vars\n        throw new Error('TranscriptionService.verify is abstract');\n    }\n}\n","import AudioRecorder from './audioRecorder';\nimport SphinxService from './transcriptionServices/SphinxTranscriptionService';\n\nconst BEFORE_STATE = 'before';\nconst RECORDING_STATE = 'recording';\nconst TRANSCRIBING_STATE = 'transcribing';\nconst FINISHED_STATE = 'finished';\n\n// the amount of characters each line in the transcription will have\nconst MAXIMUM_SENTENCE_LENGTH = 80;\n\n/**\n * This is the main object for handing the Transcription. It interacts with\n * the audioRecorder to record every person in a conference and sends the\n * recorder audio to a transcriptionService. The returned speech-to-text result\n * will be merged to create a transcript\n * @param {AudioRecorder} audioRecorder An audioRecorder recording a conference\n */\nfunction Transcriber() {\n    // the object which can record all audio in the conference\n    this.audioRecorder = new AudioRecorder();\n\n    // this object can send the recorder audio to a speech-to-text service\n    this.transcriptionService = new SphinxService();\n\n    // holds a counter to keep track if merging can start\n    this.counter = null;\n\n    // holds the date when transcription started which makes it possible\n    // to calculate the offset between recordings\n    this.startTime = null;\n\n    // will hold the transcription once it is completed\n    this.transcription = null;\n\n    // this will be a method which will be called once the transcription is done\n    // with the transcription as parameter\n    this.callback = null;\n\n    // stores all the retrieved speech-to-text results to merge together\n    // this value will store an Array<Word> object\n    this.results = [];\n\n    // Stores the current state of the transcription process\n    this.state = BEFORE_STATE;\n\n    // Used in the updateTranscription method to add a new line when the\n    // sentence becomes to long\n    this.lineLength = 0;\n}\n\n/**\n * Method to start the transcription process. It will tell the audioRecorder\n * to start storing all audio streams and record the start time for merging\n * purposes\n */\nTranscriber.prototype.start = function start() {\n    if (this.state !== BEFORE_STATE) {\n        throw new Error(\n            `The transcription can only start when it's in the \"${\n                BEFORE_STATE}\" state. It's currently in the \"${\n                this.state}\" state`);\n    }\n    this.state = RECORDING_STATE;\n    this.audioRecorder.start();\n    this.startTime = new Date();\n};\n\n/**\n * Method to stop the transcription process. It will tell the audioRecorder to\n * stop, and get all the recorded audio to send it to the transcription service\n\n * @param callback a callback which will receive the transcription\n */\nTranscriber.prototype.stop = function stop(callback) {\n    if (this.state !== RECORDING_STATE) {\n        throw new Error(\n            `The transcription can only stop when it's in the \"${\n                RECORDING_STATE}\" state. It's currently in the \"${\n                this.state}\" state`);\n    }\n\n    // stop the recording\n    console.log('stopping recording and sending audio files');\n    this.audioRecorder.stop();\n\n    // and send all recorded audio to the transcription service\n    const callBack = blobCallBack.bind(null, this);\n\n    this.audioRecorder.getRecordingResults().forEach(recordingResult => {\n        this.transcriptionService.send(recordingResult, callBack);\n        this.counter++;\n    });\n\n    // set the state to \"transcribing\" so that maybeMerge() functions correctly\n    this.state = TRANSCRIBING_STATE;\n\n    // and store the callback for later\n    this.callback = callback;\n};\n\n/**\n * This method gets the answer from the transcription service, calculates the\n * offset and adds is to every Word object. It will also start the merging\n * when every send request has been received\n *\n * note: Make sure to bind this as a Transcription object\n * @param {Transcriber} transcriber the transcriber instance\n * @param {RecordingResult} answer a RecordingResult object with a defined\n * WordArray\n */\nfunction blobCallBack(transcriber, answer) {\n    console.log(\n        'retrieved an answer from the transcription service. The answer has an'\n            + ` array of length: ${answer.wordArray.length}`);\n\n    // first add the offset between the start of the transcription and\n    // the start of the recording to all start and end times\n    if (answer.wordArray.length > 0) {\n        let offset = answer.startTime.getUTCMilliseconds()\n            - transcriber.startTime.getUTCMilliseconds();\n\n        // transcriber time will always be earlier\n\n        if (offset < 0) {\n            offset = 0; // presume 0 if it somehow not earlier\n        }\n\n        let array = '[';\n\n        answer.wordArray.forEach(wordObject => {\n            wordObject.begin += offset;\n            wordObject.end += offset;\n            array += `${wordObject.word},`;\n        });\n        array += ']';\n        console.log(array);\n\n        // give a name value to the Array object so that the merging can access\n        // the name value without having to use the whole recordingResult object\n        // in the algorithm\n        answer.wordArray.name = answer.name;\n    }\n\n    // then store the array and decrease the counter\n    transcriber.results.push(answer.wordArray);\n    transcriber.counter--;\n    console.log(`current counter: ${transcriber.counter}`);\n\n    // and check if all results have been received.\n    transcriber.maybeMerge();\n}\n\n/**\n * this method will check if the counter is zero. If it is, it will call\n * the merging method\n */\nTranscriber.prototype.maybeMerge = function() {\n    if (this.state === TRANSCRIBING_STATE && this.counter === 0) {\n        // make sure to include the events in the result arrays before\n        // merging starts\n        this.merge();\n    }\n};\n\n/**\n * This method will merge all speech-to-text arrays together in one\n * readable transcription string\n */\nTranscriber.prototype.merge = function() {\n    console.log(\n        `starting merge process!\\n The length of the array: ${\n            this.results.length}`);\n    this.transcription = '';\n\n    // the merging algorithm will look over all Word objects who are at pos 0 in\n    // every array. It will then select the one closest in time to the\n    // previously placed word, while removing the selected word from its array\n    // note: words can be skipped the skipped word's begin and end time somehow\n    // end up between the closest word start and end time\n    const arrays = this.results;\n\n    // arrays of Word objects\n    const potentialWords = []; // array of the first Word objects\n    // check if any arrays are already empty and remove them\n\n    hasPopulatedArrays(arrays);\n\n    // populate all the potential Words for a first time\n    arrays.forEach(array => pushWordToSortedArray(potentialWords, array));\n\n    // keep adding words to transcription until all arrays are exhausted\n    while (hasPopulatedArrays(arrays)) {\n        // first select the lowest array;\n        let lowestWordArray = arrays[0];\n\n        arrays.forEach(wordArray => {\n            if (wordArray[0].begin < lowestWordArray[0].begin) {\n                lowestWordArray = wordArray;\n            }\n        });\n\n        // put the word in the transcription\n        let wordToAdd = lowestWordArray.shift();\n\n        this.updateTranscription(wordToAdd, lowestWordArray.name);\n\n        // keep going until a word in another array has a smaller time\n        // or the array is empty\n        while (lowestWordArray.length > 0) {\n            let foundSmaller = false;\n            const wordToCompare = lowestWordArray[0].begin;\n\n            arrays.forEach(wordArray => {\n                if (wordArray[0].begin < wordToCompare) {\n                    foundSmaller = true;\n                }\n            });\n\n            // add next word if no smaller time has been found\n            if (foundSmaller) {\n                break;\n            }\n\n            wordToAdd = lowestWordArray.shift();\n            this.updateTranscription(wordToAdd, null);\n        }\n\n    }\n\n    // set the state to finished and do the necessary left-over tasks\n    this.state = FINISHED_STATE;\n    if (this.callback) {\n        this.callback(this.transcription);\n    }\n};\n\n/**\n * Appends a word object to the transcription. It will make a new line with a\n * name if a name is specified\n * @param {Word} word the Word object holding the word to append\n * @param {String|null} name the name of a new speaker. Null if not applicable\n */\nTranscriber.prototype.updateTranscription = function(word, name) {\n    if (name !== undefined && name !== null) {\n        this.transcription += `\\n${name}:`;\n        this.lineLength = name.length + 1; // +1 for the semi-colon\n    }\n    if (this.lineLength + word.word.length > MAXIMUM_SENTENCE_LENGTH) {\n        this.transcription += '\\n    ';\n        this.lineLength = 4; // because of the 4 spaces after the new line\n    }\n    this.transcription += ` ${word.word}`;\n    this.lineLength += word.word.length + 1; // +1 for the space\n};\n\n/**\n * Check if the given 2 dimensional array has any non-zero Word-arrays in them.\n * All zero-element arrays inside will be removed\n * If any non-zero-element arrays are found, the method will return true.\n * otherwise it will return false\n * @param {Array<Array>} twoDimensionalArray the array to check\n * @returns {boolean} true if any non-zero arrays inside, otherwise false\n */\nfunction hasPopulatedArrays(twoDimensionalArray) {\n    for (let i = 0; i < twoDimensionalArray.length; i++) {\n        if (twoDimensionalArray[i].length === 0) {\n            twoDimensionalArray.splice(i, 1);\n        }\n    }\n\n    return twoDimensionalArray.length > 0;\n}\n\n/**\n * Push a word to the right location in a sorted array. The array is sorted\n * from lowest to highest start time. Every word is stored in an object which\n * includes the name of the person saying the word.\n *\n * @param {Array<Word>} array the sorted array to push to\n * @param {Word} word the word to push into the array\n */\nfunction pushWordToSortedArray(array, word) {\n    if (array.length === 0) {\n        array.push(word);\n    } else {\n        if (array[array.length - 1].begin <= word.begin) {\n            array.push(word);\n\n            return;\n        }\n\n        for (let i = 0; i < array.length; i++) {\n            if (word.begin < array[i].begin) {\n                array.splice(i, 0, word);\n\n                return;\n            }\n        }\n        array.push(word); // fail safe\n    }\n}\n\n/**\n * Gives the transcriber a JitsiTrack holding an audioStream to transcribe.\n * The JitsiTrack is given to the audioRecorder. If it doesn't hold an\n * audiostream, it will not be added by the audioRecorder\n * @param {JitsiTrack} track the track to give to the audioRecorder\n */\nTranscriber.prototype.addTrack = function(track) {\n    this.audioRecorder.addTrack(track);\n};\n\n/**\n * Remove the given track from the auioRecorder\n * @param track\n */\nTranscriber.prototype.removeTrack = function(track) {\n    this.audioRecorder.removeTrack(track);\n};\n\n/**\n * Will return the created transcription if it's avialable or throw an error\n * when it's not done yet\n * @returns {String} the transcription as a String\n */\nTranscriber.prototype.getTranscription = function() {\n    if (this.state !== FINISHED_STATE) {\n        throw new Error(\n            `The transcription can only be retrieved when it's in the \"${\n                FINISHED_STATE}\" state. It's currently in the \"${\n                this.state}\" state`);\n    }\n\n    return this.transcription;\n};\n\n/**\n * Returns the current state of the transcription process\n */\nTranscriber.prototype.getState = function() {\n    return this.state;\n};\n\n/**\n * Resets the state to the \"before\" state, such that it's again possible to\n * call the start method\n */\nTranscriber.prototype.reset = function() {\n    this.state = BEFORE_STATE;\n    this.counter = null;\n    this.transcription = null;\n    this.startTime = null;\n    this.callback = null;\n    this.results = [];\n    this.lineLength = 0;\n};\n\nexport default Transcriber;\n","import Statistics from '../statistics/statistics';\n\nconst logger = require('@jitsi/logger').getLogger(__filename);\n\n/**\n * Creates new instance of <tt>ComponentsVersions</tt> which will be discovering\n * the versions of conferencing system components in given\n * <tt>JitsiConference</tt>.\n * @param conference <tt>JitsiConference</tt> instance which will be used to\n *        listen for focus presence updates.\n * @constructor\n */\nexport default function ComponentsVersions(conference) {\n\n    this.versions = {};\n\n    this.conference = conference;\n    this.conference.addCommandListener(\n        'versions', this.processVersions.bind(this));\n}\n\nComponentsVersions.prototype.processVersions\n    = function(versions, mucResource, mucJid) {\n        if (!this.conference.isFocus(mucJid)) {\n            logger.warn(\n                `Received versions not from the focus user: ${versions}`,\n                mucJid);\n\n            return;\n        }\n\n        const log = [];\n\n        versions.children.forEach(component => {\n\n            const name = component.attributes.name;\n            const version = component.value;\n\n            if (this.versions[name] !== version) {\n                this.versions[name] = version;\n                logger.info(`Got ${name} version: ${version}`);\n\n                log.push({\n                    id: 'component_version',\n                    component: name,\n                    version\n                });\n            }\n        });\n\n        // logs versions to stats\n        if (log.length > 0) {\n            Statistics.sendLog(JSON.stringify(log));\n        }\n    };\n\n/**\n * Obtains the version of conferencing system component.\n * @param componentName the name of the component for which we want to obtain\n *        the version.\n * @returns {String} which describes the version of the component identified by\n *          given <tt>componentName</tt> or <tt>undefined</tt> if not found.\n */\nComponentsVersions.prototype.getComponentVersion = function(componentName) {\n    return this.versions[componentName];\n};\n","/**\n * Status that video SIP GW service is available.\n * @type {string}\n */\nexport const STATUS_AVAILABLE = 'available';\n\n/**\n * Status that video SIP GW service is not available.\n * @type {string}\n */\nexport const STATUS_UNDEFINED = 'undefined';\n\n/**\n * Status that video SIP GW service is available but there are no free nodes\n * at the moment to serve new requests.\n * @type {string}\n */\nexport const STATUS_BUSY = 'busy';\n\n/**\n * Video SIP GW session state, currently running.\n * @type {string}\n */\nexport const STATE_ON = 'on';\n\n/**\n * Video SIP GW session state, currently stopped and not running.\n * @type {string}\n */\nexport const STATE_OFF = 'off';\n\n/**\n * Video SIP GW session state, currently is starting.\n * @type {string}\n */\nexport const STATE_PENDING = 'pending';\n\n/**\n * Video SIP GW session state, has observed some issues and is retrying at the\n * moment.\n * @type {string}\n */\nexport const STATE_RETRYING = 'retrying';\n\n/**\n * Video SIP GW session state, tried to start but it failed.\n * @type {string}\n */\nexport const STATE_FAILED = 'failed';\n\n/**\n * Error on trying to create video SIP GW session in conference where\n * there is no room connection (hasn't joined or has left the room).\n * @type {string}\n */\nexport const ERROR_NO_CONNECTION = 'error_no_connection';\n\n/**\n * Error on trying to create video SIP GW session with address for which\n * there is an already created session.\n * @type {string}\n */\nexport const ERROR_SESSION_EXISTS = 'error_session_already_exists';\n","import { getLogger } from '@jitsi/logger';\nimport { $iq } from 'strophe.js';\n\nimport Listenable from '../util/Listenable';\n\nimport * as VideoSIPGWConstants from './VideoSIPGWConstants';\n\nconst logger = getLogger(__filename);\n\n/**\n * The event name for current sip video session state changed.\n * @type {string} event name for sip video session state changed.\n */\nconst STATE_CHANGED = 'STATE_CHANGED';\n\n/**\n * Jitsi video SIP GW session. Holding its state and able to start/stop it.\n * When session is in OFF or FAILED stated it cannot be used anymore.\n */\nexport default class JitsiVideoSIPGWSession extends Listenable {\n\n    /**\n     * Creates new session with the desired sip address and display name.\n     *\n     * @param {string} sipAddress - The sip address to use when\n     * starting the session.\n     * @param {string} displayName - The display name to use for\n     * that participant.\n     * @param {ChatRoom} chatRoom - The chat room this session is bound to.\n     */\n    constructor(sipAddress, displayName, chatRoom) {\n        super();\n\n        this.sipAddress = sipAddress;\n        this.displayName = displayName;\n        this.chatRoom = chatRoom;\n\n        /*\n         * The initial state is undefined. Initial state cannot be STATE_OFF,\n         * the session enters this state when it was in STATE_ON and was stopped\n         * and such session cannot be used anymore.\n         *\n         * @type {VideoSIPGWConstants|undefined}\n         */\n        this.state = undefined;\n    }\n\n    /**\n     * Stops the current session.\n     */\n    stop() {\n        if (this.state === VideoSIPGWConstants.STATE_OFF\n            || this.state === VideoSIPGWConstants.STATE_FAILED) {\n            logger.warn('Video SIP GW session already stopped or failed!');\n\n            return;\n        }\n\n        this._sendJibriIQ('stop');\n    }\n\n    /**\n     * Starts a new session. Sends an iq to the focus.\n     */\n    start() {\n        // if state is off, this session was active for some reason\n        // and we should create new one, rather than reusing it\n        if (this.state === VideoSIPGWConstants.STATE_ON\n            || this.state === VideoSIPGWConstants.STATE_OFF\n            || this.state === VideoSIPGWConstants.STATE_PENDING\n            || this.state === VideoSIPGWConstants.STATE_RETRYING) {\n            logger.warn('Video SIP GW session already started!');\n\n            return;\n        }\n\n        this._sendJibriIQ('start');\n    }\n\n    /**\n     * Changes the state of this session.\n     *\n     * @param {string} newState - The new {VideoSIPGWConstants} state to set.\n     * @param {string} [optional] failureReason - The reason why a failure state\n     * was entered.\n     * @returns {void}\n     */\n    setState(newState, failureReason) {\n        if (newState === this.state) {\n            return;\n        }\n\n        const oldState = this.state;\n\n        this.state = newState;\n        this.eventEmitter.emit(STATE_CHANGED,\n            {\n                address: this.sipAddress,\n                failureReason,\n                oldState,\n                newState: this.state,\n                displayName: this.displayName\n            }\n        );\n    }\n\n    /**\n     * Subscribes the passed listener to the event for state change of this\n     * session.\n     *\n     * @param {Function} listener - The function that will receive the event.\n     */\n    addStateListener(listener) {\n        this.addListener(STATE_CHANGED, listener);\n    }\n\n    /**\n     * Unsubscribes the passed handler.\n     *\n     * @param {Function} listener - The function to be removed.\n     */\n    removeStateListener(listener) {\n        this.removeListener(STATE_CHANGED, listener);\n    }\n\n    /**\n     * Sends a jibri command using an iq.\n     *\n     * @private\n     * @param {string} action - The action to send ('start' or 'stop').\n     */\n    _sendJibriIQ(action) {\n        const appData = {};\n        appData[\"baseUrl\"] =  window.location.origin;\n        appData[\"token\"] =  this.chatRoom.connection.emuc.xmpp.token\n\n        const attributes = {\n            'xmlns': 'http://jitsi.org/protocol/jibri',\n            'action': action,\n            'app_data': JSON.stringify(appData),\n            sipaddress: this.sipAddress\n        };\n\n        attributes.displayname = this.displayName;\n\n        const iq = $iq({\n            to: this.chatRoom.focusMucJid,\n            type: 'set' })\n            .c('jibri', attributes)\n            .up();\n\n        logger.debug(`${action} video SIP GW session`, iq.nodeTree);\n        this.chatRoom.connection.sendIQ(\n            iq,\n            () => {}, // eslint-disable-line no-empty-function\n            error => {\n                logger.error(\n                    `Failed to ${action} video SIP GW session, error: `, error);\n                this.setState(VideoSIPGWConstants.STATE_FAILED);\n            });\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nconst logger = getLogger(__filename);\n\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nimport JitsiVideoSIPGWSession from './JitsiVideoSIPGWSession';\nimport * as Constants from './VideoSIPGWConstants';\n\n/**\n * Main video SIP GW handler. Stores references of all created sessions.\n */\nexport default class VideoSIPGW {\n\n    /**\n     * Creates new handler.\n     *\n     * @param {ChatRoom} chatRoom - Tha chat room to handle.\n     */\n    constructor(chatRoom) {\n        this.chatRoom = chatRoom;\n        this.eventEmitter = chatRoom.eventEmitter;\n        logger.debug('creating VideoSIPGW');\n        this.sessions = {};\n\n        this.sessionStateChangeListener = this.sessionStateChanged.bind(this);\n\n        // VideoSIPGW, JitsiConference and ChatRoom are not reusable and no\n        // more than one VideoSIPGW can be created per JitsiConference,\n        // so we don't bother to cleanup\n        chatRoom.addPresenceListener('jibri-sip-call-state',\n            this.handleJibriSIPState.bind(this));\n    }\n\n    /**\n     * Handles presence nodes with name: jibri-sip-call-state.\n     *\n     * @param {Object} node the presence node Object to handle.\n     * Object representing part of the presence received over xmpp.\n     */\n    handleJibriSIPState(node) {\n        const attributes = node.attributes;\n\n        if (!attributes) {\n            return;\n        }\n\n        logger.debug('Handle video sip gw state : ', attributes);\n\n        const newState = attributes.state;\n\n        if (newState === this.state) {\n            return;\n        }\n\n        switch (newState) {\n        case Constants.STATE_ON:\n        case Constants.STATE_OFF:\n        case Constants.STATE_PENDING:\n        case Constants.STATE_RETRYING:\n        case Constants.STATE_FAILED: {\n            const address = attributes.sipaddress;\n\n            if (!address) {\n                return;\n            }\n\n            // find the corresponding session and set its state\n            const session = this.sessions[address];\n\n            if (session) {\n                session.setState(newState, attributes.failure_reason);\n            } else {\n                logger.warn('Video SIP GW session not found:', address);\n            }\n        }\n        }\n    }\n\n    /**\n     * Creates new session and stores its reference if it does not exist or\n     * returns an error otherwise.\n     *\n     * @param {string} sipAddress - The sip address to use.\n     * @param {string} displayName - The display name to use.\n     * @returns {JitsiVideoSIPGWSession|Error}\n     */\n    createVideoSIPGWSession(sipAddress, displayName) {\n        if (this.sessions[sipAddress]) {\n            logger.warn('There was already a Video SIP GW session for address',\n                sipAddress);\n\n            return new Error(Constants.ERROR_SESSION_EXISTS);\n        }\n\n        const session = new JitsiVideoSIPGWSession(\n            sipAddress, displayName, this.chatRoom);\n\n        session.addStateListener(this.sessionStateChangeListener);\n\n        this.sessions[sipAddress] = session;\n\n        return session;\n    }\n\n    /**\n     * Listener for session state changed. When a session goes to off or failed\n     * we delete its reference.\n     *\n     * @param {options} event - { address, oldState, newState, displayName }\n     */\n    sessionStateChanged(event) {\n        const address = event.address;\n\n        if (event.newState === Constants.STATE_OFF\n            || event.newState === Constants.STATE_FAILED) {\n            const session = this.sessions[address];\n\n            if (!session) {\n                logger.error('Missing Video SIP GW session with address:',\n                    address);\n\n                return;\n            }\n\n            session.removeStateListener(this.sessionStateChangeListener);\n            delete this.sessions[address];\n        }\n\n        this.eventEmitter.emit(\n            XMPPEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED,\n            event);\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport { Strophe } from 'strophe.js';\n\nimport * as MediaType from '../../service/RTC/MediaType';\nimport * as SignalingEvents from '../../service/RTC/SignalingEvents';\nimport SignalingLayer, { getMediaTypeFromSourceName } from '../../service/RTC/SignalingLayer';\nimport VideoType from '../../service/RTC/VideoType';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport FeatureFlags from '../flags/FeatureFlags';\n\nimport { filterNodeFromPresenceJSON } from './ChatRoom';\n\nconst logger = getLogger(__filename);\n\nexport const SOURCE_INFO_PRESENCE_ELEMENT = 'SourceInfo';\n\n/**\n * Default XMPP implementation of the {@link SignalingLayer} interface. Obtains\n * the data from the MUC presence.\n */\nexport default class SignalingLayerImpl extends SignalingLayer {\n    /**\n     * Creates new instance.\n     */\n    constructor() {\n        super();\n\n        /**\n         * A map that stores SSRCs of remote streams. And is used only locally\n         * We store the mapping when jingle is received, and later is used\n         * onaddstream webrtc event where we have only the ssrc\n         * FIXME: This map got filled and never cleaned and can grow during long\n         * conference\n         * @type {Map<number, string>} maps SSRC number to jid\n         */\n        this.ssrcOwners = new Map();\n\n        /**\n         *\n         * @type {ChatRoom|null}\n         */\n        this.chatRoom = null;\n\n        /**\n         * @type {Map<SourceName, SourceInfo>}\n         * @private\n         */\n        this._localSourceState = { };\n\n        /**\n         * @type {Map<EndpointId, Map<SourceName, SourceInfo>>}\n         * @private\n         */\n        this._remoteSourceState = { };\n\n        /**\n         * A map that stores the source name of a track identified by it's ssrc.\n         * We store the mapping when jingle is received, and later is used\n         * onaddstream webrtc event where we have only the ssrc\n         * FIXME: This map got filled and never cleaned and can grow during long\n         * conference\n         * @type {Map<number, string>} maps SSRC number to source name\n         */\n        this._sourceNames = new Map();\n    }\n\n    /**\n     * Adds <SourceInfo> element to the local presence.\n     *\n     * @returns {void}\n     * @private\n     */\n    _addLocalSourceInfoToPresence() {\n        if (this.chatRoom) {\n            this.chatRoom.addOrReplaceInPresence(\n                SOURCE_INFO_PRESENCE_ELEMENT,\n                { value: JSON.stringify(this._localSourceState) });\n        }\n    }\n\n    /**\n     * Check is given endpoint has advertised <SourceInfo/> in it's presence which means that the source name signaling\n     * is used by this endpoint.\n     *\n     * @param {EndpointId} endpointId\n     * @returns {boolean}\n     */\n    _doesEndpointSendNewSourceInfo(endpointId) {\n        const presence = this.chatRoom?.getLastPresence(endpointId);\n\n        return Boolean(presence && presence.find(node => node.tagName === SOURCE_INFO_PRESENCE_ELEMENT));\n    }\n\n    /**\n     * Sets the <tt>ChatRoom</tt> instance used and binds presence listeners.\n     * @param {ChatRoom} room\n     */\n    setChatRoom(room) {\n        const oldChatRoom = this.chatRoom;\n\n        this.chatRoom = room;\n        if (oldChatRoom) {\n            oldChatRoom.removePresenceListener(\n                'audiomuted', this._audioMuteHandler);\n            oldChatRoom.removePresenceListener(\n                'videomuted', this._videoMuteHandler);\n            oldChatRoom.removePresenceListener(\n                'videoType', this._videoTypeHandler);\n            if (FeatureFlags.isSourceNameSignalingEnabled()) {\n                this._sourceInfoHandler\n                    && oldChatRoom.removePresenceListener(\n                        SOURCE_INFO_PRESENCE_ELEMENT, this._sourceInfoHandler);\n                this._memberLeftHandler\n                    && oldChatRoom.removeEventListener(\n                        XMPPEvents.MUC_MEMBER_LEFT, this._memberLeftHandler);\n            }\n        }\n        if (room) {\n            if (FeatureFlags.isSourceNameSignalingEnabled()) {\n                this._bindChatRoomEventHandlers(room);\n                this._addLocalSourceInfoToPresence();\n            } else {\n                // TODO the logic below has been duplicated in _bindChatRoomEventHandlers, clean this up once\n                //  the new impl has been tested well enough\n                // SignalingEvents\n                this._audioMuteHandler = (node, from) => {\n                    this.eventEmitter.emit(\n                        SignalingEvents.PEER_MUTED_CHANGED,\n                        from, MediaType.AUDIO, node.value === 'true');\n                };\n                room.addPresenceListener('audiomuted', this._audioMuteHandler);\n\n                this._videoMuteHandler = (node, from) => {\n                    this.eventEmitter.emit(\n                        SignalingEvents.PEER_MUTED_CHANGED,\n                        from, MediaType.VIDEO, node.value === 'true');\n                };\n                room.addPresenceListener('videomuted', this._videoMuteHandler);\n\n                this._videoTypeHandler = (node, from) => {\n                    this.eventEmitter.emit(\n                        SignalingEvents.PEER_VIDEO_TYPE_CHANGED,\n                        from, node.value);\n                };\n                room.addPresenceListener('videoType', this._videoTypeHandler);\n            }\n        }\n    }\n\n    /**\n     * Binds event listeners to the chat room instance.\n     * @param {ChatRoom} room\n     * @private\n     * @returns {void}\n     */\n    _bindChatRoomEventHandlers(room) {\n        const emitAudioMutedEvent = (endpointId, muted) => {\n            this.eventEmitter.emit(\n                SignalingEvents.PEER_MUTED_CHANGED,\n                endpointId,\n                MediaType.AUDIO,\n                muted);\n        };\n        const emitVideoMutedEvent = (endpointId, muted) => {\n            this.eventEmitter.emit(\n                SignalingEvents.PEER_MUTED_CHANGED,\n                endpointId,\n                MediaType.VIDEO,\n                muted);\n        };\n\n        // SignalingEvents\n        this._audioMuteHandler = (node, from) => {\n            if (!this._doesEndpointSendNewSourceInfo(from)) {\n                emitAudioMutedEvent(from, node.value === 'true');\n            }\n        };\n        room.addPresenceListener('audiomuted', this._audioMuteHandler);\n\n        this._videoMuteHandler = (node, from) => {\n            if (!this._doesEndpointSendNewSourceInfo(from)) {\n                emitVideoMutedEvent(from, node.value === 'true');\n            }\n        };\n        room.addPresenceListener('videomuted', this._videoMuteHandler);\n\n        const emitVideoTypeEvent = (endpointId, videoType) => {\n            this.eventEmitter.emit(\n                SignalingEvents.PEER_VIDEO_TYPE_CHANGED,\n                endpointId, videoType);\n        };\n\n        this._videoTypeHandler = (node, from) => {\n            if (!this._doesEndpointSendNewSourceInfo(from)) {\n                emitVideoTypeEvent(from, node.value);\n            }\n        };\n        room.addPresenceListener('videoType', this._videoTypeHandler);\n\n        this._sourceInfoHandler = (node, mucNick) => {\n            const endpointId = mucNick;\n            const { value } = node;\n            const sourceInfoJSON = JSON.parse(value);\n            const emitEventsFromHere = this._doesEndpointSendNewSourceInfo(endpointId);\n            const endpointSourceState\n                = this._remoteSourceState[endpointId] || (this._remoteSourceState[endpointId] = {});\n\n            for (const sourceName of Object.keys(sourceInfoJSON)) {\n                const mediaType = getMediaTypeFromSourceName(sourceName);\n                const newMutedState = Boolean(sourceInfoJSON[sourceName].muted);\n                const oldSourceState = endpointSourceState[sourceName]\n                    || (endpointSourceState[sourceName] = { sourceName });\n\n                if (oldSourceState.muted !== newMutedState) {\n                    oldSourceState.muted = newMutedState;\n                    if (emitEventsFromHere && mediaType === MediaType.AUDIO) {\n                        emitAudioMutedEvent(endpointId, newMutedState);\n                    } else {\n                        emitVideoMutedEvent(endpointId, newMutedState);\n                    }\n                }\n\n                const newVideoType = sourceInfoJSON[sourceName].videoType;\n\n                if (oldSourceState.videoType !== newVideoType) {\n                    oldSourceState.videoType = newVideoType;\n                    emitEventsFromHere && emitVideoTypeEvent(endpointId, newVideoType);\n                }\n            }\n\n            // Cleanup removed source names\n            const newSourceNames = Object.keys(sourceInfoJSON);\n\n            for (const sourceName of Object.keys(endpointSourceState)) {\n                if (newSourceNames.indexOf(sourceName) === -1) {\n                    delete endpointSourceState[sourceName];\n                }\n            }\n        };\n        room.addPresenceListener('SourceInfo', this._sourceInfoHandler);\n\n        // Cleanup when participant leaves\n        this._memberLeftHandler = jid => {\n            const endpointId = Strophe.getResourceFromJid(jid);\n\n            delete this._remoteSourceState[endpointId];\n\n            if (FeatureFlags.isSourceNameSignalingEnabled()) {\n                for (const [ key, value ] of this.ssrcOwners.entries()) {\n                    if (value === endpointId) {\n                        delete this._sourceNames[key];\n                    }\n                }\n            }\n        };\n\n        room.addEventListener(XMPPEvents.MUC_MEMBER_LEFT, this._memberLeftHandler);\n    }\n\n    /**\n     * Finds the first source of given media type for the given endpoint.\n     * @param endpointId\n     * @param mediaType\n     * @returns {SourceInfo|null}\n     * @private\n     */\n    _findEndpointSourceInfoForMediaType(endpointId, mediaType) {\n        const remoteSourceState = this._remoteSourceState[endpointId];\n\n        if (!remoteSourceState) {\n            return null;\n        }\n\n        for (const sourceInfo of Object.values(remoteSourceState)) {\n            const _mediaType = getMediaTypeFromSourceName(sourceInfo.sourceName);\n\n            if (_mediaType === mediaType) {\n                return sourceInfo;\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getPeerMediaInfo(owner, mediaType) {\n        const legacyGetPeerMediaInfo = () => {\n            if (this.chatRoom) {\n                return this.chatRoom.getMediaPresenceInfo(owner, mediaType);\n            }\n            logger.error('Requested peer media info, before room was set');\n        };\n\n        if (FeatureFlags.isSourceNameSignalingEnabled()) {\n            const lastPresence = this.chatRoom.getLastPresence(owner);\n\n            if (!lastPresence) {\n                throw new Error(`getPeerMediaInfo - no presence stored for: ${owner}`);\n            }\n\n            if (!this._doesEndpointSendNewSourceInfo(owner)) {\n                return legacyGetPeerMediaInfo();\n            }\n\n            /**\n             * @type {PeerMediaInfo}\n             */\n            const mediaInfo = {};\n            const endpointMediaSource = this._findEndpointSourceInfoForMediaType(owner, mediaType);\n\n            // The defaults are provided only, because getPeerMediaInfo is a legacy method. This will be eventually\n            // changed into a getSourceInfo method which returns undefined if there's no source. Also there will be\n            // no mediaType argument there.\n            if (mediaType === MediaType.AUDIO) {\n                mediaInfo.muted = endpointMediaSource ? endpointMediaSource.muted : true;\n            } else if (mediaType === MediaType.VIDEO) {\n                mediaInfo.muted = endpointMediaSource ? endpointMediaSource.muted : true;\n                mediaInfo.videoType = endpointMediaSource ? endpointMediaSource.videoType : undefined;\n\n                const codecTypeNode = filterNodeFromPresenceJSON(lastPresence, 'jitsi_participant_codecType');\n\n                if (codecTypeNode.length > 0) {\n                    mediaInfo.codecType = codecTypeNode[0].value;\n                }\n            } else {\n                throw new Error(`Unsupported media type: ${mediaType}`);\n            }\n\n            return mediaInfo;\n        }\n\n        return legacyGetPeerMediaInfo();\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getPeerSourceInfo(owner, sourceName) {\n        return this._remoteSourceState[owner] ? this._remoteSourceState[owner][sourceName] : undefined;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getSSRCOwner(ssrc) {\n        return this.ssrcOwners.get(ssrc);\n    }\n\n    /**\n     * Set an SSRC owner.\n     * @param {number} ssrc an SSRC to be owned\n     * @param {string} endpointId owner's ID (MUC nickname)\n     * @throws TypeError if <tt>ssrc</tt> is not a number\n     */\n    setSSRCOwner(ssrc, endpointId) {\n        if (typeof ssrc !== 'number') {\n            throw new TypeError(`SSRC(${ssrc}) must be a number`);\n        }\n\n        // Now signaling layer instance is shared between different JingleSessionPC instances, so although very unlikely\n        // an SSRC conflict could potentially occur. Log a message to make debugging easier.\n        const existingOwner = this.ssrcOwners.get(ssrc);\n\n        if (existingOwner && existingOwner !== endpointId) {\n            logger.error(`SSRC owner re-assigned from ${existingOwner} to ${endpointId}`);\n        }\n        this.ssrcOwners.set(ssrc, endpointId);\n    }\n\n    /**\n     * Adjusts muted status of given track.\n     *\n     * @param {SourceName} sourceName - the name of the track's source.\n     * @param {boolean} muted - the new muted status.\n     * @returns {boolean}\n     */\n    setTrackMuteStatus(sourceName, muted) {\n        if (!this._localSourceState[sourceName]) {\n            this._localSourceState[sourceName] = {};\n        }\n\n        this._localSourceState[sourceName].muted = muted;\n\n        if (this.chatRoom) {\n            // FIXME This only adjusts the presence, but doesn't actually send it. Here we temporarily rely on\n            // the legacy signaling part to send the presence. Remember to add \"send presence\" here when the legacy\n            // signaling is removed.\n            this._addLocalSourceInfoToPresence();\n        }\n    }\n\n    /**\n     * Sets track's video type.\n     * @param {SourceName} sourceName - the track's source name.\n     * @param {VideoType} videoType - the new video type.\n     */\n    setTrackVideoType(sourceName, videoType) {\n        if (!this._localSourceState[sourceName]) {\n            this._localSourceState[sourceName] = {};\n        }\n\n        if (this._localSourceState[sourceName].videoType !== videoType) {\n            // Include only if not a camera (default)\n            this._localSourceState[sourceName].videoType = videoType === VideoType.CAMERA ? undefined : videoType;\n\n            // NOTE this doesn't send the actual presence, because is called from the same place where the legacy video\n            // type is emitted which does the actual sending. A send presence statement needs to be added when\n            // the legacy part is removed.\n            this._addLocalSourceInfoToPresence();\n        }\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getTrackSourceName(ssrc) {\n        return this._sourceNames.get(ssrc);\n    }\n\n    /**\n     * Saves the source name for a track identified by it's ssrc.\n     * @param {number} ssrc the ssrc of the target track.\n     * @param {SourceName} sourceName the track's source name to save.\n     * @throws TypeError if <tt>ssrc</tt> is not a number\n     */\n    setTrackSourceName(ssrc, sourceName) {\n        if (typeof ssrc !== 'number') {\n            throw new TypeError(`SSRC(${ssrc}) must be a number`);\n        }\n\n        // Now signaling layer instance is shared between different JingleSessionPC instances, so although very unlikely\n        // an SSRC conflict could potentially occur. Log a message to make debugging easier.\n        const existingName = this._sourceNames.get(ssrc);\n\n        if (existingName && existingName !== sourceName) {\n            logger.error(`SSRC(${ssrc}) sourceName re-assigned from ${existingName} to ${sourceName}`);\n        }\n\n        this._sourceNames.set(ssrc, sourceName);\n    }\n\n}\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nimport Statistics from \"./statistics\";\n\n\nconst INITIAL_STATE = {\n    localTracksDuration: {\n        audio: {\n            startedTime: -1,\n            value: 0\n        },\n        video: {\n            camera: {\n                startedTime: -1,\n                value: 0\n            },\n            desktop: {\n                startedTime: -1,\n                value: 0\n            }\n        },\n        conference: {\n            startedTime: -1,\n            value: 0\n        }\n    }\n};\n\n\n\nlet FINAL_STATE = {\n    localTracksDuration: {\n        audio: {\n            startedTime: -1,\n            value: 0\n        },\n        video: {\n            camera: {\n                startedTime: -1,\n                value: 0\n            },\n            desktop: {\n                startedTime: -1,\n                value: 0\n            }\n        },\n        conference: {\n            startedTime: -1,\n            value: 0\n        }\n    }\n};\n\n\nfunction createLocalTracksDurationEvent(duration) {\n    const { audio, video, conference } = duration;\n    const { camera, desktop } = video;\n\n    return {\n        action: 'local.tracks.durations',\n        attributes: {\n            audio: audio.value,\n            camera: camera.value,\n            conference: conference.value,\n            desktop: desktop.value\n        }\n    };\n}\n\n\nfunction calculateLocalTrackDuration(state, conference) {\n\n    const now = Date.now();\n    const { localTracksDuration } = state;\n\n    const {\n        audio,\n        video\n    } = localTracksDuration;\n    const {\n        camera,\n        desktop\n    } = video;\n\n    const tracks = conference.getLocalTracks();\n    const audioTrack = tracks.find(track=>track.getType()===\"audio\");\n    const videoTrack = tracks.find(track=>track.getType()===\"video\");\n    const newDuration = { ...localTracksDuration };\n\n    if (!audioTrack || audioTrack.muted || !conference) {\n        newDuration.audio = {\n            startedTime: -1,\n            value: audio.value + (audio.startedTime === -1 ? 0 : now - audio.startedTime)\n        };\n    } else if (audio.startedTime === -1) {\n        newDuration.audio.startedTime = now;\n    }\n\n    if (!videoTrack || videoTrack.muted || !conference) {\n        newDuration.video = {\n            camera: {\n                startedTime: -1,\n                value: camera.value + (camera.startedTime === -1 ? 0 : now - camera.startedTime)\n            },\n            desktop: {\n                startedTime: -1,\n                value: desktop.value + (desktop.startedTime === -1 ? 0 : now - desktop.startedTime)\n            }\n        };\n    } else {\n        const { videoType } = videoTrack;\n\n        if (video[videoType].startedTime === -1) {\n            newDuration.video[videoType].startedTime = now;\n        }\n    }\n\n    return {\n        ...localTracksDuration,\n        ...newDuration\n    };\n}\n\n\nexport default class LocalTracksDuration {\n\n    constructor(conference) {\n\n        conference.addEventListener(JitsiConferenceEvents.CONFERENCE_JOINED, ()=>{\n            FINAL_STATE = {\n                localTracksDuration: {\n                    ...calculateLocalTrackDuration(INITIAL_STATE, conference),\n                    conference: {\n                        startedTime: Date.now(),\n                        value: 0\n                    }\n                }\n            };\n        });\n\n        conference.addEventListener(JitsiConferenceEvents.TRACK_UPDATED, ()=>{\n            const { localTracksDuration } = FINAL_STATE;\n\n            if (localTracksDuration.conference.startedTime === -1) {\n                return;\n            }\n            FINAL_STATE = {\n                localTracksDuration: {\n                    ...localTracksDuration,\n                    ...calculateLocalTrackDuration(FINAL_STATE, conference)\n                }\n            };\n        });\n\n        conference.addEventListener(JitsiConferenceEvents.TRACK_ADDED, ()=>{\n\n            const { localTracksDuration } = FINAL_STATE;\n\n            if (localTracksDuration.conference.startedTime === -1) {\n                // We don't want to track the media duration if the conference is not joined yet because otherwise we won't\n                // be able to compare them with the conference duration (from conference join to conference will leave).\n                // Also, do not track media duration for presenter tracks.\n                return;\n            }\n\n            FINAL_STATE = {\n                localTracksDuration: {\n                    ...localTracksDuration,\n                    ...calculateLocalTrackDuration(FINAL_STATE, conference)\n                }\n            };\n        });\n\n        conference.addEventListener(JitsiConferenceEvents.TRACK_REMOVED, ()=>{\n\n            const { localTracksDuration } = FINAL_STATE;\n\n            if (localTracksDuration.conference.startedTime === -1) {\n                // We don't want to track the media duration if the conference is not joined yet because otherwise we won't\n                // be able to compare them with the conference duration (from conference join to conference will leave).\n                // Also, do not track media duration for presenter tracks.\n                return;\n            }\n\n            FINAL_STATE = {\n                localTracksDuration: {\n                    ...localTracksDuration,\n                    ...calculateLocalTrackDuration(FINAL_STATE, conference)\n                }\n            };\n        });\n\n\n\n        conference.addEventListener(JitsiConferenceEvents.CONFERENCE_LEFT, ()=>{\n            const { localTracksDuration } = FINAL_STATE;\n            const newLocalTracksDuration = {\n                ...calculateLocalTrackDuration(FINAL_STATE, conference),\n                conference: {\n                    startedTime: -1,\n                    value: Date.now() - localTracksDuration.conference.startedTime\n                }\n            };\n            Statistics.sendAnalytics(createLocalTracksDurationEvent(newLocalTracksDuration));\n        });\n    }\n}\n","/* global $ */\n\nimport { getLogger } from '@jitsi/logger';\nimport EventEmitter from 'events';\nimport isEqual from 'lodash.isequal';\nimport { Strophe } from 'strophe.js';\n\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\nimport JitsiConferenceEventManager from './JitsiConferenceEventManager';\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport JitsiParticipant from './JitsiParticipant';\nimport JitsiTrackError from './JitsiTrackError';\nimport * as JitsiTrackErrors from './JitsiTrackErrors';\nimport * as JitsiTrackEvents from './JitsiTrackEvents';\nimport authenticateAndUpgradeRole from './authenticateAndUpgradeRole';\nimport { CodecSelection } from './modules/RTC/CodecSelection';\nimport RTC from './modules/RTC/RTC';\nimport { SS_DEFAULT_FRAME_RATE } from './modules/RTC/ScreenObtainer';\nimport browser from './modules/browser';\nimport ConnectionQuality from './modules/connectivity/ConnectionQuality';\nimport IceFailedHandling\n    from './modules/connectivity/IceFailedHandling';\nimport ParticipantConnectionStatusHandler\n    from './modules/connectivity/ParticipantConnectionStatus';\nimport * as DetectionEvents from './modules/detection/DetectionEvents';\nimport NoAudioSignalDetection from './modules/detection/NoAudioSignalDetection';\nimport P2PDominantSpeakerDetection from './modules/detection/P2PDominantSpeakerDetection';\nimport VADAudioAnalyser from './modules/detection/VADAudioAnalyser';\nimport VADNoiseDetection from './modules/detection/VADNoiseDetection';\nimport VADTalkMutedDetection from './modules/detection/VADTalkMutedDetection';\nimport { E2EEncryption } from './modules/e2ee/E2EEncryption';\nimport E2ePing from './modules/e2eping/e2eping';\nimport Jvb121EventGenerator from './modules/event/Jvb121EventGenerator';\nimport FeatureFlags from './modules/flags/FeatureFlags';\nimport { RecordingController } from './modules/local-recording';\nimport { ReceiveVideoController } from './modules/qualitycontrol/ReceiveVideoController';\nimport { SendVideoController } from './modules/qualitycontrol/SendVideoController';\nimport RecordingManager from './modules/recording/RecordingManager';\nimport Settings from './modules/settings/Settings';\nimport AudioOutputProblemDetector from './modules/statistics/AudioOutputProblemDetector';\nimport AvgRTPStatsReporter from './modules/statistics/AvgRTPStatsReporter';\nimport SpeakerStatsCollector from './modules/statistics/SpeakerStatsCollector';\nimport Statistics from './modules/statistics/statistics';\nimport Transcriber from './modules/transcription/transcriber';\nimport GlobalOnErrorHandler from './modules/util/GlobalOnErrorHandler';\nimport RandomUtil from './modules/util/RandomUtil';\nimport ComponentsVersions from './modules/version/ComponentsVersions';\nimport VideoSIPGW from './modules/videosipgw/VideoSIPGW';\nimport * as VideoSIPGWConstants from './modules/videosipgw/VideoSIPGWConstants';\nimport SignalingLayerImpl from './modules/xmpp/SignalingLayerImpl';\nimport LocalTracksDuration from './modules/statistics/LocalTracksDuration';\nimport {\n    FEATURE_E2EE,\n    FEATURE_JIGASI,\n    JITSI_MEET_MUC_TYPE\n} from './modules/xmpp/xmpp';\nimport BridgeVideoType from './service/RTC/BridgeVideoType';\nimport CodecMimeType from './service/RTC/CodecMimeType';\nimport * as MediaType from './service/RTC/MediaType';\nimport RTCEvents from './service/RTC/RTCEvents';\nimport { getSourceNameForJitsiTrack } from './service/RTC/SignalingLayer';\nimport VideoType from './service/RTC/VideoType';\nimport {\n    ACTION_JINGLE_RESTART,\n    ACTION_JINGLE_SI_RECEIVED,\n    ACTION_JINGLE_SI_TIMEOUT,\n    ACTION_JINGLE_TERMINATE,\n    ACTION_P2P_DECLINED,\n    ACTION_P2P_ESTABLISHED,\n    ACTION_P2P_FAILED,\n    ACTION_P2P_SWITCH_TO_JVB,\n    ICE_ESTABLISHMENT_DURATION_DIFF,\n    createConferenceEvent,\n    createJingleEvent,\n    createP2PEvent\n} from './service/statistics/AnalyticsEvents';\nimport * as XMPPEvents from './service/xmpp/XMPPEvents';\nwindow.APP = {\n    conference: {\n    }\n};\n\nconst logger = getLogger(__filename);\n\n/**\n * How long since Jicofo is supposed to send a session-initiate, before\n * {@link ACTION_JINGLE_SI_TIMEOUT} analytics event is sent (in ms).\n * @type {number}\n */\nconst JINGLE_SI_TIMEOUT = 5000;\n\n/**\n * Creates a JitsiConference object with the given name and properties.\n * Note: this constructor is not a part of the public API (objects should be\n * created using JitsiConnection.createConference).\n * @param options.config properties / settings related to the conference that\n * will be created.\n * @param options.name the name of the conference\n * @param options.connection the JitsiConnection object for this\n * JitsiConference.\n * @param {number} [options.config.avgRtpStatsN=15] how many samples are to be\n * collected by {@link AvgRTPStatsReporter}, before arithmetic mean is\n * calculated and submitted to the analytics module.\n * @param {boolean} [options.config.enableIceRestart=false] - enables the ICE\n * restart logic.\n * @param {boolean} [options.config.p2p.enabled] when set to <tt>true</tt>\n * the peer to peer mode will be enabled. It means that when there are only 2\n * participants in the conference an attempt to make direct connection will be\n * made. If the connection succeeds the conference will stop sending data\n * through the JVB connection and will use the direct one instead.\n * @param {number} [options.config.p2p.backToP2PDelay=5] a delay given in\n * seconds, before the conference switches back to P2P, after the 3rd\n * participant has left the room.\n * @param {number} [options.config.channelLastN=-1] The requested amount of\n * videos are going to be delivered after the value is in effect. Set to -1 for\n * unlimited or all available videos.\n * @param {number} [options.config.forceJVB121Ratio]\n * \"Math.random() < forceJVB121Ratio\" will determine whether a 2 people\n * conference should be moved to the JVB instead of P2P. The decision is made on\n * the responder side, after ICE succeeds on the P2P connection.\n * @constructor\n *\n * FIXME Make all methods which are called from lib-internal classes\n *       to non-public (use _). To name a few:\n *       {@link JitsiConference.onLocalRoleChanged}\n *       {@link JitsiConference.onUserRoleChanged}\n *       {@link JitsiConference.onMemberLeft}\n *       and so on...\n */\nexport default function JitsiConference(options) {\n    if (!options.name || options.name.toLowerCase() !== options.name.toString()) {\n        const errmsg\n            = 'Invalid conference name (no conference name passed or it '\n                + 'contains invalid characters like capital letters)!';\n\n        logger.error(errmsg);\n        throw new Error(errmsg);\n    }\n    this.connection = options.connection;\n    this.xmpp = this.connection?.xmpp;\n\n    if (this.xmpp.isRoomCreated(options.name, options.customDomain)) {\n        const errmsg = 'A coference with the same name has already been created!';\n\n        delete this.connection;\n        delete this.xmpp;\n        logger.error(errmsg);\n        throw new Error(errmsg);\n    }\n    this.eventEmitter = new EventEmitter();\n    this.options = options;\n    this.eventManager = new JitsiConferenceEventManager(this);\n    this.participants = {};\n\n    /**\n     * The signaling layer instance.\n     * @type {SignalingLayerImpl}\n     * @private\n     */\n    this._signalingLayer = new SignalingLayerImpl();\n\n    this._init(options);\n    this.componentsVersions = new ComponentsVersions(this);\n\n    /**\n     * Jingle session instance for the JVB connection.\n     * @type {JingleSessionPC}\n     */\n    this.jvbJingleSession = null;\n    this.lastDominantSpeaker = null;\n    this.dtmfManager = null;\n    this.somebodySupportsDTMF = false;\n    this.authEnabled = false;\n    this.startAudioMuted = false;\n    this.startVideoMuted = false;\n    this.startMutedPolicy = {\n        audio: false,\n        video: false\n    };\n    this.isMutedByFocus = false;\n\n    // when muted by focus we receive the jid of the initiator of the mute\n    this.mutedByFocusActor = null;\n\n    this.isVideoMutedByFocus = false;\n\n    // when video muted by focus we receive the jid of the initiator of the mute\n    this.mutedVideoByFocusActor = null;\n\n    // Flag indicates if the 'onCallEnded' method was ever called on this\n    // instance. Used to log extra analytics event for debugging purpose.\n    // We need to know if the potential issue happened before or after\n    // the restart.\n    this.wasStopped = false;\n\n    // Conference properties, maintained by jicofo.\n    this.properties = {};\n\n    /**\n     * The object which monitors local and remote connection statistics (e.g.\n     * sending bitrate) and calculates a number which represents the connection\n     * quality.\n     */\n    this.connectionQuality\n        = new ConnectionQuality(this, this.eventEmitter, options);\n\n    /**\n     * Reports average RTP statistics to the analytics module.\n     * @type {AvgRTPStatsReporter}\n     */\n    this.avgRtpStatsReporter\n        = new AvgRTPStatsReporter(this, options.config.avgRtpStatsN || 15);\n\n    /**\n     * Detects issues with the audio of remote participants.\n     * @type {AudioOutputProblemDetector}\n     */\n    if (!options.config.disableAudioLevels) {\n        this._audioOutputProblemDetector = new AudioOutputProblemDetector(this);\n    }\n\n    /**\n     * Indicates whether the connection is interrupted or not.\n     */\n    this.isJvbConnectionInterrupted = false;\n\n    /**\n     * The object which tracks active speaker times\n     */\n    this.speakerStatsCollector = new SpeakerStatsCollector(this);\n\n    /* P2P related fields below: */\n\n    /**\n     * Stores reference to deferred start P2P task. It's created when 3rd\n     * participant leaves the room in order to avoid ping pong effect (it\n     * could be just a page reload).\n     * @type {number|null}\n     */\n    this.deferredStartP2PTask = null;\n\n    const delay\n        = parseInt(options.config.p2p && options.config.p2p.backToP2PDelay, 10);\n\n    /**\n     * A delay given in seconds, before the conference switches back to P2P\n     * after the 3rd participant has left.\n     * @type {number}\n     */\n    this.backToP2PDelay = isNaN(delay) ? 5 : delay;\n    logger.info(`backToP2PDelay: ${this.backToP2PDelay}`);\n\n    /**\n     * If set to <tt>true</tt> it means the P2P ICE is no longer connected.\n     * When <tt>false</tt> it means that P2P ICE (media) connection is up\n     * and running.\n     * @type {boolean}\n     */\n    this.isP2PConnectionInterrupted = false;\n\n    /**\n     * Flag set to <tt>true</tt> when P2P session has been established\n     * (ICE has been connected) and this conference is currently in the peer to\n     * peer mode (P2P connection is the active one).\n     * @type {boolean}\n     */\n    this.p2p = false;\n\n    /**\n     * A JingleSession for the direct peer to peer connection.\n     * @type {JingleSessionPC}\n     */\n    this.p2pJingleSession = null;\n\n    this.videoSIPGWHandler = new VideoSIPGW(this.room);\n    this.recordingManager = new RecordingManager(this.room);\n\n    /**\n     * If the conference.joined event has been sent this will store the timestamp when it happened.\n     *\n     * @type {undefined|number}\n     * @private\n     */\n    this._conferenceJoinAnalyticsEventSent = undefined;\n\n    /**\n     * End-to-End Encryption. Make it available if supported.\n     */\n    if (this.isE2EESupported()) {\n        logger.info('End-to-End Encryption is supported');\n\n        this._e2eEncryption = new E2EEncryption(this);\n    }\n\n    /**\n     * Flag set to <tt>true</tt> when Jicofo sends a presence message indicating that the max audio sender limit has\n     * been reached for the call. Once this is set, unmuting audio will be disabled from the client until it gets reset\n     * again by Jicofo.\n     */\n    this._audioSenderLimitReached = undefined;\n\n    /**\n     * Flag set to <tt>true</tt> when Jicofo sends a presence message indicating that the max video sender limit has\n     * been reached for the call. Once this is set, unmuting video will be disabled from the client until it gets reset\n     * again by Jicofo.\n     */\n    this._videoSenderLimitReached = undefined;\n\n\n\n    this.handleSubtitles();\n\n    if (options.config.enableLocalRecording) {\n        this.recordingController = new RecordingController();\n        this.recordingController.registerEvents(this);\n    }\n\n    if (options.config.enableAnalytics) {\n        this.enableAnalytics();\n    }\n\n    if (options.config.iAmRecorder) {\n        this.removeCommand('userinfo');\n        this.sendCommand(\n            'userinfo',\n            {\n                attributes: {\n                    xmlns: 'http://jitsi.org/jitmeet/userinfo',\n                    robot: true\n                }\n            });\n    }\n\n    const self = this;\n\n    window.APP = {\n        conference: {\n            _room: this,\n            get membersCount() {\n                return self.getParticipantsWithoutHidden().length + 1;\n            },\n            getStats() {\n                return self.connectionQuality.getStats();\n            }\n        }\n    };\n    this.localTracksDuration = new LocalTracksDuration(this);\n    this.sessions = {};\n    this.user = options.user;\n}\n\n// FIXME convert JitsiConference to ES6 - ASAP !\nJitsiConference.prototype.constructor = JitsiConference;\n\n/**\n * Create a resource for the a jid. We use the room nickname (the resource part\n * of the occupant JID, see XEP-0045) as the endpoint ID in colibri. We require\n * endpoint IDs to be 8 hex digits because in some cases they get serialized\n * into a 32bit field.\n *\n * @param {string} jid - The id set onto the XMPP connection.\n * @param {boolean} isAuthenticatedUser - Whether or not the user has connected\n * to the XMPP service with a password.\n * @returns {string}\n * @static\n */\nJitsiConference.resourceCreator = function(jid, isAuthenticatedUser) {\n    let mucNickname;\n\n    if (isAuthenticatedUser) {\n        // For authenticated users generate a random ID.\n        mucNickname = RandomUtil.randomHexString(8).toLowerCase();\n    } else {\n        // We try to use the first part of the node (which for anonymous users\n        // on prosody is a UUID) to match the previous behavior (and maybe make\n        // debugging easier).\n        mucNickname = Strophe.getNodeFromJid(jid)?.substr(0, 8)\n            .toLowerCase();\n\n        // But if this doesn't have the required format we just generate a new\n        // random nickname.\n        const re = /[0-9a-f]{8}/g;\n\n        if (!mucNickname || !re.test(mucNickname)) {\n            mucNickname = RandomUtil.randomHexString(8).toLowerCase();\n        }\n    }\n\n    return mucNickname;\n};\n\n/**\n * Initializes the conference object properties\n * @param options {object}\n * @param options.connection {JitsiConnection} overrides this.connection\n */\nJitsiConference.prototype._init = function(options = {}) {\n    this.eventManager.setupXMPPListeners();\n\n    const { config } = this.options;\n\n    // Get the codec preference settings from config.js.\n    // 'preferH264' and 'disableH264' settings have been deprecated for a while,\n    // 'preferredCodec' and 'disabledCodec' will have precedence over them.\n    const codecSettings = {\n        disabledCodec: config.videoQuality\n            ? config.videoQuality.disabledCodec\n            : config.p2p && config.p2p.disableH264 && CodecMimeType.H264,\n        enforcePreferredCodec: config.videoQuality && config.videoQuality.enforcePreferredCodec,\n        jvbCodec: (config.videoQuality && config.videoQuality.preferredCodec)\n            || (config.preferH264 && CodecMimeType.H264),\n        p2pCodec: config.p2p\n            ? config.p2p.preferredCodec || (config.p2p.preferH264 && CodecMimeType.H264)\n            : CodecMimeType.VP8\n    };\n\n    this.codecSelection = new CodecSelection(this, codecSettings);\n    this._statsCurrentId = config.statisticsId ? config.statisticsId : Settings.callStatsUserName;\n    this.room = this.xmpp.createRoom(\n        this.options.name, {\n            ...config,\n            statsId: this._statsCurrentId\n        },\n        JitsiConference.resourceCreator\n    );\n\n    this._signalingLayer.setChatRoom(this.room);\n\n    // Connection interrupted/restored listeners\n    this._onIceConnectionInterrupted\n        = this._onIceConnectionInterrupted.bind(this);\n    this.room.addListener(\n        XMPPEvents.CONNECTION_INTERRUPTED, this._onIceConnectionInterrupted);\n\n    this._onIceConnectionRestored = this._onIceConnectionRestored.bind(this);\n    this.room.addListener(\n        XMPPEvents.CONNECTION_RESTORED, this._onIceConnectionRestored);\n\n    this._onIceConnectionEstablished\n        = this._onIceConnectionEstablished.bind(this);\n    this.room.addListener(\n        XMPPEvents.CONNECTION_ESTABLISHED, this._onIceConnectionEstablished);\n\n    this._updateProperties = this._updateProperties.bind(this);\n    this.room.addListener(XMPPEvents.CONFERENCE_PROPERTIES_CHANGED,\n        this._updateProperties);\n\n    this._sendConferenceJoinAnalyticsEvent = this._sendConferenceJoinAnalyticsEvent.bind(this);\n    this.room.addListener(XMPPEvents.MEETING_ID_SET, this._sendConferenceJoinAnalyticsEvent);\n\n    this._removeLocalSourceOnReject = this._removeLocalSourceOnReject.bind(this);\n    this._updateRoomPresence = this._updateRoomPresence.bind(this);\n    this.room.addListener(XMPPEvents.SESSION_ACCEPT, this._updateRoomPresence);\n    this.room.addListener(XMPPEvents.SOURCE_ADD, this._updateRoomPresence);\n    this.room.addListener(XMPPEvents.SOURCE_ADD_ERROR, this._removeLocalSourceOnReject);\n    this.room.addListener(XMPPEvents.SOURCE_REMOVE, this._updateRoomPresence);\n\n    this.e2eping = new E2ePing(\n        this,\n        config,\n        (message, to) => {\n            try {\n                this.sendMessage(\n                    message, to, true /* sendThroughVideobridge */);\n            } catch (error) {\n                logger.warn('Failed to send E2E ping request or response.', error && error.msg);\n            }\n        });\n\n    if (!this.rtc) {\n        this.rtc = new RTC(this, options);\n        this.eventManager.setupRTCListeners();\n        if (FeatureFlags.isSourceNameSignalingEnabled()) {\n            this._registerRtcListeners(this.rtc);\n        }\n    }\n\n    this.receiveVideoController = new ReceiveVideoController(this, this.rtc);\n    this.sendVideoController = new SendVideoController(this, this.rtc);\n\n    this.participantConnectionStatus\n        = new ParticipantConnectionStatusHandler(\n            this.rtc,\n            this,\n            {\n                // These options are not public API, leaving it here only as an entry point through config for tuning\n                // up purposes. Default values should be adjusted as soon as optimal values are discovered.\n                p2pRtcMuteTimeout: config._p2pConnStatusRtcMuteTimeout,\n                rtcMuteTimeout: config._peerConnStatusRtcMuteTimeout,\n                outOfLastNTimeout: config._peerConnStatusOutOfLastNTimeout\n            });\n    this.participantConnectionStatus.init();\n\n    // Add the ability to enable callStats only on a percentage of users based on config.js settings.\n    let enableCallStats = true;\n\n    if (config.testing && config.testing.callStatsThreshold) {\n        enableCallStats = (Math.random() * 100) <= config.testing.callStatsThreshold;\n    }\n\n    if (!this.statistics) {\n        this.statistics = new Statistics(this.xmpp, {\n            aliasName: this._statsCurrentId,\n            userName: config.statisticsDisplayName ? config.statisticsDisplayName : this.myUserId(),\n            confID: config.confID || `${this.connection.options.hosts.domain}/${this.options.name}`,\n            siteID: config.siteID,\n            customScriptUrl: config.callStatsCustomScriptUrl,\n            callStatsID: config.callStatsID,\n            callStatsSecret: config.callStatsSecret,\n            callStatsApplicationLogsDisabled: config.callStatsApplicationLogsDisabled,\n            enableCallStats,\n            roomName: this.options.name,\n            applicationName: config.applicationName,\n            getWiFiStatsMethod: config.getWiFiStatsMethod,\n            configParams: config.callStatsConfigParams\n        });\n        Statistics.analytics.addPermanentProperties({\n            'callstats_name': this._statsCurrentId\n        });\n\n        // Start performance observer for monitoring long tasks\n        if (config.longTasksStatsInterval) {\n            this.statistics.attachLongTasksStats(this);\n        }\n    }\n\n    this.eventManager.setupChatRoomListeners();\n\n    // Always add listeners because on reload we are executing leave and the\n    // listeners are removed from statistics module.\n    this.eventManager.setupStatisticsListeners();\n\n    // Disable VAD processing on Safari since it causes audio input to\n    // fail on some of the mobile devices.\n    if (config.enableTalkWhileMuted && browser.supportsVADDetection()) {\n        // If VAD processor factory method is provided uses VAD based detection, otherwise fallback to audio level\n        // based detection.\n        if (config.createVADProcessor) {\n            logger.info('Using VAD detection for generating talk while muted events');\n\n            if (!this._audioAnalyser) {\n                this._audioAnalyser = new VADAudioAnalyser(this, config.createVADProcessor);\n            }\n\n            const vadTalkMutedDetection = new VADTalkMutedDetection();\n\n            vadTalkMutedDetection.on(DetectionEvents.VAD_TALK_WHILE_MUTED, () =>\n                this.eventEmitter.emit(JitsiConferenceEvents.TALK_WHILE_MUTED));\n\n            this._audioAnalyser.addVADDetectionService(vadTalkMutedDetection);\n        } else {\n            logger.warn('No VAD Processor was provided. Talk while muted detection service was not initialized!');\n        }\n    }\n\n    // Disable noisy mic detection on safari since it causes the audio input to\n    // fail on Safari on iPadOS.\n    if (config.enableNoisyMicDetection && browser.supportsVADDetection()) {\n        if (config.createVADProcessor) {\n            if (!this._audioAnalyser) {\n                this._audioAnalyser = new VADAudioAnalyser(this, config.createVADProcessor);\n            }\n\n            const vadNoiseDetection = new VADNoiseDetection();\n\n            vadNoiseDetection.on(DetectionEvents.VAD_NOISY_DEVICE, () =>\n                this.eventEmitter.emit(JitsiConferenceEvents.NOISY_MIC));\n\n            this._audioAnalyser.addVADDetectionService(vadNoiseDetection);\n        } else {\n            logger.warn('No VAD Processor was provided. Noisy microphone detection service was not initialized!');\n        }\n    }\n\n    // Generates events based on no audio input detector.\n    if (config.enableNoAudioDetection) {\n        this._noAudioSignalDetection = new NoAudioSignalDetection(this);\n        this._noAudioSignalDetection.on(DetectionEvents.NO_AUDIO_INPUT, () => {\n            this.eventEmitter.emit(JitsiConferenceEvents.NO_AUDIO_INPUT);\n        });\n        this._noAudioSignalDetection.on(DetectionEvents.AUDIO_INPUT_STATE_CHANGE, hasAudioSignal => {\n            this.eventEmitter.emit(JitsiConferenceEvents.AUDIO_INPUT_STATE_CHANGE, hasAudioSignal);\n        });\n    }\n\n\n    if ('channelLastN' in config) {\n        this.setLastN(config.channelLastN);\n    }\n\n    /**\n     * Emits {@link JitsiConferenceEvents.JVB121_STATUS}.\n     * @type {Jvb121EventGenerator}\n     */\n    this.jvb121Status = new Jvb121EventGenerator(this);\n\n    // creates dominant speaker detection that works only in p2p mode\n    this.p2pDominantSpeakerDetection = new P2PDominantSpeakerDetection(this);\n\n    if (config && config.deploymentInfo && config.deploymentInfo.userRegion) {\n        this.setLocalParticipantProperty(\n            'region', config.deploymentInfo.userRegion);\n    }\n\n    // Publish the codec type to presence.\n    this.setLocalParticipantProperty('codecType', this.codecSelection.getPreferredCodec());\n\n    // Set transcription language presence extension.\n    // In case the language config is undefined or has the default value that the transcriber uses\n    // (in our case Jigasi uses 'en-US'), don't set the participant property in order to avoid\n    // needlessly polluting the presence stanza.\n    if (config && config.transcriptionLanguage && config.transcriptionLanguage !== 'en-US') {\n        this.setLocalParticipantProperty('transcription_language', config.transcriptionLanguage);\n    }\n};\n\n/**\n * Joins the conference.\n * @param password {string} the password\n * @param replaceParticipant {boolean} whether the current join replaces\n * an existing participant with same jwt from the meeting.\n */\nJitsiConference.prototype.join = function(password, replaceParticipant = false) {\n    if (this.room) {\n        this.room.join(password, replaceParticipant).then(() => this._maybeSetSITimeout());\n    }\n};\n\n/**\n * Authenticates and upgrades the role of the local participant/user.\n *\n * @returns {Object} A <tt>thenable</tt> which (1) settles when the process of\n * authenticating and upgrading the role of the local participant/user finishes\n * and (2) has a <tt>cancel</tt> method that allows the caller to interrupt the\n * process.\n */\nJitsiConference.prototype.authenticateAndUpgradeRole = function(options) {\n    return authenticateAndUpgradeRole.call(this, {\n        ...options,\n        onCreateResource: JitsiConference.resourceCreator\n    });\n};\n\n/**\n * Check if joined to the conference.\n */\nJitsiConference.prototype.isJoined = function() {\n    return this.room && this.room.joined;\n};\n\n/**\n * Tells whether or not the P2P mode is enabled in the configuration.\n * @return {boolean}\n */\nJitsiConference.prototype.isP2PEnabled = function() {\n    return Boolean(this.options.config.p2p && this.options.config.p2p.enabled)\n\n        // FIXME: remove once we have a default config template. -saghul\n        || typeof this.options.config.p2p === 'undefined';\n};\n\n/**\n * When in P2P test mode, the conference will not automatically switch to P2P\n * when there 2 participants.\n * @return {boolean}\n */\nJitsiConference.prototype.isP2PTestModeEnabled = function() {\n    return Boolean(this.options.config.testing\n        && this.options.config.testing.p2pTestMode);\n};\n\n/**\n * Leaves the conference.\n * @returns {Promise}\n */\nJitsiConference.prototype.leave = async function() {\n    if (this.participantConnectionStatus) {\n        this.participantConnectionStatus.dispose();\n        this.participantConnectionStatus = null;\n    }\n    if (this.avgRtpStatsReporter) {\n        this.avgRtpStatsReporter.dispose();\n        this.avgRtpStatsReporter = null;\n    }\n\n    if (this._audioOutputProblemDetector) {\n        this._audioOutputProblemDetector.dispose();\n        this._audioOutputProblemDetector = null;\n    }\n\n    if (this.e2eping) {\n        this.e2eping.stop();\n        this.e2eping = null;\n    }\n\n    this.getLocalTracks().forEach(track => this.onLocalTrackRemoved(track));\n\n    this.rtc.closeBridgeChannel();\n\n    this._sendConferenceLeftAnalyticsEvent();\n\n    if (this.statistics) {\n        this.statistics.dispose();\n    }\n\n    this._delayedIceFailed && this._delayedIceFailed.cancel();\n\n    this._maybeClearSITimeout();\n\n    // Close both JVb and P2P JingleSessions\n    if (this.jvbJingleSession) {\n        this.jvbJingleSession.close();\n        this.jvbJingleSession = null;\n    }\n    if (this.p2pJingleSession) {\n        this.p2pJingleSession.close();\n        this.p2pJingleSession = null;\n    }\n\n    // Leave the conference. If this.room == null we are calling second time leave().\n    if (!this.room) {\n        throw new Error('The conference is has been already left');\n    }\n\n    const room = this.room;\n\n    // Unregister connection state listeners\n    room.removeListener(\n        XMPPEvents.CONNECTION_INTERRUPTED,\n        this._onIceConnectionInterrupted);\n    room.removeListener(\n        XMPPEvents.CONNECTION_RESTORED,\n        this._onIceConnectionRestored);\n    room.removeListener(\n        XMPPEvents.CONNECTION_ESTABLISHED,\n        this._onIceConnectionEstablished);\n\n    room.removeListener(\n        XMPPEvents.CONFERENCE_PROPERTIES_CHANGED,\n        this._updateProperties);\n\n    room.removeListener(XMPPEvents.MEETING_ID_SET, this._sendConferenceJoinAnalyticsEvent);\n    room.removeListener(XMPPEvents.SESSION_ACCEPT, this._updateRoomPresence);\n    room.removeListener(XMPPEvents.SOURCE_ADD, this._updateRoomPresence);\n    room.removeListener(XMPPEvents.SOURCE_ADD_ERROR, this._removeLocalSourceOnReject);\n    room.removeListener(XMPPEvents.SOURCE_REMOVE, this._updateRoomPresence);\n\n    this.eventManager.removeXMPPListeners();\n\n    this._signalingLayer.setChatRoom(null);\n\n    this.room = null;\n\n    let leaveError;\n\n    try {\n        await room.leave();\n    } catch (err) {\n        leaveError = err;\n\n        // Remove all participants because currently the conference\n        // won't be usable anyway. This is done on success automatically\n        // by the ChatRoom instance.\n        this.getParticipants().forEach(\n            participant => this.onMemberLeft(participant.getJid()));\n    }\n\n    if (this.rtc) {\n        this.rtc.destroy();\n    }\n\n    if (leaveError) {\n        throw leaveError;\n    }\n};\n\n/**\n * Returns the currently active media session if any.\n *\n * @returns {JingleSessionPC|undefined}\n * @private\n */\nJitsiConference.prototype._getActiveMediaSession = function() {\n    return this.isP2PActive() ? this.p2pJingleSession : this.jvbJingleSession;\n};\n\n/**\n * Returns an array containing all media sessions existing in this conference.\n *\n * @returns {Array<JingleSessionPC>}\n * @private\n */\nJitsiConference.prototype._getMediaSessions = function() {\n    const sessions = [];\n\n    this.jvbJingleSession && sessions.push(this.jvbJingleSession);\n    this.p2pJingleSession && sessions.push(this.p2pJingleSession);\n\n    return sessions;\n};\n\n/**\n * Registers event listeners on the RTC instance.\n * @param {RTC} rtc - the RTC module instance used by this conference.\n * @private\n * @returns {void}\n */\nJitsiConference.prototype._registerRtcListeners = function(rtc) {\n    rtc.addListener(RTCEvents.DATA_CHANNEL_OPEN, () => {\n        for (const localTrack of this.rtc.localTracks) {\n            localTrack.isVideoTrack() && this._sendBridgeVideoTypeMessage(localTrack);\n        }\n    });\n};\n\n/**\n * Sends the 'VideoTypeMessage' to the bridge on the bridge channel so that the bridge can make bitrate allocation\n * decisions based on the video type of the local source.\n *\n * @param {JitsiLocalTrack} localtrack - The track associated with the local source signaled to the bridge.\n * @returns {void}\n * @private\n */\nJitsiConference.prototype._sendBridgeVideoTypeMessage = function(localtrack) {\n    let videoType = !localtrack || localtrack.isMuted() ? BridgeVideoType.NONE : localtrack.getVideoType();\n\n    if (videoType === BridgeVideoType.DESKTOP && this._desktopSharingFrameRate > SS_DEFAULT_FRAME_RATE) {\n        videoType = BridgeVideoType.DESKTOP_HIGH_FPS;\n    }\n\n    if (FeatureFlags.isSourceNameSignalingEnabled()) {\n        this.rtc.sendSourceVideoType(\n            getSourceNameForJitsiTrack(this.myUserId(), MediaType.VIDEO, 0),\n            videoType\n        );\n    } else {\n        this.rtc.setVideoType(videoType);\n    }\n};\n\n/**\n * Returns name of this conference.\n */\nJitsiConference.prototype.getName = function() {\n    return this.options.name.toString();\n};\n\n/**\n * Returns the {@link JitsiConnection} used by this this conference.\n */\nJitsiConference.prototype.getConnection = function() {\n    return this.connection;\n};\n\n/**\n * Check if authentication is enabled for this conference.\n */\nJitsiConference.prototype.isAuthEnabled = function() {\n    return this.authEnabled;\n};\n\n/**\n * Check if user is logged in.\n */\nJitsiConference.prototype.isLoggedIn = function() {\n    return Boolean(this.authIdentity);\n};\n\n/**\n * Get authorized login.\n */\nJitsiConference.prototype.getAuthLogin = function() {\n    return this.authIdentity;\n};\n\n/**\n * Check if external authentication is enabled for this conference.\n */\nJitsiConference.prototype.isExternalAuthEnabled = function() {\n    return this.room && this.room.moderator.isExternalAuthEnabled();\n};\n\n/**\n * Get url for external authentication.\n * @param {boolean} [urlForPopup] if true then return url for login popup,\n *                                else url of login page.\n * @returns {Promise}\n */\nJitsiConference.prototype.getExternalAuthUrl = function(urlForPopup) {\n    return new Promise((resolve, reject) => {\n        if (!this.isExternalAuthEnabled()) {\n            reject();\n\n            return;\n        }\n        if (urlForPopup) {\n            this.room.moderator.getPopupLoginUrl(resolve, reject);\n        } else {\n            this.room.moderator.getLoginUrl(resolve, reject);\n        }\n    });\n};\n\n/**\n * Returns the local tracks of the given media type, or all local tracks if no\n * specific type is given.\n * @param {MediaType} [mediaType] Optional media type (audio or video).\n */\nJitsiConference.prototype.getLocalTracks = function(mediaType) {\n    let tracks = [];\n\n    if (this.rtc) {\n        tracks = this.rtc.getLocalTracks(mediaType);\n    }\n\n    return tracks;\n};\n\n/**\n * Obtains local audio track.\n * @return {JitsiLocalTrack|null}\n */\nJitsiConference.prototype.getLocalAudioTrack = function() {\n    return this.rtc ? this.rtc.getLocalAudioTrack() : null;\n};\n\n/**\n * Obtains local video track.\n * @return {JitsiLocalTrack|null}\n */\nJitsiConference.prototype.getLocalVideoTrack = function() {\n    return this.rtc ? this.rtc.getLocalVideoTrack() : null;\n};\n\n/**\n * Obtains the performance statistics.\n * @returns {Object|null}\n */\nJitsiConference.prototype.getPerformanceStats = function() {\n    return {\n        longTasksStats: this.statistics.getLongTasksStats()\n    };\n};\n\n/**\n * Attaches a handler for events(For example - \"participant joined\".) in the\n * conference. All possible event are defined in JitsiConferenceEvents.\n * @param eventId the event ID.\n * @param handler handler for the event.\n *\n * Note: consider adding eventing functionality by extending an EventEmitter\n * impl, instead of rolling ourselves\n */\nJitsiConference.prototype.on = function(eventId, handler) {\n    if (this.eventEmitter) {\n        this.eventEmitter.on(eventId, handler);\n    }\n};\n\n/**\n * Removes event listener\n * @param eventId the event ID.\n * @param [handler] optional, the specific handler to unbind\n *\n * Note: consider adding eventing functionality by extending an EventEmitter\n * impl, instead of rolling ourselves\n */\nJitsiConference.prototype.off = function(eventId, handler) {\n    if (this.eventEmitter) {\n        this.eventEmitter.removeListener(eventId, handler);\n    }\n};\n\n// Common aliases for event emitter\nJitsiConference.prototype.addEventListener = JitsiConference.prototype.on;\nJitsiConference.prototype.removeEventListener = JitsiConference.prototype.off;\n\n/**\n * Receives notifications from other participants about commands / custom events\n * (sent by sendCommand or sendCommandOnce methods).\n * @param command {String} the name of the command\n * @param handler {Function} handler for the command\n */\nJitsiConference.prototype.addCommandListener = function(command, handler) {\n    if (this.room) {\n        this.room.addPresenceListener(command, handler);\n    }\n};\n\n/**\n  * Removes command  listener\n  * @param command {String} the name of the command\n  * @param handler {Function} handler to remove for the command\n  */\nJitsiConference.prototype.removeCommandListener = function(command, handler) {\n    if (this.room) {\n        this.room.removePresenceListener(command, handler);\n    }\n};\n\n/**\n * Sends text message to the other participants in the conference\n * @param message the text message.\n * @param elementName the element name to encapsulate the message.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.sendTextMessage = function(message, elementName = 'body') {\n    if (this.room) {\n        this.room.sendMessage(message, elementName);\n    }\n};\n\n/**\n * Send private text message to another participant of the conference\n * @param id the id of the participant to send a private message.\n * @param message the text message.\n * @param elementName the element name to encapsulate the message.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.sendPrivateTextMessage = function(id, message, elementName = 'body') {\n    if (this.room) {\n        this.room.sendPrivateMessage(id, message, elementName);\n    }\n};\n\n/**\n * Send presence command.\n * @param name {String} the name of the command.\n * @param values {Object} with keys and values that will be sent.\n **/\nJitsiConference.prototype.sendCommand = function(name, values) {\n    if (this.room) {\n        this.room.addOrReplaceInPresence(name, values) && this.room.sendPresence();\n    } else {\n        logger.warn('Not sending a command, room not initialized.');\n    }\n\n};\n\n/**\n * Send presence command one time.\n * @param name {String} the name of the command.\n * @param values {Object} with keys and values that will be sent.\n **/\nJitsiConference.prototype.sendCommandOnce = function(name, values) {\n    this.sendCommand(name, values);\n    this.removeCommand(name);\n};\n\n/**\n * Removes presence command.\n * @param name {String} the name of the command.\n **/\nJitsiConference.prototype.removeCommand = function(name) {\n    if (this.room) {\n        this.room.removeFromPresence(name);\n    }\n};\n\n/**\n * Sets the display name for this conference.\n * @param name the display name to set\n */\nJitsiConference.prototype.setDisplayName = function(name) {\n    if (this.room) {\n        const nickKey = 'nick';\n\n        // if there is no display name already set, avoid setting an empty one\n        if (!name && !this.room.getFromPresence(nickKey)) {\n            return;\n        }\n\n        this.room.addOrReplaceInPresence(nickKey, {\n            attributes: { xmlns: 'http://jabber.org/protocol/nick' },\n            value: name\n        }) && this.room.sendPresence();\n    }\n};\n\n/**\n * Set new subject for this conference. (available only for moderator)\n * @param {string} subject new subject\n */\nJitsiConference.prototype.setSubject = function(subject) {\n    if (this.room && this.isModerator()) {\n        this.room.setSubject(subject);\n    } else {\n        logger.warn(`Failed to set subject, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator'}`);\n    }\n};\n\n/**\n * Get a transcriber object for all current participants in this conference\n * @return {Transcriber} the transcriber object\n */\nJitsiConference.prototype.getTranscriber = function() {\n    if (this.transcriber === undefined) {\n        this.transcriber = new Transcriber();\n\n        // add all existing local audio tracks to the transcriber\n        const localAudioTracks = this.getLocalTracks(MediaType.AUDIO);\n\n        for (const localAudio of localAudioTracks) {\n            this.transcriber.addTrack(localAudio);\n        }\n\n        // and all remote audio tracks\n        const remoteAudioTracks = this.rtc.getRemoteTracks(MediaType.AUDIO);\n\n        for (const remoteTrack of remoteAudioTracks) {\n            this.transcriber.addTrack(remoteTrack);\n        }\n    }\n\n    return this.transcriber;\n};\n\n/**\n * Returns the transcription status.\n *\n * @returns {String} \"on\" or \"off\".\n */\nJitsiConference.prototype.getTranscriptionStatus = function() {\n    return this.room.transcriptionStatus;\n};\n\n/**\n * Adds JitsiLocalTrack object to the conference.\n * @param {JitsiLocalTrack} track the JitsiLocalTrack object.\n * @returns {Promise<JitsiLocalTrack>}\n * @throws {Error} if the specified track is a video track and there is already\n * another video track in the conference.\n */\nJitsiConference.prototype.addTrack = function(track) {\n    if (!track) {\n        return;\n    }\n    if (track.isAudioTrack() && this.options.config.startAudioMuted) {\n        track.mute();\n    }\n    if (track.isVideoTrack() && this.options.config.startVideoMuted) {\n        track.mute();\n    }\n    const mediaType = track.getType();\n    const localTracks = this.rtc.getLocalTracks(mediaType);\n\n    // Ensure there's exactly 1 local track of each media type in the conference.\n    if (localTracks.length > 0) {\n        // Don't be excessively harsh and severe if the API client happens to attempt to add the same local track twice.\n        if (track === localTracks[0]) {\n            return Promise.resolve(track);\n        }\n\n        if (FeatureFlags.isMultiStreamSupportEnabled() && mediaType === MediaType.VIDEO) {\n            const addTrackPromises = [];\n\n            this.p2pJingleSession && addTrackPromises.push(this.p2pJingleSession.addTrack(track));\n            this.jvbJingleSession && addTrackPromises.push(this.jvbJingleSession.addTrack(track));\n\n            return Promise.all(addTrackPromises)\n                .then(() => {\n                    this._setupNewTrack(track);\n\n                    // TODO Update presence and sent videoType message.\n                    if (this.isMutedByFocus || this.isVideoMutedByFocus) {\n                        this._fireMuteChangeEvent(track);\n                    }\n                });\n        }\n\n        return Promise.reject(new Error(`Cannot add second ${mediaType} track to the conference`));\n    }\n\n    return this.replaceTrack(null, track);\n};\n\n/**\n * Fires TRACK_AUDIO_LEVEL_CHANGED change conference event (for local tracks).\n * @param {number} audioLevel the audio level\n * @param {TraceablePeerConnection} [tpc]\n */\nJitsiConference.prototype._fireAudioLevelChangeEvent = function(audioLevel, tpc) {\n    const activeTpc = this.getActivePeerConnection();\n\n    // There will be no TraceablePeerConnection if audio levels do not come from\n    // a peerconnection. LocalStatsCollector.js measures audio levels using Web\n    // Audio Analyser API and emits local audio levels events through\n    // JitsiTrack.setAudioLevel, but does not provide TPC instance which is\n    // optional.\n    if (!tpc || activeTpc === tpc) {\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED,\n            this.myUserId(), audioLevel);\n    }\n};\n\n/**\n * Fires TRACK_MUTE_CHANGED change conference event.\n * @param track the JitsiTrack object related to the event.\n */\nJitsiConference.prototype._fireMuteChangeEvent = function(track) {\n    // check if track was muted by focus and now is unmuted by user\n    if (this.isMutedByFocus && track.isAudioTrack() && !track.isMuted()) {\n        this.isMutedByFocus = false;\n\n        // unmute local user on server\n        this.room.muteParticipant(this.room.myroomjid, false, MediaType.AUDIO);\n    } else if (this.isVideoMutedByFocus && track.isVideoTrack() && !track.isMuted()) {\n        this.isVideoMutedByFocus = false;\n\n        // unmute local user on server\n        this.room.muteParticipant(this.room.myroomjid, false, MediaType.VIDEO);\n    }\n\n    let actorParticipant;\n\n    if (this.mutedByFocusActor && track.isAudioTrack()) {\n        const actorId = Strophe.getResourceFromJid(this.mutedByFocusActor);\n\n        actorParticipant = this.participants[actorId];\n    } else if (this.mutedVideoByFocusActor && track.isVideoTrack()) {\n        const actorId = Strophe.getResourceFromJid(this.mutedVideoByFocusActor);\n\n        actorParticipant = this.participants[actorId];\n    }\n\n    // Send the video type message to the bridge if the track is not removed/added to the pc as part of\n    // the mute/unmute operation. This currently happens only on Firefox.\n    if (track.isVideoTrack() && !browser.doesVideoMuteByStreamRemove()) {\n        this._sendBridgeVideoTypeMessage(track);\n    }\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_MUTE_CHANGED, track, actorParticipant);\n};\n\n/**\n * Returns the list of local tracks that need to be added to the peerconnection on join.\n * This takes the startAudioMuted/startVideoMuted flags into consideration since we do not\n * want to add the tracks if the user joins the call audio/video muted. The tracks will be\n * added when the user unmutes for the first time.\n * @returns {Array<JitsiLocalTrack>} - list of local tracks that are unmuted.\n */\nJitsiConference.prototype._getInitialLocalTracks = function() {\n    // Always add the audio track on certain platforms:\n    //  * Safari / WebKit: because of a known issue where audio playout doesn't happen\n    //    if the user joins audio and video muted.\n    //  * React Native: after iOS 15, if a user joins muted they won't be able to unmute.\n    return this.getLocalTracks()\n        .filter(track => {\n            const trackType = track.getType();\n\n            if (trackType === MediaType.AUDIO\n                    && (!this.isStartAudioMuted() || browser.isWebKitBased() || browser.isReactNative())) {\n                return true;\n            } else if (trackType === MediaType.VIDEO && !this.isStartVideoMuted()) {\n                return true;\n            }\n\n            return false;\n        });\n};\n\n/**\n * Clear JitsiLocalTrack properties and listeners.\n * @param track the JitsiLocalTrack object.\n */\nJitsiConference.prototype.onLocalTrackRemoved = function(track) {\n    track.setConference(null);\n    this.rtc.removeLocalTrack(track);\n    track.removeEventListener(JitsiTrackEvents.TRACK_MUTE_CHANGED, track.muteHandler);\n    if (track.isAudioTrack()) {\n        track.removeEventListener(JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED, track.audioLevelHandler);\n    }\n\n    // send event for stopping screen sharing\n    // FIXME: we assume we have only one screen sharing track\n    // if we change this we need to fix this check\n    if (track.isVideoTrack() && track.videoType === VideoType.DESKTOP) {\n        this.statistics.sendScreenSharingEvent(false);\n    }\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_REMOVED, track);\n};\n\n/**\n * Removes JitsiLocalTrack from the conference and performs\n * a new offer/answer cycle.\n * @param {JitsiLocalTrack} track\n * @returns {Promise}\n */\nJitsiConference.prototype.removeTrack = function(track) {\n    return this.replaceTrack(track, null);\n};\n\n/**\n * Replaces oldTrack with newTrack and performs a single offer/answer\n *  cycle after both operations are done.  Either oldTrack or newTrack\n *  can be null; replacing a valid 'oldTrack' with a null 'newTrack'\n *  effectively just removes 'oldTrack'\n * @param {JitsiLocalTrack} oldTrack the current stream in use to be replaced\n * @param {JitsiLocalTrack} newTrack the new stream to use\n * @returns {Promise} resolves when the replacement is finished\n */\nJitsiConference.prototype.replaceTrack = function(oldTrack, newTrack) {\n    const oldTrackBelongsToConference = this === oldTrack?.conference;\n\n    if (oldTrackBelongsToConference && oldTrack.disposed) {\n        return Promise.reject(new JitsiTrackError(JitsiTrackErrors.TRACK_IS_DISPOSED));\n    }\n    if (newTrack?.disposed) {\n        return Promise.reject(new JitsiTrackError(JitsiTrackErrors.TRACK_IS_DISPOSED));\n    }\n\n    if (oldTrack && !oldTrackBelongsToConference) {\n        logger.warn(`JitsiConference.replaceTrack oldTrack (${oldTrack} does not belong to this conference`);\n    }\n\n    // Now replace the stream at the lower levels\n    return this._doReplaceTrack(oldTrackBelongsToConference ? oldTrack : null, newTrack)\n        .then(() => {\n            oldTrackBelongsToConference && this.onLocalTrackRemoved(oldTrack);\n            newTrack && this._setupNewTrack(newTrack);\n\n            // Send 'VideoTypeMessage' on the bridge channel when a video track is added/removed.\n            if ((oldTrackBelongsToConference && oldTrack?.isVideoTrack()) || newTrack?.isVideoTrack()) {\n                this._sendBridgeVideoTypeMessage(newTrack);\n            }\n\n            // updates presence when we replace the video tracks desktop with screen and screen with desktop\n            if (oldTrackBelongsToConference && oldTrack?.isVideoTrack()\n\n                // we do not want to send presence update during setEffect switching, which does remove and then add\n                && !(oldTrack?._setEffectInProgress || newTrack?._setEffectInProgress)) {\n                this._updateRoomPresence(this._getActiveMediaSession());\n            }\n\n            if (newTrack !== null && (this.isMutedByFocus || this.isVideoMutedByFocus)) {\n                this._fireMuteChangeEvent(newTrack);\n            }\n\n            return Promise.resolve();\n        })\n        .catch(error => {\n            logger.error(`replaceTrack failed: ${error?.stack}`);\n\n            return Promise.reject(error);\n        });\n};\n\n/**\n * Replaces the tracks at the lower level by going through the Jingle session\n * and WebRTC peer connection. The method will resolve immediately if there is\n * currently no JingleSession started.\n * @param {JitsiLocalTrack|null} oldTrack the track to be removed during\n * the process or <tt>null</t> if the method should act as \"add track\"\n * @param {JitsiLocalTrack|null} newTrack the new track to be added or\n * <tt>null</tt> if the method should act as \"remove track\"\n * @return {Promise} resolved when the process is done or rejected with a string\n * which describes the error.\n * @private\n */\nJitsiConference.prototype._doReplaceTrack = function(oldTrack, newTrack) {\n    const replaceTrackPromises = [];\n\n    if (this.jvbJingleSession) {\n        replaceTrackPromises.push(this.jvbJingleSession.replaceTrack(oldTrack, newTrack));\n    } else {\n        logger.info('_doReplaceTrack - no JVB JingleSession');\n    }\n\n    if (this.p2pJingleSession) {\n        replaceTrackPromises.push(this.p2pJingleSession.replaceTrack(oldTrack, newTrack));\n    } else {\n        logger.info('_doReplaceTrack - no P2P JingleSession');\n    }\n\n    return Promise.all(replaceTrackPromises);\n};\n\n/**\n * Handler for when a source-add for a local source is rejected by Jicofo.\n *\n * @param {JingleSessionPC} jingleSession - The media session.\n * @param {Error} error - The error message.\n * @param {MediaType} mediaType - The media type of the track associated with the source that was rejected.\n * @returns {void}\n */\nJitsiConference.prototype._removeLocalSourceOnReject = function(jingleSession, error, mediaType) {\n    if (!jingleSession) {\n        return;\n    }\n    logger.warn(`Source-add rejected on ${jingleSession}, reason=\"${error?.reason}\", message=\"${error?.msg}\"`);\n    const track = this.getLocalTracks(mediaType)[0];\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_UNMUTE_REJECTED, track);\n};\n\n/**\n * Operations related to creating a new track\n * @param {JitsiLocalTrack} newTrack the new track being created\n */\nJitsiConference.prototype._setupNewTrack = function(newTrack) {\n    const mediaType = newTrack.getType();\n\n    if (newTrack.isAudioTrack() || (newTrack.isVideoTrack() && newTrack.videoType !== VideoType.DESKTOP)) {\n        // Report active device to statistics\n        const devices = RTC.getCurrentlyAvailableMediaDevices();\n        const device = devices\n            .find(d => d.kind === `${newTrack.getTrack().kind}input` && d.label === newTrack.getTrack().label);\n\n        if (device) {\n            Statistics.sendActiveDeviceListEvent(RTC.getEventDataForActiveDevice(device));\n        }\n    }\n\n    // Create a source name for this track if it doesn't exist.\n    if (FeatureFlags.isSourceNameSignalingEnabled() && !newTrack.getSourceName()) {\n        const sourceName = getSourceNameForJitsiTrack(\n            this.myUserId(),\n            mediaType,\n            this.getLocalTracks(mediaType)?.length);\n\n        newTrack.setSourceName(sourceName);\n    }\n\n    this.rtc.addLocalTrack(newTrack);\n    newTrack.setConference(this);\n\n    // Add event handlers.\n    newTrack.muteHandler = this._fireMuteChangeEvent.bind(this, newTrack);\n    newTrack.addEventListener(JitsiTrackEvents.TRACK_MUTE_CHANGED, newTrack.muteHandler);\n\n    if (newTrack.isAudioTrack()) {\n        newTrack.audioLevelHandler = this._fireAudioLevelChangeEvent.bind(this);\n        newTrack.addEventListener(JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED, newTrack.audioLevelHandler);\n    }\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_ADDED, newTrack);\n};\n\n/**\n * Sets the video type.\n * @param track\n * @return <tt>true</tt> if video type was changed in presence.\n * @private\n */\nJitsiConference.prototype._setNewVideoType = function(track) {\n    if (FeatureFlags.isSourceNameSignalingEnabled() && track) {\n        // FIXME once legacy signaling using 'sendCommand' is removed, signalingLayer.setTrackVideoType must be adjusted\n        // to send the presence (not just modify it).\n        this._signalingLayer.setTrackVideoType(track.getSourceName(), track.videoType);\n\n        // TODO: Optimize to detect whether presence was changed, for now always report changed to send presence\n        return true;\n    }\n\n    const videoTypeTagName = 'videoType';\n\n    // if track is missing we revert to default type Camera, the case where we screenshare and\n    // we return to be video muted\n    const trackVideoType = track ? track.videoType : VideoType.CAMERA;\n\n    // if video type is camera and there is no videoType in presence, we skip adding it, as this is the default one\n    if (trackVideoType !== VideoType.CAMERA || this.room.getFromPresence(videoTypeTagName)) {\n        // we will not use this.sendCommand here to avoid sending the presence immediately, as later we may also set\n        // and the mute status\n        return this.room.addOrReplaceInPresence(videoTypeTagName, { value: trackVideoType });\n    }\n\n    return false;\n};\n\n/**\n * Sets mute status.\n * @param mediaType\n * @param localTrack\n * @param isMuted\n * @param <tt>true</tt> when presence was changed, <tt>false</tt> otherwise.\n * @private\n */\nJitsiConference.prototype._setTrackMuteStatus = function(mediaType, localTrack, isMuted) {\n    if (FeatureFlags.isSourceNameSignalingEnabled()) {\n        // TODO When legacy signaling part is removed, remember to adjust signalingLayer.setTrackMuteStatus, so that\n        // it triggers sending the presence (it only updates it for now, because the legacy code below sends).\n        this._signalingLayer.setTrackMuteStatus(localTrack?.getSourceName(), isMuted);\n    }\n\n    if (!this.room) {\n        return false;\n    }\n\n    if (mediaType === MediaType.AUDIO) {\n        return this.room.addAudioInfoToPresence(isMuted);\n    }\n\n    return this.room.addVideoInfoToPresence(isMuted);\n};\n\n/**\n * Method called by the {@link JitsiLocalTrack} (a video one) in order to add\n * back the underlying WebRTC MediaStream to the PeerConnection (which has\n * removed on video mute).\n * @param {JitsiLocalTrack} track the local track that will be added as part of\n * the unmute operation.\n * @return {Promise} resolved when the process is done or rejected with a string\n * which describes the error.\n */\nJitsiConference.prototype._addLocalTrackAsUnmute = function(track) {\n    const addAsUnmutePromises = [];\n\n    if (this.jvbJingleSession) {\n        addAsUnmutePromises.push(this.jvbJingleSession.addTrackAsUnmute(track));\n    } else {\n        logger.debug('Add local MediaStream as unmute - no JVB Jingle session started yet');\n    }\n\n    if (this.p2pJingleSession) {\n        addAsUnmutePromises.push(this.p2pJingleSession.addTrackAsUnmute(track));\n    } else {\n        logger.debug('Add local MediaStream as unmute - no P2P Jingle session started yet');\n    }\n\n    return Promise.allSettled(addAsUnmutePromises)\n        .then(() => {\n            // Signal the video type to the bridge.\n            track.isVideoTrack() && this._sendBridgeVideoTypeMessage(track);\n        });\n};\n\n/**\n * Method called by the {@link JitsiLocalTrack} (a video one) in order to remove\n * the underlying WebRTC MediaStream from the PeerConnection. The purpose of\n * that is to stop sending any data and turn off the HW camera device.\n * @param {JitsiLocalTrack} track the local track that will be removed.\n * @return {Promise}\n */\nJitsiConference.prototype._removeLocalTrackAsMute = function(track) {\n    const removeAsMutePromises = [];\n\n    if (this.jvbJingleSession) {\n        removeAsMutePromises.push(this.jvbJingleSession.removeTrackAsMute(track));\n    } else {\n        logger.debug('Remove local MediaStream - no JVB JingleSession started yet');\n    }\n    if (this.p2pJingleSession) {\n        removeAsMutePromises.push(this.p2pJingleSession.removeTrackAsMute(track));\n    } else {\n        logger.debug('Remove local MediaStream - no P2P JingleSession started yet');\n    }\n\n    return Promise.allSettled(removeAsMutePromises)\n        .then(() => {\n            // Signal the video type to the bridge.\n            track.isVideoTrack() && this._sendBridgeVideoTypeMessage();\n        });\n};\n\n/**\n * Get role of the local user.\n * @returns {string} user role: 'moderator' or 'none'\n */\nJitsiConference.prototype.getRole = function() {\n    return this.room.role;\n};\n\n/**\n * Returns whether or not the current conference has been joined as a hidden\n * user.\n *\n * @returns {boolean|null} True if hidden, false otherwise. Will return null if\n * no connection is active.\n */\nJitsiConference.prototype.isHidden = function() {\n    if (!this.connection) {\n        return null;\n    }\n\n    return Strophe.getDomainFromJid(this.connection.getJid())\n        === this.options.config.hiddenDomain;\n};\n\n/**\n * Check if local user is moderator.\n * @returns {boolean|null} true if local user is moderator, false otherwise. If\n * we're no longer in the conference room then <tt>null</tt> is returned.\n */\nJitsiConference.prototype.isModerator = function() {\n    return this.room ? this.room.isModerator() : null;\n};\n\n/**\n * Set password for the room.\n * @param {string} password new password for the room.\n * @returns {Promise}\n */\nJitsiConference.prototype.lock = function(password) {\n    if (!this.isModerator()) {\n        return Promise.reject(new Error('You are not moderator.'));\n    }\n\n    return new Promise((resolve, reject) => {\n        this.room.lockRoom(\n            password || '',\n            () => resolve(),\n            err => reject(err),\n            () => reject(JitsiConferenceErrors.PASSWORD_NOT_SUPPORTED));\n    });\n};\n\n/**\n * Remove password from the room.\n * @returns {Promise}\n */\nJitsiConference.prototype.unlock = function() {\n    return this.lock();\n};\n\n/**\n * Elects the participant with the given id to be the selected participant in\n * order to receive higher video quality (if simulcast is enabled).\n * Or cache it if channel is not created and send it once channel is available.\n * @param participantId the identifier of the participant\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\n * @returns {void}\n */\nJitsiConference.prototype.selectParticipant = function(participantId) {\n    this.selectParticipants([ participantId ]);\n};\n\n/*\n * Elects participants with given ids to be the selected participants in order\n * to receive higher video quality (if simulcast is enabled). The argument\n * should be an array of participant id strings or an empty array; an error will\n * be thrown if a non-array is passed in. The error is thrown as a layer of\n * protection against passing an invalid argument, as the error will happen in\n * the bridge and may not be visible in the client.\n *\n * @param {Array<strings>} participantIds - An array of identifiers for\n * participants.\n * @returns {void}\n */\nJitsiConference.prototype.selectParticipants = function(participantIds) {\n    if (!Array.isArray(participantIds)) {\n        throw new Error('Invalid argument; participantIds must be an array.');\n    }\n\n    this.receiveVideoController.selectEndpoints(participantIds);\n};\n\n/**\n * Obtains the current value for \"lastN\". See {@link setLastN} for more info.\n * @returns {number}\n */\nJitsiConference.prototype.getLastN = function() {\n    return this.receiveVideoController.getLastN();\n};\n\n/**\n * Selects a new value for \"lastN\". The requested amount of videos are going\n * to be delivered after the value is in effect. Set to -1 for unlimited or\n * all available videos.\n * @param lastN the new number of videos the user would like to receive.\n * @throws Error or RangeError if the given value is not a number or is smaller\n * than -1.\n */\nJitsiConference.prototype.setLastN = function(lastN) {\n    if (!Number.isInteger(lastN) && !Number.parseInt(lastN, 10)) {\n        throw new Error(`Invalid value for lastN: ${lastN}`);\n    }\n    const n = Number(lastN);\n\n    if (n < -1) {\n        throw new RangeError('lastN cannot be smaller than -1');\n    }\n    this.receiveVideoController.setLastN(n);\n\n    // If the P2P session is not fully established yet, we wait until it gets\n    // established.\n    if (this.p2pJingleSession) {\n        const isVideoActive = n !== 0;\n\n        this.p2pJingleSession\n            .setMediaTransferActive(true, isVideoActive)\n            .catch(error => {\n                logger.error(\n                    `Failed to adjust video transfer status (${isVideoActive})`,\n                    error);\n            });\n    }\n};\n\n/**\n * Checks if the participant given by participantId is currently included in\n * the last N.\n * @param {string} participantId the identifier of the participant we would\n * like to check.\n * @return {boolean} true if the participant with id is in the last N set or\n * if there's no last N set, false otherwise.\n * @deprecated this method should never be used to figure out the UI, but\n * {@link ParticipantConnectionStatus} should be used instead.\n */\nJitsiConference.prototype.isInLastN = function(participantId) {\n    return this.rtc.isInLastN(participantId);\n};\n\n/**\n * @return Array<JitsiParticipant> an array of all participants in this\n * conference.\n */\nJitsiConference.prototype.getParticipants = function() {\n    return Object.values(this.participants);\n};\n\n\n/**\n * @return Array<JitsiParticipant> an array of all participants in this\n * conference.\n */\n JitsiConference.prototype.getParticipantsWithoutHidden = function() {\n    let participants = this.getParticipants().filter(participant => !participant._hidden);\n\n    participants = participants.filter(participant => !participant?._properties?.features_jigasi);\n\n    return participants;\n};\n\n\n/**\n * Returns the number of participants in the conference, including the local\n * participant.\n * @param countHidden {boolean} Whether or not to include hidden participants\n * in the count. Default: false.\n **/\nJitsiConference.prototype.getParticipantCount = function(countHidden = false) {\n    let participants = this.getParticipants();\n\n    if (!countHidden) {\n        participants = participants.filter(p => !p.isHidden());\n    }\n\n    // Add one for the local participant.\n    return participants.length + 1;\n};\n\n/**\n * @returns {JitsiParticipant} the participant in this conference with the\n * specified id (or undefined if there isn't one).\n * @param id the id of the participant.\n */\nJitsiConference.prototype.getParticipantById = function(id) {\n    return this.participants[id];\n};\n\n/**\n * Grant owner rights to the participant.\n * @param {string} id id of the participant to grant owner rights to.\n */\nJitsiConference.prototype.grantOwner = function(id) {\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    this.room.setAffiliation(participant.getJid(), 'owner');\n};\n\n/**\n * Revoke owner rights to the participant or local Participant as\n * the user might want to refuse to be a moderator.\n * @param {string} id id of the participant to revoke owner rights to.\n */\nJitsiConference.prototype.revokeOwner = function(id) {\n    const participant = this.getParticipantById(id);\n    const isMyself = this.myUserId() === id;\n    const role = this.isMembersOnly() ? 'member' : 'none';\n\n    if (isMyself) {\n        this.room.setAffiliation(this.room.myroomjid, role);\n    } else if (participant) {\n        this.room.setAffiliation(participant.getJid(), role);\n    }\n};\n\n\n/**\n * Kick participant from this conference.\n * @param {string} id id of the participant to kick\n * @param {string} reason reason of the participant to kick\n */\nJitsiConference.prototype.kickParticipant = function(id, reason) {\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    this.room.kick(participant.getJid(), reason);\n};\n\n/**\n * Maybe clears the timeout which emits {@link ACTION_JINGLE_SI_TIMEOUT}\n * analytics event.\n * @private\n */\nJitsiConference.prototype._maybeClearSITimeout = function() {\n    if (this._sessionInitiateTimeout\n            && (this.jvbJingleSession || this.getParticipantCount() < 2)) {\n        window.clearTimeout(this._sessionInitiateTimeout);\n        this._sessionInitiateTimeout = null;\n    }\n};\n\n/**\n * Sets a timeout which will emit {@link ACTION_JINGLE_SI_TIMEOUT} analytics\n * event.\n * @private\n */\nJitsiConference.prototype._maybeSetSITimeout = function() {\n    // Jicofo is supposed to invite if there are at least 2 participants\n    if (!this.jvbJingleSession\n            && this.getParticipantCount() >= 2\n            && !this._sessionInitiateTimeout) {\n        this._sessionInitiateTimeout = window.setTimeout(() => {\n            this._sessionInitiateTimeout = null;\n            Statistics.sendAnalytics(createJingleEvent(\n                ACTION_JINGLE_SI_TIMEOUT,\n                {\n                    p2p: false,\n                    value: JINGLE_SI_TIMEOUT\n                }));\n        }, JINGLE_SI_TIMEOUT);\n    }\n};\n\n/**\n * Mutes a participant.\n * @param {string} id The id of the participant to mute.\n */\nJitsiConference.prototype.muteParticipant = function(id, mediaType) {\n    const muteMediaType = mediaType ? mediaType : MediaType.AUDIO;\n\n    if (muteMediaType !== MediaType.AUDIO && muteMediaType !== MediaType.VIDEO) {\n        logger.error(`Unsupported media type: ${muteMediaType}`);\n\n        return;\n    }\n\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    this.room.muteParticipant(participant.getJid(), true, muteMediaType);\n};\n\n/* eslint-disable max-params */\n\n/**\n * Notifies this JitsiConference that a new member has joined its chat room.\n *\n * FIXME This should NOT be exposed!\n *\n * @param jid the jid of the participant in the MUC\n * @param nick the display name of the participant\n * @param role the role of the participant in the MUC\n * @param isHidden indicates if this is a hidden participant (system\n * participant for example a recorder).\n * @param statsID the participant statsID (optional)\n * @param status the initial status if any\n * @param identity the member identity, if any\n * @param botType the member botType, if any\n * @param fullJid the member full jid, if any\n * @param features the member botType, if any\n * @param isReplaceParticipant whether this join replaces a participant with\n * the same jwt.\n */\nJitsiConference.prototype.onMemberJoined = function(\n        jid, nick, role, isHidden, statsID, status, identity, botType, fullJid, features, isReplaceParticipant) {\n    const id = Strophe.getResourceFromJid(jid);\n\n    if (id === 'focus' || this.myUserId() === id) {\n        return;\n    }\n\n    const participant\n        = new JitsiParticipant(jid, this, nick, isHidden, statsID, status, identity);\n\n    participant.setRole(role);\n    participant.setBotType(botType);\n    participant.setFeatures(features);\n    participant.setIsReplacing(isReplaceParticipant);\n\n    this.participants[id] = participant;\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.USER_JOINED,\n        id,\n        participant);\n\n    this._updateFeatures(participant);\n\n    // maybeStart only if we had finished joining as then we will have information for the number of participants\n    if (this.isJoined()) {\n        this._maybeStartOrStopP2P();\n    }\n\n    this._maybeSetSITimeout();\n};\n\n/* eslint-enable max-params */\n\n/**\n * Get notified when we joined the room.\n *\n * FIXME This should NOT be exposed!\n *\n * @private\n */\nJitsiConference.prototype._onMucJoined = function() {\n    this._maybeStartOrStopP2P();\n};\n\n/**\n * Updates features for a participant.\n * @param {JitsiParticipant} participant - The participant to query for features.\n * @returns {void}\n * @private\n */\nJitsiConference.prototype._updateFeatures = function(participant) {\n    participant.getFeatures()\n        .then(features => {\n            participant._supportsDTMF = features.has('urn:xmpp:jingle:dtmf:0');\n            this.updateDTMFSupport();\n\n            if (features.has(FEATURE_JIGASI)) {\n                participant.setProperty('features_jigasi', true);\n            }\n\n            if (features.has(FEATURE_E2EE)) {\n                participant.setProperty('features_e2ee', true);\n            }\n        })\n        .catch(() => false);\n};\n\n/**\n * Get notified when member bot type had changed.\n * @param jid the member jid\n * @param botType the new botType value\n * @private\n */\nJitsiConference.prototype._onMemberBotTypeChanged = function(jid, botType) {\n\n    // find the participant and mark it as non bot, as the real one will join\n    // in a moment\n    const peers = this.getParticipants();\n    const botParticipant = peers.find(p => p.getJid() === jid);\n\n    if (botParticipant) {\n        botParticipant.setBotType(botType);\n        const id = Strophe.getResourceFromJid(jid);\n\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.BOT_TYPE_CHANGED,\n            id,\n            botType);\n    }\n\n    // if botType changed to undefined, botType was removed, in case of\n    // poltergeist mode this is the moment when the poltergeist had exited and\n    // the real participant had already replaced it.\n    // In this case we can check and try p2p\n    if (!botParticipant.getBotType()) {\n        this._maybeStartOrStopP2P();\n    }\n};\n\nJitsiConference.prototype.onMemberLeft = function(jid) {\n    const id = Strophe.getResourceFromJid(jid);\n\n    if (id === 'focus' || this.myUserId() === id) {\n        return;\n    }\n\n    const participant = this.participants[id];\n    const mediaSessions = this._getMediaSessions();\n    let tracksToBeRemoved = [];\n\n    for (const session of mediaSessions) {\n        const remoteTracks = session.peerconnection.getRemoteTracks(id);\n\n        remoteTracks && (tracksToBeRemoved = [ ...tracksToBeRemoved, ...remoteTracks ]);\n\n        // Remove the ssrcs from the remote description and renegotiate.\n        session.removeRemoteStreamsOnLeave(id);\n    }\n\n    // Fire the event before renegotiation is done so that the thumbnails can be removed immediately.\n    tracksToBeRemoved.forEach(track => {\n        this.eventEmitter.emit(JitsiConferenceEvents.TRACK_REMOVED, track);\n    });\n\n    if (participant) {\n        delete this.participants[id];\n        this.eventEmitter.emit(JitsiConferenceEvents.USER_LEFT, id, participant);\n    }\n\n    if (this.room !== null) { // Skip if we have left the room already.\n        this._maybeStartOrStopP2P(true /* triggered by user left event */);\n        this._maybeClearSITimeout();\n    }\n};\n\n/* eslint-disable max-params */\n\n/**\n * Designates an event indicating that we were kicked from the XMPP MUC.\n * @param {boolean} isSelfPresence - whether it is for local participant\n * or another participant.\n * @param {string} actorId - the id of the participant who was initiator\n * of the kick.\n * @param {string?} kickedParticipantId - when it is not a kick for local participant,\n * this is the id of the participant which was kicked.\n * @param {string} reason - reason of the participant to kick\n * @param {boolean?} isReplaceParticipant - whether this is a server initiated kick in order\n * to replace it with a participant with same jwt.\n */\nJitsiConference.prototype.onMemberKicked = function(\n        isSelfPresence,\n        actorId,\n        kickedParticipantId,\n        reason,\n        isReplaceParticipant) {\n    // This check which be true when we kick someone else. With the introduction of lobby\n    // the ChatRoom KICKED event is now also emitted for ourselves (the kicker) so we want to\n    // avoid emitting an event where `undefined` kicked someone.\n    if (actorId === this.myUserId()) {\n        return;\n    }\n\n    const actorParticipant = this.participants[actorId];\n\n    if (isSelfPresence) {\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.KICKED, actorParticipant, reason, isReplaceParticipant);\n\n        this.leave();\n\n        return;\n    }\n\n    const kickedParticipant = this.participants[kickedParticipantId];\n\n    kickedParticipant.setIsReplaced(isReplaceParticipant);\n\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.PARTICIPANT_KICKED, actorParticipant, kickedParticipant, reason);\n};\n\n/**\n * Method called on local MUC role change.\n * @param {string} role the name of new user's role as defined by XMPP MUC.\n */\nJitsiConference.prototype.onLocalRoleChanged = function(role) {\n    // Emit role changed for local  JID\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.USER_ROLE_CHANGED, this.myUserId(), role);\n};\n\nJitsiConference.prototype.onUserRoleChanged = function(jid, role) {\n    const id = Strophe.getResourceFromJid(jid);\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    participant.setRole(role);\n    this.eventEmitter.emit(JitsiConferenceEvents.USER_ROLE_CHANGED, id, role);\n};\n\nJitsiConference.prototype.onDisplayNameChanged = function(jid, displayName) {\n    const id = Strophe.getResourceFromJid(jid);\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n\n    if (participant._displayName === displayName) {\n        return;\n    }\n\n    participant._displayName = displayName;\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.DISPLAY_NAME_CHANGED,\n        id,\n        displayName);\n};\n\n/**\n * Notifies this JitsiConference that a JitsiRemoteTrack was added to the conference.\n *\n * @param {JitsiRemoteTrack} track the JitsiRemoteTrack which was added to this JitsiConference.\n */\nJitsiConference.prototype.onRemoteTrackAdded = function(track) {\n    if (track.isP2P && !this.isP2PActive()) {\n        logger.info('Trying to add remote P2P track, when not in P2P - IGNORED');\n\n        return;\n    } else if (!track.isP2P && this.isP2PActive()) {\n        logger.info('Trying to add remote JVB track, when in P2P - IGNORED');\n\n        return;\n    }\n\n    const id = track.getParticipantId();\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        logger.error(`No participant found for id: ${id}`);\n\n        return;\n    }\n\n    // Add track to JitsiParticipant.\n    participant._tracks.push(track);\n\n    if (this.transcriber) {\n        this.transcriber.addTrack(track);\n    }\n\n    const emitter = this.eventEmitter;\n\n    track.addEventListener(\n        JitsiTrackEvents.TRACK_MUTE_CHANGED,\n        () => emitter.emit(JitsiConferenceEvents.TRACK_MUTE_CHANGED, track));\n    track.isAudioTrack() && track.addEventListener(\n        JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n        (audioLevel, tpc) => {\n            const activeTPC = this.getActivePeerConnection();\n\n            if (activeTPC === tpc) {\n                emitter.emit(JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED, id, audioLevel);\n            }\n        }\n    );\n\n    emitter.emit(JitsiConferenceEvents.TRACK_ADDED, track);\n};\n\n/**\n * Callback called by the Jingle plugin when 'session-answer' is received.\n * @param {JingleSessionPC} session the Jingle session for which an answer was\n * received.\n * @param {jQuery} answer a jQuery selector pointing to 'jingle' IQ element\n */\n// eslint-disable-next-line no-unused-vars\nJitsiConference.prototype.onCallAccepted = function(session, answer) {\n    if (this.p2pJingleSession === session) {\n        logger.info('P2P setAnswer');\n\n        this.p2pJingleSession.setAnswer(answer);\n        this.eventEmitter.emit(JitsiConferenceEvents._MEDIA_SESSION_STARTED, this.p2pJingleSession);\n    }\n};\n\n/**\n * Callback called by the Jingle plugin when 'transport-info' is received.\n * @param {JingleSessionPC} session the Jingle session for which the IQ was\n * received\n * @param {jQuery} transportInfo a jQuery selector pointing to 'jingle' IQ\n * element\n */\n// eslint-disable-next-line no-unused-vars\nJitsiConference.prototype.onTransportInfo = function(session, transportInfo) {\n    if (this.p2pJingleSession === session) {\n        logger.info('P2P addIceCandidates');\n        this.p2pJingleSession.addIceCandidates(transportInfo);\n    }\n};\n\n/**\n * Notifies this JitsiConference that a JitsiRemoteTrack was removed from\n * the conference.\n *\n * @param {JitsiRemoteTrack} removedTrack\n */\nJitsiConference.prototype.onRemoteTrackRemoved = function(removedTrack) {\n    this.getParticipants().forEach(participant => {\n        const tracks = participant.getTracks();\n\n        for (let i = 0; i < tracks.length; i++) {\n            if (tracks[i] === removedTrack) {\n                // Since the tracks have been compared and are\n                // considered equal the result of splice can be ignored.\n                participant._tracks.splice(i, 1);\n\n                this.eventEmitter.emit(\n                    JitsiConferenceEvents.TRACK_REMOVED, removedTrack);\n\n                if (this.transcriber) {\n                    this.transcriber.removeTrack(removedTrack);\n                }\n\n                break;\n            }\n        }\n    }, this);\n};\n\n/**\n * Handles an incoming call event for the P2P jingle session.\n */\nJitsiConference.prototype._onIncomingCallP2P = function(jingleSession, jingleOffer) {\n\n    let rejectReason;\n\n    if ((!this.isP2PEnabled() && !this.isP2PTestModeEnabled()) || browser.isFirefox() || browser.isWebKitBased()) {\n        rejectReason = {\n            reason: 'decline',\n            reasonDescription: 'P2P disabled',\n            errorMsg: 'P2P mode disabled in the configuration'\n        };\n    } else if (this.p2pJingleSession) {\n        // Reject incoming P2P call (already in progress)\n        rejectReason = {\n            reason: 'busy',\n            reasonDescription: 'P2P already in progress',\n            errorMsg: 'Duplicated P2P \"session-initiate\"'\n        };\n    } else if (!this._shouldBeInP2PMode()) {\n        rejectReason = {\n            reason: 'decline',\n            reasonDescription: 'P2P requirements not met',\n            errorMsg: 'Received P2P \"session-initiate\" when should not be in P2P mode'\n        };\n        Statistics.sendAnalytics(createJingleEvent(ACTION_P2P_DECLINED));\n    }\n\n    if (rejectReason) {\n        this._rejectIncomingCall(jingleSession, rejectReason);\n    } else {\n        this._acceptP2PIncomingCall(jingleSession, jingleOffer);\n    }\n};\n\n/**\n * Handles an incoming call event.\n */\nJitsiConference.prototype.onIncomingCall = function(jingleSession, jingleOffer, now) {\n    // Handle incoming P2P call\n    if (jingleSession.isP2P) {\n        this._onIncomingCallP2P(jingleSession, jingleOffer);\n    } else {\n        if (!this.isFocus(jingleSession.remoteJid)) {\n            const description = 'Rejecting session-initiate from non-focus.';\n\n            this._rejectIncomingCall(\n                jingleSession, {\n                    reason: 'security-error',\n                    reasonDescription: description,\n                    errorMsg: description\n                });\n\n            return;\n        }\n        this._acceptJvbIncomingCall(jingleSession, jingleOffer, now);\n    }\n};\n\n/**\n * Accepts an incoming call event for the JVB jingle session.\n */\nJitsiConference.prototype._acceptJvbIncomingCall = function(jingleSession, jingleOffer, now) {\n\n    // Accept incoming call\n    this.jvbJingleSession = jingleSession;\n    this.room.connectionTimes['session.initiate'] = now;\n    this._sendConferenceJoinAnalyticsEvent();\n\n    if (this.wasStopped) {\n        Statistics.sendAnalyticsAndLog(createJingleEvent(ACTION_JINGLE_RESTART, { p2p: false }));\n    }\n\n    const serverRegion\n        = $(jingleOffer)\n            .find('>bridge-session[xmlns=\"http://jitsi.org/protocol/focus\"]')\n            .attr('region');\n\n    this.eventEmitter.emit(JitsiConferenceEvents.SERVER_REGION_CHANGED, serverRegion);\n\n    this._maybeClearSITimeout();\n    Statistics.sendAnalytics(createJingleEvent(\n        ACTION_JINGLE_SI_RECEIVED,\n        {\n            p2p: false,\n            value: now\n        }));\n\n    try {\n        jingleSession.initialize(\n            this.room,\n            this.rtc,\n            this._signalingLayer,\n            {\n                ...this.options.config,\n                enableInsertableStreams: this.isE2EEEnabled()\n            });\n    } catch (error) {\n        GlobalOnErrorHandler.callErrorHandler(error);\n        logger.error(error);\n\n        return;\n    }\n\n    // Open a channel with the videobridge.\n    this._setBridgeChannel(jingleOffer, jingleSession.peerconnection);\n\n    const localTracks = this._getInitialLocalTracks();\n\n    try {\n        jingleSession.acceptOffer(\n            jingleOffer,\n            () => {\n                // If for any reason invite for the JVB session arrived after\n                // the P2P has been established already the media transfer needs\n                // to be turned off here.\n                if (this.isP2PActive() && this.jvbJingleSession) {\n                    this._suspendMediaTransferForJvbConnection();\n                }\n\n                this.eventEmitter.emit(JitsiConferenceEvents._MEDIA_SESSION_STARTED, jingleSession);\n                if (!this.isP2PActive()) {\n                    this.eventEmitter.emit(JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED, jingleSession);\n                }\n            },\n            error => {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error('Failed to accept incoming Jingle session', error);\n            },\n            localTracks\n        );\n\n        // Enable or disable simulcast for plan-b screensharing based on the capture fps if it is set through the UI.\n        this._desktopSharingFrameRate\n            && jingleSession.peerconnection.setDesktopSharingFrameRate(this._desktopSharingFrameRate);\n\n        // Start callstats as soon as peerconnection is initialized,\n        // do not wait for XMPPEvents.PEERCONNECTION_READY, as it may never\n        // happen in case if user doesn't have or denied permission to\n        // both camera and microphone.\n        logger.info('Starting CallStats for JVB connection...');\n        this.statistics.startCallStats(\n            this.jvbJingleSession.peerconnection,\n            'jitsi' /* Remote user ID for JVB is 'jitsi' */);\n        this.statistics.startRemoteStats(this.jvbJingleSession.peerconnection);\n    } catch (e) {\n        GlobalOnErrorHandler.callErrorHandler(e);\n        logger.error(e);\n    }\n};\n\n/**\n * Sets the BridgeChannel.\n *\n * @param {jQuery} offerIq a jQuery selector pointing to the jingle element of\n * the offer IQ which may carry the WebSocket URL for the 'websocket'\n * BridgeChannel mode.\n * @param {TraceablePeerConnection} pc the peer connection which will be used\n * to listen for new WebRTC Data Channels (in the 'datachannel' mode).\n */\nJitsiConference.prototype._setBridgeChannel = function(offerIq, pc) {\n    let wsUrl = null;\n    const webSocket\n        = $(offerIq)\n            .find('>content>transport>web-socket')\n            .first();\n\n    if (webSocket.length === 1) {\n        wsUrl = webSocket[0].getAttribute('url');\n    }\n\n    if (wsUrl) {\n        // If the offer contains a websocket use it.\n        this.rtc.initializeBridgeChannel(null, wsUrl);\n    } else {\n        // Otherwise, fall back to an attempt to use SCTP.\n        this.rtc.initializeBridgeChannel(pc, null);\n    }\n};\n\n/**\n * Rejects incoming Jingle call.\n * @param {JingleSessionPC} jingleSession the session instance to be rejected.\n * @param {object} [options]\n * @param {string} options.reason the name of the reason element as defined\n * by Jingle\n * @param {string} options.reasonDescription the reason description which will\n * be included in Jingle 'session-terminate' message.\n * @param {string} options.errorMsg an error message to be logged on global\n * error handler\n * @private\n */\nJitsiConference.prototype._rejectIncomingCall = function(jingleSession, options) {\n    if (options && options.errorMsg) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(options.errorMsg));\n    }\n\n    // Terminate the jingle session with a reason\n    jingleSession.terminate(\n        null /* success callback => we don't care */,\n        error => {\n            logger.warn(\n                'An error occurred while trying to terminate'\n                    + ' invalid Jingle session', error);\n        }, {\n            reason: options && options.reason,\n            reasonDescription: options && options.reasonDescription,\n            sendSessionTerminate: true\n        });\n};\n\n/**\n * Handles the call ended event.\n * XXX is this due to the remote side terminating the Jingle session?\n *\n * @param {JingleSessionPC} jingleSession the jingle session which has been\n * terminated.\n * @param {String} reasonCondition the Jingle reason condition.\n * @param {String|null} reasonText human readable reason text which may provide\n * more details about why the call has been terminated.\n */\nJitsiConference.prototype.onCallEnded = function(jingleSession, reasonCondition, reasonText) {\n    logger.info(\n        `Call ended: ${reasonCondition} - ${reasonText} P2P ?${\n            jingleSession.isP2P}`);\n    if (jingleSession === this.jvbJingleSession) {\n        this.wasStopped = true;\n\n        Statistics.sendAnalytics(\n            createJingleEvent(ACTION_JINGLE_TERMINATE, { p2p: false }));\n\n        // Stop the stats\n        if (this.statistics) {\n            this.statistics.stopRemoteStats(\n                this.jvbJingleSession.peerconnection);\n            logger.info('Stopping JVB CallStats');\n            this.statistics.stopCallStats(\n                this.jvbJingleSession.peerconnection);\n        }\n\n        // Current JVB JingleSession is no longer valid, so set it to null\n        this.jvbJingleSession = null;\n\n        // Let the RTC service do any cleanups\n        this.rtc.onCallEnded();\n    } else if (jingleSession === this.p2pJingleSession) {\n        const stopOptions = {};\n\n        // It's the responder who decides to enforce JVB mode, so that both\n        // initiator and responder are aware if it was intentional.\n        if (reasonCondition === 'decline' && reasonText === 'force JVB121') {\n            logger.info('In forced JVB 121 mode...');\n            Statistics.analytics.addPermanentProperties({ forceJvb121: true });\n        } else if (reasonCondition === 'connectivity-error'\n            && reasonText === 'ICE FAILED') {\n            // It can happen that the other peer detects ICE failed and\n            // terminates the session, before we get the event on our side.\n            // But we are able to parse the reason and mark it here.\n            Statistics.analytics.addPermanentProperties({ p2pFailed: true });\n        } else if (reasonCondition === 'success' && reasonText === 'restart') {\n            // When we are restarting media sessions we don't want to switch the tracks\n            // to the JVB just yet.\n            stopOptions.requestRestart = true;\n        }\n        this._stopP2PSession(stopOptions);\n    } else {\n        logger.error(\n            'Received onCallEnded for invalid session',\n            jingleSession.sid,\n            jingleSession.remoteJid,\n            reasonCondition,\n            reasonText);\n    }\n};\n\n/**\n * Handles the suspend detected event. Leaves the room and fires suspended.\n * @param {JingleSessionPC} jingleSession\n */\nJitsiConference.prototype.onSuspendDetected = function(jingleSession) {\n    if (!jingleSession.isP2P) {\n        this.leave();\n        this.eventEmitter.emit(JitsiConferenceEvents.SUSPEND_DETECTED);\n    }\n};\n\nJitsiConference.prototype.updateDTMFSupport = function() {\n    let somebodySupportsDTMF = false;\n    const participants = this.getParticipants();\n\n    // check if at least 1 participant supports DTMF\n    for (let i = 0; i < participants.length; i += 1) {\n        if (participants[i].supportsDTMF()) {\n            somebodySupportsDTMF = true;\n            break;\n        }\n    }\n    if (somebodySupportsDTMF !== this.somebodySupportsDTMF) {\n        this.somebodySupportsDTMF = somebodySupportsDTMF;\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.DTMF_SUPPORT_CHANGED,\n            somebodySupportsDTMF);\n    }\n};\n\n/**\n * Allows to check if there is at least one user in the conference\n * that supports DTMF.\n * @returns {boolean} true if somebody supports DTMF, false otherwise\n */\nJitsiConference.prototype.isDTMFSupported = function() {\n    return this.somebodySupportsDTMF;\n};\n\n/**\n * Returns the local user's ID\n * @return {string} local user's ID\n */\nJitsiConference.prototype.myUserId = function() {\n    return (\n        this.room && this.room.myroomjid\n            ? Strophe.getResourceFromJid(this.room.myroomjid)\n            : null);\n};\n\nJitsiConference.prototype.sendTones = function(tones, duration, pause) {\n    const peerConnection = this.getActivePeerConnection();\n\n    if (peerConnection) {\n        peerConnection.sendTones(tones, duration, pause);\n    } else {\n        logger.warn('cannot sendTones: no peer connection');\n    }\n};\n\n/**\n * Starts recording the current conference.\n *\n * @param {Object} options - Configuration for the recording. See\n * {@link Chatroom#startRecording} for more info.\n * @returns {Promise} See {@link Chatroom#startRecording} for more info.\n */\nJitsiConference.prototype.startRecording = function(options) {\n    if (this.room) {\n        return this.recordingManager.startRecording(options);\n    }\n\n    return Promise.reject(new Error('The conference is not created yet!'));\n};\n\n/**\n * Stop a recording session.\n *\n * @param {string} sessionID - The ID of the recording session that\n * should be stopped.\n * @returns {Promise} See {@link Chatroom#stopRecording} for more info.\n */\nJitsiConference.prototype.stopRecording = function(sessionID) {\n    if (this.room) {\n        return this.recordingManager.stopRecording(sessionID);\n    }\n\n    return Promise.reject(new Error('The conference is not created yet!'));\n};\n\n/**\n * Returns true if the SIP calls are supported and false otherwise\n */\nJitsiConference.prototype.isSIPCallingSupported = function() {\n    if (this.room) {\n        return this.room.isSIPCallingSupported();\n    }\n\n    return false;\n};\n\n/**\n * Dials a number.\n * @param number the number\n */\nJitsiConference.prototype.dial = function(number) {\n    if (this.room) {\n        return this.room.dial(number);\n    }\n\n    return new Promise((resolve, reject) => {\n        reject(new Error('The conference is not created yet!'));\n    });\n};\n\n/**\n * Hangup an existing call\n */\nJitsiConference.prototype.hangup = function() {\n    if (this.room) {\n        return this.room.hangup();\n    }\n\n    return new Promise((resolve, reject) => {\n        reject(new Error('The conference is not created yet!'));\n    });\n};\n\n/**\n * Starts the transcription service.\n */\nJitsiConference.prototype.startTranscriber = function() {\n    return this.dial('jitsi_meet_transcribe');\n};\n\n\n/**\n * Stops the transcription service.\n */\nJitsiConference.prototype.stopTranscriber = JitsiConference.prototype.hangup;\n\n/**\n * Returns the phone number for joining the conference.\n */\nJitsiConference.prototype.getPhoneNumber = function() {\n    if (this.room) {\n        return this.room.getPhoneNumber();\n    }\n\n    return null;\n};\n\n/**\n * Returns the pin for joining the conference with phone.\n */\nJitsiConference.prototype.getPhonePin = function() {\n    if (this.room) {\n        return this.room.getPhonePin();\n    }\n\n    return null;\n};\n\n/**\n * Returns the meeting unique ID if any.\n *\n * @returns {string|undefined}\n */\nJitsiConference.prototype.getMeetingUniqueId = function() {\n    if (this.room) {\n        return this.room.getMeetingId();\n    }\n};\n\n/**\n * Will return P2P or JVB <tt>TraceablePeerConnection</tt> depending on\n * which connection is currently active.\n *\n * @return {TraceablePeerConnection|null} null if there isn't any active\n * <tt>TraceablePeerConnection</tt> currently available.\n * @public (FIXME how to make package local ?)\n */\nJitsiConference.prototype.getActivePeerConnection = function() {\n    const session = this.isP2PActive() ? this.p2pJingleSession : this.jvbJingleSession;\n\n    return session ? session.peerconnection : null;\n};\n\n/**\n * Returns the connection state for the current room. Its ice connection state\n * for its session.\n * NOTE that \"completed\" ICE state which can appear on the P2P connection will\n * be converted to \"connected\".\n * @return {string|null} ICE state name or <tt>null</tt> if there is no active\n * peer connection at this time.\n */\nJitsiConference.prototype.getConnectionState = function() {\n    const peerConnection = this.getActivePeerConnection();\n\n    return peerConnection ? peerConnection.getConnectionState() : null;\n};\n\n/**\n * Make all new participants mute their audio/video on join.\n * @param policy {Object} object with 2 boolean properties for video and audio:\n * @param {boolean} audio if audio should be muted.\n * @param {boolean} video if video should be muted.\n */\nJitsiConference.prototype.setStartMutedPolicy = function(policy) {\n    if (!this.isModerator()) {\n        logger.warn(`Failed to set start muted policy, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator'}`);\n\n        return;\n    }\n    this.startMutedPolicy = policy;\n    this.room.addOrReplaceInPresence('startmuted', {\n        attributes: {\n            audio: policy.audio,\n            video: policy.video,\n            xmlns: 'http://jitsi.org/jitmeet/start-muted'\n        }\n    }) && this.room.sendPresence();\n};\n\n/**\n * Returns current start muted policy\n * @returns {Object} with 2 properties - audio and video.\n */\nJitsiConference.prototype.getStartMutedPolicy = function() {\n    return this.startMutedPolicy;\n};\n\n/**\n * Check if audio is muted on join.\n */\nJitsiConference.prototype.isStartAudioMuted = function() {\n    return this.startAudioMuted;\n};\n\n/**\n * Check if video is muted on join.\n */\nJitsiConference.prototype.isStartVideoMuted = function() {\n    return this.startVideoMuted;\n};\n\n/**\n * Returns measured connectionTimes.\n */\nJitsiConference.prototype.getConnectionTimes = function() {\n    return this.room.connectionTimes;\n};\n\n/**\n * Sets a property for the local participant.\n */\nJitsiConference.prototype.setLocalParticipantProperty = function(name, value) {\n    this.sendCommand(`jitsi_participant_${name}`, { value });\n};\n\n/**\n *  Removes a property for the local participant and sends the updated presence.\n */\nJitsiConference.prototype.removeLocalParticipantProperty = function(name) {\n    this.removeCommand(`jitsi_participant_${name}`);\n    this.room.sendPresence();\n};\n\n/**\n * Gets a local participant property.\n *\n * @return value of the local participant property if the tagName exists in the\n * list of properties, otherwise returns undefined.\n */\nJitsiConference.prototype.getLocalParticipantProperty = function(name) {\n    const property = this.room.presMap.nodes.find(prop =>\n        prop.tagName === `jitsi_participant_${name}`\n    );\n\n    return property ? property.value : undefined;\n};\n\n/**\n * Sends the given feedback through CallStats if enabled.\n *\n * @param overallFeedback an integer between 1 and 5 indicating the\n * user feedback\n * @param detailedFeedback detailed feedback from the user. Not yet used\n * @returns {Promise} Resolves if feedback is submitted successfully.\n */\nJitsiConference.prototype.sendFeedback = function(overallFeedback, detailedFeedback) {\n    return this.statistics.sendFeedback(overallFeedback, detailedFeedback);\n};\n\n/**\n * Returns true if the callstats integration is enabled, otherwise returns\n * false.\n *\n * @returns true if the callstats integration is enabled, otherwise returns\n * false.\n */\nJitsiConference.prototype.isCallstatsEnabled = function() {\n    return this.statistics.isCallstatsEnabled();\n};\n\n/**\n * Finds the SSRC of a given track\n *\n * @param track\n * @returns {number|undefined} the SSRC of the specificed track, otherwise undefined.\n */\nJitsiConference.prototype.getSsrcByTrack = function(track) {\n    return track.isLocal() ? this.getActivePeerConnection()?.getLocalSSRC(track) : track.getSSRC();\n};\n\n/**\n * Handles track attached to container (Calls associateStreamWithVideoTag method\n * from statistics module)\n * @param {JitsiLocalTrack|JitsiRemoteTrack} track the track\n * @param container the container\n */\nJitsiConference.prototype._onTrackAttach = function(track, container) {\n    const isLocal = track.isLocal();\n    let ssrc = null;\n    const isP2P = track.isP2P;\n    const remoteUserId = isP2P ? track.getParticipantId() : 'jitsi';\n    const peerConnection\n        = isP2P\n            ? this.p2pJingleSession && this.p2pJingleSession.peerconnection\n            : this.jvbJingleSession && this.jvbJingleSession.peerconnection;\n\n    if (isLocal) {\n        // Local tracks have SSRC stored on per peer connection basis.\n        if (peerConnection) {\n            ssrc = peerConnection.getLocalSSRC(track);\n        }\n    } else {\n        ssrc = track.getSSRC();\n    }\n    if (!container.id || !ssrc || !peerConnection) {\n        return;\n    }\n\n    this.statistics.associateStreamWithVideoTag(\n        peerConnection,\n        ssrc,\n        isLocal,\n        remoteUserId,\n        track.getUsageLabel(),\n        container.id);\n};\n\n/**\n * Logs an \"application log\" message.\n * @param message {string} The message to log. Note that while this can be a\n * generic string, the convention used by lib-jitsi-meet and jitsi-meet is to\n * log valid JSON strings, with an \"id\" field used for distinguishing between\n * message types. E.g.: {id: \"recorder_status\", status: \"off\"}\n */\nJitsiConference.prototype.sendApplicationLog = function(message) {\n    Statistics.sendLog(message);\n};\n\n/**\n * Checks if the user identified by given <tt>mucJid</tt> is the conference focus.\n * @param mucJid the full MUC address of the user to be checked.\n * @returns {boolean|null} <tt>true</tt> if MUC user is the conference focus,\n * <tt>false</tt> when is not. <tt>null</tt> if we're not in the MUC anymore and\n * are unable to figure out the status or if given <tt>mucJid</tt> is invalid.\n */\nJitsiConference.prototype.isFocus = function(mucJid) {\n    return this.room ? this.room.isFocus(mucJid) : null;\n};\n\n/**\n * Fires CONFERENCE_FAILED event with INCOMPATIBLE_SERVER_VERSIONS parameter\n */\nJitsiConference.prototype._fireIncompatibleVersionsEvent = function() {\n    this.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.INCOMPATIBLE_SERVER_VERSIONS);\n};\n\n/**\n * Sends a message via the data channel.\n * @param to {string} the id of the endpoint that should receive the message.\n * If \"\" the message will be sent to all participants.\n * @param payload {object} the payload of the message.\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.sendEndpointMessage = function(to, payload) {\n    this.rtc.sendChannelMessage(to, payload);\n};\n\n/**\n * Sends local stats via the bridge channel which then forwards to other endpoints selectively.\n * @param {Object} payload The payload of the message.\n * @throws NetworkError/InvalidStateError/Error if the operation fails or if there is no data channel created.\n */\nJitsiConference.prototype.sendEndpointStatsMessage = function(payload) {\n    this.rtc.sendEndpointStatsMessage(payload);\n};\n\n/**\n * Sends a broadcast message via the data channel.\n * @param payload {object} the payload of the message.\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.broadcastEndpointMessage = function(payload) {\n    this.sendEndpointMessage('', payload);\n};\n\n/**\n * Sends a message to a given endpoint (if 'to' is a non-empty string), or\n * broadcasts it to all endpoints in the conference.\n * @param {string} to The ID of the endpoint/participant which is to receive\n * the message, or '' to broadcast the message to all endpoints in the\n * conference.\n * @param {string|object} message the message to send. If this is of type\n * 'string' it will be sent as a chat message. If it is of type 'object', it\n * will be encapsulated in a format recognized by jitsi-meet and converted to\n * JSON before being sent.\n * @param {boolean} sendThroughVideobridge Whether to send the message through\n * jitsi-videobridge (via the COLIBRI data channel or web socket), or through\n * the XMPP MUC. Currently only objects can be sent through jitsi-videobridge.\n */\nJitsiConference.prototype.sendMessage = function(message, to = '', sendThroughVideobridge = false) {\n    const messageType = typeof message;\n\n    // Through videobridge we support only objects. Through XMPP we support\n    // objects (encapsulated in a specific JSON format) and strings (i.e.\n    // regular chat messages).\n    if (messageType !== 'object'\n            && (sendThroughVideobridge || messageType !== 'string')) {\n        logger.error(`Can not send a message of type ${messageType}`);\n\n        return;\n    }\n\n    if (sendThroughVideobridge) {\n        this.sendEndpointMessage(to, message);\n    } else {\n        let messageToSend = message;\n\n        // Name of packet extension of message stanza to send the required\n        // message in.\n        let elementName = 'body';\n\n        if (messageType === 'object') {\n            elementName = 'json-message';\n\n            // Mark as valid JSON message if not already\n            if (!messageToSend.hasOwnProperty(JITSI_MEET_MUC_TYPE)) {\n                messageToSend[JITSI_MEET_MUC_TYPE] = '';\n            }\n\n            try {\n                messageToSend = JSON.stringify(messageToSend);\n            } catch (e) {\n                logger.error('Can not send a message, stringify failed: ', e);\n\n                return;\n            }\n        }\n\n        if (to) {\n            this.sendPrivateTextMessage(to, messageToSend, elementName);\n        } else {\n            // Broadcast\n            this.sendTextMessage(messageToSend, elementName);\n        }\n    }\n\n};\n\nJitsiConference.prototype.isConnectionInterrupted = function() {\n    return this.isP2PActive()\n        ? this.isP2PConnectionInterrupted : this.isJvbConnectionInterrupted;\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_RESTARTED} event. This happens when the bridge goes down\n * and Jicofo moves conferences away to a different bridge.\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onConferenceRestarted = function(session) {\n    if (!session.isP2P && this.options.config.enableForcedReload) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED, JitsiConferenceErrors.CONFERENCE_RESTARTED);\n    }\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_INTERRUPTED}\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onIceConnectionInterrupted = function(session) {\n    if (session.isP2P) {\n        this.isP2PConnectionInterrupted = true;\n    } else {\n        this.isJvbConnectionInterrupted = true;\n    }\n    if (session.isP2P === this.isP2PActive()) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_INTERRUPTED);\n    }\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_ICE_FAILED}\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onIceConnectionFailed = function(session) {\n    // We do nothing for the JVB connection, because it's up to the Jicofo to\n    // eventually come up with the new offer (at least for the time being).\n    if (session.isP2P) {\n        // Add p2pFailed property to analytics to distinguish, between \"good\"\n        // and \"bad\" connection\n        Statistics.analytics.addPermanentProperties({ p2pFailed: true });\n\n        if (this.p2pJingleSession) {\n            Statistics.sendAnalyticsAndLog(\n                createP2PEvent(\n                    ACTION_P2P_FAILED,\n                    {\n                        initiator: this.p2pJingleSession.isInitiator\n                    }));\n\n        }\n        this._stopP2PSession({\n            reason: 'connectivity-error',\n            reasonDescription: 'ICE FAILED'\n        });\n    } else if (session && this.jvbJingleSession === session) {\n        this._delayedIceFailed = new IceFailedHandling(this);\n        this._delayedIceFailed.start(session);\n    }\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_RESTORED}\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onIceConnectionRestored = function(session) {\n    if (session.isP2P) {\n        this.isP2PConnectionInterrupted = false;\n    } else {\n        this.isJvbConnectionInterrupted = false;\n        this._delayedIceFailed && this._delayedIceFailed.cancel();\n    }\n\n    if (session.isP2P === this.isP2PActive()) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_RESTORED);\n    }\n};\n\n/**\n * Accept incoming P2P Jingle call.\n * @param {JingleSessionPC} jingleSession the session instance\n * @param {jQuery} jingleOffer a jQuery selector pointing to 'jingle' IQ element\n * @private\n */\nJitsiConference.prototype._acceptP2PIncomingCall = function(jingleSession, jingleOffer) {\n    this.isP2PConnectionInterrupted = false;\n\n    // Accept the offer\n    this.p2pJingleSession = jingleSession;\n    this._sendConferenceJoinAnalyticsEvent();\n\n    this.p2pJingleSession.initialize(\n        this.room,\n        this.rtc,\n        this._signalingLayer,\n        {\n            ...this.options.config,\n            enableInsertableStreams: this.isE2EEEnabled()\n        });\n\n    logger.info('Starting CallStats for P2P connection...');\n\n    let remoteID = Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid);\n\n    const participant = this.participants[remoteID];\n\n    if (participant) {\n        remoteID = participant.getStatsID() || remoteID;\n    }\n\n    this.statistics.startCallStats(\n        this.p2pJingleSession.peerconnection,\n        remoteID);\n\n    const localTracks = this.getLocalTracks();\n\n    this.p2pJingleSession.acceptOffer(\n        jingleOffer,\n        () => {\n            logger.debug('Got RESULT for P2P \"session-accept\"');\n\n            this.eventEmitter.emit(\n                JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n                jingleSession);\n        },\n        error => {\n            logger.error(\n                'Failed to accept incoming P2P Jingle session', error);\n        },\n        localTracks);\n};\n\n/**\n * Adds remote tracks to the conference associated with the JVB session.\n * @private\n */\nJitsiConference.prototype._addRemoteJVBTracks = function() {\n    this._addRemoteTracks('JVB', this.jvbJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Adds remote tracks to the conference associated with the P2P session.\n * @private\n */\nJitsiConference.prototype._addRemoteP2PTracks = function() {\n    this._addRemoteTracks('P2P', this.p2pJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Generates fake \"remote track added\" events for given Jingle session.\n * @param {string} logName the session's nickname which will appear in log\n * messages.\n * @param {Array<JitsiRemoteTrack>} remoteTracks the tracks that will be added\n * @private\n */\nJitsiConference.prototype._addRemoteTracks = function(logName, remoteTracks) {\n    for (const track of remoteTracks) {\n        logger.info(`Adding remote ${logName} track: ${track}`);\n        this.onRemoteTrackAdded(track);\n    }\n};\n\n/**\n * Called when {@link XMPPEvents.CONNECTION_ESTABLISHED} event is\n * triggered for a {@link JingleSessionPC}. Switches the conference to use\n * the P2P connection if the event comes from the P2P session.\n * @param {JingleSessionPC} jingleSession the session instance.\n * @private\n */\nJitsiConference.prototype._onIceConnectionEstablished = function(jingleSession) {\n    if (this.p2pJingleSession !== null) {\n        // store the establishment time of the p2p session as a field of the\n        // JitsiConference because the p2pJingleSession might get disposed (thus\n        // the value is lost).\n        this.p2pEstablishmentDuration\n            = this.p2pJingleSession.establishmentDuration;\n    }\n\n    if (this.jvbJingleSession !== null) {\n        this.jvbEstablishmentDuration\n            = this.jvbJingleSession.establishmentDuration;\n    }\n\n    let done = false;\n    const forceJVB121Ratio = this.options.config.forceJVB121Ratio;\n\n    // We don't care about the JVB case, there's nothing to be done\n    if (!jingleSession.isP2P) {\n        done = true;\n    } else if (this.p2pJingleSession !== jingleSession) {\n        logger.error('CONNECTION_ESTABLISHED - wrong P2P session instance ?!');\n\n        done = true;\n    } else if (!jingleSession.isInitiator\n        && typeof forceJVB121Ratio === 'number'\n        && Math.random() < forceJVB121Ratio) {\n        logger.info(`Forcing JVB 121 mode (ratio=${forceJVB121Ratio})...`);\n        Statistics.analytics.addPermanentProperties({ forceJvb121: true });\n        this._stopP2PSession({\n            reason: 'decline',\n            reasonDescription: 'force JVB121'\n        });\n\n        done = true;\n    }\n\n    if (!isNaN(this.p2pEstablishmentDuration)\n        && !isNaN(this.jvbEstablishmentDuration)) {\n        const establishmentDurationDiff\n            = this.p2pEstablishmentDuration - this.jvbEstablishmentDuration;\n\n        Statistics.sendAnalytics(\n            ICE_ESTABLISHMENT_DURATION_DIFF,\n            { value: establishmentDurationDiff });\n    }\n\n    if (jingleSession.isP2P === this.isP2PActive()) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_ESTABLISHED);\n    }\n\n    if (done) {\n\n        return;\n    }\n\n    // Update P2P status and emit events\n    this._setP2PStatus(true);\n\n    // Remove remote tracks\n    if (this.jvbJingleSession) {\n        this._removeRemoteJVBTracks();\n    } else {\n        logger.info('Not removing remote JVB tracks - no session yet');\n    }\n\n    this._addRemoteP2PTracks();\n\n    // Stop media transfer over the JVB connection\n    if (this.jvbJingleSession) {\n        this._suspendMediaTransferForJvbConnection();\n    }\n\n    logger.info('Starting remote stats with p2p connection');\n    this.statistics.startRemoteStats(this.p2pJingleSession.peerconnection);\n\n    Statistics.sendAnalyticsAndLog(\n        createP2PEvent(\n            ACTION_P2P_ESTABLISHED,\n            {\n                initiator: this.p2pJingleSession.isInitiator\n            }));\n\n};\n\n/**\n * Called when the chat room reads a new list of properties from jicofo's\n * presence. The properties may have changed, but they don't have to.\n *\n * @param {Object} properties - The properties keyed by the property name\n * ('key').\n * @private\n */\nJitsiConference.prototype._updateProperties = function(properties = {}) {\n    const changed = !isEqual(properties, this.properties);\n\n    this.properties = properties;\n    if (changed) {\n        this.eventEmitter.emit(JitsiConferenceEvents.PROPERTIES_CHANGED, this.properties);\n\n        const audioLimitReached = this.properties['audio-limit-reached'] === 'true';\n        const videoLimitReached = this.properties['video-limit-reached'] === 'true';\n\n        if (this._audioSenderLimitReached !== audioLimitReached) {\n            this._audioSenderLimitReached = audioLimitReached;\n            this.eventEmitter.emit(JitsiConferenceEvents.AUDIO_UNMUTE_PERMISSIONS_CHANGED, audioLimitReached);\n            logger.info(`Audio unmute permissions set by Jicofo to ${audioLimitReached}`);\n        }\n\n        if (this._videoSenderLimitReached !== videoLimitReached) {\n            this._videoSenderLimitReached = videoLimitReached;\n            this.eventEmitter.emit(JitsiConferenceEvents.VIDEO_UNMUTE_PERMISSIONS_CHANGED, videoLimitReached);\n            logger.info(`Video unmute permissions set by Jicofo to ${videoLimitReached}`);\n        }\n\n        // Some of the properties need to be added to analytics events.\n        const analyticsKeys = [\n\n            // The number of jitsi-videobridge instances currently used for the\n            // conference.\n            'bridge-count',\n\n            // The conference creation time (set by jicofo).\n            'created-ms'\n        ];\n\n        analyticsKeys.forEach(key => {\n            if (properties[key] !== undefined) {\n                Statistics.analytics.addPermanentProperties({\n                    [key.replace('-', '_')]: properties[key]\n                });\n            }\n        });\n    }\n};\n\n/**\n * Gets a conference property with a given key.\n *\n * @param {string} key - The key.\n * @returns {*} The value\n */\nJitsiConference.prototype.getProperty = function(key) {\n    return this.properties[key];\n};\n\n/**\n * Clears the deferred start P2P task if it has been scheduled.\n * @private\n */\nJitsiConference.prototype._maybeClearDeferredStartP2P = function() {\n    if (this.deferredStartP2PTask) {\n        logger.info('Cleared deferred start P2P task');\n        clearTimeout(this.deferredStartP2PTask);\n        this.deferredStartP2PTask = null;\n    }\n};\n\n/**\n * Removes from the conference remote tracks associated with the JVB\n * connection.\n * @private\n */\nJitsiConference.prototype._removeRemoteJVBTracks = function() {\n    this._removeRemoteTracks(\n        'JVB', this.jvbJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Removes from the conference remote tracks associated with the P2P\n * connection.\n * @private\n */\nJitsiConference.prototype._removeRemoteP2PTracks = function() {\n    this._removeRemoteTracks(\n        'P2P', this.p2pJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Generates fake \"remote track removed\" events for given Jingle session.\n * @param {string} sessionNickname the session's nickname which will appear in\n * log messages.\n * @param {Array<JitsiRemoteTrack>} remoteTracks the tracks that will be removed\n * @private\n */\nJitsiConference.prototype._removeRemoteTracks = function(sessionNickname, remoteTracks) {\n    for (const track of remoteTracks) {\n        logger.info(`Removing remote ${sessionNickname} track: ${track}`);\n        this.onRemoteTrackRemoved(track);\n    }\n};\n\n/**\n * Resumes media transfer over the JVB connection.\n * @private\n */\nJitsiConference.prototype._resumeMediaTransferForJvbConnection = function() {\n    logger.info('Resuming media transfer over the JVB connection...');\n    this.jvbJingleSession.setMediaTransferActive(true, true).then(\n        () => {\n            logger.info('Resumed media transfer over the JVB connection!');\n        },\n        error => {\n            logger.error(\n                'Failed to resume media transfer over the JVB connection:',\n                error);\n        });\n};\n\n/**\n * Sets new P2P status and updates some events/states hijacked from\n * the <tt>JitsiConference</tt>.\n * @param {boolean} newStatus the new P2P status value, <tt>true</tt> means that\n * P2P is now in use, <tt>false</tt> means that the JVB connection is now in use\n * @private\n */\nJitsiConference.prototype._setP2PStatus = function(newStatus) {\n    if (this.p2p === newStatus) {\n        logger.debug(`Called _setP2PStatus with the same status: ${newStatus}`);\n\n        return;\n    }\n    this.p2p = newStatus;\n    if (newStatus) {\n        logger.info('Peer to peer connection established!');\n\n        // When we end up in a valid P2P session need to reset the properties\n        // in case they have persisted, after session with another peer.\n        Statistics.analytics.addPermanentProperties({\n            p2pFailed: false,\n            forceJvb121: false\n        });\n\n        // Sync up video transfer active in case p2pJingleSession not existed\n        // when the lastN value was being adjusted.\n        const isVideoActive = this.getLastN() !== 0;\n\n        this.p2pJingleSession\n            .setMediaTransferActive(true, isVideoActive)\n            .catch(error => {\n                logger.error(\n                    'Failed to sync up P2P video transfer status'\n                        + `(${isVideoActive})`, error);\n            });\n    } else {\n        logger.info('Peer to peer connection closed!');\n    }\n\n    // Put the JVB connection on hold/resume\n    if (this.jvbJingleSession) {\n        this.statistics.sendConnectionResumeOrHoldEvent(\n            this.jvbJingleSession.peerconnection, !newStatus);\n    }\n\n    // Clear dtmfManager, so that it can be recreated with new connection\n    this.dtmfManager = null;\n\n    // Update P2P status\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.P2P_STATUS,\n        this,\n        this.p2p);\n    this.eventEmitter.emit(\n        JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED,\n        this._getActiveMediaSession());\n\n    // Refresh connection interrupted/restored\n    this.eventEmitter.emit(\n        this.isConnectionInterrupted()\n            ? JitsiConferenceEvents.CONNECTION_INTERRUPTED\n            : JitsiConferenceEvents.CONNECTION_RESTORED);\n};\n\n/**\n * Starts new P2P session.\n * @param {string} remoteJid the JID of the remote participant\n * @private\n */\nJitsiConference.prototype._startP2PSession = function(remoteJid) {\n    this._maybeClearDeferredStartP2P();\n    if (this.p2pJingleSession) {\n        logger.error('P2P session already started!');\n\n        return;\n    }\n\n    this.isP2PConnectionInterrupted = false;\n    this.p2pJingleSession\n        = this.xmpp.connection.jingle.newP2PJingleSession(\n            this.room.myroomjid,\n            remoteJid);\n    logger.info(\n        'Created new P2P JingleSession', this.room.myroomjid, remoteJid);\n    this._sendConferenceJoinAnalyticsEvent();\n\n    this.p2pJingleSession.initialize(\n        this.room,\n        this.rtc,\n        this._signalingLayer,\n        {\n            ...this.options.config,\n            enableInsertableStreams: this.isE2EEEnabled()\n        });\n\n    logger.info('Starting CallStats for P2P connection...');\n\n    let remoteID = Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid);\n\n    const participant = this.participants[remoteID];\n\n    if (participant) {\n        remoteID = participant.getStatsID() || remoteID;\n    }\n\n    this.statistics.startCallStats(\n        this.p2pJingleSession.peerconnection,\n        remoteID);\n\n    const localTracks = this.getLocalTracks();\n\n    this.p2pJingleSession.invite(localTracks);\n};\n\n/**\n * Suspends media transfer over the JVB connection.\n * @private\n */\nJitsiConference.prototype._suspendMediaTransferForJvbConnection = function() {\n    logger.info('Suspending media transfer over the JVB connection...');\n    this.jvbJingleSession.setMediaTransferActive(false, false).then(\n        () => {\n            logger.info('Suspended media transfer over the JVB connection !');\n        },\n        error => {\n            logger.error(\n                'Failed to suspend media transfer over the JVB connection:',\n                error);\n        });\n};\n\n/**\n * Method when called will decide whether it's the time to start or stop\n * the P2P session.\n * @param {boolean} userLeftEvent if <tt>true</tt> it means that the call\n * originates from the user left event.\n * @private\n */\nJitsiConference.prototype._maybeStartOrStopP2P = function(userLeftEvent) {\n    if (!this.isP2PEnabled()\n            || this.isP2PTestModeEnabled()\n            || browser.isFirefox()\n            || browser.isWebKitBased()\n            || this.isE2EEEnabled()) {\n        logger.info('Auto P2P disabled');\n\n        return;\n    }\n    const peers = this.getParticipants();\n    const peerCount = peers.length;\n\n    // FIXME 1 peer and it must *support* P2P switching\n    const shouldBeInP2P = this._shouldBeInP2PMode();\n\n    // Clear deferred \"start P2P\" task\n    if (!shouldBeInP2P && this.deferredStartP2PTask) {\n        this._maybeClearDeferredStartP2P();\n    }\n\n    // Start peer to peer session\n    if (!this.p2pJingleSession && shouldBeInP2P) {\n        const peer = peerCount && peers[0];\n\n\n        const myId = this.myUserId();\n        const peersId = peer.getId();\n\n        if (myId > peersId) {\n            logger.debug(\n                'I\\'m the bigger peersId - '\n                + 'the other peer should start P2P', myId, peersId);\n\n            return;\n        } else if (myId === peersId) {\n            logger.error('The same IDs ? ', myId, peersId);\n\n            return;\n        }\n\n        const jid = peer.getJid();\n\n        if (userLeftEvent) {\n            if (this.deferredStartP2PTask) {\n                logger.error('Deferred start P2P task\\'s been set already!');\n\n                return;\n            }\n            logger.info(\n                `Will start P2P with: ${jid} after ${\n                    this.backToP2PDelay} seconds...`);\n            this.deferredStartP2PTask = setTimeout(\n                this._startP2PSession.bind(this, jid),\n                this.backToP2PDelay * 1000);\n        } else {\n            logger.info(`Will start P2P with: ${jid}`);\n            this._startP2PSession(jid);\n        }\n    } else if (this.p2pJingleSession && !shouldBeInP2P) {\n        logger.info(`Will stop P2P with: ${this.p2pJingleSession.remoteJid}`);\n\n        // Log that there will be a switch back to the JVB connection\n        if (this.p2pJingleSession.isInitiator && peerCount > 1) {\n            Statistics.sendAnalyticsAndLog(\n                createP2PEvent(ACTION_P2P_SWITCH_TO_JVB));\n        }\n        this._stopP2PSession();\n    }\n};\n\n/**\n * Tells whether or not this conference should be currently in the P2P mode.\n *\n * @private\n * @returns {boolean}\n */\nJitsiConference.prototype._shouldBeInP2PMode = function() {\n    const peers = this.getParticipants();\n    const peerCount = peers.length;\n    const hasBotPeer = peers.find(p => p.getBotType() === 'poltergeist' || p.hasFeature(FEATURE_JIGASI)) !== undefined;\n    const shouldBeInP2P = peerCount === 1 && !hasBotPeer;\n\n    logger.debug(`P2P? peerCount: ${peerCount}, hasBotPeer: ${hasBotPeer} => ${shouldBeInP2P}`);\n\n    return shouldBeInP2P;\n};\n\n/**\n * Stops the current P2P session.\n * @param {Object} options - Options for stopping P2P.\n * @param {string} options.reason - One of the Jingle \"reason\" element\n * names as defined by https://xmpp.org/extensions/xep-0166.html#def-reason\n * @param {string} options.reasonDescription - Text\n * description that will be included in the session terminate message\n * @param {boolean} requestRestart - Whether this is due to a session restart, in which case\n * media will not be resumed on the JVB.\n * @private\n */\nJitsiConference.prototype._stopP2PSession = function(options = {}) {\n    const {\n        reason = 'success',\n        reasonDescription = 'Turning off P2P session',\n        requestRestart = false\n    } = options;\n\n    if (!this.p2pJingleSession) {\n        logger.error('No P2P session to be stopped!');\n\n        return;\n    }\n\n    const wasP2PEstablished = this.isP2PActive();\n\n    // Swap remote tracks, but only if the P2P has been fully established\n    if (wasP2PEstablished) {\n        if (this.jvbJingleSession && !requestRestart) {\n            this._resumeMediaTransferForJvbConnection();\n        }\n\n        // Remove remote P2P tracks\n        this._removeRemoteP2PTracks();\n    }\n\n    // Stop P2P stats\n    logger.info('Stopping remote stats for P2P connection');\n    this.statistics.stopRemoteStats(this.p2pJingleSession.peerconnection);\n    logger.info('Stopping CallStats for P2P connection');\n    this.statistics.stopCallStats(this.p2pJingleSession.peerconnection);\n\n    this.p2pJingleSession.terminate(\n        () => {\n            logger.info('P2P session terminate RESULT');\n        },\n        error => {\n            // Because both initiator and responder are simultaneously\n            // terminating their JingleSessions in case of the 'to JVB switch'\n            // when 3rd participant joins, both will dispose their sessions and\n            // reply with 'item-not-found' (see strophe.jingle.js). We don't\n            // want to log this as an error since it's expected behaviour.\n            //\n            // We want them both to terminate, because in case of initiator's\n            // crash the responder would stay in P2P mode until ICE fails which\n            // could take up to 20 seconds.\n            //\n            // NOTE: whilst this is an error callback,  'success' as a reason is\n            // considered as graceful session terminate\n            // where both initiator and responder terminate their sessions\n            // simultaneously.\n            if (reason !== 'success') {\n                logger.error('An error occurred while trying to terminate P2P Jingle session', error);\n            }\n        }, {\n            reason,\n            reasonDescription,\n            sendSessionTerminate: this.room\n                && this.getParticipantById(\n                    Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid))\n        });\n\n    this.p2pJingleSession = null;\n\n    // Update P2P status and other affected events/states\n    this._setP2PStatus(false);\n\n    if (wasP2PEstablished) {\n        // Add back remote JVB tracks\n        if (this.jvbJingleSession && !requestRestart) {\n            this._addRemoteJVBTracks();\n        } else {\n            logger.info('Not adding remote JVB tracks - no session yet');\n        }\n    }\n};\n\n/**\n * Updates room presence if needed and send the packet in case of a modification.\n * @param {JingleSessionPC} jingleSession the session firing the event, contains the peer connection which\n * tracks we will check.\n * @param {Object|null} ctx a context object we can distinguish multiple calls of the same pass of updating tracks.\n */\nJitsiConference.prototype._updateRoomPresence = function(jingleSession, ctx) {\n    if (!jingleSession) {\n        return;\n    }\n\n    // skips sending presence twice for the same pass of updating ssrcs\n    if (ctx) {\n        if (ctx.skip) {\n            return;\n        }\n        ctx.skip = true;\n    }\n\n    const localAudioTracks = jingleSession.peerconnection.getLocalTracks(MediaType.AUDIO);\n    const localVideoTracks = jingleSession.peerconnection.getLocalTracks(MediaType.VIDEO);\n    let presenceChanged = false;\n\n    if (localAudioTracks && localAudioTracks.length) {\n        presenceChanged = this._setTrackMuteStatus(MediaType.AUDIO, localAudioTracks[0], localAudioTracks[0].isMuted());\n    } else if (this._setTrackMuteStatus(MediaType.AUDIO, undefined, true)) {\n        presenceChanged = true;\n    }\n\n    if (localVideoTracks && localVideoTracks.length) {\n        const muteStatusChanged = this._setTrackMuteStatus(\n            MediaType.VIDEO, localVideoTracks[0], localVideoTracks[0].isMuted());\n        const videoTypeChanged = this._setNewVideoType(localVideoTracks[0]);\n\n        presenceChanged = presenceChanged || muteStatusChanged || videoTypeChanged;\n    } else {\n        const muteStatusChanged = this._setTrackMuteStatus(MediaType.VIDEO, undefined, true);\n        const videoTypeChanged = this._setNewVideoType(); // set back to default video type\n\n        presenceChanged = presenceChanged || muteStatusChanged || videoTypeChanged;\n    }\n\n    presenceChanged && this.room.sendPresence();\n};\n\n/**\n * Checks whether or not the conference is currently in the peer to peer mode.\n * Being in peer to peer mode means that the direct connection has been\n * established and the P2P connection is being used for media transmission.\n * @return {boolean} <tt>true</tt> if in P2P mode or <tt>false</tt> otherwise.\n */\nJitsiConference.prototype.isP2PActive = function() {\n    return this.p2p;\n};\n\n/**\n * Returns the current ICE state of the P2P connection.\n * NOTE: method is used by the jitsi-meet-torture tests.\n * @return {string|null} an ICE state or <tt>null</tt> if there's currently\n * no P2P connection.\n */\nJitsiConference.prototype.getP2PConnectionState = function() {\n    if (this.isP2PActive()) {\n        return this.p2pJingleSession.peerconnection.getConnectionState();\n    }\n\n    return null;\n};\n\n/**\n * Configures the peerconnection so that a given framre rate can be achieved for desktop share.\n *\n * @param {number} maxFps The capture framerate to be used for desktop tracks.\n * @returns {boolean} true if the operation is successful, false otherwise.\n */\nJitsiConference.prototype.setDesktopSharingFrameRate = function(maxFps) {\n    if (typeof maxFps !== 'number' || isNaN(maxFps)) {\n        logger.error(`Invalid value ${maxFps} specified for desktop capture frame rate`);\n\n        return false;\n    }\n\n    this._desktopSharingFrameRate = maxFps;\n\n    // Enable or disable simulcast for plan-b screensharing based on the capture fps.\n    this.jvbJingleSession && this.jvbJingleSession.peerconnection.setDesktopSharingFrameRate(maxFps);\n\n    // Set the capture rate for desktop sharing.\n    this.rtc.setDesktopSharingFrameRate(maxFps);\n\n    return true;\n};\n\n/**\n * Manually starts new P2P session (should be used only in the tests).\n */\nJitsiConference.prototype.startP2PSession = function() {\n    const peers = this.getParticipants();\n\n    // Start peer to peer session\n    if (peers.length === 1) {\n        const peerJid = peers[0].getJid();\n\n        this._startP2PSession(peerJid);\n    } else {\n        throw new Error(\n            'There must be exactly 1 participant to start the P2P session !');\n    }\n};\n\n/**\n * Manually stops the current P2P session (should be used only in the tests).\n */\nJitsiConference.prototype.stopP2PSession = function(options) {\n    this._stopP2PSession(options);\n};\n\n/**\n * Get a summary of how long current participants have been the dominant speaker\n * @returns {object}\n */\nJitsiConference.prototype.getSpeakerStats = function() {\n    return this.speakerStatsCollector.getStats();\n};\n\n/**\n * Sends a facial expression with its duration to the xmpp server.\n * @param {Object} payload\n */\nJitsiConference.prototype.sendFacialExpression = function(payload) {\n    this.xmpp.sendFacialExpressionEvent(this.room.roomjid, payload);\n};\n\n/**\n * Sets the constraints for the video that is requested from the bridge.\n *\n * @param {Object} videoConstraints The constraints which are specified in the\n * following format. The message updates the fields that are present and leaves the\n * rest unchanged on the bridge. Therefore, any field that is not applicable anymore\n * should be cleared by passing an empty object or list (whatever is applicable).\n * {\n *      'lastN': 20,\n *      'selectedEndpoints': ['A', 'B', 'C'],\n *      'onStageEndpoints': ['A'],\n *      'defaultConstraints': { 'maxHeight': 180 },\n *      'constraints': {\n *          'A': { 'maxHeight': 720 }\n *      }\n * }\n */\nJitsiConference.prototype.setReceiverConstraints = function(videoConstraints) {\n    this.receiveVideoController.setReceiverConstraints(videoConstraints);\n};\n\n/**\n * Sets the maximum video size the local participant should receive from remote\n * participants.\n *\n * @param {number} maxFrameHeight - the maximum frame height, in pixels,\n * this receiver is willing to receive.\n * @returns {void}\n */\nJitsiConference.prototype.setReceiverVideoConstraint = function(maxFrameHeight) {\n    this.receiveVideoController.setPreferredReceiveMaxFrameHeight(maxFrameHeight);\n};\n\n/**\n * Sets the maximum video size the local participant should send to remote\n * participants.\n * @param {number} maxFrameHeight - The user preferred max frame height.\n * @returns {Promise} promise that will be resolved when the operation is\n * successful and rejected otherwise.\n */\nJitsiConference.prototype.setSenderVideoConstraint = function(maxFrameHeight) {\n    return this.sendVideoController.setPreferredSendMaxFrameHeight(maxFrameHeight);\n};\n\n/**\n * Creates a video SIP GW session and returns it if service is enabled. Before\n * creating a session one need to check whether video SIP GW service is\n * available in the system {@link JitsiConference.isVideoSIPGWAvailable}. Even\n * if there are available nodes to serve this request, after creating the\n * session those nodes can be taken and the request about using the\n * created session can fail.\n *\n * @param {string} sipAddress - The sip address to be used.\n * @param {string} displayName - The display name to be used for this session.\n * @returns {JitsiVideoSIPGWSession|Error} Returns null if conference is not\n * initialised and there is no room.\n */\nJitsiConference.prototype.createVideoSIPGWSession = function(sipAddress, displayName) {\n    if (!this.room) {\n        return new Error(VideoSIPGWConstants.ERROR_NO_CONNECTION);\n    }\n\n    return this.videoSIPGWHandler\n        .createVideoSIPGWSession(sipAddress, displayName);\n};\n\n/**\n * Sends a conference.join analytics event.\n *\n * @returns {void}\n */\nJitsiConference.prototype._sendConferenceJoinAnalyticsEvent = function() {\n    const meetingId = this.getMeetingUniqueId();\n\n    if (this._conferenceJoinAnalyticsEventSent || !meetingId || this.getActivePeerConnection() === null) {\n        return;\n    }\n\n    Statistics.sendAnalytics(createConferenceEvent('joined', {\n        meetingId,\n        participantId: `${meetingId}.${this._statsCurrentId}`\n    }));\n    this._conferenceJoinAnalyticsEventSent = Date.now();\n};\n\n/**\n * Sends conference.left analytics event.\n * @private\n */\nJitsiConference.prototype._sendConferenceLeftAnalyticsEvent = function() {\n    const meetingId = this.getMeetingUniqueId();\n\n    if (!meetingId || !this._conferenceJoinAnalyticsEventSent) {\n\n        return;\n    }\n\n    Statistics.sendAnalytics(createConferenceEvent('left', {\n        meetingId,\n        participantId: `${meetingId}.${this._statsCurrentId}`,\n        stats: {\n            duration: Math.floor((Date.now() - this._conferenceJoinAnalyticsEventSent) / 1000),\n            perf: this.getPerformanceStats()\n        }\n    }));\n};\n\n/**\n * Restarts all active media sessions.\n *\n * @returns {void}\n */\nJitsiConference.prototype._restartMediaSessions = function() {\n    if (this.p2pJingleSession) {\n        this._stopP2PSession({\n            reasonDescription: 'restart',\n            requestRestart: true\n        });\n    }\n\n    if (this.jvbJingleSession) {\n        this.jvbJingleSession.terminate(\n            null /* success callback => we don't care */,\n            error => {\n                logger.warn('An error occurred while trying to terminate the JVB session', error);\n            }, {\n                reason: 'success',\n                reasonDescription: 'restart required',\n                requestRestart: true,\n                sendSessionTerminate: true\n            });\n    }\n\n    this._maybeStartOrStopP2P(false);\n};\n\n/**\n * Returns whether End-To-End encryption is enabled.\n *\n * @returns {boolean}\n */\nJitsiConference.prototype.isE2EEEnabled = function() {\n    return Boolean(this._e2eEncryption && this._e2eEncryption.isEnabled());\n};\n\n/**\n * Returns whether End-To-End encryption is supported. Note that not all participants\n * in the conference may support it.\n *\n * @returns {boolean}\n */\nJitsiConference.prototype.isE2EESupported = function() {\n    return E2EEncryption.isSupported(this.options.config);\n};\n\n/**\n * Enables / disables End-to-End encryption.\n *\n * @param {boolean} enabled whether to enable E2EE or not.\n * @returns {void}\n */\nJitsiConference.prototype.toggleE2EE = function(enabled) {\n    if (!this.isE2EESupported()) {\n        logger.warn('Cannot enable / disable E2EE: platform is not supported.');\n\n        return;\n    }\n\n    this._e2eEncryption.setEnabled(enabled);\n};\n\n/**\n * Sets the key and index for End-to-End encryption.\n *\n * @param {CryptoKey} [keyInfo.encryptionKey] - encryption key.\n * @param {Number} [keyInfo.index] - the index of the encryption key.\n * @returns {void}\n */\nJitsiConference.prototype.setMediaEncryptionKey = function(keyInfo) {\n    this._e2eEncryption.setEncryptionKey(keyInfo);\n};\n\n/**\n * Returns <tt>true</tt> if lobby support is enabled in the backend.\n *\n * @returns {boolean} whether lobby is supported in the backend.\n */\nJitsiConference.prototype.isLobbySupported = function() {\n    return Boolean(this.room && this.room.getLobby().isSupported());\n};\n\n/**\n * Returns <tt>true</tt> if the room has members only enabled.\n *\n * @returns {boolean} whether conference room is members only.\n */\nJitsiConference.prototype.isMembersOnly = function() {\n    return Boolean(this.room && this.room.membersOnlyEnabled);\n};\n\n/**\n * Enables lobby by moderators\n *\n * @returns {Promise} resolves when lobby room is joined or rejects with the error.\n */\nJitsiConference.prototype.enableLobby = function() {\n    if (this.room && this.isModerator()) {\n        return this.room.getLobby().enable();\n    }\n\n    return Promise.reject(\n        new Error('The conference not started or user is not moderator'));\n};\n\n/**\n * Disabled lobby by moderators\n *\n * @returns {void}\n */\nJitsiConference.prototype.disableLobby = function() {\n    if (this.room && this.isModerator()) {\n        this.room.getLobby().disable();\n    } else {\n        logger.warn(`Failed to disable lobby, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator'}`);\n    }\n};\n\n/**\n * Joins the lobby room with display name and optional email or with a shared password to skip waiting.\n *\n * @param {string} displayName Display name should be set to show it to moderators.\n * @param {string} email Optional email is used to present avatar to the moderator.\n * @returns {Promise<never>}\n */\nJitsiConference.prototype.joinLobby = function(displayName, email) {\n    if (this.room) {\n        return this.room.getLobby().join(displayName, email);\n    }\n\n    return Promise.reject(new Error('The conference not started'));\n};\n\n/**\n * Gets the local id for a participant in a lobby room.\n * Returns undefined when current participant is not in the lobby room.\n * This is used for lobby room private chat messages.\n *\n * @returns {string}\n */\nJitsiConference.prototype.myLobbyUserId = function() {\n    if (this.room) {\n        return this.room.getLobby().getLocalId();\n    }\n};\n\n/**\n * Sends a message to a lobby room.\n * When id is specified it sends a private message.\n * Otherwise it sends the message to all moderators.\n * @param {message} Object The message to send\n * @param {string} id The participant id.\n *\n * @returns {void}\n */\nJitsiConference.prototype.sendLobbyMessage = function(message, id) {\n    if (this.room) {\n        if (id) {\n            return this.room.getLobby().sendPrivateMessage(id, message);\n        }\n\n        return this.room.getLobby().sendMessage(message);\n    }\n};\n\n/**\n * Adds a message listener to the lobby room\n * @param {Function} listener The listener function,\n * called when a new message is received in the lobby room.\n *\n * @returns {Function} Handler returned to be able to remove it later.\n */\nJitsiConference.prototype.addLobbyMessageListener = function(listener) {\n    if (this.room) {\n        return this.room.getLobby().addMessageListener(listener);\n    }\n};\n\n/**\n * Removes a message handler from the lobby room\n * @param {Function} handler The handler function  to remove.\n *\n * @returns {void}\n */\nJitsiConference.prototype.removeLobbyMessageHandler = function(handler) {\n    if (this.room) {\n        return this.room.getLobby().removeMessageHandler(handler);\n    }\n};\n\n/**\n * Denies an occupant in the lobby room access to the conference.\n * @param {string} id The participant id.\n */\nJitsiConference.prototype.lobbyDenyAccess = function(id) {\n    if (this.room) {\n        this.room.getLobby().denyAccess(id);\n    }\n};\n\n/**\n * Approves the request to join the conference to a participant waiting in the lobby.\n *\n * @param {string} id The participant id.\n */\nJitsiConference.prototype.lobbyApproveAccess = function(id) {\n    if (this.room) {\n        this.room.getLobby().approveAccess(id);\n    }\n};\n\n/**\n * Returns <tt>true</tt> if AV Moderation support is enabled in the backend.\n *\n * @returns {boolean} whether AV Moderation is supported in the backend.\n */\nJitsiConference.prototype.isAVModerationSupported = function() {\n    return Boolean(this.room && this.room.getAVModeration().isSupported());\n};\n\n/**\n * Enables AV Moderation.\n * @param {MediaType} mediaType \"audio\" or \"video\"\n */\nJitsiConference.prototype.enableAVModeration = function(mediaType) {\n    if (this.room && this.isModerator()\n        && (mediaType === MediaType.AUDIO || mediaType === MediaType.VIDEO)) {\n        this.room.getAVModeration().enable(true, mediaType);\n    } else {\n        logger.warn(`Failed to enable AV moderation, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator, '}${\n            this.room && this.isModerator() ? 'wrong media type passed' : ''}`);\n    }\n};\n\n/**\n * Disables AV Moderation.\n * @param {MediaType} mediaType \"audio\" or \"video\"\n */\nJitsiConference.prototype.disableAVModeration = function(mediaType) {\n    if (this.room && this.isModerator()\n        && (mediaType === MediaType.AUDIO || mediaType === MediaType.VIDEO)) {\n        this.room.getAVModeration().enable(false, mediaType);\n    } else {\n        logger.warn(`Failed to disable AV moderation, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator, '}${\n            this.room && this.isModerator() ? 'wrong media type passed' : ''}`);\n    }\n};\n\n/**\n * Approve participant access to certain media, allows unmuting audio or video.\n *\n * @param {MediaType} mediaType \"audio\" or \"video\"\n * @param id the id of the participant.\n */\nJitsiConference.prototype.avModerationApprove = function(mediaType, id) {\n    if (this.room && this.isModerator()\n        && (mediaType === MediaType.AUDIO || mediaType === MediaType.VIDEO)) {\n\n        const participant = this.getParticipantById(id);\n\n        if (!participant) {\n            return;\n        }\n\n        this.room.getAVModeration().approve(mediaType, participant.getJid());\n    } else {\n        logger.warn(`AV moderation approve skipped , ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator, '}${\n            this.room && this.isModerator() ? 'wrong media type passed' : ''}`);\n    }\n};\n\n/**\n * Reject participant access to certain media, blocks unmuting audio or video.\n *\n * @param {MediaType} mediaType \"audio\" or \"video\"\n * @param id the id of the participant.\n */\nJitsiConference.prototype.avModerationReject = function(mediaType, id) {\n    if (this.room && this.isModerator()\n        && (mediaType === MediaType.AUDIO || mediaType === MediaType.VIDEO)) {\n\n        const participant = this.getParticipantById(id);\n\n        if (!participant) {\n            return;\n        }\n\n        this.room.getAVModeration().reject(mediaType, participant.getJid());\n    } else {\n        logger.warn(`AV moderation reject skipped , ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator, '}${\n            this.room && this.isModerator() ? 'wrong media type passed' : ''}`);\n    }\n};\n\n/**\n * Returns the breakout rooms manager object.\n *\n * @returns {Object} the breakout rooms manager.\n */\nJitsiConference.prototype.getBreakoutRooms = function() {\n    return this.room?.getBreakoutRooms();\n};\n\n\n\n/**\n * Gets the local user when joined\n */\n JitsiConference.prototype.getLocalUser = function() {\n    if (this.user) {\n        return this.user;\n    }\n};\n\n/**\n * Gets the local user when joined\n */\nJitsiConference.prototype.terminate = function() {\n    this.sendCommand('terminate', {});\n};\n\n\nJitsiConference.prototype.handleSubtitles = function() {\n\n    let pastMessage = {};\n    const JSON_TYPE_TRANSCRIPTION_RESULT = 'transcription-result';\n    const JSON_TYPE_TRANSLATION_RESULT = 'translation-result';\n    const P_NAME_REQUESTING_TRANSCRIPTION = 'requestingTranscription';\n    const P_NAME_TRANSLATION_LANGUAGE = 'translation_language';\n\n    this.on(JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED, (participant, json) => {\n\n        if (!(json && (json.type === JSON_TYPE_TRANSCRIPTION_RESULT || json.type === JSON_TYPE_TRANSLATION_RESULT))) {\n            return;\n        }\n\n        const translationLanguage = this.getLocalParticipantProperty('translation_language');\n\n        try {\n\n            const transcriptMessageID = json.message_id;\n            const participantName = json.participant.name;\n\n            let newTranscriptMessage = { transcriptMessageID };\n\n            if (json.type === JSON_TYPE_TRANSLATION_RESULT && json.language === translationLanguage) {\n\n                newTranscriptMessage.final = json.text;\n                newTranscriptMessage.participantName = participantName;\n\n            } else if (json.type === JSON_TYPE_TRANSCRIPTION_RESULT && !translationLanguage) {\n                // Displays interim and final results without any translation if\n                // translations are disabled.\n\n                const { text } = json.transcript[0];\n\n                // We update the previous transcript message with the same\n                // message ID or adds a new transcript message if it does not\n                // exist in the map.\n\n                if (pastMessage.transcriptMessageID === transcriptMessageID) {\n                    newTranscriptMessage = pastMessage;\n                } else {\n                    newTranscriptMessage.participantName = participantName;\n                }\n\n                // If this is final result, update the state as a final result\n                // and start a count down to remove the subtitle from the state\n                if (!json.is_interim) {\n                    newTranscriptMessage.final = text;\n\n                } else if (json.stability > 0.85) {\n                    // If the message has a high stability, we can update the\n                    // stable field of the state and remove the previously\n                    // unstable results\n                    newTranscriptMessage.stable = text;\n                    newTranscriptMessage.unstable = undefined;\n\n                } else {\n                    // Otherwise, this result has an unstable result, which we\n                    // add to the state. The unstable result will be appended\n                    // after the stable part.\n                    newTranscriptMessage.unstable = text;\n                }\n\n            }\n\n            let finalText = '';\n\n            if (newTranscriptMessage.final) {\n                finalText = newTranscriptMessage.final;\n            } else {\n                const stable = newTranscriptMessage.stable || '';\n                const unstable = newTranscriptMessage.unstable || '';\n\n                finalText = stable + unstable;\n            }\n            const fellowParticipantName =  this.participants[json?.participant?.id]?._identity?.user?.name ||  this?.getLocalUser()?.name;\n            this.eventEmitter.emit(JitsiConferenceEvents.SUBTITLES_RECEIVED, json?.participant?.id, fellowParticipantName, finalText);\n        } catch (error) {\n            logger.error('Error occurred while updating transcriptions\\n', error);\n        }\n    });\n};\n\n// enable analytics\nJitsiConference.prototype.enableAnalytics = function() {\n    this.statistics.addAnalyticsEventListener((eventName, payload) => {\n        let name = '', body = {};\n\n        if (typeof eventName === 'string') {\n            name = eventName;\n            body = payload;\n        } else if (typeof eventName === 'object') {\n            name = eventName.name;\n            body = eventName;\n        }\n\n        const finalPaylaod = {\n            name,\n            action: body.action ? body.action : '',\n            actionSubject: body.actionSubject ? body.actionSubject : '',\n            source: body.source ? body.source : '',\n            attributes: JSON.stringify(payload)\n        };\n\n        this.eventEmitter.emit(JitsiConferenceEvents.ANALYTICS_EVENT_RECEIVED, finalPaylaod);\n    });\n};\n\nJitsiConference.prototype.startLocalRecording = function(format = 'ogg') {\n    this.recordingController.startRecording(format);\n};\n\nJitsiConference.prototype.stopLocalRecording = function() {\n    this.recordingController.stopRecording();\n};\n\nJitsiConference.prototype.switchFormat = function() {\n    this.recordingController.switchFormat(format);\n};\n\nJitsiConference.prototype.setMuted = function(muted) {\n    this.recordingController.setMuted(muted);\n};\n\nJitsiConference.prototype.setMicDevice = function(micDeviceId) {\n    this.recordingController.setMicDevice(micDeviceId);\n};\n\nJitsiConference.prototype.startSIPVideoCall = function(sipAddress, displayName) {\n    if (this.sessions[sipAddress]) {\n        return;\n    }\n    const session = this.createVideoSIPGWSession(sipAddress, displayName);\n\n    this.sessions[sipAddress] = session;\n    session.start();\n};\n\nJitsiConference.prototype.stopSIPVideoCall = function(sipAddress) {\n    if (!this.sessions[sipAddress]) {\n        return;\n    }\n    this.sessions[sipAddress].stop();\n    delete this.sessions[sipAddress];\n};","import Bourne from '@hapi/bourne';\n\n/**\n * A list if keys to ignore when parsing.\n * @type {string[]}\n */\n\nconst blacklist = [ '__proto__', 'constructor', 'prototype' ];\n\n/**\n * Parses the query/search or fragment/hash parameters out of a specific URL and\n * returns them as a JS object.\n *\n * @param {URL} url - The URL to parse.\n * @param {boolean} dontParse - If falsy, some transformations (for parsing the\n * value as JSON) will be executed.\n * @param {string} source - If {@code 'search'}, the parameters will parsed out\n * of {@code url.search}; otherwise, out of {@code url.hash}.\n * @returns {Object}\n */\n\nexport function parseURLParams(dontParse = true) {\n    const paramStr = location.search ? location.search : location.hash;\n    const params = {};\n    const paramParts = paramStr && paramStr.substr(1)\n        .split('&') || []; // Detect and ignore hash params for hash routers.\n\n    if (location.hash && paramParts.length === 1) {\n        const firstParam = paramParts[0];\n\n        if (firstParam.startsWith('/') && firstParam.split('&').length === 1) {\n            return params;\n        }\n    }\n\n    paramParts.forEach(part => {\n        const param = part.split('=');\n        const key = param[0];\n\n        if (!key || blacklist.includes(key.split('.')[0])) {\n            return;\n        }\n\n        let value;\n\n        try {\n            value = param[1];\n\n            if (!dontParse) {\n                const decoded = decodeURIComponent(value)\n                    .replace(/\\\\&/, '&');\n                value = decoded === 'undefined' ? undefined : Bourne.parse(decoded);\n            }\n        } catch (e) {\n            console.log(`Failed to parse URL parameter value: ${String(value)}`);\n            return;\n        }\n\n        params[key] = value;\n    });\n    return params;\n}\n\n\nexport function syncWithURL(conferenceConfig) {\n    const params = parseURLParams();\n    Object.keys(params)\n        .forEach(param => {\n            const key = param.replace('config.', '');\n            switch (key) {\n            case 'analytics.disabled':\n                conferenceConfig.analytics.disabled = params[param];\n                break;\n            case 'startWithAudioMuted':\n                conferenceConfig.startAudioMuted = params[param];\n                break;\n            case 'startWithVideoMuted':\n                conferenceConfig.startVideoMuted = params[param];\n                break;\n            case 'p2p.enabled':\n                conferenceConfig.p2p.enabled = params[param];\n                break;\n            default:\n                conferenceConfig[key] = params[param];\n            }\n        });\n    console.log(\"conferenceConfig\",conferenceConfig);    \n    return conferenceConfig;\n}\n\n\n\n\n\n\n\n","// enable/disable different features by changing this configuration file\nexport const initSDKConfig = {\n    disableAudioLevels: false,\n    // useIPv6 - boolean property\n    // disableSimulcast: true //boolean property. Enables/disables simulcast.\n    // enableWindowOnErrorHandler - boolean property (default false). Enables/disables attaching global onerror handler (window.onerror).\n    // disableThirdPartyRequests - if true - callstats will be disabled and the callstats API won't be included.\n    // enableAnalyticsLogging - boolean property (default false). Enables/disables analytics logging.\n    // externalStorage - Object that implements the Storage interface. If specified this object will be used for storing data instead of localStorage.\n    // callStatsCustomScriptUrl - (optional) custom url to access callstats client script\n    // disableRtx - (optional) boolean property (default to false). Enables/disable the use of RTX.\n    // disabledCodec - the mime type of the code that should not be negotiated on the peerconnection.\n    // preferredCodec the mime type of the codec that needs to be made the preferred codec for the connection.\n};\n\nexport const connectionConfig = {\n    hosts: {\n        domain: 'sariska.io',\n        muc: 'muc.sariska.io'\n    },\n    serviceUrl: 'wss://api.sariska.io/api/v1/media/websocket',\n    clientNode: 'https://www.sariska.io',\n    // enableLipSync - (optional) boolean property which enables the lipsync feature. Currently works only in Chrome and is disabled by default.\n};\n\nexport const conferenceConfig = {\n    enableLocalRecording: true,\n    enableVirtualBackground: false,\n    enableNoiseCancellation: false,\n    enableTalkWhileMuted: true,\n    enableNoAudioDetection: true,\n    enableNoisyMicDetection: true,\n    createVADProcessor: true,\n    openBridgeChannel: 'websocket',\n    //- Enables/disables bridge channel. Values can be \"datachannel\", \"websocket\", true (treat it as \"datachannel\"), undefined (treat it as \"datachannel\") and false (don't open any channel). NOTE: we recommend to set that option to true\n    // recordingType - the type of recording to be used\n    // callStatsID - callstats credentials\n    // callStatsSecret - callstats credentials\n    // enableTalkWhileMuted - boolean property. Enables/disables talk while muted detection, by default the value is false/disabled.\n    // ignoreStartMuted - ignores start muted events coming from jicofo.\n    // startSilent - enables silent mode, will mark audio as inactive will not send/receive audio\n    // confID - Used for statistics to identify conference, if tenants are supported will contain tenant and the non lower case variant for the room name.\n    // siteID - (optional) Used for statistics to identify the site where the user is coming from, if tenants are supported it will contain a unique identifier for that tenant. If not provided, the value will be infered from confID\n    // statisticsId - The id to be used as stats instead of default callStatsUsername.\n    // statisticsDisplayName - The display name to be used for stats, used for callstats.\n    // focusUserJid - The real JID of focus participant - can be overridden here\n    // enableNoAudioDetection\n    // enableNoisyMicDetection\n    // enableRemb\n    // enableTcc\n    // useRoomAsSharedDocumentName\n    // channelLastN\n    // startBitrate\n    // stereo\n    // forceJVB121Ratio - \"Math.random() < forceJVB121Ratio\" will determine whether a 2 people conference should be moved to the JVB instead of P2P. The decision is made on the responder side, after ICE succeeds on the P2P connection.\n    hiddenDomain: \"recorder.sariska.io\",\n    // startAudioMuted\n    // startVideoMuted\n    enableLayerSuspension: true, // - if set to 'true', we will cap the video send bitrate when we are told we have not been selected by any endpoints (and therefore the non-thumbnail streams are not in use).\n    // deploymentInfo\n    // shard\n    // userRegion\n    // rttMonitor\n    // enabled\n    // initialDelay\n    // getStatsInterval\n    // analyticsInterval\n    // stunServers\n    e2eping: {\n        pingInterval: -1 // analyticsInterval: 60000,\n    },\n    analytics: {\n        disabled: false\n        // rtcstatsEnabled: true,\n\n        // In order to enable rtcstats one needs to provide a endpoint url.\n        // rtcstatsEndpoint: wss://rtcstats-server-pilot.jitsi.net/,\n\n        // The interval at which rtcstats will poll getStats, defaults to 1000ms.\n        // If the value is set to 0 getStats won't be polled and the rtcstats client\n        // will only send data related to RTCPeerConnection events.\n        // rtcstatsPolIInterval: 1000,\n    },\n    // pingInterval\n    // abTesting - A/B testing related options\n    // enableSuspendVideoTest\n    // testing\n    // capScreenshareBitrate\n    // p2pTestMode\n    // octo\n    // probability\n    p2p: {\n        // Enables peer to peer mode. When enabled the system will try to\n        // establish a direct connection when there are exactly 2 participants\n        // in the room. If that succeeds the conference will stop sending data\n        // through the JVB and use the peer to peer connection instead. When a\n        // 3rd participant joins the conference will be moved back to the JVB\n        // connection.\n        enabled: false // The STUN servers that will be used in the peer to peer connections\n        // stunServers: [\n        //    { urls: 'stun.l.google.com:19302' }\n        //]\n        // Sets the ICE transport policy for the p2p connection. At the time\n        // of this writing the list of possible values are 'all' and 'relay',\n        // but that is subject to change in the future. The enum is defined in\n        // the WebRTC standard:\n        // https://www.w3.org/TR/webrtc/#rtcicetransportpolicy-enum.\n        // If not set, the effective value is 'all'.\n        // iceTransportPolicy: 'all',\n        // Provides a way to set the video codec preference on the p2p connection. Acceptable\n        // codec values are 'VP8', 'VP9' and 'H264'.\n        // preferredCodec: 'H264',\n        // Provides a way to prevent a video codec from being negotiated on the p2p connection.\n        // disabledCodec: '',\n        // How long we're going to wait, before going back to P2P after the 3rd\n        // participant has left the conference (to filter out page reload).\n        // backToP2PDelay: 5\n    }\n};\n","import JitsiConference from './JitsiConference';\nimport * as JitsiConnectionEvents from './JitsiConnectionEvents';\nimport Statistics from './modules/statistics/statistics';\nimport XMPP from './modules/xmpp/xmpp';\nimport {\n    CONNECTION_DISCONNECTED as ANALYTICS_CONNECTION_DISCONNECTED,\n    createConnectionFailedEvent\n} from './service/statistics/AnalyticsEvents';\nimport { jitsiLocalStorage } from '@jitsi/js-utils';\nimport { syncWithURL } from \"./modules/util/parseURLParams\";\nimport { connectionConfig, conferenceConfig } from './config';\nexport const DISCO_JIBRI_FEATURE = 'http://jitsi.org/protocol/jibri';\n\n/**\n * Creates a new connection object for the Jitsi Meet server side video\n * conferencing service. Provides access to the JitsiConference interface.\n * @param appID identification for the provider of Jitsi Meet video conferencing\n * services.\n * @param token the JWT token used to authenticate with the server(optional)\n * @param options Object with properties / settings related to connection with\n * the server.\n * @constructor\n */\nexport default function JitsiConnection(token, roomName, isDev) {\n    const options = { ...connectionConfig };\n    \n    const jwt = this.parseJwt(token);\n    this.name = roomName;\n    this.user = jwt.context.user;\n    options.serviceUrl = isDev ? `wss://api.dev.sariska.io/api/v1/media/websocket?room=${roomName}` : `${options.serviceUrl}?room=${roomName}`;\n    this.options = options;\n    this.xmpp = new XMPP(options, token);\n    this.token = token;\n\n    /* eslint-disable max-params */\n    this.addEventListener(JitsiConnectionEvents.CONNECTION_FAILED,\n        (errType, msg, credentials, details) => {\n            Statistics.sendAnalyticsAndLog(\n                createConnectionFailedEvent(errType, msg, details));\n        });\n    /* eslint-enable max-params */\n\n    this.addEventListener(JitsiConnectionEvents.CONNECTION_DISCONNECTED,\n        msg => {\n            // we can see disconnects from normal tab closing of the browser\n            // and then there are no msgs, but we want to log only disconnects\n            // when there is real error\n            // XXX Do we need the difference in handling between the log and\n            // analytics event here?\n            if (msg) {\n                Statistics.sendAnalytics(\n                    ANALYTICS_CONNECTION_DISCONNECTED,\n                    { message: msg });\n            }\n            Statistics.sendLog(\n                JSON.stringify(\n                    {\n                        id: ANALYTICS_CONNECTION_DISCONNECTED,\n                        msg\n                    }));\n        });\n}\n\nJitsiConnection.prototype.parseJwt = function (token) {\n    try {\n      return JSON.parse(atob(token.split('.')[1]));\n    } catch (e) {\n      return null;\n    }\n  };\n  \n/**\n * Connect the client with the server.\n * @param options {object} connecting options\n * (for example authentications parameters).\n */\nJitsiConnection.prototype.connect = function(options = {}) {\n    const usernameOverride = jitsiLocalStorage.getItem('xmpp_username_override');\n    const passwordOverride = jitsiLocalStorage.getItem('xmpp_password_override');\n  \n    if (usernameOverride && usernameOverride.length > 0) {\n      options.id = usernameOverride; // eslint-disable-line no-param-reassign\n    }\n  \n    if (passwordOverride && passwordOverride.length > 0) {\n      options.password = passwordOverride; // eslint-disable-line no-param-reassign\n    }\n  \n    this.xmpp.connect(options.id, options.password);\n};\n\n/**\n * Attach to existing connection. Can be used for optimizations. For example:\n * if the connection is created on the server we can attach to it and start\n * using it.\n *\n * @param options {object} connecting options - rid, sid and jid.\n */\nJitsiConnection.prototype.attach = function(options) {\n    this.xmpp.attach(options);\n};\n\n/**\n * Disconnect the client from the server.\n * @returns {Promise} - Resolves when the disconnect process is finished or rejects with an error.\n */\nJitsiConnection.prototype.disconnect = function(...args) {\n    // XXX Forward any arguments passed to JitsiConnection.disconnect to\n    // XMPP.disconnect. For example, the caller of JitsiConnection.disconnect\n    // may optionally pass the event which triggered the disconnect in order to\n    // provide the implementation with finer-grained context.\n    return this.xmpp.disconnect(...args);\n};\n\n/**\n * Returns the jid of the participant associated with the XMPP connection.\n *\n * @returns {string} The jid of the participant.\n */\nJitsiConnection.prototype.getJid = function() {\n    return this.xmpp.getJid();\n};\n\n/**\n * This method allows renewal of the tokens if they are expiring.\n * @param token the new token.\n */\nJitsiConnection.prototype.setToken = function(token) {\n    this.token = token;\n};\n\n/**\n * Creates and joins new conference.\n * @param name the name of the conference; if null - a generated name will be\n * provided from the api\n * @param options Object with properties / settings related to the conference\n * that will be created.\n * @returns {JitsiConference} returns the new conference object.\n */\nJitsiConnection.prototype.initJitsiConference = function(options={}) {\n    options = { ...conferenceConfig,\n    ...options\n    };\n    options = syncWithURL(options);\n    const name = this.name;\n\n    if (options.iAmRecorder) {\n    this.addFeature(DISCO_JIBRI_FEATURE);\n    }\n\n    return new JitsiConference({\n        name,\n        config: options,\n        connection: this,\n        user: this.user\n    });\n};\n\n/**\n * Subscribes the passed listener to the event.\n * @param event {JitsiConnectionEvents} the connection event.\n * @param listener {Function} the function that will receive the event\n */\nJitsiConnection.prototype.addEventListener = function(event, listener) {\n    this.xmpp.addListener(event, listener);\n};\n\n/**\n * Unsubscribes the passed handler.\n * @param event {JitsiConnectionEvents} the connection event.\n * @param listener {Function} the function that will receive the event\n */\nJitsiConnection.prototype.removeEventListener = function(event, listener) {\n    this.xmpp.removeListener(event, listener);\n};\n\n/**\n * Returns measured connectionTimes.\n */\nJitsiConnection.prototype.getConnectionTimes = function() {\n    return this.xmpp.connectionTimes;\n};\n\n/**\n * Adds new feature to the list of supported features for the local\n * participant.\n * @param {String} feature the name of the feature.\n * @param {boolean} submit if true - the new list of features will be\n * immediately submitted to the others.\n */\nJitsiConnection.prototype.addFeature = function(feature, submit = false) {\n    this.xmpp.caps.addFeature(feature, submit, true);\n};\n\n/**\n * Removes a feature from the list of supported features for the local\n * participant\n * @param {String} feature the name of the feature.\n * @param {boolean} submit if true - the new list of features will be\n * immediately submitted to the others.\n */\nJitsiConnection.prototype.removeFeature = function(feature, submit = false) {\n    this.xmpp.caps.removeFeature(feature, submit, true);\n};\n\n/**\n * Get object with internal logs.\n */\nJitsiConnection.prototype.getLogs = function() {\n    const data = this.xmpp.getJingleLog();\n\n    const metadata = {};\n\n    metadata.time = new Date();\n    metadata.url = window.location.href;\n    metadata.ua = navigator.userAgent;\n\n    const log = this.xmpp.getXmppLog();\n\n    if (log) {\n        metadata.xmpp = log;\n    }\n\n    data.metadata = metadata;\n\n    return data;\n};","/**\n * The events for the media devices.\n */\n\n/**\n * Indicates that the list of available media devices has been changed. The\n * event provides the following parameters to its listeners:\n *\n * @param {MediaDeviceInfo[]} devices - array of MediaDeviceInfo or\n *  MediaDeviceInfo-like objects that are currently connected.\n *  @see https://developer.mozilla.org/en-US/docs/Web/API/MediaDeviceInfo\n */\nexport const DEVICE_LIST_CHANGED = 'mediaDevices.devicechange';\n\n/**\n * Event emitted when the user granted/blocked a permission for the camera / mic.\n * Used to keep track of the granted permissions on browsers which don't\n * support the Permissions API.\n */\nexport const PERMISSIONS_CHANGED = 'rtc.permissions_changed';\n\n/**\n * Indicates that the environment is currently showing permission prompt to\n * access camera and/or microphone. The event provides the following\n * parameters to its listeners:\n *\n * @param {'chrome'|'opera'|'firefox'|'safari'|'nwjs'\n *  |'react-native'|'android'} environmentType - type of browser or\n *  other execution environment.\n */\nexport const PERMISSION_PROMPT_IS_SHOWN\n    = 'mediaDevices.permissionPromptIsShown';\n\nexport const SLOW_GET_USER_MEDIA = 'mediaDevices.slowGetUserMedia';\n","import EventEmitter from 'events';\n\nimport * as JitsiMediaDevicesEvents from './JitsiMediaDevicesEvents';\nimport RTC from './modules/RTC/RTC';\nimport browser from './modules/browser';\nimport Statistics from './modules/statistics/statistics';\nimport * as MediaType from './service/RTC/MediaType';\nimport RTCEvents from './service/RTC/RTCEvents';\n\nconst AUDIO_PERMISSION_NAME = 'microphone';\nconst PERMISSION_GRANTED_STATUS = 'granted';\nconst VIDEO_PERMISSION_NAME = 'camera';\n\n/**\n * Media devices utilities for Jitsi.\n */\nclass JitsiMediaDevices {\n    /**\n     * Initializes a {@code JitsiMediaDevices} object. There will be a single\n     * instance of this class.\n     */\n    constructor() {\n        this._eventEmitter = new EventEmitter();\n        this._permissions = {};\n\n        RTC.addListener(\n            RTCEvents.DEVICE_LIST_CHANGED,\n            devices =>\n                this._eventEmitter.emit(\n                    JitsiMediaDevicesEvents.DEVICE_LIST_CHANGED,\n                    devices));\n        RTC.addListener(\n            RTCEvents.DEVICE_LIST_AVAILABLE,\n            devices =>\n                this._logOutputDevice(\n                    this.getAudioOutputDevice(),\n                    devices));\n\n        // We would still want to update the permissions cache in case the permissions API is not supported.\n        RTC.addListener(\n            RTCEvents.PERMISSIONS_CHANGED,\n            permissions => this._handlePermissionsChange(permissions));\n\n        // Test if the W3C Permissions API is implemented and the 'camera' and 'microphone' permissions are\n        // implemented. If supported add onchange listeners.\n        this._permissionsApiSupported = new Promise(resolve => {\n            if (!navigator.permissions) {\n                resolve(false);\n\n                return;\n            }\n\n            const self = this;\n\n            const promises = [];\n\n            promises.push(navigator.permissions.query({ name: VIDEO_PERMISSION_NAME })\n                .then(status => {\n                    this._handlePermissionsChange({\n                        [MediaType.VIDEO]: this._parsePermissionState(status)\n                    });\n                    status.onchange = function() {\n                        try {\n                            self._handlePermissionsChange({\n                                [MediaType.VIDEO]: self._parsePermissionState(this)\n                            });\n                        } catch (error) {\n                            // Nothing to do.\n                        }\n                    };\n\n                    return true;\n                })\n                .catch(() => false));\n\n            promises.push(navigator.permissions.query({ name: AUDIO_PERMISSION_NAME })\n                .then(status => {\n                    this._handlePermissionsChange({\n                        [MediaType.AUDIO]: this._parsePermissionState(status)\n                    });\n                    status.onchange = function() {\n                        try {\n                            self._handlePermissionsChange({\n                                [MediaType.AUDIO]: self._parsePermissionState(this)\n                            });\n                        } catch (error) {\n                            // Nothing to do.\n                        }\n                    };\n\n                    return true;\n                })\n                .catch(() => false));\n\n            Promise.all(promises).then(results => resolve(results.every(supported => supported)));\n\n        });\n    }\n\n\n    /**\n     * Parses a PermissionState object and returns true for granted and false otherwise.\n     *\n     * @param {PermissionState} permissionStatus - The PermissionState object retrieved from the Permissions API.\n     * @returns {boolean} - True for granted and false for denied.\n     * @throws {TypeError}\n     */\n    _parsePermissionState(permissionStatus = {}) {\n        // The status attribute is deprecated, and state\n        // should be used instead, but check both for now\n        // for backwards compatibility.\n        const status = permissionStatus.state || permissionStatus.status;\n\n        if (typeof status !== 'string') {\n            throw new TypeError();\n        }\n\n        return status === PERMISSION_GRANTED_STATUS;\n    }\n\n    /**\n     * Updates the local granted/denied permissions cache. A permissions might be\n     * granted, denied, or undefined. This is represented by having its media\n     * type key set to {@code true} or {@code false} respectively.\n     *\n     * @param {Object} permissions - Object with the permissions.\n     */\n    _handlePermissionsChange(permissions) {\n        const hasPermissionsChanged\n            = [ MediaType.AUDIO, MediaType.VIDEO ]\n                .some(type => type in permissions && permissions[type] !== this._permissions[type]);\n\n        if (hasPermissionsChanged) {\n            this._permissions = {\n                ...this._permissions,\n                ...permissions\n            };\n            this._eventEmitter.emit(JitsiMediaDevicesEvents.PERMISSIONS_CHANGED, this._permissions);\n\n            if (this._permissions[MediaType.AUDIO] || this._permissions[MediaType.VIDEO]) {\n                // Triggering device list update when the permissiions are granted in order to update\n                // the labels the devices.\n                // eslint-disable-next-line no-empty-function\n                this.enumerateDevices(() => {});\n            }\n        }\n    }\n\n    /**\n     * Gathers data and sends it to statistics.\n     * @param deviceID the device id to log\n     * @param devices list of devices\n     */\n    _logOutputDevice(deviceID, devices) {\n        const device\n            = devices.find(\n                d => d.kind === 'audiooutput' && d.deviceId === deviceID);\n\n        if (device) {\n            Statistics.sendActiveDeviceListEvent(\n                RTC.getEventDataForActiveDevice(device));\n        }\n    }\n\n    /**\n     * Executes callback with list of media devices connected.\n     * @param {function} callback\n     */\n    enumerateDevices(callback) {\n        RTC.enumerateDevices(callback);\n    }\n\n    /**\n     * Checks if its possible to enumerate available cameras/micropones.\n     * @returns {Promise<boolean>} a Promise which will be resolved only once\n     * the WebRTC stack is ready, either with true if the device listing is\n     * available available or with false otherwise.\n     */\n    isDeviceListAvailable() {\n        return RTC.isDeviceListAvailable();\n    }\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     * @param {string} [deviceType] - type of device to change. Default is\n     *      undefined or 'input', 'output' - for audio output device change.\n     * @returns {boolean} true if available, false otherwise.\n     */\n    isDeviceChangeAvailable(deviceType) {\n        return RTC.isDeviceChangeAvailable(deviceType);\n    }\n\n    /**\n     * Checks if the permission for the given device was granted.\n     *\n     * @param {'audio'|'video'} [type] - type of devices to check,\n     *      undefined stands for both 'audio' and 'video' together\n     * @returns {Promise<boolean>}\n     */\n    isDevicePermissionGranted(type) {\n        return new Promise(resolve => {\n            // Shortcut: first check if we already know the permission was\n            // granted.\n            if (type in this._permissions) {\n                resolve(this._permissions[type]);\n\n                return;\n            }\n\n            // Check using the Permissions API.\n            this._permissionsApiSupported.then(supported => {\n                if (!supported) {\n                    resolve(false);\n\n                    return;\n                }\n\n                const promises = [];\n\n                switch (type) {\n                case MediaType.VIDEO:\n                    promises.push(\n                        navigator.permissions.query({\n                            name: VIDEO_PERMISSION_NAME\n                        }));\n                    break;\n                case MediaType.AUDIO:\n                    promises.push(\n                        navigator.permissions.query({\n                            name: AUDIO_PERMISSION_NAME\n                        }));\n                    break;\n                default:\n                    promises.push(\n                        navigator.permissions.query({\n                            name: VIDEO_PERMISSION_NAME\n                        }));\n                    promises.push(\n                        navigator.permissions.query({\n                            name: AUDIO_PERMISSION_NAME\n                        }));\n                }\n\n                Promise.all(promises).then(\n                    results => resolve(results.every(permissionStatus => {\n                        try {\n                            return this._parsePermissionState(permissionStatus);\n                        } catch {\n                            return false;\n                        }\n                    })),\n                    () => resolve(false)\n                );\n            });\n        });\n    }\n\n    /**\n     * Returns true if it is possible to be simultaneously capturing audio from more than one device.\n     *\n     * @returns {boolean}\n     */\n    isMultipleAudioInputSupported() {\n        return !(browser.isFirefox() || browser.isIosBrowser());\n    }\n\n    /**\n     * Returns currently used audio output device id, 'default' stands\n     * for default device\n     * @returns {string}\n     */\n    getAudioOutputDevice() {\n        return RTC.getAudioOutputDevice();\n    }\n\n    /**\n     * Sets current audio output device.\n     * @param {string} deviceId - id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices(), 'default' is for\n     *      default device\n     * @returns {Promise} - resolves when audio output is changed, is rejected\n     *      otherwise\n     */\n    setAudioOutputDevice(deviceId) {\n        const availableDevices = RTC.getCurrentlyAvailableMediaDevices();\n\n        if (availableDevices.length > 0) {\n            // if we have devices info report device to stats\n            // normally this will not happen on startup as this method is called\n            // too early. This will happen only on user selection of new device\n            this._logOutputDevice(\n                deviceId, RTC.getCurrentlyAvailableMediaDevices());\n        }\n\n        return RTC.setAudioOutputDevice(deviceId);\n    }\n\n    /**\n     * Adds an event handler.\n     * @param {string} event - event name\n     * @param {function} handler - event handler\n     */\n    addEventListener(event, handler) {\n        this._eventEmitter.addListener(event, handler);\n    }\n\n    /**\n     * Removes event handler.\n     * @param {string} event - event name\n     * @param {function} handler - event handler\n     */\n    removeEventListener(event, handler) {\n        this._eventEmitter.removeListener(event, handler);\n    }\n\n    /**\n     * Emits an event.\n     * @param {string} event - event name\n     */\n    emitEvent(event, ...args) {\n        this._eventEmitter.emit(event, ...args);\n    }\n}\n\nexport default new JitsiMediaDevices();\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport RTC from '../RTC/RTC';\nimport Statistics from '../statistics/statistics';\n\n\nconst logger = getLogger(__filename);\n\n// If after 3000 ms the detector did not find any active devices consider that there aren't any usable ones available\n// i.e. audioLevel > 0.008\nconst DETECTION_TIMEOUT = 3000;\n\n\n/**\n * Go through all audio devices on the system and return one that is active, i.e. has audio signal.\n *\n * @returns Promise<Object> - Object containing information about the found device.\n */\nexport default function getActiveAudioDevice() {\n\n    return new Promise(resolve => {\n        RTC.enumerateDevices(devices => {\n            const audioDevices = devices.filter(device => device.kind === 'audioinput');\n            const devicePromiseArray = [];\n\n\n            for (const micDevice of audioDevices) {\n                const devicePromise = RTC.obtainAudioAndVideoPermissions({ devices: [ 'audio' ],\n                    micDeviceId: micDevice.deviceId }).then(tracks => {\n\n                    // We expect a single device to be available when obtained from obtainAudioAndVideoPermissions\n                    // that's  why only take p.value[0].\n                    const track = tracks[0];\n                    const originalStream = track.getOriginalStream();\n\n                    Statistics.startLocalStats(originalStream, track.setAudioLevel.bind(track));\n                    track.addEventListener(JitsiTrackEvents.LOCAL_TRACK_STOPPED, () => {\n                        Statistics.stopLocalStats(originalStream);\n                    });\n\n                    return track;\n                });\n\n                devicePromiseArray.push(devicePromise);\n            }\n\n            Promise.allSettled(devicePromiseArray).then(outcomeArray => {\n                const successfulPromises = outcomeArray.filter(p => p.status === 'fulfilled');\n                const rejectedPromises = outcomeArray.filter(p => p.status === 'rejected');\n\n\n                const availableDevices = successfulPromises.map(p => p.value);\n                const rejectReasons = rejectedPromises.map(p => p.value);\n\n                for (const reason of rejectReasons) {\n                    logger.error('Failed to acquire audio device with error: ', reason);\n                }\n\n                // Setup event handlers for monitored devices.\n                for (const device of availableDevices) {\n                    device.on(JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED, audioLevel => {\n                        // This is a very naive approach but works, a more accurate one would be to use rnnoise in\n                        // order to limit  the number of false positives. The 0.008 constant is due to how\n                        // LocalStatsCollector from lib-jitsi-meet publishes audio-levels, in this case 0.008 denotes //\n                        // no input.\n                        if (audioLevel > 0.008) {\n                            stopActiveDevices(availableDevices);\n                            resolve({ deviceId: device.deviceId,\n                                deviceLabel: device.track.label });\n                        }\n                    });\n                }\n\n                // Cancel the detection in case no devices was found with audioLevel > 0 in the set timeout.\n                setTimeout(() => {\n                    stopActiveDevices(availableDevices);\n                    resolve({\n                        deviceId: '',\n                        deviceLabel: '' }\n                    );\n                }, DETECTION_TIMEOUT);\n\n            });\n\n        });\n    });\n}\n\n/**\n * Stop the streams of the provided JitsiLocalTracks.\n *\n * @param {Array<JitsiLocalTrack>} deviceList - Array of JitsiLocalTracks to stop.\n * @returns {void}\n */\nfunction stopActiveDevices(deviceList) {\n    for (const device of deviceList) {\n        device.stopStream();\n    }\n}\n","/**\n * The know jingle actions that can be sent and should be acted upon by\n * {@code ProxyConnectionService} and {@code ProxyConnectionPC}.\n */\nexport const ACTIONS = {\n    ACCEPT: 'session-accept',\n    CONNECTION_ERROR: 'connection-error-encountered',\n    INITIATE: 'session-initiate',\n    TERMINATE: 'session-terminate',\n    TRANSPORT_INFO: 'transport-info',\n    UNAVAILABLE: 'unavailable'\n};\n","import { getLogger } from '@jitsi/logger';\n\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport RTC from '../RTC/RTC';\nimport JingleSessionPC from '../xmpp/JingleSessionPC';\nimport SignalingLayerImpl from '../xmpp/SignalingLayerImpl';\nimport { DEFAULT_STUN_SERVERS } from '../xmpp/xmpp';\n\nimport { ACTIONS } from './constants';\n\nconst logger = getLogger(__filename);\n\n/**\n * An adapter around {@code JingleSessionPC} so its logic can be re-used without\n * an XMPP connection. It is being re-used for consistency with the rest of the\n * codebase and to leverage existing peer connection event handling. Also\n * this class provides a facade to hide most of the API for\n * {@code JingleSessionPC}.\n */\nexport default class ProxyConnectionPC {\n    /**\n     * Initializes a new {@code ProxyConnectionPC} instance.\n     *\n     * @param {Object} options - Values to initialize the instance with.\n     * @param {Object} [options.pcConfig] - The {@code RTCConfiguration} to use for the WebRTC peer connection.\n     * @param {boolean} [options.isInitiator] - If true, the local client should send offers. If false, the local\n     * client should send answers. Defaults to false.\n     * @param {Function} options.onRemoteStream - Callback to invoke when a remote media stream has been received\n     * through the peer connection.\n     * @param {string} options.peerJid - The jid of the remote client with which the peer connection is being establish\n     * and which should receive direct messages regarding peer connection updates.\n     * @param {boolean} [options.receiveVideo] - Whether or not the peer connection should accept incoming video\n     * streams. Defaults to false.\n     * @param {Function} options.onSendMessage - Callback to invoke when a message has to be sent (signaled) out.\n     */\n    constructor(options = {}) {\n        this._options = {\n            pcConfig: {},\n            isInitiator: false,\n            receiveAudio: false,\n            receiveVideo: false,\n            ...options\n        };\n\n        /**\n         * Instances of {@code JitsiTrack} associated with this instance of\n         * {@code ProxyConnectionPC}.\n         *\n         * @type {Array<JitsiTrack>}\n         */\n        this._tracks = [];\n\n        /**\n         * The active instance of {@code JingleSessionPC}.\n         *\n         * @type {JingleSessionPC|null}\n         */\n        this._peerConnection = null;\n\n        // Bind event handlers so they are only bound once for every instance.\n        this._onError = this._onError.bind(this);\n        this._onRemoteStream = this._onRemoteStream.bind(this);\n        this._onSendMessage = this._onSendMessage.bind(this);\n    }\n\n    /**\n     * Returns the jid of the remote peer with which this peer connection should\n     * be established with.\n     *\n     * @returns {string}\n     */\n    getPeerJid() {\n        return this._options.peerJid;\n    }\n\n    /**\n     * Updates the peer connection based on the passed in jingle.\n     *\n     * @param {Object} $jingle - An XML jingle element, wrapped in query,\n     * describing how the peer connection should be updated.\n     * @returns {void}\n     */\n    processMessage($jingle) {\n        switch ($jingle.attr('action')) {\n        case ACTIONS.ACCEPT:\n            this._onSessionAccept($jingle);\n            break;\n\n        case ACTIONS.INITIATE:\n            this._onSessionInitiate($jingle);\n            break;\n\n        case ACTIONS.TERMINATE:\n            this._onSessionTerminate($jingle);\n            break;\n\n        case ACTIONS.TRANSPORT_INFO:\n            this._onTransportInfo($jingle);\n            break;\n        }\n    }\n\n    /**\n     * Instantiates a peer connection and starts the offer/answer cycle to\n     * establish a connection with a remote peer.\n     *\n     * @param {Array<JitsiLocalTrack>} localTracks - Initial local tracks to add\n     * to add to the peer connection.\n     * @returns {void}\n     */\n    start(localTracks = []) {\n        if (this._peerConnection) {\n            return;\n        }\n\n        this._tracks = this._tracks.concat(localTracks);\n\n        this._peerConnection = this._createPeerConnection();\n\n        this._peerConnection.invite(localTracks);\n    }\n\n    /**\n     * Begins the process of disconnecting from a remote peer and cleaning up\n     * the peer connection.\n     *\n     * @returns {void}\n     */\n    stop() {\n        if (this._peerConnection) {\n            this._peerConnection.terminate();\n        }\n\n        this._onSessionTerminate();\n    }\n\n    /**\n     * Instantiates a new {@code JingleSessionPC} by stubbing out the various\n     * dependencies of {@code JingleSessionPC}.\n     *\n     * @private\n     * @returns {JingleSessionPC}\n     */\n    _createPeerConnection() {\n        /**\n         * {@code JingleSessionPC} takes in the entire jitsi-meet config.js\n         * object, which may not be accessible from the caller.\n         *\n         * @type {Object}\n         */\n        const configStub = {};\n\n        /**\n         * {@code JingleSessionPC} assumes an XMPP/Strophe connection object is\n         * passed through, which also has the jingle plugin initialized on it.\n         * This connection object is used to signal out peer connection updates\n         * via iqs, and those updates need to be piped back out to the remote\n         * peer.\n         *\n         * @type {Object}\n         */\n        const connectionStub = {\n            // At the time this is used for Spot and it's okay to say the connection is always connected, because if\n            // spot has no signalling it will not be in a meeting where this is used.\n            connected: true,\n            jingle: {\n                terminate: () => { /** no-op */ }\n            },\n            sendIQ: this._onSendMessage,\n\n            // Returns empty function, because it does not add any listeners for real\n            // eslint-disable-next-line no-empty-function\n            addEventListener: () => () => { }\n        };\n\n        /**\n         * {@code JingleSessionPC} can take in a custom ice configuration,\n         * depending on the peer connection type, peer-to-peer or other.\n         * However, {@code ProxyConnectionPC} always assume a peer-to-peer\n         * connection so the ice configuration is hard-coded with defaults.\n         *\n         * @type {Object}\n         */\n        const pcConfigStub = {\n            iceServers: DEFAULT_STUN_SERVERS,\n            ...this._options.pcConfig\n        };\n\n        /**\n         * {@code JingleSessionPC} expects an instance of\n         * {@code JitsiConference}, which has an event emitter that is used\n         * to signal various connection updates that the local client should\n         * act upon. The conference instance is not a dependency of a proxy\n         * connection, but the emitted events can be relevant to the proxy\n         * connection so the event emitter is stubbed.\n         *\n         * @param {string} event - The constant for the event type.\n         * @type {Function}\n         * @returns {void}\n         */\n        const emitter = event => {\n            switch (event) {\n            case XMPPEvents.CONNECTION_ICE_FAILED:\n            case XMPPEvents.CONNECTION_FAILED:\n                this._onError(ACTIONS.CONNECTION_ERROR, event);\n                break;\n            }\n        };\n\n        /**\n         * {@link JingleSessionPC} expects an instance of\n         * {@link ChatRoom} to be passed in. {@link ProxyConnectionPC}\n         * is instantiated outside of the {@code JitsiConference}, so it must be\n         * stubbed to prevent errors.\n         *\n         * @type {Object}\n         */\n        const roomStub = {\n            addPresenceListener: () => { /** no-op */ },\n            connectionTimes: [],\n            eventEmitter: { emit: emitter },\n            getMediaPresenceInfo: () => {\n                // Errors occur if this function does not return an object\n\n                return {};\n            },\n            removePresenceListener: () => { /** no-op */ },\n            supportsRestartByTerminate: () => false\n        };\n\n        /**\n         * A {@code JitsiConference} stub passed to the {@link RTC} module.\n         * @type {Object}\n         */\n        const conferenceStub = {\n            myUserId: () => ''\n        };\n\n        /**\n         * Create an instance of {@code RTC} as it is required for peer\n         * connection creation by {@code JingleSessionPC}. An existing instance\n         * of {@code RTC} from elsewhere should not be re-used because it is\n         * a stateful grouping of utilities.\n         */\n        this._rtc = new RTC(conferenceStub, {});\n\n        /**\n         * Add the remote track listener here as {@code JingleSessionPC} has\n         * {@code TraceablePeerConnection} which uses {@code RTC}'s event\n         * emitter.\n         */\n        this._rtc.addListener(\n            RTCEvents.REMOTE_TRACK_ADDED,\n            this._onRemoteStream\n        );\n\n        const peerConnection = new JingleSessionPC(\n            undefined, // sid\n            undefined, // localJid\n            this._options.peerJid, // remoteJid\n            connectionStub, // connection\n            {\n                offerToReceiveAudio: this._options.receiveAudio,\n                offerToReceiveVideo: this._options.receiveVideo\n            }, // mediaConstraints\n            pcConfigStub, // pcConfig\n            true, // isP2P\n            this._options.isInitiator // isInitiator\n        );\n\n        const signalingLayer = new SignalingLayerImpl();\n\n        signalingLayer.setChatRoom(roomStub);\n\n        /**\n         * An additional initialize call is necessary to properly set instance\n         * variable for calling.\n         */\n        peerConnection.initialize(roomStub, this._rtc, signalingLayer, configStub);\n\n        return peerConnection;\n    }\n\n    /**\n     * Invoked when a connection related issue has been encountered.\n     *\n     * @param {string} errorType - The constant indicating the type of the error\n     * that occured.\n     * @param {string} details - Optional additional data about the error.\n     * @private\n     * @returns {void}\n     */\n    _onError(errorType, details = '') {\n        this._options.onError(this._options.peerJid, errorType, details);\n    }\n\n    /**\n     * Callback invoked when the peer connection has received a remote media\n     * stream.\n     *\n     * @param {JitsiRemoteTrack} jitsiRemoteTrack - The remote media stream\n     * wrapped in {@code JitsiRemoteTrack}.\n     * @private\n     * @returns {void}\n     */\n    _onRemoteStream(jitsiRemoteTrack) {\n        this._tracks.push(jitsiRemoteTrack);\n\n        this._options.onRemoteStream(jitsiRemoteTrack);\n    }\n\n    /**\n     * Callback invoked when {@code JingleSessionPC} needs to signal a message\n     * out to the remote peer.\n     *\n     * @param {XML} iq - The message to signal out.\n     * @private\n     * @returns {void}\n     */\n    _onSendMessage(iq) {\n        this._options.onSendMessage(this._options.peerJid, iq);\n    }\n\n    /**\n     * Callback invoked in response to an agreement to start a proxy connection.\n     * The passed in jingle element should contain an SDP answer to a previously\n     * sent SDP offer.\n     *\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\n     * @private\n     * @returns {void}\n     */\n    _onSessionAccept($jingle) {\n        if (!this._peerConnection) {\n            logger.error('Received an answer when no peer connection exists.');\n\n            return;\n        }\n\n        this._peerConnection.setAnswer($jingle);\n    }\n\n    /**\n     * Callback invoked in response to a request to start a proxy connection.\n     * The passed in jingle element should contain an SDP offer.\n     *\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\n     * @private\n     * @returns {void}\n     */\n    _onSessionInitiate($jingle) {\n        if (this._peerConnection) {\n            logger.error('Received an offer when an offer was already sent.');\n\n            return;\n        }\n\n        this._peerConnection = this._createPeerConnection();\n\n        this._peerConnection.acceptOffer(\n            $jingle,\n            () => { /** no-op */ },\n            () => this._onError(\n                this._options.peerJid,\n                ACTIONS.CONNECTION_ERROR,\n                'session initiate error'\n            )\n        );\n    }\n\n    /**\n     * Callback invoked in response to a request to disconnect an active proxy\n     * connection. Cleans up tracks and the peer connection.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onSessionTerminate() {\n        this._tracks.forEach(track => track.dispose());\n        this._tracks = [];\n\n        if (this._peerConnection) {\n            this._peerConnection.onTerminated();\n        }\n\n        if (this._rtc) {\n            this._rtc.removeListener(\n                RTCEvents.REMOTE_TRACK_ADDED,\n                this._onRemoteStream\n            );\n\n            this._rtc.destroy();\n        }\n    }\n\n    /**\n     * Callback invoked in response to ICE candidates from the remote peer.\n     * The passed in jingle element should contain an ICE candidate.\n     *\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\n     * @private\n     * @returns {void}\n     */\n    _onTransportInfo($jingle) {\n        this._peerConnection.addIceCandidates($jingle);\n    }\n}\n","/* globals $ */\n\nimport { getLogger } from '@jitsi/logger';\nimport { $iq } from 'strophe.js';\n\nimport * as MediaType from '../../service/RTC/MediaType';\nimport VideoType from '../../service/RTC/VideoType';\nimport RTC from '../RTC/RTC';\n\nimport ProxyConnectionPC from './ProxyConnectionPC';\nimport { ACTIONS } from './constants';\n\nconst logger = getLogger(__filename);\n\n/**\n * Instantiates a new ProxyConnectionPC and ensures only one exists at a given\n * time. Currently it assumes ProxyConnectionPC is used only for screensharing\n * and assumes IQs to be used for communication.\n */\nexport default class ProxyConnectionService {\n    /**\n     * Initializes a new {@code ProxyConnectionService} instance.\n     *\n     * @param {Object} options - Values to initialize the instance with.\n     * @param {boolean} [options.convertVideoToDesktop] - Whether or not proxied video should be returned as a desktop\n     * stream. Defaults to false.\n     * @param {Object} [options.pcConfig] - The {@code RTCConfiguration} to use for the WebRTC peer connection.\n     * @param {JitsiConnection} [options.jitsiConnection] - The {@code JitsiConnection} which will be used to fetch\n     * TURN credentials for the P2P connection.\n     * @param {Function} options.onRemoteStream - Callback to invoke when a remote video stream has been received and\n     * converted to a {@code JitsiLocakTrack}. The {@code JitsiLocakTrack} will be passed in.\n     * @param {Function} options.onSendMessage - Callback to invoke when a message has to be sent (signaled) out. The\n     * arguments passed in are the jid to send the message to and the message.\n     */\n    constructor(options = {}) {\n        const {\n            jitsiConnection,\n            ...otherOptions\n        } = options;\n\n        /**\n         * Holds a reference to the collection of all callbacks.\n         *\n         * @type {Object}\n         */\n        this._options = {\n            pcConfig: jitsiConnection && jitsiConnection.xmpp.connection.jingle.p2pIceConfig,\n            ...otherOptions\n        };\n\n        /**\n         * The active instance of {@code ProxyConnectionService}.\n         *\n         * @type {ProxyConnectionPC|null}\n         */\n        this._peerConnection = null;\n\n        // Bind event handlers so they are only bound once for every instance.\n        this._onFatalError = this._onFatalError.bind(this);\n        this._onSendMessage = this._onSendMessage.bind(this);\n        this._onRemoteStream = this._onRemoteStream.bind(this);\n    }\n\n    /**\n     * Parses a message object regarding a proxy connection to create a new\n     * proxy connection or update and existing connection.\n     *\n     * @param {Object} message - A message object regarding establishing or\n     * updating a proxy connection.\n     * @param {Object} message.data - An object containing additional message\n     * details.\n     * @param {string} message.data.iq - The stringified iq which explains how\n     * and what to update regarding the proxy connection.\n     * @param {string} message.from - The message sender's full jid. Used for\n     * sending replies.\n     * @returns {void}\n     */\n    processMessage(message) {\n        const peerJid = message.from;\n\n        if (!peerJid) {\n            return;\n        }\n\n        // If a proxy connection has already been established and messages come\n        // from another peer jid then those messages should be replied to with\n        // a rejection.\n        if (this._peerConnection\n            && this._peerConnection.getPeerJid() !== peerJid) {\n            this._onFatalError(\n                peerJid,\n                ACTIONS.CONNECTION_ERROR,\n                'rejected'\n            );\n\n            return;\n        }\n\n        const iq = this._convertStringToXML(message.data.iq);\n        const $jingle = iq && iq.find('jingle');\n        const action = $jingle && $jingle.attr('action');\n\n        if (action === ACTIONS.INITIATE) {\n            this._peerConnection = this._createPeerConnection(peerJid, {\n                isInitiator: false,\n                receiveVideo: true\n            });\n        }\n\n        // Truthy check for peer connection added to protect against possibly\n        // receiving actions before an ACTIONS.INITIATE.\n        if (this._peerConnection) {\n            this._peerConnection.processMessage($jingle);\n        }\n\n        // Take additional steps to ensure the peer connection is cleaned up\n        // if it is to be closed.\n        if (action === ACTIONS.CONNECTION_ERROR\n            || action === ACTIONS.UNAVAILABLE\n            || action === ACTIONS.TERMINATE) {\n            this._selfCloseConnection();\n        }\n\n        return;\n    }\n\n    /**\n     * Instantiates and initiates a proxy peer connection.\n     *\n     * @param {string} peerJid - The jid of the remote client that should\n     * receive messages.\n     * @param {Array<JitsiLocalTrack>} localTracks - Initial media tracks to\n     * send through to the peer.\n     * @returns {void}\n     */\n    start(peerJid, localTracks = []) {\n        this._peerConnection = this._createPeerConnection(peerJid, {\n            isInitiator: true,\n            receiveVideo: false\n        });\n\n        this._peerConnection.start(localTracks);\n    }\n\n    /**\n     * Terminates any active proxy peer connection.\n     *\n     * @returns {void}\n     */\n    stop() {\n        if (this._peerConnection) {\n            this._peerConnection.stop();\n        }\n\n        this._peerConnection = null;\n    }\n\n    /**\n     * Transforms a stringified xML into a XML wrapped in jQuery.\n     *\n     * @param {string} xml - The XML in string form.\n     * @private\n     * @returns {Object|null} A jQuery version of the xml. Null will be returned\n     * if an error is encountered during transformation.\n     */\n    _convertStringToXML(xml) {\n        try {\n            const xmlDom = new DOMParser().parseFromString(xml, 'text/xml');\n\n            return $(xmlDom);\n        } catch (e) {\n            logger.error('Attempted to convert incorrectly formatted xml');\n\n            return null;\n        }\n    }\n\n    /**\n     * Helper for creating an instance of {@code ProxyConnectionPC}.\n     *\n     * @param {string} peerJid - The jid of the remote peer with which the\n     * {@code ProxyConnectionPC} will be established with.\n     * @param {Object} options - Additional defaults to instantiate the\n     * {@code ProxyConnectionPC} with. See the constructor of ProxyConnectionPC\n     * for more details.\n     * @private\n     * @returns {ProxyConnectionPC}\n     */\n    _createPeerConnection(peerJid, options = {}) {\n        if (!peerJid) {\n            throw new Error('Cannot create ProxyConnectionPC without a peer.');\n        }\n\n        const pcOptions = {\n            pcConfig: this._options.pcConfig,\n            onError: this._onFatalError,\n            onRemoteStream: this._onRemoteStream,\n            onSendMessage: this._onSendMessage,\n            peerJid,\n            ...options\n        };\n\n        return new ProxyConnectionPC(pcOptions);\n    }\n\n    /**\n     * Callback invoked when an error occurs that should cause\n     * {@code ProxyConnectionPC} to be closed if the peer is currently\n     * connected. Sends an error message/reply back to the peer.\n     *\n     * @param {string} peerJid - The peer jid with which the connection was\n     * attempted or started, and to which an iq with error details should be\n     * sent.\n     * @param {string} errorType - The constant indicating the type of the error\n     * that occured.\n     * @param {string} details - Optional additional data about the error.\n     * @private\n     * @returns {void}\n     */\n    _onFatalError(peerJid, errorType, details = '') {\n        logger.error(\n            'Received a proxy connection error', peerJid, errorType, details);\n\n        const iq = $iq({\n            to: peerJid,\n            type: 'set'\n        })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: errorType\n            })\n            .c('details')\n            .t(details)\n            .up();\n\n        this._onSendMessage(peerJid, iq);\n\n        if (this._peerConnection\n            && this._peerConnection.getPeerJid() === peerJid) {\n            this._selfCloseConnection();\n        }\n    }\n\n    /**\n     * Callback invoked when the remote peer of the {@code ProxyConnectionPC}\n     * has offered a media stream. The stream is converted into a\n     * {@code JitsiLocalTrack} for local usage if the {@code onRemoteStream}\n     * callback is defined.\n     *\n     * @param {JitsiRemoteTrack} jitsiRemoteTrack - The {@code JitsiRemoteTrack}\n     * for the peer's media stream.\n     * @private\n     * @returns {void}\n     */\n    _onRemoteStream(jitsiRemoteTrack) {\n        if (!this._options.onRemoteStream) {\n            logger.error('Remote track received without callback.');\n            jitsiRemoteTrack.dispose();\n\n            return;\n        }\n\n        const isVideo = jitsiRemoteTrack.isVideoTrack();\n        let videoType;\n\n        if (isVideo) {\n            videoType = this._options.convertVideoToDesktop\n                ? VideoType.DESKTOP : VideoType.CAMERA;\n        }\n\n        // Grab the webrtc media stream and pipe it through the same processing\n        // that would occur for a locally obtained media stream.\n        const mediaStream = jitsiRemoteTrack.getOriginalStream();\n        const jitsiLocalTracks = RTC.createLocalTracks(\n            [\n                {\n                    deviceId:\n                        `proxy:${this._peerConnection.getPeerJid()}`,\n                    mediaType: isVideo ? MediaType.VIDEO : MediaType.AUDIO,\n                    sourceType: 'proxy',\n                    stream: mediaStream,\n                    track: mediaStream.getVideoTracks()[0],\n                    videoType\n                }\n            ]);\n\n        this._options.onRemoteStream(jitsiLocalTracks[0]);\n    }\n\n    /**\n     * Formats and forwards a message an iq to be sent to a peer jid.\n     *\n     * @param {string} peerJid - The jid the iq should be sent to.\n     * @param {Object} iq - The iq which would be sent to the peer jid.\n     * @private\n     * @returns {void}\n     */\n    _onSendMessage(peerJid, iq) {\n        if (!this._options.onSendMessage) {\n            return;\n        }\n\n        try {\n            const stringifiedIq\n                = new XMLSerializer().serializeToString(iq.nodeTree || iq);\n\n            this._options.onSendMessage(peerJid, { iq: stringifiedIq });\n        } catch (e) {\n            logger.error('Attempted to send an incorrectly formatted iq.');\n        }\n    }\n\n    /**\n     * Invoked when preemptively closing the {@code ProxyConnectionPC}.\n     *\n     * @private\n     * @returns {void}\n     */\n    _selfCloseConnection() {\n        this.stop();\n\n        this._options.onConnectionClosed\n            && this._options.onConnectionClosed();\n    }\n}\n","import EventEmitter from 'events';\n\nimport browser from '../browser';\nimport Settings from '../settings/Settings';\nimport ScriptUtil from '../util/ScriptUtil';\n\nimport { CALLSTATS_SCRIPT_URL } from './constants';\n\nconst PRECALL_TEST_RESULTS = 'preCallTestResults';\nconst emitter = new EventEmitter();\nlet _initialized = false;\nlet api = null;\n\n/**\n * Loads the callstats io script.\n *\n * @returns {Promise<void>}\n */\nfunction _loadScript(options) {\n    if (browser.isReactNative()) {\n        return;\n    }\n\n    return new Promise(resolve => {\n        ScriptUtil.loadScript(\n            options.callStatsCustomScriptUrl || CALLSTATS_SCRIPT_URL,\n            /* async */ true,\n            /* prepend */ true,\n            /* relativeURL */ undefined,\n            /* loadCallback */ resolve);\n    });\n}\n\n/**\n * Initializes the callstats lib and registers a callback to be invoked\n * when there are 'preCallTestResults'.\n *\n * @typedef PrecallTestOptions\n * @type {Object}\n * @property {string} callStatsID - Callstats credentials - the id.\n * @property {string} callStatsSecret - Callstats credentials - the secret.\n * @property {string} statisticsId - The user name to use when initializing callstats.\n * @property {string} statisticsDisplayName - The user display name.\n *\n * @param { PrecallTestOptions} options - The init options.\n * @returns {Promise<void>}\n */\nfunction _initialize(options) {\n    return new Promise((resolve, reject) => {\n        const appId = options.callStatsID;\n        const appSecret = options.callStatsSecret;\n        const userId = options.statisticsId || options.statisticsDisplayName || Settings.callStatsUserName;\n\n        api.initialize(appId, appSecret, userId, (status, message) => {\n            if (status === 'success') {\n                api.on(PRECALL_TEST_RESULTS, (...args) => {\n                    emitter.emit(PRECALL_TEST_RESULTS, ...args);\n                });\n                _initialized = true;\n                resolve();\n            } else {\n                reject({\n                    status,\n                    message\n                });\n            }\n        }, null, { disablePrecalltest: true });\n    });\n}\n\n/**\n * Loads the callstats script and initializes the library.\n *\n * @param {Function} onResult - The callback to be invoked when results are received.\n * @returns {Promise<void>}\n */\nexport async function init(options) {\n    if (_initialized) {\n        throw new Error('Precall Test already initialized');\n    }\n\n    const { callStatsID, callStatsSecret, disableThirdPartyRequests } = options;\n\n    if (!callStatsID || !callStatsSecret || disableThirdPartyRequests) {\n        throw new Error('Callstats is disabled');\n    }\n\n    await _loadScript(options);\n    // eslint-disable-next-line new-cap\n    api = new window.callstats();\n\n    return _initialize(options);\n}\n\n/**\n * Executes a pre call test.\n *\n * @typedef PrecallTestResults\n * @type {Object}\n * @property {boolean} mediaConnectivity - If there is media connectivity or not.\n * @property {number} throughput  - The average throughput.\n * @property {number} fractionalLoss - The packet loss.\n * @property {number} rtt - The round trip time.\n * @property {string} provider - It is usually 'callstats'.\n *\n * @returns {Promise<{PrecallTestResults}>}\n */\nexport function execute() {\n    if (!_initialized) {\n        return Promise.reject('uninitialized');\n    }\n\n    return new Promise((resolve, reject) => {\n        emitter.on(PRECALL_TEST_RESULTS, (status, payload) => {\n            if (status === 'success') {\n                resolve(payload);\n            } else {\n                reject({\n                    status,\n                    payload\n                });\n            }\n\n        });\n\n        api.makePrecallTest();\n    });\n}\n\nexport default {\n    init,\n    execute\n};\n","import { getLogger } from '@jitsi/logger';\n\nimport { createAudioContext } from './WebAudioUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * The AudioMixer, as the name implies, mixes a number of MediaStreams containing audio tracks into a single\n * MediaStream.\n */\nexport default class AudioMixer {\n    /**\n     * Create AudioMixer instance.\n     */\n    constructor() {\n        this._started = false;\n        this._streamsToMix = [];\n        this._streamMSSArray = [];\n    }\n\n    /**\n     * Add audio MediaStream to be mixed, if the stream doesn't contain any audio tracks it will be ignored.\n     *\n     * @param {MediaStream} stream - MediaStream to be mixed.\n     */\n    addMediaStream(stream) {\n        if (!stream.getAudioTracks()) {\n            logger.warn('Added MediaStream doesn\\'t contain audio tracks.');\n        }\n\n        this._streamsToMix.push(stream);\n    }\n\n    /**\n     * At this point a WebAudio ChannelMergerNode is created and and the two associated MediaStreams are connected to\n     * it; the resulting mixed MediaStream is returned.\n     *\n     * @returns {MediaStream} - MediaStream containing added streams mixed together, or null if no MediaStream\n     * is added.\n     */\n    start() {\n        // If the mixer was already started just return the existing mixed stream.\n        if (this._started) {\n            return this._mixedMSD.stream;\n        }\n\n        this._audioContext = createAudioContext();\n\n        if (!this._streamsToMix.length) {\n            logger.warn('No MediaStream\\'s added to AudioMixer, nothing will happen.');\n\n            return null;\n        }\n\n        this._started = true;\n\n        this._mixedMSD = this._audioContext.createMediaStreamDestination();\n\n        for (const stream of this._streamsToMix) {\n            const streamMSS = this._audioContext.createMediaStreamSource(stream);\n\n            streamMSS.connect(this._mixedMSD);\n\n            // Maintain a list of MediaStreamAudioSourceNode so we can disconnect them on reset.\n            this._streamMSSArray.push(streamMSS);\n        }\n\n        return this._mixedMSD.stream;\n    }\n\n    /**\n     * Disconnect MediaStreamAudioSourceNode and clear references.\n     *\n     * @returns {void}\n     */\n    reset() {\n        this._started = false;\n        this._streamsToMix = [];\n\n        // Clean up created MediaStreamAudioSourceNode.\n        for (const streamMSS of this._streamMSSArray) {\n            streamMSS.disconnect();\n        }\n\n        this._streamMSSArray = [];\n\n        if (this._audioContext) {\n            this._audioContext = undefined;\n        }\n    }\n}\n","// @flow\n\n/**\n * SET_INTERVAL constant is used to set interval and it is set in\n * the id property of the request.data property. timeMs property must\n * also be set. request.data example:\n *\n * {\n *      id: SET_INTERVAL,\n *      timeMs: 33\n * }\n */\nexport const SET_INTERVAL = 1;\n\n/**\n * CLEAR_INTERVAL constant is used to clear the interval and it is set in\n * the id property of the request.data property.\n *\n * {\n *      id: CLEAR_INTERVAL\n * }\n */\nexport const CLEAR_INTERVAL = 2;\n\n/**\n * INTERVAL_TIMEOUT constant is used as response and it is set in the id\n * property.\n *\n * {\n *      id: INTERVAL_TIMEOUT\n * }\n */\nexport const INTERVAL_TIMEOUT = 3;\n\n/**\n * The following code is needed as string to create a URL from a Blob.\n * The URL is then passed to a WebWorker. Reason for this is to enable\n * use of setInterval that is not throttled when tab is inactive.\n */\nconst code = `\n    var timer;\n\n    onmessage = function(request) {\n        switch (request.data.id) {\n        case ${SET_INTERVAL}: {\n            timer = setInterval(() => {\n                postMessage({ id: ${INTERVAL_TIMEOUT} });\n            }, request.data.timeMs);\n            break;\n        }\n        case ${CLEAR_INTERVAL}: {\n            if (timer) {\n                clearInterval(timer);\n            }\n            break;\n        }\n        }\n    };\n`;\n\nexport const timerWorkerScript\n    = URL.createObjectURL(new Blob([ code ], { type: 'application/javascript' }));\n","// @flow\n\nimport {\n    CLEAR_INTERVAL,\n    INTERVAL_TIMEOUT,\n    SET_INTERVAL,\n    timerWorkerScript\n} from './TimeWorker';\n\n/**\n * Represents a modified MediaStream that adds video as pip on a desktop stream.\n * <tt>JitsiStreamPresenterEffect</tt> does the processing of the original\n * desktop stream.\n */\nexport default class JitsiStreamPresenterEffect {\n    /**\n     * Represents a modified MediaStream that adds a camera track at the\n     * bottom right corner of the desktop track using a HTML canvas.\n     * <tt>JitsiStreamPresenterEffect</tt> does the processing of the original\n     * video stream.\n     *\n     * @param {MediaStream} videoStream - The video stream which is user for\n     * creating the canvas.\n     */\n    constructor(videoStream) {\n        const videoDiv = document.createElement('div');\n        const firstVideoTrack = videoStream.getVideoTracks()[0];\n        const { height, width, frameRate } = firstVideoTrack.getSettings() ?? firstVideoTrack.getConstraints();\n\n        this._canvas = document.createElement('canvas');\n        this._ctx = this._canvas.getContext('2d');\n\n        this._desktopElement = document.createElement('video');\n        this._videoElement = document.createElement('video');\n        videoDiv.appendChild(this._videoElement);\n        videoDiv.appendChild(this._desktopElement);\n        if (document.body !== null) {\n            document.body.appendChild(videoDiv);\n        }\n\n        // Set the video element properties\n        this._frameRate = parseInt(frameRate, 10);\n        this._videoElement.width = parseInt(width, 10);\n        this._videoElement.height = parseInt(height, 10);\n        this._videoElement.autoplay = true;\n        this._videoElement.srcObject = videoStream;\n\n        // autoplay is not enough to start the video on Safari, it's fine to call play() on other platforms as well\n        this._videoElement.play();\n\n        // set the style attribute of the div to make it invisible\n        videoDiv.style.display = 'none';\n\n        // Bind event handler so it is only bound once for every instance.\n        this._onVideoFrameTimer = this._onVideoFrameTimer.bind(this);\n    }\n\n    /**\n     * EventHandler onmessage for the videoFrameTimerWorker WebWorker.\n     *\n     * @private\n     * @param {EventHandler} response - The onmessage EventHandler parameter.\n     * @returns {void}\n     */\n    _onVideoFrameTimer(response) {\n        if (response.data.id === INTERVAL_TIMEOUT) {\n            this._renderVideo();\n        }\n    }\n\n    /**\n     * Loop function to render the video frame input and draw presenter effect.\n     *\n     * @private\n     * @returns {void}\n     */\n    _renderVideo() {\n        // adjust the canvas width/height on every frame incase the window has been resized.\n        const [ track ] = this._desktopStream.getVideoTracks();\n        const { height, width } = track.getSettings() ?? track.getConstraints();\n\n        this._canvas.width = parseInt(width, 10);\n        this._canvas.height = parseInt(height, 10);\n        this._ctx.drawImage(this._desktopElement, 0, 0, this._canvas.width, this._canvas.height);\n        this._ctx.drawImage(this._videoElement, this._canvas.width - this._videoElement.width, this._canvas.height\n            - this._videoElement.height, this._videoElement.width, this._videoElement.height);\n\n        // draw a border around the video element.\n        this._ctx.beginPath();\n        this._ctx.lineWidth = 2;\n        this._ctx.strokeStyle = '#A9A9A9'; // dark grey\n        this._ctx.rect(this._canvas.width - this._videoElement.width, this._canvas.height - this._videoElement.height,\n            this._videoElement.width, this._videoElement.height);\n        this._ctx.stroke();\n    }\n\n    /**\n     * Checks if the local track supports this effect.\n     *\n     * @param {JitsiLocalTrack} jitsiLocalTrack - Track to apply effect.\n     * @returns {boolean} - Returns true if this effect can run on the\n     * specified track, false otherwise.\n     */\n    isEnabled(jitsiLocalTrack) {\n        return jitsiLocalTrack.isVideoTrack() && jitsiLocalTrack.videoType === 'desktop';\n    }\n\n    /**\n     * Starts loop to capture video frame and render presenter effect.\n     *\n     * @param {MediaStream} desktopStream - Stream to be used for processing.\n     * @returns {MediaStream} - The stream with the applied effect.\n     */\n    startEffect(desktopStream) {\n        const firstVideoTrack = desktopStream.getVideoTracks()[0];\n        const { height, width } = firstVideoTrack.getSettings() ?? firstVideoTrack.getConstraints();\n\n        // set the desktop element properties.\n        this._desktopStream = desktopStream;\n        this._desktopElement.width = parseInt(width, 10);\n        this._desktopElement.height = parseInt(height, 10);\n        this._desktopElement.autoplay = true;\n        this._desktopElement.srcObject = desktopStream;\n\n        // autoplay is not enough to start the video on Safari, it's fine to call play() on other platforms as well\n        this._desktopElement.play();\n\n        this._canvas.width = parseInt(width, 10);\n        this._canvas.height = parseInt(height, 10);\n        this._videoFrameTimerWorker = new Worker(timerWorkerScript, { name: 'Presenter effect worker' });\n        this._videoFrameTimerWorker.onmessage = this._onVideoFrameTimer;\n        this._videoFrameTimerWorker.postMessage({\n            id: SET_INTERVAL,\n            timeMs: 1000 / this._frameRate\n        });\n\n        return this._canvas.captureStream(this._frameRate);\n    }\n\n    /**\n     * Stops the capture and render loop.\n     *\n     * @returns {void}\n     */\n    stopEffect() {\n        this._videoFrameTimerWorker.postMessage({\n            id: CLEAR_INTERVAL\n        });\n        this._videoFrameTimerWorker.terminate();\n    }\n\n}\n","\nvar Module = (function() {\n  var _scriptDir = \"https://sdk.sariska.io/\";\n  \n  return (\nfunction(Module) {\n  Module = Module || {};\n\nnull;var Module=typeof Module!==\"undefined\"?Module:{};var readyPromiseResolve,readyPromiseReject;Module[\"ready\"]=new Promise(function(resolve,reject){readyPromiseResolve=resolve;readyPromiseReject=reject});var moduleOverrides={};var key;for(key in Module){if(Module.hasOwnProperty(key)){moduleOverrides[key]=Module[key]}}var arguments_=[];var thisProgram=\"./this.program\";var quit_=function(status,toThrow){throw toThrow};var ENVIRONMENT_IS_WEB=false;var ENVIRONMENT_IS_WORKER=false;var ENVIRONMENT_IS_NODE=false;var ENVIRONMENT_IS_SHELL=false;ENVIRONMENT_IS_WEB=typeof window===\"object\";ENVIRONMENT_IS_WORKER=typeof importScripts===\"function\";ENVIRONMENT_IS_NODE=typeof process===\"object\"&&typeof process.versions===\"object\"&&typeof process.versions.node===\"string\";ENVIRONMENT_IS_SHELL=!ENVIRONMENT_IS_WEB&&!ENVIRONMENT_IS_NODE&&!ENVIRONMENT_IS_WORKER;var scriptDirectory=\"\";function locateFile(path){if(Module[\"locateFile\"]){return Module[\"locateFile\"](path,scriptDirectory)}return scriptDirectory+path}var read_,readAsync,readBinary,setWindowTitle;if(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER){if(ENVIRONMENT_IS_WORKER){scriptDirectory=self.location.href}else if(document.currentScript){scriptDirectory=document.currentScript.src}if(_scriptDir){scriptDirectory=_scriptDir}if(scriptDirectory.indexOf(\"blob:\")!==0){scriptDirectory=scriptDirectory.substr(0,scriptDirectory.lastIndexOf(\"/\")+1)}else{scriptDirectory=\"\"}{read_=function shell_read(url){var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,false);xhr.send(null);return xhr.responseText};if(ENVIRONMENT_IS_WORKER){readBinary=function readBinary(url){var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,false);xhr.responseType=\"arraybuffer\";xhr.send(null);return new Uint8Array(xhr.response)}}readAsync=function readAsync(url,onload,onerror){var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,true);xhr.responseType=\"arraybuffer\";xhr.onload=function xhr_onload(){if(xhr.status==200||xhr.status==0&&xhr.response){onload(xhr.response);return}onerror()};xhr.onerror=onerror;xhr.send(null)}}setWindowTitle=function(title){document.title=title}}else{}var out=Module[\"print\"]||console.log.bind(console);var err=Module[\"printErr\"]||console.warn.bind(console);for(key in moduleOverrides){if(moduleOverrides.hasOwnProperty(key)){Module[key]=moduleOverrides[key]}}moduleOverrides=null;if(Module[\"arguments\"])arguments_=Module[\"arguments\"];if(Module[\"thisProgram\"])thisProgram=Module[\"thisProgram\"];if(Module[\"quit\"])quit_=Module[\"quit\"];var wasmBinary;if(Module[\"wasmBinary\"])wasmBinary=Module[\"wasmBinary\"];var noExitRuntime;if(Module[\"noExitRuntime\"])noExitRuntime=Module[\"noExitRuntime\"];if(typeof WebAssembly!==\"object\"){err(\"no native wasm support detected\")}var wasmMemory;var wasmTable=new WebAssembly.Table({\"initial\":1,\"maximum\":1+0,\"element\":\"anyfunc\"});var ABORT=false;var EXITSTATUS=0;var WASM_PAGE_SIZE=65536;function alignUp(x,multiple){if(x%multiple>0){x+=multiple-x%multiple}return x}var buffer,HEAP8,HEAPU8,HEAP16,HEAPU16,HEAP32,HEAPU32,HEAPF32,HEAPF64;function updateGlobalBufferAndViews(buf){buffer=buf;Module[\"HEAP8\"]=HEAP8=new Int8Array(buf);Module[\"HEAP16\"]=HEAP16=new Int16Array(buf);Module[\"HEAP32\"]=HEAP32=new Int32Array(buf);Module[\"HEAPU8\"]=HEAPU8=new Uint8Array(buf);Module[\"HEAPU16\"]=HEAPU16=new Uint16Array(buf);Module[\"HEAPU32\"]=HEAPU32=new Uint32Array(buf);Module[\"HEAPF32\"]=HEAPF32=new Float32Array(buf);Module[\"HEAPF64\"]=HEAPF64=new Float64Array(buf)}var DYNAMIC_BASE=5340496,DYNAMICTOP_PTR=97456;var INITIAL_INITIAL_MEMORY=Module[\"INITIAL_MEMORY\"]||16777216;if(Module[\"wasmMemory\"]){wasmMemory=Module[\"wasmMemory\"]}else{wasmMemory=new WebAssembly.Memory({\"initial\":INITIAL_INITIAL_MEMORY/WASM_PAGE_SIZE,\"maximum\":2147483648/WASM_PAGE_SIZE})}if(wasmMemory){buffer=wasmMemory.buffer}INITIAL_INITIAL_MEMORY=buffer.byteLength;updateGlobalBufferAndViews(buffer);HEAP32[DYNAMICTOP_PTR>>2]=DYNAMIC_BASE;function callRuntimeCallbacks(callbacks){while(callbacks.length>0){var callback=callbacks.shift();if(typeof callback==\"function\"){callback(Module);continue}var func=callback.func;if(typeof func===\"number\"){if(callback.arg===undefined){Module[\"dynCall_v\"](func)}else{Module[\"dynCall_vi\"](func,callback.arg)}}else{func(callback.arg===undefined?null:callback.arg)}}}var __ATPRERUN__=[];var __ATINIT__=[];var __ATMAIN__=[];var __ATPOSTRUN__=[];var runtimeInitialized=false;function preRun(){if(Module[\"preRun\"]){if(typeof Module[\"preRun\"]==\"function\")Module[\"preRun\"]=[Module[\"preRun\"]];while(Module[\"preRun\"].length){addOnPreRun(Module[\"preRun\"].shift())}}callRuntimeCallbacks(__ATPRERUN__)}function initRuntime(){runtimeInitialized=true;callRuntimeCallbacks(__ATINIT__)}function preMain(){callRuntimeCallbacks(__ATMAIN__)}function postRun(){if(Module[\"postRun\"]){if(typeof Module[\"postRun\"]==\"function\")Module[\"postRun\"]=[Module[\"postRun\"]];while(Module[\"postRun\"].length){addOnPostRun(Module[\"postRun\"].shift())}}callRuntimeCallbacks(__ATPOSTRUN__)}function addOnPreRun(cb){__ATPRERUN__.unshift(cb)}function addOnPostRun(cb){__ATPOSTRUN__.unshift(cb)}var runDependencies=0;var runDependencyWatcher=null;var dependenciesFulfilled=null;function addRunDependency(id){runDependencies++;if(Module[\"monitorRunDependencies\"]){Module[\"monitorRunDependencies\"](runDependencies)}}function removeRunDependency(id){runDependencies--;if(Module[\"monitorRunDependencies\"]){Module[\"monitorRunDependencies\"](runDependencies)}if(runDependencies==0){if(runDependencyWatcher!==null){clearInterval(runDependencyWatcher);runDependencyWatcher=null}if(dependenciesFulfilled){var callback=dependenciesFulfilled;dependenciesFulfilled=null;callback()}}}Module[\"preloadedImages\"]={};Module[\"preloadedAudios\"]={};function abort(what){if(Module[\"onAbort\"]){Module[\"onAbort\"](what)}what+=\"\";out(what);err(what);ABORT=true;EXITSTATUS=1;what=\"abort(\"+what+\"). Build with -s ASSERTIONS=1 for more info.\";throw new WebAssembly.RuntimeError(what)}function hasPrefix(str,prefix){return String.prototype.startsWith?str.startsWith(prefix):str.indexOf(prefix)===0}var dataURIPrefix=\"data:application/octet-stream;base64,\";function isDataURI(filename){return hasPrefix(filename,dataURIPrefix)}var wasmBinaryFile=\"rnnoise.wasm\";if(!isDataURI(wasmBinaryFile)){wasmBinaryFile=locateFile(wasmBinaryFile)}function getBinary(){try{if(wasmBinary){return new Uint8Array(wasmBinary)}if(readBinary){return readBinary(wasmBinaryFile)}else{throw\"both async and sync fetching of the wasm failed\"}}catch(err){abort(err)}}function getBinaryPromise(){if(!wasmBinary&&(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER)&&typeof fetch===\"function\"){return fetch(wasmBinaryFile,{credentials:\"same-origin\"}).then(function(response){if(!response[\"ok\"]){throw\"failed to load wasm binary file at '\"+wasmBinaryFile+\"'\"}return response[\"arrayBuffer\"]()}).catch(function(){return getBinary()})}return new Promise(function(resolve,reject){resolve(getBinary())})}function createWasm(){var info={\"a\":asmLibraryArg};function receiveInstance(instance,module){var exports=instance.exports;Module[\"asm\"]=exports;removeRunDependency(\"wasm-instantiate\")}addRunDependency(\"wasm-instantiate\");function receiveInstantiatedSource(output){receiveInstance(output[\"instance\"])}function instantiateArrayBuffer(receiver){return getBinaryPromise().then(function(binary){return WebAssembly.instantiate(binary,info)}).then(receiver,function(reason){err(\"failed to asynchronously prepare wasm: \"+reason);abort(reason)})}function instantiateAsync(){if(!wasmBinary&&typeof WebAssembly.instantiateStreaming===\"function\"&&!isDataURI(wasmBinaryFile)&&typeof fetch===\"function\"){fetch(wasmBinaryFile,{credentials:\"same-origin\"}).then(function(response){var result=WebAssembly.instantiateStreaming(response,info);return result.then(receiveInstantiatedSource,function(reason){err(\"wasm streaming compile failed: \"+reason);err(\"falling back to ArrayBuffer instantiation\");return instantiateArrayBuffer(receiveInstantiatedSource)})})}else{return instantiateArrayBuffer(receiveInstantiatedSource)}}if(Module[\"instantiateWasm\"]){try{var exports=Module[\"instantiateWasm\"](info,receiveInstance);return exports}catch(e){err(\"Module.instantiateWasm callback failed with error: \"+e);return false}}instantiateAsync();return{}}__ATINIT__.push({func:function(){___wasm_call_ctors()}});function _emscripten_memcpy_big(dest,src,num){HEAPU8.copyWithin(dest,src,src+num)}function _emscripten_get_heap_size(){return HEAPU8.length}function emscripten_realloc_buffer(size){try{wasmMemory.grow(size-buffer.byteLength+65535>>>16);updateGlobalBufferAndViews(wasmMemory.buffer);return 1}catch(e){}}function _emscripten_resize_heap(requestedSize){requestedSize=requestedSize>>>0;var oldSize=_emscripten_get_heap_size();var PAGE_MULTIPLE=65536;var maxHeapSize=2147483648;if(requestedSize>maxHeapSize){return false}var minHeapSize=16777216;for(var cutDown=1;cutDown<=4;cutDown*=2){var overGrownHeapSize=oldSize*(1+.2/cutDown);overGrownHeapSize=Math.min(overGrownHeapSize,requestedSize+100663296);var newSize=Math.min(maxHeapSize,alignUp(Math.max(minHeapSize,requestedSize,overGrownHeapSize),PAGE_MULTIPLE));var replacement=emscripten_realloc_buffer(newSize);if(replacement){return true}}return false}var asmLibraryArg={\"a\":_emscripten_memcpy_big,\"b\":_emscripten_resize_heap,\"memory\":wasmMemory,\"table\":wasmTable};var asm=createWasm();var ___wasm_call_ctors=Module[\"___wasm_call_ctors\"]=function(){return(___wasm_call_ctors=Module[\"___wasm_call_ctors\"]=Module[\"asm\"][\"c\"]).apply(null,arguments)};var _rnnoise_init=Module[\"_rnnoise_init\"]=function(){return(_rnnoise_init=Module[\"_rnnoise_init\"]=Module[\"asm\"][\"d\"]).apply(null,arguments)};var _rnnoise_create=Module[\"_rnnoise_create\"]=function(){return(_rnnoise_create=Module[\"_rnnoise_create\"]=Module[\"asm\"][\"e\"]).apply(null,arguments)};var _malloc=Module[\"_malloc\"]=function(){return(_malloc=Module[\"_malloc\"]=Module[\"asm\"][\"f\"]).apply(null,arguments)};var _rnnoise_destroy=Module[\"_rnnoise_destroy\"]=function(){return(_rnnoise_destroy=Module[\"_rnnoise_destroy\"]=Module[\"asm\"][\"g\"]).apply(null,arguments)};var _free=Module[\"_free\"]=function(){return(_free=Module[\"_free\"]=Module[\"asm\"][\"h\"]).apply(null,arguments)};var _rnnoise_process_frame=Module[\"_rnnoise_process_frame\"]=function(){return(_rnnoise_process_frame=Module[\"_rnnoise_process_frame\"]=Module[\"asm\"][\"i\"]).apply(null,arguments)};var calledRun;dependenciesFulfilled=function runCaller(){if(!calledRun)run();if(!calledRun)dependenciesFulfilled=runCaller};function run(args){args=args||arguments_;if(runDependencies>0){return}preRun();if(runDependencies>0)return;function doRun(){if(calledRun)return;calledRun=true;Module[\"calledRun\"]=true;if(ABORT)return;initRuntime();preMain();readyPromiseResolve(Module);if(Module[\"onRuntimeInitialized\"])Module[\"onRuntimeInitialized\"]();postRun()}if(Module[\"setStatus\"]){Module[\"setStatus\"](\"Running...\");setTimeout(function(){setTimeout(function(){Module[\"setStatus\"](\"\")},1);doRun()},1)}else{doRun()}}Module[\"run\"]=run;if(Module[\"preInit\"]){if(typeof Module[\"preInit\"]==\"function\")Module[\"preInit\"]=[Module[\"preInit\"]];while(Module[\"preInit\"].length>0){Module[\"preInit\"].pop()()}}noExitRuntime=true;run();\n\n\n  return Module.ready\n}\n);\n})();\nexport default Module;","// @flow\n\n/**\n * Constant. Rnnoise default sample size, samples of different size won't work.\n */\nexport const RNNOISE_SAMPLE_LENGTH = 480;\n\n/**\n *  Constant. Rnnoise only takes inputs of 480 PCM float32 samples thus 480*4.\n */\nconst RNNOISE_BUFFER_SIZE = RNNOISE_SAMPLE_LENGTH * 4;\n\n/**\n *  Constant. Rnnoise only takes operates on 44.1Khz float 32 little endian PCM.\n */\nconst PCM_FREQUENCY = 44100;\n\n/**\n * Represents an adaptor for the rnnoise library compiled to webassembly. The class takes care of webassembly\n * memory management and exposes rnnoise functionality such as PCM audio denoising and VAD (voice activity\n * detection) scores.\n */\nexport default class RnnoiseProcessor {\n    /**\n     * Constructor.\n     *\n     * @class\n     * @param {Object} wasmInterface - WebAssembly module interface that exposes rnnoise functionality.\n     */\n    constructor(wasmInterface) {\n        // Considering that we deal with dynamic allocated memory employ exception safety strong guarantee\n        // i.e. in case of exception there are no side effects.\n        try {\n            this._wasmInterface = wasmInterface;\n\n            // For VAD score purposes only allocate the buffers once and reuse them\n            this._wasmPcmInput = this._wasmInterface._malloc(RNNOISE_BUFFER_SIZE);\n\n            if (!this._wasmPcmInput) {\n                throw Error('Failed to create wasm input memory buffer!');\n            }\n\n            this._wasmPcmOutput = this._wasmInterface._malloc(RNNOISE_BUFFER_SIZE);\n\n            if (!this._wasmPcmOutput) {\n                wasmInterface._free(this._wasmPcmInput);\n                throw Error('Failed to create wasm output memory buffer!');\n            }\n\n            // The HEAPF32.set function requires an index relative to a Float32 array view of the wasm memory model\n            // which is an array of bytes. This means we have to divide it by the size of a float to get the index\n            // relative to a Float32 Array.\n            this._wasmPcmInputF32Index = this._wasmPcmInput / 4;\n\n            this._context = this._wasmInterface._rnnoise_create();\n        } catch (error) {\n            // release can be called even if not all the components were initialized.\n            this._releaseWasmResources();\n            throw error;\n        }\n    }\n\n    /**\n     * Copy the input PCM Audio Sample to the wasm input buffer.\n     *\n     * @param {Float32Array} pcmSample - Array containing 16 bit format PCM sample stored in 32 Floats .\n     * @returns {void}\n     */\n    _copyPCMSampleToWasmBuffer(pcmSample) {\n        this._wasmInterface.HEAPF32.set(pcmSample, this._wasmPcmInputF32Index);\n    }\n\n    /**\n     * Convert 32 bit Float PCM samples to 16 bit Float PCM samples and store them in 32 bit Floats.\n     *\n     * @param {Float32Array} f32Array - Array containing 32 bit PCM samples.\n     * @returns {void}\n     */\n    _convertTo16BitPCM(f32Array) {\n        for (const [ index, value ] of f32Array.entries()) {\n            f32Array[index] = value * 0x7fff;\n        }\n    }\n\n    /**\n     * Release resources associated with the wasm context. If something goes downhill here\n     * i.e. Exception is thrown, there is nothing much we can do.\n     *\n     * @returns {void}\n     */\n    _releaseWasmResources() {\n        // For VAD score purposes only allocate the buffers once and reuse them\n        if (this._wasmPcmInput) {\n            this._wasmInterface._free(this._wasmPcmInput);\n            this._wasmPcmInput = null;\n        }\n\n        if (this._wasmPcmOutput) {\n            this._wasmInterface._free(this._wasmPcmOutput);\n            this._wasmPcmOutput = null;\n        }\n\n        if (this._context) {\n            this._wasmInterface._rnnoise_destroy(this._context);\n            this._context = null;\n        }\n    }\n\n    /**\n     * Rnnoise can only operate on a certain PCM array size.\n     *\n     * @returns {number} - The PCM sample array size as required by rnnoise.\n     */\n    getSampleLength() {\n        return RNNOISE_SAMPLE_LENGTH;\n    }\n\n    /**\n     * Rnnoise can only operate on a certain format of PCM sample namely float 32 44.1Kz.\n     *\n     * @returns {number} - PCM sample frequency as required by rnnoise.\n     */\n    getRequiredPCMFrequency() {\n        return PCM_FREQUENCY;\n    }\n\n    /**\n     * Release any resources required by the rnnoise context this needs to be called\n     * before destroying any context that uses the processor.\n     *\n     * @returns {void}\n     */\n    destroy() {\n        // Attempting to release a non initialized processor, do nothing.\n        if (this._destroyed) {\n            return;\n        }\n\n        this._releaseWasmResources();\n\n        this._destroyed = true;\n    }\n\n    /**\n     * Calculate the Voice Activity Detection for a raw Float32 PCM sample Array.\n     * The size of the array must be of exactly 480 samples, this constraint comes from the rnnoise library.\n     *\n     * @param {Float32Array} pcmFrame - Array containing 32 bit PCM samples.\n     * @returns {Float} Contains VAD score in the interval 0 - 1 i.e. 0.90 .\n     */\n    calculateAudioFrameVAD(pcmFrame) {\n        if (this._destroyed) {\n            throw new Error('RnnoiseProcessor instance is destroyed, please create another one!');\n        }\n\n        const pcmFrameLength = pcmFrame.length;\n\n        if (pcmFrameLength !== RNNOISE_SAMPLE_LENGTH) {\n            throw new Error(`Rnnoise can only process PCM frames of 480 samples! Input sample was:${pcmFrameLength}`);\n        }\n\n        this._convertTo16BitPCM(pcmFrame);\n        this._copyPCMSampleToWasmBuffer(pcmFrame);\n\n        return this._wasmInterface._rnnoise_process_frame(this._context, this._wasmPcmOutput, this._wasmPcmInput);\n    }\n}\n","// @flow\n\n// Script expects to find rnnoise webassembly binary in the same public path root, otherwise it won't load\n// During the build phase this needs to be taken care of manually\nimport rnnoiseWasmInit from 'rnnoise-wasm';\n\nimport RnnoiseProcessor from './RnnoiseProcessor';\n\nexport { RNNOISE_SAMPLE_LENGTH } from './RnnoiseProcessor';\nexport { RnnoiseProcessor };\n\nlet rnnoiseModule;\n\n/**\n * Creates a new instance of RnnoiseProcessor.\n *\n * @returns {Promise<RnnoiseProcessor>}\n */\nexport function createRnnoiseProcessor() {\n    if (!rnnoiseModule) {\n        rnnoiseModule = rnnoiseWasmInit();\n    }\n\n    return rnnoiseModule.then(mod => new RnnoiseProcessor(mod));\n}\n","// @flow\n\n/**\n * Number of pixels that signal if two images should be considered different.\n */\nexport const PIXEL_LOWER_BOUND = 100000;\n\n/**\n * Number of milliseconds that represent how often screenshots should be taken.\n */\nexport const POLL_INTERVAL = 30000;\n\n/**\n * SET_INTERVAL constant is used to set interval and it is set in\n * the id property of the request.data property. timeMs property must\n * also be set. request.data example:\n *\n * {\n *      id: SET_INTERVAL,\n *      timeMs: 33\n * }\n */\nexport const SET_INTERVAL = 1;\n\n/**\n * CLEAR_INTERVAL constant is used to clear the interval and it is set in\n * the id property of the request.data property.\n *\n * {\n *      id: CLEAR_INTERVAL\n * }\n */\nexport const CLEAR_INTERVAL = 2;\n\n/**\n * INTERVAL_TIMEOUT constant is used as response and it is set in the id property.\n *\n * {\n *      id: INTERVAL_TIMEOUT\n * }\n */\nexport const INTERVAL_TIMEOUT = 3;\n","// @flow\n\nimport {\n    CLEAR_INTERVAL,\n    INTERVAL_TIMEOUT,\n    SET_INTERVAL\n} from './constants';\n\nconst code = `\n    var timer;\n\n    onmessage = function(request) {\n        switch (request.data.id) {\n        case ${SET_INTERVAL}: {\n            timer = setInterval(() => {\n                postMessage({ id: ${INTERVAL_TIMEOUT} });\n            }, request.data.timeMs);\n            break;\n        }\n        case ${CLEAR_INTERVAL}: {\n            if (timer) {\n                clearInterval(timer);\n            }\n            break;\n        }\n        }\n    };\n`;\n\nexport const timerWorkerScript = URL.createObjectURL(new Blob([ code ], { type: 'application/javascript' }));\n","// @flow\n\nimport pixelmatch from 'pixelmatch';\n\n\nimport {\n    CLEAR_INTERVAL,\n    INTERVAL_TIMEOUT,\n    PIXEL_LOWER_BOUND,\n    POLL_INTERVAL,\n    SET_INTERVAL\n} from './constants';\nimport { timerWorkerScript } from './worker';\n\n\n/**\n * Effect that wraps {@code MediaStream} adding periodic screenshot captures.\n * Manipulates the original desktop stream and performs custom processing operations, if implemented.\n */\nexport default class ScreenshotCaptureEffect {\n    /**\n     * Initializes a new {@code ScreenshotCaptureEffect} instance.\n     *\n     */\n    constructor(callback) {\n        this.callback = callback;\n        this._currentCanvas = document.createElement('canvas');\n        this._currentCanvasContext = this._currentCanvas.getContext('2d');\n        this._videoElement = document.createElement('video');\n\n        // Bind handlers such that they access the same instance.\n        this._handleWorkerAction = this._handleWorkerAction.bind(this);\n        this._initScreenshotCapture = this._initScreenshotCapture.bind(this);\n        this._streamWorker = new Worker(timerWorkerScript, { name: 'Screenshot capture worker' });\n        this._streamWorker.onmessage = this._handleWorkerAction;\n    }\n\n    /**\n     * Starts the screenshot capture event on a loop.\n     *\n     * @param {MediaStream} stream - The desktop stream from which screenshots are to be sent.\n     * @param {string} videoType - The type of the media stream.\n     * @returns {Promise} - Promise that resolves once effect has started or rejects if the\n     * videoType parameter is not desktop.\n     */\n    startEffect(stream, videoType) {\n        return new Promise((resolve, reject) => {\n            if (videoType !== 'desktop') {\n                reject();\n            }\n            const desktopTrack = stream.getVideoTracks()[0];\n            const { height, width }\n                = desktopTrack.getSettings() ?? desktopTrack.getConstraints();\n\n            this._streamHeight = height;\n            this._streamWidth = width;\n            this._currentCanvas.height = parseInt(height, 10);\n            this._currentCanvas.width = parseInt(width, 10);\n            this._videoElement.height = parseInt(height, 10);\n            this._videoElement.width = parseInt(width, 10);\n            this._videoElement.srcObject = stream;\n            this._videoElement.play();\n\n            // Store first capture for comparisons in {@code this._handleScreenshot}.\n            this._videoElement.addEventListener('loadeddata', this._initScreenshotCapture);\n            resolve();\n        });\n    }\n\n    /**\n     * Stops the ongoing {@code ScreenshotCaptureEffect} by clearing the {@code Worker} interval.\n     *\n     * @returns {void}\n     */\n    stopEffect() {\n        this._streamWorker.postMessage({ id: CLEAR_INTERVAL });\n        this._videoElement.removeEventListener('loadeddata', this._initScreenshotCapture);\n    }\n\n    /**\n     * Method that is called as soon as the first frame of the video loads from stream.\n     * The method is used to store the {@code ImageData} object from the first frames\n     * in order to use it for future comparisons based on which we can process only certain\n     * screenshots.\n     *\n     * @private\n     * @returns {void}\n     */\n    _initScreenshotCapture() {\n        const storedCanvas = document.createElement('canvas');\n        const storedCanvasContext = storedCanvas.getContext('2d');\n\n        storedCanvasContext.drawImage(this._videoElement, 0, 0, this._streamWidth, this._streamHeight);\n        const { data } = storedCanvasContext.getImageData(0, 0, this._streamWidth, this._streamHeight);\n\n        this._storedImageData = data;\n        this._streamWorker.postMessage({\n            id: SET_INTERVAL,\n            timeMs: POLL_INTERVAL\n        });\n    }\n\n    /**\n     * Handler of the {@code EventHandler} message that calls the appropriate method based on the parameter's id.\n     *\n     * @private\n     * @param {EventHandler} message - Message received from the Worker.\n     * @returns {void}\n     */\n    _handleWorkerAction(message) {\n        return message.data.id === INTERVAL_TIMEOUT && this._handleScreenshot();\n    }\n\n    /**\n     * Method that decides whether an image should be processed based on a preset pixel lower bound.\n     *\n     * @private\n     * @param {integer} nbPixels - The number of pixels of the candidate image.\n     * @returns {boolean} - Whether the image should be processed or not.\n     */\n    _shouldProcessScreenshot(nbPixels) {\n        return nbPixels >= PIXEL_LOWER_BOUND;\n    }\n\n    /**\n     * Screenshot handler.\n     *\n     * @private\n     * @returns {void}\n     */\n    _handleScreenshot() {\n        this._currentCanvasContext.drawImage(this._videoElement, 0, 0, this._streamWidth, this._streamHeight);\n        const { data } = this._currentCanvasContext.getImageData(0, 0, this._streamWidth, this._streamHeight);\n        const diffPixels = pixelmatch(data, this._storedImageData, null, this._streamWidth, this._streamHeight);\n\n        if (this._shouldProcessScreenshot(diffPixels)) {\n            this._storedImageData = data;\n            this.callback(this._currentCanvas);\n        }\n    }\n}\n","export const VIRTUAL_BACKGROUND_TYPE = {\n    IMAGE: 'image',\n    DESKTOP_SHARE: 'desktop-share',\n    BLUR: 'blur',\n    NONE: 'none'\n};","\n/**\n * SET_TIMEOUT constant is used to set interval and it is set in\n * the id property of the request.data property. timeMs property must\n * also be set. request.data example:\n *\n * {\n *      id: SET_TIMEOUT,\n *      timeMs: 33\n * }\n */\nexport const SET_TIMEOUT = 1;\n\n/**\n * CLEAR_TIMEOUT constant is used to clear the interval and it is set in\n * the id property of the request.data property.\n *\n * {\n *      id: CLEAR_TIMEOUT\n * }\n */\nexport const CLEAR_TIMEOUT = 2;\n\n/**\n * TIMEOUT_TICK constant is used as response and it is set in the id property.\n *\n * {\n *      id: TIMEOUT_TICK\n * }\n */\nexport const TIMEOUT_TICK = 3;\n\n/**\n * The following code is needed as string to create a URL from a Blob.\n * The URL is then passed to a WebWorker. Reason for this is to enable\n * use of setInterval that is not throttled when tab is inactive.\n */\nconst code = `\n    var timer;\n\n    onmessage = function(request) {\n        switch (request.data.id) {\n        case ${SET_TIMEOUT}: {\n            timer = setTimeout(() => {\n                postMessage({ id: ${TIMEOUT_TICK} });\n            }, request.data.timeMs);\n            break;\n        }\n        case ${CLEAR_TIMEOUT}: {\n            if (timer) {\n                clearTimeout(timer);\n            }\n            break;\n        }\n        }\n    };\n`;\n\nexport const timerWorkerScript = URL.createObjectURL(new Blob([ code ], { type: 'application/javascript' }));\n","// @flow\n\nimport { VIRTUAL_BACKGROUND_TYPE } from './constants';\n\nimport {\n    CLEAR_TIMEOUT,\n    TIMEOUT_TICK,\n    SET_TIMEOUT,\n    timerWorkerScript\n} from './TimerWorker';\n\n/**\n * Represents a modified MediaStream that adds effects to video background.\n * <tt>JitsiStreamBackgroundEffect</tt> does the processing of the original\n * video stream.\n */\nexport default class JitsiStreamBackgroundEffect {\n    /**\n     * Represents a modified video MediaStream track.\n     *\n     * @class\n     * @param {Object} model - Meet model.\n     * @param {Object} options - Segmentation dimensions.\n     */\n    constructor(model, options) {\n        this._options = options;\n\n        if (this._options.virtualBackground.backgroundType === VIRTUAL_BACKGROUND_TYPE.IMAGE) {\n            this._virtualImage = document.createElement('img');\n            this._virtualImage.crossOrigin = 'anonymous';\n            this._virtualImage.src = this._options.virtualBackground.virtualSource;\n        }\n        if (this._options.virtualBackground.backgroundType === VIRTUAL_BACKGROUND_TYPE.DESKTOP_SHARE) {\n            this._virtualVideo = document.createElement('video');\n            this._virtualVideo.autoplay = true;\n            this._virtualVideo.srcObject = this._options?.virtualBackground?.virtualSource?.stream;\n        }\n        this._model = model;\n        this._segmentationPixelCount = this._options.width * this._options.height;\n\n        // Bind event handler so it is only bound once for every instance.\n        this._onMaskFrameTimer = this._onMaskFrameTimer.bind(this);\n\n        // Workaround for FF issue https://bugzilla.mozilla.org/show_bug.cgi?id=1388974\n        this._outputCanvasElement = document.createElement('canvas');\n        this._outputCanvasElement.getContext('2d');\n        this._inputVideoElement = document.createElement('video');\n    }\n\n    /**\n     * EventHandler onmessage for the maskFrameTimerWorker WebWorker.\n     *\n     * @private\n     * @param {EventHandler} response - The onmessage EventHandler parameter.\n     * @returns {void}\n     */\n    _onMaskFrameTimer(response) {\n        if (response.data.id === TIMEOUT_TICK) {\n            this._renderMask();\n        }\n    }\n\n    /**\n     * Represents the run post processing.\n     *\n     * @returns {void}\n     */\n    runPostProcessing() {\n        this._outputCanvasCtx.globalCompositeOperation = 'copy';\n\n        // Draw segmentation mask.\n        //\n\n        // Smooth out the edges.\n        if (this._options.virtualBackground.backgroundType === VIRTUAL_BACKGROUND_TYPE.IMAGE) {\n            this._outputCanvasCtx.filter = 'blur(4px)';\n        } else {\n            this._outputCanvasCtx.filter = 'blur(8px)';\n        }\n\n        this._outputCanvasCtx.drawImage(\n            this._segmentationMaskCanvas,\n            0,\n            0,\n            this._options.width,\n            this._options.height,\n            0,\n            0,\n            this._inputVideoElement.width,\n            this._inputVideoElement.height\n        );\n        this._outputCanvasCtx.globalCompositeOperation = 'source-in';\n        this._outputCanvasCtx.filter = 'none';\n\n        // Draw the foreground video.\n        //\n\n        this._outputCanvasCtx.drawImage(this._inputVideoElement, 0, 0);\n\n        // Draw the background.\n        //\n\n        this._outputCanvasCtx.globalCompositeOperation = 'destination-over';\n        if (this._options.virtualBackground.backgroundType === VIRTUAL_BACKGROUND_TYPE.IMAGE) {\n            this._outputCanvasCtx.drawImage(\n                this._virtualImage,\n                0,\n                0,\n                this._inputVideoElement.width,\n                this._inputVideoElement.height\n            );\n        }\n        if (this._options.virtualBackground.backgroundType === VIRTUAL_BACKGROUND_TYPE.DESKTOP_SHARE) {\n            this._outputCanvasCtx.drawImage(\n                this._virtualVideo,\n                0,\n                0,\n                this._desktopShareDimensions.width,\n                this._desktopShareDimensions.height\n            );\n        } else {\n            this._outputCanvasCtx.filter = `blur(${this._options.virtualBackground.blurValue}px)`;\n            this._outputCanvasCtx.drawImage(this._inputVideoElement, 0, 0);\n        }\n    }\n\n    /**\n     * Represents the run Tensorflow Interference.\n     *\n     * @returns {void}\n     */\n    runInference() {\n        this._model._runInference();\n        const outputMemoryOffset = this._model._getOutputMemoryOffset() / 4;\n\n        for (let i = 0; i < this._segmentationPixelCount; i++) {\n            const background = this._model.HEAPF32[outputMemoryOffset + (i * 2)];\n            const person = this._model.HEAPF32[outputMemoryOffset + (i * 2) + 1];\n            const shift = Math.max(background, person);\n            const backgroundExp = Math.exp(background - shift);\n            const personExp = Math.exp(person - shift);\n\n            // Sets only the alpha component of each pixel.\n            this._segmentationMask.data[(i * 4) + 3] = (255 * personExp) / (backgroundExp + personExp);\n        }\n        this._segmentationMaskCtx.putImageData(this._segmentationMask, 0, 0);\n    }\n\n    /**\n     * Loop function to render the background mask.\n     *\n     * @private\n     * @returns {void}\n     */\n    _renderMask() {\n        const desktopShareTrack = this._options?.virtualBackground?.virtualSource?.track;\n\n        if (desktopShareTrack) {\n            this._desktopShareDimensions = desktopShareTrack.getSettings ? desktopShareTrack.getSettings()\n                : desktopShareTrack.getConstraints();\n        }\n        this.resizeSource();\n        this.runInference();\n        this.runPostProcessing();\n\n        this._maskFrameTimerWorker.postMessage({\n            id: SET_TIMEOUT,\n            timeMs: 1000 / 30\n        });\n    }\n\n    /**\n     * Represents the resize source process.\n     *\n     * @returns {void}\n     */\n    resizeSource() {\n        this._segmentationMaskCtx.drawImage(\n            this._inputVideoElement,\n            0,\n            0,\n            this._inputVideoElement.width,\n            this._inputVideoElement.height,\n            0,\n            0,\n            this._options.width,\n            this._options.height\n        );\n\n        const imageData = this._segmentationMaskCtx.getImageData(\n            0,\n            0,\n            this._options.width,\n            this._options.height\n        );\n        const inputMemoryOffset = this._model._getInputMemoryOffset() / 4;\n\n        for (let i = 0; i < this._segmentationPixelCount; i++) {\n            this._model.HEAPF32[inputMemoryOffset + (i * 3)] = imageData.data[i * 4] / 255;\n            this._model.HEAPF32[inputMemoryOffset + (i * 3) + 1] = imageData.data[(i * 4) + 1] / 255;\n            this._model.HEAPF32[inputMemoryOffset + (i * 3) + 2] = imageData.data[(i * 4) + 2] / 255;\n        }\n    }\n\n    /**\n     * Checks if the local track supports this effect.\n     *\n     * @param {JitsiLocalTrack} jitsiLocalTrack - Track to apply effect.\n     * @returns {boolean} - Returns true if this effect can run on the specified track\n     * false otherwise.\n     */\n    isEnabled(jitsiLocalTrack) {\n        return jitsiLocalTrack.isVideoTrack() && jitsiLocalTrack.videoType === 'camera';\n    }\n\n    /**\n     * Starts loop to capture video frame and render the segmentation mask.\n     *\n     * @param {MediaStream} stream - Stream to be used for processing.\n     * @returns {MediaStream} - The stream with the applied effect.\n     */\n    startEffect(stream) {\n        this._maskFrameTimerWorker = new Worker(timerWorkerScript, { name: 'Blur effect worker' });\n        this._maskFrameTimerWorker.onmessage = this._onMaskFrameTimer;\n        const firstVideoTrack = stream.getVideoTracks()[0];\n        const { height, frameRate, width }\n            = firstVideoTrack.getSettings ? firstVideoTrack.getSettings() : firstVideoTrack.getConstraints();\n\n        this._segmentationMask = new ImageData(this._options.width, this._options.height);\n        this._segmentationMaskCanvas = document.createElement('canvas');\n        this._segmentationMaskCanvas.width = this._options.width;\n        this._segmentationMaskCanvas.height = this._options.height;\n        this._segmentationMaskCtx = this._segmentationMaskCanvas.getContext('2d');\n\n        this._outputCanvasElement.width = parseInt(width, 10);\n        this._outputCanvasElement.height = parseInt(height, 10);\n        this._outputCanvasCtx = this._outputCanvasElement.getContext('2d');\n        this._inputVideoElement.width = parseInt(width, 10);\n        this._inputVideoElement.height = parseInt(height, 10);\n        this._inputVideoElement.autoplay = true;\n        this._inputVideoElement.srcObject = stream;\n        this._inputVideoElement.onloadeddata = () => {\n            this._maskFrameTimerWorker.postMessage({\n                id: SET_TIMEOUT,\n                timeMs: 1000 / 30\n            });\n        };\n\n        return this._outputCanvasElement.captureStream(parseInt(frameRate, 10));\n    }\n\n    /**\n     * Stops the capture and render loop.\n     *\n     * @returns {void}\n     */\n    stopEffect() {\n        this._maskFrameTimerWorker.postMessage({\n            id: CLEAR_TIMEOUT\n        });\n\n        this._maskFrameTimerWorker.terminate();\n    }\n}\n","// @flow\nimport JitsiStreamBackgroundEffect from './JitsiStreamBackgroundEffect';\nimport createTFLiteModule from './tflite';\nimport createTFLiteSIMDModule from './tflite-simd';\nconst models = {\n    model96: 'https://sdk.sariska.io/segm_lite_v681.tflite',\n    model144: 'https://sdk.sariska.io/segm_full_v679.tflite'\n};\n\nconst segmentationDimensions = {\n    model96: {\n        height: 96,\n        width: 160\n    },\n    model144: {\n        height: 144,\n        width: 256\n    }\n};\n\n/**\n * Creates a new instance of JitsiStreamBackgroundEffect. This loads the Meet background model that is used to\n * extract person segmentation.\n *\n * @param {Object} virtualBackground - The virtual object that contains the background image source and\n * the isVirtualBackground flag that indicates if virtual image is activated.\n * @param {Function} dispatch - The Redux dispatch function.\n * @returns {Promise<JitsiStreamBackgroundEffect>}\n */\nexport async function createVirtualBackgroundEffect(virtualBackground, dispatch) {\n    if (!MediaStreamTrack.prototype.getSettings && !MediaStreamTrack.prototype.getConstraints) {\n        throw new Error('JitsiStreamBackgroundEffect not supported!');\n    }\n    let tflite;\n    let wasmCheck;\n\n    // Checks if WebAssembly feature is supported or enabled by/in the browser.\n    // Conditional import of wasm-check package is done to prevent\n    // the browser from crashing when the user opens the app.\n\n    try {\n        wasmCheck = require('wasm-check');\n        if (wasmCheck?.feature?.simd) {\n            tflite = await createTFLiteSIMDModule();\n        } else {\n            tflite = await createTFLiteModule();\n        }\n    } catch (err) {\n        return;\n    }\n\n    const modelBufferOffset = tflite._getModelBufferMemoryOffset();\n    const modelResponse = await fetch(wasmCheck.feature.simd ? models.model144 : models.model96);\n\n    if (!modelResponse.ok) {\n        throw new Error('Failed to download tflite model!');\n    }\n\n    const model = await modelResponse.arrayBuffer();\n\n    tflite.HEAPU8.set(new Uint8Array(model), modelBufferOffset);\n\n    tflite._loadModel(model.byteLength);\n\n    const options = {\n        ...wasmCheck.feature.simd ? segmentationDimensions.model144 : segmentationDimensions.model96,\n        virtualBackground\n    };\n\n    return new JitsiStreamBackgroundEffect(tflite, options);\n}","import Logger from '@jitsi/logger';\n\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport JitsiConnection from './JitsiConnection';\nimport * as JitsiConnectionErrors from './JitsiConnectionErrors';\nimport * as JitsiConnectionEvents from './JitsiConnectionEvents';\nimport JitsiMediaDevices from './JitsiMediaDevices';\nimport * as JitsiMediaDevicesEvents from './JitsiMediaDevicesEvents';\nimport JitsiTrackError from './JitsiTrackError';\nimport * as JitsiTrackErrors from './JitsiTrackErrors';\nimport * as JitsiTrackEvents from './JitsiTrackEvents';\nimport * as JitsiTranscriptionStatus from './JitsiTranscriptionStatus';\nimport RTC from './modules/RTC/RTC';\nimport browser from './modules/browser';\nimport NetworkInfo from './modules/connectivity/NetworkInfo';\nimport { ParticipantConnectionStatus }\n    from './modules/connectivity/ParticipantConnectionStatus';\nimport getActiveAudioDevice from './modules/detection/ActiveDeviceDetector';\nimport * as DetectionEvents from './modules/detection/DetectionEvents';\nimport TrackVADEmitter from './modules/detection/TrackVADEmitter';\nimport FeatureFlags from './modules/flags/FeatureFlags';\nimport ProxyConnectionService\n    from './modules/proxyconnection/ProxyConnectionService';\nimport recordingConstants from './modules/recording/recordingConstants';\nimport Settings from './modules/settings/Settings';\nimport LocalStatsCollector from './modules/statistics/LocalStatsCollector';\nimport precallTest from './modules/statistics/PrecallTest';\nimport Statistics from './modules/statistics/statistics';\nimport AuthUtil from './modules/util/AuthUtil';\nimport GlobalOnErrorHandler from './modules/util/GlobalOnErrorHandler';\nimport ScriptUtil from './modules/util/ScriptUtil';\nimport * as VideoSIPGWConstants from './modules/videosipgw/VideoSIPGWConstants';\nimport AudioMixer from './modules/webaudio/AudioMixer';\nimport * as MediaType from './service/RTC/MediaType';\nimport * as ConnectionQualityEvents\n    from './service/connectivity/ConnectionQualityEvents';\nimport * as E2ePingEvents from './service/e2eping/E2ePingEvents';\nimport { createGetUserMediaEvent } from './service/statistics/AnalyticsEvents';\nimport {createPresenterEffect, createRnnoiseProcessor, createScreenshotCaptureEffect, createVirtualBackgroundEffect} from \"./modules/stream-effects\";\n\nconst logger = Logger.getLogger(__filename);\n\n/**\n * The amount of time to wait until firing\n * {@link JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN} event.\n */\nconst USER_MEDIA_SLOW_PROMISE_TIMEOUT = 1000;\n\n/**\n * Extracts from an 'options' objects with a specific format (TODO what IS the\n * format?) the attributes which are to be logged in analytics events.\n *\n * @param options gum options (???)\n * @returns {*} the attributes to attach to analytics events.\n */\nfunction getAnalyticsAttributesFromOptions(options) {\n    const attributes = {\n        'audio_requested':\n            options.devices.includes('audio'),\n        'video_requested':\n            options.devices.includes('video'),\n        'screen_sharing_requested':\n            options.devices.includes('desktop')\n    };\n\n    if (attributes.video_requested) {\n        attributes.resolution = options.resolution;\n    }\n\n    return attributes;\n}\n\n/**\n * Tries to deal with the following problem: {@code JitsiMeetJS} is not only\n * this module, it's also a global (i.e. attached to {@code window}) namespace\n * for all globals of the projects in the Jitsi Meet family. If lib-jitsi-meet\n * is loaded through an HTML {@code script} tag, {@code JitsiMeetJS} will\n * automatically be attached to {@code window} by webpack. Unfortunately,\n * webpack's source code does not check whether the global variable has already\n * been assigned and overwrites it. Which is OK for the module\n * {@code JitsiMeetJS} but is not OK for the namespace {@code JitsiMeetJS}\n * because it may already contain the values of other projects in the Jitsi Meet\n * family. The solution offered here works around webpack by merging all\n * existing values of the namespace {@code JitsiMeetJS} into the module\n * {@code JitsiMeetJS}.\n *\n * @param {Object} module - The module {@code JitsiMeetJS} (which will be\n * exported and may be attached to {@code window} by webpack later on).\n * @private\n * @returns {Object} - A {@code JitsiMeetJS} module which contains all existing\n * value of the namespace {@code JitsiMeetJS} (if any).\n */\nfunction _mergeNamespaceAndModule(module) {\n    return (\n        typeof window.SariskaMediaTransport === 'object'\n            ? Object.assign({}, window.SariskaMediaTransport, module)\n            : module);\n}\n\n/**\n * The public API of the Jitsi Meet library (a.k.a. {@code JitsiMeetJS}).\n */\nexport default _mergeNamespaceAndModule({\n\n    version: '{#COMMIT_HASH#}',\n\n    JitsiConnection,\n\n    /**\n     * {@code ProxyConnectionService} is used to connect a remote peer to a\n     * local Jitsi participant without going through a Jitsi conference. It is\n     * currently used for room integration development, specifically wireless\n     * screensharing. Its API is experimental and will likely change; usage of\n     * it is advised against.\n     */\n    ProxyConnectionService,\n    effects: {\n        createPresenterEffect,\n        createRnnoiseProcessor,\n        createScreenshotCaptureEffect,\n        createVirtualBackgroundEffect\n    },\n    constants: {\n        participantConnectionStatus: ParticipantConnectionStatus,\n        recording: recordingConstants,\n        sipVideoGW: VideoSIPGWConstants,\n        transcriptionStatus: JitsiTranscriptionStatus\n    },\n    events: {\n        conference: JitsiConferenceEvents,\n        connection: JitsiConnectionEvents,\n        detection: DetectionEvents,\n        track: JitsiTrackEvents,\n        mediaDevices: JitsiMediaDevicesEvents,\n        connectionQuality: ConnectionQualityEvents,\n        e2eping: E2ePingEvents\n    },\n    errors: {\n        conference: JitsiConferenceErrors,\n        connection: JitsiConnectionErrors,\n        track: JitsiTrackErrors\n    },\n    errorTypes: {\n        JitsiTrackError\n    },\n    logLevels: Logger.levels,\n    mediaDevices: JitsiMediaDevices,\n    analytics: Statistics.analytics,\n    initialize(options = {}) {\n        this.init(options); \n    },\n    init(options = {}) {\n        options = {...initSDKConfig, ...options};\n        Settings.init(options.externalStorage);\n        Statistics.init(options);\n\n        // Configure the feature flags.\n        FeatureFlags.init(options.flags || { });\n\n        // Initialize global window.connectionTimes\n        // FIXME do not use 'window'\n        if (!window.connectionTimes) {\n            window.connectionTimes = {};\n        }\n\n        if (options.enableAnalyticsLogging !== true) {\n            logger.warn('Analytics disabled, disposing.');\n            this.analytics.dispose();\n        }\n\n        if (options.enableWindowOnErrorHandler) {\n            GlobalOnErrorHandler.addHandler(\n                this.getGlobalOnErrorHandler.bind(this));\n        }\n\n        if (this.version) {\n            const logObject = {\n                id: 'component_version',\n                component: 'sariska-media-transport',\n                version: this.version\n            };\n\n            Statistics.sendLog(JSON.stringify(logObject));\n        }\n\n        return RTC.init(options);\n    },\n\n    /**\n     * Returns whether the desktop sharing is enabled or not.\n     *\n     * @returns {boolean}\n     */\n    isDesktopSharingEnabled() {\n        return RTC.isDesktopSharingEnabled();\n    },\n\n    /**\n     * Returns whether the current execution environment supports WebRTC (for\n     * use within this library).\n     *\n     * @returns {boolean} {@code true} if WebRTC is supported in the current\n     * execution environment (for use within this library); {@code false},\n     * otherwise.\n     */\n    isWebRtcSupported() {\n        return RTC.isWebRtcSupported();\n    },\n\n    setLogLevel(level) {\n        Logger.setLogLevel(level);\n    },\n\n    /**\n     * Sets the log level to the <tt>Logger</tt> instance with given id.\n     *\n     * @param {Logger.levels} level the logging level to be set\n     * @param {string} id the logger id to which new logging level will be set.\n     * Usually it's the name of the JavaScript source file including the path\n     * ex. \"modules/xmpp/ChatRoom.js\"\n     */\n    setLogLevelById(level, id) {\n        Logger.setLogLevelById(level, id);\n    },\n\n    /**\n     * Registers new global logger transport to the library logging framework.\n     *\n     * @param globalTransport\n     * @see Logger.addGlobalTransport\n     */\n    addGlobalLogTransport(globalTransport) {\n        Logger.addGlobalTransport(globalTransport);\n    },\n\n    /**\n     * Removes global logging transport from the library logging framework.\n     *\n     * @param globalTransport\n     * @see Logger.removeGlobalTransport\n     */\n    removeGlobalLogTransport(globalTransport) {\n        Logger.removeGlobalTransport(globalTransport);\n    },\n\n    /**\n    * Sets global options which will be used by all loggers. Changing these\n    * works even after other loggers are created.\n    *\n    * @param options\n    * @see Logger.setGlobalOptions\n    */\n    setGlobalLogOptions(options) {\n        Logger.setGlobalOptions(options);\n    },\n\n    /**\n     * Creates the media tracks and returns them trough the callback.\n     *\n     * @param options Object with properties / settings specifying the tracks\n     * which should be created. should be created or some additional\n     * configurations about resolution for example.\n     * @param {Array} options.effects optional effects array for the track\n     * @param {boolean} options.firePermissionPromptIsShownEvent - if event\n     * JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN should be fired\n     * @param {boolean} options.fireSlowPromiseEvent - if event\n     * JitsiMediaDevicesEvents.USER_MEDIA_SLOW_PROMISE_TIMEOUT should be fired\n     * @param {Array} options.devices the devices that will be requested\n     * @param {string} options.resolution resolution constraints\n     * @param {string} options.cameraDeviceId\n     * @param {string} options.micDeviceId\n     * @param {intiger} interval - the interval (in ms) for\n     * checking whether the desktop sharing extension is installed or not\n     * @param {Function} checkAgain - returns boolean. While checkAgain()==true\n     * createLocalTracks will wait and check on every \"interval\" ms for the\n     * extension. If the desktop extension is not install and checkAgain()==true\n     * createLocalTracks will finish with rejected Promise.\n     * @param {Function} listener - The listener will be called to notify the\n     * user of lib-jitsi-meet that createLocalTracks is starting external\n     * extension installation process.\n     * NOTE: If the inline installation process is not possible and external\n     * installation is enabled the listener property will be called to notify\n     * the start of external installation process. After that createLocalTracks\n     * will start to check for the extension on every interval ms until the\n     * plugin is installed or until checkAgain return false. If the extension\n     * is found createLocalTracks will try to get the desktop sharing track and\n     * will finish the execution. If checkAgain returns false, createLocalTracks\n     * will finish the execution with rejected Promise.\n     *\n     * @deprecated old firePermissionPromptIsShownEvent\n     * @returns {Promise.<{Array.<JitsiTrack>}, JitsiConferenceError>} A promise\n     * that returns an array of created JitsiTracks if resolved, or a\n     * JitsiConferenceError if rejected.\n     */\n    createLocalTracks(options = {}, oldfirePermissionPromptIsShownEvent) {\n        if (window.location.href.indexOf(\"iAmRecorder\") >= 0) {\n            return [];\n         }\n\n        let promiseFulfilled = false;\n\n        const { firePermissionPromptIsShownEvent, fireSlowPromiseEvent, ...restOptions } = options;\n        const firePermissionPrompt = firePermissionPromptIsShownEvent || oldfirePermissionPromptIsShownEvent;\n\n        if (firePermissionPrompt && !RTC.arePermissionsGrantedForAvailableDevices()) {\n            JitsiMediaDevices.emitEvent(\n                JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN,\n                browser.getName());\n        } else if (fireSlowPromiseEvent) {\n            window.setTimeout(() => {\n                if (!promiseFulfilled) {\n                    JitsiMediaDevices.emitEvent(JitsiMediaDevicesEvents.SLOW_GET_USER_MEDIA);\n                }\n            }, USER_MEDIA_SLOW_PROMISE_TIMEOUT);\n        }\n\n        if (!window.connectionTimes) {\n            window.connectionTimes = {};\n        }\n        window.connectionTimes['obtainPermissions.start']\n            = window.performance.now();\n\n        return RTC.obtainAudioAndVideoPermissions(restOptions)\n            .then(tracks => {\n                promiseFulfilled = true;\n\n                window.connectionTimes['obtainPermissions.end']\n                    = window.performance.now();\n\n                Statistics.sendAnalytics(\n                    createGetUserMediaEvent(\n                        'success',\n                        getAnalyticsAttributesFromOptions(restOptions)));\n\n                if (!RTC.options.disableAudioLevels) {\n                    for (let i = 0; i < tracks.length; i++) {\n                        const track = tracks[i];\n                        const mStream = track.getOriginalStream();\n\n                        if (track.getType() === MediaType.AUDIO) {\n                            Statistics.startLocalStats(mStream,\n                                track.setAudioLevel.bind(track));\n                            track.addEventListener(\n                                JitsiTrackEvents.LOCAL_TRACK_STOPPED,\n                                () => {\n                                    Statistics.stopLocalStats(mStream);\n                                });\n                        }\n                    }\n                }\n\n                // set real device ids\n                const currentlyAvailableMediaDevices\n                    = RTC.getCurrentlyAvailableMediaDevices();\n\n                if (currentlyAvailableMediaDevices) {\n                    for (let i = 0; i < tracks.length; i++) {\n                        const track = tracks[i];\n\n                        track._setRealDeviceIdFromDeviceList(\n                            currentlyAvailableMediaDevices);\n                    }\n                }\n\n                // set the contentHint to \"detail\" for desktop tracks\n                // eslint-disable-next-line prefer-const\n                for (const track of tracks) {\n                    if (track.type === MediaType.VIDEO\n                        && track.videoType === 'desktop') {\n                        this.setVideoTrackContentHints(track.track, 'detail');\n                    }\n                }\n\n                return tracks;\n            })\n            .catch(error => {\n                promiseFulfilled = true;\n\n                if (error.name === JitsiTrackErrors.SCREENSHARING_USER_CANCELED) {\n                    // User cancelled action is not really an error, so only\n                    // log it as an event to avoid having conference classified\n                    // as partially failed\n                    const logObject = {\n                        id: 'screensharing_user_canceled',\n                        message: error.message\n                    };\n\n                    Statistics.sendLog(JSON.stringify(logObject));\n\n                    Statistics.sendAnalytics(\n                        createGetUserMediaEvent(\n                            'warning',\n                            {\n                                reason: 'extension install user canceled'\n                            }));\n                } else if (error.name === JitsiTrackErrors.NOT_FOUND) {\n                    // logs not found devices with just application log to cs\n                    const logObject = {\n                        id: 'usermedia_missing_device',\n                        status: error.gum.devices\n                    };\n\n                    Statistics.sendLog(JSON.stringify(logObject));\n\n                    const attributes\n                        = getAnalyticsAttributesFromOptions(options);\n\n                    attributes.reason = 'device not found';\n                    attributes.devices = error.gum.devices.join('.');\n                    Statistics.sendAnalytics(\n                        createGetUserMediaEvent('error', attributes));\n                } else {\n                    // Report gUM failed to the stats\n                    Statistics.sendGetUserMediaFailed(error);\n\n                    const attributes\n                        = getAnalyticsAttributesFromOptions(options);\n\n                    attributes.reason = error.name;\n                    Statistics.sendAnalytics(\n                        createGetUserMediaEvent('error', attributes));\n                }\n\n                window.connectionTimes['obtainPermissions.end']\n                    = window.performance.now();\n\n                return Promise.reject(error);\n            });\n    },\n\n    /**\n     * Create a TrackVADEmitter service that connects an audio track to an VAD (voice activity detection) processor in\n     * order to obtain VAD scores for individual PCM audio samples.\n     * @param {string} localAudioDeviceId - The target local audio device.\n     * @param {number} sampleRate - Sample rate at which the emitter will operate. Possible values  256, 512, 1024,\n     * 4096, 8192, 16384. Passing other values will default to closes neighbor.\n     * I.e. Providing a value of 4096 means that the emitter will process 4096 PCM samples at a time, higher values mean\n     * longer calls, lowers values mean more calls but shorter.\n     * @param {Object} vadProcessor - VAD Processors that does the actual compute on a PCM sample.The processor needs\n     * to implement the following functions:\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by calculateAudioFrameVAD.\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\n     * i.e. (16KHz, 44.1 KHz etc.)\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\n     * @returns {Promise<TrackVADEmitter>}\n     */\n    createTrackVADEmitter(localAudioDeviceId, sampleRate, vadProcessor) {\n        return TrackVADEmitter.create(localAudioDeviceId, sampleRate, vadProcessor);\n    },\n\n    /**\n     * Create AudioMixer, which is essentially a wrapper over web audio ChannelMergerNode. It essentially allows the\n     * user to mix multiple MediaStreams into a single one.\n     *\n     * @returns {AudioMixer}\n     */\n    createAudioMixer() {\n        return new AudioMixer();\n    },\n\n    /**\n     * Go through all audio devices on the system and return one that is active, i.e. has audio signal.\n     *\n     * @returns Promise<Object> - Object containing information about the found device.\n     */\n    getActiveAudioDevice() {\n        return getActiveAudioDevice();\n    },\n\n    /**\n     * Checks if its possible to enumerate available cameras/microphones.\n     *\n     * @returns {Promise<boolean>} a Promise which will be resolved only once\n     * the WebRTC stack is ready, either with true if the device listing is\n     * available available or with false otherwise.\n     * @deprecated use JitsiMeetJS.mediaDevices.isDeviceListAvailable instead\n     */\n    isDeviceListAvailable() {\n        logger.warn('This method is deprecated, use '\n            + 'JitsiMeetJS.mediaDevices.isDeviceListAvailable instead');\n\n        return this.mediaDevices.isDeviceListAvailable();\n    },\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     *\n     * @param {string} [deviceType] - type of device to change. Default is\n     * {@code undefined} or 'input', 'output' - for audio output device change.\n     * @returns {boolean} {@code true} if available; {@code false}, otherwise.\n     * @deprecated use JitsiMeetJS.mediaDevices.isDeviceChangeAvailable instead\n     */\n    isDeviceChangeAvailable(deviceType) {\n        logger.warn('This method is deprecated, use '\n            + 'JitsiMeetJS.mediaDevices.isDeviceChangeAvailable instead');\n\n        return this.mediaDevices.isDeviceChangeAvailable(deviceType);\n    },\n\n\n    /**\n     * Checks if the current environment supports having multiple audio\n     * input devices in use simultaneously.\n     *\n     * @returns {boolean} True if multiple audio input devices can be used.\n     */\n    isMultipleAudioInputSupported() {\n        return this.mediaDevices.isMultipleAudioInputSupported();\n    },\n\n    /**\n     * Checks if local tracks can collect stats and collection is enabled.\n     *\n     * @param {boolean} True if stats are being collected for local tracks.\n     */\n    isCollectingLocalStats() {\n        return Statistics.audioLevelsEnabled\n            && LocalStatsCollector.isLocalStatsSupported();\n    },\n\n    /**\n     * Executes callback with list of media devices connected.\n     *\n     * @param {function} callback\n     * @deprecated use JitsiMeetJS.mediaDevices.enumerateDevices instead\n     */\n    enumerateDevices(callback) {\n        logger.warn('This method is deprecated, use '\n            + 'JitsiMeetJS.mediaDevices.enumerateDevices instead');\n        this.mediaDevices.enumerateDevices(callback);\n    },\n\n    /* eslint-disable max-params */\n\n    /**\n     * @returns function that can be used to be attached to window.onerror and\n     * if options.enableWindowOnErrorHandler is enabled returns\n     * the function used by the lib.\n     * (function(message, source, lineno, colno, error)).\n     */\n    getGlobalOnErrorHandler(message, source, lineno, colno, error) {\n        logger.error(\n            `UnhandledError: ${message}`,\n            `Script: ${source}`,\n            `Line: ${lineno}`,\n            `Column: ${colno}`,\n            'StackTrace: ', error);\n        Statistics.reportGlobalError(error);\n    },\n\n    /**\n     * Informs lib-jitsi-meet about the current network status.\n     *\n     * @param {boolean} isOnline - {@code true} if the internet connectivity is online or {@code false}\n     * otherwise.\n     */\n    setNetworkInfo({ isOnline }) {\n        Statistics.sendAnalytics(\n            createAnalyticsEvent.createNetworkInfoEvent({\n                isOnline\n        }));\n        NetworkInfo.updateNetworkInfo({ isOnline });\n    },\n\n    /**\n     * Set the contentHint on the transmitted stream track to indicate\n     * charaterstics in the video stream, which informs PeerConnection\n     * on how to encode the track (to prefer motion or individual frame detail)\n     * @param {MediaStreamTrack} track - the track that is transmitted\n     * @param {String} hint - contentHint value that needs to be set on the track\n     */\n    setVideoTrackContentHints(track, hint) {\n        if ('contentHint' in track) {\n            track.contentHint = hint;\n            if (track.contentHint !== hint) {\n                logger.debug('Invalid video track contentHint');\n            }\n        } else {\n            logger.debug('MediaStreamTrack contentHint attribute not supported');\n        }\n    },\n\n    precallTest,\n\n    /* eslint-enable max-params */\n\n    /**\n     * Represents a hub/namespace for utility functionality which may be of\n     * interest to lib-jitsi-meet clients.\n     */\n    util: {\n        AuthUtil,\n        ScriptUtil,\n        browser\n    }\n});","// @flow\n\nimport JitsiStreamPresenterEffect from './JitsiStreamPresenterEffect';\n\n/**\n * Creates a new instance of JitsiStreamPresenterEffect.\n *\n * @param {MediaStream} stream - The video stream which will be used for\n * creating the presenter effect.\n * @returns {Promise<JitsiStreamPresenterEffect>}\n */\nexport function createPresenterEffect(stream) {\n    if (!MediaStreamTrack.prototype.getSettings\n        && !MediaStreamTrack.prototype.getConstraints) {\n        return Promise.reject(new Error('JitsiStreamPresenterEffect not supported!'));\n    }\n\n    return Promise.resolve(new JitsiStreamPresenterEffect(stream));\n}\n","// @flow\n\nimport ScreenshotCaptureEffect from './ScreenshotCaptureEffect';\n\n/**\n * Creates a new instance of ScreenshotCaptureEffect.\n *\n * @param {Object | Function} stateful - The redux store, state, or\n * {@code getState} function.\n * @returns {Promise<ScreenshotCaptureEffect>}\n */\nexport function createScreenshotCaptureEffect(callback) {\n    if (!MediaStreamTrack.prototype.getSettings && !MediaStreamTrack.prototype.getConstraints) {\n        return Promise.reject(new Error('ScreenshotCaptureEffect not supported!'));\n    }\n\n    return Promise.resolve(new ScreenshotCaptureEffect(callback));\n}\n","export default {\n    error: {\n        BUSY: 'busy',\n        ERROR: 'error',\n        RESOURCE_CONSTRAINT: 'resource-constraint',\n        UNEXPECTED_REQUEST: 'unexpected-request',\n        SERVICE_UNAVAILABLE: 'service-unavailable'\n    },\n    mode: {\n        FILE: 'file',\n        STREAM: 'stream'\n    },\n    status: {\n        OFF: 'off',\n        ON: 'on',\n        PENDING: 'pending'\n    }\n};\n","export default [];\n","export default Object.getPrototypeOf;\n","import arr from \"./arr.js\";\n\nexport default arr.slice;\n","import arr from \"./arr.js\";\n\n// Support: IE 11+\n// IE doesn't have Array#flat; provide a fallback.\nexport default arr.flat ? function( array ) {\n\treturn arr.flat.call( array );\n} : function( array ) {\n\treturn arr.concat.apply( [], array );\n};\n","import arr from \"./arr.js\";\n\nexport default arr.push;\n","import arr from \"./arr.js\";\n\nexport default arr.indexOf;\n","// [[Class]] -> type pairs\nexport default {};\n","import class2type from \"./class2type.js\";\n\nexport default class2type.toString;\n","import class2type from \"./class2type.js\";\n\nexport default class2type.hasOwnProperty;\n","import hasOwn from \"./hasOwn.js\";\n\nexport default hasOwn.toString;\n","import fnToString from \"./fnToString.js\";\n\nexport default fnToString.call( Object );\n","export default window.document;\n","import document from '../var/document.js';\n\nvar preservedScriptAttributes = {\n\ttype: true,\n\tsrc: true,\n\tnonce: true,\n\tnoModule: true\n};\n\nfunction DOMEval( code, node, doc ) {\n\tdoc = doc || document;\n\n\tvar i,\n\t\tscript = doc.createElement( \"script\" );\n\n\tscript.text = code;\n\tif ( node ) {\n\t\tfor ( i in preservedScriptAttributes ) {\n\t\t\tif ( node[ i ] ) {\n\t\t\t\tscript[ i ] = node[ i ];\n\t\t\t}\n\t\t}\n\t}\n\tdoc.head.appendChild( script ).parentNode.removeChild( script );\n}\n\nexport default DOMEval;\n","import class2type from '../var/class2type.js';\nimport toString from '../var/toString.js';\n\nfunction toType( obj ) {\n\tif ( obj == null ) {\n\t\treturn obj + \"\";\n\t}\n\n\treturn typeof obj === \"object\" ?\n\t\tclass2type[ toString.call( obj ) ] || \"object\" :\n\t\ttypeof obj;\n}\n\nexport default toType;\n","import arr from \"./var/arr.js\";\nimport getProto from \"./var/getProto.js\";\nimport slice from \"./var/slice.js\";\nimport flat from \"./var/flat.js\";\nimport push from \"./var/push.js\";\nimport indexOf from \"./var/indexOf.js\";\nimport class2type from \"./var/class2type.js\";\nimport toString from \"./var/toString.js\";\nimport hasOwn from \"./var/hasOwn.js\";\nimport fnToString from \"./var/fnToString.js\";\nimport ObjectFunctionString from \"./var/ObjectFunctionString.js\";\nimport support from \"./var/support.js\";\nimport isWindow from \"./var/isWindow.js\";\nimport DOMEval from \"./core/DOMEval.js\";\nimport toType from \"./core/toType.js\";\n\nvar version = \"@VERSION\",\n\n    rhtmlSuffix = /HTML$/i,\n\n    // Define a local copy of jQuery\n    jQuery = function( selector, context ) {\n\n        // The jQuery object is actually just the init constructor 'enhanced'\n        // Need init if jQuery is called (just allow error to be thrown if not included)\n        return new jQuery.fn.init( selector, context );\n    };\n\njQuery.fn = jQuery.prototype = {\n\n    // The current version of jQuery being used\n    jquery: version,\n\n    constructor: jQuery,\n\n    // The default length of a jQuery object is 0\n    length: 0,\n\n    toArray: function() {\n        return slice.call( this );\n    },\n\n    // Get the Nth element in the matched element set OR\n    // Get the whole matched element set as a clean array\n    get: function( num ) {\n\n        // Return all the elements in a clean array\n        if ( num == null ) {\n            return slice.call( this );\n        }\n\n        // Return just the one element from the set\n        return num < 0 ? this[ num + this.length ] : this[ num ];\n    },\n\n    // Take an array of elements and push it onto the stack\n    // (returning the new matched element set)\n    pushStack: function( elems ) {\n\n        // Build a new jQuery matched element set\n        var ret = jQuery.merge( this.constructor(), elems );\n\n        // Add the old object onto the stack (as a reference)\n        ret.prevObject = this;\n\n        // Return the newly-formed element set\n        return ret;\n    },\n\n    // Execute a callback for every element in the matched set.\n    each: function( callback ) {\n        return jQuery.each( this, callback );\n    },\n\n    map: function( callback ) {\n        return this.pushStack( jQuery.map( this, function( elem, i ) {\n            return callback.call( elem, i, elem );\n        } ) );\n    },\n\n    slice: function() {\n        return this.pushStack( slice.apply( this, arguments ) );\n    },\n\n    first: function() {\n        return this.eq( 0 );\n    },\n\n    last: function() {\n        return this.eq( -1 );\n    },\n\n    even: function() {\n        return this.pushStack( jQuery.grep( this, function( _elem, i ) {\n            return ( i + 1 ) % 2;\n        } ) );\n    },\n\n    odd: function() {\n        return this.pushStack( jQuery.grep( this, function( _elem, i ) {\n            return i % 2;\n        } ) );\n    },\n\n    eq: function( i ) {\n        var len = this.length,\n            j = +i + ( i < 0 ? len : 0 );\n        return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );\n    },\n\n    end: function() {\n        return this.prevObject || this.constructor();\n    }\n};\n\njQuery.extend = jQuery.fn.extend = function() {\n    var options, name, src, copy, copyIsArray, clone,\n        target = arguments[ 0 ] || {},\n        i = 1,\n        length = arguments.length,\n        deep = false;\n\n    // Handle a deep copy situation\n    if ( typeof target === \"boolean\" ) {\n        deep = target;\n\n        // Skip the boolean and the target\n        target = arguments[ i ] || {};\n        i++;\n    }\n\n    // Handle case when target is a string or something (possible in deep copy)\n    if ( typeof target !== \"object\" && typeof target !== \"function\" ) {\n        target = {};\n    }\n\n    // Extend jQuery itself if only one argument is passed\n    if ( i === length ) {\n        target = this;\n        i--;\n    }\n\n    for ( ; i < length; i++ ) {\n\n        // Only deal with non-null/undefined values\n        if ( ( options = arguments[ i ] ) != null ) {\n\n            // Extend the base object\n            for ( name in options ) {\n                copy = options[ name ];\n\n                // Prevent Object.prototype pollution\n                // Prevent never-ending loop\n                if ( name === \"__proto__\" || target === copy ) {\n                    continue;\n                }\n\n                // Recurse if we're merging plain objects or arrays\n                if ( deep && copy && ( jQuery.isPlainObject( copy ) ||\n                    ( copyIsArray = Array.isArray( copy ) ) ) ) {\n                    src = target[ name ];\n\n                    // Ensure proper type for the source value\n                    if ( copyIsArray && !Array.isArray( src ) ) {\n                        clone = [];\n                    } else if ( !copyIsArray && !jQuery.isPlainObject( src ) ) {\n                        clone = {};\n                    } else {\n                        clone = src;\n                    }\n                    copyIsArray = false;\n\n                    // Never move original objects, clone them\n                    target[ name ] = jQuery.extend( deep, clone, copy );\n\n                // Don't bring in undefined values\n                } else if ( copy !== undefined ) {\n                    target[ name ] = copy;\n                }\n            }\n        }\n    }\n\n    // Return the modified object\n    return target;\n};\n\njQuery.extend( {\n\n    // Unique for each copy of jQuery on the page\n    expando: \"jQuery\" + ( version + Math.random() ).replace( /\\D/g, \"\" ),\n\n    // Assume jQuery is ready without the ready module\n    isReady: true,\n\n    error: function( msg ) {\n        throw new Error( msg );\n    },\n\n    noop: function() {},\n\n    isPlainObject: function( obj ) {\n        var proto, Ctor;\n\n        // Detect obvious negatives\n        // Use toString instead of jQuery.type to catch host objects\n        if ( !obj || toString.call( obj ) !== \"[object Object]\" ) {\n            return false;\n        }\n\n        proto = getProto( obj );\n\n        // Objects with no prototype (e.g., `Object.create( null )`) are plain\n        if ( !proto ) {\n            return true;\n        }\n\n        // Objects with prototype are plain iff they were constructed by a global Object function\n        Ctor = hasOwn.call( proto, \"constructor\" ) && proto.constructor;\n        return typeof Ctor === \"function\" && fnToString.call( Ctor ) === ObjectFunctionString;\n    },\n\n    isEmptyObject: function( obj ) {\n        var name;\n\n        for ( name in obj ) {\n            return false;\n        }\n        return true;\n    },\n\n    // Evaluates a script in a provided context; falls back to the global one\n    // if not specified.\n    globalEval: function( code, options, doc ) {\n        DOMEval( code, { nonce: options && options.nonce }, doc );\n    },\n\n    each: function( obj, callback ) {\n        var length, i = 0;\n\n        if ( isArrayLike( obj ) ) {\n            length = obj.length;\n            for ( ; i < length; i++ ) {\n                if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\n                    break;\n                }\n            }\n        } else {\n            for ( i in obj ) {\n                if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\n                    break;\n                }\n            }\n        }\n\n        return obj;\n    },\n\n\n    // Retrieve the text value of an array of DOM nodes\n    text: function( elem ) {\n        var node,\n            ret = \"\",\n            i = 0,\n            nodeType = elem.nodeType;\n\n        if ( !nodeType ) {\n\n            // If no nodeType, this is expected to be an array\n            while ( ( node = elem[ i++ ] ) ) {\n\n                // Do not traverse comment nodes\n                ret += jQuery.text( node );\n            }\n        } else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {\n            return elem.textContent;\n        } else if ( nodeType === 3 || nodeType === 4 ) {\n            return elem.nodeValue;\n        }\n\n        // Do not include comment or processing instruction nodes\n\n        return ret;\n    },\n\n\n    // results is for internal usage only\n    makeArray: function( arr, results ) {\n        var ret = results || [];\n\n        if ( arr != null ) {\n            if ( isArrayLike( Object( arr ) ) ) {\n                jQuery.merge( ret,\n                    typeof arr === \"string\" ?\n                        [ arr ] : arr\n                );\n            } else {\n                push.call( ret, arr );\n            }\n        }\n\n        return ret;\n    },\n\n    inArray: function( elem, arr, i ) {\n        return arr == null ? -1 : indexOf.call( arr, elem, i );\n    },\n\n    isXMLDoc: function( elem ) {\n        var namespace = elem.namespaceURI,\n            docElem = ( elem.ownerDocument || elem ).documentElement;\n\n        // Assume HTML when documentElement doesn't yet exist, such as inside\n        // document fragments.\n        return !rhtmlSuffix.test( namespace || docElem && docElem.nodeName || \"HTML\" );\n    },\n\n    merge: function( first, second ) {\n        var len = +second.length,\n            j = 0,\n            i = first.length;\n\n        for ( ; j < len; j++ ) {\n            first[ i++ ] = second[ j ];\n        }\n\n        first.length = i;\n\n        return first;\n    },\n\n    grep: function( elems, callback, invert ) {\n        var callbackInverse,\n            matches = [],\n            i = 0,\n            length = elems.length,\n            callbackExpect = !invert;\n\n        // Go through the array, only saving the items\n        // that pass the validator function\n        for ( ; i < length; i++ ) {\n            callbackInverse = !callback( elems[ i ], i );\n            if ( callbackInverse !== callbackExpect ) {\n                matches.push( elems[ i ] );\n            }\n        }\n\n        return matches;\n    },\n\n    // arg is for internal usage only\n    map: function( elems, callback, arg ) {\n        var length, value,\n            i = 0,\n            ret = [];\n\n        // Go through the array, translating each of the items to their new values\n        if ( isArrayLike( elems ) ) {\n            length = elems.length;\n            for ( ; i < length; i++ ) {\n                value = callback( elems[ i ], i, arg );\n\n                if ( value != null ) {\n                    ret.push( value );\n                }\n            }\n\n        // Go through every key on the object,\n        } else {\n            for ( i in elems ) {\n                value = callback( elems[ i ], i, arg );\n\n                if ( value != null ) {\n                    ret.push( value );\n                }\n            }\n        }\n\n        // Flatten any nested arrays\n        return flat( ret );\n    },\n\n    // A global GUID counter for objects\n    guid: 1,\n\n    // jQuery.support is not used in Core but other projects attach their\n    // properties to it so it needs to exist.\n    support: support\n} );\n\nif ( typeof Symbol === \"function\" ) {\n    jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];\n}\n\n// Populate the class2type map\njQuery.each( \"Boolean Number String Function Array Date RegExp Object Error Symbol\".split( \" \" ),\n    function( _i, name ) {\n        class2type[ \"[object \" + name + \"]\" ] = name.toLowerCase();\n    } );\n\nfunction isArrayLike( obj ) {\n\n    var length = !!obj && obj.length,\n        type = toType( obj );\n\n    if ( typeof obj === \"function\" || isWindow( obj ) ) {\n        return false;\n    }\n\n    return type === \"array\" || length === 0 ||\n        typeof length === \"number\" && length > 0 && ( length - 1 ) in obj;\n}\n\nexport default jQuery;\n","export default function isWindow( obj ) {\n\treturn obj != null && obj === obj.window;\n}\n","// All support tests are defined in their respective modules.\nexport default {};\n","function nodeName( elem, name ) {\n\n\treturn elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();\n\n}\n\nexport default nodeName;\n","import document from \"./document.js\";\n\nexport default document.documentElement;\n","import arr from \"./arr.js\";\n\nexport default arr.pop;\n","// https://www.w3.org/TR/css3-selectors/#whitespace\nexport default \"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\";\n","import document from \"./document.js\";\n\nexport default document.documentMode;\n","import isIE from '../var/isIE.js';\nimport whitespace from \"./var/whitespace.js\";\n\nvar rbuggyQSA = isIE && new RegExp(\n\n\t// Support: IE 9 - 11+\n\t// IE's :disabled selector does not pick up the children of disabled fieldsets\n\t\":enabled|:disabled|\" +\n\n\t// Support: IE 11+\n\t// IE 11 doesn't find elements on a `[name='']` query in some cases.\n\t// Adding a temporary attribute to the document before the selection works\n\t// around the issue.\n\t\"\\\\[\" + whitespace + \"*name\" + whitespace + \"*=\" +\n\t\twhitespace + \"*(?:''|\\\"\\\")\"\n\n);\n\nexport default rbuggyQSA;\n","import jQuery from '../core.js';\n\n// Note: an element does not contain itself\njQuery.contains = function( a, b ) {\n\tvar adown = a.nodeType === 9 ? a.documentElement : a,\n\t\tbup = b && b.parentNode;\n\n\treturn a === bup || !!( bup && bup.nodeType === 1 && (\n\n\t\t// Support: IE 9 - 11+\n\t\t// IE doesn't have `contains` on SVG.\n\t\tadown.contains ?\n\t\t\tadown.contains( bup ) :\n\t\t\ta.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16\n\t) );\n};\n","import jQuery from '../core.js';\n\n// CSS string/identifier serialization\n// https://drafts.csswg.org/cssom/#common-serializing-idioms\nvar rcssescape = /([\\0-\\x1f\\x7f]|^-?\\d)|^-$|[^\\x80-\\uFFFF\\w-]/g;\n\nfunction fcssescape( ch, asCodePoint ) {\n\tif ( asCodePoint ) {\n\n\t\t// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER\n\t\tif ( ch === \"\\0\" ) {\n\t\t\treturn \"\\uFFFD\";\n\t\t}\n\n\t\t// Control characters and (dependent upon position) numbers get escaped as code points\n\t\treturn ch.slice( 0, -1 ) + \"\\\\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + \" \";\n\t}\n\n\t// Other potentially-special ASCII characters get backslash-escaped\n\treturn \"\\\\\" + ch;\n}\n\njQuery.escapeSelector = function( sel ) {\n\treturn ( sel + \"\" ).replace( rcssescape, fcssescape );\n};\n","import arr from \"./arr.js\";\n\nexport default arr.sort;\n","import jQuery from '../core.js';\nimport document from '../var/document.js';\nimport sort from '../var/sort.js';\n\nlet hasDuplicate;\n\n// Document order sorting\nfunction sortOrder(a, b) {\n\n    // Flag for duplicate removal\n    if (a === b) {\n        hasDuplicate = true;\n\n        return 0;\n    }\n\n    // Sort on method existence if only one input has compareDocumentPosition\n    let compare = !a.compareDocumentPosition - !b.compareDocumentPosition;\n\n    if (compare) {\n        return compare;\n    }\n\n    // Calculate position if both inputs belong to the same document\n    // Support: IE 11+\n    // IE sometimes throws a \"Permission denied\" error when strict-comparing\n    // two documents; shallow comparisons work.\n    // eslint-disable-next-line eqeqeq\n    compare = (a.ownerDocument || a) == (b.ownerDocument || b)\n        ? a.compareDocumentPosition(b)\n\n    // Otherwise we know they are disconnected\n        : 1;\n\n    // Disconnected nodes\n    if (compare & 1) {\n\n        // Choose the first element that is related to the document\n        // Support: IE 11+\n        // IE sometimes throws a \"Permission denied\" error when strict-comparing\n        // two documents; shallow comparisons work.\n        // eslint-disable-next-line eqeqeq\n        if (a == document || a.ownerDocument == document\n\t\t\t&& jQuery.contains(document, a)) {\n            return -1;\n        }\n\n        // Support: IE 11+\n        // IE sometimes throws a \"Permission denied\" error when strict-comparing\n        // two documents; shallow comparisons work.\n        // eslint-disable-next-line eqeqeq\n        if (b == document || b.ownerDocument == document\n\t\t\t&& jQuery.contains(document, b)) {\n            return 1;\n        }\n\n        // Maintain original order\n        return 0;\n    }\n\n    return compare & 4 ? -1 : 1;\n}\n\n/**\n * Document sorting and removing duplicates\n * @param {ArrayLike} results\n */\njQuery.uniqueSort = function(results) {\n    let elem,\n        duplicates = [],\n        j = 0,\n        i = 0;\n\n    hasDuplicate = false;\n\n    sort.call(results, sortOrder);\n\n    if (hasDuplicate) {\n        while (elem = results[i++]) {\n            if (elem === results[i]) {\n                j = duplicates.push(i);\n            }\n        }\n        while (j--) {\n            results.splice(duplicates[j], 1);\n        }\n    }\n\n    return results;\n};\n","import jQuery from \"./core.js\";\nimport nodeName from \"./core/nodeName.js\";\nimport document from \"./var/document.js\";\nimport documentElement from \"./var/documentElement.js\";\nimport indexOf from \"./var/indexOf.js\";\nimport pop from \"./var/pop.js\";\nimport push from \"./var/push.js\";\nimport whitespace from \"./selector/var/whitespace.js\";\nimport rbuggyQSA from \"./selector/rbuggyQSA.js\";\nimport isIE from \"./var/isIE.js\";\n\n// The following utils are attached directly to the jQuery object.\nimport \"./selector/contains.js\";\nimport \"./selector/escapeSelector.js\";\nimport \"./selector/uniqueSort.js\";\n\nvar preferredDoc = document,\n    matches = documentElement.matches || documentElement.msMatchesSelector;\n\n( function() {\n\nvar i,\n    Expr,\n    outermostContext,\n\n    // Local document vars\n    document,\n    documentElement,\n    documentIsHTML,\n\n    // Instance-specific data\n    expando = jQuery.expando,\n    dirruns = 0,\n    done = 0,\n    classCache = createCache(),\n    tokenCache = createCache(),\n    compilerCache = createCache(),\n    nonnativeSelectorCache = createCache(),\n\n    booleans = \"checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|\" +\n        \"loop|multiple|open|readonly|required|scoped\",\n\n    // Regular expressions\n\n    // https://www.w3.org/TR/css-syntax-3/#ident-token-diagram\n    identifier = \"(?:\\\\\\\\[\\\\da-fA-F]{1,6}\" + whitespace +\n        \"?|\\\\\\\\[^\\\\r\\\\n\\\\f]|[\\\\w-]|[^\\0-\\\\x7f])+\",\n\n    // Attribute selectors: https://www.w3.org/TR/selectors/#attribute-selectors\n    attributes = \"\\\\[\" + whitespace + \"*(\" + identifier + \")(?:\" + whitespace +\n\n        // Operator (capture 2)\n        \"*([*^$|!~]?=)\" + whitespace +\n\n        // \"Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]\"\n        \"*(?:'((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\"|(\" + identifier + \"))|)\" +\n        whitespace + \"*\\\\]\",\n\n    pseudos = \":(\" + identifier + \")(?:\\\\((\" +\n\n        // To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:\n        // 1. quoted (capture 3; capture 4 or capture 5)\n        \"('((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\")|\" +\n\n        // 2. simple (capture 6)\n        \"((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|\" + attributes + \")*)|\" +\n\n        // 3. anything else (capture 2)\n        \".*\" +\n        \")\\\\)|)\",\n\n    // Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter\n    rwhitespace = new RegExp( whitespace + \"+\", \"g\" ),\n    rtrim = new RegExp( \"^\" + whitespace + \"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\" + whitespace + \"+$\", \"g\" ),\n\n    rcomma = new RegExp( \"^\" + whitespace + \"*,\" + whitespace + \"*\" ),\n    rcombinators = new RegExp( \"^\" + whitespace + \"*([>+~]|\" + whitespace + \")\" +\n        whitespace + \"*\" ),\n    rdescend = new RegExp( whitespace + \"|>\" ),\n\n    rpseudo = new RegExp( pseudos ),\n    ridentifier = new RegExp( \"^\" + identifier + \"$\" ),\n\n    matchExpr = {\n        ID: new RegExp( \"^#(\" + identifier + \")\" ),\n        CLASS: new RegExp( \"^\\\\.(\" + identifier + \")\" ),\n        TAG: new RegExp( \"^(\" + identifier + \"|[*])\" ),\n        ATTR: new RegExp( \"^\" + attributes ),\n        PSEUDO: new RegExp( \"^\" + pseudos ),\n        CHILD: new RegExp(\n            \"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(\" +\n                whitespace + \"*(even|odd|(([+-]|)(\\\\d*)n|)\" + whitespace + \"*(?:([+-]|)\" +\n                whitespace + \"*(\\\\d+)|))\" + whitespace + \"*\\\\)|)\", \"i\" ),\n        bool: new RegExp( \"^(?:\" + booleans + \")$\", \"i\" ),\n\n        // For use in libraries implementing .is()\n        // We use this for POS matching in `select`\n        needsContext: new RegExp( \"^\" + whitespace +\n            \"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\" + whitespace +\n            \"*((?:-\\\\d)?\\\\d*)\" + whitespace + \"*\\\\)|)(?=[^-]|$)\", \"i\" )\n    },\n\n    rinputs = /^(?:input|select|textarea|button)$/i,\n    rheader = /^h\\d$/i,\n\n    // Easily-parseable/retrievable ID or TAG or CLASS selectors\n    rquickExpr = /^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,\n\n    rsibling = /[+~]/,\n\n    // CSS escapes\n    // https://www.w3.org/TR/CSS21/syndata.html#escaped-characters\n    runescape = new RegExp( \"\\\\\\\\[\\\\da-fA-F]{1,6}\" + whitespace +\n        \"?|\\\\\\\\([^\\\\r\\\\n\\\\f])\", \"g\" ),\n    funescape = function( escape, nonHex ) {\n        var high = \"0x\" + escape.slice( 1 ) - 0x10000;\n\n        if ( nonHex ) {\n\n            // Strip the backslash prefix from a non-hex escape sequence\n            return nonHex;\n        }\n\n        // Replace a hexadecimal escape sequence with the encoded Unicode code point\n        // Support: IE <=11+\n        // For values outside the Basic Multilingual Plane (BMP), manually construct a\n        // surrogate pair\n        return high < 0 ?\n            String.fromCharCode( high + 0x10000 ) :\n            String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );\n    },\n\n    // Used for iframes; see `setDocument`.\n    // Support: IE 9 - 11+\n    // Removing the function wrapper causes a \"Permission Denied\"\n    // error in IE.\n    unloadHandler = function() {\n        setDocument();\n    },\n\n    inDisabledFieldset = addCombinator(\n        function( elem ) {\n            return elem.disabled === true && nodeName( elem, \"fieldset\" );\n        },\n        { dir: \"parentNode\", next: \"legend\" }\n    );\n\nfunction selectorError( msg ) {\n    throw new Error( \"Syntax error, unrecognized expression: \" + msg );\n}\n\nfunction find( selector, context, results, seed ) {\n    var m, i, elem, nid, match, groups, newSelector,\n        newContext = context && context.ownerDocument,\n\n        // nodeType defaults to 9, since context defaults to document\n        nodeType = context ? context.nodeType : 9;\n\n    results = results || [];\n\n    // Return early from calls with invalid selector or context\n    if ( typeof selector !== \"string\" || !selector ||\n        nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {\n\n        return results;\n    }\n\n    // Try to shortcut find operations (as opposed to filters) in HTML documents\n    if ( !seed ) {\n        setDocument( context );\n        context = context || document;\n\n        if ( documentIsHTML ) {\n\n            // If the selector is sufficiently simple, try using a \"get*By*\" DOM method\n            // (excepting DocumentFragment context, where the methods don't exist)\n            if ( nodeType !== 11 && ( match = rquickExpr.exec( selector ) ) ) {\n\n                // ID selector\n                if ( ( m = match[ 1 ] ) ) {\n\n                    // Document context\n                    if ( nodeType === 9 ) {\n                        if ( ( elem = context.getElementById( m ) ) ) {\n                            push.call( results, elem );\n                        }\n                        return results;\n\n                    // Element context\n                    } else {\n                        if ( newContext && ( elem = newContext.getElementById( m ) ) &&\n                            jQuery.contains( context, elem ) ) {\n\n                            push.call( results, elem );\n                            return results;\n                        }\n                    }\n\n                // Type selector\n                } else if ( match[ 2 ] ) {\n                    push.apply( results, context.getElementsByTagName( selector ) );\n                    return results;\n\n                // Class selector\n                } else if ( ( m = match[ 3 ] ) && context.getElementsByClassName ) {\n                    push.apply( results, context.getElementsByClassName( m ) );\n                    return results;\n                }\n            }\n\n            // Take advantage of querySelectorAll\n            if ( !nonnativeSelectorCache[ selector + \" \" ] &&\n                ( !rbuggyQSA || !rbuggyQSA.test( selector ) ) ) {\n\n                newSelector = selector;\n                newContext = context;\n\n                // qSA considers elements outside a scoping root when evaluating child or\n                // descendant combinators, which is not what we want.\n                // In such cases, we work around the behavior by prefixing every selector in the\n                // list with an ID selector referencing the scope context.\n                // The technique has to be used as well when a leading combinator is used\n                // as such selectors are not recognized by querySelectorAll.\n                // Thanks to Andrew Dupont for this technique.\n                if ( nodeType === 1 &&\n                    ( rdescend.test( selector ) || rcombinators.test( selector ) ) ) {\n\n                    // Expand context for sibling selectors\n                    newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||\n                        context;\n\n                    // Outside of IE, if we're not changing the context we can\n                    // use :scope instead of an ID.\n                    if ( newContext !== context || isIE ) {\n\n                        // Capture the context ID, setting it first if necessary\n                        if ( ( nid = context.getAttribute( \"id\" ) ) ) {\n                            nid = jQuery.escapeSelector( nid );\n                        } else {\n                            context.setAttribute( \"id\", ( nid = expando ) );\n                        }\n                    }\n\n                    // Prefix every selector in the list\n                    groups = tokenize( selector );\n                    i = groups.length;\n                    while ( i-- ) {\n                        groups[ i ] = ( nid ? \"#\" + nid : \":scope\" ) + \" \" +\n                            toSelector( groups[ i ] );\n                    }\n                    newSelector = groups.join( \",\" );\n                }\n\n                try {\n                    push.apply( results,\n                        newContext.querySelectorAll( newSelector )\n                    );\n                    return results;\n                } catch ( qsaError ) {\n                    nonnativeSelectorCache( selector, true );\n                } finally {\n                    if ( nid === expando ) {\n                        context.removeAttribute( \"id\" );\n                    }\n                }\n            }\n        }\n    }\n\n    // All others\n    return select( selector.replace( rtrim, \"$1\" ), context, results, seed );\n}\n\n/**\n * Create key-value caches of limited size\n * @returns {function(string, object)} Returns the Object data after storing it on itself with\n *  property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)\n *  deleting the oldest entry\n */\nfunction createCache() {\n    var keys = [];\n\n    function cache( key, value ) {\n\n        // Use (key + \" \") to avoid collision with native prototype properties (see Issue #157)\n        if ( keys.push( key + \" \" ) > Expr.cacheLength ) {\n\n            // Only keep the most recent entries\n            delete cache[ keys.shift() ];\n        }\n        return ( cache[ key + \" \" ] = value );\n    }\n    return cache;\n}\n\n/**\n * Mark a function for special use by jQuery selector module\n * @param {Function} fn The function to mark\n */\nfunction markFunction( fn ) {\n    fn[ expando ] = true;\n    return fn;\n}\n\n/**\n * Returns a function to use in pseudos for input types\n * @param {String} type\n */\nfunction createInputPseudo( type ) {\n    return function( elem ) {\n        return nodeName( elem, \"input\" ) && elem.type === type;\n    };\n}\n\n/**\n * Returns a function to use in pseudos for buttons\n * @param {String} type\n */\nfunction createButtonPseudo( type ) {\n    return function( elem ) {\n        return ( nodeName( elem, \"input\" ) || nodeName( elem, \"button\" ) ) &&\n            elem.type === type;\n    };\n}\n\n/**\n * Returns a function to use in pseudos for :enabled/:disabled\n * @param {Boolean} disabled true for :disabled; false for :enabled\n */\nfunction createDisabledPseudo( disabled ) {\n\n    // Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable\n    return function( elem ) {\n\n        // Only certain elements can match :enabled or :disabled\n        // https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled\n        // https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled\n        if ( \"form\" in elem ) {\n\n            // Check for inherited disabledness on relevant non-disabled elements:\n            // * listed form-associated elements in a disabled fieldset\n            //   https://html.spec.whatwg.org/multipage/forms.html#category-listed\n            //   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled\n            // * option elements in a disabled optgroup\n            //   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled\n            // All such elements have a \"form\" property.\n            if ( elem.parentNode && elem.disabled === false ) {\n\n                // Option elements defer to a parent optgroup if present\n                if ( \"label\" in elem ) {\n                    if ( \"label\" in elem.parentNode ) {\n                        return elem.parentNode.disabled === disabled;\n                    } else {\n                        return elem.disabled === disabled;\n                    }\n                }\n\n                // Support: IE 6 - 11+\n                // Use the isDisabled shortcut property to check for disabled fieldset ancestors\n                return elem.isDisabled === disabled ||\n\n                    // Where there is no isDisabled, check manually\n                    elem.isDisabled !== !disabled &&\n                        inDisabledFieldset( elem ) === disabled;\n            }\n\n            return elem.disabled === disabled;\n\n        // Try to winnow out elements that can't be disabled before trusting the disabled property.\n        // Some victims get caught in our net (label, legend, menu, track), but it shouldn't\n        // even exist on them, let alone have a boolean value.\n        } else if ( \"label\" in elem ) {\n            return elem.disabled === disabled;\n        }\n\n        // Remaining elements are neither :enabled nor :disabled\n        return false;\n    };\n}\n\n/**\n * Returns a function to use in pseudos for positionals\n * @param {Function} fn\n */\nfunction createPositionalPseudo( fn ) {\n    return markFunction( function( argument ) {\n        argument = +argument;\n        return markFunction( function( seed, matches ) {\n            var j,\n                matchIndexes = fn( [], seed.length, argument ),\n                i = matchIndexes.length;\n\n            // Match elements found at the specified indexes\n            while ( i-- ) {\n                if ( seed[ ( j = matchIndexes[ i ] ) ] ) {\n                    seed[ j ] = !( matches[ j ] = seed[ j ] );\n                }\n            }\n        } );\n    } );\n}\n\n/**\n * Checks a node for validity as a jQuery selector context\n * @param {Element|Object=} context\n * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value\n */\nfunction testContext( context ) {\n    return context && typeof context.getElementsByTagName !== \"undefined\" && context;\n}\n\n/**\n * Sets document-related variables once based on the current document\n * @param {Element|Object} [node] An element or document object to use to set the document\n */\nfunction setDocument( node ) {\n    var subWindow,\n        doc = node ? node.ownerDocument || node : preferredDoc;\n\n    // Return early if doc is invalid or already selected\n    // Support: IE 11+\n    // IE sometimes throws a \"Permission denied\" error when strict-comparing\n    // two documents; shallow comparisons work.\n    // eslint-disable-next-line eqeqeq\n    if ( doc == document || doc.nodeType !== 9 ) {\n        return;\n    }\n\n    // Update global variables\n    document = doc;\n    documentElement = document.documentElement;\n    documentIsHTML = !jQuery.isXMLDoc( document );\n\n    // Support: IE 9 - 11+\n    // Accessing iframe documents after unload throws \"permission denied\" errors (jQuery #13936)\n    // Support: IE 11+\n    // IE sometimes throws a \"Permission denied\" error when strict-comparing\n    // two documents; shallow comparisons work.\n    // eslint-disable-next-line eqeqeq\n    if ( isIE && preferredDoc != document &&\n        ( subWindow = document.defaultView ) && subWindow.top !== subWindow ) {\n        subWindow.addEventListener( \"unload\", unloadHandler );\n    }\n}\n\nfind.matches = function( expr, elements ) {\n    return find( expr, null, null, elements );\n};\n\nfind.matchesSelector = function( elem, expr ) {\n    setDocument( elem );\n\n    if ( documentIsHTML &&\n        !nonnativeSelectorCache[ expr + \" \" ] &&\n        ( !rbuggyQSA || !rbuggyQSA.test( expr ) ) ) {\n\n        try {\n            return matches.call( elem, expr );\n        } catch ( e ) {\n            nonnativeSelectorCache( expr, true );\n        }\n    }\n\n    return find( expr, document, null, [ elem ] ).length > 0;\n};\n\nExpr = jQuery.expr = {\n\n    // Can be adjusted by the user\n    cacheLength: 50,\n\n    createPseudo: markFunction,\n\n    match: matchExpr,\n\n    find: {\n        ID: function( id, context ) {\n            if ( typeof context.getElementById !== \"undefined\" && documentIsHTML ) {\n                var elem = context.getElementById( id );\n                return elem ? [ elem ] : [];\n            }\n        },\n\n        TAG: function( tag, context ) {\n            if ( typeof context.getElementsByTagName !== \"undefined\" ) {\n                return context.getElementsByTagName( tag );\n\n                // DocumentFragment nodes don't have gEBTN\n            } else {\n                return context.querySelectorAll( tag );\n            }\n        },\n\n        CLASS: function( className, context ) {\n            if ( typeof context.getElementsByClassName !== \"undefined\" && documentIsHTML ) {\n                return context.getElementsByClassName( className );\n            }\n        }\n    },\n\n    relative: {\n        \">\": { dir: \"parentNode\", first: true },\n        \" \": { dir: \"parentNode\" },\n        \"+\": { dir: \"previousSibling\", first: true },\n        \"~\": { dir: \"previousSibling\" }\n    },\n\n    preFilter: {\n        ATTR: function( match ) {\n            match[ 1 ] = match[ 1 ].replace( runescape, funescape );\n\n            // Move the given value to match[3] whether quoted or unquoted\n            match[ 3 ] = ( match[ 3 ] || match[ 4 ] || match[ 5 ] || \"\" )\n                .replace( runescape, funescape );\n\n            if ( match[ 2 ] === \"~=\" ) {\n                match[ 3 ] = \" \" + match[ 3 ] + \" \";\n            }\n\n            return match.slice( 0, 4 );\n        },\n\n        CHILD: function( match ) {\n\n            /* matches from matchExpr[\"CHILD\"]\n                1 type (only|nth|...)\n                2 what (child|of-type)\n                3 argument (even|odd|\\d*|\\d*n([+-]\\d+)?|...)\n                4 xn-component of xn+y argument ([+-]?\\d*n|)\n                5 sign of xn-component\n                6 x of xn-component\n                7 sign of y-component\n                8 y of y-component\n            */\n            match[ 1 ] = match[ 1 ].toLowerCase();\n\n            if ( match[ 1 ].slice( 0, 3 ) === \"nth\" ) {\n\n                // nth-* requires argument\n                if ( !match[ 3 ] ) {\n                    selectorError( match[ 0 ] );\n                }\n\n                // numeric x and y parameters for Expr.filter.CHILD\n                // remember that false/true cast respectively to 0/1\n                match[ 4 ] = +( match[ 4 ] ?\n                    match[ 5 ] + ( match[ 6 ] || 1 ) :\n                    2 * ( match[ 3 ] === \"even\" || match[ 3 ] === \"odd\" )\n                );\n                match[ 5 ] = +( ( match[ 7 ] + match[ 8 ] ) || match[ 3 ] === \"odd\" );\n\n            // other types prohibit arguments\n            } else if ( match[ 3 ] ) {\n                selectorError( match[ 0 ] );\n            }\n\n            return match;\n        },\n\n        PSEUDO: function( match ) {\n            var excess,\n                unquoted = !match[ 6 ] && match[ 2 ];\n\n            if ( matchExpr.CHILD.test( match[ 0 ] ) ) {\n                return null;\n            }\n\n            // Accept quoted arguments as-is\n            if ( match[ 3 ] ) {\n                match[ 2 ] = match[ 4 ] || match[ 5 ] || \"\";\n\n            // Strip excess characters from unquoted arguments\n            } else if ( unquoted && rpseudo.test( unquoted ) &&\n\n                // Get excess from tokenize (recursively)\n                ( excess = tokenize( unquoted, true ) ) &&\n\n                // advance to the next closing parenthesis\n                ( excess = unquoted.indexOf( \")\", unquoted.length - excess ) - unquoted.length ) ) {\n\n                // excess is a negative index\n                match[ 0 ] = match[ 0 ].slice( 0, excess );\n                match[ 2 ] = unquoted.slice( 0, excess );\n            }\n\n            // Return only captures needed by the pseudo filter method (type and argument)\n            return match.slice( 0, 3 );\n        }\n    },\n\n    filter: {\n        ID: function( id ) {\n            var attrId = id.replace( runescape, funescape );\n            return function( elem ) {\n                return elem.getAttribute( \"id\" ) === attrId;\n            };\n        },\n\n        TAG: function( nodeNameSelector ) {\n            var expectedNodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();\n            return nodeNameSelector === \"*\" ?\n\n                function() {\n                    return true;\n                } :\n\n                function( elem ) {\n                    return nodeName( elem, expectedNodeName );\n                };\n        },\n\n        CLASS: function( className ) {\n            var pattern = classCache[ className + \" \" ];\n\n            return pattern ||\n                ( pattern = new RegExp( \"(^|\" + whitespace + \")\" + className +\n                    \"(\" + whitespace + \"|$)\" ) ) &&\n                classCache( className, function( elem ) {\n                    return pattern.test(\n                        typeof elem.className === \"string\" && elem.className ||\n                            typeof elem.getAttribute !== \"undefined\" &&\n                                elem.getAttribute( \"class\" ) ||\n                            \"\"\n                    );\n                } );\n        },\n\n        ATTR: function( name, operator, check ) {\n            return function( elem ) {\n                var result = jQuery.attr( elem, name );\n\n                if ( result == null ) {\n                    return operator === \"!=\";\n                }\n                if ( !operator ) {\n                    return true;\n                }\n\n                result += \"\";\n\n                if ( operator === \"=\" ) {\n                    return result === check;\n                }\n                if ( operator === \"!=\" ) {\n                    return result !== check;\n                }\n                if ( operator === \"^=\" ) {\n                    return check && result.indexOf( check ) === 0;\n                }\n                if ( operator === \"*=\" ) {\n                    return check && result.indexOf( check ) > -1;\n                }\n                if ( operator === \"$=\" ) {\n                    return check && result.slice( -check.length ) === check;\n                }\n                if ( operator === \"~=\" ) {\n                    return ( \" \" + result.replace( rwhitespace, \" \" ) + \" \" )\n                        .indexOf( check ) > -1;\n                }\n                if ( operator === \"|=\" ) {\n                    return result === check || result.slice( 0, check.length + 1 ) === check + \"-\";\n                }\n\n                return false;\n            };\n        },\n\n        CHILD: function( type, what, _argument, first, last ) {\n            var simple = type.slice( 0, 3 ) !== \"nth\",\n                forward = type.slice( -4 ) !== \"last\",\n                ofType = what === \"of-type\";\n\n            return first === 1 && last === 0 ?\n\n                // Shortcut for :nth-*(n)\n                function( elem ) {\n                    return !!elem.parentNode;\n                } :\n\n                function( elem, _context, xml ) {\n                    var cache, outerCache, node, nodeIndex, start,\n                        dir = simple !== forward ? \"nextSibling\" : \"previousSibling\",\n                        parent = elem.parentNode,\n                        name = ofType && elem.nodeName.toLowerCase(),\n                        useCache = !xml && !ofType,\n                        diff = false;\n\n                    if ( parent ) {\n\n                        // :(first|last|only)-(child|of-type)\n                        if ( simple ) {\n                            while ( dir ) {\n                                node = elem;\n                                while ( ( node = node[ dir ] ) ) {\n                                    if ( ofType ?\n                                        nodeName( node, name ) :\n                                        node.nodeType === 1 ) {\n\n                                        return false;\n                                    }\n                                }\n\n                                // Reverse direction for :only-* (if we haven't yet done so)\n                                start = dir = type === \"only\" && !start && \"nextSibling\";\n                            }\n                            return true;\n                        }\n\n                        start = [ forward ? parent.firstChild : parent.lastChild ];\n\n                        // non-xml :nth-child(...) stores cache data on `parent`\n                        if ( forward && useCache ) {\n\n                            // Seek `elem` from a previously-cached index\n                            outerCache = parent[ expando ] || ( parent[ expando ] = {} );\n                            cache = outerCache[ type ] || [];\n                            nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];\n                            diff = nodeIndex && cache[ 2 ];\n                            node = nodeIndex && parent.childNodes[ nodeIndex ];\n\n                            while ( ( node = ++nodeIndex && node && node[ dir ] ||\n\n                                // Fallback to seeking `elem` from the start\n                                ( diff = nodeIndex = 0 ) || start.pop() ) ) {\n\n                                // When found, cache indexes on `parent` and break\n                                if ( node.nodeType === 1 && ++diff && node === elem ) {\n                                    outerCache[ type ] = [ dirruns, nodeIndex, diff ];\n                                    break;\n                                }\n                            }\n\n                        } else {\n\n                            // Use previously-cached element index if available\n                            if ( useCache ) {\n                                outerCache = elem[ expando ] || ( elem[ expando ] = {} );\n                                cache = outerCache[ type ] || [];\n                                nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];\n                                diff = nodeIndex;\n                            }\n\n                            // xml :nth-child(...)\n                            // or :nth-last-child(...) or :nth(-last)?-of-type(...)\n                            if ( diff === false ) {\n\n                                // Use the same loop as above to seek `elem` from the start\n                                while ( ( node = ++nodeIndex && node && node[ dir ] ||\n                                    ( diff = nodeIndex = 0 ) || start.pop() ) ) {\n\n                                    if ( ( ofType ?\n                                        nodeName( node, name ) :\n                                        node.nodeType === 1 ) &&\n                                        ++diff ) {\n\n                                        // Cache the index of each encountered element\n                                        if ( useCache ) {\n                                            outerCache = node[ expando ] ||\n                                                ( node[ expando ] = {} );\n                                            outerCache[ type ] = [ dirruns, diff ];\n                                        }\n\n                                        if ( node === elem ) {\n                                            break;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n\n                        // Incorporate the offset, then check against cycle size\n                        diff -= last;\n                        return diff === first || ( diff % first === 0 && diff / first >= 0 );\n                    }\n                };\n        },\n\n        PSEUDO: function( pseudo, argument ) {\n\n            // pseudo-class names are case-insensitive\n            // https://www.w3.org/TR/selectors/#pseudo-classes\n            // Prioritize by case sensitivity in case custom pseudos are added with uppercase letters\n            // Remember that setFilters inherits from pseudos\n            var args,\n                fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||\n                    selectorError( \"unsupported pseudo: \" + pseudo );\n\n            // The user may use createPseudo to indicate that\n            // arguments are needed to create the filter function\n            // just as jQuery does\n            if ( fn[ expando ] ) {\n                return fn( argument );\n            }\n\n            // But maintain support for old signatures\n            if ( fn.length > 1 ) {\n                args = [ pseudo, pseudo, \"\", argument ];\n                return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?\n                    markFunction( function( seed, matches ) {\n                        var idx,\n                            matched = fn( seed, argument ),\n                            i = matched.length;\n                        while ( i-- ) {\n                            idx = indexOf.call( seed, matched[ i ] );\n                            seed[ idx ] = !( matches[ idx ] = matched[ i ] );\n                        }\n                    } ) :\n                    function( elem ) {\n                        return fn( elem, 0, args );\n                    };\n            }\n\n            return fn;\n        }\n    },\n\n    pseudos: {\n\n        // Potentially complex pseudos\n        not: markFunction( function( selector ) {\n\n            // Trim the selector passed to compile\n            // to avoid treating leading and trailing\n            // spaces as combinators\n            var input = [],\n                results = [],\n                matcher = compile( selector.replace( rtrim, \"$1\" ) );\n\n            return matcher[ expando ] ?\n                markFunction( function( seed, matches, _context, xml ) {\n                    var elem,\n                        unmatched = matcher( seed, null, xml, [] ),\n                        i = seed.length;\n\n                    // Match elements unmatched by `matcher`\n                    while ( i-- ) {\n                        if ( ( elem = unmatched[ i ] ) ) {\n                            seed[ i ] = !( matches[ i ] = elem );\n                        }\n                    }\n                } ) :\n                function( elem, _context, xml ) {\n                    input[ 0 ] = elem;\n                    matcher( input, null, xml, results );\n\n                    // Don't keep the element (issue #299)\n                    input[ 0 ] = null;\n                    return !results.pop();\n                };\n        } ),\n\n        has: markFunction( function( selector ) {\n            return function( elem ) {\n                return find( selector, elem ).length > 0;\n            };\n        } ),\n\n        contains: markFunction( function( text ) {\n            text = text.replace( runescape, funescape );\n            return function( elem ) {\n                return ( elem.textContent || jQuery.text( elem ) ).indexOf( text ) > -1;\n            };\n        } ),\n\n        // \"Whether an element is represented by a :lang() selector\n        // is based solely on the element's language value\n        // being equal to the identifier C,\n        // or beginning with the identifier C immediately followed by \"-\".\n        // The matching of C against the element's language value is performed case-insensitively.\n        // The identifier C does not have to be a valid language name.\"\n        // https://www.w3.org/TR/selectors/#lang-pseudo\n        lang: markFunction( function( lang ) {\n\n            // lang value must be a valid identifier\n            if ( !ridentifier.test( lang || \"\" ) ) {\n                selectorError( \"unsupported lang: \" + lang );\n            }\n            lang = lang.replace( runescape, funescape ).toLowerCase();\n            return function( elem ) {\n                var elemLang;\n                do {\n                    if ( ( elemLang = documentIsHTML ?\n                        elem.lang :\n                        elem.getAttribute( \"xml:lang\" ) || elem.getAttribute( \"lang\" ) ) ) {\n\n                        elemLang = elemLang.toLowerCase();\n                        return elemLang === lang || elemLang.indexOf( lang + \"-\" ) === 0;\n                    }\n                } while ( ( elem = elem.parentNode ) && elem.nodeType === 1 );\n                return false;\n            };\n        } ),\n\n        // Miscellaneous\n        target: function( elem ) {\n            var hash = window.location && window.location.hash;\n            return hash && hash.slice( 1 ) === elem.id;\n        },\n\n        root: function( elem ) {\n            return elem === documentElement;\n        },\n\n        focus: function( elem ) {\n            return elem === document.activeElement &&\n                document.hasFocus() &&\n                !!( elem.type || elem.href || ~elem.tabIndex );\n        },\n\n        // Boolean properties\n        enabled: createDisabledPseudo( false ),\n        disabled: createDisabledPseudo( true ),\n\n        checked: function( elem ) {\n\n            // In CSS3, :checked should return both checked and selected elements\n            // https://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n            return ( nodeName( elem, \"input\" ) && !!elem.checked ) ||\n                ( nodeName( elem, \"option\" ) && !!elem.selected );\n        },\n\n        selected: function( elem ) {\n\n            // Support: IE <=11+\n            // Accessing the selectedIndex property\n            // forces the browser to treat the default option as\n            // selected when in an optgroup.\n            if ( isIE && elem.parentNode ) {\n                // eslint-disable-next-line no-unused-expressions\n                elem.parentNode.selectedIndex;\n            }\n\n            return elem.selected === true;\n        },\n\n        // Contents\n        empty: function( elem ) {\n\n            // https://www.w3.org/TR/selectors/#empty-pseudo\n            // :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),\n            //   but not by others (comment: 8; processing instruction: 7; etc.)\n            // nodeType < 6 works because attributes (2) do not appear as children\n            for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {\n                if ( elem.nodeType < 6 ) {\n                    return false;\n                }\n            }\n            return true;\n        },\n\n        parent: function( elem ) {\n            return !Expr.pseudos.empty( elem );\n        },\n\n        // Element/input types\n        header: function( elem ) {\n            return rheader.test( elem.nodeName );\n        },\n\n        input: function( elem ) {\n            return rinputs.test( elem.nodeName );\n        },\n\n        button: function( elem ) {\n            return nodeName( elem, \"input\" ) && elem.type === \"button\" ||\n                nodeName( elem, \"button\" );\n        },\n\n        text: function( elem ) {\n            return nodeName( elem, \"input\" ) && elem.type === \"text\";\n        },\n\n        // Position-in-collection\n        first: createPositionalPseudo( function() {\n            return [ 0 ];\n        } ),\n\n        last: createPositionalPseudo( function( _matchIndexes, length ) {\n            return [ length - 1 ];\n        } ),\n\n        eq: createPositionalPseudo( function( _matchIndexes, length, argument ) {\n            return [ argument < 0 ? argument + length : argument ];\n        } ),\n\n        even: createPositionalPseudo( function( matchIndexes, length ) {\n            var i = 0;\n            for ( ; i < length; i += 2 ) {\n                matchIndexes.push( i );\n            }\n            return matchIndexes;\n        } ),\n\n        odd: createPositionalPseudo( function( matchIndexes, length ) {\n            var i = 1;\n            for ( ; i < length; i += 2 ) {\n                matchIndexes.push( i );\n            }\n            return matchIndexes;\n        } ),\n\n        lt: createPositionalPseudo( function( matchIndexes, length, argument ) {\n            var i;\n\n            if ( argument < 0 ) {\n                i = argument + length;\n            } else if ( argument > length ) {\n                i = length;\n            } else {\n                i = argument;\n            }\n\n            for ( ; --i >= 0; ) {\n                matchIndexes.push( i );\n            }\n            return matchIndexes;\n        } ),\n\n        gt: createPositionalPseudo( function( matchIndexes, length, argument ) {\n            var i = argument < 0 ? argument + length : argument;\n            for ( ; ++i < length; ) {\n                matchIndexes.push( i );\n            }\n            return matchIndexes;\n        } )\n    }\n};\n\nExpr.pseudos.nth = Expr.pseudos.eq;\n\n// Add button/input type pseudos\nfor ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {\n    Expr.pseudos[ i ] = createInputPseudo( i );\n}\nfor ( i in { submit: true, reset: true } ) {\n    Expr.pseudos[ i ] = createButtonPseudo( i );\n}\n\n// Easy API for creating new setFilters\nfunction setFilters() {}\nsetFilters.prototype = Expr.filters = Expr.pseudos;\nExpr.setFilters = new setFilters();\n\nfunction tokenize( selector, parseOnly ) {\n    var matched, match, tokens, type,\n        soFar, groups, preFilters,\n        cached = tokenCache[ selector + \" \" ];\n\n    if ( cached ) {\n        return parseOnly ? 0 : cached.slice( 0 );\n    }\n\n    soFar = selector;\n    groups = [];\n    preFilters = Expr.preFilter;\n\n    while ( soFar ) {\n\n        // Comma and first run\n        if ( !matched || ( match = rcomma.exec( soFar ) ) ) {\n            if ( match ) {\n\n                // Don't consume trailing commas as valid\n                soFar = soFar.slice( match[ 0 ].length ) || soFar;\n            }\n            groups.push( ( tokens = [] ) );\n        }\n\n        matched = false;\n\n        // Combinators\n        if ( ( match = rcombinators.exec( soFar ) ) ) {\n            matched = match.shift();\n            tokens.push( {\n                value: matched,\n\n                // Cast descendant combinators to space\n                type: match[ 0 ].replace( rtrim, \" \" )\n            } );\n            soFar = soFar.slice( matched.length );\n        }\n\n        // Filters\n        for ( type in Expr.filter ) {\n            if ( ( match = matchExpr[ type ].exec( soFar ) ) && ( !preFilters[ type ] ||\n                ( match = preFilters[ type ]( match ) ) ) ) {\n                matched = match.shift();\n                tokens.push( {\n                    value: matched,\n                    type: type,\n                    matches: match\n                } );\n                soFar = soFar.slice( matched.length );\n            }\n        }\n\n        if ( !matched ) {\n            break;\n        }\n    }\n\n    // Return the length of the invalid excess\n    // if we're just parsing\n    // Otherwise, throw an error or return tokens\n    if ( parseOnly ) {\n        return soFar.length;\n    }\n\n    return soFar ?\n        selectorError( selector ) :\n\n        // Cache the tokens\n        tokenCache( selector, groups ).slice( 0 );\n}\n\nfunction toSelector( tokens ) {\n    var i = 0,\n        len = tokens.length,\n        selector = \"\";\n    for ( ; i < len; i++ ) {\n        selector += tokens[ i ].value;\n    }\n    return selector;\n}\n\nfunction addCombinator( matcher, combinator, base ) {\n    var dir = combinator.dir,\n        skip = combinator.next,\n        key = skip || dir,\n        checkNonElements = base && key === \"parentNode\",\n        doneName = done++;\n\n    return combinator.first ?\n\n        // Check against closest ancestor/preceding element\n        function( elem, context, xml ) {\n            while ( ( elem = elem[ dir ] ) ) {\n                if ( elem.nodeType === 1 || checkNonElements ) {\n                    return matcher( elem, context, xml );\n                }\n            }\n            return false;\n        } :\n\n        // Check against all ancestor/preceding elements\n        function( elem, context, xml ) {\n            var oldCache, outerCache,\n                newCache = [ dirruns, doneName ];\n\n            // We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching\n            if ( xml ) {\n                while ( ( elem = elem[ dir ] ) ) {\n                    if ( elem.nodeType === 1 || checkNonElements ) {\n                        if ( matcher( elem, context, xml ) ) {\n                            return true;\n                        }\n                    }\n                }\n            } else {\n                while ( ( elem = elem[ dir ] ) ) {\n                    if ( elem.nodeType === 1 || checkNonElements ) {\n                        outerCache = elem[ expando ] || ( elem[ expando ] = {} );\n\n                        if ( skip && nodeName( elem, skip ) ) {\n                            elem = elem[ dir ] || elem;\n                        } else if ( ( oldCache = outerCache[ key ] ) &&\n                            oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {\n\n                            // Assign to newCache so results back-propagate to previous elements\n                            return ( newCache[ 2 ] = oldCache[ 2 ] );\n                        } else {\n\n                            // Reuse newcache so results back-propagate to previous elements\n                            outerCache[ key ] = newCache;\n\n                            // A match means we're done; a fail means we have to keep checking\n                            if ( ( newCache[ 2 ] = matcher( elem, context, xml ) ) ) {\n                                return true;\n                            }\n                        }\n                    }\n                }\n            }\n            return false;\n        };\n}\n\nfunction elementMatcher( matchers ) {\n    return matchers.length > 1 ?\n        function( elem, context, xml ) {\n            var i = matchers.length;\n            while ( i-- ) {\n                if ( !matchers[ i ]( elem, context, xml ) ) {\n                    return false;\n                }\n            }\n            return true;\n        } :\n        matchers[ 0 ];\n}\n\nfunction multipleContexts( selector, contexts, results ) {\n    var i = 0,\n        len = contexts.length;\n    for ( ; i < len; i++ ) {\n        find( selector, contexts[ i ], results );\n    }\n    return results;\n}\n\nfunction condense( unmatched, map, filter, context, xml ) {\n    var elem,\n        newUnmatched = [],\n        i = 0,\n        len = unmatched.length,\n        mapped = map != null;\n\n    for ( ; i < len; i++ ) {\n        if ( ( elem = unmatched[ i ] ) ) {\n            if ( !filter || filter( elem, context, xml ) ) {\n                newUnmatched.push( elem );\n                if ( mapped ) {\n                    map.push( i );\n                }\n            }\n        }\n    }\n\n    return newUnmatched;\n}\n\nfunction setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {\n    if ( postFilter && !postFilter[ expando ] ) {\n        postFilter = setMatcher( postFilter );\n    }\n    if ( postFinder && !postFinder[ expando ] ) {\n        postFinder = setMatcher( postFinder, postSelector );\n    }\n    return markFunction( function( seed, results, context, xml ) {\n        var temp, i, elem, matcherOut,\n            preMap = [],\n            postMap = [],\n            preexisting = results.length,\n\n            // Get initial elements from seed or context\n            elems = seed ||\n                multipleContexts( selector || \"*\",\n                    context.nodeType ? [ context ] : context, [] ),\n\n            // Prefilter to get matcher input, preserving a map for seed-results synchronization\n            matcherIn = preFilter && ( seed || !selector ) ?\n                condense( elems, preMap, preFilter, context, xml ) :\n                elems;\n\n        if ( matcher ) {\n\n            // If we have a postFinder, or filtered seed, or non-seed postFilter\n            // or preexisting results,\n            matcherOut = postFinder || ( seed ? preFilter : preexisting || postFilter ) ?\n\n                // ...intermediate processing is necessary\n                [] :\n\n                // ...otherwise use results directly\n                results;\n\n            // Find primary matches\n            matcher( matcherIn, matcherOut, context, xml );\n        } else {\n            matcherOut = matcherIn;\n        }\n\n        // Apply postFilter\n        if ( postFilter ) {\n            temp = condense( matcherOut, postMap );\n            postFilter( temp, [], context, xml );\n\n            // Un-match failing elements by moving them back to matcherIn\n            i = temp.length;\n            while ( i-- ) {\n                if ( ( elem = temp[ i ] ) ) {\n                    matcherOut[ postMap[ i ] ] = !( matcherIn[ postMap[ i ] ] = elem );\n                }\n            }\n        }\n\n        if ( seed ) {\n            if ( postFinder || preFilter ) {\n                if ( postFinder ) {\n\n                    // Get the final matcherOut by condensing this intermediate into postFinder contexts\n                    temp = [];\n                    i = matcherOut.length;\n                    while ( i-- ) {\n                        if ( ( elem = matcherOut[ i ] ) ) {\n\n                            // Restore matcherIn since elem is not yet a final match\n                            temp.push( ( matcherIn[ i ] = elem ) );\n                        }\n                    }\n                    postFinder( null, ( matcherOut = [] ), temp, xml );\n                }\n\n                // Move matched elements from seed to results to keep them synchronized\n                i = matcherOut.length;\n                while ( i-- ) {\n                    if ( ( elem = matcherOut[ i ] ) &&\n                        ( temp = postFinder ? indexOf.call( seed, elem ) : preMap[ i ] ) > -1 ) {\n\n                        seed[ temp ] = !( results[ temp ] = elem );\n                    }\n                }\n            }\n\n        // Add elements to results, through postFinder if defined\n        } else {\n            matcherOut = condense(\n                matcherOut === results ?\n                    matcherOut.splice( preexisting, matcherOut.length ) :\n                    matcherOut\n            );\n            if ( postFinder ) {\n                postFinder( null, results, matcherOut, xml );\n            } else {\n                push.apply( results, matcherOut );\n            }\n        }\n    } );\n}\n\nfunction matcherFromTokens( tokens ) {\n    var checkContext, matcher, j,\n        len = tokens.length,\n        leadingRelative = Expr.relative[ tokens[ 0 ].type ],\n        implicitRelative = leadingRelative || Expr.relative[ \" \" ],\n        i = leadingRelative ? 1 : 0,\n\n        // The foundational matcher ensures that elements are reachable from top-level context(s)\n        matchContext = addCombinator( function( elem ) {\n            return elem === checkContext;\n        }, implicitRelative, true ),\n        matchAnyContext = addCombinator( function( elem ) {\n            return indexOf.call( checkContext, elem ) > -1;\n        }, implicitRelative, true ),\n        matchers = [ function( elem, context, xml ) {\n            var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (\n                ( checkContext = context ).nodeType ?\n                    matchContext( elem, context, xml ) :\n                    matchAnyContext( elem, context, xml ) );\n\n            // Avoid hanging onto element (issue #299)\n            checkContext = null;\n            return ret;\n        } ];\n\n    for ( ; i < len; i++ ) {\n        if ( ( matcher = Expr.relative[ tokens[ i ].type ] ) ) {\n            matchers = [ addCombinator( elementMatcher( matchers ), matcher ) ];\n        } else {\n            matcher = Expr.filter[ tokens[ i ].type ].apply( null, tokens[ i ].matches );\n\n            // Return special upon seeing a positional matcher\n            if ( matcher[ expando ] ) {\n\n                // Find the next relative operator (if any) for proper handling\n                j = ++i;\n                for ( ; j < len; j++ ) {\n                    if ( Expr.relative[ tokens[ j ].type ] ) {\n                        break;\n                    }\n                }\n                return setMatcher(\n                    i > 1 && elementMatcher( matchers ),\n                    i > 1 && toSelector(\n\n                        // If the preceding token was a descendant combinator, insert an implicit any-element `*`\n                        tokens.slice( 0, i - 1 )\n                            .concat( { value: tokens[ i - 2 ].type === \" \" ? \"*\" : \"\" } )\n                    ).replace( rtrim, \"$1\" ),\n                    matcher,\n                    i < j && matcherFromTokens( tokens.slice( i, j ) ),\n                    j < len && matcherFromTokens( ( tokens = tokens.slice( j ) ) ),\n                    j < len && toSelector( tokens )\n                );\n            }\n            matchers.push( matcher );\n        }\n    }\n\n    return elementMatcher( matchers );\n}\n\nfunction matcherFromGroupMatchers( elementMatchers, setMatchers ) {\n    var bySet = setMatchers.length > 0,\n        byElement = elementMatchers.length > 0,\n        superMatcher = function( seed, context, xml, results, outermost ) {\n            var elem, j, matcher,\n                matchedCount = 0,\n                i = \"0\",\n                unmatched = seed && [],\n                setMatched = [],\n                contextBackup = outermostContext,\n\n                // We must always have either seed elements or outermost context\n                elems = seed || byElement && Expr.find.TAG( \"*\", outermost ),\n\n                // Use integer dirruns iff this is the outermost matcher\n                dirrunsUnique = ( dirruns += contextBackup == null ? 1 : Math.random() || 0.1 );\n\n            if ( outermost ) {\n\n                // Support: IE 11+\n                // IE sometimes throws a \"Permission denied\" error when strict-comparing\n                // two documents; shallow comparisons work.\n                // eslint-disable-next-line eqeqeq\n                outermostContext = context == document || context || outermost;\n            }\n\n            // Add elements passing elementMatchers directly to results\n            for ( ; ( elem = elems[ i ] ) != null; i++ ) {\n                if ( byElement && elem ) {\n                    j = 0;\n\n                    // Support: IE 11+\n                    // IE sometimes throws a \"Permission denied\" error when strict-comparing\n                    // two documents; shallow comparisons work.\n                    // eslint-disable-next-line eqeqeq\n                    if ( !context && elem.ownerDocument != document ) {\n                        setDocument( elem );\n                        xml = !documentIsHTML;\n                    }\n                    while ( ( matcher = elementMatchers[ j++ ] ) ) {\n                        if ( matcher( elem, context || document, xml ) ) {\n                            push.call( results, elem );\n                            break;\n                        }\n                    }\n                    if ( outermost ) {\n                        dirruns = dirrunsUnique;\n                    }\n                }\n\n                // Track unmatched elements for set filters\n                if ( bySet ) {\n\n                    // They will have gone through all possible matchers\n                    if ( ( elem = !matcher && elem ) ) {\n                        matchedCount--;\n                    }\n\n                    // Lengthen the array for every element, matched or not\n                    if ( seed ) {\n                        unmatched.push( elem );\n                    }\n                }\n            }\n\n            // `i` is now the count of elements visited above, and adding it to `matchedCount`\n            // makes the latter nonnegative.\n            matchedCount += i;\n\n            // Apply set filters to unmatched elements\n            // NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`\n            // equals `i`), unless we didn't visit _any_ elements in the above loop because we have\n            // no element matchers and no seed.\n            // Incrementing an initially-string \"0\" `i` allows `i` to remain a string only in that\n            // case, which will result in a \"00\" `matchedCount` that differs from `i` but is also\n            // numerically zero.\n            if ( bySet && i !== matchedCount ) {\n                j = 0;\n                while ( ( matcher = setMatchers[ j++ ] ) ) {\n                    matcher( unmatched, setMatched, context, xml );\n                }\n\n                if ( seed ) {\n\n                    // Reintegrate element matches to eliminate the need for sorting\n                    if ( matchedCount > 0 ) {\n                        while ( i-- ) {\n                            if ( !( unmatched[ i ] || setMatched[ i ] ) ) {\n                                setMatched[ i ] = pop.call( results );\n                            }\n                        }\n                    }\n\n                    // Discard index placeholder values to get only actual matches\n                    setMatched = condense( setMatched );\n                }\n\n                // Add matches to results\n                push.apply( results, setMatched );\n\n                // Seedless set matches succeeding multiple successful matchers stipulate sorting\n                if ( outermost && !seed && setMatched.length > 0 &&\n                    ( matchedCount + setMatchers.length ) > 1 ) {\n\n                    jQuery.uniqueSort( results );\n                }\n            }\n\n            // Override manipulation of globals by nested matchers\n            if ( outermost ) {\n                dirruns = dirrunsUnique;\n                outermostContext = contextBackup;\n            }\n\n            return unmatched;\n        };\n\n    return bySet ?\n        markFunction( superMatcher ) :\n        superMatcher;\n}\n\nfunction compile( selector, match /* Internal Use Only */ ) {\n    var i,\n        setMatchers = [],\n        elementMatchers = [],\n        cached = compilerCache[ selector + \" \" ];\n\n    if ( !cached ) {\n\n        // Generate a function of recursive functions that can be used to check each element\n        if ( !match ) {\n            match = tokenize( selector );\n        }\n        i = match.length;\n        while ( i-- ) {\n            cached = matcherFromTokens( match[ i ] );\n            if ( cached[ expando ] ) {\n                setMatchers.push( cached );\n            } else {\n                elementMatchers.push( cached );\n            }\n        }\n\n        // Cache the compiled function\n        cached = compilerCache( selector,\n            matcherFromGroupMatchers( elementMatchers, setMatchers ) );\n\n        // Save selector and tokenization\n        cached.selector = selector;\n    }\n    return cached;\n}\n\n/**\n * A low-level selection function that works with jQuery's compiled\n *  selector functions\n * @param {String|Function} selector A selector or a pre-compiled\n *  selector function built with jQuery selector compile\n * @param {Element} context\n * @param {Array} [results]\n * @param {Array} [seed] A set of elements to match against\n */\nfunction select( selector, context, results, seed ) {\n    var i, tokens, token, type, find,\n        compiled = typeof selector === \"function\" && selector,\n        match = !seed && tokenize( ( selector = compiled.selector || selector ) );\n\n    results = results || [];\n\n    // Try to minimize operations if there is only one selector in the list and no seed\n    // (the latter of which guarantees us context)\n    if ( match.length === 1 ) {\n\n        // Reduce context if the leading compound selector is an ID\n        tokens = match[ 0 ] = match[ 0 ].slice( 0 );\n        if ( tokens.length > 2 && ( token = tokens[ 0 ] ).type === \"ID\" &&\n                context.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[ 1 ].type ] ) {\n\n            context = ( Expr.find.ID(\n                token.matches[ 0 ].replace( runescape, funescape ),\n                context\n            ) || [] )[ 0 ];\n            if ( !context ) {\n                return results;\n\n            // Precompiled matchers will still verify ancestry, so step up a level\n            } else if ( compiled ) {\n                context = context.parentNode;\n            }\n\n            selector = selector.slice( tokens.shift().value.length );\n        }\n\n        // Fetch a seed set for right-to-left matching\n        i = matchExpr.needsContext.test( selector ) ? 0 : tokens.length;\n        while ( i-- ) {\n            token = tokens[ i ];\n\n            // Abort if we hit a combinator\n            if ( Expr.relative[ ( type = token.type ) ] ) {\n                break;\n            }\n            if ( ( find = Expr.find[ type ] ) ) {\n\n                // Search, expanding context for leading sibling combinators\n                if ( ( seed = find(\n                    token.matches[ 0 ].replace( runescape, funescape ),\n                    rsibling.test( tokens[ 0 ].type ) &&\n                        testContext( context.parentNode ) || context\n                ) ) ) {\n\n                    // If seed is empty or no tokens remain, we can return early\n                    tokens.splice( i, 1 );\n                    selector = seed.length && toSelector( tokens );\n                    if ( !selector ) {\n                        push.apply( results, seed );\n                        return results;\n                    }\n\n                    break;\n                }\n            }\n        }\n    }\n\n    // Compile and execute a filtering function if one is not provided\n    // Provide `match` to avoid retokenization if we modified the selector above\n    ( compiled || compile( selector, match ) )(\n        seed,\n        context,\n        !documentIsHTML,\n        results,\n        !context || rsibling.test( selector ) && testContext( context.parentNode ) || context\n    );\n    return results;\n}\n\n// Initialize against the default document\nsetDocument();\n\njQuery.find = find;\n\n} )();\n","import jQuery from '../core.js';\nimport toType from './toType.js';\n\n// Multifunctional method to get and set values of a collection\n// The value/s can optionally be executed if it's a function\nvar access = function(elems, fn, key, value, chainable, emptyGet, raw) {\n    let i = 0,\n        len = elems.length,\n        bulk = key == null;\n\n    // Sets many values\n    if (toType(key) === 'object') {\n        chainable = true;\n        for (i in key) {\n            access(elems, fn, i, key[i], true, emptyGet, raw);\n        }\n\n        // Sets one value\n    } else if (value !== undefined) {\n        chainable = true;\n\n        if (typeof value !== 'function') {\n            raw = true;\n        }\n\n        if (bulk) {\n\n            // Bulk operations run against the entire set\n            if (raw) {\n                fn.call(elems, value);\n                fn = null;\n\n                // ...except when executing function values\n            } else {\n                bulk = fn;\n                fn = function(elem, _key, value) {\n                    return bulk.call(jQuery(elem), value);\n                };\n            }\n        }\n\n        if (fn) {\n            for (; i < len; i++) {\n                fn(\n\t\t\t\t\telems[i], key, raw\n\t\t\t\t\t    ? value\n\t\t\t\t\t    : value.call(elems[i], i, fn(elems[i], key))\n                );\n            }\n        }\n    }\n\n    if (chainable) {\n        return elems;\n    }\n\n    // Gets\n    if (bulk) {\n        return fn.call(elems);\n    }\n\n    return len ? fn(elems[0], key) : emptyGet;\n};\n\nexport default access;\n","// Only count HTML whitespace\n// Other whitespace should count in values\n// https://infra.spec.whatwg.org/#ascii-whitespace\nexport default ( /[^\\x20\\t\\r\\n\\f]+/g );\n","import jQuery from \"../core.js\";\nimport access from \"../core/access.js\";\nimport nodeName from \"../core/nodeName.js\";\nimport rnothtmlwhite from \"../var/rnothtmlwhite.js\";\nimport isIE from \"../var/isIE.js\";\n\nimport \"../selector.js\";\n\njQuery.fn.extend( {\n\tattr: function( name, value ) {\n\t\treturn access( this, jQuery.attr, name, value, arguments.length > 1 );\n\t},\n\n\tremoveAttr: function( name ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.removeAttr( this, name );\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tattr: function( elem, name, value ) {\n\t\tvar ret, hooks,\n\t\t\tnType = elem.nodeType;\n\n\t\t// Don't get/set attributes on text, comment and attribute nodes\n\t\tif ( nType === 3 || nType === 8 || nType === 2 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Fallback to prop when attributes are not supported\n\t\tif ( typeof elem.getAttribute === \"undefined\" ) {\n\t\t\treturn jQuery.prop( elem, name, value );\n\t\t}\n\n\t\t// Attribute hooks are determined by the lowercase version\n\t\t// Grab necessary hook if one is defined\n\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\n\t\t\thooks = jQuery.attrHooks[ name.toLowerCase() ];\n\t\t}\n\n\t\tif ( value !== undefined ) {\n\t\t\tif ( value === null ) {\n\t\t\t\tjQuery.removeAttr( elem, name );\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( hooks && \"set\" in hooks &&\n\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\telem.setAttribute( name, value + \"\" );\n\t\t\treturn value;\n\t\t}\n\n\t\tif ( hooks && \"get\" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\n\t\t\treturn ret;\n\t\t}\n\n\t\tret = elem.getAttribute( name );\n\n\t\t// Non-existent attributes return null, we normalize to undefined\n\t\treturn ret == null ? undefined : ret;\n\t},\n\n\tattrHooks: {},\n\n\tremoveAttr: function( elem, value ) {\n\t\tvar name,\n\t\t\ti = 0,\n\n\t\t\t// Attribute names can contain non-HTML whitespace characters\n\t\t\t// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n\t\t\tattrNames = value && value.match( rnothtmlwhite );\n\n\t\tif ( attrNames && elem.nodeType === 1 ) {\n\t\t\twhile ( ( name = attrNames[ i++ ] ) ) {\n\t\t\t\telem.removeAttribute( name );\n\t\t\t}\n\t\t}\n\t}\n} );\n\n// Support: IE <=11+\n// An input loses its value after becoming a radio\nif ( isIE ) {\n\tjQuery.attrHooks.type = {\n\t\tset: function( elem, value ) {\n\t\t\tif ( value === \"radio\" && nodeName( elem, \"input\" ) ) {\n\t\t\t\tvar val = elem.value;\n\t\t\t\telem.setAttribute( \"type\", value );\n\t\t\t\tif ( val ) {\n\t\t\t\t\telem.value = val;\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}\n\t};\n}\n\njQuery.each( jQuery.expr.match.bool.source.match( /\\w+/g ), function( _i, name ) {\n\tjQuery.attrHooks[ name ] = {\n\t\tget: function( elem ) {\n\t\t\tvar ret,\n\t\t\t\tisXML = jQuery.isXMLDoc( elem ),\n\t\t\t\tlowercaseName = name.toLowerCase();\n\n\t\t\tif ( !isXML ) {\n\t\t\t\tret = elem.getAttribute( name ) != null ?\n\t\t\t\t\tlowercaseName :\n\t\t\t\t\tnull;\n\t\t\t}\n\t\t\treturn ret;\n\t\t},\n\n\t\tset: function( elem, value, name ) {\n\t\t\tif ( value === false ) {\n\n\t\t\t\t// Remove boolean attributes when set to false\n\t\t\t\tjQuery.removeAttr( elem, name );\n\t\t\t} else {\n\t\t\t\telem.setAttribute( name, name );\n\t\t\t}\n\t\t\treturn name;\n\t\t}\n\t};\n} );\n","import jQuery from \"../core.js\";\nimport access from \"../core/access.js\";\nimport isIE from \"../var/isIE.js\";\n\nimport \"../selector.js\";\n\nvar rfocusable = /^(?:input|select|textarea|button)$/i,\n\trclickable = /^(?:a|area)$/i;\n\njQuery.fn.extend( {\n\tprop: function( name, value ) {\n\t\treturn access( this, jQuery.prop, name, value, arguments.length > 1 );\n\t},\n\n\tremoveProp: function( name ) {\n\t\treturn this.each( function() {\n\t\t\tdelete this[ jQuery.propFix[ name ] || name ];\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tprop: function( elem, name, value ) {\n\t\tvar ret, hooks,\n\t\t\tnType = elem.nodeType;\n\n\t\t// Don't get/set properties on text, comment and attribute nodes\n\t\tif ( nType === 3 || nType === 8 || nType === 2 ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\n\n\t\t\t// Fix name and attach hooks\n\t\t\tname = jQuery.propFix[ name ] || name;\n\t\t\thooks = jQuery.propHooks[ name ];\n\t\t}\n\n\t\tif ( value !== undefined ) {\n\t\t\tif ( hooks && \"set\" in hooks &&\n\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\treturn ( elem[ name ] = value );\n\t\t}\n\n\t\tif ( hooks && \"get\" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\n\t\t\treturn ret;\n\t\t}\n\n\t\treturn elem[ name ];\n\t},\n\n\tpropHooks: {\n\t\ttabIndex: {\n\t\t\tget: function( elem ) {\n\n\t\t\t\t// Support: IE <=9 - 11+\n\t\t\t\t// elem.tabIndex doesn't always return the\n\t\t\t\t// correct value when it hasn't been explicitly set\n\t\t\t\t// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/\n\t\t\t\t// Use proper attribute retrieval(#12072)\n\t\t\t\tvar tabindex = elem.getAttribute( \"tabindex\" );\n\n\t\t\t\tif ( tabindex ) {\n\t\t\t\t\treturn parseInt( tabindex, 10 );\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\trfocusable.test( elem.nodeName ) ||\n\n\t\t\t\t\t// href-less anchor's `tabIndex` property value is `0` and\n\t\t\t\t\t// the `tabindex` attribute value: `null`. We want `-1`.\n\t\t\t\t\trclickable.test( elem.nodeName ) && elem.href\n\t\t\t\t) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t},\n\n\tpropFix: {\n\t\t\"for\": \"htmlFor\",\n\t\t\"class\": \"className\"\n\t}\n} );\n\n// Support: IE <=11+\n// Accessing the selectedIndex property forces the browser to respect\n// setting selected on the option. The getter ensures a default option\n// is selected when in an optgroup. ESLint rule \"no-unused-expressions\"\n// is disabled for this code since it considers such accessions noop.\nif ( isIE ) {\n\tjQuery.propHooks.selected = {\n\t\tget: function( elem ) {\n\n\t\t\tvar parent = elem.parentNode;\n\t\t\tif ( parent && parent.parentNode ) {\n\t\t\t\t// eslint-disable-next-line no-unused-expressions\n\t\t\t\tparent.parentNode.selectedIndex;\n\t\t\t}\n\t\t\treturn null;\n\t\t},\n\t\tset: function( elem ) {\n\n\n\t\t\tvar parent = elem.parentNode;\n\t\t\tif ( parent ) {\n\t\t\t\t// eslint-disable-next-line no-unused-expressions\n\t\t\t\tparent.selectedIndex;\n\n\t\t\t\tif ( parent.parentNode ) {\n\t\t\t\t\t// eslint-disable-next-line no-unused-expressions\n\t\t\t\t\tparent.parentNode.selectedIndex;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\njQuery.each( [\n\t\"tabIndex\",\n\t\"readOnly\",\n\t\"maxLength\",\n\t\"cellSpacing\",\n\t\"cellPadding\",\n\t\"rowSpan\",\n\t\"colSpan\",\n\t\"useMap\",\n\t\"frameBorder\",\n\t\"contentEditable\"\n], function() {\n\tjQuery.propFix[ this.toLowerCase() ] = this;\n} );\n","import rnothtmlwhite from '../var/rnothtmlwhite.js';\n\n// Strip and collapse whitespace according to HTML spec\n// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace\nfunction stripAndCollapse( value ) {\n\tvar tokens = value.match( rnothtmlwhite ) || [];\n\treturn tokens.join( \" \" );\n}\n\nexport default stripAndCollapse;\n","// rsingleTag matches a string consisting of a single HTML element with no attributes\n// and captures the element's name\nexport default ( /^<([a-z][^\\/\\0>:\\x20\\t\\r\\n\\f]*)[\\x20\\t\\r\\n\\f]*\\/?>(?:<\\/\\1>|)$/i );\n","import jQuery from \"../../core.js\";\n\nimport \"../../selector.js\";\n\nexport default jQuery.expr.match.needsContext;\n","import jQuery from \"../core.js\";\nimport indexOf from \"../var/indexOf.js\";\nimport rneedsContext from \"./var/rneedsContext.js\";\n\nimport \"../selector.js\";\n\n// Implement the identical functionality for filter and not\nfunction winnow( elements, qualifier, not ) {\n\tif ( typeof qualifier === \"function\" ) {\n\t\treturn jQuery.grep( elements, function( elem, i ) {\n\t\t\treturn !!qualifier.call( elem, i, elem ) !== not;\n\t\t} );\n\t}\n\n\t// Single element\n\tif ( qualifier.nodeType ) {\n\t\treturn jQuery.grep( elements, function( elem ) {\n\t\t\treturn ( elem === qualifier ) !== not;\n\t\t} );\n\t}\n\n\t// Arraylike of elements (jQuery, arguments, Array)\n\tif ( typeof qualifier !== \"string\" ) {\n\t\treturn jQuery.grep( elements, function( elem ) {\n\t\t\treturn ( indexOf.call( qualifier, elem ) > -1 ) !== not;\n\t\t} );\n\t}\n\n\t// Filtered directly for both simple and complex selectors\n\treturn jQuery.filter( qualifier, elements, not );\n}\n\njQuery.filter = function( expr, elems, not ) {\n\tvar elem = elems[ 0 ];\n\n\tif ( not ) {\n\t\texpr = \":not(\" + expr + \")\";\n\t}\n\n\tif ( elems.length === 1 && elem.nodeType === 1 ) {\n\t\treturn jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];\n\t}\n\n\treturn jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {\n\t\treturn elem.nodeType === 1;\n\t} ) );\n};\n\njQuery.fn.extend( {\n\tfind: function( selector ) {\n\t\tvar i, ret,\n\t\t\tlen = this.length,\n\t\t\tself = this;\n\n\t\tif ( typeof selector !== \"string\" ) {\n\t\t\treturn this.pushStack( jQuery( selector ).filter( function() {\n\t\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\t\tif ( jQuery.contains( self[ i ], this ) ) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} ) );\n\t\t}\n\n\t\tret = this.pushStack( [] );\n\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tjQuery.find( selector, self[ i ], ret );\n\t\t}\n\n\t\treturn len > 1 ? jQuery.uniqueSort( ret ) : ret;\n\t},\n\tfilter: function( selector ) {\n\t\treturn this.pushStack( winnow( this, selector || [], false ) );\n\t},\n\tnot: function( selector ) {\n\t\treturn this.pushStack( winnow( this, selector || [], true ) );\n\t},\n\tis: function( selector ) {\n\t\treturn !!winnow(\n\t\t\tthis,\n\n\t\t\t// If this is a positional/relative selector, check membership in the returned set\n\t\t\t// so $(\"p:first\").is(\"p:last\") won't return true for a doc with two \"p\".\n\t\t\ttypeof selector === \"string\" && rneedsContext.test( selector ) ?\n\t\t\t\tjQuery( selector ) :\n\t\t\t\tselector || [],\n\t\t\tfalse\n\t\t).length;\n\t}\n} );\n","// Initialize a jQuery object\nimport jQuery from '../core.js';\nimport document from '../var/document.js';\n\nimport rsingleTag from './var/rsingleTag.js';\n\nimport '../traversing/findFilter.js';\n\n// A central reference to the root jQuery(document)\nlet rootjQuery,\n\n    // A simple way to check for HTML strings\n    // Prioritize #id over <tag> to avoid XSS via location.hash (#9521)\n    // Strict HTML recognition (#11290: must start with <)\n    // Shortcut simple #id case for speed\n    rquickExpr = /^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]+))$/,\n\n    init = jQuery.fn.init = function(selector, context, root) {\n        let elem, match;\n\n        // HANDLE: $(\"\"), $(null), $(undefined), $(false)\n        if (!selector) {\n            return this;\n        }\n\n        // Method init() accepts an alternate rootjQuery\n        // so migrate can support jQuery.sub (gh-2101)\n        root = root || rootjQuery;\n\n        // Handle HTML strings\n        if (typeof selector === 'string') {\n            if (selector[0] === '<'\n\t\t\t\t&& selector[selector.length - 1] === '>'\n\t\t\t\t&& selector.length >= 3) {\n\n                // Assume that strings that start and end with <> are HTML and skip the regex check\n                match = [ null, selector, null ];\n\n            } else {\n                match = rquickExpr.exec(selector);\n            }\n\n            // Match html or make sure no context is specified for #id\n            if (match && (match[1] || !context)) {\n\n                // HANDLE: $(html) -> $(array)\n                if (match[1]) {\n                    context = context instanceof jQuery ? context[0] : context;\n\n                    // Option to run scripts is true for back-compat\n                    // Intentionally let the error be thrown if parseHTML is not present\n                    jQuery.merge(this, jQuery.parseHTML(\n\t\t\t\t\t\tmatch[1],\n\t\t\t\t\t\tcontext && context.nodeType ? context.ownerDocument || context : document,\n\t\t\t\t\t\ttrue\n                    ));\n\n                    // HANDLE: $(html, props)\n                    if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {\n                        for (match in context) {\n\n                            // Properties of context are called as methods if possible\n                            if (typeof this[match] === 'function') {\n                                this[match](context[match]);\n\n                                // ...and otherwise set as attributes\n                            } else {\n                                this.attr(match, context[match]);\n                            }\n                        }\n                    }\n\n                    return this;\n\n                    // HANDLE: $(#id)\n                }\n                elem = document.getElementById(match[2]);\n\n                if (elem) {\n\n                    // Inject the element directly into the jQuery object\n                    this[0] = elem;\n                    this.length = 1;\n                }\n\n                return this;\n\n\n                // HANDLE: $(expr, $(...))\n            } else if (!context || context.jquery) {\n                return (context || root).find(selector);\n\n                // HANDLE: $(expr, context)\n                // (which is just equivalent to: $(context).find(expr)\n            }\n\n            return this.constructor(context).find(selector);\n\n\n            // HANDLE: $(DOMElement)\n        } else if (selector.nodeType) {\n            this[0] = selector;\n            this.length = 1;\n\n            return this;\n\n            // HANDLE: $(function)\n            // Shortcut for document ready\n        } else if (typeof selector === 'function') {\n            return root.ready !== undefined\n                ? root.ready(selector)\n\n            // Execute immediately if ready is not present\n                : selector(jQuery);\n        }\n\n        return jQuery.makeArray(selector, this);\n    };\n\n// Give the init function the jQuery prototype for later instantiation\ninit.prototype = jQuery.fn;\n\n// Initialize central reference\nrootjQuery = jQuery(document);\n","import jQuery from \"../core.js\";\nimport stripAndCollapse from \"../core/stripAndCollapse.js\";\nimport rnothtmlwhite from \"../var/rnothtmlwhite.js\";\n\nimport \"../core/init.js\";\n\nfunction getClass( elem ) {\n\treturn elem.getAttribute && elem.getAttribute( \"class\" ) || \"\";\n}\n\nfunction classesToArray( value ) {\n\tif ( Array.isArray( value ) ) {\n\t\treturn value;\n\t}\n\tif ( typeof value === \"string\" ) {\n\t\treturn value.match( rnothtmlwhite ) || [];\n\t}\n\treturn [];\n}\n\njQuery.fn.extend( {\n\taddClass: function( value ) {\n\t\tvar classes, elem, cur, curValue, clazz, j, finalValue,\n\t\t\ti = 0;\n\n\t\tif ( typeof value === \"function\" ) {\n\t\t\treturn this.each( function( j ) {\n\t\t\t\tjQuery( this ).addClass( value.call( this, j, getClass( this ) ) );\n\t\t\t} );\n\t\t}\n\n\t\tclasses = classesToArray( value );\n\n\t\tif ( classes.length ) {\n\t\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\t\tcurValue = getClass( elem );\n\t\t\t\tcur = elem.nodeType === 1 && ( \" \" + stripAndCollapse( curValue ) + \" \" );\n\n\t\t\t\tif ( cur ) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\twhile ( ( clazz = classes[ j++ ] ) ) {\n\t\t\t\t\t\tif ( cur.indexOf( \" \" + clazz + \" \" ) < 0 ) {\n\t\t\t\t\t\t\tcur += clazz + \" \";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Only assign if different to avoid unneeded rendering.\n\t\t\t\t\tfinalValue = stripAndCollapse( cur );\n\t\t\t\t\tif ( curValue !== finalValue ) {\n\t\t\t\t\t\telem.setAttribute( \"class\", finalValue );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tremoveClass: function( value ) {\n\t\tvar classes, elem, cur, curValue, clazz, j, finalValue,\n\t\t\ti = 0;\n\n\t\tif ( typeof value === \"function\" ) {\n\t\t\treturn this.each( function( j ) {\n\t\t\t\tjQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );\n\t\t\t} );\n\t\t}\n\n\t\tif ( !arguments.length ) {\n\t\t\treturn this.attr( \"class\", \"\" );\n\t\t}\n\n\t\tclasses = classesToArray( value );\n\n\t\tif ( classes.length ) {\n\t\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\t\tcurValue = getClass( elem );\n\n\t\t\t\t// This expression is here for better compressibility (see addClass)\n\t\t\t\tcur = elem.nodeType === 1 && ( \" \" + stripAndCollapse( curValue ) + \" \" );\n\n\t\t\t\tif ( cur ) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\twhile ( ( clazz = classes[ j++ ] ) ) {\n\n\t\t\t\t\t\t// Remove *all* instances\n\t\t\t\t\t\twhile ( cur.indexOf( \" \" + clazz + \" \" ) > -1 ) {\n\t\t\t\t\t\t\tcur = cur.replace( \" \" + clazz + \" \", \" \" );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Only assign if different to avoid unneeded rendering.\n\t\t\t\t\tfinalValue = stripAndCollapse( cur );\n\t\t\t\t\tif ( curValue !== finalValue ) {\n\t\t\t\t\t\telem.setAttribute( \"class\", finalValue );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\ttoggleClass: function( value, stateVal ) {\n\t\tif ( typeof value === \"function\" ) {\n\t\t\treturn this.each( function( i ) {\n\t\t\t\tjQuery( this ).toggleClass(\n\t\t\t\t\tvalue.call( this, i, getClass( this ), stateVal ),\n\t\t\t\t\tstateVal\n\t\t\t\t);\n\t\t\t} );\n\t\t}\n\n\t\tif ( typeof stateVal === \"boolean\" ) {\n\t\t\treturn stateVal ? this.addClass( value ) : this.removeClass( value );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar className, i, self, classNames;\n\n\t\t\t// Toggle individual class names\n\t\t\ti = 0;\n\t\t\tself = jQuery( this );\n\t\t\tclassNames = classesToArray( value );\n\n\t\t\twhile ( ( className = classNames[ i++ ] ) ) {\n\n\t\t\t\t// Check each className given, space separated list\n\t\t\t\tif ( self.hasClass( className ) ) {\n\t\t\t\t\tself.removeClass( className );\n\t\t\t\t} else {\n\t\t\t\t\tself.addClass( className );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t},\n\n\thasClass: function( selector ) {\n\t\tvar className, elem,\n\t\t\ti = 0;\n\n\t\tclassName = \" \" + selector + \" \";\n\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\tif ( elem.nodeType === 1 &&\n\t\t\t\t( \" \" + stripAndCollapse( getClass( elem ) ) + \" \" ).indexOf( className ) > -1 ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n} );\n","import jQuery from \"../core.js\";\n\n(global => {\n    if (typeof global.$ === 'undefined') {\n        global.$ = jQuery;\n    }\n})(global || window || this); // eslint-disable-line no-invalid-this","import jQuery from \"../core.js\";\nimport isIE from \"../var/isIE.js\";\nimport stripAndCollapse from \"../core/stripAndCollapse.js\";\nimport nodeName from \"../core/nodeName.js\";\n\nimport \"../core/init.js\";\n\njQuery.fn.extend( {\n\tval: function( value ) {\n\t\tvar hooks, ret, valueIsFunction,\n\t\t\telem = this[ 0 ];\n\n\t\tif ( !arguments.length ) {\n\t\t\tif ( elem ) {\n\t\t\t\thooks = jQuery.valHooks[ elem.type ] ||\n\t\t\t\t\tjQuery.valHooks[ elem.nodeName.toLowerCase() ];\n\n\t\t\t\tif ( hooks &&\n\t\t\t\t\t\"get\" in hooks &&\n\t\t\t\t\t( ret = hooks.get( elem, \"value\" ) ) !== undefined\n\t\t\t\t) {\n\t\t\t\t\treturn ret;\n\t\t\t\t}\n\n\t\t\t\tret = elem.value;\n\n\t\t\t\t// Handle cases where value is null/undef or number\n\t\t\t\treturn ret == null ? \"\" : ret;\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tvalueIsFunction = typeof value === \"function\";\n\n\t\treturn this.each( function( i ) {\n\t\t\tvar val;\n\n\t\t\tif ( this.nodeType !== 1 ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( valueIsFunction ) {\n\t\t\t\tval = value.call( this, i, jQuery( this ).val() );\n\t\t\t} else {\n\t\t\t\tval = value;\n\t\t\t}\n\n\t\t\t// Treat null/undefined as \"\"; convert numbers to string\n\t\t\tif ( val == null ) {\n\t\t\t\tval = \"\";\n\n\t\t\t} else if ( typeof val === \"number\" ) {\n\t\t\t\tval += \"\";\n\n\t\t\t} else if ( Array.isArray( val ) ) {\n\t\t\t\tval = jQuery.map( val, function( value ) {\n\t\t\t\t\treturn value == null ? \"\" : value + \"\";\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\thooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];\n\n\t\t\t// If set returns undefined, fall back to normal setting\n\t\t\tif ( !hooks || !( \"set\" in hooks ) || hooks.set( this, val, \"value\" ) === undefined ) {\n\t\t\t\tthis.value = val;\n\t\t\t}\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tvalHooks: {\n\t\tselect: {\n\t\t\tget: function( elem ) {\n\t\t\t\tvar value, option, i,\n\t\t\t\t\toptions = elem.options,\n\t\t\t\t\tindex = elem.selectedIndex,\n\t\t\t\t\tone = elem.type === \"select-one\",\n\t\t\t\t\tvalues = one ? null : [],\n\t\t\t\t\tmax = one ? index + 1 : options.length;\n\n\t\t\t\tif ( index < 0 ) {\n\t\t\t\t\ti = max;\n\n\t\t\t\t} else {\n\t\t\t\t\ti = one ? index : 0;\n\t\t\t\t}\n\n\t\t\t\t// Loop through all the selected options\n\t\t\t\tfor ( ; i < max; i++ ) {\n\t\t\t\t\toption = options[ i ];\n\n\t\t\t\t\tif ( option.selected &&\n\n\t\t\t\t\t\t\t// Don't return options that are disabled or in a disabled optgroup\n\t\t\t\t\t\t\t!option.disabled &&\n\t\t\t\t\t\t\t( !option.parentNode.disabled ||\n\t\t\t\t\t\t\t\t!nodeName( option.parentNode, \"optgroup\" ) ) ) {\n\n\t\t\t\t\t\t// Get the specific value for the option\n\t\t\t\t\t\tvalue = jQuery( option ).val();\n\n\t\t\t\t\t\t// We don't need an array for one selects\n\t\t\t\t\t\tif ( one ) {\n\t\t\t\t\t\t\treturn value;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Multi-Selects return an array\n\t\t\t\t\t\tvalues.push( value );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn values;\n\t\t\t},\n\n\t\t\tset: function( elem, value ) {\n\t\t\t\tvar optionSet, option,\n\t\t\t\t\toptions = elem.options,\n\t\t\t\t\tvalues = jQuery.makeArray( value ),\n\t\t\t\t\ti = options.length;\n\n\t\t\t\twhile ( i-- ) {\n\t\t\t\t\toption = options[ i ];\n\n\t\t\t\t\tif ( ( option.selected =\n\t\t\t\t\t\tjQuery.inArray( jQuery( option ).val(), values ) > -1\n\t\t\t\t\t) ) {\n\t\t\t\t\t\toptionSet = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Force browsers to behave consistently when non-matching value is set\n\t\t\t\tif ( !optionSet ) {\n\t\t\t\t\telem.selectedIndex = -1;\n\t\t\t\t}\n\t\t\t\treturn values;\n\t\t\t}\n\t\t}\n\t}\n} );\n\nif ( isIE ) {\n\tjQuery.valHooks.option = {\n\t\tget: function( elem ) {\n\n\t\t\tvar val = elem.getAttribute( \"value\" );\n\t\t\treturn val != null ?\n\t\t\t\tval :\n\n\t\t\t\t// Support: IE <=10 - 11+\n\t\t\t\t// option.text throws exceptions (#14686, #14858)\n\t\t\t\t// Strip and collapse whitespace\n\t\t\t\t// https://html.spec.whatwg.org/#strip-and-collapse-whitespace\n\t\t\t\tstripAndCollapse( jQuery.text( elem ) );\n\t\t}\n\t};\n}\n\n// Radios and checkboxes getter/setter\njQuery.each( [ \"radio\", \"checkbox\" ], function() {\n\tjQuery.valHooks[ this ] = {\n\t\tset: function( elem, value ) {\n\t\t\tif ( Array.isArray( value ) ) {\n\t\t\t\treturn ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );\n\t\t\t}\n\t\t}\n\t};\n} );\n","import jQuery from '../core.js';\n\n// Cross-browser xml parsing\njQuery.parseXML = function( data ) {\n\tvar xml;\n\tif ( !data || typeof data !== \"string\" ) {\n\t\treturn null;\n\t}\n\n\t// Support: IE 9 - 11+\n\t// IE throws on parseFromString with invalid input.\n\ttry {\n\t\txml = ( new window.DOMParser() ).parseFromString( data, \"text/xml\" );\n\t} catch ( e ) {\n\t\txml = undefined;\n\t}\n\n\tif ( !xml || xml.getElementsByTagName( \"parsererror\" ).length ) {\n\t\tjQuery.error( \"Invalid XML: \" + data );\n\t}\n\treturn xml;\n};\n","import jQuery from \"./core.js\";\nimport access from \"./core/access.js\";\nimport \"./core/init.js\";\n\n\njQuery.fn.extend( {\n\n\ttext: function( value ) {\n\t\treturn access( this, function( value ) {\n\t\t\treturn value === undefined ?\n\t\t\t\tjQuery.text( this ) :\n\t\t\t\tthis.empty().each( function() {\n\t\t\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\t\t\tthis.textContent = value;\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t}, null, value, arguments.length );\n\t}\n} );\n\n\n\nexport default jQuery;\n","import jQuery from './core.js';\n\nimport './selector.js';\nimport './attributes.js';\nimport './core/parseXML.js';\nimport './exports/global.js';\nimport './manipulation.js';\n\n\nexport default jQuery;\n","// For legacy purposes, preserve the UMD of the public API of the Jitsi Meet\n// library (a.k.a. JitsiMeetJS).\nmodule.exports = require('./SariskaMediaTransport').default;\n","/**\n * A model for keeping track of each user's total\n * time as a dominant speaker. The model also\n * keeps track of the user's last known name\n * in case the user has left the meeting,\n * which is also tracked.\n */\nclass SpeakerStats {\n    /**\n     * Initializes a new SpeakerStats instance.\n     *\n     * @constructor\n     * @param {string} userId - The id of the user being tracked.\n     * @param {string} displayName - The name of the user being tracked.\n     * @param {boolean} isLocalStats - True if the stats model tracks\n     * the local user.\n     * @returns {void}\n     */\n    constructor(userId, displayName, isLocalStats) {\n        this._userId = userId;\n        this.setDisplayName(displayName);\n        this._isLocalStats = isLocalStats || false;\n        this.setDominantSpeaker(false);\n        this.totalDominantSpeakerTime = 0;\n        this._dominantSpeakerStart = 0;\n        this._hasLeft = false;\n        this._facialExpressions = {\n            happy: 0,\n            neutral: 0,\n            surprised: 0,\n            angry: 0,\n            fearful: 0,\n            disgusted: 0,\n            sad: 0\n        };\n    }\n\n    /**\n     * Get the user id being tracked.\n     *\n     * @returns {string} The user id.\n     */\n    getUserId() {\n        return this._userId;\n    }\n\n    /**\n     * Get the name of the user being tracked.\n     *\n     * @returns {string} The user name.\n     */\n    getDisplayName() {\n        return this.displayName;\n    }\n\n    /**\n     * Updates the last known name of the user being tracked.\n     *\n     * @param {string} - The user name.\n     * @returns {void}\n     */\n    setDisplayName(newName) {\n        this.displayName = newName;\n    }\n\n    /**\n     * Returns true if the stats are tracking the local user.\n     *\n     * @returns {boolean}\n     */\n    isLocalStats() {\n        return this._isLocalStats;\n    }\n\n    /**\n     * Returns true if the tracked user is currently a dominant speaker.\n     *\n     * @returns {boolean}\n     */\n    isDominantSpeaker() {\n        return this._dominantSpeakerStart > 0;\n    }\n\n    /**\n     * Returns true if the tracked user is currently a dominant speaker.\n     *\n     * @param {boolean} - If true, the user will being accumulating time\n     * as dominant speaker. If false, the user will not accumulate time\n     * and will record any time accumulated since starting as dominant speaker.\n     * @returns {void}\n     */\n    setDominantSpeaker(isNowDominantSpeaker) {\n        if (!this.isDominantSpeaker() && isNowDominantSpeaker) {\n            this._dominantSpeakerStart = Date.now();\n        } else if (this.isDominantSpeaker() && !isNowDominantSpeaker) {\n            const now = Date.now();\n            const timeElapsed = now - this._dominantSpeakerStart;\n\n            this.totalDominantSpeakerTime += timeElapsed;\n            this._dominantSpeakerStart = 0;\n        }\n    }\n\n    /**\n     * Get how long the tracked user has been dominant speaker.\n     *\n     * @returns {number} - The speaker time in milliseconds.\n     */\n    getTotalDominantSpeakerTime() {\n        let total = this.totalDominantSpeakerTime;\n\n        if (this.isDominantSpeaker()) {\n            total += Date.now() - this._dominantSpeakerStart;\n        }\n\n        return total;\n    }\n\n    /**\n     * Get whether or not the user is still in the meeting.\n     *\n     * @returns {boolean} True if the user is no longer in the meeting.\n     */\n    hasLeft() {\n        return this._hasLeft;\n    }\n\n    /**\n     * Set the user as having left the meeting.\n     *\n     * @returns {void}\n     */\n    markAsHasLeft() {\n        this._hasLeft = true;\n        this.setDominantSpeaker(false);\n    }\n\n    /**\n     * Gets the facial expressions of the user.\n     *\n     * @returns {Object}\n     */\n    getFacialExpressions() {\n        return this._facialExpressions;\n    }\n\n    /**\n     * Sets the facial expressions of the user.\n     *\n     * @param {Object} facialExpressions - object with facial expressions.\n     * @returns {void}\n     */\n    setFacialExpressions(facialExpressions) {\n        this._facialExpressions = facialExpressions;\n    }\n\n    /**\n     * Adds a new facial expression to speaker stats.\n     *\n     * @param  {string} facialExpression\n     * @param {number} duration\n     */\n    addFacialExpression(facialExpression, duration) {\n        this._facialExpressions[facialExpression] += duration;\n    }\n}\n\nmodule.exports = SpeakerStats;\n","var createTFLiteSIMDModule=function(){var e=\"undefined\"!=typeof document&&document.currentScript?document.currentScript.src:void 0;return\"undefined\"!=typeof __filename&&(e=e||__filename),function(n){var t,r,a=void 0!==(n=n||{})?n:{};a.ready=new Promise(function(e,n){t=e,r=n});var o,s={};for(o in a)a.hasOwnProperty(o)&&(s[o]=a[o]);var u,i=[],c=\"./this.program\",f=function(e,n){throw n},p=!1,l=!1;p=\"object\"==typeof window,l=\"function\"==typeof importScripts,u=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node;var d,m,y=\"\";!p&&!u&&!l?(\"undefined\"!=typeof read&&function(e){return read(e)},m=function(e){var n,t;return\"function\"==typeof readbuffer?new Uint8Array(readbuffer(e)):(n=read(e,\"binary\"),\"object\"==typeof n||k(\"Assertion failed: \"+t),n)},\"undefined\"!=typeof scriptArgs?i=scriptArgs:void 0!==arguments&&(i=arguments),\"function\"==typeof quit&&(f=function(e){quit(e)}),\"undefined\"!=typeof print&&(\"undefined\"==typeof console&&(console={}),console.log=print,console.warn=console.error=\"undefined\"!=typeof printErr?printErr:print)):(p||l)&&(l?y=self.location.href:\"undefined\"!=typeof document&&document.currentScript&&(y=document.currentScript.src),e&&(y=e),y=0!==y.indexOf(\"blob:\")?y.substr(0,y.lastIndexOf(\"/\")+1):\"\",function(e){var n=new XMLHttpRequest;return n.open(\"GET\",e,!1),n.send(null),n.responseText},l&&(m=function(e){var n=new XMLHttpRequest;return n.open(\"GET\",e,!1),n.responseType=\"arraybuffer\",n.send(null),new Uint8Array(n.response)}),d=function(e,n,t){var r=new XMLHttpRequest;r.open(\"GET\",e,!0),r.responseType=\"arraybuffer\",r.onload=function(){200==r.status||0==r.status&&r.response?n(r.response):t()},r.onerror=t,r.send(null)});var g,h,v,w=a.print||console.log.bind(console),b=a.printErr||console.warn.bind(console);for(o in s)s.hasOwnProperty(o)&&(a[o]=s[o]);s=null,a.arguments&&(i=a.arguments),a.thisProgram&&(c=a.thisProgram),a.quit&&(f=a.quit),a.wasmBinary&&(g=a.wasmBinary),a.noExitRuntime&&(h=a.noExitRuntime),\"object\"!=typeof WebAssembly&&k(\"no native wasm support detected\");var _=!1;var A,I,M,E,R=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0;function S(e,n,t){for(var r=n+t,a=n;e[a]&&!(a>=r);)++a;if(a-n>16&&e.subarray&&R)return R.decode(e.subarray(n,a));for(var o=\"\";n<a;){var s=e[n++];if(128&s){var u=63&e[n++];if(192!=(224&s)){var i=63&e[n++];if((s=224==(240&s)?(15&s)<<12|u<<6|i:(7&s)<<18|u<<12|i<<6|63&e[n++])<65536)o+=String.fromCharCode(s);else{var c=s-65536;o+=String.fromCharCode(55296|c>>10,56320|1023&c)}}else o+=String.fromCharCode((31&s)<<6|u)}else o+=String.fromCharCode(s)}return o}function O(e){A=e,a.HEAP8=I=new Int8Array(e),a.HEAP16=new Int16Array(e),a.HEAP32=E=new Int32Array(e),a.HEAPU8=M=new Uint8Array(e),a.HEAPU16=new Uint16Array(e),a.HEAPU32=new Uint32Array(e),a.HEAPF32=new Float32Array(e),a.HEAPF64=new Float64Array(e)}a.INITIAL_MEMORY;var C,T=[],x=[],P=[],H=[];x.push({func:function(){ne()}});var W=0,D=null,L=null;function k(e){a.onAbort&&a.onAbort(e),b(e+=\"\"),_=!0,1,e=\"abort(\"+e+\"). Build with -s ASSERTIONS=1 for more info.\";var n=new WebAssembly.RuntimeError(e);throw r(n),n}function U(e,n){return String.prototype.startsWith?e.startsWith(n):0===e.indexOf(n)}a.preloadedImages={},a.preloadedAudios={};var j=\"data:application/octet-stream;base64,\";function F(e){return U(e,j)}var q=\"file://\";function B(e){return U(e,q)}var N,G=\"https://sdk.sariska.io/tflite-simd.wasm\";function z(e){try{if(e==G&&g)return new Uint8Array(g);if(m)return m(e);throw\"both async and sync fetching of the wasm failed\"}catch(e){k(e)}}function X(e){for(;e.length>0;){var n=e.shift();if(\"function\"!=typeof n){var t=n.func;\"number\"==typeof t?void 0===n.arg?C.get(t)():C.get(t)(n.arg):t(void 0===n.arg?null:n.arg)}else n(a)}}F(G)||(G=G),N=u?function(){var e=process.hrtime();return 1e3*e[0]+e[1]/1e6}:\"undefined\"!=typeof dateNow?dateNow:function(){return performance.now()};var Y=!0;function J(e){return E[te()>>2]=e,e}function K(e){try{return v.grow(e-A.byteLength+65535>>>16),O(v.buffer),1}catch(e){}}var Q={};function V(){if(!V.strings){var e={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:c||\"./this.program\"};for(var n in Q)e[n]=Q[n];var t=[];for(var n in e)t.push(n+\"=\"+e[n]);V.strings=t}return V.strings}var Z={mappings:{},buffers:[null,[],[]],printChar:function(e,n){var t=Z.buffers[e];0===n||10===n?((1===e?w:b)(S(t,0)),t.length=0):t.push(n)},varargs:void 0,get:function(){return Z.varargs+=4,E[Z.varargs-4>>2]},getStr:function(e){return function(e,n){return e?S(M,e,n):\"\"}(e)},get64:function(e,n){return e}};var $,ee={a:function(){k()},n:function(e,n){var t;if(0===e)t=Date.now();else{if(1!==e&&4!==e||!Y)return J(28),-1;t=N()}return E[n>>2]=t/1e3|0,E[n+4>>2]=t%1e3*1e3*1e3|0,0},i:function(e,n){k(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},e:function(e,n){k(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},l:function(e,n,t){M.copyWithin(e,n,n+t)},m:function(e){e>>>=0;var n=M.length;if(e>2147483648)return!1;for(var t,r,a=1;a<=4;a*=2){var o=n*(1+.2/a);if(o=Math.min(o,e+100663296),K(Math.min(2147483648,((t=Math.max(16777216,e,o))%(r=65536)>0&&(t+=r-t%r),t))))return!0}return!1},o:function(e){for(var n=N();N()-n<e;);},p:function(e,n){var t=0;return V().forEach(function(r,a){var o=n+t;E[e+4*a>>2]=o,function(e,n,t){for(var r=0;r<e.length;++r)I[n++>>0]=e.charCodeAt(r);t||(I[n>>0]=0)}(r,o),t+=r.length+1}),0},g:function(e,n){var t=V();E[e>>2]=t.length;var r=0;return t.forEach(function(e){r+=e.length+1}),E[n>>2]=r,0},j:function(e){!function(e,n){n&&h&&0===e||(h||(e,!0,a.onExit&&a.onExit(e),_=!0),f(e,new re(e)))}(e)},h:function(e){return 0},k:function(e,n,t,r,a){},c:function(e,n,t,r){for(var a=0,o=0;o<t;o++){for(var s=E[n+8*o>>2],u=E[n+(8*o+4)>>2],i=0;i<u;i++)Z.printChar(e,M[s+i]);a+=u}return E[r>>2]=a,0},d:function(){return 6},f:function(){return 28},b:function(e){switch(e){case 30:return 16384;case 85:return 131072;case 132:case 133:case 12:case 137:case 138:case 15:case 235:case 16:case 17:case 18:case 19:case 20:case 149:case 13:case 10:case 236:case 153:case 9:case 21:case 22:case 159:case 154:case 14:case 77:case 78:case 139:case 82:case 68:case 67:case 164:case 11:case 29:case 47:case 48:case 95:case 52:case 51:case 46:return 200809;case 27:case 246:case 127:case 128:case 23:case 24:case 160:case 161:case 181:case 182:case 242:case 183:case 184:case 243:case 244:case 245:case 165:case 178:case 179:case 49:case 50:case 168:case 169:case 175:case 170:case 171:case 172:case 97:case 76:case 32:case 173:case 35:case 80:case 81:case 79:return-1;case 176:case 177:case 7:case 155:case 8:case 157:case 125:case 126:case 92:case 93:case 129:case 130:case 131:case 94:case 91:return 1;case 74:case 60:case 69:case 70:case 4:return 1024;case 31:case 42:case 72:return 32;case 87:case 26:case 33:return 2147483647;case 34:case 1:return 47839;case 38:case 36:return 99;case 43:case 37:return 2048;case 0:return 2097152;case 3:return 65536;case 28:return 32768;case 44:return 32767;case 75:return 16384;case 39:return 1e3;case 89:return 700;case 71:return 256;case 40:return 255;case 2:return 100;case 180:return 64;case 25:return 20;case 5:return 16;case 6:return 6;case 73:return 4;case 84:return\"object\"==typeof navigator&&navigator.hardwareConcurrency||1}return J(28),-1}},ne=(function(){var e={a:ee};function n(e,n){var t=e.exports;a.asm=t,O((v=a.asm.q).buffer),C=a.asm.D,function(e){if(W--,a.monitorRunDependencies&&a.monitorRunDependencies(W),0==W&&(null!==D&&(clearInterval(D),D=null),L)){var n=L;L=null,n()}}()}function t(e){n(e.instance)}function o(n){return function(){if(!g&&(p||l)){if(\"function\"==typeof fetch&&!B(G))return fetch(G,{credentials:\"same-origin\"}).then(function(e){if(!e.ok)throw\"failed to load wasm binary file at '\"+G+\"'\";return e.arrayBuffer()}).catch(function(){return z(G)});if(d)return new Promise(function(e,n){d(G,function(n){e(new Uint8Array(n))},n)})}return Promise.resolve().then(function(){return z(G)})}().then(function(n){return WebAssembly.instantiate(n,e)}).then(n,function(e){b(\"failed to asynchronously prepare wasm: \"+e),k(e)})}if(W++,a.monitorRunDependencies&&a.monitorRunDependencies(W),a.instantiateWasm)try{return a.instantiateWasm(e,n)}catch(e){return b(\"Module.instantiateWasm callback failed with error: \"+e),!1}(g||\"function\"!=typeof WebAssembly.instantiateStreaming||F(G)||B(G)||\"function\"!=typeof fetch?o(t):fetch(G,{credentials:\"same-origin\"}).then(function(n){return WebAssembly.instantiateStreaming(n,e).then(t,function(e){return b(\"wasm streaming compile failed: \"+e),b(\"falling back to ArrayBuffer instantiation\"),o(t)})})).catch(r)}(),a.___wasm_call_ctors=function(){return(ne=a.___wasm_call_ctors=a.asm.r).apply(null,arguments)}),te=(a._getModelBufferMemoryOffset=function(){return(a._getModelBufferMemoryOffset=a.asm.s).apply(null,arguments)},a._getInputMemoryOffset=function(){return(a._getInputMemoryOffset=a.asm.t).apply(null,arguments)},a._getInputHeight=function(){return(a._getInputHeight=a.asm.u).apply(null,arguments)},a._getInputWidth=function(){return(a._getInputWidth=a.asm.v).apply(null,arguments)},a._getInputChannelCount=function(){return(a._getInputChannelCount=a.asm.w).apply(null,arguments)},a._getOutputMemoryOffset=function(){return(a._getOutputMemoryOffset=a.asm.x).apply(null,arguments)},a._getOutputHeight=function(){return(a._getOutputHeight=a.asm.y).apply(null,arguments)},a._getOutputWidth=function(){return(a._getOutputWidth=a.asm.z).apply(null,arguments)},a._getOutputChannelCount=function(){return(a._getOutputChannelCount=a.asm.A).apply(null,arguments)},a._loadModel=function(){return(a._loadModel=a.asm.B).apply(null,arguments)},a._runInference=function(){return(a._runInference=a.asm.C).apply(null,arguments)},a.___errno_location=function(){return(te=a.___errno_location=a.asm.E).apply(null,arguments)});function re(e){this.name=\"ExitStatus\",this.message=\"Program terminated with exit(\"+e+\")\",this.status=e}function ae(e){function n(){$||($=!0,a.calledRun=!0,_||(!0,X(x),X(P),t(a),a.onRuntimeInitialized&&a.onRuntimeInitialized(),function(){if(a.postRun)for(\"function\"==typeof a.postRun&&(a.postRun=[a.postRun]);a.postRun.length;)e=a.postRun.shift(),H.unshift(e);var e;X(H)}()))}e=e||i,W>0||(!function(){if(a.preRun)for(\"function\"==typeof a.preRun&&(a.preRun=[a.preRun]);a.preRun.length;)e=a.preRun.shift(),T.unshift(e);var e;X(T)}(),W>0||(a.setStatus?(a.setStatus(\"Running...\"),setTimeout(function(){setTimeout(function(){a.setStatus(\"\")},1),n()},1)):n()))}if(L=function e(){$||ae(),$||(L=e)},a.run=ae,a.preInit)for(\"function\"==typeof a.preInit&&(a.preInit=[a.preInit]);a.preInit.length>0;)a.preInit.pop()();return h=!0,ae(),n.ready}}();\"object\"==typeof exports&&\"object\"==typeof module?module.exports=createTFLiteSIMDModule:\"function\"==typeof define&&define.amd?define([],function(){return createTFLiteSIMDModule}):\"object\"==typeof exports&&(exports.createTFLiteSIMDModule=createTFLiteSIMDModule);","var createTFLiteModule=function(){var e=\"undefined\"!=typeof document&&document.currentScript?document.currentScript.src:void 0;return\"undefined\"!=typeof __filename&&(e=e||__filename),function(n){var t,r,a=void 0!==(n=n||{})?n:{};a.ready=new Promise(function(e,n){t=e,r=n});var o,u={};for(o in a)a.hasOwnProperty(o)&&(u[o]=a[o]);var s,i=[],c=\"./this.program\",f=function(e,n){throw n},p=!1,l=!1;p=\"object\"==typeof window,l=\"function\"==typeof importScripts,s=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node;var d,m,y=\"\";!p&&!s&&!l?(\"undefined\"!=typeof read&&function(e){return read(e)},m=function(e){var n,t;return\"function\"==typeof readbuffer?new Uint8Array(readbuffer(e)):(n=read(e,\"binary\"),\"object\"==typeof n||U(\"Assertion failed: \"+t),n)},\"undefined\"!=typeof scriptArgs?i=scriptArgs:void 0!==arguments&&(i=arguments),\"function\"==typeof quit&&(f=function(e){quit(e)}),\"undefined\"!=typeof print&&(\"undefined\"==typeof console&&(console={}),console.log=print,console.warn=console.error=\"undefined\"!=typeof printErr?printErr:print)):(p||l)&&(l?y=self.location.href:\"undefined\"!=typeof document&&document.currentScript&&(y=document.currentScript.src),e&&(y=e),y=0!==y.indexOf(\"blob:\")?y.substr(0,y.lastIndexOf(\"/\")+1):\"\",function(e){var n=new XMLHttpRequest;return n.open(\"GET\",e,!1),n.send(null),n.responseText},l&&(m=function(e){var n=new XMLHttpRequest;return n.open(\"GET\",e,!1),n.responseType=\"arraybuffer\",n.send(null),new Uint8Array(n.response)}),d=function(e,n,t){var r=new XMLHttpRequest;r.open(\"GET\",e,!0),r.responseType=\"arraybuffer\",r.onload=function(){200==r.status||0==r.status&&r.response?n(r.response):t()},r.onerror=t,r.send(null)});var g,h,v,w=a.print||console.log.bind(console),b=a.printErr||console.warn.bind(console);for(o in u)u.hasOwnProperty(o)&&(a[o]=u[o]);u=null,a.arguments&&(i=a.arguments),a.thisProgram&&(c=a.thisProgram),a.quit&&(f=a.quit),a.wasmBinary&&(g=a.wasmBinary),a.noExitRuntime&&(h=a.noExitRuntime),\"object\"!=typeof WebAssembly&&U(\"no native wasm support detected\");var _=!1;var A,E,R,I,M=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0;function O(e,n,t){for(var r=n+t,a=n;e[a]&&!(a>=r);)++a;if(a-n>16&&e.subarray&&M)return M.decode(e.subarray(n,a));for(var o=\"\";n<a;){var u=e[n++];if(128&u){var s=63&e[n++];if(192!=(224&u)){var i=63&e[n++];if((u=224==(240&u)?(15&u)<<12|s<<6|i:(7&u)<<18|s<<12|i<<6|63&e[n++])<65536)o+=String.fromCharCode(u);else{var c=u-65536;o+=String.fromCharCode(55296|c>>10,56320|1023&c)}}else o+=String.fromCharCode((31&u)<<6|s)}else o+=String.fromCharCode(u)}return o}function C(e){A=e,a.HEAP8=E=new Int8Array(e),a.HEAP16=new Int16Array(e),a.HEAP32=I=new Int32Array(e),a.HEAPU8=R=new Uint8Array(e),a.HEAPU16=new Uint16Array(e),a.HEAPU32=new Uint32Array(e),a.HEAPF32=new Float32Array(e),a.HEAPF64=new Float64Array(e)}a.INITIAL_MEMORY;var S,T=[],x=[],P=[],H=[];x.push({func:function(){ne()}});var W=0,L=null,k=null;function U(e){a.onAbort&&a.onAbort(e),b(e+=\"\"),_=!0,1,e=\"abort(\"+e+\"). Build with -s ASSERTIONS=1 for more info.\";var n=new WebAssembly.RuntimeError(e);throw r(n),n}function j(e,n){return String.prototype.startsWith?e.startsWith(n):0===e.indexOf(n)}a.preloadedImages={},a.preloadedAudios={};var F=\"data:application/octet-stream;base64,\";function D(e){return j(e,F)}var q=\"file://\";function B(e){return j(e,q)}var N,G=\"https://sdk.sariska.io/tflite.wasm\";function z(e){try{if(e==G&&g)return new Uint8Array(g);if(m)return m(e);throw\"both async and sync fetching of the wasm failed\"}catch(e){U(e)}}function X(e){for(;e.length>0;){var n=e.shift();if(\"function\"!=typeof n){var t=n.func;\"number\"==typeof t?void 0===n.arg?S.get(t)():S.get(t)(n.arg):t(void 0===n.arg?null:n.arg)}else n(a)}}D(G)||(G=G),N=s?function(){var e=process.hrtime();return 1e3*e[0]+e[1]/1e6}:\"undefined\"!=typeof dateNow?dateNow:function(){return performance.now()};var Y=!0;function J(e){return I[te()>>2]=e,e}function K(e){try{return v.grow(e-A.byteLength+65535>>>16),C(v.buffer),1}catch(e){}}var Q={};function V(){if(!V.strings){var e={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:c||\"./this.program\"};for(var n in Q)e[n]=Q[n];var t=[];for(var n in e)t.push(n+\"=\"+e[n]);V.strings=t}return V.strings}var Z={mappings:{},buffers:[null,[],[]],printChar:function(e,n){var t=Z.buffers[e];0===n||10===n?((1===e?w:b)(O(t,0)),t.length=0):t.push(n)},varargs:void 0,get:function(){return Z.varargs+=4,I[Z.varargs-4>>2]},getStr:function(e){return function(e,n){return e?O(R,e,n):\"\"}(e)},get64:function(e,n){return e}};var $,ee={a:function(){U()},n:function(e,n){var t;if(0===e)t=Date.now();else{if(1!==e&&4!==e||!Y)return J(28),-1;t=N()}return I[n>>2]=t/1e3|0,I[n+4>>2]=t%1e3*1e3*1e3|0,0},i:function(e,n){U(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},e:function(e,n){U(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},l:function(e,n,t){R.copyWithin(e,n,n+t)},m:function(e){e>>>=0;var n=R.length;if(e>2147483648)return!1;for(var t,r,a=1;a<=4;a*=2){var o=n*(1+.2/a);if(o=Math.min(o,e+100663296),K(Math.min(2147483648,((t=Math.max(16777216,e,o))%(r=65536)>0&&(t+=r-t%r),t))))return!0}return!1},o:function(e){for(var n=N();N()-n<e;);},p:function(e,n){var t=0;return V().forEach(function(r,a){var o=n+t;I[e+4*a>>2]=o,function(e,n,t){for(var r=0;r<e.length;++r)E[n++>>0]=e.charCodeAt(r);t||(E[n>>0]=0)}(r,o),t+=r.length+1}),0},g:function(e,n){var t=V();I[e>>2]=t.length;var r=0;return t.forEach(function(e){r+=e.length+1}),I[n>>2]=r,0},j:function(e){!function(e,n){n&&h&&0===e||(h||(e,!0,a.onExit&&a.onExit(e),_=!0),f(e,new re(e)))}(e)},h:function(e){return 0},k:function(e,n,t,r,a){},c:function(e,n,t,r){for(var a=0,o=0;o<t;o++){for(var u=I[n+8*o>>2],s=I[n+(8*o+4)>>2],i=0;i<s;i++)Z.printChar(e,R[u+i]);a+=s}return I[r>>2]=a,0},d:function(){return 6},f:function(){return 28},b:function(e){switch(e){case 30:return 16384;case 85:return 131072;case 132:case 133:case 12:case 137:case 138:case 15:case 235:case 16:case 17:case 18:case 19:case 20:case 149:case 13:case 10:case 236:case 153:case 9:case 21:case 22:case 159:case 154:case 14:case 77:case 78:case 139:case 82:case 68:case 67:case 164:case 11:case 29:case 47:case 48:case 95:case 52:case 51:case 46:return 200809;case 27:case 246:case 127:case 128:case 23:case 24:case 160:case 161:case 181:case 182:case 242:case 183:case 184:case 243:case 244:case 245:case 165:case 178:case 179:case 49:case 50:case 168:case 169:case 175:case 170:case 171:case 172:case 97:case 76:case 32:case 173:case 35:case 80:case 81:case 79:return-1;case 176:case 177:case 7:case 155:case 8:case 157:case 125:case 126:case 92:case 93:case 129:case 130:case 131:case 94:case 91:return 1;case 74:case 60:case 69:case 70:case 4:return 1024;case 31:case 42:case 72:return 32;case 87:case 26:case 33:return 2147483647;case 34:case 1:return 47839;case 38:case 36:return 99;case 43:case 37:return 2048;case 0:return 2097152;case 3:return 65536;case 28:return 32768;case 44:return 32767;case 75:return 16384;case 39:return 1e3;case 89:return 700;case 71:return 256;case 40:return 255;case 2:return 100;case 180:return 64;case 25:return 20;case 5:return 16;case 6:return 6;case 73:return 4;case 84:return\"object\"==typeof navigator&&navigator.hardwareConcurrency||1}return J(28),-1}},ne=(function(){var e={a:ee};function n(e,n){var t=e.exports;a.asm=t,C((v=a.asm.q).buffer),S=a.asm.D,function(e){if(W--,a.monitorRunDependencies&&a.monitorRunDependencies(W),0==W&&(null!==L&&(clearInterval(L),L=null),k)){var n=k;k=null,n()}}()}function t(e){n(e.instance)}function o(n){return function(){if(!g&&(p||l)){if(\"function\"==typeof fetch&&!B(G))return fetch(G,{credentials:\"same-origin\"}).then(function(e){if(!e.ok)throw\"failed to load wasm binary file at '\"+G+\"'\";return e.arrayBuffer()}).catch(function(){return z(G)});if(d)return new Promise(function(e,n){d(G,function(n){e(new Uint8Array(n))},n)})}return Promise.resolve().then(function(){return z(G)})}().then(function(n){return WebAssembly.instantiate(n,e)}).then(n,function(e){b(\"failed to asynchronously prepare wasm: \"+e),U(e)})}if(W++,a.monitorRunDependencies&&a.monitorRunDependencies(W),a.instantiateWasm)try{return a.instantiateWasm(e,n)}catch(e){return b(\"Module.instantiateWasm callback failed with error: \"+e),!1}(g||\"function\"!=typeof WebAssembly.instantiateStreaming||D(G)||B(G)||\"function\"!=typeof fetch?o(t):fetch(G,{credentials:\"same-origin\"}).then(function(n){return WebAssembly.instantiateStreaming(n,e).then(t,function(e){return b(\"wasm streaming compile failed: \"+e),b(\"falling back to ArrayBuffer instantiation\"),o(t)})})).catch(r)}(),a.___wasm_call_ctors=function(){return(ne=a.___wasm_call_ctors=a.asm.r).apply(null,arguments)}),te=(a._getModelBufferMemoryOffset=function(){return(a._getModelBufferMemoryOffset=a.asm.s).apply(null,arguments)},a._getInputMemoryOffset=function(){return(a._getInputMemoryOffset=a.asm.t).apply(null,arguments)},a._getInputHeight=function(){return(a._getInputHeight=a.asm.u).apply(null,arguments)},a._getInputWidth=function(){return(a._getInputWidth=a.asm.v).apply(null,arguments)},a._getInputChannelCount=function(){return(a._getInputChannelCount=a.asm.w).apply(null,arguments)},a._getOutputMemoryOffset=function(){return(a._getOutputMemoryOffset=a.asm.x).apply(null,arguments)},a._getOutputHeight=function(){return(a._getOutputHeight=a.asm.y).apply(null,arguments)},a._getOutputWidth=function(){return(a._getOutputWidth=a.asm.z).apply(null,arguments)},a._getOutputChannelCount=function(){return(a._getOutputChannelCount=a.asm.A).apply(null,arguments)},a._loadModel=function(){return(a._loadModel=a.asm.B).apply(null,arguments)},a._runInference=function(){return(a._runInference=a.asm.C).apply(null,arguments)},a.___errno_location=function(){return(te=a.___errno_location=a.asm.E).apply(null,arguments)});function re(e){this.name=\"ExitStatus\",this.message=\"Program terminated with exit(\"+e+\")\",this.status=e}function ae(e){function n(){$||($=!0,a.calledRun=!0,_||(!0,X(x),X(P),t(a),a.onRuntimeInitialized&&a.onRuntimeInitialized(),function(){if(a.postRun)for(\"function\"==typeof a.postRun&&(a.postRun=[a.postRun]);a.postRun.length;)e=a.postRun.shift(),H.unshift(e);var e;X(H)}()))}e=e||i,W>0||(!function(){if(a.preRun)for(\"function\"==typeof a.preRun&&(a.preRun=[a.preRun]);a.preRun.length;)e=a.preRun.shift(),T.unshift(e);var e;X(T)}(),W>0||(a.setStatus?(a.setStatus(\"Running...\"),setTimeout(function(){setTimeout(function(){a.setStatus(\"\")},1),n()},1)):n()))}if(k=function e(){$||ae(),$||(k=e)},a.run=ae,a.preInit)for(\"function\"==typeof a.preInit&&(a.preInit=[a.preInit]);a.preInit.length>0;)a.preInit.pop()();return h=!0,ae(),n.ready}}();\"object\"==typeof exports&&\"object\"==typeof module?module.exports=createTFLiteModule:\"function\"==typeof define&&define.amd?define([],function(){return createTFLiteModule}):\"object\"==typeof exports&&(exports.createTFLiteModule=createTFLiteModule);","const AuthUtil = {\n    /**\n     * Creates the URL pointing to JWT token authentication service. It is\n     * formatted from the 'urlPattern' argument which can contain the following\n     * constants:\n     * '{room}' - name of the conference room passed as <tt>roomName</tt>\n     * argument to this method.\n     * '{roleUpgrade}' - will contain 'true' if the URL will be used for\n     * the role upgrade scenario, where user connects from anonymous domain and\n     * then gets upgraded to the moderator by logging-in from the popup window.\n     *\n     * @param urlPattern a URL pattern pointing to the login service\n     * @param roomName the name of the conference room for which the user will\n     * be authenticated\n     * @param {bool} roleUpgrade <tt>true</tt> if the URL will be used for role\n     * upgrade scenario, where the user logs-in from the popup window in order\n     * to have the moderator rights granted\n     *\n     * @returns {string|null} the URL pointing to JWT login service or\n     * <tt>null</tt> if 'urlPattern' is not a string and the URL can not be\n     * constructed.\n     */\n    getTokenAuthUrl(urlPattern, roomName, roleUpgrade) {\n        const url = urlPattern;\n\n        if (typeof url !== 'string') {\n            return null;\n        }\n\n        return url.replace('{room}', roomName)\n            .replace('{roleUpgrade}', roleUpgrade === true);\n    }\n};\n\nmodule.exports = AuthUtil;\n","/**\n * Implements utility to forward events from one eventEmitter to another.\n * @param src {object} instance of EventEmitter or another class that implements\n * addListener method which will register listener to EventEmitter instance.\n * @param dest {object} instance of EventEmitter or another class that\n * implements emit method which will emit an event.\n */\nfunction EventEmitterForwarder(src, dest) {\n    if (!src || !dest || typeof src.addListener !== 'function'\n        || typeof dest.emit !== 'function') {\n        throw new Error('Invalid arguments passed to EventEmitterForwarder');\n    }\n    this.src = src;\n    this.dest = dest;\n}\n\n/**\n * Adds event to be forwarded from src to dest.\n * @param srcEvent {string} the event that EventEmitterForwarder is listening\n * for.\n * @param dstEvent {string} the event that will be fired from dest.\n * @param arguments all other passed arguments are going to be fired with\n * dstEvent.\n */\nEventEmitterForwarder.prototype.forward = function(...args) {\n    const srcEvent = args[0];\n\n    // This will be the \"this\" value for emit function.\n\n    args[0] = this.dest;\n\n    // Using bind.apply to pass the arguments as Array-like object (\"arguments\")\n    this.src.addListener(\n        srcEvent,\n        Function.prototype.bind.apply(this.dest.emit, args));\n};\n\nmodule.exports = EventEmitterForwarder;\n","/**\n * This utility class defines custom onerror and onunhandledrejection functions.\n * The custom error handlers respect the previously-defined error handlers.\n * GlobalOnErrorHandler class provides utilities to add many custom error\n * handlers and to execute the error handlers directly.\n */\n\n\n/**\n * List with global error handlers that will be executed.\n */\nconst handlers = [];\n\n// If an old handler exists, also fire its events.\nconst oldOnErrorHandler = window.onerror;\n\n/**\n * Custom error handler that calls the old global error handler and executes\n * all handlers that were previously added.\n */\nfunction JitsiGlobalErrorHandler(...args) {\n    handlers.forEach(handler => handler(...args));\n    oldOnErrorHandler && oldOnErrorHandler(...args);\n}\n\n// If an old handler exists, also fire its events.\nconst oldOnUnhandledRejection = window.onunhandledrejection;\n\n/**\n * Custom handler that calls the old global handler and executes all handlers\n * that were previously added. This handler handles rejected Promises.\n */\nfunction JitsiGlobalUnhandledRejection(event) {\n    handlers.forEach(handler => handler(null, null, null, null, event.reason));\n    oldOnUnhandledRejection && oldOnUnhandledRejection(event);\n}\n\n// Setting the custom error handlers.\nwindow.onerror = JitsiGlobalErrorHandler;\nwindow.onunhandledrejection = JitsiGlobalUnhandledRejection;\n\nconst GlobalOnErrorHandler = {\n    /**\n     * Adds new error handlers.\n     * @param handler the new handler.\n     */\n    addHandler(handler) {\n        handlers.push(handler);\n    },\n\n    /**\n     * Calls the global error handler if there is one.\n     * @param error the error to pass to the error handler\n     */\n    callErrorHandler(error) {\n        const errHandler = window.onerror;\n\n        if (!errHandler) {\n            return;\n        }\n        errHandler(null, null, null, null, error);\n    },\n\n    /**\n     * Calls the global rejection handler if there is one.\n     * @param error the error to pass to the rejection handler.\n     */\n    callUnhandledRejectionHandler(error) {\n        const errHandler = window.onunhandledrejection;\n\n        if (!errHandler) {\n            return;\n        }\n        errHandler(error);\n    }\n};\n\n\nmodule.exports = GlobalOnErrorHandler;\n","/**\n * @const\n */\nconst ALPHANUM\n    = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\n/**\n * Hexadecimal digits.\n * @const\n */\nconst HEX_DIGITS = '0123456789abcdef';\n\n/**\n * Generates random int within the range [min, max]\n * @param min the minimum value for the generated number\n * @param max the maximum value for the generated number\n * @returns random int number\n */\nfunction randomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n/**\n * Get random element from array or string.\n * @param {Array|string} arr source\n * @returns array element or string character\n */\nfunction randomElement(arr) {\n    return arr[randomInt(0, arr.length - 1)];\n}\n\n/**\n * Generate random alphanumeric string.\n * @param {number} length expected string length\n * @returns {string} random string of specified length\n */\nfunction randomAlphanumStr(length) {\n    let result = '';\n\n    for (let i = 0; i < length; i += 1) {\n        result += randomElement(ALPHANUM);\n    }\n\n    return result;\n}\n\n/**\n * Exported interface.\n */\nconst RandomUtil = {\n    /**\n     * Returns a random hex digit.\n     * @returns {*}\n     */\n    randomHexDigit() {\n        return randomElement(HEX_DIGITS);\n    },\n\n    /**\n     * Returns a random string of hex digits with length 'len'.\n     * @param len the length.\n     */\n    randomHexString(len) {\n        let ret = '';\n\n        while (len--) { // eslint-disable-line no-param-reassign\n            ret += this.randomHexDigit();\n        }\n\n        return ret;\n    },\n    randomElement,\n    randomAlphanumStr,\n    randomInt\n};\n\nmodule.exports = RandomUtil;\n","const currentExecutingScript = require('current-executing-script');\n\n/* eslint-disable max-params */\n\n/**\n * Implements utility functions which facilitate the dealing with scripts such\n * as the download and execution of a JavaScript file.\n */\nconst ScriptUtil = {\n    /**\n     * Loads a script from a specific source.\n     *\n     * @param src the source from the which the script is to be (down)loaded\n     * @param async true to asynchronously load the script or false to\n     * synchronously load the script\n     * @param prepend true to schedule the loading of the script as soon as\n     * possible or false to schedule the loading of the script at the end of the\n     * scripts known at the time\n     * @param relativeURL whether we need load the library from url relative\n     * to the url that lib-jitsi-meet was loaded. Useful when sourcing the\n     * library from different location than the app that is using it\n     * @param loadCallback on load callback function\n     * @param errorCallback callback to be called on error loading the script\n     */\n    loadScript(\n            src,\n            async,\n            prepend,\n            relativeURL,\n            loadCallback,\n            errorCallback) {\n        const d = document;\n        const tagName = 'script';\n        const script = d.createElement(tagName);\n        const referenceNode = d.getElementsByTagName(tagName)[0];\n\n        script.async = async;\n\n        if (relativeURL) {\n            // finds the src url of the current loaded script\n            // and use it as base of the src supplied argument\n            const scriptEl = currentExecutingScript();\n\n            if (scriptEl) {\n                const scriptSrc = scriptEl.src;\n                const baseScriptSrc\n                    = scriptSrc.substring(0, scriptSrc.lastIndexOf('/') + 1);\n\n                if (scriptSrc && baseScriptSrc) {\n                    // eslint-disable-next-line no-param-reassign\n                    src = baseScriptSrc + src;\n                }\n            }\n        }\n\n        if (loadCallback) {\n            script.onload = loadCallback;\n        }\n        if (errorCallback) {\n            script.onerror = errorCallback;\n        }\n\n        script.src = src;\n        if (prepend) {\n            referenceNode.parentNode.insertBefore(script, referenceNode);\n        } else {\n            referenceNode.parentNode.appendChild(script);\n        }\n    }\n};\n\n/* eslint-enable max-params */\n\nmodule.exports = ScriptUtil;\n","/**\n * Implements a simple hash code for a string (see\n * https://en.wikipedia.org/wiki/Java_hashCode()).\n *\n * @param {string} The string to return a hash of.\n * @return {Number} the integer hash code of the string.\n */\nfunction integerHash(string) {\n    if (!string) {\n        return 0;\n    }\n\n    let char, hash = 0, i;\n\n    for (i = 0; i < string.length; i++) {\n        char = string.charCodeAt(i);\n        hash += char * Math.pow(31, string.length - 1 - i);\n        hash = Math.abs(hash | 0); // eslint-disable-line no-bitwise\n    }\n\n    return hash;\n}\n\nmodule.exports = { integerHash };\n","const RandomUtil = require('./RandomUtil');\n\n/**\n * from faker.js - Copyright (c) 2014-2015 Matthew Bergman & Marak Squires\n * MIT License\n * http://github.com/marak/faker.js/\n *\n * @const\n */\nconst names = [\n    'Aaliyah', 'Aaron', 'Abagail', 'Abbey', 'Abbie', 'Abbigail', 'Abby',\n    'Abdiel', 'Abdul', 'Abdullah', 'Abe', 'Abel', 'Abelardo', 'Abigail',\n    'Abigale', 'Abigayle', 'Abner', 'Abraham', 'Ada', 'Adah', 'Adalberto',\n    'Adaline', 'Adam', 'Adan', 'Addie', 'Addison', 'Adela', 'Adelbert', 'Adele',\n    'Adelia', 'Adeline', 'Adell', 'Adella', 'Adelle', 'Aditya', 'Adolf',\n    'Adolfo', 'Adolph', 'Adolphus', 'Adonis', 'Adrain', 'Adrian', 'Adriana',\n    'Adrianna', 'Adriel', 'Adrien', 'Adrienne', 'Afton', 'Aglae', 'Agnes',\n    'Agustin', 'Agustina', 'Ahmad', 'Ahmed', 'Aida', 'Aidan', 'Aiden', 'Aileen',\n    'Aisha', 'Aiyana', 'Akeem', 'Al', 'Alaina', 'Alan', 'Alana', 'Alanis',\n    'Alanna', 'Alayna', 'Alba', 'Albert', 'Alberta', 'Albertha', 'Alberto',\n    'Albin', 'Albina', 'Alda', 'Alden', 'Alec', 'Aleen', 'Alejandra',\n    'Alejandrin', 'Alek', 'Alena', 'Alene', 'Alessandra', 'Alessandro',\n    'Alessia', 'Aletha', 'Alex', 'Alexa', 'Alexander', 'Alexandra', 'Alexandre',\n    'Alexandrea', 'Alexandria', 'Alexandrine', 'Alexandro', 'Alexane',\n    'Alexanne', 'Alexie', 'Alexis', 'Alexys', 'Alexzander', 'Alf', 'Alfonso',\n    'Alfonzo', 'Alford', 'Alfred', 'Alfreda', 'Alfredo', 'Ali', 'Alia', 'Alice',\n    'Alicia', 'Alisa', 'Alisha', 'Alison', 'Alivia', 'Aliya', 'Aliyah', 'Aliza',\n    'Alize', 'Allan', 'Allen', 'Allene', 'Allie', 'Allison', 'Ally', 'Alphonso',\n    'Alta', 'Althea', 'Alva', 'Alvah', 'Alvena', 'Alvera', 'Alverta', 'Alvina',\n    'Alvis', 'Alyce', 'Alycia', 'Alysa', 'Alysha', 'Alyson', 'Alysson',\n    'Amalia', 'Amanda', 'Amani', 'Amara', 'Amari', 'Amaya', 'Amber', 'Ambrose',\n    'Amelia', 'Amelie', 'Amely', 'America', 'Americo', 'Amie', 'Amina', 'Amir',\n    'Amira', 'Amiya', 'Amos', 'Amparo', 'Amy', 'Amya', 'Ana', 'Anabel',\n    'Anabelle', 'Anahi', 'Anais', 'Anastacio', 'Anastasia', 'Anderson', 'Andre',\n    'Andreane', 'Andreanne', 'Andres', 'Andrew', 'Andy', 'Angel', 'Angela',\n    'Angelica', 'Angelina', 'Angeline', 'Angelita', 'Angelo', 'Angie', 'Angus',\n    'Anibal', 'Anika', 'Anissa', 'Anita', 'Aniya', 'Aniyah', 'Anjali', 'Anna',\n    'Annabel', 'Annabell', 'Annabelle', 'Annalise', 'Annamae', 'Annamarie',\n    'Anne', 'Annetta', 'Annette', 'Annie', 'Ansel', 'Ansley', 'Anthony',\n    'Antoinette', 'Antone', 'Antonetta', 'Antonette', 'Antonia', 'Antonietta',\n    'Antonina', 'Antonio', 'Antwan', 'Antwon', 'Anya', 'April', 'Ara',\n    'Araceli', 'Aracely', 'Arch', 'Archibald', 'Ardella', 'Arden', 'Ardith',\n    'Arely', 'Ari', 'Ariane', 'Arianna', 'Aric', 'Ariel', 'Arielle', 'Arjun',\n    'Arlene', 'Arlie', 'Arlo', 'Armand', 'Armando', 'Armani', 'Arnaldo', 'Arne',\n    'Arno', 'Arnold', 'Arnoldo', 'Arnulfo', 'Aron', 'Art', 'Arthur', 'Arturo',\n    'Arvel', 'Arvid', 'Arvilla', 'Aryanna', 'Asa', 'Asha', 'Ashlee', 'Ashleigh',\n    'Ashley', 'Ashly', 'Ashlynn', 'Ashton', 'Ashtyn', 'Asia', 'Assunta',\n    'Astrid', 'Athena', 'Aubree', 'Aubrey', 'Audie', 'Audra', 'Audreanne',\n    'Audrey', 'August', 'Augusta', 'Augustine', 'Augustus', 'Aurelia',\n    'Aurelie', 'Aurelio', 'Aurore', 'Austen', 'Austin', 'Austyn', 'Autumn',\n    'Ava', 'Avery', 'Avis', 'Axel', 'Ayana', 'Ayden', 'Ayla', 'Aylin', 'Baby',\n    'Bailee', 'Bailey', 'Barbara', 'Barney', 'Baron', 'Barrett', 'Barry',\n    'Bart', 'Bartholome', 'Barton', 'Baylee', 'Beatrice', 'Beau', 'Beaulah',\n    'Bell', 'Bella', 'Belle', 'Ben', 'Benedict', 'Benjamin', 'Bennett',\n    'Bennie', 'Benny', 'Benton', 'Berenice', 'Bernadette', 'Bernadine',\n    'Bernard', 'Bernardo', 'Berneice', 'Bernhard', 'Bernice', 'Bernie',\n    'Berniece', 'Bernita', 'Berry', 'Bert', 'Berta', 'Bertha', 'Bertram',\n    'Bertrand', 'Beryl', 'Bessie', 'Beth', 'Bethany', 'Bethel', 'Betsy',\n    'Bette', 'Bettie', 'Betty', 'Bettye', 'Beulah', 'Beverly', 'Bianka', 'Bill',\n    'Billie', 'Billy', 'Birdie', 'Blair', 'Blaise', 'Blake', 'Blanca',\n    'Blanche', 'Blaze', 'Bo', 'Bobbie', 'Bobby', 'Bonita', 'Bonnie', 'Boris',\n    'Boyd', 'Brad', 'Braden', 'Bradford', 'Bradley', 'Bradly', 'Brady',\n    'Braeden', 'Brain', 'Brandi', 'Brando', 'Brandon', 'Brandt', 'Brandy',\n    'Brandyn', 'Brannon', 'Branson', 'Brant', 'Braulio', 'Braxton', 'Brayan',\n    'Breana', 'Breanna', 'Breanne', 'Brenda', 'Brendan', 'Brenden', 'Brendon',\n    'Brenna', 'Brennan', 'Brennon', 'Brent', 'Bret', 'Brett', 'Bria', 'Brian',\n    'Briana', 'Brianne', 'Brice', 'Bridget', 'Bridgette', 'Bridie', 'Brielle',\n    'Brigitte', 'Brionna', 'Brisa', 'Britney', 'Brittany', 'Brock', 'Broderick',\n    'Brody', 'Brook', 'Brooke', 'Brooklyn', 'Brooks', 'Brown', 'Bruce',\n    'Bryana', 'Bryce', 'Brycen', 'Bryon', 'Buck', 'Bud', 'Buddy', 'Buford',\n    'Bulah', 'Burdette', 'Burley', 'Burnice', 'Buster', 'Cade', 'Caden',\n    'Caesar', 'Caitlyn', 'Cale', 'Caleb', 'Caleigh', 'Cali', 'Calista',\n    'Callie', 'Camden', 'Cameron', 'Camila', 'Camilla', 'Camille', 'Camren',\n    'Camron', 'Camryn', 'Camylle', 'Candace', 'Candelario', 'Candice',\n    'Candida', 'Candido', 'Cara', 'Carey', 'Carissa', 'Carlee', 'Carleton',\n    'Carley', 'Carli', 'Carlie', 'Carlo', 'Carlos', 'Carlotta', 'Carmel',\n    'Carmela', 'Carmella', 'Carmelo', 'Carmen', 'Carmine', 'Carol', 'Carolanne',\n    'Carole', 'Carolina', 'Caroline', 'Carolyn', 'Carolyne', 'Carrie',\n    'Carroll', 'Carson', 'Carter', 'Cary', 'Casandra', 'Casey', 'Casimer',\n    'Casimir', 'Casper', 'Cassandra', 'Cassandre', 'Cassidy', 'Cassie',\n    'Catalina', 'Caterina', 'Catharine', 'Catherine', 'Cathrine', 'Cathryn',\n    'Cathy', 'Cayla', 'Ceasar', 'Cecelia', 'Cecil', 'Cecile', 'Cecilia',\n    'Cedrick', 'Celestine', 'Celestino', 'Celia', 'Celine', 'Cesar', 'Chad',\n    'Chadd', 'Chadrick', 'Chaim', 'Chance', 'Chandler', 'Chanel', 'Chanelle',\n    'Charity', 'Charlene', 'Charles', 'Charley', 'Charlie', 'Charlotte',\n    'Chase', 'Chasity', 'Chauncey', 'Chaya', 'Chaz', 'Chelsea', 'Chelsey',\n    'Chelsie', 'Chesley', 'Chester', 'Chet', 'Cheyanne', 'Cheyenne', 'Chloe',\n    'Chris', 'Christ', 'Christa', 'Christelle', 'Christian', 'Christiana',\n    'Christina', 'Christine', 'Christop', 'Christophe', 'Christopher',\n    'Christy', 'Chyna', 'Ciara', 'Cicero', 'Cielo', 'Cierra', 'Cindy',\n    'Citlalli', 'Clair', 'Claire', 'Clara', 'Clarabelle', 'Clare', 'Clarissa',\n    'Clark', 'Claud', 'Claude', 'Claudia', 'Claudie', 'Claudine', 'Clay',\n    'Clemens', 'Clement', 'Clementina', 'Clementine', 'Clemmie', 'Cleo',\n    'Cleora', 'Cleta', 'Cletus', 'Cleve', 'Cleveland', 'Clifford', 'Clifton',\n    'Clint', 'Clinton', 'Clotilde', 'Clovis', 'Cloyd', 'Clyde', 'Coby', 'Cody',\n    'Colby', 'Cole', 'Coleman', 'Colin', 'Colleen', 'Collin', 'Colt', 'Colten',\n    'Colton', 'Columbus', 'Concepcion', 'Conner', 'Connie', 'Connor', 'Conor',\n    'Conrad', 'Constance', 'Constantin', 'Consuelo', 'Cooper', 'Cora',\n    'Coralie', 'Corbin', 'Cordelia', 'Cordell', 'Cordia', 'Cordie', 'Corene',\n    'Corine', 'Cornelius', 'Cornell', 'Corrine', 'Cortez', 'Cortney', 'Cory',\n    'Coty', 'Courtney', 'Coy', 'Craig', 'Crawford', 'Creola', 'Cristal',\n    'Cristian', 'Cristina', 'Cristobal', 'Cristopher', 'Cruz', 'Crystal',\n    'Crystel', 'Cullen', 'Curt', 'Curtis', 'Cydney', 'Cynthia', 'Cyril',\n    'Cyrus', 'Dagmar', 'Dahlia', 'Daija', 'Daisha', 'Daisy', 'Dakota', 'Dale',\n    'Dallas', 'Dallin', 'Dalton', 'Damaris', 'Dameon', 'Damian', 'Damien',\n    'Damion', 'Damon', 'Dan', 'Dana', 'Dandre', 'Dane', 'D\\'angelo', 'Dangelo',\n    'Danial', 'Daniela', 'Daniella', 'Danielle', 'Danika', 'Dannie', 'Danny',\n    'Dante', 'Danyka', 'Daphne', 'Daphnee', 'Daphney', 'Darby', 'Daren',\n    'Darian', 'Dariana', 'Darien', 'Dario', 'Darion', 'Darius', 'Darlene',\n    'Daron', 'Darrel', 'Darrell', 'Darren', 'Darrick', 'Darrin', 'Darrion',\n    'Darron', 'Darryl', 'Darwin', 'Daryl', 'Dashawn', 'Dasia', 'Dave', 'David',\n    'Davin', 'Davion', 'Davon', 'Davonte', 'Dawn', 'Dawson', 'Dax', 'Dayana',\n    'Dayna', 'Dayne', 'Dayton', 'Dean', 'Deangelo', 'Deanna', 'Deborah',\n    'Declan', 'Dedric', 'Dedrick', 'Dee', 'Deion', 'Deja', 'Dejah', 'Dejon',\n    'Dejuan', 'Delaney', 'Delbert', 'Delfina', 'Delia', 'Delilah', 'Dell',\n    'Della', 'Delmer', 'Delores', 'Delpha', 'Delphia', 'Delphine', 'Delta',\n    'Demarco', 'Demarcus', 'Demario', 'Demetris', 'Demetrius', 'Demond', 'Dena',\n    'Denis', 'Dennis', 'Deon', 'Deondre', 'Deontae', 'Deonte', 'Dereck',\n    'Derek', 'Derick', 'Deron', 'Derrick', 'Deshaun', 'Deshawn', 'Desiree',\n    'Desmond', 'Dessie', 'Destany', 'Destin', 'Destinee', 'Destiney', 'Destini',\n    'Destiny', 'Devan', 'Devante', 'Deven', 'Devin', 'Devon', 'Devonte',\n    'Devyn', 'Dewayne', 'Dewitt', 'Dexter', 'Diamond', 'Diana', 'Dianna',\n    'Diego', 'Dillan', 'Dillon', 'Dimitri', 'Dina', 'Dino', 'Dion', 'Dixie',\n    'Dock', 'Dolly', 'Dolores', 'Domenic', 'Domenica', 'Domenick', 'Domenico',\n    'Domingo', 'Dominic', 'Dominique', 'Don', 'Donald', 'Donato', 'Donavon',\n    'Donna', 'Donnell', 'Donnie', 'Donny', 'Dora', 'Dorcas', 'Dorian', 'Doris',\n    'Dorothea', 'Dorothy', 'Dorris', 'Dortha', 'Dorthy', 'Doug', 'Douglas',\n    'Dovie', 'Doyle', 'Drake', 'Drew', 'Duane', 'Dudley', 'Dulce', 'Duncan',\n    'Durward', 'Dustin', 'Dusty', 'Dwight', 'Dylan', 'Earl', 'Earlene',\n    'Earline', 'Earnest', 'Earnestine', 'Easter', 'Easton', 'Ebba', 'Ebony',\n    'Ed', 'Eda', 'Edd', 'Eddie', 'Eden', 'Edgar', 'Edgardo', 'Edison', 'Edmond',\n    'Edmund', 'Edna', 'Eduardo', 'Edward', 'Edwardo', 'Edwin', 'Edwina',\n    'Edyth', 'Edythe', 'Effie', 'Efrain', 'Efren', 'Eileen', 'Einar', 'Eino',\n    'Eladio', 'Elaina', 'Elbert', 'Elda', 'Eldon', 'Eldora', 'Eldred',\n    'Eldridge', 'Eleanora', 'Eleanore', 'Eleazar', 'Electa', 'Elena', 'Elenor',\n    'Elenora', 'Eleonore', 'Elfrieda', 'Eli', 'Elian', 'Eliane', 'Elias',\n    'Eliezer', 'Elijah', 'Elinor', 'Elinore', 'Elisa', 'Elisabeth', 'Elise',\n    'Eliseo', 'Elisha', 'Elissa', 'Eliza', 'Elizabeth', 'Ella', 'Ellen',\n    'Ellie', 'Elliot', 'Elliott', 'Ellis', 'Ellsworth', 'Elmer', 'Elmira',\n    'Elmo', 'Elmore', 'Elna', 'Elnora', 'Elody', 'Eloisa', 'Eloise', 'Elouise',\n    'Eloy', 'Elroy', 'Elsa', 'Else', 'Elsie', 'Elta', 'Elton', 'Elva', 'Elvera',\n    'Elvie', 'Elvis', 'Elwin', 'Elwyn', 'Elyse', 'Elyssa', 'Elza', 'Emanuel',\n    'Emelia', 'Emelie', 'Emely', 'Emerald', 'Emerson', 'Emery', 'Emie', 'Emil',\n    'Emile', 'Emilia', 'Emiliano', 'Emilie', 'Emilio', 'Emily', 'Emma',\n    'Emmalee', 'Emmanuel', 'Emmanuelle', 'Emmet', 'Emmett', 'Emmie', 'Emmitt',\n    'Emmy', 'Emory', 'Ena', 'Enid', 'Enoch', 'Enola', 'Enos', 'Enrico',\n    'Enrique', 'Ephraim', 'Era', 'Eriberto', 'Eric', 'Erica', 'Erich', 'Erick',\n    'Ericka', 'Erik', 'Erika', 'Erin', 'Erling', 'Erna', 'Ernest', 'Ernestina',\n    'Ernestine', 'Ernesto', 'Ernie', 'Ervin', 'Erwin', 'Eryn', 'Esmeralda',\n    'Esperanza', 'Esta', 'Esteban', 'Estefania', 'Estel', 'Estell', 'Estella',\n    'Estelle', 'Estevan', 'Esther', 'Estrella', 'Etha', 'Ethan', 'Ethel',\n    'Ethelyn', 'Ethyl', 'Ettie', 'Eudora', 'Eugene', 'Eugenia', 'Eula', 'Eulah',\n    'Eulalia', 'Euna', 'Eunice', 'Eusebio', 'Eva', 'Evalyn', 'Evan',\n    'Evangeline', 'Evans', 'Eve', 'Eveline', 'Evelyn', 'Everardo', 'Everett',\n    'Everette', 'Evert', 'Evie', 'Ewald', 'Ewell', 'Ezekiel', 'Ezequiel',\n    'Ezra', 'Fabian', 'Fabiola', 'Fae', 'Fannie', 'Fanny', 'Fatima', 'Faustino',\n    'Fausto', 'Favian', 'Fay', 'Faye', 'Federico', 'Felicia', 'Felicita',\n    'Felicity', 'Felipa', 'Felipe', 'Felix', 'Felton', 'Fermin', 'Fern',\n    'Fernando', 'Ferne', 'Fidel', 'Filiberto', 'Filomena', 'Finn', 'Fiona',\n    'Flavie', 'Flavio', 'Fleta', 'Fletcher', 'Flo', 'Florence', 'Florencio',\n    'Florian', 'Florida', 'Florine', 'Flossie', 'Floy', 'Floyd', 'Ford',\n    'Forest', 'Forrest', 'Foster', 'Frances', 'Francesca', 'Francesco',\n    'Francis', 'Francisca', 'Francisco', 'Franco', 'Frank', 'Frankie', 'Franz',\n    'Fred', 'Freda', 'Freddie', 'Freddy', 'Frederic', 'Frederick', 'Frederik',\n    'Frederique', 'Fredrick', 'Fredy', 'Freeda', 'Freeman', 'Freida', 'Frida',\n    'Frieda', 'Friedrich', 'Fritz', 'Furman', 'Gabe', 'Gabriel', 'Gabriella',\n    'Gabrielle', 'Gaetano', 'Gage', 'Gail', 'Gardner', 'Garett', 'Garfield',\n    'Garland', 'Garnet', 'Garnett', 'Garret', 'Garrett', 'Garrick', 'Garrison',\n    'Garry', 'Garth', 'Gaston', 'Gavin', 'Gay', 'Gayle', 'Gaylord', 'Gene',\n    'General', 'Genesis', 'Genevieve', 'Gennaro', 'Genoveva', 'Geo', 'Geoffrey',\n    'George', 'Georgette', 'Georgiana', 'Georgianna', 'Geovanni', 'Geovanny',\n    'Geovany', 'Gerald', 'Geraldine', 'Gerard', 'Gerardo', 'Gerda', 'Gerhard',\n    'Germaine', 'German', 'Gerry', 'Gerson', 'Gertrude', 'Gia', 'Gianni',\n    'Gideon', 'Gilbert', 'Gilberto', 'Gilda', 'Giles', 'Gillian', 'Gina',\n    'Gino', 'Giovani', 'Giovanna', 'Giovanni', 'Giovanny', 'Gisselle',\n    'Giuseppe', 'Gladyce', 'Gladys', 'Glen', 'Glenda', 'Glenna', 'Glennie',\n    'Gloria', 'Godfrey', 'Golda', 'Golden', 'Gonzalo', 'Gordon', 'Grace',\n    'Gracie', 'Graciela', 'Grady', 'Graham', 'Grant', 'Granville', 'Grayce',\n    'Grayson', 'Green', 'Greg', 'Gregg', 'Gregoria', 'Gregorio', 'Gregory',\n    'Greta', 'Gretchen', 'Greyson', 'Griffin', 'Grover', 'Guadalupe', 'Gudrun',\n    'Guido', 'Guillermo', 'Guiseppe', 'Gunnar', 'Gunner', 'Gus', 'Gussie',\n    'Gust', 'Gustave', 'Guy', 'Gwen', 'Gwendolyn', 'Hadley', 'Hailee', 'Hailey',\n    'Hailie', 'Hal', 'Haleigh', 'Haley', 'Halie', 'Halle', 'Hallie', 'Hank',\n    'Hanna', 'Hannah', 'Hans', 'Hardy', 'Harley', 'Harmon', 'Harmony', 'Harold',\n    'Harrison', 'Harry', 'Harvey', 'Haskell', 'Hassan', 'Hassie', 'Hattie',\n    'Haven', 'Hayden', 'Haylee', 'Hayley', 'Haylie', 'Hazel', 'Hazle', 'Heath',\n    'Heather', 'Heaven', 'Heber', 'Hector', 'Heidi', 'Helen', 'Helena',\n    'Helene', 'Helga', 'Hellen', 'Helmer', 'Heloise', 'Henderson', 'Henri',\n    'Henriette', 'Henry', 'Herbert', 'Herman', 'Hermann', 'Hermina', 'Herminia',\n    'Herminio', 'Hershel', 'Herta', 'Hertha', 'Hester', 'Hettie', 'Hilario',\n    'Hilbert', 'Hilda', 'Hildegard', 'Hillard', 'Hillary', 'Hilma', 'Hilton',\n    'Hipolito', 'Hiram', 'Hobart', 'Holden', 'Hollie', 'Hollis', 'Holly',\n    'Hope', 'Horace', 'Horacio', 'Hortense', 'Hosea', 'Houston', 'Howard',\n    'Howell', 'Hoyt', 'Hubert', 'Hudson', 'Hugh', 'Hulda', 'Humberto', 'Hunter',\n    'Hyman', 'Ian', 'Ibrahim', 'Icie', 'Ida', 'Idell', 'Idella', 'Ignacio',\n    'Ignatius', 'Ike', 'Ila', 'Ilene', 'Iliana', 'Ima', 'Imani', 'Imelda',\n    'Immanuel', 'Imogene', 'Ines', 'Irma', 'Irving', 'Irwin', 'Isaac', 'Isabel',\n    'Isabell', 'Isabella', 'Isabelle', 'Isac', 'Isadore', 'Isai', 'Isaiah',\n    'Isaias', 'Isidro', 'Ismael', 'Isobel', 'Isom', 'Israel', 'Issac', 'Itzel',\n    'Iva', 'Ivah', 'Ivory', 'Ivy', 'Izabella', 'Izaiah', 'Jabari', 'Jace',\n    'Jacey', 'Jacinthe', 'Jacinto', 'Jack', 'Jackeline', 'Jackie', 'Jacklyn',\n    'Jackson', 'Jacky', 'Jaclyn', 'Jacquelyn', 'Jacques', 'Jacynthe', 'Jada',\n    'Jade', 'Jaden', 'Jadon', 'Jadyn', 'Jaeden', 'Jaida', 'Jaiden', 'Jailyn',\n    'Jaime', 'Jairo', 'Jakayla', 'Jake', 'Jakob', 'Jaleel', 'Jalen', 'Jalon',\n    'Jalyn', 'Jamaal', 'Jamal', 'Jamar', 'Jamarcus', 'Jamel', 'Jameson',\n    'Jamey', 'Jamie', 'Jamil', 'Jamir', 'Jamison', 'Jammie', 'Jan', 'Jana',\n    'Janae', 'Jane', 'Janelle', 'Janessa', 'Janet', 'Janice', 'Janick', 'Janie',\n    'Janis', 'Janiya', 'Jannie', 'Jany', 'Jaquan', 'Jaquelin', 'Jaqueline',\n    'Jared', 'Jaren', 'Jarod', 'Jaron', 'Jarred', 'Jarrell', 'Jarret',\n    'Jarrett', 'Jarrod', 'Jarvis', 'Jasen', 'Jasmin', 'Jason', 'Jasper',\n    'Jaunita', 'Javier', 'Javon', 'Javonte', 'Jay', 'Jayce', 'Jaycee', 'Jayda',\n    'Jayde', 'Jayden', 'Jaydon', 'Jaylan', 'Jaylen', 'Jaylin', 'Jaylon',\n    'Jayme', 'Jayne', 'Jayson', 'Jazlyn', 'Jazmin', 'Jazmyn', 'Jazmyne', 'Jean',\n    'Jeanette', 'Jeanie', 'Jeanne', 'Jed', 'Jedediah', 'Jedidiah', 'Jeff',\n    'Jefferey', 'Jeffery', 'Jeffrey', 'Jeffry', 'Jena', 'Jenifer', 'Jennie',\n    'Jennifer', 'Jennings', 'Jennyfer', 'Jensen', 'Jerad', 'Jerald', 'Jeramie',\n    'Jeramy', 'Jerel', 'Jeremie', 'Jeremy', 'Jermain', 'Jermaine', 'Jermey',\n    'Jerod', 'Jerome', 'Jeromy', 'Jerrell', 'Jerrod', 'Jerrold', 'Jerry',\n    'Jess', 'Jesse', 'Jessica', 'Jessie', 'Jessika', 'Jessy', 'Jessyca',\n    'Jesus', 'Jett', 'Jettie', 'Jevon', 'Jewel', 'Jewell', 'Jillian', 'Jimmie',\n    'Jimmy', 'Jo', 'Joan', 'Joana', 'Joanie', 'Joanne', 'Joannie', 'Joanny',\n    'Joany', 'Joaquin', 'Jocelyn', 'Jodie', 'Jody', 'Joe', 'Joel', 'Joelle',\n    'Joesph', 'Joey', 'Johan', 'Johann', 'Johanna', 'Johathan', 'John',\n    'Johnathan', 'Johnathon', 'Johnnie', 'Johnny', 'Johnpaul', 'Johnson',\n    'Jolie', 'Jon', 'Jonas', 'Jonatan', 'Jonathan', 'Jonathon', 'Jordan',\n    'Jordane', 'Jordi', 'Jordon', 'Jordy', 'Jordyn', 'Jorge', 'Jose', 'Josefa',\n    'Josefina', 'Joseph', 'Josephine', 'Josh', 'Joshua', 'Joshuah', 'Josiah',\n    'Josiane', 'Josianne', 'Josie', 'Josue', 'Jovan', 'Jovani', 'Jovanny',\n    'Jovany', 'Joy', 'Joyce', 'Juana', 'Juanita', 'Judah', 'Judd', 'Jude',\n    'Judge', 'Judson', 'Judy', 'Jules', 'Julia', 'Julian', 'Juliana',\n    'Julianne', 'Julie', 'Julien', 'Juliet', 'Julio', 'Julius', 'June',\n    'Junior', 'Junius', 'Justen', 'Justice', 'Justina', 'Justine', 'Juston',\n    'Justus', 'Justyn', 'Juvenal', 'Juwan', 'Kacey', 'Kaci', 'Kacie', 'Kade',\n    'Kaden', 'Kadin', 'Kaela', 'Kaelyn', 'Kaia', 'Kailee', 'Kailey', 'Kailyn',\n    'Kaitlin', 'Kaitlyn', 'Kale', 'Kaleb', 'Kaleigh', 'Kaley', 'Kali', 'Kallie',\n    'Kameron', 'Kamille', 'Kamren', 'Kamron', 'Kamryn', 'Kane', 'Kara',\n    'Kareem', 'Karelle', 'Karen', 'Kari', 'Kariane', 'Karianne', 'Karina',\n    'Karine', 'Karl', 'Karlee', 'Karley', 'Karli', 'Karlie', 'Karolann',\n    'Karson', 'Kasandra', 'Kasey', 'Kassandra', 'Katarina', 'Katelin',\n    'Katelyn', 'Katelynn', 'Katharina', 'Katherine', 'Katheryn', 'Kathleen',\n    'Kathlyn', 'Kathryn', 'Kathryne', 'Katlyn', 'Katlynn', 'Katrina', 'Katrine',\n    'Kattie', 'Kavon', 'Kay', 'Kaya', 'Kaycee', 'Kayden', 'Kayla', 'Kaylah',\n    'Kaylee', 'Kayleigh', 'Kayley', 'Kayli', 'Kaylie', 'Kaylin', 'Keagan',\n    'Keanu', 'Keara', 'Keaton', 'Keegan', 'Keeley', 'Keely', 'Keenan', 'Keira',\n    'Keith', 'Kellen', 'Kelley', 'Kelli', 'Kellie', 'Kelly', 'Kelsi', 'Kelsie',\n    'Kelton', 'Kelvin', 'Ken', 'Kendall', 'Kendra', 'Kendrick', 'Kenna',\n    'Kennedi', 'Kennedy', 'Kenneth', 'Kennith', 'Kenny', 'Kenton', 'Kenya',\n    'Kenyatta', 'Kenyon', 'Keon', 'Keshaun', 'Keshawn', 'Keven', 'Kevin',\n    'Kevon', 'Keyon', 'Keyshawn', 'Khalid', 'Khalil', 'Kian', 'Kiana', 'Kianna',\n    'Kiara', 'Kiarra', 'Kiel', 'Kiera', 'Kieran', 'Kiley', 'Kim', 'Kimberly',\n    'King', 'Kip', 'Kira', 'Kirk', 'Kirsten', 'Kirstin', 'Kitty', 'Kobe',\n    'Koby', 'Kody', 'Kolby', 'Kole', 'Korbin', 'Korey', 'Kory', 'Kraig', 'Kris',\n    'Krista', 'Kristian', 'Kristin', 'Kristina', 'Kristofer', 'Kristoffer',\n    'Kristopher', 'Kristy', 'Krystal', 'Krystel', 'Krystina', 'Kurt', 'Kurtis',\n    'Kyla', 'Kyle', 'Kylee', 'Kyleigh', 'Kyler', 'Kylie', 'Kyra', 'Lacey',\n    'Lacy', 'Ladarius', 'Lafayette', 'Laila', 'Laisha', 'Lamar', 'Lambert',\n    'Lamont', 'Lance', 'Landen', 'Lane', 'Laney', 'Larissa', 'Laron', 'Larry',\n    'Larue', 'Laura', 'Laurel', 'Lauren', 'Laurence', 'Lauretta', 'Lauriane',\n    'Laurianne', 'Laurie', 'Laurine', 'Laury', 'Lauryn', 'Lavada', 'Lavern',\n    'Laverna', 'Laverne', 'Lavina', 'Lavinia', 'Lavon', 'Lavonne', 'Lawrence',\n    'Lawson', 'Layla', 'Layne', 'Lazaro', 'Lea', 'Leann', 'Leanna', 'Leanne',\n    'Leatha', 'Leda', 'Lee', 'Leif', 'Leila', 'Leilani', 'Lela', 'Lelah',\n    'Leland', 'Lelia', 'Lempi', 'Lemuel', 'Lenna', 'Lennie', 'Lenny', 'Lenora',\n    'Lenore', 'Leo', 'Leola', 'Leon', 'Leonard', 'Leonardo', 'Leone', 'Leonel',\n    'Leonie', 'Leonor', 'Leonora', 'Leopold', 'Leopoldo', 'Leora', 'Lera',\n    'Lesley', 'Leslie', 'Lesly', 'Lessie', 'Lester', 'Leta', 'Letha', 'Letitia',\n    'Levi', 'Lew', 'Lewis', 'Lexi', 'Lexie', 'Lexus', 'Lia', 'Liam', 'Liana',\n    'Libbie', 'Libby', 'Lila', 'Lilian', 'Liliana', 'Liliane', 'Lilla',\n    'Lillian', 'Lilliana', 'Lillie', 'Lilly', 'Lily', 'Lilyan', 'Lina',\n    'Lincoln', 'Linda', 'Lindsay', 'Lindsey', 'Linnea', 'Linnie', 'Linwood',\n    'Lionel', 'Lisa', 'Lisandro', 'Lisette', 'Litzy', 'Liza', 'Lizeth',\n    'Lizzie', 'Llewellyn', 'Lloyd', 'Logan', 'Lois', 'Lola', 'Lolita', 'Loma',\n    'Lon', 'London', 'Lonie', 'Lonnie', 'Lonny', 'Lonzo', 'Lora', 'Loraine',\n    'Loren', 'Lorena', 'Lorenz', 'Lorenza', 'Lorenzo', 'Lori', 'Lorine',\n    'Lorna', 'Lottie', 'Lou', 'Louie', 'Louisa', 'Lourdes', 'Louvenia',\n    'Lowell', 'Loy', 'Loyal', 'Loyce', 'Lucas', 'Luciano', 'Lucie', 'Lucienne',\n    'Lucile', 'Lucinda', 'Lucio', 'Lucious', 'Lucius', 'Lucy', 'Ludie',\n    'Ludwig', 'Lue', 'Luella', 'Luigi', 'Luis', 'Luisa', 'Lukas', 'Lula',\n    'Lulu', 'Luna', 'Lupe', 'Lura', 'Lurline', 'Luther', 'Luz', 'Lyda', 'Lydia',\n    'Lyla', 'Lynn', 'Lyric', 'Lysanne', 'Mabel', 'Mabelle', 'Mable', 'Mac',\n    'Macey', 'Maci', 'Macie', 'Mack', 'Mackenzie', 'Macy', 'Madaline',\n    'Madalyn', 'Maddison', 'Madeline', 'Madelyn', 'Madelynn', 'Madge', 'Madie',\n    'Madilyn', 'Madisen', 'Madison', 'Madisyn', 'Madonna', 'Madyson', 'Mae',\n    'Maegan', 'Maeve', 'Mafalda', 'Magali', 'Magdalen', 'Magdalena', 'Maggie',\n    'Magnolia', 'Magnus', 'Maia', 'Maida', 'Maiya', 'Major', 'Makayla',\n    'Makenna', 'Makenzie', 'Malachi', 'Malcolm', 'Malika', 'Malinda', 'Mallie',\n    'Mallory', 'Malvina', 'Mandy', 'Manley', 'Manuel', 'Manuela', 'Mara',\n    'Marc', 'Marcel', 'Marcelina', 'Marcelino', 'Marcella', 'Marcelle',\n    'Marcellus', 'Marcelo', 'Marcia', 'Marco', 'Marcos', 'Marcus', 'Margaret',\n    'Margarete', 'Margarett', 'Margaretta', 'Margarette', 'Margarita', 'Marge',\n    'Margie', 'Margot', 'Margret', 'Marguerite', 'Maria', 'Mariah', 'Mariam',\n    'Marian', 'Mariana', 'Mariane', 'Marianna', 'Marianne', 'Mariano',\n    'Maribel', 'Marie', 'Mariela', 'Marielle', 'Marietta', 'Marilie', 'Marilou',\n    'Marilyne', 'Marina', 'Mario', 'Marion', 'Marisa', 'Marisol', 'Maritza',\n    'Marjolaine', 'Marjorie', 'Marjory', 'Mark', 'Markus', 'Marlee', 'Marlen',\n    'Marlene', 'Marley', 'Marlin', 'Marlon', 'Marques', 'Marquis', 'Marquise',\n    'Marshall', 'Marta', 'Martin', 'Martina', 'Martine', 'Marty', 'Marvin',\n    'Mary', 'Maryam', 'Maryjane', 'Maryse', 'Mason', 'Mateo', 'Mathew',\n    'Mathias', 'Mathilde', 'Matilda', 'Matilde', 'Matt', 'Matteo', 'Mattie',\n    'Maud', 'Maude', 'Maudie', 'Maureen', 'Maurice', 'Mauricio', 'Maurine',\n    'Maverick', 'Mavis', 'Max', 'Maxie', 'Maxime', 'Maximilian', 'Maximillia',\n    'Maximillian', 'Maximo', 'Maximus', 'Maxine', 'Maxwell', 'May', 'Maya',\n    'Maybell', 'Maybelle', 'Maye', 'Maymie', 'Maynard', 'Mayra', 'Mazie',\n    'Mckayla', 'Mckenna', 'Mckenzie', 'Meagan', 'Meaghan', 'Meda', 'Megane',\n    'Meggie', 'Meghan', 'Mekhi', 'Melany', 'Melba', 'Melisa', 'Melissa',\n    'Mellie', 'Melody', 'Melvin', 'Melvina', 'Melyna', 'Melyssa', 'Mercedes',\n    'Meredith', 'Merl', 'Merle', 'Merlin', 'Merritt', 'Mertie', 'Mervin',\n    'Meta', 'Mia', 'Micaela', 'Micah', 'Michael', 'Michaela', 'Michale',\n    'Micheal', 'Michel', 'Michele', 'Michelle', 'Miguel', 'Mikayla', 'Mike',\n    'Mikel', 'Milan', 'Miles', 'Milford', 'Miller', 'Millie', 'Milo', 'Milton',\n    'Mina', 'Minerva', 'Minnie', 'Miracle', 'Mireille', 'Mireya', 'Misael',\n    'Missouri', 'Misty', 'Mitchel', 'Mitchell', 'Mittie', 'Modesta', 'Modesto',\n    'Mohamed', 'Mohammad', 'Mohammed', 'Moises', 'Mollie', 'Molly', 'Mona',\n    'Monica', 'Monique', 'Monroe', 'Monserrat', 'Monserrate', 'Montana',\n    'Monte', 'Monty', 'Morgan', 'Moriah', 'Morris', 'Mortimer', 'Morton',\n    'Mose', 'Moses', 'Moshe', 'Mossie', 'Mozell', 'Mozelle', 'Muhammad',\n    'Muriel', 'Murl', 'Murphy', 'Murray', 'Mustafa', 'Mya', 'Myah', 'Mylene',\n    'Myles', 'Myra', 'Myriam', 'Myrl', 'Myrna', 'Myron', 'Myrtice', 'Myrtie',\n    'Myrtis', 'Myrtle', 'Nadia', 'Nakia', 'Name', 'Nannie', 'Naomi', 'Naomie',\n    'Napoleon', 'Narciso', 'Nash', 'Nasir', 'Nat', 'Natalia', 'Natalie',\n    'Natasha', 'Nathan', 'Nathanael', 'Nathanial', 'Nathaniel', 'Nathen',\n    'Nayeli', 'Neal', 'Ned', 'Nedra', 'Neha', 'Neil', 'Nelda', 'Nella', 'Nelle',\n    'Nellie', 'Nels', 'Nelson', 'Neoma', 'Nestor', 'Nettie', 'Neva', 'Newell',\n    'Newton', 'Nia', 'Nicholas', 'Nicholaus', 'Nichole', 'Nick', 'Nicklaus',\n    'Nickolas', 'Nico', 'Nicola', 'Nicolas', 'Nicole', 'Nicolette', 'Nigel',\n    'Nikita', 'Nikki', 'Nikko', 'Niko', 'Nikolas', 'Nils', 'Nina', 'Noah',\n    'Noble', 'Noe', 'Noel', 'Noelia', 'Noemi', 'Noemie', 'Noemy', 'Nola',\n    'Nolan', 'Nona', 'Nora', 'Norbert', 'Norberto', 'Norene', 'Norma', 'Norris',\n    'Norval', 'Norwood', 'Nova', 'Novella', 'Nya', 'Nyah', 'Nyasia', 'Obie',\n    'Oceane', 'Ocie', 'Octavia', 'Oda', 'Odell', 'Odessa', 'Odie', 'Ofelia',\n    'Okey', 'Ola', 'Olaf', 'Ole', 'Olen', 'Oleta', 'Olga', 'Olin', 'Oliver',\n    'Ollie', 'Oma', 'Omari', 'Omer', 'Ona', 'Onie', 'Opal', 'Ophelia', 'Ora',\n    'Oral', 'Oran', 'Oren', 'Orie', 'Orin', 'Orion', 'Orland', 'Orlando',\n    'Orlo', 'Orpha', 'Orrin', 'Orval', 'Orville', 'Osbaldo', 'Osborne', 'Oscar',\n    'Osvaldo', 'Oswald', 'Oswaldo', 'Otha', 'Otho', 'Otilia', 'Otis', 'Ottilie',\n    'Ottis', 'Otto', 'Ova', 'Owen', 'Ozella', 'Pablo', 'Paige', 'Palma',\n    'Pamela', 'Pansy', 'Paolo', 'Paris', 'Parker', 'Pascale', 'Pasquale', 'Pat',\n    'Patience', 'Patricia', 'Patrick', 'Patsy', 'Pattie', 'Paul', 'Paula',\n    'Pauline', 'Paxton', 'Payton', 'Pearl', 'Pearlie', 'Pearline', 'Pedro',\n    'Peggie', 'Penelope', 'Percival', 'Percy', 'Perry', 'Pete', 'Peter',\n    'Petra', 'Peyton', 'Philip', 'Phoebe', 'Phyllis', 'Pierce', 'Pierre',\n    'Pietro', 'Pink', 'Pinkie', 'Piper', 'Polly', 'Porter', 'Precious',\n    'Presley', 'Preston', 'Price', 'Prince', 'Princess', 'Priscilla',\n    'Providenci', 'Prudence', 'Queen', 'Queenie', 'Quentin', 'Quincy', 'Quinn',\n    'Quinten', 'Quinton', 'Rachael', 'Rachel', 'Rachelle', 'Rae', 'Raegan',\n    'Rafael', 'Rafaela', 'Raheem', 'Rahsaan', 'Rahul', 'Raina', 'Raleigh',\n    'Ralph', 'Ramiro', 'Ramon', 'Ramona', 'Randal', 'Randall', 'Randi', 'Randy',\n    'Ransom', 'Raoul', 'Raphael', 'Raphaelle', 'Raquel', 'Rashad', 'Rashawn',\n    'Rasheed', 'Raul', 'Raven', 'Ray', 'Raymond', 'Raymundo', 'Reagan',\n    'Reanna', 'Reba', 'Rebeca', 'Rebecca', 'Rebeka', 'Rebekah', 'Reece', 'Reed',\n    'Reese', 'Regan', 'Reggie', 'Reginald', 'Reid', 'Reilly', 'Reina',\n    'Reinhold', 'Remington', 'Rene', 'Renee', 'Ressie', 'Reta', 'Retha',\n    'Retta', 'Reuben', 'Reva', 'Rex', 'Rey', 'Reyes', 'Reymundo', 'Reyna',\n    'Reynold', 'Rhea', 'Rhett', 'Rhianna', 'Rhiannon', 'Rhoda', 'Ricardo',\n    'Richard', 'Richie', 'Richmond', 'Rick', 'Rickey', 'Rickie', 'Ricky',\n    'Rico', 'Rigoberto', 'Riley', 'Rita', 'River', 'Robb', 'Robbie', 'Robert',\n    'Roberta', 'Roberto', 'Robin', 'Robyn', 'Rocio', 'Rocky', 'Rod', 'Roderick',\n    'Rodger', 'Rodolfo', 'Rodrick', 'Rodrigo', 'Roel', 'Rogelio', 'Roger',\n    'Rogers', 'Rolando', 'Rollin', 'Roma', 'Romaine', 'Roman', 'Ron', 'Ronaldo',\n    'Ronny', 'Roosevelt', 'Rory', 'Rosa', 'Rosalee', 'Rosalia', 'Rosalind',\n    'Rosalinda', 'Rosalyn', 'Rosamond', 'Rosanna', 'Rosario', 'Roscoe', 'Rose',\n    'Rosella', 'Roselyn', 'Rosemarie', 'Rosemary', 'Rosendo', 'Rosetta',\n    'Rosie', 'Rosina', 'Roslyn', 'Ross', 'Rossie', 'Rowan', 'Rowena', 'Rowland',\n    'Roxane', 'Roxanne', 'Roy', 'Royal', 'Royce', 'Rozella', 'Ruben', 'Rubie',\n    'Ruby', 'Rubye', 'Rudolph', 'Rudy', 'Rupert', 'Russ', 'Russel', 'Russell',\n    'Rusty', 'Ruth', 'Ruthe', 'Ruthie', 'Ryan', 'Ryann', 'Ryder', 'Rylan',\n    'Rylee', 'Ryleigh', 'Ryley', 'Sabina', 'Sabrina', 'Sabryna', 'Sadie',\n    'Sadye', 'Sage', 'Saige', 'Sallie', 'Sally', 'Salma', 'Salvador',\n    'Salvatore', 'Sam', 'Samanta', 'Samantha', 'Samara', 'Samir', 'Sammie',\n    'Sammy', 'Samson', 'Sandra', 'Sandrine', 'Sandy', 'Sanford', 'Santa',\n    'Santiago', 'Santina', 'Santino', 'Santos', 'Sarah', 'Sarai', 'Sarina',\n    'Sasha', 'Saul', 'Savanah', 'Savanna', 'Savannah', 'Savion', 'Scarlett',\n    'Schuyler', 'Scot', 'Scottie', 'Scotty', 'Seamus', 'Sean', 'Sebastian',\n    'Sedrick', 'Selena', 'Selina', 'Selmer', 'Serena', 'Serenity', 'Seth',\n    'Shad', 'Shaina', 'Shakira', 'Shana', 'Shane', 'Shanel', 'Shanelle',\n    'Shania', 'Shanie', 'Shaniya', 'Shanna', 'Shannon', 'Shanny', 'Shanon',\n    'Shany', 'Sharon', 'Shaun', 'Shawn', 'Shawna', 'Shaylee', 'Shayna',\n    'Shayne', 'Shea', 'Sheila', 'Sheldon', 'Shemar', 'Sheridan', 'Sherman',\n    'Sherwood', 'Shirley', 'Shyann', 'Shyanne', 'Sibyl', 'Sid', 'Sidney',\n    'Sienna', 'Sierra', 'Sigmund', 'Sigrid', 'Sigurd', 'Silas', 'Sim', 'Simeon',\n    'Simone', 'Sincere', 'Sister', 'Skye', 'Skyla', 'Skylar', 'Sofia',\n    'Soledad', 'Solon', 'Sonia', 'Sonny', 'Sonya', 'Sophia', 'Sophie',\n    'Spencer', 'Stacey', 'Stacy', 'Stan', 'Stanford', 'Stanley', 'Stanton',\n    'Stefan', 'Stefanie', 'Stella', 'Stephan', 'Stephania', 'Stephanie',\n    'Stephany', 'Stephen', 'Stephon', 'Sterling', 'Steve', 'Stevie', 'Stewart',\n    'Stone', 'Stuart', 'Summer', 'Sunny', 'Susan', 'Susana', 'Susanna', 'Susie',\n    'Suzanne', 'Sven', 'Syble', 'Sydnee', 'Sydney', 'Sydni', 'Sydnie', 'Sylvan',\n    'Sylvester', 'Sylvia', 'Tabitha', 'Tad', 'Talia', 'Talon', 'Tamara',\n    'Tamia', 'Tania', 'Tanner', 'Tanya', 'Tara', 'Taryn', 'Tate', 'Tatum',\n    'Tatyana', 'Taurean', 'Tavares', 'Taya', 'Taylor', 'Teagan', 'Ted', 'Telly',\n    'Terence', 'Teresa', 'Terrance', 'Terrell', 'Terrence', 'Terrill', 'Terry',\n    'Tess', 'Tessie', 'Tevin', 'Thad', 'Thaddeus', 'Thalia', 'Thea', 'Thelma',\n    'Theo', 'Theodora', 'Theodore', 'Theresa', 'Therese', 'Theresia', 'Theron',\n    'Thomas', 'Thora', 'Thurman', 'Tia', 'Tiana', 'Tianna', 'Tiara', 'Tierra',\n    'Tiffany', 'Tillman', 'Timmothy', 'Timmy', 'Timothy', 'Tina', 'Tito',\n    'Titus', 'Tobin', 'Toby', 'Tod', 'Tom', 'Tomas', 'Tomasa', 'Tommie',\n    'Toney', 'Toni', 'Tony', 'Torey', 'Torrance', 'Torrey', 'Toy', 'Trace',\n    'Tracey', 'Tracy', 'Travis', 'Travon', 'Tre', 'Tremaine', 'Tremayne',\n    'Trent', 'Trenton', 'Tressa', 'Tressie', 'Treva', 'Trever', 'Trevion',\n    'Trevor', 'Trey', 'Trinity', 'Trisha', 'Tristian', 'Tristin', 'Triston',\n    'Troy', 'Trudie', 'Trycia', 'Trystan', 'Turner', 'Twila', 'Tyler', 'Tyra',\n    'Tyree', 'Tyreek', 'Tyrel', 'Tyrell', 'Tyrese', 'Tyrique', 'Tyshawn',\n    'Tyson', 'Ubaldo', 'Ulices', 'Ulises', 'Una', 'Unique', 'Urban', 'Uriah',\n    'Uriel', 'Ursula', 'Vada', 'Valentin', 'Valentina', 'Valentine', 'Valerie',\n    'Vallie', 'Van', 'Vance', 'Vanessa', 'Vaughn', 'Veda', 'Velda', 'Vella',\n    'Velma', 'Velva', 'Vena', 'Verda', 'Verdie', 'Vergie', 'Verla', 'Verlie',\n    'Vern', 'Verna', 'Verner', 'Vernice', 'Vernie', 'Vernon', 'Verona',\n    'Veronica', 'Vesta', 'Vicenta', 'Vicente', 'Vickie', 'Vicky', 'Victor',\n    'Victoria', 'Vida', 'Vidal', 'Vilma', 'Vince', 'Vincent', 'Vincenza',\n    'Vincenzo', 'Vinnie', 'Viola', 'Violet', 'Violette', 'Virgie', 'Virgil',\n    'Virginia', 'Virginie', 'Vita', 'Vito', 'Viva', 'Vivian', 'Viviane',\n    'Vivianne', 'Vivien', 'Vivienne', 'Vladimir', 'Wade', 'Waino', 'Waldo',\n    'Walker', 'Wallace', 'Walter', 'Walton', 'Wanda', 'Ward', 'Warren',\n    'Watson', 'Wava', 'Waylon', 'Wayne', 'Webster', 'Weldon', 'Wellington',\n    'Wendell', 'Wendy', 'Werner', 'Westley', 'Weston', 'Whitney', 'Wilber',\n    'Wilbert', 'Wilburn', 'Wiley', 'Wilford', 'Wilfred', 'Wilfredo', 'Wilfrid',\n    'Wilhelm', 'Wilhelmine', 'Will', 'Willa', 'Willard', 'William', 'Willie',\n    'Willis', 'Willow', 'Willy', 'Wilma', 'Wilmer', 'Wilson', 'Wilton',\n    'Winfield', 'Winifred', 'Winnifred', 'Winona', 'Winston', 'Woodrow',\n    'Wyatt', 'Wyman', 'Xander', 'Xavier', 'Xzavier', 'Yadira', 'Yasmeen',\n    'Yasmin', 'Yasmine', 'Yazmin', 'Yesenia', 'Yessenia', 'Yolanda', 'Yoshiko',\n    'Yvette', 'Yvonne', 'Zachariah', 'Zachary', 'Zachery', 'Zack', 'Zackary',\n    'Zackery', 'Zakary', 'Zander', 'Zane', 'Zaria', 'Zechariah', 'Zelda',\n    'Zella', 'Zelma', 'Zena', 'Zetta', 'Zion', 'Zita', 'Zoe', 'Zoey', 'Zoie',\n    'Zoila', 'Zola', 'Zora', 'Zula'\n];\n\n/**\n * Generate random username.\n * @returns {string} random username\n */\nfunction generateUsername() {\n    const name = RandomUtil.randomElement(names);\n    const suffix = RandomUtil.randomAlphanumStr(3);\n\n    return `${name}-${suffix}`;\n}\n\nmodule.exports = {\n    generateUsername\n};\n","/**\n * Enumeration of the video types that are signaled to the bridge\n * @type {{CAMERA: string, DESKTOP: string, DESKTOP_HIGH_FPS: string, NONE: string}}\n */\nconst BridgeVideoType = {\n    /**\n     * The camera video type.\n     */\n    CAMERA: 'camera',\n\n    /**\n     * The low fps desktop video type.\n     */\n    DESKTOP: 'desktop',\n\n    /**\n     * The high fps desktop video type.\n     */\n    DESKTOP_HIGH_FPS: 'desktop_high_fps',\n\n    /**\n     * Video type when no local source is present.\n     */\n    NONE: 'none'\n};\n\nmodule.exports = BridgeVideoType;\n","/**\n * The possible camera facing modes. For now support only 'user' and\n * 'environment' because 'left' and 'right' are not used anywhere in our\n * projects at the time of this writing. For more information please refer to\n * https://w3c.github.io/mediacapture-main/getusermedia.html\n * #def-constraint-facingMode.\n *\n * @enum {string}\n */\nconst CameraFacingMode = {\n    /**\n     * The mode which specifies the environment-facing camera.\n     */\n    ENVIRONMENT: 'environment',\n\n    /**\n     * The mode which specifies the user-facing camera.\n     */\n    USER: 'user'\n};\n\nmodule.exports = CameraFacingMode;\n","/**\n * Enumeration of the codec mime types\n * @type {{H264: string, OPUS: string, ULPFEC: string, VP8: string, VP9: string}}\n */\nconst CodecMimeType = {\n    /**\n     * The h264 codec mime type.\n     */\n    H264: 'h264',\n\n    /**\n     * The opus codec mime type.\n     */\n    OPUS: 'opus',\n\n    /**\n     * The ulpfec codec mime type.\n     */\n    ULPFEC: 'ulpfec',\n\n    /**\n     * The vp8 codec mime type.\n     */\n    VP8: 'vp8',\n\n    /**\n     * The vp9 codec mime type.\n     */\n    VP9: 'vp9'\n\n};\n\nmodule.exports = CodecMimeType;\n","/**\n * Enumeration of the media direction types.\n * @type {{INACTIVE: string, RECVONLY: string, SENDONLY: string, SENDRECV: string}}\n */\nconst MediaDirection = {\n    /**\n     * Media is send and receive is suspended.\n     */\n    INACTIVE: 'inactive',\n\n    /**\n     * Media is only received from remote peer.\n     */\n    RECVONLY: 'recvonly',\n\n    /**\n     * Media is only sent to the remote peer.\n     */\n    SENDONLY: 'sendonly',\n\n    /**\n     * Media is sent and received.\n     */\n    SENDRECV: 'sendrecv'\n};\n\nmodule.exports = MediaDirection;\n","const RTCEvents = {\n    /**\n     * Indicates error while create answer call.\n     */\n    CREATE_ANSWER_FAILED: 'rtc.create_answer_failed',\n\n    /**\n     * Indicates error while create offer call.\n     */\n    CREATE_OFFER_FAILED: 'rtc.create_offer_failed',\n    DATA_CHANNEL_OPEN: 'rtc.data_channel_open',\n    ENDPOINT_CONN_STATUS_CHANGED: 'rtc.endpoint_conn_status_changed',\n    DOMINANT_SPEAKER_CHANGED: 'rtc.dominant_speaker_changed',\n    LASTN_ENDPOINT_CHANGED: 'rtc.lastn_endpoint_changed',\n\n    /**\n     * Event emitted when the user granted/blocked a permission for the camera / mic.\n     * Used to keep track of the granted permissions on browsers which don't\n     * support the Permissions API.\n     */\n    PERMISSIONS_CHANGED: 'rtc.permissions_changed',\n\n    SENDER_VIDEO_CONSTRAINTS_CHANGED: 'rtc.sender_video_constraints_changed',\n\n    /**\n     * Event emitted when {@link RTC.setLastN} method is called to update with\n     * the new value set.\n     * The first argument is the value passed to {@link RTC.setLastN}.\n     */\n    LASTN_VALUE_CHANGED: 'rtc.lastn_value_changed',\n\n    /**\n     * Event emitted when ssrc for a local track is extracted and stored\n     * in {@link TraceablePeerConnection}.\n     * @param {JitsiLocalTrack} track which ssrc was updated\n     * @param {string} ssrc that was stored\n     */\n    LOCAL_TRACK_SSRC_UPDATED: 'rtc.local_track_ssrc_updated',\n\n    /**\n     * The max enabled resolution of a local video track was changed.\n     */\n    LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED: 'rtc.local_track_max_enabled_resolution_changed',\n\n    TRACK_ATTACHED: 'rtc.track_attached',\n\n    /**\n     * Event fired when we remote track is added to the conference.\n     * 1st event argument is the added <tt>JitsiRemoteTrack</tt> instance.\n     **/\n    REMOTE_TRACK_ADDED: 'rtc.remote_track_added',\n\n    // FIXME get rid of this event in favour of NO_DATA_FROM_SOURCE event\n    // (currently implemented for local tracks only)\n    REMOTE_TRACK_MUTE: 'rtc.remote_track_mute',\n\n    /**\n     * Indicates that the remote track has been removed from the conference.\n     * 1st event argument is the removed {@link JitsiRemoteTrack} instance.\n     */\n    REMOTE_TRACK_REMOVED: 'rtc.remote_track_removed',\n\n    // FIXME get rid of this event in favour of NO_DATA_FROM_SOURCE event\n    // (currently implemented for local tracks only)\n    REMOTE_TRACK_UNMUTE: 'rtc.remote_track_unmute',\n\n    /**\n     * Indicates error while set local description.\n     */\n    SET_LOCAL_DESCRIPTION_FAILED: 'rtc.set_local_description_failed',\n\n    /**\n     * Indicates error while set remote description.\n     */\n    SET_REMOTE_DESCRIPTION_FAILED: 'rtc.set_remote_description_failed',\n    AUDIO_OUTPUT_DEVICE_CHANGED: 'rtc.audio_output_device_changed',\n    DEVICE_LIST_CHANGED: 'rtc.device_list_changed',\n\n    /**\n     * Indicates that the list with available devices will change.\n     */\n    DEVICE_LIST_WILL_CHANGE: 'rtc.device_list_will_change',\n    DEVICE_LIST_AVAILABLE: 'rtc.device_list_available',\n\n    /**\n     * Indicates that a message from another participant is received on\n     * data channel.\n     */\n    ENDPOINT_MESSAGE_RECEIVED: 'rtc.endpoint_message_received',\n\n    /**\n     * Indicates that the remote endpoint stats have been received on data channnel.\n     */\n    ENDPOINT_STATS_RECEIVED: 'rtc.endpoint_stats_received',\n\n    /**\n     * Designates an event indicating that the local ICE username fragment of\n     * the jingle session has changed.\n     * The first argument of the vent is <tt>TraceablePeerConnection</tt> which\n     * is the source of the event.\n     * The second argument is the actual \"ufrag\" string.\n     */\n    LOCAL_UFRAG_CHANGED: 'rtc.local_ufrag_changed',\n\n    /**\n     * Designates an event indicating that the local ICE username fragment of\n     * the jingle session has changed.\n     * The first argument of the vent is <tt>TraceablePeerConnection</tt> which\n     * is the source of the event.\n     * The second argument is the actual \"ufrag\" string.\n     */\n    REMOTE_UFRAG_CHANGED: 'rtc.remote_ufrag_changed'\n};\n\nmodule.exports = RTCEvents;\n","const Resolutions = {\n    '2160': {\n        width: 3840,\n        height: 2160\n    },\n    '4k': {\n        width: 3840,\n        height: 2160\n    },\n    '1080': {\n        width: 1920,\n        height: 1080\n    },\n    'fullhd': {\n        width: 1920,\n        height: 1080\n    },\n    '720': {\n        width: 1280,\n        height: 720\n    },\n    'hd': {\n        width: 1280,\n        height: 720\n    },\n    '540': {\n        width: 960,\n        height: 540\n    },\n    'qhd': {\n        width: 960,\n        height: 540\n    },\n    '480': {\n        width: 640,\n        height: 480\n    },\n    'vga': {\n        width: 640,\n        height: 480\n    },\n    '360': {\n        width: 640,\n        height: 360\n    },\n    '240': {\n        width: 320,\n        height: 240\n    },\n    '180': {\n        width: 320,\n        height: 180\n    }\n};\n\nmodule.exports = Resolutions;\n","/**\n * Enumeration of the video types\n * @type {{CAMERA: string, DESKTOP: string}}\n */\nconst VideoType = {\n    /**\n     * The camera video type.\n     */\n    CAMERA: 'camera',\n\n    /**\n     * The desktop video type.\n     */\n    DESKTOP: 'desktop'\n};\n\nmodule.exports = VideoType;\n","const AuthenticationEvents = {\n    /**\n     * Event callback arguments:\n     * function(authenticationEnabled, userIdentity)\n     * authenticationEnabled - indicates whether authentication has been enabled\n     *                         in this session\n     * userIdentity - if user has been logged in then it contains user name. If\n     *                contains 'null' or 'undefined' then user is not logged in.\n     */\n    IDENTITY_UPDATED: 'authentication.identity_updated'\n};\n\nmodule.exports = AuthenticationEvents;\n","const Constants = {\n    LOCAL_JID: 'local'\n};\n\nmodule.exports = Constants;\n","const XMPPEvents = {\n    /**\n     * Indicates error while adding ice candidate.\n     */\n    ADD_ICE_CANDIDATE_FAILED: 'xmpp.add_ice_candidate_failed',\n\n    // Designates an event indicating that the focus has asked us to mute our\n    // audio.\n    AUDIO_MUTED_BY_FOCUS: 'xmpp.audio_muted_by_focus',\n\n    // Designates an event indicating that the focus has asked us to disable our\n    // camera.\n    VIDEO_MUTED_BY_FOCUS: 'xmpp.video_muted_by_focus',\n    AUTHENTICATION_REQUIRED: 'xmpp.authentication_required',\n    BRIDGE_DOWN: 'xmpp.bridge_down',\n\n    /**\n     * Triggered when 'session-accept' is received from the responder.\n     */\n    CALL_ACCEPTED: 'xmpp.callaccepted.jingle',\n\n    // Designates an event indicating that an offer (e.g. Jingle\n    // session-initiate) was received.\n    CALL_INCOMING: 'xmpp.callincoming.jingle',\n\n    // Triggered when Jicofo kills our media session, this can happen while\n    // we're still in the MUC, when it decides to terminate the media session.\n    // For example when the session is idle for too long, because we're the only\n    // person in the conference room.\n    CALL_ENDED: 'xmpp.callended.jingle',\n    CHAT_ERROR_RECEIVED: 'xmpp.chat_error_received',\n    SETTINGS_ERROR_RECEIVED: 'xmpp.settings_error_received',\n\n    // The conference properties (as advertised by jicofo) have changed\n    CONFERENCE_PROPERTIES_CHANGED: 'xmpp.conference_properties_changed',\n\n    /**\n     * This event is triggered when the ICE connects for the first time.\n     */\n    CONNECTION_ESTABLISHED: 'xmpp.connection.connected',\n\n    // Designates an event indicating that the connection to the XMPP server\n    // failed.\n    CONNECTION_FAILED: 'xmpp.connection.failed',\n\n    // Designates an event indicating that the media (ICE) connection was\n    // interrupted. This should go to the RTC module.\n    CONNECTION_INTERRUPTED: 'xmpp.connection.interrupted',\n\n    // Designates an event indicating that the media (ICE) connection was\n    // restored. This should go to the RTC module.\n    CONNECTION_RESTORED: 'xmpp.connection.restored',\n\n    // Designates an event indicating that the media (ICE) connection failed.\n    // This should go to the RTC module.\n    CONNECTION_ICE_FAILED: 'xmpp.connection.ice.failed',\n\n    // Designates an event indicating that the call has been migrated to a different\n    // bridge and that the client needs to be restarted for a successful transition.\n    CONNECTION_RESTARTED: 'xmpp.connection.restart',\n\n    /**\n     * Designates an event indicating connection status changes.\n     */\n    CONNECTION_STATUS_CHANGED: 'xmpp.connection.status.changed',\n\n    // Designates an event indicating that the display name of a participant\n    // has changed.\n    DISPLAY_NAME_CHANGED: 'xmpp.display_name_changed',\n\n    /**\n     * Chat room instance have been added to Strophe.emuc plugin.\n     */\n    EMUC_ROOM_ADDED: 'xmpp.emuc_room_added',\n\n    /**\n     * Chat room instance have been removed from Strophe.emuc plugin.\n     */\n    EMUC_ROOM_REMOVED: 'xmpp.emuc_room_removed',\n    ETHERPAD: 'xmpp.etherpad',\n    FOCUS_DISCONNECTED: 'xmpp.focus_disconnected',\n    FOCUS_LEFT: 'xmpp.focus_left',\n    GRACEFUL_SHUTDOWN: 'xmpp.graceful_shutdown',\n\n    /**\n     * Event fired when 'transport-replace' Jingle message has been received,\n     * before the new offer is set on the PeerConnection.\n     */\n    ICE_RESTARTING: 'rtc.ice_restarting',\n\n    /**\n     * Event fired after the 'transport-replace' message has been processed\n     * and the new offer has been set successfully.\n     */\n    ICE_RESTART_SUCCESS: 'rtc.ice_restart_success',\n\n    /**\n     * Designates an event indicating that we were kicked from the XMPP MUC.\n     * @param {boolean} isSelfPresence - whether it is for local participant\n     * or another participant.\n     * @param {string} actorJid - the jid of the participant who was initator\n     * of the kick.\n     * @param {?string} participantJid - when it is not a kick for local participant,\n     * this is the jid of the participant which was kicked.\n     */\n    KICKED: 'xmpp.kicked',\n\n    // Designates an event indicating that our role in the XMPP MUC has changed.\n    LOCAL_ROLE_CHANGED: 'xmpp.localrole_changed',\n\n    /**\n     * Event fired when the unique meeting id is set.\n     */\n    MEETING_ID_SET: 'xmpp.meeting_id_set',\n\n    // Designates an event indicating that an XMPP message in the MUC was\n    // received.\n    MESSAGE_RECEIVED: 'xmpp.message_received',\n\n    // Designates an event indicating that an invite XMPP message in the MUC was\n    // received.\n    INVITE_MESSAGE_RECEIVED: 'xmpp.invite_message_received',\n\n    // Designates an event indicating that a private XMPP message in the MUC was\n    // received.\n    PRIVATE_MESSAGE_RECEIVED: 'xmpp.private_message_received',\n\n    // Designates an event indicating that a bot participant type had changed\n    MUC_MEMBER_BOT_TYPE_CHANGED: 'xmpp.muc_member_bot_type_changed',\n\n    // Designates an event indicating that the XMPP MUC was destroyed.\n    MUC_DESTROYED: 'xmpp.muc_destroyed',\n\n    // Designates an event indicating that we are currently in process of joining the XMPP MUC.\n    MUC_JOIN_IN_PROGRESS: 'xmpp.muc_join_in_progress',\n\n    // Designates an event indicating that we have joined the XMPP MUC.\n    MUC_JOINED: 'xmpp.muc_joined',\n\n    // Designates an event indicating that a participant joined the XMPP MUC.\n    MUC_MEMBER_JOINED: 'xmpp.muc_member_joined',\n\n    // Designates an event indicating that a participant left the XMPP MUC.\n    MUC_MEMBER_LEFT: 'xmpp.muc_member_left',\n\n    // Designates an event indicating that a participant joined the lobby XMPP MUC.\n    MUC_LOBBY_MEMBER_JOINED: 'xmpp.muc_lobby_member_joined',\n\n    // Designates an event indicating that a participant in the lobby XMPP MUC has been updated\n    MUC_LOBBY_MEMBER_UPDATED: 'xmpp.muc_lobby_member_updated',\n\n    // Designates an event indicating that a participant left the XMPP MUC.\n    MUC_LOBBY_MEMBER_LEFT: 'xmpp.muc_lobby_member_left',\n\n    // Designates an event indicating that a participant was denied access to a conference from the lobby XMPP MUC.\n    MUC_DENIED_ACCESS: 'xmpp.muc_denied access',\n\n    // Designates an event indicating that local participant left the muc\n    MUC_LEFT: 'xmpp.muc_left',\n\n    // Designates an event indicating that the MUC role of a participant has\n    // changed.\n    MUC_ROLE_CHANGED: 'xmpp.muc_role_changed',\n\n    // Designates an event indicating that the MUC has been locked or unlocked.\n    MUC_LOCK_CHANGED: 'xmpp.muc_lock_changed',\n\n    // Designates an event indicating that the MUC members only config has changed.\n    MUC_MEMBERS_ONLY_CHANGED: 'xmpp.muc_members_only_changed',\n\n    // Designates an event indicating that a participant in the XMPP MUC has\n    // advertised that they have audio muted (or unmuted).\n    PARTICIPANT_AUDIO_MUTED: 'xmpp.audio_muted',\n\n    // Designates an event indicating that a participant in the XMPP MUC has\n    // advertised that they have video muted (or unmuted).\n    PARTICIPANT_VIDEO_MUTED: 'xmpp.video_muted',\n\n    // Designates an event indicating that the video type (e.g. 'camera' or\n    // 'screen') for a participant has changed.\n    // Note: currently this event fires every time we receive presence from\n    // someone (regardless of whether or not the \"video type\" changed).\n    PARTICIPANT_VIDEO_TYPE_CHANGED: 'xmpp.video_type',\n\n    /**\n     * Indicates that the features of the participant has been changed.\n     */\n    PARTICIPANT_FEATURES_CHANGED: 'xmpp.participant_features_changed',\n    PASSWORD_REQUIRED: 'xmpp.password_required',\n\n    /**\n     * Indicates that phone number changed.\n     */\n    PHONE_NUMBER_CHANGED: 'conference.phoneNumberChanged',\n    PRESENCE_RECEIVED: 'xmpp.presence_received',\n    PRESENCE_STATUS: 'xmpp.presence_status',\n    PROMPT_FOR_LOGIN: 'xmpp.prompt_for_login',\n\n    // xmpp is connected and obtained user media\n    READY_TO_JOIN: 'xmpp.ready_to_join',\n\n    /**\n     * Indicates that recording state changed.\n     */\n    RECORDER_STATE_CHANGED: 'xmpp.recorderStateChanged',\n\n    // Designates an event indicating that we received statistics from a\n    // participant in the MUC.\n    REMOTE_STATS: 'xmpp.remote_stats',\n\n    /**\n     * Indicates that the offer / answer renegotiation has failed.\n     */\n    RENEGOTIATION_FAILED: 'xmpp.renegotiation_failed',\n    RESERVATION_ERROR: 'xmpp.room_reservation_error',\n    ROOM_CONNECT_ERROR: 'xmpp.room_connect_error',\n    ROOM_CONNECT_NOT_ALLOWED_ERROR: 'xmpp.room_connect_error.not_allowed',\n    ROOM_JOIN_ERROR: 'xmpp.room_join_error',\n    ROOM_CONNECT_MEMBERS_ONLY_ERROR: 'xmpp.room_connect_error.members_only',\n\n    /**\n     * Indicates that max users limit has been reached.\n     */\n    ROOM_MAX_USERS_ERROR: 'xmpp.room_max_users_error',\n\n    // Designates an event indicating that we sent an XMPP message to the MUC.\n    SENDING_CHAT_MESSAGE: 'xmpp.sending_chat_message',\n\n    // Designates an event indicating that we sent a private XMPP message to\n    // a specific user of the muc.\n    SENDING_PRIVATE_CHAT_MESSAGE: 'xmpp.sending_private_chat_message',\n\n    /**\n     * Event fired after receiving the confirmation about session accept.\n     */\n    SESSION_ACCEPT: 'xmpp.session_accept',\n\n    /**\n     * Event fired if we receive an error after sending the session accept.\n     */\n    SESSION_ACCEPT_ERROR: 'xmpp.session_accept_error',\n\n    /**\n     * Event fired when we do not get our 'session-accept' acknowledged by\n     * Jicofo. It most likely means that there is serious problem with our\n     * connection or XMPP server and we should reload the conference.\n     *\n     * We have seen that to happen in BOSH requests race condition when the BOSH\n     * request table containing the 'session-accept' was discarded by Prosody.\n     * Jicofo does send the RESULT immediately without any condition, so missing\n     * packets means that most likely it has never seen our IQ.\n     */\n    SESSION_ACCEPT_TIMEOUT: 'xmpp.session_accept_timeout',\n\n    /**\n     * Event fired after successful sending of jingle source-add.\n     */\n    SOURCE_ADD: 'xmpp.source_add',\n\n    /**\n     * Event fired after receiving an error sending of jingle source-add.\n     */\n    SOURCE_ADD_ERROR: 'xmpp.source_add_error',\n\n    /**\n     * Event fired after successful sending of jingle source-remove.\n     */\n    SOURCE_REMOVE: 'xmpp.source_remove',\n\n    /**\n     * Event fired after receiving an error sending of jingle source-remove.\n     */\n    SOURCE_REMOVE_ERROR: 'xmpp.source_remove_error',\n\n    /**\n     * Event fired when speaker stats update message is received.\n     */\n    SPEAKER_STATS_RECEIVED: 'xmpp.speaker_stats_received',\n\n    /**\n     * Event fired when conference creation timestamp is received.\n     */\n    CONFERENCE_TIMESTAMP_RECEIVED: 'xmpp.conference_timestamp_received',\n\n    /**\n     * Event fired when we receive a message for AV moderation approved for the local participant.\n     */\n    AV_MODERATION_APPROVED: 'xmpp.av_moderation.approved',\n\n    /**\n    * Event fired when we receive a message for AV moderation rejected for the local participant.\n    */\n    AV_MODERATION_REJECTED: 'xmpp.av_moderation.rejected',\n\n    /**\n     * Event fired when we receive a message for AV moderation.\n     */\n    AV_MODERATION_RECEIVED: 'xmpp.av_moderation.received',\n\n    /**\n     * Event fired when the moderation enable/disable changes.\n     */\n    AV_MODERATION_CHANGED: 'xmpp.av_moderation.changed',\n\n    /**\n     * Event fired when we receive message that a new jid was approved.\n     */\n    AV_MODERATION_PARTICIPANT_APPROVED: 'xmpp.av_moderation.participant.approved',\n\n    /**\n     * Event fired when we receive message that a new jid was approved.\n     */\n    AV_MODERATION_PARTICIPANT_REJECTED: 'xmpp.av_moderation.participant.rejected',\n\n    /**\n     * Event fired when a participant is requested to join a given (breakout) room.\n     */\n    BREAKOUT_ROOMS_MOVE_TO_ROOM: 'xmpp.breakout-rooms.move-to-room',\n\n    /**\n     * Event fired when we receive a message for breakout rooms.\n     */\n    BREAKOUT_ROOMS_EVENT: 'xmpp.breakout-rooms.event',\n\n    /**\n     * Event fired when the breakout rooms data was updated.\n     */\n    BREAKOUT_ROOMS_UPDATED: 'xmpp.breakout-rooms.updated',\n\n    // Designates an event indicating that we should join the conference with\n    // audio and/or video muted.\n    START_MUTED_FROM_FOCUS: 'xmpp.start_muted_from_focus',\n\n    // Designates an event indicating that the subject of the XMPP MUC has\n    // changed.\n    SUBJECT_CHANGED: 'xmpp.subject_changed',\n\n    // FIXME: how does it belong to XMPP ? - it's detected by the PeerConnection\n    // suspending detected\n    SUSPEND_DETECTED: 'xmpp.suspend_detected',\n\n    /**\n     * Notifies for transcription status changes. The event provides the\n     * following parameters to its listeners:\n     *\n     * @param {String} status - The new status.\n     */\n    TRANSCRIPTION_STATUS_CHANGED: 'xmpp.transcription_status_changed',\n\n    /**\n     * Event fired when 'transport-info' with new ICE candidates is received.\n     */\n    TRANSPORT_INFO: 'xmpp.transportinfo.jingle',\n\n    /**\n     * Indicates that video SIP GW state changed.\n     *\n     * @param {VideoSIPGWConstants} status - Any of the following statuses:\n     * STATUS_BUSY, STATUS_AVAILABLE or STATUS_UNDEFINED.\n     */\n    VIDEO_SIP_GW_AVAILABILITY_CHANGED: 'xmpp.videoSIPGWAvailabilityChanged',\n\n    /**\n     * Indicates that video SIP GW Session state changed.\n     * The statuses are any of the following statuses:\n     * STATE_ON, STATE_OFF, STATE_PENDING, STATE_RETRYING, STATE_FAILED.\n     * {@see VideoSIPGWConstants}\n     *\n     * @param {options} event - {address, oldState, newState, displayName}.\n     */\n    VIDEO_SIP_GW_SESSION_STATE_CHANGED:\n        'xmpp.videoSIPGWSessionStateChanged',\n\n    // Designates an event indicating that the local ICE connection state has\n    // changed.\n    ICE_CONNECTION_STATE_CHANGED: 'xmpp.ice_connection_state_changed',\n\n    /**\n     * Event which is emitted when the body in an XMPP message in the MUC\n     * contains JSON\n     */\n    JSON_MESSAGE_RECEIVED: 'xmmp.json_message_received'\n};\n\nmodule.exports = XMPPEvents;\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","!function(e,t){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define([],t):\"object\"==typeof exports?exports.bowser=t():e.bowser=t()}(this,(function(){return function(e){var t={};function r(i){if(t[i])return t[i].exports;var n=t[i]={i:i,l:!1,exports:{}};return e[i].call(n.exports,n,n.exports,r),n.l=!0,n.exports}return r.m=e,r.c=t,r.d=function(e,t,i){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},r.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(r.r(i),Object.defineProperty(i,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var n in e)r.d(i,n,function(t){return e[t]}.bind(null,n));return i},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,\"a\",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p=\"\",r(r.s=90)}({17:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i=r(18),n=function(){function e(){}return e.getFirstMatch=function(e,t){var r=t.match(e);return r&&r.length>0&&r[1]||\"\"},e.getSecondMatch=function(e,t){var r=t.match(e);return r&&r.length>1&&r[2]||\"\"},e.matchAndReturnConst=function(e,t,r){if(e.test(t))return r},e.getWindowsVersionName=function(e){switch(e){case\"NT\":return\"NT\";case\"XP\":return\"XP\";case\"NT 5.0\":return\"2000\";case\"NT 5.1\":return\"XP\";case\"NT 5.2\":return\"2003\";case\"NT 6.0\":return\"Vista\";case\"NT 6.1\":return\"7\";case\"NT 6.2\":return\"8\";case\"NT 6.3\":return\"8.1\";case\"NT 10.0\":return\"10\";default:return}},e.getMacOSVersionName=function(e){var t=e.split(\".\").splice(0,2).map((function(e){return parseInt(e,10)||0}));if(t.push(0),10===t[0])switch(t[1]){case 5:return\"Leopard\";case 6:return\"Snow Leopard\";case 7:return\"Lion\";case 8:return\"Mountain Lion\";case 9:return\"Mavericks\";case 10:return\"Yosemite\";case 11:return\"El Capitan\";case 12:return\"Sierra\";case 13:return\"High Sierra\";case 14:return\"Mojave\";case 15:return\"Catalina\";default:return}},e.getAndroidVersionName=function(e){var t=e.split(\".\").splice(0,2).map((function(e){return parseInt(e,10)||0}));if(t.push(0),!(1===t[0]&&t[1]<5))return 1===t[0]&&t[1]<6?\"Cupcake\":1===t[0]&&t[1]>=6?\"Donut\":2===t[0]&&t[1]<2?\"Eclair\":2===t[0]&&2===t[1]?\"Froyo\":2===t[0]&&t[1]>2?\"Gingerbread\":3===t[0]?\"Honeycomb\":4===t[0]&&t[1]<1?\"Ice Cream Sandwich\":4===t[0]&&t[1]<4?\"Jelly Bean\":4===t[0]&&t[1]>=4?\"KitKat\":5===t[0]?\"Lollipop\":6===t[0]?\"Marshmallow\":7===t[0]?\"Nougat\":8===t[0]?\"Oreo\":9===t[0]?\"Pie\":void 0},e.getVersionPrecision=function(e){return e.split(\".\").length},e.compareVersions=function(t,r,i){void 0===i&&(i=!1);var n=e.getVersionPrecision(t),s=e.getVersionPrecision(r),o=Math.max(n,s),a=0,u=e.map([t,r],(function(t){var r=o-e.getVersionPrecision(t),i=t+new Array(r+1).join(\".0\");return e.map(i.split(\".\"),(function(e){return new Array(20-e.length).join(\"0\")+e})).reverse()}));for(i&&(a=o-Math.min(n,s)),o-=1;o>=a;){if(u[0][o]>u[1][o])return 1;if(u[0][o]===u[1][o]){if(o===a)return 0;o-=1}else if(u[0][o]<u[1][o])return-1}},e.map=function(e,t){var r,i=[];if(Array.prototype.map)return Array.prototype.map.call(e,t);for(r=0;r<e.length;r+=1)i.push(t(e[r]));return i},e.getBrowserAlias=function(e){return i.BROWSER_ALIASES_MAP[e]},e.getBrowserTypeByAlias=function(e){return i.BROWSER_MAP[e]||\"\"},e}();t.default=n,e.exports=t.default},18:function(e,t,r){\"use strict\";t.__esModule=!0,t.ENGINE_MAP=t.OS_MAP=t.PLATFORMS_MAP=t.BROWSER_MAP=t.BROWSER_ALIASES_MAP=void 0;t.BROWSER_ALIASES_MAP={\"Amazon Silk\":\"amazon_silk\",\"Android Browser\":\"android\",Bada:\"bada\",BlackBerry:\"blackberry\",Chrome:\"chrome\",Chromium:\"chromium\",Epiphany:\"epiphany\",Firefox:\"firefox\",Focus:\"focus\",Generic:\"generic\",\"Google Search\":\"google_search\",Googlebot:\"googlebot\",\"Internet Explorer\":\"ie\",\"K-Meleon\":\"k_meleon\",Maxthon:\"maxthon\",\"Microsoft Edge\":\"edge\",\"MZ Browser\":\"mz\",\"NAVER Whale Browser\":\"naver\",Opera:\"opera\",\"Opera Coast\":\"opera_coast\",PhantomJS:\"phantomjs\",Puffin:\"puffin\",QupZilla:\"qupzilla\",QQ:\"qq\",QQLite:\"qqlite\",Safari:\"safari\",Sailfish:\"sailfish\",\"Samsung Internet for Android\":\"samsung_internet\",SeaMonkey:\"seamonkey\",Sleipnir:\"sleipnir\",Swing:\"swing\",Tizen:\"tizen\",\"UC Browser\":\"uc\",Vivaldi:\"vivaldi\",\"WebOS Browser\":\"webos\",WeChat:\"wechat\",\"Yandex Browser\":\"yandex\",Roku:\"roku\"};t.BROWSER_MAP={amazon_silk:\"Amazon Silk\",android:\"Android Browser\",bada:\"Bada\",blackberry:\"BlackBerry\",chrome:\"Chrome\",chromium:\"Chromium\",epiphany:\"Epiphany\",firefox:\"Firefox\",focus:\"Focus\",generic:\"Generic\",googlebot:\"Googlebot\",google_search:\"Google Search\",ie:\"Internet Explorer\",k_meleon:\"K-Meleon\",maxthon:\"Maxthon\",edge:\"Microsoft Edge\",mz:\"MZ Browser\",naver:\"NAVER Whale Browser\",opera:\"Opera\",opera_coast:\"Opera Coast\",phantomjs:\"PhantomJS\",puffin:\"Puffin\",qupzilla:\"QupZilla\",qq:\"QQ Browser\",qqlite:\"QQ Browser Lite\",safari:\"Safari\",sailfish:\"Sailfish\",samsung_internet:\"Samsung Internet for Android\",seamonkey:\"SeaMonkey\",sleipnir:\"Sleipnir\",swing:\"Swing\",tizen:\"Tizen\",uc:\"UC Browser\",vivaldi:\"Vivaldi\",webos:\"WebOS Browser\",wechat:\"WeChat\",yandex:\"Yandex Browser\"};t.PLATFORMS_MAP={tablet:\"tablet\",mobile:\"mobile\",desktop:\"desktop\",tv:\"tv\"};t.OS_MAP={WindowsPhone:\"Windows Phone\",Windows:\"Windows\",MacOS:\"macOS\",iOS:\"iOS\",Android:\"Android\",WebOS:\"WebOS\",BlackBerry:\"BlackBerry\",Bada:\"Bada\",Tizen:\"Tizen\",Linux:\"Linux\",ChromeOS:\"Chrome OS\",PlayStation4:\"PlayStation 4\",Roku:\"Roku\"};t.ENGINE_MAP={EdgeHTML:\"EdgeHTML\",Blink:\"Blink\",Trident:\"Trident\",Presto:\"Presto\",Gecko:\"Gecko\",WebKit:\"WebKit\"}},90:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(91))&&i.__esModule?i:{default:i},s=r(18);function o(e,t){for(var r=0;r<t.length;r++){var i=t[r];i.enumerable=i.enumerable||!1,i.configurable=!0,\"value\"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var a=function(){function e(){}var t,r,i;return e.getParser=function(e,t){if(void 0===t&&(t=!1),\"string\"!=typeof e)throw new Error(\"UserAgent should be a string\");return new n.default(e,t)},e.parse=function(e){return new n.default(e).getResult()},t=e,i=[{key:\"BROWSER_MAP\",get:function(){return s.BROWSER_MAP}},{key:\"ENGINE_MAP\",get:function(){return s.ENGINE_MAP}},{key:\"OS_MAP\",get:function(){return s.OS_MAP}},{key:\"PLATFORMS_MAP\",get:function(){return s.PLATFORMS_MAP}}],(r=null)&&o(t.prototype,r),i&&o(t,i),e}();t.default=a,e.exports=t.default},91:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i=u(r(92)),n=u(r(93)),s=u(r(94)),o=u(r(95)),a=u(r(17));function u(e){return e&&e.__esModule?e:{default:e}}var d=function(){function e(e,t){if(void 0===t&&(t=!1),null==e||\"\"===e)throw new Error(\"UserAgent parameter can't be empty\");this._ua=e,this.parsedResult={},!0!==t&&this.parse()}var t=e.prototype;return t.getUA=function(){return this._ua},t.test=function(e){return e.test(this._ua)},t.parseBrowser=function(){var e=this;this.parsedResult.browser={};var t=i.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.browser=t.describe(this.getUA())),this.parsedResult.browser},t.getBrowser=function(){return this.parsedResult.browser?this.parsedResult.browser:this.parseBrowser()},t.getBrowserName=function(e){return e?String(this.getBrowser().name).toLowerCase()||\"\":this.getBrowser().name||\"\"},t.getBrowserVersion=function(){return this.getBrowser().version},t.getOS=function(){return this.parsedResult.os?this.parsedResult.os:this.parseOS()},t.parseOS=function(){var e=this;this.parsedResult.os={};var t=n.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.os=t.describe(this.getUA())),this.parsedResult.os},t.getOSName=function(e){var t=this.getOS().name;return e?String(t).toLowerCase()||\"\":t||\"\"},t.getOSVersion=function(){return this.getOS().version},t.getPlatform=function(){return this.parsedResult.platform?this.parsedResult.platform:this.parsePlatform()},t.getPlatformType=function(e){void 0===e&&(e=!1);var t=this.getPlatform().type;return e?String(t).toLowerCase()||\"\":t||\"\"},t.parsePlatform=function(){var e=this;this.parsedResult.platform={};var t=s.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.platform=t.describe(this.getUA())),this.parsedResult.platform},t.getEngine=function(){return this.parsedResult.engine?this.parsedResult.engine:this.parseEngine()},t.getEngineName=function(e){return e?String(this.getEngine().name).toLowerCase()||\"\":this.getEngine().name||\"\"},t.parseEngine=function(){var e=this;this.parsedResult.engine={};var t=o.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.engine=t.describe(this.getUA())),this.parsedResult.engine},t.parse=function(){return this.parseBrowser(),this.parseOS(),this.parsePlatform(),this.parseEngine(),this},t.getResult=function(){return Object.assign({},this.parsedResult)},t.satisfies=function(e){var t=this,r={},i=0,n={},s=0;if(Object.keys(e).forEach((function(t){var o=e[t];\"string\"==typeof o?(n[t]=o,s+=1):\"object\"==typeof o&&(r[t]=o,i+=1)})),i>0){var o=Object.keys(r),a=o.find((function(e){return t.isOS(e)}));if(a){var u=this.satisfies(r[a]);if(void 0!==u)return u}var d=o.find((function(e){return t.isPlatform(e)}));if(d){var c=this.satisfies(r[d]);if(void 0!==c)return c}}if(s>0){var f=Object.keys(n).find((function(e){return t.isBrowser(e,!0)}));if(void 0!==f)return this.compareVersion(n[f])}},t.isBrowser=function(e,t){void 0===t&&(t=!1);var r=this.getBrowserName().toLowerCase(),i=e.toLowerCase(),n=a.default.getBrowserTypeByAlias(i);return t&&n&&(i=n.toLowerCase()),i===r},t.compareVersion=function(e){var t=[0],r=e,i=!1,n=this.getBrowserVersion();if(\"string\"==typeof n)return\">\"===e[0]||\"<\"===e[0]?(r=e.substr(1),\"=\"===e[1]?(i=!0,r=e.substr(2)):t=[],\">\"===e[0]?t.push(1):t.push(-1)):\"=\"===e[0]?r=e.substr(1):\"~\"===e[0]&&(i=!0,r=e.substr(1)),t.indexOf(a.default.compareVersions(n,r,i))>-1},t.isOS=function(e){return this.getOSName(!0)===String(e).toLowerCase()},t.isPlatform=function(e){return this.getPlatformType(!0)===String(e).toLowerCase()},t.isEngine=function(e){return this.getEngineName(!0)===String(e).toLowerCase()},t.is=function(e){return this.isBrowser(e)||this.isOS(e)||this.isPlatform(e)},t.some=function(e){var t=this;return void 0===e&&(e=[]),e.some((function(e){return t.is(e)}))},e}();t.default=d,e.exports=t.default},92:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i};var s=/version\\/(\\d+(\\.?_?\\d+)+)/i,o=[{test:[/googlebot/i],describe:function(e){var t={name:\"Googlebot\"},r=n.default.getFirstMatch(/googlebot\\/(\\d+(\\.\\d+))/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/opera/i],describe:function(e){var t={name:\"Opera\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:opera)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/opr\\/|opios/i],describe:function(e){var t={name:\"Opera\"},r=n.default.getFirstMatch(/(?:opr|opios)[\\s/](\\S+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/SamsungBrowser/i],describe:function(e){var t={name:\"Samsung Internet for Android\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:SamsungBrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/Whale/i],describe:function(e){var t={name:\"NAVER Whale Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:whale)[\\s/](\\d+(?:\\.\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/MZBrowser/i],describe:function(e){var t={name:\"MZ Browser\"},r=n.default.getFirstMatch(/(?:MZBrowser)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/focus/i],describe:function(e){var t={name:\"Focus\"},r=n.default.getFirstMatch(/(?:focus)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/swing/i],describe:function(e){var t={name:\"Swing\"},r=n.default.getFirstMatch(/(?:swing)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/coast/i],describe:function(e){var t={name:\"Opera Coast\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:coast)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/yabrowser/i],describe:function(e){var t={name:\"Yandex Browser\"},r=n.default.getFirstMatch(/(?:yabrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/ucbrowser/i],describe:function(e){var t={name:\"UC Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:ucbrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/Maxthon|mxios/i],describe:function(e){var t={name:\"Maxthon\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:Maxthon|mxios)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/epiphany/i],describe:function(e){var t={name:\"Epiphany\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:epiphany)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/puffin/i],describe:function(e){var t={name:\"Puffin\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:puffin)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/sleipnir/i],describe:function(e){var t={name:\"Sleipnir\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:sleipnir)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/k-meleon/i],describe:function(e){var t={name:\"K-Meleon\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:k-meleon)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/micromessenger/i],describe:function(e){var t={name:\"WeChat\"},r=n.default.getFirstMatch(/(?:micromessenger)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/qqbrowser/i],describe:function(e){var t={name:/qqbrowserlite/i.test(e)?\"QQ Browser Lite\":\"QQ Browser\"},r=n.default.getFirstMatch(/(?:qqbrowserlite|qqbrowser)[/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/msie|trident/i],describe:function(e){var t={name:\"Internet Explorer\"},r=n.default.getFirstMatch(/(?:msie |rv:)(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/\\sedg\\//i],describe:function(e){var t={name:\"Microsoft Edge\"},r=n.default.getFirstMatch(/\\sedg\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/edg([ea]|ios)/i],describe:function(e){var t={name:\"Microsoft Edge\"},r=n.default.getSecondMatch(/edg([ea]|ios)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/vivaldi/i],describe:function(e){var t={name:\"Vivaldi\"},r=n.default.getFirstMatch(/vivaldi\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/seamonkey/i],describe:function(e){var t={name:\"SeaMonkey\"},r=n.default.getFirstMatch(/seamonkey\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/sailfish/i],describe:function(e){var t={name:\"Sailfish\"},r=n.default.getFirstMatch(/sailfish\\s?browser\\/(\\d+(\\.\\d+)?)/i,e);return r&&(t.version=r),t}},{test:[/silk/i],describe:function(e){var t={name:\"Amazon Silk\"},r=n.default.getFirstMatch(/silk\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/phantom/i],describe:function(e){var t={name:\"PhantomJS\"},r=n.default.getFirstMatch(/phantomjs\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/slimerjs/i],describe:function(e){var t={name:\"SlimerJS\"},r=n.default.getFirstMatch(/slimerjs\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/blackberry|\\bbb\\d+/i,/rim\\stablet/i],describe:function(e){var t={name:\"BlackBerry\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/blackberry[\\d]+\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/(web|hpw)[o0]s/i],describe:function(e){var t={name:\"WebOS Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/w(?:eb)?[o0]sbrowser\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/bada/i],describe:function(e){var t={name:\"Bada\"},r=n.default.getFirstMatch(/dolfin\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/tizen/i],describe:function(e){var t={name:\"Tizen\"},r=n.default.getFirstMatch(/(?:tizen\\s?)?browser\\/(\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/qupzilla/i],describe:function(e){var t={name:\"QupZilla\"},r=n.default.getFirstMatch(/(?:qupzilla)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/firefox|iceweasel|fxios/i],describe:function(e){var t={name:\"Firefox\"},r=n.default.getFirstMatch(/(?:firefox|iceweasel|fxios)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/chromium/i],describe:function(e){var t={name:\"Chromium\"},r=n.default.getFirstMatch(/(?:chromium)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/chrome|crios|crmo/i],describe:function(e){var t={name:\"Chrome\"},r=n.default.getFirstMatch(/(?:chrome|crios|crmo)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/GSA/i],describe:function(e){var t={name:\"Google Search\"},r=n.default.getFirstMatch(/(?:GSA)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r},describe:function(e){var t={name:\"Android Browser\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/playstation 4/i],describe:function(e){var t={name:\"PlayStation 4\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/safari|applewebkit/i],describe:function(e){var t={name:\"Safari\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/.*/i],describe:function(e){var t=-1!==e.search(\"\\\\(\")?/^(.*)\\/(.*)[ \\t]\\((.*)/:/^(.*)\\/(.*) /;return{name:n.default.getFirstMatch(t,e),version:n.default.getSecondMatch(t,e)}}}];t.default=o,e.exports=t.default},93:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:[/Roku\\/DVP/],describe:function(e){var t=n.default.getFirstMatch(/Roku\\/DVP-(\\d+\\.\\d+)/i,e);return{name:s.OS_MAP.Roku,version:t}}},{test:[/windows phone/i],describe:function(e){var t=n.default.getFirstMatch(/windows phone (?:os)?\\s?(\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.WindowsPhone,version:t}}},{test:[/windows/i],describe:function(e){var t=n.default.getFirstMatch(/Windows ((NT|XP)( \\d\\d?.\\d)?)/i,e),r=n.default.getWindowsVersionName(t);return{name:s.OS_MAP.Windows,version:t,versionName:r}}},{test:[/macintosh/i],describe:function(e){var t=n.default.getFirstMatch(/mac os x (\\d+(\\.?_?\\d+)+)/i,e).replace(/[_\\s]/g,\".\"),r=n.default.getMacOSVersionName(t),i={name:s.OS_MAP.MacOS,version:t};return r&&(i.versionName=r),i}},{test:[/(ipod|iphone|ipad)/i],describe:function(e){var t=n.default.getFirstMatch(/os (\\d+([_\\s]\\d+)*) like mac os x/i,e).replace(/[_\\s]/g,\".\");return{name:s.OS_MAP.iOS,version:t}}},{test:function(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r},describe:function(e){var t=n.default.getFirstMatch(/android[\\s/-](\\d+(\\.\\d+)*)/i,e),r=n.default.getAndroidVersionName(t),i={name:s.OS_MAP.Android,version:t};return r&&(i.versionName=r),i}},{test:[/(web|hpw)[o0]s/i],describe:function(e){var t=n.default.getFirstMatch(/(?:web|hpw)[o0]s\\/(\\d+(\\.\\d+)*)/i,e),r={name:s.OS_MAP.WebOS};return t&&t.length&&(r.version=t),r}},{test:[/blackberry|\\bbb\\d+/i,/rim\\stablet/i],describe:function(e){var t=n.default.getFirstMatch(/rim\\stablet\\sos\\s(\\d+(\\.\\d+)*)/i,e)||n.default.getFirstMatch(/blackberry\\d+\\/(\\d+([_\\s]\\d+)*)/i,e)||n.default.getFirstMatch(/\\bbb(\\d+)/i,e);return{name:s.OS_MAP.BlackBerry,version:t}}},{test:[/bada/i],describe:function(e){var t=n.default.getFirstMatch(/bada\\/(\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.Bada,version:t}}},{test:[/tizen/i],describe:function(e){var t=n.default.getFirstMatch(/tizen[/\\s](\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.Tizen,version:t}}},{test:[/linux/i],describe:function(){return{name:s.OS_MAP.Linux}}},{test:[/CrOS/],describe:function(){return{name:s.OS_MAP.ChromeOS}}},{test:[/PlayStation 4/],describe:function(e){var t=n.default.getFirstMatch(/PlayStation 4[/\\s](\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.PlayStation4,version:t}}}];t.default=o,e.exports=t.default},94:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:[/googlebot/i],describe:function(){return{type:\"bot\",vendor:\"Google\"}}},{test:[/huawei/i],describe:function(e){var t=n.default.getFirstMatch(/(can-l01)/i,e)&&\"Nova\",r={type:s.PLATFORMS_MAP.mobile,vendor:\"Huawei\"};return t&&(r.model=t),r}},{test:[/nexus\\s*(?:7|8|9|10).*/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Nexus\"}}},{test:[/ipad/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Apple\",model:\"iPad\"}}},{test:[/kftt build/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Amazon\",model:\"Kindle Fire HD 7\"}}},{test:[/silk/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Amazon\"}}},{test:[/tablet(?! pc)/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet}}},{test:function(e){var t=e.test(/ipod|iphone/i),r=e.test(/like (ipod|iphone)/i);return t&&!r},describe:function(e){var t=n.default.getFirstMatch(/(ipod|iphone)/i,e);return{type:s.PLATFORMS_MAP.mobile,vendor:\"Apple\",model:t}}},{test:[/nexus\\s*[0-6].*/i,/galaxy nexus/i],describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"Nexus\"}}},{test:[/[^-]mobi/i],describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"blackberry\"===e.getBrowserName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"BlackBerry\"}}},{test:function(e){return\"bada\"===e.getBrowserName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"windows phone\"===e.getBrowserName()},describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"Microsoft\"}}},{test:function(e){var t=Number(String(e.getOSVersion()).split(\".\")[0]);return\"android\"===e.getOSName(!0)&&t>=3},describe:function(){return{type:s.PLATFORMS_MAP.tablet}}},{test:function(e){return\"android\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"macos\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop,vendor:\"Apple\"}}},{test:function(e){return\"windows\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop}}},{test:function(e){return\"linux\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop}}},{test:function(e){return\"playstation 4\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.tv}}},{test:function(e){return\"roku\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.tv}}}];t.default=o,e.exports=t.default},95:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:function(e){return\"microsoft edge\"===e.getBrowserName(!0)},describe:function(e){if(/\\sedg\\//i.test(e))return{name:s.ENGINE_MAP.Blink};var t=n.default.getFirstMatch(/edge\\/(\\d+(\\.?_?\\d+)+)/i,e);return{name:s.ENGINE_MAP.EdgeHTML,version:t}}},{test:[/trident/i],describe:function(e){var t={name:s.ENGINE_MAP.Trident},r=n.default.getFirstMatch(/trident\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){return e.test(/presto/i)},describe:function(e){var t={name:s.ENGINE_MAP.Presto},r=n.default.getFirstMatch(/presto\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){var t=e.test(/gecko/i),r=e.test(/like gecko/i);return t&&!r},describe:function(e){var t={name:s.ENGINE_MAP.Gecko},r=n.default.getFirstMatch(/gecko\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/(apple)?webkit\\/537\\.36/i],describe:function(){return{name:s.ENGINE_MAP.Blink}}},{test:[/(apple)?webkit/i],describe:function(e){var t={name:s.ENGINE_MAP.WebKit},r=n.default.getFirstMatch(/webkit\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}}];t.default=o,e.exports=t.default}})}));","/*!\n * currentExecutingScript\n * Get the currently executing script, regardless of its source/trigger/synchronicity. Similar to HTML5's `document.currentScript` but arguably much more useful!\n * Copyright (c) 2015 James M. Greene\n * Licensed MIT\n * https://github.com/JamesMGreene/currentExecutingScript\n * v0.1.3\n */\n(function(root, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([], factory);\n  } else if (typeof exports === \"object\") {\n    // CommonJS-like environments that support `module.exports`,\n    // like Node.js. Does not work with strict CommonJS!\n    module.exports = factory();\n  } else {\n    // Browser globals (`root` is `window`)\n    root.currentExecutingScript = factory();\n  }\n}(\n  // Current context/scope\n  this || window,\n\n  // Factory function to return the export\n  function() {\n\nvar scriptReadyRegex = /^(interactive|loaded|complete)$/;\n\n// This page's URL (minus query string and fragment identifer hash, if any)\nvar fullPageUrl = !!window.location ? window.location.href : null;\nvar pageUrl = fullPageUrl ? fullPageUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\") || null : null;\n\n// Live NodeList collection\nvar scripts = document.getElementsByTagName(\"script\");\n\n// Check if the browser supports the `readyState` property on `script` elements\nvar supportsScriptReadyState = \"readyState\" in (scripts[0] || document.createElement(\"script\"));\n\n// Lousy browser detection for [not] Opera\nvar isNotOpera = !window.opera || window.opera.toString() !== \"[object Opera]\";\n\n// Detect if `document.currentScript` is supported\nvar hasNativeCurrentScriptAccessor = \"currentScript\" in document;\n\nvar originalStackDepthConfig;\n// Detect if the V8 Error Stack Trace API is supported\nif (\"stackTraceLimit\" in Error && Error.stackTraceLimit !== Infinity) {\n  originalStackDepthConfig = Error.stackTraceLimit;\n  Error.stackTraceLimit = Infinity;\n}\n\n\n// In some browsers (e.g. Chrome), you can get the current stack from an Error\n// object instance without needing to throw it. Avoiding an unnecessary\n// use of `throw` saves time and performance.\nvar hasStackBeforeThrowing = false,\n    hasStackAfterThrowing = false;\n(function() {\n  try {\n    var err = new Error();\n    hasStackBeforeThrowing = typeof err.stack === \"string\" && !!err.stack;\n    throw err;\n  }\n  catch (thrownErr) {\n    hasStackAfterThrowing = typeof thrownErr.stack === \"string\" && !!thrownErr.stack;\n  }\n})();\n\n\n// Normalize whitespace within a string\nfunction normalizeWhitespace(str) {\n  return str ? str.replace(/^\\s+$|\\s+$/g, \"\").replace(/\\s\\s+/g, \" \") : \"\";\n}\n\n// Get script object based on the `src` URL\nfunction getScriptFromUrl(url, eligibleScripts) {\n  var i,\n      script = null;\n\n  eligibleScripts = eligibleScripts || scripts;\n\n  if (typeof url === \"string\" && url) {\n    for (i = eligibleScripts.length; i--; ) {\n      if (eligibleScripts[i].src === url) {\n        // NOTE: Could check if the same script URL is used by more than one `script` element\n        // here... but let's not. That would yield less useful results in \"loose\" detection. ;)\n        script = eligibleScripts[i];\n        break;\n      }\n    }\n  }\n  return script;\n}\n\n// Get script object based on the caller function's source code body (text)\nfunction getInlineScriptFromCallerSource(callerFnSource, eligibleScripts) {\n  var i, inlineScriptText,\n      script = null,\n      callerSourceText = normalizeWhitespace(callerFnSource);\n\n  eligibleScripts = eligibleScripts || scripts;\n\n  if (callerFnSource && callerSourceText) {\n    for (i = eligibleScripts.length; i--; ) {\n      // Only look at inline scripts\n      if (!eligibleScripts[i].hasAttribute(\"src\")) {\n        inlineScriptText = normalizeWhitespace(eligibleScripts[i].text);\n        if (inlineScriptText.indexOf(callerSourceText) !== -1) {\n          // If more than one match is found, don't return any\n          if (script) {\n            script = null;\n            break;\n          }\n          script = eligibleScripts[i];\n        }\n      }\n    }\n  }\n\n  return script;\n}\n\n// If there is only a single inline script on the page, return it; otherwise `null`\nfunction getSoleInlineScript(eligibleScripts) {\n  var i, len,\n      script = null;\n  eligibleScripts = eligibleScripts || scripts;\n  for (i = 0, len = eligibleScripts.length; i < len; i++) {\n    if (!eligibleScripts[i].hasAttribute(\"src\")) {\n      if (script) {\n        script = null;\n        break;\n      }\n      script = eligibleScripts[i];\n    }\n  }\n  return script;\n}\n\n// Get the currently executing script URL from an Error stack trace\nfunction getScriptUrlFromStack(stack, skipStackDepth) {\n  var matches, remainingStack,\n      url = null,\n      ignoreMessage = typeof skipStackDepth === \"number\";\n  skipStackDepth = ignoreMessage ? Math.round(skipStackDepth) : 0;\n  if (typeof stack === \"string\" && stack) {\n    if (ignoreMessage) {\n      matches = stack.match(/(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n    }\n    else {\n      matches = stack.match(/^(?:|[^:@]*@|.+\\)@(?=data:text\\/javascript|blob|http[s]?|file)|.+?\\s+(?: at |@)(?:[^:\\(]+ )*[\\(]?)(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n\n      if (!(matches && matches[1])) {\n        matches = stack.match(/\\)@(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n      }\n    }\n\n    if (matches && matches[1]) {\n      if (skipStackDepth > 0) {\n        remainingStack = stack.slice(stack.indexOf(matches[0]) + matches[0].length);\n        url = getScriptUrlFromStack(remainingStack, (skipStackDepth - 1));\n      }\n      else {\n        url = matches[1];\n      }\n    }\n\n    // TODO: Handle more edge cases!\n    // Fixes #1\n    // See https://github.com/JamesMGreene/currentExecutingScript/issues/1\n\n    // ???\n\n  }\n  return url;\n}\n\n\n// Get the farthest currently executing (i.e. yes, EXECUTING) `script` DOM\n// element for the caller function, regardless of whether it is that `script`\n// DOM element is currently being evaluated for the first time. The farthest\n// currently executing `script` DOM element would typically be considered the\n// originator of the current execution stack.\nfunction _farthestExecutingScript() {\n  /*jshint noarg:false */\n\n  // TODO: Implement!\n  // Fixes #3\n  // See https://github.com/JamesMGreene/currentExecutingScript/issues/3\n  return null;\n\n/*\n  // Yes, this IS possible, i.e. if a script removes other scripts (or itself)\n  if (scripts.length === 0) {\n    return null;\n  }\n\n  // Guaranteed accurate in IE 6-10.\n  // Not accurate/supported in any other browsers.\n  if (isNotOpera && supportsScriptReadyState) {\n    for (var i = scripts.length; i--; ) {\n      if (scripts[i].readyState === \"interactive\") {\n        return scripts[i];\n      }\n    }\n  }\n\n  var stack,\n      e = new Error();\n  if (hasStackBeforeThrowing) {\n    stack = e.stack;\n  }\n  if (!stack && hasStackAfterThrowing) {\n    try {\n      throw e;\n    }\n    catch (err) {\n      // NOTE: Cannot use `err.sourceURL` or `err.fileName` as they will always be THIS script\n      stack = err.stack;\n    }\n  }\n  if (stack) {\n    var url = getScriptUrlFromStack(stack, skipStackDepth);\n    var script = getScriptFromUrl(url, scripts );\n    if (!script && pageUrl && url === pageUrl) {\n      // Try to find the correct inline script by searching through\n      // inline scripts' text content for the caller function's source\n      // code to be present. If the caller function's source code is\n      // not available, see if there is only one inline script element\n      // in the DOM and return that (even though it may be wrong)\n\n      // TODO: Implement!\n      // Fixes #4 in part\n      // See https://github.com/JamesMGreene/currentExecutingScript/issues/4\n\n      var callerFn = _farthestExecutingScript.caller || null,\n          callerFnStack = [],\n          callerFnSource = null;\n\n      while (callerFn) {\n        callerFnStack.push(callerFn);\n        callerFn = callerFn.caller || null;\n      }\n      callerFn = callerFnStack.slice(-1)[0];\n      callerFnSource = callerFn ? (\"\" + callerFn) : null;\n\n\n      if (callerFnSource) {\n        script = getInlineScriptFromCallerSource(callerFnSource);\n      }\n      else {\n        // NOTE: This is a loose assumption that could be inaccurate!\n        //\n        // Inaccuracies:\n        //  - If the inline script that initiated the call was also removed from the DOM.\n        //  - If the call was initiated by an element's inline event handler,\n        //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n        script = getSoleInlineScript();\n      }\n    }\n    return script;\n  }\n\n  // NOTE: This is a loose assumption that could be inaccurate!\n  //\n  // Inaccuracies:\n  //  - If a script is created dynamically and appended to some position\n  //    other than the very end of the document.\n  //  - If multiple scripts are created dynamically and all appended to the\n  //    same position within the document (and do not have their `async` attributes\n  //    set to `false`, at least in browsers that support async script evaluation.\n  //    other than the very end of the document.\n  //  - If any scripts are added with the `async` attribute set to `true` in a browser\n  //    that supports it.\n  //  - May get confused by `script` elements within `svg` elements\n  return scripts[scripts.length - 1] || null;\n*/\n}\n\n\n// Get the originating currently executing (i.e. yes, EXECUTING) `script` DOM\n// element or attribute node (e.g. `onclick`) for the caller function,\n// regardless of whether it is that `script` DOM element is currently being\n// evaluated for the first time. The originating currently executing `script`\n// DOM element [or attribute node] is the originator of the current execution stack.\nfunction _originatingExecutingScript() {\n  // TODO: Implement!\n  // Fixes #2\n  // See https://github.com/JamesMGreene/currentExecutingScript/issues/2\n  return null;\n}\n\n// Get the nearest currently executing (i.e. yes, EXECUTING) `script` DOM\n// element for the caller function, regardless of whether it is that `script`\n// DOM element is currently being evaluated for the first time.\nfunction _nearestExecutingScript() {\n  /*jshint noarg:false */\n\n  // Yes, this IS possible, i.e. if a script removes other scripts (or itself)\n  if (scripts.length === 0) {\n    return null;\n  }\n\n  var i, e, stack, url, script,\n      eligibleScripts = [],\n      skipStackDepth = _nearestExecutingScript.skipStackDepth || 1,\n\n      // TODO: Implement!\n      // Fixes #4 in part\n      // See https://github.com/JamesMGreene/currentExecutingScript/issues/4\n      callerFnSource = null;  //(\"\" + (_nearestExecutingScript.caller || \"\")) || null;\n\n  // This part will only help in IE 6-10.\n  for (i = 0; i < scripts.length; i++) {\n    if (isNotOpera && supportsScriptReadyState) {\n      if (scriptReadyRegex.test(scripts[i].readyState)) {\n        eligibleScripts.push(scripts[i]);\n      }\n    }\n    else {\n      eligibleScripts.push(scripts[i]);\n    }\n  }\n\n  e = new Error();\n  if (hasStackBeforeThrowing) {\n    stack = e.stack;\n  }\n  if (!stack && hasStackAfterThrowing) {\n    try {\n      throw e;\n    }\n    catch (err) {\n      // NOTE: Cannot use `err.sourceURL` or `err.fileName` as they will always be THIS script\n      stack = err.stack;\n    }\n  }\n\n  if (stack) {\n    url = getScriptUrlFromStack(stack, skipStackDepth);\n    script = getScriptFromUrl(url, eligibleScripts);\n\n    if (!script && pageUrl && url === pageUrl) {\n      // Try to find the correct inline script by searching through\n      // inline scripts' text content for the caller function's source\n      // code to be present.\n      if (callerFnSource) {\n        script = getInlineScriptFromCallerSource(callerFnSource, eligibleScripts);\n      }\n      // If the caller function's source code is not available, see if\n      // there is only one inline script element in the DOM and return\n      // that (even though it may be wrong)...\n      else {\n        // NOTE: This is a loose assumption that could be inaccurate!\n        //\n        // Inaccuracies:\n        //  - If the inline script that initiated the call was also removed from the DOM.\n        //  - If the call was initiated by an element's inline event handler,\n        //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n        script = getSoleInlineScript(eligibleScripts);\n      }\n    }\n  }\n\n  //\n  // Welcome to the Island of Inaccurate Assumptions!\n  // NOTE: ALL of the following are loose assumptions that could be inaccurate!\n  //\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If the inline script that initiated the call was also removed from the DOM.\n    //  - If the call was initiated by an element's inline event handler,\n    //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n    if (eligibleScripts.length === 1) {\n      script = eligibleScripts[0];\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    if (hasNativeCurrentScriptAccessor) {\n      script = document.currentScript;\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    if (isNotOpera && supportsScriptReadyState) {\n      for (i = eligibleScripts.length; i--; ) {\n        if (eligibleScripts[i].readyState === \"interactive\") {\n          script = eligibleScripts[i];\n          break;\n        }\n      }\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If a script is created dynamically and appended to some position\n    //    other than the very end of the document.\n    //  - If multiple scripts are created dynamically and all appended to the\n    //    same position within the document (and do not have their `async` attributes\n    //    set to `false`, at least in browsers that support async script evaluation.\n    //    other than the very end of the document.\n    //  - If any scripts are added with the `async` attribute set to `true` in a browser\n    //    that supports it.\n    //  - May get confused by `script` elements within `svg` elements\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    //    ```\n    script = eligibleScripts[eligibleScripts.length - 1] || null;\n  }\n\n  return script;\n}\n\n// Default stack depth to skip over when analyzing call stack frames\n_nearestExecutingScript.skipStackDepth = 1;\n\n\n\n    //\n    // Export the API\n    //\n    var currentExecutingScript    = _nearestExecutingScript;      // default\n    currentExecutingScript.near   = _nearestExecutingScript;\n    currentExecutingScript.far    = _farthestExecutingScript;\n    currentExecutingScript.origin = _originatingExecutingScript;\n\n\n    // Just return a value to define the module export.\n    // This example returns an object, but the module\n    // can return a function as the exported value.\n    return currentExecutingScript;\n  })\n);\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function errorListener(err) {\n      emitter.removeListener(name, resolver);\n      reject(err);\n    }\n\n    function resolver() {\n      if (typeof emitter.removeListener === 'function') {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n\n    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\n    if (name !== 'error') {\n      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\n    }\n  });\n}\n\nfunction addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n  if (typeof emitter.on === 'function') {\n    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);\n  }\n}\n\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n  if (typeof emitter.on === 'function') {\n    if (flags.once) {\n      emitter.once(name, listener);\n    } else {\n      emitter.on(name, listener);\n    }\n  } else if (typeof emitter.addEventListener === 'function') {\n    // EventTarget does not have `error` event semantics like Node\n    // EventEmitters, we do not listen for `error` events here.\n    emitter.addEventListener(name, function wrapListener(arg) {\n      // IE does not have builtin `{ once: true }` support so we\n      // have to do it manually.\n      if (flags.once) {\n        emitter.removeEventListener(name, wrapListener);\n      }\n      listener(arg);\n    });\n  } else {\n    throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n  }\n}\n","/**\n * [js-md5]{@link https://github.com/emn178/js-md5}\n *\n * @namespace md5\n * @version 0.7.3\n * @author Chen, Yi-Cyuan [emn178@gmail.com]\n * @copyright Chen, Yi-Cyuan 2014-2017\n * @license MIT\n */\n(function () {\n  'use strict';\n\n  var ERROR = 'input is invalid type';\n  var WINDOW = typeof window === 'object';\n  var root = WINDOW ? window : {};\n  if (root.JS_MD5_NO_WINDOW) {\n    WINDOW = false;\n  }\n  var WEB_WORKER = !WINDOW && typeof self === 'object';\n  var NODE_JS = !root.JS_MD5_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;\n  if (NODE_JS) {\n    root = global;\n  } else if (WEB_WORKER) {\n    root = self;\n  }\n  var COMMON_JS = !root.JS_MD5_NO_COMMON_JS && typeof module === 'object' && module.exports;\n  var AMD = typeof define === 'function' && define.amd;\n  var ARRAY_BUFFER = !root.JS_MD5_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';\n  var HEX_CHARS = '0123456789abcdef'.split('');\n  var EXTRA = [128, 32768, 8388608, -2147483648];\n  var SHIFT = [0, 8, 16, 24];\n  var OUTPUT_TYPES = ['hex', 'array', 'digest', 'buffer', 'arrayBuffer', 'base64'];\n  var BASE64_ENCODE_CHAR = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');\n\n  var blocks = [], buffer8;\n  if (ARRAY_BUFFER) {\n    var buffer = new ArrayBuffer(68);\n    buffer8 = new Uint8Array(buffer);\n    blocks = new Uint32Array(buffer);\n  }\n\n  if (root.JS_MD5_NO_NODE_JS || !Array.isArray) {\n    Array.isArray = function (obj) {\n      return Object.prototype.toString.call(obj) === '[object Array]';\n    };\n  }\n\n  if (ARRAY_BUFFER && (root.JS_MD5_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {\n    ArrayBuffer.isView = function (obj) {\n      return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;\n    };\n  }\n\n  /**\n   * @method hex\n   * @memberof md5\n   * @description Output hash as hex string\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {String} Hex string\n   * @example\n   * md5.hex('The quick brown fox jumps over the lazy dog');\n   * // equal to\n   * md5('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method digest\n   * @memberof md5\n   * @description Output hash as bytes array\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Array} Bytes array\n   * @example\n   * md5.digest('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method array\n   * @memberof md5\n   * @description Output hash as bytes array\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Array} Bytes array\n   * @example\n   * md5.array('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method arrayBuffer\n   * @memberof md5\n   * @description Output hash as ArrayBuffer\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @example\n   * md5.arrayBuffer('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method buffer\n   * @deprecated This maybe confuse with Buffer in node.js. Please use arrayBuffer instead.\n   * @memberof md5\n   * @description Output hash as ArrayBuffer\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @example\n   * md5.buffer('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method base64\n   * @memberof md5\n   * @description Output hash as base64 string\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {String} base64 string\n   * @example\n   * md5.base64('The quick brown fox jumps over the lazy dog');\n   */\n  var createOutputMethod = function (outputType) {\n    return function (message) {\n      return new Md5(true).update(message)[outputType]();\n    };\n  };\n\n  /**\n   * @method create\n   * @memberof md5\n   * @description Create Md5 object\n   * @returns {Md5} Md5 object.\n   * @example\n   * var hash = md5.create();\n   */\n  /**\n   * @method update\n   * @memberof md5\n   * @description Create and update Md5 object\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Md5} Md5 object.\n   * @example\n   * var hash = md5.update('The quick brown fox jumps over the lazy dog');\n   * // equal to\n   * var hash = md5.create();\n   * hash.update('The quick brown fox jumps over the lazy dog');\n   */\n  var createMethod = function () {\n    var method = createOutputMethod('hex');\n    if (NODE_JS) {\n      method = nodeWrap(method);\n    }\n    method.create = function () {\n      return new Md5();\n    };\n    method.update = function (message) {\n      return method.create().update(message);\n    };\n    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {\n      var type = OUTPUT_TYPES[i];\n      method[type] = createOutputMethod(type);\n    }\n    return method;\n  };\n\n  var nodeWrap = function (method) {\n    var crypto = eval(\"require('crypto')\");\n    var Buffer = eval(\"require('buffer').Buffer\");\n    var nodeMethod = function (message) {\n      if (typeof message === 'string') {\n        return crypto.createHash('md5').update(message, 'utf8').digest('hex');\n      } else {\n        if (message === null || message === undefined) {\n          throw ERROR;\n        } else if (message.constructor === ArrayBuffer) {\n          message = new Uint8Array(message);\n        }\n      }\n      if (Array.isArray(message) || ArrayBuffer.isView(message) ||\n        message.constructor === Buffer) {\n        return crypto.createHash('md5').update(new Buffer(message)).digest('hex');\n      } else {\n        return method(message);\n      }\n    };\n    return nodeMethod;\n  };\n\n  /**\n   * Md5 class\n   * @class Md5\n   * @description This is internal class.\n   * @see {@link md5.create}\n   */\n  function Md5(sharedMemory) {\n    if (sharedMemory) {\n      blocks[0] = blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n      blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n      blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n      blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n      this.blocks = blocks;\n      this.buffer8 = buffer8;\n    } else {\n      if (ARRAY_BUFFER) {\n        var buffer = new ArrayBuffer(68);\n        this.buffer8 = new Uint8Array(buffer);\n        this.blocks = new Uint32Array(buffer);\n      } else {\n        this.blocks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n      }\n    }\n    this.h0 = this.h1 = this.h2 = this.h3 = this.start = this.bytes = this.hBytes = 0;\n    this.finalized = this.hashed = false;\n    this.first = true;\n  }\n\n  /**\n   * @method update\n   * @memberof Md5\n   * @instance\n   * @description Update hash\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Md5} Md5 object.\n   * @see {@link md5.update}\n   */\n  Md5.prototype.update = function (message) {\n    if (this.finalized) {\n      return;\n    }\n\n    var notString, type = typeof message;\n    if (type !== 'string') {\n      if (type === 'object') {\n        if (message === null) {\n          throw ERROR;\n        } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {\n          message = new Uint8Array(message);\n        } else if (!Array.isArray(message)) {\n          if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {\n            throw ERROR;\n          }\n        }\n      } else {\n        throw ERROR;\n      }\n      notString = true;\n    }\n    var code, index = 0, i, length = message.length, blocks = this.blocks;\n    var buffer8 = this.buffer8;\n\n    while (index < length) {\n      if (this.hashed) {\n        this.hashed = false;\n        blocks[0] = blocks[16];\n        blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n        blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n        blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n        blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n      }\n\n      if (notString) {\n        if (ARRAY_BUFFER) {\n          for (i = this.start; index < length && i < 64; ++index) {\n            buffer8[i++] = message[index];\n          }\n        } else {\n          for (i = this.start; index < length && i < 64; ++index) {\n            blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];\n          }\n        }\n      } else {\n        if (ARRAY_BUFFER) {\n          for (i = this.start; index < length && i < 64; ++index) {\n            code = message.charCodeAt(index);\n            if (code < 0x80) {\n              buffer8[i++] = code;\n            } else if (code < 0x800) {\n              buffer8[i++] = 0xc0 | (code >> 6);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            } else if (code < 0xd800 || code >= 0xe000) {\n              buffer8[i++] = 0xe0 | (code >> 12);\n              buffer8[i++] = 0x80 | ((code >> 6) & 0x3f);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            } else {\n              code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\n              buffer8[i++] = 0xf0 | (code >> 18);\n              buffer8[i++] = 0x80 | ((code >> 12) & 0x3f);\n              buffer8[i++] = 0x80 | ((code >> 6) & 0x3f);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            }\n          }\n        } else {\n          for (i = this.start; index < length && i < 64; ++index) {\n            code = message.charCodeAt(index);\n            if (code < 0x80) {\n              blocks[i >> 2] |= code << SHIFT[i++ & 3];\n            } else if (code < 0x800) {\n              blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            } else if (code < 0xd800 || code >= 0xe000) {\n              blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            } else {\n              code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\n              blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            }\n          }\n        }\n      }\n      this.lastByteIndex = i;\n      this.bytes += i - this.start;\n      if (i >= 64) {\n        this.start = i - 64;\n        this.hash();\n        this.hashed = true;\n      } else {\n        this.start = i;\n      }\n    }\n    if (this.bytes > 4294967295) {\n      this.hBytes += this.bytes / 4294967296 << 0;\n      this.bytes = this.bytes % 4294967296;\n    }\n    return this;\n  };\n\n  Md5.prototype.finalize = function () {\n    if (this.finalized) {\n      return;\n    }\n    this.finalized = true;\n    var blocks = this.blocks, i = this.lastByteIndex;\n    blocks[i >> 2] |= EXTRA[i & 3];\n    if (i >= 56) {\n      if (!this.hashed) {\n        this.hash();\n      }\n      blocks[0] = blocks[16];\n      blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n      blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n      blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n      blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n    }\n    blocks[14] = this.bytes << 3;\n    blocks[15] = this.hBytes << 3 | this.bytes >>> 29;\n    this.hash();\n  };\n\n  Md5.prototype.hash = function () {\n    var a, b, c, d, bc, da, blocks = this.blocks;\n\n    if (this.first) {\n      a = blocks[0] - 680876937;\n      a = (a << 7 | a >>> 25) - 271733879 << 0;\n      d = (-1732584194 ^ a & 2004318071) + blocks[1] - 117830708;\n      d = (d << 12 | d >>> 20) + a << 0;\n      c = (-271733879 ^ (d & (a ^ -271733879))) + blocks[2] - 1126478375;\n      c = (c << 17 | c >>> 15) + d << 0;\n      b = (a ^ (c & (d ^ a))) + blocks[3] - 1316259209;\n      b = (b << 22 | b >>> 10) + c << 0;\n    } else {\n      a = this.h0;\n      b = this.h1;\n      c = this.h2;\n      d = this.h3;\n      a += (d ^ (b & (c ^ d))) + blocks[0] - 680876936;\n      a = (a << 7 | a >>> 25) + b << 0;\n      d += (c ^ (a & (b ^ c))) + blocks[1] - 389564586;\n      d = (d << 12 | d >>> 20) + a << 0;\n      c += (b ^ (d & (a ^ b))) + blocks[2] + 606105819;\n      c = (c << 17 | c >>> 15) + d << 0;\n      b += (a ^ (c & (d ^ a))) + blocks[3] - 1044525330;\n      b = (b << 22 | b >>> 10) + c << 0;\n    }\n\n    a += (d ^ (b & (c ^ d))) + blocks[4] - 176418897;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[5] + 1200080426;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[6] - 1473231341;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[7] - 45705983;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (d ^ (b & (c ^ d))) + blocks[8] + 1770035416;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[9] - 1958414417;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[10] - 42063;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[11] - 1990404162;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (d ^ (b & (c ^ d))) + blocks[12] + 1804603682;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[13] - 40341101;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[14] - 1502002290;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[15] + 1236535329;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[1] - 165796510;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[6] - 1069501632;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[11] + 643717713;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[0] - 373897302;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[5] - 701558691;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[10] + 38016083;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[15] - 660478335;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[4] - 405537848;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[9] + 568446438;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[14] - 1019803690;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[3] - 187363961;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[8] + 1163531501;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[13] - 1444681467;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[2] - 51403784;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[7] + 1735328473;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[12] - 1926607734;\n    b = (b << 20 | b >>> 12) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[5] - 378558;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[8] - 2022574463;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[11] + 1839030562;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[14] - 35309556;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[1] - 1530992060;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[4] + 1272893353;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[7] - 155497632;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[10] - 1094730640;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[13] + 681279174;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[0] - 358537222;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[3] - 722521979;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[6] + 76029189;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[9] - 640364487;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[12] - 421815835;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[15] + 530742520;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[2] - 995338651;\n    b = (b << 23 | b >>> 9) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[0] - 198630844;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[7] + 1126891415;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[14] - 1416354905;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[5] - 57434055;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[12] + 1700485571;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[3] - 1894986606;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[10] - 1051523;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[1] - 2054922799;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[8] + 1873313359;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[15] - 30611744;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[6] - 1560198380;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[13] + 1309151649;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[4] - 145523070;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[11] - 1120210379;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[2] + 718787259;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[9] - 343485551;\n    b = (b << 21 | b >>> 11) + c << 0;\n\n    if (this.first) {\n      this.h0 = a + 1732584193 << 0;\n      this.h1 = b - 271733879 << 0;\n      this.h2 = c - 1732584194 << 0;\n      this.h3 = d + 271733878 << 0;\n      this.first = false;\n    } else {\n      this.h0 = this.h0 + a << 0;\n      this.h1 = this.h1 + b << 0;\n      this.h2 = this.h2 + c << 0;\n      this.h3 = this.h3 + d << 0;\n    }\n  };\n\n  /**\n   * @method hex\n   * @memberof Md5\n   * @instance\n   * @description Output hash as hex string\n   * @returns {String} Hex string\n   * @see {@link md5.hex}\n   * @example\n   * hash.hex();\n   */\n  Md5.prototype.hex = function () {\n    this.finalize();\n\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3;\n\n    return HEX_CHARS[(h0 >> 4) & 0x0F] + HEX_CHARS[h0 & 0x0F] +\n      HEX_CHARS[(h0 >> 12) & 0x0F] + HEX_CHARS[(h0 >> 8) & 0x0F] +\n      HEX_CHARS[(h0 >> 20) & 0x0F] + HEX_CHARS[(h0 >> 16) & 0x0F] +\n      HEX_CHARS[(h0 >> 28) & 0x0F] + HEX_CHARS[(h0 >> 24) & 0x0F] +\n      HEX_CHARS[(h1 >> 4) & 0x0F] + HEX_CHARS[h1 & 0x0F] +\n      HEX_CHARS[(h1 >> 12) & 0x0F] + HEX_CHARS[(h1 >> 8) & 0x0F] +\n      HEX_CHARS[(h1 >> 20) & 0x0F] + HEX_CHARS[(h1 >> 16) & 0x0F] +\n      HEX_CHARS[(h1 >> 28) & 0x0F] + HEX_CHARS[(h1 >> 24) & 0x0F] +\n      HEX_CHARS[(h2 >> 4) & 0x0F] + HEX_CHARS[h2 & 0x0F] +\n      HEX_CHARS[(h2 >> 12) & 0x0F] + HEX_CHARS[(h2 >> 8) & 0x0F] +\n      HEX_CHARS[(h2 >> 20) & 0x0F] + HEX_CHARS[(h2 >> 16) & 0x0F] +\n      HEX_CHARS[(h2 >> 28) & 0x0F] + HEX_CHARS[(h2 >> 24) & 0x0F] +\n      HEX_CHARS[(h3 >> 4) & 0x0F] + HEX_CHARS[h3 & 0x0F] +\n      HEX_CHARS[(h3 >> 12) & 0x0F] + HEX_CHARS[(h3 >> 8) & 0x0F] +\n      HEX_CHARS[(h3 >> 20) & 0x0F] + HEX_CHARS[(h3 >> 16) & 0x0F] +\n      HEX_CHARS[(h3 >> 28) & 0x0F] + HEX_CHARS[(h3 >> 24) & 0x0F];\n  };\n\n  /**\n   * @method toString\n   * @memberof Md5\n   * @instance\n   * @description Output hash as hex string\n   * @returns {String} Hex string\n   * @see {@link md5.hex}\n   * @example\n   * hash.toString();\n   */\n  Md5.prototype.toString = Md5.prototype.hex;\n\n  /**\n   * @method digest\n   * @memberof Md5\n   * @instance\n   * @description Output hash as bytes array\n   * @returns {Array} Bytes array\n   * @see {@link md5.digest}\n   * @example\n   * hash.digest();\n   */\n  Md5.prototype.digest = function () {\n    this.finalize();\n\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3;\n    return [\n      h0 & 0xFF, (h0 >> 8) & 0xFF, (h0 >> 16) & 0xFF, (h0 >> 24) & 0xFF,\n      h1 & 0xFF, (h1 >> 8) & 0xFF, (h1 >> 16) & 0xFF, (h1 >> 24) & 0xFF,\n      h2 & 0xFF, (h2 >> 8) & 0xFF, (h2 >> 16) & 0xFF, (h2 >> 24) & 0xFF,\n      h3 & 0xFF, (h3 >> 8) & 0xFF, (h3 >> 16) & 0xFF, (h3 >> 24) & 0xFF\n    ];\n  };\n\n  /**\n   * @method array\n   * @memberof Md5\n   * @instance\n   * @description Output hash as bytes array\n   * @returns {Array} Bytes array\n   * @see {@link md5.array}\n   * @example\n   * hash.array();\n   */\n  Md5.prototype.array = Md5.prototype.digest;\n\n  /**\n   * @method arrayBuffer\n   * @memberof Md5\n   * @instance\n   * @description Output hash as ArrayBuffer\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @see {@link md5.arrayBuffer}\n   * @example\n   * hash.arrayBuffer();\n   */\n  Md5.prototype.arrayBuffer = function () {\n    this.finalize();\n\n    var buffer = new ArrayBuffer(16);\n    var blocks = new Uint32Array(buffer);\n    blocks[0] = this.h0;\n    blocks[1] = this.h1;\n    blocks[2] = this.h2;\n    blocks[3] = this.h3;\n    return buffer;\n  };\n\n  /**\n   * @method buffer\n   * @deprecated This maybe confuse with Buffer in node.js. Please use arrayBuffer instead.\n   * @memberof Md5\n   * @instance\n   * @description Output hash as ArrayBuffer\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @see {@link md5.buffer}\n   * @example\n   * hash.buffer();\n   */\n  Md5.prototype.buffer = Md5.prototype.arrayBuffer;\n\n  /**\n   * @method base64\n   * @memberof Md5\n   * @instance\n   * @description Output hash as base64 string\n   * @returns {String} base64 string\n   * @see {@link md5.base64}\n   * @example\n   * hash.base64();\n   */\n  Md5.prototype.base64 = function () {\n    var v1, v2, v3, base64Str = '', bytes = this.array();\n    for (var i = 0; i < 15;) {\n      v1 = bytes[i++];\n      v2 = bytes[i++];\n      v3 = bytes[i++];\n      base64Str += BASE64_ENCODE_CHAR[v1 >>> 2] +\n        BASE64_ENCODE_CHAR[(v1 << 4 | v2 >>> 4) & 63] +\n        BASE64_ENCODE_CHAR[(v2 << 2 | v3 >>> 6) & 63] +\n        BASE64_ENCODE_CHAR[v3 & 63];\n    }\n    v1 = bytes[i];\n    base64Str += BASE64_ENCODE_CHAR[v1 >>> 2] +\n      BASE64_ENCODE_CHAR[(v1 << 4) & 63] +\n      '==';\n    return base64Str;\n  };\n\n  var exports = createMethod();\n\n  if (COMMON_JS) {\n    module.exports = exports;\n  } else {\n    /**\n     * @method md5\b\n     * @description Md5 hash function, export to global in browsers.\n     * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n     * @returns {String} md5 hashes\n     * @example\n     * md5(''); // d41d8cd98f00b204e9800998ecf8427e\n     * md5('The quick brown fox jumps over the lazy dog'); // 9e107d9d372bb6826bd81d3542a419d6\n     * md5('The quick brown fox jumps over the lazy dog.'); // e4d909c290d0fb1ca068ffaddf22cbd0\n     *\n     * // It also supports UTF-8 encoding\n     * md5('中文'); // a7bac2239fcdcb3a067903d8077c4a07\n     *\n     * // It also supports byte `Array`, `Uint8Array`, `ArrayBuffer`\n     * md5([]); // d41d8cd98f00b204e9800998ecf8427e\n     * md5(new Uint8Array([])); // d41d8cd98f00b204e9800998ecf8427e\n     */\n    root.md5 = exports;\n    if (AMD) {\n      define(function () {\n        return exports;\n      });\n    }\n  }\n})();\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match `RegExp` flags from their coerced string values. */\nvar reFlags = /\\w*$/;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values supported by `_.clone`. */\nvar cloneableTags = {};\ncloneableTags[argsTag] = cloneableTags[arrayTag] =\ncloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\ncloneableTags[boolTag] = cloneableTags[dateTag] =\ncloneableTags[float32Tag] = cloneableTags[float64Tag] =\ncloneableTags[int8Tag] = cloneableTags[int16Tag] =\ncloneableTags[int32Tag] = cloneableTags[mapTag] =\ncloneableTags[numberTag] = cloneableTags[objectTag] =\ncloneableTags[regexpTag] = cloneableTags[setTag] =\ncloneableTags[stringTag] = cloneableTags[symbolTag] =\ncloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\ncloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\ncloneableTags[errorTag] = cloneableTags[funcTag] =\ncloneableTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/**\n * Adds the key-value `pair` to `map`.\n *\n * @private\n * @param {Object} map The map to modify.\n * @param {Array} pair The key-value pair to add.\n * @returns {Object} Returns `map`.\n */\nfunction addMapEntry(map, pair) {\n  // Don't return `map.set` because it's not chainable in IE 11.\n  map.set(pair[0], pair[1]);\n  return map;\n}\n\n/**\n * Adds `value` to `set`.\n *\n * @private\n * @param {Object} set The set to modify.\n * @param {*} value The value to add.\n * @returns {Object} Returns `set`.\n */\nfunction addSetEntry(set, value) {\n  // Don't return `set.add` because it's not chainable in IE 11.\n  set.add(value);\n  return set;\n}\n\n/**\n * A specialized version of `_.forEach` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nfunction arrayEach(array, iteratee) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  while (++index < length) {\n    if (iteratee(array[index], index, array) === false) {\n      break;\n    }\n  }\n  return array;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.reduce` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {*} [accumulator] The initial value.\n * @param {boolean} [initAccum] Specify using the first element of `array` as\n *  the initial value.\n * @returns {*} Returns the accumulated value.\n */\nfunction arrayReduce(array, iteratee, accumulator, initAccum) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  if (initAccum && length) {\n    accumulator = array[++index];\n  }\n  while (++index < length) {\n    accumulator = iteratee(accumulator, array[index], index, array);\n  }\n  return accumulator;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    getPrototype = overArg(Object.getPrototypeOf, Object),\n    objectCreate = Object.create,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  return getMapData(this, key)['delete'](key);\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  getMapData(this, key).set(key, value);\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  this.__data__ = new ListCache(entries);\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  return this.__data__['delete'](key);\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var cache = this.__data__;\n  if (cache instanceof ListCache) {\n    var pairs = cache.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      return this;\n    }\n    cache = this.__data__ = new MapCache(pairs);\n  }\n  cache.set(key, value);\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  // Safari 9 makes `arguments.length` enumerable in strict mode.\n  var result = (isArray(value) || isArguments(value))\n    ? baseTimes(value.length, String)\n    : [];\n\n  var length = result.length,\n      skipIndexes = !!length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n      (value === undefined && !(key in object))) {\n    object[key] = value;\n  }\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.assign` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssign(object, source) {\n  return object && copyObject(source, keys(source), object);\n}\n\n/**\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n * traversed objects.\n *\n * @private\n * @param {*} value The value to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @param {boolean} [isFull] Specify a clone including symbols.\n * @param {Function} [customizer] The function to customize cloning.\n * @param {string} [key] The key of `value`.\n * @param {Object} [object] The parent object of `value`.\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n * @returns {*} Returns the cloned value.\n */\nfunction baseClone(value, isDeep, isFull, customizer, key, object, stack) {\n  var result;\n  if (customizer) {\n    result = object ? customizer(value, key, object, stack) : customizer(value);\n  }\n  if (result !== undefined) {\n    return result;\n  }\n  if (!isObject(value)) {\n    return value;\n  }\n  var isArr = isArray(value);\n  if (isArr) {\n    result = initCloneArray(value);\n    if (!isDeep) {\n      return copyArray(value, result);\n    }\n  } else {\n    var tag = getTag(value),\n        isFunc = tag == funcTag || tag == genTag;\n\n    if (isBuffer(value)) {\n      return cloneBuffer(value, isDeep);\n    }\n    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n      if (isHostObject(value)) {\n        return object ? value : {};\n      }\n      result = initCloneObject(isFunc ? {} : value);\n      if (!isDeep) {\n        return copySymbols(value, baseAssign(result, value));\n      }\n    } else {\n      if (!cloneableTags[tag]) {\n        return object ? value : {};\n      }\n      result = initCloneByTag(value, tag, baseClone, isDeep);\n    }\n  }\n  // Check for circular references and return its corresponding clone.\n  stack || (stack = new Stack);\n  var stacked = stack.get(value);\n  if (stacked) {\n    return stacked;\n  }\n  stack.set(value, result);\n\n  if (!isArr) {\n    var props = isFull ? getAllKeys(value) : keys(value);\n  }\n  arrayEach(props || value, function(subValue, key) {\n    if (props) {\n      key = subValue;\n      subValue = value[key];\n    }\n    // Recursively populate clone (susceptible to call stack limits).\n    assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));\n  });\n  return result;\n}\n\n/**\n * The base implementation of `_.create` without support for assigning\n * properties to the created object.\n *\n * @private\n * @param {Object} prototype The object to inherit from.\n * @returns {Object} Returns the new object.\n */\nfunction baseCreate(proto) {\n  return isObject(proto) ? objectCreate(proto) : {};\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  return objectToString.call(value);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Creates a clone of  `buffer`.\n *\n * @private\n * @param {Buffer} buffer The buffer to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Buffer} Returns the cloned buffer.\n */\nfunction cloneBuffer(buffer, isDeep) {\n  if (isDeep) {\n    return buffer.slice();\n  }\n  var result = new buffer.constructor(buffer.length);\n  buffer.copy(result);\n  return result;\n}\n\n/**\n * Creates a clone of `arrayBuffer`.\n *\n * @private\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n * @returns {ArrayBuffer} Returns the cloned array buffer.\n */\nfunction cloneArrayBuffer(arrayBuffer) {\n  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n  new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n  return result;\n}\n\n/**\n * Creates a clone of `dataView`.\n *\n * @private\n * @param {Object} dataView The data view to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned data view.\n */\nfunction cloneDataView(dataView, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n}\n\n/**\n * Creates a clone of `map`.\n *\n * @private\n * @param {Object} map The map to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned map.\n */\nfunction cloneMap(map, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);\n  return arrayReduce(array, addMapEntry, new map.constructor);\n}\n\n/**\n * Creates a clone of `regexp`.\n *\n * @private\n * @param {Object} regexp The regexp to clone.\n * @returns {Object} Returns the cloned regexp.\n */\nfunction cloneRegExp(regexp) {\n  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n  result.lastIndex = regexp.lastIndex;\n  return result;\n}\n\n/**\n * Creates a clone of `set`.\n *\n * @private\n * @param {Object} set The set to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned set.\n */\nfunction cloneSet(set, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);\n  return arrayReduce(array, addSetEntry, new set.constructor);\n}\n\n/**\n * Creates a clone of the `symbol` object.\n *\n * @private\n * @param {Object} symbol The symbol object to clone.\n * @returns {Object} Returns the cloned symbol object.\n */\nfunction cloneSymbol(symbol) {\n  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n}\n\n/**\n * Creates a clone of `typedArray`.\n *\n * @private\n * @param {Object} typedArray The typed array to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned typed array.\n */\nfunction cloneTypedArray(typedArray, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n}\n\n/**\n * Copies the values of `source` to `array`.\n *\n * @private\n * @param {Array} source The array to copy values from.\n * @param {Array} [array=[]] The array to copy values to.\n * @returns {Array} Returns `array`.\n */\nfunction copyArray(source, array) {\n  var index = -1,\n      length = source.length;\n\n  array || (array = Array(length));\n  while (++index < length) {\n    array[index] = source[index];\n  }\n  return array;\n}\n\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n */\nfunction copyObject(source, props, object, customizer) {\n  object || (object = {});\n\n  var index = -1,\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index];\n\n    var newValue = customizer\n      ? customizer(object[key], source[key], key, object, source)\n      : undefined;\n\n    assignValue(object, key, newValue === undefined ? source[key] : newValue);\n  }\n  return object;\n}\n\n/**\n * Copies own symbol properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbols(source, object) {\n  return copyObject(source, getSymbols(source), object);\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * Creates an array of the own enumerable symbol properties of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11,\n// for data views in Edge < 14, and promises in Node.js.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = objectToString.call(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : undefined;\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Initializes an array clone.\n *\n * @private\n * @param {Array} array The array to clone.\n * @returns {Array} Returns the initialized clone.\n */\nfunction initCloneArray(array) {\n  var length = array.length,\n      result = array.constructor(length);\n\n  // Add properties assigned by `RegExp#exec`.\n  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n    result.index = array.index;\n    result.input = array.input;\n  }\n  return result;\n}\n\n/**\n * Initializes an object clone.\n *\n * @private\n * @param {Object} object The object to clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneObject(object) {\n  return (typeof object.constructor == 'function' && !isPrototype(object))\n    ? baseCreate(getPrototype(object))\n    : {};\n}\n\n/**\n * Initializes an object clone based on its `toStringTag`.\n *\n * **Note:** This function only supports cloning values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to clone.\n * @param {string} tag The `toStringTag` of the object to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneByTag(object, tag, cloneFunc, isDeep) {\n  var Ctor = object.constructor;\n  switch (tag) {\n    case arrayBufferTag:\n      return cloneArrayBuffer(object);\n\n    case boolTag:\n    case dateTag:\n      return new Ctor(+object);\n\n    case dataViewTag:\n      return cloneDataView(object, isDeep);\n\n    case float32Tag: case float64Tag:\n    case int8Tag: case int16Tag: case int32Tag:\n    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n      return cloneTypedArray(object, isDeep);\n\n    case mapTag:\n      return cloneMap(object, isDeep, cloneFunc);\n\n    case numberTag:\n    case stringTag:\n      return new Ctor(object);\n\n    case regexpTag:\n      return cloneRegExp(object);\n\n    case setTag:\n      return cloneSet(object, isDeep, cloneFunc);\n\n    case symbolTag:\n      return cloneSymbol(object);\n  }\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * This method is like `_.clone` except that it recursively clones `value`.\n *\n * @static\n * @memberOf _\n * @since 1.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @returns {*} Returns the deep cloned value.\n * @see _.clone\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var deep = _.cloneDeep(objects);\n * console.log(deep[0] === objects[0]);\n * // => false\n */\nfunction cloneDeep(value) {\n  return baseClone(value, true, true);\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nfunction isArguments(value) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = cloneDeep;\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        result = wait - timeSinceLastCall;\n\n    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = debounce;\n","/**\n * Lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright JS Foundation and other contributors <https://js.foundation/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    asyncTag = '[object AsyncFunction]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    nullTag = '[object Null]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    proxyTag = '[object Proxy]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    undefinedTag = '[object Undefined]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\n/**\n * Checks if a `cache` value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction cacheHas(cache, key) {\n  return cache.has(key);\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice,\n    symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values == null ? 0 : values.length;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\n/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  var data = this.__data__ = new ListCache(entries);\n  this.size = data.size;\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  var data = this.__data__,\n      result = data['delete'](key);\n\n  this.size = data.size;\n  return result;\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var data = this.__data__;\n  if (data instanceof ListCache) {\n    var pairs = data.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n    data = this.__data__ = new MapCache(pairs);\n  }\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n}\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = objIsArr ? arrayTag : getTag(object),\n      othTag = othIsArr ? arrayTag : getTag(other);\n\n  objTag = objTag == argsTag ? objectTag : objTag;\n  othTag = othTag == argsTag ? objectTag : othTag;\n\n  var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && isBuffer(object)) {\n    if (!isBuffer(other)) {\n      return false;\n    }\n    objIsArr = true;\n    objIsObj = false;\n  }\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  }\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(array);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(object);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\n/**\n * Creates an array of the own enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n  if (object == null) {\n    return [];\n  }\n  object = Object(object);\n  return arrayFilter(nativeGetSymbols(object), function(symbol) {\n    return propertyIsEnumerable.call(object, symbol);\n  });\n};\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = baseGetTag(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : '';\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are compared by strict equality, i.e. `===`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.isEqual(object, other);\n * // => true\n *\n * object === other;\n * // => false\n */\nfunction isEqual(value, other) {\n  return baseIsEqual(value, other);\n}\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = isEqual;\n","'use strict';\n\nmodule.exports = pixelmatch;\n\nconst defaultOptions = {\n    threshold: 0.1,         // matching threshold (0 to 1); smaller is more sensitive\n    includeAA: false,       // whether to skip anti-aliasing detection\n    alpha: 0.1,             // opacity of original image in diff ouput\n    aaColor: [255, 255, 0], // color of anti-aliased pixels in diff output\n    diffColor: [255, 0, 0], // color of different pixels in diff output\n    diffColorAlt: null,     // whether to detect dark on light differences between img1 and img2 and set an alternative color to differentiate between the two\n    diffMask: false         // draw the diff over a transparent background (a mask)\n};\n\nfunction pixelmatch(img1, img2, output, width, height, options) {\n\n    if (!isPixelData(img1) || !isPixelData(img2) || (output && !isPixelData(output)))\n        throw new Error('Image data: Uint8Array, Uint8ClampedArray or Buffer expected.');\n\n    if (img1.length !== img2.length || (output && output.length !== img1.length))\n        throw new Error('Image sizes do not match.');\n\n    if (img1.length !== width * height * 4) throw new Error('Image data size does not match width/height.');\n\n    options = Object.assign({}, defaultOptions, options);\n\n    // check if images are identical\n    const len = width * height;\n    const a32 = new Uint32Array(img1.buffer, img1.byteOffset, len);\n    const b32 = new Uint32Array(img2.buffer, img2.byteOffset, len);\n    let identical = true;\n\n    for (let i = 0; i < len; i++) {\n        if (a32[i] !== b32[i]) { identical = false; break; }\n    }\n    if (identical) { // fast path if identical\n        if (output && !options.diffMask) {\n            for (let i = 0; i < len; i++) drawGrayPixel(img1, 4 * i, options.alpha, output);\n        }\n        return 0;\n    }\n\n    // maximum acceptable square distance between two colors;\n    // 35215 is the maximum possible value for the YIQ difference metric\n    const maxDelta = 35215 * options.threshold * options.threshold;\n    let diff = 0;\n\n    // compare each pixel of one image against the other one\n    for (let y = 0; y < height; y++) {\n        for (let x = 0; x < width; x++) {\n\n            const pos = (y * width + x) * 4;\n\n            // squared YUV distance between colors at this pixel position, negative if the img2 pixel is darker\n            const delta = colorDelta(img1, img2, pos, pos);\n\n            // the color difference is above the threshold\n            if (Math.abs(delta) > maxDelta) {\n                // check it's a real rendering difference or just anti-aliasing\n                if (!options.includeAA && (antialiased(img1, x, y, width, height, img2) ||\n                                           antialiased(img2, x, y, width, height, img1))) {\n                    // one of the pixels is anti-aliasing; draw as yellow and do not count as difference\n                    // note that we do not include such pixels in a mask\n                    if (output && !options.diffMask) drawPixel(output, pos, ...options.aaColor);\n\n                } else {\n                    // found substantial difference not caused by anti-aliasing; draw it as such\n                    if (output) {\n                        drawPixel(output, pos, ...(delta < 0 && options.diffColorAlt || options.diffColor));\n                    }\n                    diff++;\n                }\n\n            } else if (output) {\n                // pixels are similar; draw background as grayscale image blended with white\n                if (!options.diffMask) drawGrayPixel(img1, pos, options.alpha, output);\n            }\n        }\n    }\n\n    // return the number of different pixels\n    return diff;\n}\n\nfunction isPixelData(arr) {\n    // work around instanceof Uint8Array not working properly in some Jest environments\n    return ArrayBuffer.isView(arr) && arr.constructor.BYTES_PER_ELEMENT === 1;\n}\n\n// check if a pixel is likely a part of anti-aliasing;\n// based on \"Anti-aliased Pixel and Intensity Slope Detector\" paper by V. Vysniauskas, 2009\n\nfunction antialiased(img, x1, y1, width, height, img2) {\n    const x0 = Math.max(x1 - 1, 0);\n    const y0 = Math.max(y1 - 1, 0);\n    const x2 = Math.min(x1 + 1, width - 1);\n    const y2 = Math.min(y1 + 1, height - 1);\n    const pos = (y1 * width + x1) * 4;\n    let zeroes = x1 === x0 || x1 === x2 || y1 === y0 || y1 === y2 ? 1 : 0;\n    let min = 0;\n    let max = 0;\n    let minX, minY, maxX, maxY;\n\n    // go through 8 adjacent pixels\n    for (let x = x0; x <= x2; x++) {\n        for (let y = y0; y <= y2; y++) {\n            if (x === x1 && y === y1) continue;\n\n            // brightness delta between the center pixel and adjacent one\n            const delta = colorDelta(img, img, pos, (y * width + x) * 4, true);\n\n            // count the number of equal, darker and brighter adjacent pixels\n            if (delta === 0) {\n                zeroes++;\n                // if found more than 2 equal siblings, it's definitely not anti-aliasing\n                if (zeroes > 2) return false;\n\n            // remember the darkest pixel\n            } else if (delta < min) {\n                min = delta;\n                minX = x;\n                minY = y;\n\n            // remember the brightest pixel\n            } else if (delta > max) {\n                max = delta;\n                maxX = x;\n                maxY = y;\n            }\n        }\n    }\n\n    // if there are no both darker and brighter pixels among siblings, it's not anti-aliasing\n    if (min === 0 || max === 0) return false;\n\n    // if either the darkest or the brightest pixel has 3+ equal siblings in both images\n    // (definitely not anti-aliased), this pixel is anti-aliased\n    return (hasManySiblings(img, minX, minY, width, height) && hasManySiblings(img2, minX, minY, width, height)) ||\n           (hasManySiblings(img, maxX, maxY, width, height) && hasManySiblings(img2, maxX, maxY, width, height));\n}\n\n// check if a pixel has 3+ adjacent pixels of the same color.\nfunction hasManySiblings(img, x1, y1, width, height) {\n    const x0 = Math.max(x1 - 1, 0);\n    const y0 = Math.max(y1 - 1, 0);\n    const x2 = Math.min(x1 + 1, width - 1);\n    const y2 = Math.min(y1 + 1, height - 1);\n    const pos = (y1 * width + x1) * 4;\n    let zeroes = x1 === x0 || x1 === x2 || y1 === y0 || y1 === y2 ? 1 : 0;\n\n    // go through 8 adjacent pixels\n    for (let x = x0; x <= x2; x++) {\n        for (let y = y0; y <= y2; y++) {\n            if (x === x1 && y === y1) continue;\n\n            const pos2 = (y * width + x) * 4;\n            if (img[pos] === img[pos2] &&\n                img[pos + 1] === img[pos2 + 1] &&\n                img[pos + 2] === img[pos2 + 2] &&\n                img[pos + 3] === img[pos2 + 3]) zeroes++;\n\n            if (zeroes > 2) return true;\n        }\n    }\n\n    return false;\n}\n\n// calculate color difference according to the paper \"Measuring perceived color difference\n// using YIQ NTSC transmission color space in mobile applications\" by Y. Kotsarenko and F. Ramos\n\nfunction colorDelta(img1, img2, k, m, yOnly) {\n    let r1 = img1[k + 0];\n    let g1 = img1[k + 1];\n    let b1 = img1[k + 2];\n    let a1 = img1[k + 3];\n\n    let r2 = img2[m + 0];\n    let g2 = img2[m + 1];\n    let b2 = img2[m + 2];\n    let a2 = img2[m + 3];\n\n    if (a1 === a2 && r1 === r2 && g1 === g2 && b1 === b2) return 0;\n\n    if (a1 < 255) {\n        a1 /= 255;\n        r1 = blend(r1, a1);\n        g1 = blend(g1, a1);\n        b1 = blend(b1, a1);\n    }\n\n    if (a2 < 255) {\n        a2 /= 255;\n        r2 = blend(r2, a2);\n        g2 = blend(g2, a2);\n        b2 = blend(b2, a2);\n    }\n\n    const y1 = rgb2y(r1, g1, b1);\n    const y2 = rgb2y(r2, g2, b2);\n    const y = y1 - y2;\n\n    if (yOnly) return y; // brightness difference only\n\n    const i = rgb2i(r1, g1, b1) - rgb2i(r2, g2, b2);\n    const q = rgb2q(r1, g1, b1) - rgb2q(r2, g2, b2);\n\n    const delta = 0.5053 * y * y + 0.299 * i * i + 0.1957 * q * q;\n\n    // encode whether the pixel lightens or darkens in the sign\n    return y1 > y2 ? -delta : delta;\n}\n\nfunction rgb2y(r, g, b) { return r * 0.29889531 + g * 0.58662247 + b * 0.11448223; }\nfunction rgb2i(r, g, b) { return r * 0.59597799 - g * 0.27417610 - b * 0.32180189; }\nfunction rgb2q(r, g, b) { return r * 0.21147017 - g * 0.52261711 + b * 0.31114694; }\n\n// blend semi-transparent color with white\nfunction blend(c, a) {\n    return 255 + (c - 255) * a;\n}\n\nfunction drawPixel(output, pos, r, g, b) {\n    output[pos + 0] = r;\n    output[pos + 1] = g;\n    output[pos + 2] = b;\n    output[pos + 3] = 255;\n}\n\nfunction drawGrayPixel(img, i, alpha, output) {\n    const r = img[i + 0];\n    const g = img[i + 1];\n    const b = img[i + 2];\n    const val = blend(rgb2y(r, g, b), alpha * img[i + 3] / 255);\n    drawPixel(output, i, val, val, val);\n}\n","var grammar = module.exports = {\n  v: [{\n    name: 'version',\n    reg: /^(\\d*)$/\n  }],\n  o: [{ //o=- 20518 0 IN IP4 203.0.113.1\n    // NB: sessionId will be a String in most cases because it is huge\n    name: 'origin',\n    reg: /^(\\S*) (\\d*) (\\d*) (\\S*) IP(\\d) (\\S*)/,\n    names: ['username', 'sessionId', 'sessionVersion', 'netType', 'ipVer', 'address'],\n    format: '%s %s %d %s IP%d %s'\n  }],\n  // default parsing of these only (though some of these feel outdated)\n  s: [{ name: 'name' }],\n  i: [{ name: 'description' }],\n  u: [{ name: 'uri' }],\n  e: [{ name: 'email' }],\n  p: [{ name: 'phone' }],\n  z: [{ name: 'timezones' }], // TODO: this one can actually be parsed properly..\n  r: [{ name: 'repeats' }],   // TODO: this one can also be parsed properly\n  //k: [{}], // outdated thing ignored\n  t: [{ //t=0 0\n    name: 'timing',\n    reg: /^(\\d*) (\\d*)/,\n    names: ['start', 'stop'],\n    format: '%d %d'\n  }],\n  c: [{ //c=IN IP4 10.47.197.26\n    name: 'connection',\n    reg: /^IN IP(\\d) (\\S*)/,\n    names: ['version', 'ip'],\n    format: 'IN IP%d %s'\n  }],\n  b: [{ //b=AS:4000\n    push: 'bandwidth',\n    reg: /^(TIAS|AS|CT|RR|RS):(\\d*)/,\n    names: ['type', 'limit'],\n    format: '%s:%s'\n  }],\n  m: [{ //m=video 51744 RTP/AVP 126 97 98 34 31\n    // NB: special - pushes to session\n    // TODO: rtp/fmtp should be filtered by the payloads found here?\n    reg: /^(\\w*) (\\d*) ([\\w\\/]*)(?: (.*))?/,\n    names: ['type', 'port', 'protocol', 'payloads'],\n    format: '%s %d %s %s'\n  }],\n  a: [\n    { //a=rtpmap:110 opus/48000/2\n      push: 'rtp',\n      reg: /^rtpmap:(\\d*) ([\\w\\-\\.]*)(?:\\s*\\/(\\d*)(?:\\s*\\/(\\S*))?)?/,\n      names: ['payload', 'codec', 'rate', 'encoding'],\n      format: function (o) {\n        return (o.encoding) ?\n          'rtpmap:%d %s/%s/%s':\n          o.rate ?\n          'rtpmap:%d %s/%s':\n          'rtpmap:%d %s';\n      }\n    },\n    { //a=fmtp:108 profile-level-id=24;object=23;bitrate=64000\n      //a=fmtp:111 minptime=10; useinbandfec=1\n      push: 'fmtp',\n      reg: /^fmtp:(\\d*) ([\\S| ]*)/,\n      names: ['payload', 'config'],\n      format: 'fmtp:%d %s'\n    },\n    { //a=control:streamid=0\n      name: 'control',\n      reg: /^control:(.*)/,\n      format: 'control:%s'\n    },\n    { //a=rtcp:65179 IN IP4 193.84.77.194\n      name: 'rtcp',\n      reg: /^rtcp:(\\d*)(?: (\\S*) IP(\\d) (\\S*))?/,\n      names: ['port', 'netType', 'ipVer', 'address'],\n      format: function (o) {\n        return (o.address != null) ?\n          'rtcp:%d %s IP%d %s':\n          'rtcp:%d';\n      }\n    },\n    { //a=rtcp-fb:98 trr-int 100\n      push: 'rtcpFbTrrInt',\n      reg: /^rtcp-fb:(\\*|\\d*) trr-int (\\d*)/,\n      names: ['payload', 'value'],\n      format: 'rtcp-fb:%d trr-int %d'\n    },\n    { //a=rtcp-fb:98 nack rpsi\n      push: 'rtcpFb',\n      reg: /^rtcp-fb:(\\*|\\d*) ([\\w-_]*)(?: ([\\w-_]*))?/,\n      names: ['payload', 'type', 'subtype'],\n      format: function (o) {\n        return (o.subtype != null) ?\n          'rtcp-fb:%s %s %s':\n          'rtcp-fb:%s %s';\n      }\n    },\n    { //a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n      //a=extmap:1/recvonly URI-gps-string\n      push: 'ext',\n      reg: /^extmap:(\\d+)(?:\\/(\\w+))? (\\S*)(?: (\\S*))?/,\n      names: ['value', 'direction', 'uri', 'config'],\n      format: function (o) {\n        return 'extmap:%d' + (o.direction ? '/%s' : '%v') + ' %s' + (o.config ? ' %s' : '');\n      }\n    },\n    { //a=crypto:1 AES_CM_128_HMAC_SHA1_80 inline:PS1uQCVeeCFCanVmcjkpPywjNWhcYD0mXXtxaVBR|2^20|1:32\n      push: 'crypto',\n      reg: /^crypto:(\\d*) ([\\w_]*) (\\S*)(?: (\\S*))?/,\n      names: ['id', 'suite', 'config', 'sessionConfig'],\n      format: function (o) {\n        return (o.sessionConfig != null) ?\n          'crypto:%d %s %s %s':\n          'crypto:%d %s %s';\n      }\n    },\n    { //a=setup:actpass\n      name: 'setup',\n      reg: /^setup:(\\w*)/,\n      format: 'setup:%s'\n    },\n    { //a=mid:1\n      name: 'mid',\n      reg: /^mid:([^\\s]*)/,\n      format: 'mid:%s'\n    },\n    { //a=msid:0c8b064d-d807-43b4-b434-f92a889d8587 98178685-d409-46e0-8e16-7ef0db0db64a\n      name: 'msid',\n      reg: /^msid:(.*)/,\n      format: 'msid:%s'\n    },\n    { //a=ptime:20\n      name: 'ptime',\n      reg: /^ptime:(\\d*)/,\n      format: 'ptime:%d'\n    },\n    { //a=maxptime:60\n      name: 'maxptime',\n      reg: /^maxptime:(\\d*)/,\n      format: 'maxptime:%d'\n    },\n    { //a=sendrecv\n      name: 'direction',\n      reg: /^(sendrecv|recvonly|sendonly|inactive)/\n    },\n    { //a=ice-lite\n      name: 'icelite',\n      reg: /^(ice-lite)/\n    },\n    { //a=ice-ufrag:F7gI\n      name: 'iceUfrag',\n      reg: /^ice-ufrag:(\\S*)/,\n      format: 'ice-ufrag:%s'\n    },\n    { //a=ice-pwd:x9cml/YzichV2+XlhiMu8g\n      name: 'icePwd',\n      reg: /^ice-pwd:(\\S*)/,\n      format: 'ice-pwd:%s'\n    },\n    { //a=fingerprint:SHA-1 00:11:22:33:44:55:66:77:88:99:AA:BB:CC:DD:EE:FF:00:11:22:33\n      name: 'fingerprint',\n      reg: /^fingerprint:(\\S*) (\\S*)/,\n      names: ['type', 'hash'],\n      format: 'fingerprint:%s %s'\n    },\n    { //a=candidate:0 1 UDP 2113667327 203.0.113.1 54400 typ host\n      //a=candidate:1162875081 1 udp 2113937151 192.168.34.75 60017 typ host generation 0 network-id 3 network-cost 10\n      //a=candidate:3289912957 2 udp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 generation 0 network-id 3 network-cost 10\n      //a=candidate:229815620 1 tcp 1518280447 192.168.150.19 60017 typ host tcptype active generation 0 network-id 3 network-cost 10\n      //a=candidate:3289912957 2 tcp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 tcptype passive generation 0 network-id 3 network-cost 10\n      push:'candidates',\n      reg: /^candidate:(\\S*) (\\d*) (\\S*) (\\d*) (\\S*) (\\d*) typ (\\S*)(?: raddr (\\S*) rport (\\d*))?(?: tcptype (\\S*))?(?: generation (\\d*))?(?: network-id (\\d*))?(?: network-cost (\\d*))?/,\n      names: ['foundation', 'component', 'transport', 'priority', 'ip', 'port', 'type', 'raddr', 'rport', 'tcptype', 'generation', 'network-id', 'network-cost'],\n      format: function (o) {\n        var str = 'candidate:%s %d %s %d %s %d typ %s';\n\n        str += (o.raddr != null) ? ' raddr %s rport %d' : '%v%v';\n\n        // NB: candidate has three optional chunks, so %void middles one if it's missing\n        str += (o.tcptype != null) ? ' tcptype %s' : '%v';\n\n        if (o.generation != null) {\n          str += ' generation %d';\n        }\n\n        str += (o['network-id'] != null) ? ' network-id %d' : '%v';\n        str += (o['network-cost'] != null) ? ' network-cost %d' : '%v';\n        return str;\n      }\n    },\n    { //a=end-of-candidates (keep after the candidates line for readability)\n      name: 'endOfCandidates',\n      reg: /^(end-of-candidates)/\n    },\n    { //a=remote-candidates:1 203.0.113.1 54400 2 203.0.113.1 54401 ...\n      name: 'remoteCandidates',\n      reg: /^remote-candidates:(.*)/,\n      format: 'remote-candidates:%s'\n    },\n    { //a=ice-options:google-ice\n      name: 'iceOptions',\n      reg: /^ice-options:(\\S*)/,\n      format: 'ice-options:%s'\n    },\n    { //a=ssrc:2566107569 cname:t9YU8M1UxTF8Y1A1\n      push: 'ssrcs',\n      reg: /^ssrc:(\\d*) ([\\w_]*)(?::(.*))?/,\n      names: ['id', 'attribute', 'value'],\n      format: function (o) {\n        var str = 'ssrc:%d';\n        if (o.attribute != null) {\n          str += ' %s';\n          if (o.value != null) {\n            str += ':%s';\n          }\n        }\n        return str;\n      }\n    },\n    { //a=ssrc-group:FEC 1 2\n      //a=ssrc-group:FEC-FR 3004364195 1080772241\n      push: 'ssrcGroups',\n      // token-char = %x21 / %x23-27 / %x2A-2B / %x2D-2E / %x30-39 / %x41-5A / %x5E-7E\n      reg: /^ssrc-group:([\\x21\\x23\\x24\\x25\\x26\\x27\\x2A\\x2B\\x2D\\x2E\\w]*) (.*)/,\n      names: ['semantics', 'ssrcs'],\n      format: 'ssrc-group:%s %s'\n    },\n    { //a=msid-semantic: WMS Jvlam5X3SX1OP6pn20zWogvaKJz5Hjf9OnlV\n      name: 'msidSemantic',\n      reg: /^msid-semantic:\\s?(\\w*) (\\S*)/,\n      names: ['semantic', 'token'],\n      format: 'msid-semantic: %s %s' // space after ':' is not accidental\n    },\n    { //a=group:BUNDLE audio video\n      push: 'groups',\n      reg: /^group:(\\w*) (.*)/,\n      names: ['type', 'mids'],\n      format: 'group:%s %s'\n    },\n    { //a=rtcp-mux\n      name: 'rtcpMux',\n      reg: /^(rtcp-mux)/\n    },\n    { //a=rtcp-rsize\n      name: 'rtcpRsize',\n      reg: /^(rtcp-rsize)/\n    },\n    { //a=sctpmap:5000 webrtc-datachannel 1024\n      name: 'sctpmap',\n      reg: /^sctpmap:([\\w_\\/]*) (\\S*)(?: (\\S*))?/,\n      names: ['sctpmapNumber', 'app', 'maxMessageSize'],\n      format: function (o) {\n        return (o.maxMessageSize != null) ?\n          'sctpmap:%s %s %s' :\n          'sctpmap:%s %s';\n      }\n    },\n    { //a=x-google-flag:conference\n      name: 'xGoogleFlag',\n      reg: /^x-google-flag:([^\\s]*)/,\n      format: 'x-google-flag:%s'\n    },\n    { //a=rid:1 send max-width=1280;max-height=720;max-fps=30;depend=0\n      push: 'rids',\n      reg: /^rid:([\\d\\w]+) (\\w+)(?: ([\\S| ]*))?/,\n      names: ['id', 'direction', 'params'],\n      format: function (o) {\n        return (o.params) ? 'rid:%s %s %s' : 'rid:%s %s';\n      }\n    },\n    { //a=imageattr:97 send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320] recv [x=330,y=250]\n      //a=imageattr:* send [x=800,y=640] recv *\n      //a=imageattr:100 recv [x=320,y=240]\n      push: 'imageattrs',\n      reg: new RegExp(\n        //a=imageattr:97\n        '^imageattr:(\\\\d+|\\\\*)' +\n        //send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320]\n        '[\\\\s\\\\t]+(send|recv)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*)' +\n        //recv [x=330,y=250]\n        '(?:[\\\\s\\\\t]+(recv|send)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*))?'\n      ),\n      names: ['pt', 'dir1', 'attrs1', 'dir2', 'attrs2'],\n      format: function (o) {\n        return 'imageattr:%s %s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    { //a=simulcast:send 1,2,3;~4,~5 recv 6;~7,~8\n      //a=simulcast:recv 1;4,5 send 6;7\n      name: 'simulcast',\n      reg: new RegExp(\n        //a=simulcast:\n        '^simulcast:' +\n        //send 1,2,3;~4,~5\n        '(send|recv) ([a-zA-Z0-9\\\\-_~;,]+)' +\n        //space + recv 6;~7,~8\n        '(?:\\\\s?(send|recv) ([a-zA-Z0-9\\\\-_~;,]+))?' +\n        //end\n        '$'\n      ),\n      names: ['dir1', 'list1', 'dir2', 'list2'],\n      format: function (o) {\n        return 'simulcast:%s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    { //Old simulcast draft 03 (implemented by Firefox)\n      //  https://tools.ietf.org/html/draft-ietf-mmusic-sdp-simulcast-03\n      //a=simulcast: recv pt=97;98 send pt=97\n      //a=simulcast: send rid=5;6;7 paused=6,7\n      name: 'simulcast_03',\n      reg: /^simulcast:[\\s\\t]+([\\S+\\s\\t]+)$/,\n      names: ['value'],\n      format: 'simulcast: %s'\n    },\n    {\n      //a=framerate:25\n      //a=framerate:29.97\n      name: 'framerate',\n      reg: /^framerate:(\\d+(?:$|\\.\\d+))/,\n      format: 'framerate:%s'\n    },\n    { // any a= that we don't understand is kepts verbatim on media.invalid\n      push: 'invalid',\n      names: ['value']\n    }\n  ]\n};\n\n// set sensible defaults to avoid polluting the grammar with boring details\nObject.keys(grammar).forEach(function (key) {\n  var objs = grammar[key];\n  objs.forEach(function (obj) {\n    if (!obj.reg) {\n      obj.reg = /(.*)/;\n    }\n    if (!obj.format) {\n      obj.format = '%s';\n    }\n  });\n});\n","var parser = require('./parser');\nvar writer = require('./writer');\n\nexports.write = writer;\nexports.parse = parser.parse;\nexports.parseFmtpConfig = parser.parseFmtpConfig;\nexports.parseParams = parser.parseParams;\nexports.parsePayloads = parser.parsePayloads;\nexports.parseRemoteCandidates = parser.parseRemoteCandidates;\nexports.parseImageAttributes = parser.parseImageAttributes;\nexports.parseSimulcastStreamList = parser.parseSimulcastStreamList;\n","var toIntIfInt = function (v) {\n  return String(Number(v)) === v ? Number(v) : v;\n};\n\nvar attachProperties = function (match, location, names, rawName) {\n  if (rawName && !names) {\n    location[rawName] = toIntIfInt(match[1]);\n  }\n  else {\n    for (var i = 0; i < names.length; i += 1) {\n      if (match[i+1] != null) {\n        location[names[i]] = toIntIfInt(match[i+1]);\n      }\n    }\n  }\n};\n\nvar parseReg = function (obj, location, content) {\n  var needsBlank = obj.name && obj.names;\n  if (obj.push && !location[obj.push]) {\n    location[obj.push] = [];\n  }\n  else if (needsBlank && !location[obj.name]) {\n    location[obj.name] = {};\n  }\n  var keyLocation = obj.push ?\n    {} :  // blank object that will be pushed\n    needsBlank ? location[obj.name] : location; // otherwise, named location or root\n\n  attachProperties(content.match(obj.reg), keyLocation, obj.names, obj.name);\n\n  if (obj.push) {\n    location[obj.push].push(keyLocation);\n  }\n};\n\nvar grammar = require('./grammar');\nvar validLine = RegExp.prototype.test.bind(/^([a-z])=(.*)/);\n\nexports.parse = function (sdp) {\n  var session = {}\n    , media = []\n    , location = session; // points at where properties go under (one of the above)\n\n  // parse lines we understand\n  sdp.split(/(\\r\\n|\\r|\\n)/).filter(validLine).forEach(function (l) {\n    var type = l[0];\n    var content = l.slice(2);\n    if (type === 'm') {\n      media.push({rtp: [], fmtp: []});\n      location = media[media.length-1]; // point at latest media line\n    }\n\n    for (var j = 0; j < (grammar[type] || []).length; j += 1) {\n      var obj = grammar[type][j];\n      if (obj.reg.test(content)) {\n        return parseReg(obj, location, content);\n      }\n    }\n  });\n\n  session.media = media; // link it up\n  return session;\n};\n\nvar paramReducer = function (acc, expr) {\n  var s = expr.split(/=(.+)/, 2);\n  if (s.length === 2) {\n    acc[s[0]] = toIntIfInt(s[1]);\n  }\n  return acc;\n};\n\nexports.parseParams = function (str) {\n  return str.split(/\\;\\s?/).reduce(paramReducer, {});\n};\n\n// For backward compatibility - alias will be removed in 3.0.0\nexports.parseFmtpConfig = exports.parseParams;\n\nexports.parsePayloads = function (str) {\n  return str.split(' ').map(Number);\n};\n\nexports.parseRemoteCandidates = function (str) {\n  var candidates = [];\n  var parts = str.split(' ').map(toIntIfInt);\n  for (var i = 0; i < parts.length; i += 3) {\n    candidates.push({\n      component: parts[i],\n      ip: parts[i + 1],\n      port: parts[i + 2]\n    });\n  }\n  return candidates;\n};\n\nexports.parseImageAttributes = function (str) {\n  return str.split(' ').map(function (item) {\n    return item.substring(1, item.length-1).split(',').reduce(paramReducer, {});\n  });\n};\n\nexports.parseSimulcastStreamList = function (str) {\n  return str.split(';').map(function (stream) {\n    return stream.split(',').map(function (format) {\n      var scid, paused = false;\n\n      if (format[0] !== '~') {\n        scid = toIntIfInt(format);\n      } else {\n        scid = toIntIfInt(format.substring(1, format.length));\n        paused = true;\n      }\n\n      return {\n        scid: scid,\n        paused: paused\n      };\n    });\n  });\n};\n","var grammar = require('./grammar');\n\n// customized util.format - discards excess arguments and can void middle ones\nvar formatRegExp = /%[sdv%]/g;\nvar format = function (formatStr) {\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  return formatStr.replace(formatRegExp, function (x) {\n    if (i >= len) {\n      return x; // missing argument\n    }\n    var arg = args[i];\n    i += 1;\n    switch (x) {\n    case '%%':\n      return '%';\n    case '%s':\n      return String(arg);\n    case '%d':\n      return Number(arg);\n    case '%v':\n      return '';\n    }\n  });\n  // NB: we discard excess arguments - they are typically undefined from makeLine\n};\n\nvar makeLine = function (type, obj, location) {\n  var str = obj.format instanceof Function ?\n    (obj.format(obj.push ? location : location[obj.name])) :\n    obj.format;\n\n  var args = [type + '=' + str];\n  if (obj.names) {\n    for (var i = 0; i < obj.names.length; i += 1) {\n      var n = obj.names[i];\n      if (obj.name) {\n        args.push(location[obj.name][n]);\n      }\n      else { // for mLine and push attributes\n        args.push(location[obj.names[i]]);\n      }\n    }\n  }\n  else {\n    args.push(location[obj.name]);\n  }\n  return format.apply(null, args);\n};\n\n// RFC specified order\n// TODO: extend this with all the rest\nvar defaultOuterOrder = [\n  'v', 'o', 's', 'i',\n  'u', 'e', 'p', 'c',\n  'b', 't', 'r', 'z', 'a'\n];\nvar defaultInnerOrder = ['i', 'c', 'b', 'a'];\n\n\nmodule.exports = function (session, opts) {\n  opts = opts || {};\n  // ensure certain properties exist\n  if (session.version == null) {\n    session.version = 0; // 'v=0' must be there (only defined version atm)\n  }\n  if (session.name == null) {\n    session.name = ' '; // 's= ' must be there if no meaningful name set\n  }\n  session.media.forEach(function (mLine) {\n    if (mLine.payloads == null) {\n      mLine.payloads = '';\n    }\n  });\n\n  var outerOrder = opts.outerOrder || defaultOuterOrder;\n  var innerOrder = opts.innerOrder || defaultInnerOrder;\n  var sdp = [];\n\n  // loop through outerOrder for matching properties on session\n  outerOrder.forEach(function (type) {\n    grammar[type].forEach(function (obj) {\n      if (obj.name in session && session[obj.name] != null) {\n        sdp.push(makeLine(type, obj, session));\n      }\n      else if (obj.push in session && session[obj.push] != null) {\n        session[obj.push].forEach(function (el) {\n          sdp.push(makeLine(type, obj, el));\n        });\n      }\n    });\n  });\n\n  // then for each media line, follow the innerOrder\n  session.media.forEach(function (mLine) {\n    sdp.push(makeLine('m', grammar.m[0], mLine));\n\n    innerOrder.forEach(function (type) {\n      grammar[type].forEach(function (obj) {\n        if (obj.name in mLine && mLine[obj.name] != null) {\n          sdp.push(makeLine(type, obj, mLine));\n        }\n        else if (obj.push in mLine && mLine[obj.push] != null) {\n          mLine[obj.push].forEach(function (el) {\n            sdp.push(makeLine(type, obj, el));\n          });\n        }\n      });\n    });\n  });\n\n  return sdp.join('\\r\\n') + '\\r\\n';\n};\n","/* eslint-env node */\n'use strict';\n\n// SDP helpers.\nconst SDPUtils = {};\n\n// Generate an alphanumeric identifier for cname or mids.\n// TODO: use UUIDs instead? https://gist.github.com/jed/982883\nSDPUtils.generateIdentifier = function() {\n  return Math.random().toString(36).substr(2, 10);\n};\n\n// The RTCP CNAME used by all peerconnections from the same JS.\nSDPUtils.localCName = SDPUtils.generateIdentifier();\n\n// Splits SDP into lines, dealing with both CRLF and LF.\nSDPUtils.splitLines = function(blob) {\n  return blob.trim().split('\\n').map(line => line.trim());\n};\n// Splits SDP into sessionpart and mediasections. Ensures CRLF.\nSDPUtils.splitSections = function(blob) {\n  const parts = blob.split('\\nm=');\n  return parts.map((part, index) => (index > 0 ?\n    'm=' + part : part).trim() + '\\r\\n');\n};\n\n// returns the session description.\nSDPUtils.getDescription = function(blob) {\n  const sections = SDPUtils.splitSections(blob);\n  return sections && sections[0];\n};\n\n// returns the individual media sections.\nSDPUtils.getMediaSections = function(blob) {\n  const sections = SDPUtils.splitSections(blob);\n  sections.shift();\n  return sections;\n};\n\n// Returns lines that start with a certain prefix.\nSDPUtils.matchPrefix = function(blob, prefix) {\n  return SDPUtils.splitLines(blob).filter(line => line.indexOf(prefix) === 0);\n};\n\n// Parses an ICE candidate line. Sample input:\n// candidate:702786350 2 udp 41819902 8.8.8.8 60769 typ relay raddr 8.8.8.8\n// rport 55996\"\nSDPUtils.parseCandidate = function(line) {\n  let parts;\n  // Parse both variants.\n  if (line.indexOf('a=candidate:') === 0) {\n    parts = line.substring(12).split(' ');\n  } else {\n    parts = line.substring(10).split(' ');\n  }\n\n  const candidate = {\n    foundation: parts[0],\n    component: {1: 'rtp', 2: 'rtcp'}[parts[1]],\n    protocol: parts[2].toLowerCase(),\n    priority: parseInt(parts[3], 10),\n    ip: parts[4],\n    address: parts[4], // address is an alias for ip.\n    port: parseInt(parts[5], 10),\n    // skip parts[6] == 'typ'\n    type: parts[7],\n  };\n\n  for (let i = 8; i < parts.length; i += 2) {\n    switch (parts[i]) {\n      case 'raddr':\n        candidate.relatedAddress = parts[i + 1];\n        break;\n      case 'rport':\n        candidate.relatedPort = parseInt(parts[i + 1], 10);\n        break;\n      case 'tcptype':\n        candidate.tcpType = parts[i + 1];\n        break;\n      case 'ufrag':\n        candidate.ufrag = parts[i + 1]; // for backward compatibility.\n        candidate.usernameFragment = parts[i + 1];\n        break;\n      default: // extension handling, in particular ufrag. Don't overwrite.\n        if (candidate[parts[i]] === undefined) {\n          candidate[parts[i]] = parts[i + 1];\n        }\n        break;\n    }\n  }\n  return candidate;\n};\n\n// Translates a candidate object into SDP candidate attribute.\nSDPUtils.writeCandidate = function(candidate) {\n  const sdp = [];\n  sdp.push(candidate.foundation);\n\n  const component = candidate.component;\n  if (component === 'rtp') {\n    sdp.push(1);\n  } else if (component === 'rtcp') {\n    sdp.push(2);\n  } else {\n    sdp.push(component);\n  }\n  sdp.push(candidate.protocol.toUpperCase());\n  sdp.push(candidate.priority);\n  sdp.push(candidate.address || candidate.ip);\n  sdp.push(candidate.port);\n\n  const type = candidate.type;\n  sdp.push('typ');\n  sdp.push(type);\n  if (type !== 'host' && candidate.relatedAddress &&\n      candidate.relatedPort) {\n    sdp.push('raddr');\n    sdp.push(candidate.relatedAddress);\n    sdp.push('rport');\n    sdp.push(candidate.relatedPort);\n  }\n  if (candidate.tcpType && candidate.protocol.toLowerCase() === 'tcp') {\n    sdp.push('tcptype');\n    sdp.push(candidate.tcpType);\n  }\n  if (candidate.usernameFragment || candidate.ufrag) {\n    sdp.push('ufrag');\n    sdp.push(candidate.usernameFragment || candidate.ufrag);\n  }\n  return 'candidate:' + sdp.join(' ');\n};\n\n// Parses an ice-options line, returns an array of option tags.\n// a=ice-options:foo bar\nSDPUtils.parseIceOptions = function(line) {\n  return line.substr(14).split(' ');\n};\n\n// Parses an rtpmap line, returns RTCRtpCoddecParameters. Sample input:\n// a=rtpmap:111 opus/48000/2\nSDPUtils.parseRtpMap = function(line) {\n  let parts = line.substr(9).split(' ');\n  const parsed = {\n    payloadType: parseInt(parts.shift(), 10), // was: id\n  };\n\n  parts = parts[0].split('/');\n\n  parsed.name = parts[0];\n  parsed.clockRate = parseInt(parts[1], 10); // was: clockrate\n  parsed.channels = parts.length === 3 ? parseInt(parts[2], 10) : 1;\n  // legacy alias, got renamed back to channels in ORTC.\n  parsed.numChannels = parsed.channels;\n  return parsed;\n};\n\n// Generate an a=rtpmap line from RTCRtpCodecCapability or\n// RTCRtpCodecParameters.\nSDPUtils.writeRtpMap = function(codec) {\n  let pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  const channels = codec.channels || codec.numChannels || 1;\n  return 'a=rtpmap:' + pt + ' ' + codec.name + '/' + codec.clockRate +\n      (channels !== 1 ? '/' + channels : '') + '\\r\\n';\n};\n\n// Parses an a=extmap line (headerextension from RFC 5285). Sample input:\n// a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n// a=extmap:2/sendonly urn:ietf:params:rtp-hdrext:toffset\nSDPUtils.parseExtmap = function(line) {\n  const parts = line.substr(9).split(' ');\n  return {\n    id: parseInt(parts[0], 10),\n    direction: parts[0].indexOf('/') > 0 ? parts[0].split('/')[1] : 'sendrecv',\n    uri: parts[1],\n  };\n};\n\n// Generates a=extmap line from RTCRtpHeaderExtensionParameters or\n// RTCRtpHeaderExtension.\nSDPUtils.writeExtmap = function(headerExtension) {\n  return 'a=extmap:' + (headerExtension.id || headerExtension.preferredId) +\n      (headerExtension.direction && headerExtension.direction !== 'sendrecv'\n        ? '/' + headerExtension.direction\n        : '') +\n      ' ' + headerExtension.uri + '\\r\\n';\n};\n\n// Parses an ftmp line, returns dictionary. Sample input:\n// a=fmtp:96 vbr=on;cng=on\n// Also deals with vbr=on; cng=on\nSDPUtils.parseFmtp = function(line) {\n  const parsed = {};\n  let kv;\n  const parts = line.substr(line.indexOf(' ') + 1).split(';');\n  for (let j = 0; j < parts.length; j++) {\n    kv = parts[j].trim().split('=');\n    parsed[kv[0].trim()] = kv[1];\n  }\n  return parsed;\n};\n\n// Generates an a=ftmp line from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeFmtp = function(codec) {\n  let line = '';\n  let pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  if (codec.parameters && Object.keys(codec.parameters).length) {\n    const params = [];\n    Object.keys(codec.parameters).forEach(param => {\n      if (codec.parameters[param]) {\n        params.push(param + '=' + codec.parameters[param]);\n      } else {\n        params.push(param);\n      }\n    });\n    line += 'a=fmtp:' + pt + ' ' + params.join(';') + '\\r\\n';\n  }\n  return line;\n};\n\n// Parses an rtcp-fb line, returns RTCPRtcpFeedback object. Sample input:\n// a=rtcp-fb:98 nack rpsi\nSDPUtils.parseRtcpFb = function(line) {\n  const parts = line.substr(line.indexOf(' ') + 1).split(' ');\n  return {\n    type: parts.shift(),\n    parameter: parts.join(' '),\n  };\n};\n// Generate a=rtcp-fb lines from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeRtcpFb = function(codec) {\n  let lines = '';\n  let pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  if (codec.rtcpFeedback && codec.rtcpFeedback.length) {\n    // FIXME: special handling for trr-int?\n    codec.rtcpFeedback.forEach(fb => {\n      lines += 'a=rtcp-fb:' + pt + ' ' + fb.type +\n      (fb.parameter && fb.parameter.length ? ' ' + fb.parameter : '') +\n          '\\r\\n';\n    });\n  }\n  return lines;\n};\n\n// Parses an RFC 5576 ssrc media attribute. Sample input:\n// a=ssrc:3735928559 cname:something\nSDPUtils.parseSsrcMedia = function(line) {\n  const sp = line.indexOf(' ');\n  const parts = {\n    ssrc: parseInt(line.substr(7, sp - 7), 10),\n  };\n  const colon = line.indexOf(':', sp);\n  if (colon > -1) {\n    parts.attribute = line.substr(sp + 1, colon - sp - 1);\n    parts.value = line.substr(colon + 1);\n  } else {\n    parts.attribute = line.substr(sp + 1);\n  }\n  return parts;\n};\n\nSDPUtils.parseSsrcGroup = function(line) {\n  const parts = line.substr(13).split(' ');\n  return {\n    semantics: parts.shift(),\n    ssrcs: parts.map(ssrc => parseInt(ssrc, 10)),\n  };\n};\n\n// Extracts the MID (RFC 5888) from a media section.\n// returns the MID or undefined if no mid line was found.\nSDPUtils.getMid = function(mediaSection) {\n  const mid = SDPUtils.matchPrefix(mediaSection, 'a=mid:')[0];\n  if (mid) {\n    return mid.substr(6);\n  }\n};\n\nSDPUtils.parseFingerprint = function(line) {\n  const parts = line.substr(14).split(' ');\n  return {\n    algorithm: parts[0].toLowerCase(), // algorithm is case-sensitive in Edge.\n    value: parts[1],\n  };\n};\n\n// Extracts DTLS parameters from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the fingerprint line as input. See also getIceParameters.\nSDPUtils.getDtlsParameters = function(mediaSection, sessionpart) {\n  const lines = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=fingerprint:');\n  // Note: a=setup line is ignored since we use the 'auto' role.\n  // Note2: 'algorithm' is not case sensitive except in Edge.\n  return {\n    role: 'auto',\n    fingerprints: lines.map(SDPUtils.parseFingerprint),\n  };\n};\n\n// Serializes DTLS parameters to SDP.\nSDPUtils.writeDtlsParameters = function(params, setupType) {\n  let sdp = 'a=setup:' + setupType + '\\r\\n';\n  params.fingerprints.forEach(fp => {\n    sdp += 'a=fingerprint:' + fp.algorithm + ' ' + fp.value + '\\r\\n';\n  });\n  return sdp;\n};\n\n// Parses a=crypto lines into\n//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#dictionary-rtcsrtpsdesparameters-members\nSDPUtils.parseCryptoLine = function(line) {\n  const parts = line.substr(9).split(' ');\n  return {\n    tag: parseInt(parts[0], 10),\n    cryptoSuite: parts[1],\n    keyParams: parts[2],\n    sessionParams: parts.slice(3),\n  };\n};\n\nSDPUtils.writeCryptoLine = function(parameters) {\n  return 'a=crypto:' + parameters.tag + ' ' +\n    parameters.cryptoSuite + ' ' +\n    (typeof parameters.keyParams === 'object'\n      ? SDPUtils.writeCryptoKeyParams(parameters.keyParams)\n      : parameters.keyParams) +\n    (parameters.sessionParams ? ' ' + parameters.sessionParams.join(' ') : '') +\n    '\\r\\n';\n};\n\n// Parses the crypto key parameters into\n//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#rtcsrtpkeyparam*\nSDPUtils.parseCryptoKeyParams = function(keyParams) {\n  if (keyParams.indexOf('inline:') !== 0) {\n    return null;\n  }\n  const parts = keyParams.substr(7).split('|');\n  return {\n    keyMethod: 'inline',\n    keySalt: parts[0],\n    lifeTime: parts[1],\n    mkiValue: parts[2] ? parts[2].split(':')[0] : undefined,\n    mkiLength: parts[2] ? parts[2].split(':')[1] : undefined,\n  };\n};\n\nSDPUtils.writeCryptoKeyParams = function(keyParams) {\n  return keyParams.keyMethod + ':'\n    + keyParams.keySalt +\n    (keyParams.lifeTime ? '|' + keyParams.lifeTime : '') +\n    (keyParams.mkiValue && keyParams.mkiLength\n      ? '|' + keyParams.mkiValue + ':' + keyParams.mkiLength\n      : '');\n};\n\n// Extracts all SDES parameters.\nSDPUtils.getCryptoParameters = function(mediaSection, sessionpart) {\n  const lines = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=crypto:');\n  return lines.map(SDPUtils.parseCryptoLine);\n};\n\n// Parses ICE information from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the ice-ufrag and ice-pwd lines as input.\nSDPUtils.getIceParameters = function(mediaSection, sessionpart) {\n  const ufrag = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=ice-ufrag:')[0];\n  const pwd = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=ice-pwd:')[0];\n  if (!(ufrag && pwd)) {\n    return null;\n  }\n  return {\n    usernameFragment: ufrag.substr(12),\n    password: pwd.substr(10),\n  };\n};\n\n// Serializes ICE parameters to SDP.\nSDPUtils.writeIceParameters = function(params) {\n  let sdp = 'a=ice-ufrag:' + params.usernameFragment + '\\r\\n' +\n      'a=ice-pwd:' + params.password + '\\r\\n';\n  if (params.iceLite) {\n    sdp += 'a=ice-lite\\r\\n';\n  }\n  return sdp;\n};\n\n// Parses the SDP media section and returns RTCRtpParameters.\nSDPUtils.parseRtpParameters = function(mediaSection) {\n  const description = {\n    codecs: [],\n    headerExtensions: [],\n    fecMechanisms: [],\n    rtcp: [],\n  };\n  const lines = SDPUtils.splitLines(mediaSection);\n  const mline = lines[0].split(' ');\n  for (let i = 3; i < mline.length; i++) { // find all codecs from mline[3..]\n    const pt = mline[i];\n    const rtpmapline = SDPUtils.matchPrefix(\n      mediaSection, 'a=rtpmap:' + pt + ' ')[0];\n    if (rtpmapline) {\n      const codec = SDPUtils.parseRtpMap(rtpmapline);\n      const fmtps = SDPUtils.matchPrefix(\n        mediaSection, 'a=fmtp:' + pt + ' ');\n      // Only the first a=fmtp:<pt> is considered.\n      codec.parameters = fmtps.length ? SDPUtils.parseFmtp(fmtps[0]) : {};\n      codec.rtcpFeedback = SDPUtils.matchPrefix(\n        mediaSection, 'a=rtcp-fb:' + pt + ' ')\n        .map(SDPUtils.parseRtcpFb);\n      description.codecs.push(codec);\n      // parse FEC mechanisms from rtpmap lines.\n      switch (codec.name.toUpperCase()) {\n        case 'RED':\n        case 'ULPFEC':\n          description.fecMechanisms.push(codec.name.toUpperCase());\n          break;\n        default: // only RED and ULPFEC are recognized as FEC mechanisms.\n          break;\n      }\n    }\n  }\n  SDPUtils.matchPrefix(mediaSection, 'a=extmap:').forEach(line => {\n    description.headerExtensions.push(SDPUtils.parseExtmap(line));\n  });\n  // FIXME: parse rtcp.\n  return description;\n};\n\n// Generates parts of the SDP media section describing the capabilities /\n// parameters.\nSDPUtils.writeRtpDescription = function(kind, caps) {\n  let sdp = '';\n\n  // Build the mline.\n  sdp += 'm=' + kind + ' ';\n  sdp += caps.codecs.length > 0 ? '9' : '0'; // reject if no codecs.\n  sdp += ' UDP/TLS/RTP/SAVPF ';\n  sdp += caps.codecs.map(codec => {\n    if (codec.preferredPayloadType !== undefined) {\n      return codec.preferredPayloadType;\n    }\n    return codec.payloadType;\n  }).join(' ') + '\\r\\n';\n\n  sdp += 'c=IN IP4 0.0.0.0\\r\\n';\n  sdp += 'a=rtcp:9 IN IP4 0.0.0.0\\r\\n';\n\n  // Add a=rtpmap lines for each codec. Also fmtp and rtcp-fb.\n  caps.codecs.forEach(codec => {\n    sdp += SDPUtils.writeRtpMap(codec);\n    sdp += SDPUtils.writeFmtp(codec);\n    sdp += SDPUtils.writeRtcpFb(codec);\n  });\n  let maxptime = 0;\n  caps.codecs.forEach(codec => {\n    if (codec.maxptime > maxptime) {\n      maxptime = codec.maxptime;\n    }\n  });\n  if (maxptime > 0) {\n    sdp += 'a=maxptime:' + maxptime + '\\r\\n';\n  }\n\n  if (caps.headerExtensions) {\n    caps.headerExtensions.forEach(extension => {\n      sdp += SDPUtils.writeExtmap(extension);\n    });\n  }\n  // FIXME: write fecMechanisms.\n  return sdp;\n};\n\n// Parses the SDP media section and returns an array of\n// RTCRtpEncodingParameters.\nSDPUtils.parseRtpEncodingParameters = function(mediaSection) {\n  const encodingParameters = [];\n  const description = SDPUtils.parseRtpParameters(mediaSection);\n  const hasRed = description.fecMechanisms.indexOf('RED') !== -1;\n  const hasUlpfec = description.fecMechanisms.indexOf('ULPFEC') !== -1;\n\n  // filter a=ssrc:... cname:, ignore PlanB-msid\n  const ssrcs = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(line => SDPUtils.parseSsrcMedia(line))\n    .filter(parts => parts.attribute === 'cname');\n  const primarySsrc = ssrcs.length > 0 && ssrcs[0].ssrc;\n  let secondarySsrc;\n\n  const flows = SDPUtils.matchPrefix(mediaSection, 'a=ssrc-group:FID')\n    .map(line => {\n      const parts = line.substr(17).split(' ');\n      return parts.map(part => parseInt(part, 10));\n    });\n  if (flows.length > 0 && flows[0].length > 1 && flows[0][0] === primarySsrc) {\n    secondarySsrc = flows[0][1];\n  }\n\n  description.codecs.forEach(codec => {\n    if (codec.name.toUpperCase() === 'RTX' && codec.parameters.apt) {\n      let encParam = {\n        ssrc: primarySsrc,\n        codecPayloadType: parseInt(codec.parameters.apt, 10),\n      };\n      if (primarySsrc && secondarySsrc) {\n        encParam.rtx = {ssrc: secondarySsrc};\n      }\n      encodingParameters.push(encParam);\n      if (hasRed) {\n        encParam = JSON.parse(JSON.stringify(encParam));\n        encParam.fec = {\n          ssrc: primarySsrc,\n          mechanism: hasUlpfec ? 'red+ulpfec' : 'red',\n        };\n        encodingParameters.push(encParam);\n      }\n    }\n  });\n  if (encodingParameters.length === 0 && primarySsrc) {\n    encodingParameters.push({\n      ssrc: primarySsrc,\n    });\n  }\n\n  // we support both b=AS and b=TIAS but interpret AS as TIAS.\n  let bandwidth = SDPUtils.matchPrefix(mediaSection, 'b=');\n  if (bandwidth.length) {\n    if (bandwidth[0].indexOf('b=TIAS:') === 0) {\n      bandwidth = parseInt(bandwidth[0].substr(7), 10);\n    } else if (bandwidth[0].indexOf('b=AS:') === 0) {\n      // use formula from JSEP to convert b=AS to TIAS value.\n      bandwidth = parseInt(bandwidth[0].substr(5), 10) * 1000 * 0.95\n          - (50 * 40 * 8);\n    } else {\n      bandwidth = undefined;\n    }\n    encodingParameters.forEach(params => {\n      params.maxBitrate = bandwidth;\n    });\n  }\n  return encodingParameters;\n};\n\n// parses http://draft.ortc.org/#rtcrtcpparameters*\nSDPUtils.parseRtcpParameters = function(mediaSection) {\n  const rtcpParameters = {};\n\n  // Gets the first SSRC. Note that with RTX there might be multiple\n  // SSRCs.\n  const remoteSsrc = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(line => SDPUtils.parseSsrcMedia(line))\n    .filter(obj => obj.attribute === 'cname')[0];\n  if (remoteSsrc) {\n    rtcpParameters.cname = remoteSsrc.value;\n    rtcpParameters.ssrc = remoteSsrc.ssrc;\n  }\n\n  // Edge uses the compound attribute instead of reducedSize\n  // compound is !reducedSize\n  const rsize = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-rsize');\n  rtcpParameters.reducedSize = rsize.length > 0;\n  rtcpParameters.compound = rsize.length === 0;\n\n  // parses the rtcp-mux attrіbute.\n  // Note that Edge does not support unmuxed RTCP.\n  const mux = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-mux');\n  rtcpParameters.mux = mux.length > 0;\n\n  return rtcpParameters;\n};\n\nSDPUtils.writeRtcpParameters = function(rtcpParameters) {\n  let sdp = '';\n  if (rtcpParameters.reducedSize) {\n    sdp += 'a=rtcp-rsize\\r\\n';\n  }\n  if (rtcpParameters.mux) {\n    sdp += 'a=rtcp-mux\\r\\n';\n  }\n  if (rtcpParameters.ssrc !== undefined && rtcpParameters.cname) {\n    sdp += 'a=ssrc:' + rtcpParameters.ssrc +\n      ' cname:' + rtcpParameters.cname + '\\r\\n';\n  }\n  return sdp;\n};\n\n\n// parses either a=msid: or a=ssrc:... msid lines and returns\n// the id of the MediaStream and MediaStreamTrack.\nSDPUtils.parseMsid = function(mediaSection) {\n  let parts;\n  const spec = SDPUtils.matchPrefix(mediaSection, 'a=msid:');\n  if (spec.length === 1) {\n    parts = spec[0].substr(7).split(' ');\n    return {stream: parts[0], track: parts[1]};\n  }\n  const planB = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(line => SDPUtils.parseSsrcMedia(line))\n    .filter(msidParts => msidParts.attribute === 'msid');\n  if (planB.length > 0) {\n    parts = planB[0].value.split(' ');\n    return {stream: parts[0], track: parts[1]};\n  }\n};\n\n// SCTP\n// parses draft-ietf-mmusic-sctp-sdp-26 first and falls back\n// to draft-ietf-mmusic-sctp-sdp-05\nSDPUtils.parseSctpDescription = function(mediaSection) {\n  const mline = SDPUtils.parseMLine(mediaSection);\n  const maxSizeLine = SDPUtils.matchPrefix(mediaSection, 'a=max-message-size:');\n  let maxMessageSize;\n  if (maxSizeLine.length > 0) {\n    maxMessageSize = parseInt(maxSizeLine[0].substr(19), 10);\n  }\n  if (isNaN(maxMessageSize)) {\n    maxMessageSize = 65536;\n  }\n  const sctpPort = SDPUtils.matchPrefix(mediaSection, 'a=sctp-port:');\n  if (sctpPort.length > 0) {\n    return {\n      port: parseInt(sctpPort[0].substr(12), 10),\n      protocol: mline.fmt,\n      maxMessageSize,\n    };\n  }\n  const sctpMapLines = SDPUtils.matchPrefix(mediaSection, 'a=sctpmap:');\n  if (sctpMapLines.length > 0) {\n    const parts = sctpMapLines[0]\n      .substr(10)\n      .split(' ');\n    return {\n      port: parseInt(parts[0], 10),\n      protocol: parts[1],\n      maxMessageSize,\n    };\n  }\n};\n\n// SCTP\n// outputs the draft-ietf-mmusic-sctp-sdp-26 version that all browsers\n// support by now receiving in this format, unless we originally parsed\n// as the draft-ietf-mmusic-sctp-sdp-05 format (indicated by the m-line\n// protocol of DTLS/SCTP -- without UDP/ or TCP/)\nSDPUtils.writeSctpDescription = function(media, sctp) {\n  let output = [];\n  if (media.protocol !== 'DTLS/SCTP') {\n    output = [\n      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.protocol + '\\r\\n',\n      'c=IN IP4 0.0.0.0\\r\\n',\n      'a=sctp-port:' + sctp.port + '\\r\\n',\n    ];\n  } else {\n    output = [\n      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.port + '\\r\\n',\n      'c=IN IP4 0.0.0.0\\r\\n',\n      'a=sctpmap:' + sctp.port + ' ' + sctp.protocol + ' 65535\\r\\n',\n    ];\n  }\n  if (sctp.maxMessageSize !== undefined) {\n    output.push('a=max-message-size:' + sctp.maxMessageSize + '\\r\\n');\n  }\n  return output.join('');\n};\n\n// Generate a session ID for SDP.\n// https://tools.ietf.org/html/draft-ietf-rtcweb-jsep-20#section-5.2.1\n// recommends using a cryptographically random +ve 64-bit value\n// but right now this should be acceptable and within the right range\nSDPUtils.generateSessionId = function() {\n  return Math.random().toString().substr(2, 21);\n};\n\n// Write boiler plate for start of SDP\n// sessId argument is optional - if not supplied it will\n// be generated randomly\n// sessVersion is optional and defaults to 2\n// sessUser is optional and defaults to 'thisisadapterortc'\nSDPUtils.writeSessionBoilerplate = function(sessId, sessVer, sessUser) {\n  let sessionId;\n  const version = sessVer !== undefined ? sessVer : 2;\n  if (sessId) {\n    sessionId = sessId;\n  } else {\n    sessionId = SDPUtils.generateSessionId();\n  }\n  const user = sessUser || 'thisisadapterortc';\n  // FIXME: sess-id should be an NTP timestamp.\n  return 'v=0\\r\\n' +\n      'o=' + user + ' ' + sessionId + ' ' + version +\n        ' IN IP4 127.0.0.1\\r\\n' +\n      's=-\\r\\n' +\n      't=0 0\\r\\n';\n};\n\n// Gets the direction from the mediaSection or the sessionpart.\nSDPUtils.getDirection = function(mediaSection, sessionpart) {\n  // Look for sendrecv, sendonly, recvonly, inactive, default to sendrecv.\n  const lines = SDPUtils.splitLines(mediaSection);\n  for (let i = 0; i < lines.length; i++) {\n    switch (lines[i]) {\n      case 'a=sendrecv':\n      case 'a=sendonly':\n      case 'a=recvonly':\n      case 'a=inactive':\n        return lines[i].substr(2);\n      default:\n        // FIXME: What should happen here?\n    }\n  }\n  if (sessionpart) {\n    return SDPUtils.getDirection(sessionpart);\n  }\n  return 'sendrecv';\n};\n\nSDPUtils.getKind = function(mediaSection) {\n  const lines = SDPUtils.splitLines(mediaSection);\n  const mline = lines[0].split(' ');\n  return mline[0].substr(2);\n};\n\nSDPUtils.isRejected = function(mediaSection) {\n  return mediaSection.split(' ', 2)[1] === '0';\n};\n\nSDPUtils.parseMLine = function(mediaSection) {\n  const lines = SDPUtils.splitLines(mediaSection);\n  const parts = lines[0].substr(2).split(' ');\n  return {\n    kind: parts[0],\n    port: parseInt(parts[1], 10),\n    protocol: parts[2],\n    fmt: parts.slice(3).join(' '),\n  };\n};\n\nSDPUtils.parseOLine = function(mediaSection) {\n  const line = SDPUtils.matchPrefix(mediaSection, 'o=')[0];\n  const parts = line.substr(2).split(' ');\n  return {\n    username: parts[0],\n    sessionId: parts[1],\n    sessionVersion: parseInt(parts[2], 10),\n    netType: parts[3],\n    addressType: parts[4],\n    address: parts[5],\n  };\n};\n\n// a very naive interpretation of a valid SDP.\nSDPUtils.isValidSDP = function(blob) {\n  if (typeof blob !== 'string' || blob.length === 0) {\n    return false;\n  }\n  const lines = SDPUtils.splitLines(blob);\n  for (let i = 0; i < lines.length; i++) {\n    if (lines[i].length < 2 || lines[i].charAt(1) !== '=') {\n      return false;\n    }\n    // TODO: check the modifier a bit more.\n  }\n  return true;\n};\n\n// Expose public methods.\nif (typeof module === 'object') {\n  module.exports = SDPUtils;\n}\n","(function (global, factory) {\n            typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n            typeof define === 'function' && define.amd ? define(factory) :\n            (global = global || self, global.strophe = factory());\n}(this, function () { 'use strict';\n\n            var global$1 = (typeof global !== \"undefined\" ? global :\n                        typeof self !== \"undefined\" ? self :\n                        typeof window !== \"undefined\" ? window : {});\n\n            function _typeof(obj) {\n              if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n                _typeof = function (obj) {\n                  return typeof obj;\n                };\n              } else {\n                _typeof = function (obj) {\n                  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n                };\n              }\n\n              return _typeof(obj);\n            }\n\n            function _toConsumableArray(arr) {\n              return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n            }\n\n            function _arrayWithoutHoles(arr) {\n              if (Array.isArray(arr)) {\n                for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n                return arr2;\n              }\n            }\n\n            function _iterableToArray(iter) {\n              if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n            }\n\n            function _nonIterableSpread() {\n              throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n            }\n\n            /*\n             * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n             * Digest Algorithm, as defined in RFC 1321.\n             * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.\n             * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n             * Distributed under the BSD License\n             * See http://pajhome.org.uk/crypt/md5 for more info.\n             */\n\n            /*\n             * Everything that isn't used by Strophe has been stripped here!\n             */\n\n            /*\n             * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n             * to work around bugs in some JS interpreters.\n             */\n            var safe_add = function safe_add(x, y) {\n              var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n              var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n              return msw << 16 | lsw & 0xFFFF;\n            };\n            /*\n             * Bitwise rotate a 32-bit number to the left.\n             */\n\n\n            var bit_rol = function bit_rol(num, cnt) {\n              return num << cnt | num >>> 32 - cnt;\n            };\n            /*\n             * Convert a string to an array of little-endian words\n             */\n\n\n            var str2binl = function str2binl(str) {\n              if (typeof str !== \"string\") {\n                throw new Error(\"str2binl was passed a non-string\");\n              }\n\n              var bin = [];\n\n              for (var i = 0; i < str.length * 8; i += 8) {\n                bin[i >> 5] |= (str.charCodeAt(i / 8) & 255) << i % 32;\n              }\n\n              return bin;\n            };\n            /*\n             * Convert an array of little-endian words to a string\n             */\n\n\n            var binl2str = function binl2str(bin) {\n              var str = \"\";\n\n              for (var i = 0; i < bin.length * 32; i += 8) {\n                str += String.fromCharCode(bin[i >> 5] >>> i % 32 & 255);\n              }\n\n              return str;\n            };\n            /*\n             * Convert an array of little-endian words to a hex string.\n             */\n\n\n            var binl2hex = function binl2hex(binarray) {\n              var hex_tab = \"0123456789abcdef\";\n              var str = \"\";\n\n              for (var i = 0; i < binarray.length * 4; i++) {\n                str += hex_tab.charAt(binarray[i >> 2] >> i % 4 * 8 + 4 & 0xF) + hex_tab.charAt(binarray[i >> 2] >> i % 4 * 8 & 0xF);\n              }\n\n              return str;\n            };\n            /*\n             * These functions implement the four basic operations the algorithm uses.\n             */\n\n\n            var md5_cmn = function md5_cmn(q, a, b, x, s, t) {\n              return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s), b);\n            };\n\n            var md5_ff = function md5_ff(a, b, c, d, x, s, t) {\n              return md5_cmn(b & c | ~b & d, a, b, x, s, t);\n            };\n\n            var md5_gg = function md5_gg(a, b, c, d, x, s, t) {\n              return md5_cmn(b & d | c & ~d, a, b, x, s, t);\n            };\n\n            var md5_hh = function md5_hh(a, b, c, d, x, s, t) {\n              return md5_cmn(b ^ c ^ d, a, b, x, s, t);\n            };\n\n            var md5_ii = function md5_ii(a, b, c, d, x, s, t) {\n              return md5_cmn(c ^ (b | ~d), a, b, x, s, t);\n            };\n            /*\n             * Calculate the MD5 of an array of little-endian words, and a bit length\n             */\n\n\n            var core_md5 = function core_md5(x, len) {\n              /* append padding */\n              x[len >> 5] |= 0x80 << len % 32;\n              x[(len + 64 >>> 9 << 4) + 14] = len;\n              var a = 1732584193;\n              var b = -271733879;\n              var c = -1732584194;\n              var d = 271733878;\n              var olda, oldb, oldc, oldd;\n\n              for (var i = 0; i < x.length; i += 16) {\n                olda = a;\n                oldb = b;\n                oldc = c;\n                oldd = d;\n                a = md5_ff(a, b, c, d, x[i + 0], 7, -680876936);\n                d = md5_ff(d, a, b, c, x[i + 1], 12, -389564586);\n                c = md5_ff(c, d, a, b, x[i + 2], 17, 606105819);\n                b = md5_ff(b, c, d, a, x[i + 3], 22, -1044525330);\n                a = md5_ff(a, b, c, d, x[i + 4], 7, -176418897);\n                d = md5_ff(d, a, b, c, x[i + 5], 12, 1200080426);\n                c = md5_ff(c, d, a, b, x[i + 6], 17, -1473231341);\n                b = md5_ff(b, c, d, a, x[i + 7], 22, -45705983);\n                a = md5_ff(a, b, c, d, x[i + 8], 7, 1770035416);\n                d = md5_ff(d, a, b, c, x[i + 9], 12, -1958414417);\n                c = md5_ff(c, d, a, b, x[i + 10], 17, -42063);\n                b = md5_ff(b, c, d, a, x[i + 11], 22, -1990404162);\n                a = md5_ff(a, b, c, d, x[i + 12], 7, 1804603682);\n                d = md5_ff(d, a, b, c, x[i + 13], 12, -40341101);\n                c = md5_ff(c, d, a, b, x[i + 14], 17, -1502002290);\n                b = md5_ff(b, c, d, a, x[i + 15], 22, 1236535329);\n                a = md5_gg(a, b, c, d, x[i + 1], 5, -165796510);\n                d = md5_gg(d, a, b, c, x[i + 6], 9, -1069501632);\n                c = md5_gg(c, d, a, b, x[i + 11], 14, 643717713);\n                b = md5_gg(b, c, d, a, x[i + 0], 20, -373897302);\n                a = md5_gg(a, b, c, d, x[i + 5], 5, -701558691);\n                d = md5_gg(d, a, b, c, x[i + 10], 9, 38016083);\n                c = md5_gg(c, d, a, b, x[i + 15], 14, -660478335);\n                b = md5_gg(b, c, d, a, x[i + 4], 20, -405537848);\n                a = md5_gg(a, b, c, d, x[i + 9], 5, 568446438);\n                d = md5_gg(d, a, b, c, x[i + 14], 9, -1019803690);\n                c = md5_gg(c, d, a, b, x[i + 3], 14, -187363961);\n                b = md5_gg(b, c, d, a, x[i + 8], 20, 1163531501);\n                a = md5_gg(a, b, c, d, x[i + 13], 5, -1444681467);\n                d = md5_gg(d, a, b, c, x[i + 2], 9, -51403784);\n                c = md5_gg(c, d, a, b, x[i + 7], 14, 1735328473);\n                b = md5_gg(b, c, d, a, x[i + 12], 20, -1926607734);\n                a = md5_hh(a, b, c, d, x[i + 5], 4, -378558);\n                d = md5_hh(d, a, b, c, x[i + 8], 11, -2022574463);\n                c = md5_hh(c, d, a, b, x[i + 11], 16, 1839030562);\n                b = md5_hh(b, c, d, a, x[i + 14], 23, -35309556);\n                a = md5_hh(a, b, c, d, x[i + 1], 4, -1530992060);\n                d = md5_hh(d, a, b, c, x[i + 4], 11, 1272893353);\n                c = md5_hh(c, d, a, b, x[i + 7], 16, -155497632);\n                b = md5_hh(b, c, d, a, x[i + 10], 23, -1094730640);\n                a = md5_hh(a, b, c, d, x[i + 13], 4, 681279174);\n                d = md5_hh(d, a, b, c, x[i + 0], 11, -358537222);\n                c = md5_hh(c, d, a, b, x[i + 3], 16, -722521979);\n                b = md5_hh(b, c, d, a, x[i + 6], 23, 76029189);\n                a = md5_hh(a, b, c, d, x[i + 9], 4, -640364487);\n                d = md5_hh(d, a, b, c, x[i + 12], 11, -421815835);\n                c = md5_hh(c, d, a, b, x[i + 15], 16, 530742520);\n                b = md5_hh(b, c, d, a, x[i + 2], 23, -995338651);\n                a = md5_ii(a, b, c, d, x[i + 0], 6, -198630844);\n                d = md5_ii(d, a, b, c, x[i + 7], 10, 1126891415);\n                c = md5_ii(c, d, a, b, x[i + 14], 15, -1416354905);\n                b = md5_ii(b, c, d, a, x[i + 5], 21, -57434055);\n                a = md5_ii(a, b, c, d, x[i + 12], 6, 1700485571);\n                d = md5_ii(d, a, b, c, x[i + 3], 10, -1894986606);\n                c = md5_ii(c, d, a, b, x[i + 10], 15, -1051523);\n                b = md5_ii(b, c, d, a, x[i + 1], 21, -2054922799);\n                a = md5_ii(a, b, c, d, x[i + 8], 6, 1873313359);\n                d = md5_ii(d, a, b, c, x[i + 15], 10, -30611744);\n                c = md5_ii(c, d, a, b, x[i + 6], 15, -1560198380);\n                b = md5_ii(b, c, d, a, x[i + 13], 21, 1309151649);\n                a = md5_ii(a, b, c, d, x[i + 4], 6, -145523070);\n                d = md5_ii(d, a, b, c, x[i + 11], 10, -1120210379);\n                c = md5_ii(c, d, a, b, x[i + 2], 15, 718787259);\n                b = md5_ii(b, c, d, a, x[i + 9], 21, -343485551);\n                a = safe_add(a, olda);\n                b = safe_add(b, oldb);\n                c = safe_add(c, oldc);\n                d = safe_add(d, oldd);\n              }\n\n              return [a, b, c, d];\n            };\n            /*\n             * These are the functions you'll usually want to call.\n             * They take string arguments and return either hex or base-64 encoded\n             * strings.\n             */\n\n\n            var MD5 = {\n              hexdigest: function hexdigest(s) {\n                return binl2hex(core_md5(str2binl(s), s.length * 8));\n              },\n              hash: function hash(s) {\n                return binl2str(core_md5(str2binl(s), s.length * 8));\n              }\n            };\n\n            /*\n             * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined\n             * in FIPS PUB 180-1\n             * Version 2.1a Copyright Paul Johnston 2000 - 2002.\n             * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n             * Distributed under the BSD License\n             * See http://pajhome.org.uk/crypt/md5 for details.\n             */\n\n            /* global define */\n\n            /* Some functions and variables have been stripped for use with Strophe */\n\n            /*\n             * Calculate the SHA-1 of an array of big-endian words, and a bit length\n             */\n            function core_sha1(x, len) {\n              /* append padding */\n              x[len >> 5] |= 0x80 << 24 - len % 32;\n              x[(len + 64 >> 9 << 4) + 15] = len;\n              var w = new Array(80);\n              var a = 1732584193;\n              var b = -271733879;\n              var c = -1732584194;\n              var d = 271733878;\n              var e = -1009589776;\n              var i, j, t, olda, oldb, oldc, oldd, olde;\n\n              for (i = 0; i < x.length; i += 16) {\n                olda = a;\n                oldb = b;\n                oldc = c;\n                oldd = d;\n                olde = e;\n\n                for (j = 0; j < 80; j++) {\n                  if (j < 16) {\n                    w[j] = x[i + j];\n                  } else {\n                    w[j] = rol(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);\n                  }\n\n                  t = safe_add$1(safe_add$1(rol(a, 5), sha1_ft(j, b, c, d)), safe_add$1(safe_add$1(e, w[j]), sha1_kt(j)));\n                  e = d;\n                  d = c;\n                  c = rol(b, 30);\n                  b = a;\n                  a = t;\n                }\n\n                a = safe_add$1(a, olda);\n                b = safe_add$1(b, oldb);\n                c = safe_add$1(c, oldc);\n                d = safe_add$1(d, oldd);\n                e = safe_add$1(e, olde);\n              }\n\n              return [a, b, c, d, e];\n            }\n            /*\n             * Perform the appropriate triplet combination function for the current\n             * iteration\n             */\n\n\n            function sha1_ft(t, b, c, d) {\n              if (t < 20) {\n                return b & c | ~b & d;\n              }\n\n              if (t < 40) {\n                return b ^ c ^ d;\n              }\n\n              if (t < 60) {\n                return b & c | b & d | c & d;\n              }\n\n              return b ^ c ^ d;\n            }\n            /*\n             * Determine the appropriate additive constant for the current iteration\n             */\n\n\n            function sha1_kt(t) {\n              return t < 20 ? 1518500249 : t < 40 ? 1859775393 : t < 60 ? -1894007588 : -899497514;\n            }\n            /*\n             * Calculate the HMAC-SHA1 of a key and some data\n             */\n\n\n            function core_hmac_sha1(key, data) {\n              var bkey = str2binb(key);\n\n              if (bkey.length > 16) {\n                bkey = core_sha1(bkey, key.length * 8);\n              }\n\n              var ipad = new Array(16),\n                  opad = new Array(16);\n\n              for (var i = 0; i < 16; i++) {\n                ipad[i] = bkey[i] ^ 0x36363636;\n                opad[i] = bkey[i] ^ 0x5C5C5C5C;\n              }\n\n              var hash = core_sha1(ipad.concat(str2binb(data)), 512 + data.length * 8);\n              return core_sha1(opad.concat(hash), 512 + 160);\n            }\n            /*\n             * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n             * to work around bugs in some JS interpreters.\n             */\n\n\n            function safe_add$1(x, y) {\n              var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n              var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n              return msw << 16 | lsw & 0xFFFF;\n            }\n            /*\n             * Bitwise rotate a 32-bit number to the left.\n             */\n\n\n            function rol(num, cnt) {\n              return num << cnt | num >>> 32 - cnt;\n            }\n            /*\n             * Convert an 8-bit or 16-bit string to an array of big-endian words\n             * In 8-bit function, characters >255 have their hi-byte silently ignored.\n             */\n\n\n            function str2binb(str) {\n              var bin = [];\n              var mask = 255;\n\n              for (var i = 0; i < str.length * 8; i += 8) {\n                bin[i >> 5] |= (str.charCodeAt(i / 8) & mask) << 24 - i % 32;\n              }\n\n              return bin;\n            }\n            /*\n             * Convert an array of big-endian words to a base-64 string\n             */\n\n\n            function binb2b64(binarray) {\n              var tab = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n              var str = \"\";\n              var triplet, j;\n\n              for (var i = 0; i < binarray.length * 4; i += 3) {\n                triplet = (binarray[i >> 2] >> 8 * (3 - i % 4) & 0xFF) << 16 | (binarray[i + 1 >> 2] >> 8 * (3 - (i + 1) % 4) & 0xFF) << 8 | binarray[i + 2 >> 2] >> 8 * (3 - (i + 2) % 4) & 0xFF;\n\n                for (j = 0; j < 4; j++) {\n                  if (i * 8 + j * 6 > binarray.length * 32) {\n                    str += \"=\";\n                  } else {\n                    str += tab.charAt(triplet >> 6 * (3 - j) & 0x3F);\n                  }\n                }\n              }\n\n              return str;\n            }\n            /*\n             * Convert an array of big-endian words to a string\n             */\n\n\n            function binb2str(bin) {\n              var str = \"\";\n              var mask = 255;\n\n              for (var i = 0; i < bin.length * 32; i += 8) {\n                str += String.fromCharCode(bin[i >> 5] >>> 24 - i % 32 & mask);\n              }\n\n              return str;\n            }\n            /*\n             * These are the functions you'll usually want to call\n             * They take string arguments and return either hex or base-64 encoded strings\n             */\n\n\n            var SHA1 = {\n              b64_hmac_sha1: function b64_hmac_sha1(key, data) {\n                return binb2b64(core_hmac_sha1(key, data));\n              },\n              b64_sha1: function b64_sha1(s) {\n                return binb2b64(core_sha1(str2binb(s), s.length * 8));\n              },\n              binb2str: binb2str,\n              core_hmac_sha1: core_hmac_sha1,\n              str_hmac_sha1: function str_hmac_sha1(key, data) {\n                return binb2str(core_hmac_sha1(key, data));\n              },\n              str_sha1: function str_sha1(s) {\n                return binb2str(core_sha1(str2binb(s), s.length * 8));\n              }\n            };\n\n            var utils = {\n              utf16to8: function utf16to8(str) {\n                var i, c;\n                var out = \"\";\n                var len = str.length;\n\n                for (i = 0; i < len; i++) {\n                  c = str.charCodeAt(i);\n\n                  if (c >= 0x0000 && c <= 0x007F) {\n                    out += str.charAt(i);\n                  } else if (c > 0x07FF) {\n                    out += String.fromCharCode(0xE0 | c >> 12 & 0x0F);\n                    out += String.fromCharCode(0x80 | c >> 6 & 0x3F);\n                    out += String.fromCharCode(0x80 | c >> 0 & 0x3F);\n                  } else {\n                    out += String.fromCharCode(0xC0 | c >> 6 & 0x1F);\n                    out += String.fromCharCode(0x80 | c >> 0 & 0x3F);\n                  }\n                }\n\n                return out;\n              },\n              addCookies: function addCookies(cookies) {\n                /* Parameters:\n                 *  (Object) cookies - either a map of cookie names\n                 *    to string values or to maps of cookie values.\n                 *\n                 * For example:\n                 * { \"myCookie\": \"1234\" }\n                 *\n                 * or:\n                 * { \"myCookie\": {\n                 *      \"value\": \"1234\",\n                 *      \"domain\": \".example.org\",\n                 *      \"path\": \"/\",\n                 *      \"expires\": expirationDate\n                 *      }\n                 *  }\n                 *\n                 *  These values get passed to Strophe.Connection via\n                 *   options.cookies\n                 */\n                cookies = cookies || {};\n\n                for (var cookieName in cookies) {\n                  if (Object.prototype.hasOwnProperty.call(cookies, cookieName)) {\n                    var expires = '';\n                    var domain = '';\n                    var path = '';\n                    var cookieObj = cookies[cookieName];\n                    var isObj = _typeof(cookieObj) === \"object\";\n                    var cookieValue = escape(unescape(isObj ? cookieObj.value : cookieObj));\n\n                    if (isObj) {\n                      expires = cookieObj.expires ? \";expires=\" + cookieObj.expires : '';\n                      domain = cookieObj.domain ? \";domain=\" + cookieObj.domain : '';\n                      path = cookieObj.path ? \";path=\" + cookieObj.path : '';\n                    }\n\n                    document.cookie = cookieName + '=' + cookieValue + expires + domain + path;\n                  }\n                }\n              }\n            };\n\n            /** Function: $build\n             *  Create a Strophe.Builder.\n             *  This is an alias for 'new Strophe.Builder(name, attrs)'.\n             *\n             *  Parameters:\n             *    (String) name - The root element name.\n             *    (Object) attrs - The attributes for the root element in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n            function $build(name, attrs) {\n              return new Strophe.Builder(name, attrs);\n            }\n            /** Function: $msg\n             *  Create a Strophe.Builder with a <message/> element as the root.\n             *\n             *  Parameters:\n             *    (Object) attrs - The <message/> element attributes in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n\n            function $msg(attrs) {\n              return new Strophe.Builder(\"message\", attrs);\n            }\n            /** Function: $iq\n             *  Create a Strophe.Builder with an <iq/> element as the root.\n             *\n             *  Parameters:\n             *    (Object) attrs - The <iq/> element attributes in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n\n            function $iq(attrs) {\n              return new Strophe.Builder(\"iq\", attrs);\n            }\n            /** Function: $pres\n             *  Create a Strophe.Builder with a <presence/> element as the root.\n             *\n             *  Parameters:\n             *    (Object) attrs - The <presence/> element attributes in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n\n            function $pres(attrs) {\n              return new Strophe.Builder(\"presence\", attrs);\n            }\n            /** Class: Strophe\n             *  An object container for all Strophe library functions.\n             *\n             *  This class is just a container for all the objects and constants\n             *  used in the library.  It is not meant to be instantiated, but to\n             *  provide a namespace for library objects, constants, and functions.\n             */\n\n\n            var Strophe = {\n              /** Constant: VERSION */\n              VERSION: \"@VERSION@\",\n\n              /** Constants: XMPP Namespace Constants\n               *  Common namespace constants from the XMPP RFCs and XEPs.\n               *\n               *  NS.HTTPBIND - HTTP BIND namespace from XEP 124.\n               *  NS.BOSH - BOSH namespace from XEP 206.\n               *  NS.CLIENT - Main XMPP client namespace.\n               *  NS.AUTH - Legacy authentication namespace.\n               *  NS.ROSTER - Roster operations namespace.\n               *  NS.PROFILE - Profile namespace.\n               *  NS.DISCO_INFO - Service discovery info namespace from XEP 30.\n               *  NS.DISCO_ITEMS - Service discovery items namespace from XEP 30.\n               *  NS.MUC - Multi-User Chat namespace from XEP 45.\n               *  NS.SASL - XMPP SASL namespace from RFC 3920.\n               *  NS.STREAM - XMPP Streams namespace from RFC 3920.\n               *  NS.BIND - XMPP Binding namespace from RFC 3920 and RFC 6120.\n               *  NS.SESSION - XMPP Session namespace from RFC 3920.\n               *  NS.XHTML_IM - XHTML-IM namespace from XEP 71.\n               *  NS.XHTML - XHTML body namespace from XEP 71.\n               */\n              NS: {\n                HTTPBIND: \"http://jabber.org/protocol/httpbind\",\n                BOSH: \"urn:xmpp:xbosh\",\n                CLIENT: \"jabber:client\",\n                AUTH: \"jabber:iq:auth\",\n                ROSTER: \"jabber:iq:roster\",\n                PROFILE: \"jabber:iq:profile\",\n                DISCO_INFO: \"http://jabber.org/protocol/disco#info\",\n                DISCO_ITEMS: \"http://jabber.org/protocol/disco#items\",\n                MUC: \"http://jabber.org/protocol/muc\",\n                SASL: \"urn:ietf:params:xml:ns:xmpp-sasl\",\n                STREAM: \"http://etherx.jabber.org/streams\",\n                FRAMING: \"urn:ietf:params:xml:ns:xmpp-framing\",\n                BIND: \"urn:ietf:params:xml:ns:xmpp-bind\",\n                SESSION: \"urn:ietf:params:xml:ns:xmpp-session\",\n                VERSION: \"jabber:iq:version\",\n                STANZAS: \"urn:ietf:params:xml:ns:xmpp-stanzas\",\n                XHTML_IM: \"http://jabber.org/protocol/xhtml-im\",\n                XHTML: \"http://www.w3.org/1999/xhtml\"\n              },\n\n              /** Constants: XHTML_IM Namespace\n               *  contains allowed tags, tag attributes, and css properties.\n               *  Used in the createHtml function to filter incoming html into the allowed XHTML-IM subset.\n               *  See http://xmpp.org/extensions/xep-0071.html#profile-summary for the list of recommended\n               *  allowed tags and their attributes.\n               */\n              XHTML: {\n                tags: ['a', 'blockquote', 'br', 'cite', 'em', 'img', 'li', 'ol', 'p', 'span', 'strong', 'ul', 'body'],\n                attributes: {\n                  'a': ['href'],\n                  'blockquote': ['style'],\n                  'br': [],\n                  'cite': ['style'],\n                  'em': [],\n                  'img': ['src', 'alt', 'style', 'height', 'width'],\n                  'li': ['style'],\n                  'ol': ['style'],\n                  'p': ['style'],\n                  'span': ['style'],\n                  'strong': [],\n                  'ul': ['style'],\n                  'body': []\n                },\n                css: ['background-color', 'color', 'font-family', 'font-size', 'font-style', 'font-weight', 'margin-left', 'margin-right', 'text-align', 'text-decoration'],\n\n                /** Function: XHTML.validTag\n                 *\n                 * Utility method to determine whether a tag is allowed\n                 * in the XHTML_IM namespace.\n                 *\n                 * XHTML tag names are case sensitive and must be lower case.\n                 */\n                validTag: function validTag(tag) {\n                  for (var i = 0; i < Strophe.XHTML.tags.length; i++) {\n                    if (tag === Strophe.XHTML.tags[i]) {\n                      return true;\n                    }\n                  }\n\n                  return false;\n                },\n\n                /** Function: XHTML.validAttribute\n                 *\n                 * Utility method to determine whether an attribute is allowed\n                 * as recommended per XEP-0071\n                 *\n                 * XHTML attribute names are case sensitive and must be lower case.\n                 */\n                validAttribute: function validAttribute(tag, attribute) {\n                  if (typeof Strophe.XHTML.attributes[tag] !== 'undefined' && Strophe.XHTML.attributes[tag].length > 0) {\n                    for (var i = 0; i < Strophe.XHTML.attributes[tag].length; i++) {\n                      if (attribute === Strophe.XHTML.attributes[tag][i]) {\n                        return true;\n                      }\n                    }\n                  }\n\n                  return false;\n                },\n                validCSS: function validCSS(style) {\n                  for (var i = 0; i < Strophe.XHTML.css.length; i++) {\n                    if (style === Strophe.XHTML.css[i]) {\n                      return true;\n                    }\n                  }\n\n                  return false;\n                }\n              },\n\n              /** Constants: Connection Status Constants\n               *  Connection status constants for use by the connection handler\n               *  callback.\n               *\n               *  Status.ERROR - An error has occurred\n               *  Status.CONNECTING - The connection is currently being made\n               *  Status.CONNFAIL - The connection attempt failed\n               *  Status.AUTHENTICATING - The connection is authenticating\n               *  Status.AUTHFAIL - The authentication attempt failed\n               *  Status.CONNECTED - The connection has succeeded\n               *  Status.DISCONNECTED - The connection has been terminated\n               *  Status.DISCONNECTING - The connection is currently being terminated\n               *  Status.ATTACHED - The connection has been attached\n               *  Status.REDIRECT - The connection has been redirected\n               *  Status.CONNTIMEOUT - The connection has timed out\n               */\n              Status: {\n                ERROR: 0,\n                CONNECTING: 1,\n                CONNFAIL: 2,\n                AUTHENTICATING: 3,\n                AUTHFAIL: 4,\n                CONNECTED: 5,\n                DISCONNECTED: 6,\n                DISCONNECTING: 7,\n                ATTACHED: 8,\n                REDIRECT: 9,\n                CONNTIMEOUT: 10,\n                BINDREQUIRED: 11\n              },\n              ErrorCondition: {\n                BAD_FORMAT: \"bad-format\",\n                CONFLICT: \"conflict\",\n                MISSING_JID_NODE: \"x-strophe-bad-non-anon-jid\",\n                NO_AUTH_MECH: \"no-auth-mech\",\n                UNKNOWN_REASON: \"unknown\"\n              },\n\n              /** Constants: Log Level Constants\n               *  Logging level indicators.\n               *\n               *  LogLevel.DEBUG - Debug output\n               *  LogLevel.INFO - Informational output\n               *  LogLevel.WARN - Warnings\n               *  LogLevel.ERROR - Errors\n               *  LogLevel.FATAL - Fatal errors\n               */\n              LogLevel: {\n                DEBUG: 0,\n                INFO: 1,\n                WARN: 2,\n                ERROR: 3,\n                FATAL: 4\n              },\n\n              /** PrivateConstants: DOM Element Type Constants\n               *  DOM element types.\n               *\n               *  ElementType.NORMAL - Normal element.\n               *  ElementType.TEXT - Text data element.\n               *  ElementType.FRAGMENT - XHTML fragment element.\n               */\n              ElementType: {\n                NORMAL: 1,\n                TEXT: 3,\n                CDATA: 4,\n                FRAGMENT: 11\n              },\n\n              /** PrivateConstants: Timeout Values\n               *  Timeout values for error states.  These values are in seconds.\n               *  These should not be changed unless you know exactly what you are\n               *  doing.\n               *\n               *  TIMEOUT - Timeout multiplier. A waiting request will be considered\n               *      failed after Math.floor(TIMEOUT * wait) seconds have elapsed.\n               *      This defaults to 1.1, and with default wait, 66 seconds.\n               *  SECONDARY_TIMEOUT - Secondary timeout multiplier. In cases where\n               *      Strophe can detect early failure, it will consider the request\n               *      failed if it doesn't return after\n               *      Math.floor(SECONDARY_TIMEOUT * wait) seconds have elapsed.\n               *      This defaults to 0.1, and with default wait, 6 seconds.\n               */\n              TIMEOUT: 1.1,\n              SECONDARY_TIMEOUT: 0.1,\n\n              /** Function: addNamespace\n               *  This function is used to extend the current namespaces in\n               *  Strophe.NS.  It takes a key and a value with the key being the\n               *  name of the new namespace, with its actual value.\n               *  For example:\n               *  Strophe.addNamespace('PUBSUB', \"http://jabber.org/protocol/pubsub\");\n               *\n               *  Parameters:\n               *    (String) name - The name under which the namespace will be\n               *      referenced under Strophe.NS\n               *    (String) value - The actual namespace.\n               */\n              addNamespace: function addNamespace(name, value) {\n                Strophe.NS[name] = value;\n              },\n\n              /** Function: forEachChild\n               *  Map a function over some or all child elements of a given element.\n               *\n               *  This is a small convenience function for mapping a function over\n               *  some or all of the children of an element.  If elemName is null, all\n               *  children will be passed to the function, otherwise only children\n               *  whose tag names match elemName will be passed.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The element to operate on.\n               *    (String) elemName - The child element tag name filter.\n               *    (Function) func - The function to apply to each child.  This\n               *      function should take a single argument, a DOM element.\n               */\n              forEachChild: function forEachChild(elem, elemName, func) {\n                for (var i = 0; i < elem.childNodes.length; i++) {\n                  var childNode = elem.childNodes[i];\n\n                  if (childNode.nodeType === Strophe.ElementType.NORMAL && (!elemName || this.isTagEqual(childNode, elemName))) {\n                    func(childNode);\n                  }\n                }\n              },\n\n              /** Function: isTagEqual\n               *  Compare an element's tag name with a string.\n               *\n               *  This function is case sensitive.\n               *\n               *  Parameters:\n               *    (XMLElement) el - A DOM element.\n               *    (String) name - The element name.\n               *\n               *  Returns:\n               *    true if the element's tag name matches _el_, and false\n               *    otherwise.\n               */\n              isTagEqual: function isTagEqual(el, name) {\n                return el.tagName === name;\n              },\n\n              /** PrivateVariable: _xmlGenerator\n               *  _Private_ variable that caches a DOM document to\n               *  generate elements.\n               */\n              _xmlGenerator: null,\n\n              /** PrivateFunction: _makeGenerator\n               *  _Private_ function that creates a dummy XML DOM document to serve as\n               *  an element and text node generator.\n               */\n              _makeGenerator: function _makeGenerator() {\n                var doc; // IE9 does implement createDocument(); however, using it will cause the browser to leak memory on page unload.\n                // Here, we test for presence of createDocument() plus IE's proprietary documentMode attribute, which would be\n                // less than 10 in the case of IE9 and below.\n\n                if (document.implementation.createDocument === undefined || document.implementation.createDocument && document.documentMode && document.documentMode < 10) {\n                  doc = this._getIEXmlDom();\n                  doc.appendChild(doc.createElement('strophe'));\n                } else {\n                  doc = document.implementation.createDocument('jabber:client', 'strophe', null);\n                }\n\n                return doc;\n              },\n\n              /** Function: xmlGenerator\n               *  Get the DOM document to generate elements.\n               *\n               *  Returns:\n               *    The currently used DOM document.\n               */\n              xmlGenerator: function xmlGenerator() {\n                if (!Strophe._xmlGenerator) {\n                  Strophe._xmlGenerator = Strophe._makeGenerator();\n                }\n\n                return Strophe._xmlGenerator;\n              },\n\n              /** PrivateFunction: _getIEXmlDom\n               *  Gets IE xml doc object\n               *\n               *  Returns:\n               *    A Microsoft XML DOM Object\n               *  See Also:\n               *    http://msdn.microsoft.com/en-us/library/ms757837%28VS.85%29.aspx\n               */\n              _getIEXmlDom: function _getIEXmlDom() {\n                var doc = null;\n                var docStrings = [\"Msxml2.DOMDocument.6.0\", \"Msxml2.DOMDocument.5.0\", \"Msxml2.DOMDocument.4.0\", \"MSXML2.DOMDocument.3.0\", \"MSXML2.DOMDocument\", \"MSXML.DOMDocument\", \"Microsoft.XMLDOM\"];\n\n                for (var d = 0; d < docStrings.length; d++) {\n                  if (doc === null) {\n                    try {\n                      doc = new ActiveXObject(docStrings[d]);\n                    } catch (e) {\n                      doc = null;\n                    }\n                  } else {\n                    break;\n                  }\n                }\n\n                return doc;\n              },\n\n              /** Function: xmlElement\n               *  Create an XML DOM element.\n               *\n               *  This function creates an XML DOM element correctly across all\n               *  implementations. Note that these are not HTML DOM elements, which\n               *  aren't appropriate for XMPP stanzas.\n               *\n               *  Parameters:\n               *    (String) name - The name for the element.\n               *    (Array|Object) attrs - An optional array or object containing\n               *      key/value pairs to use as element attributes. The object should\n               *      be in the format {'key': 'value'} or {key: 'value'}. The array\n               *      should have the format [['key1', 'value1'], ['key2', 'value2']].\n               *    (String) text - The text child data for the element.\n               *\n               *  Returns:\n               *    A new XML DOM element.\n               */\n              xmlElement: function xmlElement(name) {\n                if (!name) {\n                  return null;\n                }\n\n                var node = Strophe.xmlGenerator().createElement(name); // FIXME: this should throw errors if args are the wrong type or\n                // there are more than two optional args\n\n                for (var a = 1; a < arguments.length; a++) {\n                  var arg = arguments[a];\n\n                  if (!arg) {\n                    continue;\n                  }\n\n                  if (typeof arg === \"string\" || typeof arg === \"number\") {\n                    node.appendChild(Strophe.xmlTextNode(arg));\n                  } else if (_typeof(arg) === \"object\" && typeof arg.sort === \"function\") {\n                    for (var i = 0; i < arg.length; i++) {\n                      var attr = arg[i];\n\n                      if (_typeof(attr) === \"object\" && typeof attr.sort === \"function\" && attr[1] !== undefined && attr[1] !== null) {\n                        node.setAttribute(attr[0], attr[1]);\n                      }\n                    }\n                  } else if (_typeof(arg) === \"object\") {\n                    for (var k in arg) {\n                      if (Object.prototype.hasOwnProperty.call(arg, k) && arg[k] !== undefined && arg[k] !== null) {\n                        node.setAttribute(k, arg[k]);\n                      }\n                    }\n                  }\n                }\n\n                return node;\n              },\n\n              /*  Function: xmlescape\n               *  Excapes invalid xml characters.\n               *\n               *  Parameters:\n               *     (String) text - text to escape.\n               *\n               *  Returns:\n               *      Escaped text.\n               */\n              xmlescape: function xmlescape(text) {\n                text = text.replace(/\\&/g, \"&amp;\");\n                text = text.replace(/</g, \"&lt;\");\n                text = text.replace(/>/g, \"&gt;\");\n                text = text.replace(/'/g, \"&apos;\");\n                text = text.replace(/\"/g, \"&quot;\");\n                return text;\n              },\n\n              /*  Function: xmlunescape\n              *  Unexcapes invalid xml characters.\n              *\n              *  Parameters:\n              *     (String) text - text to unescape.\n              *\n              *  Returns:\n              *      Unescaped text.\n              */\n              xmlunescape: function xmlunescape(text) {\n                text = text.replace(/\\&amp;/g, \"&\");\n                text = text.replace(/&lt;/g, \"<\");\n                text = text.replace(/&gt;/g, \">\");\n                text = text.replace(/&apos;/g, \"'\");\n                text = text.replace(/&quot;/g, \"\\\"\");\n                return text;\n              },\n\n              /** Function: xmlTextNode\n               *  Creates an XML DOM text node.\n               *\n               *  Provides a cross implementation version of document.createTextNode.\n               *\n               *  Parameters:\n               *    (String) text - The content of the text node.\n               *\n               *  Returns:\n               *    A new XML DOM text node.\n               */\n              xmlTextNode: function xmlTextNode(text) {\n                return Strophe.xmlGenerator().createTextNode(text);\n              },\n\n              /** Function: xmlHtmlNode\n               *  Creates an XML DOM html node.\n               *\n               *  Parameters:\n               *    (String) html - The content of the html node.\n               *\n               *  Returns:\n               *    A new XML DOM text node.\n               */\n              xmlHtmlNode: function xmlHtmlNode(html) {\n                var node; //ensure text is escaped\n\n                if (DOMParser) {\n                  var parser = new DOMParser();\n                  node = parser.parseFromString(html, \"text/xml\");\n                } else {\n                  node = new ActiveXObject(\"Microsoft.XMLDOM\");\n                  node.async = \"false\";\n                  node.loadXML(html);\n                }\n\n                return node;\n              },\n\n              /** Function: getText\n               *  Get the concatenation of all text children of an element.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    A String with the concatenated text of all text element children.\n               */\n              getText: function getText(elem) {\n                if (!elem) {\n                  return null;\n                }\n\n                var str = \"\";\n\n                if (elem.childNodes.length === 0 && elem.nodeType === Strophe.ElementType.TEXT) {\n                  str += elem.nodeValue;\n                }\n\n                for (var i = 0; i < elem.childNodes.length; i++) {\n                  if (elem.childNodes[i].nodeType === Strophe.ElementType.TEXT) {\n                    str += elem.childNodes[i].nodeValue;\n                  }\n                }\n\n                return Strophe.xmlescape(str);\n              },\n\n              /** Function: copyElement\n               *  Copy an XML DOM element.\n               *\n               *  This function copies a DOM element and all its descendants and returns\n               *  the new copy.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    A new, copied DOM element tree.\n               */\n              copyElement: function copyElement(elem) {\n                var el;\n\n                if (elem.nodeType === Strophe.ElementType.NORMAL) {\n                  el = Strophe.xmlElement(elem.tagName);\n\n                  for (var i = 0; i < elem.attributes.length; i++) {\n                    el.setAttribute(elem.attributes[i].nodeName, elem.attributes[i].value);\n                  }\n\n                  for (var _i = 0; _i < elem.childNodes.length; _i++) {\n                    el.appendChild(Strophe.copyElement(elem.childNodes[_i]));\n                  }\n                } else if (elem.nodeType === Strophe.ElementType.TEXT) {\n                  el = Strophe.xmlGenerator().createTextNode(elem.nodeValue);\n                }\n\n                return el;\n              },\n\n              /** Function: createHtml\n               *  Copy an HTML DOM element into an XML DOM.\n               *\n               *  This function copies a DOM element and all its descendants and returns\n               *  the new copy.\n               *\n               *  Parameters:\n               *    (HTMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    A new, copied DOM element tree.\n               */\n              createHtml: function createHtml(elem) {\n                var el;\n\n                if (elem.nodeType === Strophe.ElementType.NORMAL) {\n                  var tag = elem.nodeName.toLowerCase(); // XHTML tags must be lower case.\n\n                  if (Strophe.XHTML.validTag(tag)) {\n                    try {\n                      el = Strophe.xmlElement(tag);\n\n                      for (var i = 0; i < Strophe.XHTML.attributes[tag].length; i++) {\n                        var attribute = Strophe.XHTML.attributes[tag][i];\n                        var value = elem.getAttribute(attribute);\n\n                        if (typeof value === 'undefined' || value === null || value === '' || value === false || value === 0) {\n                          continue;\n                        }\n\n                        if (attribute === 'style' && _typeof(value) === 'object' && typeof value.cssText !== 'undefined') {\n                          value = value.cssText; // we're dealing with IE, need to get CSS out\n                        } // filter out invalid css styles\n\n\n                        if (attribute === 'style') {\n                          var css = [];\n                          var cssAttrs = value.split(';');\n\n                          for (var j = 0; j < cssAttrs.length; j++) {\n                            var attr = cssAttrs[j].split(':');\n                            var cssName = attr[0].replace(/^\\s*/, \"\").replace(/\\s*$/, \"\").toLowerCase();\n\n                            if (Strophe.XHTML.validCSS(cssName)) {\n                              var cssValue = attr[1].replace(/^\\s*/, \"\").replace(/\\s*$/, \"\");\n                              css.push(cssName + ': ' + cssValue);\n                            }\n                          }\n\n                          if (css.length > 0) {\n                            value = css.join('; ');\n                            el.setAttribute(attribute, value);\n                          }\n                        } else {\n                          el.setAttribute(attribute, value);\n                        }\n                      }\n\n                      for (var _i2 = 0; _i2 < elem.childNodes.length; _i2++) {\n                        el.appendChild(Strophe.createHtml(elem.childNodes[_i2]));\n                      }\n                    } catch (e) {\n                      // invalid elements\n                      el = Strophe.xmlTextNode('');\n                    }\n                  } else {\n                    el = Strophe.xmlGenerator().createDocumentFragment();\n\n                    for (var _i3 = 0; _i3 < elem.childNodes.length; _i3++) {\n                      el.appendChild(Strophe.createHtml(elem.childNodes[_i3]));\n                    }\n                  }\n                } else if (elem.nodeType === Strophe.ElementType.FRAGMENT) {\n                  el = Strophe.xmlGenerator().createDocumentFragment();\n\n                  for (var _i4 = 0; _i4 < elem.childNodes.length; _i4++) {\n                    el.appendChild(Strophe.createHtml(elem.childNodes[_i4]));\n                  }\n                } else if (elem.nodeType === Strophe.ElementType.TEXT) {\n                  el = Strophe.xmlTextNode(elem.nodeValue);\n                }\n\n                return el;\n              },\n\n              /** Function: escapeNode\n               *  Escape the node part (also called local part) of a JID.\n               *\n               *  Parameters:\n               *    (String) node - A node (or local part).\n               *\n               *  Returns:\n               *    An escaped node (or local part).\n               */\n              escapeNode: function escapeNode(node) {\n                if (typeof node !== \"string\") {\n                  return node;\n                }\n\n                return node.replace(/^\\s+|\\s+$/g, '').replace(/\\\\/g, \"\\\\5c\").replace(/ /g, \"\\\\20\").replace(/\\\"/g, \"\\\\22\").replace(/\\&/g, \"\\\\26\").replace(/\\'/g, \"\\\\27\").replace(/\\//g, \"\\\\2f\").replace(/:/g, \"\\\\3a\").replace(/</g, \"\\\\3c\").replace(/>/g, \"\\\\3e\").replace(/@/g, \"\\\\40\");\n              },\n\n              /** Function: unescapeNode\n               *  Unescape a node part (also called local part) of a JID.\n               *\n               *  Parameters:\n               *    (String) node - A node (or local part).\n               *\n               *  Returns:\n               *    An unescaped node (or local part).\n               */\n              unescapeNode: function unescapeNode(node) {\n                if (typeof node !== \"string\") {\n                  return node;\n                }\n\n                return node.replace(/\\\\20/g, \" \").replace(/\\\\22/g, '\"').replace(/\\\\26/g, \"&\").replace(/\\\\27/g, \"'\").replace(/\\\\2f/g, \"/\").replace(/\\\\3a/g, \":\").replace(/\\\\3c/g, \"<\").replace(/\\\\3e/g, \">\").replace(/\\\\40/g, \"@\").replace(/\\\\5c/g, \"\\\\\");\n              },\n\n              /** Function: getNodeFromJid\n               *  Get the node portion of a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the node.\n               */\n              getNodeFromJid: function getNodeFromJid(jid) {\n                if (jid.indexOf(\"@\") < 0) {\n                  return null;\n                }\n\n                return jid.split(\"@\")[0];\n              },\n\n              /** Function: getDomainFromJid\n               *  Get the domain portion of a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the domain.\n               */\n              getDomainFromJid: function getDomainFromJid(jid) {\n                var bare = Strophe.getBareJidFromJid(jid);\n\n                if (bare.indexOf(\"@\") < 0) {\n                  return bare;\n                } else {\n                  var parts = bare.split(\"@\");\n                  parts.splice(0, 1);\n                  return parts.join('@');\n                }\n              },\n\n              /** Function: getResourceFromJid\n               *  Get the resource portion of a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the resource.\n               */\n              getResourceFromJid: function getResourceFromJid(jid) {\n                if (!jid) {\n                  return null;\n                }\n\n                var s = jid.split(\"/\");\n\n                if (s.length < 2) {\n                  return null;\n                }\n\n                s.splice(0, 1);\n                return s.join('/');\n              },\n\n              /** Function: getBareJidFromJid\n               *  Get the bare JID from a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the bare JID.\n               */\n              getBareJidFromJid: function getBareJidFromJid(jid) {\n                return jid ? jid.split(\"/\")[0] : null;\n              },\n\n              /** PrivateFunction: _handleError\n               *  _Private_ function that properly logs an error to the console\n               */\n              _handleError: function _handleError(e) {\n                if (typeof e.stack !== \"undefined\") {\n                  Strophe.fatal(e.stack);\n                }\n\n                if (e.sourceURL) {\n                  Strophe.fatal(\"error: \" + this.handler + \" \" + e.sourceURL + \":\" + e.line + \" - \" + e.name + \": \" + e.message);\n                } else if (e.fileName) {\n                  Strophe.fatal(\"error: \" + this.handler + \" \" + e.fileName + \":\" + e.lineNumber + \" - \" + e.name + \": \" + e.message);\n                } else {\n                  Strophe.fatal(\"error: \" + e.message);\n                }\n              },\n\n              /** Function: log\n               *  User overrideable logging function.\n               *\n               *  This function is called whenever the Strophe library calls any\n               *  of the logging functions.  The default implementation of this\n               *  function logs only fatal errors.  If client code wishes to handle the logging\n               *  messages, it should override this with\n               *  > Strophe.log = function (level, msg) {\n               *  >   (user code here)\n               *  > };\n               *\n               *  Please note that data sent and received over the wire is logged\n               *  via Strophe.Connection.rawInput() and Strophe.Connection.rawOutput().\n               *\n               *  The different levels and their meanings are\n               *\n               *    DEBUG - Messages useful for debugging purposes.\n               *    INFO - Informational messages.  This is mostly information like\n               *      'disconnect was called' or 'SASL auth succeeded'.\n               *    WARN - Warnings about potential problems.  This is mostly used\n               *      to report transient connection errors like request timeouts.\n               *    ERROR - Some error occurred.\n               *    FATAL - A non-recoverable fatal error occurred.\n               *\n               *  Parameters:\n               *    (Integer) level - The log level of the log message.  This will\n               *      be one of the values in Strophe.LogLevel.\n               *    (String) msg - The log message.\n               */\n              log: function log(level, msg) {\n                if (level === this.LogLevel.FATAL && _typeof(window.console) === 'object' && typeof window.console.error === 'function') {\n                  window.console.error(msg);\n                }\n              },\n\n              /** Function: debug\n               *  Log a message at the Strophe.LogLevel.DEBUG level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              debug: function debug(msg) {\n                this.log(this.LogLevel.DEBUG, msg);\n              },\n\n              /** Function: info\n               *  Log a message at the Strophe.LogLevel.INFO level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              info: function info(msg) {\n                this.log(this.LogLevel.INFO, msg);\n              },\n\n              /** Function: warn\n               *  Log a message at the Strophe.LogLevel.WARN level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              warn: function warn(msg) {\n                this.log(this.LogLevel.WARN, msg);\n              },\n\n              /** Function: error\n               *  Log a message at the Strophe.LogLevel.ERROR level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              error: function error(msg) {\n                this.log(this.LogLevel.ERROR, msg);\n              },\n\n              /** Function: fatal\n               *  Log a message at the Strophe.LogLevel.FATAL level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              fatal: function fatal(msg) {\n                this.log(this.LogLevel.FATAL, msg);\n              },\n\n              /** Function: serialize\n               *  Render a DOM element and all descendants to a String.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    The serialized element tree as a String.\n               */\n              serialize: function serialize(elem) {\n                if (!elem) {\n                  return null;\n                }\n\n                if (typeof elem.tree === \"function\") {\n                  elem = elem.tree();\n                }\n\n                var names = _toConsumableArray(Array(elem.attributes.length).keys()).map(function (i) {\n                  return elem.attributes[i].nodeName;\n                });\n\n                names.sort();\n                var result = names.reduce(function (a, n) {\n                  return \"\".concat(a, \" \").concat(n, \"=\\\"\").concat(Strophe.xmlescape(elem.attributes.getNamedItem(n).value), \"\\\"\");\n                }, \"<\".concat(elem.nodeName));\n\n                if (elem.childNodes.length > 0) {\n                  result += \">\";\n\n                  for (var i = 0; i < elem.childNodes.length; i++) {\n                    var child = elem.childNodes[i];\n\n                    switch (child.nodeType) {\n                      case Strophe.ElementType.NORMAL:\n                        // normal element, so recurse\n                        result += Strophe.serialize(child);\n                        break;\n\n                      case Strophe.ElementType.TEXT:\n                        // text element to escape values\n                        result += Strophe.xmlescape(child.nodeValue);\n                        break;\n\n                      case Strophe.ElementType.CDATA:\n                        // cdata section so don't escape values\n                        result += \"<![CDATA[\" + child.nodeValue + \"]]>\";\n                    }\n                  }\n\n                  result += \"</\" + elem.nodeName + \">\";\n                } else {\n                  result += \"/>\";\n                }\n\n                return result;\n              },\n\n              /** PrivateVariable: _requestId\n               *  _Private_ variable that keeps track of the request ids for\n               *  connections.\n               */\n              _requestId: 0,\n\n              /** PrivateVariable: Strophe.connectionPlugins\n               *  _Private_ variable Used to store plugin names that need\n               *  initialization on Strophe.Connection construction.\n               */\n              _connectionPlugins: {},\n\n              /** Function: addConnectionPlugin\n               *  Extends the Strophe.Connection object with the given plugin.\n               *\n               *  Parameters:\n               *    (String) name - The name of the extension.\n               *    (Object) ptype - The plugin's prototype.\n               */\n              addConnectionPlugin: function addConnectionPlugin(name, ptype) {\n                Strophe._connectionPlugins[name] = ptype;\n              }\n            };\n            /** Class: Strophe.Builder\n             *  XML DOM builder.\n             *\n             *  This object provides an interface similar to JQuery but for building\n             *  DOM elements easily and rapidly.  All the functions except for toString()\n             *  and tree() return the object, so calls can be chained.  Here's an\n             *  example using the $iq() builder helper.\n             *  > $iq({to: 'you', from: 'me', type: 'get', id: '1'})\n             *  >     .c('query', {xmlns: 'strophe:example'})\n             *  >     .c('example')\n             *  >     .toString()\n             *\n             *  The above generates this XML fragment\n             *  > <iq to='you' from='me' type='get' id='1'>\n             *  >   <query xmlns='strophe:example'>\n             *  >     <example/>\n             *  >   </query>\n             *  > </iq>\n             *  The corresponding DOM manipulations to get a similar fragment would be\n             *  a lot more tedious and probably involve several helper variables.\n             *\n             *  Since adding children makes new operations operate on the child, up()\n             *  is provided to traverse up the tree.  To add two children, do\n             *  > builder.c('child1', ...).up().c('child2', ...)\n             *  The next operation on the Builder will be relative to the second child.\n             */\n\n            /** Constructor: Strophe.Builder\n             *  Create a Strophe.Builder object.\n             *\n             *  The attributes should be passed in object notation.  For example\n             *  > let b = new Builder('message', {to: 'you', from: 'me'});\n             *  or\n             *  > let b = new Builder('messsage', {'xml:lang': 'en'});\n             *\n             *  Parameters:\n             *    (String) name - The name of the root element.\n             *    (Object) attrs - The attributes for the root element in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder.\n             */\n\n            Strophe.Builder = function (name, attrs) {\n              // Set correct namespace for jabber:client elements\n              if (name === \"presence\" || name === \"message\" || name === \"iq\") {\n                if (attrs && !attrs.xmlns) {\n                  attrs.xmlns = Strophe.NS.CLIENT;\n                } else if (!attrs) {\n                  attrs = {\n                    xmlns: Strophe.NS.CLIENT\n                  };\n                }\n              } // Holds the tree being built.\n\n\n              this.nodeTree = Strophe.xmlElement(name, attrs); // Points to the current operation node.\n\n              this.node = this.nodeTree;\n            };\n\n            Strophe.Builder.prototype = {\n              /** Function: tree\n               *  Return the DOM tree.\n               *\n               *  This function returns the current DOM tree as an element object.  This\n               *  is suitable for passing to functions like Strophe.Connection.send().\n               *\n               *  Returns:\n               *    The DOM tree as a element object.\n               */\n              tree: function tree() {\n                return this.nodeTree;\n              },\n\n              /** Function: toString\n               *  Serialize the DOM tree to a String.\n               *\n               *  This function returns a string serialization of the current DOM\n               *  tree.  It is often used internally to pass data to a\n               *  Strophe.Request object.\n               *\n               *  Returns:\n               *    The serialized DOM tree in a String.\n               */\n              toString: function toString() {\n                return Strophe.serialize(this.nodeTree);\n              },\n\n              /** Function: up\n               *  Make the current parent element the new current element.\n               *\n               *  This function is often used after c() to traverse back up the tree.\n               *  For example, to add two children to the same element\n               *  > builder.c('child1', {}).up().c('child2', {});\n               *\n               *  Returns:\n               *    The Stophe.Builder object.\n               */\n              up: function up() {\n                this.node = this.node.parentNode;\n                return this;\n              },\n\n              /** Function: root\n               *  Make the root element the new current element.\n               *\n               *  When at a deeply nested element in the tree, this function can be used\n               *  to jump back to the root of the tree, instead of having to repeatedly\n               *  call up().\n               *\n               *  Returns:\n               *    The Stophe.Builder object.\n               */\n              root: function root() {\n                this.node = this.nodeTree;\n                return this;\n              },\n\n              /** Function: attrs\n               *  Add or modify attributes of the current element.\n               *\n               *  The attributes should be passed in object notation.  This function\n               *  does not move the current element pointer.\n               *\n               *  Parameters:\n               *    (Object) moreattrs - The attributes to add/modify in object notation.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              attrs: function attrs(moreattrs) {\n                for (var k in moreattrs) {\n                  if (Object.prototype.hasOwnProperty.call(moreattrs, k)) {\n                    if (moreattrs[k] === undefined) {\n                      this.node.removeAttribute(k);\n                    } else {\n                      this.node.setAttribute(k, moreattrs[k]);\n                    }\n                  }\n                }\n\n                return this;\n              },\n\n              /** Function: c\n               *  Add a child to the current element and make it the new current\n               *  element.\n               *\n               *  This function moves the current element pointer to the child,\n               *  unless text is provided.  If you need to add another child, it\n               *  is necessary to use up() to go back to the parent in the tree.\n               *\n               *  Parameters:\n               *    (String) name - The name of the child.\n               *    (Object) attrs - The attributes of the child in object notation.\n               *    (String) text - The text to add to the child.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              c: function c(name, attrs, text) {\n                var child = Strophe.xmlElement(name, attrs, text);\n                this.node.appendChild(child);\n\n                if (typeof text !== \"string\" && typeof text !== \"number\") {\n                  this.node = child;\n                }\n\n                return this;\n              },\n\n              /** Function: cnode\n               *  Add a child to the current element and make it the new current\n               *  element.\n               *\n               *  This function is the same as c() except that instead of using a\n               *  name and an attributes object to create the child it uses an\n               *  existing DOM element object.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              cnode: function cnode(elem) {\n                var impNode;\n                var xmlGen = Strophe.xmlGenerator();\n\n                try {\n                  impNode = xmlGen.importNode !== undefined;\n                } catch (e) {\n                  impNode = false;\n                }\n\n                var newElem = impNode ? xmlGen.importNode(elem, true) : Strophe.copyElement(elem);\n                this.node.appendChild(newElem);\n                this.node = newElem;\n                return this;\n              },\n\n              /** Function: t\n               *  Add a child text element.\n               *\n               *  This *does not* make the child the new current element since there\n               *  are no children of text elements.\n               *\n               *  Parameters:\n               *    (String) text - The text data to append to the current element.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              t: function t(text) {\n                var child = Strophe.xmlTextNode(text);\n                this.node.appendChild(child);\n                return this;\n              },\n\n              /** Function: h\n               *  Replace current element contents with the HTML passed in.\n               *\n               *  This *does not* make the child the new current element\n               *\n               *  Parameters:\n               *    (String) html - The html to insert as contents of current element.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              h: function h(html) {\n                var fragment = document.createElement('body'); // force the browser to try and fix any invalid HTML tags\n\n                fragment.innerHTML = html; // copy cleaned html into an xml dom\n\n                var xhtml = Strophe.createHtml(fragment);\n\n                while (xhtml.childNodes.length > 0) {\n                  this.node.appendChild(xhtml.childNodes[0]);\n                }\n\n                return this;\n              }\n            };\n            /** PrivateClass: Strophe.Handler\n             *  _Private_ helper class for managing stanza handlers.\n             *\n             *  A Strophe.Handler encapsulates a user provided callback function to be\n             *  executed when matching stanzas are received by the connection.\n             *  Handlers can be either one-off or persistant depending on their\n             *  return value. Returning true will cause a Handler to remain active, and\n             *  returning false will remove the Handler.\n             *\n             *  Users will not use Strophe.Handler objects directly, but instead they\n             *  will use Strophe.Connection.addHandler() and\n             *  Strophe.Connection.deleteHandler().\n             */\n\n            /** PrivateConstructor: Strophe.Handler\n             *  Create and initialize a new Strophe.Handler.\n             *\n             *  Parameters:\n             *    (Function) handler - A function to be executed when the handler is run.\n             *    (String) ns - The namespace to match.\n             *    (String) name - The element name to match.\n             *    (String) type - The element type to match.\n             *    (String) id - The element id attribute to match.\n             *    (String) from - The element from attribute to match.\n             *    (Object) options - Handler options\n             *\n             *  Returns:\n             *    A new Strophe.Handler object.\n             */\n\n            Strophe.Handler = function (handler, ns, name, type, id, from, options) {\n              this.handler = handler;\n              this.ns = ns;\n              this.name = name;\n              this.type = type;\n              this.id = id;\n              this.options = options || {\n                'matchBareFromJid': false,\n                'ignoreNamespaceFragment': false\n              }; // BBB: Maintain backward compatibility with old `matchBare` option\n\n              if (this.options.matchBare) {\n                Strophe.warn('The \"matchBare\" option is deprecated, use \"matchBareFromJid\" instead.');\n                this.options.matchBareFromJid = this.options.matchBare;\n                delete this.options.matchBare;\n              }\n\n              if (this.options.matchBareFromJid) {\n                this.from = from ? Strophe.getBareJidFromJid(from) : null;\n              } else {\n                this.from = from;\n              } // whether the handler is a user handler or a system handler\n\n\n              this.user = true;\n            };\n\n            Strophe.Handler.prototype = {\n              /** PrivateFunction: getNamespace\n               *  Returns the XML namespace attribute on an element.\n               *  If `ignoreNamespaceFragment` was passed in for this handler, then the\n               *  URL fragment will be stripped.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML element with the namespace.\n               *\n               *  Returns:\n               *    The namespace, with optionally the fragment stripped.\n               */\n              getNamespace: function getNamespace(elem) {\n                var elNamespace = elem.getAttribute(\"xmlns\");\n\n                if (elNamespace && this.options.ignoreNamespaceFragment) {\n                  elNamespace = elNamespace.split('#')[0];\n                }\n\n                return elNamespace;\n              },\n\n              /** PrivateFunction: namespaceMatch\n               *  Tests if a stanza matches the namespace set for this Strophe.Handler.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML element to test.\n               *\n               *  Returns:\n               *    true if the stanza matches and false otherwise.\n               */\n              namespaceMatch: function namespaceMatch(elem) {\n                var _this = this;\n\n                var nsMatch = false;\n\n                if (!this.ns) {\n                  return true;\n                } else {\n                  Strophe.forEachChild(elem, null, function (elem) {\n                    if (_this.getNamespace(elem) === _this.ns) {\n                      nsMatch = true;\n                    }\n                  });\n                  return nsMatch || this.getNamespace(elem) === this.ns;\n                }\n              },\n\n              /** PrivateFunction: isMatch\n               *  Tests if a stanza matches the Strophe.Handler.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML element to test.\n               *\n               *  Returns:\n               *    true if the stanza matches and false otherwise.\n               */\n              isMatch: function isMatch(elem) {\n                var from = elem.getAttribute('from');\n\n                if (this.options.matchBareFromJid) {\n                  from = Strophe.getBareJidFromJid(from);\n                }\n\n                var elem_type = elem.getAttribute(\"type\");\n\n                if (this.namespaceMatch(elem) && (!this.name || Strophe.isTagEqual(elem, this.name)) && (!this.type || (Array.isArray(this.type) ? this.type.indexOf(elem_type) !== -1 : elem_type === this.type)) && (!this.id || elem.getAttribute(\"id\") === this.id) && (!this.from || from === this.from)) {\n                  return true;\n                }\n\n                return false;\n              },\n\n              /** PrivateFunction: run\n               *  Run the callback on a matching stanza.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The DOM element that triggered the\n               *      Strophe.Handler.\n               *\n               *  Returns:\n               *    A boolean indicating if the handler should remain active.\n               */\n              run: function run(elem) {\n                var result = null;\n\n                try {\n                  result = this.handler(elem);\n                } catch (e) {\n                  Strophe._handleError(e);\n\n                  throw e;\n                }\n\n                return result;\n              },\n\n              /** PrivateFunction: toString\n               *  Get a String representation of the Strophe.Handler object.\n               *\n               *  Returns:\n               *    A String.\n               */\n              toString: function toString() {\n                return \"{Handler: \" + this.handler + \"(\" + this.name + \",\" + this.id + \",\" + this.ns + \")}\";\n              }\n            };\n            /** PrivateClass: Strophe.TimedHandler\n             *  _Private_ helper class for managing timed handlers.\n             *\n             *  A Strophe.TimedHandler encapsulates a user provided callback that\n             *  should be called after a certain period of time or at regular\n             *  intervals.  The return value of the callback determines whether the\n             *  Strophe.TimedHandler will continue to fire.\n             *\n             *  Users will not use Strophe.TimedHandler objects directly, but instead\n             *  they will use Strophe.Connection.addTimedHandler() and\n             *  Strophe.Connection.deleteTimedHandler().\n             */\n\n            /** PrivateConstructor: Strophe.TimedHandler\n             *  Create and initialize a new Strophe.TimedHandler object.\n             *\n             *  Parameters:\n             *    (Integer) period - The number of milliseconds to wait before the\n             *      handler is called.\n             *    (Function) handler - The callback to run when the handler fires.  This\n             *      function should take no arguments.\n             *\n             *  Returns:\n             *    A new Strophe.TimedHandler object.\n             */\n\n            Strophe.TimedHandler = function (period, handler) {\n              this.period = period;\n              this.handler = handler;\n              this.lastCalled = new Date().getTime();\n              this.user = true;\n            };\n\n            Strophe.TimedHandler.prototype = {\n              /** PrivateFunction: run\n               *  Run the callback for the Strophe.TimedHandler.\n               *\n               *  Returns:\n               *    true if the Strophe.TimedHandler should be called again, and false\n               *      otherwise.\n               */\n              run: function run() {\n                this.lastCalled = new Date().getTime();\n                return this.handler();\n              },\n\n              /** PrivateFunction: reset\n               *  Reset the last called time for the Strophe.TimedHandler.\n               */\n              reset: function reset() {\n                this.lastCalled = new Date().getTime();\n              },\n\n              /** PrivateFunction: toString\n               *  Get a string representation of the Strophe.TimedHandler object.\n               *\n               *  Returns:\n               *    The string representation.\n               */\n              toString: function toString() {\n                return \"{TimedHandler: \" + this.handler + \"(\" + this.period + \")}\";\n              }\n            };\n            /** Class: Strophe.Connection\n             *  XMPP Connection manager.\n             *\n             *  This class is the main part of Strophe.  It manages a BOSH or websocket\n             *  connection to an XMPP server and dispatches events to the user callbacks\n             *  as data arrives. It supports SASL PLAIN, SASL DIGEST-MD5, SASL SCRAM-SHA1\n             *  and legacy authentication.\n             *\n             *  After creating a Strophe.Connection object, the user will typically\n             *  call connect() with a user supplied callback to handle connection level\n             *  events like authentication failure, disconnection, or connection\n             *  complete.\n             *\n             *  The user will also have several event handlers defined by using\n             *  addHandler() and addTimedHandler().  These will allow the user code to\n             *  respond to interesting stanzas or do something periodically with the\n             *  connection. These handlers will be active once authentication is\n             *  finished.\n             *\n             *  To send data to the connection, use send().\n             */\n\n            /** Constructor: Strophe.Connection\n             *  Create and initialize a Strophe.Connection object.\n             *\n             *  The transport-protocol for this connection will be chosen automatically\n             *  based on the given service parameter. URLs starting with \"ws://\" or\n             *  \"wss://\" will use WebSockets, URLs starting with \"http://\", \"https://\"\n             *  or without a protocol will use BOSH.\n             *\n             *  To make Strophe connect to the current host you can leave out the protocol\n             *  and host part and just pass the path, e.g.\n             *\n             *  > let conn = new Strophe.Connection(\"/http-bind/\");\n             *\n             *  Options common to both Websocket and BOSH:\n             *  ------------------------------------------\n             *\n             *  cookies:\n             *\n             *  The *cookies* option allows you to pass in cookies to be added to the\n             *  document. These cookies will then be included in the BOSH XMLHttpRequest\n             *  or in the websocket connection.\n             *\n             *  The passed in value must be a map of cookie names and string values.\n             *\n             *  > { \"myCookie\": {\n             *  >     \"value\": \"1234\",\n             *  >     \"domain\": \".example.org\",\n             *  >     \"path\": \"/\",\n             *  >     \"expires\": expirationDate\n             *  >     }\n             *  > }\n             *\n             *  Note that cookies can't be set in this way for other domains (i.e. cross-domain).\n             *  Those cookies need to be set under those domains, for example they can be\n             *  set server-side by making a XHR call to that domain to ask it to set any\n             *  necessary cookies.\n             *\n             *  mechanisms:\n             *\n             *  The *mechanisms* option allows you to specify the SASL mechanisms that this\n             *  instance of Strophe.Connection (and therefore your XMPP client) will\n             *  support.\n             *\n             *  The value must be an array of objects with Strophe.SASLMechanism\n             *  prototypes.\n             *\n             *  If nothing is specified, then the following mechanisms (and their\n             *  priorities) are registered:\n             *\n             *      SCRAM-SHA1 - 70\n             *      DIGEST-MD5 - 60\n             *      PLAIN - 50\n             *      OAUTH-BEARER - 40\n             *      OAUTH-2 - 30\n             *      ANONYMOUS - 20\n             *      EXTERNAL - 10\n             *\n             *  explicitResourceBinding:\n             *\n             *  If `explicitResourceBinding` is set to a truthy value, then the XMPP client\n             *  needs to explicitly call `Strophe.Connection.prototype.bind` once the XMPP\n             *  server has advertised the \"urn:ietf:params:xml:ns:xmpp-bind\" feature.\n             *\n             *  Making this step explicit allows client authors to first finish other\n             *  stream related tasks, such as setting up an XEP-0198 Stream Management\n             *  session, before binding the JID resource for this session.\n             *\n             *  WebSocket options:\n             *  ------------------\n             *\n             *  If you want to connect to the current host with a WebSocket connection you\n             *  can tell Strophe to use WebSockets through a \"protocol\" attribute in the\n             *  optional options parameter. Valid values are \"ws\" for WebSocket and \"wss\"\n             *  for Secure WebSocket.\n             *  So to connect to \"wss://CURRENT_HOSTNAME/xmpp-websocket\" you would call\n             *\n             *  > let conn = new Strophe.Connection(\"/xmpp-websocket/\", {protocol: \"wss\"});\n             *\n             *  Note that relative URLs _NOT_ starting with a \"/\" will also include the path\n             *  of the current site.\n             *\n             *  Also because downgrading security is not permitted by browsers, when using\n             *  relative URLs both BOSH and WebSocket connections will use their secure\n             *  variants if the current connection to the site is also secure (https).\n             *\n             *  BOSH options:\n             *  -------------\n             *\n             *  By adding \"sync\" to the options, you can control if requests will\n             *  be made synchronously or not. The default behaviour is asynchronous.\n             *  If you want to make requests synchronous, make \"sync\" evaluate to true.\n             *  > let conn = new Strophe.Connection(\"/http-bind/\", {sync: true});\n             *\n             *  You can also toggle this on an already established connection.\n             *  > conn.options.sync = true;\n             *\n             *  The *customHeaders* option can be used to provide custom HTTP headers to be\n             *  included in the XMLHttpRequests made.\n             *\n             *  The *keepalive* option can be used to instruct Strophe to maintain the\n             *  current BOSH session across interruptions such as webpage reloads.\n             *\n             *  It will do this by caching the sessions tokens in sessionStorage, and when\n             *  \"restore\" is called it will check whether there are cached tokens with\n             *  which it can resume an existing session.\n             *\n             *  The *withCredentials* option should receive a Boolean value and is used to\n             *  indicate wether cookies should be included in ajax requests (by default\n             *  they're not).\n             *  Set this value to true if you are connecting to a BOSH service\n             *  and for some reason need to send cookies to it.\n             *  In order for this to work cross-domain, the server must also enable\n             *  credentials by setting the Access-Control-Allow-Credentials response header\n             *  to \"true\". For most usecases however this setting should be false (which\n             *  is the default).\n             *  Additionally, when using Access-Control-Allow-Credentials, the\n             *  Access-Control-Allow-Origin header can't be set to the wildcard \"*\", but\n             *  instead must be restricted to actual domains.\n             *\n             *  The *contentType* option can be set to change the default Content-Type\n             *  of \"text/xml; charset=utf-8\", which can be useful to reduce the amount of\n             *  CORS preflight requests that are sent to the server.\n             *\n             *  Parameters:\n             *    (String) service - The BOSH or WebSocket service URL.\n             *    (Object) options - A hash of configuration options\n             *\n             *  Returns:\n             *    A new Strophe.Connection object.\n             */\n\n            Strophe.Connection = function (service, options) {\n              var _this2 = this;\n\n              // The service URL\n              this.service = service; // Configuration options\n\n              this.options = options || {};\n              var proto = this.options.protocol || \"\"; // Select protocal based on service or options\n\n              if (service.indexOf(\"ws:\") === 0 || service.indexOf(\"wss:\") === 0 || proto.indexOf(\"ws\") === 0) {\n                this._proto = new Strophe.Websocket(this);\n              } else {\n                this._proto = new Strophe.Bosh(this);\n              }\n              /* The connected JID. */\n\n\n              this.jid = \"\";\n              /* the JIDs domain */\n\n              this.domain = null;\n              /* stream:features */\n\n              this.features = null; // SASL\n\n              this._sasl_data = {};\n              this.do_session = false;\n              this.do_bind = false; // handler lists\n\n              this.timedHandlers = [];\n              this.handlers = [];\n              this.removeTimeds = [];\n              this.removeHandlers = [];\n              this.addTimeds = [];\n              this.addHandlers = [];\n              this.protocolErrorHandlers = {\n                'HTTP': {},\n                'websocket': {}\n              };\n              this._idleTimeout = null;\n              this._disconnectTimeout = null;\n              this.authenticated = false;\n              this.connected = false;\n              this.disconnecting = false;\n              this.do_authentication = true;\n              this.paused = false;\n              this.restored = false;\n              this._data = [];\n              this._uniqueId = 0;\n              this._sasl_success_handler = null;\n              this._sasl_failure_handler = null;\n              this._sasl_challenge_handler = null; // Max retries before disconnecting\n\n              this.maxRetries = 5; // Call onIdle callback every 1/10th of a second\n\n              this._idleTimeout = setTimeout(function () {\n                return _this2._onIdle();\n              }, 100);\n              utils.addCookies(this.options.cookies);\n              this.registerSASLMechanisms(this.options.mechanisms); // initialize plugins\n\n              for (var k in Strophe._connectionPlugins) {\n                if (Object.prototype.hasOwnProperty.call(Strophe._connectionPlugins, k)) {\n                  var F = function F() {};\n\n                  F.prototype = Strophe._connectionPlugins[k];\n                  this[k] = new F();\n                  this[k].init(this);\n                }\n              }\n            };\n\n            Strophe.Connection.prototype = {\n              /** Function: reset\n               *  Reset the connection.\n               *\n               *  This function should be called after a connection is disconnected\n               *  before that connection is reused.\n               */\n              reset: function reset() {\n                this._proto._reset(); // SASL\n\n\n                this.do_session = false;\n                this.do_bind = false; // handler lists\n\n                this.timedHandlers = [];\n                this.handlers = [];\n                this.removeTimeds = [];\n                this.removeHandlers = [];\n                this.addTimeds = [];\n                this.addHandlers = [];\n                this.authenticated = false;\n                this.connected = false;\n                this.disconnecting = false;\n                this.restored = false;\n                this._data = [];\n                this._requests = [];\n                this._uniqueId = 0;\n              },\n\n              /** Function: pause\n               *  Pause the request manager.\n               *\n               *  This will prevent Strophe from sending any more requests to the\n               *  server.  This is very useful for temporarily pausing\n               *  BOSH-Connections while a lot of send() calls are happening quickly.\n               *  This causes Strophe to send the data in a single request, saving\n               *  many request trips.\n               */\n              pause: function pause() {\n                this.paused = true;\n              },\n\n              /** Function: resume\n               *  Resume the request manager.\n               *\n               *  This resumes after pause() has been called.\n               */\n              resume: function resume() {\n                this.paused = false;\n              },\n\n              /** Function: getUniqueId\n               *  Generate a unique ID for use in <iq/> elements.\n               *\n               *  All <iq/> stanzas are required to have unique id attributes.  This\n               *  function makes creating these easy.  Each connection instance has\n               *  a counter which starts from zero, and the value of this counter\n               *  plus a colon followed by the suffix becomes the unique id. If no\n               *  suffix is supplied, the counter is used as the unique id.\n               *\n               *  Suffixes are used to make debugging easier when reading the stream\n               *  data, and their use is recommended.  The counter resets to 0 for\n               *  every new connection for the same reason.  For connections to the\n               *  same server that authenticate the same way, all the ids should be\n               *  the same, which makes it easy to see changes.  This is useful for\n               *  automated testing as well.\n               *\n               *  Parameters:\n               *    (String) suffix - A optional suffix to append to the id.\n               *\n               *  Returns:\n               *    A unique string to be used for the id attribute.\n               */\n              getUniqueId: function getUniqueId(suffix) {\n                var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n                  var r = Math.random() * 16 | 0,\n                      v = c === 'x' ? r : r & 0x3 | 0x8;\n                  return v.toString(16);\n                });\n\n                if (typeof suffix === \"string\" || typeof suffix === \"number\") {\n                  return uuid + \":\" + suffix;\n                } else {\n                  return uuid + \"\";\n                }\n              },\n\n              /** Function: addProtocolErrorHandler\n               *  Register a handler function for when a protocol (websocker or HTTP)\n               *  error occurs.\n               *\n               *  NOTE: Currently only HTTP errors for BOSH requests are handled.\n               *  Patches that handle websocket errors would be very welcome.\n               *\n               *  Parameters:\n               *    (String) protocol - 'HTTP' or 'websocket'\n               *    (Integer) status_code - Error status code (e.g 500, 400 or 404)\n               *    (Function) callback - Function that will fire on Http error\n               *\n               *  Example:\n               *  function onError(err_code){\n               *    //do stuff\n               *  }\n               *\n               *  let conn = Strophe.connect('http://example.com/http-bind');\n               *  conn.addProtocolErrorHandler('HTTP', 500, onError);\n               *  // Triggers HTTP 500 error and onError handler will be called\n               *  conn.connect('user_jid@incorrect_jabber_host', 'secret', onConnect);\n               */\n              addProtocolErrorHandler: function addProtocolErrorHandler(protocol, status_code, callback) {\n                this.protocolErrorHandlers[protocol][status_code] = callback;\n              },\n\n              /** Function: connect\n               *  Starts the connection process.\n               *\n               *  As the connection process proceeds, the user supplied callback will\n               *  be triggered multiple times with status updates.  The callback\n               *  should take two arguments - the status code and the error condition.\n               *\n               *  The status code will be one of the values in the Strophe.Status\n               *  constants.  The error condition will be one of the conditions\n               *  defined in RFC 3920 or the condition 'strophe-parsererror'.\n               *\n               *  The Parameters _wait_, _hold_ and _route_ are optional and only relevant\n               *  for BOSH connections. Please see XEP 124 for a more detailed explanation\n               *  of the optional parameters.\n               *\n               *  Parameters:\n               *    (String) jid - The user's JID.  This may be a bare JID,\n               *      or a full JID.  If a node is not supplied, SASL OAUTHBEARER or\n               *      SASL ANONYMOUS authentication will be attempted (OAUTHBEARER will\n               *      process the provided password value as an access token).\n               *    (String) pass - The user's password.\n               *    (Function) callback - The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (String) route - The optional route value.\n               *    (String) authcid - The optional alternative authentication identity\n               *      (username) if intending to impersonate another user.\n               *      When using the SASL-EXTERNAL authentication mechanism, for example\n               *      with client certificates, then the authcid value is used to\n               *      determine whether an authorization JID (authzid) should be sent to\n               *      the server. The authzid should not be sent to the server if the\n               *      authzid and authcid are the same. So to prevent it from being sent\n               *      (for example when the JID is already contained in the client\n               *      certificate), set authcid to that same JID. See XEP-178 for more\n               *      details.\n               */\n              connect: function connect(jid, pass, callback, wait, hold, route, authcid) {\n                this.jid = jid;\n                /** Variable: authzid\n                 *  Authorization identity.\n                 */\n\n                this.authzid = Strophe.getBareJidFromJid(this.jid);\n                /** Variable: authcid\n                 *  Authentication identity (User name).\n                 */\n\n                this.authcid = authcid || Strophe.getNodeFromJid(this.jid);\n                /** Variable: pass\n                 *  Authentication identity (User password).\n                 */\n\n                this.pass = pass;\n                /** Variable: servtype\n                 *  Digest MD5 compatibility.\n                 */\n\n                this.servtype = \"xmpp\";\n                this.connect_callback = callback;\n                this.disconnecting = false;\n                this.connected = false;\n                this.authenticated = false;\n                this.restored = false; // parse jid for domain\n\n                this.domain = Strophe.getDomainFromJid(this.jid);\n\n                this._changeConnectStatus(Strophe.Status.CONNECTING, null);\n\n                this._proto._connect(wait, hold, route);\n              },\n\n              /** Function: attach\n               *  Attach to an already created and authenticated BOSH session.\n               *\n               *  This function is provided to allow Strophe to attach to BOSH\n               *  sessions which have been created externally, perhaps by a Web\n               *  application.  This is often used to support auto-login type features\n               *  without putting user credentials into the page.\n               *\n               *  Parameters:\n               *    (String) jid - The full JID that is bound by the session.\n               *    (String) sid - The SID of the BOSH session.\n               *    (String) rid - The current RID of the BOSH session.  This RID\n               *      will be used by the next request.\n               *    (Function) callback The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              attach: function attach(jid, sid, rid, callback, wait, hold, wind) {\n                if (this._proto instanceof Strophe.Bosh) {\n                  this._proto._attach(jid, sid, rid, callback, wait, hold, wind);\n                } else {\n                  var error = new Error('The \"attach\" method can only be used with a BOSH connection.');\n                  error.name = 'StropheSessionError';\n                  throw error;\n                }\n              },\n\n              /** Function: restore\n               *  Attempt to restore a cached BOSH session.\n               *\n               *  This function is only useful in conjunction with providing the\n               *  \"keepalive\":true option when instantiating a new Strophe.Connection.\n               *\n               *  When \"keepalive\" is set to true, Strophe will cache the BOSH tokens\n               *  RID (Request ID) and SID (Session ID) and then when this function is\n               *  called, it will attempt to restore the session from those cached\n               *  tokens.\n               *\n               *  This function must therefore be called instead of connect or attach.\n               *\n               *  For an example on how to use it, please see examples/restore.js\n               *\n               *  Parameters:\n               *    (String) jid - The user's JID.  This may be a bare JID or a full JID.\n               *    (Function) callback - The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              restore: function restore(jid, callback, wait, hold, wind) {\n                if (this._sessionCachingSupported()) {\n                  this._proto._restore(jid, callback, wait, hold, wind);\n                } else {\n                  var error = new Error('The \"restore\" method can only be used with a BOSH connection.');\n                  error.name = 'StropheSessionError';\n                  throw error;\n                }\n              },\n\n              /** PrivateFunction: _sessionCachingSupported\n               * Checks whether sessionStorage and JSON are supported and whether we're\n               * using BOSH.\n               */\n              _sessionCachingSupported: function _sessionCachingSupported() {\n                if (this._proto instanceof Strophe.Bosh) {\n                  if (!JSON) {\n                    return false;\n                  }\n\n                  try {\n                    sessionStorage.setItem('_strophe_', '_strophe_');\n                    sessionStorage.removeItem('_strophe_');\n                  } catch (e) {\n                    return false;\n                  }\n\n                  return true;\n                }\n\n                return false;\n              },\n\n              /** Function: xmlInput\n               *  User overrideable function that receives XML data coming into the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.xmlInput = function (elem) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Due to limitations of current Browsers' XML-Parsers the opening and closing\n               *  <stream> tag for WebSocket-Connoctions will be passed as selfclosing here.\n               *\n               *  BOSH-Connections will have all stanzas wrapped in a <body> tag. See\n               *  <Strophe.Bosh.strip> if you want to strip this tag.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML data received by the connection.\n               */\n              xmlInput: function xmlInput(elem) {\n                return;\n              },\n\n              /** Function: xmlOutput\n               *  User overrideable function that receives XML data sent to the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.xmlOutput = function (elem) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Due to limitations of current Browsers' XML-Parsers the opening and closing\n               *  <stream> tag for WebSocket-Connoctions will be passed as selfclosing here.\n               *\n               *  BOSH-Connections will have all stanzas wrapped in a <body> tag. See\n               *  <Strophe.Bosh.strip> if you want to strip this tag.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XMLdata sent by the connection.\n               */\n              xmlOutput: function xmlOutput(elem) {\n                return;\n              },\n\n              /** Function: rawInput\n               *  User overrideable function that receives raw data coming into the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.rawInput = function (data) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Parameters:\n               *    (String) data - The data received by the connection.\n               */\n              rawInput: function rawInput(data) {\n                return;\n              },\n\n              /** Function: rawOutput\n               *  User overrideable function that receives raw data sent to the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.rawOutput = function (data) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Parameters:\n               *    (String) data - The data sent by the connection.\n               */\n              rawOutput: function rawOutput(data) {\n                return;\n              },\n\n              /** Function: nextValidRid\n               *  User overrideable function that receives the new valid rid.\n               *\n               *  The default function does nothing. User code can override this with\n               *  > Strophe.Connection.nextValidRid = function (rid) {\n               *  >    (user code)\n               *  > };\n               *\n               *  Parameters:\n               *    (Number) rid - The next valid rid\n               */\n              nextValidRid: function nextValidRid(rid) {\n                return;\n              },\n\n              /** Function: send\n               *  Send a stanza.\n               *\n               *  This function is called to push data onto the send queue to\n               *  go out over the wire.  Whenever a request is sent to the BOSH\n               *  server, all pending data is sent and the queue is flushed.\n               *\n               *  Parameters:\n               *    (XMLElement |\n               *     [XMLElement] |\n               *     Strophe.Builder) elem - The stanza to send.\n               */\n              send: function send(elem) {\n                if (elem === null) {\n                  return;\n                }\n\n                if (typeof elem.sort === \"function\") {\n                  for (var i = 0; i < elem.length; i++) {\n                    this._queueData(elem[i]);\n                  }\n                } else if (typeof elem.tree === \"function\") {\n                  this._queueData(elem.tree());\n                } else {\n                  this._queueData(elem);\n                }\n\n                this._proto._send();\n              },\n\n              /** Function: flush\n               *  Immediately send any pending outgoing data.\n               *\n               *  Normally send() queues outgoing data until the next idle period\n               *  (100ms), which optimizes network use in the common cases when\n               *  several send()s are called in succession. flush() can be used to\n               *  immediately send all pending data.\n               */\n              flush: function flush() {\n                // cancel the pending idle period and run the idle function\n                // immediately\n                clearTimeout(this._idleTimeout);\n\n                this._onIdle();\n              },\n\n              /** Function: sendPresence\n               *  Helper function to send presence stanzas. The main benefit is for\n               *  sending presence stanzas for which you expect a responding presence\n               *  stanza with the same id (for example when leaving a chat room).\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza to send.\n               *    (Function) callback - The callback function for a successful request.\n               *    (Function) errback - The callback function for a failed or timed\n               *      out request.  On timeout, the stanza will be null.\n               *    (Integer) timeout - The time specified in milliseconds for a\n               *      timeout to occur.\n               *\n               *  Returns:\n               *    The id used to send the presence.\n               */\n              sendPresence: function sendPresence(elem, callback, errback, timeout) {\n                var _this3 = this;\n\n                var timeoutHandler = null;\n\n                if (typeof elem.tree === \"function\") {\n                  elem = elem.tree();\n                }\n\n                var id = elem.getAttribute('id');\n\n                if (!id) {\n                  // inject id if not found\n                  id = this.getUniqueId(\"sendPresence\");\n                  elem.setAttribute(\"id\", id);\n                }\n\n                if (typeof callback === \"function\" || typeof errback === \"function\") {\n                  var handler = this.addHandler(function (stanza) {\n                    // remove timeout handler if there is one\n                    if (timeoutHandler) {\n                      _this3.deleteTimedHandler(timeoutHandler);\n                    }\n\n                    if (stanza.getAttribute('type') === 'error') {\n                      if (errback) {\n                        errback(stanza);\n                      }\n                    } else if (callback) {\n                      callback(stanza);\n                    }\n                  }, null, 'presence', null, id); // if timeout specified, set up a timeout handler.\n\n                  if (timeout) {\n                    timeoutHandler = this.addTimedHandler(timeout, function () {\n                      // get rid of normal handler\n                      _this3.deleteHandler(handler); // call errback on timeout with null stanza\n\n\n                      if (errback) {\n                        errback(null);\n                      }\n\n                      return false;\n                    });\n                  }\n                }\n\n                this.send(elem);\n                return id;\n              },\n\n              /** Function: sendIQ\n               *  Helper function to send IQ stanzas.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza to send.\n               *    (Function) callback - The callback function for a successful request.\n               *    (Function) errback - The callback function for a failed or timed\n               *      out request.  On timeout, the stanza will be null.\n               *    (Integer) timeout - The time specified in milliseconds for a\n               *      timeout to occur.\n               *\n               *  Returns:\n               *    The id used to send the IQ.\n              */\n              sendIQ: function sendIQ(elem, callback, errback, timeout) {\n                var _this4 = this;\n\n                var timeoutHandler = null;\n\n                if (typeof elem.tree === \"function\") {\n                  elem = elem.tree();\n                }\n\n                var id = elem.getAttribute('id');\n\n                if (!id) {\n                  // inject id if not found\n                  id = this.getUniqueId(\"sendIQ\");\n                  elem.setAttribute(\"id\", id);\n                }\n\n                if (typeof callback === \"function\" || typeof errback === \"function\") {\n                  var handler = this.addHandler(function (stanza) {\n                    // remove timeout handler if there is one\n                    if (timeoutHandler) {\n                      _this4.deleteTimedHandler(timeoutHandler);\n                    }\n\n                    var iqtype = stanza.getAttribute('type');\n\n                    if (iqtype === 'result') {\n                      if (callback) {\n                        callback(stanza);\n                      }\n                    } else if (iqtype === 'error') {\n                      if (errback) {\n                        errback(stanza);\n                      }\n                    } else {\n                      var error = new Error(\"Got bad IQ type of \".concat(iqtype));\n                      error.name = \"StropheError\";\n                      throw error;\n                    }\n                  }, null, 'iq', ['error', 'result'], id); // if timeout specified, set up a timeout handler.\n\n                  if (timeout) {\n                    timeoutHandler = this.addTimedHandler(timeout, function () {\n                      // get rid of normal handler\n                      _this4.deleteHandler(handler); // call errback on timeout with null stanza\n\n\n                      if (errback) {\n                        errback(null);\n                      }\n\n                      return false;\n                    });\n                  }\n                }\n\n                this.send(elem);\n                return id;\n              },\n\n              /** PrivateFunction: _queueData\n               *  Queue outgoing data for later sending.  Also ensures that the data\n               *  is a DOMElement.\n               */\n              _queueData: function _queueData(element) {\n                if (element === null || !element.tagName || !element.childNodes) {\n                  var error = new Error(\"Cannot queue non-DOMElement.\");\n                  error.name = \"StropheError\";\n                  throw error;\n                }\n\n                this._data.push(element);\n              },\n\n              /** PrivateFunction: _sendRestart\n               *  Send an xmpp:restart stanza.\n               */\n              _sendRestart: function _sendRestart() {\n                var _this5 = this;\n\n                this._data.push(\"restart\");\n\n                this._proto._sendRestart();\n\n                this._idleTimeout = setTimeout(function () {\n                  return _this5._onIdle();\n                }, 100);\n              },\n\n              /** Function: addTimedHandler\n               *  Add a timed handler to the connection.\n               *\n               *  This function adds a timed handler.  The provided handler will\n               *  be called every period milliseconds until it returns false,\n               *  the connection is terminated, or the handler is removed.  Handlers\n               *  that wish to continue being invoked should return true.\n               *\n               *  Because of method binding it is necessary to save the result of\n               *  this function if you wish to remove a handler with\n               *  deleteTimedHandler().\n               *\n               *  Note that user handlers are not active until authentication is\n               *  successful.\n               *\n               *  Parameters:\n               *    (Integer) period - The period of the handler.\n               *    (Function) handler - The callback function.\n               *\n               *  Returns:\n               *    A reference to the handler that can be used to remove it.\n               */\n              addTimedHandler: function addTimedHandler(period, handler) {\n                var thand = new Strophe.TimedHandler(period, handler);\n                this.addTimeds.push(thand);\n                return thand;\n              },\n\n              /** Function: deleteTimedHandler\n               *  Delete a timed handler for a connection.\n               *\n               *  This function removes a timed handler from the connection.  The\n               *  handRef parameter is *not* the function passed to addTimedHandler(),\n               *  but is the reference returned from addTimedHandler().\n               *\n               *  Parameters:\n               *    (Strophe.TimedHandler) handRef - The handler reference.\n               */\n              deleteTimedHandler: function deleteTimedHandler(handRef) {\n                // this must be done in the Idle loop so that we don't change\n                // the handlers during iteration\n                this.removeTimeds.push(handRef);\n              },\n\n              /** Function: addHandler\n               *  Add a stanza handler for the connection.\n               *\n               *  This function adds a stanza handler to the connection.  The\n               *  handler callback will be called for any stanza that matches\n               *  the parameters.  Note that if multiple parameters are supplied,\n               *  they must all match for the handler to be invoked.\n               *\n               *  The handler will receive the stanza that triggered it as its argument.\n               *  *The handler should return true if it is to be invoked again;\n               *  returning false will remove the handler after it returns.*\n               *\n               *  As a convenience, the ns parameters applies to the top level element\n               *  and also any of its immediate children.  This is primarily to make\n               *  matching /iq/query elements easy.\n               *\n               *  Options\n               *  ~~~~~~~\n               *  With the options argument, you can specify boolean flags that affect how\n               *  matches are being done.\n               *\n               *  Currently two flags exist:\n               *\n               *  - matchBareFromJid:\n               *      When set to true, the from parameter and the\n               *      from attribute on the stanza will be matched as bare JIDs instead\n               *      of full JIDs. To use this, pass {matchBareFromJid: true} as the\n               *      value of options. The default value for matchBareFromJid is false.\n               *\n               *  - ignoreNamespaceFragment:\n               *      When set to true, a fragment specified on the stanza's namespace\n               *      URL will be ignored when it's matched with the one configured for\n               *      the handler.\n               *\n               *      This means that if you register like this:\n               *      >   connection.addHandler(\n               *      >       handler,\n               *      >       'http://jabber.org/protocol/muc',\n               *      >       null, null, null, null,\n               *      >       {'ignoreNamespaceFragment': true}\n               *      >   );\n               *\n               *      Then a stanza with XML namespace of\n               *      'http://jabber.org/protocol/muc#user' will also be matched. If\n               *      'ignoreNamespaceFragment' is false, then only stanzas with\n               *      'http://jabber.org/protocol/muc' will be matched.\n               *\n               *  Deleting the handler\n               *  ~~~~~~~~~~~~~~~~~~~~\n               *  The return value should be saved if you wish to remove the handler\n               *  with deleteHandler().\n               *\n               *  Parameters:\n               *    (Function) handler - The user callback.\n               *    (String) ns - The namespace to match.\n               *    (String) name - The stanza name to match.\n               *    (String|Array) type - The stanza type (or types if an array) to match.\n               *    (String) id - The stanza id attribute to match.\n               *    (String) from - The stanza from attribute to match.\n               *    (String) options - The handler options\n               *\n               *  Returns:\n               *    A reference to the handler that can be used to remove it.\n               */\n              addHandler: function addHandler(handler, ns, name, type, id, from, options) {\n                var hand = new Strophe.Handler(handler, ns, name, type, id, from, options);\n                this.addHandlers.push(hand);\n                return hand;\n              },\n\n              /** Function: deleteHandler\n               *  Delete a stanza handler for a connection.\n               *\n               *  This function removes a stanza handler from the connection.  The\n               *  handRef parameter is *not* the function passed to addHandler(),\n               *  but is the reference returned from addHandler().\n               *\n               *  Parameters:\n               *    (Strophe.Handler) handRef - The handler reference.\n               */\n              deleteHandler: function deleteHandler(handRef) {\n                // this must be done in the Idle loop so that we don't change\n                // the handlers during iteration\n                this.removeHandlers.push(handRef); // If a handler is being deleted while it is being added,\n                // prevent it from getting added\n\n                var i = this.addHandlers.indexOf(handRef);\n\n                if (i >= 0) {\n                  this.addHandlers.splice(i, 1);\n                }\n              },\n\n              /** Function: registerSASLMechanisms\n               *\n               * Register the SASL mechanisms which will be supported by this instance of\n               * Strophe.Connection (i.e. which this XMPP client will support).\n               *\n               *  Parameters:\n               *    (Array) mechanisms - Array of objects with Strophe.SASLMechanism prototypes\n               *\n               */\n              registerSASLMechanisms: function registerSASLMechanisms(mechanisms) {\n                this.mechanisms = {};\n                mechanisms = mechanisms || [Strophe.SASLAnonymous, Strophe.SASLExternal, Strophe.SASLMD5, Strophe.SASLOAuthBearer, Strophe.SASLXOAuth2, Strophe.SASLPlain, Strophe.SASLSHA1];\n                mechanisms.forEach(this.registerSASLMechanism.bind(this));\n              },\n\n              /** Function: registerSASLMechanism\n               *\n               * Register a single SASL mechanism, to be supported by this client.\n               *\n               *  Parameters:\n               *    (Object) mechanism - Object with a Strophe.SASLMechanism prototype\n               *\n               */\n              registerSASLMechanism: function registerSASLMechanism(mechanism) {\n                this.mechanisms[mechanism.prototype.name] = mechanism;\n              },\n\n              /** Function: disconnect\n               *  Start the graceful disconnection process.\n               *\n               *  This function starts the disconnection process.  This process starts\n               *  by sending unavailable presence and sending BOSH body of type\n               *  terminate.  A timeout handler makes sure that disconnection happens\n               *  even if the BOSH server does not respond.\n               *  If the Connection object isn't connected, at least tries to abort all pending requests\n               *  so the connection object won't generate successful requests (which were already opened).\n               *\n               *  The user supplied connection callback will be notified of the\n               *  progress as this process happens.\n               *\n               *  Parameters:\n               *    (String) reason - The reason the disconnect is occuring.\n               */\n              disconnect: function disconnect(reason) {\n                this._changeConnectStatus(Strophe.Status.DISCONNECTING, reason);\n\n                Strophe.warn(\"Disconnect was called because: \" + reason);\n\n                if (this.connected) {\n                  var pres = false;\n                  this.disconnecting = true;\n\n                  if (this.authenticated) {\n                    pres = $pres({\n                      'xmlns': Strophe.NS.CLIENT,\n                      'type': 'unavailable'\n                    });\n                  } // setup timeout handler\n\n\n                  this._disconnectTimeout = this._addSysTimedHandler(3000, this._onDisconnectTimeout.bind(this));\n\n                  this._proto._disconnect(pres);\n                } else {\n                  Strophe.warn(\"Disconnect was called before Strophe connected to the server\");\n\n                  this._proto._abortAllRequests();\n\n                  this._doDisconnect();\n                }\n              },\n\n              /** PrivateFunction: _changeConnectStatus\n               *  _Private_ helper function that makes sure plugins and the user's\n               *  callback are notified of connection status changes.\n               *\n               *  Parameters:\n               *    (Integer) status - the new connection status, one of the values\n               *      in Strophe.Status\n               *    (String) condition - the error condition or null\n               *    (XMLElement) elem - The triggering stanza.\n               */\n              _changeConnectStatus: function _changeConnectStatus(status, condition, elem) {\n                // notify all plugins listening for status changes\n                for (var k in Strophe._connectionPlugins) {\n                  if (Object.prototype.hasOwnProperty.call(Strophe._connectionPlugins, k)) {\n                    var plugin = this[k];\n\n                    if (plugin.statusChanged) {\n                      try {\n                        plugin.statusChanged(status, condition);\n                      } catch (err) {\n                        Strophe.error(\"\".concat(k, \" plugin caused an exception changing status: \").concat(err));\n                      }\n                    }\n                  }\n                } // notify the user's callback\n\n\n                if (this.connect_callback) {\n                  try {\n                    this.connect_callback(status, condition, elem);\n                  } catch (e) {\n                    Strophe._handleError(e);\n\n                    Strophe.error(\"User connection callback caused an exception: \".concat(e));\n                  }\n                }\n              },\n\n              /** PrivateFunction: _doDisconnect\n               *  _Private_ function to disconnect.\n               *\n               *  This is the last piece of the disconnection logic.  This resets the\n               *  connection and alerts the user's connection callback.\n               */\n              _doDisconnect: function _doDisconnect(condition) {\n                if (typeof this._idleTimeout === \"number\") {\n                  clearTimeout(this._idleTimeout);\n                } // Cancel Disconnect Timeout\n\n\n                if (this._disconnectTimeout !== null) {\n                  this.deleteTimedHandler(this._disconnectTimeout);\n                  this._disconnectTimeout = null;\n                }\n\n                Strophe.debug(\"_doDisconnect was called\");\n\n                this._proto._doDisconnect();\n\n                this.authenticated = false;\n                this.disconnecting = false;\n                this.restored = false; // delete handlers\n\n                this.handlers = [];\n                this.timedHandlers = [];\n                this.removeTimeds = [];\n                this.removeHandlers = [];\n                this.addTimeds = [];\n                this.addHandlers = []; // tell the parent we disconnected\n\n                this._changeConnectStatus(Strophe.Status.DISCONNECTED, condition);\n\n                this.connected = false;\n              },\n\n              /** PrivateFunction: _dataRecv\n               *  _Private_ handler to processes incoming data from the the connection.\n               *\n               *  Except for _connect_cb handling the initial connection request,\n               *  this function handles the incoming data for all requests.  This\n               *  function also fires stanza handlers that match each incoming\n               *  stanza.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The request that has data ready.\n               *    (string) req - The stanza a raw string (optiona).\n               */\n              _dataRecv: function _dataRecv(req, raw) {\n                var _this6 = this;\n\n                Strophe.debug(\"_dataRecv called\");\n\n                var elem = this._proto._reqToData(req);\n\n                if (elem === null) {\n                  return;\n                }\n\n                if (this.xmlInput !== Strophe.Connection.prototype.xmlInput) {\n                  if (elem.nodeName === this._proto.strip && elem.childNodes.length) {\n                    this.xmlInput(elem.childNodes[0]);\n                  } else {\n                    this.xmlInput(elem);\n                  }\n                }\n\n                if (this.rawInput !== Strophe.Connection.prototype.rawInput) {\n                  if (raw) {\n                    this.rawInput(raw);\n                  } else {\n                    this.rawInput(Strophe.serialize(elem));\n                  }\n                } // remove handlers scheduled for deletion\n\n\n                while (this.removeHandlers.length > 0) {\n                  var hand = this.removeHandlers.pop();\n                  var i = this.handlers.indexOf(hand);\n\n                  if (i >= 0) {\n                    this.handlers.splice(i, 1);\n                  }\n                } // add handlers scheduled for addition\n\n\n                while (this.addHandlers.length > 0) {\n                  this.handlers.push(this.addHandlers.pop());\n                } // handle graceful disconnect\n\n\n                if (this.disconnecting && this._proto._emptyQueue()) {\n                  this._doDisconnect();\n\n                  return;\n                }\n\n                var type = elem.getAttribute(\"type\");\n\n                if (type !== null && type === \"terminate\") {\n                  // Don't process stanzas that come in after disconnect\n                  if (this.disconnecting) {\n                    return;\n                  } // an error occurred\n\n\n                  var cond = elem.getAttribute(\"condition\");\n                  var conflict = elem.getElementsByTagName(\"conflict\");\n\n                  if (cond !== null) {\n                    if (cond === \"remote-stream-error\" && conflict.length > 0) {\n                      cond = \"conflict\";\n                    }\n\n                    this._changeConnectStatus(Strophe.Status.CONNFAIL, cond);\n                  } else {\n                    this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.UNKOWN_REASON);\n                  }\n\n                  this._doDisconnect(cond);\n\n                  return;\n                } // send each incoming stanza through the handler chain\n\n\n                Strophe.forEachChild(elem, null, function (child) {\n                  // process handlers\n                  var newList = _this6.handlers;\n                  _this6.handlers = [];\n\n                  for (var _i5 = 0; _i5 < newList.length; _i5++) {\n                    var _hand = newList[_i5]; // encapsulate 'handler.run' not to lose the whole handler list if\n                    // one of the handlers throws an exception\n\n                    try {\n                      if (_hand.isMatch(child) && (_this6.authenticated || !_hand.user)) {\n                        if (_hand.run(child)) {\n                          _this6.handlers.push(_hand);\n                        }\n                      } else {\n                        _this6.handlers.push(_hand);\n                      }\n                    } catch (e) {\n                      // if the handler throws an exception, we consider it as false\n                      Strophe.warn('Removing Strophe handlers due to uncaught exception: ' + e.message);\n                    }\n                  }\n                });\n              },\n\n              /** Attribute: mechanisms\n               *  SASL Mechanisms available for Connection.\n               */\n              mechanisms: {},\n\n              /** PrivateFunction: _connect_cb\n               *  _Private_ handler for initial connection request.\n               *\n               *  This handler is used to process the initial connection request\n               *  response from the BOSH server. It is used to set up authentication\n               *  handlers and start the authentication process.\n               *\n               *  SASL authentication will be attempted if available, otherwise\n               *  the code will fall back to legacy authentication.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The current request.\n               *    (Function) _callback - low level (xmpp) connect callback function.\n               *      Useful for plugins with their own xmpp connect callback (when they\n               *      want to do something special).\n               */\n              _connect_cb: function _connect_cb(req, _callback, raw) {\n                Strophe.debug(\"_connect_cb was called\");\n                this.connected = true;\n                var bodyWrap;\n\n                try {\n                  bodyWrap = this._proto._reqToData(req);\n                } catch (e) {\n                  if (e.name !== Strophe.ErrorCondition.BAD_FORMAT) {\n                    throw e;\n                  }\n\n                  this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.BAD_FORMAT);\n\n                  this._doDisconnect(Strophe.ErrorCondition.BAD_FORMAT);\n                }\n\n                if (!bodyWrap) {\n                  return;\n                }\n\n                if (this.xmlInput !== Strophe.Connection.prototype.xmlInput) {\n                  if (bodyWrap.nodeName === this._proto.strip && bodyWrap.childNodes.length) {\n                    this.xmlInput(bodyWrap.childNodes[0]);\n                  } else {\n                    this.xmlInput(bodyWrap);\n                  }\n                }\n\n                if (this.rawInput !== Strophe.Connection.prototype.rawInput) {\n                  if (raw) {\n                    this.rawInput(raw);\n                  } else {\n                    this.rawInput(Strophe.serialize(bodyWrap));\n                  }\n                }\n\n                var conncheck = this._proto._connect_cb(bodyWrap);\n\n                if (conncheck === Strophe.Status.CONNFAIL) {\n                  return;\n                } // Check for the stream:features tag\n\n\n                var hasFeatures;\n\n                if (bodyWrap.getElementsByTagNameNS) {\n                  hasFeatures = bodyWrap.getElementsByTagNameNS(Strophe.NS.STREAM, \"features\").length > 0;\n                } else {\n                  hasFeatures = bodyWrap.getElementsByTagName(\"stream:features\").length > 0 || bodyWrap.getElementsByTagName(\"features\").length > 0;\n                }\n\n                if (!hasFeatures) {\n                  this._proto._no_auth_received(_callback);\n\n                  return;\n                }\n\n                var matched = [];\n                var mechanisms = bodyWrap.getElementsByTagName(\"mechanism\");\n\n                if (mechanisms.length > 0) {\n                  for (var i = 0; i < mechanisms.length; i++) {\n                    var mech = Strophe.getText(mechanisms[i]);\n                    if (this.mechanisms[mech]) matched.push(this.mechanisms[mech]);\n                  }\n                }\n\n                if (matched.length === 0) {\n                  if (bodyWrap.getElementsByTagName(\"auth\").length === 0) {\n                    // There are no matching SASL mechanisms and also no legacy\n                    // auth available.\n                    this._proto._no_auth_received(_callback);\n\n                    return;\n                  }\n                }\n\n                if (this.do_authentication !== false) {\n                  this.authenticate(matched);\n                }\n              },\n\n              /** Function: sortMechanismsByPriority\n               *\n               *  Sorts an array of objects with prototype SASLMechanism according to\n               *  their priorities.\n               *\n               *  Parameters:\n               *    (Array) mechanisms - Array of SASL mechanisms.\n               *\n               */\n              sortMechanismsByPriority: function sortMechanismsByPriority(mechanisms) {\n                // Sorting mechanisms according to priority.\n                for (var i = 0; i < mechanisms.length - 1; ++i) {\n                  var higher = i;\n\n                  for (var j = i + 1; j < mechanisms.length; ++j) {\n                    if (mechanisms[j].prototype.priority > mechanisms[higher].prototype.priority) {\n                      higher = j;\n                    }\n                  }\n\n                  if (higher !== i) {\n                    var swap = mechanisms[i];\n                    mechanisms[i] = mechanisms[higher];\n                    mechanisms[higher] = swap;\n                  }\n                }\n\n                return mechanisms;\n              },\n\n              /** Function: authenticate\n               * Set up authentication\n               *\n               *  Continues the initial connection request by setting up authentication\n               *  handlers and starting the authentication process.\n               *\n               *  SASL authentication will be attempted if available, otherwise\n               *  the code will fall back to legacy authentication.\n               *\n               *  Parameters:\n               *    (Array) matched - Array of SASL mechanisms supported.\n               *\n               */\n              authenticate: function authenticate(matched) {\n                if (!this._attemptSASLAuth(matched)) {\n                  this._attemptLegacyAuth();\n                }\n              },\n\n              /** PrivateFunction: _attemptSASLAuth\n               *\n               *  Iterate through an array of SASL mechanisms and attempt authentication\n               *  with the highest priority (enabled) mechanism.\n               *\n               *  Parameters:\n               *    (Array) mechanisms - Array of SASL mechanisms.\n               *\n               *  Returns:\n               *    (Boolean) mechanism_found - true or false, depending on whether a\n               *          valid SASL mechanism was found with which authentication could be\n               *          started.\n               */\n              _attemptSASLAuth: function _attemptSASLAuth(mechanisms) {\n                mechanisms = this.sortMechanismsByPriority(mechanisms || []);\n                var mechanism_found = false;\n\n                for (var i = 0; i < mechanisms.length; ++i) {\n                  if (!mechanisms[i].prototype.test(this)) {\n                    continue;\n                  }\n\n                  this._sasl_success_handler = this._addSysHandler(this._sasl_success_cb.bind(this), null, \"success\", null, null);\n                  this._sasl_failure_handler = this._addSysHandler(this._sasl_failure_cb.bind(this), null, \"failure\", null, null);\n                  this._sasl_challenge_handler = this._addSysHandler(this._sasl_challenge_cb.bind(this), null, \"challenge\", null, null);\n                  this._sasl_mechanism = new mechanisms[i]();\n\n                  this._sasl_mechanism.onStart(this);\n\n                  var request_auth_exchange = $build(\"auth\", {\n                    'xmlns': Strophe.NS.SASL,\n                    'mechanism': this._sasl_mechanism.name\n                  });\n\n                  if (this._sasl_mechanism.isClientFirst) {\n                    var response = this._sasl_mechanism.onChallenge(this, null);\n\n                    request_auth_exchange.t(btoa(response));\n                  }\n\n                  this.send(request_auth_exchange.tree());\n                  mechanism_found = true;\n                  break;\n                }\n\n                return mechanism_found;\n              },\n\n              /** PrivateFunction: _sasl_challenge_cb\n               *  _Private_ handler for the SASL challenge\n               *\n               */\n              _sasl_challenge_cb: function _sasl_challenge_cb(elem) {\n                var challenge = atob(Strophe.getText(elem));\n\n                var response = this._sasl_mechanism.onChallenge(this, challenge);\n\n                var stanza = $build('response', {\n                  'xmlns': Strophe.NS.SASL\n                });\n\n                if (response !== \"\") {\n                  stanza.t(btoa(response));\n                }\n\n                this.send(stanza.tree());\n                return true;\n              },\n\n              /** PrivateFunction: _attemptLegacyAuth\n               *\n               *  Attempt legacy (i.e. non-SASL) authentication.\n               */\n              _attemptLegacyAuth: function _attemptLegacyAuth() {\n                if (Strophe.getNodeFromJid(this.jid) === null) {\n                  // we don't have a node, which is required for non-anonymous\n                  // client connections\n                  this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.MISSING_JID_NODE);\n\n                  this.disconnect(Strophe.ErrorCondition.MISSING_JID_NODE);\n                } else {\n                  // Fall back to legacy authentication\n                  this._changeConnectStatus(Strophe.Status.AUTHENTICATING, null);\n\n                  this._addSysHandler(this._onLegacyAuthIQResult.bind(this), null, null, null, \"_auth_1\");\n\n                  this.send($iq({\n                    'type': \"get\",\n                    'to': this.domain,\n                    'id': \"_auth_1\"\n                  }).c(\"query\", {\n                    xmlns: Strophe.NS.AUTH\n                  }).c(\"username\", {}).t(Strophe.getNodeFromJid(this.jid)).tree());\n                }\n              },\n\n              /** PrivateFunction: _onLegacyAuthIQResult\n               *  _Private_ handler for legacy authentication.\n               *\n               *  This handler is called in response to the initial <iq type='get'/>\n               *  for legacy authentication.  It builds an authentication <iq/> and\n               *  sends it, creating a handler (calling back to _auth2_cb()) to\n               *  handle the result\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza that triggered the callback.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onLegacyAuthIQResult: function _onLegacyAuthIQResult(elem) {\n                // build plaintext auth iq\n                var iq = $iq({\n                  type: \"set\",\n                  id: \"_auth_2\"\n                }).c('query', {\n                  xmlns: Strophe.NS.AUTH\n                }).c('username', {}).t(Strophe.getNodeFromJid(this.jid)).up().c('password').t(this.pass);\n\n                if (!Strophe.getResourceFromJid(this.jid)) {\n                  // since the user has not supplied a resource, we pick\n                  // a default one here.  unlike other auth methods, the server\n                  // cannot do this for us.\n                  this.jid = Strophe.getBareJidFromJid(this.jid) + '/strophe';\n                }\n\n                iq.up().c('resource', {}).t(Strophe.getResourceFromJid(this.jid));\n\n                this._addSysHandler(this._auth2_cb.bind(this), null, null, null, \"_auth_2\");\n\n                this.send(iq.tree());\n                return false;\n              },\n\n              /** PrivateFunction: _sasl_success_cb\n               *  _Private_ handler for succesful SASL authentication.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _sasl_success_cb: function _sasl_success_cb(elem) {\n                var _this7 = this;\n\n                if (this._sasl_data[\"server-signature\"]) {\n                  var serverSignature;\n                  var success = atob(Strophe.getText(elem));\n                  var attribMatch = /([a-z]+)=([^,]+)(,|$)/;\n                  var matches = success.match(attribMatch);\n\n                  if (matches[1] === \"v\") {\n                    serverSignature = matches[2];\n                  }\n\n                  if (serverSignature !== this._sasl_data[\"server-signature\"]) {\n                    // remove old handlers\n                    this.deleteHandler(this._sasl_failure_handler);\n                    this._sasl_failure_handler = null;\n\n                    if (this._sasl_challenge_handler) {\n                      this.deleteHandler(this._sasl_challenge_handler);\n                      this._sasl_challenge_handler = null;\n                    }\n\n                    this._sasl_data = {};\n                    return this._sasl_failure_cb(null);\n                  }\n                }\n\n                Strophe.info(\"SASL authentication succeeded.\");\n\n                if (this._sasl_mechanism) {\n                  this._sasl_mechanism.onSuccess();\n                } // remove old handlers\n\n\n                this.deleteHandler(this._sasl_failure_handler);\n                this._sasl_failure_handler = null;\n\n                if (this._sasl_challenge_handler) {\n                  this.deleteHandler(this._sasl_challenge_handler);\n                  this._sasl_challenge_handler = null;\n                }\n\n                var streamfeature_handlers = [];\n\n                var wrapper = function wrapper(handlers, elem) {\n                  while (handlers.length) {\n                    _this7.deleteHandler(handlers.pop());\n                  }\n\n                  _this7._onStreamFeaturesAfterSASL(elem);\n\n                  return false;\n                };\n\n                streamfeature_handlers.push(this._addSysHandler(function (elem) {\n                  return wrapper(streamfeature_handlers, elem);\n                }, null, \"stream:features\", null, null));\n                streamfeature_handlers.push(this._addSysHandler(function (elem) {\n                  return wrapper(streamfeature_handlers, elem);\n                }, Strophe.NS.STREAM, \"features\", null, null)); // we must send an xmpp:restart now\n\n                this._sendRestart();\n\n                return false;\n              },\n\n              /** PrivateFunction: _onStreamFeaturesAfterSASL\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onStreamFeaturesAfterSASL: function _onStreamFeaturesAfterSASL(elem) {\n                // save stream:features for future usage\n                this.features = elem;\n\n                for (var i = 0; i < elem.childNodes.length; i++) {\n                  var child = elem.childNodes[i];\n\n                  if (child.nodeName === 'bind') {\n                    this.do_bind = true;\n                  }\n\n                  if (child.nodeName === 'session') {\n                    this.do_session = true;\n                  }\n                }\n\n                if (!this.do_bind) {\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null);\n\n                  return false;\n                } else if (!this.options.explicitResourceBinding) {\n                  this.bind();\n                } else {\n                  this._changeConnectStatus(Strophe.Status.BINDREQUIRED, null);\n                }\n\n                return false;\n              },\n\n              /** Function: bind\n               *\n               *  Sends an IQ to the XMPP server to bind a JID resource for this session.\n               *\n               *  https://tools.ietf.org/html/rfc6120#section-7.5\n               *\n               *  If `explicitResourceBinding` was set to a truthy value in the options\n               *  passed to the Strophe.Connection constructor, then this function needs\n               *  to be called explicitly by the client author.\n               *\n               *  Otherwise it'll be called automatically as soon as the XMPP server\n               *  advertises the \"urn:ietf:params:xml:ns:xmpp-bind\" stream feature.\n               */\n              bind: function bind() {\n                if (!this.do_bind) {\n                  Strophe.log(Strophe.LogLevel.INFO, \"Strophe.Connection.prototype.bind called but \\\"do_bind\\\" is false\");\n                  return;\n                }\n\n                this._addSysHandler(this._onResourceBindResultIQ.bind(this), null, null, null, \"_bind_auth_2\");\n\n                var resource = Strophe.getResourceFromJid(this.jid);\n\n                if (resource) {\n                  this.send($iq({\n                    type: \"set\",\n                    id: \"_bind_auth_2\"\n                  }).c('bind', {\n                    xmlns: Strophe.NS.BIND\n                  }).c('resource', {}).t(resource).tree());\n                } else {\n                  this.send($iq({\n                    type: \"set\",\n                    id: \"_bind_auth_2\"\n                  }).c('bind', {\n                    xmlns: Strophe.NS.BIND\n                  }).tree());\n                }\n              },\n\n              /** PrivateFunction: _onResourceBindIQ\n               *  _Private_ handler for binding result and session start.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onResourceBindResultIQ: function _onResourceBindResultIQ(elem) {\n                if (elem.getAttribute(\"type\") === \"error\") {\n                  Strophe.warn(\"Resource binding failed.\");\n                  var conflict = elem.getElementsByTagName(\"conflict\");\n                  var condition;\n\n                  if (conflict.length > 0) {\n                    condition = Strophe.ErrorCondition.CONFLICT;\n                  }\n\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, condition, elem);\n\n                  return false;\n                } // TODO - need to grab errors\n\n\n                var bind = elem.getElementsByTagName(\"bind\");\n\n                if (bind.length > 0) {\n                  var jidNode = bind[0].getElementsByTagName(\"jid\");\n\n                  if (jidNode.length > 0) {\n                    this.jid = Strophe.getText(jidNode[0]);\n\n                    if (this.do_session) {\n                      this._establishSession();\n                    } else {\n                      this.authenticated = true;\n\n                      this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n                    }\n                  }\n                } else {\n                  Strophe.warn(\"Resource binding failed.\");\n\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                  return false;\n                }\n              },\n\n              /** PrivateFunction: _establishSession\n               *  Send IQ request to establish a session with the XMPP server.\n               *\n               *  See https://xmpp.org/rfcs/rfc3921.html#session\n               *\n               *  Note: The protocol for session establishment has been determined as\n               *  unnecessary and removed in RFC-6121.\n               */\n              _establishSession: function _establishSession() {\n                if (!this.do_session) {\n                  throw new Error(\"Strophe.Connection.prototype._establishSession \" + \"called but apparently \".concat(Strophe.NS.SESSION, \" wasn't advertised by the server\"));\n                }\n\n                this._addSysHandler(this._onSessionResultIQ.bind(this), null, null, null, \"_session_auth_2\");\n\n                this.send($iq({\n                  type: \"set\",\n                  id: \"_session_auth_2\"\n                }).c('session', {\n                  xmlns: Strophe.NS.SESSION\n                }).tree());\n              },\n\n              /** PrivateFunction: _onSessionResultIQ\n               *  _Private_ handler for the server's IQ response to a client's session\n               *  request.\n               *\n               *  This sets Connection.authenticated to true on success, which\n               *  starts the processing of user handlers.\n               *\n               *  See https://xmpp.org/rfcs/rfc3921.html#session\n               *\n               *  Note: The protocol for session establishment has been determined as\n               *  unnecessary and removed in RFC-6121.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onSessionResultIQ: function _onSessionResultIQ(elem) {\n                if (elem.getAttribute(\"type\") === \"result\") {\n                  this.authenticated = true;\n\n                  this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n                } else if (elem.getAttribute(\"type\") === \"error\") {\n                  Strophe.warn(\"Session creation failed.\");\n\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                  return false;\n                }\n\n                return false;\n              },\n\n              /** PrivateFunction: _sasl_failure_cb\n               *  _Private_ handler for SASL authentication failure.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _sasl_failure_cb: function _sasl_failure_cb(elem) {\n                // delete unneeded handlers\n                if (this._sasl_success_handler) {\n                  this.deleteHandler(this._sasl_success_handler);\n                  this._sasl_success_handler = null;\n                }\n\n                if (this._sasl_challenge_handler) {\n                  this.deleteHandler(this._sasl_challenge_handler);\n                  this._sasl_challenge_handler = null;\n                }\n\n                if (this._sasl_mechanism) this._sasl_mechanism.onFailure();\n\n                this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                return false;\n              },\n\n              /** PrivateFunction: _auth2_cb\n               *  _Private_ handler to finish legacy authentication.\n               *\n               *  This handler is called when the result from the jabber:iq:auth\n               *  <iq/> stanza is returned.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza that triggered the callback.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _auth2_cb: function _auth2_cb(elem) {\n                if (elem.getAttribute(\"type\") === \"result\") {\n                  this.authenticated = true;\n\n                  this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n                } else if (elem.getAttribute(\"type\") === \"error\") {\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                  this.disconnect('authentication failed');\n                }\n\n                return false;\n              },\n\n              /** PrivateFunction: _addSysTimedHandler\n               *  _Private_ function to add a system level timed handler.\n               *\n               *  This function is used to add a Strophe.TimedHandler for the\n               *  library code.  System timed handlers are allowed to run before\n               *  authentication is complete.\n               *\n               *  Parameters:\n               *    (Integer) period - The period of the handler.\n               *    (Function) handler - The callback function.\n               */\n              _addSysTimedHandler: function _addSysTimedHandler(period, handler) {\n                var thand = new Strophe.TimedHandler(period, handler);\n                thand.user = false;\n                this.addTimeds.push(thand);\n                return thand;\n              },\n\n              /** PrivateFunction: _addSysHandler\n               *  _Private_ function to add a system level stanza handler.\n               *\n               *  This function is used to add a Strophe.Handler for the\n               *  library code.  System stanza handlers are allowed to run before\n               *  authentication is complete.\n               *\n               *  Parameters:\n               *    (Function) handler - The callback function.\n               *    (String) ns - The namespace to match.\n               *    (String) name - The stanza name to match.\n               *    (String) type - The stanza type attribute to match.\n               *    (String) id - The stanza id attribute to match.\n               */\n              _addSysHandler: function _addSysHandler(handler, ns, name, type, id) {\n                var hand = new Strophe.Handler(handler, ns, name, type, id);\n                hand.user = false;\n                this.addHandlers.push(hand);\n                return hand;\n              },\n\n              /** PrivateFunction: _onDisconnectTimeout\n               *  _Private_ timeout handler for handling non-graceful disconnection.\n               *\n               *  If the graceful disconnect process does not complete within the\n               *  time allotted, this handler finishes the disconnect anyway.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onDisconnectTimeout: function _onDisconnectTimeout() {\n                Strophe.debug(\"_onDisconnectTimeout was called\");\n\n                this._changeConnectStatus(Strophe.Status.CONNTIMEOUT, null);\n\n                this._proto._onDisconnectTimeout(); // actually disconnect\n\n\n                this._doDisconnect();\n\n                return false;\n              },\n\n              /** PrivateFunction: _onIdle\n               *  _Private_ handler to process events during idle cycle.\n               *\n               *  This handler is called every 100ms to fire timed handlers that\n               *  are ready and keep poll requests going.\n               */\n              _onIdle: function _onIdle() {\n                var _this8 = this;\n\n                // add timed handlers scheduled for addition\n                // NOTE: we add before remove in the case a timed handler is\n                // added and then deleted before the next _onIdle() call.\n                while (this.addTimeds.length > 0) {\n                  this.timedHandlers.push(this.addTimeds.pop());\n                } // remove timed handlers that have been scheduled for deletion\n\n\n                while (this.removeTimeds.length > 0) {\n                  var thand = this.removeTimeds.pop();\n                  var i = this.timedHandlers.indexOf(thand);\n\n                  if (i >= 0) {\n                    this.timedHandlers.splice(i, 1);\n                  }\n                } // call ready timed handlers\n\n\n                var now = new Date().getTime();\n                var newList = [];\n\n                for (var _i6 = 0; _i6 < this.timedHandlers.length; _i6++) {\n                  var _thand = this.timedHandlers[_i6];\n\n                  if (this.authenticated || !_thand.user) {\n                    var since = _thand.lastCalled + _thand.period;\n\n                    if (since - now <= 0) {\n                      if (_thand.run()) {\n                        newList.push(_thand);\n                      }\n                    } else {\n                      newList.push(_thand);\n                    }\n                  }\n                }\n\n                this.timedHandlers = newList;\n                clearTimeout(this._idleTimeout);\n\n                this._proto._onIdle(); // reactivate the timer only if connected\n\n\n                if (this.connected) {\n                  this._idleTimeout = setTimeout(function () {\n                    return _this8._onIdle();\n                  }, 100);\n                }\n              }\n            };\n            /** Class: Strophe.SASLMechanism\n             *\n             *  encapsulates SASL authentication mechanisms.\n             *\n             *  User code may override the priority for each mechanism or disable it completely.\n             *  See <priority> for information about changing priority and <test> for informatian on\n             *  how to disable a mechanism.\n             *\n             *  By default, all mechanisms are enabled and the priorities are\n             *\n             *      OAUTHBEARER - 60\n             *      SCRAM-SHA1 - 50\n             *      DIGEST-MD5 - 40\n             *      PLAIN - 30\n             *      ANONYMOUS - 20\n             *      EXTERNAL - 10\n             *\n             *  See: Strophe.Connection.addSupportedSASLMechanisms\n             */\n\n            /**\n             * PrivateConstructor: Strophe.SASLMechanism\n             * SASL auth mechanism abstraction.\n             *\n             *  Parameters:\n             *    (String) name - SASL Mechanism name.\n             *    (Boolean) isClientFirst - If client should send response first without challenge.\n             *    (Number) priority - Priority.\n             *\n             *  Returns:\n             *    A new Strophe.SASLMechanism object.\n             */\n\n            Strophe.SASLMechanism = function (name, isClientFirst, priority) {\n              /** PrivateVariable: name\n               *  Mechanism name.\n               */\n              this.name = name;\n              /** PrivateVariable: isClientFirst\n               *  If client sends response without initial server challenge.\n               */\n\n              this.isClientFirst = isClientFirst;\n              /** Variable: priority\n               *  Determines which <SASLMechanism> is chosen for authentication (Higher is better).\n               *  Users may override this to prioritize mechanisms differently.\n               *\n               *  In the default configuration the priorities are\n               *\n               *  SCRAM-SHA1 - 40\n               *  DIGEST-MD5 - 30\n               *  Plain - 20\n               *\n               *  Example: (This will cause Strophe to choose the mechanism that the server sent first)\n               *\n               *  > Strophe.SASLMD5.priority = Strophe.SASLSHA1.priority;\n               *\n               *  See <SASL mechanisms> for a list of available mechanisms.\n               *\n               */\n\n              this.priority = priority;\n            };\n\n            Strophe.SASLMechanism.prototype = {\n              /**\n               *  Function: test\n               *  Checks if mechanism able to run.\n               *  To disable a mechanism, make this return false;\n               *\n               *  To disable plain authentication run\n               *  > Strophe.SASLPlain.test = function() {\n               *  >   return false;\n               *  > }\n               *\n               *  See <SASL mechanisms> for a list of available mechanisms.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - Target Connection.\n               *\n               *  Returns:\n               *    (Boolean) If mechanism was able to run.\n               */\n              test: function test(connection) {\n                return true;\n              },\n\n              /** PrivateFunction: onStart\n               *  Called before starting mechanism on some connection.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - Target Connection.\n               */\n              onStart: function onStart(connection) {\n                this._connection = connection;\n              },\n\n              /** PrivateFunction: onChallenge\n               *  Called by protocol implementation on incoming challenge. If client is\n               *  first (isClientFirst === true) challenge will be null on the first call.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - Target Connection.\n               *    (String) challenge - current challenge to handle.\n               *\n               *  Returns:\n               *    (String) Mechanism response.\n               */\n              onChallenge: function onChallenge(connection, challenge) {\n                throw new Error(\"You should implement challenge handling!\");\n              },\n\n              /** PrivateFunction: onFailure\n               *  Protocol informs mechanism implementation about SASL failure.\n               */\n              onFailure: function onFailure() {\n                this._connection = null;\n              },\n\n              /** PrivateFunction: onSuccess\n               *  Protocol informs mechanism implementation about SASL success.\n               */\n              onSuccess: function onSuccess() {\n                this._connection = null;\n              }\n            };\n            /** Constants: SASL mechanisms\n             *  Available authentication mechanisms\n             *\n             *  Strophe.SASLAnonymous - SASL ANONYMOUS authentication.\n             *  Strophe.SASLPlain - SASL PLAIN authentication.\n             *  Strophe.SASLMD5 - SASL DIGEST-MD5 authentication\n             *  Strophe.SASLSHA1 - SASL SCRAM-SHA1 authentication\n             *  Strophe.SASLOAuthBearer - SASL OAuth Bearer authentication\n             *  Strophe.SASLExternal - SASL EXTERNAL authentication\n             *  Strophe.SASLXOAuth2 - SASL X-OAuth2 authentication\n             */\n            // Building SASL callbacks\n\n            /** PrivateConstructor: SASLAnonymous\n             *  SASL ANONYMOUS authentication.\n             */\n\n            Strophe.SASLAnonymous = function () {};\n\n            Strophe.SASLAnonymous.prototype = new Strophe.SASLMechanism(\"ANONYMOUS\", false, 20);\n\n            Strophe.SASLAnonymous.prototype.test = function (connection) {\n              return connection.authcid === null;\n            };\n            /** PrivateConstructor: SASLPlain\n             *  SASL PLAIN authentication.\n             */\n\n\n            Strophe.SASLPlain = function () {};\n\n            Strophe.SASLPlain.prototype = new Strophe.SASLMechanism(\"PLAIN\", true, 50);\n\n            Strophe.SASLPlain.prototype.test = function (connection) {\n              return connection.authcid !== null;\n            };\n\n            Strophe.SASLPlain.prototype.onChallenge = function (connection) {\n              var auth_str = connection.authzid;\n              auth_str = auth_str + \"\\0\";\n              auth_str = auth_str + connection.authcid;\n              auth_str = auth_str + \"\\0\";\n              auth_str = auth_str + connection.pass;\n              return utils.utf16to8(auth_str);\n            };\n            /** PrivateConstructor: SASLSHA1\n             *  SASL SCRAM SHA 1 authentication.\n             */\n\n\n            Strophe.SASLSHA1 = function () {};\n\n            Strophe.SASLSHA1.prototype = new Strophe.SASLMechanism(\"SCRAM-SHA-1\", true, 70);\n\n            Strophe.SASLSHA1.prototype.test = function (connection) {\n              return connection.authcid !== null;\n            };\n\n            Strophe.SASLSHA1.prototype.onChallenge = function (connection, challenge, test_cnonce) {\n              var cnonce = test_cnonce || MD5.hexdigest(\"\" + Math.random() * 1234567890);\n              var auth_str = \"n=\" + utils.utf16to8(connection.authcid);\n              auth_str += \",r=\";\n              auth_str += cnonce;\n              connection._sasl_data.cnonce = cnonce;\n              connection._sasl_data[\"client-first-message-bare\"] = auth_str;\n              auth_str = \"n,,\" + auth_str;\n\n              this.onChallenge = function (connection, challenge) {\n                var nonce, salt, iter, Hi, U, U_old, i, k;\n                var responseText = \"c=biws,\";\n                var authMessage = \"\".concat(connection._sasl_data[\"client-first-message-bare\"], \",\").concat(challenge, \",\");\n                var cnonce = connection._sasl_data.cnonce;\n                var attribMatch = /([a-z]+)=([^,]+)(,|$)/;\n\n                while (challenge.match(attribMatch)) {\n                  var matches = challenge.match(attribMatch);\n                  challenge = challenge.replace(matches[0], \"\");\n\n                  switch (matches[1]) {\n                    case \"r\":\n                      nonce = matches[2];\n                      break;\n\n                    case \"s\":\n                      salt = matches[2];\n                      break;\n\n                    case \"i\":\n                      iter = matches[2];\n                      break;\n                  }\n                }\n\n                if (nonce.substr(0, cnonce.length) !== cnonce) {\n                  connection._sasl_data = {};\n                  return connection._sasl_failure_cb();\n                }\n\n                responseText += \"r=\" + nonce;\n                authMessage += responseText;\n                salt = atob(salt);\n                salt += \"\\x00\\x00\\x00\\x01\";\n                var pass = utils.utf16to8(connection.pass);\n                Hi = U_old = SHA1.core_hmac_sha1(pass, salt);\n\n                for (i = 1; i < iter; i++) {\n                  U = SHA1.core_hmac_sha1(pass, SHA1.binb2str(U_old));\n\n                  for (k = 0; k < 5; k++) {\n                    Hi[k] ^= U[k];\n                  }\n\n                  U_old = U;\n                }\n\n                Hi = SHA1.binb2str(Hi);\n                var clientKey = SHA1.core_hmac_sha1(Hi, \"Client Key\");\n                var serverKey = SHA1.str_hmac_sha1(Hi, \"Server Key\");\n                var clientSignature = SHA1.core_hmac_sha1(SHA1.str_sha1(SHA1.binb2str(clientKey)), authMessage);\n                connection._sasl_data[\"server-signature\"] = SHA1.b64_hmac_sha1(serverKey, authMessage);\n\n                for (k = 0; k < 5; k++) {\n                  clientKey[k] ^= clientSignature[k];\n                }\n\n                responseText += \",p=\" + btoa(SHA1.binb2str(clientKey));\n                return responseText;\n              };\n\n              return auth_str;\n            };\n            /** PrivateConstructor: SASLMD5\n             *  SASL DIGEST MD5 authentication.\n             */\n\n\n            Strophe.SASLMD5 = function () {};\n\n            Strophe.SASLMD5.prototype = new Strophe.SASLMechanism(\"DIGEST-MD5\", false, 60);\n\n            Strophe.SASLMD5.prototype.test = function (connection) {\n              return connection.authcid !== null;\n            };\n            /** PrivateFunction: _quote\n             *  _Private_ utility function to backslash escape and quote strings.\n             *\n             *  Parameters:\n             *    (String) str - The string to be quoted.\n             *\n             *  Returns:\n             *    quoted string\n             */\n\n\n            Strophe.SASLMD5.prototype._quote = function (str) {\n              return '\"' + str.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, '\\\\\"') + '\"'; //\" end string workaround for emacs\n            };\n\n            Strophe.SASLMD5.prototype.onChallenge = function (connection, challenge, test_cnonce) {\n              var attribMatch = /([a-z]+)=(\"[^\"]+\"|[^,\"]+)(?:,|$)/;\n              var cnonce = test_cnonce || MD5.hexdigest(\"\" + Math.random() * 1234567890);\n              var realm = \"\";\n              var host = null;\n              var nonce = \"\";\n              var qop = \"\";\n\n              while (challenge.match(attribMatch)) {\n                var matches = challenge.match(attribMatch);\n                challenge = challenge.replace(matches[0], \"\");\n                matches[2] = matches[2].replace(/^\"(.+)\"$/, \"$1\");\n\n                switch (matches[1]) {\n                  case \"realm\":\n                    realm = matches[2];\n                    break;\n\n                  case \"nonce\":\n                    nonce = matches[2];\n                    break;\n\n                  case \"qop\":\n                    qop = matches[2];\n                    break;\n\n                  case \"host\":\n                    host = matches[2];\n                    break;\n                }\n              }\n\n              var digest_uri = connection.servtype + \"/\" + connection.domain;\n\n              if (host !== null) {\n                digest_uri = digest_uri + \"/\" + host;\n              }\n\n              var cred = utils.utf16to8(connection.authcid + \":\" + realm + \":\" + this._connection.pass);\n              var A1 = MD5.hash(cred) + \":\" + nonce + \":\" + cnonce;\n              var A2 = 'AUTHENTICATE:' + digest_uri;\n              var responseText = \"\";\n              responseText += 'charset=utf-8,';\n              responseText += 'username=' + this._quote(utils.utf16to8(connection.authcid)) + ',';\n              responseText += 'realm=' + this._quote(realm) + ',';\n              responseText += 'nonce=' + this._quote(nonce) + ',';\n              responseText += 'nc=00000001,';\n              responseText += 'cnonce=' + this._quote(cnonce) + ',';\n              responseText += 'digest-uri=' + this._quote(digest_uri) + ',';\n              responseText += 'response=' + MD5.hexdigest(MD5.hexdigest(A1) + \":\" + nonce + \":00000001:\" + cnonce + \":auth:\" + MD5.hexdigest(A2)) + \",\";\n              responseText += 'qop=auth';\n\n              this.onChallenge = function () {\n                return \"\";\n              };\n\n              return responseText;\n            };\n            /** PrivateConstructor: SASLOAuthBearer\n             *  SASL OAuth Bearer authentication.\n             */\n\n\n            Strophe.SASLOAuthBearer = function () {};\n\n            Strophe.SASLOAuthBearer.prototype = new Strophe.SASLMechanism(\"OAUTHBEARER\", true, 40);\n\n            Strophe.SASLOAuthBearer.prototype.test = function (connection) {\n              return connection.pass !== null;\n            };\n\n            Strophe.SASLOAuthBearer.prototype.onChallenge = function (connection) {\n              var auth_str = 'n,';\n\n              if (connection.authcid !== null) {\n                auth_str = auth_str + 'a=' + connection.authzid;\n              }\n\n              auth_str = auth_str + ',';\n              auth_str = auth_str + \"\\x01\";\n              auth_str = auth_str + 'auth=Bearer ';\n              auth_str = auth_str + connection.pass;\n              auth_str = auth_str + \"\\x01\";\n              auth_str = auth_str + \"\\x01\";\n              return utils.utf16to8(auth_str);\n            };\n            /** PrivateConstructor: SASLExternal\n             *  SASL EXTERNAL authentication.\n             *\n             *  The EXTERNAL mechanism allows a client to request the server to use\n             *  credentials established by means external to the mechanism to\n             *  authenticate the client. The external means may be, for instance,\n             *  TLS services.\n             */\n\n\n            Strophe.SASLExternal = function () {};\n\n            Strophe.SASLExternal.prototype = new Strophe.SASLMechanism(\"EXTERNAL\", true, 10);\n\n            Strophe.SASLExternal.prototype.onChallenge = function (connection) {\n              /** According to XEP-178, an authzid SHOULD NOT be presented when the\n               * authcid contained or implied in the client certificate is the JID (i.e.\n               * authzid) with which the user wants to log in as.\n               *\n               * To NOT send the authzid, the user should therefore set the authcid equal\n               * to the JID when instantiating a new Strophe.Connection object.\n               */\n              return connection.authcid === connection.authzid ? '' : connection.authzid;\n            };\n            /** PrivateConstructor: SASLXOAuth2\n             *  SASL X-OAuth2 authentication.\n             */\n\n\n            Strophe.SASLXOAuth2 = function () {};\n\n            Strophe.SASLXOAuth2.prototype = new Strophe.SASLMechanism(\"X-OAUTH2\", true, 30);\n\n            Strophe.SASLXOAuth2.prototype.test = function (connection) {\n              return connection.pass !== null;\n            };\n\n            Strophe.SASLXOAuth2.prototype.onChallenge = function (connection) {\n              var auth_str = \"\\0\";\n\n              if (connection.authcid !== null) {\n                auth_str = auth_str + connection.authzid;\n              }\n\n              auth_str = auth_str + \"\\0\";\n              auth_str = auth_str + connection.pass;\n              return utils.utf16to8(auth_str);\n            };\n            var core = {\n              'Strophe': Strophe,\n              '$build': $build,\n              '$iq': $iq,\n              '$msg': $msg,\n              '$pres': $pres,\n              'SHA1': SHA1,\n              'MD5': MD5,\n              'b64_hmac_sha1': SHA1.b64_hmac_sha1,\n              'b64_sha1': SHA1.b64_sha1,\n              'str_hmac_sha1': SHA1.str_hmac_sha1,\n              'str_sha1': SHA1.str_sha1\n            };\n\n            /*\n                This program is distributed under the terms of the MIT license.\n                Please see the LICENSE file for details.\n\n                Copyright 2006-2008, OGG, LLC\n            */\n            var Strophe$1 = core.Strophe;\n            var $build$1 = core.$build;\n            /** PrivateClass: Strophe.Request\n             *  _Private_ helper class that provides a cross implementation abstraction\n             *  for a BOSH related XMLHttpRequest.\n             *\n             *  The Strophe.Request class is used internally to encapsulate BOSH request\n             *  information.  It is not meant to be used from user's code.\n             */\n\n            /** PrivateConstructor: Strophe.Request\n             *  Create and initialize a new Strophe.Request object.\n             *\n             *  Parameters:\n             *    (XMLElement) elem - The XML data to be sent in the request.\n             *    (Function) func - The function that will be called when the\n             *      XMLHttpRequest readyState changes.\n             *    (Integer) rid - The BOSH rid attribute associated with this request.\n             *    (Integer) sends - The number of times this same request has been sent.\n             */\n\n            Strophe$1.Request = function (elem, func, rid, sends) {\n              this.id = ++Strophe$1._requestId;\n              this.xmlData = elem;\n              this.data = Strophe$1.serialize(elem); // save original function in case we need to make a new request\n              // from this one.\n\n              this.origFunc = func;\n              this.func = func;\n              this.rid = rid;\n              this.date = NaN;\n              this.sends = sends || 0;\n              this.abort = false;\n              this.dead = null;\n\n              this.age = function () {\n                if (!this.date) {\n                  return 0;\n                }\n\n                var now = new Date();\n                return (now - this.date) / 1000;\n              };\n\n              this.timeDead = function () {\n                if (!this.dead) {\n                  return 0;\n                }\n\n                var now = new Date();\n                return (now - this.dead) / 1000;\n              };\n\n              this.xhr = this._newXHR();\n            };\n\n            Strophe$1.Request.prototype = {\n              /** PrivateFunction: getResponse\n               *  Get a response from the underlying XMLHttpRequest.\n               *\n               *  This function attempts to get a response from the request and checks\n               *  for errors.\n               *\n               *  Throws:\n               *    \"parsererror\" - A parser error occured.\n               *    \"bad-format\" - The entity has sent XML that cannot be processed.\n               *\n               *  Returns:\n               *    The DOM element tree of the response.\n               */\n              getResponse: function getResponse() {\n                var node = null;\n\n                if (this.xhr.responseXML && this.xhr.responseXML.documentElement) {\n                  node = this.xhr.responseXML.documentElement;\n\n                  if (node.tagName === \"parsererror\") {\n                    Strophe$1.error(\"invalid response received\");\n                    Strophe$1.error(\"responseText: \" + this.xhr.responseText);\n                    Strophe$1.error(\"responseXML: \" + Strophe$1.serialize(this.xhr.responseXML));\n                    throw new Error(\"parsererror\");\n                  }\n                } else if (this.xhr.responseText) {\n                  // In React Native, we may get responseText but no responseXML.  We can try to parse it manually.\n                  Strophe$1.debug(\"Got responseText but no responseXML; attempting to parse it with DOMParser...\");\n                  node = new DOMParser().parseFromString(this.xhr.responseText, 'application/xml').documentElement;\n\n                  if (!node) {\n                    throw new Error('Parsing produced null node');\n                  } else if (node.querySelector('parsererror')) {\n                    Strophe$1.error(\"invalid response received: \" + node.querySelector('parsererror').textContent);\n                    Strophe$1.error(\"responseText: \" + this.xhr.responseText);\n                    var error = new Error();\n                    error.name = Strophe$1.ErrorCondition.BAD_FORMAT;\n                    throw error;\n                  }\n                }\n\n                return node;\n              },\n\n              /** PrivateFunction: _newXHR\n               *  _Private_ helper function to create XMLHttpRequests.\n               *\n               *  This function creates XMLHttpRequests across all implementations.\n               *\n               *  Returns:\n               *    A new XMLHttpRequest.\n               */\n              _newXHR: function _newXHR() {\n                var xhr = null;\n\n                if (window.XMLHttpRequest) {\n                  xhr = new XMLHttpRequest();\n\n                  if (xhr.overrideMimeType) {\n                    xhr.overrideMimeType(\"text/xml; charset=utf-8\");\n                  }\n                } else if (window.ActiveXObject) {\n                  xhr = new ActiveXObject(\"Microsoft.XMLHTTP\");\n                } // use Function.bind() to prepend ourselves as an argument\n\n\n                xhr.onreadystatechange = this.func.bind(null, this);\n                return xhr;\n              }\n            };\n            /** Class: Strophe.Bosh\n             *  _Private_ helper class that handles BOSH Connections\n             *\n             *  The Strophe.Bosh class is used internally by Strophe.Connection\n             *  to encapsulate BOSH sessions. It is not meant to be used from user's code.\n             */\n\n            /** File: bosh.js\n             *  A JavaScript library to enable BOSH in Strophejs.\n             *\n             *  this library uses Bidirectional-streams Over Synchronous HTTP (BOSH)\n             *  to emulate a persistent, stateful, two-way connection to an XMPP server.\n             *  More information on BOSH can be found in XEP 124.\n             */\n\n            /** PrivateConstructor: Strophe.Bosh\n             *  Create and initialize a Strophe.Bosh object.\n             *\n             *  Parameters:\n             *    (Strophe.Connection) connection - The Strophe.Connection that will use BOSH.\n             *\n             *  Returns:\n             *    A new Strophe.Bosh object.\n             */\n\n            Strophe$1.Bosh = function (connection) {\n              this._conn = connection;\n              /* request id for body tags */\n\n              this.rid = Math.floor(Math.random() * 4294967295);\n              /* The current session ID. */\n\n              this.sid = null; // default BOSH values\n\n              this.hold = 1;\n              this.wait = 60;\n              this.window = 5;\n              this.errors = 0;\n              this.inactivity = null;\n              this.lastResponseHeaders = null;\n              this._requests = [];\n            };\n\n            Strophe$1.Bosh.prototype = {\n              /** Variable: strip\n               *\n               *  BOSH-Connections will have all stanzas wrapped in a <body> tag when\n               *  passed to <Strophe.Connection.xmlInput> or <Strophe.Connection.xmlOutput>.\n               *  To strip this tag, User code can set <Strophe.Bosh.strip> to \"body\":\n               *\n               *  > Strophe.Bosh.prototype.strip = \"body\";\n               *\n               *  This will enable stripping of the body tag in both\n               *  <Strophe.Connection.xmlInput> and <Strophe.Connection.xmlOutput>.\n               */\n              strip: null,\n\n              /** PrivateFunction: _buildBody\n               *  _Private_ helper function to generate the <body/> wrapper for BOSH.\n               *\n               *  Returns:\n               *    A Strophe.Builder with a <body/> element.\n               */\n              _buildBody: function _buildBody() {\n                var bodyWrap = $build$1('body', {\n                  'rid': this.rid++,\n                  'xmlns': Strophe$1.NS.HTTPBIND\n                });\n\n                if (this.sid !== null) {\n                  bodyWrap.attrs({\n                    'sid': this.sid\n                  });\n                }\n\n                if (this._conn.options.keepalive && this._conn._sessionCachingSupported()) {\n                  this._cacheSession();\n                }\n\n                return bodyWrap;\n              },\n\n              /** PrivateFunction: _reset\n               *  Reset the connection.\n               *\n               *  This function is called by the reset function of the Strophe Connection\n               */\n              _reset: function _reset() {\n                this.rid = Math.floor(Math.random() * 4294967295);\n                this.sid = null;\n                this.errors = 0;\n\n                if (this._conn._sessionCachingSupported()) {\n                  window.sessionStorage.removeItem('strophe-bosh-session');\n                }\n\n                this._conn.nextValidRid(this.rid);\n              },\n\n              /** PrivateFunction: _connect\n               *  _Private_ function that initializes the BOSH connection.\n               *\n               *  Creates and sends the Request that initializes the BOSH connection.\n               */\n              _connect: function _connect(wait, hold, route) {\n                this.wait = wait || this.wait;\n                this.hold = hold || this.hold;\n                this.errors = 0;\n\n                var body = this._buildBody().attrs({\n                  \"to\": this._conn.domain,\n                  \"xml:lang\": \"en\",\n                  \"wait\": this.wait,\n                  \"hold\": this.hold,\n                  \"content\": \"text/xml; charset=utf-8\",\n                  \"ver\": \"1.6\",\n                  \"xmpp:version\": \"1.0\",\n                  \"xmlns:xmpp\": Strophe$1.NS.BOSH\n                });\n\n                if (route) {\n                  body.attrs({\n                    'route': route\n                  });\n                }\n\n                var _connect_cb = this._conn._connect_cb;\n\n                this._requests.push(new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, _connect_cb.bind(this._conn)), body.tree().getAttribute(\"rid\")));\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _attach\n               *  Attach to an already created and authenticated BOSH session.\n               *\n               *  This function is provided to allow Strophe to attach to BOSH\n               *  sessions which have been created externally, perhaps by a Web\n               *  application.  This is often used to support auto-login type features\n               *  without putting user credentials into the page.\n               *\n               *  Parameters:\n               *    (String) jid - The full JID that is bound by the session.\n               *    (String) sid - The SID of the BOSH session.\n               *    (String) rid - The current RID of the BOSH session.  This RID\n               *      will be used by the next request.\n               *    (Function) callback The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              _attach: function _attach(jid, sid, rid, callback, wait, hold, wind) {\n                this._conn.jid = jid;\n                this.sid = sid;\n                this.rid = rid;\n                this._conn.connect_callback = callback;\n                this._conn.domain = Strophe$1.getDomainFromJid(this._conn.jid);\n                this._conn.authenticated = true;\n                this._conn.connected = true;\n                this.wait = wait || this.wait;\n                this.hold = hold || this.hold;\n                this.window = wind || this.window;\n\n                this._conn._changeConnectStatus(Strophe$1.Status.ATTACHED, null);\n              },\n\n              /** PrivateFunction: _restore\n               *  Attempt to restore a cached BOSH session\n               *\n               *  Parameters:\n               *    (String) jid - The full JID that is bound by the session.\n               *      This parameter is optional but recommended, specifically in cases\n               *      where prebinded BOSH sessions are used where it's important to know\n               *      that the right session is being restored.\n               *    (Function) callback The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              _restore: function _restore(jid, callback, wait, hold, wind) {\n                var session = JSON.parse(window.sessionStorage.getItem('strophe-bosh-session'));\n\n                if (typeof session !== \"undefined\" && session !== null && session.rid && session.sid && session.jid && (typeof jid === \"undefined\" || jid === null || Strophe$1.getBareJidFromJid(session.jid) === Strophe$1.getBareJidFromJid(jid) || // If authcid is null, then it's an anonymous login, so\n                // we compare only the domains:\n                Strophe$1.getNodeFromJid(jid) === null && Strophe$1.getDomainFromJid(session.jid) === jid)) {\n                  this._conn.restored = true;\n\n                  this._attach(session.jid, session.sid, session.rid, callback, wait, hold, wind);\n                } else {\n                  var error = new Error(\"_restore: no restoreable session.\");\n                  error.name = \"StropheSessionError\";\n                  throw error;\n                }\n              },\n\n              /** PrivateFunction: _cacheSession\n               *  _Private_ handler for the beforeunload event.\n               *\n               *  This handler is used to process the Bosh-part of the initial request.\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               */\n              _cacheSession: function _cacheSession() {\n                if (this._conn.authenticated) {\n                  if (this._conn.jid && this.rid && this.sid) {\n                    window.sessionStorage.setItem('strophe-bosh-session', JSON.stringify({\n                      'jid': this._conn.jid,\n                      'rid': this.rid,\n                      'sid': this.sid\n                    }));\n                  }\n                } else {\n                  window.sessionStorage.removeItem('strophe-bosh-session');\n                }\n              },\n\n              /** PrivateFunction: _connect_cb\n               *  _Private_ handler for initial connection request.\n               *\n               *  This handler is used to process the Bosh-part of the initial request.\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               */\n              _connect_cb: function _connect_cb(bodyWrap) {\n                var typ = bodyWrap.getAttribute(\"type\");\n\n                if (typ !== null && typ === \"terminate\") {\n                  // an error occurred\n                  var cond = bodyWrap.getAttribute(\"condition\");\n                  Strophe$1.error(\"BOSH-Connection failed: \" + cond);\n                  var conflict = bodyWrap.getElementsByTagName(\"conflict\");\n\n                  if (cond !== null) {\n                    if (cond === \"remote-stream-error\" && conflict.length > 0) {\n                      cond = \"conflict\";\n                    }\n\n                    this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, cond);\n                  } else {\n                    this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, \"unknown\");\n                  }\n\n                  this._conn._doDisconnect(cond);\n\n                  return Strophe$1.Status.CONNFAIL;\n                } // check to make sure we don't overwrite these if _connect_cb is\n                // called multiple times in the case of missing stream:features\n\n\n                if (!this.sid) {\n                  this.sid = bodyWrap.getAttribute(\"sid\");\n                }\n\n                var wind = bodyWrap.getAttribute('requests');\n\n                if (wind) {\n                  this.window = parseInt(wind, 10);\n                }\n\n                var hold = bodyWrap.getAttribute('hold');\n\n                if (hold) {\n                  this.hold = parseInt(hold, 10);\n                }\n\n                var wait = bodyWrap.getAttribute('wait');\n\n                if (wait) {\n                  this.wait = parseInt(wait, 10);\n                }\n\n                var inactivity = bodyWrap.getAttribute('inactivity');\n\n                if (inactivity) {\n                  this.inactivity = parseInt(inactivity, 10);\n                }\n              },\n\n              /** PrivateFunction: _disconnect\n               *  _Private_ part of Connection.disconnect for Bosh\n               *\n               *  Parameters:\n               *    (Request) pres - This stanza will be sent before disconnecting.\n               */\n              _disconnect: function _disconnect(pres) {\n                this._sendTerminate(pres);\n              },\n\n              /** PrivateFunction: _doDisconnect\n               *  _Private_ function to disconnect.\n               *\n               *  Resets the SID and RID.\n               */\n              _doDisconnect: function _doDisconnect() {\n                this.sid = null;\n                this.rid = Math.floor(Math.random() * 4294967295);\n\n                if (this._conn._sessionCachingSupported()) {\n                  window.sessionStorage.removeItem('strophe-bosh-session');\n                }\n\n                this._conn.nextValidRid(this.rid);\n              },\n\n              /** PrivateFunction: _emptyQueue\n               * _Private_ function to check if the Request queue is empty.\n               *\n               *  Returns:\n               *    True, if there are no Requests queued, False otherwise.\n               */\n              _emptyQueue: function _emptyQueue() {\n                return this._requests.length === 0;\n              },\n\n              /** PrivateFunction: _callProtocolErrorHandlers\n               *  _Private_ function to call error handlers registered for HTTP errors.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The request that is changing readyState.\n               */\n              _callProtocolErrorHandlers: function _callProtocolErrorHandlers(req) {\n                var reqStatus = this._getRequestStatus(req);\n\n                var err_callback = this._conn.protocolErrorHandlers.HTTP[reqStatus];\n\n                if (err_callback) {\n                  err_callback.call(this, reqStatus);\n                }\n              },\n\n              /** PrivateFunction: _hitError\n               *  _Private_ function to handle the error count.\n               *\n               *  Requests are resent automatically until their error count reaches\n               *  5.  Each time an error is encountered, this function is called to\n               *  increment the count and disconnect if the count is too high.\n               *\n               *  Parameters:\n               *    (Integer) reqStatus - The request status.\n               */\n              _hitError: function _hitError(reqStatus) {\n                this.errors++;\n                Strophe$1.warn(\"request errored, status: \" + reqStatus + \", number of errors: \" + this.errors);\n\n                if (this.errors > 4) {\n                  this._conn._onDisconnectTimeout();\n                }\n              },\n\n              /** PrivateFunction: _no_auth_received\n               *\n               * Called on stream start/restart when no stream:features\n               * has been received and sends a blank poll request.\n               */\n              _no_auth_received: function _no_auth_received(callback) {\n                Strophe$1.warn(\"Server did not yet offer a supported authentication \" + \"mechanism. Sending a blank poll request.\");\n\n                if (callback) {\n                  callback = callback.bind(this._conn);\n                } else {\n                  callback = this._conn._connect_cb.bind(this._conn);\n                }\n\n                var body = this._buildBody();\n\n                this._requests.push(new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, callback), body.tree().getAttribute(\"rid\")));\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _onDisconnectTimeout\n               *  _Private_ timeout handler for handling non-graceful disconnection.\n               *\n               *  Cancels all remaining Requests and clears the queue.\n               */\n              _onDisconnectTimeout: function _onDisconnectTimeout() {\n                this._abortAllRequests();\n              },\n\n              /** PrivateFunction: _abortAllRequests\n               *  _Private_ helper function that makes sure all pending requests are aborted.\n               */\n              _abortAllRequests: function _abortAllRequests() {\n                while (this._requests.length > 0) {\n                  var req = this._requests.pop();\n\n                  req.abort = true;\n                  req.xhr.abort();\n\n                  req.xhr.onreadystatechange = function () {};\n                }\n              },\n\n              /** PrivateFunction: _onIdle\n               *  _Private_ handler called by Strophe.Connection._onIdle\n               *\n               *  Sends all queued Requests or polls with empty Request if there are none.\n               */\n              _onIdle: function _onIdle() {\n                var data = this._conn._data; // if no requests are in progress, poll\n\n                if (this._conn.authenticated && this._requests.length === 0 && data.length === 0 && !this._conn.disconnecting) {\n                  Strophe$1.debug(\"no requests during idle cycle, sending blank request\");\n                  data.push(null);\n                }\n\n                if (this._conn.paused) {\n                  return;\n                }\n\n                if (this._requests.length < 2 && data.length > 0) {\n                  var body = this._buildBody();\n\n                  for (var i = 0; i < data.length; i++) {\n                    if (data[i] !== null) {\n                      if (data[i] === \"restart\") {\n                        body.attrs({\n                          \"to\": this._conn.domain,\n                          \"xml:lang\": \"en\",\n                          \"xmpp:restart\": \"true\",\n                          \"xmlns:xmpp\": Strophe$1.NS.BOSH\n                        });\n                      } else {\n                        body.cnode(data[i]).up();\n                      }\n                    }\n                  }\n\n                  delete this._conn._data;\n                  this._conn._data = [];\n\n                  this._requests.push(new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, this._conn._dataRecv.bind(this._conn)), body.tree().getAttribute(\"rid\")));\n\n                  this._throttledRequestHandler();\n                }\n\n                if (this._requests.length > 0) {\n                  var time_elapsed = this._requests[0].age();\n\n                  if (this._requests[0].dead !== null) {\n                    if (this._requests[0].timeDead() > Math.floor(Strophe$1.SECONDARY_TIMEOUT * this.wait)) {\n                      this._throttledRequestHandler();\n                    }\n                  }\n\n                  if (time_elapsed > Math.floor(Strophe$1.TIMEOUT * this.wait)) {\n                    Strophe$1.warn(\"Request \" + this._requests[0].id + \" timed out, over \" + Math.floor(Strophe$1.TIMEOUT * this.wait) + \" seconds since last activity\");\n\n                    this._throttledRequestHandler();\n                  }\n                }\n              },\n\n              /** PrivateFunction: _getRequestStatus\n               *\n               *  Returns the HTTP status code from a Strophe.Request\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The Strophe.Request instance.\n               *    (Integer) def - The default value that should be returned if no\n               *          status value was found.\n               */\n              _getRequestStatus: function _getRequestStatus(req, def) {\n                var reqStatus;\n\n                if (req.xhr.readyState === 4) {\n                  try {\n                    reqStatus = req.xhr.status;\n                  } catch (e) {\n                    // ignore errors from undefined status attribute. Works\n                    // around a browser bug\n                    Strophe$1.error(\"Caught an error while retrieving a request's status, \" + \"reqStatus: \" + reqStatus);\n                  }\n                }\n\n                if (typeof reqStatus === \"undefined\") {\n                  reqStatus = typeof def === 'number' ? def : 0;\n                }\n\n                return reqStatus;\n              },\n\n              /** PrivateFunction: _onRequestStateChange\n               *  _Private_ handler for Strophe.Request state changes.\n               *\n               *  This function is called when the XMLHttpRequest readyState changes.\n               *  It contains a lot of error handling logic for the many ways that\n               *  requests can fail, and calls the request callback when requests\n               *  succeed.\n               *\n               *  Parameters:\n               *    (Function) func - The handler for the request.\n               *    (Strophe.Request) req - The request that is changing readyState.\n               */\n              _onRequestStateChange: function _onRequestStateChange(func, req) {\n                Strophe$1.debug(\"request id \" + req.id + \".\" + req.sends + \" state changed to \" + req.xhr.readyState);\n\n                if (req.abort) {\n                  req.abort = false;\n                  return;\n                }\n\n                if (req.xhr.readyState !== 4) {\n                  // The request is not yet complete\n                  return;\n                }\n\n                var reqStatus = this._getRequestStatus(req);\n\n                this.lastResponseHeaders = req.xhr.getAllResponseHeaders();\n\n                if (this.disconnecting && reqStatus >= 400) {\n                  this._hitError(reqStatus);\n\n                  this._callProtocolErrorHandlers(req);\n\n                  return;\n                }\n\n                var valid_request = reqStatus > 0 && reqStatus < 500;\n                var too_many_retries = req.sends > this._conn.maxRetries;\n\n                if (valid_request || too_many_retries) {\n                  // remove from internal queue\n                  this._removeRequest(req);\n\n                  Strophe$1.debug(\"request id \" + req.id + \" should now be removed\");\n                }\n\n                if (reqStatus === 200) {\n                  // request succeeded\n                  var reqIs0 = this._requests[0] === req;\n                  var reqIs1 = this._requests[1] === req; // if request 1 finished, or request 0 finished and request\n                  // 1 is over Strophe.SECONDARY_TIMEOUT seconds old, we need to\n                  // restart the other - both will be in the first spot, as the\n                  // completed request has been removed from the queue already\n\n                  if (reqIs1 || reqIs0 && this._requests.length > 0 && this._requests[0].age() > Math.floor(Strophe$1.SECONDARY_TIMEOUT * this.wait)) {\n                    this._restartRequest(0);\n                  }\n\n                  this._conn.nextValidRid(Number(req.rid) + 1);\n\n                  Strophe$1.debug(\"request id \" + req.id + \".\" + req.sends + \" got 200\");\n                  func(req); // call handler\n\n                  this.errors = 0;\n                } else if (reqStatus === 0 || reqStatus >= 400 && reqStatus < 600 || reqStatus >= 12000) {\n                  // request failed\n                  Strophe$1.error(\"request id \" + req.id + \".\" + req.sends + \" error \" + reqStatus + \" happened\");\n\n                  this._hitError(reqStatus);\n\n                  this._callProtocolErrorHandlers(req);\n\n                  if (reqStatus >= 400 && reqStatus < 500) {\n                    this._conn._changeConnectStatus(Strophe$1.Status.DISCONNECTING, null);\n\n                    this._conn._doDisconnect();\n                  }\n                } else {\n                  Strophe$1.error(\"request id \" + req.id + \".\" + req.sends + \" error \" + reqStatus + \" happened\");\n                }\n\n                if (!valid_request && !too_many_retries) {\n                  this._throttledRequestHandler();\n                } else if (too_many_retries && !this._conn.connected) {\n                  this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, \"giving-up\");\n                }\n              },\n\n              /** PrivateFunction: _processRequest\n               *  _Private_ function to process a request in the queue.\n               *\n               *  This function takes requests off the queue and sends them and\n               *  restarts dead requests.\n               *\n               *  Parameters:\n               *    (Integer) i - The index of the request in the queue.\n               */\n              _processRequest: function _processRequest(i) {\n                var _this = this;\n\n                var req = this._requests[i];\n\n                var reqStatus = this._getRequestStatus(req, -1); // make sure we limit the number of retries\n\n\n                if (req.sends > this._conn.maxRetries) {\n                  this._conn._onDisconnectTimeout();\n\n                  return;\n                }\n\n                var time_elapsed = req.age();\n                var primary_timeout = !isNaN(time_elapsed) && time_elapsed > Math.floor(Strophe$1.TIMEOUT * this.wait);\n                var secondary_timeout = req.dead !== null && req.timeDead() > Math.floor(Strophe$1.SECONDARY_TIMEOUT * this.wait);\n                var server_error = req.xhr.readyState === 4 && (reqStatus < 1 || reqStatus >= 500);\n\n                if (primary_timeout || secondary_timeout || server_error) {\n                  if (secondary_timeout) {\n                    Strophe$1.error(\"Request \".concat(this._requests[i].id, \" timed out (secondary), restarting\"));\n                  }\n\n                  req.abort = true;\n                  req.xhr.abort(); // setting to null fails on IE6, so set to empty function\n\n                  req.xhr.onreadystatechange = function () {};\n\n                  this._requests[i] = new Strophe$1.Request(req.xmlData, req.origFunc, req.rid, req.sends);\n                  req = this._requests[i];\n                }\n\n                if (req.xhr.readyState === 0) {\n                  Strophe$1.debug(\"request id \" + req.id + \".\" + req.sends + \" posting\");\n\n                  try {\n                    var content_type = this._conn.options.contentType || \"text/xml; charset=utf-8\";\n                    req.xhr.open(\"POST\", this._conn.service, this._conn.options.sync ? false : true);\n\n                    if (typeof req.xhr.setRequestHeader !== 'undefined') {\n                      // IE9 doesn't have setRequestHeader\n                      req.xhr.setRequestHeader(\"Content-Type\", content_type);\n                    }\n\n                    if (this._conn.options.withCredentials) {\n                      req.xhr.withCredentials = true;\n                    }\n                  } catch (e2) {\n                    Strophe$1.error(\"XHR open failed: \" + e2.toString());\n\n                    if (!this._conn.connected) {\n                      this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, \"bad-service\");\n                    }\n\n                    this._conn.disconnect();\n\n                    return;\n                  } // Fires the XHR request -- may be invoked immediately\n                  // or on a gradually expanding retry window for reconnects\n\n\n                  var sendFunc = function sendFunc() {\n                    req.date = new Date();\n\n                    if (_this._conn.options.customHeaders) {\n                      var headers = _this._conn.options.customHeaders;\n\n                      for (var header in headers) {\n                        if (Object.prototype.hasOwnProperty.call(headers, header)) {\n                          req.xhr.setRequestHeader(header, headers[header]);\n                        }\n                      }\n                    }\n\n                    req.xhr.send(req.data);\n                  }; // Implement progressive backoff for reconnects --\n                  // First retry (send === 1) should also be instantaneous\n\n\n                  if (req.sends > 1) {\n                    // Using a cube of the retry number creates a nicely\n                    // expanding retry window\n                    var backoff = Math.min(Math.floor(Strophe$1.TIMEOUT * this.wait), Math.pow(req.sends, 3)) * 1000;\n                    setTimeout(function () {\n                      // XXX: setTimeout should be called only with function expressions (23974bc1)\n                      sendFunc();\n                    }, backoff);\n                  } else {\n                    sendFunc();\n                  }\n\n                  req.sends++;\n\n                  if (this._conn.xmlOutput !== Strophe$1.Connection.prototype.xmlOutput) {\n                    if (req.xmlData.nodeName === this.strip && req.xmlData.childNodes.length) {\n                      this._conn.xmlOutput(req.xmlData.childNodes[0]);\n                    } else {\n                      this._conn.xmlOutput(req.xmlData);\n                    }\n                  }\n\n                  if (this._conn.rawOutput !== Strophe$1.Connection.prototype.rawOutput) {\n                    this._conn.rawOutput(req.data);\n                  }\n                } else {\n                  Strophe$1.debug(\"_processRequest: \" + (i === 0 ? \"first\" : \"second\") + \" request has readyState of \" + req.xhr.readyState);\n                }\n              },\n\n              /** PrivateFunction: _removeRequest\n               *  _Private_ function to remove a request from the queue.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The request to remove.\n               */\n              _removeRequest: function _removeRequest(req) {\n                Strophe$1.debug(\"removing request\");\n\n                for (var i = this._requests.length - 1; i >= 0; i--) {\n                  if (req === this._requests[i]) {\n                    this._requests.splice(i, 1);\n                  }\n                } // IE6 fails on setting to null, so set to empty function\n\n\n                req.xhr.onreadystatechange = function () {};\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _restartRequest\n               *  _Private_ function to restart a request that is presumed dead.\n               *\n               *  Parameters:\n               *    (Integer) i - The index of the request in the queue.\n               */\n              _restartRequest: function _restartRequest(i) {\n                var req = this._requests[i];\n\n                if (req.dead === null) {\n                  req.dead = new Date();\n                }\n\n                this._processRequest(i);\n              },\n\n              /** PrivateFunction: _reqToData\n               * _Private_ function to get a stanza out of a request.\n               *\n               * Tries to extract a stanza out of a Request Object.\n               * When this fails the current connection will be disconnected.\n               *\n               *  Parameters:\n               *    (Object) req - The Request.\n               *\n               *  Returns:\n               *    The stanza that was passed.\n               */\n              _reqToData: function _reqToData(req) {\n                try {\n                  return req.getResponse();\n                } catch (e) {\n                  if (e.message !== \"parsererror\") {\n                    throw e;\n                  }\n\n                  this._conn.disconnect(\"strophe-parsererror\");\n                }\n              },\n\n              /** PrivateFunction: _sendTerminate\n               *  _Private_ function to send initial disconnect sequence.\n               *\n               *  This is the first step in a graceful disconnect.  It sends\n               *  the BOSH server a terminate body and includes an unavailable\n               *  presence if authentication has completed.\n               */\n              _sendTerminate: function _sendTerminate(pres) {\n                Strophe$1.debug(\"_sendTerminate was called\");\n\n                var body = this._buildBody().attrs({\n                  type: \"terminate\"\n                });\n\n                if (pres) {\n                  body.cnode(pres.tree());\n                }\n\n                var req = new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, this._conn._dataRecv.bind(this._conn)), body.tree().getAttribute(\"rid\"));\n\n                this._requests.push(req);\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _send\n               *  _Private_ part of the Connection.send function for BOSH\n               *\n               * Just triggers the RequestHandler to send the messages that are in the queue\n               */\n              _send: function _send() {\n                var _this2 = this;\n\n                clearTimeout(this._conn._idleTimeout);\n\n                this._throttledRequestHandler();\n\n                this._conn._idleTimeout = setTimeout(function () {\n                  return _this2._conn._onIdle();\n                }, 100);\n              },\n\n              /** PrivateFunction: _sendRestart\n               *\n               *  Send an xmpp:restart stanza.\n               */\n              _sendRestart: function _sendRestart() {\n                this._throttledRequestHandler();\n\n                clearTimeout(this._conn._idleTimeout);\n              },\n\n              /** PrivateFunction: _throttledRequestHandler\n               *  _Private_ function to throttle requests to the connection window.\n               *\n               *  This function makes sure we don't send requests so fast that the\n               *  request ids overflow the connection window in the case that one\n               *  request died.\n               */\n              _throttledRequestHandler: function _throttledRequestHandler() {\n                if (!this._requests) {\n                  Strophe$1.debug(\"_throttledRequestHandler called with \" + \"undefined requests\");\n                } else {\n                  Strophe$1.debug(\"_throttledRequestHandler called with \" + this._requests.length + \" requests\");\n                }\n\n                if (!this._requests || this._requests.length === 0) {\n                  return;\n                }\n\n                if (this._requests.length > 0) {\n                  this._processRequest(0);\n                }\n\n                if (this._requests.length > 1 && Math.abs(this._requests[0].rid - this._requests[1].rid) < this.window) {\n                  this._processRequest(1);\n                }\n              }\n            };\n\n            /*\n                This program is distributed under the terms of the MIT license.\n                Please see the LICENSE file for details.\n\n                Copyright 2006-2008, OGG, LLC\n            */\n            var Strophe$2 = core.Strophe;\n            var $build$2 = core.$build;\n            /** Class: Strophe.WebSocket\n             *  _Private_ helper class that handles WebSocket Connections\n             *\n             *  The Strophe.WebSocket class is used internally by Strophe.Connection\n             *  to encapsulate WebSocket sessions. It is not meant to be used from user's code.\n             */\n\n            /** File: websocket.js\n             *  A JavaScript library to enable XMPP over Websocket in Strophejs.\n             *\n             *  This file implements XMPP over WebSockets for Strophejs.\n             *  If a Connection is established with a Websocket url (ws://...)\n             *  Strophe will use WebSockets.\n             *  For more information on XMPP-over-WebSocket see RFC 7395:\n             *  http://tools.ietf.org/html/rfc7395\n             *\n             *  WebSocket support implemented by Andreas Guth (andreas.guth@rwth-aachen.de)\n             */\n\n            /** PrivateConstructor: Strophe.Websocket\n             *  Create and initialize a Strophe.WebSocket object.\n             *  Currently only sets the connection Object.\n             *\n             *  Parameters:\n             *    (Strophe.Connection) connection - The Strophe.Connection that will use WebSockets.\n             *\n             *  Returns:\n             *    A new Strophe.WebSocket object.\n             */\n\n            Strophe$2.Websocket = function (connection) {\n              this._conn = connection;\n              this.strip = \"wrapper\";\n              var service = connection.service;\n\n              if (service.indexOf(\"ws:\") !== 0 && service.indexOf(\"wss:\") !== 0) {\n                // If the service is not an absolute URL, assume it is a path and put the absolute\n                // URL together from options, current URL and the path.\n                var new_service = \"\";\n\n                if (connection.options.protocol === \"ws\" && window.location.protocol !== \"https:\") {\n                  new_service += \"ws\";\n                } else {\n                  new_service += \"wss\";\n                }\n\n                new_service += \"://\" + window.location.host;\n\n                if (service.indexOf(\"/\") !== 0) {\n                  new_service += window.location.pathname + service;\n                } else {\n                  new_service += service;\n                }\n\n                connection.service = new_service;\n              }\n            };\n\n            Strophe$2.Websocket.prototype = {\n              /** PrivateFunction: _buildStream\n               *  _Private_ helper function to generate the <stream> start tag for WebSockets\n               *\n               *  Returns:\n               *    A Strophe.Builder with a <stream> element.\n               */\n              _buildStream: function _buildStream() {\n                return $build$2(\"open\", {\n                  \"xmlns\": Strophe$2.NS.FRAMING,\n                  \"to\": this._conn.domain,\n                  \"version\": '1.0'\n                });\n              },\n\n              /** PrivateFunction: _check_streamerror\n               * _Private_ checks a message for stream:error\n               *\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               *    connectstatus - The ConnectStatus that will be set on error.\n               *  Returns:\n               *     true if there was a streamerror, false otherwise.\n               */\n              _check_streamerror: function _check_streamerror(bodyWrap, connectstatus) {\n                var errors;\n\n                if (bodyWrap.getElementsByTagNameNS) {\n                  errors = bodyWrap.getElementsByTagNameNS(Strophe$2.NS.STREAM, \"error\");\n                } else {\n                  errors = bodyWrap.getElementsByTagName(\"stream:error\");\n                }\n\n                if (errors.length === 0) {\n                  return false;\n                }\n\n                var error = errors[0];\n                var condition = \"\";\n                var text = \"\";\n                var ns = \"urn:ietf:params:xml:ns:xmpp-streams\";\n\n                for (var i = 0; i < error.childNodes.length; i++) {\n                  var e = error.childNodes[i];\n\n                  if (e.getAttribute(\"xmlns\") !== ns) {\n                    break;\n                  }\n\n                  if (e.nodeName === \"text\") {\n                    text = e.textContent;\n                  } else {\n                    condition = e.nodeName;\n                  }\n                }\n\n                var errorString = \"WebSocket stream error: \";\n\n                if (condition) {\n                  errorString += condition;\n                } else {\n                  errorString += \"unknown\";\n                }\n\n                if (text) {\n                  errorString += \" - \" + text;\n                }\n\n                Strophe$2.error(errorString); // close the connection on stream_error\n\n                this._conn._changeConnectStatus(connectstatus, condition);\n\n                this._conn._doDisconnect();\n\n                return true;\n              },\n\n              /** PrivateFunction: _reset\n               *  Reset the connection.\n               *\n               *  This function is called by the reset function of the Strophe Connection.\n               *  Is not needed by WebSockets.\n               */\n              _reset: function _reset() {\n                return;\n              },\n\n              /** PrivateFunction: _connect\n               *  _Private_ function called by Strophe.Connection.connect\n               *\n               *  Creates a WebSocket for a connection and assigns Callbacks to it.\n               *  Does nothing if there already is a WebSocket.\n               */\n              _connect: function _connect() {\n                // Ensure that there is no open WebSocket from a previous Connection.\n                this._closeSocket(); // Create the new WobSocket\n\n\n                this.socket = new WebSocket(this._conn.service, \"xmpp\");\n                this.socket.onopen = this._onOpen.bind(this);\n                this.socket.onerror = this._onError.bind(this);\n                this.socket.onclose = this._onClose.bind(this);\n                this.socket.onmessage = this._connect_cb_wrapper.bind(this);\n              },\n\n              /** PrivateFunction: _connect_cb\n               *  _Private_ function called by Strophe.Connection._connect_cb\n               *\n               * checks for stream:error\n               *\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               */\n              _connect_cb: function _connect_cb(bodyWrap) {\n                var error = this._check_streamerror(bodyWrap, Strophe$2.Status.CONNFAIL);\n\n                if (error) {\n                  return Strophe$2.Status.CONNFAIL;\n                }\n              },\n\n              /** PrivateFunction: _handleStreamStart\n               * _Private_ function that checks the opening <open /> tag for errors.\n               *\n               * Disconnects if there is an error and returns false, true otherwise.\n               *\n               *  Parameters:\n               *    (Node) message - Stanza containing the <open /> tag.\n               */\n              _handleStreamStart: function _handleStreamStart(message) {\n                var error = false; // Check for errors in the <open /> tag\n\n                var ns = message.getAttribute(\"xmlns\");\n\n                if (typeof ns !== \"string\") {\n                  error = \"Missing xmlns in <open />\";\n                } else if (ns !== Strophe$2.NS.FRAMING) {\n                  error = \"Wrong xmlns in <open />: \" + ns;\n                }\n\n                var ver = message.getAttribute(\"version\");\n\n                if (typeof ver !== \"string\") {\n                  error = \"Missing version in <open />\";\n                } else if (ver !== \"1.0\") {\n                  error = \"Wrong version in <open />: \" + ver;\n                }\n\n                if (error) {\n                  this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, error);\n\n                  this._conn._doDisconnect();\n\n                  return false;\n                }\n\n                return true;\n              },\n\n              /** PrivateFunction: _connect_cb_wrapper\n               * _Private_ function that handles the first connection messages.\n               *\n               * On receiving an opening stream tag this callback replaces itself with the real\n               * message handler. On receiving a stream error the connection is terminated.\n               */\n              _connect_cb_wrapper: function _connect_cb_wrapper(message) {\n                if (message.data.indexOf(\"<open \") === 0 || message.data.indexOf(\"<?xml\") === 0) {\n                  // Strip the XML Declaration, if there is one\n                  var data = message.data.replace(/^(<\\?.*?\\?>\\s*)*/, \"\");\n                  if (data === '') return;\n                  var streamStart = new DOMParser().parseFromString(data, \"text/xml\").documentElement;\n\n                  this._conn.xmlInput(streamStart);\n\n                  this._conn.rawInput(message.data); //_handleStreamSteart will check for XML errors and disconnect on error\n\n\n                  if (this._handleStreamStart(streamStart)) {\n                    //_connect_cb will check for stream:error and disconnect on error\n                    this._connect_cb(streamStart);\n                  }\n                } else if (message.data.indexOf(\"<close \") === 0) {\n                  // <close xmlns=\"urn:ietf:params:xml:ns:xmpp-framing />\n                  // Parse the raw string to an XML element\n                  var parsedMessage = new DOMParser().parseFromString(message.data, \"text/xml\").documentElement; // Report this input to the raw and xml handlers\n\n                  this._conn.xmlInput(parsedMessage);\n\n                  this._conn.rawInput(message.data);\n\n                  var see_uri = parsedMessage.getAttribute(\"see-other-uri\");\n\n                  if (see_uri) {\n                    var service = this._conn.service; // Valid scenarios: WSS->WSS, WS->ANY\n\n                    var isSecureRedirect = service.indexOf(\"wss:\") >= 0 && see_uri.indexOf(\"wss:\") >= 0 || service.indexOf(\"ws:\") >= 0;\n\n                    if (isSecureRedirect) {\n                      this._conn._changeConnectStatus(Strophe$2.Status.REDIRECT, \"Received see-other-uri, resetting connection\");\n\n                      this._conn.reset();\n\n                      this._conn.service = see_uri;\n\n                      this._connect();\n                    }\n                  } else {\n                    this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, \"Received closing stream\");\n\n                    this._conn._doDisconnect();\n                  }\n                } else {\n                  var string = this._streamWrap(message.data);\n\n                  var elem = new DOMParser().parseFromString(string, \"text/xml\").documentElement;\n                  this.socket.onmessage = this._onMessage.bind(this);\n\n                  this._conn._connect_cb(elem, null, message.data);\n                }\n              },\n\n              /** PrivateFunction: _disconnect\n               *  _Private_ function called by Strophe.Connection.disconnect\n               *\n               *  Disconnects and sends a last stanza if one is given\n               *\n               *  Parameters:\n               *    (Request) pres - This stanza will be sent before disconnecting.\n               */\n              _disconnect: function _disconnect(pres) {\n                if (this.socket && this.socket.readyState !== WebSocket.CLOSED) {\n                  if (pres) {\n                    this._conn.send(pres);\n                  }\n\n                  var close = $build$2(\"close\", {\n                    \"xmlns\": Strophe$2.NS.FRAMING\n                  });\n\n                  this._conn.xmlOutput(close.tree());\n\n                  var closeString = Strophe$2.serialize(close);\n\n                  this._conn.rawOutput(closeString);\n\n                  try {\n                    this.socket.send(closeString);\n                  } catch (e) {\n                    Strophe$2.warn(\"Couldn't send <close /> tag.\");\n                  }\n                }\n\n                this._conn._doDisconnect();\n              },\n\n              /** PrivateFunction: _doDisconnect\n               *  _Private_ function to disconnect.\n               *\n               *  Just closes the Socket for WebSockets\n               */\n              _doDisconnect: function _doDisconnect() {\n                Strophe$2.debug(\"WebSockets _doDisconnect was called\");\n\n                this._closeSocket();\n              },\n\n              /** PrivateFunction _streamWrap\n               *  _Private_ helper function to wrap a stanza in a <stream> tag.\n               *  This is used so Strophe can process stanzas from WebSockets like BOSH\n               */\n              _streamWrap: function _streamWrap(stanza) {\n                return \"<wrapper>\" + stanza + '</wrapper>';\n              },\n\n              /** PrivateFunction: _closeSocket\n               *  _Private_ function to close the WebSocket.\n               *\n               *  Closes the socket if it is still open and deletes it\n               */\n              _closeSocket: function _closeSocket() {\n                if (this.socket) {\n                  try {\n                    this.socket.onclose = null;\n                    this.socket.onerror = null;\n                    this.socket.onmessage = null;\n                    this.socket.close();\n                  } catch (e) {\n                    Strophe$2.debug(e.message);\n                  }\n                }\n\n                this.socket = null;\n              },\n\n              /** PrivateFunction: _emptyQueue\n               * _Private_ function to check if the message queue is empty.\n               *\n               *  Returns:\n               *    True, because WebSocket messages are send immediately after queueing.\n               */\n              _emptyQueue: function _emptyQueue() {\n                return true;\n              },\n\n              /** PrivateFunction: _onClose\n               * _Private_ function to handle websockets closing.\n               *\n               * Nothing to do here for WebSockets\n               */\n              _onClose: function _onClose(e) {\n                if (this._conn.connected && !this._conn.disconnecting) {\n                  Strophe$2.error(\"Websocket closed unexpectedly\");\n\n                  this._conn._doDisconnect();\n                } else if (e && e.code === 1006 && !this._conn.connected && this.socket) {\n                  // in case the onError callback was not called (Safari 10 does not\n                  // call onerror when the initial connection fails) we need to\n                  // dispatch a CONNFAIL status update to be consistent with the\n                  // behavior on other browsers.\n                  Strophe$2.error(\"Websocket closed unexcectedly\");\n\n                  this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, \"The WebSocket connection could not be established or was disconnected.\");\n\n                  this._conn._doDisconnect();\n                } else {\n                  Strophe$2.debug(\"Websocket closed\");\n                }\n              },\n\n              /** PrivateFunction: _no_auth_received\n               *\n               * Called on stream start/restart when no stream:features\n               * has been received.\n               */\n              _no_auth_received: function _no_auth_received(callback) {\n                Strophe$2.error(\"Server did not offer a supported authentication mechanism\");\n\n                this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, Strophe$2.ErrorCondition.NO_AUTH_MECH);\n\n                if (callback) {\n                  callback.call(this._conn);\n                }\n\n                this._conn._doDisconnect();\n              },\n\n              /** PrivateFunction: _onDisconnectTimeout\n               *  _Private_ timeout handler for handling non-graceful disconnection.\n               *\n               *  This does nothing for WebSockets\n               */\n              _onDisconnectTimeout: function _onDisconnectTimeout() {},\n\n              /** PrivateFunction: _abortAllRequests\n               *  _Private_ helper function that makes sure all pending requests are aborted.\n               */\n              _abortAllRequests: function _abortAllRequests() {},\n\n              /** PrivateFunction: _onError\n               * _Private_ function to handle websockets errors.\n               *\n               * Parameters:\n               * (Object) error - The websocket error.\n               */\n              _onError: function _onError(error) {\n                Strophe$2.error(\"Websocket error \" + error);\n\n                this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, \"The WebSocket connection could not be established or was disconnected.\");\n\n                this._disconnect();\n              },\n\n              /** PrivateFunction: _onIdle\n               *  _Private_ function called by Strophe.Connection._onIdle\n               *\n               *  sends all queued stanzas\n               */\n              _onIdle: function _onIdle() {\n                var data = this._conn._data;\n\n                if (data.length > 0 && !this._conn.paused) {\n                  for (var i = 0; i < data.length; i++) {\n                    if (data[i] !== null) {\n                      var stanza = void 0;\n\n                      if (data[i] === \"restart\") {\n                        stanza = this._buildStream().tree();\n                      } else {\n                        stanza = data[i];\n                      }\n\n                      var rawStanza = Strophe$2.serialize(stanza);\n\n                      this._conn.xmlOutput(stanza);\n\n                      this._conn.rawOutput(rawStanza);\n\n                      this.socket.send(rawStanza);\n                    }\n                  }\n\n                  this._conn._data = [];\n                }\n              },\n\n              /** PrivateFunction: _onMessage\n               * _Private_ function to handle websockets messages.\n               *\n               * This function parses each of the messages as if they are full documents.\n               * [TODO : We may actually want to use a SAX Push parser].\n               *\n               * Since all XMPP traffic starts with\n               *  <stream:stream version='1.0'\n               *                 xml:lang='en'\n               *                 xmlns='jabber:client'\n               *                 xmlns:stream='http://etherx.jabber.org/streams'\n               *                 id='3697395463'\n               *                 from='SERVER'>\n               *\n               * The first stanza will always fail to be parsed.\n               *\n               * Additionally, the seconds stanza will always be <stream:features> with\n               * the stream NS defined in the previous stanza, so we need to 'force'\n               * the inclusion of the NS in this stanza.\n               *\n               * Parameters:\n               * (string) message - The websocket message.\n               */\n              _onMessage: function _onMessage(message) {\n                var elem; // check for closing stream\n\n                var close = '<close xmlns=\"urn:ietf:params:xml:ns:xmpp-framing\" />';\n\n                if (message.data === close) {\n                  this._conn.rawInput(close);\n\n                  this._conn.xmlInput(message);\n\n                  if (!this._conn.disconnecting) {\n                    this._conn._doDisconnect();\n                  }\n\n                  return;\n                } else if (message.data.search(\"<open \") === 0) {\n                  // This handles stream restarts\n                  elem = new DOMParser().parseFromString(message.data, \"text/xml\").documentElement;\n\n                  if (!this._handleStreamStart(elem)) {\n                    return;\n                  }\n                } else {\n                  var data = this._streamWrap(message.data);\n\n                  elem = new DOMParser().parseFromString(data, \"text/xml\").documentElement;\n                }\n\n                if (this._check_streamerror(elem, Strophe$2.Status.ERROR)) {\n                  return;\n                } //handle unavailable presence stanza before disconnecting\n\n\n                if (this._conn.disconnecting && elem.firstChild.nodeName === \"presence\" && elem.firstChild.getAttribute(\"type\") === \"unavailable\") {\n                  this._conn.xmlInput(elem);\n\n                  this._conn.rawInput(Strophe$2.serialize(elem)); // if we are already disconnecting we will ignore the unavailable stanza and\n                  // wait for the </stream:stream> tag before we close the connection\n\n\n                  return;\n                }\n\n                this._conn._dataRecv(elem, message.data);\n              },\n\n              /** PrivateFunction: _onOpen\n               * _Private_ function to handle websockets connection setup.\n               *\n               * The opening stream tag is sent here.\n               */\n              _onOpen: function _onOpen() {\n                Strophe$2.debug(\"Websocket open\");\n\n                var start = this._buildStream();\n\n                this._conn.xmlOutput(start.tree());\n\n                var startString = Strophe$2.serialize(start);\n\n                this._conn.rawOutput(startString);\n\n                this.socket.send(startString);\n              },\n\n              /** PrivateFunction: _reqToData\n               * _Private_ function to get a stanza out of a request.\n               *\n               * WebSockets don't use requests, so the passed argument is just returned.\n               *\n               *  Parameters:\n               *    (Object) stanza - The stanza.\n               *\n               *  Returns:\n               *    The stanza that was passed.\n               */\n              _reqToData: function _reqToData(stanza) {\n                return stanza;\n              },\n\n              /** PrivateFunction: _send\n               *  _Private_ part of the Connection.send function for WebSocket\n               *\n               * Just flushes the messages that are in the queue\n               */\n              _send: function _send() {\n                this._conn.flush();\n              },\n\n              /** PrivateFunction: _sendRestart\n               *\n               *  Send an xmpp:restart stanza.\n               */\n              _sendRestart: function _sendRestart() {\n                clearTimeout(this._conn._idleTimeout);\n\n                this._conn._onIdle.bind(this._conn)();\n              }\n            };\n\n            global$1.Strophe = core.Strophe;\n            global$1.$build = core.$build;\n            global$1.$iq = core.$iq;\n            global$1.$msg = core.$msg;\n            global$1.$pres = core.$pres;\n\n            return core;\n\n}));\n","(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(require('strophe.js')) :\n\ttypeof define === 'function' && define.amd ? define(['strophe.js'], factory) :\n\t(factory(global.window));\n}(this, (function (strophe_js) { 'use strict';\n\nstrophe_js.Strophe.addConnectionPlugin('disco',\n{\n    _connection: null,\n    _identities : [],\n    _features : [],\n    _items : [],\n    /** Function: init\n     * Plugin init\n     *\n     * Parameters:\n     *   (Strophe.Connection) conn - Strophe connection\n     */\n    init: function(conn)\n    {\n    this._connection = conn;\n        this._identities = [];\n        this._features   = [];\n        this._items      = [];\n        // disco info\n        conn.addHandler(this._onDiscoInfo.bind(this), strophe_js.Strophe.NS.DISCO_INFO, 'iq', 'get', null, null);\n        // disco items\n        conn.addHandler(this._onDiscoItems.bind(this), strophe_js.Strophe.NS.DISCO_ITEMS, 'iq', 'get', null, null);\n    },\n    /** Function: addIdentity\n     * See http://xmpp.org/registrar/disco-categories.html\n     * Parameters:\n     *   (String) category - category of identity (like client, automation, etc ...)\n     *   (String) type - type of identity (like pc, web, bot , etc ...)\n     *   (String) name - name of identity in natural language\n     *   (String) lang - lang of name parameter\n     *\n     * Returns:\n     *   Boolean\n     */\n    addIdentity: function(category, type, name, lang)\n    {\n        for (var i=0; i<this._identities.length; i++)\n        {\n            if (this._identities[i].category == category &&\n                this._identities[i].type == type &&\n                this._identities[i].name == name &&\n                this._identities[i].lang == lang)\n            {\n                return false;\n            }\n        }\n        this._identities.push({category: category, type: type, name: name, lang: lang});\n        return true;\n    },\n    /** Function: addFeature\n     *\n     * Parameters:\n     *   (String) var_name - feature name (like jabber:iq:version)\n     *\n     * Returns:\n     *   boolean\n     */\n    addFeature: function(var_name)\n    {\n        for (var i=0; i<this._features.length; i++)\n        {\n             if (this._features[i] == var_name)\n                 return false;\n        }\n        this._features.push(var_name);\n        return true;\n    },\n    /** Function: removeFeature\n     *\n     * Parameters:\n     *   (String) var_name - feature name (like jabber:iq:version)\n     *\n     * Returns:\n     *   boolean\n     */\n    removeFeature: function(var_name)\n    {\n        for (var i=0; i<this._features.length; i++)\n        {\n             if (this._features[i] === var_name){\n                 this._features.splice(i,1);\n                 return true;\n             }\n        }\n        return false;\n    },\n    /** Function: addItem\n     *\n     * Parameters:\n     *   (String) jid\n     *   (String) name\n     *   (String) node\n     *   (Function) call_back\n     *\n     * Returns:\n     *   boolean\n     */\n    addItem: function(jid, name, node, call_back)\n    {\n        if (node && !call_back)\n            return false;\n        this._items.push({jid: jid, name: name, node: node, call_back: call_back});\n        return true;\n    },\n    /** Function: info\n     * Info query\n     *\n     * Parameters:\n     *   (Function) call_back\n     *   (String) jid\n     *   (String) node\n     */\n    info: function(jid, node, success, error, timeout)\n    {\n        var attrs = {xmlns: strophe_js.Strophe.NS.DISCO_INFO};\n        if (node)\n            attrs.node = node;\n\n        var info = strophe_js.$iq({from:this._connection.jid,\n                         to:jid, type:'get'}).c('query', attrs);\n        this._connection.sendIQ(info, success, error, timeout);\n    },\n    /** Function: items\n     * Items query\n     *\n     * Parameters:\n     *   (Function) call_back\n     *   (String) jid\n     *   (String) node\n     */\n    items: function(jid, node, success, error, timeout)\n    {\n        var attrs = {xmlns: strophe_js.Strophe.NS.DISCO_ITEMS};\n        if (node)\n            attrs.node = node;\n\n        var items = strophe_js.$iq({from:this._connection.jid,\n                         to:jid, type:'get'}).c('query', attrs);\n        this._connection.sendIQ(items, success, error, timeout);\n    },\n\n    /** PrivateFunction: _buildIQResult\n     */\n    _buildIQResult: function(stanza, query_attrs)\n    {\n        var id   =  stanza.getAttribute('id');\n        var from = stanza.getAttribute('from');\n        var iqresult = strophe_js.$iq({type: 'result', id: id});\n\n        if (from !== null) {\n            iqresult.attrs({to: from});\n        }\n\n        return iqresult.c('query', query_attrs);\n    },\n\n    /** PrivateFunction: _onDiscoInfo\n     * Called when receive info request\n     */\n    _onDiscoInfo: function(stanza)\n    {\n        var node = stanza.getElementsByTagName('query')[0].getAttribute('node');\n        var attrs = {xmlns: strophe_js.Strophe.NS.DISCO_INFO};\n        var i;\n        if (node)\n        {\n            attrs.node = node;\n        }\n        var iqresult = this._buildIQResult(stanza, attrs);\n        for (i=0; i<this._identities.length; i++)\n        {\n            attrs = {category: this._identities[i].category,\n                         type    : this._identities[i].type};\n            if (this._identities[i].name)\n                attrs.name = this._identities[i].name;\n            if (this._identities[i].lang)\n                attrs['xml:lang'] = this._identities[i].lang;\n            iqresult.c('identity', attrs).up();\n        }\n        for (i=0; i<this._features.length; i++)\n        {\n            iqresult.c('feature', {'var':this._features[i]}).up();\n        }\n        this._connection.send(iqresult.tree());\n        return true;\n    },\n    /** PrivateFunction: _onDiscoItems\n     * Called when receive items request\n     */\n    _onDiscoItems: function(stanza)\n    {\n        var query_attrs = {xmlns: strophe_js.Strophe.NS.DISCO_ITEMS};\n        var node = stanza.getElementsByTagName('query')[0].getAttribute('node');\n        var items, i;\n        if (node)\n        {\n            query_attrs.node = node;\n            items = [];\n            for (i = 0; i < this._items.length; i++)\n            {\n                if (this._items[i].node == node)\n                {\n                    items = this._items[i].call_back(stanza);\n                    break;\n                }\n            }\n        }\n        else\n        {\n            items = this._items;\n        }\n        var iqresult = this._buildIQResult(stanza, query_attrs);\n        for (i = 0; i < items.length; i++)\n        {\n            var attrs = {jid:  items[i].jid};\n            if (items[i].name)\n                attrs.name = items[i].name;\n            if (items[i].node)\n                attrs.node = items[i].node;\n            iqresult.c('item', attrs).up();\n        }\n        this._connection.send(iqresult.tree());\n        return true;\n    }\n});\n\n})));\n//# sourceMappingURL=strophe.disco.js.map\n","(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(require('strophe.js')) :\n\ttypeof define === 'function' && define.amd ? define(['strophe.js'], factory) :\n\t(global = global || self, factory(global.window));\n}(this, (function (strophe_js) { 'use strict';\n\n\t/**\n\t* StropheJS - Stream Management XEP-0198\n\t*\n\t* This plugin implements stream management ACK capabilities of the specs XEP-0198.\n\t* Note: Resumption is not supported in this current implementation.\n\t*\n\t* Reference: http://xmpp.org/extensions/xep-0198.html\n\t*\n\t* @class streamManagement\n\t*/\n\tstrophe_js.Strophe.addConnectionPlugin('streamManagement', {\n\n\t\t/**\n\t\t* @property {Boolean} logging: Set to true to enable logging regarding out of sync stanzas.\n\t\t*/\n\t\tlogging: false,\n\n\t\t/**\n\t\t* @property {Boolean} autoSendCountOnEveryIncomingStanza: Set to true to send an 'a' response after every stanza.\n\t\t* @default false\n\t\t* @public\n\t\t*/\n\t\tautoSendCountOnEveryIncomingStanza: false,\n\n\t\t/**\n\t\t* @property {Integer} requestResponseInterval: Set this value to send a request for counter on very interval\n\t\t* number of stanzas sent. Set to 0 to disable.\n\t\t* @default 5\n\t\t* @public\n\t\t*/\n\t\trequestResponseInterval: 5,\n\n\t\t/**\n\t\t* @property {Pointer} _c: Strophe connection instance.\n\t\t* @private\n\t\t*/\n\t\t_c: null,\n\n\t\t/**\n\t\t* @property {String} _NS XMPP Namespace.\n\t\t* @private\n\t\t*/\n\t\t_NS: 'urn:xmpp:sm:3',\n\n\t\t/**\n\t\t* @property {Boolean} _isStreamManagementEnabled\n\t\t* @private\n\t\t*/\n\t\t_isStreamManagementEnabled: false,\n\n\t\t/**\n\t\t* @property {Integer} _serverProcesssedStanzasCounter: Keeps count of stanzas confirmed processed by the server.\n\t\t* The server is the source of truth of this value. It is the 'h' attribute on the latest 'a' element received\n\t\t* from the server.\n\t\t* @private\n\t\t*/\n\t\t_serverProcesssedStanzasCounter: null,\n\n\t\t/**\n\t\t* @property {Integer} _clientProcessedStanzasCounter: Counter of stanzas received by the client from the server.\n\t\t* Client is the source of truth of this value. It is the 'h' attribute in the 'a' sent from the client to\n\t\t* the server.\n\t\t* @private\n\t\t*/\n\t\t_clientProcessedStanzasCounter: null,\n\n\t\t/**\n\t\t* @property {Integer} _clientSentStanzasCounter\n\t\t* @private\n\t\t*/\n\t\t_clientSentStanzasCounter: null,\n\n\t\t/**\n\t\t* Stores a reference to Strophe connection xmlOutput function to wrap counting functionality.\n\t\t* @method _originalXMLOutput\n\t\t* @type {Handler}\n\t\t* @private\n\t\t*/\n\t\t_originalXMLOutput: null,\n\n\t\t/**\n\t\t* @property {Handler} _requestHandler: Stores reference to handler that process count request from server.\n\t\t* @private\n\t\t*/\n\t\t_requestHandler: null,\n\n\t\t/**\n\t\t* @property {Handler} _incomingHandler: Stores reference to handler that processes incoming stanzas count.\n\t\t* @private\n\t\t*/\n\t\t_incomingHandler: null,\n\n\t\t/**\n\t\t* @property {Integer} _requestResponseIntervalCount: Counts sent stanzas since last response request.\n\t\t*/\n\t\t_requestResponseIntervalCount: 0,\n\n\t\t/**\n\t\t * @property {boolean} _isSupported: indicates whether or not the server has advertised support for the stream\n\t\t * management namespace.\n\t\t */\n\t\t_isSupported: false,\n\n\t\t/**\n\t\t* @property {Queue} _unacknowledgedStanzas: Maintains a list of packet ids for stanzas which have yet to be acknowledged.\n\t\t*/\n\t\t_unacknowledgedStanzas: [],\n\n\t\t/**\n\t\t* @property {Array} _acknowledgedStanzaListeners: Stores callbacks for each stanza acknowledged by the server.\n\t\t* Provides the packet id of the stanza as a parameter.\n\t\t* @private\n\t\t*/\n\t\t_acknowledgedStanzaListeners: [],\n\n\t\taddAcknowledgedStanzaListener: function(listener) {\n\t\t\tthis._acknowledgedStanzaListeners.push(listener);\n\t\t},\n\n\t\tenable: function(resume) {\n\t\t\tif (!this._isSupported) {\n\t\t\t\tthrow new Error('The server doesn\\'t support urn:xmpp:sm:3 namespace');\n\t\t\t} else if (this._connectionStatus !== strophe_js.Strophe.Status.CONNECTED) {\n\t\t\t\tthrow new Error('enable() can only be called in the CONNECTED state');\n\t\t\t}\n\t\t\tthis._c.send(strophe_js.$build('enable', { xmlns: this._NS, resume }));\n\t\t\tthis._c.flush();\n\t\t\tthis._c.pause();\n\t\t},\n\n\t\tgetResumeToken: function() {\n\t\t\treturn this._resumeToken;\n\t\t},\n\n\t\tisSupported() {\n\t\t\treturn this._isSupported;\n\t\t},\n\n\t\tresume: function() {\n\t\t\tif (!this.getResumeToken()) {\n\t\t\t\tthrow new Error('No resume token');\n\t\t\t}\n\t\t\tif (this._connectionStatus !== strophe_js.Strophe.Status.DISCONNECTED) {\n\t\t\t\tthrow new Error('resume() can only be called in the DISCONNECTED state');\n\t\t\t}\n\n\t\t\tthis._c.options.explicitResourceBinding = true;\n\t\t\tthis._resuming = true;\n\n\t\t\tthis._originalConnect.apply(this._c, this._connectArgs);\n\t\t},\n\n\t\trequestAcknowledgement: function() {\n\t\t\tif (this._connectionStatus !== strophe_js.Strophe.Status.CONNECTED) {\n\t\t\t\tthrow new Error('requestAcknowledgement() can only be called in the CONNECTED state');\n\t\t\t}\n\t\t\tthis._requestResponseIntervalCount = 0;\n\t\t\tthis._c.send(strophe_js.$build('r', { xmlns: this._NS }));\n\t\t},\n\n\t\tgetOutgoingCounter: function() {\n\t\t\treturn this._clientSentStanzasCounter;\n\t\t},\n\n\t\tgetIncomingCounter: function() {\n\t\t\treturn this._clientProcessedStanzasCounter;\n\t\t},\n\n\t\tinit: function(conn) {\n\t\t\tthis._c = conn;\n\t\t\tstrophe_js.Strophe.addNamespace('SM', this._NS);\n\n\t\t\t// Storing original xmlOutput function to use additional logic\n\t\t\tthis._originalXMLOutput = this._c.xmlOutput;\n\t\t\tthis._c.xmlOutput = this.xmlOutput.bind(this);\n\n\t\t\tthis._originalConnect = this._c.connect;\n\t\t\tthis._c.connect = this._interceptConnectArgs.bind(this);\n\n\t\t\tthis._originalOnStreamFeaturesAfterSASL = this._c._onStreamFeaturesAfterSASL;\n\t\t\tthis._c._onStreamFeaturesAfterSASL = this._onStreamFeaturesAfterSASL.bind(this);\n\n\t\t\tthis._originalDoDisconnect = this._c._doDisconnect;\n\t\t\tthis._c._doDisconnect = this._interceptDoDisconnect.bind(this);\n\n\t\t\tthis._originalDisconnect = this._c.disconnect;\n\t\t\tthis._c.disconnect = this._interceptDisconnect.bind(this);\n\t\t},\n\n\t\t_interceptDisconnect: function() {\n\t\t\tthis._resumeToken = undefined;\n\t\t\tthis._originalDisconnect.apply(this._c, arguments);\n\t\t},\n\n\t\t_interceptDoDisconnect: function() {\n\t\t\tif (this.getResumeToken()\n\t\t\t\t\t&& !this._resuming\n\t\t\t\t\t&& this._c.connected && !this._c.disconnecting) {\n\t\t\t\tthis._resumeState = {\n\t\t\t\t\thandlers: this._c.handlers,\n\t\t\t\t\ttimedHandlers: this._c.timedHandlers,\n\t\t\t\t\tremoveTimeds: this._c.removeTimeds,\n\t\t\t\t\tremoveHandlers: this._c.removeHandlers,\n\t\t\t\t\taddTimeds: this._c.addTimeds,\n\t\t\t\t\taddHandlers: this._c.addHandlers\n\t\t\t\t};\n\t\t\t\tthis._storedJid = this._c.jid;\n\n\t\t\t\tthis.logging && strophe_js.Strophe.debug('SM stored resume state, handler count: ' + this._resumeState.handlers.length);\n\t\t\t}\n\n\t\t\t// Remove any queued stanzas from the buffer that have failed to send while the socket was closed,\n\t\t\t// as they would interfere with the resume flow. They will be resent anyway.\n\t\t\tthis._c._data = [];\n\n\t\t\tthis._originalDoDisconnect.apply(this._c, arguments);\n\t\t},\n\n\t\t_interceptConnectArgs: function() {\n\t\t\tthis._connectArgs = arguments;\n\n\t\t\tthis._originalConnect.apply(this._c, arguments);\n\t\t},\n\n\t\t_onStreamFeaturesAfterSASL: function(elem) {\n\t\t\tthis._isSupported = elem.getElementsByTagNameNS(this._NS, \"sm\").length > 0;\n\n\t\t\treturn this._originalOnStreamFeaturesAfterSASL.apply(this._c, arguments);\n\t\t},\n\n\t\tstatusChanged: function (status) {\n\t\t\tthis._connectionStatus = status;\n\t\t\tif (!this.getResumeToken()\n\t\t\t\t&& (status === strophe_js.Strophe.Status.CONNECTED || status === strophe_js.Strophe.Status.DISCONNECTED)) {\n\t\t\t\tthis.logging && strophe_js.Strophe.debug('SM reset state');\n\n\t\t\t\tthis._serverProcesssedStanzasCounter = 0;\n\t\t\t\tthis._clientProcessedStanzasCounter = 0;\n\n\t\t\t\tthis._clientSentStanzasCounter = 0;\n\n\t\t\t\tthis._isStreamManagementEnabled = false;\n\t\t\t\tthis._requestResponseIntervalCount = 0;\n\n\t\t\t\t// FIXME not described in JSDocs\n\t\t\t\tthis._resuming = false;\n\n\t\t\t\tif (status === strophe_js.Strophe.Status.DISCONNECTED) {\n\t\t\t\t\tthis._isSupported = false;\n\t\t\t\t}\n\n\t\t\t\tthis._unacknowledgedStanzas = [];\n\n\t\t\t\tif (this._requestHandler) {\n\t\t\t\t\tthis._c.deleteHandler(this._requestHandler);\n\t\t\t\t}\n\n\t\t\t\tif (this._incomingHandler) {\n\t\t\t\t\tthis._c.deleteHandler(this._incomingHandler);\n\t\t\t\t}\n\n\t\t\t\tthis._requestHandler = this._c.addHandler(this._handleServerRequestHandler.bind(this), this._NS, 'r');\n\t\t\t\tthis._ackHandler = this._c.addHandler(this._handleServerAck.bind(this), this._NS, 'a');\n\t\t\t\tthis._incomingHandler = this._c.addHandler(this._incomingStanzaHandler.bind(this));\n\n\t\t\t\t// FIXME handler instances stored, but never used\n\t\t\t\tthis._enabledHandler = this._c._addSysHandler(this._handleEnabled.bind(this), this._NS, 'enabled');\n\t\t\t\tthis._resumeFailedHandler = this._c._addSysHandler(this._handleResumeFailed.bind(this), this._NS, 'failed');\n\t\t\t\tthis._resumedHandler =  this._c._addSysHandler(this._handleResumed.bind(this), this._NS,'resumed');\n\n\t\t\t} else if (status === strophe_js.Strophe.Status.BINDREQUIRED)  {\n\t\t\t\tthis._c.jid = this._storedJid;\n\n\t\t\t\t// Restore Strophe handlers\n\t\t\t\tfor (const property in this._resumeState) {\n\t\t\t\t\tthis._c[property] = this._resumeState[property];\n\t\t\t\t}\n\n\t\t\t\t// FIXME check conditions if there's session ID and if enabled\n\t\t\t\tthis._c.send(strophe_js.$build('resume', {\n\t\t\t\t\txmlns: this._NS,\n\t\t\t\t\th: this._clientProcessedStanzasCounter,\n\t\t\t\t\tprevid: this._resumeToken\n\t\t\t\t}));\n\t\t\t\tthis._c.flush();\n\t\t\t} else if (status === strophe_js.Strophe.Status.ERROR) {\n\t\t\t\tthis.logging && strophe_js.Strophe.debug('SM cleared resume token on error');\n\t\t\t\tthis._resumeToken = undefined;\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t* This method overrides the send method implemented by Strophe.Connection\n\t\t* to count outgoing stanzas\n\t\t*\n\t\t* @method Send\n\t\t* @public\n\t\t*/\n\t\txmlOutput: function(elem) {\n\t\t\tif (strophe_js.Strophe.isTagEqual(elem, 'iq') ||\n\t\t\t\tstrophe_js.Strophe.isTagEqual(elem, 'presence') ||\n\t\t\t\tstrophe_js.Strophe.isTagEqual(elem, 'message')) {\n\t\t\t\tthis._increaseSentStanzasCounter(elem);\n\t\t\t}\n\n\t\t\treturn this._originalXMLOutput.call(this._c, elem);\n\t\t},\n\n\t\t_handleEnabled: function(elem) {\n\t\t\tthis._isStreamManagementEnabled = true;\n\t\t\t// FIXME fail if requested, but not enabled\n\t\t\tthis._resumeToken = elem.getAttribute('resume') === 'true' && elem.getAttribute('id');\n\n\t\t\tthis._c.resume();\n\n\t\t\treturn true;\n\t\t},\n\n\t\t_handleResumeFailed: function(elem) {\n\t\t\tconst error = elem && elem.firstElementChild && elem.firstElementChild.tagName;\n\n\t\t\tthis._c._changeConnectStatus(strophe_js.Strophe.Status.ERROR, error, elem);\n\t\t\tthis._c._doDisconnect();\n\n\t\t\treturn true;\n\t\t},\n\n\t\t_handleResumed: function(elem) {\n\t\t\t// FIXME check if in the correct state\n\t\t\tvar handledCount = parseInt(elem.getAttribute('h'));\n\t\t\tthis._handleAcknowledgedStanzas(handledCount, this._serverProcesssedStanzasCounter);\n\n\t\t\tthis._resuming = false;\n\t\t\tthis._c.do_bind = false; // No need to bind our resource anymore\n\t\t\tthis._c.authenticated = true;\n\t\t\tthis._c.restored = true;\n\n\t\t\tif (this._unacknowledgedStanzas.length > 0) {\n\t\t\t\tthis.logging && strophe_js.Strophe.debug('SM Sending unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t\t\tfor(const stanza of this._unacknowledgedStanzas) {\n\t\t\t\t\tthis._c.send(stanza);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.logging && strophe_js.Strophe.debug('SM No unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t\t}\n\n\t\t\tthis._c._changeConnectStatus(strophe_js.Strophe.Status.CONNECTED, null);\n\n\t\t\treturn true;\n\t\t},\n\n\t\t_incomingStanzaHandler: function(elem) {\n\t\t\tif (strophe_js.Strophe.isTagEqual(elem, 'iq') || strophe_js.Strophe.isTagEqual(elem, 'presence') || strophe_js.Strophe.isTagEqual(elem, 'message'))  {\n\t\t\t\tthis._increaseReceivedStanzasCounter();\n\n\t\t\t\tif (this.autoSendCountOnEveryIncomingStanza) {\n\t\t\t\t\tthis._answerProcessedStanzas();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t},\n\n\t\t_handleAcknowledgedStanzas: function(reportedHandledCount, lastKnownHandledCount) {\n\t\t\tvar delta = reportedHandledCount - lastKnownHandledCount;\n\n\t\t\tif (delta < 0) {\n\t\t\t\tthis._throwError('New reported stanza count lower than previous. New: ' + reportedHandledCount + ' - Previous: ' + lastKnownHandledCount);\n\t\t\t}\n\n\t\t\tif (delta > this._unacknowledgedStanzas.length) {\n\t\t\t\tthis._throwError('Higher reported acknowledge count than unacknowledged stanzas. Reported Acknowledge Count: ' + delta + ' - Unacknowledge Stanza Count: ' + this._unacknowledgedStanzas.length + ' - New: ' + reportedHandledCount + ' - Previous: ' + lastKnownHandledCount);\n\t\t\t}\n\n\t\t\tfor(var i = 0; i < delta; i++) {\n\t\t\t\tvar stanza = this._unacknowledgedStanzas.shift();\n\t\t\t\tfor (var j = 0; j < this._acknowledgedStanzaListeners.length; j++) {\n\t\t\t\t\tthis._acknowledgedStanzaListeners[j](stanza);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.logging && this._unacknowledgedStanzas.length > 0) {\n\t\t\t\tstrophe_js.Strophe.warn('SM Unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t\t}\n\n\t\t\tthis._serverProcesssedStanzasCounter = reportedHandledCount;\n\n\t\t\tif (this.requestResponseInterval > 0) {\n\t\t\t\tthis._requestResponseIntervalCount = 0;\n\t\t\t}\n\t\t},\n\n\t\t_handleServerRequestHandler: function() {\n\t\t\tthis._answerProcessedStanzas();\n\n\t\t\treturn true;\n\t\t},\n\n\t\t_handleServerAck: function(elem){\n\t\t\tvar handledCount = parseInt(elem.getAttribute('h'));\n\t\t\tthis._handleAcknowledgedStanzas(handledCount, this._serverProcesssedStanzasCounter);\n\n\t\t\treturn true;\n\t\t},\n\n\t\t_answerProcessedStanzas: function() {\n\t\t\tif (this._isStreamManagementEnabled) {\n\t\t\t\tthis._c.send(strophe_js.$build('a', { xmlns: this._NS, h: this._clientProcessedStanzasCounter }));\n\t\t\t}\n\t\t},\n\n\t\t_increaseSentStanzasCounter: function(elem) {\n\t\t\tif (this._isStreamManagementEnabled) {\n\t\t\t\tif (this._unacknowledgedStanzas.indexOf(elem) !== -1) {\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tthis._unacknowledgedStanzas.push(elem);\n\t\t\t\tthis._clientSentStanzasCounter++;\n\n\t\t\t\tif (this.requestResponseInterval > 0) {\n\t\t\t\t\tthis._requestResponseIntervalCount++;\n\n\t\t\t\t\tif (this._requestResponseIntervalCount === this.requestResponseInterval) {\n\t\t\t\t\t\t// FIXME Can not call send from onIdle.\n\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\tif (this._connectionStatus === strophe_js.Strophe.Status.CONNECTED) {\n\t\t\t\t\t\t\t\tthis.requestAcknowledgement();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t_increaseReceivedStanzasCounter: function() {\n\t\t\tif (this._isStreamManagementEnabled) {\n\t\t\t\tthis._clientProcessedStanzasCounter++;\n\t\t\t}\n\t\t},\n\n\t\t_throwError: function(msg) {\n\t\t\tstrophe_js.Strophe.error(msg);\n\t\t\tthrow new Error(msg);\n\t\t}\n\n\t});\n\n})));\n//# sourceMappingURL=strophe.stream-management.js.map\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction bytesToUuid(buf, offset) {\n  const i = offset || 0;\n  const bth = byteToHex; // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n\n  return (bth[buf[i + 0]] + bth[buf[i + 1]] + bth[buf[i + 2]] + bth[buf[i + 3]] + '-' + bth[buf[i + 4]] + bth[buf[i + 5]] + '-' + bth[buf[i + 6]] + bth[buf[i + 7]] + '-' + bth[buf[i + 8]] + bth[buf[i + 9]] + '-' + bth[buf[i + 10]] + bth[buf[i + 11]] + bth[buf[i + 12]] + bth[buf[i + 13]] + bth[buf[i + 14]] + bth[buf[i + 15]]).toLowerCase();\n}\n\nvar _default = bytesToUuid;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"v1\", {\n  enumerable: true,\n  get: function () {\n    return _v.default;\n  }\n});\nObject.defineProperty(exports, \"v3\", {\n  enumerable: true,\n  get: function () {\n    return _v2.default;\n  }\n});\nObject.defineProperty(exports, \"v4\", {\n  enumerable: true,\n  get: function () {\n    return _v3.default;\n  }\n});\nObject.defineProperty(exports, \"v5\", {\n  enumerable: true,\n  get: function () {\n    return _v4.default;\n  }\n});\n\nvar _v = _interopRequireDefault(require(\"./v1.js\"));\n\nvar _v2 = _interopRequireDefault(require(\"./v3.js\"));\n\nvar _v3 = _interopRequireDefault(require(\"./v4.js\"));\n\nvar _v4 = _interopRequireDefault(require(\"./v5.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n/*\n * Browser-compatible JavaScript MD5\n *\n * Modification of JavaScript MD5\n * https://github.com/blueimp/JavaScript-MD5\n *\n * Copyright 2011, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n *\n * Based on\n * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n * Digest Algorithm, as defined in RFC 1321.\n * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n * Distributed under the BSD License\n * See http://pajhome.org.uk/crypt/md5 for more info.\n */\nfunction md5(bytes) {\n  if (typeof bytes === 'string') {\n    const msg = unescape(encodeURIComponent(bytes)); // UTF8 escape\n\n    bytes = new Uint8Array(msg.length);\n\n    for (let i = 0; i < msg.length; ++i) {\n      bytes[i] = msg.charCodeAt(i);\n    }\n  }\n\n  return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));\n}\n/*\n * Convert an array of little-endian words to an array of bytes\n */\n\n\nfunction md5ToHexEncodedArray(input) {\n  const output = [];\n  const length32 = input.length * 32;\n  const hexTab = '0123456789abcdef';\n\n  for (let i = 0; i < length32; i += 8) {\n    const x = input[i >> 5] >>> i % 32 & 0xff;\n    const hex = parseInt(hexTab.charAt(x >>> 4 & 0x0f) + hexTab.charAt(x & 0x0f), 16);\n    output.push(hex);\n  }\n\n  return output;\n}\n/**\n * Calculate output length with padding and bit length\n */\n\n\nfunction getOutputLength(inputLength8) {\n  return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;\n}\n/*\n * Calculate the MD5 of an array of little-endian words, and a bit length.\n */\n\n\nfunction wordsToMd5(x, len) {\n  /* append padding */\n  x[len >> 5] |= 0x80 << len % 32;\n  x[getOutputLength(len) - 1] = len;\n  let a = 1732584193;\n  let b = -271733879;\n  let c = -1732584194;\n  let d = 271733878;\n\n  for (let i = 0; i < x.length; i += 16) {\n    const olda = a;\n    const oldb = b;\n    const oldc = c;\n    const oldd = d;\n    a = md5ff(a, b, c, d, x[i], 7, -680876936);\n    d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);\n    c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);\n    b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);\n    a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);\n    d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);\n    c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);\n    b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);\n    a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);\n    d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);\n    c = md5ff(c, d, a, b, x[i + 10], 17, -42063);\n    b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);\n    a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);\n    d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);\n    c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);\n    b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);\n    a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);\n    d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);\n    c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);\n    b = md5gg(b, c, d, a, x[i], 20, -373897302);\n    a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);\n    d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);\n    c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);\n    b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);\n    a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);\n    d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);\n    c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);\n    b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);\n    a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);\n    d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);\n    c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);\n    b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);\n    a = md5hh(a, b, c, d, x[i + 5], 4, -378558);\n    d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);\n    c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);\n    b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);\n    a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);\n    d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);\n    c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);\n    b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);\n    a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);\n    d = md5hh(d, a, b, c, x[i], 11, -358537222);\n    c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);\n    b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);\n    a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);\n    d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);\n    c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);\n    b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);\n    a = md5ii(a, b, c, d, x[i], 6, -198630844);\n    d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);\n    c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);\n    b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);\n    a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);\n    d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);\n    c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);\n    b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);\n    a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);\n    d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);\n    c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);\n    b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);\n    a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);\n    d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);\n    c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);\n    b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);\n    a = safeAdd(a, olda);\n    b = safeAdd(b, oldb);\n    c = safeAdd(c, oldc);\n    d = safeAdd(d, oldd);\n  }\n\n  return [a, b, c, d];\n}\n/*\n * Convert an array bytes to an array of little-endian words\n * Characters >255 have their high-byte silently ignored.\n */\n\n\nfunction bytesToWords(input) {\n  if (input.length === 0) {\n    return [];\n  }\n\n  const length8 = input.length * 8;\n  const output = new Uint32Array(getOutputLength(length8));\n\n  for (let i = 0; i < length8; i += 8) {\n    output[i >> 5] |= (input[i / 8] & 0xff) << i % 32;\n  }\n\n  return output;\n}\n/*\n * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n * to work around bugs in some JS interpreters.\n */\n\n\nfunction safeAdd(x, y) {\n  const lsw = (x & 0xffff) + (y & 0xffff);\n  const msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n  return msw << 16 | lsw & 0xffff;\n}\n/*\n * Bitwise rotate a 32-bit number to the left.\n */\n\n\nfunction bitRotateLeft(num, cnt) {\n  return num << cnt | num >>> 32 - cnt;\n}\n/*\n * These functions implement the four basic operations the algorithm uses.\n */\n\n\nfunction md5cmn(q, a, b, x, s, t) {\n  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);\n}\n\nfunction md5ff(a, b, c, d, x, s, t) {\n  return md5cmn(b & c | ~b & d, a, b, x, s, t);\n}\n\nfunction md5gg(a, b, c, d, x, s, t) {\n  return md5cmn(b & d | c & ~d, a, b, x, s, t);\n}\n\nfunction md5hh(a, b, c, d, x, s, t) {\n  return md5cmn(b ^ c ^ d, a, b, x, s, t);\n}\n\nfunction md5ii(a, b, c, d, x, s, t) {\n  return md5cmn(c ^ (b | ~d), a, b, x, s, t);\n}\n\nvar _default = md5;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = rng;\n// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\n// getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n// find the complete implementation of crypto (msCrypto) on IE11.\nconst getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\nconst rnds8 = new Uint8Array(16);\n\nfunction rng() {\n  if (!getRandomValues) {\n    throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n  }\n\n  return getRandomValues(rnds8);\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n// Adapted from Chris Veness' SHA1 code at\n// http://www.movable-type.co.uk/scripts/sha1.html\nfunction f(s, x, y, z) {\n  switch (s) {\n    case 0:\n      return x & y ^ ~x & z;\n\n    case 1:\n      return x ^ y ^ z;\n\n    case 2:\n      return x & y ^ x & z ^ y & z;\n\n    case 3:\n      return x ^ y ^ z;\n  }\n}\n\nfunction ROTL(x, n) {\n  return x << n | x >>> 32 - n;\n}\n\nfunction sha1(bytes) {\n  const K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6];\n  const H = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];\n\n  if (typeof bytes === 'string') {\n    const msg = unescape(encodeURIComponent(bytes)); // UTF8 escape\n\n    bytes = [];\n\n    for (let i = 0; i < msg.length; ++i) {\n      bytes.push(msg.charCodeAt(i));\n    }\n  }\n\n  bytes.push(0x80);\n  const l = bytes.length / 4 + 2;\n  const N = Math.ceil(l / 16);\n  const M = new Array(N);\n\n  for (let i = 0; i < N; ++i) {\n    const arr = new Uint32Array(16);\n\n    for (let j = 0; j < 16; ++j) {\n      arr[j] = bytes[i * 64 + j * 4] << 24 | bytes[i * 64 + j * 4 + 1] << 16 | bytes[i * 64 + j * 4 + 2] << 8 | bytes[i * 64 + j * 4 + 3];\n    }\n\n    M[i] = arr;\n  }\n\n  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);\n  M[N - 1][14] = Math.floor(M[N - 1][14]);\n  M[N - 1][15] = (bytes.length - 1) * 8 & 0xffffffff;\n\n  for (let i = 0; i < N; ++i) {\n    const W = new Uint32Array(80);\n\n    for (let t = 0; t < 16; ++t) {\n      W[t] = M[i][t];\n    }\n\n    for (let t = 16; t < 80; ++t) {\n      W[t] = ROTL(W[t - 3] ^ W[t - 8] ^ W[t - 14] ^ W[t - 16], 1);\n    }\n\n    let a = H[0];\n    let b = H[1];\n    let c = H[2];\n    let d = H[3];\n    let e = H[4];\n\n    for (let t = 0; t < 80; ++t) {\n      const s = Math.floor(t / 20);\n      const T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[t] >>> 0;\n      e = d;\n      d = c;\n      c = ROTL(b, 30) >>> 0;\n      b = a;\n      a = T;\n    }\n\n    H[0] = H[0] + a >>> 0;\n    H[1] = H[1] + b >>> 0;\n    H[2] = H[2] + c >>> 0;\n    H[3] = H[3] + d >>> 0;\n    H[4] = H[4] + e >>> 0;\n  }\n\n  return [H[0] >> 24 & 0xff, H[0] >> 16 & 0xff, H[0] >> 8 & 0xff, H[0] & 0xff, H[1] >> 24 & 0xff, H[1] >> 16 & 0xff, H[1] >> 8 & 0xff, H[1] & 0xff, H[2] >> 24 & 0xff, H[2] >> 16 & 0xff, H[2] >> 8 & 0xff, H[2] & 0xff, H[3] >> 24 & 0xff, H[3] >> 16 & 0xff, H[3] >> 8 & 0xff, H[3] & 0xff, H[4] >> 24 & 0xff, H[4] >> 16 & 0xff, H[4] >> 8 & 0xff, H[4] & 0xff];\n}\n\nvar _default = sha1;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _rng = _interopRequireDefault(require(\"./rng.js\"));\n\nvar _bytesToUuid = _interopRequireDefault(require(\"./bytesToUuid.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\nlet _nodeId;\n\nlet _clockseq; // Previous uuid creation time\n\n\nlet _lastMSecs = 0;\nlet _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details\n\nfunction v1(options, buf, offset) {\n  let i = buf && offset || 0;\n  const b = buf || [];\n  options = options || {};\n  let node = options.node || _nodeId;\n  let clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not\n  // specified.  We do this lazily to minimize issues related to insufficient\n  // system entropy.  See #189\n\n  if (node == null || clockseq == null) {\n    const seedBytes = options.random || (options.rng || _rng.default)();\n\n    if (node == null) {\n      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];\n    }\n\n    if (clockseq == null) {\n      // Per 4.2.2, randomize (14 bit) clockseq\n      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;\n    }\n  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n\n\n  let msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n\n  let nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)\n\n  const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression\n\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n\n\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  } // Per 4.2.1.2 Throw error if too many uuids are requested\n\n\n  if (nsecs >= 10000) {\n    throw new Error(\"uuid.v1(): Can't create more than 10M uuids/sec\");\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n\n  msecs += 12219292800000; // `time_low`\n\n  const tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff; // `time_mid`\n\n  const tmh = msecs / 0x100000000 * 10000 & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff; // `time_high_and_version`\n\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n\n  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n\n  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`\n\n  b[i++] = clockseq & 0xff; // `node`\n\n  for (let n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf || (0, _bytesToUuid.default)(b);\n}\n\nvar _default = v1;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _v = _interopRequireDefault(require(\"./v35.js\"));\n\nvar _md = _interopRequireDefault(require(\"./md5.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst v3 = (0, _v.default)('v3', 0x30, _md.default);\nvar _default = v3;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\nexports.URL = exports.DNS = void 0;\n\nvar _bytesToUuid = _interopRequireDefault(require(\"./bytesToUuid.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction uuidToBytes(uuid) {\n  // Note: We assume we're being passed a valid uuid string\n  const bytes = [];\n  uuid.replace(/[a-fA-F0-9]{2}/g, function (hex) {\n    bytes.push(parseInt(hex, 16));\n  });\n  return bytes;\n}\n\nfunction stringToBytes(str) {\n  str = unescape(encodeURIComponent(str)); // UTF8 escape\n\n  const bytes = [];\n\n  for (let i = 0; i < str.length; ++i) {\n    bytes.push(str.charCodeAt(i));\n  }\n\n  return bytes;\n}\n\nconst DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';\nexports.DNS = DNS;\nconst URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';\nexports.URL = URL;\n\nfunction _default(name, version, hashfunc) {\n  function generateUUID(value, namespace, buf, offset) {\n    const off = buf && offset || 0;\n    if (typeof value === 'string') value = stringToBytes(value);\n    if (typeof namespace === 'string') namespace = uuidToBytes(namespace);\n\n    if (!Array.isArray(value)) {\n      throw TypeError('value must be an array of bytes');\n    }\n\n    if (!Array.isArray(namespace) || namespace.length !== 16) {\n      throw TypeError('namespace must be uuid string or an Array of 16 byte values');\n    } // Per 4.3\n\n\n    const bytes = hashfunc(namespace.concat(value));\n    bytes[6] = bytes[6] & 0x0f | version;\n    bytes[8] = bytes[8] & 0x3f | 0x80;\n\n    if (buf) {\n      for (let idx = 0; idx < 16; ++idx) {\n        buf[off + idx] = bytes[idx];\n      }\n    }\n\n    return buf || (0, _bytesToUuid.default)(bytes);\n  } // Function#name is not settable on some platforms (#270)\n\n\n  try {\n    generateUUID.name = name; // eslint-disable-next-line no-empty\n  } catch (err) {} // For CommonJS default export support\n\n\n  generateUUID.DNS = DNS;\n  generateUUID.URL = URL;\n  return generateUUID;\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _rng = _interopRequireDefault(require(\"./rng.js\"));\n\nvar _bytesToUuid = _interopRequireDefault(require(\"./bytesToUuid.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction v4(options, buf, offset) {\n  if (typeof options === 'string') {\n    buf = options === 'binary' ? new Uint8Array(16) : null;\n    options = null;\n  }\n\n  options = options || {};\n\n  const rnds = options.random || (options.rng || _rng.default)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    const start = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[start + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return (0, _bytesToUuid.default)(rnds);\n}\n\nvar _default = v4;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _v = _interopRequireDefault(require(\"./v35.js\"));\n\nvar _sha = _interopRequireDefault(require(\"./sha1.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst v5 = (0, _v.default)('v5', 0x50, _sha.default);\nvar _default = v5;\nexports.default = _default;","\"use strict\";function e(e,r){if(!s)return!1;const n=e.buffer;let u=g.get(n);if(null==u){if((u=t.validate(n))&&r)try{new t.Instance(new t.Module(n)).exports[0]()}catch(e){u=!1}g.set(n,u)}return u}const t=WebAssembly,r=(...e)=>Uint8Array.of(0,97,115,109,1,0,0,0,...e),n=(...e)=>Uint32Array.of(1836278016,1,...e),u=(...e)=>n(1610679297,33751040,...e,40239360,259),i=(...e)=>r(1,4,1,96,0,0,3,2,1,0,...e,11,0,10,4,110,97,109,101,2,3,1,0,0),o=(...e)=>Uint16Array.of(24832,28019,1,0,1025,24577,0,515,1,...e),a=(...e)=>o(...e,2842,4096,28164,28001,357,260,256,560,259,0),s=\"object\"==typeof t,f=e=>s&&\"function\"==typeof e,g=new WeakMap,l=n(1610679553,58589440,117440770,805372165,101318656,1107297281,268438272,1835101700,17039717,36700416,259),c=o(773,1,2561,269,11,65,65,65,3068,2816,2560,28164,28001,613,259,0),p=n(1610679297,33751040,134873089,100664833,185276736),y=r(2,8,1,1,97,1,98,3,127,1,6,6,1,127,1,65,0,11,7,5,1,1,97,3,1,0,8,4,110,97,109,101,2,1,0),b=Uint16Array.of(24832,28019,1,0,1537,24577,512,32639,515,1,2058,1537,16640,16640,2816,2560,28164,28001,613,259,0),m=a(3082,2561,17152,0,0,252),A=a(2058,1537,16640,49152),d=u(101318657,301990913,268438272,1835101700,17039717),U=i(5,4,1,3,1,1,10,7,1,5,0,254,3,0),x=u(84344833,6357249,17369600,4259847,186257917,1845758464),w=i(10,7,1,5,0,208,112,26);module.exports={support:(t=1)=>s&&e(Uint32Array.of(1836278016,t)),get supportStreaming(){return f(t.instantiateStreaming)},feature:{get bigInt(){return e(l,!0)},get bulk(){return e(c)},get exceptions(){return e(p)},get mutableGlobal(){return e(y)},get multiValue(){return e(b)},get saturateConversions(){return e(m)},get signExtensions(){return e(A)},get tailCall(){return e(d)},get threads(){return e(U)},get simd(){return e(x)},get references(){return e(w)},get typeReflection(){return f(t.Memory.type)},get funcReferences(){return f(t.Function)}}};","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\n\nlet logDisabled_ = true;\nlet deprecationWarnings_ = true;\n\n/**\n * Extract browser version out of the provided user agent string.\n *\n * @param {!string} uastring userAgent string.\n * @param {!string} expr Regular expression used as match criteria.\n * @param {!number} pos position in the version string to be returned.\n * @return {!number} browser version.\n */\nexport function extractVersion(uastring, expr, pos) {\n  const match = uastring.match(expr);\n  return match && match.length >= pos && parseInt(match[pos], 10);\n}\n\n// Wraps the peerconnection event eventNameToWrap in a function\n// which returns the modified event object (or false to prevent\n// the event).\nexport function wrapPeerConnectionEvent(window, eventNameToWrap, wrapper) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  const proto = window.RTCPeerConnection.prototype;\n  const nativeAddEventListener = proto.addEventListener;\n  proto.addEventListener = function(nativeEventName, cb) {\n    if (nativeEventName !== eventNameToWrap) {\n      return nativeAddEventListener.apply(this, arguments);\n    }\n    const wrappedCallback = (e) => {\n      const modifiedEvent = wrapper(e);\n      if (modifiedEvent) {\n        if (cb.handleEvent) {\n          cb.handleEvent(modifiedEvent);\n        } else {\n          cb(modifiedEvent);\n        }\n      }\n    };\n    this._eventMap = this._eventMap || {};\n    if (!this._eventMap[eventNameToWrap]) {\n      this._eventMap[eventNameToWrap] = new Map();\n    }\n    this._eventMap[eventNameToWrap].set(cb, wrappedCallback);\n    return nativeAddEventListener.apply(this, [nativeEventName,\n      wrappedCallback]);\n  };\n\n  const nativeRemoveEventListener = proto.removeEventListener;\n  proto.removeEventListener = function(nativeEventName, cb) {\n    if (nativeEventName !== eventNameToWrap || !this._eventMap\n        || !this._eventMap[eventNameToWrap]) {\n      return nativeRemoveEventListener.apply(this, arguments);\n    }\n    if (!this._eventMap[eventNameToWrap].has(cb)) {\n      return nativeRemoveEventListener.apply(this, arguments);\n    }\n    const unwrappedCb = this._eventMap[eventNameToWrap].get(cb);\n    this._eventMap[eventNameToWrap].delete(cb);\n    if (this._eventMap[eventNameToWrap].size === 0) {\n      delete this._eventMap[eventNameToWrap];\n    }\n    if (Object.keys(this._eventMap).length === 0) {\n      delete this._eventMap;\n    }\n    return nativeRemoveEventListener.apply(this, [nativeEventName,\n      unwrappedCb]);\n  };\n\n  Object.defineProperty(proto, 'on' + eventNameToWrap, {\n    get() {\n      return this['_on' + eventNameToWrap];\n    },\n    set(cb) {\n      if (this['_on' + eventNameToWrap]) {\n        this.removeEventListener(eventNameToWrap,\n            this['_on' + eventNameToWrap]);\n        delete this['_on' + eventNameToWrap];\n      }\n      if (cb) {\n        this.addEventListener(eventNameToWrap,\n            this['_on' + eventNameToWrap] = cb);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n}\n\nexport function disableLog(bool) {\n  if (typeof bool !== 'boolean') {\n    return new Error('Argument type: ' + typeof bool +\n        '. Please use a boolean.');\n  }\n  logDisabled_ = bool;\n  return (bool) ? 'adapter.js logging disabled' :\n      'adapter.js logging enabled';\n}\n\n/**\n * Disable or enable deprecation warnings\n * @param {!boolean} bool set to true to disable warnings.\n */\nexport function disableWarnings(bool) {\n  if (typeof bool !== 'boolean') {\n    return new Error('Argument type: ' + typeof bool +\n        '. Please use a boolean.');\n  }\n  deprecationWarnings_ = !bool;\n  return 'adapter.js deprecation warnings ' + (bool ? 'disabled' : 'enabled');\n}\n\nexport function log() {\n  if (typeof window === 'object') {\n    if (logDisabled_) {\n      return;\n    }\n    if (typeof console !== 'undefined' && typeof console.log === 'function') {\n      console.log.apply(console, arguments);\n    }\n  }\n}\n\n/**\n * Shows a deprecation warning suggesting the modern and spec-compatible API.\n */\nexport function deprecated(oldMethod, newMethod) {\n  if (!deprecationWarnings_) {\n    return;\n  }\n  console.warn(oldMethod + ' is deprecated, please use ' + newMethod +\n      ' instead.');\n}\n\n/**\n * Browser detector.\n *\n * @return {object} result containing browser and version\n *     properties.\n */\nexport function detectBrowser(window) {\n  // Returned result object.\n  const result = {browser: null, version: null};\n\n  // Fail early if it's not a browser\n  if (typeof window === 'undefined' || !window.navigator) {\n    result.browser = 'Not a browser.';\n    return result;\n  }\n\n  const {navigator} = window;\n\n  if (navigator.mozGetUserMedia) { // Firefox.\n    result.browser = 'firefox';\n    result.version = extractVersion(navigator.userAgent,\n        /Firefox\\/(\\d+)\\./, 1);\n  } else if (navigator.webkitGetUserMedia ||\n      (window.isSecureContext === false && window.webkitRTCPeerConnection &&\n       !window.RTCIceGatherer)) {\n    // Chrome, Chromium, Webview, Opera.\n    // Version matches Chrome/WebRTC version.\n    // Chrome 74 removed webkitGetUserMedia on http as well so we need the\n    // more complicated fallback to webkitRTCPeerConnection.\n    result.browser = 'chrome';\n    result.version = extractVersion(navigator.userAgent,\n        /Chrom(e|ium)\\/(\\d+)\\./, 2);\n  } else if (window.RTCPeerConnection &&\n      navigator.userAgent.match(/AppleWebKit\\/(\\d+)\\./)) { // Safari.\n    result.browser = 'safari';\n    result.version = extractVersion(navigator.userAgent,\n        /AppleWebKit\\/(\\d+)\\./, 1);\n    result.supportsUnifiedPlan = window.RTCRtpTransceiver &&\n        'currentDirection' in window.RTCRtpTransceiver.prototype;\n  } else { // Default fallthrough: not supported.\n    result.browser = 'Not a supported browser.';\n    return result;\n  }\n\n  return result;\n}\n\n/**\n * Checks if something is an object.\n *\n * @param {*} val The something you want to check.\n * @return true if val is an object, false otherwise.\n */\nfunction isObject(val) {\n  return Object.prototype.toString.call(val) === '[object Object]';\n}\n\n/**\n * Remove all empty objects and undefined values\n * from a nested object -- an enhanced and vanilla version\n * of Lodash's `compact`.\n */\nexport function compactObject(data) {\n  if (!isObject(data)) {\n    return data;\n  }\n\n  return Object.keys(data).reduce(function(accumulator, key) {\n    const isObj = isObject(data[key]);\n    const value = isObj ? compactObject(data[key]) : data[key];\n    const isEmptyObject = isObj && !Object.keys(value).length;\n    if (value === undefined || isEmptyObject) {\n      return accumulator;\n    }\n    return Object.assign(accumulator, {[key]: value});\n  }, {});\n}\n\n/* iterates the stats graph recursively. */\nexport function walkStats(stats, base, resultSet) {\n  if (!base || resultSet.has(base.id)) {\n    return;\n  }\n  resultSet.set(base.id, base);\n  Object.keys(base).forEach(name => {\n    if (name.endsWith('Id')) {\n      walkStats(stats, stats.get(base[name]), resultSet);\n    } else if (name.endsWith('Ids')) {\n      base[name].forEach(id => {\n        walkStats(stats, stats.get(id), resultSet);\n      });\n    }\n  });\n}\n\n/* filter getStats for a sender/receiver track. */\nexport function filterStats(result, track, outbound) {\n  const streamStatsType = outbound ? 'outbound-rtp' : 'inbound-rtp';\n  const filteredResult = new Map();\n  if (track === null) {\n    return filteredResult;\n  }\n  const trackStats = [];\n  result.forEach(value => {\n    if (value.type === 'track' &&\n        value.trackIdentifier === track.id) {\n      trackStats.push(value);\n    }\n  });\n  trackStats.forEach(trackStat => {\n    result.forEach(stats => {\n      if (stats.type === streamStatsType && stats.trackId === trackStat.id) {\n        walkStats(result, stats, filteredResult);\n      }\n    });\n  });\n  return filteredResult;\n}\n\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\nimport * as utils from '../utils.js';\nconst logging = utils.log;\n\nexport function shimGetUserMedia(window, browserDetails) {\n  const navigator = window && window.navigator;\n\n  if (!navigator.mediaDevices) {\n    return;\n  }\n\n  const constraintsToChrome_ = function(c) {\n    if (typeof c !== 'object' || c.mandatory || c.optional) {\n      return c;\n    }\n    const cc = {};\n    Object.keys(c).forEach(key => {\n      if (key === 'require' || key === 'advanced' || key === 'mediaSource') {\n        return;\n      }\n      const r = (typeof c[key] === 'object') ? c[key] : {ideal: c[key]};\n      if (r.exact !== undefined && typeof r.exact === 'number') {\n        r.min = r.max = r.exact;\n      }\n      const oldname_ = function(prefix, name) {\n        if (prefix) {\n          return prefix + name.charAt(0).toUpperCase() + name.slice(1);\n        }\n        return (name === 'deviceId') ? 'sourceId' : name;\n      };\n      if (r.ideal !== undefined) {\n        cc.optional = cc.optional || [];\n        let oc = {};\n        if (typeof r.ideal === 'number') {\n          oc[oldname_('min', key)] = r.ideal;\n          cc.optional.push(oc);\n          oc = {};\n          oc[oldname_('max', key)] = r.ideal;\n          cc.optional.push(oc);\n        } else {\n          oc[oldname_('', key)] = r.ideal;\n          cc.optional.push(oc);\n        }\n      }\n      if (r.exact !== undefined && typeof r.exact !== 'number') {\n        cc.mandatory = cc.mandatory || {};\n        cc.mandatory[oldname_('', key)] = r.exact;\n      } else {\n        ['min', 'max'].forEach(mix => {\n          if (r[mix] !== undefined) {\n            cc.mandatory = cc.mandatory || {};\n            cc.mandatory[oldname_(mix, key)] = r[mix];\n          }\n        });\n      }\n    });\n    if (c.advanced) {\n      cc.optional = (cc.optional || []).concat(c.advanced);\n    }\n    return cc;\n  };\n\n  const shimConstraints_ = function(constraints, func) {\n    if (browserDetails.version >= 61) {\n      return func(constraints);\n    }\n    constraints = JSON.parse(JSON.stringify(constraints));\n    if (constraints && typeof constraints.audio === 'object') {\n      const remap = function(obj, a, b) {\n        if (a in obj && !(b in obj)) {\n          obj[b] = obj[a];\n          delete obj[a];\n        }\n      };\n      constraints = JSON.parse(JSON.stringify(constraints));\n      remap(constraints.audio, 'autoGainControl', 'googAutoGainControl');\n      remap(constraints.audio, 'noiseSuppression', 'googNoiseSuppression');\n      constraints.audio = constraintsToChrome_(constraints.audio);\n    }\n    if (constraints && typeof constraints.video === 'object') {\n      // Shim facingMode for mobile & surface pro.\n      let face = constraints.video.facingMode;\n      face = face && ((typeof face === 'object') ? face : {ideal: face});\n      const getSupportedFacingModeLies = browserDetails.version < 66;\n\n      if ((face && (face.exact === 'user' || face.exact === 'environment' ||\n                    face.ideal === 'user' || face.ideal === 'environment')) &&\n          !(navigator.mediaDevices.getSupportedConstraints &&\n            navigator.mediaDevices.getSupportedConstraints().facingMode &&\n            !getSupportedFacingModeLies)) {\n        delete constraints.video.facingMode;\n        let matches;\n        if (face.exact === 'environment' || face.ideal === 'environment') {\n          matches = ['back', 'rear'];\n        } else if (face.exact === 'user' || face.ideal === 'user') {\n          matches = ['front'];\n        }\n        if (matches) {\n          // Look for matches in label, or use last cam for back (typical).\n          return navigator.mediaDevices.enumerateDevices()\n          .then(devices => {\n            devices = devices.filter(d => d.kind === 'videoinput');\n            let dev = devices.find(d => matches.some(match =>\n              d.label.toLowerCase().includes(match)));\n            if (!dev && devices.length && matches.includes('back')) {\n              dev = devices[devices.length - 1]; // more likely the back cam\n            }\n            if (dev) {\n              constraints.video.deviceId = face.exact ? {exact: dev.deviceId} :\n                                                        {ideal: dev.deviceId};\n            }\n            constraints.video = constraintsToChrome_(constraints.video);\n            logging('chrome: ' + JSON.stringify(constraints));\n            return func(constraints);\n          });\n        }\n      }\n      constraints.video = constraintsToChrome_(constraints.video);\n    }\n    logging('chrome: ' + JSON.stringify(constraints));\n    return func(constraints);\n  };\n\n  const shimError_ = function(e) {\n    if (browserDetails.version >= 64) {\n      return e;\n    }\n    return {\n      name: {\n        PermissionDeniedError: 'NotAllowedError',\n        PermissionDismissedError: 'NotAllowedError',\n        InvalidStateError: 'NotAllowedError',\n        DevicesNotFoundError: 'NotFoundError',\n        ConstraintNotSatisfiedError: 'OverconstrainedError',\n        TrackStartError: 'NotReadableError',\n        MediaDeviceFailedDueToShutdown: 'NotAllowedError',\n        MediaDeviceKillSwitchOn: 'NotAllowedError',\n        TabCaptureError: 'AbortError',\n        ScreenCaptureError: 'AbortError',\n        DeviceCaptureError: 'AbortError'\n      }[e.name] || e.name,\n      message: e.message,\n      constraint: e.constraint || e.constraintName,\n      toString() {\n        return this.name + (this.message && ': ') + this.message;\n      }\n    };\n  };\n\n  const getUserMedia_ = function(constraints, onSuccess, onError) {\n    shimConstraints_(constraints, c => {\n      navigator.webkitGetUserMedia(c, onSuccess, e => {\n        if (onError) {\n          onError(shimError_(e));\n        }\n      });\n    });\n  };\n  navigator.getUserMedia = getUserMedia_.bind(navigator);\n\n  // Even though Chrome 45 has navigator.mediaDevices and a getUserMedia\n  // function which returns a Promise, it does not accept spec-style\n  // constraints.\n  if (navigator.mediaDevices.getUserMedia) {\n    const origGetUserMedia = navigator.mediaDevices.getUserMedia.\n        bind(navigator.mediaDevices);\n    navigator.mediaDevices.getUserMedia = function(cs) {\n      return shimConstraints_(cs, c => origGetUserMedia(c).then(stream => {\n        if (c.audio && !stream.getAudioTracks().length ||\n            c.video && !stream.getVideoTracks().length) {\n          stream.getTracks().forEach(track => {\n            track.stop();\n          });\n          throw new DOMException('', 'NotFoundError');\n        }\n        return stream;\n      }, e => Promise.reject(shimError_(e))));\n    };\n  }\n}\n","/*\n *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\nexport function shimGetDisplayMedia(window, getSourceId) {\n  if (window.navigator.mediaDevices &&\n    'getDisplayMedia' in window.navigator.mediaDevices) {\n    return;\n  }\n  if (!(window.navigator.mediaDevices)) {\n    return;\n  }\n  // getSourceId is a function that returns a promise resolving with\n  // the sourceId of the screen/window/tab to be shared.\n  if (typeof getSourceId !== 'function') {\n    console.error('shimGetDisplayMedia: getSourceId argument is not ' +\n        'a function');\n    return;\n  }\n  window.navigator.mediaDevices.getDisplayMedia =\n    function getDisplayMedia(constraints) {\n      return getSourceId(constraints)\n        .then(sourceId => {\n          const widthSpecified = constraints.video && constraints.video.width;\n          const heightSpecified = constraints.video &&\n            constraints.video.height;\n          const frameRateSpecified = constraints.video &&\n            constraints.video.frameRate;\n          constraints.video = {\n            mandatory: {\n              chromeMediaSource: 'desktop',\n              chromeMediaSourceId: sourceId,\n              maxFrameRate: frameRateSpecified || 3\n            }\n          };\n          if (widthSpecified) {\n            constraints.video.mandatory.maxWidth = widthSpecified;\n          }\n          if (heightSpecified) {\n            constraints.video.mandatory.maxHeight = heightSpecified;\n          }\n          return window.navigator.mediaDevices.getUserMedia(constraints);\n        });\n    };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\nimport * as utils from '../utils.js';\n\nexport {shimGetUserMedia} from './getusermedia';\nexport {shimGetDisplayMedia} from './getdisplaymedia';\n\nexport function shimMediaStream(window) {\n  window.MediaStream = window.MediaStream || window.webkitMediaStream;\n}\n\nexport function shimOnTrack(window) {\n  if (typeof window === 'object' && window.RTCPeerConnection && !('ontrack' in\n      window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'ontrack', {\n      get() {\n        return this._ontrack;\n      },\n      set(f) {\n        if (this._ontrack) {\n          this.removeEventListener('track', this._ontrack);\n        }\n        this.addEventListener('track', this._ontrack = f);\n      },\n      enumerable: true,\n      configurable: true\n    });\n    const origSetRemoteDescription =\n        window.RTCPeerConnection.prototype.setRemoteDescription;\n    window.RTCPeerConnection.prototype.setRemoteDescription =\n      function setRemoteDescription() {\n        if (!this._ontrackpoly) {\n          this._ontrackpoly = (e) => {\n            // onaddstream does not fire when a track is added to an existing\n            // stream. But stream.onaddtrack is implemented so we use that.\n            e.stream.addEventListener('addtrack', te => {\n              let receiver;\n              if (window.RTCPeerConnection.prototype.getReceivers) {\n                receiver = this.getReceivers()\n                  .find(r => r.track && r.track.id === te.track.id);\n              } else {\n                receiver = {track: te.track};\n              }\n\n              const event = new Event('track');\n              event.track = te.track;\n              event.receiver = receiver;\n              event.transceiver = {receiver};\n              event.streams = [e.stream];\n              this.dispatchEvent(event);\n            });\n            e.stream.getTracks().forEach(track => {\n              let receiver;\n              if (window.RTCPeerConnection.prototype.getReceivers) {\n                receiver = this.getReceivers()\n                  .find(r => r.track && r.track.id === track.id);\n              } else {\n                receiver = {track};\n              }\n              const event = new Event('track');\n              event.track = track;\n              event.receiver = receiver;\n              event.transceiver = {receiver};\n              event.streams = [e.stream];\n              this.dispatchEvent(event);\n            });\n          };\n          this.addEventListener('addstream', this._ontrackpoly);\n        }\n        return origSetRemoteDescription.apply(this, arguments);\n      };\n  } else {\n    // even if RTCRtpTransceiver is in window, it is only used and\n    // emitted in unified-plan. Unfortunately this means we need\n    // to unconditionally wrap the event.\n    utils.wrapPeerConnectionEvent(window, 'track', e => {\n      if (!e.transceiver) {\n        Object.defineProperty(e, 'transceiver',\n          {value: {receiver: e.receiver}});\n      }\n      return e;\n    });\n  }\n}\n\nexport function shimGetSendersWithDtmf(window) {\n  // Overrides addTrack/removeTrack, depends on shimAddTrackRemoveTrack.\n  if (typeof window === 'object' && window.RTCPeerConnection &&\n      !('getSenders' in window.RTCPeerConnection.prototype) &&\n      'createDTMFSender' in window.RTCPeerConnection.prototype) {\n    const shimSenderWithDtmf = function(pc, track) {\n      return {\n        track,\n        get dtmf() {\n          if (this._dtmf === undefined) {\n            if (track.kind === 'audio') {\n              this._dtmf = pc.createDTMFSender(track);\n            } else {\n              this._dtmf = null;\n            }\n          }\n          return this._dtmf;\n        },\n        _pc: pc\n      };\n    };\n\n    // augment addTrack when getSenders is not available.\n    if (!window.RTCPeerConnection.prototype.getSenders) {\n      window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n        this._senders = this._senders || [];\n        return this._senders.slice(); // return a copy of the internal state.\n      };\n      const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n      window.RTCPeerConnection.prototype.addTrack =\n        function addTrack(track, stream) {\n          let sender = origAddTrack.apply(this, arguments);\n          if (!sender) {\n            sender = shimSenderWithDtmf(this, track);\n            this._senders.push(sender);\n          }\n          return sender;\n        };\n\n      const origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;\n      window.RTCPeerConnection.prototype.removeTrack =\n        function removeTrack(sender) {\n          origRemoveTrack.apply(this, arguments);\n          const idx = this._senders.indexOf(sender);\n          if (idx !== -1) {\n            this._senders.splice(idx, 1);\n          }\n        };\n    }\n    const origAddStream = window.RTCPeerConnection.prototype.addStream;\n    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n      this._senders = this._senders || [];\n      origAddStream.apply(this, [stream]);\n      stream.getTracks().forEach(track => {\n        this._senders.push(shimSenderWithDtmf(this, track));\n      });\n    };\n\n    const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n    window.RTCPeerConnection.prototype.removeStream =\n      function removeStream(stream) {\n        this._senders = this._senders || [];\n        origRemoveStream.apply(this, [stream]);\n\n        stream.getTracks().forEach(track => {\n          const sender = this._senders.find(s => s.track === track);\n          if (sender) { // remove sender\n            this._senders.splice(this._senders.indexOf(sender), 1);\n          }\n        });\n      };\n  } else if (typeof window === 'object' && window.RTCPeerConnection &&\n             'getSenders' in window.RTCPeerConnection.prototype &&\n             'createDTMFSender' in window.RTCPeerConnection.prototype &&\n             window.RTCRtpSender &&\n             !('dtmf' in window.RTCRtpSender.prototype)) {\n    const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n    window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n      const senders = origGetSenders.apply(this, []);\n      senders.forEach(sender => sender._pc = this);\n      return senders;\n    };\n\n    Object.defineProperty(window.RTCRtpSender.prototype, 'dtmf', {\n      get() {\n        if (this._dtmf === undefined) {\n          if (this.track.kind === 'audio') {\n            this._dtmf = this._pc.createDTMFSender(this.track);\n          } else {\n            this._dtmf = null;\n          }\n        }\n        return this._dtmf;\n      }\n    });\n  }\n}\n\nexport function shimGetStats(window) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n\n  const origGetStats = window.RTCPeerConnection.prototype.getStats;\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    const [selector, onSucc, onErr] = arguments;\n\n    // If selector is a function then we are in the old style stats so just\n    // pass back the original getStats format to avoid breaking old users.\n    if (arguments.length > 0 && typeof selector === 'function') {\n      return origGetStats.apply(this, arguments);\n    }\n\n    // When spec-style getStats is supported, return those when called with\n    // either no arguments or the selector argument is null.\n    if (origGetStats.length === 0 && (arguments.length === 0 ||\n        typeof selector !== 'function')) {\n      return origGetStats.apply(this, []);\n    }\n\n    const fixChromeStats_ = function(response) {\n      const standardReport = {};\n      const reports = response.result();\n      reports.forEach(report => {\n        const standardStats = {\n          id: report.id,\n          timestamp: report.timestamp,\n          type: {\n            localcandidate: 'local-candidate',\n            remotecandidate: 'remote-candidate'\n          }[report.type] || report.type\n        };\n        report.names().forEach(name => {\n          standardStats[name] = report.stat(name);\n        });\n        standardReport[standardStats.id] = standardStats;\n      });\n\n      return standardReport;\n    };\n\n    // shim getStats with maplike support\n    const makeMapStats = function(stats) {\n      return new Map(Object.keys(stats).map(key => [key, stats[key]]));\n    };\n\n    if (arguments.length >= 2) {\n      const successCallbackWrapper_ = function(response) {\n        onSucc(makeMapStats(fixChromeStats_(response)));\n      };\n\n      return origGetStats.apply(this, [successCallbackWrapper_,\n        selector]);\n    }\n\n    // promise-support\n    return new Promise((resolve, reject) => {\n      origGetStats.apply(this, [\n        function(response) {\n          resolve(makeMapStats(fixChromeStats_(response)));\n        }, reject]);\n    }).then(onSucc, onErr);\n  };\n}\n\nexport function shimSenderReceiverGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\n      window.RTCRtpSender && window.RTCRtpReceiver)) {\n    return;\n  }\n\n  // shim sender stats.\n  if (!('getStats' in window.RTCRtpSender.prototype)) {\n    const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n    if (origGetSenders) {\n      window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n        const senders = origGetSenders.apply(this, []);\n        senders.forEach(sender => sender._pc = this);\n        return senders;\n      };\n    }\n\n    const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n    if (origAddTrack) {\n      window.RTCPeerConnection.prototype.addTrack = function addTrack() {\n        const sender = origAddTrack.apply(this, arguments);\n        sender._pc = this;\n        return sender;\n      };\n    }\n    window.RTCRtpSender.prototype.getStats = function getStats() {\n      const sender = this;\n      return this._pc.getStats().then(result =>\n        /* Note: this will include stats of all senders that\n         *   send a track with the same id as sender.track as\n         *   it is not possible to identify the RTCRtpSender.\n         */\n        utils.filterStats(result, sender.track, true));\n    };\n  }\n\n  // shim receiver stats.\n  if (!('getStats' in window.RTCRtpReceiver.prototype)) {\n    const origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;\n    if (origGetReceivers) {\n      window.RTCPeerConnection.prototype.getReceivers =\n        function getReceivers() {\n          const receivers = origGetReceivers.apply(this, []);\n          receivers.forEach(receiver => receiver._pc = this);\n          return receivers;\n        };\n    }\n    utils.wrapPeerConnectionEvent(window, 'track', e => {\n      e.receiver._pc = e.srcElement;\n      return e;\n    });\n    window.RTCRtpReceiver.prototype.getStats = function getStats() {\n      const receiver = this;\n      return this._pc.getStats().then(result =>\n        utils.filterStats(result, receiver.track, false));\n    };\n  }\n\n  if (!('getStats' in window.RTCRtpSender.prototype &&\n      'getStats' in window.RTCRtpReceiver.prototype)) {\n    return;\n  }\n\n  // shim RTCPeerConnection.getStats(track).\n  const origGetStats = window.RTCPeerConnection.prototype.getStats;\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    if (arguments.length > 0 &&\n        arguments[0] instanceof window.MediaStreamTrack) {\n      const track = arguments[0];\n      let sender;\n      let receiver;\n      let err;\n      this.getSenders().forEach(s => {\n        if (s.track === track) {\n          if (sender) {\n            err = true;\n          } else {\n            sender = s;\n          }\n        }\n      });\n      this.getReceivers().forEach(r => {\n        if (r.track === track) {\n          if (receiver) {\n            err = true;\n          } else {\n            receiver = r;\n          }\n        }\n        return r.track === track;\n      });\n      if (err || (sender && receiver)) {\n        return Promise.reject(new DOMException(\n          'There are more than one sender or receiver for the track.',\n          'InvalidAccessError'));\n      } else if (sender) {\n        return sender.getStats();\n      } else if (receiver) {\n        return receiver.getStats();\n      }\n      return Promise.reject(new DOMException(\n        'There is no sender or receiver for the track.',\n        'InvalidAccessError'));\n    }\n    return origGetStats.apply(this, arguments);\n  };\n}\n\nexport function shimAddTrackRemoveTrackWithNative(window) {\n  // shim addTrack/removeTrack with native variants in order to make\n  // the interactions with legacy getLocalStreams behave as in other browsers.\n  // Keeps a mapping stream.id => [stream, rtpsenders...]\n  window.RTCPeerConnection.prototype.getLocalStreams =\n    function getLocalStreams() {\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n      return Object.keys(this._shimmedLocalStreams)\n        .map(streamId => this._shimmedLocalStreams[streamId][0]);\n    };\n\n  const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n  window.RTCPeerConnection.prototype.addTrack =\n    function addTrack(track, stream) {\n      if (!stream) {\n        return origAddTrack.apply(this, arguments);\n      }\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n\n      const sender = origAddTrack.apply(this, arguments);\n      if (!this._shimmedLocalStreams[stream.id]) {\n        this._shimmedLocalStreams[stream.id] = [stream, sender];\n      } else if (this._shimmedLocalStreams[stream.id].indexOf(sender) === -1) {\n        this._shimmedLocalStreams[stream.id].push(sender);\n      }\n      return sender;\n    };\n\n  const origAddStream = window.RTCPeerConnection.prototype.addStream;\n  window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n    this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n\n    stream.getTracks().forEach(track => {\n      const alreadyExists = this.getSenders().find(s => s.track === track);\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.',\n            'InvalidAccessError');\n      }\n    });\n    const existingSenders = this.getSenders();\n    origAddStream.apply(this, arguments);\n    const newSenders = this.getSenders()\n      .filter(newSender => existingSenders.indexOf(newSender) === -1);\n    this._shimmedLocalStreams[stream.id] = [stream].concat(newSenders);\n  };\n\n  const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n  window.RTCPeerConnection.prototype.removeStream =\n    function removeStream(stream) {\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n      delete this._shimmedLocalStreams[stream.id];\n      return origRemoveStream.apply(this, arguments);\n    };\n\n  const origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;\n  window.RTCPeerConnection.prototype.removeTrack =\n    function removeTrack(sender) {\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n      if (sender) {\n        Object.keys(this._shimmedLocalStreams).forEach(streamId => {\n          const idx = this._shimmedLocalStreams[streamId].indexOf(sender);\n          if (idx !== -1) {\n            this._shimmedLocalStreams[streamId].splice(idx, 1);\n          }\n          if (this._shimmedLocalStreams[streamId].length === 1) {\n            delete this._shimmedLocalStreams[streamId];\n          }\n        });\n      }\n      return origRemoveTrack.apply(this, arguments);\n    };\n}\n\nexport function shimAddTrackRemoveTrack(window, browserDetails) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  // shim addTrack and removeTrack.\n  if (window.RTCPeerConnection.prototype.addTrack &&\n      browserDetails.version >= 65) {\n    return shimAddTrackRemoveTrackWithNative(window);\n  }\n\n  // also shim pc.getLocalStreams when addTrack is shimmed\n  // to return the original streams.\n  const origGetLocalStreams = window.RTCPeerConnection.prototype\n      .getLocalStreams;\n  window.RTCPeerConnection.prototype.getLocalStreams =\n    function getLocalStreams() {\n      const nativeStreams = origGetLocalStreams.apply(this);\n      this._reverseStreams = this._reverseStreams || {};\n      return nativeStreams.map(stream => this._reverseStreams[stream.id]);\n    };\n\n  const origAddStream = window.RTCPeerConnection.prototype.addStream;\n  window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n    this._streams = this._streams || {};\n    this._reverseStreams = this._reverseStreams || {};\n\n    stream.getTracks().forEach(track => {\n      const alreadyExists = this.getSenders().find(s => s.track === track);\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.',\n            'InvalidAccessError');\n      }\n    });\n    // Add identity mapping for consistency with addTrack.\n    // Unless this is being used with a stream from addTrack.\n    if (!this._reverseStreams[stream.id]) {\n      const newStream = new window.MediaStream(stream.getTracks());\n      this._streams[stream.id] = newStream;\n      this._reverseStreams[newStream.id] = stream;\n      stream = newStream;\n    }\n    origAddStream.apply(this, [stream]);\n  };\n\n  const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n  window.RTCPeerConnection.prototype.removeStream =\n    function removeStream(stream) {\n      this._streams = this._streams || {};\n      this._reverseStreams = this._reverseStreams || {};\n\n      origRemoveStream.apply(this, [(this._streams[stream.id] || stream)]);\n      delete this._reverseStreams[(this._streams[stream.id] ?\n          this._streams[stream.id].id : stream.id)];\n      delete this._streams[stream.id];\n    };\n\n  window.RTCPeerConnection.prototype.addTrack =\n    function addTrack(track, stream) {\n      if (this.signalingState === 'closed') {\n        throw new DOMException(\n          'The RTCPeerConnection\\'s signalingState is \\'closed\\'.',\n          'InvalidStateError');\n      }\n      const streams = [].slice.call(arguments, 1);\n      if (streams.length !== 1 ||\n          !streams[0].getTracks().find(t => t === track)) {\n        // this is not fully correct but all we can manage without\n        // [[associated MediaStreams]] internal slot.\n        throw new DOMException(\n          'The adapter.js addTrack polyfill only supports a single ' +\n          ' stream which is associated with the specified track.',\n          'NotSupportedError');\n      }\n\n      const alreadyExists = this.getSenders().find(s => s.track === track);\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.',\n            'InvalidAccessError');\n      }\n\n      this._streams = this._streams || {};\n      this._reverseStreams = this._reverseStreams || {};\n      const oldStream = this._streams[stream.id];\n      if (oldStream) {\n        // this is using odd Chrome behaviour, use with caution:\n        // https://bugs.chromium.org/p/webrtc/issues/detail?id=7815\n        // Note: we rely on the high-level addTrack/dtmf shim to\n        // create the sender with a dtmf sender.\n        oldStream.addTrack(track);\n\n        // Trigger ONN async.\n        Promise.resolve().then(() => {\n          this.dispatchEvent(new Event('negotiationneeded'));\n        });\n      } else {\n        const newStream = new window.MediaStream([track]);\n        this._streams[stream.id] = newStream;\n        this._reverseStreams[newStream.id] = stream;\n        this.addStream(newStream);\n      }\n      return this.getSenders().find(s => s.track === track);\n    };\n\n  // replace the internal stream id with the external one and\n  // vice versa.\n  function replaceInternalStreamId(pc, description) {\n    let sdp = description.sdp;\n    Object.keys(pc._reverseStreams || []).forEach(internalId => {\n      const externalStream = pc._reverseStreams[internalId];\n      const internalStream = pc._streams[externalStream.id];\n      sdp = sdp.replace(new RegExp(internalStream.id, 'g'),\n          externalStream.id);\n    });\n    return new RTCSessionDescription({\n      type: description.type,\n      sdp\n    });\n  }\n  function replaceExternalStreamId(pc, description) {\n    let sdp = description.sdp;\n    Object.keys(pc._reverseStreams || []).forEach(internalId => {\n      const externalStream = pc._reverseStreams[internalId];\n      const internalStream = pc._streams[externalStream.id];\n      sdp = sdp.replace(new RegExp(externalStream.id, 'g'),\n          internalStream.id);\n    });\n    return new RTCSessionDescription({\n      type: description.type,\n      sdp\n    });\n  }\n  ['createOffer', 'createAnswer'].forEach(function(method) {\n    const nativeMethod = window.RTCPeerConnection.prototype[method];\n    const methodObj = {[method]() {\n      const args = arguments;\n      const isLegacyCall = arguments.length &&\n          typeof arguments[0] === 'function';\n      if (isLegacyCall) {\n        return nativeMethod.apply(this, [\n          (description) => {\n            const desc = replaceInternalStreamId(this, description);\n            args[0].apply(null, [desc]);\n          },\n          (err) => {\n            if (args[1]) {\n              args[1].apply(null, err);\n            }\n          }, arguments[2]\n        ]);\n      }\n      return nativeMethod.apply(this, arguments)\n      .then(description => replaceInternalStreamId(this, description));\n    }};\n    window.RTCPeerConnection.prototype[method] = methodObj[method];\n  });\n\n  const origSetLocalDescription =\n      window.RTCPeerConnection.prototype.setLocalDescription;\n  window.RTCPeerConnection.prototype.setLocalDescription =\n    function setLocalDescription() {\n      if (!arguments.length || !arguments[0].type) {\n        return origSetLocalDescription.apply(this, arguments);\n      }\n      arguments[0] = replaceExternalStreamId(this, arguments[0]);\n      return origSetLocalDescription.apply(this, arguments);\n    };\n\n  // TODO: mangle getStats: https://w3c.github.io/webrtc-stats/#dom-rtcmediastreamstats-streamidentifier\n\n  const origLocalDescription = Object.getOwnPropertyDescriptor(\n      window.RTCPeerConnection.prototype, 'localDescription');\n  Object.defineProperty(window.RTCPeerConnection.prototype,\n      'localDescription', {\n        get() {\n          const description = origLocalDescription.get.apply(this);\n          if (description.type === '') {\n            return description;\n          }\n          return replaceInternalStreamId(this, description);\n        }\n      });\n\n  window.RTCPeerConnection.prototype.removeTrack =\n    function removeTrack(sender) {\n      if (this.signalingState === 'closed') {\n        throw new DOMException(\n          'The RTCPeerConnection\\'s signalingState is \\'closed\\'.',\n          'InvalidStateError');\n      }\n      // We can not yet check for sender instanceof RTCRtpSender\n      // since we shim RTPSender. So we check if sender._pc is set.\n      if (!sender._pc) {\n        throw new DOMException('Argument 1 of RTCPeerConnection.removeTrack ' +\n            'does not implement interface RTCRtpSender.', 'TypeError');\n      }\n      const isLocal = sender._pc === this;\n      if (!isLocal) {\n        throw new DOMException('Sender was not created by this connection.',\n            'InvalidAccessError');\n      }\n\n      // Search for the native stream the senders track belongs to.\n      this._streams = this._streams || {};\n      let stream;\n      Object.keys(this._streams).forEach(streamid => {\n        const hasTrack = this._streams[streamid].getTracks()\n          .find(track => sender.track === track);\n        if (hasTrack) {\n          stream = this._streams[streamid];\n        }\n      });\n\n      if (stream) {\n        if (stream.getTracks().length === 1) {\n          // if this is the last track of the stream, remove the stream. This\n          // takes care of any shimmed _senders.\n          this.removeStream(this._reverseStreams[stream.id]);\n        } else {\n          // relying on the same odd chrome behaviour as above.\n          stream.removeTrack(sender.track);\n        }\n        this.dispatchEvent(new Event('negotiationneeded'));\n      }\n    };\n}\n\nexport function shimPeerConnection(window, browserDetails) {\n  if (!window.RTCPeerConnection && window.webkitRTCPeerConnection) {\n    // very basic support for old versions.\n    window.RTCPeerConnection = window.webkitRTCPeerConnection;\n  }\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n\n  // shim implicit creation of RTCSessionDescription/RTCIceCandidate\n  if (browserDetails.version < 53) {\n    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']\n        .forEach(function(method) {\n          const nativeMethod = window.RTCPeerConnection.prototype[method];\n          const methodObj = {[method]() {\n            arguments[0] = new ((method === 'addIceCandidate') ?\n                window.RTCIceCandidate :\n                window.RTCSessionDescription)(arguments[0]);\n            return nativeMethod.apply(this, arguments);\n          }};\n          window.RTCPeerConnection.prototype[method] = methodObj[method];\n        });\n  }\n}\n\n// Attempt to fix ONN in plan-b mode.\nexport function fixNegotiationNeeded(window, browserDetails) {\n  utils.wrapPeerConnectionEvent(window, 'negotiationneeded', e => {\n    const pc = e.target;\n    if (browserDetails.version < 72 || (pc.getConfiguration &&\n        pc.getConfiguration().sdpSemantics === 'plan-b')) {\n      if (pc.signalingState !== 'stable') {\n        return;\n      }\n    }\n    return e;\n  });\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport * as utils from '../utils';\n\nexport function shimGetUserMedia(window, browserDetails) {\n  const navigator = window && window.navigator;\n  const MediaStreamTrack = window && window.MediaStreamTrack;\n\n  navigator.getUserMedia = function(constraints, onSuccess, onError) {\n    // Replace Firefox 44+'s deprecation warning with unprefixed version.\n    utils.deprecated('navigator.getUserMedia',\n        'navigator.mediaDevices.getUserMedia');\n    navigator.mediaDevices.getUserMedia(constraints).then(onSuccess, onError);\n  };\n\n  if (!(browserDetails.version > 55 &&\n      'autoGainControl' in navigator.mediaDevices.getSupportedConstraints())) {\n    const remap = function(obj, a, b) {\n      if (a in obj && !(b in obj)) {\n        obj[b] = obj[a];\n        delete obj[a];\n      }\n    };\n\n    const nativeGetUserMedia = navigator.mediaDevices.getUserMedia.\n        bind(navigator.mediaDevices);\n    navigator.mediaDevices.getUserMedia = function(c) {\n      if (typeof c === 'object' && typeof c.audio === 'object') {\n        c = JSON.parse(JSON.stringify(c));\n        remap(c.audio, 'autoGainControl', 'mozAutoGainControl');\n        remap(c.audio, 'noiseSuppression', 'mozNoiseSuppression');\n      }\n      return nativeGetUserMedia(c);\n    };\n\n    if (MediaStreamTrack && MediaStreamTrack.prototype.getSettings) {\n      const nativeGetSettings = MediaStreamTrack.prototype.getSettings;\n      MediaStreamTrack.prototype.getSettings = function() {\n        const obj = nativeGetSettings.apply(this, arguments);\n        remap(obj, 'mozAutoGainControl', 'autoGainControl');\n        remap(obj, 'mozNoiseSuppression', 'noiseSuppression');\n        return obj;\n      };\n    }\n\n    if (MediaStreamTrack && MediaStreamTrack.prototype.applyConstraints) {\n      const nativeApplyConstraints =\n        MediaStreamTrack.prototype.applyConstraints;\n      MediaStreamTrack.prototype.applyConstraints = function(c) {\n        if (this.kind === 'audio' && typeof c === 'object') {\n          c = JSON.parse(JSON.stringify(c));\n          remap(c, 'autoGainControl', 'mozAutoGainControl');\n          remap(c, 'noiseSuppression', 'mozNoiseSuppression');\n        }\n        return nativeApplyConstraints.apply(this, [c]);\n      };\n    }\n  }\n}\n","/*\n *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nexport function shimGetDisplayMedia(window, preferredMediaSource) {\n  if (window.navigator.mediaDevices &&\n    'getDisplayMedia' in window.navigator.mediaDevices) {\n    return;\n  }\n  if (!(window.navigator.mediaDevices)) {\n    return;\n  }\n  window.navigator.mediaDevices.getDisplayMedia =\n    function getDisplayMedia(constraints) {\n      if (!(constraints && constraints.video)) {\n        const err = new DOMException('getDisplayMedia without video ' +\n            'constraints is undefined');\n        err.name = 'NotFoundError';\n        // from https://heycam.github.io/webidl/#idl-DOMException-error-names\n        err.code = 8;\n        return Promise.reject(err);\n      }\n      if (constraints.video === true) {\n        constraints.video = {mediaSource: preferredMediaSource};\n      } else {\n        constraints.video.mediaSource = preferredMediaSource;\n      }\n      return window.navigator.mediaDevices.getUserMedia(constraints);\n    };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport * as utils from '../utils';\nexport {shimGetUserMedia} from './getusermedia';\nexport {shimGetDisplayMedia} from './getdisplaymedia';\n\nexport function shimOnTrack(window) {\n  if (typeof window === 'object' && window.RTCTrackEvent &&\n      ('receiver' in window.RTCTrackEvent.prototype) &&\n      !('transceiver' in window.RTCTrackEvent.prototype)) {\n    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {\n      get() {\n        return {receiver: this.receiver};\n      }\n    });\n  }\n}\n\nexport function shimPeerConnection(window, browserDetails) {\n  if (typeof window !== 'object' ||\n      !(window.RTCPeerConnection || window.mozRTCPeerConnection)) {\n    return; // probably media.peerconnection.enabled=false in about:config\n  }\n  if (!window.RTCPeerConnection && window.mozRTCPeerConnection) {\n    // very basic support for old versions.\n    window.RTCPeerConnection = window.mozRTCPeerConnection;\n  }\n\n  if (browserDetails.version < 53) {\n    // shim away need for obsolete RTCIceCandidate/RTCSessionDescription.\n    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']\n        .forEach(function(method) {\n          const nativeMethod = window.RTCPeerConnection.prototype[method];\n          const methodObj = {[method]() {\n            arguments[0] = new ((method === 'addIceCandidate') ?\n                window.RTCIceCandidate :\n                window.RTCSessionDescription)(arguments[0]);\n            return nativeMethod.apply(this, arguments);\n          }};\n          window.RTCPeerConnection.prototype[method] = methodObj[method];\n        });\n  }\n\n  const modernStatsTypes = {\n    inboundrtp: 'inbound-rtp',\n    outboundrtp: 'outbound-rtp',\n    candidatepair: 'candidate-pair',\n    localcandidate: 'local-candidate',\n    remotecandidate: 'remote-candidate'\n  };\n\n  const nativeGetStats = window.RTCPeerConnection.prototype.getStats;\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    const [selector, onSucc, onErr] = arguments;\n    return nativeGetStats.apply(this, [selector || null])\n      .then(stats => {\n        if (browserDetails.version < 53 && !onSucc) {\n          // Shim only promise getStats with spec-hyphens in type names\n          // Leave callback version alone; misc old uses of forEach before Map\n          try {\n            stats.forEach(stat => {\n              stat.type = modernStatsTypes[stat.type] || stat.type;\n            });\n          } catch (e) {\n            if (e.name !== 'TypeError') {\n              throw e;\n            }\n            // Avoid TypeError: \"type\" is read-only, in old versions. 34-43ish\n            stats.forEach((stat, i) => {\n              stats.set(i, Object.assign({}, stat, {\n                type: modernStatsTypes[stat.type] || stat.type\n              }));\n            });\n          }\n        }\n        return stats;\n      })\n      .then(onSucc, onErr);\n  };\n}\n\nexport function shimSenderGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\n      window.RTCRtpSender)) {\n    return;\n  }\n  if (window.RTCRtpSender && 'getStats' in window.RTCRtpSender.prototype) {\n    return;\n  }\n  const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n  if (origGetSenders) {\n    window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n      const senders = origGetSenders.apply(this, []);\n      senders.forEach(sender => sender._pc = this);\n      return senders;\n    };\n  }\n\n  const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n  if (origAddTrack) {\n    window.RTCPeerConnection.prototype.addTrack = function addTrack() {\n      const sender = origAddTrack.apply(this, arguments);\n      sender._pc = this;\n      return sender;\n    };\n  }\n  window.RTCRtpSender.prototype.getStats = function getStats() {\n    return this.track ? this._pc.getStats(this.track) :\n        Promise.resolve(new Map());\n  };\n}\n\nexport function shimReceiverGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\n      window.RTCRtpSender)) {\n    return;\n  }\n  if (window.RTCRtpSender && 'getStats' in window.RTCRtpReceiver.prototype) {\n    return;\n  }\n  const origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;\n  if (origGetReceivers) {\n    window.RTCPeerConnection.prototype.getReceivers = function getReceivers() {\n      const receivers = origGetReceivers.apply(this, []);\n      receivers.forEach(receiver => receiver._pc = this);\n      return receivers;\n    };\n  }\n  utils.wrapPeerConnectionEvent(window, 'track', e => {\n    e.receiver._pc = e.srcElement;\n    return e;\n  });\n  window.RTCRtpReceiver.prototype.getStats = function getStats() {\n    return this._pc.getStats(this.track);\n  };\n}\n\nexport function shimRemoveStream(window) {\n  if (!window.RTCPeerConnection ||\n      'removeStream' in window.RTCPeerConnection.prototype) {\n    return;\n  }\n  window.RTCPeerConnection.prototype.removeStream =\n    function removeStream(stream) {\n      utils.deprecated('removeStream', 'removeTrack');\n      this.getSenders().forEach(sender => {\n        if (sender.track && stream.getTracks().includes(sender.track)) {\n          this.removeTrack(sender);\n        }\n      });\n    };\n}\n\nexport function shimRTCDataChannel(window) {\n  // rename DataChannel to RTCDataChannel (native fix in FF60):\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1173851\n  if (window.DataChannel && !window.RTCDataChannel) {\n    window.RTCDataChannel = window.DataChannel;\n  }\n}\n\nexport function shimAddTransceiver(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origAddTransceiver = window.RTCPeerConnection.prototype.addTransceiver;\n  if (origAddTransceiver) {\n    window.RTCPeerConnection.prototype.addTransceiver =\n      function addTransceiver() {\n        this.setParametersPromises = [];\n        const initParameters = arguments[1];\n        const shouldPerformCheck = initParameters &&\n                                  'sendEncodings' in initParameters;\n        if (shouldPerformCheck) {\n          // If sendEncodings params are provided, validate grammar\n          initParameters.sendEncodings.forEach((encodingParam) => {\n            if ('rid' in encodingParam) {\n              const ridRegex = /^[a-z0-9]{0,16}$/i;\n              if (!ridRegex.test(encodingParam.rid)) {\n                throw new TypeError('Invalid RID value provided.');\n              }\n            }\n            if ('scaleResolutionDownBy' in encodingParam) {\n              if (!(parseFloat(encodingParam.scaleResolutionDownBy) >= 1.0)) {\n                throw new RangeError('scale_resolution_down_by must be >= 1.0');\n              }\n            }\n            if ('maxFramerate' in encodingParam) {\n              if (!(parseFloat(encodingParam.maxFramerate) >= 0)) {\n                throw new RangeError('max_framerate must be >= 0.0');\n              }\n            }\n          });\n        }\n        const transceiver = origAddTransceiver.apply(this, arguments);\n        if (shouldPerformCheck) {\n          // Check if the init options were applied. If not we do this in an\n          // asynchronous way and save the promise reference in a global object.\n          // This is an ugly hack, but at the same time is way more robust than\n          // checking the sender parameters before and after the createOffer\n          // Also note that after the createoffer we are not 100% sure that\n          // the params were asynchronously applied so we might miss the\n          // opportunity to recreate offer.\n          const {sender} = transceiver;\n          const params = sender.getParameters();\n          if (!('encodings' in params) ||\n              // Avoid being fooled by patched getParameters() below.\n              (params.encodings.length === 1 &&\n               Object.keys(params.encodings[0]).length === 0)) {\n            params.encodings = initParameters.sendEncodings;\n            sender.sendEncodings = initParameters.sendEncodings;\n            this.setParametersPromises.push(sender.setParameters(params)\n              .then(() => {\n                delete sender.sendEncodings;\n              }).catch(() => {\n                delete sender.sendEncodings;\n              })\n            );\n          }\n        }\n        return transceiver;\n      };\n  }\n}\n\nexport function shimGetParameters(window) {\n  if (!(typeof window === 'object' && window.RTCRtpSender)) {\n    return;\n  }\n  const origGetParameters = window.RTCRtpSender.prototype.getParameters;\n  if (origGetParameters) {\n    window.RTCRtpSender.prototype.getParameters =\n      function getParameters() {\n        const params = origGetParameters.apply(this, arguments);\n        if (!('encodings' in params)) {\n          params.encodings = [].concat(this.sendEncodings || [{}]);\n        }\n        return params;\n      };\n  }\n}\n\nexport function shimCreateOffer(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origCreateOffer = window.RTCPeerConnection.prototype.createOffer;\n  window.RTCPeerConnection.prototype.createOffer = function createOffer() {\n    if (this.setParametersPromises && this.setParametersPromises.length) {\n      return Promise.all(this.setParametersPromises)\n      .then(() => {\n        return origCreateOffer.apply(this, arguments);\n      })\n      .finally(() => {\n        this.setParametersPromises = [];\n      });\n    }\n    return origCreateOffer.apply(this, arguments);\n  };\n}\n\nexport function shimCreateAnswer(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origCreateAnswer = window.RTCPeerConnection.prototype.createAnswer;\n  window.RTCPeerConnection.prototype.createAnswer = function createAnswer() {\n    if (this.setParametersPromises && this.setParametersPromises.length) {\n      return Promise.all(this.setParametersPromises)\n      .then(() => {\n        return origCreateAnswer.apply(this, arguments);\n      })\n      .finally(() => {\n        this.setParametersPromises = [];\n      });\n    }\n    return origCreateAnswer.apply(this, arguments);\n  };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n'use strict';\nimport * as utils from '../utils';\n\nexport function shimLocalStreamsAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n  if (!('getLocalStreams' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.getLocalStreams =\n      function getLocalStreams() {\n        if (!this._localStreams) {\n          this._localStreams = [];\n        }\n        return this._localStreams;\n      };\n  }\n  if (!('addStream' in window.RTCPeerConnection.prototype)) {\n    const _addTrack = window.RTCPeerConnection.prototype.addTrack;\n    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n      if (!this._localStreams) {\n        this._localStreams = [];\n      }\n      if (!this._localStreams.includes(stream)) {\n        this._localStreams.push(stream);\n      }\n      // Try to emulate Chrome's behaviour of adding in audio-video order.\n      // Safari orders by track id.\n      stream.getAudioTracks().forEach(track => _addTrack.call(this, track,\n        stream));\n      stream.getVideoTracks().forEach(track => _addTrack.call(this, track,\n        stream));\n    };\n\n    window.RTCPeerConnection.prototype.addTrack =\n      function addTrack(track, ...streams) {\n        if (streams) {\n          streams.forEach((stream) => {\n            if (!this._localStreams) {\n              this._localStreams = [stream];\n            } else if (!this._localStreams.includes(stream)) {\n              this._localStreams.push(stream);\n            }\n          });\n        }\n        return _addTrack.apply(this, arguments);\n      };\n  }\n  if (!('removeStream' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.removeStream =\n      function removeStream(stream) {\n        if (!this._localStreams) {\n          this._localStreams = [];\n        }\n        const index = this._localStreams.indexOf(stream);\n        if (index === -1) {\n          return;\n        }\n        this._localStreams.splice(index, 1);\n        const tracks = stream.getTracks();\n        this.getSenders().forEach(sender => {\n          if (tracks.includes(sender.track)) {\n            this.removeTrack(sender);\n          }\n        });\n      };\n  }\n}\n\nexport function shimRemoteStreamsAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n  if (!('getRemoteStreams' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.getRemoteStreams =\n      function getRemoteStreams() {\n        return this._remoteStreams ? this._remoteStreams : [];\n      };\n  }\n  if (!('onaddstream' in window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'onaddstream', {\n      get() {\n        return this._onaddstream;\n      },\n      set(f) {\n        if (this._onaddstream) {\n          this.removeEventListener('addstream', this._onaddstream);\n          this.removeEventListener('track', this._onaddstreampoly);\n        }\n        this.addEventListener('addstream', this._onaddstream = f);\n        this.addEventListener('track', this._onaddstreampoly = (e) => {\n          e.streams.forEach(stream => {\n            if (!this._remoteStreams) {\n              this._remoteStreams = [];\n            }\n            if (this._remoteStreams.includes(stream)) {\n              return;\n            }\n            this._remoteStreams.push(stream);\n            const event = new Event('addstream');\n            event.stream = stream;\n            this.dispatchEvent(event);\n          });\n        });\n      }\n    });\n    const origSetRemoteDescription =\n      window.RTCPeerConnection.prototype.setRemoteDescription;\n    window.RTCPeerConnection.prototype.setRemoteDescription =\n      function setRemoteDescription() {\n        const pc = this;\n        if (!this._onaddstreampoly) {\n          this.addEventListener('track', this._onaddstreampoly = function(e) {\n            e.streams.forEach(stream => {\n              if (!pc._remoteStreams) {\n                pc._remoteStreams = [];\n              }\n              if (pc._remoteStreams.indexOf(stream) >= 0) {\n                return;\n              }\n              pc._remoteStreams.push(stream);\n              const event = new Event('addstream');\n              event.stream = stream;\n              pc.dispatchEvent(event);\n            });\n          });\n        }\n        return origSetRemoteDescription.apply(pc, arguments);\n      };\n  }\n}\n\nexport function shimCallbacksAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n  const prototype = window.RTCPeerConnection.prototype;\n  const origCreateOffer = prototype.createOffer;\n  const origCreateAnswer = prototype.createAnswer;\n  const setLocalDescription = prototype.setLocalDescription;\n  const setRemoteDescription = prototype.setRemoteDescription;\n  const addIceCandidate = prototype.addIceCandidate;\n\n  prototype.createOffer =\n    function createOffer(successCallback, failureCallback) {\n      const options = (arguments.length >= 2) ? arguments[2] : arguments[0];\n      const promise = origCreateOffer.apply(this, [options]);\n      if (!failureCallback) {\n        return promise;\n      }\n      promise.then(successCallback, failureCallback);\n      return Promise.resolve();\n    };\n\n  prototype.createAnswer =\n    function createAnswer(successCallback, failureCallback) {\n      const options = (arguments.length >= 2) ? arguments[2] : arguments[0];\n      const promise = origCreateAnswer.apply(this, [options]);\n      if (!failureCallback) {\n        return promise;\n      }\n      promise.then(successCallback, failureCallback);\n      return Promise.resolve();\n    };\n\n  let withCallback = function(description, successCallback, failureCallback) {\n    const promise = setLocalDescription.apply(this, [description]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.setLocalDescription = withCallback;\n\n  withCallback = function(description, successCallback, failureCallback) {\n    const promise = setRemoteDescription.apply(this, [description]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.setRemoteDescription = withCallback;\n\n  withCallback = function(candidate, successCallback, failureCallback) {\n    const promise = addIceCandidate.apply(this, [candidate]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.addIceCandidate = withCallback;\n}\n\nexport function shimGetUserMedia(window) {\n  const navigator = window && window.navigator;\n\n  if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n    // shim not needed in Safari 12.1\n    const mediaDevices = navigator.mediaDevices;\n    const _getUserMedia = mediaDevices.getUserMedia.bind(mediaDevices);\n    navigator.mediaDevices.getUserMedia = (constraints) => {\n      return _getUserMedia(shimConstraints(constraints));\n    };\n  }\n\n  if (!navigator.getUserMedia && navigator.mediaDevices &&\n    navigator.mediaDevices.getUserMedia) {\n    navigator.getUserMedia = function getUserMedia(constraints, cb, errcb) {\n      navigator.mediaDevices.getUserMedia(constraints)\n      .then(cb, errcb);\n    }.bind(navigator);\n  }\n}\n\nexport function shimConstraints(constraints) {\n  if (constraints && constraints.video !== undefined) {\n    return Object.assign({},\n      constraints,\n      {video: utils.compactObject(constraints.video)}\n    );\n  }\n\n  return constraints;\n}\n\nexport function shimRTCIceServerUrls(window) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  // migrate from non-spec RTCIceServer.url to RTCIceServer.urls\n  const OrigPeerConnection = window.RTCPeerConnection;\n  window.RTCPeerConnection =\n    function RTCPeerConnection(pcConfig, pcConstraints) {\n      if (pcConfig && pcConfig.iceServers) {\n        const newIceServers = [];\n        for (let i = 0; i < pcConfig.iceServers.length; i++) {\n          let server = pcConfig.iceServers[i];\n          if (!server.hasOwnProperty('urls') &&\n              server.hasOwnProperty('url')) {\n            utils.deprecated('RTCIceServer.url', 'RTCIceServer.urls');\n            server = JSON.parse(JSON.stringify(server));\n            server.urls = server.url;\n            delete server.url;\n            newIceServers.push(server);\n          } else {\n            newIceServers.push(pcConfig.iceServers[i]);\n          }\n        }\n        pcConfig.iceServers = newIceServers;\n      }\n      return new OrigPeerConnection(pcConfig, pcConstraints);\n    };\n  window.RTCPeerConnection.prototype = OrigPeerConnection.prototype;\n  // wrap static methods. Currently just generateCertificate.\n  if ('generateCertificate' in OrigPeerConnection) {\n    Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {\n      get() {\n        return OrigPeerConnection.generateCertificate;\n      }\n    });\n  }\n}\n\nexport function shimTrackEventTransceiver(window) {\n  // Add event.transceiver member over deprecated event.receiver\n  if (typeof window === 'object' && window.RTCTrackEvent &&\n      'receiver' in window.RTCTrackEvent.prototype &&\n      !('transceiver' in window.RTCTrackEvent.prototype)) {\n    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {\n      get() {\n        return {receiver: this.receiver};\n      }\n    });\n  }\n}\n\nexport function shimCreateOfferLegacy(window) {\n  const origCreateOffer = window.RTCPeerConnection.prototype.createOffer;\n  window.RTCPeerConnection.prototype.createOffer =\n    function createOffer(offerOptions) {\n      if (offerOptions) {\n        if (typeof offerOptions.offerToReceiveAudio !== 'undefined') {\n          // support bit values\n          offerOptions.offerToReceiveAudio =\n            !!offerOptions.offerToReceiveAudio;\n        }\n        const audioTransceiver = this.getTransceivers().find(transceiver =>\n          transceiver.receiver.track.kind === 'audio');\n        if (offerOptions.offerToReceiveAudio === false && audioTransceiver) {\n          if (audioTransceiver.direction === 'sendrecv') {\n            if (audioTransceiver.setDirection) {\n              audioTransceiver.setDirection('sendonly');\n            } else {\n              audioTransceiver.direction = 'sendonly';\n            }\n          } else if (audioTransceiver.direction === 'recvonly') {\n            if (audioTransceiver.setDirection) {\n              audioTransceiver.setDirection('inactive');\n            } else {\n              audioTransceiver.direction = 'inactive';\n            }\n          }\n        } else if (offerOptions.offerToReceiveAudio === true &&\n            !audioTransceiver) {\n          this.addTransceiver('audio');\n        }\n\n        if (typeof offerOptions.offerToReceiveVideo !== 'undefined') {\n          // support bit values\n          offerOptions.offerToReceiveVideo =\n            !!offerOptions.offerToReceiveVideo;\n        }\n        const videoTransceiver = this.getTransceivers().find(transceiver =>\n          transceiver.receiver.track.kind === 'video');\n        if (offerOptions.offerToReceiveVideo === false && videoTransceiver) {\n          if (videoTransceiver.direction === 'sendrecv') {\n            if (videoTransceiver.setDirection) {\n              videoTransceiver.setDirection('sendonly');\n            } else {\n              videoTransceiver.direction = 'sendonly';\n            }\n          } else if (videoTransceiver.direction === 'recvonly') {\n            if (videoTransceiver.setDirection) {\n              videoTransceiver.setDirection('inactive');\n            } else {\n              videoTransceiver.direction = 'inactive';\n            }\n          }\n        } else if (offerOptions.offerToReceiveVideo === true &&\n            !videoTransceiver) {\n          this.addTransceiver('video');\n        }\n      }\n      return origCreateOffer.apply(this, arguments);\n    };\n}\n\nexport function shimAudioContext(window) {\n  if (typeof window !== 'object' || window.AudioContext) {\n    return;\n  }\n  window.AudioContext = window.webkitAudioContext;\n}\n","/*\n *  Copyright (c) 2017 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport SDPUtils from 'sdp';\nimport * as utils from './utils';\n\nexport function shimRTCIceCandidate(window) {\n  // foundation is arbitrarily chosen as an indicator for full support for\n  // https://w3c.github.io/webrtc-pc/#rtcicecandidate-interface\n  if (!window.RTCIceCandidate || (window.RTCIceCandidate && 'foundation' in\n      window.RTCIceCandidate.prototype)) {\n    return;\n  }\n\n  const NativeRTCIceCandidate = window.RTCIceCandidate;\n  window.RTCIceCandidate = function RTCIceCandidate(args) {\n    // Remove the a= which shouldn't be part of the candidate string.\n    if (typeof args === 'object' && args.candidate &&\n        args.candidate.indexOf('a=') === 0) {\n      args = JSON.parse(JSON.stringify(args));\n      args.candidate = args.candidate.substr(2);\n    }\n\n    if (args.candidate && args.candidate.length) {\n      // Augment the native candidate with the parsed fields.\n      const nativeCandidate = new NativeRTCIceCandidate(args);\n      const parsedCandidate = SDPUtils.parseCandidate(args.candidate);\n      const augmentedCandidate = Object.assign(nativeCandidate,\n          parsedCandidate);\n\n      // Add a serializer that does not serialize the extra attributes.\n      augmentedCandidate.toJSON = function toJSON() {\n        return {\n          candidate: augmentedCandidate.candidate,\n          sdpMid: augmentedCandidate.sdpMid,\n          sdpMLineIndex: augmentedCandidate.sdpMLineIndex,\n          usernameFragment: augmentedCandidate.usernameFragment,\n        };\n      };\n      return augmentedCandidate;\n    }\n    return new NativeRTCIceCandidate(args);\n  };\n  window.RTCIceCandidate.prototype = NativeRTCIceCandidate.prototype;\n\n  // Hook up the augmented candidate in onicecandidate and\n  // addEventListener('icecandidate', ...)\n  utils.wrapPeerConnectionEvent(window, 'icecandidate', e => {\n    if (e.candidate) {\n      Object.defineProperty(e, 'candidate', {\n        value: new window.RTCIceCandidate(e.candidate),\n        writable: 'false'\n      });\n    }\n    return e;\n  });\n}\n\nexport function shimMaxMessageSize(window, browserDetails) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n\n  if (!('sctp' in window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'sctp', {\n      get() {\n        return typeof this._sctp === 'undefined' ? null : this._sctp;\n      }\n    });\n  }\n\n  const sctpInDescription = function(description) {\n    if (!description || !description.sdp) {\n      return false;\n    }\n    const sections = SDPUtils.splitSections(description.sdp);\n    sections.shift();\n    return sections.some(mediaSection => {\n      const mLine = SDPUtils.parseMLine(mediaSection);\n      return mLine && mLine.kind === 'application'\n          && mLine.protocol.indexOf('SCTP') !== -1;\n    });\n  };\n\n  const getRemoteFirefoxVersion = function(description) {\n    // TODO: Is there a better solution for detecting Firefox?\n    const match = description.sdp.match(/mozilla...THIS_IS_SDPARTA-(\\d+)/);\n    if (match === null || match.length < 2) {\n      return -1;\n    }\n    const version = parseInt(match[1], 10);\n    // Test for NaN (yes, this is ugly)\n    return version !== version ? -1 : version;\n  };\n\n  const getCanSendMaxMessageSize = function(remoteIsFirefox) {\n    // Every implementation we know can send at least 64 KiB.\n    // Note: Although Chrome is technically able to send up to 256 KiB, the\n    //       data does not reach the other peer reliably.\n    //       See: https://bugs.chromium.org/p/webrtc/issues/detail?id=8419\n    let canSendMaxMessageSize = 65536;\n    if (browserDetails.browser === 'firefox') {\n      if (browserDetails.version < 57) {\n        if (remoteIsFirefox === -1) {\n          // FF < 57 will send in 16 KiB chunks using the deprecated PPID\n          // fragmentation.\n          canSendMaxMessageSize = 16384;\n        } else {\n          // However, other FF (and RAWRTC) can reassemble PPID-fragmented\n          // messages. Thus, supporting ~2 GiB when sending.\n          canSendMaxMessageSize = 2147483637;\n        }\n      } else if (browserDetails.version < 60) {\n        // Currently, all FF >= 57 will reset the remote maximum message size\n        // to the default value when a data channel is created at a later\n        // stage. :(\n        // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831\n        canSendMaxMessageSize =\n          browserDetails.version === 57 ? 65535 : 65536;\n      } else {\n        // FF >= 60 supports sending ~2 GiB\n        canSendMaxMessageSize = 2147483637;\n      }\n    }\n    return canSendMaxMessageSize;\n  };\n\n  const getMaxMessageSize = function(description, remoteIsFirefox) {\n    // Note: 65536 bytes is the default value from the SDP spec. Also,\n    //       every implementation we know supports receiving 65536 bytes.\n    let maxMessageSize = 65536;\n\n    // FF 57 has a slightly incorrect default remote max message size, so\n    // we need to adjust it here to avoid a failure when sending.\n    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1425697\n    if (browserDetails.browser === 'firefox'\n         && browserDetails.version === 57) {\n      maxMessageSize = 65535;\n    }\n\n    const match = SDPUtils.matchPrefix(description.sdp,\n      'a=max-message-size:');\n    if (match.length > 0) {\n      maxMessageSize = parseInt(match[0].substr(19), 10);\n    } else if (browserDetails.browser === 'firefox' &&\n                remoteIsFirefox !== -1) {\n      // If the maximum message size is not present in the remote SDP and\n      // both local and remote are Firefox, the remote peer can receive\n      // ~2 GiB.\n      maxMessageSize = 2147483637;\n    }\n    return maxMessageSize;\n  };\n\n  const origSetRemoteDescription =\n      window.RTCPeerConnection.prototype.setRemoteDescription;\n  window.RTCPeerConnection.prototype.setRemoteDescription =\n    function setRemoteDescription() {\n      this._sctp = null;\n      // Chrome decided to not expose .sctp in plan-b mode.\n      // As usual, adapter.js has to do an 'ugly worakaround'\n      // to cover up the mess.\n      if (browserDetails.browser === 'chrome' && browserDetails.version >= 76) {\n        const {sdpSemantics} = this.getConfiguration();\n        if (sdpSemantics === 'plan-b') {\n          Object.defineProperty(this, 'sctp', {\n            get() {\n              return typeof this._sctp === 'undefined' ? null : this._sctp;\n            },\n            enumerable: true,\n            configurable: true,\n          });\n        }\n      }\n\n      if (sctpInDescription(arguments[0])) {\n        // Check if the remote is FF.\n        const isFirefox = getRemoteFirefoxVersion(arguments[0]);\n\n        // Get the maximum message size the local peer is capable of sending\n        const canSendMMS = getCanSendMaxMessageSize(isFirefox);\n\n        // Get the maximum message size of the remote peer.\n        const remoteMMS = getMaxMessageSize(arguments[0], isFirefox);\n\n        // Determine final maximum message size\n        let maxMessageSize;\n        if (canSendMMS === 0 && remoteMMS === 0) {\n          maxMessageSize = Number.POSITIVE_INFINITY;\n        } else if (canSendMMS === 0 || remoteMMS === 0) {\n          maxMessageSize = Math.max(canSendMMS, remoteMMS);\n        } else {\n          maxMessageSize = Math.min(canSendMMS, remoteMMS);\n        }\n\n        // Create a dummy RTCSctpTransport object and the 'maxMessageSize'\n        // attribute.\n        const sctp = {};\n        Object.defineProperty(sctp, 'maxMessageSize', {\n          get() {\n            return maxMessageSize;\n          }\n        });\n        this._sctp = sctp;\n      }\n\n      return origSetRemoteDescription.apply(this, arguments);\n    };\n}\n\nexport function shimSendThrowTypeError(window) {\n  if (!(window.RTCPeerConnection &&\n      'createDataChannel' in window.RTCPeerConnection.prototype)) {\n    return;\n  }\n\n  // Note: Although Firefox >= 57 has a native implementation, the maximum\n  //       message size can be reset for all data channels at a later stage.\n  //       See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831\n\n  function wrapDcSend(dc, pc) {\n    const origDataChannelSend = dc.send;\n    dc.send = function send() {\n      const data = arguments[0];\n      const length = data.length || data.size || data.byteLength;\n      if (dc.readyState === 'open' &&\n          pc.sctp && length > pc.sctp.maxMessageSize) {\n        throw new TypeError('Message too large (can send a maximum of ' +\n          pc.sctp.maxMessageSize + ' bytes)');\n      }\n      return origDataChannelSend.apply(dc, arguments);\n    };\n  }\n  const origCreateDataChannel =\n    window.RTCPeerConnection.prototype.createDataChannel;\n  window.RTCPeerConnection.prototype.createDataChannel =\n    function createDataChannel() {\n      const dataChannel = origCreateDataChannel.apply(this, arguments);\n      wrapDcSend(dataChannel, this);\n      return dataChannel;\n    };\n  utils.wrapPeerConnectionEvent(window, 'datachannel', e => {\n    wrapDcSend(e.channel, e.target);\n    return e;\n  });\n}\n\n\n/* shims RTCConnectionState by pretending it is the same as iceConnectionState.\n * See https://bugs.chromium.org/p/webrtc/issues/detail?id=6145#c12\n * for why this is a valid hack in Chrome. In Firefox it is slightly incorrect\n * since DTLS failures would be hidden. See\n * https://bugzilla.mozilla.org/show_bug.cgi?id=1265827\n * for the Firefox tracking bug.\n */\nexport function shimConnectionState(window) {\n  if (!window.RTCPeerConnection ||\n      'connectionState' in window.RTCPeerConnection.prototype) {\n    return;\n  }\n  const proto = window.RTCPeerConnection.prototype;\n  Object.defineProperty(proto, 'connectionState', {\n    get() {\n      return {\n        completed: 'connected',\n        checking: 'connecting'\n      }[this.iceConnectionState] || this.iceConnectionState;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(proto, 'onconnectionstatechange', {\n    get() {\n      return this._onconnectionstatechange || null;\n    },\n    set(cb) {\n      if (this._onconnectionstatechange) {\n        this.removeEventListener('connectionstatechange',\n            this._onconnectionstatechange);\n        delete this._onconnectionstatechange;\n      }\n      if (cb) {\n        this.addEventListener('connectionstatechange',\n            this._onconnectionstatechange = cb);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  ['setLocalDescription', 'setRemoteDescription'].forEach((method) => {\n    const origMethod = proto[method];\n    proto[method] = function() {\n      if (!this._connectionstatechangepoly) {\n        this._connectionstatechangepoly = e => {\n          const pc = e.target;\n          if (pc._lastConnectionState !== pc.connectionState) {\n            pc._lastConnectionState = pc.connectionState;\n            const newEvent = new Event('connectionstatechange', e);\n            pc.dispatchEvent(newEvent);\n          }\n          return e;\n        };\n        this.addEventListener('iceconnectionstatechange',\n          this._connectionstatechangepoly);\n      }\n      return origMethod.apply(this, arguments);\n    };\n  });\n}\n\nexport function removeExtmapAllowMixed(window, browserDetails) {\n  /* remove a=extmap-allow-mixed for webrtc.org < M71 */\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  if (browserDetails.browser === 'chrome' && browserDetails.version >= 71) {\n    return;\n  }\n  if (browserDetails.browser === 'safari' && browserDetails.version >= 605) {\n    return;\n  }\n  const nativeSRD = window.RTCPeerConnection.prototype.setRemoteDescription;\n  window.RTCPeerConnection.prototype.setRemoteDescription =\n  function setRemoteDescription(desc) {\n    if (desc && desc.sdp && desc.sdp.indexOf('\\na=extmap-allow-mixed') !== -1) {\n      const sdp = desc.sdp.split('\\n').filter((line) => {\n        return line.trim() !== 'a=extmap-allow-mixed';\n      }).join('\\n');\n      // Safari enforces read-only-ness of RTCSessionDescription fields.\n      if (window.RTCSessionDescription &&\n          desc instanceof window.RTCSessionDescription) {\n        arguments[0] = new window.RTCSessionDescription({\n          type: desc.type,\n          sdp,\n        });\n      } else {\n        desc.sdp = sdp;\n      }\n    }\n    return nativeSRD.apply(this, arguments);\n  };\n}\n\nexport function shimAddIceCandidateNullOrEmpty(window, browserDetails) {\n  // Support for addIceCandidate(null or undefined)\n  // as well as addIceCandidate({candidate: \"\", ...})\n  // https://bugs.chromium.org/p/chromium/issues/detail?id=978582\n  // Note: must be called before other polyfills which change the signature.\n  if (!(window.RTCPeerConnection && window.RTCPeerConnection.prototype)) {\n    return;\n  }\n  const nativeAddIceCandidate =\n      window.RTCPeerConnection.prototype.addIceCandidate;\n  if (!nativeAddIceCandidate || nativeAddIceCandidate.length === 0) {\n    return;\n  }\n  window.RTCPeerConnection.prototype.addIceCandidate =\n    function addIceCandidate() {\n      if (!arguments[0]) {\n        if (arguments[1]) {\n          arguments[1].apply(null);\n        }\n        return Promise.resolve();\n      }\n      // Firefox 68+ emits and processes {candidate: \"\", ...}, ignore\n      // in older versions.\n      // Native support for ignoring exists for Chrome M77+.\n      // Safari ignores as well, exact version unknown but works in the same\n      // version that also ignores addIceCandidate(null).\n      if (((browserDetails.browser === 'chrome' && browserDetails.version < 78)\n           || (browserDetails.browser === 'firefox'\n               && browserDetails.version < 68)\n           || (browserDetails.browser === 'safari'))\n          && arguments[0] && arguments[0].candidate === '') {\n        return Promise.resolve();\n      }\n      return nativeAddIceCandidate.apply(this, arguments);\n    };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n\n'use strict';\n\nimport {adapterFactory} from './adapter_factory.js';\n\nconst adapter =\n  adapterFactory({window: typeof window === 'undefined' ? undefined : window});\nexport default adapter;\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\nimport * as utils from './utils';\n\n  // Browser shims.\nimport * as chromeShim from './chrome/chrome_shim';\nimport * as firefoxShim from './firefox/firefox_shim';\nimport * as safariShim from './safari/safari_shim';\nimport * as commonShim from './common_shim';\nimport * as sdp from 'sdp';\n\n// Shimming starts here.\nexport function adapterFactory({window} = {}, options = {\n  shimChrome: true,\n  shimFirefox: true,\n  shimSafari: true,\n}) {\n  // Utils.\n  const logging = utils.log;\n  const browserDetails = utils.detectBrowser(window);\n\n  const adapter = {\n    browserDetails,\n    commonShim,\n    extractVersion: utils.extractVersion,\n    disableLog: utils.disableLog,\n    disableWarnings: utils.disableWarnings,\n    // Expose sdp as a convenience. For production apps include directly.\n    sdp,\n  };\n\n  // Shim browser if found.\n  switch (browserDetails.browser) {\n    case 'chrome':\n      if (!chromeShim || !chromeShim.shimPeerConnection ||\n          !options.shimChrome) {\n        logging('Chrome shim is not included in this adapter release.');\n        return adapter;\n      }\n      if (browserDetails.version === null) {\n        logging('Chrome shim can not determine version, not shimming.');\n        return adapter;\n      }\n      logging('adapter.js shimming chrome.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = chromeShim;\n\n      // Must be called before shimPeerConnection.\n      commonShim.shimAddIceCandidateNullOrEmpty(window, browserDetails);\n\n      chromeShim.shimGetUserMedia(window, browserDetails);\n      chromeShim.shimMediaStream(window, browserDetails);\n      chromeShim.shimPeerConnection(window, browserDetails);\n      chromeShim.shimOnTrack(window, browserDetails);\n      chromeShim.shimAddTrackRemoveTrack(window, browserDetails);\n      chromeShim.shimGetSendersWithDtmf(window, browserDetails);\n      chromeShim.shimGetStats(window, browserDetails);\n      chromeShim.shimSenderReceiverGetStats(window, browserDetails);\n      chromeShim.fixNegotiationNeeded(window, browserDetails);\n\n      commonShim.shimRTCIceCandidate(window, browserDetails);\n      commonShim.shimConnectionState(window, browserDetails);\n      commonShim.shimMaxMessageSize(window, browserDetails);\n      commonShim.shimSendThrowTypeError(window, browserDetails);\n      commonShim.removeExtmapAllowMixed(window, browserDetails);\n      break;\n    case 'firefox':\n      if (!firefoxShim || !firefoxShim.shimPeerConnection ||\n          !options.shimFirefox) {\n        logging('Firefox shim is not included in this adapter release.');\n        return adapter;\n      }\n      logging('adapter.js shimming firefox.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = firefoxShim;\n\n      // Must be called before shimPeerConnection.\n      commonShim.shimAddIceCandidateNullOrEmpty(window, browserDetails);\n\n      firefoxShim.shimGetUserMedia(window, browserDetails);\n      firefoxShim.shimPeerConnection(window, browserDetails);\n      firefoxShim.shimOnTrack(window, browserDetails);\n      firefoxShim.shimRemoveStream(window, browserDetails);\n      firefoxShim.shimSenderGetStats(window, browserDetails);\n      firefoxShim.shimReceiverGetStats(window, browserDetails);\n      firefoxShim.shimRTCDataChannel(window, browserDetails);\n      firefoxShim.shimAddTransceiver(window, browserDetails);\n      firefoxShim.shimGetParameters(window, browserDetails);\n      firefoxShim.shimCreateOffer(window, browserDetails);\n      firefoxShim.shimCreateAnswer(window, browserDetails);\n\n      commonShim.shimRTCIceCandidate(window, browserDetails);\n      commonShim.shimConnectionState(window, browserDetails);\n      commonShim.shimMaxMessageSize(window, browserDetails);\n      commonShim.shimSendThrowTypeError(window, browserDetails);\n      break;\n    case 'safari':\n      if (!safariShim || !options.shimSafari) {\n        logging('Safari shim is not included in this adapter release.');\n        return adapter;\n      }\n      logging('adapter.js shimming safari.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = safariShim;\n\n      // Must be called before shimCallbackAPI.\n      commonShim.shimAddIceCandidateNullOrEmpty(window, browserDetails);\n\n      safariShim.shimRTCIceServerUrls(window, browserDetails);\n      safariShim.shimCreateOfferLegacy(window, browserDetails);\n      safariShim.shimCallbacksAPI(window, browserDetails);\n      safariShim.shimLocalStreamsAPI(window, browserDetails);\n      safariShim.shimRemoteStreamsAPI(window, browserDetails);\n      safariShim.shimTrackEventTransceiver(window, browserDetails);\n      safariShim.shimGetUserMedia(window, browserDetails);\n      safariShim.shimAudioContext(window, browserDetails);\n\n      commonShim.shimRTCIceCandidate(window, browserDetails);\n      commonShim.shimMaxMessageSize(window, browserDetails);\n      commonShim.shimSendThrowTypeError(window, browserDetails);\n      commonShim.removeExtmapAllowMixed(window, browserDetails);\n      break;\n    default:\n      logging('Unsupported browser!');\n      break;\n  }\n\n  return adapter;\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.amdO = {};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","// startup\n// Load entry module and return exports\n// This entry module used 'module' so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(4449);\n"],"names":["root","factory","exports","module","define","amd","self","internals","parse","text","args","firstOptions","reviver","length","undefined","options","obj","JSON","protoAction","match","scan","next","nodes","node","Object","prototype","hasOwnProperty","call","SyntaxError","__proto__","key","value","push","safeParse","ignoreError","Logger","LogCollector","logStorage","this","stringifyObjects","storeInterval","maxEntryLength","keys","levels","forEach","logLevel","_log","apply","arguments","bind","storeLogsIntervalID","queue","totalLen","outputCache","stringify","someObject","error","formatLogMessage","msg","i","len","arg","ERROR","timestamp","prevMessage","prevMessageText","count","_flush","start","_reschedulePublishInterval","window","clearTimeout","setTimeout","flush","force","reschedule","isReady","cachedQueue","storeLogs","stop","consoleTransport","console","globalTransports","addGlobalTransport","transport","indexOf","removeGlobalTransport","transportIdx","splice","globalOptions","getCallerInfo","callerInfo","methodName","fileLocation","line","column","Error","stack","split","m","substr","log","logger","level","Array","slice","disableCallerInfo","transports","concat","t","l","logPrefixes","Date","toISOString","id","fullLogParts","methods","setGlobalOptions","setLevel","TRACE","DEBUG","INFO","LOG","WARN","idLoggers","loggers","curLevel","getLogger","setLogLevelById","setLogLevel","grammar","v","name","reg","o","names","format","s","u","e","p","z","r","c","b","a","rate","address","subtype","direction","config","sessionConfig","str","raddr","tcptype","generation","attribute","maxMessageSize","RegExp","dir2","clksrcExt","mediaClockValue","rateNumerator","rateDenominator","parser","writer","write","parseParams","parseFmtpConfig","parsePayloads","parseRemoteCandidates","parseImageAttributes","parseSimulcastStreamList","toIntIfInt","String","Number","parseReg","location","content","needsBlank","keyLocation","rawName","attachProperties","validLine","test","sdp","session","media","filter","type","rtp","fmtp","j","paramReducer","acc","expr","reduce","toString","map","candidates","parts","component","ip","port","item","substring","stream","scid","paused","formatRegExp","formatStr","replace","x","makeLine","Function","n","defaultOuterOrder","defaultInnerOrder","opts","version","mLine","payloads","outerOrder","innerOrder","el","join","transform","transformUtils","parseSsrcs","writeSsrcs","getSsrcAttribute","ssrc","attributeName","ssrcs","ssrcInfo","Simulcast","numOfLayers","ssrcCache","processVideo","action","isArray","validateDescription","desc","clearSsrcCache","setSsrcCache","_parseSimLayers","simGroup","ssrcGroups","find","group","semantics","ssrcStr","parseInt","_buildNewToOldSsrcMap","newSsrcList","oldSsrcList","ssrcMap","newSsrc","oldSsrc","_fillInSourceDataFromCache","newSimSsrcs","newMsid","newCname","ssrcsToReplace","ssrcsToAdd","values","_generateSourceData","primarySsrc","addAssociatedStream","primarySsrcCname","primarySsrcMsid","usesUnifiedPlan","msid","simSsrcs","simSsrc","Math","floor","random","_restoreSimulcast","numSsrcs","index","array","numGroups","fidGroup","mungeRemoteDescription","enableConferenceFlag","explodeRemoteSimulcast","sources","order","simulcastSsrcs","cname","relatedGroup","relatedSsrcs","relatedSSRC","simulcastGroup","info","nuke","implodeRemoteSimulcast","invalid","some","assertGoogConference","xGoogleFlag","removeGoogConference","RTCSessionDescription","mungeLocalDescription","source","previous_async","async","only_once","fn","called","noConflict","_toString","_isArray","_each","arr","iterator","_map","results","_keys","k","process","nextTick","setImmediate","each","callback","completed","done","err","eachSeries","iterate","forEachSeries","eachLimit","limit","_eachLimit","forEachLimit","started","running","replenish","doParallel","doSeries","_asyncMap","eachfn","mapSeries","mapLimit","_mapLimit","doParallelLimit","memo","inject","foldl","reduceRight","reversed","reverse","foldr","_filter","sort","filterSeries","select","selectSeries","_reject","reject","rejectSeries","_detect","main_callback","result","detect","detectSeries","any","every","all","sortBy","criteria","left","right","auto","tasks","remainingTasks","listeners","addListener","unshift","taskComplete","theCallback","task","taskCallback","safeResults","rkey","requires","abs","ready","listener","removeListener","retry","times","attempts","wrappedTask","wrappedCallback","wrappedResults","retryAttempt","finalAttempt","seriesCallback","series","data","waterfall","wrapIterator","_parallel","parallel","parallelLimit","makeCallback","_concat","cb","y","concatSeries","whilst","doWhilst","until","doUntil","worker","concurrency","_insert","q","pos","drain","saturated","workers","empty","kill","shift","idle","pause","resume","priorityQueue","_compareTasks","priority","sequence","compare","beg","end","mid","_binarySearch","cargo","payload","working","drained","ts","ds","_console_fn","dir","memoize","hasher","queues","memoized","pop","unmemoized","unmemoize","counter","timesSeries","seq","fns","that","newargs","nextargs","compose","_applyEach","go","applyEach","applyEachSeries","forever","AUTHENTICATION_REQUIRED","CHAT_ERROR","SETTINGS_ERROR","CONFERENCE_DESTROYED","CONFERENCE_MAX_USERS","CONNECTION_ERROR","CONFERENCE_RESTARTED","NOT_ALLOWED_ERROR","MEMBERS_ONLY_ERROR","CONFERENCE_ACCESS_DENIED","FOCUS_DISCONNECTED","FOCUS_LEFT","GRACEFUL_SHUTDOWN","ICE_FAILED","INCOMPATIBLE_SERVER_VERSIONS","OFFER_ANSWER_FAILED","PASSWORD_NOT_SUPPORTED","PASSWORD_REQUIRED","RESERVATION_ERROR","VIDEOBRIDGE_NOT_AVAILABLE","AUDIO_INPUT_STATE_CHANGE","AUDIO_UNMUTE_PERMISSIONS_CHANGED","AUTH_STATUS_CHANGED","BEFORE_STATISTICS_DISPOSED","CONFERENCE_ERROR","CONFERENCE_FAILED","CONFERENCE_JOIN_IN_PROGRESS","CONFERENCE_JOINED","CONFERENCE_LEFT","CONFERENCE_UNIQUE_ID_SET","CONNECTION_ESTABLISHED","CONNECTION_INTERRUPTED","CONNECTION_RESTORED","DATA_CHANNEL_OPENED","DISPLAY_NAME_CHANGED","DOMINANT_SPEAKER_CHANGED","CONFERENCE_CREATED_TIMESTAMP","DTMF_SUPPORT_CHANGED","ENDPOINT_MESSAGE_RECEIVED","ENDPOINT_STATS_RECEIVED","JVB121_STATUS","KICKED","PARTICIPANT_KICKED","LAST_N_ENDPOINTS_CHANGED","LOCK_STATE_CHANGED","SERVER_REGION_CHANGED","_MEDIA_SESSION_STARTED","_MEDIA_SESSION_ACTIVE_CHANGED","MEMBERS_ONLY_CHANGED","MESSAGE_RECEIVED","NO_AUDIO_INPUT","NOISY_MIC","NON_PARTICIPANT_MESSAGE_RECEIVED","PRIVATE_MESSAGE_RECEIVED","PARTICIPANT_CONN_STATUS_CHANGED","PARTCIPANT_FEATURES_CHANGED","PARTICIPANT_PROPERTY_CHANGED","P2P_STATUS","PHONE_NUMBER_CHANGED","PROPERTIES_CHANGED","RECORDER_STATE_CHANGED","VIDEO_SIP_GW_AVAILABILITY_CHANGED","VIDEO_SIP_GW_SESSION_STATE_CHANGED","START_MUTED_POLICY_CHANGED","STARTED_MUTED","SUBJECT_CHANGED","SUSPEND_DETECTED","TALK_WHILE_MUTED","TRACK_ADDED","TRACK_AUDIO_LEVEL_CHANGED","TRACK_MUTE_CHANGED","TRACK_REMOVED","TRACK_UNMUTE_REJECTED","TRANSCRIPTION_STATUS_CHANGED","USER_JOINED","USER_LEFT","USER_ROLE_CHANGED","USER_STATUS_CHANGED","VIDEO_UNMUTE_PERMISSIONS_CHANGED","BOT_TYPE_CHANGED","LOBBY_USER_JOINED","LOBBY_USER_UPDATED","LOBBY_USER_LEFT","AV_MODERATION_APPROVED","AV_MODERATION_REJECTED","AV_MODERATION_CHANGED","AV_MODERATION_PARTICIPANT_APPROVED","AV_MODERATION_PARTICIPANT_REJECTED","FACIAL_EXPRESSION_ADDED","BREAKOUT_ROOMS_MOVE_TO_ROOM","BREAKOUT_ROOMS_UPDATED","SUBTITLES_RECEIVED","ANALYTICS_EVENT_RECEIVED","TRACK_UPDATED","CALLSTATS_SCRIPT_URL","CONSTRAINT_FAILED","ELECTRON_DESKTOP_PICKER_ERROR","ELECTRON_DESKTOP_PICKER_NOT_FOUND","GENERAL","NOT_FOUND","PERMISSION_DENIED","SCREENSHARING_GENERIC_ERROR","SCREENSHARING_USER_CANCELED","TIMEOUT","TRACK_IS_DISPOSED","TRACK_NO_STREAM_FOUND","UNSUPPORTED_RESOLUTION","TRACK_ERROR_TO_MESSAGE_MAP","JitsiTrackError","devices","gum","constraints","JitsiTrackErrors","message","constraintName","constraint","video","failedConstraintName","mandatory","minWidth","minHeight","getResolutionFromFailedConstraint","create","constructor","TYPE_OPERATIONAL","TYPE_PAGE","TYPE_TRACK","CONNECTION_DISCONNECTED","ICE_DURATION","createConferenceEvent","attributes","createConnectionStageReachedEvent","stage","actionSubject","createGetUserMediaEvent","createJingleEvent","createP2PEvent","createRemotelyMutedEvent","mediaType","createRtpStatsEvent","AUDIO_LEVEL","BEFORE_DISPOSED","BYTE_SENT_STATS","CONNECTION_STATS","LONG_TASKS_STATS","CHROME","OPERA","FIREFOX","INTERNET_EXPLORER","SAFARI","NWJS","ELECTRON","REACT_NATIVE","UNKNOWN","bowserNameToJitsiName","_detectElectron","userAgent","navigator","JitsiMeetElectron","_detectNWJS","_detectReactNative","product","DummyLocalStorage","EventEmitter","clear","_storage","getItem","keyName","setItem","keyValue","removeItem","serialize","jitsiLocalStorage","super","localStorage","_localStorageDisabled","ignore","warn","isLocalStorageDisabled","emit","dontEmitChangedEvent","localStorageContent","browserInfo","_bowser","Bowser","detectedBrowserInfo","bowser","detectors","getBrowserName","getBrowserVersion","_detectChromiumBased","_name","_version","getName","isChrome","isOpera","isFirefox","isIExplorer","isSafari","isNWJS","isElectron","isReactNative","getVersion","_checkCondition","checkTree","satisfies","isVersionGreaterThan","isVersionLessThan","isVersionEqualTo","doesVideoMuteByStreamRemove","isChromiumBased","isWebKitBased","isIosBrowser","maxTouchPoints","platform","Boolean","isEngine","mediaDevices","getUserMedia","RTCRtpTransceiver","isTwa","matchMedia","matches","isSupported","_getSafariVersion","_getChromiumBasedVersion","isSupportedAndroidBrowser","isSupportedIOSBrowser","_getIOSVersion","isUserInteractionRequiredForUnmute","supportsVideoMuteOnConnInterrupted","supportsBandwidthStatistics","supportsCodecPreferences","RTCRtpReceiver","getCapabilities","supportsDeviceChangeEvent","ondevicechange","addEventListener","supportsLocalCandidateRttStatistics","supportsPerformanceObserver","PerformanceObserver","supportedEntryTypes","supportsReceiverStats","supportsRTTStatistics","supportsVP9","usesSdpMungingForSimulcast","usesAdapter","usesRidsForSimulcast","supportsGetDisplayMedia","getDisplayMedia","supportsEncodedTransform","RTCRtpScriptTransform","supportsInsertableStreams","RTCRtpSender","createEncodedStreams","ReadableStream","postMessage","supportsAudioRed","codecs","codec","mimeType","supportsUnifiedPlan","supportsVADDetection","supportsRTX","versions","chromium","ua","reset","disposed","analyticsHandlers","Set","cache","permanentProperties","conferenceName","addPermanentProperties","browser","dispose","size","handler","setAnalyticsHandlers","handlers","_setUserProperties","event","_sendEvent","setUserProperties","properties","setConferenceName","sendEvent","eventName","_verifyRequiredFields","objectType","containerType","containerId","objectId","_maybeCacheEvent","require","wrtcFuncNames","reportType","_fabrics","CallStats","backend","backendInitialized","atLeastOneFabric","defaultInstance","callStatsInstance","fabrics","hasFabric","debug","_addNewFabric","_emptyReportQueue","csInstance","defaultConfID","confID","defaultPC","peerconnection","report","reportsQueue","errorData","_reportError","pc","eventData","sendFabricEvent","associateMstWithUserID","callStatsId","usageLabel","cs","_error","reportError","theBackend","tryCatchMethods","originalMethod","theArguments","GlobalOnErrorHandler","debugMethods","originalReportError","exception","CallStatsBackend","callstats","_traceAndCatchBackendCalls","userID","aliasName","userName","callStatsID","callStatsSecret","configParams","applicationName","applicationVersion","siteID","initialize","_initCallback","getWiFiStatsMethod","attachWifiStatsHandler","then","addresses","catch","devicesData","_reportEvent","conferenceID","overall","comment","Promise","resolve","sendUserFeedback","status","reason","mute","tpc","remoteUserID","add","fabricAttributes","remoteEndpointType","isP2P","endpointType","peer","server","ret","addNewFabric","fabricUsage","multiplex","_addNewFabricCallback","success","associateStreamWithVideoTag","isLocal","streamEndpointId","sendDominantSpeakerEvent","sendTerminateEvent","fabricEvent","fabricTerminated","delete","sendIceConnectionFailedEvent","sendCreateOfferFailed","sendCreateAnswerFailed","sendResumeOrHoldEvent","isResume","sendScreenSharingEvent","sendSetLocalDescFailed","sendSetRemoteDescFailed","sendAddIceCandidateFailed","AudioContext","webkitAudioContext","context","LocalStatsCollector","interval","intervalId","intervalMilis","audioLevel","safeCounterIncrement","number","nextValue","MAX_SAFE_INTEGER","calculateAverage","valueArray","filterPositiveValues","suspend","isLocalStatsSupported","analyser","createAnalyser","smoothingTimeConstant","fftSize","createMediaStreamSource","connect","setInterval","Uint8Array","frequencyBinCount","getByteTimeDomainData","samples","maxVolume","parseFloat","toFixed","timeDomainDataToAudioLevel","newLevel","lastLevel","diff","animateLevel","clearInterval","RunningAverage","average","addNext","getAverage","PerformanceObserverStats","emitter","statsInterval","eventEmitter","longTasks","maxDuration","performanceStatsInterval","stats","getLongTasksStats","avgRatePerMinute","maxDurationMs","startObserver","longTaskEventHandler","list","entries","getEntries","max","duration","observer","observe","buffered","startTime","now","longTasksIntervalId","_lastTimeStamp","StatisticsEvents","stopObserver","disconnect","AUDIO","PRESENTER","VIDEO","calculatePacketLoss","lostPackets","totalPackets","round","SsrcStats","loss","bitrate","download","upload","resolution","framerate","ConferenceStats","bandwidth","packetLoss","StatsCollector","audioLevelsInterval","baselineAudioLevelsReport","currentAudioLevelsReport","currentStatsReport","previousStatsReport","audioLevelReportHistory","audioLevelsIntervalId","conferenceStats","audioLevelsIntervalMilis","speakerList","statsIntervalId","statsIntervalMilis","ssrc2stats","Map","setLoss","setResolution","addBitrate","resetBitrate","setFramerate","setCodec","setSpeakerList","errorCallback","callErrorHandler","startAudioLevelStats","audioLevels","getAudioLevels","getStats","processAudioLevelReport","processStats","processStatsReport","_processAndEmitReport","bitrateDownload","bitrateUpload","resolutions","framerates","audioCodec","videoCodec","audioBitrateDownload","audioBitrateUpload","videoBitrateDownload","videoBitrateUpload","ssrcStats","isDownloadStream","packetsTotal","packetsLost","track","getTrackBySSRC","isAudioTrack","participantId","getParticipantId","width","height","userResolutions","userFramerates","codecDesc","userCodecs","audio","total","avgAudioLevels","localAvgAudioLevels","avgAudioLevel","sum","currentValue","getNonNegativeValue","isNaN","_calculateBitrate","before","fieldName","bytesNow","bytesBefore","bytesProcessed","timeMs","bitrateKbps","byteSentStats","nominated","state","availableIncomingBitrate","availableOutgoingBitrate","remoteUsedCandidate","get","remoteCandidateId","localUsedCandidate","localCandidateId","localip","protocol","conferenceStatsTransport","p2p","localCandidateType","candidateType","remoteCandidateType","networkType","rtt","currentRoundTripTime","set","packetsNow","packetsBefore","packetsDiff","packetsLostNow","packetsLostBefore","packetsLostDiff","frameHeight","frameWidth","frameRate","framesPerSecond","bytesSent","codecId","codecShortType","kind","MediaType","remoteSource","localVideoTracks","getLocalTracks","getLocalSSRC","framesSent","numberOfActiveStreams","getActiveSimulcastStreams","trackIdentifier","getSsrcByTrackId","_instances","isCallstatsLoaded","_initCallStatsBackend","isBackendInitialized","initBackend","Statistics","xmpp","rtpStatsMap","callStatsIntegrationEnabled","enableCallStats","disableThirdPartyRequests","callStatsApplicationLogsDisabled","ScriptUtil","customScriptUrl","loadCallStatsAPI","callsStatsInstances","instances","init","audioLevelsEnabled","disableAudioLevels","pcStatsInterval","longTasksStatsInterval","analytics","defineProperty","startRemoteStats","stopRemoteStats","rtpStats","RTPStats","localStats","startLocalStats","LocalStats","addAudioLevelListener","on","removeAudioLevelListener","addBeforeDisposedListener","removeBeforeDisposedListener","addConnectionStatsListener","removeConnectionStatsListener","addByteSentStatsListener","removeByteSentStatsListener","addLongTasksStatsListener","attachLongTasksStats","conference","performanceObserverStats","JitsiConferenceEvents","removeLongTasksStatsListener","from","callStats","stopCallStats","tpcId","_stopRemoteStats","removeAllListeners","stopLocalStats","startCallStats","has","newInstance","_getAllCallStatsInstances","csInstances","statistics","isCallstatsEnabled","sendConnectionResumeOrHoldEvent","instance","sendMuteEvent","muted","roomJid","sendActiveDeviceListEvent","globalSet","userId","sendGetUserMediaFailed","formatJitsiTrackErrorForCallStats","sendLog","globalSubSet","csPerStats","sendApplicationLog","sendFeedback","rating","LOCAL_JID","reportGlobalError","sendAnalyticsAndLog","eventToLog","sendAnalytics","analyticsEventEmitter","addAnalyticsEventListener","removeAnalyticsEventListener","JitsiConferenceEventManager","xmppListeners","p2pJingleSession","jvbJingleSession","isMuted","getType","setupChatRoomListeners","chatRoom","room","chatRoomForwarder","EventEmitterForwarder","XMPPEvents","jingleSession","rtc","closeBridgeChannel","features","participant","getParticipantById","Strophe","setFeatures","offerIq","_setBridgeChannel","actor","mutedByFocusActor","setAudioMute","isMutedByFocus","mutedVideoByFocusActor","setVideoMute","isVideoMutedByFocus","forward","_onMucJoined","isJvbConnectionInterrupted","connectionTimes","JitsiConferenceErrors","bridgeDown","createBridgeDownEvent","_onConferenceRestarted","_onIceConnectionFailed","createFocusLeftEvent","jid","resource","getStatus","setTerminator","setInitiator","setParticipantPropertyListener","setProperty","tagName","onMemberKicked","onSuspendDetected","onMemberJoined","_onMemberBotTypeChanged","onMemberLeft","onDisplayNameChanged","role","onLocalRoleChanged","isModerator","recorderSession","logObject","getError","onUserRoleChanged","AuthenticationEvents","authEnabled","authIdentity","txt","myJid","_status","addPresenceListener","myUserId","startAudioMuted","startVideoMuted","updated","startMutedPolicy","setupRTCListeners","RTCEvents","onRemoteTrackAdded","onRemoteTrackRemoved","dominant","previous","participants","_hidden","lastDominantSpeaker","roomjid","performance","ufrag","isVideoTrack","videoType","VideoType","removeXMPPListeners","setupXMPPListeners","_addConferenceXMPPListener","onIncomingCall","onCallAccepted","onTransportInfo","onCallEnded","audioMuted","videoMuted","ignoreStartMuted","createdTimestamp","actorJid","actorParticipant","getParticipants","getJid","enabled","setupStatisticsListeners","setAudioLevel","startSilent","onByteSentStatsReceived","LOCAL_TRACK_STOPPED","TRACK_AUDIO_OUTPUT_CHANGED","TRACK_VIDEOTYPE_CHANGED","NO_DATA_FROM_SOURCE","ParticipantConnectionStatus","ACTIVE","INACTIVE","INTERRUPTED","RESTORING","ParticipantConnectionStatusHandler","isConnectionActiveByJvb","isInLastN","isRestoringTimedout","isVideoMuted","isVideoTrackFrozen","trackTimers","connStatusFromJvb","outOfLastNTimeout","p2pRtcMuteTimeout","rtcMuteTimeout","rtcMutedTimestamp","enteredLastNTimestamp","restoringTimers","connectionStatusMap","_getVideoFrozenTimeout","isP2PActive","_onEndpointConnStatusChanged","onEndpointConnStatusChanged","_onP2PStatus","refreshConnectionStatusForAll","_onUserLeft","onUserLeft","_onTrackRtcMuted","onTrackRtcMuted","_onTrackRtcUnmuted","onTrackRtcUnmuted","_onRemoteTrackAdded","_onRemoteTrackRemoved","_onSignallingMuteChanged","onSignallingMuteChanged","_onTrackVideoTypeChanged","onTrackVideoTypeChanged","_onLastNChanged","_onLastNValueChanged","off","participantIds","clearRtcMutedTimestamp","endpointId","isActive","figureOutConnectionStatus","_changeConnectionStatus","newStatus","getConnectionStatus","getId","_setConnectionStatus","remoteTrack","JitsiTrackEvents","hasAnyVideoRTCMuted","hasAnyVideoTrackWebRTCMuted","timeout","inP2PMode","isRestoringTimedOut","_isRestoringTimedout","audioOnlyMode","getLastN","isConnActiveByJvb","newState","_getNewStateForP2PMode","_getNewStateForJvbMode","_clearRestoringTimer","oldConnectionStatus","connectionStatus","nowMs","maybeSendParticipantConnectionStatusEvent","startedMs","videoTracks","getTracksByMediaType","participantConnectionStatus","createParticipantConnectionStatusEvent","leavingLastN","enteringLastN","rTimer","JitsiParticipant","displayName","hidden","statsID","identity","isReplacing","isReplaced","_jid","_id","_conference","_displayName","_supportsDTMF","_tracks","_role","_statsID","_connectionStatus","_properties","_identity","_isReplacing","_isReplaced","_features","getConference","getProperty","getTracks","jitsiTrack","isWebRTCTrackMuted","oldValue","getDisplayName","getStatsID","isHidden","isAudioMuted","_isMediaTypeMuted","getRole","setRole","newRole","setIsReplacing","newIsReplacing","setIsReplaced","newIsReplaced","supportsDTMF","getFeatures","hasFeature","feature","newFeatures","getBotType","_botType","setBotType","newBotType","CONNECTION_FAILED","WRONG_STATE","DISPLAY_NAME_REQUIRED","CONNECTION_DROPPED_ERROR","OTHER_ERROR","SERVER_ERROR","Deferred","promise","clearRejectTimeout","_timeout","setRejectTimeout","ms","Listenable","removeEventListener","kJitsiE2EE","Symbol","E2EEcontext","sharedKey","baseUrl","ljm","document","querySelector","idx","src","lastIndexOf","workerUrl","workerBlob","Blob","URL","createObjectURL","_worker","Worker","onerror","operation","cleanup","cleanupAll","handleReceiver","receiver","receiverStreams","readableStream","readable","writableStream","writable","handleSender","sender","senderStreams","setKey","keyIndex","KeyHandler","e2eeCtx","E2EEContext","_enabling","_onMediaSessionStarted","_onLocalTrackAdded","_setupReceiverE2EEForTrack","_trackMuteChanged","isEnabled","_setEnabled","setLocalParticipantProperty","_restartMediaSessions","setEncryptionKey","_getMediaSessions","_setupSenderE2EEForTrack","localTracks","findReceiverForTrack","findSenderForTrack","ExternallyManagedKeyHandler","keyInfo","encryptionKey","v4","OLM_MESSAGE_TYPE","OLM_MESSAGE_TYPES","kOlmData","OlmAdapterEvents","OLM_ID_KEY_READY","PARTICIPANT_E2EE_CHANNEL_READY","PARTICIPANT_KEY_UPDATED","OlmAdapter","_conf","_init","_key","_keyIndex","_reqs","_sessionInitialization","_bootstrapOlm","_onEndpointMessageReceived","_onConferenceLeft","_onParticipantLeft","_onParticipantPropertyChanged","promises","localParticipantId","FEATURE_E2EE","_sendSessionInit","allSettled","Olm","pId","olmData","_getParticipantOlmData","uuid","uuidv4","JITSI_MEET_MUC_TYPE","olm","ciphertext","_encryptKeyInfo","d","_sendMessage","updateCurrentKey","clearParticipantSession","free","clearAllParticipantsSessions","_olmAccount","Account","idKeys","identity_keys","_idKey","curve25519","get_library_version","_onIdKeyReady","idKey","_onParticipantE2EEChannelReady","base64js","encrypt","_sendError","Session","create_outbound","otKey","ack","pendingSessionUuid","create_inbound","body","remove_one_time_keys","decrypt","json","safeJsonParse","lastKey","isEqual","newValue","isE2EEEnabled","sendMessage","generate_one_time_keys","otKeys","one_time_keys","mark_keys_as_published","events","ManagedKeyHandler","_conferenceJoined","_olmAdapter","_rotateKey","debounce","_rotateKeyImpl","_ratchetKey","_ratchetKeyImpl","_onParticipantKeyUpdated","_onParticipantJoined","initSessions","_generateKey","updateKey","material","keyBytes","crypto","subtle","importKey","newKey","textEncoder","TextEncoder","deriveBits","salt","encode","hash","ArrayBuffer","ratchet","getRandomValues","E2EEncryption","e2ee","_externallyManaged","externallyManagedKey","_keyHandler","testing","disableE2EE","enableEncodedTransformSupport","setEnabled","IDENTITY_PROPERTIES","IDENTITY_PROPERTIES_FOR_COMPARE","compareIdentities","res","parseDiscoInfo","identities","$","_","getAttribute","category","Caps","connection","disco","rooms","externalFeatures","emuc","_addChatRoom","_removeChatRoom","addFeature","submit","external","_generateVersion","_updateRoomWithExternalFeatures","removeFeature","sendPresence","removeFromPresence","children","f","addOrReplaceInPresence","getFeaturesAndIdentities","_getDiscoInfo","response","_fixChatRoomPresenceMap","xmlns","ver","_notifyVersionChanged","sortedIdentities","accumulatedValue","tmp","sortedFeatures","b64_sha1","generateSha","_identities","NETWORK_INFO_EVENT","_current","isOnline","updateNetworkInfo","ResumeTask","stropheConnection","_stropheConn","_resumeRetryN","_retryDelay","retryDelay","schedule","_cancelResume","_networkOnlineListener","NetworkInfo","_scheduleResume","_resumeTimeout","min","minDelay","base","pow","getJitterDelay","_resumeConnection","streamManagement","resumeToken","getResumeToken","url","service","search","pattern","oldToken","cancel","LastRequestTracker","_lastSuccess","_lastFailedMessage","startTracking","xmppConnection","originalRawInput","rawInput","rawMessage","includes","connected","getLastFailedMessage","getTimeSinceLastSuccess","getConnectionPluginDefinition","ConnectionPluginListenable","PingConnectionPlugin","ConnectionPlugin","getTimeSinceLastServerResponse","onPingThresholdExceeded","pingOptions","failedPings","_onPingThresholdExceeded","_getTimeSinceLastServerResponse","pingInterval","pingTimeout","pingThreshold","threshold","pingTimestampsToKeep","pingExecIntervals","ping","_addPingExecutionTimestamp","iq","$iq","to","sendIQ2","startInterval","remoteJid","_lastServerCheck","errmsg","stopInterval","getTime","getPingSuspendTime","pingIntervals","maxInterval","previousTS","currentInterval","XmppConnection","Events","CONN_STATUS_CHANGED","CONN_SHARD_CHANGED","Status","enableWebsocketResume","websocketKeepAlive","websocketKeepAliveUrl","serviceUrl","shard","xmppPing","_options","_usesWebsocket","startsWith","maxRetries","_rawInputTracker","LastSuccessTracker","_resumeTask","_deferredIQs","addConnectionPlugin","_onPingErrorThresholdExceeded","_oneSuccessfulConnect","websocket","_proto","socket","isUsingWebSocket","readyState","WebSocket","OPEN","disconnecting","domain","lastResponseHeaders","pingDomain","_maybeStartWSKeepAlive","plugin","addHandler","attach","sid","rid","_stropheConnectionCb","pass","targetCallback","blockCallback","_maybeEnableStreamResume","_keepAliveAndCheckShard","_processDeferredIQs","_tryResumingConnection","_wsKeepAlive","_clearDeferredIQs","deferred","closeWebsocket","_closeSocket","_onClose","enable","intervalWithJitter","fetch","responseShard","headers","timeLeft","sendIQ","send","stanza","elem","errback","sendUnavailableBeacon","sendBeacon","_changeConnectStatus","_buildBody","attrs","pres","$pres","cnode","tree","_abortAllRequests","_doDisconnect","ON","OFF","AVModeration","_xmpp","_mainRoom","_moderationEnabledByType","_whitelistAudio","_whitelistVideo","_onMessage","avModerationComponentAddress","$msg","up","approve","jidToWhitelist","jidToBlacklist","removed","approved","whitelists","newWhitelists","oldList","newList","FEATURE_KEY","BREAKOUT_ROOM_ACTIONS","ADD","REMOVE","MOVE_TO_ROOM","BREAKOUT_ROOM_EVENTS","BreakoutRooms","_handleMessages","_rooms","createBreakoutRoom","subject","removeBreakoutRoom","breakoutRoomJid","sendParticipantToRoom","participantJid","getComponentAddress","breakoutRoomsComponentAddress","_setIsBreakoutRoom","isBreakoutRoom","_isBreakoutRoom","_setMainRoomJid","_mainRoomJid","getMainRoomJid","EMAIL_COMMAND","Lobby","mainRoom","maybeJoinLobbyRoom","_maybeJoinLobbyRoom","lobbyRoomJid","lobbySupported","setMembersOnly","disable","lobbyRoom","membersOnlyEnabled","sendPrivateMessage","getLocalId","myroomjid","addMessageListener","removeMessageHandler","leave","setLobbyRoomJid","joined","email","roomName","customDomain","createRoom","disableDiscoInfo","disableFocus","enableLobby","nick","isHiddenDomain","botType","members","getBreakoutRooms","avatar","clean","isSelfPresence","invitePassword","denyAccess","kick","approveAccess","mainRoomJid","memberRoomJid","msgToSend","_callStatsUserName","_machineId","externalStorage","callStatsUserName","username","UsernameGenerator","generateCallStatsUserName","machineId","amDid","jitsiMeetId","_p8","generateJitsiMeetId","sessionId","createExpBackoffTimer","step","Moderator","origin","Settings","xmppService","getNextTimeout","getNextErrorTimeout","externalAuthEnabled","sipGatewayEnabled","attachEvent","isExternalAuthEnabled","isSipGatewayEnabled","onMucMemberLeft","setFocusUserJid","focusJid","focusUserJid","getFocusUserJid","getFocusComponent","focusComponent","hosts","focus","createConferenceIq","machineUID","disableRtx","audioPacketDelay","startBitrate","minBitrate","rtcstatsEnabled","callstatsDisabled","parseSessionId","resultIq","attr","parseConfigOptions","authenticationEnabled","IDENTITY_UPDATED","allocateConferenceFocus","_allocateConferenceFocusSuccess","_allocateConferenceFocusError","invalidSession","reservationErr","errorCode","errorTextNode","errorMsg","anonymousdomain","waitMs","retrySec","authenticate","errorIq","prop","getLoginUrl","urlCallback","failureCallback","_getLoginUrl","popup","urlCb","failureCb","decodeURIComponent","getPopupLoginUrl","logout","logoutUrl","packet2JSON","xmlElement","child","json2packet","packet","filterNodeFromPresenceJSON","nodeName","MEMBERS_AFFILIATIONS","ChatRoom","password","XMPP","replaceParticipant","presMap","presHandlers","_removeConnListeners","inProgressEmitted","focusMucJid","noBridgeAvailable","moderator","lobby","avModeration","breakoutRooms","initPresenceMap","lastPresences","phoneNumber","phonePin","participantPropertyListener","locked","transcriptionStatus","JitsiTranscriptionStatus","xns","statsId","presenceUpdateTime","onConnStatusChanged","fromJoin","billingId","presenceSyncTime","doLeave","discoRoomInfo","getInfo","meetingIdValEl","setMeetingId","membersOnly","lobbyRoomField","isBreakoutField","breakoutMainRoomField","meetingId","createNonAnonymousRoom","getForm","form","formSubmit","CONNECTED","onPresence","member","statusEl","getElementsByTagName","textContent","hasStatusUpdate","hasVersionUpdate","xElement","getElementsByTagNameNS","mucUserItem","isReplaceParticipant","affiliation","isFocus","hiddenDomain","isTranscriber","innerHTML","toLowerCase","fromHiddenDomain","presence","xEl","remove","extractIdentityInformation","userInfo","user","tag","groupInfo","_extractFeatures","_initFocus","memberOfThis","displayJids","restartByTerminateSupported","supportsRestartByTerminate","att","phone","pin","processNode","var","focusFeatures","tagHandlers","elementName","setSubject","onParticipantLeft","skipEvents","onPresenceUnavailable","destroySelect","reasonSelect","isKick","membersKeys","actorSelect","actorNick","onMessage","settingsErrorMsg","subjectText","stamp","dateParts","invite","passwordSelect","jsonMessage","parsedJson","tryParseJSONAndVerify","onPresenceError","lobbyRoomNode","lobbyRoomOldNode","setAffiliation","grantIQ","kickIQ","lockRoom","onSuccess","onError","onNotSupported","formsubmit","formToSubmit","addToPresence","matchingNodes","getFromPresence","removePresenceListener","handlerIdx","mucJid","getMemberRole","peerJid","addAudioInfoToPresence","audioMutedTagName","addVideoInfoToPresence","videoMutedTagName","getMediaPresenceInfo","mutedNode","codecTypeNode","videoTypeNode","codecType","getLastPresence","mucNick","isSIPCallingSupported","dial","rayo","hangup","getLobby","getAVModeration","getPhoneNumber","getPhonePin","getMeetingId","muteParticipant","iqToFocus","onMute","onMuteVideo","onMucLeft","doReject","MucConnectionPlugin","isRoomCreated","flags","_sourceNameSignaling","sourceNameSignaling","_sendMultipleVideoStreams","sendMultipleVideoStreams","isMultiStreamSupportEnabled","isSourceNameSignalingEnabled","_createSourceExtension","owner","sourceCompactJson","$build","FeatureFlags","_createSsrcGroupExtension","ssrcGroupCompactJson","_getOrCreateRtpDescription","jingle","description","appendChild","expandSourcesFromJson","jsonMessageXml","audioRtpDescription","videoRtpDescription","ownerSources","videoSources","videoSsrcGroups","audioSources","audioSsrcGroups","ScreenObtainer","obtainStream","_createObtainStreamMethod","onFailure","JitsiMeetNW","obtainDesktopStream","jitsiError","obtainScreenOnElectron","obtainScreenFromGetDisplayMediaRN","obtainScreenFromGetDisplayMedia","_getAudioConstraints","audioQuality","stereo","autoGainControl","channelCount","echoCancellation","noiseSuppression","JitsiMeetScreenObtainer","openDesktopPicker","desktopSharingFrameRate","desktopSharingSources","streamId","streamType","screenShareAudio","audioConstraints","optionalConstraints","optional","chromeMediaSource","chromeMediaSourceId","minFrameRate","maxFrameRate","maxWidth","screen","maxHeight","sourceId","sourceType","cursor","errorDetails","errorName","errorStack","setDesktopSharingFrameRate","maxFps","SDPUtil","filterSpecialChars","iceparams","mediadesc","sessiondesc","pwd","findLine","parseICEUfrag","parseICEPwd","buildICEUfrag","frag","buildICEPwd","parseMID","parseMSIDAttribute","ssrcLines","msidLine","parseMLine","proto","fmt","buildMLine","mline","parseRTPMap","clockrate","channels","parseSCTPMap","parseSCTPPort","buildRTPMap","parseCrypto","parseFingerprint","fingerprint","parseFmtp","parseICECandidate","candidate","elems","foundation","network","buildICECandidate","cand","hasOwnAttribute","parseSSRC","lines","parseSourceNameLine","sourceNameLine","ssrcSdpLine","parseRTCPFB","pt","params","parseExtmap","uri","haystack","needle","sessionpart","findLines","needles","candidateToJingle","candidateFromJingle","parsePrimaryVideoSsrc","videoMLine","generateSsrc","RandomUtil","ssrcLine","parseGroupSsrcs","ssrcGroup","getMedia","getUfrag","ufragLines","preferCodec","codecName","matchingPayloadTypes","payloadTypes","payloadIndex","stripCodec","highProfile","h264Pts","removePts","stripH264HighCodec","CodecMimeType","rtxApts","rtxPts","keepPts","MediaDirection","rtcpFb","SDP","mediaI","raw","arrayEquals","array1","array2","equals","SDPDiffer","mySDP","otherSDP","failICE","removeTcpCandidates","removeUdpCandidates","addMlineForNewLocalSource","clonedeep","groups","mids","getMediaSsrcMap","mediaSSRCs","mediaindex","linessrc","containsSSRC","medias","toJingle","thecreator","assrcline","creator","amidline","rtpmap","afmtpline","fmtpParameters","rtcpFbToJingle","availableSsrc","ssrcParameters","sourceName","ridLines","rids","ridLine","ridInfo","extmapLines","extmap","senders","transportToJingle","sctpport","sctpmap","sctpAttrs","streams","setupLine","setup","iceParameters","payloadtype","feedback","rtcpFbFromJingle","feedbackElementTrrInt","fb","hasAttribute","fromJingle","contents","jingle2media","sctp","payloadType","setAttribute","__","parameter","hdrExt","userSources","nonUserSources","isUserSource","sourceStr","getNewMedia","myMedias","othersMedias","newMedia","othersMediaIdx","myMedia","othersMedia","otherSsrcGroup","matched","mySsrcGroup","modify","sdpMediaSsrcs","modified","ssrcNum","mediaSsrc","AsyncQueue","_queue","_processQueueTasks","_stopped","finishedCallback","shutdown","PENDING","ENDED","JingleSession","localJid","mediaConstraints","pcConfig","isInitiator","usedrip","dripContainer","_signalingLayer","initiatorJid","responderJid","signalingLayer","JingleSessionState","doInitialize","addIceCandidates","getState","addSources","removeSources","terminate","failure","acceptOffer","_getInitiatorJid","IQ_TIMEOUT","JingleSessionPC","jingleContents","videoContents","maxFrameHeightSel","_bridgeSessionId","_cachedOldLocalSdp","_cachedNewLocalSdp","_iceCheckingStartedTimestamp","_gatheringStartedTimestamp","localRecvMaxFrameHeight","_localVideoActive","_remoteVideoActive","_gatheringReported","lasticecandidate","closed","remoteRecvMaxFrameHeight","modificationQueue","wasConnected","establishmentDuration","_xmppListeners","onXmppStatusChanged","_removeSenderVideoConstraintsChangeListener","_assertNotEnded","isReconnect","wasstable","webrtcIceUdpDisable","webrtcIceTcpDisable","pcOptions","gatherStats","maxstats","capScreenshareBitrate","enableInsertableStreams","videoQuality","forceTurnRelay","enableUnifiedOnChrome","disableSimulcast","abtestSuspendVideo","_abtestSuspendVideoEnabled","preferH264","disableH264","preferredCodec","H264","createPeerConnection","onicecandidate","ev","phase","initiator","sendIceCandidate","onsignalingstatechange","signalingState","connectionState","oniceconnectionstatechange","isStable","iceConnectionState","reconnect","usesTerminateForRestart","enableIceRestart","iceStarted","onconnectionstatechange","icestate","onnegotiationneeded","remoteDescription","workFunction","oldSdp","localDescription","_renegotiate","configureSenderVideoEncodings","newSdp","notifyMySSRCUpdate","getRemoteRecvMaxFrameHeight","localSDP","ice","sdpMLineIndex","jcand","errorMesssage","sendIceCandidates","cands","sdpMid","fingerprintLine","required","newJingleErrorHandler","sendIceFailedNotification","sessionInfo","iceCandidates","rtcCandidate","RTCIceCandidate","iceCandidate","addIceCandidate","outerHTML","readSsrcInfo","ssrcElement","setSSRCOwner","setTrackSourceName","i3","ssrcInfoElement","jidOrEndpointId","generateRecvonlySsrc","getConfiguredVideoCodec","jingleOffer","setOfferAnswerCycle","sendSessionAccept","addTracks","localTrack","addTrack","createOffer","offerSdp","setLocalDescription","sendSessionInitiate","setAnswer","jingleAnswer","remoteSdp","_responderRenegotiate","jingleOfferAnswerIq","newRemoteSdp","_processNewJingleOfferIq","oldLocalSdp","bridgeSessionId","sendContentModify","newLocalSdp","setVideoCodecs","preferred","disabled","current","replaceTransport","jingleOfferElem","enableForcedReload","sendTransportAccept","originalOffer","clone","newFingerprint","accept","responder","maxFrameHeight","sessionModify","setReceiverVideoConstraint","transportAccept","medialines","sendTransportReject","transportReject","setSenderVideoConstraint","videoActive","setMediaTransferActive","setSenderVideoConstraints","sendSessionTerminate","sessionTerminate","reasonDescription","restart","requestRestart","onTerminated","reasonCondition","reasonText","close","_parseSsrcInfoFromSourceAdd","sourceAddElem","currentRemoteSdp","addSsrcInfo","i1","i2","addRemoteStream","_addOrRemoveRemoteStream","removeRemoteStream","removeRemoteStreamsOnLeave","finishCallback","removeSsrcInfo","getRemoteSourceInfoByParticipant","_processRemoteRemoveSource","newLocalSDP","isAdd","logPrefix","errMsg","addOrRemoveSsrcInfo","_parseSsrcInfoFromSourceRemove","_processRemoteAddSource","findIndex","desiredDirection","getDesiredMediaDirection","optionalRemoteSdp","_initiatorRenegotiate","setRemoteDescription","createAnswer","answer","offer","replaceTrack","oldTrack","newTrack","clearRecvonlySsrc","shouldRenegotiate","sourceRemoveElem","_verifyNoSSRCChanged","operationName","oldSDP","currentLocalSDP","sdpDiff","addedMedia","removedMedia","addTrackAsUnmute","_addRemoveTrackAsMuteUnmute","removeTrackAsMute","isMute","oldLocalSDP","removeTrackMute","addTrackUnmute","audioActive","logAudioStr","logVideoStr","isSessionActive","audioActiveChanged","setAudioTransferActive","pcVideoActiveChanged","setVideoTransferActive","modifyContents","newVideoSenders","parseVideoSenders","newMaxFrameHeight","parseMaxFrameHeight","MediaSessionEvents","_modifyRemoteVideoActive","remoteVideoSenders","isRemoteVideoActive","newSDP","getSignaledSourceInfo","sdpDiffer","mediaIndex","signaledSsrcs","removedAnySSRCs","ctx","sourceInfo","request","errResponse","errorElSel","code","errorReasonSel","errorMsgSel","getIceConnectionState","getConnectionState","abTesting","enableSuspendVideoTest","integerHash","_parseIceCandidates","parseCandidates","candidateAttrs","JingleConnectionPlugin","iceConfig","sessions","jvbIceConfig","jvb","p2pIceConfig","offerToReceiveAudio","offerToReceiveVideo","onJingle","fromJid","sess","jsonMessages","audioVideoSsrcs","logMessage","endpoint","startMuted","iceUfrag","icePwd","dtlsFingerprint","successTime","newP2PJingleSession","me","getStunAndTurnCredentials","v2Res","onReceiveStunAndTurnCredentials","v1Res","iceservers","dict","urls","credential","temp","useTurnUdp","iceServers","getLog","updateLog","href","StropheLogger","logIncoming","rawOutput","logOutgoing","RAYO_XMLNS","RayoConnectionPlugin","onRayo","roomPass","req","callResource","lastErrorStatus","resetLastErrorStatusRegExpr","lastErrorStatusRegExpr","FAILURE_REGEX","DEFAULT_STUN_SERVERS","FEATURE_JIGASI","token","disconnectInProgress","authenticatedUser","trace","errStatusCapture","exec","createConnection","bosh","deploymentInfo","details","shard_changed","suspend_time","time_since_last_success","JitsiConnectionEvents","JitsiConnectionErrors","_initStrophePlugins","caps","initFeaturesList","disableBeforeUnloadHandlers","enableOpusRed","enableRemb","enableTcc","enableLipSync","getConnection","connectionHandler","credentials","statusStr","_maybeSendDeploymentInfoStat","_sysMessageHandler","deleteHandler","sendDiscoInfo","_resetState","sendDeploymentInfo","_processDiscoInfoIdentities","anonymousConnectionFailed","connectionFailed","lastErrorMsg","wasIntentionalDisconnect","_getConnectionFailedReasonDetails","lastFailedRawMessage","_parseConnectionFailedMessage","speakerStatsComponentAddress","conferenceDurationComponentAddress","processLobbyFeatures","fr","endsWith","region","_onPrivateMessage","_connect","_addSysHandler","_onSystemMessage","foundIceServers","attaching","configDomain","hostname","onCreateResource","getRoomJid","mucNickname","muc","getJingleLog","getXmppLog","getSessions","disconnectListener","_cleanupXmppConnection","evType","sync","p2pStunServers","stunServers","iceTransportPolicy","headersArr","trim","header","sendFacialExpressionEvent","expression","facialExpression","jsonString","users","created_timestamp","acceptedStatuses","aprops","authenticateAndUpgradeRole","rejectPromise","onLoginSuccessful","roomPassword","canceled","authenticationError","connectionError","CodecSelection","disabledCodec","_getCodecMimeType","jvbCodec","p2pCodec","jvbPreferredCodec","_isCodecSupported","p2pPreferredCodec","_selectPreferredCodec","mediaSession","currentCodec","selectedCodec","enforcePreferredCodec","remoteParticipants","remote","peerMediaInfo","getPeerMediaInfo","peerCodec","getPreferredCodec","BridgeChannel","wsUrl","TypeError","_channel","_eventEmitter","_mode","_areRetriesEnabled","_closedFromClient","datachannel","createDataChannel","_handleChannel","_wsUrl","_initWebSocket","ws","_startConnectionRetries","timeoutS","reload","isOpen","_retryTimeout","_stopConnectionRetries","_retryWebSocketConnection","closeEvent","createBridgeChannelClosedEvent","once","mode","sendEndpointStatsMessage","_send","colibriClass","msgPayload","sendSetLastNMessage","lastN","sendSelectedEndpointsMessage","endpointIds","selectedEndpoints","sendReceiverVideoConstraintMessage","maxFrameHeightPixels","sendNewReceiverVideoConstraintsMessage","sendVideoTypeMessage","sendSourceVideoTypeMessage","channel","onopen","onmessage","dominantSpeakerEndpoint","previousSpeakers","active","lastNEndpoints","videoConstraints","onclose","jsonObject","DEFAULT_CONSTRAINTS","ideal","audioOutputDeviceId","audioOutputChanged","disableAP","disableAEC","disableNS","disableAGC","featureDetectionAudioEl","createElement","isAudioOutputDeviceChangeAvailable","setSinkId","availableDevicesPollTimer","availableDevices","emptyFuncton","updateGrantedPermissions","um","audioTracksReceived","getAudioTracks","videoTracksReceived","getVideoTracks","grantedPermissions","sendDeviceListToAnalytics","deviceList","audioInputDeviceCount","audioOutputDeviceCount","videoInputDeviceCount","videoOutputDeviceCount","device","deviceId","groupId","label","updateKnownDevices","pds","newDevices","mediaDeviceInfoToJSON","facing","compareAvailableMediaDevices","rtcUtils","origAttachMediaStream","RTCPeerConnectionType","RTCPeerConnection","attachMediaStream","getStreamID","getTrackID","element","srcObject","isDeviceChangeAvailable","getAudioOutputDevice","ex","pcConstraints","googScreencastMinBitrate","googCpuOveruseDetection","screenObtainer","isDeviceListAvailable","enumerateDevices","_getUserMedia","umDevices","gumTimeout","timeoutExpired","_getDesktopMedia","_getMissingTracks","requestedDevices","missingDevices","audioDeviceRequested","videoDeviceRequested","obtainAudioAndVideoPermissions","otherOptions","mediaStreamsMetaData","maybeRequestDesktopDevice","desktopSharingSourceDevice","matchingDevice","maybeRequestCaptureDevices","requestedCaptureDevices","Resolutions","cameraDeviceId","facingMode","CameraFacingMode","micDeviceId","assign","getConstraints","desktopStream","desktopAudioTracks","desktopAudioStream","MediaStream","desktopVideoTracks","desktopVideoStream","avStream","audioTracks","audioStream","effects","videoStream","stopMediaStream","deviceType","mediaStream","release","isDesktopSharingEnabled","setAudioOutputDevice","getCurrentlyAvailableMediaDevices","arePermissionsGrantedForAvailableDevices","getEventDataForActiveDevice","deviceData","setSuspendVideo","googSuspendBelowMinBitrate","trackHandler2Prop","JitsiTrack","streamInactiveHandler","trackMediaType","containers","_streamInactiveHandler","_setStream","_addMediaStreamInactiveHandler","onended","oninactive","_setHandler","_unregisterHandlers","videoTrack","getVideoType","isLocalAudioTrack","getOriginalStream","getStreamId","getTrack","getTrackLabel","getTrackId","getUsageLabel","_maybeFireTrackAttached","container","_onTrackAttach","RTCUtils","_attachTTFMTracker","detach","_onTrackDetach","isScreenSharing","newAudioLevel","getMSID","trackId","setAudioOutput","JitsiLocalTrack","rtcId","_setEffectInProgress","effect","_startStreamEffect","displaySurface","getSettings","metadata","maxEnabledResolution","_constraints","_prevSetMuted","_facingMode","_trackEnded","_hasSentData","_testDataSent","_realDeviceId","_sourceName","_trackMutedTS","_onDeviceListWillChange","oldRealDeviceId","_setRealDeviceIdFromDeviceList","_onAudioOutputDeviceChanged","_initNoDataFromSourceHandlers","_addStreamToConferenceAsUnmute","_addLocalTrackAsUnmute","_fireNoDataFromSourceEvent","isReceivingData","createNoDataFromSourceEvent","_isNoDataFromSourceEventsEnabled","_queueSetMuted","setMuted","_setMuted","_removeStreamFromConferenceAsMute","successCallback","_removeLocalTrackAsMute","_sendMuteStatus","_setTrackMuteStatus","logMuteInfo","_streamEffect","_stopStreamEffect","stopStream","streamOptions","getDeviceId","getCameraFacingMode","streamsInfo","streamInfo","cont","storedMSID","_originalStream","startEffect","stopEffect","_switchCamera","_switchStreamEffect","setEffect","removeTrack","trackSettings","getDuration","getSourceName","isEnded","_stopStreamInProgress","_effectEnabled","setConference","setSourceName","unmute","found","PLAN_B_MIDS","findSimGroup","grp","findFidGroup","addSimGroupSources","sourceGroups","sourceList","findSourcebyId","relatedFidGroup","relatedSsrc","addSourcesToMline","otherSsrc","simGroup2","checkIfMlineForSsrcExists","mlines","Interop","toPlanB","sessionMedia","bLine","bundle","msidSemantic","semantic","resStr","toUnifiedPlan","currentDesc","iceRestart","newDesc","oldDesc","newMLine","oldMLine","checkForIceRestart","newIceUfrag","newIcePwd","newMline","mLineForData","ssrc2group","createSourceGroupMap","bundleOnly","existingMline","sessionVersion","resultSdp","PEER_MUTED_CHANGED","PEER_VIDEO_TYPE_CHANGED","getSourceNameForJitsiTrack","trackIdx","getMediaTypeFromSourceName","firstLetterOfMediaTypeIdx","firstLetterOfMediaType","SignalingLayer","getSSRCOwner","getPeerSourceInfo","getTrackSourceName","parsePrimarySSRC","parseSecondarySSRC","_getSSRCCount","MLineWrap","getSSRCAttrValue","ssrcNumber","attrName","ssrcObj","removeSSRC","addSSRCAttribute","findGroup","findGroups","findGroupByPrimarySSRC","primarySSRC","findSSRCByMSID","getSSRCCount","containsAnySSRCGroups","getPrimaryVideoSsrc","fecGroup","getRtxSSRC","getSSRCs","getPrimaryVideoSSRCs","videoSSRCs","ssrcGroupInfo","secondarySsrc","dumpSSRCGroups","removeGroupsWithSSRC","removeGroupsBySemantics","replaceSSRC","oldSSRC","newSSRC","addSSRCGroup","SdpTransformWrap","rawSDP","parsedSDP","selectMedia","selectedMLines","toRawSDP","LocalSdpMunger","localEndpointId","_addMutedLocalVideoTracksToSDP","transformer","localVideos","isCamera","isInPeerConnection","isMediaStreamInPc","requiredSSRCs","isSimulcastOn","simulcast","sdpConsistency","cachedPrimarySsrc","primaryCname","rtxModifier","modifyRtxSsrcs2","_generateMsidAttribute","pcId","_transformMediaIdentifiers","mediaSection","sourceToMsidMap","streamAndTrackIDs","mediaDirection","generatedMsid","maybeAddMutedLocalVideoTracksToSDP","transformStreamIdentifiers","sessionDesc","audioMLine","_injectSourceNames","updateAssociatedRtxStream","primarySsrcInfo","rtxSsrc","previousRtxSSRC","RtxModifier","correspondingRtxSsrcs","ssrcMapping","modifyRtxSsrcs","sdpStr","sdpTransformer","videoMLines","primaryVideoSsrcs","correspondingRtxSsrc","stripRtx","fidGroups","SdpConsistency","clearVideoSsrcCache","injectRecvOnly","setPrimarySsrc","hasPrimarySsrcCached","makeVideoPrimarySsrcsConsistent","newPrimarySsrc","SdpSimulcast","_ssrcCache","_fillSsrcsFromCache","cachedSsrcs","newSsrcs","_getSsrcAttribute","_generateNewSsrcsForSimulcast","addAssociatedAttributes","_generateSsrc","mungedSsrcs","mungedSsrcGroups","ttfmTrackerAudioAttached","ttfmTrackerVideoAttached","containerEvents","JitsiRemoteTrack","ownerEndpointId","hasBeenMuted","_bindTrackHandlers","_containerHandlers","_containerEventHandler","_onTrackMute","_onTrackUnmute","REMOTE_TRACK_MUTE","REMOTE_TRACK_UNMUTE","setMute","getSSRC","_setVideoType","_playCallback","getConnectionTimes","gumStart","gumEnd","gumDuration","ttfm","_getStatus","HD_BITRATE","SIM_LAYER_RIDS","TPCUtils","bitrateSettings","maxBitratesVideo","standardBitrates","low","standard","high","videoBitrates","encodingBitrates","VP8","localStreamEncodingsConfig","maxBitrate","scaleResolutionDownBy","_getStreamEncodings","ensureCorrectOrderOfSsrcs","parsedSdp","reorderedSsrcs","findTransceiver","getTransceivers","insertUnifiedPlanSimulcastReceive","simulcast_03","simulcastLine","transceiverInit","sendEncodings","addTransceiver","calculateEncodingsActiveState","localVideoTrack","newHeight","encoding","isSharingLowFpsScreen","calculateEncodingsBitrates","desktopShareBitrate","desktopBitrate","presenterEnabled","transceiver","currentDirection","trackIndex","setEncodings","parameters","getParameters","encodings","setParameters","transceivers","updateEncodingsResolution","TraceablePeerConnection","audioTransferActive","_dtmfSender","_dtmfTonesQueue","videoTransferActive","remoteTracks","_addedStreams","localSSRCs","localUfrag","remoteUfrag","_dtlsTransport","_peerVideoTypeChanged","SignalingEvents","_peerMutedChanged","safeConstraints","rtcStatsSFUP2P","tpcUtils","statsinterval","_capScreenshareBitrate","_usesUnifiedPlan","_usesTransceiverCodecPreferences","interop","localSdpMunger","getLocalEndpointId","_senderVideoMaxHeight","what","time","onTrack","evt","_remoteTrackAdded","_remoteTrackRemoved","onaddstream","_remoteStreamAdded","onremovestream","_remoteStreamRemoved","ondatachannel","_processStat","stat","statValue","endTime","dumpSDP","isAddOperation","hasLocalSource","hasAnyTracksOfType","mediaTransferActive","_getReceiversByEndpointIds","endpoints","receivers","getRemoteTracks","remoteTrackIds","getReceivers","audioReceivers","getSynchronizationSources","tracks","getLocalVideoTracks","endpointTracksByMediaType","primarySsrcs","fidLines","getTargetVideoBitrates","toUpperCase","findTrackById","RTC","isUserStreamById","onaddtrack","onremovetrack","streamAudioTracks","audioTrack","streamVideoTracks","remoteSDP","mediaLines","mls","trackSsrc","_createRemoteTrack","remoteTracksMap","userTracksByMediaType","existingTrack","isUserStream","toBeRemoved","_removeRemoteTrack","removeRemoteTracks","removedTracks","remoteTracksByMedia","_extractSSRCMap","groupsMap","groupSSRCs","_getSSRC","_injectSsrcGroupForUnifiedSimulcast","getters","audioMedia","changed","videoMedia","enforceSendRecv","_adjustRemoteMediaDirection","_isSharingScreen","DESKTOP","_mungeCodecOrder","codecPreference","VP9","bitrates","hdBitrate","webrtcStream","_addStream","generateNewStreamSSRCInfo","rtxSsrcMapping","promiseChain","_assertTrackBelongs","webRtcStream","addStream","_removeStream","removeStream","doesBelong","defaultCodec","lowFps","findSenderByKind","getSenders","negotiationNeeded","mediaActive","_ensureSimulcastGroupIsLast","localSdp","videoStartIndex","simStartIndex","otherStartIndex","simEndIndex","simStr","otherEndIndex","sdpHead","simStrTrimmed","sdpTail","_adjustLocalMediaDirection","modifiedDirection","desiredAudioDirection","desiredVideoDirection","hasRemoteSource","_mungeOpus","opusMaxAverageBitrate","mLines","OPUS","fmtpOpus","fmtpConfig","sdpChanged","maxaveragebitrate","mungedConfig","_initializeDtlsTransport","onstatechange","currentDescription","firstSsrcs","newSsrcLines","filteredLines","ssrcId","cnameLine","replaceDefaultUnifiedPlanMsid","normalizePlanB","videoSender","preference","degradationPreference","encodingsEnabledState","maxBitrates","scaleFactor","CAMERA","layer","sendTones","tones","interToneGap","rtpSender","dtmf","localAudioTrack","createDTMFSender","ontonechange","_onToneChange","toneBuffer","insertDTMF","tone","peerTracks","_removePeerConnection","_createOfferOrAnswer","isOffer","logName","handleSuccess","resolveFn","rejectFn","_processLocalSSRCsMap","handleFailure","eventType","capabilities","ULPFEC","setCodecPreferences","oaPromise","_extractPrimarySSRC","sourceIdentifier","newSSRCNum","oldSSRCNum","usernameFragment","activeStreams","currNumSsrcs","peerConnectionIdCounter","rtcTrackIdCounter","_createLocalTracks","mediaStreamMetaData","metaData","peerConnections","_lastN","_lastNEndpoints","_maxFrameHeight","_selectedEndpoints","_lastNChangeListener","_onDeviceListChanged","_updateAudioOutputForAudioTracks","_videoType","BridgeVideoType","destroy","_channelOpenListener","tracksInfo","initializeBridgeChannel","logError","msgType","_receiverVideoConstraints","oldLastNEndpoints","leavingLastNEndpoints","enteringLastNEndpoints","setNewReceiverVideoConstraints","setVideoType","sendSourceVideoType","selectEndpoints","ids","signaling","encodedInsertableStreams","sdpSemantics","bundlePolicy","newConnection","traceablePeerConnection","addLocalTrack","getLocalVideoTrack","localVideo","getLocalAudioTrack","localAudio","pcRemoteTracks","mutePromises","removeLocalTrack","elSelector","sendChannelMessage","setLastN","remoteAudioTracks","LOCAL_STATS_UPDATED","REMOTE_STATS_UPDATED","kSimulcastFormats","layers","target","targetRN","ConnectionQuality","_localStats","connectionQuality","jvbRTT","_lastConnectionQualityUpdate","_remoteStats","_timeIceConnected","_timeVideoUnmuted","ConferenceEvents","_updateLocalConnectionQuality","ConnectionQualityEvents","_broadcastLocalStats","ICE_CONNECTION_STATE_CHANGED","_updateRemoteStats","_updateLocalStats","_maybeUpdateUnmuteTime","LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED","serverRegion","bridgeCount","_calculateConnectionQuality","resolutionName","quality","activeTPC","getActivePeerConnection","videoQualitySettings","millisSinceStart","simulcastFormat","targetHeight","rampUp","getTarget","maxIncreasePerSecond","prevConnectionQuality","diffSeconds","updateLocalConnectionQuality","isConnectionInterrupted","IceFailedHandling","_actOnIceFailed","explicitlyDisabled","useTerminateForRestart","jvbConnection","jvbConnIceState","_canceled","_iceFailedTimeout","DETECTOR_STATE_CHANGE","VAD_NOISY_DEVICE","VAD_REPORT_PUBLISHED","VAD_SCORE_PUBLISHED","VAD_TALK_WHILE_MUTED","NoAudioSignalDetection","_timeoutTrigger","_hasAudioInput","_audioLevel","_trackAdded","_clearTriggerTimeout","_handleAudioInputStateChange","DetectionEvents","_handleNoAudioInputDetection","_eventFired","_audioTrack","P2PDominantSpeakerDetection","myUserID","createAudioContext","AudioContextImpl","TrackVADEmitter","procNodeSampleRate","vadProcessor","jitsiLocalTrack","_procNodeSampleRate","_vadProcessor","_localTrack","_bufferResidue","Float32Array","_audioContext","sampleRate","getRequiredPCMFrequency","_vadSampleSize","getSampleLength","_onAudioProcess","_initializeAudioContext","_audioSource","_audioProcessingNode","createScriptProcessor","audioEvent","inData","inputBuffer","getChannelData","completeInData","sampleTimestamp","pcmSample","vadScore","calculateAudioFrameVAD","score","pcmData","_connectAudioGraph","onaudioprocess","destination","_disconnectAudioGraph","_cleanupResources","getDeviceLabel","_destroyed","VADAudioAnalyser","createVADProcessor","_createVADProcessor","_vadEmitter","_isVADEmitterRunning","_detectionServices","_vadInitTracker","_processVADScore","_trackRemoved","addVADDetectionService","vadService","detector","_stopVADEmitter","_startVADEmitter","processVADScore","_changeDetectorsMuteState","changeMuteState","vadEmitter","VADNoiseDetection","_processing","_scoreArray","_audioLvlArray","_active","_calculateNoisyScore","scoreAvg","audioLevelAvg","_setActiveState","_recordValues","avgAudioLvl","_processTimeout","posAudioLevels","VADTalkMutedDetection","_calculateVADScore","E2E_RTT_CHANGED","E2E_PING_REQUEST","E2E_PING_RESPONSE","ParticipantWrapper","e2eping","requests","lastRequestId","clearIntervals","sendRequest","handleResponse","maybeSendAnalytics","isDataChannelOpen","pingIntervalMs","analyticsInterval","analyticsIntervalMs","requestId","requestMessage","timeSent","E2ePingEvents","Infinity","createE2eRttEvent","E2ePing","participantJoined","participantLeft","messageReceived","dataChannelOpened","participantWrapper","handleRequest","Jvb121EventGenerator","_jvb121","evaluateStatus","oldStatus","getParticipantCount","RecordingAdapter","exportRecordedData","setMicDevice","_getAudioStream","SariskaMediaTransport","OggAdapter","_initPromise","_initialize","_mediaRecorder","onstop","_recordedData","shouldEnable","_stream","MediaRecorder","ondataavailable","_saveMediaData","AbstractAudioContextAdapter","_sampleRate","_replaceMic","newStream","newSource","WavAdapter","_wavBuffers","_wavLength","_data","_exportMonoWAV","_isInitialized","_createWavHeader","dataLength","buffer","view","DataView","writeUTFBytes","setUint32","setUint16","channelLeft","buffers","setUint8","output","offset","inputBuffers","input","sampleCount","bufferCount","setInt16","floatTo16BitPCM","string","lng","charCodeAt","FlacAdapter","_onWorkerMessage","_encoder","_stopPromiseResolver","command","_loadWebWorker","_initWorkerPromiseResolver","bps","buf","blob","blobUrl","webkitURL","revokeObjectURL","highPrecisionTime","timing","navigationStart","SessionEventType","freeze","SESSION_STARTED","SEGMENT_STARTED","SEGMENT_ENDED","LOCAL_STORAGE_KEY","sessionManager","_loadMetadata","dataStr","dataObject","Bourne","_sessionsMetadata","_saveMetadata","createSession","sessionToken","sessionTokens","thisSession","newSessionInfo","segments","getSegments","removeSession","_constructSegments","beginSegment","getCurrentSegmentIndex","endSegment","sessionStartTime","currentSegment","commit","gapBefore","lastSegment","currentEvent","COMMAND_START","COMMAND_STOP","COMMAND_PING","PROPERTY_STATS","RECORDING_FORMATS","ControllerState","IDLE","STARTING","RECORDING","STOPPING","FAILED","RecordingController","registerEvents","getParticipantsStats","_onStartCommand","_onStopCommand","_onPingCommand","_doStartRecording","_doStopRecording","_updateStats","_switchToNewSession","_registered","addCommandListener","sendCommandOnce","onStateChanged","delegate","_onStateChanged","onNotify","_onNotify","onWarning","_onWarning","startRecording","switchFormat","removeCommand","sendCommand","_getRandomToken","_format","stopRecording","_currentSessionToken","downloadRecordedData","_adapters","fileName","base64Url","style","click","removeChild","downloadBlob","_micDeviceId","_state","_isMuted","newFormat","getLocalStats","currentSessionToken","isRecording","recordedBytes","recordedLength","recordingStats","isSelf","localId","_changeState","messageKey","messageParams","_createRecordingAdapter","ReceiverVideoConstraints","_defaultConstraints","defaultConstraints","onStageEndpoints","updateLastN","updateReceiveResolution","updateReceiverVideoConstraints","updateSelectedEndpoints","ReceiveVideoController","_rtc","startLastN","channelLastN","useNewBandwidthAllocationStrategy","remoteEndpointIds","oldConstraints","newConstraints","setPreferredReceiveMaxFrameHeight","setReceiverConstraints","isEndpointsFormat","isSourcesFormat","p2pSession","SendVideoController","layerSuspensionEnabled","enableLayerSuspension","_propagateSendMaxFrameHeight","_senderVideoConstraints","idealHeight","_getActiveMediaSession","sendMaxFrameHeight","selectSendMaxFrameHeight","activeMediaSession","preferredSendMaxFrameHeight","setPreferredSendMaxFrameHeight","getFocusRecordingUpdate","jibriStatus","recordingMode","sessionID","getHiddenDomainUpdate","liveStreamViewURLContainer","liveStreamViewURL","modeContainer","sessionIDContainer","getSessionIdFromIq","jibri","getSessionId","sessionIdContainer","isFromFocus","JibriSession","_connection","_setSessionID","setStatus","getID","_sessionID","getInitiator","_initiator","getLiveStreamViewURL","_liveStreamViewURL","getTerminator","_terminator","getMode","setError","setLiveStreamViewURL","appData","broadcastId","_createIQ","recordingXMLUtils","_setErrorFromIq","pathname","AudioOutputProblemDetector","_localAudioLevelCache","_reportedParticipants","_audioProblemCandidates","_numberOfRemoteAudioLevelsReceived","_onLocalAudioLevelsReport","_onRemoteAudioLevelReceived","_clearUserData","numberOfReports","localAudioLevels","remoteAudioLevels","localAudioLevelsString","createAudioOutputProblemEvent","AverageStatReport","calculate","appendReport","ConnectionAvgStats","avgRtpStatsReporter","_n","_sampleIdx","_avgRTT","_avgRemoteRTTMap","_avgRtpStatsReporter","_avgEnd2EndRTT","_onConnectionStats","_calculateAvgStats","_onRemoteStatsUpdated","_processRemoteStats","batchReport","jvbEnd2EndRTT","jvbStatsMonitor","avgRemoteRTT","_calculateAvgRemoteRTT","avgLocalRTT","_resetAvgStats","remoteAvg","avg","validData","rttAvg","AvgRTPStatsReporter","_avgAudioBitrateUp","_avgAudioBitrateDown","_avgVideoBitrateUp","_avgVideoBitrateDown","_avgBandwidthUp","_avgBandwidthDown","_avgPacketLossTotal","_avgPacketLossUp","_avgPacketLossDown","_avgRemoteFPS","_avgRemoteScreenFPS","_avgLocalFPS","_avgLocalScreenFPS","_avgRemoteCameraPixels","_avgRemoteScreenPixels","_avgLocalCameraPixels","_avgLocalScreenPixels","_avgCQ","_cachedTransportStats","_onLocalStatsUpdated","_maybeSendTransportAnalyticsEvent","_onP2PStatusChanged","p2pStatsMonitor","_onJvb121StatusChanged","_resetAvgJvbStats","confSize","_calculateAvgVideoFps","_calculateAvgVideoPixels","peerResolutions","peerPixelsSum","peerCount","myID","peerID","videosResolution","peerAvgPixels","_calculatePeerAvgVideoPixels","videos","peerSsrcCount","peerSsrcPixels","peerFpsSum","videosFps","peerAvgFPS","_calculatePeerAvgVideoFps","peerSsrcFps","transportStats","SpeakerStatsCollector","dominantSpeakerId","SpeakerStats","_onDominantSpeaker","_onUserJoin","_onUserLeave","_onDisplayNameChange","_onFacialExpressionAdd","oldDominantSpeaker","newDominantSpeaker","setDominantSpeaker","savedUser","markAsHasLeft","newName","setDisplayName","addFacialExpression","newStats","speakerStatsToUpdate","newParticipant","totalDominantSpeakerTime","setFacialExpressions","facialExpressions","RecordingResult","wordArray","TrackRecorder","recorder","AUDIO_WEBM","AUDIO_OGG","startRecorder","trackRecorder","stopRecorder","determineCorrectFileType","isTypeSupported","AudioRecorder","jitsiConference","recorders","fileType","instantiateTrackRecorder","updateNames","originalStream","dataEvent","recorderToRemove","getRecordingResults","getFileType","Word","word","begin","getWord","getBeginTime","getEndTime","SphinxService","recordingResult","verify","formatResponse","audioBlob","sphinxURL","toReturn","getURL","audioFileBlob","XMLHttpRequest","onreadystatechange","DONE","responseText","open","setRequestHeader","audioRecorder","objects","filler","BEFORE_STATE","RECORDING_STATE","TRANSCRIBING_STATE","FINISHED_STATE","Transcriber","transcriptionService","transcription","lineLength","blobCallBack","transcriber","getUTCMilliseconds","wordObject","maybeMerge","hasPopulatedArrays","twoDimensionalArray","callBack","merge","arrays","potentialWords","pushWordToSortedArray","lowestWordArray","wordToAdd","updateTranscription","foundSmaller","wordToCompare","getTranscription","ComponentsVersions","processVersions","mucResource","getComponentVersion","componentName","STATUS_AVAILABLE","STATUS_UNDEFINED","STATUS_BUSY","STATE_ON","STATE_OFF","STATE_PENDING","STATE_RETRYING","STATE_FAILED","ERROR_NO_CONNECTION","ERROR_SESSION_EXISTS","STATE_CHANGED","JitsiVideoSIPGWSession","sipAddress","VideoSIPGWConstants","_sendJibriIQ","setState","failureReason","oldState","addStateListener","removeStateListener","sipaddress","displayname","nodeTree","VideoSIPGW","sessionStateChangeListener","sessionStateChanged","handleJibriSIPState","Constants","failure_reason","createVideoSIPGWSession","SOURCE_INFO_PRESENCE_ELEMENT","SignalingLayerImpl","ssrcOwners","_localSourceState","_remoteSourceState","_sourceNames","_addLocalSourceInfoToPresence","_doesEndpointSendNewSourceInfo","setChatRoom","oldChatRoom","_audioMuteHandler","_videoMuteHandler","_videoTypeHandler","_sourceInfoHandler","_memberLeftHandler","_bindChatRoomEventHandlers","emitAudioMutedEvent","emitVideoMutedEvent","emitVideoTypeEvent","sourceInfoJSON","emitEventsFromHere","endpointSourceState","newMutedState","oldSourceState","newVideoType","newSourceNames","_findEndpointSourceInfoForMediaType","remoteSourceState","legacyGetPeerMediaInfo","lastPresence","mediaInfo","endpointMediaSource","existingOwner","setTrackMuteStatus","setTrackVideoType","existingName","INITIAL_STATE","localTracksDuration","startedTime","camera","desktop","FINAL_STATE","calculateLocalTrackDuration","newDuration","LocalTracksDuration","newLocalTracksDuration","createLocalTracksDurationEvent","APP","JitsiConference","eventManager","componentsVersions","dtmfManager","somebodySupportsDTMF","wasStopped","avgRtpStatsN","_audioOutputProblemDetector","speakerStatsCollector","deferredStartP2PTask","delay","backToP2PDelay","isP2PConnectionInterrupted","videoSIPGWHandler","recordingManager","_sessions","_chatRoom","getSession","_handleFocusPresence","_handleJibriPresence","_addSession","_emitSessionUpdate","_createSession","_conferenceJoinAnalyticsEventSent","isE2EESupported","_e2eEncryption","_audioSenderLimitReached","_videoSenderLimitReached","handleSubtitles","enableLocalRecording","recordingController","enableAnalytics","iAmRecorder","robot","_room","membersCount","getParticipantsWithoutHidden","resourceCreator","isAuthenticatedUser","re","codecSettings","codecSelection","_statsCurrentId","statisticsId","_onIceConnectionInterrupted","_onIceConnectionRestored","_onIceConnectionEstablished","_updateProperties","CONFERENCE_PROPERTIES_CHANGED","_sendConferenceJoinAnalyticsEvent","MEETING_ID_SET","_removeLocalSourceOnReject","_updateRoomPresence","SESSION_ACCEPT","SOURCE_ADD","SOURCE_ADD_ERROR","SOURCE_REMOVE","_registerRtcListeners","receiveVideoController","sendVideoController","_p2pConnStatusRtcMuteTimeout","_peerConnStatusRtcMuteTimeout","_peerConnStatusOutOfLastNTimeout","callStatsThreshold","statisticsDisplayName","callStatsCustomScriptUrl","callStatsConfigParams","enableTalkWhileMuted","_audioAnalyser","vadTalkMutedDetection","enableNoisyMicDetection","vadNoiseDetection","enableNoAudioDetection","_noAudioSignalDetection","hasAudioSignal","jvb121Status","p2pDominantSpeakerDetection","userRegion","transcriptionLanguage","_maybeSetSITimeout","isJoined","isP2PEnabled","isP2PTestModeEnabled","p2pTestMode","onLocalTrackRemoved","_sendConferenceLeftAnalyticsEvent","_delayedIceFailed","_maybeClearSITimeout","leaveError","_sendBridgeVideoTypeMessage","localtrack","_desktopSharingFrameRate","isAuthEnabled","isLoggedIn","getAuthLogin","getExternalAuthUrl","urlForPopup","getPerformanceStats","longTasksStats","eventId","removeCommandListener","sendTextMessage","sendPrivateTextMessage","nickKey","getTranscriber","localAudioTracks","getTranscriptionStatus","addTrackPromises","_setupNewTrack","_fireMuteChangeEvent","_fireAudioLevelChangeEvent","activeTpc","actorId","_getInitialLocalTracks","trackType","isStartAudioMuted","isStartVideoMuted","muteHandler","audioLevelHandler","oldTrackBelongsToConference","_doReplaceTrack","replaceTrackPromises","_setNewVideoType","videoTypeTagName","trackVideoType","addAsUnmutePromises","removeAsMutePromises","lock","unlock","selectParticipant","selectParticipants","isInteger","RangeError","isVideoActive","features_jigasi","countHidden","grantOwner","revokeOwner","isMyself","isMembersOnly","kickParticipant","_sessionInitiateTimeout","muteMediaType","fullJid","_updateFeatures","_maybeStartOrStopP2P","updateDTMFSupport","botParticipant","mediaSessions","tracksToBeRemoved","kickedParticipantId","kickedParticipant","transportInfo","removedTrack","_onIncomingCallP2P","rejectReason","_shouldBeInP2PMode","_rejectIncomingCall","_acceptP2PIncomingCall","_acceptJvbIncomingCall","_suspendMediaTransferForJvbConnection","webSocket","first","stopOptions","forceJvb121","p2pFailed","_stopP2PSession","isDTMFSupported","peerConnection","startTranscriber","stopTranscriber","getMeetingUniqueId","setStartMutedPolicy","policy","getStartMutedPolicy","removeLocalParticipantProperty","getLocalParticipantProperty","property","overallFeedback","detailedFeedback","getSsrcByTrack","remoteUserId","_fireIncompatibleVersionsEvent","sendEndpointMessage","broadcastEndpointMessage","sendThroughVideobridge","messageType","messageToSend","remoteID","_addRemoteJVBTracks","_addRemoteTracks","_addRemoteP2PTracks","p2pEstablishmentDuration","jvbEstablishmentDuration","forceJVB121Ratio","establishmentDurationDiff","_setP2PStatus","_removeRemoteJVBTracks","audioLimitReached","videoLimitReached","_maybeClearDeferredStartP2P","_removeRemoteTracks","_removeRemoteP2PTracks","sessionNickname","_resumeMediaTransferForJvbConnection","_startP2PSession","userLeftEvent","peers","shouldBeInP2P","myId","peersId","hasBotPeer","wasP2PEstablished","skip","presenceChanged","muteStatusChanged","videoTypeChanged","getP2PConnectionState","startP2PSession","stopP2PSession","getSpeakerStats","sendFacialExpression","perf","toggleE2EE","setMediaEncryptionKey","isLobbySupported","disableLobby","joinLobby","myLobbyUserId","sendLobbyMessage","addLobbyMessageListener","removeLobbyMessageHandler","lobbyDenyAccess","lobbyApproveAccess","isAVModerationSupported","enableAVModeration","disableAVModeration","avModerationApprove","avModerationReject","getLocalUser","pastMessage","JSON_TYPE_TRANSCRIPTION_RESULT","JSON_TYPE_TRANSLATION_RESULT","translationLanguage","transcriptMessageID","message_id","participantName","newTranscriptMessage","language","final","transcript","is_interim","stability","stable","unstable","finalText","fellowParticipantName","finalPaylaod","startLocalRecording","stopLocalRecording","startSIPVideoCall","stopSIPVideoCall","blacklist","syncWithURL","conferenceConfig","dontParse","paramStr","paramParts","firstParam","part","param","decoded","parseURLParams","connectionConfig","clientNode","enableVirtualBackground","enableNoiseCancellation","openBridgeChannel","DISCO_JIBRI_FEATURE","JitsiConnection","isDev","jwt","parseJwt","errType","errorType","errorMessage","createConnectionFailedEvent","ANALYTICS_CONNECTION_DISCONNECTED","atob","usernameOverride","passwordOverride","setToken","initJitsiConference","getLogs","DEVICE_LIST_CHANGED","PERMISSIONS_CHANGED","PERMISSION_PROMPT_IS_SHOWN","SLOW_GET_USER_MEDIA","AUDIO_PERMISSION_NAME","VIDEO_PERMISSION_NAME","_permissions","JitsiMediaDevicesEvents","_logOutputDevice","permissions","_handlePermissionsChange","_permissionsApiSupported","query","_parsePermissionState","onchange","supported","permissionStatus","deviceID","isDevicePermissionGranted","isMultipleAudioInputSupported","emitEvent","stopActiveDevices","ACTIONS","ProxyConnectionPC","receiveAudio","receiveVideo","_peerConnection","_onError","_onRemoteStream","_onSendMessage","getPeerJid","processMessage","$jingle","_onSessionAccept","_onSessionInitiate","_onSessionTerminate","_onTransportInfo","_createPeerConnection","connectionStub","pcConfigStub","roomStub","jitsiRemoteTrack","onRemoteStream","onSendMessage","PRECALL_TEST_RESULTS","_initialized","api","_loadScript","appId","appSecret","disablePrecalltest","execute","makePrecallTest","AudioMixer","_started","_streamsToMix","_streamMSSArray","addMediaStream","_mixedMSD","createMediaStreamDestination","streamMSS","timerWorkerScript","JitsiStreamPresenterEffect","videoDiv","firstVideoTrack","_canvas","_ctx","getContext","_desktopElement","_videoElement","_frameRate","autoplay","play","display","_onVideoFrameTimer","_renderVideo","_desktopStream","drawImage","beginPath","lineWidth","strokeStyle","rect","stroke","_videoFrameTimerWorker","captureStream","Module","readyPromiseResolve","moduleOverrides","ENVIRONMENT_IS_WEB","ENVIRONMENT_IS_WORKER","arguments_","importScripts","readBinary","scriptDirectory","currentScript","xhr","responseType","wasmBinary","wasmMemory","out","WebAssembly","HEAPU8","HEAP32","wasmTable","Table","ABORT","updateGlobalBufferAndViews","Int8Array","Int16Array","Int32Array","Uint16Array","Uint32Array","Float64Array","INITIAL_INITIAL_MEMORY","callRuntimeCallbacks","callbacks","func","Memory","byteLength","DYNAMICTOP_PTR","__ATPRERUN__","__ATINIT__","__ATMAIN__","__ATPOSTRUN__","runDependencies","runDependencyWatcher","dependenciesFulfilled","abort","RuntimeError","isDataURI","filename","prefix","path","wasmBinaryFile","getBinary","emscripten_realloc_buffer","grow","___wasm_call_ctors","calledRun","asmLibraryArg","dest","num","copyWithin","requestedSize","oldSize","maxHeapSize","cutDown","overGrownHeapSize","receiveInstance","removeRunDependency","receiveInstantiatedSource","instantiateArrayBuffer","binary","instantiate","instantiateStreaming","instantiateAsync","createWasm","run","doRun","postRun","preRun","runCaller","RnnoiseProcessor","wasmInterface","_wasmInterface","_wasmPcmInput","_malloc","RNNOISE_SAMPLE_LENGTH","_wasmPcmOutput","_free","_wasmPcmInputF32Index","_context","_rnnoise_create","_releaseWasmResources","_copyPCMSampleToWasmBuffer","HEAPF32","_convertTo16BitPCM","f32Array","_rnnoise_destroy","pcmFrame","pcmFrameLength","_rnnoise_process_frame","rnnoiseModule","ScreenshotCaptureEffect","_currentCanvas","_currentCanvasContext","_handleWorkerAction","_initScreenshotCapture","_streamWorker","desktopTrack","_streamHeight","_streamWidth","storedCanvasContext","getImageData","_storedImageData","_handleScreenshot","_shouldProcessScreenshot","nbPixels","diffPixels","pixelmatch","VIRTUAL_BACKGROUND_TYPE","JitsiStreamBackgroundEffect","model","virtualBackground","backgroundType","_virtualImage","crossOrigin","virtualSource","_virtualVideo","_model","_segmentationPixelCount","_onMaskFrameTimer","_outputCanvasElement","_inputVideoElement","_renderMask","runPostProcessing","_outputCanvasCtx","globalCompositeOperation","_segmentationMaskCanvas","_desktopShareDimensions","blurValue","runInference","_runInference","outputMemoryOffset","_getOutputMemoryOffset","background","person","backgroundExp","exp","personExp","_segmentationMask","_segmentationMaskCtx","putImageData","desktopShareTrack","resizeSource","_maskFrameTimerWorker","imageData","inputMemoryOffset","_getInputMemoryOffset","ImageData","onloadeddata","segmentationDimensions","getAnalyticsAttributesFromOptions","video_requested","ProxyConnectionService","jitsiConnection","_onFatalError","_convertStringToXML","_selfCloseConnection","xml","xmlDom","DOMParser","parseFromString","isVideo","convertVideoToDesktop","jitsiLocalTracks","createLocalTracks","stringifiedIq","XMLSerializer","serializeToString","onConnectionClosed","createPresenterEffect","MediaStreamTrack","createRnnoiseProcessor","rnnoiseWasmInit","mod","createScreenshotCaptureEffect","createVirtualBackgroundEffect","dispatch","tflite","wasmCheck","simd","createTFLiteSIMDModule","createTFLiteModule","modelBufferOffset","_getModelBufferMemoryOffset","modelResponse","ok","arrayBuffer","_loadModel","constants","recording","BUSY","RESOURCE_CONSTRAINT","UNEXPECTED_REQUEST","SERVICE_UNAVAILABLE","FILE","STREAM","sipVideoGW","detection","errors","errorTypes","logLevels","JitsiMediaDevices","initSDKConfig","enableAnalyticsLogging","enableWindowOnErrorHandler","getGlobalOnErrorHandler","isWebRtcSupported","addGlobalLogTransport","globalTransport","removeGlobalLogTransport","setGlobalLogOptions","oldfirePermissionPromptIsShownEvent","promiseFulfilled","firePermissionPromptIsShownEvent","fireSlowPromiseEvent","restOptions","mStream","currentlyAvailableMediaDevices","setVideoTrackContentHints","createTrackVADEmitter","localAudioDeviceId","createAudioMixer","getActiveAudioDevice","audioDevices","devicePromiseArray","micDevice","devicePromise","outcomeArray","successfulPromises","rejectedPromises","rejectReasons","deviceLabel","isCollectingLocalStats","lineno","colno","setNetworkInfo","createAnalyticsEvent","createNetworkInfoEvent","hint","contentHint","precallTest","util","AuthUtil","flat","class2type","hasOwn","fnToString","preservedScriptAttributes","nonce","noModule","rhtmlSuffix","jQuery","selector","isArrayLike","toType","isWindow","jquery","toArray","pushStack","prevObject","eq","last","even","grep","_elem","odd","extend","copy","copyIsArray","deep","isPlainObject","expando","noop","Ctor","getProto","ObjectFunctionString","isEmptyObject","globalEval","doc","script","head","parentNode","DOMEval","nodeType","nodeValue","makeArray","inArray","isXMLDoc","namespace","namespaceURI","docElem","ownerDocument","documentElement","second","invert","callbackExpect","guid","support","_i","isIE","adown","bup","contains","compareDocumentPosition","rcssescape","fcssescape","ch","asCodePoint","sel","hasDuplicate","sortOrder","duplicates","preferredDoc","msMatchesSelector","Expr","outermostContext","documentIsHTML","dirruns","classCache","createCache","tokenCache","compilerCache","nonnativeSelectorCache","identifier","whitespace","pseudos","rwhitespace","rtrim","rcomma","rcombinators","rdescend","rpseudo","ridentifier","matchExpr","ID","CLASS","TAG","ATTR","PSEUDO","CHILD","bool","needsContext","rinputs","rheader","rquickExpr","rsibling","runescape","funescape","escape","nonHex","fromCharCode","unloadHandler","setDocument","inDisabledFieldset","addCombinator","selectorError","seed","nid","newSelector","newContext","getElementById","getElementsByClassName","rbuggyQSA","testContext","tokenize","toSelector","querySelectorAll","qsaError","removeAttribute","tokens","compiled","relative","compile","cacheLength","markFunction","createInputPseudo","createButtonPseudo","createDisabledPseudo","isDisabled","createPositionalPseudo","argument","matchIndexes","subWindow","defaultView","top","elements","matchesSelector","createPseudo","className","preFilter","excess","unquoted","attrId","nodeNameSelector","expectedNodeName","operator","check","_argument","simple","ofType","outerCache","nodeIndex","parent","useCache","firstChild","lastChild","childNodes","pseudo","setFilters","not","matcher","unmatched","lang","elemLang","activeElement","hasFocus","tabIndex","checked","selected","selectedIndex","nextSibling","button","_matchIndexes","lt","gt","nth","radio","checkbox","file","image","parseOnly","soFar","preFilters","cached","combinator","checkNonElements","doneName","oldCache","newCache","elementMatcher","matchers","condense","newUnmatched","mapped","setMatcher","postFilter","postFinder","postSelector","matcherOut","preMap","postMap","preexisting","contexts","multipleContexts","matcherIn","matcherFromTokens","checkContext","leadingRelative","implicitRelative","matchContext","matchAnyContext","setMatchers","elementMatchers","bySet","byElement","superMatcher","outermost","matchedCount","setMatched","contextBackup","dirrunsUnique","matcherFromGroupMatchers","filters","access","chainable","emptyGet","bulk","removeAttr","hooks","nType","attrHooks","attrNames","rnothtmlwhite","val","isXML","lowercaseName","rfocusable","rclickable","removeProp","propHooks","tabindex","propFix","winnow","qualifier","is","rneedsContext","rootjQuery","getClass","classesToArray","global","rsingleTag","addClass","classes","cur","curValue","clazz","finalValue","stripAndCollapse","removeClass","toggleClass","stateVal","classNames","hasClass","valueIsFunction","valHooks","option","one","optionSet","isLocalStats","_userId","_isLocalStats","_dominantSpeakerStart","_hasLeft","_facialExpressions","happy","neutral","surprised","angry","fearful","disgusted","sad","getUserId","isDominantSpeaker","isNowDominantSpeaker","timeElapsed","getTotalDominantSpeakerTime","hasLeft","getFacialExpressions","onload","readbuffer","read","scriptArgs","quit","print","printErr","g","h","w","thisProgram","noExitRuntime","A","I","M","E","R","TextDecoder","S","subarray","decode","O","HEAP8","HEAP16","HEAPU16","HEAPU32","HEAPF64","INITIAL_MEMORY","C","T","P","H","ne","W","D","L","onAbort","U","preloadedImages","preloadedAudios","F","B","N","G","X","hrtime","dateNow","Y","J","te","K","Q","V","strings","USER","LOGNAME","PATH","PWD","HOME","LANG","languages","Z","mappings","printChar","varargs","getStr","get64","ee","onExit","hardwareConcurrency","asm","monitorRunDependencies","instantiateWasm","_getInputHeight","_getInputWidth","_getInputChannelCount","_getOutputHeight","_getOutputWidth","_getOutputChannelCount","___errno_location","ae","onRuntimeInitialized","preInit","getTokenAuthUrl","urlPattern","roleUpgrade","srcEvent","oldOnErrorHandler","oldOnUnhandledRejection","onunhandledrejection","errHandler","callUnhandledRejectionHandler","randomInt","randomElement","randomHexDigit","randomHexString","randomAlphanumStr","currentExecutingScript","loadScript","prepend","relativeURL","loadCallback","referenceNode","scriptEl","scriptSrc","baseScriptSrc","insertBefore","char","generateUsername","DESKTOP_HIGH_FPS","NONE","ENVIRONMENT","RECVONLY","SENDONLY","SENDRECV","CREATE_ANSWER_FAILED","CREATE_OFFER_FAILED","DATA_CHANNEL_OPEN","ENDPOINT_CONN_STATUS_CHANGED","LASTN_ENDPOINT_CHANGED","SENDER_VIDEO_CONSTRAINTS_CHANGED","LASTN_VALUE_CHANGED","LOCAL_TRACK_SSRC_UPDATED","TRACK_ATTACHED","REMOTE_TRACK_ADDED","REMOTE_TRACK_REMOVED","SET_LOCAL_DESCRIPTION_FAILED","SET_REMOTE_DESCRIPTION_FAILED","AUDIO_OUTPUT_DEVICE_CHANGED","DEVICE_LIST_WILL_CHANGE","DEVICE_LIST_AVAILABLE","LOCAL_UFRAG_CHANGED","REMOTE_UFRAG_CHANGED","ADD_ICE_CANDIDATE_FAILED","AUDIO_MUTED_BY_FOCUS","VIDEO_MUTED_BY_FOCUS","BRIDGE_DOWN","CALL_ACCEPTED","CALL_INCOMING","CALL_ENDED","CHAT_ERROR_RECEIVED","SETTINGS_ERROR_RECEIVED","CONNECTION_ICE_FAILED","CONNECTION_RESTARTED","CONNECTION_STATUS_CHANGED","EMUC_ROOM_ADDED","EMUC_ROOM_REMOVED","ETHERPAD","ICE_RESTARTING","ICE_RESTART_SUCCESS","LOCAL_ROLE_CHANGED","INVITE_MESSAGE_RECEIVED","MUC_MEMBER_BOT_TYPE_CHANGED","MUC_DESTROYED","MUC_JOIN_IN_PROGRESS","MUC_JOINED","MUC_MEMBER_JOINED","MUC_MEMBER_LEFT","MUC_LOBBY_MEMBER_JOINED","MUC_LOBBY_MEMBER_UPDATED","MUC_LOBBY_MEMBER_LEFT","MUC_DENIED_ACCESS","MUC_LEFT","MUC_ROLE_CHANGED","MUC_LOCK_CHANGED","MUC_MEMBERS_ONLY_CHANGED","PARTICIPANT_AUDIO_MUTED","PARTICIPANT_VIDEO_MUTED","PARTICIPANT_VIDEO_TYPE_CHANGED","PARTICIPANT_FEATURES_CHANGED","PRESENCE_RECEIVED","PRESENCE_STATUS","PROMPT_FOR_LOGIN","READY_TO_JOIN","REMOTE_STATS","RENEGOTIATION_FAILED","ROOM_CONNECT_ERROR","ROOM_CONNECT_NOT_ALLOWED_ERROR","ROOM_JOIN_ERROR","ROOM_CONNECT_MEMBERS_ONLY_ERROR","ROOM_MAX_USERS_ERROR","SENDING_CHAT_MESSAGE","SENDING_PRIVATE_CHAT_MESSAGE","SESSION_ACCEPT_ERROR","SESSION_ACCEPT_TIMEOUT","SOURCE_REMOVE_ERROR","SPEAKER_STATS_RECEIVED","CONFERENCE_TIMESTAMP_RECEIVED","AV_MODERATION_RECEIVED","BREAKOUT_ROOMS_EVENT","START_MUTED_FROM_FOCUS","TRANSPORT_INFO","JSON_MESSAGE_RECEIVED","b64","lens","getLens","validLen","placeHoldersLen","toByteArray","Arr","_byteLength","curByte","revLookup","fromByteArray","uint8","extraBytes","maxChunkLength","len2","encodeChunk","lookup","enumerable","toStringTag","__esModule","default","getFirstMatch","getSecondMatch","matchAndReturnConst","getWindowsVersionName","getMacOSVersionName","getAndroidVersionName","getVersionPrecision","compareVersions","getBrowserAlias","BROWSER_ALIASES_MAP","getBrowserTypeByAlias","BROWSER_MAP","ENGINE_MAP","OS_MAP","PLATFORMS_MAP","Bada","BlackBerry","Chrome","Chromium","Epiphany","Firefox","Focus","Generic","Googlebot","Maxthon","Opera","PhantomJS","Puffin","QupZilla","QQ","QQLite","Safari","Sailfish","SeaMonkey","Sleipnir","Swing","Tizen","Vivaldi","WeChat","Roku","amazon_silk","android","bada","blackberry","chrome","epiphany","firefox","generic","googlebot","google_search","ie","k_meleon","maxthon","edge","mz","naver","opera","opera_coast","phantomjs","puffin","qupzilla","qq","qqlite","safari","sailfish","samsung_internet","seamonkey","sleipnir","swing","tizen","uc","vivaldi","webos","wechat","yandex","tablet","mobile","tv","WindowsPhone","Windows","MacOS","iOS","Android","WebOS","Linux","ChromeOS","PlayStation4","EdgeHTML","Blink","Trident","Presto","Gecko","WebKit","configurable","getParser","getResult","_ua","parsedResult","getUA","parseBrowser","describe","getBrowser","getOS","os","parseOS","getOSName","getOSVersion","getPlatform","parsePlatform","getPlatformType","getEngine","engine","parseEngine","getEngineName","isOS","isPlatform","isBrowser","compareVersion","versionName","vendor","scriptReadyRegex","fullPageUrl","pageUrl","scripts","supportsScriptReadyState","isNotOpera","hasNativeCurrentScriptAccessor","stackTraceLimit","hasStackBeforeThrowing","hasStackAfterThrowing","getScriptUrlFromStack","skipStackDepth","ignoreMessage","_nearestExecutingScript","eligibleScripts","getScriptFromUrl","getSoleInlineScript","thrownErr","near","far","ReflectOwnKeys","Reflect","ReflectApply","ownKeys","getOwnPropertySymbols","getOwnPropertyNames","NumberIsNaN","errorListener","resolver","eventTargetAgnosticAddListener","addErrorHandlerIfEventEmitter","_events","_eventsCount","_maxListeners","defaultMaxListeners","checkListener","_getMaxListeners","_addListener","existing","warning","newListener","warned","onceWrapper","fired","wrapFn","_onceWrap","wrapped","_listeners","unwrap","evlistener","unwrapListeners","arrayClone","listenerCount","wrapListener","getPrototypeOf","setMaxListeners","getMaxListeners","doError","er","prependListener","prependOnceListener","position","originalListener","spliceOne","rawListeners","eventNames","WINDOW","JS_MD5_NO_WINDOW","WEB_WORKER","NODE_JS","JS_MD5_NO_NODE_JS","COMMON_JS","JS_MD5_NO_COMMON_JS","AMD","ARRAY_BUFFER","JS_MD5_NO_ARRAY_BUFFER","HEX_CHARS","EXTRA","SHIFT","OUTPUT_TYPES","BASE64_ENCODE_CHAR","blocks","buffer8","JS_MD5_NO_ARRAY_BUFFER_IS_VIEW","isView","createOutputMethod","outputType","Md5","update","createMethod","method","nodeWrap","eval","Buffer","nodeMethod","createHash","digest","sharedMemory","h0","h1","h2","h3","bytes","hBytes","finalized","hashed","notString","lastByteIndex","finalize","bc","da","hex","base64","v1","v2","v3","base64Str","md5","HASH_UNDEFINED","argsTag","boolTag","dateTag","funcTag","genTag","mapTag","numberTag","objectTag","promiseTag","regexpTag","setTag","stringTag","symbolTag","weakMapTag","arrayBufferTag","dataViewTag","float32Tag","float64Tag","int8Tag","int16Tag","int32Tag","uint8Tag","uint8ClampedTag","uint16Tag","uint32Tag","reFlags","reIsHostCtor","reIsUint","cloneableTags","freeGlobal","freeSelf","freeExports","freeModule","moduleExports","addMapEntry","pair","addSetEntry","arrayReduce","iteratee","accumulator","initAccum","isHostObject","mapToArray","overArg","setToArray","uid","arrayProto","funcProto","objectProto","coreJsData","maskSrcKey","IE_PROTO","funcToString","objectToString","reIsNative","getPrototype","objectCreate","propertyIsEnumerable","nativeGetSymbols","nativeIsBuffer","isBuffer","nativeKeys","getNative","WeakMap","nativeCreate","dataViewCtorString","toSource","mapCtorString","promiseCtorString","setCtorString","weakMapCtorString","symbolProto","symbolValueOf","valueOf","Hash","entry","ListCache","MapCache","Stack","__data__","assignValue","object","objValue","assocIndexOf","baseClone","isDeep","isFull","customizer","isObject","isArr","initCloneArray","copyArray","getTag","isFunc","cloneBuffer","isPrototype","initCloneObject","copyObject","getSymbols","copySymbols","baseAssign","cloneFunc","symbol","cloneArrayBuffer","dataView","byteOffset","cloneDataView","typedArray","cloneTypedArray","cloneMap","regexp","lastIndex","cloneRegExp","cloneSet","initCloneByTag","stacked","props","keysFunc","symbolsFunc","arrayPush","baseGetAllKeys","getAllKeys","arrayEach","subValue","getMapData","getValue","isFunction","baseIsNative","pairs","LARGE_ARRAY_SIZE","isIndex","other","ctorString","isLength","inherited","isObjectLike","isArrayLikeObject","isArguments","baseTimes","skipIndexes","arrayLikeKeys","baseKeys","reTrim","reIsBadHex","reIsBinary","reIsOctal","freeParseInt","nativeMax","nativeMin","toNumber","isSymbol","isBinary","wait","lastArgs","lastThis","maxWait","timerId","lastCallTime","lastInvokeTime","leading","maxing","trailing","invokeFunc","thisArg","leadingEdge","timerExpired","shouldInvoke","timeSinceLastCall","trailingEdge","remainingWait","debounced","isInvoking","arrayTag","errorTag","typedArrayTags","freeProcess","nodeUtil","binding","nodeIsTypedArray","isTypedArray","arraySome","predicate","nativeObjectToString","symToStringTag","SetCache","baseGetTag","isOwn","unmasked","getRawTag","baseIsArguments","baseIsEqual","bitmask","equalFunc","objIsArr","othIsArr","objTag","othTag","objIsObj","othIsObj","isSameTag","equalArrays","convert","isPartial","equalByTag","objIsWrapped","othIsWrapped","objUnwrapped","othUnwrapped","objProps","objLength","skipCtor","othValue","compared","objCtor","othCtor","equalObjects","baseIsEqualDeep","arrLength","othLength","seen","arrValue","othIndex","isMasked","resIndex","arrayFilter","baseUnary","isArg","isBuff","isType","img1","img2","isPixelData","defaultOptions","a32","b32","identical","diffMask","drawGrayPixel","alpha","maxDelta","delta","colorDelta","includeAA","antialiased","drawPixel","diffColorAlt","diffColor","aaColor","BYTES_PER_ELEMENT","img","x1","y1","x0","y0","x2","y2","minX","minY","maxX","maxY","zeroes","hasManySiblings","pos2","yOnly","r1","g1","b1","a1","r2","g2","b2","a2","blend","rgb2y","rgb2i","rgb2q","SDPUtils","localCName","generateIdentifier","splitLines","splitSections","getDescription","sections","getMediaSections","matchPrefix","parseCandidate","relatedAddress","relatedPort","tcpType","writeCandidate","parseIceOptions","parseRtpMap","parsed","clockRate","numChannels","writeRtpMap","preferredPayloadType","writeExtmap","headerExtension","preferredId","kv","writeFmtp","parseRtcpFb","writeRtcpFb","rtcpFeedback","parseSsrcMedia","sp","colon","parseSsrcGroup","getMid","algorithm","getDtlsParameters","fingerprints","writeDtlsParameters","setupType","fp","parseCryptoLine","cryptoSuite","keyParams","sessionParams","writeCryptoLine","writeCryptoKeyParams","parseCryptoKeyParams","keyMethod","keySalt","lifeTime","mkiValue","mkiLength","getCryptoParameters","getIceParameters","writeIceParameters","iceLite","parseRtpParameters","headerExtensions","fecMechanisms","rtcp","rtpmapline","fmtps","writeRtpDescription","maxptime","extension","parseRtpEncodingParameters","encodingParameters","hasRed","hasUlpfec","flows","apt","encParam","codecPayloadType","rtx","fec","mechanism","parseRtcpParameters","rtcpParameters","remoteSsrc","rsize","reducedSize","compound","mux","writeRtcpParameters","parseMsid","spec","planB","msidParts","parseSctpDescription","maxSizeLine","sctpPort","sctpMapLines","writeSctpDescription","generateSessionId","writeSessionBoilerplate","sessId","sessVer","sessUser","getDirection","getKind","isRejected","parseOLine","netType","addressType","isValidSDP","charAt","global$1","_typeof","_toConsumableArray","arr2","_arrayWithoutHoles","iter","_iterableToArray","_nonIterableSpread","safe_add","lsw","str2binl","bin","md5_cmn","cnt","md5_ff","md5_gg","md5_hh","md5_ii","core_md5","olda","oldb","oldc","oldd","MD5","hexdigest","binarray","hex_tab","binl2hex","binl2str","core_sha1","olde","rol","safe_add$1","sha1_ft","sha1_kt","core_hmac_sha1","bkey","str2binb","ipad","opad","binb2b64","triplet","binb2str","SHA1","b64_hmac_sha1","str_hmac_sha1","str_sha1","utils","cookies","cookieName","expires","cookieObj","isObj","cookieValue","unescape","cookie","Builder","VERSION","NS","HTTPBIND","BOSH","CLIENT","AUTH","ROSTER","PROFILE","DISCO_INFO","DISCO_ITEMS","MUC","SASL","FRAMING","BIND","SESSION","STANZAS","XHTML_IM","XHTML","tags","css","validTag","validAttribute","validCSS","CONNECTING","CONNFAIL","AUTHENTICATING","AUTHFAIL","DISCONNECTED","DISCONNECTING","ATTACHED","REDIRECT","CONNTIMEOUT","BINDREQUIRED","ErrorCondition","BAD_FORMAT","CONFLICT","MISSING_JID_NODE","NO_AUTH_MECH","UNKNOWN_REASON","LogLevel","FATAL","ElementType","NORMAL","TEXT","CDATA","FRAGMENT","SECONDARY_TIMEOUT","addNamespace","forEachChild","elemName","childNode","isTagEqual","_xmlGenerator","_makeGenerator","implementation","createDocument","documentMode","_getIEXmlDom","xmlGenerator","docStrings","ActiveXObject","xmlTextNode","xmlescape","xmlunescape","createTextNode","xmlHtmlNode","html","loadXML","getText","copyElement","createHtml","cssText","cssAttrs","cssName","cssValue","_i2","createDocumentFragment","_i3","_i4","escapeNode","unescapeNode","getNodeFromJid","getDomainFromJid","bare","getBareJidFromJid","getResourceFromJid","_handleError","fatal","sourceURL","lineNumber","getNamedItem","_requestId","_connectionPlugins","ptype","moreattrs","impNode","xmlGen","importNode","newElem","fragment","xhtml","Handler","ns","matchBare","matchBareFromJid","getNamespace","elNamespace","ignoreNamespaceFragment","namespaceMatch","_this","nsMatch","isMatch","elem_type","TimedHandler","period","lastCalled","Connection","_this2","Websocket","Bosh","_sasl_data","do_session","do_bind","timedHandlers","removeTimeds","removeHandlers","addTimeds","addHandlers","protocolErrorHandlers","_idleTimeout","_disconnectTimeout","authenticated","do_authentication","restored","_uniqueId","_sasl_success_handler","_sasl_failure_handler","_sasl_challenge_handler","_onIdle","registerSASLMechanisms","mechanisms","_reset","_requests","getUniqueId","suffix","addProtocolErrorHandler","status_code","hold","route","authcid","authzid","servtype","connect_callback","wind","_attach","restore","_sessionCachingSupported","_restore","sessionStorage","xmlInput","xmlOutput","nextValidRid","_queueData","_this3","timeoutHandler","deleteTimedHandler","addTimedHandler","_this4","iqtype","_sendRestart","_this5","thand","handRef","hand","SASLAnonymous","SASLExternal","SASLMD5","SASLOAuthBearer","SASLXOAuth2","SASLPlain","SASLSHA1","registerSASLMechanism","_addSysTimedHandler","_onDisconnectTimeout","_disconnect","condition","statusChanged","_dataRecv","_this6","_reqToData","strip","_emptyQueue","cond","conflict","UNKOWN_REASON","_i5","_hand","_connect_cb","_callback","bodyWrap","mech","_no_auth_received","sortMechanismsByPriority","higher","swap","_attemptSASLAuth","_attemptLegacyAuth","mechanism_found","_sasl_success_cb","_sasl_failure_cb","_sasl_challenge_cb","_sasl_mechanism","onStart","request_auth_exchange","isClientFirst","onChallenge","btoa","challenge","_onLegacyAuthIQResult","_auth2_cb","_this7","serverSignature","streamfeature_handlers","wrapper","_onStreamFeaturesAfterSASL","explicitResourceBinding","_onResourceBindResultIQ","jidNode","_establishSession","_onSessionResultIQ","_this8","_i6","_thand","SASLMechanism","auth_str","test_cnonce","cnonce","Hi","U_old","authMessage","attribMatch","clientKey","serverKey","clientSignature","_quote","realm","host","digest_uri","cred","A1","A2","core","Strophe$1","$build$1","Request","sends","xmlData","origFunc","date","NaN","dead","age","timeDead","_newXHR","getResponse","responseXML","overrideMimeType","_conn","inactivity","keepalive","_cacheSession","_onRequestStateChange","_throttledRequestHandler","typ","_sendTerminate","_callProtocolErrorHandlers","reqStatus","_getRequestStatus","err_callback","HTTP","_hitError","time_elapsed","def","getAllResponseHeaders","valid_request","too_many_retries","_removeRequest","reqIs0","_restartRequest","_processRequest","primary_timeout","secondary_timeout","server_error","content_type","contentType","withCredentials","e2","sendFunc","customHeaders","backoff","Strophe$2","$build$2","new_service","_buildStream","_check_streamerror","connectstatus","errorString","_onOpen","_connect_cb_wrapper","_handleStreamStart","streamStart","parsedMessage","see_uri","_streamWrap","CLOSED","closeString","rawStanza","startString","strophe_js","_items","conn","_onDiscoInfo","_onDiscoItems","addIdentity","var_name","addItem","call_back","items","_buildIQResult","query_attrs","iqresult","logging","autoSendCountOnEveryIncomingStanza","requestResponseInterval","_c","_NS","_isStreamManagementEnabled","_serverProcesssedStanzasCounter","_clientProcessedStanzasCounter","_clientSentStanzasCounter","_originalXMLOutput","_requestHandler","_incomingHandler","_requestResponseIntervalCount","_isSupported","_unacknowledgedStanzas","_acknowledgedStanzaListeners","addAcknowledgedStanzaListener","_resumeToken","_resuming","_originalConnect","_connectArgs","requestAcknowledgement","getOutgoingCounter","getIncomingCounter","_interceptConnectArgs","_originalOnStreamFeaturesAfterSASL","_originalDoDisconnect","_interceptDoDisconnect","_originalDisconnect","_interceptDisconnect","_resumeState","_storedJid","previd","_handleServerRequestHandler","_ackHandler","_handleServerAck","_incomingStanzaHandler","_enabledHandler","_handleEnabled","_resumeFailedHandler","_handleResumeFailed","_resumedHandler","_handleResumed","_increaseSentStanzasCounter","firstElementChild","handledCount","_handleAcknowledgedStanzas","_increaseReceivedStanzasCounter","_answerProcessedStanzas","reportedHandledCount","lastKnownHandledCount","_throwError","byteToHex","bth","_v","_v2","_v3","_v4","_interopRequireDefault","getOutputLength","inputLength8","safeAdd","md5cmn","md5ff","md5gg","md5hh","md5ii","encodeURIComponent","length32","hexTab","md5ToHexEncodedArray","wordsToMd5","length8","bytesToWords","rnds8","msCrypto","ROTL","ceil","_rng","_bytesToUuid","_nodeId","_clockseq","_lastMSecs","_lastNSecs","clockseq","seedBytes","rng","msecs","nsecs","dt","tl","tmh","_md","_default","hashfunc","generateUUID","stringToBytes","uuidToBytes","DNS","rnds","_sha","validate","Instance","of","supportStreaming","bigInt","exceptions","mutableGlobal","multiValue","saturateConversions","signExtensions","tailCall","threads","references","typeReflection","funcReferences","logDisabled_","deprecationWarnings_","extractVersion","uastring","wrapPeerConnectionEvent","eventNameToWrap","nativeAddEventListener","nativeEventName","modifiedEvent","handleEvent","_eventMap","nativeRemoveEventListener","unwrappedCb","disableLog","disableWarnings","deprecated","oldMethod","newMethod","compactObject","walkStats","resultSet","filterStats","outbound","streamStatsType","filteredResult","trackStats","trackStat","shimGetUserMedia","browserDetails","constraintsToChrome_","cc","exact","oldname_","oc","mix","advanced","shimConstraints_","remap","face","getSupportedFacingModeLies","getSupportedConstraints","dev","shimError_","PermissionDeniedError","PermissionDismissedError","InvalidStateError","DevicesNotFoundError","ConstraintNotSatisfiedError","TrackStartError","MediaDeviceFailedDueToShutdown","MediaDeviceKillSwitchOn","TabCaptureError","ScreenCaptureError","DeviceCaptureError","webkitGetUserMedia","origGetUserMedia","DOMException","shimGetDisplayMedia","getSourceId","widthSpecified","heightSpecified","frameRateSpecified","shimMediaStream","webkitMediaStream","shimOnTrack","_ontrack","origSetRemoteDescription","_ontrackpoly","Event","dispatchEvent","shimGetSendersWithDtmf","shimSenderWithDtmf","_dtmf","_pc","_senders","origAddTrack","origRemoveTrack","origAddStream","origRemoveStream","origGetSenders","shimGetStats","origGetStats","onSucc","onErr","fixChromeStats_","standardReport","standardStats","localcandidate","remotecandidate","makeMapStats","successCallbackWrapper_","shimSenderReceiverGetStats","origGetReceivers","srcElement","shimAddTrackRemoveTrackWithNative","getLocalStreams","_shimmedLocalStreams","existingSenders","newSenders","newSender","shimAddTrackRemoveTrack","origGetLocalStreams","nativeStreams","_reverseStreams","_streams","replaceInternalStreamId","internalId","externalStream","internalStream","replaceExternalStreamId","alreadyExists","oldStream","nativeMethod","methodObj","origSetLocalDescription","origLocalDescription","getOwnPropertyDescriptor","streamid","shimPeerConnection","webkitRTCPeerConnection","fixNegotiationNeeded","getConfiguration","nativeGetUserMedia","nativeGetSettings","applyConstraints","nativeApplyConstraints","preferredMediaSource","mediaSource","RTCTrackEvent","mozRTCPeerConnection","modernStatsTypes","inboundrtp","outboundrtp","candidatepair","nativeGetStats","shimSenderGetStats","shimReceiverGetStats","shimRemoveStream","shimRTCDataChannel","DataChannel","RTCDataChannel","shimAddTransceiver","origAddTransceiver","setParametersPromises","initParameters","shouldPerformCheck","encodingParam","maxFramerate","shimGetParameters","origGetParameters","shimCreateOffer","origCreateOffer","finally","shimCreateAnswer","origCreateAnswer","shimLocalStreamsAPI","_localStreams","_addTrack","shimRemoteStreamsAPI","getRemoteStreams","_remoteStreams","_onaddstream","_onaddstreampoly","shimCallbacksAPI","withCallback","shimConstraints","errcb","shimRTCIceServerUrls","OrigPeerConnection","newIceServers","generateCertificate","shimTrackEventTransceiver","shimCreateOfferLegacy","offerOptions","audioTransceiver","setDirection","videoTransceiver","shimAudioContext","shimRTCIceCandidate","NativeRTCIceCandidate","nativeCandidate","parsedCandidate","augmentedCandidate","toJSON","shimMaxMessageSize","_sctp","sctpInDescription","getRemoteFirefoxVersion","getCanSendMaxMessageSize","remoteIsFirefox","canSendMaxMessageSize","getMaxMessageSize","canSendMMS","remoteMMS","POSITIVE_INFINITY","shimSendThrowTypeError","wrapDcSend","dc","origDataChannelSend","origCreateDataChannel","dataChannel","shimConnectionState","checking","_onconnectionstatechange","origMethod","_connectionstatechangepoly","_lastConnectionState","newEvent","removeExtmapAllowMixed","nativeSRD","shimAddIceCandidateNullOrEmpty","nativeAddIceCandidate","adapter","shimChrome","shimFirefox","shimSafari","mozGetUserMedia","isSecureContext","RTCIceGatherer","commonShim","browserShim","adapterFactory","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","loaded","__webpack_modules__","amdO","getter","definition","globalThis","nmd","paths","__webpack_exports__"],"sourceRoot":""}